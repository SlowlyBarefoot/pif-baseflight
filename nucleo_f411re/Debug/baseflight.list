
baseflight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000249f8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003da0  08024b90  08024b90  00034b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028930  08028930  000400fc  2**0
                  CONTENTS
  4 .ARM          00000008  08028930  08028930  00038930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028938  08028938  000400fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028938  08028938  00038938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802893c  0802893c  0003893c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08028940  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000217c  20000100  08028a3c  00040100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000227c  08028a3c  0004227c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042602  00000000  00000000  0004012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000098da  00000000  00000000  0008272e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025e0  00000000  00000000  0008c008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000022d0  00000000  00000000  0008e5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020515  00000000  00000000  000908b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035afe  00000000  00000000  000b0dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9a4b  00000000  00000000  000e68cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00190316  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a8a8  00000000  00000000  00190368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000100 	.word	0x20000100
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08024b78 	.word	0x08024b78

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000104 	.word	0x20000104
 80001d4:	08024b78 	.word	0x08024b78

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	; 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	3c01      	subs	r4, #1
 8000338:	bf28      	it	cs
 800033a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800033e:	d2e9      	bcs.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__gedf2>:
 8000998:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800099c:	e006      	b.n	80009ac <__cmpdf2+0x4>
 800099e:	bf00      	nop

080009a0 <__ledf2>:
 80009a0:	f04f 0c01 	mov.w	ip, #1
 80009a4:	e002      	b.n	80009ac <__cmpdf2+0x4>
 80009a6:	bf00      	nop

080009a8 <__cmpdf2>:
 80009a8:	f04f 0c01 	mov.w	ip, #1
 80009ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009bc:	bf18      	it	ne
 80009be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c2:	d01b      	beq.n	80009fc <__cmpdf2+0x54>
 80009c4:	b001      	add	sp, #4
 80009c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ca:	bf0c      	ite	eq
 80009cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d0:	ea91 0f03 	teqne	r1, r3
 80009d4:	bf02      	ittt	eq
 80009d6:	ea90 0f02 	teqeq	r0, r2
 80009da:	2000      	moveq	r0, #0
 80009dc:	4770      	bxeq	lr
 80009de:	f110 0f00 	cmn.w	r0, #0
 80009e2:	ea91 0f03 	teq	r1, r3
 80009e6:	bf58      	it	pl
 80009e8:	4299      	cmppl	r1, r3
 80009ea:	bf08      	it	eq
 80009ec:	4290      	cmpeq	r0, r2
 80009ee:	bf2c      	ite	cs
 80009f0:	17d8      	asrcs	r0, r3, #31
 80009f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009f6:	f040 0001 	orr.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__cmpdf2+0x64>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d107      	bne.n	8000a1c <__cmpdf2+0x74>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d1d6      	bne.n	80009c4 <__cmpdf2+0x1c>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d0d3      	beq.n	80009c4 <__cmpdf2+0x1c>
 8000a1c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdrcmple>:
 8000a24:	4684      	mov	ip, r0
 8000a26:	4610      	mov	r0, r2
 8000a28:	4662      	mov	r2, ip
 8000a2a:	468c      	mov	ip, r1
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4663      	mov	r3, ip
 8000a30:	e000      	b.n	8000a34 <__aeabi_cdcmpeq>
 8000a32:	bf00      	nop

08000a34 <__aeabi_cdcmpeq>:
 8000a34:	b501      	push	{r0, lr}
 8000a36:	f7ff ffb7 	bl	80009a8 <__cmpdf2>
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	bf48      	it	mi
 8000a3e:	f110 0f00 	cmnmi.w	r0, #0
 8000a42:	bd01      	pop	{r0, pc}

08000a44 <__aeabi_dcmpeq>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff fff4 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a4c:	bf0c      	ite	eq
 8000a4e:	2001      	moveq	r0, #1
 8000a50:	2000      	movne	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmplt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffea 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmple>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffe0 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpge>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffce 	bl	8000a24 <__aeabi_cdrcmple>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpgt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffc4 	bl	8000a24 <__aeabi_cdrcmple>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2uiz>:
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	d211      	bcs.n	8000b20 <__aeabi_d2uiz+0x28>
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d211      	bcs.n	8000b26 <__aeabi_d2uiz+0x2e>
 8000b02:	d50d      	bpl.n	8000b20 <__aeabi_d2uiz+0x28>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d40e      	bmi.n	8000b2c <__aeabi_d2uiz+0x34>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d102      	bne.n	8000b32 <__aeabi_d2uiz+0x3a>
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_d2f>:
 8000b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b40:	bf24      	itt	cs
 8000b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4a:	d90d      	bls.n	8000b68 <__aeabi_d2f+0x30>
 8000b4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b6c:	d121      	bne.n	8000bb2 <__aeabi_d2f+0x7a>
 8000b6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b72:	bfbc      	itt	lt
 8000b74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	4770      	bxlt	lr
 8000b7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b82:	f1c2 0218 	rsb	r2, r2, #24
 8000b86:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	bf18      	it	ne
 8000b94:	f040 0001 	orrne.w	r0, r0, #1
 8000b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba4:	ea40 000c 	orr.w	r0, r0, ip
 8000ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb0:	e7cc      	b.n	8000b4c <__aeabi_d2f+0x14>
 8000bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb6:	d107      	bne.n	8000bc8 <__aeabi_d2f+0x90>
 8000bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bc6:	4770      	bxne	lr
 8000bc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_frsub>:
 8000bd8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	e002      	b.n	8000be4 <__addsf3>
 8000bde:	bf00      	nop

08000be0 <__aeabi_fsub>:
 8000be0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000be4 <__addsf3>:
 8000be4:	0042      	lsls	r2, r0, #1
 8000be6:	bf1f      	itttt	ne
 8000be8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bec:	ea92 0f03 	teqne	r2, r3
 8000bf0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bf4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf8:	d06a      	beq.n	8000cd0 <__addsf3+0xec>
 8000bfa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bfe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c02:	bfc1      	itttt	gt
 8000c04:	18d2      	addgt	r2, r2, r3
 8000c06:	4041      	eorgt	r1, r0
 8000c08:	4048      	eorgt	r0, r1
 8000c0a:	4041      	eorgt	r1, r0
 8000c0c:	bfb8      	it	lt
 8000c0e:	425b      	neglt	r3, r3
 8000c10:	2b19      	cmp	r3, #25
 8000c12:	bf88      	it	hi
 8000c14:	4770      	bxhi	lr
 8000c16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c22:	bf18      	it	ne
 8000c24:	4240      	negne	r0, r0
 8000c26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c32:	bf18      	it	ne
 8000c34:	4249      	negne	r1, r1
 8000c36:	ea92 0f03 	teq	r2, r3
 8000c3a:	d03f      	beq.n	8000cbc <__addsf3+0xd8>
 8000c3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c40:	fa41 fc03 	asr.w	ip, r1, r3
 8000c44:	eb10 000c 	adds.w	r0, r0, ip
 8000c48:	f1c3 0320 	rsb	r3, r3, #32
 8000c4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c54:	d502      	bpl.n	8000c5c <__addsf3+0x78>
 8000c56:	4249      	negs	r1, r1
 8000c58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c60:	d313      	bcc.n	8000c8a <__addsf3+0xa6>
 8000c62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c66:	d306      	bcc.n	8000c76 <__addsf3+0x92>
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c6e:	f102 0201 	add.w	r2, r2, #1
 8000c72:	2afe      	cmp	r2, #254	; 0xfe
 8000c74:	d251      	bcs.n	8000d1a <__addsf3+0x136>
 8000c76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c7e:	bf08      	it	eq
 8000c80:	f020 0001 	biceq.w	r0, r0, #1
 8000c84:	ea40 0003 	orr.w	r0, r0, r3
 8000c88:	4770      	bx	lr
 8000c8a:	0049      	lsls	r1, r1, #1
 8000c8c:	eb40 0000 	adc.w	r0, r0, r0
 8000c90:	3a01      	subs	r2, #1
 8000c92:	bf28      	it	cs
 8000c94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c98:	d2ed      	bcs.n	8000c76 <__addsf3+0x92>
 8000c9a:	fab0 fc80 	clz	ip, r0
 8000c9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ca2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ca6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000caa:	bfaa      	itet	ge
 8000cac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cb0:	4252      	neglt	r2, r2
 8000cb2:	4318      	orrge	r0, r3
 8000cb4:	bfbc      	itt	lt
 8000cb6:	40d0      	lsrlt	r0, r2
 8000cb8:	4318      	orrlt	r0, r3
 8000cba:	4770      	bx	lr
 8000cbc:	f092 0f00 	teq	r2, #0
 8000cc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cc4:	bf06      	itte	eq
 8000cc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cca:	3201      	addeq	r2, #1
 8000ccc:	3b01      	subne	r3, #1
 8000cce:	e7b5      	b.n	8000c3c <__addsf3+0x58>
 8000cd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd8:	bf18      	it	ne
 8000cda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cde:	d021      	beq.n	8000d24 <__addsf3+0x140>
 8000ce0:	ea92 0f03 	teq	r2, r3
 8000ce4:	d004      	beq.n	8000cf0 <__addsf3+0x10c>
 8000ce6:	f092 0f00 	teq	r2, #0
 8000cea:	bf08      	it	eq
 8000cec:	4608      	moveq	r0, r1
 8000cee:	4770      	bx	lr
 8000cf0:	ea90 0f01 	teq	r0, r1
 8000cf4:	bf1c      	itt	ne
 8000cf6:	2000      	movne	r0, #0
 8000cf8:	4770      	bxne	lr
 8000cfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cfe:	d104      	bne.n	8000d0a <__addsf3+0x126>
 8000d00:	0040      	lsls	r0, r0, #1
 8000d02:	bf28      	it	cs
 8000d04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d08:	4770      	bx	lr
 8000d0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d0e:	bf3c      	itt	cc
 8000d10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bxcc	lr
 8000d16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d22:	4770      	bx	lr
 8000d24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d28:	bf16      	itet	ne
 8000d2a:	4608      	movne	r0, r1
 8000d2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d30:	4601      	movne	r1, r0
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	bf06      	itte	eq
 8000d36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d3a:	ea90 0f01 	teqeq	r0, r1
 8000d3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_ui2f>:
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e004      	b.n	8000d54 <__aeabi_i2f+0x8>
 8000d4a:	bf00      	nop

08000d4c <__aeabi_i2f>:
 8000d4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d50:	bf48      	it	mi
 8000d52:	4240      	negmi	r0, r0
 8000d54:	ea5f 0c00 	movs.w	ip, r0
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d60:	4601      	mov	r1, r0
 8000d62:	f04f 0000 	mov.w	r0, #0
 8000d66:	e01c      	b.n	8000da2 <__aeabi_l2f+0x2a>

08000d68 <__aeabi_ul2f>:
 8000d68:	ea50 0201 	orrs.w	r2, r0, r1
 8000d6c:	bf08      	it	eq
 8000d6e:	4770      	bxeq	lr
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e00a      	b.n	8000d8c <__aeabi_l2f+0x14>
 8000d76:	bf00      	nop

08000d78 <__aeabi_l2f>:
 8000d78:	ea50 0201 	orrs.w	r2, r0, r1
 8000d7c:	bf08      	it	eq
 8000d7e:	4770      	bxeq	lr
 8000d80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d84:	d502      	bpl.n	8000d8c <__aeabi_l2f+0x14>
 8000d86:	4240      	negs	r0, r0
 8000d88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d8c:	ea5f 0c01 	movs.w	ip, r1
 8000d90:	bf02      	ittt	eq
 8000d92:	4684      	moveq	ip, r0
 8000d94:	4601      	moveq	r1, r0
 8000d96:	2000      	moveq	r0, #0
 8000d98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d9c:	bf08      	it	eq
 8000d9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000da2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000da6:	fabc f28c 	clz	r2, ip
 8000daa:	3a08      	subs	r2, #8
 8000dac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000db0:	db10      	blt.n	8000dd4 <__aeabi_l2f+0x5c>
 8000db2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db6:	4463      	add	r3, ip
 8000db8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dbc:	f1c2 0220 	rsb	r2, r2, #32
 8000dc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc8:	eb43 0002 	adc.w	r0, r3, r2
 8000dcc:	bf08      	it	eq
 8000dce:	f020 0001 	biceq.w	r0, r0, #1
 8000dd2:	4770      	bx	lr
 8000dd4:	f102 0220 	add.w	r2, r2, #32
 8000dd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000de4:	fa21 f202 	lsr.w	r2, r1, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ldivmod>:
 8000df4:	b97b      	cbnz	r3, 8000e16 <__aeabi_ldivmod+0x22>
 8000df6:	b972      	cbnz	r2, 8000e16 <__aeabi_ldivmod+0x22>
 8000df8:	2900      	cmp	r1, #0
 8000dfa:	bfbe      	ittt	lt
 8000dfc:	2000      	movlt	r0, #0
 8000dfe:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000e02:	e006      	blt.n	8000e12 <__aeabi_ldivmod+0x1e>
 8000e04:	bf08      	it	eq
 8000e06:	2800      	cmpeq	r0, #0
 8000e08:	bf1c      	itt	ne
 8000e0a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000e0e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000e12:	f000 b9bf 	b.w	8001194 <__aeabi_idiv0>
 8000e16:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e1a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	db09      	blt.n	8000e36 <__aeabi_ldivmod+0x42>
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	db1a      	blt.n	8000e5c <__aeabi_ldivmod+0x68>
 8000e26:	f000 f84d 	bl	8000ec4 <__udivmoddi4>
 8000e2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e32:	b004      	add	sp, #16
 8000e34:	4770      	bx	lr
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db1b      	blt.n	8000e78 <__aeabi_ldivmod+0x84>
 8000e40:	f000 f840 	bl	8000ec4 <__udivmoddi4>
 8000e44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e4c:	b004      	add	sp, #16
 8000e4e:	4240      	negs	r0, r0
 8000e50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e54:	4252      	negs	r2, r2
 8000e56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e5a:	4770      	bx	lr
 8000e5c:	4252      	negs	r2, r2
 8000e5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e62:	f000 f82f 	bl	8000ec4 <__udivmoddi4>
 8000e66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e6e:	b004      	add	sp, #16
 8000e70:	4240      	negs	r0, r0
 8000e72:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e76:	4770      	bx	lr
 8000e78:	4252      	negs	r2, r2
 8000e7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e7e:	f000 f821 	bl	8000ec4 <__udivmoddi4>
 8000e82:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e8a:	b004      	add	sp, #16
 8000e8c:	4252      	negs	r2, r2
 8000e8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e92:	4770      	bx	lr

08000e94 <__aeabi_uldivmod>:
 8000e94:	b953      	cbnz	r3, 8000eac <__aeabi_uldivmod+0x18>
 8000e96:	b94a      	cbnz	r2, 8000eac <__aeabi_uldivmod+0x18>
 8000e98:	2900      	cmp	r1, #0
 8000e9a:	bf08      	it	eq
 8000e9c:	2800      	cmpeq	r0, #0
 8000e9e:	bf1c      	itt	ne
 8000ea0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ea4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ea8:	f000 b974 	b.w	8001194 <__aeabi_idiv0>
 8000eac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000eb4:	f000 f806 	bl	8000ec4 <__udivmoddi4>
 8000eb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ec0:	b004      	add	sp, #16
 8000ec2:	4770      	bx	lr

08000ec4 <__udivmoddi4>:
 8000ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ec8:	9d08      	ldr	r5, [sp, #32]
 8000eca:	4604      	mov	r4, r0
 8000ecc:	468e      	mov	lr, r1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d14d      	bne.n	8000f6e <__udivmoddi4+0xaa>
 8000ed2:	428a      	cmp	r2, r1
 8000ed4:	4694      	mov	ip, r2
 8000ed6:	d969      	bls.n	8000fac <__udivmoddi4+0xe8>
 8000ed8:	fab2 f282 	clz	r2, r2
 8000edc:	b152      	cbz	r2, 8000ef4 <__udivmoddi4+0x30>
 8000ede:	fa01 f302 	lsl.w	r3, r1, r2
 8000ee2:	f1c2 0120 	rsb	r1, r2, #32
 8000ee6:	fa20 f101 	lsr.w	r1, r0, r1
 8000eea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eee:	ea41 0e03 	orr.w	lr, r1, r3
 8000ef2:	4094      	lsls	r4, r2
 8000ef4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef8:	0c21      	lsrs	r1, r4, #16
 8000efa:	fbbe f6f8 	udiv	r6, lr, r8
 8000efe:	fa1f f78c 	uxth.w	r7, ip
 8000f02:	fb08 e316 	mls	r3, r8, r6, lr
 8000f06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f0a:	fb06 f107 	mul.w	r1, r6, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d90a      	bls.n	8000f28 <__udivmoddi4+0x64>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000f1a:	f080 811f 	bcs.w	800115c <__udivmoddi4+0x298>
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	f240 811c 	bls.w	800115c <__udivmoddi4+0x298>
 8000f24:	3e02      	subs	r6, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1a5b      	subs	r3, r3, r1
 8000f2a:	b2a4      	uxth	r4, r4
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3310 	mls	r3, r8, r0, r3
 8000f34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f38:	fb00 f707 	mul.w	r7, r0, r7
 8000f3c:	42a7      	cmp	r7, r4
 8000f3e:	d90a      	bls.n	8000f56 <__udivmoddi4+0x92>
 8000f40:	eb1c 0404 	adds.w	r4, ip, r4
 8000f44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f48:	f080 810a 	bcs.w	8001160 <__udivmoddi4+0x29c>
 8000f4c:	42a7      	cmp	r7, r4
 8000f4e:	f240 8107 	bls.w	8001160 <__udivmoddi4+0x29c>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f5a:	1be4      	subs	r4, r4, r7
 8000f5c:	2600      	movs	r6, #0
 8000f5e:	b11d      	cbz	r5, 8000f68 <__udivmoddi4+0xa4>
 8000f60:	40d4      	lsrs	r4, r2
 8000f62:	2300      	movs	r3, #0
 8000f64:	e9c5 4300 	strd	r4, r3, [r5]
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d909      	bls.n	8000f86 <__udivmoddi4+0xc2>
 8000f72:	2d00      	cmp	r5, #0
 8000f74:	f000 80ef 	beq.w	8001156 <__udivmoddi4+0x292>
 8000f78:	2600      	movs	r6, #0
 8000f7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000f7e:	4630      	mov	r0, r6
 8000f80:	4631      	mov	r1, r6
 8000f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f86:	fab3 f683 	clz	r6, r3
 8000f8a:	2e00      	cmp	r6, #0
 8000f8c:	d14a      	bne.n	8001024 <__udivmoddi4+0x160>
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	d302      	bcc.n	8000f98 <__udivmoddi4+0xd4>
 8000f92:	4282      	cmp	r2, r0
 8000f94:	f200 80f9 	bhi.w	800118a <__udivmoddi4+0x2c6>
 8000f98:	1a84      	subs	r4, r0, r2
 8000f9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	469e      	mov	lr, r3
 8000fa2:	2d00      	cmp	r5, #0
 8000fa4:	d0e0      	beq.n	8000f68 <__udivmoddi4+0xa4>
 8000fa6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000faa:	e7dd      	b.n	8000f68 <__udivmoddi4+0xa4>
 8000fac:	b902      	cbnz	r2, 8000fb0 <__udivmoddi4+0xec>
 8000fae:	deff      	udf	#255	; 0xff
 8000fb0:	fab2 f282 	clz	r2, r2
 8000fb4:	2a00      	cmp	r2, #0
 8000fb6:	f040 8092 	bne.w	80010de <__udivmoddi4+0x21a>
 8000fba:	eba1 010c 	sub.w	r1, r1, ip
 8000fbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc2:	fa1f fe8c 	uxth.w	lr, ip
 8000fc6:	2601      	movs	r6, #1
 8000fc8:	0c20      	lsrs	r0, r4, #16
 8000fca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000fce:	fb07 1113 	mls	r1, r7, r3, r1
 8000fd2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fd6:	fb0e f003 	mul.w	r0, lr, r3
 8000fda:	4288      	cmp	r0, r1
 8000fdc:	d908      	bls.n	8000ff0 <__udivmoddi4+0x12c>
 8000fde:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000fe6:	d202      	bcs.n	8000fee <__udivmoddi4+0x12a>
 8000fe8:	4288      	cmp	r0, r1
 8000fea:	f200 80cb 	bhi.w	8001184 <__udivmoddi4+0x2c0>
 8000fee:	4643      	mov	r3, r8
 8000ff0:	1a09      	subs	r1, r1, r0
 8000ff2:	b2a4      	uxth	r4, r4
 8000ff4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ff8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ffc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001000:	fb0e fe00 	mul.w	lr, lr, r0
 8001004:	45a6      	cmp	lr, r4
 8001006:	d908      	bls.n	800101a <__udivmoddi4+0x156>
 8001008:	eb1c 0404 	adds.w	r4, ip, r4
 800100c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8001010:	d202      	bcs.n	8001018 <__udivmoddi4+0x154>
 8001012:	45a6      	cmp	lr, r4
 8001014:	f200 80bb 	bhi.w	800118e <__udivmoddi4+0x2ca>
 8001018:	4608      	mov	r0, r1
 800101a:	eba4 040e 	sub.w	r4, r4, lr
 800101e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001022:	e79c      	b.n	8000f5e <__udivmoddi4+0x9a>
 8001024:	f1c6 0720 	rsb	r7, r6, #32
 8001028:	40b3      	lsls	r3, r6
 800102a:	fa22 fc07 	lsr.w	ip, r2, r7
 800102e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001032:	fa20 f407 	lsr.w	r4, r0, r7
 8001036:	fa01 f306 	lsl.w	r3, r1, r6
 800103a:	431c      	orrs	r4, r3
 800103c:	40f9      	lsrs	r1, r7
 800103e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001042:	fa00 f306 	lsl.w	r3, r0, r6
 8001046:	fbb1 f8f9 	udiv	r8, r1, r9
 800104a:	0c20      	lsrs	r0, r4, #16
 800104c:	fa1f fe8c 	uxth.w	lr, ip
 8001050:	fb09 1118 	mls	r1, r9, r8, r1
 8001054:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001058:	fb08 f00e 	mul.w	r0, r8, lr
 800105c:	4288      	cmp	r0, r1
 800105e:	fa02 f206 	lsl.w	r2, r2, r6
 8001062:	d90b      	bls.n	800107c <__udivmoddi4+0x1b8>
 8001064:	eb1c 0101 	adds.w	r1, ip, r1
 8001068:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800106c:	f080 8088 	bcs.w	8001180 <__udivmoddi4+0x2bc>
 8001070:	4288      	cmp	r0, r1
 8001072:	f240 8085 	bls.w	8001180 <__udivmoddi4+0x2bc>
 8001076:	f1a8 0802 	sub.w	r8, r8, #2
 800107a:	4461      	add	r1, ip
 800107c:	1a09      	subs	r1, r1, r0
 800107e:	b2a4      	uxth	r4, r4
 8001080:	fbb1 f0f9 	udiv	r0, r1, r9
 8001084:	fb09 1110 	mls	r1, r9, r0, r1
 8001088:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800108c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001090:	458e      	cmp	lr, r1
 8001092:	d908      	bls.n	80010a6 <__udivmoddi4+0x1e2>
 8001094:	eb1c 0101 	adds.w	r1, ip, r1
 8001098:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800109c:	d26c      	bcs.n	8001178 <__udivmoddi4+0x2b4>
 800109e:	458e      	cmp	lr, r1
 80010a0:	d96a      	bls.n	8001178 <__udivmoddi4+0x2b4>
 80010a2:	3802      	subs	r0, #2
 80010a4:	4461      	add	r1, ip
 80010a6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80010aa:	fba0 9402 	umull	r9, r4, r0, r2
 80010ae:	eba1 010e 	sub.w	r1, r1, lr
 80010b2:	42a1      	cmp	r1, r4
 80010b4:	46c8      	mov	r8, r9
 80010b6:	46a6      	mov	lr, r4
 80010b8:	d356      	bcc.n	8001168 <__udivmoddi4+0x2a4>
 80010ba:	d053      	beq.n	8001164 <__udivmoddi4+0x2a0>
 80010bc:	b15d      	cbz	r5, 80010d6 <__udivmoddi4+0x212>
 80010be:	ebb3 0208 	subs.w	r2, r3, r8
 80010c2:	eb61 010e 	sbc.w	r1, r1, lr
 80010c6:	fa01 f707 	lsl.w	r7, r1, r7
 80010ca:	fa22 f306 	lsr.w	r3, r2, r6
 80010ce:	40f1      	lsrs	r1, r6
 80010d0:	431f      	orrs	r7, r3
 80010d2:	e9c5 7100 	strd	r7, r1, [r5]
 80010d6:	2600      	movs	r6, #0
 80010d8:	4631      	mov	r1, r6
 80010da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010de:	f1c2 0320 	rsb	r3, r2, #32
 80010e2:	40d8      	lsrs	r0, r3
 80010e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80010e8:	fa21 f303 	lsr.w	r3, r1, r3
 80010ec:	4091      	lsls	r1, r2
 80010ee:	4301      	orrs	r1, r0
 80010f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010f4:	fa1f fe8c 	uxth.w	lr, ip
 80010f8:	fbb3 f0f7 	udiv	r0, r3, r7
 80010fc:	fb07 3610 	mls	r6, r7, r0, r3
 8001100:	0c0b      	lsrs	r3, r1, #16
 8001102:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001106:	fb00 f60e 	mul.w	r6, r0, lr
 800110a:	429e      	cmp	r6, r3
 800110c:	fa04 f402 	lsl.w	r4, r4, r2
 8001110:	d908      	bls.n	8001124 <__udivmoddi4+0x260>
 8001112:	eb1c 0303 	adds.w	r3, ip, r3
 8001116:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800111a:	d22f      	bcs.n	800117c <__udivmoddi4+0x2b8>
 800111c:	429e      	cmp	r6, r3
 800111e:	d92d      	bls.n	800117c <__udivmoddi4+0x2b8>
 8001120:	3802      	subs	r0, #2
 8001122:	4463      	add	r3, ip
 8001124:	1b9b      	subs	r3, r3, r6
 8001126:	b289      	uxth	r1, r1
 8001128:	fbb3 f6f7 	udiv	r6, r3, r7
 800112c:	fb07 3316 	mls	r3, r7, r6, r3
 8001130:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001134:	fb06 f30e 	mul.w	r3, r6, lr
 8001138:	428b      	cmp	r3, r1
 800113a:	d908      	bls.n	800114e <__udivmoddi4+0x28a>
 800113c:	eb1c 0101 	adds.w	r1, ip, r1
 8001140:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001144:	d216      	bcs.n	8001174 <__udivmoddi4+0x2b0>
 8001146:	428b      	cmp	r3, r1
 8001148:	d914      	bls.n	8001174 <__udivmoddi4+0x2b0>
 800114a:	3e02      	subs	r6, #2
 800114c:	4461      	add	r1, ip
 800114e:	1ac9      	subs	r1, r1, r3
 8001150:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001154:	e738      	b.n	8000fc8 <__udivmoddi4+0x104>
 8001156:	462e      	mov	r6, r5
 8001158:	4628      	mov	r0, r5
 800115a:	e705      	b.n	8000f68 <__udivmoddi4+0xa4>
 800115c:	4606      	mov	r6, r0
 800115e:	e6e3      	b.n	8000f28 <__udivmoddi4+0x64>
 8001160:	4618      	mov	r0, r3
 8001162:	e6f8      	b.n	8000f56 <__udivmoddi4+0x92>
 8001164:	454b      	cmp	r3, r9
 8001166:	d2a9      	bcs.n	80010bc <__udivmoddi4+0x1f8>
 8001168:	ebb9 0802 	subs.w	r8, r9, r2
 800116c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001170:	3801      	subs	r0, #1
 8001172:	e7a3      	b.n	80010bc <__udivmoddi4+0x1f8>
 8001174:	4646      	mov	r6, r8
 8001176:	e7ea      	b.n	800114e <__udivmoddi4+0x28a>
 8001178:	4620      	mov	r0, r4
 800117a:	e794      	b.n	80010a6 <__udivmoddi4+0x1e2>
 800117c:	4640      	mov	r0, r8
 800117e:	e7d1      	b.n	8001124 <__udivmoddi4+0x260>
 8001180:	46d0      	mov	r8, sl
 8001182:	e77b      	b.n	800107c <__udivmoddi4+0x1b8>
 8001184:	3b02      	subs	r3, #2
 8001186:	4461      	add	r1, ip
 8001188:	e732      	b.n	8000ff0 <__udivmoddi4+0x12c>
 800118a:	4630      	mov	r0, r6
 800118c:	e709      	b.n	8000fa2 <__udivmoddi4+0xde>
 800118e:	4464      	add	r4, ip
 8001190:	3802      	subs	r0, #2
 8001192:	e742      	b.n	800101a <__udivmoddi4+0x156>

08001194 <__aeabi_idiv0>:
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop

08001198 <adcInit>:

static uint32_t adcValues[ADC_CHANNEL_MAX];


void adcInit(drv_adc_config_t *init)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    extern ADC_HandleTypeDef hadc1;

    // Start ADC
    HAL_ADC_Start_DMA(&hadc1, adcValues, ADC_CHANNEL_MAX);
 80011a0:	2204      	movs	r2, #4
 80011a2:	4904      	ldr	r1, [pc, #16]	; (80011b4 <adcInit+0x1c>)
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <adcInit+0x20>)
 80011a6:	f019 fc6f 	bl	801aa88 <HAL_ADC_Start_DMA>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000011c 	.word	0x2000011c
 80011b8:	200007e4 	.word	0x200007e4

080011bc <actGetAdcChannel>:

uint16_t actGetAdcChannel(uint8_t channel)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
    return adcValues[channel];
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <actGetAdcChannel+0x20>)
 80011ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ce:	b29b      	uxth	r3, r3
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	2000011c 	.word	0x2000011c

080011e0 <actGetBatteryVoltage>:

float actGetBatteryVoltage()
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
	return (adcValues[ADC_BATTERY] * 3.3f) / 4095;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <actGetBatteryVoltage+0x30>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	ee07 3a90 	vmov	s15, r3
 80011ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001214 <actGetBatteryVoltage+0x34>
 80011f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001218 <actGetBatteryVoltage+0x38>
 80011fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001200:	eef0 7a66 	vmov.f32	s15, s13
}
 8001204:	eeb0 0a67 	vmov.f32	s0, s15
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	2000011c 	.word	0x2000011c
 8001214:	40533333 	.word	0x40533333
 8001218:	457ff000 	.word	0x457ff000

0800121c <actGetBatteryCurrent>:

uint32_t actGetBatteryCurrent()
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
	return 5000 * adcValues[ADC_EXTERNAL_CURRENT] / 4095;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <actGetBatteryCurrent+0x28>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f241 3288 	movw	r2, #5000	; 0x1388
 8001228:	fb03 f202 	mul.w	r2, r3, r2
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <actGetBatteryCurrent+0x2c>)
 800122e:	fba3 1302 	umull	r1, r3, r3, r2
 8001232:	1ad2      	subs	r2, r2, r3
 8001234:	0852      	lsrs	r2, r2, #1
 8001236:	4413      	add	r3, r2
 8001238:	0adb      	lsrs	r3, r3, #11
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	2000011c 	.word	0x2000011c
 8001248:	00100101 	.word	0x00100101

0800124c <gy86Detect>:
// sync this with AccelSensors enum from board.h
static const char* hw_Names[] = { "MPU9250", "AK8963", "BMP280" };


bool gy86Detect(sensorSet_t *p_sensor_set, void* p_param)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
#endif

    (void)p_param;

    // Set acc_1G. Modified once by mpu6050CheckRevision for old (hopefully nonexistent outside of clones) parts
    acc_1G = 512 * 8;
 8001256:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <gy86Detect+0xf8>)
 8001258:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800125c:	801a      	strh	r2, [r3, #0]

    // 16.4 dps/lsb scalefactor for all Invensense devices
    p_sensor_set->gyro.scale = (4.0f / 16.4f) * (M_PI / 180.0f) * 0.000001f;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a39      	ldr	r2, [pc, #228]	; (8001348 <gy86Detect+0xfc>)
 8001262:	615a      	str	r2, [r3, #20]

    memset(&config, 0, sizeof(PifGy86Config));
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	2214      	movs	r2, #20
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f020 fdb9 	bl	8021de4 <memset>

    config.disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8001272:	2301      	movs	r3, #1
 8001274:	733b      	strb	r3, [r7, #12]

    config.mpu60x0_clksel = MPU60X0_CLKSEL_PLL_ZGYRO;
 8001276:	2303      	movs	r3, #3
 8001278:	73bb      	strb	r3, [r7, #14]
    // default lpf is 42Hz, 255 is special case of nolpf
    if (p_sensor_set->gyro.lpf == 255)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	8a1b      	ldrh	r3, [r3, #16]
 800127e:	2bff      	cmp	r3, #255	; 0xff
 8001280:	d102      	bne.n	8001288 <gy86Detect+0x3c>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A260HZ_G256HZ;
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	e024      	b.n	80012d2 <gy86Detect+0x86>
    else if (p_sensor_set->gyro.lpf >= 188)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	8a1b      	ldrh	r3, [r3, #16]
 800128c:	2bbb      	cmp	r3, #187	; 0xbb
 800128e:	d902      	bls.n	8001296 <gy86Detect+0x4a>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A184HZ_G188HZ;
 8001290:	2301      	movs	r3, #1
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	e01d      	b.n	80012d2 <gy86Detect+0x86>
    else if (p_sensor_set->gyro.lpf >= 98)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	8a1b      	ldrh	r3, [r3, #16]
 800129a:	2b61      	cmp	r3, #97	; 0x61
 800129c:	d902      	bls.n	80012a4 <gy86Detect+0x58>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A94HZ_G98HZ;
 800129e:	2302      	movs	r3, #2
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	e016      	b.n	80012d2 <gy86Detect+0x86>
    else if (p_sensor_set->gyro.lpf >= 42)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	8a1b      	ldrh	r3, [r3, #16]
 80012a8:	2b29      	cmp	r3, #41	; 0x29
 80012aa:	d902      	bls.n	80012b2 <gy86Detect+0x66>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A44HZ_G42HZ;
 80012ac:	2303      	movs	r3, #3
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e00f      	b.n	80012d2 <gy86Detect+0x86>
    else if (p_sensor_set->gyro.lpf >= 20)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	8a1b      	ldrh	r3, [r3, #16]
 80012b6:	2b13      	cmp	r3, #19
 80012b8:	d902      	bls.n	80012c0 <gy86Detect+0x74>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A21HZ_G20HZ;
 80012ba:	2304      	movs	r3, #4
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	e008      	b.n	80012d2 <gy86Detect+0x86>
    else if (p_sensor_set->gyro.lpf >= 10)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	8a1b      	ldrh	r3, [r3, #16]
 80012c4:	2b09      	cmp	r3, #9
 80012c6:	d902      	bls.n	80012ce <gy86Detect+0x82>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A10HZ_G10HZ;
 80012c8:	2305      	movs	r3, #5
 80012ca:	73fb      	strb	r3, [r7, #15]
 80012cc:	e001      	b.n	80012d2 <gy86Detect+0x86>
    else
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A5HZ_G5HZ;
 80012ce:	2306      	movs	r3, #6
 80012d0:	73fb      	strb	r3, [r7, #15]
    config.mpu60x0_fs_sel = MPU60X0_FS_SEL_2000DPS;
 80012d2:	2303      	movs	r3, #3
 80012d4:	743b      	strb	r3, [r7, #16]
    config.mpu60x0_afs_sel = MPU60X0_AFS_SEL_8G;
 80012d6:	2302      	movs	r3, #2
 80012d8:	737b      	strb	r3, [r7, #13]
    config.mpu60x0_i2c_mst_clk = MPU60X0_I2C_MST_CLK_400KHZ;
 80012da:	230d      	movs	r3, #13
 80012dc:	747b      	strb	r3, [r7, #17]

    config.hmc5883_gain = HMC5883_GAIN_1_3GA;
 80012de:	2301      	movs	r3, #1
 80012e0:	74fb      	strb	r3, [r7, #19]
    config.hmc5883_samples = HMC5883_SAMPLES_8;
 80012e2:	2303      	movs	r3, #3
 80012e4:	757b      	strb	r3, [r7, #21]
    config.hmc5883_data_rate = HMC5883_DATARATE_75HZ;
 80012e6:	2306      	movs	r3, #6
 80012e8:	74bb      	strb	r3, [r7, #18]
    config.hmc5883_mode = HMC5883_MODE_CONTINOUS;
 80012ea:	2300      	movs	r3, #0
 80012ec:	753b      	strb	r3, [r7, #20]

#ifdef BARO
    config.ms5611_osr = MS5611_OSR_4096;
 80012ee:	2308      	movs	r3, #8
 80012f0:	75bb      	strb	r3, [r7, #22]
    config.ms5611_read_period = 25;												// 25ms
 80012f2:	2319      	movs	r3, #25
 80012f4:	833b      	strh	r3, [r7, #24]
    config.ms5611_evt_read = evtBaroRead;
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <gy86Detect+0x100>)
 80012f8:	61fb      	str	r3, [r7, #28]
#endif

    // initialize the device
    if (!mpu6050Init(&p_sensor_set->acc, &p_sensor_set->gyro, &p_sensor_set->mag, &config)) return false;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f103 0018 	add.w	r0, r3, #24
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	f000 f822 	bl	8001354 <mpu6050Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <gy86Detect+0xce>
 8001316:	2300      	movs	r3, #0
 8001318:	e010      	b.n	800133c <gy86Detect+0xf0>

    p_sensor_set->gyro.hardware = hw_Names[0];
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <gy86Detect+0x104>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	601a      	str	r2, [r3, #0]
    p_sensor_set->acc.hardware = hw_Names[0];
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <gy86Detect+0x104>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	619a      	str	r2, [r3, #24]
    p_sensor_set->mag.hardware = hw_Names[1];
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <gy86Detect+0x104>)
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	649a      	str	r2, [r3, #72]	; 0x48
    p_sensor_set->baro.hardware = hw_Names[2];
 8001332:	4b07      	ldr	r3, [pc, #28]	; (8001350 <gy86Detect+0x104>)
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	631a      	str	r2, [r3, #48]	; 0x30

    return true;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000005a 	.word	0x2000005a
 8001348:	31924418 	.word	0x31924418
 800134c:	0800e9f1 	.word	0x0800e9f1
 8001350:	20000000 	.word	0x20000000

08001354 <mpu6050Init>:

static BOOL mpu6050Init(sensor_t *acc, sensor_t *gyro, sensor_t *mag, PifGy86Config* p_config)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af02      	add	r7, sp, #8
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	603b      	str	r3, [r7, #0]
    if (!pifGy86_Init(&s_gy86, PIF_ID_AUTO, &g_i2c_port, &imu_sensor, p_config)) return FALSE;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <mpu6050Init+0x64>)
 8001368:	4a14      	ldr	r2, [pc, #80]	; (80013bc <mpu6050Init+0x68>)
 800136a:	2100      	movs	r1, #0
 800136c:	4814      	ldr	r0, [pc, #80]	; (80013c0 <mpu6050Init+0x6c>)
 800136e:	f016 fa8d 	bl	801788c <pifGy86_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <mpu6050Init+0x28>
 8001378:	2300      	movs	r3, #0
 800137a:	e018      	b.n	80013ae <mpu6050Init+0x5a>
    s_gy86._mpu6050.gyro_scale = 4;
 800137c:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <mpu6050Init+0x6c>)
 800137e:	2204      	movs	r2, #4
 8001380:	711a      	strb	r2, [r3, #4]
    s_gy86._mpu6050.temp_scale = 100;
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <mpu6050Init+0x6c>)
 8001384:	2264      	movs	r2, #100	; 0x64
 8001386:	719a      	strb	r2, [r3, #6]

    acc->init = mpuAccInit;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <mpu6050Init+0x70>)
 800138c:	605a      	str	r2, [r3, #4]
    acc->read = mpuAccRead;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <mpu6050Init+0x74>)
 8001392:	609a      	str	r2, [r3, #8]
    gyro->init = mpuGyroInit;
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <mpu6050Init+0x78>)
 8001398:	605a      	str	r2, [r3, #4]
    gyro->read = mpuGyroRead;
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <mpu6050Init+0x7c>)
 800139e:	609a      	str	r2, [r3, #8]
    mag->init = hmc5883lInit;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a0c      	ldr	r2, [pc, #48]	; (80013d4 <mpu6050Init+0x80>)
 80013a4:	605a      	str	r2, [r3, #4]
    mag->read = hmc5883lRead;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <mpu6050Init+0x84>)
 80013aa:	609a      	str	r2, [r3, #8]
    return TRUE;
 80013ac:	2301      	movs	r3, #1
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20001d20 	.word	0x20001d20
 80013bc:	20001b34 	.word	0x20001b34
 80013c0:	2000012c 	.word	0x2000012c
 80013c4:	080013dd 	.word	0x080013dd
 80013c8:	08001401 	.word	0x08001401
 80013cc:	08001449 	.word	0x08001449
 80013d0:	0800146d 	.word	0x0800146d
 80013d4:	080014b5 	.word	0x080014b5
 80013d8:	08001805 	.word	0x08001805

080013dc <mpuAccInit>:

static BOOL mpuAccInit(PifImuSensorAlign align)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
    pifImuSensor_SetAccelAlign(&imu_sensor, align);
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	4619      	mov	r1, r3
 80013ea:	4804      	ldr	r0, [pc, #16]	; (80013fc <mpuAccInit+0x20>)
 80013ec:	f017 fae3 	bl	80189b6 <pifImuSensor_SetAccelAlign>
    return TRUE;
 80013f0:	2301      	movs	r3, #1
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20001d20 	.word	0x20001d20

08001400 <mpuAccRead>:

static BOOL mpuAccRead(int16_t *accData)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	int16_t data[3];

    if (!pifImuSensor_ReadAccel(&imu_sensor, data)) return FALSE;
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	4619      	mov	r1, r3
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <mpuAccRead+0x44>)
 8001410:	f017 fae4 	bl	80189dc <pifImuSensor_ReadAccel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <mpuAccRead+0x1e>
 800141a:	2300      	movs	r3, #0
 800141c:	e00e      	b.n	800143c <mpuAccRead+0x3c>
    accData[0] = data[0];
 800141e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	801a      	strh	r2, [r3, #0]
    accData[1] = data[1];
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3302      	adds	r3, #2
 800142a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800142e:	801a      	strh	r2, [r3, #0]
    accData[2] = data[2];
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3304      	adds	r3, #4
 8001434:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001438:	801a      	strh	r2, [r3, #0]
    return TRUE;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20001d20 	.word	0x20001d20

08001448 <mpuGyroInit>:

static BOOL mpuGyroInit(PifImuSensorAlign align)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
    pifImuSensor_SetGyroAlign(&imu_sensor, align);
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	4619      	mov	r1, r3
 8001456:	4804      	ldr	r0, [pc, #16]	; (8001468 <mpuGyroInit+0x20>)
 8001458:	f017 fa74 	bl	8018944 <pifImuSensor_SetGyroAlign>
    return TRUE;
 800145c:	2301      	movs	r3, #1
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20001d20 	.word	0x20001d20

0800146c <mpuGyroRead>:

static BOOL mpuGyroRead(int16_t *gyroData)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	int16_t data[3];

	if (!pifImuSensor_ReadGyro(&imu_sensor, data)) return FALSE;
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	4619      	mov	r1, r3
 800147a:	480d      	ldr	r0, [pc, #52]	; (80014b0 <mpuGyroRead+0x44>)
 800147c:	f017 fa74 	bl	8018968 <pifImuSensor_ReadGyro>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <mpuGyroRead+0x1e>
 8001486:	2300      	movs	r3, #0
 8001488:	e00e      	b.n	80014a8 <mpuGyroRead+0x3c>
	gyroData[0] = data[0];
 800148a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	801a      	strh	r2, [r3, #0]
	gyroData[1] = data[1];
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3302      	adds	r3, #2
 8001496:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800149a:	801a      	strh	r2, [r3, #0]
	gyroData[2] = data[2];
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3304      	adds	r3, #4
 80014a0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014a4:	801a      	strh	r2, [r3, #0]
	return TRUE;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20001d20 	.word	0x20001d20

080014b4 <hmc5883lInit>:

static BOOL hmc5883lInit(PifImuSensorAlign align)
{
 80014b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014b8:	b08e      	sub	sp, #56	; 0x38
 80014ba:	af04      	add	r7, sp, #16
 80014bc:	4603      	mov	r3, r0
 80014be:	71fb      	strb	r3, [r7, #7]
    int16_t magADC[3];
    int i;
    int32_t xyz_total[3] = { 0, 0, 0 }; // 32 bit totals so they won't overflow.
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
    bool bret = true;           // Error indicator
 80014cc:	2301      	movs	r3, #1
 80014ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    PifHmc5883ConfigA config_a;

    pifImuSensor_SetMagAlign(&imu_sensor, align);
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	4619      	mov	r1, r3
 80014d6:	48a6      	ldr	r0, [pc, #664]	; (8001770 <hmc5883lInit+0x2bc>)
 80014d8:	f017 faa8 	bl	8018a2c <pifImuSensor_SetMagAlign>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, FALSE)) return FALSE;
 80014dc:	4ba5      	ldr	r3, [pc, #660]	; (8001774 <hmc5883lInit+0x2c0>)
 80014de:	68d8      	ldr	r0, [r3, #12]
 80014e0:	2300      	movs	r3, #0
 80014e2:	f240 5201 	movw	r2, #1281	; 0x501
 80014e6:	216a      	movs	r1, #106	; 0x6a
 80014e8:	f011 f9cc 	bl	8012884 <pifI2cDevice_WriteRegBit8>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <hmc5883lInit+0x42>
 80014f2:	2300      	movs	r3, #0
 80014f4:	e17d      	b.n	80017f2 <hmc5883lInit+0x33e>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, TRUE)) return FALSE;
 80014f6:	4b9f      	ldr	r3, [pc, #636]	; (8001774 <hmc5883lInit+0x2c0>)
 80014f8:	68d8      	ldr	r0, [r3, #12]
 80014fa:	2301      	movs	r3, #1
 80014fc:	f240 1201 	movw	r2, #257	; 0x101
 8001500:	2137      	movs	r1, #55	; 0x37
 8001502:	f011 f9bf 	bl	8012884 <pifI2cDevice_WriteRegBit8>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <hmc5883lInit+0x5c>
 800150c:	2300      	movs	r3, #0
 800150e:	e170      	b.n	80017f2 <hmc5883lInit+0x33e>

    config_a.byte = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	733b      	strb	r3, [r7, #12]
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_POS_BIAS;
 8001514:	7b3b      	ldrb	r3, [r7, #12]
 8001516:	2201      	movs	r2, #1
 8001518:	f362 0301 	bfi	r3, r2, #0, #2
 800151c:	733b      	strb	r3, [r7, #12]
    config_a.bit.data_rate = HMC5883_DATARATE_15HZ;
 800151e:	7b3b      	ldrb	r3, [r7, #12]
 8001520:	2204      	movs	r2, #4
 8001522:	f362 0384 	bfi	r3, r2, #2, #3
 8001526:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;   // Reg A DOR = 0x010 + MS1, MS0 set to pos bias
 8001528:	4b92      	ldr	r3, [pc, #584]	; (8001774 <hmc5883lInit+0x2c0>)
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	7b3a      	ldrb	r2, [r7, #12]
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f011 f991 	bl	8012858 <pifI2cDevice_WriteRegByte>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <hmc5883lInit+0x8c>
 800153c:	2300      	movs	r3, #0
 800153e:	e158      	b.n	80017f2 <hmc5883lInit+0x33e>
    // Note that the  very first measurement after a gain change maintains the same gain as the previous setting.
    // The new gain setting is effective from the second measurement and on.
    if (!pifHmc5883_SetGain(&s_gy86._hmc5883, HMC5883_GAIN_2_5GA)) return FALSE; // Set the Gain to 2.5Ga (7:5->011)
 8001540:	2103      	movs	r1, #3
 8001542:	488d      	ldr	r0, [pc, #564]	; (8001778 <hmc5883lInit+0x2c4>)
 8001544:	f016 fea8 	bl	8018298 <pifHmc5883_SetGain>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <hmc5883lInit+0x9e>
 800154e:	2300      	movs	r3, #0
 8001550:	e14f      	b.n	80017f2 <hmc5883lInit+0x33e>
    pifTaskManager_YieldMs(100);
 8001552:	2064      	movs	r0, #100	; 0x64
 8001554:	f013 facc 	bl	8014af0 <pifTaskManager_YieldMs>
    pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4619      	mov	r1, r3
 800155e:	4886      	ldr	r0, [pc, #536]	; (8001778 <hmc5883lInit+0x2c4>)
 8001560:	f016 feb9 	bl	80182d6 <pifHmc5883_ReadMag>

    for (i = 0; i < 10; i++) {  // Collect 10 samples
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
 8001568:	e03d      	b.n	80015e6 <hmc5883lInit+0x132>
        if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_SINGLE)) return FALSE;
 800156a:	4b82      	ldr	r3, [pc, #520]	; (8001774 <hmc5883lInit+0x2c0>)
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	2201      	movs	r2, #1
 8001570:	2102      	movs	r1, #2
 8001572:	4618      	mov	r0, r3
 8001574:	f011 f970 	bl	8012858 <pifI2cDevice_WriteRegByte>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <hmc5883lInit+0xce>
 800157e:	2300      	movs	r3, #0
 8001580:	e137      	b.n	80017f2 <hmc5883lInit+0x33e>
        pifTaskManager_YieldMs(50);
 8001582:	2032      	movs	r0, #50	; 0x32
 8001584:	f013 fab4 	bl	8014af0 <pifTaskManager_YieldMs>
        pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);       // Get the raw values in case the scales have already been changed.
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	487a      	ldr	r0, [pc, #488]	; (8001778 <hmc5883lInit+0x2c4>)
 8001590:	f016 fea1 	bl	80182d6 <pifHmc5883_ReadMag>

        // Since the measurements are noisy, they should be averaged rather than taking the max.
        xyz_total[X] += magADC[X];
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800159a:	4413      	add	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        xyz_total[Y] += magADC[Y];
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80015a4:	4413      	add	r3, r2
 80015a6:	617b      	str	r3, [r7, #20]
        xyz_total[Z] += magADC[Z];
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80015ae:	4413      	add	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]

        // Detect saturation.
        if (-4096 >= min(magADC[X], min(magADC[Y], magADC[Z]))) {
 80015b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80015b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015ba:	4293      	cmp	r3, r2
 80015bc:	bfa8      	it	ge
 80015be:	4613      	movge	r3, r2
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80015c6:	4293      	cmp	r3, r2
 80015c8:	bfa8      	it	ge
 80015ca:	4613      	movge	r3, r2
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80015d2:	dc03      	bgt.n	80015dc <hmc5883lInit+0x128>
            bret = false;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;              // Breaks out of the for loop.  No sense in continuing if we saturated.
 80015da:	e007      	b.n	80015ec <hmc5883lInit+0x138>
        }
        actLed1Toggle();
 80015dc:	f000 fd60 	bl	80020a0 <actLed1Toggle>
    for (i = 0; i < 10; i++) {  // Collect 10 samples
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	3301      	adds	r3, #1
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	2b09      	cmp	r3, #9
 80015ea:	ddbe      	ble.n	800156a <hmc5883lInit+0xb6>
    }

    // Apply the negative bias. (Same gain)
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NEG_BIAS;
 80015ec:	7b3b      	ldrb	r3, [r7, #12]
 80015ee:	2202      	movs	r2, #2
 80015f0:	f362 0301 	bfi	r3, r2, #0, #2
 80015f4:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;   // Reg A DOR = 0x010 + MS1, MS0 set to negative bias.
 80015f6:	4b5f      	ldr	r3, [pc, #380]	; (8001774 <hmc5883lInit+0x2c0>)
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	7b3a      	ldrb	r2, [r7, #12]
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f011 f92a 	bl	8012858 <pifI2cDevice_WriteRegByte>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <hmc5883lInit+0x15a>
 800160a:	2300      	movs	r3, #0
 800160c:	e0f1      	b.n	80017f2 <hmc5883lInit+0x33e>
    for (i = 0; i < 10; i++) {
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
 8001612:	e03d      	b.n	8001690 <hmc5883lInit+0x1dc>
        if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_SINGLE)) return FALSE;
 8001614:	4b57      	ldr	r3, [pc, #348]	; (8001774 <hmc5883lInit+0x2c0>)
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	2201      	movs	r2, #1
 800161a:	2102      	movs	r1, #2
 800161c:	4618      	mov	r0, r3
 800161e:	f011 f91b 	bl	8012858 <pifI2cDevice_WriteRegByte>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <hmc5883lInit+0x178>
 8001628:	2300      	movs	r3, #0
 800162a:	e0e2      	b.n	80017f2 <hmc5883lInit+0x33e>
        pifTaskManager_YieldMs(50);
 800162c:	2032      	movs	r0, #50	; 0x32
 800162e:	f013 fa5f 	bl	8014af0 <pifTaskManager_YieldMs>
        pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);               // Get the raw values in case the scales have already been changed.
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	484f      	ldr	r0, [pc, #316]	; (8001778 <hmc5883lInit+0x2c4>)
 800163a:	f016 fe4c 	bl	80182d6 <pifHmc5883_ReadMag>

        // Since the measurements are noisy, they should be averaged.
        xyz_total[X] -= magADC[X];
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001644:	1a9b      	subs	r3, r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        xyz_total[Y] -= magADC[Y];
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800164e:	1a9b      	subs	r3, r3, r2
 8001650:	617b      	str	r3, [r7, #20]
        xyz_total[Z] -= magADC[Z];
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001658:	1a9b      	subs	r3, r3, r2
 800165a:	61bb      	str	r3, [r7, #24]

        // Detect saturation.
        if (-4096 >= min(magADC[X], min(magADC[Y], magADC[Z]))) {
 800165c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001660:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001664:	4293      	cmp	r3, r2
 8001666:	bfa8      	it	ge
 8001668:	4613      	movge	r3, r2
 800166a:	b21a      	sxth	r2, r3
 800166c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001670:	4293      	cmp	r3, r2
 8001672:	bfa8      	it	ge
 8001674:	4613      	movge	r3, r2
 8001676:	b21b      	sxth	r3, r3
 8001678:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 800167c:	dc03      	bgt.n	8001686 <hmc5883lInit+0x1d2>
            bret = false;
 800167e:	2300      	movs	r3, #0
 8001680:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;              // Breaks out of the for loop.  No sense in continuing if we saturated.
 8001684:	e007      	b.n	8001696 <hmc5883lInit+0x1e2>
        }
        actLed1Toggle();
 8001686:	f000 fd0b 	bl	80020a0 <actLed1Toggle>
    for (i = 0; i < 10; i++) {
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	3301      	adds	r3, #1
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	2b09      	cmp	r3, #9
 8001694:	ddbe      	ble.n	8001614 <hmc5883lInit+0x160>
    }

    s_gy86._hmc5883.scale[X] = fabsf(660.0f * HMC58X3_X_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[X]);
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	ee07 3a90 	vmov	s15, r3
 800169c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a0:	eddf 6a36 	vldr	s13, [pc, #216]	; 800177c <hmc5883lInit+0x2c8>
 80016a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016a8:	eef0 7ae7 	vabs.f32	s15, s15
 80016ac:	4b31      	ldr	r3, [pc, #196]	; (8001774 <hmc5883lInit+0x2c0>)
 80016ae:	edc3 7a05 	vstr	s15, [r3, #20]
    s_gy86._hmc5883.scale[Y] = fabsf(660.0f * HMC58X3_Y_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[Y]);
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	ee07 3a90 	vmov	s15, r3
 80016b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016bc:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800177c <hmc5883lInit+0x2c8>
 80016c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016c4:	eef0 7ae7 	vabs.f32	s15, s15
 80016c8:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <hmc5883lInit+0x2c0>)
 80016ca:	edc3 7a06 	vstr	s15, [r3, #24]
    s_gy86._hmc5883.scale[Z] = fabsf(660.0f * HMC58X3_Z_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[Z]);
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001780 <hmc5883lInit+0x2cc>
 80016dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016e0:	eef0 7ae7 	vabs.f32	s15, s15
 80016e4:	4b23      	ldr	r3, [pc, #140]	; (8001774 <hmc5883lInit+0x2c0>)
 80016e6:	edc3 7a07 	vstr	s15, [r3, #28]

    // leave test mode
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NORMAL;
 80016ea:	7b3b      	ldrb	r3, [r7, #12]
 80016ec:	f36f 0301 	bfc	r3, #0, #2
 80016f0:	733b      	strb	r3, [r7, #12]
    config_a.bit.samples = HMC5883_SAMPLES_8;
 80016f2:	7b3b      	ldrb	r3, [r7, #12]
 80016f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016f8:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;		// Configuration Register A  -- 0 11 100 00  num samples: 8 ; output rate: 15Hz ; normal measurement mode
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <hmc5883lInit+0x2c0>)
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	7b3a      	ldrb	r2, [r7, #12]
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f011 f8a8 	bl	8012858 <pifI2cDevice_WriteRegByte>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <hmc5883lInit+0x25e>
 800170e:	2300      	movs	r3, #0
 8001710:	e06f      	b.n	80017f2 <hmc5883lInit+0x33e>
    if (!pifHmc5883_SetGain(&s_gy86._hmc5883, HMC5883_GAIN_1_3GA)) return FALSE;                               		// Configuration Register B  -- 001 00000    configuration gain 1.3Ga
 8001712:	2101      	movs	r1, #1
 8001714:	4818      	ldr	r0, [pc, #96]	; (8001778 <hmc5883lInit+0x2c4>)
 8001716:	f016 fdbf 	bl	8018298 <pifHmc5883_SetGain>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <hmc5883lInit+0x270>
 8001720:	2300      	movs	r3, #0
 8001722:	e066      	b.n	80017f2 <hmc5883lInit+0x33e>
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_CONTINOUS)) return FALSE;	// Mode register             -- 000000 00    continuous Conversion Mode
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <hmc5883lInit+0x2c0>)
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	2200      	movs	r2, #0
 800172a:	2102      	movs	r1, #2
 800172c:	4618      	mov	r0, r3
 800172e:	f011 f893 	bl	8012858 <pifI2cDevice_WriteRegByte>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <hmc5883lInit+0x288>
 8001738:	2300      	movs	r3, #0
 800173a:	e05a      	b.n	80017f2 <hmc5883lInit+0x33e>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) return FALSE;
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <hmc5883lInit+0x2c0>)
 800173e:	68d8      	ldr	r0, [r3, #12]
 8001740:	2300      	movs	r3, #0
 8001742:	f240 1201 	movw	r2, #257	; 0x101
 8001746:	2137      	movs	r1, #55	; 0x37
 8001748:	f011 f89c 	bl	8012884 <pifI2cDevice_WriteRegBit8>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <hmc5883lInit+0x2a2>
 8001752:	2300      	movs	r3, #0
 8001754:	e04d      	b.n	80017f2 <hmc5883lInit+0x33e>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) return FALSE;
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <hmc5883lInit+0x2c0>)
 8001758:	68d8      	ldr	r0, [r3, #12]
 800175a:	2301      	movs	r3, #1
 800175c:	f240 5201 	movw	r2, #1281	; 0x501
 8001760:	216a      	movs	r1, #106	; 0x6a
 8001762:	f011 f88f 	bl	8012884 <pifI2cDevice_WriteRegBit8>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10b      	bne.n	8001784 <hmc5883lInit+0x2d0>
 800176c:	2300      	movs	r3, #0
 800176e:	e040      	b.n	80017f2 <hmc5883lInit+0x33e>
 8001770:	20001d20 	.word	0x20001d20
 8001774:	2000012c 	.word	0x2000012c
 8001778:	20000140 	.word	0x20000140
 800177c:	466f4000 	.word	0x466f4000
 8001780:	465ec001 	.word	0x465ec001

    if (!bret) {                // Something went wrong so get a best guess
 8001784:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001788:	f083 0301 	eor.w	r3, r3, #1
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00b      	beq.n	80017aa <hmc5883lInit+0x2f6>
    	s_gy86._hmc5883.scale[X] = 1.0f;
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <hmc5883lInit+0x348>)
 8001794:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001798:	615a      	str	r2, [r3, #20]
    	s_gy86._hmc5883.scale[Y] = 1.0f;
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <hmc5883lInit+0x348>)
 800179c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017a0:	619a      	str	r2, [r3, #24]
    	s_gy86._hmc5883.scale[Z] = 1.0f;
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <hmc5883lInit+0x348>)
 80017a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017a8:	61da      	str	r2, [r3, #28]
    }

    s_gy86._ms5611._p_task->pause = FALSE;
 80017aa:	4b14      	ldr	r3, [pc, #80]	; (80017fc <hmc5883lInit+0x348>)
 80017ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]

    pifLog_Printf(LT_INFO, "Mag scale: %f %f %f", (double)s_gy86._hmc5883.scale[X], (double)s_gy86._hmc5883.scale[Y], (double)s_gy86._hmc5883.scale[Z]);
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <hmc5883lInit+0x348>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fe84 	bl	80004c4 <__aeabi_f2d>
 80017bc:	4680      	mov	r8, r0
 80017be:	4689      	mov	r9, r1
 80017c0:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <hmc5883lInit+0x348>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fe7d 	bl	80004c4 <__aeabi_f2d>
 80017ca:	4604      	mov	r4, r0
 80017cc:	460d      	mov	r5, r1
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <hmc5883lInit+0x348>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fe76 	bl	80004c4 <__aeabi_f2d>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017e0:	e9cd 4500 	strd	r4, r5, [sp]
 80017e4:	4642      	mov	r2, r8
 80017e6:	464b      	mov	r3, r9
 80017e8:	4905      	ldr	r1, [pc, #20]	; (8001800 <hmc5883lInit+0x34c>)
 80017ea:	2002      	movs	r0, #2
 80017ec:	f011 fed2 	bl	8013594 <pifLog_Printf>
    return TRUE;
 80017f0:	2301      	movs	r3, #1
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3728      	adds	r7, #40	; 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017fc:	2000012c 	.word	0x2000012c
 8001800:	08024ba8 	.word	0x08024ba8

08001804 <hmc5883lRead>:

static BOOL hmc5883lRead(int16_t *magData)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	int16_t data[3];

	// During calibration, magGain is 1.0, so the read returns normal non-calibrated values.
    // After calibration is done, magGain is set to calculated gain values.
	if (!pifImuSensor_ReadMag(&imu_sensor, data)) return FALSE;
 800180c:	f107 0308 	add.w	r3, r7, #8
 8001810:	4619      	mov	r1, r3
 8001812:	480d      	ldr	r0, [pc, #52]	; (8001848 <hmc5883lRead+0x44>)
 8001814:	f017 f91d 	bl	8018a52 <pifImuSensor_ReadMag>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <hmc5883lRead+0x1e>
 800181e:	2300      	movs	r3, #0
 8001820:	e00e      	b.n	8001840 <hmc5883lRead+0x3c>
	magData[0] = data[0];
 8001822:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	801a      	strh	r2, [r3, #0]
	magData[1] = data[1];
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3302      	adds	r3, #2
 800182e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001832:	801a      	strh	r2, [r3, #0]
	magData[2] = data[2];
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3304      	adds	r3, #4
 8001838:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800183c:	801a      	strh	r2, [r3, #0]
	return TRUE;
 800183e:	2301      	movs	r3, #1
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20001d20 	.word	0x20001d20

0800184c <_actHcSr04Trigger>:

static sonarDistanceFuncPtr funcSonarDistance;


static void _actHcSr04Trigger(SWITCH state)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SONAR_TRIGGER_GPIO_Port, SONAR_TRIGGER_Pin, state);
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	461a      	mov	r2, r3
 800185a:	2101      	movs	r1, #1
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <_actHcSr04Trigger+0x24>)
 800185e:	f01a fc99 	bl	801c194 <HAL_GPIO_WritePin>
    s_echo_state = 0;
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <_actHcSr04Trigger+0x28>)
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40020800 	.word	0x40020800
 8001874:	200001b0 	.word	0x200001b0

08001878 <hcsr04Echo>:

void hcsr04Echo()
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	s_echo_state ^= 1;
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <hcsr04Echo+0x24>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	f083 0301 	eor.w	r3, r3, #1
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <hcsr04Echo+0x24>)
 8001888:	701a      	strb	r2, [r3, #0]
	pifHcSr04_sigReceiveEcho(&s_hcsr04, s_echo_state);
 800188a:	4b04      	ldr	r3, [pc, #16]	; (800189c <hcsr04Echo+0x24>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	4619      	mov	r1, r3
 8001890:	4803      	ldr	r0, [pc, #12]	; (80018a0 <hcsr04Echo+0x28>)
 8001892:	f016 fba1 	bl	8017fd8 <pifHcSr04_sigReceiveEcho>
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200001b0 	.word	0x200001b0
 80018a0:	2000018c 	.word	0x2000018c

080018a4 <_evtHcSr04Distance>:

static void _evtHcSr04Distance(int32_t distance)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
    float temp = (*funcSonarDistance)(distance);
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <_evtHcSr04Distance+0x54>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	4798      	blx	r3
 80018b4:	ed87 0a03 	vstr	s0, [r7, #12]
    static float pretemp = 0;

    if (temp != pretemp) {
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <_evtHcSr04Distance+0x58>)
 80018ba:	edd3 7a00 	vldr	s15, [r3]
 80018be:	ed97 7a03 	vldr	s14, [r7, #12]
 80018c2:	eeb4 7a67 	vcmp.f32	s14, s15
 80018c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ca:	d010      	beq.n	80018ee <_evtHcSr04Distance+0x4a>
        pifHcSr04_SetTemperature(&s_hcsr04, temp);
 80018cc:	ed97 0a03 	vldr	s0, [r7, #12]
 80018d0:	480b      	ldr	r0, [pc, #44]	; (8001900 <_evtHcSr04Distance+0x5c>)
 80018d2:	f016 fb3d 	bl	8017f50 <pifHcSr04_SetTemperature>
#ifdef __PIF_DEBUG__
        pifLog_Printf(LT_INFO, "Temp=%f", temp);
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f7fe fdf4 	bl	80004c4 <__aeabi_f2d>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4908      	ldr	r1, [pc, #32]	; (8001904 <_evtHcSr04Distance+0x60>)
 80018e2:	2002      	movs	r0, #2
 80018e4:	f011 fe56 	bl	8013594 <pifLog_Printf>
#endif
        pretemp = temp;
 80018e8:	4a04      	ldr	r2, [pc, #16]	; (80018fc <_evtHcSr04Distance+0x58>)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6013      	str	r3, [r2, #0]
    }
}
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200001b4 	.word	0x200001b4
 80018fc:	200001b8 	.word	0x200001b8
 8001900:	2000018c 	.word	0x2000018c
 8001904:	08024bbc 	.word	0x08024bbc

08001908 <hcsr04Init>:

BOOL hcsr04Init(uint16_t period, sonarDistanceFuncPtr func)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	80fb      	strh	r3, [r7, #6]
	if (!pifHcSr04_Init(&s_hcsr04, PIF_ID_AUTO)) return FALSE;
 8001914:	2100      	movs	r1, #0
 8001916:	4810      	ldr	r0, [pc, #64]	; (8001958 <hcsr04Init+0x50>)
 8001918:	f016 fa94 	bl	8017e44 <pifHcSr04_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <hcsr04Init+0x1e>
 8001922:	2300      	movs	r3, #0
 8001924:	e013      	b.n	800194e <hcsr04Init+0x46>
	s_hcsr04.act_trigger = _actHcSr04Trigger;
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <hcsr04Init+0x50>)
 8001928:	4a0c      	ldr	r2, [pc, #48]	; (800195c <hcsr04Init+0x54>)
 800192a:	601a      	str	r2, [r3, #0]
	s_hcsr04.evt_distance = _evtHcSr04Distance;
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <hcsr04Init+0x50>)
 800192e:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <hcsr04Init+0x58>)
 8001930:	605a      	str	r2, [r3, #4]
	if (!pifHcSr04_StartTrigger(&s_hcsr04, period)) return FALSE;
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	4619      	mov	r1, r3
 8001936:	4808      	ldr	r0, [pc, #32]	; (8001958 <hcsr04Init+0x50>)
 8001938:	f016 fae6 	bl	8017f08 <pifHcSr04_StartTrigger>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <hcsr04Init+0x3e>
 8001942:	2300      	movs	r3, #0
 8001944:	e003      	b.n	800194e <hcsr04Init+0x46>

	funcSonarDistance = func;
 8001946:	4a07      	ldr	r2, [pc, #28]	; (8001964 <hcsr04Init+0x5c>)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	6013      	str	r3, [r2, #0]
    return TRUE;
 800194c:	2301      	movs	r3, #1
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000018c 	.word	0x2000018c
 800195c:	0800184d 	.word	0x0800184d
 8001960:	080018a5 	.word	0x080018a5
 8001964:	200001b4 	.word	0x200001b4

08001968 <actI2cRead>:
#endif

#ifdef USE_I2C_DMA

PifI2cReturn actI2cRead(uint8_t addr, uint32_t iaddr, uint8_t isize, uint8_t* p_data, uint16_t size)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af02      	add	r7, sp, #8
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4603      	mov	r3, r0
 8001974:	73fb      	strb	r3, [r7, #15]
 8001976:	4613      	mov	r3, r2
 8001978:	73bb      	strb	r3, [r7, #14]
	if (isize) {
 800197a:	7bbb      	ldrb	r3, [r7, #14]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d019      	beq.n	80019b4 <actI2cRead+0x4c>
		return (HAL_I2C_Mem_Read_DMA(&hi2c1, (addr << 1) | 1, iaddr, isize, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	b21b      	sxth	r3, r3
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	b21b      	sxth	r3, r3
 800198c:	b299      	uxth	r1, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	b29a      	uxth	r2, r3
 8001992:	7bbb      	ldrb	r3, [r7, #14]
 8001994:	b298      	uxth	r0, r3
 8001996:	8b3b      	ldrh	r3, [r7, #24]
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	4603      	mov	r3, r0
 80019a0:	480f      	ldr	r0, [pc, #60]	; (80019e0 <actI2cRead+0x78>)
 80019a2:	f01b f931 	bl	801cc08 <HAL_I2C_Mem_Read_DMA>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <actI2cRead+0x48>
 80019ac:	2300      	movs	r3, #0
 80019ae:	e013      	b.n	80019d8 <actI2cRead+0x70>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e011      	b.n	80019d8 <actI2cRead+0x70>
	}
	else {
		return (HAL_I2C_Master_Receive_DMA(&hi2c1, (addr << 1) | 1, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	b21b      	sxth	r3, r3
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	b21b      	sxth	r3, r3
 80019c0:	b299      	uxth	r1, r3
 80019c2:	8b3b      	ldrh	r3, [r7, #24]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	4806      	ldr	r0, [pc, #24]	; (80019e0 <actI2cRead+0x78>)
 80019c8:	f01a fe8a 	bl	801c6e0 <HAL_I2C_Master_Receive_DMA>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <actI2cRead+0x6e>
 80019d2:	2300      	movs	r3, #0
 80019d4:	e000      	b.n	80019d8 <actI2cRead+0x70>
 80019d6:	2302      	movs	r3, #2
	}
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	2000088c 	.word	0x2000088c

080019e4 <actI2cWrite>:

PifI2cReturn actI2cWrite(uint8_t addr, uint32_t iaddr, uint8_t isize, uint8_t* p_data, uint16_t size)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	4603      	mov	r3, r0
 80019f0:	73fb      	strb	r3, [r7, #15]
 80019f2:	4613      	mov	r3, r2
 80019f4:	73bb      	strb	r3, [r7, #14]
	if (isize) {
 80019f6:	7bbb      	ldrb	r3, [r7, #14]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d016      	beq.n	8001a2a <actI2cWrite+0x46>
		return (HAL_I2C_Mem_Write_DMA(&hi2c1, addr << 1, iaddr, isize, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	b299      	uxth	r1, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	7bbb      	ldrb	r3, [r7, #14]
 8001a0a:	b298      	uxth	r0, r3
 8001a0c:	8b3b      	ldrh	r3, [r7, #24]
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	4603      	mov	r3, r0
 8001a16:	480e      	ldr	r0, [pc, #56]	; (8001a50 <actI2cWrite+0x6c>)
 8001a18:	f01a ff92 	bl	801c940 <HAL_I2C_Mem_Write_DMA>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <actI2cWrite+0x42>
 8001a22:	2300      	movs	r3, #0
 8001a24:	e010      	b.n	8001a48 <actI2cWrite+0x64>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e00e      	b.n	8001a48 <actI2cWrite+0x64>
	}
	else {
		return (HAL_I2C_Master_Transmit_DMA(&hi2c1, addr << 1, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	b299      	uxth	r1, r3
 8001a32:	8b3b      	ldrh	r3, [r7, #24]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	4806      	ldr	r0, [pc, #24]	; (8001a50 <actI2cWrite+0x6c>)
 8001a38:	f01a fd22 	bl	801c480 <HAL_I2C_Master_Transmit_DMA>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <actI2cWrite+0x62>
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <actI2cWrite+0x64>
 8001a46:	2302      	movs	r3, #2
	}
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	2000088c 	.word	0x2000088c

08001a54 <HAL_I2C_MemRxCpltCallback>:
#endif

#if defined(USE_I2C_INTERRUPT) || defined(USE_I2C_DMA)

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <HAL_I2C_MemRxCpltCallback+0x24>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d103      	bne.n	8001a6e <HAL_I2C_MemRxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001a66:	2101      	movs	r1, #1
 8001a68:	4804      	ldr	r0, [pc, #16]	; (8001a7c <HAL_I2C_MemRxCpltCallback+0x28>)
 8001a6a:	f010 ff6d 	bl	8012948 <pifI2cPort_sigEndTransfer>
	}
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40005400 	.word	0x40005400
 8001a7c:	20001b34 	.word	0x20001b34

08001a80 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d103      	bne.n	8001a9a <HAL_I2C_MasterRxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001a92:	2101      	movs	r1, #1
 8001a94:	4804      	ldr	r0, [pc, #16]	; (8001aa8 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8001a96:	f010 ff57 	bl	8012948 <pifI2cPort_sigEndTransfer>
	}
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40005400 	.word	0x40005400
 8001aa8:	20001b34 	.word	0x20001b34

08001aac <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <HAL_I2C_MemTxCpltCallback+0x24>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d103      	bne.n	8001ac6 <HAL_I2C_MemTxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001abe:	2101      	movs	r1, #1
 8001ac0:	4804      	ldr	r0, [pc, #16]	; (8001ad4 <HAL_I2C_MemTxCpltCallback+0x28>)
 8001ac2:	f010 ff41 	bl	8012948 <pifI2cPort_sigEndTransfer>
	}
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40005400 	.word	0x40005400
 8001ad4:	20001b34 	.word	0x20001b34

08001ad8 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a05      	ldr	r2, [pc, #20]	; (8001afc <HAL_I2C_MasterTxCpltCallback+0x24>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d103      	bne.n	8001af2 <HAL_I2C_MasterTxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001aea:	2101      	movs	r1, #1
 8001aec:	4804      	ldr	r0, [pc, #16]	; (8001b00 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8001aee:	f010 ff2b 	bl	8012948 <pifI2cPort_sigEndTransfer>
	}
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40005400 	.word	0x40005400
 8001b00:	20001b34 	.word	0x20001b34

08001b04 <failsafeCheck>:

#define PWM_TIMER_MHZ 1
#define PWM_TIMER_8_MHZ 8

static void failsafeCheck(uint8_t channel, uint16_t pulse)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	460a      	mov	r2, r1
 8001b0e:	71fb      	strb	r3, [r7, #7]
 8001b10:	4613      	mov	r3, r2
 8001b12:	80bb      	strh	r3, [r7, #4]
    static uint8_t goodPulses;

    if (channel < 4 && pulse > failsafeThreshold)
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d811      	bhi.n	8001b3e <failsafeCheck+0x3a>
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <failsafeCheck+0x78>)
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	88ba      	ldrh	r2, [r7, #4]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d90c      	bls.n	8001b3e <failsafeCheck+0x3a>
        goodPulses |= (1 << channel);       // if signal is valid - mark channel as OK
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	2201      	movs	r2, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	b25a      	sxtb	r2, r3
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <failsafeCheck+0x7c>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	b25b      	sxtb	r3, r3
 8001b34:	4313      	orrs	r3, r2
 8001b36:	b25b      	sxtb	r3, r3
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <failsafeCheck+0x7c>)
 8001b3c:	701a      	strb	r2, [r3, #0]
    if (goodPulses == 0x0F) {               // If first four chanells have good pulses, clear FailSafe counter
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <failsafeCheck+0x7c>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b0f      	cmp	r3, #15
 8001b44:	d114      	bne.n	8001b70 <failsafeCheck+0x6c>
        goodPulses = 0;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <failsafeCheck+0x7c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
        if (failsafeCnt > 20)
 8001b4c:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <failsafeCheck+0x80>)
 8001b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b52:	2b14      	cmp	r3, #20
 8001b54:	dd09      	ble.n	8001b6a <failsafeCheck+0x66>
            failsafeCnt -= 20;
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <failsafeCheck+0x80>)
 8001b58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	3b14      	subs	r3, #20
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	b21a      	sxth	r2, r3
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <failsafeCheck+0x80>)
 8001b66:	801a      	strh	r2, [r3, #0]
        else
            failsafeCnt = 0;
    }
}
 8001b68:	e002      	b.n	8001b70 <failsafeCheck+0x6c>
            failsafeCnt = 0;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <failsafeCheck+0x80>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	801a      	strh	r2, [r3, #0]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	2000000c 	.word	0x2000000c
 8001b80:	20000695 	.word	0x20000695
 8001b84:	200019be 	.word	0x200019be

08001b88 <pwmReadRc>:

void pwmReadRc()
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
    PifPulse* p_pulse = &pwmPorts[0].pulse;
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <pwmReadRc+0x48>)
 8001b90:	607b      	str	r3, [r7, #4]

	if (pifPulse_sigTick(p_pulse, (*pif_act_timer1us)())) {
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <pwmReadRc+0x4c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4798      	blx	r3
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f011 fee3 	bl	8013968 <pifPulse_sigTick>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00e      	beq.n	8001bc6 <pwmReadRc+0x3e>
		failsafeCheck(p_pulse->_channel, captures[p_pulse->_channel]);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <pwmReadRc+0x50>)
 8001bba:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	f7ff ff9f 	bl	8001b04 <failsafeCheck>
	}
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200001c0 	.word	0x200001c0
 8001bd4:	200020f0 	.word	0x200020f0
 8001bd8:	2000061c 	.word	0x2000061c

08001bdc <pwmWriteStandard>:

static void pwmWriteStandard(uint8_t index, uint16_t value)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	460a      	mov	r2, r1
 8001be6:	71fb      	strb	r3, [r7, #7]
 8001be8:	4613      	mov	r3, r2
 8001bea:	80bb      	strh	r3, [r7, #4]
	switch (motors[index]->port) {
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	4a1e      	ldr	r2, [pc, #120]	; (8001c68 <pwmWriteStandard+0x8c>)
 8001bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf4:	78db      	ldrb	r3, [r3, #3]
 8001bf6:	2b0c      	cmp	r3, #12
 8001bf8:	d830      	bhi.n	8001c5c <pwmWriteStandard+0x80>
 8001bfa:	a201      	add	r2, pc, #4	; (adr r2, 8001c00 <pwmWriteStandard+0x24>)
 8001bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c00:	08001c35 	.word	0x08001c35
 8001c04:	08001c5d 	.word	0x08001c5d
 8001c08:	08001c5d 	.word	0x08001c5d
 8001c0c:	08001c5d 	.word	0x08001c5d
 8001c10:	08001c3f 	.word	0x08001c3f
 8001c14:	08001c5d 	.word	0x08001c5d
 8001c18:	08001c5d 	.word	0x08001c5d
 8001c1c:	08001c5d 	.word	0x08001c5d
 8001c20:	08001c49 	.word	0x08001c49
 8001c24:	08001c5d 	.word	0x08001c5d
 8001c28:	08001c5d 	.word	0x08001c5d
 8001c2c:	08001c5d 	.word	0x08001c5d
 8001c30:	08001c53 	.word	0x08001c53
	case TIM_CHANNEL_1:	htim3.Instance->CCR1 = value; break;
 8001c34:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <pwmWriteStandard+0x90>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	88ba      	ldrh	r2, [r7, #4]
 8001c3a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c3c:	e00e      	b.n	8001c5c <pwmWriteStandard+0x80>
	case TIM_CHANNEL_2:	htim3.Instance->CCR2 = value; break;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <pwmWriteStandard+0x90>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	88ba      	ldrh	r2, [r7, #4]
 8001c44:	639a      	str	r2, [r3, #56]	; 0x38
 8001c46:	e009      	b.n	8001c5c <pwmWriteStandard+0x80>
	case TIM_CHANNEL_3:	htim3.Instance->CCR3 = value; break;
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <pwmWriteStandard+0x90>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	88ba      	ldrh	r2, [r7, #4]
 8001c4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c50:	e004      	b.n	8001c5c <pwmWriteStandard+0x80>
	case TIM_CHANNEL_4:	htim3.Instance->CCR4 = value; break;
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <pwmWriteStandard+0x90>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	88ba      	ldrh	r2, [r7, #4]
 8001c58:	641a      	str	r2, [r3, #64]	; 0x40
 8001c5a:	bf00      	nop
	}
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	2000063c 	.word	0x2000063c
 8001c6c:	200009e8 	.word	0x200009e8

08001c70 <pwmInit>:

bool pwmInit(drv_pwm_config_t *init)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	; 0x28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
    const hardwareMaps_t *setup;
    uint16_t period;
    pwmPortData_t *p;

    // to avoid importing cfg/mcfg
    failsafeThreshold = init->failsafeThreshold;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	8a5a      	ldrh	r2, [r3, #18]
 8001c80:	4b8a      	ldr	r3, [pc, #552]	; (8001eac <pwmInit+0x23c>)
 8001c82:	801a      	strh	r2, [r3, #0]
    // pwm filtering on input
    pwmFilter = init->pwmFilter;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	79da      	ldrb	r2, [r3, #7]
 8001c88:	4b89      	ldr	r3, [pc, #548]	; (8001eb0 <pwmInit+0x240>)
 8001c8a:	701a      	strb	r2, [r3, #0]

    syncPWM = init->syncPWM;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	7d1a      	ldrb	r2, [r3, #20]
 8001c90:	4b88      	ldr	r3, [pc, #544]	; (8001eb4 <pwmInit+0x244>)
 8001c92:	701a      	strb	r2, [r3, #0]

    // this is pretty hacky shit, but it will do for now. array of 4 config maps, [ multiPWM multiPPM airPWM airPPM ]
    if (init->airplane)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	799b      	ldrb	r3, [r3, #6]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <pwmInit+0x30>
        i = 2; // switch to air hardware config
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
    if (init->usePPM)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	785b      	ldrb	r3, [r3, #1]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <pwmInit+0x3e>
        i++; // next index is for PPM
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	3301      	adds	r3, #1
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24

    setup = hardwareMaps[i];
 8001cae:	4a82      	ldr	r2, [pc, #520]	; (8001eb8 <pwmInit+0x248>)
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb6:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < MAX_PORTS; i++) {
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbc:	e0e4      	b.n	8001e88 <pwmInit+0x218>
        uint8_t pwm = setup[i].pwm;
 8001cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4413      	add	r3, r2
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	75fb      	strb	r3, [r7, #23]
        uint8_t type = setup[i].type;
 8001cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4413      	add	r3, r2
 8001cda:	785b      	ldrb	r3, [r3, #1]
 8001cdc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if (pwm == 0xFF) // terminator
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
 8001ce2:	2bff      	cmp	r3, #255	; 0xff
 8001ce4:	f000 80d5 	beq.w	8001e92 <pwmInit+0x222>
            break;

        // hacks to allow current functionality
        if ((type & (TYPE_IP | TYPE_IW)) && !init->enableInput)
 8001ce8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001cec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d009      	beq.n	8001d08 <pwmInit+0x98>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	f083 0301 	eor.w	r3, r3, #1
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <pwmInit+0x98>
        	type = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if (type & TYPE_IP) {
 8001d08:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d0c:	f003 0310 	and.w	r3, r3, #16
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d026      	beq.n	8001d62 <pwmInit+0xf2>
            p = &pwmPorts[pwm];
 8001d14:	7dfa      	ldrb	r2, [r7, #23]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	4a67      	ldr	r2, [pc, #412]	; (8001ebc <pwmInit+0x24c>)
 8001d20:	4413      	add	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
            if (pifPulse_Init(&p->pulse, PIF_ID_AUTO)) {
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	3304      	adds	r3, #4
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f011 fd6c 	bl	8013808 <pifPulse_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 80a5 	beq.w	8001e82 <pwmInit+0x212>
                pifPulse_SetPositionMode(&p->pulse, 8, 2700, captures);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	1d18      	adds	r0, r3, #4
 8001d3c:	4b60      	ldr	r3, [pc, #384]	; (8001ec0 <pwmInit+0x250>)
 8001d3e:	f640 228c 	movw	r2, #2700	; 0xa8c
 8001d42:	2108      	movs	r1, #8
 8001d44:	f011 fd8a 	bl	801385c <pifPulse_SetPositionMode>
                pifPulse_SetValidRange(&p->pulse, PIF_PMM_TICK_POSITION, PULSE_MIN, PULSE_MAX);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	1d18      	adds	r0, r3, #4
 8001d4c:	f640 03ca 	movw	r3, #2250	; 0x8ca
 8001d50:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001d54:	2140      	movs	r1, #64	; 0x40
 8001d56:	f011 fdb1 	bl	80138bc <pifPulse_SetValidRange>
                numInputs = 8;
 8001d5a:	4b5a      	ldr	r3, [pc, #360]	; (8001ec4 <pwmInit+0x254>)
 8001d5c:	2208      	movs	r2, #8
 8001d5e:	701a      	strb	r2, [r3, #0]
 8001d60:	e08f      	b.n	8001e82 <pwmInit+0x212>
            }
        } else if (type & TYPE_IW) {
 8001d62:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f040 8089 	bne.w	8001e82 <pwmInit+0x212>
                	break;
            	}
                numInputs++;
            }
*/
        } else if (type & TYPE_M) {
 8001d70:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d05d      	beq.n	8001e38 <pwmInit+0x1c8>
            uint32_t hz, mhz;

            if (init->motorPwmRate > 500 || init->fastPWM)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	895b      	ldrh	r3, [r3, #10]
 8001d80:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d84:	d803      	bhi.n	8001d8e <pwmInit+0x11e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	7d5b      	ldrb	r3, [r3, #21]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <pwmInit+0x124>
                mhz = PWM_TIMER_8_MHZ;
 8001d8e:	2308      	movs	r3, #8
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	e001      	b.n	8001d98 <pwmInit+0x128>
            else
                mhz = PWM_TIMER_MHZ;
 8001d94:	2301      	movs	r3, #1
 8001d96:	61fb      	str	r3, [r7, #28]

            hz = mhz * 1000000;
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	4a4b      	ldr	r2, [pc, #300]	; (8001ec8 <pwmInit+0x258>)
 8001d9c:	fb02 f303 	mul.w	r3, r2, r3
 8001da0:	613b      	str	r3, [r7, #16]

            if (init->fastPWM)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7d5b      	ldrb	r3, [r3, #21]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <pwmInit+0x148>
                period = hz / 4000;
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4a47      	ldr	r2, [pc, #284]	; (8001ecc <pwmInit+0x25c>)
 8001dae:	fba2 2303 	umull	r2, r3, r2, r3
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	847b      	strh	r3, [r7, #34]	; 0x22
 8001db6:	e006      	b.n	8001dc6 <pwmInit+0x156>
            else
                period = hz / init->motorPwmRate;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	895b      	ldrh	r3, [r3, #10]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dc4:	847b      	strh	r3, [r7, #34]	; 0x22

            pwmPorts[pwm].period = period;
 8001dc6:	7dfa      	ldrb	r2, [r7, #23]
 8001dc8:	493c      	ldr	r1, [pc, #240]	; (8001ebc <pwmInit+0x24c>)
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	440b      	add	r3, r1
 8001dd4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001dd6:	801a      	strh	r2, [r3, #0]
            pwmPorts[pwm].port = setup[i].port;
 8001dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4413      	add	r3, r2
 8001de4:	7dfa      	ldrb	r2, [r7, #23]
 8001de6:	7898      	ldrb	r0, [r3, #2]
 8001de8:	4934      	ldr	r1, [pc, #208]	; (8001ebc <pwmInit+0x24c>)
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	440b      	add	r3, r1
 8001df4:	3303      	adds	r3, #3
 8001df6:	4602      	mov	r2, r0
 8001df8:	701a      	strb	r2, [r3, #0]
            HAL_TIM_PWM_Start(&htim3, pwmPorts[pwm].port);
 8001dfa:	7dfa      	ldrb	r2, [r7, #23]
 8001dfc:	492f      	ldr	r1, [pc, #188]	; (8001ebc <pwmInit+0x24c>)
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	440b      	add	r3, r1
 8001e08:	3303      	adds	r3, #3
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4830      	ldr	r0, [pc, #192]	; (8001ed0 <pwmInit+0x260>)
 8001e10:	f01d fe58 	bl	801fac4 <HAL_TIM_PWM_Start>
            motors[numMotors++] = &pwmPorts[pwm];
 8001e14:	7dfa      	ldrb	r2, [r7, #23]
 8001e16:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <pwmInit+0x264>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	1c59      	adds	r1, r3, #1
 8001e1c:	b2c8      	uxtb	r0, r1
 8001e1e:	492d      	ldr	r1, [pc, #180]	; (8001ed4 <pwmInit+0x264>)
 8001e20:	7008      	strb	r0, [r1, #0]
 8001e22:	4619      	mov	r1, r3
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	4a23      	ldr	r2, [pc, #140]	; (8001ebc <pwmInit+0x24c>)
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a29      	ldr	r2, [pc, #164]	; (8001ed8 <pwmInit+0x268>)
 8001e32:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001e36:	e024      	b.n	8001e82 <pwmInit+0x212>
        } else if (type & TYPE_S) {
 8001e38:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	da20      	bge.n	8001e82 <pwmInit+0x212>
        	pwmPorts[pwm].period = 1000000 / init->servoPwmRate;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	899b      	ldrh	r3, [r3, #12]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <pwmInit+0x258>)
 8001e48:	fb93 f3f2 	sdiv	r3, r3, r2
 8001e4c:	7dfa      	ldrb	r2, [r7, #23]
 8001e4e:	b298      	uxth	r0, r3
 8001e50:	491a      	ldr	r1, [pc, #104]	; (8001ebc <pwmInit+0x24c>)
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	440b      	add	r3, r1
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	801a      	strh	r2, [r3, #0]
            servos[numServos++] = &pwmPorts[pwm];
 8001e60:	7dfa      	ldrb	r2, [r7, #23]
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <pwmInit+0x26c>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	1c59      	adds	r1, r3, #1
 8001e68:	b2c8      	uxtb	r0, r1
 8001e6a:	491c      	ldr	r1, [pc, #112]	; (8001edc <pwmInit+0x26c>)
 8001e6c:	7008      	strb	r0, [r1, #0]
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	4a10      	ldr	r2, [pc, #64]	; (8001ebc <pwmInit+0x24c>)
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a18      	ldr	r2, [pc, #96]	; (8001ee0 <pwmInit+0x270>)
 8001e7e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    for (i = 0; i < MAX_PORTS; i++) {
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	3301      	adds	r3, #1
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	2b0d      	cmp	r3, #13
 8001e8c:	f77f af17 	ble.w	8001cbe <pwmInit+0x4e>
 8001e90:	e000      	b.n	8001e94 <pwmInit+0x224>
            break;
 8001e92:	bf00      	nop
        }
    }

    // determine motor writer function
    pwmWritePtr = pwmWriteStandard;
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <pwmInit+0x274>)
 8001e96:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <pwmInit+0x278>)
 8001e98:	601a      	str	r2, [r3, #0]

    // set return values in init struct
    init->numServos = numServos;
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <pwmInit+0x26c>)
 8001e9c:	781a      	ldrb	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	759a      	strb	r2, [r3, #22]

    return false;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3728      	adds	r7, #40	; 0x28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	2000000c 	.word	0x2000000c
 8001eb0:	20000693 	.word	0x20000693
 8001eb4:	20000694 	.word	0x20000694
 8001eb8:	08026b28 	.word	0x08026b28
 8001ebc:	200001bc 	.word	0x200001bc
 8001ec0:	2000061c 	.word	0x2000061c
 8001ec4:	20000692 	.word	0x20000692
 8001ec8:	000f4240 	.word	0x000f4240
 8001ecc:	10624dd3 	.word	0x10624dd3
 8001ed0:	200009e8 	.word	0x200009e8
 8001ed4:	20000690 	.word	0x20000690
 8001ed8:	2000063c 	.word	0x2000063c
 8001edc:	20000691 	.word	0x20000691
 8001ee0:	2000066c 	.word	0x2000066c
 8001ee4:	2000068c 	.word	0x2000068c
 8001ee8:	08001bdd 	.word	0x08001bdd

08001eec <actPwmWriteMotor>:

void actPwmWriteMotor(uint8_t index, uint16_t value)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	460a      	mov	r2, r1
 8001ef6:	71fb      	strb	r3, [r7, #7]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	80bb      	strh	r3, [r7, #4]
    if (index < numMotors)
 8001efc:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <actPwmWriteMotor+0x30>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	79fa      	ldrb	r2, [r7, #7]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d205      	bcs.n	8001f12 <actPwmWriteMotor+0x26>
        pwmWritePtr(index, value);
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <actPwmWriteMotor+0x34>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	88b9      	ldrh	r1, [r7, #4]
 8001f0c:	79fa      	ldrb	r2, [r7, #7]
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4798      	blx	r3
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000690 	.word	0x20000690
 8001f20:	2000068c 	.word	0x2000068c

08001f24 <actPwmWriteServo>:

void actPwmWriteServo(uint8_t index, uint16_t value)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	460a      	mov	r2, r1
 8001f2e:	71fb      	strb	r3, [r7, #7]
 8001f30:	4613      	mov	r3, r2
 8001f32:	80bb      	strh	r3, [r7, #4]
//    if (index < numServos)
//    	analogWrite(servos[index]->port, value);
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <actPwmRead>:

uint16_t actPwmRead(uint8_t channel)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
    return captures[channel];
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <actPwmRead+0x20>)
 8001f4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	2000061c 	.word	0x2000061c

08001f64 <systemInit>:
	PifStorageVar s_storage;
#endif


void systemInit(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
#ifdef BUZZER
    actBuzzerAction(PIF_ID_BUZZER, OFF);
 8001f68:	2100      	movs	r1, #0
 8001f6a:	f44f 7098 	mov.w	r0, #304	; 0x130
 8001f6e:	f000 f8ad 	bl	80020cc <actBuzzerAction>
#endif
    actLed0State(OFF);
 8001f72:	2000      	movs	r0, #0
 8001f74:	f000 f852 	bl	800201c <actLed0State>
    actLed1State(OFF);
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f000 f87b 	bl	8002074 <actLed1State>
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <failureMode>:

void failureMode(uint8_t mode)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	71fb      	strb	r3, [r7, #7]
#ifdef __PIF_DEBUG__
    pifLog_SendAndExit();
 8001f8c:	f011 fbca 	bl	8013724 <pifLog_SendAndExit>
#endif
    actLed1State(OFF);
 8001f90:	2000      	movs	r0, #0
 8001f92:	f000 f86f 	bl	8002074 <actLed1State>
    actLed0State(ON);
 8001f96:	2001      	movs	r0, #1
 8001f98:	f000 f840 	bl	800201c <actLed0State>
    while (1) {
        actLed1Toggle();
 8001f9c:	f000 f880 	bl	80020a0 <actLed1Toggle>
        actLed0Toggle();
 8001fa0:	f000 f852 	bl	8002048 <actLed0Toggle>
        pif_Delay1ms(475 * mode - 2);
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	0052      	lsls	r2, r2, #1
 8001fac:	441a      	add	r2, r3
 8001fae:	0152      	lsls	r2, r2, #5
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	0091      	lsls	r1, r2, #2
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4413      	add	r3, r2
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3b02      	subs	r3, #2
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f00f fa92 	bl	80114ec <pif_Delay1ms>
        actBuzzerAction(PIF_ID_BUZZER, ON);
 8001fc8:	2101      	movs	r1, #1
 8001fca:	f44f 7098 	mov.w	r0, #304	; 0x130
 8001fce:	f000 f87d 	bl	80020cc <actBuzzerAction>
        pif_Delay1ms(25);
 8001fd2:	2019      	movs	r0, #25
 8001fd4:	f00f fa8a 	bl	80114ec <pif_Delay1ms>
        actBuzzerAction(PIF_ID_BUZZER, OFF);
 8001fd8:	2100      	movs	r1, #0
 8001fda:	f44f 7098 	mov.w	r0, #304	; 0x130
 8001fde:	f000 f875 	bl	80020cc <actBuzzerAction>
        actLed1Toggle();
 8001fe2:	e7db      	b.n	8001f9c <failureMode+0x1a>

08001fe4 <systemReset>:
    }
}

void systemReset(bool toBootloader)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
	pifLog_Printf(LT_INFO, "System Rebooting %d...", toBootloader);
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4907      	ldr	r1, [pc, #28]	; (8002010 <systemReset+0x2c>)
 8001ff4:	2002      	movs	r0, #2
 8001ff6:	f011 facd 	bl	8013594 <pifLog_Printf>
	pif_Delay1ms(2000);
 8001ffa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ffe:	f00f fa75 	bl	80114ec <pif_Delay1ms>
//	__DSB;
	SCB->AIRCR = ((0x5FA << SCB_AIRCR_VECTKEY_Pos) | SCB_AIRCR_SYSRESETREQ_Msk);//software reset
 8002002:	4b04      	ldr	r3, [pc, #16]	; (8002014 <systemReset+0x30>)
 8002004:	4a04      	ldr	r2, [pc, #16]	; (8002018 <systemReset+0x34>)
 8002006:	60da      	str	r2, [r3, #12]
	//RSTC->RSTC_CR = RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
	//NVIC_SystemReset();
}
 8002008:	bf00      	nop
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	08024bc4 	.word	0x08024bc4
 8002014:	e000ed00 	.word	0xe000ed00
 8002018:	05fa0004 	.word	0x05fa0004

0800201c <actLed0State>:

static BOOL len0_state = OFF;

void actLed0State(BOOL state)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
#ifdef LED0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, state);
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	461a      	mov	r2, r3
 800202a:	2110      	movs	r1, #16
 800202c:	4804      	ldr	r0, [pc, #16]	; (8002040 <actLed0State+0x24>)
 800202e:	f01a f8b1 	bl	801c194 <HAL_GPIO_WritePin>
    len0_state = state;
 8002032:	4a04      	ldr	r2, [pc, #16]	; (8002044 <actLed0State+0x28>)
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	7013      	strb	r3, [r2, #0]
#else
    (void)state;
#endif
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40020800 	.word	0x40020800
 8002044:	200006e0 	.word	0x200006e0

08002048 <actLed0Toggle>:

void actLed0Toggle()
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
#ifdef LED0
	len0_state ^= 1;
 800204c:	4b07      	ldr	r3, [pc, #28]	; (800206c <actLed0Toggle+0x24>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	f083 0301 	eor.w	r3, r3, #1
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <actLed0Toggle+0x24>)
 8002058:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, len0_state);
 800205a:	4b04      	ldr	r3, [pc, #16]	; (800206c <actLed0Toggle+0x24>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	2110      	movs	r1, #16
 8002062:	4803      	ldr	r0, [pc, #12]	; (8002070 <actLed0Toggle+0x28>)
 8002064:	f01a f896 	bl	801c194 <HAL_GPIO_WritePin>
#endif
}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	200006e0 	.word	0x200006e0
 8002070:	40020800 	.word	0x40020800

08002074 <actLed1State>:

static BOOL len1_state = OFF;

void actLed1State(BOOL state)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
#ifdef LED1
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, state);
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	461a      	mov	r2, r3
 8002082:	2104      	movs	r1, #4
 8002084:	4804      	ldr	r0, [pc, #16]	; (8002098 <actLed1State+0x24>)
 8002086:	f01a f885 	bl	801c194 <HAL_GPIO_WritePin>
    len1_state = state;
 800208a:	4a04      	ldr	r2, [pc, #16]	; (800209c <actLed1State+0x28>)
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	7013      	strb	r3, [r2, #0]
#else
    (void)state;
#endif
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40020400 	.word	0x40020400
 800209c:	200006e1 	.word	0x200006e1

080020a0 <actLed1Toggle>:

void actLed1Toggle()
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
#ifdef LED1
	len1_state ^= 1;
 80020a4:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <actLed1Toggle+0x24>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	f083 0301 	eor.w	r3, r3, #1
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <actLed1Toggle+0x24>)
 80020b0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, len1_state);
 80020b2:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <actLed1Toggle+0x24>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	2104      	movs	r1, #4
 80020ba:	4803      	ldr	r0, [pc, #12]	; (80020c8 <actLed1Toggle+0x28>)
 80020bc:	f01a f86a 	bl	801c194 <HAL_GPIO_WritePin>
#endif
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200006e1 	.word	0x200006e1
 80020c8:	40020400 	.word	0x40020400

080020cc <actBuzzerAction>:

void actBuzzerAction(PifId id, BOOL action)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	460a      	mov	r2, r1
 80020d6:	80fb      	strh	r3, [r7, #6]
 80020d8:	4613      	mov	r3, r2
 80020da:	717b      	strb	r3, [r7, #5]
	(void)id;

#ifdef BUZZER
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, action);
 80020dc:	797b      	ldrb	r3, [r7, #5]
 80020de:	461a      	mov	r2, r3
 80020e0:	2120      	movs	r1, #32
 80020e2:	4803      	ldr	r0, [pc, #12]	; (80020f0 <actBuzzerAction+0x24>)
 80020e4:	f01a f856 	bl	801c194 <HAL_GPIO_WritePin>
#else
    (void)action;
#endif
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40020800 	.word	0x40020800

080020f4 <HAL_GPIO_EXTI_Callback>:
    (void)state;
#endif
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin) {
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d005      	beq.n	8002110 <HAL_GPIO_EXTI_Callback+0x1c>
 8002104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002108:	d105      	bne.n	8002116 <HAL_GPIO_EXTI_Callback+0x22>
    case RC_PPM_Pin:
    	pwmReadRc();
 800210a:	f7ff fd3d 	bl	8001b88 <pwmReadRc>
		break;
 800210e:	e002      	b.n	8002116 <HAL_GPIO_EXTI_Callback+0x22>

    case SONAR_ECHO_Pin:
    	hcsr04Echo();
 8002110:	f7ff fbb2 	bl	8001878 <hcsr04Echo>
    	break;
 8002114:	bf00      	nop
    }
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <storageInit>:
}

#endif

PifStorage* storageInit()
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af02      	add	r7, sp, #8
	if (!pifStorageFix_Init(&s_storage, PIF_ID_AUTO)) return NULL;
	if (!pifStorageFix_AttachActStorage(&s_storage, actStorageRead, actStorageWrite)) goto fail;
	if (!pifStorageFix_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME)) goto fail;
#endif
#ifdef STORAGE_EEPROM
	if (!pifStorageVar_Init(&s_storage, PIF_ID_AUTO)) return NULL;
 8002126:	2100      	movs	r1, #0
 8002128:	4822      	ldr	r0, [pc, #136]	; (80021b4 <storageInit+0x94>)
 800212a:	f017 ff37 	bl	8019f9c <pifStorageVar_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <storageInit+0x18>
 8002134:	2300      	movs	r3, #0
 8002136:	e039      	b.n	80021ac <storageInit+0x8c>
	if (!pifStorageVar_AttachI2c(&s_storage, &g_i2c_port, ATMEL_I2C_ADDRESS, EEPROM_I_ADDR_SIZE, 10)) goto fail;	// 10ms
 8002138:	230a      	movs	r3, #10
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	2302      	movs	r3, #2
 800213e:	2250      	movs	r2, #80	; 0x50
 8002140:	491d      	ldr	r1, [pc, #116]	; (80021b8 <storageInit+0x98>)
 8002142:	481c      	ldr	r0, [pc, #112]	; (80021b4 <storageInit+0x94>)
 8002144:	f018 f872 	bl	801a22c <pifStorageVar_AttachI2c>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d027      	beq.n	800219e <storageInit+0x7e>
	if (!pifStorageVar_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME, 8)) goto fail;
 800214e:	2308      	movs	r3, #8
 8002150:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002154:	2140      	movs	r1, #64	; 0x40
 8002156:	4817      	ldr	r0, [pc, #92]	; (80021b4 <storageInit+0x94>)
 8002158:	f017 ff96 	bl	801a088 <pifStorageVar_SetMedia>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d01f      	beq.n	80021a2 <storageInit+0x82>
	if (!pifStorageVar_IsFormat(&s_storage.parent)) {
 8002162:	4814      	ldr	r0, [pc, #80]	; (80021b4 <storageInit+0x94>)
 8002164:	f018 f87b 	bl	801a25e <pifStorageVar_IsFormat>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d115      	bne.n	800219a <storageInit+0x7a>
		pifLog_Printf(LT_INFO, "Storage Init : EC=%d", pif_error);
 800216e:	4b13      	ldr	r3, [pc, #76]	; (80021bc <storageInit+0x9c>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	4912      	ldr	r1, [pc, #72]	; (80021c0 <storageInit+0xa0>)
 8002176:	2002      	movs	r0, #2
 8002178:	f011 fa0c 	bl	8013594 <pifLog_Printf>
		if (!pifStorage_Format(&s_storage.parent)) {
 800217c:	480d      	ldr	r0, [pc, #52]	; (80021b4 <storageInit+0x94>)
 800217e:	f017 fe2a 	bl	8019dd6 <pifStorage_Format>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d104      	bne.n	8002192 <storageInit+0x72>
			pifLog_Printf(LT_INFO, "Storage format failed");
 8002188:	490e      	ldr	r1, [pc, #56]	; (80021c4 <storageInit+0xa4>)
 800218a:	2002      	movs	r0, #2
 800218c:	f011 fa02 	bl	8013594 <pifLog_Printf>
			goto fail;
 8002190:	e008      	b.n	80021a4 <storageInit+0x84>
		}
		else {
			pifLog_Printf(LT_INFO, "Storage format");
 8002192:	490d      	ldr	r1, [pc, #52]	; (80021c8 <storageInit+0xa8>)
 8002194:	2002      	movs	r0, #2
 8002196:	f011 f9fd 	bl	8013594 <pifLog_Printf>
		}
	}
#endif
	return &s_storage.parent;
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <storageInit+0x94>)
 800219c:	e006      	b.n	80021ac <storageInit+0x8c>
	if (!pifStorageVar_AttachI2c(&s_storage, &g_i2c_port, ATMEL_I2C_ADDRESS, EEPROM_I_ADDR_SIZE, 10)) goto fail;	// 10ms
 800219e:	bf00      	nop
 80021a0:	e000      	b.n	80021a4 <storageInit+0x84>
	if (!pifStorageVar_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME, 8)) goto fail;
 80021a2:	bf00      	nop
fail:
#ifdef STORAGE_FLASH
	pifStorageFix_Clear(&s_storage);
#endif
#ifdef STORAGE_EEPROM
	pifStorageVar_Clear(&s_storage);
 80021a4:	4803      	ldr	r0, [pc, #12]	; (80021b4 <storageInit+0x94>)
 80021a6:	f017 ff45 	bl	801a034 <pifStorageVar_Clear>
#endif
	return NULL;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000698 	.word	0x20000698
 80021b8:	20001b34 	.word	0x20001b34
 80021bc:	200020d1 	.word	0x200020d1
 80021c0:	08024bdc 	.word	0x08024bdc
 80021c4:	08024bf4 	.word	0x08024bf4
 80021c8:	08024c0c 	.word	0x08024c0c

080021cc <actUartSetBaudRate>:
#endif
static uartPort_t uartPort[3];


static BOOL actUartSetBaudRate(PifComm* p_comm, uint32_t baudrate)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	8a1b      	ldrh	r3, [r3, #16]
 80021da:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 80021de:	4613      	mov	r3, r2
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4a11      	ldr	r2, [pc, #68]	; (800222c <actUartSetBaudRate+0x60>)
 80021e8:	4413      	add	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]

	if (p_uart->p_huart->Init.BaudRate == baudrate) return TRUE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d101      	bne.n	80021fc <actUartSetBaudRate+0x30>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e013      	b.n	8002224 <actUartSetBaudRate+0x58>

	HAL_UART_DeInit(p_uart->p_huart);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002200:	4618      	mov	r0, r3
 8002202:	f01e fc88 	bl	8020b16 <HAL_UART_DeInit>
	p_uart->p_huart->Init.BaudRate = baudrate;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(p_uart->p_huart) != HAL_OK) {
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002212:	4618      	mov	r0, r3
 8002214:	f01e fc32 	bl	8020a7c <HAL_UART_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <actUartSetBaudRate+0x56>
		return FALSE;
 800221e:	2300      	movs	r3, #0
 8002220:	e000      	b.n	8002224 <actUartSetBaudRate+0x58>
	}
	return TRUE;
 8002222:	2301      	movs	r3, #1
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000718 	.word	0x20000718

08002230 <actUartStartTransfer>:

static BOOL actUartStartTransfer(PifComm* p_comm)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	uint8_t* p_data;
	uint8_t state;
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	8a1b      	ldrh	r3, [r3, #16]
 800223c:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8002240:	4613      	mov	r3, r2
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4a12      	ldr	r2, [pc, #72]	; (8002294 <actUartStartTransfer+0x64>)
 800224a:	4413      	add	r3, r2
 800224c:	617b      	str	r3, [r7, #20]

	p_uart->tx_frame_size = UART_TX_FRAME_SIZE;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2208      	movs	r2, #8
 8002252:	879a      	strh	r2, [r3, #60]	; 0x3c
	state = pifComm_StartGetTxData(p_comm, &p_data, &p_uart->tx_frame_size);
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	4619      	mov	r1, r3
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f00f ffda 	bl	801221a <pifComm_StartGetTxData>
 8002266:	4603      	mov	r3, r0
 8002268:	74fb      	strb	r3, [r7, #19]
	if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 800226a:	7cfb      	ldrb	r3, [r7, #19]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d009      	beq.n	8002288 <actUartStartTransfer+0x58>
		HAL_UART_Transmit_IT(p_uart->p_huart, p_data, p_uart->tx_frame_size);
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002278:	68f9      	ldr	r1, [r7, #12]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800227e:	461a      	mov	r2, r3
 8002280:	f01e fc78 	bl	8020b74 <HAL_UART_Transmit_IT>
		return TRUE;
 8002284:	2301      	movs	r3, #1
 8002286:	e000      	b.n	800228a <actUartStartTransfer+0x5a>
	}
	return FALSE;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000718 	.word	0x20000718

08002298 <serialUSART>:

static BOOL serialUSART(uartPort_t* s, uint32_t baudRate, PifId pif_id)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	4613      	mov	r3, r2
 80022a4:	80fb      	strh	r3, [r7, #6]
	s->init = TRUE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (!pifComm_Init(&s->port.comm, pif_id)) return FALSE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	3304      	adds	r3, #4
 80022b2:	88fa      	ldrh	r2, [r7, #6]
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f00f fe9a 	bl	8011ff0 <pifComm_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <serialUSART+0x2e>
 80022c2:	2300      	movs	r3, #0
 80022c4:	e02b      	b.n	800231e <serialUSART+0x86>
	if (!pifComm_AttachTask(&s->port.comm, TM_PERIOD_MS, 1, TRUE)) return FALSE;	// 1ms
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1d18      	adds	r0, r3, #4
 80022ca:	2301      	movs	r3, #1
 80022cc:	2201      	movs	r2, #1
 80022ce:	2102      	movs	r1, #2
 80022d0:	f010 f838 	bl	8012344 <pifComm_AttachTask>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <serialUSART+0x46>
 80022da:	2300      	movs	r3, #0
 80022dc:	e01f      	b.n	800231e <serialUSART+0x86>
	if (!pifComm_AllocRxBuffer(&s->port.comm, 64, s->rx_threshold)) return FALSE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1d18      	adds	r0, r3, #4
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80022e8:	461a      	mov	r2, r3
 80022ea:	2140      	movs	r1, #64	; 0x40
 80022ec:	f00f fed0 	bl	8012090 <pifComm_AllocRxBuffer>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <serialUSART+0x62>
 80022f6:	2300      	movs	r3, #0
 80022f8:	e011      	b.n	800231e <serialUSART+0x86>
	if (!pifComm_AllocTxBuffer(&s->port.comm, 64)) return FALSE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	3304      	adds	r3, #4
 80022fe:	2140      	movs	r1, #64	; 0x40
 8002300:	4618      	mov	r0, r3
 8002302:	f00f ff09 	bl	8012118 <pifComm_AllocTxBuffer>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <serialUSART+0x78>
 800230c:	2300      	movs	r3, #0
 800230e:	e006      	b.n	800231e <serialUSART+0x86>
	s->port.comm.act_set_baudrate = actUartSetBaudRate;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4a05      	ldr	r2, [pc, #20]	; (8002328 <serialUSART+0x90>)
 8002314:	605a      	str	r2, [r3, #4]
	s->port.comm.act_start_transfer = actUartStartTransfer;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <serialUSART+0x94>)
 800231a:	611a      	str	r2, [r3, #16]
	return TRUE;
 800231c:	2301      	movs	r3, #1
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	080021cd 	.word	0x080021cd
 800232c:	08002231 	.word	0x08002231

08002330 <actLogStartTransfer>:

#ifdef __PIF_DEBUG__

static BOOL actLogStartTransfer(PifComm* p_comm)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
	uint8_t *p_data, state;

	s_usLogTx = 0;
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <actLogStartTransfer+0x48>)
 800233a:	2200      	movs	r2, #0
 800233c:	801a      	strh	r2, [r3, #0]
	state = pifComm_StartGetTxData(p_comm, &p_data, &s_usLogTx);
 800233e:	f107 0308 	add.w	r3, r7, #8
 8002342:	4a0d      	ldr	r2, [pc, #52]	; (8002378 <actLogStartTransfer+0x48>)
 8002344:	4619      	mov	r1, r3
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f00f ff67 	bl	801221a <pifComm_StartGetTxData>
 800234c:	4603      	mov	r3, r0
 800234e:	73fb      	strb	r3, [r7, #15]
	if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d008      	beq.n	800236c <actLogStartTransfer+0x3c>
		HAL_UART_Transmit_IT(&huart2, p_data, s_usLogTx);
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	4a06      	ldr	r2, [pc, #24]	; (8002378 <actLogStartTransfer+0x48>)
 800235e:	8812      	ldrh	r2, [r2, #0]
 8002360:	4619      	mov	r1, r3
 8002362:	4806      	ldr	r0, [pc, #24]	; (800237c <actLogStartTransfer+0x4c>)
 8002364:	f01e fc06 	bl	8020b74 <HAL_UART_Transmit_IT>
		return TRUE;
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <actLogStartTransfer+0x3e>
	}
	return FALSE;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000714 	.word	0x20000714
 800237c:	20000a74 	.word	0x20000a74

08002380 <logOpen>:

BOOL logOpen()
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
	pifLog_Init();
 8002384:	f011 f81a 	bl	80133bc <pifLog_Init>

	if (!pifComm_Init(&s_comm_log, PIF_ID_AUTO)) return FALSE;
 8002388:	2100      	movs	r1, #0
 800238a:	4815      	ldr	r0, [pc, #84]	; (80023e0 <logOpen+0x60>)
 800238c:	f00f fe30 	bl	8011ff0 <pifComm_Init>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <logOpen+0x1a>
 8002396:	2300      	movs	r3, #0
 8002398:	e020      	b.n	80023dc <logOpen+0x5c>
	if (!pifComm_AttachTask(&s_comm_log, TM_PERIOD_MS, 1, TRUE)) return FALSE;			// 1ms
 800239a:	2301      	movs	r3, #1
 800239c:	2201      	movs	r2, #1
 800239e:	2102      	movs	r1, #2
 80023a0:	480f      	ldr	r0, [pc, #60]	; (80023e0 <logOpen+0x60>)
 80023a2:	f00f ffcf 	bl	8012344 <pifComm_AttachTask>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <logOpen+0x30>
 80023ac:	2300      	movs	r3, #0
 80023ae:	e015      	b.n	80023dc <logOpen+0x5c>
	if (!pifComm_AllocTxBuffer(&s_comm_log, 256)) return FALSE;
 80023b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023b4:	480a      	ldr	r0, [pc, #40]	; (80023e0 <logOpen+0x60>)
 80023b6:	f00f feaf 	bl	8012118 <pifComm_AllocTxBuffer>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <logOpen+0x44>
 80023c0:	2300      	movs	r3, #0
 80023c2:	e00b      	b.n	80023dc <logOpen+0x5c>
	s_comm_log.act_start_transfer = actLogStartTransfer;
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <logOpen+0x60>)
 80023c6:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <logOpen+0x64>)
 80023c8:	60da      	str	r2, [r3, #12]

	if (!pifLog_AttachComm(&s_comm_log)) return FALSE;
 80023ca:	4805      	ldr	r0, [pc, #20]	; (80023e0 <logOpen+0x60>)
 80023cc:	f011 f970 	bl	80136b0 <pifLog_AttachComm>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <logOpen+0x5a>
 80023d6:	2300      	movs	r3, #0
 80023d8:	e000      	b.n	80023dc <logOpen+0x5c>
	return TRUE;
 80023da:	2301      	movs	r3, #1
}
 80023dc:	4618      	mov	r0, r3
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	200006e4 	.word	0x200006e4
 80023e4:	08002331 	.word	0x08002331

080023e8 <uartOpen>:

#endif

serialPort_t *uartOpen(int port, uint32_t baudRate, portMode_t mode)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	4613      	mov	r3, r2
 80023f4:	71fb      	strb	r3, [r7, #7]
    uartPort_t *s = NULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]

    if (port == UART_PORT_1) {
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d109      	bne.n	8002414 <uartOpen+0x2c>
        s = &uartPort[0];
 8002400:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <uartOpen+0x98>)
 8002402:	617b      	str	r3, [r7, #20]
        s->p_huart = &huart1;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <uartOpen+0x9c>)
 8002408:	639a      	str	r2, [r3, #56]	; 0x38
        s->rx_threshold = 25;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2219      	movs	r2, #25
 800240e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002412:	e00e      	b.n	8002432 <uartOpen+0x4a>
        s = &uartPort[1];
        s->p_huart = &huart2;
        s->rx_threshold = 10;
    }
#endif
    else if (port == UART_PORT_3) {
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d109      	bne.n	800242e <uartOpen+0x46>
        s = &uartPort[2];
 800241a:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <uartOpen+0xa0>)
 800241c:	617b      	str	r3, [r7, #20]
        s->p_huart = &huart6;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	4a1a      	ldr	r2, [pc, #104]	; (800248c <uartOpen+0xa4>)
 8002422:	639a      	str	r2, [r3, #56]	; 0x38
        s->rx_threshold = 25;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2219      	movs	r2, #25
 8002428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800242c:	e001      	b.n	8002432 <uartOpen+0x4a>
    }
    else return NULL;
 800242e:	2300      	movs	r3, #0
 8002430:	e021      	b.n	8002476 <uartOpen+0x8e>

    if (!serialUSART(s, baudRate, PIF_ID_UART(port - 1))) return FALSE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	b29b      	uxth	r3, r3
 8002436:	33ff      	adds	r3, #255	; 0xff
 8002438:	b29b      	uxth	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	6978      	ldr	r0, [r7, #20]
 8002440:	f7ff ff2a 	bl	8002298 <serialUSART>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <uartOpen+0x66>
 800244a:	2300      	movs	r3, #0
 800244c:	e013      	b.n	8002476 <uartOpen+0x8e>

    // callback for IRQ-based RX ONLY
    if (!serialSetBaudRate(&s->port, baudRate)) {
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f8e8 	bl	8002628 <serialSetBaudRate>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <uartOpen+0x84>
    	pifComm_Clear(&s->port.comm);
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3304      	adds	r3, #4
 8002462:	4618      	mov	r0, r3
 8002464:	f00f fdee 	bl	8012044 <pifComm_Clear>
    	return FALSE;
 8002468:	2300      	movs	r3, #0
 800246a:	e004      	b.n	8002476 <uartOpen+0x8e>
    }

	s->init = FALSE;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return (serialPort_t *)s;
 8002474:	697b      	ldr	r3, [r7, #20]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000718 	.word	0x20000718
 8002484:	20000a30 	.word	0x20000a30
 8002488:	200007a0 	.word	0x200007a0
 800248c:	20000ab8 	.word	0x20000ab8

08002490 <HAL_UART_TxCpltCallback>:

// Handlers

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	uint8_t* p_data;
	uint8_t state;
	uartPort_t* p_uart;

	if (huart->Instance == USART1) {
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a39      	ldr	r2, [pc, #228]	; (8002584 <HAL_UART_TxCpltCallback+0xf4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d102      	bne.n	80024a8 <HAL_UART_TxCpltCallback+0x18>
		p_uart = &uartPort[0];
 80024a2:	4b39      	ldr	r3, [pc, #228]	; (8002588 <HAL_UART_TxCpltCallback+0xf8>)
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	e035      	b.n	8002514 <HAL_UART_TxCpltCallback+0x84>
	}
	else if (huart->Instance == USART2) {
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a37      	ldr	r2, [pc, #220]	; (800258c <HAL_UART_TxCpltCallback+0xfc>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d129      	bne.n	8002506 <HAL_UART_TxCpltCallback+0x76>
#ifdef __PIF_DEBUG__
		state = pifComm_EndGetTxData(&s_comm_log, s_usLogTx);
 80024b2:	4b37      	ldr	r3, [pc, #220]	; (8002590 <HAL_UART_TxCpltCallback+0x100>)
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	4619      	mov	r1, r3
 80024b8:	4836      	ldr	r0, [pc, #216]	; (8002594 <HAL_UART_TxCpltCallback+0x104>)
 80024ba:	f00f fee6 	bl	801228a <pifComm_EndGetTxData>
 80024be:	4603      	mov	r3, r0
 80024c0:	74fb      	strb	r3, [r7, #19]
		if (state & PIF_COMM_SEND_DATA_STATE_EMPTY) {
 80024c2:	7cfb      	ldrb	r3, [r7, #19]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_UART_TxCpltCallback+0x44>
			pifComm_FinishTransfer(&s_comm_log);
 80024cc:	4831      	ldr	r0, [pc, #196]	; (8002594 <HAL_UART_TxCpltCallback+0x104>)
 80024ce:	f00f fef5 	bl	80122bc <pifComm_FinishTransfer>
			state = pifComm_StartGetTxData(&s_comm_log, &p_data, &s_usLogTx);
			if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
				HAL_UART_Transmit_IT(huart, p_data, s_usLogTx);
			}
		}
		return;
 80024d2:	e050      	b.n	8002576 <HAL_UART_TxCpltCallback+0xe6>
			s_usLogTx = 0;
 80024d4:	4b2e      	ldr	r3, [pc, #184]	; (8002590 <HAL_UART_TxCpltCallback+0x100>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	801a      	strh	r2, [r3, #0]
			state = pifComm_StartGetTxData(&s_comm_log, &p_data, &s_usLogTx);
 80024da:	f107 030c 	add.w	r3, r7, #12
 80024de:	4a2c      	ldr	r2, [pc, #176]	; (8002590 <HAL_UART_TxCpltCallback+0x100>)
 80024e0:	4619      	mov	r1, r3
 80024e2:	482c      	ldr	r0, [pc, #176]	; (8002594 <HAL_UART_TxCpltCallback+0x104>)
 80024e4:	f00f fe99 	bl	801221a <pifComm_StartGetTxData>
 80024e8:	4603      	mov	r3, r0
 80024ea:	74fb      	strb	r3, [r7, #19]
			if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d03f      	beq.n	8002576 <HAL_UART_TxCpltCallback+0xe6>
				HAL_UART_Transmit_IT(huart, p_data, s_usLogTx);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4a25      	ldr	r2, [pc, #148]	; (8002590 <HAL_UART_TxCpltCallback+0x100>)
 80024fa:	8812      	ldrh	r2, [r2, #0]
 80024fc:	4619      	mov	r1, r3
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f01e fb38 	bl	8020b74 <HAL_UART_Transmit_IT>
		return;
 8002504:	e037      	b.n	8002576 <HAL_UART_TxCpltCallback+0xe6>
#else
		p_uart = &uartPort[1];
#endif
	}
	else if (huart->Instance == USART6) {
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a23      	ldr	r2, [pc, #140]	; (8002598 <HAL_UART_TxCpltCallback+0x108>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d134      	bne.n	800257a <HAL_UART_TxCpltCallback+0xea>
		p_uart = &uartPort[2];
 8002510:	4b22      	ldr	r3, [pc, #136]	; (800259c <HAL_UART_TxCpltCallback+0x10c>)
 8002512:	617b      	str	r3, [r7, #20]
	}
	else return;

	state = pifComm_EndGetTxData(&p_uart->port.comm, p_uart->tx_frame_size);
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	1d1a      	adds	r2, r3, #4
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800251c:	4619      	mov	r1, r3
 800251e:	4610      	mov	r0, r2
 8002520:	f00f feb3 	bl	801228a <pifComm_EndGetTxData>
 8002524:	4603      	mov	r3, r0
 8002526:	74fb      	strb	r3, [r7, #19]
	if (state & PIF_COMM_SEND_DATA_STATE_EMPTY) {
 8002528:	7cfb      	ldrb	r3, [r7, #19]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <HAL_UART_TxCpltCallback+0xae>
		pifComm_FinishTransfer(&p_uart->port.comm);
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	3304      	adds	r3, #4
 8002536:	4618      	mov	r0, r3
 8002538:	f00f fec0 	bl	80122bc <pifComm_FinishTransfer>
 800253c:	e01e      	b.n	800257c <HAL_UART_TxCpltCallback+0xec>
	}
	else {
		p_uart->tx_frame_size = UART_TX_FRAME_SIZE;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2208      	movs	r2, #8
 8002542:	879a      	strh	r2, [r3, #60]	; 0x3c
		state = pifComm_StartGetTxData(&p_uart->port.comm, &p_data, &p_uart->tx_frame_size);
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	1d18      	adds	r0, r3, #4
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800254e:	f107 030c 	add.w	r3, r7, #12
 8002552:	4619      	mov	r1, r3
 8002554:	f00f fe61 	bl	801221a <pifComm_StartGetTxData>
 8002558:	4603      	mov	r3, r0
 800255a:	74fb      	strb	r3, [r7, #19]
		if (state & 1) {
 800255c:	7cfb      	ldrb	r3, [r7, #19]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_UART_TxCpltCallback+0xec>
			HAL_UART_Transmit_IT(huart, p_data, p_uart->tx_frame_size);
 8002566:	68f9      	ldr	r1, [r7, #12]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800256c:	461a      	mov	r2, r3
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f01e fb00 	bl	8020b74 <HAL_UART_Transmit_IT>
 8002574:	e002      	b.n	800257c <HAL_UART_TxCpltCallback+0xec>
		return;
 8002576:	bf00      	nop
 8002578:	e000      	b.n	800257c <HAL_UART_TxCpltCallback+0xec>
	else return;
 800257a:	bf00      	nop
		}
	}
}
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40011000 	.word	0x40011000
 8002588:	20000718 	.word	0x20000718
 800258c:	40004400 	.word	0x40004400
 8002590:	20000714 	.word	0x20000714
 8002594:	200006e4 	.word	0x200006e4
 8002598:	40011400 	.word	0x40011400
 800259c:	200007a0 	.word	0x200007a0

080025a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart;

	if (huart->Instance == USART1) {
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a18      	ldr	r2, [pc, #96]	; (8002610 <HAL_UART_RxCpltCallback+0x70>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d102      	bne.n	80025b8 <HAL_UART_RxCpltCallback+0x18>
		p_uart = &uartPort[0];
 80025b2:	4b18      	ldr	r3, [pc, #96]	; (8002614 <HAL_UART_RxCpltCallback+0x74>)
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	e00e      	b.n	80025d6 <HAL_UART_RxCpltCallback+0x36>
	}
	else if (huart->Instance == USART2) {
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a16      	ldr	r2, [pc, #88]	; (8002618 <HAL_UART_RxCpltCallback+0x78>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d102      	bne.n	80025c8 <HAL_UART_RxCpltCallback+0x28>
		p_uart = &uartPort[1];
 80025c2:	4b16      	ldr	r3, [pc, #88]	; (800261c <HAL_UART_RxCpltCallback+0x7c>)
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	e006      	b.n	80025d6 <HAL_UART_RxCpltCallback+0x36>
	}
	else if (huart->Instance == USART6) {
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a14      	ldr	r2, [pc, #80]	; (8002620 <HAL_UART_RxCpltCallback+0x80>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d117      	bne.n	8002602 <HAL_UART_RxCpltCallback+0x62>
		p_uart = &uartPort[2];
 80025d2:	4b14      	ldr	r3, [pc, #80]	; (8002624 <HAL_UART_RxCpltCallback+0x84>)
 80025d4:	60fb      	str	r3, [r7, #12]
	}
	else return;

	if (p_uart->init) return;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d112      	bne.n	8002606 <HAL_UART_RxCpltCallback+0x66>

	pifComm_PutRxByte(&p_uart->port.comm, p_uart->rx_frame);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1d1a      	adds	r2, r3, #4
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025ea:	4619      	mov	r1, r3
 80025ec:	4610      	mov	r0, r2
 80025ee:	f00f fde8 	bl	80121c2 <pifComm_PutRxByte>
	HAL_UART_Receive_IT(huart, &p_uart->rx_frame, 1);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	333e      	adds	r3, #62	; 0x3e
 80025f6:	2201      	movs	r2, #1
 80025f8:	4619      	mov	r1, r3
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f01e faff 	bl	8020bfe <HAL_UART_Receive_IT>
 8002600:	e002      	b.n	8002608 <HAL_UART_RxCpltCallback+0x68>
	else return;
 8002602:	bf00      	nop
 8002604:	e000      	b.n	8002608 <HAL_UART_RxCpltCallback+0x68>
	if (p_uart->init) return;
 8002606:	bf00      	nop
}
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40011000 	.word	0x40011000
 8002614:	20000718 	.word	0x20000718
 8002618:	40004400 	.word	0x40004400
 800261c:	2000075c 	.word	0x2000075c
 8002620:	40011400 	.word	0x40011400
 8002624:	200007a0 	.word	0x200007a0

08002628 <serialSetBaudRate>:

BOOL serialSetBaudRate(serialPort_t* instance, uint32_t baudRate)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
   	return (*instance->comm.act_set_baudrate)(&instance->comm, baudRate);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	3204      	adds	r2, #4
 800263a:	6839      	ldr	r1, [r7, #0]
 800263c:	4610      	mov	r0, r2
 800263e:	4798      	blx	r3
 8002640:	4603      	mov	r3, r0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <serialStartReceiveFunc>:

BOOL serialStartReceiveFunc(PifComm* p_comm)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	8a1b      	ldrh	r3, [r3, #16]
 8002658:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800265c:	4613      	mov	r3, r2
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	4413      	add	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <serialStartReceiveFunc+0x44>)
 8002666:	4413      	add	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]

	if (HAL_UART_Receive_IT(p_uart->p_huart, &p_uart->rx_frame, 1) != HAL_OK) return FALSE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	333e      	adds	r3, #62	; 0x3e
 8002672:	2201      	movs	r2, #1
 8002674:	4619      	mov	r1, r3
 8002676:	f01e fac2 	bl	8020bfe <HAL_UART_Receive_IT>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <serialStartReceiveFunc+0x38>
 8002680:	2300      	movs	r3, #0
 8002682:	e000      	b.n	8002686 <serialStartReceiveFunc+0x3a>
	return TRUE;
 8002684:	2301      	movs	r3, #1
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000718 	.word	0x20000718

08002694 <serialStopReceiveFunc>:

BOOL serialStopReceiveFunc(PifComm* p_comm)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8a1b      	ldrh	r3, [r3, #16]
 80026a0:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4a06      	ldr	r2, [pc, #24]	; (80026c8 <serialStopReceiveFunc+0x34>)
 80026ae:	4413      	add	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]

	HAL_UART_Abort_IT(p_uart->p_huart);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b6:	4618      	mov	r0, r3
 80026b8:	f01e fad2 	bl	8020c60 <HAL_UART_Abort_IT>
	return TRUE;
 80026bc:	2301      	movs	r3, #1
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000718 	.word	0x20000718

080026cc <micros>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t micros()
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
	return htim2.Instance->CNT;
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <micros+0x14>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	200009a0 	.word	0x200009a0

080026e4 <featureDefault>:

static void featureDefault(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
    featureSet(FEATURE_VBAT);
 80026e8:	2002      	movs	r0, #2
 80026ea:	f004 fc93 	bl	8007014 <featureSet>
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <actTaskMeasureLoop>:

#ifdef __PIF_DEBUG__

void actTaskMeasureLoop()
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
	static int sw = 0;

	sw ^= 1;
 80026f8:	4b07      	ldr	r3, [pc, #28]	; (8002718 <actTaskMeasureLoop+0x24>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f083 0301 	eor.w	r3, r3, #1
 8002700:	4a05      	ldr	r2, [pc, #20]	; (8002718 <actTaskMeasureLoop+0x24>)
 8002702:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, sw);
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <actTaskMeasureLoop+0x24>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	2120      	movs	r1, #32
 800270e:	4803      	ldr	r0, [pc, #12]	; (800271c <actTaskMeasureLoop+0x28>)
 8002710:	f019 fd40 	bl	801c194 <HAL_GPIO_WritePin>
}
 8002714:	bf00      	nop
 8002716:	bd80      	pop	{r7, pc}
 8002718:	20000b20 	.word	0x20000b20
 800271c:	40020000 	.word	0x40020000

08002720 <actTaskMeasureYield>:

void actTaskMeasureYield()
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
	static int sw = 0;

	sw ^= 1;
 8002724:	4b07      	ldr	r3, [pc, #28]	; (8002744 <actTaskMeasureYield+0x24>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f083 0301 	eor.w	r3, r3, #1
 800272c:	4a05      	ldr	r2, [pc, #20]	; (8002744 <actTaskMeasureYield+0x24>)
 800272e:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, sw);
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <actTaskMeasureYield+0x24>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	461a      	mov	r2, r3
 8002738:	2120      	movs	r1, #32
 800273a:	4803      	ldr	r0, [pc, #12]	; (8002748 <actTaskMeasureYield+0x28>)
 800273c:	f019 fd2a 	bl	801c194 <HAL_GPIO_WritePin>
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20000b24 	.word	0x20000b24
 8002748:	40020000 	.word	0x40020000

0800274c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800274c:	b590      	push	{r4, r7, lr}
 800274e:	b08d      	sub	sp, #52	; 0x34
 8002750:	af02      	add	r7, sp, #8
#else
	#define FAIL { goto fail; }
#endif
    drv_pwm_config_t pwm_params;
    drv_adc_config_t adc_params;
    bool sensorsOK = false;
 8002752:	2300      	movs	r3, #0
 8002754:	77fb      	strb	r3, [r7, #31]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002756:	f018 f8e1 	bl	801a91c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800275a:	f000 fb1d 	bl	8002d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800275e:	f000 fdd5 	bl	800330c <MX_GPIO_Init>
  MX_DMA_Init();
 8002762:	f000 fd95 	bl	8003290 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002766:	f000 fd3f 	bl	80031e8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800276a:	f000 fbfb 	bl	8002f64 <MX_I2C1_Init>
  MX_TIM3_Init();
 800276e:	f000 fc73 	bl	8003058 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002772:	f000 fd0f 	bl	8003194 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002776:	f000 fd61 	bl	800323c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800277a:	f000 fb77 	bl	8002e6c <MX_ADC1_Init>
  MX_TIM2_Init();
 800277e:	f000 fc1f 	bl	8002fc0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8002782:	2100      	movs	r1, #0
 8002784:	488d      	ldr	r0, [pc, #564]	; (80029bc <main+0x270>)
 8002786:	f01d fa4d 	bl	801fc24 <HAL_TIM_IC_Start_IT>

    pif_Init(micros);
 800278a:	488d      	ldr	r0, [pc, #564]	; (80029c0 <main+0x274>)
 800278c:	f00e fdd0 	bl	8011330 <pif_Init>

    if (!pifTaskManager_Init(20)) FAIL;
 8002790:	2014      	movs	r0, #20
 8002792:	f012 f82f 	bl	80147f4 <pifTaskManager_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d102      	bne.n	80027a2 <main+0x56>
 800279c:	23b6      	movs	r3, #182	; 0xb6
 800279e:	623b      	str	r3, [r7, #32]
 80027a0:	e2e6      	b.n	8002d70 <main+0x624>

#ifdef __PIF_DEBUG__
    pif_act_task_loop = actTaskMeasureLoop;
 80027a2:	4b88      	ldr	r3, [pc, #544]	; (80029c4 <main+0x278>)
 80027a4:	4a88      	ldr	r2, [pc, #544]	; (80029c8 <main+0x27c>)
 80027a6:	601a      	str	r2, [r3, #0]
    pif_act_task_yield = actTaskMeasureYield;
 80027a8:	4b88      	ldr	r3, [pc, #544]	; (80029cc <main+0x280>)
 80027aa:	4a89      	ldr	r2, [pc, #548]	; (80029d0 <main+0x284>)
 80027ac:	601a      	str	r2, [r3, #0]

    logOpen();
 80027ae:	f7ff fde7 	bl	8002380 <logOpen>
#endif

    if (!pifTimerManager_Init(&g_timer_1ms, PIF_ID_AUTO, 1000, 3)) FAIL;		        // 1000us
 80027b2:	2303      	movs	r3, #3
 80027b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027b8:	2100      	movs	r1, #0
 80027ba:	4886      	ldr	r0, [pc, #536]	; (80029d4 <main+0x288>)
 80027bc:	f012 fa1e 	bl	8014bfc <pifTimerManager_Init>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d102      	bne.n	80027cc <main+0x80>
 80027c6:	23bf      	movs	r3, #191	; 0xbf
 80027c8:	623b      	str	r3, [r7, #32]
 80027ca:	e2d1      	b.n	8002d70 <main+0x624>

#ifdef __PIF_DEBUG__
    pifLog_Printf(LT_INFO, "Start Baseflight: %d\n", sizeof(master_t));
 80027cc:	f240 526c 	movw	r2, #1388	; 0x56c
 80027d0:	4981      	ldr	r1, [pc, #516]	; (80029d8 <main+0x28c>)
 80027d2:	2002      	movs	r0, #2
 80027d4:	f010 fede 	bl	8013594 <pifLog_Printf>
#endif

    if (!buzzerInit()) FAIL;
 80027d8:	f001 fbfc 	bl	8003fd4 <buzzerInit>
 80027dc:	4603      	mov	r3, r0
 80027de:	f083 0301 	eor.w	r3, r3, #1
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <main+0xa2>
 80027e8:	23c5      	movs	r3, #197	; 0xc5
 80027ea:	623b      	str	r3, [r7, #32]
 80027ec:	e2c0      	b.n	8002d70 <main+0x624>

    // make sure (at compile time) that config struct doesn't overflow allocated flash pages
    ct_assert(sizeof(mcfg) < STORAGE_VOLUME);

    g_featureDefault = featureDefault;
 80027ee:	4b7b      	ldr	r3, [pc, #492]	; (80029dc <main+0x290>)
 80027f0:	4a7b      	ldr	r2, [pc, #492]	; (80029e0 <main+0x294>)
 80027f2:	601a      	str	r2, [r3, #0]

    if (!pifI2cPort_Init(&g_i2c_port, PIF_ID_AUTO, 5, EEPROM_PAGE_SIZE)) FAIL;
 80027f4:	2340      	movs	r3, #64	; 0x40
 80027f6:	2205      	movs	r2, #5
 80027f8:	2100      	movs	r1, #0
 80027fa:	487a      	ldr	r0, [pc, #488]	; (80029e4 <main+0x298>)
 80027fc:	f00f fdc2 	bl	8012384 <pifI2cPort_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d102      	bne.n	800280c <main+0xc0>
 8002806:	23cc      	movs	r3, #204	; 0xcc
 8002808:	623b      	str	r3, [r7, #32]
 800280a:	e2b1      	b.n	8002d70 <main+0x624>
    g_i2c_port.act_read = actI2cRead;
 800280c:	4b75      	ldr	r3, [pc, #468]	; (80029e4 <main+0x298>)
 800280e:	4a76      	ldr	r2, [pc, #472]	; (80029e8 <main+0x29c>)
 8002810:	605a      	str	r2, [r3, #4]
    g_i2c_port.act_write = actI2cWrite;
 8002812:	4b74      	ldr	r3, [pc, #464]	; (80029e4 <main+0x298>)
 8002814:	4a75      	ldr	r2, [pc, #468]	; (80029ec <main+0x2a0>)
 8002816:	609a      	str	r2, [r3, #8]

    if (!initEEPROM()) FAIL;
 8002818:	f003 fe48 	bl	80064ac <initEEPROM>
 800281c:	4603      	mov	r3, r0
 800281e:	f083 0301 	eor.w	r3, r3, #1
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <main+0xe2>
 8002828:	23d0      	movs	r3, #208	; 0xd0
 800282a:	623b      	str	r3, [r7, #32]
 800282c:	e2a0      	b.n	8002d70 <main+0x624>
    if (!checkFirstTime(false)) FAIL;
 800282e:	2000      	movs	r0, #0
 8002830:	f004 f87a 	bl	8006928 <checkFirstTime>
 8002834:	4603      	mov	r3, r0
 8002836:	f083 0301 	eor.w	r3, r3, #1
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <main+0xfa>
 8002840:	23d1      	movs	r3, #209	; 0xd1
 8002842:	623b      	str	r3, [r7, #32]
 8002844:	e294      	b.n	8002d70 <main+0x624>
    readEEPROM();
 8002846:	f003 fed9 	bl	80065fc <readEEPROM>

    systemInit();
 800284a:	f7ff fb8b 	bl	8001f64 <systemInit>

    // sleep for 100ms
    pif_Delay1ms(100);
 800284e:	2064      	movs	r0, #100	; 0x64
 8002850:	f00e fe4c 	bl	80114ec <pif_Delay1ms>

    activateConfig();
 8002854:	f003 ff1c 	bl	8006690 <activateConfig>

    // configure rssi ADC
    if (mcfg.rssi_adc_channel > 0 && (mcfg.rssi_adc_channel == 1 || mcfg.rssi_adc_channel == 9 || mcfg.rssi_adc_channel == 5) && mcfg.rssi_adc_channel != mcfg.power_adc_channel)
 8002858:	4b65      	ldr	r3, [pc, #404]	; (80029f0 <main+0x2a4>)
 800285a:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800285e:	2b00      	cmp	r3, #0
 8002860:	d01b      	beq.n	800289a <main+0x14e>
 8002862:	4b63      	ldr	r3, [pc, #396]	; (80029f0 <main+0x2a4>)
 8002864:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002868:	2b01      	cmp	r3, #1
 800286a:	d009      	beq.n	8002880 <main+0x134>
 800286c:	4b60      	ldr	r3, [pc, #384]	; (80029f0 <main+0x2a4>)
 800286e:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002872:	2b09      	cmp	r3, #9
 8002874:	d004      	beq.n	8002880 <main+0x134>
 8002876:	4b5e      	ldr	r3, [pc, #376]	; (80029f0 <main+0x2a4>)
 8002878:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800287c:	2b05      	cmp	r3, #5
 800287e:	d10c      	bne.n	800289a <main+0x14e>
 8002880:	4b5b      	ldr	r3, [pc, #364]	; (80029f0 <main+0x2a4>)
 8002882:	f893 21a4 	ldrb.w	r2, [r3, #420]	; 0x1a4
 8002886:	4b5a      	ldr	r3, [pc, #360]	; (80029f0 <main+0x2a4>)
 8002888:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 800288c:	429a      	cmp	r2, r3
 800288e:	d004      	beq.n	800289a <main+0x14e>
        adc_params.rssiAdcChannel = mcfg.rssi_adc_channel;
 8002890:	4b57      	ldr	r3, [pc, #348]	; (80029f0 <main+0x2a4>)
 8002892:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002896:	707b      	strb	r3, [r7, #1]
 8002898:	e005      	b.n	80028a6 <main+0x15a>
    else {
        adc_params.rssiAdcChannel = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	707b      	strb	r3, [r7, #1]
        mcfg.rssi_adc_channel = 0;
 800289e:	4b54      	ldr	r3, [pc, #336]	; (80029f0 <main+0x2a4>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
    }

    adcInit(&adc_params);
 80028a6:	463b      	mov	r3, r7
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fe fc75 	bl	8001198 <adcInit>
    // Check battery type/voltage
    if (feature(FEATURE_VBAT))
 80028ae:	2002      	movs	r0, #2
 80028b0:	f004 fb9a 	bl	8006fe8 <feature>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <main+0x172>
        batteryInit();
 80028ba:	f00b fe3d 	bl	800e538 <batteryInit>
    initBoardAlignment();
 80028be:	f001 fa2f 	bl	8003d20 <initBoardAlignment>

    // drop out any sensors that don't seem to work, init all the others. halt if gyro is dead.
    sensorsOK = sensorsAutodetect(gyro_detect, acc_detect, baro_detect, mag_detect);
 80028c2:	4b4c      	ldr	r3, [pc, #304]	; (80029f4 <main+0x2a8>)
 80028c4:	6819      	ldr	r1, [r3, #0]
 80028c6:	4b4c      	ldr	r3, [pc, #304]	; (80029f8 <main+0x2ac>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	4b4c      	ldr	r3, [pc, #304]	; (80029fc <main+0x2b0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	484c      	ldr	r0, [pc, #304]	; (8002a00 <main+0x2b4>)
 80028d0:	f00b fcd6 	bl	800e280 <sensorsAutodetect>
 80028d4:	4603      	mov	r3, r0
 80028d6:	77fb      	strb	r3, [r7, #31]
#ifdef __PIF_DEBUG__
    pifLog_Printf(LT_INFO, "Sensor: %lxh(%d)", sensorsMask(), sensorsOK);
 80028d8:	f004 fb7a 	bl	8006fd0 <sensorsMask>
 80028dc:	4602      	mov	r2, r0
 80028de:	7ffb      	ldrb	r3, [r7, #31]
 80028e0:	4948      	ldr	r1, [pc, #288]	; (8002a04 <main+0x2b8>)
 80028e2:	2002      	movs	r0, #2
 80028e4:	f010 fe56 	bl	8013594 <pifLog_Printf>
#endif

    // if gyro was not detected due to whatever reason, we give up now.
    if (!sensorsOK)
 80028e8:	7ffb      	ldrb	r3, [r7, #31]
 80028ea:	f083 0301 	eor.w	r3, r3, #1
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <main+0x1ae>
        failureMode(3);
 80028f4:	2003      	movs	r0, #3
 80028f6:	f7ff fb44 	bl	8001f82 <failureMode>

    actLed1State(ON);
 80028fa:	2001      	movs	r0, #1
 80028fc:	f7ff fbba 	bl	8002074 <actLed1State>
    actLed0State(OFF);
 8002900:	2000      	movs	r0, #0
 8002902:	f7ff fb8b 	bl	800201c <actLed0State>
    for (i = 0; i < 10; i++) {
 8002906:	2300      	movs	r3, #0
 8002908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800290c:	e018      	b.n	8002940 <main+0x1f4>
        actLed1Toggle();
 800290e:	f7ff fbc7 	bl	80020a0 <actLed1Toggle>
        actLed0Toggle();
 8002912:	f7ff fb99 	bl	8002048 <actLed0Toggle>
        pifTaskManager_YieldMs(25);
 8002916:	2019      	movs	r0, #25
 8002918:	f012 f8ea 	bl	8014af0 <pifTaskManager_YieldMs>
        actBuzzerAction(PIF_ID_BUZZER, ON);
 800291c:	2101      	movs	r1, #1
 800291e:	f44f 7098 	mov.w	r0, #304	; 0x130
 8002922:	f7ff fbd3 	bl	80020cc <actBuzzerAction>
        pifTaskManager_YieldMs(25);
 8002926:	2019      	movs	r0, #25
 8002928:	f012 f8e2 	bl	8014af0 <pifTaskManager_YieldMs>
        actBuzzerAction(PIF_ID_BUZZER, OFF);
 800292c:	2100      	movs	r1, #0
 800292e:	f44f 7098 	mov.w	r0, #304	; 0x130
 8002932:	f7ff fbcb 	bl	80020cc <actBuzzerAction>
    for (i = 0; i < 10; i++) {
 8002936:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800293a:	3301      	adds	r3, #1
 800293c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002944:	2b09      	cmp	r3, #9
 8002946:	d9e2      	bls.n	800290e <main+0x1c2>
    }
    actLed0State(OFF);
 8002948:	2000      	movs	r0, #0
 800294a:	f7ff fb67 	bl	800201c <actLed0State>
    actLed1State(OFF);
 800294e:	2000      	movs	r0, #0
 8002950:	f7ff fb90 	bl	8002074 <actLed1State>

    imuInit(); // Mag is initialized inside imuInit
 8002954:	f006 ff48 	bl	80097e8 <imuInit>
    mixerInit(); // this will set core.useServo var depending on mixer type
 8002958:	f008 fa22 	bl	800ada0 <mixerInit>

#ifdef __PIF_DEBUG__
    pifLog_Printf(LT_INFO, "Serial: %lu", mcfg.serial_baudrate);
 800295c:	4b24      	ldr	r3, [pc, #144]	; (80029f0 <main+0x2a4>)
 800295e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8002962:	461a      	mov	r2, r3
 8002964:	4928      	ldr	r1, [pc, #160]	; (8002a08 <main+0x2bc>)
 8002966:	2002      	movs	r0, #2
 8002968:	f010 fe14 	bl	8013594 <pifLog_Printf>
#endif
    serialInit(UART_PORT_1, mcfg.serial_baudrate, UART_PORT_NONE);
 800296c:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <main+0x2a4>)
 800296e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8002972:	2200      	movs	r2, #0
 8002974:	4619      	mov	r1, r3
 8002976:	2001      	movs	r0, #1
 8002978:	f00c fd42 	bl	800f400 <serialInit>

    // when using airplane/wing mixer, servo/motor outputs are remapped
    if (mcfg.mixerConfiguration == MULTITYPE_AIRPLANE || mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800297c:	4b1c      	ldr	r3, [pc, #112]	; (80029f0 <main+0x2a4>)
 800297e:	795b      	ldrb	r3, [r3, #5]
 8002980:	2b0e      	cmp	r3, #14
 8002982:	d007      	beq.n	8002994 <main+0x248>
 8002984:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <main+0x2a4>)
 8002986:	795b      	ldrb	r3, [r3, #5]
 8002988:	2b08      	cmp	r3, #8
 800298a:	d003      	beq.n	8002994 <main+0x248>
 800298c:	4b18      	ldr	r3, [pc, #96]	; (80029f0 <main+0x2a4>)
 800298e:	795b      	ldrb	r3, [r3, #5]
 8002990:	2b18      	cmp	r3, #24
 8002992:	d102      	bne.n	800299a <main+0x24e>
        pwm_params.airplane = true;
 8002994:	2301      	movs	r3, #1
 8002996:	72bb      	strb	r3, [r7, #10]
 8002998:	e001      	b.n	800299e <main+0x252>
    else
        pwm_params.airplane = false;
 800299a:	2300      	movs	r3, #0
 800299c:	72bb      	strb	r3, [r7, #10]
    pwm_params.useUART = feature(FEATURE_GPS) || feature(FEATURE_SERIALRX); // spektrum/sbus support uses UART too
 800299e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80029a2:	f004 fb21 	bl	8006fe8 <feature>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d105      	bne.n	80029b8 <main+0x26c>
 80029ac:	2008      	movs	r0, #8
 80029ae:	f004 fb1b 	bl	8006fe8 <feature>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d029      	beq.n	8002a0c <main+0x2c0>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e028      	b.n	8002a0e <main+0x2c2>
 80029bc:	200009a0 	.word	0x200009a0
 80029c0:	080026cd 	.word	0x080026cd
 80029c4:	20002178 	.word	0x20002178
 80029c8:	080026f5 	.word	0x080026f5
 80029cc:	2000217c 	.word	0x2000217c
 80029d0:	08002721 	.word	0x08002721
 80029d4:	20001b64 	.word	0x20001b64
 80029d8:	08024c1c 	.word	0x08024c1c
 80029dc:	20001970 	.word	0x20001970
 80029e0:	080026e5 	.word	0x080026e5
 80029e4:	20001b34 	.word	0x20001b34
 80029e8:	08001969 	.word	0x08001969
 80029ec:	080019e5 	.word	0x080019e5
 80029f0:	20000bbc 	.word	0x20000bbc
 80029f4:	20000b14 	.word	0x20000b14
 80029f8:	20000b18 	.word	0x20000b18
 80029fc:	20000b1c 	.word	0x20000b1c
 8002a00:	20000010 	.word	0x20000010
 8002a04:	08024c34 	.word	0x08024c34
 8002a08:	08024c48 	.word	0x08024c48
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	71bb      	strb	r3, [r7, #6]
    pwm_params.useSoftSerial = false;
 8002a16:	2300      	movs	r3, #0
 8002a18:	71fb      	strb	r3, [r7, #7]
    pwm_params.usePPM = feature(FEATURE_PPM);
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	f004 fae4 	bl	8006fe8 <feature>
 8002a20:	4603      	mov	r3, r0
 8002a22:	717b      	strb	r3, [r7, #5]
    pwm_params.enableInput = !feature(FEATURE_SERIALRX); // disable inputs if using spektrum
 8002a24:	2008      	movs	r0, #8
 8002a26:	f004 fadf 	bl	8006fe8 <feature>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf14      	ite	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	2300      	moveq	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	f083 0301 	eor.w	r3, r3, #1
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	713b      	strb	r3, [r7, #4]
    pwm_params.useServos = core.useServo;
 8002a44:	4bb0      	ldr	r3, [pc, #704]	; (8002d08 <main+0x5bc>)
 8002a46:	7d5b      	ldrb	r3, [r3, #21]
 8002a48:	723b      	strb	r3, [r7, #8]
    pwm_params.extraServos = cfg.gimbal_flags & GIMBAL_FORWARDAUX;
 8002a4a:	4bb0      	ldr	r3, [pc, #704]	; (8002d0c <main+0x5c0>)
 8002a4c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	bf14      	ite	ne
 8002a58:	2301      	movne	r3, #1
 8002a5a:	2300      	moveq	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	727b      	strb	r3, [r7, #9]
    pwm_params.motorPwmRate = mcfg.motor_pwm_rate;
 8002a60:	4bab      	ldr	r3, [pc, #684]	; (8002d10 <main+0x5c4>)
 8002a62:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8002a66:	81fb      	strh	r3, [r7, #14]
    pwm_params.servoPwmRate = mcfg.servo_pwm_rate;
 8002a68:	4ba9      	ldr	r3, [pc, #676]	; (8002d10 <main+0x5c4>)
 8002a6a:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8002a6e:	823b      	strh	r3, [r7, #16]
    pwm_params.pwmFilter = mcfg.pwm_filter;
 8002a70:	4ba7      	ldr	r3, [pc, #668]	; (8002d10 <main+0x5c4>)
 8002a72:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 8002a76:	72fb      	strb	r3, [r7, #11]
    pwm_params.idlePulse = PULSE_1MS; // standard PWM for brushless ESC (default, overridden below)
 8002a78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a7c:	827b      	strh	r3, [r7, #18]
    if (feature(FEATURE_3D))
 8002a7e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a82:	f004 fab1 	bl	8006fe8 <feature>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <main+0x348>
        pwm_params.idlePulse = mcfg.neutral3d;
 8002a8c:	4ba0      	ldr	r3, [pc, #640]	; (8002d10 <main+0x5c4>)
 8002a8e:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 8002a92:	827b      	strh	r3, [r7, #18]
    if (pwm_params.motorPwmRate > 500)
 8002a94:	89fb      	ldrh	r3, [r7, #14]
 8002a96:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a9a:	d901      	bls.n	8002aa0 <main+0x354>
        pwm_params.idlePulse = 0; // brushed motors
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	827b      	strh	r3, [r7, #18]
    pwm_params.syncPWM = feature(FEATURE_SYNCPWM);
 8002aa0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002aa4:	f004 faa0 	bl	8006fe8 <feature>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	763b      	strb	r3, [r7, #24]
    pwm_params.fastPWM = feature(FEATURE_FASTPWM);
 8002aac:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002ab0:	f004 fa9a 	bl	8006fe8 <feature>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	767b      	strb	r3, [r7, #25]
    pwm_params.servoCenterPulse = mcfg.midrc;
 8002ab8:	4b95      	ldr	r3, [pc, #596]	; (8002d10 <main+0x5c4>)
 8002aba:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8002abe:	82bb      	strh	r3, [r7, #20]
    pwm_params.failsafeThreshold = cfg.failsafe_detect_threshold;
 8002ac0:	4b92      	ldr	r3, [pc, #584]	; (8002d0c <main+0x5c0>)
 8002ac2:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8002ac6:	82fb      	strh	r3, [r7, #22]
    switch (mcfg.power_adc_channel) {
 8002ac8:	4b91      	ldr	r3, [pc, #580]	; (8002d10 <main+0x5c4>)
 8002aca:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d002      	beq.n	8002ad8 <main+0x38c>
 8002ad2:	2b09      	cmp	r3, #9
 8002ad4:	d003      	beq.n	8002ade <main+0x392>
 8002ad6:	e005      	b.n	8002ae4 <main+0x398>
        case 1:
            pwm_params.adcChannel = PWM2;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	733b      	strb	r3, [r7, #12]
            break;
 8002adc:	e005      	b.n	8002aea <main+0x39e>
        case 9:
            pwm_params.adcChannel = PWM8;
 8002ade:	2307      	movs	r3, #7
 8002ae0:	733b      	strb	r3, [r7, #12]
            break;
 8002ae2:	e002      	b.n	8002aea <main+0x39e>
        default:
            pwm_params.adcChannel = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	733b      	strb	r3, [r7, #12]
            break;
 8002ae8:	bf00      	nop
    }

    pwmInit(&pwm_params);
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff f8bf 	bl	8001c70 <pwmInit>
    core.numServos = pwm_params.numServos;
 8002af2:	7eba      	ldrb	r2, [r7, #26]
 8002af4:	4b84      	ldr	r3, [pc, #528]	; (8002d08 <main+0x5bc>)
 8002af6:	759a      	strb	r2, [r3, #22]

    // configure PWM/CPPM read function and max number of channels. spektrum or sbus below will override both of these, if enabled
    for (i = 0; i < RC_CHANS; i++)
 8002af8:	2300      	movs	r3, #0
 8002afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002afe:	e00b      	b.n	8002b18 <main+0x3cc>
        rcData[i] = 1502;
 8002b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b04:	4a83      	ldr	r2, [pc, #524]	; (8002d14 <main+0x5c8>)
 8002b06:	f240 51de 	movw	r1, #1502	; 0x5de
 8002b0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < RC_CHANS; i++)
 8002b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b12:	3301      	adds	r3, #1
 8002b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b1c:	2b11      	cmp	r3, #17
 8002b1e:	d9ef      	bls.n	8002b00 <main+0x3b4>
    rcReadRawFunc = pwmReadRawRC;
 8002b20:	4b7d      	ldr	r3, [pc, #500]	; (8002d18 <main+0x5cc>)
 8002b22:	4a7e      	ldr	r2, [pc, #504]	; (8002d1c <main+0x5d0>)
 8002b24:	601a      	str	r2, [r3, #0]
    }
#endif

    // Optional GPS - available in both PPM, PWM and serialRX input mode, in PWM input, reduces number of available channels by 2.
    // gpsInit will return if FEATURE_GPS is not enabled.
    if (feature(FEATURE_GPS)) {
 8002b26:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b2a:	f004 fa5d 	bl	8006fe8 <feature>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d007      	beq.n	8002b44 <main+0x3f8>
        gpsInit(UART_PORT_3, mcfg.gps_baudrate);
 8002b34:	4b76      	ldr	r3, [pc, #472]	; (8002d10 <main+0x5c4>)
 8002b36:	f993 31ac 	ldrsb.w	r3, [r3, #428]	; 0x1ac
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	2003      	movs	r0, #3
 8002b40:	f005 f9ae 	bl	8007ea0 <gpsInit>
    }

#ifdef SONAR
    // sonar stuff only works with PPM
    if (feature(FEATURE_SONAR)) {
 8002b44:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002b48:	f004 fa4e 	bl	8006fe8 <feature>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <main+0x40e>
//      Sonar_init(hcsr04Init, SF_NONE);
//      Sonar_init(hcsr04Init, SF_AVERAGE);
        Sonar_init(hcsr04Init, SF_NOISE_CANCEL);
 8002b52:	2102      	movs	r1, #2
 8002b54:	4872      	ldr	r0, [pc, #456]	; (8002d20 <main+0x5d4>)
 8002b56:	f00c fa95 	bl	800f084 <Sonar_init>
    }
#endif

    core.numAuxChannels = constrain((mcfg.rc_channel_count - 4), 4, 8);
 8002b5a:	4b6d      	ldr	r3, [pc, #436]	; (8002d10 <main+0x5c4>)
 8002b5c:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8002b60:	3b04      	subs	r3, #4
 8002b62:	2208      	movs	r2, #8
 8002b64:	2104      	movs	r1, #4
 8002b66:	4618      	mov	r0, r3
 8002b68:	f001 f8c0 	bl	8003cec <constrain>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	4b65      	ldr	r3, [pc, #404]	; (8002d08 <main+0x5bc>)
 8002b72:	751a      	strb	r2, [r3, #20]
#ifdef TELEMETRY
    if (feature(FEATURE_TELEMETRY))
        initTelemetry();
#endif

    previousTime = (*pif_act_timer1us)();
 8002b74:	4b6b      	ldr	r3, [pc, #428]	; (8002d24 <main+0x5d8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4798      	blx	r3
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4a6a      	ldr	r2, [pc, #424]	; (8002d28 <main+0x5dc>)
 8002b7e:	6013      	str	r3, [r2, #0]
    if (mcfg.mixerConfiguration == MULTITYPE_GIMBAL)
 8002b80:	4b63      	ldr	r3, [pc, #396]	; (8002d10 <main+0x5c4>)
 8002b82:	795b      	ldrb	r3, [r3, #5]
 8002b84:	2b05      	cmp	r3, #5
 8002b86:	d103      	bne.n	8002b90 <main+0x444>
        calibratingA = CALIBRATING_ACC_CYCLES;
 8002b88:	4b68      	ldr	r3, [pc, #416]	; (8002d2c <main+0x5e0>)
 8002b8a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b8e:	801a      	strh	r2, [r3, #0]
    calibratingG = CALIBRATING_GYRO_CYCLES;
 8002b90:	4b67      	ldr	r3, [pc, #412]	; (8002d30 <main+0x5e4>)
 8002b92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b96:	801a      	strh	r2, [r3, #0]
    calibratingB = CALIBRATING_BARO_CYCLES;             // 10 seconds init_delay + 200 * 25 ms = 15 seconds before ground pressure settles
 8002b98:	4b66      	ldr	r3, [pc, #408]	; (8002d34 <main+0x5e8>)
 8002b9a:	22c8      	movs	r2, #200	; 0xc8
 8002b9c:	801a      	strh	r2, [r3, #0]
    f.SMALL_ANGLE = 1;
 8002b9e:	4b66      	ldr	r3, [pc, #408]	; (8002d38 <main+0x5ec>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	735a      	strb	r2, [r3, #13]

    if (!pifTaskManager_Add(TM_PERIOD_MS, 1, taskLoop, NULL, TRUE)) FAIL;         								// 1ms
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	4a64      	ldr	r2, [pc, #400]	; (8002d3c <main+0x5f0>)
 8002bac:	2101      	movs	r1, #1
 8002bae:	2002      	movs	r0, #2
 8002bb0:	f011 fe46 	bl	8014840 <pifTaskManager_Add>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d103      	bne.n	8002bc2 <main+0x476>
 8002bba:	f240 1369 	movw	r3, #361	; 0x169
 8002bbe:	623b      	str	r3, [r7, #32]
 8002bc0:	e0d6      	b.n	8002d70 <main+0x624>

    if (mcfg.looptime) {
 8002bc2:	4b53      	ldr	r3, [pc, #332]	; (8002d10 <main+0x5c4>)
 8002bc4:	899b      	ldrh	r3, [r3, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00c      	beq.n	8002be4 <main+0x498>
    	g_task_compute_imu = pifTaskManager_Add(TM_PERIOD_US, mcfg.looptime, taskComputeImu, NULL, TRUE);
 8002bca:	4b51      	ldr	r3, [pc, #324]	; (8002d10 <main+0x5c4>)
 8002bcc:	8999      	ldrh	r1, [r3, #12]
 8002bce:	2301      	movs	r3, #1
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	4a5a      	ldr	r2, [pc, #360]	; (8002d40 <main+0x5f4>)
 8002bd6:	2003      	movs	r0, #3
 8002bd8:	f011 fe32 	bl	8014840 <pifTaskManager_Add>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4a59      	ldr	r2, [pc, #356]	; (8002d44 <main+0x5f8>)
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	e00a      	b.n	8002bfa <main+0x4ae>
    }
    else {
    	g_task_compute_imu = pifTaskManager_Add(TM_RATIO, 100, taskComputeImu, NULL, TRUE);	       	 			// 100%
 8002be4:	2301      	movs	r3, #1
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	2300      	movs	r3, #0
 8002bea:	4a55      	ldr	r2, [pc, #340]	; (8002d40 <main+0x5f4>)
 8002bec:	2164      	movs	r1, #100	; 0x64
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f011 fe26 	bl	8014840 <pifTaskManager_Add>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4a53      	ldr	r2, [pc, #332]	; (8002d44 <main+0x5f8>)
 8002bf8:	6013      	str	r3, [r2, #0]
    }
    if (!g_task_compute_imu) FAIL;
 8002bfa:	4b52      	ldr	r3, [pc, #328]	; (8002d44 <main+0x5f8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d103      	bne.n	8002c0a <main+0x4be>
 8002c02:	f240 1371 	movw	r3, #369	; 0x171
 8002c06:	623b      	str	r3, [r7, #32]
 8002c08:	e0b2      	b.n	8002d70 <main+0x624>
    g_task_compute_imu->disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8002c0a:	4b4e      	ldr	r3, [pc, #312]	; (8002d44 <main+0x5f8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	709a      	strb	r2, [r3, #2]

    g_task_compute_rc = pifTaskManager_Add(TM_PERIOD_MS, 20, taskComputeRc, NULL, TRUE);							// 20ms - 50Hz
 8002c12:	2301      	movs	r3, #1
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	2300      	movs	r3, #0
 8002c18:	4a4b      	ldr	r2, [pc, #300]	; (8002d48 <main+0x5fc>)
 8002c1a:	2114      	movs	r1, #20
 8002c1c:	2002      	movs	r0, #2
 8002c1e:	f011 fe0f 	bl	8014840 <pifTaskManager_Add>
 8002c22:	4603      	mov	r3, r0
 8002c24:	4a49      	ldr	r2, [pc, #292]	; (8002d4c <main+0x600>)
 8002c26:	6013      	str	r3, [r2, #0]
    if (!g_task_compute_rc) FAIL;
 8002c28:	4b48      	ldr	r3, [pc, #288]	; (8002d4c <main+0x600>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d103      	bne.n	8002c38 <main+0x4ec>
 8002c30:	f240 1375 	movw	r3, #373	; 0x175
 8002c34:	623b      	str	r3, [r7, #32]
 8002c36:	e09b      	b.n	8002d70 <main+0x624>

#ifdef MAG
    if (sensors(SENSOR_MAG)) {
 8002c38:	2008      	movs	r0, #8
 8002c3a:	f004 f98d 	bl	8006f58 <sensors>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d016      	beq.n	8002c72 <main+0x526>
        sensor_set.mag.p_m_task = pifTaskManager_Add(TM_PERIOD_MS, 100, taskMagGetAdc, NULL, TRUE);             // 100ms
 8002c44:	2301      	movs	r3, #1
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	2300      	movs	r3, #0
 8002c4a:	4a41      	ldr	r2, [pc, #260]	; (8002d50 <main+0x604>)
 8002c4c:	2164      	movs	r1, #100	; 0x64
 8002c4e:	2002      	movs	r0, #2
 8002c50:	f011 fdf6 	bl	8014840 <pifTaskManager_Add>
 8002c54:	4603      	mov	r3, r0
 8002c56:	4a3f      	ldr	r2, [pc, #252]	; (8002d54 <main+0x608>)
 8002c58:	6553      	str	r3, [r2, #84]	; 0x54
        if (!sensor_set.mag.p_m_task) FAIL;
 8002c5a:	4b3e      	ldr	r3, [pc, #248]	; (8002d54 <main+0x608>)
 8002c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d103      	bne.n	8002c6a <main+0x51e>
 8002c62:	f44f 73bd 	mov.w	r3, #378	; 0x17a
 8002c66:	623b      	str	r3, [r7, #32]
 8002c68:	e082      	b.n	8002d70 <main+0x624>
        sensor_set.mag.p_m_task->disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8002c6a:	4b3a      	ldr	r3, [pc, #232]	; (8002d54 <main+0x608>)
 8002c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6e:	2201      	movs	r2, #1
 8002c70:	709a      	strb	r2, [r3, #2]
    }
#endif

#ifdef BARO
    if (sensors(SENSOR_BARO)) {
 8002c72:	2004      	movs	r0, #4
 8002c74:	f004 f970 	bl	8006f58 <sensors>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d012      	beq.n	8002ca4 <main+0x558>
        sensor_set.baro.p_b_task = pifTaskManager_Add(TM_PERIOD_MS, 100, taskGetEstimatedAltitude, NULL, FALSE);// Use immediate
 8002c7e:	2300      	movs	r3, #0
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	2300      	movs	r3, #0
 8002c84:	4a34      	ldr	r2, [pc, #208]	; (8002d58 <main+0x60c>)
 8002c86:	2164      	movs	r1, #100	; 0x64
 8002c88:	2002      	movs	r0, #2
 8002c8a:	f011 fdd9 	bl	8014840 <pifTaskManager_Add>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4a30      	ldr	r2, [pc, #192]	; (8002d54 <main+0x608>)
 8002c92:	63d3      	str	r3, [r2, #60]	; 0x3c
        if (!sensor_set.baro.p_b_task) FAIL;
 8002c94:	4b2f      	ldr	r3, [pc, #188]	; (8002d54 <main+0x608>)
 8002c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d103      	bne.n	8002ca4 <main+0x558>
 8002c9c:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8002ca0:	623b      	str	r3, [r7, #32]
 8002ca2:	e065      	b.n	8002d70 <main+0x624>
    }
#endif

#ifdef GPS
    g_task_gps = pifTaskManager_Add(TM_PERIOD_MS, 100, taskGpsNewData, NULL, FALSE);                			// Use immediate
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	2300      	movs	r3, #0
 8002caa:	4a2c      	ldr	r2, [pc, #176]	; (8002d5c <main+0x610>)
 8002cac:	2164      	movs	r1, #100	; 0x64
 8002cae:	2002      	movs	r0, #2
 8002cb0:	f011 fdc6 	bl	8014840 <pifTaskManager_Add>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4a2a      	ldr	r2, [pc, #168]	; (8002d60 <main+0x614>)
 8002cb8:	6013      	str	r3, [r2, #0]
    if (!g_task_gps) FAIL;
 8002cba:	4b29      	ldr	r3, [pc, #164]	; (8002d60 <main+0x614>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d103      	bne.n	8002cca <main+0x57e>
 8002cc2:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8002cc6:	623b      	str	r3, [r7, #32]
 8002cc8:	e052      	b.n	8002d70 <main+0x624>
#endif

    if (!pifTaskManager_Add(TM_PERIOD_MS, 50, taskLedState, NULL, TRUE)) FAIL;									// 50ms
 8002cca:	2301      	movs	r3, #1
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	4a24      	ldr	r2, [pc, #144]	; (8002d64 <main+0x618>)
 8002cd2:	2132      	movs	r1, #50	; 0x32
 8002cd4:	2002      	movs	r0, #2
 8002cd6:	f011 fdb3 	bl	8014840 <pifTaskManager_Add>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d103      	bne.n	8002ce8 <main+0x59c>
 8002ce0:	f240 138b 	movw	r3, #395	; 0x18b
 8002ce4:	623b      	str	r3, [r7, #32]
 8002ce6:	e043      	b.n	8002d70 <main+0x624>

#ifdef __PIF_DEBUG__
	pifLog_Printf(LT_INFO, "Task=%d Timer1ms=%d\n", pifTaskManager_Count(),
 8002ce8:	f011 fe16 	bl	8014918 <pifTaskManager_Count>
 8002cec:	4604      	mov	r4, r0
 8002cee:	481e      	ldr	r0, [pc, #120]	; (8002d68 <main+0x61c>)
 8002cf0:	f012 f81b 	bl	8014d2a <pifTimerManager_Count>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	4622      	mov	r2, r4
 8002cf8:	491c      	ldr	r1, [pc, #112]	; (8002d6c <main+0x620>)
 8002cfa:	2002      	movs	r0, #2
 8002cfc:	f010 fc4a 	bl	8013594 <pifLog_Printf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pifTaskManager_Loop();
 8002d00:	f011 fe14 	bl	801492c <pifTaskManager_Loop>
 8002d04:	e7fc      	b.n	8002d00 <main+0x5b4>
 8002d06:	bf00      	nop
 8002d08:	20000afc 	.word	0x20000afc
 8002d0c:	20001128 	.word	0x20001128
 8002d10:	20000bbc 	.word	0x20000bbc
 8002d14:	200019c4 	.word	0x200019c4
 8002d18:	20001a1c 	.word	0x20001a1c
 8002d1c:	0800c859 	.word	0x0800c859
 8002d20:	08001909 	.word	0x08001909
 8002d24:	200020f0 	.word	0x200020f0
 8002d28:	200019a8 	.word	0x200019a8
 8002d2c:	20001cae 	.word	0x20001cae
 8002d30:	20001cb2 	.word	0x20001cb2
 8002d34:	20001cb0 	.word	0x20001cb0
 8002d38:	20001988 	.word	0x20001988
 8002d3c:	0800dc51 	.word	0x0800dc51
 8002d40:	0800dcb9 	.word	0x0800dcb9
 8002d44:	20001b88 	.word	0x20001b88
 8002d48:	0800d081 	.word	0x0800d081
 8002d4c:	20001b8c 	.word	0x20001b8c
 8002d50:	0800edf9 	.word	0x0800edf9
 8002d54:	20001cc0 	.word	0x20001cc0
 8002d58:	0800a621 	.word	0x0800a621
 8002d5c:	080087f5 	.word	0x080087f5
 8002d60:	20001b90 	.word	0x20001b90
 8002d64:	0800c5a1 	.word	0x0800c5a1
 8002d68:	20001b64 	.word	0x20001b64
 8002d6c:	08024c54 	.word	0x08024c54
  }
  return 0;

fail:
#ifdef __PIF_DEBUG__
	pifLog_Printf(LT_ERROR, "Error=%Xh Line=%u", pif_error, line);
 8002d70:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <main+0x644>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	4906      	ldr	r1, [pc, #24]	; (8002d94 <main+0x648>)
 8002d7a:	2004      	movs	r0, #4
 8002d7c:	f010 fc0a 	bl	8013594 <pifLog_Printf>
	pifLog_SendAndExit();
 8002d80:	f010 fcd0 	bl	8013724 <pifLog_SendAndExit>
#endif
  return -1;
 8002d84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  /* USER CODE END 3 */
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	372c      	adds	r7, #44	; 0x2c
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd90      	pop	{r4, r7, pc}
 8002d90:	200020d1 	.word	0x200020d1
 8002d94:	08024c6c 	.word	0x08024c6c

08002d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b094      	sub	sp, #80	; 0x50
 8002d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d9e:	f107 0320 	add.w	r3, r7, #32
 8002da2:	2230      	movs	r2, #48	; 0x30
 8002da4:	2100      	movs	r1, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f01f f81c 	bl	8021de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dac:	f107 030c 	add.w	r3, r7, #12
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	4b28      	ldr	r3, [pc, #160]	; (8002e64 <SystemClock_Config+0xcc>)
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	4a27      	ldr	r2, [pc, #156]	; (8002e64 <SystemClock_Config+0xcc>)
 8002dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dca:	6413      	str	r3, [r2, #64]	; 0x40
 8002dcc:	4b25      	ldr	r3, [pc, #148]	; (8002e64 <SystemClock_Config+0xcc>)
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dd8:	2300      	movs	r3, #0
 8002dda:	607b      	str	r3, [r7, #4]
 8002ddc:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <SystemClock_Config+0xd0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a21      	ldr	r2, [pc, #132]	; (8002e68 <SystemClock_Config+0xd0>)
 8002de2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <SystemClock_Config+0xd0>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002df0:	607b      	str	r3, [r7, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002df4:	2302      	movs	r3, #2
 8002df6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 13;
 8002dfc:	230d      	movs	r3, #13
 8002dfe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e00:	2302      	movs	r3, #2
 8002e02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e04:	2300      	movs	r3, #0
 8002e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002e08:	2310      	movs	r3, #16
 8002e0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002e0c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002e10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002e12:	2304      	movs	r3, #4
 8002e14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e16:	2304      	movs	r3, #4
 8002e18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e1a:	f107 0320 	add.w	r3, r7, #32
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f01c f910 	bl	801f044 <HAL_RCC_OscConfig>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002e2a:	f000 fb31 	bl	8003490 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e2e:	230f      	movs	r3, #15
 8002e30:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e32:	2302      	movs	r3, #2
 8002e34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e44:	f107 030c 	add.w	r3, r7, #12
 8002e48:	2102      	movs	r1, #2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f01c fb72 	bl	801f534 <HAL_RCC_ClockConfig>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002e56:	f000 fb1b 	bl	8003490 <Error_Handler>
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	3750      	adds	r7, #80	; 0x50
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800
 8002e68:	40007000 	.word	0x40007000

08002e6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e72:	463b      	mov	r3, r7
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002e7e:	4b36      	ldr	r3, [pc, #216]	; (8002f58 <MX_ADC1_Init+0xec>)
 8002e80:	4a36      	ldr	r2, [pc, #216]	; (8002f5c <MX_ADC1_Init+0xf0>)
 8002e82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002e84:	4b34      	ldr	r3, [pc, #208]	; (8002f58 <MX_ADC1_Init+0xec>)
 8002e86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e8c:	4b32      	ldr	r3, [pc, #200]	; (8002f58 <MX_ADC1_Init+0xec>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002e92:	4b31      	ldr	r3, [pc, #196]	; (8002f58 <MX_ADC1_Init+0xec>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e98:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <MX_ADC1_Init+0xec>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e9e:	4b2e      	ldr	r3, [pc, #184]	; (8002f58 <MX_ADC1_Init+0xec>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ea6:	4b2c      	ldr	r3, [pc, #176]	; (8002f58 <MX_ADC1_Init+0xec>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002eac:	4b2a      	ldr	r3, [pc, #168]	; (8002f58 <MX_ADC1_Init+0xec>)
 8002eae:	4a2c      	ldr	r2, [pc, #176]	; (8002f60 <MX_ADC1_Init+0xf4>)
 8002eb0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002eb2:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <MX_ADC1_Init+0xec>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002eb8:	4b27      	ldr	r3, [pc, #156]	; (8002f58 <MX_ADC1_Init+0xec>)
 8002eba:	2204      	movs	r2, #4
 8002ebc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002ebe:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <MX_ADC1_Init+0xec>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ec6:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <MX_ADC1_Init+0xec>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ecc:	4822      	ldr	r0, [pc, #136]	; (8002f58 <MX_ADC1_Init+0xec>)
 8002ece:	f017 fd97 	bl	801aa00 <HAL_ADC_Init>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002ed8:	f000 fada 	bl	8003490 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002edc:	2306      	movs	r3, #6
 8002ede:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ee8:	463b      	mov	r3, r7
 8002eea:	4619      	mov	r1, r3
 8002eec:	481a      	ldr	r0, [pc, #104]	; (8002f58 <MX_ADC1_Init+0xec>)
 8002eee:	f017 fed9 	bl	801aca4 <HAL_ADC_ConfigChannel>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002ef8:	f000 faca 	bl	8003490 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002efc:	2309      	movs	r3, #9
 8002efe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002f00:	2302      	movs	r3, #2
 8002f02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f04:	463b      	mov	r3, r7
 8002f06:	4619      	mov	r1, r3
 8002f08:	4813      	ldr	r0, [pc, #76]	; (8002f58 <MX_ADC1_Init+0xec>)
 8002f0a:	f017 fecb 	bl	801aca4 <HAL_ADC_ConfigChannel>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002f14:	f000 fabc 	bl	8003490 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002f18:	2307      	movs	r3, #7
 8002f1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f20:	463b      	mov	r3, r7
 8002f22:	4619      	mov	r1, r3
 8002f24:	480c      	ldr	r0, [pc, #48]	; (8002f58 <MX_ADC1_Init+0xec>)
 8002f26:	f017 febd 	bl	801aca4 <HAL_ADC_ConfigChannel>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002f30:	f000 faae 	bl	8003490 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002f34:	230c      	movs	r3, #12
 8002f36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002f38:	2304      	movs	r3, #4
 8002f3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f3c:	463b      	mov	r3, r7
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4805      	ldr	r0, [pc, #20]	; (8002f58 <MX_ADC1_Init+0xec>)
 8002f42:	f017 feaf 	bl	801aca4 <HAL_ADC_ConfigChannel>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002f4c:	f000 faa0 	bl	8003490 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002f50:	bf00      	nop
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	200007e4 	.word	0x200007e4
 8002f5c:	40012000 	.word	0x40012000
 8002f60:	0f000001 	.word	0x0f000001

08002f64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f68:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <MX_I2C1_Init+0x50>)
 8002f6a:	4a13      	ldr	r2, [pc, #76]	; (8002fb8 <MX_I2C1_Init+0x54>)
 8002f6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002f6e:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <MX_I2C1_Init+0x50>)
 8002f70:	4a12      	ldr	r2, [pc, #72]	; (8002fbc <MX_I2C1_Init+0x58>)
 8002f72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f74:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <MX_I2C1_Init+0x50>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f7a:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <MX_I2C1_Init+0x50>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <MX_I2C1_Init+0x50>)
 8002f82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f88:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <MX_I2C1_Init+0x50>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <MX_I2C1_Init+0x50>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f94:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <MX_I2C1_Init+0x50>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <MX_I2C1_Init+0x50>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fa0:	4804      	ldr	r0, [pc, #16]	; (8002fb4 <MX_I2C1_Init+0x50>)
 8002fa2:	f019 f929 	bl	801c1f8 <HAL_I2C_Init>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002fac:	f000 fa70 	bl	8003490 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002fb0:	bf00      	nop
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	2000088c 	.word	0x2000088c
 8002fb8:	40005400 	.word	0x40005400
 8002fbc:	00061a80 	.word	0x00061a80

08002fc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fc6:	f107 0308 	add.w	r3, r7, #8
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
 8002fd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fd4:	463b      	mov	r3, r7
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fdc:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <MX_TIM2_Init+0x94>)
 8002fde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fe2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <MX_TIM2_Init+0x94>)
 8002fe6:	2253      	movs	r2, #83	; 0x53
 8002fe8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fea:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <MX_TIM2_Init+0x94>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002ff0:	4b18      	ldr	r3, [pc, #96]	; (8003054 <MX_TIM2_Init+0x94>)
 8002ff2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ff6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ff8:	4b16      	ldr	r3, [pc, #88]	; (8003054 <MX_TIM2_Init+0x94>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ffe:	4b15      	ldr	r3, [pc, #84]	; (8003054 <MX_TIM2_Init+0x94>)
 8003000:	2200      	movs	r2, #0
 8003002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003004:	4813      	ldr	r0, [pc, #76]	; (8003054 <MX_TIM2_Init+0x94>)
 8003006:	f01c fcb5 	bl	801f974 <HAL_TIM_Base_Init>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003010:	f000 fa3e 	bl	8003490 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003018:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800301a:	f107 0308 	add.w	r3, r7, #8
 800301e:	4619      	mov	r1, r3
 8003020:	480c      	ldr	r0, [pc, #48]	; (8003054 <MX_TIM2_Init+0x94>)
 8003022:	f01d f8e3 	bl	80201ec <HAL_TIM_ConfigClockSource>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800302c:	f000 fa30 	bl	8003490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003030:	2300      	movs	r3, #0
 8003032:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003034:	2300      	movs	r3, #0
 8003036:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003038:	463b      	mov	r3, r7
 800303a:	4619      	mov	r1, r3
 800303c:	4805      	ldr	r0, [pc, #20]	; (8003054 <MX_TIM2_Init+0x94>)
 800303e:	f01d fc9b 	bl	8020978 <HAL_TIMEx_MasterConfigSynchronization>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003048:	f000 fa22 	bl	8003490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800304c:	bf00      	nop
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	200009a0 	.word	0x200009a0

08003058 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08e      	sub	sp, #56	; 0x38
 800305c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800305e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	605a      	str	r2, [r3, #4]
 8003068:	609a      	str	r2, [r3, #8]
 800306a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800306c:	f107 0320 	add.w	r3, r7, #32
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003076:	1d3b      	adds	r3, r7, #4
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	611a      	str	r2, [r3, #16]
 8003084:	615a      	str	r2, [r3, #20]
 8003086:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003088:	4b40      	ldr	r3, [pc, #256]	; (800318c <MX_TIM3_Init+0x134>)
 800308a:	4a41      	ldr	r2, [pc, #260]	; (8003190 <MX_TIM3_Init+0x138>)
 800308c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800308e:	4b3f      	ldr	r3, [pc, #252]	; (800318c <MX_TIM3_Init+0x134>)
 8003090:	2253      	movs	r2, #83	; 0x53
 8003092:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003094:	4b3d      	ldr	r3, [pc, #244]	; (800318c <MX_TIM3_Init+0x134>)
 8003096:	2200      	movs	r2, #0
 8003098:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500;
 800309a:	4b3c      	ldr	r3, [pc, #240]	; (800318c <MX_TIM3_Init+0x134>)
 800309c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80030a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a2:	4b3a      	ldr	r3, [pc, #232]	; (800318c <MX_TIM3_Init+0x134>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030a8:	4b38      	ldr	r3, [pc, #224]	; (800318c <MX_TIM3_Init+0x134>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80030ae:	4837      	ldr	r0, [pc, #220]	; (800318c <MX_TIM3_Init+0x134>)
 80030b0:	f01c fc60 	bl	801f974 <HAL_TIM_Base_Init>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80030ba:	f000 f9e9 	bl	8003490 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030c8:	4619      	mov	r1, r3
 80030ca:	4830      	ldr	r0, [pc, #192]	; (800318c <MX_TIM3_Init+0x134>)
 80030cc:	f01d f88e 	bl	80201ec <HAL_TIM_ConfigClockSource>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80030d6:	f000 f9db 	bl	8003490 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80030da:	482c      	ldr	r0, [pc, #176]	; (800318c <MX_TIM3_Init+0x134>)
 80030dc:	f01c fc99 	bl	801fa12 <HAL_TIM_PWM_Init>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80030e6:	f000 f9d3 	bl	8003490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030ea:	2300      	movs	r3, #0
 80030ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030ee:	2300      	movs	r3, #0
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030f2:	f107 0320 	add.w	r3, r7, #32
 80030f6:	4619      	mov	r1, r3
 80030f8:	4824      	ldr	r0, [pc, #144]	; (800318c <MX_TIM3_Init+0x134>)
 80030fa:	f01d fc3d 	bl	8020978 <HAL_TIMEx_MasterConfigSynchronization>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003104:	f000 f9c4 	bl	8003490 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003108:	2360      	movs	r3, #96	; 0x60
 800310a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800310c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003110:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800311a:	1d3b      	adds	r3, r7, #4
 800311c:	2200      	movs	r2, #0
 800311e:	4619      	mov	r1, r3
 8003120:	481a      	ldr	r0, [pc, #104]	; (800318c <MX_TIM3_Init+0x134>)
 8003122:	f01c ffa1 	bl	8020068 <HAL_TIM_PWM_ConfigChannel>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800312c:	f000 f9b0 	bl	8003490 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003130:	1d3b      	adds	r3, r7, #4
 8003132:	2204      	movs	r2, #4
 8003134:	4619      	mov	r1, r3
 8003136:	4815      	ldr	r0, [pc, #84]	; (800318c <MX_TIM3_Init+0x134>)
 8003138:	f01c ff96 	bl	8020068 <HAL_TIM_PWM_ConfigChannel>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003142:	f000 f9a5 	bl	8003490 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800314a:	1d3b      	adds	r3, r7, #4
 800314c:	2208      	movs	r2, #8
 800314e:	4619      	mov	r1, r3
 8003150:	480e      	ldr	r0, [pc, #56]	; (800318c <MX_TIM3_Init+0x134>)
 8003152:	f01c ff89 	bl	8020068 <HAL_TIM_PWM_ConfigChannel>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 800315c:	f000 f998 	bl	8003490 <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 8003160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003164:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003166:	1d3b      	adds	r3, r7, #4
 8003168:	220c      	movs	r2, #12
 800316a:	4619      	mov	r1, r3
 800316c:	4807      	ldr	r0, [pc, #28]	; (800318c <MX_TIM3_Init+0x134>)
 800316e:	f01c ff7b 	bl	8020068 <HAL_TIM_PWM_ConfigChannel>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <MX_TIM3_Init+0x124>
  {
    Error_Handler();
 8003178:	f000 f98a 	bl	8003490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800317c:	4803      	ldr	r0, [pc, #12]	; (800318c <MX_TIM3_Init+0x134>)
 800317e:	f000 fb5d 	bl	800383c <HAL_TIM_MspPostInit>

}
 8003182:	bf00      	nop
 8003184:	3738      	adds	r7, #56	; 0x38
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	200009e8 	.word	0x200009e8
 8003190:	40000400 	.word	0x40000400

08003194 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <MX_USART1_UART_Init+0x4c>)
 800319a:	4a12      	ldr	r2, [pc, #72]	; (80031e4 <MX_USART1_UART_Init+0x50>)
 800319c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800319e:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <MX_USART1_UART_Init+0x4c>)
 80031a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031a6:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <MX_USART1_UART_Init+0x4c>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <MX_USART1_UART_Init+0x4c>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031b2:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <MX_USART1_UART_Init+0x4c>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031b8:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <MX_USART1_UART_Init+0x4c>)
 80031ba:	220c      	movs	r2, #12
 80031bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031be:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <MX_USART1_UART_Init+0x4c>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <MX_USART1_UART_Init+0x4c>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031ca:	4805      	ldr	r0, [pc, #20]	; (80031e0 <MX_USART1_UART_Init+0x4c>)
 80031cc:	f01d fc56 	bl	8020a7c <HAL_UART_Init>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80031d6:	f000 f95b 	bl	8003490 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000a30 	.word	0x20000a30
 80031e4:	40011000 	.word	0x40011000

080031e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031ec:	4b11      	ldr	r3, [pc, #68]	; (8003234 <MX_USART2_UART_Init+0x4c>)
 80031ee:	4a12      	ldr	r2, [pc, #72]	; (8003238 <MX_USART2_UART_Init+0x50>)
 80031f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031f2:	4b10      	ldr	r3, [pc, #64]	; (8003234 <MX_USART2_UART_Init+0x4c>)
 80031f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031fa:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <MX_USART2_UART_Init+0x4c>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <MX_USART2_UART_Init+0x4c>)
 8003202:	2200      	movs	r2, #0
 8003204:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003206:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <MX_USART2_UART_Init+0x4c>)
 8003208:	2200      	movs	r2, #0
 800320a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <MX_USART2_UART_Init+0x4c>)
 800320e:	220c      	movs	r2, #12
 8003210:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <MX_USART2_UART_Init+0x4c>)
 8003214:	2200      	movs	r2, #0
 8003216:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003218:	4b06      	ldr	r3, [pc, #24]	; (8003234 <MX_USART2_UART_Init+0x4c>)
 800321a:	2200      	movs	r2, #0
 800321c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800321e:	4805      	ldr	r0, [pc, #20]	; (8003234 <MX_USART2_UART_Init+0x4c>)
 8003220:	f01d fc2c 	bl	8020a7c <HAL_UART_Init>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800322a:	f000 f931 	bl	8003490 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20000a74 	.word	0x20000a74
 8003238:	40004400 	.word	0x40004400

0800323c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003240:	4b11      	ldr	r3, [pc, #68]	; (8003288 <MX_USART6_UART_Init+0x4c>)
 8003242:	4a12      	ldr	r2, [pc, #72]	; (800328c <MX_USART6_UART_Init+0x50>)
 8003244:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003246:	4b10      	ldr	r3, [pc, #64]	; (8003288 <MX_USART6_UART_Init+0x4c>)
 8003248:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800324c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800324e:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <MX_USART6_UART_Init+0x4c>)
 8003250:	2200      	movs	r2, #0
 8003252:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003254:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <MX_USART6_UART_Init+0x4c>)
 8003256:	2200      	movs	r2, #0
 8003258:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800325a:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <MX_USART6_UART_Init+0x4c>)
 800325c:	2200      	movs	r2, #0
 800325e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003260:	4b09      	ldr	r3, [pc, #36]	; (8003288 <MX_USART6_UART_Init+0x4c>)
 8003262:	220c      	movs	r2, #12
 8003264:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003266:	4b08      	ldr	r3, [pc, #32]	; (8003288 <MX_USART6_UART_Init+0x4c>)
 8003268:	2200      	movs	r2, #0
 800326a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800326c:	4b06      	ldr	r3, [pc, #24]	; (8003288 <MX_USART6_UART_Init+0x4c>)
 800326e:	2200      	movs	r2, #0
 8003270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003272:	4805      	ldr	r0, [pc, #20]	; (8003288 <MX_USART6_UART_Init+0x4c>)
 8003274:	f01d fc02 	bl	8020a7c <HAL_UART_Init>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800327e:	f000 f907 	bl	8003490 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000ab8 	.word	0x20000ab8
 800328c:	40011400 	.word	0x40011400

08003290 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	607b      	str	r3, [r7, #4]
 800329a:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <MX_DMA_Init+0x78>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	4a1a      	ldr	r2, [pc, #104]	; (8003308 <MX_DMA_Init+0x78>)
 80032a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032a4:	6313      	str	r3, [r2, #48]	; 0x30
 80032a6:	4b18      	ldr	r3, [pc, #96]	; (8003308 <MX_DMA_Init+0x78>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ae:	607b      	str	r3, [r7, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	603b      	str	r3, [r7, #0]
 80032b6:	4b14      	ldr	r3, [pc, #80]	; (8003308 <MX_DMA_Init+0x78>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	4a13      	ldr	r2, [pc, #76]	; (8003308 <MX_DMA_Init+0x78>)
 80032bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032c0:	6313      	str	r3, [r2, #48]	; 0x30
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <MX_DMA_Init+0x78>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80032ce:	2200      	movs	r2, #0
 80032d0:	2100      	movs	r1, #0
 80032d2:	200b      	movs	r0, #11
 80032d4:	f018 f895 	bl	801b402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80032d8:	200b      	movs	r0, #11
 80032da:	f018 f8ae 	bl	801b43a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80032de:	2200      	movs	r2, #0
 80032e0:	2100      	movs	r1, #0
 80032e2:	200c      	movs	r0, #12
 80032e4:	f018 f88d 	bl	801b402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80032e8:	200c      	movs	r0, #12
 80032ea:	f018 f8a6 	bl	801b43a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80032ee:	2200      	movs	r2, #0
 80032f0:	2100      	movs	r1, #0
 80032f2:	2038      	movs	r0, #56	; 0x38
 80032f4:	f018 f885 	bl	801b402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80032f8:	2038      	movs	r0, #56	; 0x38
 80032fa:	f018 f89e 	bl	801b43a <HAL_NVIC_EnableIRQ>

}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40023800 	.word	0x40023800

0800330c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08a      	sub	sp, #40	; 0x28
 8003310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003312:	f107 0314 	add.w	r3, r7, #20
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	609a      	str	r2, [r3, #8]
 800331e:	60da      	str	r2, [r3, #12]
 8003320:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	4b56      	ldr	r3, [pc, #344]	; (8003480 <MX_GPIO_Init+0x174>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	4a55      	ldr	r2, [pc, #340]	; (8003480 <MX_GPIO_Init+0x174>)
 800332c:	f043 0304 	orr.w	r3, r3, #4
 8003330:	6313      	str	r3, [r2, #48]	; 0x30
 8003332:	4b53      	ldr	r3, [pc, #332]	; (8003480 <MX_GPIO_Init+0x174>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	4b4f      	ldr	r3, [pc, #316]	; (8003480 <MX_GPIO_Init+0x174>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	4a4e      	ldr	r2, [pc, #312]	; (8003480 <MX_GPIO_Init+0x174>)
 8003348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800334c:	6313      	str	r3, [r2, #48]	; 0x30
 800334e:	4b4c      	ldr	r3, [pc, #304]	; (8003480 <MX_GPIO_Init+0x174>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	4b48      	ldr	r3, [pc, #288]	; (8003480 <MX_GPIO_Init+0x174>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	4a47      	ldr	r2, [pc, #284]	; (8003480 <MX_GPIO_Init+0x174>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	6313      	str	r3, [r2, #48]	; 0x30
 800336a:	4b45      	ldr	r3, [pc, #276]	; (8003480 <MX_GPIO_Init+0x174>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	607b      	str	r3, [r7, #4]
 800337a:	4b41      	ldr	r3, [pc, #260]	; (8003480 <MX_GPIO_Init+0x174>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	4a40      	ldr	r2, [pc, #256]	; (8003480 <MX_GPIO_Init+0x174>)
 8003380:	f043 0302 	orr.w	r3, r3, #2
 8003384:	6313      	str	r3, [r2, #48]	; 0x30
 8003386:	4b3e      	ldr	r3, [pc, #248]	; (8003480 <MX_GPIO_Init+0x174>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	607b      	str	r3, [r7, #4]
 8003390:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SONAR_TRIGGER_Pin|LD1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8003392:	2200      	movs	r2, #0
 8003394:	2131      	movs	r1, #49	; 0x31
 8003396:	483b      	ldr	r0, [pc, #236]	; (8003484 <MX_GPIO_Init+0x178>)
 8003398:	f018 fefc 	bl	801c194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800339c:	2200      	movs	r2, #0
 800339e:	2120      	movs	r1, #32
 80033a0:	4839      	ldr	r0, [pc, #228]	; (8003488 <MX_GPIO_Init+0x17c>)
 80033a2:	f018 fef7 	bl	801c194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80033a6:	2200      	movs	r2, #0
 80033a8:	2104      	movs	r1, #4
 80033aa:	4838      	ldr	r0, [pc, #224]	; (800348c <MX_GPIO_Init+0x180>)
 80033ac:	f018 fef2 	bl	801c194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80033b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033b6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80033ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80033c0:	f107 0314 	add.w	r3, r7, #20
 80033c4:	4619      	mov	r1, r3
 80033c6:	482f      	ldr	r0, [pc, #188]	; (8003484 <MX_GPIO_Init+0x178>)
 80033c8:	f018 fc7c 	bl	801bcc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SONAR_TRIGGER_Pin LD1_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = SONAR_TRIGGER_Pin|LD1_Pin|BUZZER_Pin;
 80033cc:	2331      	movs	r3, #49	; 0x31
 80033ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033d0:	2301      	movs	r3, #1
 80033d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d8:	2300      	movs	r3, #0
 80033da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033dc:	f107 0314 	add.w	r3, r7, #20
 80033e0:	4619      	mov	r1, r3
 80033e2:	4828      	ldr	r0, [pc, #160]	; (8003484 <MX_GPIO_Init+0x178>)
 80033e4:	f018 fc6e 	bl	801bcc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SONAR_ECHO_Pin */
  GPIO_InitStruct.Pin = SONAR_ECHO_Pin;
 80033e8:	2302      	movs	r3, #2
 80033ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80033ec:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80033f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SONAR_ECHO_GPIO_Port, &GPIO_InitStruct);
 80033f6:	f107 0314 	add.w	r3, r7, #20
 80033fa:	4619      	mov	r1, r3
 80033fc:	4821      	ldr	r0, [pc, #132]	; (8003484 <MX_GPIO_Init+0x178>)
 80033fe:	f018 fc61 	bl	801bcc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003402:	2320      	movs	r3, #32
 8003404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003406:	2301      	movs	r3, #1
 8003408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340e:	2300      	movs	r3, #0
 8003410:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003412:	f107 0314 	add.w	r3, r7, #20
 8003416:	4619      	mov	r1, r3
 8003418:	481b      	ldr	r0, [pc, #108]	; (8003488 <MX_GPIO_Init+0x17c>)
 800341a:	f018 fc53 	bl	801bcc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800341e:	2304      	movs	r3, #4
 8003420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003422:	2301      	movs	r3, #1
 8003424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342a:	2300      	movs	r3, #0
 800342c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800342e:	f107 0314 	add.w	r3, r7, #20
 8003432:	4619      	mov	r1, r3
 8003434:	4815      	ldr	r0, [pc, #84]	; (800348c <MX_GPIO_Init+0x180>)
 8003436:	f018 fc45 	bl	801bcc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RC_PPM_Pin */
  GPIO_InitStruct.Pin = RC_PPM_Pin;
 800343a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800343e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003440:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RC_PPM_GPIO_Port, &GPIO_InitStruct);
 800344a:	f107 0314 	add.w	r3, r7, #20
 800344e:	4619      	mov	r1, r3
 8003450:	480c      	ldr	r0, [pc, #48]	; (8003484 <MX_GPIO_Init+0x178>)
 8003452:	f018 fc37 	bl	801bcc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003456:	2200      	movs	r2, #0
 8003458:	2100      	movs	r1, #0
 800345a:	2007      	movs	r0, #7
 800345c:	f017 ffd1 	bl	801b402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003460:	2007      	movs	r0, #7
 8003462:	f017 ffea 	bl	801b43a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003466:	2200      	movs	r2, #0
 8003468:	2100      	movs	r1, #0
 800346a:	2028      	movs	r0, #40	; 0x28
 800346c:	f017 ffc9 	bl	801b402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003470:	2028      	movs	r0, #40	; 0x28
 8003472:	f017 ffe2 	bl	801b43a <HAL_NVIC_EnableIRQ>

}
 8003476:	bf00      	nop
 8003478:	3728      	adds	r7, #40	; 0x28
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800
 8003484:	40020800 	.word	0x40020800
 8003488:	40020000 	.word	0x40020000
 800348c:	40020400 	.word	0x40020400

08003490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003494:	b672      	cpsid	i
}
 8003496:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003498:	e7fe      	b.n	8003498 <Error_Handler+0x8>
	...

0800349c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	607b      	str	r3, [r7, #4]
 80034a6:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <HAL_MspInit+0x4c>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	4a0f      	ldr	r2, [pc, #60]	; (80034e8 <HAL_MspInit+0x4c>)
 80034ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034b0:	6453      	str	r3, [r2, #68]	; 0x44
 80034b2:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <HAL_MspInit+0x4c>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ba:	607b      	str	r3, [r7, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	603b      	str	r3, [r7, #0]
 80034c2:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_MspInit+0x4c>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	4a08      	ldr	r2, [pc, #32]	; (80034e8 <HAL_MspInit+0x4c>)
 80034c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034cc:	6413      	str	r3, [r2, #64]	; 0x40
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_MspInit+0x4c>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80034da:	2007      	movs	r0, #7
 80034dc:	f017 ff86 	bl	801b3ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034e0:	bf00      	nop
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40023800 	.word	0x40023800

080034ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08c      	sub	sp, #48	; 0x30
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f4:	f107 031c 	add.w	r3, r7, #28
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	60da      	str	r2, [r3, #12]
 8003502:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a49      	ldr	r2, [pc, #292]	; (8003630 <HAL_ADC_MspInit+0x144>)
 800350a:	4293      	cmp	r3, r2
 800350c:	f040 808c 	bne.w	8003628 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003510:	2300      	movs	r3, #0
 8003512:	61bb      	str	r3, [r7, #24]
 8003514:	4b47      	ldr	r3, [pc, #284]	; (8003634 <HAL_ADC_MspInit+0x148>)
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003518:	4a46      	ldr	r2, [pc, #280]	; (8003634 <HAL_ADC_MspInit+0x148>)
 800351a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800351e:	6453      	str	r3, [r2, #68]	; 0x44
 8003520:	4b44      	ldr	r3, [pc, #272]	; (8003634 <HAL_ADC_MspInit+0x148>)
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	61bb      	str	r3, [r7, #24]
 800352a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	4b40      	ldr	r3, [pc, #256]	; (8003634 <HAL_ADC_MspInit+0x148>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	4a3f      	ldr	r2, [pc, #252]	; (8003634 <HAL_ADC_MspInit+0x148>)
 8003536:	f043 0304 	orr.w	r3, r3, #4
 800353a:	6313      	str	r3, [r2, #48]	; 0x30
 800353c:	4b3d      	ldr	r3, [pc, #244]	; (8003634 <HAL_ADC_MspInit+0x148>)
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003548:	2300      	movs	r3, #0
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	4b39      	ldr	r3, [pc, #228]	; (8003634 <HAL_ADC_MspInit+0x148>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	4a38      	ldr	r2, [pc, #224]	; (8003634 <HAL_ADC_MspInit+0x148>)
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	6313      	str	r3, [r2, #48]	; 0x30
 8003558:	4b36      	ldr	r3, [pc, #216]	; (8003634 <HAL_ADC_MspInit+0x148>)
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	4b32      	ldr	r3, [pc, #200]	; (8003634 <HAL_ADC_MspInit+0x148>)
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	4a31      	ldr	r2, [pc, #196]	; (8003634 <HAL_ADC_MspInit+0x148>)
 800356e:	f043 0302 	orr.w	r3, r3, #2
 8003572:	6313      	str	r3, [r2, #48]	; 0x30
 8003574:	4b2f      	ldr	r3, [pc, #188]	; (8003634 <HAL_ADC_MspInit+0x148>)
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN12
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RSSI_Pin;
 8003580:	2304      	movs	r3, #4
 8003582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003584:	2303      	movs	r3, #3
 8003586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003588:	2300      	movs	r3, #0
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RSSI_GPIO_Port, &GPIO_InitStruct);
 800358c:	f107 031c 	add.w	r3, r7, #28
 8003590:	4619      	mov	r1, r3
 8003592:	4829      	ldr	r0, [pc, #164]	; (8003638 <HAL_ADC_MspInit+0x14c>)
 8003594:	f018 fb96 	bl	801bcc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VOLTAGE_IN_Pin|CURRENT_IN_Pin;
 8003598:	23c0      	movs	r3, #192	; 0xc0
 800359a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800359c:	2303      	movs	r3, #3
 800359e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a4:	f107 031c 	add.w	r3, r7, #28
 80035a8:	4619      	mov	r1, r3
 80035aa:	4824      	ldr	r0, [pc, #144]	; (800363c <HAL_ADC_MspInit+0x150>)
 80035ac:	f018 fb8a 	bl	801bcc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EXTERNAL_PAD_Pin;
 80035b0:	2302      	movs	r3, #2
 80035b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035b4:	2303      	movs	r3, #3
 80035b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EXTERNAL_PAD_GPIO_Port, &GPIO_InitStruct);
 80035bc:	f107 031c 	add.w	r3, r7, #28
 80035c0:	4619      	mov	r1, r3
 80035c2:	481f      	ldr	r0, [pc, #124]	; (8003640 <HAL_ADC_MspInit+0x154>)
 80035c4:	f018 fb7e 	bl	801bcc4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80035c8:	4b1e      	ldr	r3, [pc, #120]	; (8003644 <HAL_ADC_MspInit+0x158>)
 80035ca:	4a1f      	ldr	r2, [pc, #124]	; (8003648 <HAL_ADC_MspInit+0x15c>)
 80035cc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80035ce:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <HAL_ADC_MspInit+0x158>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035d4:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <HAL_ADC_MspInit+0x158>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80035da:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <HAL_ADC_MspInit+0x158>)
 80035dc:	2200      	movs	r2, #0
 80035de:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80035e0:	4b18      	ldr	r3, [pc, #96]	; (8003644 <HAL_ADC_MspInit+0x158>)
 80035e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035e6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80035e8:	4b16      	ldr	r3, [pc, #88]	; (8003644 <HAL_ADC_MspInit+0x158>)
 80035ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80035f0:	4b14      	ldr	r3, [pc, #80]	; (8003644 <HAL_ADC_MspInit+0x158>)
 80035f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035f6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80035f8:	4b12      	ldr	r3, [pc, #72]	; (8003644 <HAL_ADC_MspInit+0x158>)
 80035fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035fe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003600:	4b10      	ldr	r3, [pc, #64]	; (8003644 <HAL_ADC_MspInit+0x158>)
 8003602:	2200      	movs	r2, #0
 8003604:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003606:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <HAL_ADC_MspInit+0x158>)
 8003608:	2200      	movs	r2, #0
 800360a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800360c:	480d      	ldr	r0, [pc, #52]	; (8003644 <HAL_ADC_MspInit+0x158>)
 800360e:	f017 ff3d 	bl	801b48c <HAL_DMA_Init>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8003618:	f7ff ff3a 	bl	8003490 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a09      	ldr	r2, [pc, #36]	; (8003644 <HAL_ADC_MspInit+0x158>)
 8003620:	639a      	str	r2, [r3, #56]	; 0x38
 8003622:	4a08      	ldr	r2, [pc, #32]	; (8003644 <HAL_ADC_MspInit+0x158>)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003628:	bf00      	nop
 800362a:	3730      	adds	r7, #48	; 0x30
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40012000 	.word	0x40012000
 8003634:	40023800 	.word	0x40023800
 8003638:	40020800 	.word	0x40020800
 800363c:	40020000 	.word	0x40020000
 8003640:	40020400 	.word	0x40020400
 8003644:	2000082c 	.word	0x2000082c
 8003648:	40026410 	.word	0x40026410

0800364c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08a      	sub	sp, #40	; 0x28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003654:	f107 0314 	add.w	r3, r7, #20
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	60da      	str	r2, [r3, #12]
 8003662:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a4f      	ldr	r2, [pc, #316]	; (80037a8 <HAL_I2C_MspInit+0x15c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	f040 8097 	bne.w	800379e <HAL_I2C_MspInit+0x152>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003670:	2300      	movs	r3, #0
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	4b4d      	ldr	r3, [pc, #308]	; (80037ac <HAL_I2C_MspInit+0x160>)
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	4a4c      	ldr	r2, [pc, #304]	; (80037ac <HAL_I2C_MspInit+0x160>)
 800367a:	f043 0302 	orr.w	r3, r3, #2
 800367e:	6313      	str	r3, [r2, #48]	; 0x30
 8003680:	4b4a      	ldr	r3, [pc, #296]	; (80037ac <HAL_I2C_MspInit+0x160>)
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800368c:	23c0      	movs	r3, #192	; 0xc0
 800368e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003690:	2312      	movs	r3, #18
 8003692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003694:	2300      	movs	r3, #0
 8003696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003698:	2303      	movs	r3, #3
 800369a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800369c:	2304      	movs	r3, #4
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036a0:	f107 0314 	add.w	r3, r7, #20
 80036a4:	4619      	mov	r1, r3
 80036a6:	4842      	ldr	r0, [pc, #264]	; (80037b0 <HAL_I2C_MspInit+0x164>)
 80036a8:	f018 fb0c 	bl	801bcc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	4b3e      	ldr	r3, [pc, #248]	; (80037ac <HAL_I2C_MspInit+0x160>)
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	4a3d      	ldr	r2, [pc, #244]	; (80037ac <HAL_I2C_MspInit+0x160>)
 80036b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036ba:	6413      	str	r3, [r2, #64]	; 0x40
 80036bc:	4b3b      	ldr	r3, [pc, #236]	; (80037ac <HAL_I2C_MspInit+0x160>)
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80036c8:	4b3a      	ldr	r3, [pc, #232]	; (80037b4 <HAL_I2C_MspInit+0x168>)
 80036ca:	4a3b      	ldr	r2, [pc, #236]	; (80037b8 <HAL_I2C_MspInit+0x16c>)
 80036cc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80036ce:	4b39      	ldr	r3, [pc, #228]	; (80037b4 <HAL_I2C_MspInit+0x168>)
 80036d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036d4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036d6:	4b37      	ldr	r3, [pc, #220]	; (80037b4 <HAL_I2C_MspInit+0x168>)
 80036d8:	2200      	movs	r2, #0
 80036da:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036dc:	4b35      	ldr	r3, [pc, #212]	; (80037b4 <HAL_I2C_MspInit+0x168>)
 80036de:	2200      	movs	r2, #0
 80036e0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036e2:	4b34      	ldr	r3, [pc, #208]	; (80037b4 <HAL_I2C_MspInit+0x168>)
 80036e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036e8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036ea:	4b32      	ldr	r3, [pc, #200]	; (80037b4 <HAL_I2C_MspInit+0x168>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036f0:	4b30      	ldr	r3, [pc, #192]	; (80037b4 <HAL_I2C_MspInit+0x168>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80036f6:	4b2f      	ldr	r3, [pc, #188]	; (80037b4 <HAL_I2C_MspInit+0x168>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036fc:	4b2d      	ldr	r3, [pc, #180]	; (80037b4 <HAL_I2C_MspInit+0x168>)
 80036fe:	2200      	movs	r2, #0
 8003700:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003702:	4b2c      	ldr	r3, [pc, #176]	; (80037b4 <HAL_I2C_MspInit+0x168>)
 8003704:	2200      	movs	r2, #0
 8003706:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003708:	482a      	ldr	r0, [pc, #168]	; (80037b4 <HAL_I2C_MspInit+0x168>)
 800370a:	f017 febf 	bl	801b48c <HAL_DMA_Init>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8003714:	f7ff febc 	bl	8003490 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a26      	ldr	r2, [pc, #152]	; (80037b4 <HAL_I2C_MspInit+0x168>)
 800371c:	639a      	str	r2, [r3, #56]	; 0x38
 800371e:	4a25      	ldr	r2, [pc, #148]	; (80037b4 <HAL_I2C_MspInit+0x168>)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8003724:	4b25      	ldr	r3, [pc, #148]	; (80037bc <HAL_I2C_MspInit+0x170>)
 8003726:	4a26      	ldr	r2, [pc, #152]	; (80037c0 <HAL_I2C_MspInit+0x174>)
 8003728:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800372a:	4b24      	ldr	r3, [pc, #144]	; (80037bc <HAL_I2C_MspInit+0x170>)
 800372c:	2200      	movs	r2, #0
 800372e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003730:	4b22      	ldr	r3, [pc, #136]	; (80037bc <HAL_I2C_MspInit+0x170>)
 8003732:	2240      	movs	r2, #64	; 0x40
 8003734:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003736:	4b21      	ldr	r3, [pc, #132]	; (80037bc <HAL_I2C_MspInit+0x170>)
 8003738:	2200      	movs	r2, #0
 800373a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800373c:	4b1f      	ldr	r3, [pc, #124]	; (80037bc <HAL_I2C_MspInit+0x170>)
 800373e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003742:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003744:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <HAL_I2C_MspInit+0x170>)
 8003746:	2200      	movs	r2, #0
 8003748:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800374a:	4b1c      	ldr	r3, [pc, #112]	; (80037bc <HAL_I2C_MspInit+0x170>)
 800374c:	2200      	movs	r2, #0
 800374e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003750:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <HAL_I2C_MspInit+0x170>)
 8003752:	2200      	movs	r2, #0
 8003754:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003756:	4b19      	ldr	r3, [pc, #100]	; (80037bc <HAL_I2C_MspInit+0x170>)
 8003758:	2200      	movs	r2, #0
 800375a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800375c:	4b17      	ldr	r3, [pc, #92]	; (80037bc <HAL_I2C_MspInit+0x170>)
 800375e:	2200      	movs	r2, #0
 8003760:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003762:	4816      	ldr	r0, [pc, #88]	; (80037bc <HAL_I2C_MspInit+0x170>)
 8003764:	f017 fe92 	bl	801b48c <HAL_DMA_Init>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 800376e:	f7ff fe8f 	bl	8003490 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a11      	ldr	r2, [pc, #68]	; (80037bc <HAL_I2C_MspInit+0x170>)
 8003776:	635a      	str	r2, [r3, #52]	; 0x34
 8003778:	4a10      	ldr	r2, [pc, #64]	; (80037bc <HAL_I2C_MspInit+0x170>)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800377e:	2200      	movs	r2, #0
 8003780:	2100      	movs	r1, #0
 8003782:	201f      	movs	r0, #31
 8003784:	f017 fe3d 	bl	801b402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003788:	201f      	movs	r0, #31
 800378a:	f017 fe56 	bl	801b43a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800378e:	2200      	movs	r2, #0
 8003790:	2100      	movs	r1, #0
 8003792:	2020      	movs	r0, #32
 8003794:	f017 fe35 	bl	801b402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003798:	2020      	movs	r0, #32
 800379a:	f017 fe4e 	bl	801b43a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800379e:	bf00      	nop
 80037a0:	3728      	adds	r7, #40	; 0x28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40005400 	.word	0x40005400
 80037ac:	40023800 	.word	0x40023800
 80037b0:	40020400 	.word	0x40020400
 80037b4:	200008e0 	.word	0x200008e0
 80037b8:	40026010 	.word	0x40026010
 80037bc:	20000940 	.word	0x20000940
 80037c0:	40026028 	.word	0x40026028

080037c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d4:	d10e      	bne.n	80037f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	4b16      	ldr	r3, [pc, #88]	; (8003834 <HAL_TIM_Base_MspInit+0x70>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	4a15      	ldr	r2, [pc, #84]	; (8003834 <HAL_TIM_Base_MspInit+0x70>)
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	6413      	str	r3, [r2, #64]	; 0x40
 80037e6:	4b13      	ldr	r3, [pc, #76]	; (8003834 <HAL_TIM_Base_MspInit+0x70>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80037f2:	e01a      	b.n	800382a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a0f      	ldr	r2, [pc, #60]	; (8003838 <HAL_TIM_Base_MspInit+0x74>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d115      	bne.n	800382a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <HAL_TIM_Base_MspInit+0x70>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	4a0b      	ldr	r2, [pc, #44]	; (8003834 <HAL_TIM_Base_MspInit+0x70>)
 8003808:	f043 0302 	orr.w	r3, r3, #2
 800380c:	6413      	str	r3, [r2, #64]	; 0x40
 800380e:	4b09      	ldr	r3, [pc, #36]	; (8003834 <HAL_TIM_Base_MspInit+0x70>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800381a:	2200      	movs	r2, #0
 800381c:	2100      	movs	r1, #0
 800381e:	201d      	movs	r0, #29
 8003820:	f017 fdef 	bl	801b402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003824:	201d      	movs	r0, #29
 8003826:	f017 fe08 	bl	801b43a <HAL_NVIC_EnableIRQ>
}
 800382a:	bf00      	nop
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800
 8003838:	40000400 	.word	0x40000400

0800383c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08a      	sub	sp, #40	; 0x28
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003844:	f107 0314 	add.w	r3, r7, #20
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	609a      	str	r2, [r3, #8]
 8003850:	60da      	str	r2, [r3, #12]
 8003852:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a21      	ldr	r2, [pc, #132]	; (80038e0 <HAL_TIM_MspPostInit+0xa4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d13c      	bne.n	80038d8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	4b20      	ldr	r3, [pc, #128]	; (80038e4 <HAL_TIM_MspPostInit+0xa8>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	4a1f      	ldr	r2, [pc, #124]	; (80038e4 <HAL_TIM_MspPostInit+0xa8>)
 8003868:	f043 0302 	orr.w	r3, r3, #2
 800386c:	6313      	str	r3, [r2, #48]	; 0x30
 800386e:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <HAL_TIM_MspPostInit+0xa8>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	613b      	str	r3, [r7, #16]
 8003878:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <HAL_TIM_MspPostInit+0xa8>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	4a18      	ldr	r2, [pc, #96]	; (80038e4 <HAL_TIM_MspPostInit+0xa8>)
 8003884:	f043 0304 	orr.w	r3, r3, #4
 8003888:	6313      	str	r3, [r2, #48]	; 0x30
 800388a:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <HAL_TIM_MspPostInit+0xa8>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003896:	2301      	movs	r3, #1
 8003898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389a:	2302      	movs	r3, #2
 800389c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a2:	2300      	movs	r3, #0
 80038a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038a6:	2302      	movs	r3, #2
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038aa:	f107 0314 	add.w	r3, r7, #20
 80038ae:	4619      	mov	r1, r3
 80038b0:	480d      	ldr	r0, [pc, #52]	; (80038e8 <HAL_TIM_MspPostInit+0xac>)
 80038b2:	f018 fa07 	bl	801bcc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 80038b6:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80038ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038bc:	2302      	movs	r3, #2
 80038be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c4:	2300      	movs	r3, #0
 80038c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038c8:	2302      	movs	r3, #2
 80038ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038cc:	f107 0314 	add.w	r3, r7, #20
 80038d0:	4619      	mov	r1, r3
 80038d2:	4806      	ldr	r0, [pc, #24]	; (80038ec <HAL_TIM_MspPostInit+0xb0>)
 80038d4:	f018 f9f6 	bl	801bcc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80038d8:	bf00      	nop
 80038da:	3728      	adds	r7, #40	; 0x28
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40000400 	.word	0x40000400
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40020400 	.word	0x40020400
 80038ec:	40020800 	.word	0x40020800

080038f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08e      	sub	sp, #56	; 0x38
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	60da      	str	r2, [r3, #12]
 8003906:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a58      	ldr	r2, [pc, #352]	; (8003a70 <HAL_UART_MspInit+0x180>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d135      	bne.n	800397e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	623b      	str	r3, [r7, #32]
 8003916:	4b57      	ldr	r3, [pc, #348]	; (8003a74 <HAL_UART_MspInit+0x184>)
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	4a56      	ldr	r2, [pc, #344]	; (8003a74 <HAL_UART_MspInit+0x184>)
 800391c:	f043 0310 	orr.w	r3, r3, #16
 8003920:	6453      	str	r3, [r2, #68]	; 0x44
 8003922:	4b54      	ldr	r3, [pc, #336]	; (8003a74 <HAL_UART_MspInit+0x184>)
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	623b      	str	r3, [r7, #32]
 800392c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
 8003932:	4b50      	ldr	r3, [pc, #320]	; (8003a74 <HAL_UART_MspInit+0x184>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	4a4f      	ldr	r2, [pc, #316]	; (8003a74 <HAL_UART_MspInit+0x184>)
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	6313      	str	r3, [r2, #48]	; 0x30
 800393e:	4b4d      	ldr	r3, [pc, #308]	; (8003a74 <HAL_UART_MspInit+0x184>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	61fb      	str	r3, [r7, #28]
 8003948:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800394a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003950:	2302      	movs	r3, #2
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003954:	2300      	movs	r3, #0
 8003956:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003958:	2303      	movs	r3, #3
 800395a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800395c:	2307      	movs	r3, #7
 800395e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003964:	4619      	mov	r1, r3
 8003966:	4844      	ldr	r0, [pc, #272]	; (8003a78 <HAL_UART_MspInit+0x188>)
 8003968:	f018 f9ac 	bl	801bcc4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800396c:	2200      	movs	r2, #0
 800396e:	2100      	movs	r1, #0
 8003970:	2025      	movs	r0, #37	; 0x25
 8003972:	f017 fd46 	bl	801b402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003976:	2025      	movs	r0, #37	; 0x25
 8003978:	f017 fd5f 	bl	801b43a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800397c:	e073      	b.n	8003a66 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a3e      	ldr	r2, [pc, #248]	; (8003a7c <HAL_UART_MspInit+0x18c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d134      	bne.n	80039f2 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003988:	2300      	movs	r3, #0
 800398a:	61bb      	str	r3, [r7, #24]
 800398c:	4b39      	ldr	r3, [pc, #228]	; (8003a74 <HAL_UART_MspInit+0x184>)
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	4a38      	ldr	r2, [pc, #224]	; (8003a74 <HAL_UART_MspInit+0x184>)
 8003992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003996:	6413      	str	r3, [r2, #64]	; 0x40
 8003998:	4b36      	ldr	r3, [pc, #216]	; (8003a74 <HAL_UART_MspInit+0x184>)
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	4b32      	ldr	r3, [pc, #200]	; (8003a74 <HAL_UART_MspInit+0x184>)
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	4a31      	ldr	r2, [pc, #196]	; (8003a74 <HAL_UART_MspInit+0x184>)
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	6313      	str	r3, [r2, #48]	; 0x30
 80039b4:	4b2f      	ldr	r3, [pc, #188]	; (8003a74 <HAL_UART_MspInit+0x184>)
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80039c0:	230c      	movs	r3, #12
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c4:	2302      	movs	r3, #2
 80039c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039cc:	2303      	movs	r3, #3
 80039ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039d0:	2307      	movs	r3, #7
 80039d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d8:	4619      	mov	r1, r3
 80039da:	4827      	ldr	r0, [pc, #156]	; (8003a78 <HAL_UART_MspInit+0x188>)
 80039dc:	f018 f972 	bl	801bcc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80039e0:	2200      	movs	r2, #0
 80039e2:	2100      	movs	r1, #0
 80039e4:	2026      	movs	r0, #38	; 0x26
 80039e6:	f017 fd0c 	bl	801b402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80039ea:	2026      	movs	r0, #38	; 0x26
 80039ec:	f017 fd25 	bl	801b43a <HAL_NVIC_EnableIRQ>
}
 80039f0:	e039      	b.n	8003a66 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART6)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a22      	ldr	r2, [pc, #136]	; (8003a80 <HAL_UART_MspInit+0x190>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d134      	bne.n	8003a66 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART6_CLK_ENABLE();
 80039fc:	2300      	movs	r3, #0
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	4b1c      	ldr	r3, [pc, #112]	; (8003a74 <HAL_UART_MspInit+0x184>)
 8003a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a04:	4a1b      	ldr	r2, [pc, #108]	; (8003a74 <HAL_UART_MspInit+0x184>)
 8003a06:	f043 0320 	orr.w	r3, r3, #32
 8003a0a:	6453      	str	r3, [r2, #68]	; 0x44
 8003a0c:	4b19      	ldr	r3, [pc, #100]	; (8003a74 <HAL_UART_MspInit+0x184>)
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	4b15      	ldr	r3, [pc, #84]	; (8003a74 <HAL_UART_MspInit+0x184>)
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	4a14      	ldr	r2, [pc, #80]	; (8003a74 <HAL_UART_MspInit+0x184>)
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	6313      	str	r3, [r2, #48]	; 0x30
 8003a28:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <HAL_UART_MspInit+0x184>)
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003a34:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a42:	2303      	movs	r3, #3
 8003a44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003a46:	2308      	movs	r3, #8
 8003a48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4809      	ldr	r0, [pc, #36]	; (8003a78 <HAL_UART_MspInit+0x188>)
 8003a52:	f018 f937 	bl	801bcc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003a56:	2200      	movs	r2, #0
 8003a58:	2100      	movs	r1, #0
 8003a5a:	2047      	movs	r0, #71	; 0x47
 8003a5c:	f017 fcd1 	bl	801b402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003a60:	2047      	movs	r0, #71	; 0x47
 8003a62:	f017 fcea 	bl	801b43a <HAL_NVIC_EnableIRQ>
}
 8003a66:	bf00      	nop
 8003a68:	3738      	adds	r7, #56	; 0x38
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40011000 	.word	0x40011000
 8003a74:	40023800 	.word	0x40023800
 8003a78:	40020000 	.word	0x40020000
 8003a7c:	40004400 	.word	0x40004400
 8003a80:	40011400 	.word	0x40011400

08003a84 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a1d      	ldr	r2, [pc, #116]	; (8003b08 <HAL_UART_MspDeInit+0x84>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d10e      	bne.n	8003ab4 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003a96:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <HAL_UART_MspDeInit+0x88>)
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	4a1c      	ldr	r2, [pc, #112]	; (8003b0c <HAL_UART_MspDeInit+0x88>)
 8003a9c:	f023 0310 	bic.w	r3, r3, #16
 8003aa0:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003aa2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003aa6:	481a      	ldr	r0, [pc, #104]	; (8003b10 <HAL_UART_MspDeInit+0x8c>)
 8003aa8:	f018 fa90 	bl	801bfcc <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003aac:	2025      	movs	r0, #37	; 0x25
 8003aae:	f017 fcd2 	bl	801b456 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8003ab2:	e025      	b.n	8003b00 <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART2)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a16      	ldr	r2, [pc, #88]	; (8003b14 <HAL_UART_MspDeInit+0x90>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d10d      	bne.n	8003ada <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003abe:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <HAL_UART_MspDeInit+0x88>)
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	4a12      	ldr	r2, [pc, #72]	; (8003b0c <HAL_UART_MspDeInit+0x88>)
 8003ac4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ac8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8003aca:	210c      	movs	r1, #12
 8003acc:	4810      	ldr	r0, [pc, #64]	; (8003b10 <HAL_UART_MspDeInit+0x8c>)
 8003ace:	f018 fa7d 	bl	801bfcc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003ad2:	2026      	movs	r0, #38	; 0x26
 8003ad4:	f017 fcbf 	bl	801b456 <HAL_NVIC_DisableIRQ>
}
 8003ad8:	e012      	b.n	8003b00 <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART6)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a0e      	ldr	r2, [pc, #56]	; (8003b18 <HAL_UART_MspDeInit+0x94>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d10d      	bne.n	8003b00 <HAL_UART_MspDeInit+0x7c>
    __HAL_RCC_USART6_CLK_DISABLE();
 8003ae4:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <HAL_UART_MspDeInit+0x88>)
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae8:	4a08      	ldr	r2, [pc, #32]	; (8003b0c <HAL_UART_MspDeInit+0x88>)
 8003aea:	f023 0320 	bic.w	r3, r3, #32
 8003aee:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8003af0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003af4:	4806      	ldr	r0, [pc, #24]	; (8003b10 <HAL_UART_MspDeInit+0x8c>)
 8003af6:	f018 fa69 	bl	801bfcc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8003afa:	2047      	movs	r0, #71	; 0x47
 8003afc:	f017 fcab 	bl	801b456 <HAL_NVIC_DisableIRQ>
}
 8003b00:	bf00      	nop
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40011000 	.word	0x40011000
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	40020000 	.word	0x40020000
 8003b14:	40004400 	.word	0x40004400
 8003b18:	40011400 	.word	0x40011400

08003b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b20:	e7fe      	b.n	8003b20 <NMI_Handler+0x4>

08003b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b22:	b480      	push	{r7}
 8003b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b26:	e7fe      	b.n	8003b26 <HardFault_Handler+0x4>

08003b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b2c:	e7fe      	b.n	8003b2c <MemManage_Handler+0x4>

08003b2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b32:	e7fe      	b.n	8003b32 <BusFault_Handler+0x4>

08003b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b38:	e7fe      	b.n	8003b38 <UsageFault_Handler+0x4>

08003b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b3e:	bf00      	nop
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b56:	b480      	push	{r7}
 8003b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  pif_sigTimer1ms();
 8003b68:	f00d fbfa 	bl	8011360 <pif_sigTimer1ms>
  pifTimerManager_sigTick(&g_timer_1ms);
 8003b6c:	4803      	ldr	r0, [pc, #12]	; (8003b7c <SysTick_Handler+0x18>)
 8003b6e:	f011 f940 	bl	8014df2 <pifTimerManager_sigTick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b72:	f016 ff25 	bl	801a9c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b76:	bf00      	nop
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20001b64 	.word	0x20001b64

08003b80 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SONAR_ECHO_Pin);
 8003b84:	2002      	movs	r0, #2
 8003b86:	f018 fb1f 	bl	801c1c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003b94:	4802      	ldr	r0, [pc, #8]	; (8003ba0 <DMA1_Stream0_IRQHandler+0x10>)
 8003b96:	f017 fe11 	bl	801b7bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	200008e0 	.word	0x200008e0

08003ba4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003ba8:	4802      	ldr	r0, [pc, #8]	; (8003bb4 <DMA1_Stream1_IRQHandler+0x10>)
 8003baa:	f017 fe07 	bl	801b7bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000940 	.word	0x20000940

08003bb8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003bbc:	4802      	ldr	r0, [pc, #8]	; (8003bc8 <TIM3_IRQHandler+0x10>)
 8003bbe:	f01c f94b 	bl	801fe58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	200009e8 	.word	0x200009e8

08003bcc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003bd0:	4802      	ldr	r0, [pc, #8]	; (8003bdc <I2C1_EV_IRQHandler+0x10>)
 8003bd2:	f019 f9ad 	bl	801cf30 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	2000088c 	.word	0x2000088c

08003be0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003be4:	4802      	ldr	r0, [pc, #8]	; (8003bf0 <I2C1_ER_IRQHandler+0x10>)
 8003be6:	f019 fb14 	bl	801d212 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	2000088c 	.word	0x2000088c

08003bf4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003bf8:	4802      	ldr	r0, [pc, #8]	; (8003c04 <USART1_IRQHandler+0x10>)
 8003bfa:	f01d f945 	bl	8020e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003bfe:	bf00      	nop
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20000a30 	.word	0x20000a30

08003c08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c0c:	4802      	ldr	r0, [pc, #8]	; (8003c18 <USART2_IRQHandler+0x10>)
 8003c0e:	f01d f93b 	bl	8020e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000a74 	.word	0x20000a74

08003c1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RC_PPM_Pin);
 8003c20:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003c24:	f018 fad0 	bl	801c1c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003c28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003c2c:	f018 facc 	bl	801c1c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c30:	bf00      	nop
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c38:	4802      	ldr	r0, [pc, #8]	; (8003c44 <DMA2_Stream0_IRQHandler+0x10>)
 8003c3a:	f017 fdbf 	bl	801b7bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	2000082c 	.word	0x2000082c

08003c48 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003c4c:	4802      	ldr	r0, [pc, #8]	; (8003c58 <USART6_IRQHandler+0x10>)
 8003c4e:	f01d f91b 	bl	8020e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000ab8 	.word	0x20000ab8

08003c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c64:	4a14      	ldr	r2, [pc, #80]	; (8003cb8 <_sbrk+0x5c>)
 8003c66:	4b15      	ldr	r3, [pc, #84]	; (8003cbc <_sbrk+0x60>)
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c70:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <_sbrk+0x64>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d102      	bne.n	8003c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c78:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <_sbrk+0x64>)
 8003c7a:	4a12      	ldr	r2, [pc, #72]	; (8003cc4 <_sbrk+0x68>)
 8003c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c7e:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <_sbrk+0x64>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4413      	add	r3, r2
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d207      	bcs.n	8003c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c8c:	f01e f862 	bl	8021d54 <__errno>
 8003c90:	4603      	mov	r3, r0
 8003c92:	220c      	movs	r2, #12
 8003c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c9a:	e009      	b.n	8003cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c9c:	4b08      	ldr	r3, [pc, #32]	; (8003cc0 <_sbrk+0x64>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ca2:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <_sbrk+0x64>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4413      	add	r3, r2
 8003caa:	4a05      	ldr	r2, [pc, #20]	; (8003cc0 <_sbrk+0x64>)
 8003cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cae:	68fb      	ldr	r3, [r7, #12]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20020000 	.word	0x20020000
 8003cbc:	00000400 	.word	0x00000400
 8003cc0:	20000b28 	.word	0x20000b28
 8003cc4:	20002280 	.word	0x20002280

08003cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <SystemInit+0x20>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd2:	4a05      	ldr	r2, [pc, #20]	; (8003ce8 <SystemInit+0x20>)
 8003cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cdc:	bf00      	nop
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <constrain>:

static bool standardBoardAlignment = true;     // board orientation correction
static float boardRotation[3][3];              // matrix

int constrain(int amt, int low, int high)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	da01      	bge.n	8003d04 <constrain+0x18>
        return low;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	e006      	b.n	8003d12 <constrain+0x26>
    else if (amt > high)
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	dd01      	ble.n	8003d10 <constrain+0x24>
        return high;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	e000      	b.n	8003d12 <constrain+0x26>
    else
        return amt;
 8003d10:	68fb      	ldr	r3, [r7, #12]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <initBoardAlignment>:

void initBoardAlignment(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08e      	sub	sp, #56	; 0x38
 8003d24:	af00      	add	r7, sp, #0
    float roll, pitch, yaw;
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, coszcosy, sinzcosx, coszsinx, sinzsinx;

    // standard alignment, nothing to calculate
    if (!mcfg.board_align_roll && !mcfg.board_align_pitch && !mcfg.board_align_yaw)
 8003d26:	4b8a      	ldr	r3, [pc, #552]	; (8003f50 <initBoardAlignment+0x230>)
 8003d28:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10a      	bne.n	8003d46 <initBoardAlignment+0x26>
 8003d30:	4b87      	ldr	r3, [pc, #540]	; (8003f50 <initBoardAlignment+0x230>)
 8003d32:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d105      	bne.n	8003d46 <initBoardAlignment+0x26>
 8003d3a:	4b85      	ldr	r3, [pc, #532]	; (8003f50 <initBoardAlignment+0x230>)
 8003d3c:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80fd 	beq.w	8003f40 <initBoardAlignment+0x220>
        return;

    standardBoardAlignment = false;
 8003d46:	4b83      	ldr	r3, [pc, #524]	; (8003f54 <initBoardAlignment+0x234>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	701a      	strb	r2, [r3, #0]

    // deg2rad
    roll = mcfg.board_align_roll * M_PI / 180.0f;
 8003d4c:	4b80      	ldr	r3, [pc, #512]	; (8003f50 <initBoardAlignment+0x230>)
 8003d4e:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fc fba4 	bl	80004a0 <__aeabi_i2d>
 8003d58:	a37b      	add	r3, pc, #492	; (adr r3, 8003f48 <initBoardAlignment+0x228>)
 8003d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5e:	f7fc fc09 	bl	8000574 <__aeabi_dmul>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4610      	mov	r0, r2
 8003d68:	4619      	mov	r1, r3
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	4b7a      	ldr	r3, [pc, #488]	; (8003f58 <initBoardAlignment+0x238>)
 8003d70:	f7fc fd2a 	bl	80007c8 <__aeabi_ddiv>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4610      	mov	r0, r2
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	f7fc fedc 	bl	8000b38 <__aeabi_d2f>
 8003d80:	4603      	mov	r3, r0
 8003d82:	637b      	str	r3, [r7, #52]	; 0x34
    pitch = mcfg.board_align_pitch * M_PI / 180.0f;
 8003d84:	4b72      	ldr	r3, [pc, #456]	; (8003f50 <initBoardAlignment+0x230>)
 8003d86:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fc fb88 	bl	80004a0 <__aeabi_i2d>
 8003d90:	a36d      	add	r3, pc, #436	; (adr r3, 8003f48 <initBoardAlignment+0x228>)
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	f7fc fbed 	bl	8000574 <__aeabi_dmul>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4610      	mov	r0, r2
 8003da0:	4619      	mov	r1, r3
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	4b6c      	ldr	r3, [pc, #432]	; (8003f58 <initBoardAlignment+0x238>)
 8003da8:	f7fc fd0e 	bl	80007c8 <__aeabi_ddiv>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4610      	mov	r0, r2
 8003db2:	4619      	mov	r1, r3
 8003db4:	f7fc fec0 	bl	8000b38 <__aeabi_d2f>
 8003db8:	4603      	mov	r3, r0
 8003dba:	633b      	str	r3, [r7, #48]	; 0x30
    yaw = mcfg.board_align_yaw * M_PI / 180.0f;
 8003dbc:	4b64      	ldr	r3, [pc, #400]	; (8003f50 <initBoardAlignment+0x230>)
 8003dbe:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fc fb6c 	bl	80004a0 <__aeabi_i2d>
 8003dc8:	a35f      	add	r3, pc, #380	; (adr r3, 8003f48 <initBoardAlignment+0x228>)
 8003dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dce:	f7fc fbd1 	bl	8000574 <__aeabi_dmul>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	4619      	mov	r1, r3
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	4b5e      	ldr	r3, [pc, #376]	; (8003f58 <initBoardAlignment+0x238>)
 8003de0:	f7fc fcf2 	bl	80007c8 <__aeabi_ddiv>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4610      	mov	r0, r2
 8003dea:	4619      	mov	r1, r3
 8003dec:	f7fc fea4 	bl	8000b38 <__aeabi_d2f>
 8003df0:	4603      	mov	r3, r0
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c

    cosx = cosf(roll);
 8003df4:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003df8:	f01e fad2 	bl	80223a0 <cosf>
 8003dfc:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    sinx = sinf(roll);
 8003e00:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003e04:	f01e fb50 	bl	80224a8 <sinf>
 8003e08:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    cosy = cosf(pitch);
 8003e0c:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003e10:	f01e fac6 	bl	80223a0 <cosf>
 8003e14:	ed87 0a08 	vstr	s0, [r7, #32]
    siny = sinf(pitch);
 8003e18:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003e1c:	f01e fb44 	bl	80224a8 <sinf>
 8003e20:	ed87 0a07 	vstr	s0, [r7, #28]
    cosz = cosf(yaw);
 8003e24:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003e28:	f01e faba 	bl	80223a0 <cosf>
 8003e2c:	ed87 0a06 	vstr	s0, [r7, #24]
    sinz = sinf(yaw);
 8003e30:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003e34:	f01e fb38 	bl	80224a8 <sinf>
 8003e38:	ed87 0a05 	vstr	s0, [r7, #20]

    coszcosx = cosz * cosx;
 8003e3c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003e40:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e48:	edc7 7a04 	vstr	s15, [r7, #16]
    coszcosy = cosz * cosy;
 8003e4c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003e50:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e58:	edc7 7a03 	vstr	s15, [r7, #12]
    sinzcosx = sinz * cosx;
 8003e5c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e68:	edc7 7a02 	vstr	s15, [r7, #8]
    coszsinx = sinx * cosz;
 8003e6c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003e70:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e78:	edc7 7a01 	vstr	s15, [r7, #4]
    sinzsinx = sinx * sinz;
 8003e7c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003e80:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e88:	edc7 7a00 	vstr	s15, [r7]

    // define rotation matrix
    boardRotation[0][0] = coszcosy;
 8003e8c:	4a33      	ldr	r2, [pc, #204]	; (8003f5c <initBoardAlignment+0x23c>)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6013      	str	r3, [r2, #0]
    boardRotation[0][1] = -cosy * sinz;
 8003e92:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e96:	eeb1 7a67 	vneg.f32	s14, s15
 8003e9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ea2:	4b2e      	ldr	r3, [pc, #184]	; (8003f5c <initBoardAlignment+0x23c>)
 8003ea4:	edc3 7a01 	vstr	s15, [r3, #4]
    boardRotation[0][2] = siny;
 8003ea8:	4a2c      	ldr	r2, [pc, #176]	; (8003f5c <initBoardAlignment+0x23c>)
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	6093      	str	r3, [r2, #8]

    boardRotation[1][0] = sinzcosx + (coszsinx * siny);
 8003eae:	ed97 7a01 	vldr	s14, [r7, #4]
 8003eb2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003eb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003eba:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ec2:	4b26      	ldr	r3, [pc, #152]	; (8003f5c <initBoardAlignment+0x23c>)
 8003ec4:	edc3 7a03 	vstr	s15, [r3, #12]
    boardRotation[1][1] = coszcosx - (sinzsinx * siny);
 8003ec8:	ed97 7a00 	vldr	s14, [r7]
 8003ecc:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed4:	ed97 7a04 	vldr	s14, [r7, #16]
 8003ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003edc:	4b1f      	ldr	r3, [pc, #124]	; (8003f5c <initBoardAlignment+0x23c>)
 8003ede:	edc3 7a04 	vstr	s15, [r3, #16]
    boardRotation[1][2] = -sinx * cosy;
 8003ee2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ee6:	eeb1 7a67 	vneg.f32	s14, s15
 8003eea:	edd7 7a08 	vldr	s15, [r7, #32]
 8003eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef2:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <initBoardAlignment+0x23c>)
 8003ef4:	edc3 7a05 	vstr	s15, [r3, #20]

    boardRotation[2][0] = (sinzsinx) - (coszcosx * siny);
 8003ef8:	ed97 7a04 	vldr	s14, [r7, #16]
 8003efc:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f04:	ed97 7a00 	vldr	s14, [r7]
 8003f08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f0c:	4b13      	ldr	r3, [pc, #76]	; (8003f5c <initBoardAlignment+0x23c>)
 8003f0e:	edc3 7a06 	vstr	s15, [r3, #24]
    boardRotation[2][1] = (coszsinx) + (sinzcosx * siny);
 8003f12:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f16:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f26:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <initBoardAlignment+0x23c>)
 8003f28:	edc3 7a07 	vstr	s15, [r3, #28]
    boardRotation[2][2] = cosy * cosx;
 8003f2c:	ed97 7a08 	vldr	s14, [r7, #32]
 8003f30:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f38:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <initBoardAlignment+0x23c>)
 8003f3a:	edc3 7a08 	vstr	s15, [r3, #32]
 8003f3e:	e000      	b.n	8003f42 <initBoardAlignment+0x222>
        return;
 8003f40:	bf00      	nop
}
 8003f42:	3738      	adds	r7, #56	; 0x38
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	54442d18 	.word	0x54442d18
 8003f4c:	400921fb 	.word	0x400921fb
 8003f50:	20000bbc 	.word	0x20000bbc
 8003f54:	20000024 	.word	0x20000024
 8003f58:	40668000 	.word	0x40668000
 8003f5c:	20000b2c 	.word	0x20000b2c

08003f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f64:	480d      	ldr	r0, [pc, #52]	; (8003f9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f66:	490e      	ldr	r1, [pc, #56]	; (8003fa0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f68:	4a0e      	ldr	r2, [pc, #56]	; (8003fa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f6c:	e002      	b.n	8003f74 <LoopCopyDataInit>

08003f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f72:	3304      	adds	r3, #4

08003f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f78:	d3f9      	bcc.n	8003f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f7a:	4a0b      	ldr	r2, [pc, #44]	; (8003fa8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f7c:	4c0b      	ldr	r4, [pc, #44]	; (8003fac <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f80:	e001      	b.n	8003f86 <LoopFillZerobss>

08003f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f84:	3204      	adds	r2, #4

08003f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f88:	d3fb      	bcc.n	8003f82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f8a:	f7ff fe9d 	bl	8003cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f8e:	f01d fee7 	bl	8021d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f92:	f7fe fbdb 	bl	800274c <main>
  bx  lr    
 8003f96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fa0:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8003fa4:	08028940 	.word	0x08028940
  ldr r2, =_sbss
 8003fa8:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8003fac:	2000227c 	.word	0x2000227c

08003fb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fb0:	e7fe      	b.n	8003fb0 <ADC_IRQHandler>
	...

08003fb4 <_evtBuzzerFinish>:
static uint8_t readyBeepDone = 0;

PifBuzzer s_buzzer;

static void _evtBuzzerFinish(PifId id)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	4603      	mov	r3, r0
 8003fbc:	80fb      	strh	r3, [r7, #6]
	(void)id;

    buzzerMode = BUZZER_STOPPED;
 8003fbe:	4b04      	ldr	r3, [pc, #16]	; (8003fd0 <_evtBuzzerFinish+0x1c>)
 8003fc0:	220d      	movs	r2, #13
 8003fc2:	701a      	strb	r2, [r3, #0]
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	20000025 	.word	0x20000025

08003fd4 <buzzerInit>:

bool buzzerInit()
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
    if (!pifBuzzer_Init(&s_buzzer, PIF_ID_BUZZER, actBuzzerAction)) return false;
 8003fd8:	4a08      	ldr	r2, [pc, #32]	; (8003ffc <buzzerInit+0x28>)
 8003fda:	f44f 7198 	mov.w	r1, #304	; 0x130
 8003fde:	4808      	ldr	r0, [pc, #32]	; (8004000 <buzzerInit+0x2c>)
 8003fe0:	f015 fd60 	bl	8019aa4 <pifBuzzer_Init>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <buzzerInit+0x1a>
 8003fea:	2300      	movs	r3, #0
 8003fec:	e003      	b.n	8003ff6 <buzzerInit+0x22>
    s_buzzer.evt_finish = _evtBuzzerFinish;
 8003fee:	4b04      	ldr	r3, [pc, #16]	; (8004000 <buzzerInit+0x2c>)
 8003ff0:	4a04      	ldr	r2, [pc, #16]	; (8004004 <buzzerInit+0x30>)
 8003ff2:	601a      	str	r2, [r3, #0]
    return true;
 8003ff4:	2301      	movs	r3, #1
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	080020cd 	.word	0x080020cd
 8004000:	20000b68 	.word	0x20000b68
 8004004:	08003fb5 	.word	0x08003fb5

08004008 <buzzer>:

/* Buzzer -function is used to activate/deactive buzzer.
 * Parameter defines the used sequence.
 */
void buzzer(uint8_t mode)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	71fb      	strb	r3, [r7, #7]
#ifdef GPS
    uint8_t i = 0;
 8004012:	2300      	movs	r3, #0
 8004014:	73fb      	strb	r3, [r7, #15]
#endif

    // Just return if same or higher priority sound is active.
    if (buzzerMode <= mode)
 8004016:	4b62      	ldr	r3, [pc, #392]	; (80041a0 <buzzer+0x198>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	79fa      	ldrb	r2, [r7, #7]
 800401c:	429a      	cmp	r2, r3
 800401e:	f080 80b7 	bcs.w	8004190 <buzzer+0x188>
        return;

    switch (mode) {
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	2b0c      	cmp	r3, #12
 8004026:	f200 80b5 	bhi.w	8004194 <buzzer+0x18c>
 800402a:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <buzzer+0x28>)
 800402c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004030:	08004065 	.word	0x08004065
 8004034:	080040e3 	.word	0x080040e3
 8004038:	080040d3 	.word	0x080040d3
 800403c:	080040c3 	.word	0x080040c3
 8004040:	080040f3 	.word	0x080040f3
 8004044:	08004093 	.word	0x08004093
 8004048:	08004093 	.word	0x08004093
 800404c:	08004103 	.word	0x08004103
 8004050:	08004113 	.word	0x08004113
 8004054:	080040f3 	.word	0x080040f3
 8004058:	080040a3 	.word	0x080040a3
 800405c:	080040b3 	.word	0x080040b3
 8004060:	08004073 	.word	0x08004073
        case BUZZER_STOP:
            buzzerMode = BUZZER_STOPPED;
 8004064:	4b4e      	ldr	r3, [pc, #312]	; (80041a0 <buzzer+0x198>)
 8004066:	220d      	movs	r2, #13
 8004068:	701a      	strb	r2, [r3, #0]
            pifBuzzer_Stop(&s_buzzer);
 800406a:	484e      	ldr	r0, [pc, #312]	; (80041a4 <buzzer+0x19c>)
 800406c:	f015 fd80 	bl	8019b70 <pifBuzzer_Stop>
            break;
 8004070:	e093      	b.n	800419a <buzzer+0x192>
        case BUZZER_READY_BEEP:
            if (readyBeepDone)
 8004072:	4b4d      	ldr	r3, [pc, #308]	; (80041a8 <buzzer+0x1a0>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	f040 808e 	bne.w	8004198 <buzzer+0x190>
                return;
            pifBuzzer_Start(&s_buzzer, buzz_readyBeep);
 800407c:	494b      	ldr	r1, [pc, #300]	; (80041ac <buzzer+0x1a4>)
 800407e:	4849      	ldr	r0, [pc, #292]	; (80041a4 <buzzer+0x19c>)
 8004080:	f015 fd54 	bl	8019b2c <pifBuzzer_Start>
            buzzerMode = mode;
 8004084:	4a46      	ldr	r2, [pc, #280]	; (80041a0 <buzzer+0x198>)
 8004086:	79fb      	ldrb	r3, [r7, #7]
 8004088:	7013      	strb	r3, [r2, #0]
            readyBeepDone = 1;
 800408a:	4b47      	ldr	r3, [pc, #284]	; (80041a8 <buzzer+0x1a0>)
 800408c:	2201      	movs	r2, #1
 800408e:	701a      	strb	r2, [r3, #0]
            break;
 8004090:	e083      	b.n	800419a <buzzer+0x192>
        case BUZZER_ARMING:
        case BUZZER_DISARMING:
            pifBuzzer_Start(&s_buzzer, buzz_mediumBeepFast);
 8004092:	4947      	ldr	r1, [pc, #284]	; (80041b0 <buzzer+0x1a8>)
 8004094:	4843      	ldr	r0, [pc, #268]	; (80041a4 <buzzer+0x19c>)
 8004096:	f015 fd49 	bl	8019b2c <pifBuzzer_Start>
            buzzerMode = mode;
 800409a:	4a41      	ldr	r2, [pc, #260]	; (80041a0 <buzzer+0x198>)
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	7013      	strb	r3, [r2, #0]
            break;
 80040a0:	e07b      	b.n	800419a <buzzer+0x192>
        case BUZZER_ACC_CALIBRATION:
            pifBuzzer_Start(&s_buzzer, buzz_2shortBeeps);
 80040a2:	4944      	ldr	r1, [pc, #272]	; (80041b4 <buzzer+0x1ac>)
 80040a4:	483f      	ldr	r0, [pc, #252]	; (80041a4 <buzzer+0x19c>)
 80040a6:	f015 fd41 	bl	8019b2c <pifBuzzer_Start>
            buzzerMode = mode;
 80040aa:	4a3d      	ldr	r2, [pc, #244]	; (80041a0 <buzzer+0x198>)
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	7013      	strb	r3, [r2, #0]
            break;
 80040b0:	e073      	b.n	800419a <buzzer+0x192>
        case BUZZER_ACC_CALIBRATION_FAIL:
            pifBuzzer_Start(&s_buzzer, buzz_3shortBeeps);
 80040b2:	4941      	ldr	r1, [pc, #260]	; (80041b8 <buzzer+0x1b0>)
 80040b4:	483b      	ldr	r0, [pc, #236]	; (80041a4 <buzzer+0x19c>)
 80040b6:	f015 fd39 	bl	8019b2c <pifBuzzer_Start>
            buzzerMode = mode;
 80040ba:	4a39      	ldr	r2, [pc, #228]	; (80041a0 <buzzer+0x198>)
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	7013      	strb	r3, [r2, #0]
            break;
 80040c0:	e06b      	b.n	800419a <buzzer+0x192>
        case BUZZER_TX_LOST_ARMED:
            pifBuzzer_Start(&s_buzzer, buzz_sos);
 80040c2:	493e      	ldr	r1, [pc, #248]	; (80041bc <buzzer+0x1b4>)
 80040c4:	4837      	ldr	r0, [pc, #220]	; (80041a4 <buzzer+0x19c>)
 80040c6:	f015 fd31 	bl	8019b2c <pifBuzzer_Start>
            buzzerMode = mode;
 80040ca:	4a35      	ldr	r2, [pc, #212]	; (80041a0 <buzzer+0x198>)
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	7013      	strb	r3, [r2, #0]
            break;
 80040d0:	e063      	b.n	800419a <buzzer+0x192>
        case BUZZER_BAT_LOW:
            pifBuzzer_Start(&s_buzzer, buzz_longBeep);
 80040d2:	493b      	ldr	r1, [pc, #236]	; (80041c0 <buzzer+0x1b8>)
 80040d4:	4833      	ldr	r0, [pc, #204]	; (80041a4 <buzzer+0x19c>)
 80040d6:	f015 fd29 	bl	8019b2c <pifBuzzer_Start>
            buzzerMode = mode;
 80040da:	4a31      	ldr	r2, [pc, #196]	; (80041a0 <buzzer+0x198>)
 80040dc:	79fb      	ldrb	r3, [r7, #7]
 80040de:	7013      	strb	r3, [r2, #0]
            break;
 80040e0:	e05b      	b.n	800419a <buzzer+0x192>
        case BUZZER_BAT_CRIT_LOW:
            pifBuzzer_Start(&s_buzzer, buzz_BatteryBeep);
 80040e2:	4938      	ldr	r1, [pc, #224]	; (80041c4 <buzzer+0x1bc>)
 80040e4:	482f      	ldr	r0, [pc, #188]	; (80041a4 <buzzer+0x19c>)
 80040e6:	f015 fd21 	bl	8019b2c <pifBuzzer_Start>
            buzzerMode = mode;
 80040ea:	4a2d      	ldr	r2, [pc, #180]	; (80041a0 <buzzer+0x198>)
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	7013      	strb	r3, [r2, #0]
            break;
 80040f0:	e053      	b.n	800419a <buzzer+0x192>
        case BUZZER_ARMED:
        case BUZZER_TX_LOST:
            pifBuzzer_Start(&s_buzzer, buzz_mediumBeep);
 80040f2:	4935      	ldr	r1, [pc, #212]	; (80041c8 <buzzer+0x1c0>)
 80040f4:	482b      	ldr	r0, [pc, #172]	; (80041a4 <buzzer+0x19c>)
 80040f6:	f015 fd19 	bl	8019b2c <pifBuzzer_Start>
            buzzerMode = mode;
 80040fa:	4a29      	ldr	r2, [pc, #164]	; (80041a0 <buzzer+0x198>)
 80040fc:	79fb      	ldrb	r3, [r7, #7]
 80040fe:	7013      	strb	r3, [r2, #0]
            break;
 8004100:	e04b      	b.n	800419a <buzzer+0x192>
        case BUZZER_ARMING_GPS_FIX:
            pifBuzzer_Start(&s_buzzer, buzz_armed);
 8004102:	4932      	ldr	r1, [pc, #200]	; (80041cc <buzzer+0x1c4>)
 8004104:	4827      	ldr	r0, [pc, #156]	; (80041a4 <buzzer+0x19c>)
 8004106:	f015 fd11 	bl	8019b2c <pifBuzzer_Start>
            buzzerMode = mode;
 800410a:	4a25      	ldr	r2, [pc, #148]	; (80041a0 <buzzer+0x198>)
 800410c:	79fb      	ldrb	r3, [r7, #7]
 800410e:	7013      	strb	r3, [r2, #0]
            break;
 8004110:	e043      	b.n	800419a <buzzer+0x192>
        case BUZZER_TX_SET:
#ifdef GPS
            if (feature(FEATURE_GPS) && f.GPS_FIX && GPS_numSat >= 5) {
 8004112:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004116:	f002 ff67 	bl	8006fe8 <feature>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d02f      	beq.n	8004180 <buzzer+0x178>
 8004120:	4b2b      	ldr	r3, [pc, #172]	; (80041d0 <buzzer+0x1c8>)
 8004122:	7adb      	ldrb	r3, [r3, #11]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d02b      	beq.n	8004180 <buzzer+0x178>
 8004128:	4b2a      	ldr	r3, [pc, #168]	; (80041d4 <buzzer+0x1cc>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b04      	cmp	r3, #4
 800412e:	d927      	bls.n	8004180 <buzzer+0x178>
                do {
                    buzz_countSats[i] = 5;
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	4a29      	ldr	r2, [pc, #164]	; (80041d8 <buzzer+0x1d0>)
 8004134:	2105      	movs	r1, #5
 8004136:	54d1      	strb	r1, [r2, r3]
                    buzz_countSats[i + 1] = 15;
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	3301      	adds	r3, #1
 800413c:	4a26      	ldr	r2, [pc, #152]	; (80041d8 <buzzer+0x1d0>)
 800413e:	210f      	movs	r1, #15
 8004140:	54d1      	strb	r1, [r2, r3]
                    i += 2;
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	3302      	adds	r3, #2
 8004146:	73fb      	strb	r3, [r7, #15]
                } while (i < 20 && GPS_numSat > i / 2);
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b13      	cmp	r3, #19
 800414c:	d806      	bhi.n	800415c <buzzer+0x154>
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	085b      	lsrs	r3, r3, #1
 8004152:	b2da      	uxtb	r2, r3
 8004154:	4b1f      	ldr	r3, [pc, #124]	; (80041d4 <buzzer+0x1cc>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d3e9      	bcc.n	8004130 <buzzer+0x128>
                buzz_countSats[i + 1] = 100;
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	3301      	adds	r3, #1
 8004160:	4a1d      	ldr	r2, [pc, #116]	; (80041d8 <buzzer+0x1d0>)
 8004162:	2164      	movs	r1, #100	; 0x64
 8004164:	54d1      	strb	r1, [r2, r3]
                buzz_countSats[i + 2] = 0xF0;
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	3302      	adds	r3, #2
 800416a:	4a1b      	ldr	r2, [pc, #108]	; (80041d8 <buzzer+0x1d0>)
 800416c:	21f0      	movs	r1, #240	; 0xf0
 800416e:	54d1      	strb	r1, [r2, r3]
                pifBuzzer_Start(&s_buzzer, buzz_countSats);
 8004170:	4919      	ldr	r1, [pc, #100]	; (80041d8 <buzzer+0x1d0>)
 8004172:	480c      	ldr	r0, [pc, #48]	; (80041a4 <buzzer+0x19c>)
 8004174:	f015 fcda 	bl	8019b2c <pifBuzzer_Start>
                buzzerMode = mode;
 8004178:	4a09      	ldr	r2, [pc, #36]	; (80041a0 <buzzer+0x198>)
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	7013      	strb	r3, [r2, #0]
                break;
 800417e:	e00c      	b.n	800419a <buzzer+0x192>
            }
#endif
            pifBuzzer_Start(&s_buzzer, buzz_shortBeep);
 8004180:	4916      	ldr	r1, [pc, #88]	; (80041dc <buzzer+0x1d4>)
 8004182:	4808      	ldr	r0, [pc, #32]	; (80041a4 <buzzer+0x19c>)
 8004184:	f015 fcd2 	bl	8019b2c <pifBuzzer_Start>
            buzzerMode = mode;
 8004188:	4a05      	ldr	r2, [pc, #20]	; (80041a0 <buzzer+0x198>)
 800418a:	79fb      	ldrb	r3, [r7, #7]
 800418c:	7013      	strb	r3, [r2, #0]
            break;
 800418e:	e004      	b.n	800419a <buzzer+0x192>
        return;
 8004190:	bf00      	nop
 8004192:	e002      	b.n	800419a <buzzer+0x192>

        default:
            return;
 8004194:	bf00      	nop
 8004196:	e000      	b.n	800419a <buzzer+0x192>
                return;
 8004198:	bf00      	nop
    }
}
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20000025 	.word	0x20000025
 80041a4:	20000b68 	.word	0x20000b68
 80041a8:	20000b66 	.word	0x20000b66
 80041ac:	08026b94 	.word	0x08026b94
 80041b0:	08026b68 	.word	0x08026b68
 80041b4:	08026ba4 	.word	0x08026ba4
 80041b8:	08026bac 	.word	0x08026bac
 80041bc:	08026b74 	.word	0x08026b74
 80041c0:	08026b70 	.word	0x08026b70
 80041c4:	08026b64 	.word	0x08026b64
 80041c8:	08026b6c 	.word	0x08026b6c
 80041cc:	08026b88 	.word	0x08026b88
 80041d0:	20001988 	.word	0x20001988
 80041d4:	20001a70 	.word	0x20001a70
 80041d8:	20000b50 	.word	0x20000b50
 80041dc:	08026b60 	.word	0x08026b60

080041e0 <buzzerUpdate>:

/* buzzerUpdate -function is used in loop. It will update buzzer state
 * when the time is correct.
 */
void buzzerUpdate(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
    // If beeper option from AUX switch has been selected
    if (rcOptions[BOXBEEPERON]) {
 80041e4:	4b06      	ldr	r3, [pc, #24]	; (8004200 <buzzerUpdate+0x20>)
 80041e6:	7b5b      	ldrb	r3, [r3, #13]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d006      	beq.n	80041fa <buzzerUpdate+0x1a>
        if (buzzerMode > BUZZER_TX_SET)
 80041ec:	4b05      	ldr	r3, [pc, #20]	; (8004204 <buzzerUpdate+0x24>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d902      	bls.n	80041fa <buzzerUpdate+0x1a>
            buzzer(BUZZER_TX_SET);
 80041f4:	2008      	movs	r0, #8
 80041f6:	f7ff ff07 	bl	8004008 <buzzer>
    }
}
 80041fa:	bf00      	nop
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	20001a2c 	.word	0x20001a2c
 8004204:	20000025 	.word	0x20000025

08004208 <i2a>:
**           range errors on the radix default it to base10
** Code from http://groups.google.com/group/comp.lang.c/msg/66552ef8b04fe1ab?pli=1
*/

static char *i2a(unsigned i, char *a, unsigned r)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
    if (i / r > 0)
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	429a      	cmp	r2, r3
 800421a:	d309      	bcc.n	8004230 <i2a+0x28>
        a = i2a(i / r, a, r);
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	fbb2 f3f3 	udiv	r3, r2, r3
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff ffed 	bl	8004208 <i2a>
 800422e:	60b8      	str	r0, [r7, #8]
    *a = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[i % r];
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	fbb3 f2f2 	udiv	r2, r3, r2
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	fb01 f202 	mul.w	r2, r1, r2
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	4a04      	ldr	r2, [pc, #16]	; (8004254 <i2a+0x4c>)
 8004242:	5cd2      	ldrb	r2, [r2, r3]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	701a      	strb	r2, [r3, #0]
    return a + 1;
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	3301      	adds	r3, #1
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	0802590c 	.word	0x0802590c

08004258 <itoa>:

char *itoa(int i, char *a, int r)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
    if ((r < 2) || (r > 36))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b01      	cmp	r3, #1
 8004268:	dd02      	ble.n	8004270 <itoa+0x18>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b24      	cmp	r3, #36	; 0x24
 800426e:	dd01      	ble.n	8004274 <itoa+0x1c>
        r = 10;
 8004270:	230a      	movs	r3, #10
 8004272:	607b      	str	r3, [r7, #4]
    if (i < 0) {
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	da0e      	bge.n	8004298 <itoa+0x40>
        *a = '-';
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	222d      	movs	r2, #45	; 0x2d
 800427e:	701a      	strb	r2, [r3, #0]
        *i2a(-(unsigned)i, a + 1, r) = 0;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4258      	negs	r0, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	3301      	adds	r3, #1
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	4619      	mov	r1, r3
 800428c:	f7ff ffbc 	bl	8004208 <i2a>
 8004290:	4603      	mov	r3, r0
 8004292:	2200      	movs	r2, #0
 8004294:	701a      	strb	r2, [r3, #0]
 8004296:	e008      	b.n	80042aa <itoa+0x52>
    } else
        *i2a(i, a, r) = 0;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68b9      	ldr	r1, [r7, #8]
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff ffb2 	bl	8004208 <i2a>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2200      	movs	r2, #0
 80042a8:	701a      	strb	r2, [r3, #0]
    return a;
 80042aa:	68bb      	ldr	r3, [r7, #8]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <_atof>:
// 09-May-2009 Tom Van Baak (tvb) www.LeapSecond.com
//
#define white_space(c) ((c) == ' ' || (c) == '\t')
#define valid_digit(c) ((c) >= '0' && (c) <= '9')
static float _atof(const char *p)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b089      	sub	sp, #36	; 0x24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
    int frac = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	61fb      	str	r3, [r7, #28]
    float sign, value, scale;

    // Skip leading white space, if any.
    while (white_space(*p)) {
 80042c0:	e002      	b.n	80042c8 <_atof+0x14>
        p += 1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3301      	adds	r3, #1
 80042c6:	607b      	str	r3, [r7, #4]
    while (white_space(*p)) {
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	d0f8      	beq.n	80042c2 <_atof+0xe>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b09      	cmp	r3, #9
 80042d6:	d0f4      	beq.n	80042c2 <_atof+0xe>
    }

    // Get sign, if any.
    sign = 1.0f;
 80042d8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80042dc:	61bb      	str	r3, [r7, #24]
    if (*p == '-') {
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b2d      	cmp	r3, #45	; 0x2d
 80042e4:	d105      	bne.n	80042f2 <_atof+0x3e>
        sign = -1.0f;
 80042e6:	4b6a      	ldr	r3, [pc, #424]	; (8004490 <_atof+0x1dc>)
 80042e8:	61bb      	str	r3, [r7, #24]
        p += 1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3301      	adds	r3, #1
 80042ee:	607b      	str	r3, [r7, #4]
 80042f0:	e006      	b.n	8004300 <_atof+0x4c>

    } else if (*p == '+') {
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b2b      	cmp	r3, #43	; 0x2b
 80042f8:	d102      	bne.n	8004300 <_atof+0x4c>
        p += 1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3301      	adds	r3, #1
 80042fe:	607b      	str	r3, [r7, #4]
    }

    // Get digits before decimal point or exponent, if any.
    value = 0.0f;
 8004300:	f04f 0300 	mov.w	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
    while (valid_digit(*p)) {
 8004306:	e013      	b.n	8004330 <_atof+0x7c>
        value = value * 10.0f + (*p - '0');
 8004308:	edd7 7a05 	vldr	s15, [r7, #20]
 800430c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004310:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	3b30      	subs	r3, #48	; 0x30
 800431a:	ee07 3a90 	vmov	s15, r3
 800431e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004326:	edc7 7a05 	vstr	s15, [r7, #20]
        p += 1;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3301      	adds	r3, #1
 800432e:	607b      	str	r3, [r7, #4]
    while (valid_digit(*p)) {
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b2f      	cmp	r3, #47	; 0x2f
 8004336:	d903      	bls.n	8004340 <_atof+0x8c>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b39      	cmp	r3, #57	; 0x39
 800433e:	d9e3      	bls.n	8004308 <_atof+0x54>
    }

    // Get digits after decimal point, if any.
    if (*p == '.') {
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b2e      	cmp	r3, #46	; 0x2e
 8004346:	d129      	bne.n	800439c <_atof+0xe8>
        float pow10 = 10.0f;
 8004348:	4b52      	ldr	r3, [pc, #328]	; (8004494 <_atof+0x1e0>)
 800434a:	60fb      	str	r3, [r7, #12]
        p += 1;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3301      	adds	r3, #1
 8004350:	607b      	str	r3, [r7, #4]

        while (valid_digit(*p)) {
 8004352:	e01b      	b.n	800438c <_atof+0xd8>
            value += (*p - '0') / pow10;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	3b30      	subs	r3, #48	; 0x30
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004362:	ed97 7a03 	vldr	s14, [r7, #12]
 8004366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800436a:	ed97 7a05 	vldr	s14, [r7, #20]
 800436e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004372:	edc7 7a05 	vstr	s15, [r7, #20]
            pow10 *= 10.0f;
 8004376:	edd7 7a03 	vldr	s15, [r7, #12]
 800437a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800437e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004382:	edc7 7a03 	vstr	s15, [r7, #12]
            p += 1;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3301      	adds	r3, #1
 800438a:	607b      	str	r3, [r7, #4]
        while (valid_digit(*p)) {
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	2b2f      	cmp	r3, #47	; 0x2f
 8004392:	d903      	bls.n	800439c <_atof+0xe8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b39      	cmp	r3, #57	; 0x39
 800439a:	d9db      	bls.n	8004354 <_atof+0xa0>
        }
    }

    // Handle exponent, if any.
    scale = 1.0f;
 800439c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80043a0:	613b      	str	r3, [r7, #16]
    if ((*p == 'e') || (*p == 'E')) {
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b65      	cmp	r3, #101	; 0x65
 80043a8:	d003      	beq.n	80043b2 <_atof+0xfe>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b45      	cmp	r3, #69	; 0x45
 80043b0:	d153      	bne.n	800445a <_atof+0x1a6>
        unsigned int expon;
        p += 1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3301      	adds	r3, #1
 80043b6:	607b      	str	r3, [r7, #4]

        // Get sign of exponent, if any.
        frac = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61fb      	str	r3, [r7, #28]
        if (*p == '-') {
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b2d      	cmp	r3, #45	; 0x2d
 80043c2:	d105      	bne.n	80043d0 <_atof+0x11c>
            frac = 1;
 80043c4:	2301      	movs	r3, #1
 80043c6:	61fb      	str	r3, [r7, #28]
            p += 1;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3301      	adds	r3, #1
 80043cc:	607b      	str	r3, [r7, #4]
 80043ce:	e006      	b.n	80043de <_atof+0x12a>

        } else if (*p == '+') {
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b2b      	cmp	r3, #43	; 0x2b
 80043d6:	d102      	bne.n	80043de <_atof+0x12a>
            p += 1;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3301      	adds	r3, #1
 80043dc:	607b      	str	r3, [r7, #4]
        }

        // Get digits of exponent, if any.
        expon = 0;
 80043de:	2300      	movs	r3, #0
 80043e0:	60bb      	str	r3, [r7, #8]
        while (valid_digit(*p)) {
 80043e2:	e00d      	b.n	8004400 <_atof+0x14c>
            expon = expon * 10 + (*p - '0');
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	4613      	mov	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	461a      	mov	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	4413      	add	r3, r2
 80043f6:	3b30      	subs	r3, #48	; 0x30
 80043f8:	60bb      	str	r3, [r7, #8]
            p += 1;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3301      	adds	r3, #1
 80043fe:	607b      	str	r3, [r7, #4]
        while (valid_digit(*p)) {
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b2f      	cmp	r3, #47	; 0x2f
 8004406:	d903      	bls.n	8004410 <_atof+0x15c>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b39      	cmp	r3, #57	; 0x39
 800440e:	d9e9      	bls.n	80043e4 <_atof+0x130>
        }
        if (expon > 308)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8004416:	d90e      	bls.n	8004436 <_atof+0x182>
            expon = 308;
 8004418:	f44f 739a 	mov.w	r3, #308	; 0x134
 800441c:	60bb      	str	r3, [r7, #8]

        // Calculate scaling factor.
        // while (expon >= 50) { scale *= 1E50f; expon -= 50; }
        while (expon >=  8) {
 800441e:	e00a      	b.n	8004436 <_atof+0x182>
            scale *= 1E8f;
 8004420:	edd7 7a04 	vldr	s15, [r7, #16]
 8004424:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004498 <_atof+0x1e4>
 8004428:	ee67 7a87 	vmul.f32	s15, s15, s14
 800442c:	edc7 7a04 	vstr	s15, [r7, #16]
            expon -=  8;
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	3b08      	subs	r3, #8
 8004434:	60bb      	str	r3, [r7, #8]
        while (expon >=  8) {
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b07      	cmp	r3, #7
 800443a:	d8f1      	bhi.n	8004420 <_atof+0x16c>
        }
        while (expon >   0) {
 800443c:	e00a      	b.n	8004454 <_atof+0x1a0>
            scale *= 10.0f;
 800443e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004442:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004446:	ee67 7a87 	vmul.f32	s15, s15, s14
 800444a:	edc7 7a04 	vstr	s15, [r7, #16]
            expon -=  1;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	3b01      	subs	r3, #1
 8004452:	60bb      	str	r3, [r7, #8]
        while (expon >   0) {
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f1      	bne.n	800443e <_atof+0x18a>
        }
    }

    // Return signed and scaled floating point result.
    return sign * (frac ? (value / scale) : (value * scale));
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d006      	beq.n	800446e <_atof+0x1ba>
 8004460:	edd7 6a05 	vldr	s13, [r7, #20]
 8004464:	ed97 7a04 	vldr	s14, [r7, #16]
 8004468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800446c:	e005      	b.n	800447a <_atof+0x1c6>
 800446e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004472:	edd7 7a04 	vldr	s15, [r7, #16]
 8004476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447a:	ed97 7a06 	vldr	s14, [r7, #24]
 800447e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004482:	eeb0 0a67 	vmov.f32	s0, s15
 8004486:	3724      	adds	r7, #36	; 0x24
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	bf800000 	.word	0xbf800000
 8004494:	41200000 	.word	0x41200000
 8004498:	4cbebc20 	.word	0x4cbebc20

0800449c <ftoa>:

///////////////////////////////////////////////////////////////////////////////
// FTOA
///////////////////////////////////////////////////////////////////////////////
static char *ftoa(float x, char *floatString)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08c      	sub	sp, #48	; 0x30
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80044a6:	6038      	str	r0, [r7, #0]
    int32_t value;
    char intString1[12];
    char intString2[12] = { 0, };
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	f107 0310 	add.w	r3, r7, #16
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	605a      	str	r2, [r3, #4]
    char *decimalPoint = ".";
 80044b6:	4b54      	ldr	r3, [pc, #336]	; (8004608 <ftoa+0x16c>)
 80044b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t dpLocation;

    if (x > 0)                  // Rounding for x.xxx display format
 80044ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80044be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c6:	dd08      	ble.n	80044da <ftoa+0x3e>
        x += 0.0005f;
 80044c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80044cc:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800460c <ftoa+0x170>
 80044d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044d4:	edc7 7a01 	vstr	s15, [r7, #4]
 80044d8:	e007      	b.n	80044ea <ftoa+0x4e>
    else
        x -= 0.0005f;
 80044da:	edd7 7a01 	vldr	s15, [r7, #4]
 80044de:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800460c <ftoa+0x170>
 80044e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044e6:	edc7 7a01 	vstr	s15, [r7, #4]

    value = (int32_t)(x * 1000.0f);    // Convert float * 1000 to an integer
 80044ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80044ee:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004610 <ftoa+0x174>
 80044f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044fa:	ee17 3a90 	vmov	r3, s15
 80044fe:	62bb      	str	r3, [r7, #40]	; 0x28

    itoa(abs(value), intString1, 10);   // Create string from abs of integer value
 8004500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004502:	2b00      	cmp	r3, #0
 8004504:	bfb8      	it	lt
 8004506:	425b      	neglt	r3, r3
 8004508:	f107 0118 	add.w	r1, r7, #24
 800450c:	220a      	movs	r2, #10
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff fea2 	bl	8004258 <itoa>

    if (value >= 0)
 8004514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004516:	2b00      	cmp	r3, #0
 8004518:	db02      	blt.n	8004520 <ftoa+0x84>
        intString2[0] = ' ';    // Positive number, add a pad space
 800451a:	2320      	movs	r3, #32
 800451c:	733b      	strb	r3, [r7, #12]
 800451e:	e001      	b.n	8004524 <ftoa+0x88>
    else
        intString2[0] = '-';    // Negative number, add a negative sign
 8004520:	232d      	movs	r3, #45	; 0x2d
 8004522:	733b      	strb	r3, [r7, #12]

    if (strlen(intString1) == 1) {
 8004524:	f107 0318 	add.w	r3, r7, #24
 8004528:	4618      	mov	r0, r3
 800452a:	f7fb fe5f 	bl	80001ec <strlen>
 800452e:	4603      	mov	r3, r0
 8004530:	2b01      	cmp	r3, #1
 8004532:	d10e      	bne.n	8004552 <ftoa+0xb6>
        intString2[1] = '0';
 8004534:	2330      	movs	r3, #48	; 0x30
 8004536:	737b      	strb	r3, [r7, #13]
        intString2[2] = '0';
 8004538:	2330      	movs	r3, #48	; 0x30
 800453a:	73bb      	strb	r3, [r7, #14]
        intString2[3] = '0';
 800453c:	2330      	movs	r3, #48	; 0x30
 800453e:	73fb      	strb	r3, [r7, #15]
        strcat(intString2, intString1);
 8004540:	f107 0218 	add.w	r2, r7, #24
 8004544:	f107 030c 	add.w	r3, r7, #12
 8004548:	4611      	mov	r1, r2
 800454a:	4618      	mov	r0, r3
 800454c:	f01d fd72 	bl	8022034 <strcat>
 8004550:	e02f      	b.n	80045b2 <ftoa+0x116>
    } else if (strlen(intString1) == 2) {
 8004552:	f107 0318 	add.w	r3, r7, #24
 8004556:	4618      	mov	r0, r3
 8004558:	f7fb fe48 	bl	80001ec <strlen>
 800455c:	4603      	mov	r3, r0
 800455e:	2b02      	cmp	r3, #2
 8004560:	d10c      	bne.n	800457c <ftoa+0xe0>
        intString2[1] = '0';
 8004562:	2330      	movs	r3, #48	; 0x30
 8004564:	737b      	strb	r3, [r7, #13]
        intString2[2] = '0';
 8004566:	2330      	movs	r3, #48	; 0x30
 8004568:	73bb      	strb	r3, [r7, #14]
        strcat(intString2, intString1);
 800456a:	f107 0218 	add.w	r2, r7, #24
 800456e:	f107 030c 	add.w	r3, r7, #12
 8004572:	4611      	mov	r1, r2
 8004574:	4618      	mov	r0, r3
 8004576:	f01d fd5d 	bl	8022034 <strcat>
 800457a:	e01a      	b.n	80045b2 <ftoa+0x116>
    } else if (strlen(intString1) == 3) {
 800457c:	f107 0318 	add.w	r3, r7, #24
 8004580:	4618      	mov	r0, r3
 8004582:	f7fb fe33 	bl	80001ec <strlen>
 8004586:	4603      	mov	r3, r0
 8004588:	2b03      	cmp	r3, #3
 800458a:	d10a      	bne.n	80045a2 <ftoa+0x106>
        intString2[1] = '0';
 800458c:	2330      	movs	r3, #48	; 0x30
 800458e:	737b      	strb	r3, [r7, #13]
        strcat(intString2, intString1);
 8004590:	f107 0218 	add.w	r2, r7, #24
 8004594:	f107 030c 	add.w	r3, r7, #12
 8004598:	4611      	mov	r1, r2
 800459a:	4618      	mov	r0, r3
 800459c:	f01d fd4a 	bl	8022034 <strcat>
 80045a0:	e007      	b.n	80045b2 <ftoa+0x116>
    } else {
        strcat(intString2, intString1);
 80045a2:	f107 0218 	add.w	r2, r7, #24
 80045a6:	f107 030c 	add.w	r3, r7, #12
 80045aa:	4611      	mov	r1, r2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f01d fd41 	bl	8022034 <strcat>
    }

    dpLocation = strlen(intString2) - 3;
 80045b2:	f107 030c 	add.w	r3, r7, #12
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fb fe18 	bl	80001ec <strlen>
 80045bc:	4603      	mov	r3, r0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	3b03      	subs	r3, #3
 80045c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    strncpy(floatString, intString2, dpLocation);
 80045c6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80045ca:	f107 030c 	add.w	r3, r7, #12
 80045ce:	4619      	mov	r1, r3
 80045d0:	6838      	ldr	r0, [r7, #0]
 80045d2:	f01d fd75 	bl	80220c0 <strncpy>
    floatString[dpLocation] = '\0';
 80045d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	4413      	add	r3, r2
 80045de:	2200      	movs	r2, #0
 80045e0:	701a      	strb	r2, [r3, #0]
    strcat(floatString, decimalPoint);
 80045e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045e4:	6838      	ldr	r0, [r7, #0]
 80045e6:	f01d fd25 	bl	8022034 <strcat>
    strcat(floatString, intString2 + dpLocation);
 80045ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045ee:	f107 020c 	add.w	r2, r7, #12
 80045f2:	4413      	add	r3, r2
 80045f4:	4619      	mov	r1, r3
 80045f6:	6838      	ldr	r0, [r7, #0]
 80045f8:	f01d fd1c 	bl	8022034 <strcat>

    return floatString;
 80045fc:	683b      	ldr	r3, [r7, #0]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3730      	adds	r7, #48	; 0x30
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	08025934 	.word	0x08025934
 800460c:	3a03126f 	.word	0x3a03126f
 8004610:	447a0000 	.word	0x447a0000

08004614 <cliAux>:

static int cliAux(int argc, char *argv[])
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
    int i, val = 0;
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]

    if (argc == 1) {
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d114      	bne.n	8004652 <cliAux+0x3e>
        // print out aux channel settings
        for (i = 0; i < CHECKBOXITEMS; i++)
 8004628:	2300      	movs	r3, #0
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	e00d      	b.n	800464a <cliAux+0x36>
            pifLog_Printf(LT_NONE, "aux %u %u\r\n", i, cfg.activate[i]);
 800462e:	4a1e      	ldr	r2, [pc, #120]	; (80046a8 <cliAux+0x94>)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3312      	adds	r3, #18
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	491b      	ldr	r1, [pc, #108]	; (80046ac <cliAux+0x98>)
 800463e:	2000      	movs	r0, #0
 8004640:	f00e ffa8 	bl	8013594 <pifLog_Printf>
        for (i = 0; i < CHECKBOXITEMS; i++)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3301      	adds	r3, #1
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2b18      	cmp	r3, #24
 800464e:	ddee      	ble.n	800462e <cliAux+0x1a>
 8004650:	e024      	b.n	800469c <cliAux+0x88>
    } else if (argc > 2) {
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b02      	cmp	r3, #2
 8004656:	dd1e      	ble.n	8004696 <cliAux+0x82>
        i = atoi(argv[1]);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	3304      	adds	r3, #4
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f01d fb6c 	bl	8021d3c <atoi>
 8004664:	60f8      	str	r0, [r7, #12]
        if (i < CHECKBOXITEMS) {
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2b18      	cmp	r3, #24
 800466a:	dc0e      	bgt.n	800468a <cliAux+0x76>
            val = atoi(argv[2]);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	3308      	adds	r3, #8
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f01d fb62 	bl	8021d3c <atoi>
 8004678:	60b8      	str	r0, [r7, #8]
            cfg.activate[i] = val;
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	490a      	ldr	r1, [pc, #40]	; (80046a8 <cliAux+0x94>)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	3312      	adds	r3, #18
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	605a      	str	r2, [r3, #4]
 8004688:	e008      	b.n	800469c <cliAux+0x88>
        } else {
            pifLog_Printf(LT_NONE, "Invalid Feature index: must be < %u\r\n", CHECKBOXITEMS);
 800468a:	2219      	movs	r2, #25
 800468c:	4908      	ldr	r1, [pc, #32]	; (80046b0 <cliAux+0x9c>)
 800468e:	2000      	movs	r0, #0
 8004690:	f00e ff80 	bl	8013594 <pifLog_Printf>
 8004694:	e002      	b.n	800469c <cliAux+0x88>
        }
    } else {
    	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8004696:	f06f 0302 	mvn.w	r3, #2
 800469a:	e000      	b.n	800469e <cliAux+0x8a>
    }
	return PIF_LOG_CMD_NO_ERROR;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20001128 	.word	0x20001128
 80046ac:	08025938 	.word	0x08025938
 80046b0:	08025944 	.word	0x08025944

080046b4 <cliCMix>:

static int cliCMix(int argc, char *argv[])
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08c      	sub	sp, #48	; 0x30
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
    int i, check = 0;
 80046be:	2300      	movs	r3, #0
 80046c0:	62bb      	str	r3, [r7, #40]	; 0x28
    int num_motors = 0;
 80046c2:	2300      	movs	r3, #0
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
    char buf[16];
    float mixsum[3];

    if (argc == 1) {
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	f040 80d8 	bne.w	800487e <cliCMix+0x1ca>
        pifLog_Print(LT_NONE, "Custom mixer: \r\nMotor\tThr\tRoll\tPitch\tYaw\r\n");
 80046ce:	499a      	ldr	r1, [pc, #616]	; (8004938 <cliCMix+0x284>)
 80046d0:	2000      	movs	r0, #0
 80046d2:	f00e fed1 	bl	8013478 <pifLog_Print>
        for (i = 0; i < MAX_MOTORS; i++) {
 80046d6:	2300      	movs	r3, #0
 80046d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046da:	e069      	b.n	80047b0 <cliCMix+0xfc>
            if (mcfg.customMixer[i].throttle == 0.0f)
 80046dc:	4a97      	ldr	r2, [pc, #604]	; (800493c <cliCMix+0x288>)
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e0:	3301      	adds	r3, #1
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	4413      	add	r3, r2
 80046e6:	edd3 7a00 	vldr	s15, [r3]
 80046ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f2:	d061      	beq.n	80047b8 <cliCMix+0x104>
                break;
            num_motors++;
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	3301      	adds	r3, #1
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 80046fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fc:	3301      	adds	r3, #1
 80046fe:	461a      	mov	r2, r3
 8004700:	498f      	ldr	r1, [pc, #572]	; (8004940 <cliCMix+0x28c>)
 8004702:	2000      	movs	r0, #0
 8004704:	f00e ff46 	bl	8013594 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].throttle, buf));
 8004708:	4a8c      	ldr	r2, [pc, #560]	; (800493c <cliCMix+0x288>)
 800470a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470c:	3301      	adds	r3, #1
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	4413      	add	r3, r2
 8004712:	edd3 7a00 	vldr	s15, [r3]
 8004716:	f107 0314 	add.w	r3, r7, #20
 800471a:	4618      	mov	r0, r3
 800471c:	eeb0 0a67 	vmov.f32	s0, s15
 8004720:	f7ff febc 	bl	800449c <ftoa>
 8004724:	4603      	mov	r3, r0
 8004726:	461a      	mov	r2, r3
 8004728:	4986      	ldr	r1, [pc, #536]	; (8004944 <cliCMix+0x290>)
 800472a:	2000      	movs	r0, #0
 800472c:	f00e ff32 	bl	8013594 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].roll, buf));
 8004730:	4a82      	ldr	r2, [pc, #520]	; (800493c <cliCMix+0x288>)
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	3301      	adds	r3, #1
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	4413      	add	r3, r2
 800473a:	3304      	adds	r3, #4
 800473c:	edd3 7a00 	vldr	s15, [r3]
 8004740:	f107 0314 	add.w	r3, r7, #20
 8004744:	4618      	mov	r0, r3
 8004746:	eeb0 0a67 	vmov.f32	s0, s15
 800474a:	f7ff fea7 	bl	800449c <ftoa>
 800474e:	4603      	mov	r3, r0
 8004750:	461a      	mov	r2, r3
 8004752:	497c      	ldr	r1, [pc, #496]	; (8004944 <cliCMix+0x290>)
 8004754:	2000      	movs	r0, #0
 8004756:	f00e ff1d 	bl	8013594 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].pitch, buf));
 800475a:	4a78      	ldr	r2, [pc, #480]	; (800493c <cliCMix+0x288>)
 800475c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	4413      	add	r3, r2
 8004762:	3318      	adds	r3, #24
 8004764:	edd3 7a00 	vldr	s15, [r3]
 8004768:	f107 0314 	add.w	r3, r7, #20
 800476c:	4618      	mov	r0, r3
 800476e:	eeb0 0a67 	vmov.f32	s0, s15
 8004772:	f7ff fe93 	bl	800449c <ftoa>
 8004776:	4603      	mov	r3, r0
 8004778:	461a      	mov	r2, r3
 800477a:	4972      	ldr	r1, [pc, #456]	; (8004944 <cliCMix+0x290>)
 800477c:	2000      	movs	r0, #0
 800477e:	f00e ff09 	bl	8013594 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\r\n", ftoa(mcfg.customMixer[i].yaw, buf));
 8004782:	4a6e      	ldr	r2, [pc, #440]	; (800493c <cliCMix+0x288>)
 8004784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	4413      	add	r3, r2
 800478a:	331c      	adds	r3, #28
 800478c:	edd3 7a00 	vldr	s15, [r3]
 8004790:	f107 0314 	add.w	r3, r7, #20
 8004794:	4618      	mov	r0, r3
 8004796:	eeb0 0a67 	vmov.f32	s0, s15
 800479a:	f7ff fe7f 	bl	800449c <ftoa>
 800479e:	4603      	mov	r3, r0
 80047a0:	461a      	mov	r2, r3
 80047a2:	4969      	ldr	r1, [pc, #420]	; (8004948 <cliCMix+0x294>)
 80047a4:	2000      	movs	r0, #0
 80047a6:	f00e fef5 	bl	8013594 <pifLog_Printf>
        for (i = 0; i < MAX_MOTORS; i++) {
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	3301      	adds	r3, #1
 80047ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b2:	2b0b      	cmp	r3, #11
 80047b4:	dd92      	ble.n	80046dc <cliCMix+0x28>
 80047b6:	e000      	b.n	80047ba <cliCMix+0x106>
                break;
 80047b8:	bf00      	nop
        }
        mixsum[0] = mixsum[1] = mixsum[2] = 0.0f;
 80047ba:	f04f 0300 	mov.w	r3, #0
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < num_motors; i++) {
 80047c8:	2300      	movs	r3, #0
 80047ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047cc:	e02a      	b.n	8004824 <cliCMix+0x170>
            mixsum[0] += mcfg.customMixer[i].roll;
 80047ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80047d2:	4a5a      	ldr	r2, [pc, #360]	; (800493c <cliCMix+0x288>)
 80047d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d6:	3301      	adds	r3, #1
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	4413      	add	r3, r2
 80047dc:	3304      	adds	r3, #4
 80047de:	edd3 7a00 	vldr	s15, [r3]
 80047e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047e6:	edc7 7a02 	vstr	s15, [r7, #8]
            mixsum[1] += mcfg.customMixer[i].pitch;
 80047ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80047ee:	4a53      	ldr	r2, [pc, #332]	; (800493c <cliCMix+0x288>)
 80047f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	4413      	add	r3, r2
 80047f6:	3318      	adds	r3, #24
 80047f8:	edd3 7a00 	vldr	s15, [r3]
 80047fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004800:	edc7 7a03 	vstr	s15, [r7, #12]
            mixsum[2] += mcfg.customMixer[i].yaw;
 8004804:	ed97 7a04 	vldr	s14, [r7, #16]
 8004808:	4a4c      	ldr	r2, [pc, #304]	; (800493c <cliCMix+0x288>)
 800480a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	4413      	add	r3, r2
 8004810:	331c      	adds	r3, #28
 8004812:	edd3 7a00 	vldr	s15, [r3]
 8004816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800481a:	edc7 7a04 	vstr	s15, [r7, #16]
        for (i = 0; i < num_motors; i++) {
 800481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004820:	3301      	adds	r3, #1
 8004822:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	429a      	cmp	r2, r3
 800482a:	dbd0      	blt.n	80047ce <cliCMix+0x11a>
        }
        pifLog_Print(LT_NONE, "Sanity check:\t");
 800482c:	4947      	ldr	r1, [pc, #284]	; (800494c <cliCMix+0x298>)
 800482e:	2000      	movs	r0, #0
 8004830:	f00e fe22 	bl	8013478 <pifLog_Print>
        for (i = 0; i < 3; i++)
 8004834:	2300      	movs	r3, #0
 8004836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004838:	e019      	b.n	800486e <cliCMix+0x1ba>
            pifLog_Print(LT_NONE, fabsf(mixsum[i]) > 0.01f ? "NG\t" : "OK\t");
 800483a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	3330      	adds	r3, #48	; 0x30
 8004840:	443b      	add	r3, r7
 8004842:	3b28      	subs	r3, #40	; 0x28
 8004844:	edd3 7a00 	vldr	s15, [r3]
 8004848:	eef0 7ae7 	vabs.f32	s15, s15
 800484c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004950 <cliCMix+0x29c>
 8004850:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004858:	dd01      	ble.n	800485e <cliCMix+0x1aa>
 800485a:	4b3e      	ldr	r3, [pc, #248]	; (8004954 <cliCMix+0x2a0>)
 800485c:	e000      	b.n	8004860 <cliCMix+0x1ac>
 800485e:	4b3e      	ldr	r3, [pc, #248]	; (8004958 <cliCMix+0x2a4>)
 8004860:	4619      	mov	r1, r3
 8004862:	2000      	movs	r0, #0
 8004864:	f00e fe08 	bl	8013478 <pifLog_Print>
        for (i = 0; i < 3; i++)
 8004868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486a:	3301      	adds	r3, #1
 800486c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800486e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004870:	2b02      	cmp	r3, #2
 8004872:	dde2      	ble.n	800483a <cliCMix+0x186>
        pifLog_Print(LT_NONE, "\r\n");
 8004874:	4939      	ldr	r1, [pc, #228]	; (800495c <cliCMix+0x2a8>)
 8004876:	2000      	movs	r0, #0
 8004878:	f00e fdfe 	bl	8013478 <pifLog_Print>
 800487c:	e0ee      	b.n	8004a5c <cliCMix+0x3a8>
    } else if (strcasecmp(argv[1], "reset") == 0) {
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	3304      	adds	r3, #4
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4936      	ldr	r1, [pc, #216]	; (8004960 <cliCMix+0x2ac>)
 8004886:	4618      	mov	r0, r3
 8004888:	f01d fbba 	bl	8022000 <strcasecmp>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d111      	bne.n	80048b6 <cliCMix+0x202>
        // erase custom mixer
        for (i = 0; i < MAX_MOTORS; i++)
 8004892:	2300      	movs	r3, #0
 8004894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004896:	e00a      	b.n	80048ae <cliCMix+0x1fa>
            mcfg.customMixer[i].throttle = 0.0f;
 8004898:	4a28      	ldr	r2, [pc, #160]	; (800493c <cliCMix+0x288>)
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	3301      	adds	r3, #1
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	4413      	add	r3, r2
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
        for (i = 0; i < MAX_MOTORS; i++)
 80048a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048aa:	3301      	adds	r3, #1
 80048ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b0:	2b0b      	cmp	r3, #11
 80048b2:	ddf1      	ble.n	8004898 <cliCMix+0x1e4>
 80048b4:	e0d2      	b.n	8004a5c <cliCMix+0x3a8>
    } else if (strcasecmp(argv[1], "load") == 0) {
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	3304      	adds	r3, #4
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4929      	ldr	r1, [pc, #164]	; (8004964 <cliCMix+0x2b0>)
 80048be:	4618      	mov	r0, r3
 80048c0:	f01d fb9e 	bl	8022000 <strcasecmp>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d154      	bne.n	8004974 <cliCMix+0x2c0>
        if (argc > 2) {
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	dd2f      	ble.n	8004930 <cliCMix+0x27c>
            for (i = 0; ; i++) {
 80048d0:	2300      	movs	r3, #0
 80048d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (mixerNames[i] == NULL) {
 80048d4:	4a24      	ldr	r2, [pc, #144]	; (8004968 <cliCMix+0x2b4>)
 80048d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d104      	bne.n	80048ea <cliCMix+0x236>
                    pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 80048e0:	4922      	ldr	r1, [pc, #136]	; (800496c <cliCMix+0x2b8>)
 80048e2:	2000      	movs	r0, #0
 80048e4:	f00e fdc8 	bl	8013478 <pifLog_Print>
                    break;
 80048e8:	e0b8      	b.n	8004a5c <cliCMix+0x3a8>
                }
                if (strcasecmp(argv[2], mixerNames[i]) == 0) {
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	3308      	adds	r3, #8
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	491d      	ldr	r1, [pc, #116]	; (8004968 <cliCMix+0x2b4>)
 80048f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80048f8:	4619      	mov	r1, r3
 80048fa:	4610      	mov	r0, r2
 80048fc:	f01d fb80 	bl	8022000 <strcasecmp>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d110      	bne.n	8004928 <cliCMix+0x274>
                    mixerLoadMix(i);
 8004906:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004908:	f006 fc18 	bl	800b13c <mixerLoadMix>
                    pifLog_Printf(LT_NONE, "Loaded %s mix...\r\n", mixerNames[i]);
 800490c:	4a16      	ldr	r2, [pc, #88]	; (8004968 <cliCMix+0x2b4>)
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004914:	461a      	mov	r2, r3
 8004916:	4916      	ldr	r1, [pc, #88]	; (8004970 <cliCMix+0x2bc>)
 8004918:	2000      	movs	r0, #0
 800491a:	f00e fe3b 	bl	8013594 <pifLog_Printf>
                    cliCMix(1, NULL);
 800491e:	2100      	movs	r1, #0
 8004920:	2001      	movs	r0, #1
 8004922:	f7ff fec7 	bl	80046b4 <cliCMix>
                    break;
 8004926:	e099      	b.n	8004a5c <cliCMix+0x3a8>
            for (i = 0; ; i++) {
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492a:	3301      	adds	r3, #1
 800492c:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (mixerNames[i] == NULL) {
 800492e:	e7d1      	b.n	80048d4 <cliCMix+0x220>
                }
            }
        }
        else {
        	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8004930:	f06f 0302 	mvn.w	r3, #2
 8004934:	e093      	b.n	8004a5e <cliCMix+0x3aa>
 8004936:	bf00      	nop
 8004938:	0802596c 	.word	0x0802596c
 800493c:	20000bbc 	.word	0x20000bbc
 8004940:	08025998 	.word	0x08025998
 8004944:	080259a0 	.word	0x080259a0
 8004948:	080259a4 	.word	0x080259a4
 800494c:	080259ac 	.word	0x080259ac
 8004950:	3c23d70a 	.word	0x3c23d70a
 8004954:	080259bc 	.word	0x080259bc
 8004958:	080259c0 	.word	0x080259c0
 800495c:	080259c4 	.word	0x080259c4
 8004960:	080259c8 	.word	0x080259c8
 8004964:	080259d0 	.word	0x080259d0
 8004968:	08026bb4 	.word	0x08026bb4
 800496c:	080259d8 	.word	0x080259d8
 8004970:	080259f0 	.word	0x080259f0
        }
    } else {
        i = atoi(argv[1]); // get motor number
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	3304      	adds	r3, #4
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f01d f9de 	bl	8021d3c <atoi>
 8004980:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (--i < MAX_MOTORS) {
 8004982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004984:	3b01      	subs	r3, #1
 8004986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498a:	2b0b      	cmp	r3, #11
 800498c:	dc61      	bgt.n	8004a52 <cliCMix+0x39e>
            if (argc > 2) {
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b02      	cmp	r3, #2
 8004992:	dd11      	ble.n	80049b8 <cliCMix+0x304>
                mcfg.customMixer[i].throttle = _atof(argv[2]);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	3308      	adds	r3, #8
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff fc8a 	bl	80042b4 <_atof>
 80049a0:	eef0 7a40 	vmov.f32	s15, s0
 80049a4:	4a30      	ldr	r2, [pc, #192]	; (8004a68 <cliCMix+0x3b4>)
 80049a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a8:	3301      	adds	r3, #1
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	4413      	add	r3, r2
 80049ae:	edc3 7a00 	vstr	s15, [r3]
                check++;
 80049b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b4:	3301      	adds	r3, #1
 80049b6:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 3) {
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	dd12      	ble.n	80049e4 <cliCMix+0x330>
                mcfg.customMixer[i].roll = _atof(argv[3]);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	330c      	adds	r3, #12
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff fc75 	bl	80042b4 <_atof>
 80049ca:	eef0 7a40 	vmov.f32	s15, s0
 80049ce:	4a26      	ldr	r2, [pc, #152]	; (8004a68 <cliCMix+0x3b4>)
 80049d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d2:	3301      	adds	r3, #1
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	4413      	add	r3, r2
 80049d8:	3304      	adds	r3, #4
 80049da:	edc3 7a00 	vstr	s15, [r3]
                check++;
 80049de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e0:	3301      	adds	r3, #1
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 4) {
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	dd11      	ble.n	8004a0e <cliCMix+0x35a>
                mcfg.customMixer[i].pitch = _atof(argv[4]);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	3310      	adds	r3, #16
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff fc5f 	bl	80042b4 <_atof>
 80049f6:	eef0 7a40 	vmov.f32	s15, s0
 80049fa:	4a1b      	ldr	r2, [pc, #108]	; (8004a68 <cliCMix+0x3b4>)
 80049fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	4413      	add	r3, r2
 8004a02:	3318      	adds	r3, #24
 8004a04:	edc3 7a00 	vstr	s15, [r3]
                check++;
 8004a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 5) {
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b05      	cmp	r3, #5
 8004a12:	dd11      	ble.n	8004a38 <cliCMix+0x384>
                mcfg.customMixer[i].yaw = _atof(argv[5]);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	3314      	adds	r3, #20
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff fc4a 	bl	80042b4 <_atof>
 8004a20:	eef0 7a40 	vmov.f32	s15, s0
 8004a24:	4a10      	ldr	r2, [pc, #64]	; (8004a68 <cliCMix+0x3b4>)
 8004a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	4413      	add	r3, r2
 8004a2c:	331c      	adds	r3, #28
 8004a2e:	edc3 7a00 	vstr	s15, [r3]
                check++;
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a34:	3301      	adds	r3, #1
 8004a36:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (check != 4) {
 8004a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d004      	beq.n	8004a48 <cliCMix+0x394>
                pifLog_Print(LT_NONE, "Wrong number of arguments, needs idx thr roll pitch yaw\r\n");
 8004a3e:	490b      	ldr	r1, [pc, #44]	; (8004a6c <cliCMix+0x3b8>)
 8004a40:	2000      	movs	r0, #0
 8004a42:	f00e fd19 	bl	8013478 <pifLog_Print>
 8004a46:	e009      	b.n	8004a5c <cliCMix+0x3a8>
            } else {
                cliCMix(1, NULL);
 8004a48:	2100      	movs	r1, #0
 8004a4a:	2001      	movs	r0, #1
 8004a4c:	f7ff fe32 	bl	80046b4 <cliCMix>
 8004a50:	e004      	b.n	8004a5c <cliCMix+0x3a8>
            }
        } else {
            pifLog_Printf(LT_NONE, "Motor number must be between 1 and %d\r\n", MAX_MOTORS);
 8004a52:	220c      	movs	r2, #12
 8004a54:	4906      	ldr	r1, [pc, #24]	; (8004a70 <cliCMix+0x3bc>)
 8004a56:	2000      	movs	r0, #0
 8004a58:	f00e fd9c 	bl	8013594 <pifLog_Printf>
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3730      	adds	r7, #48	; 0x30
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000bbc 	.word	0x20000bbc
 8004a6c:	08025a04 	.word	0x08025a04
 8004a70:	08025a40 	.word	0x08025a40

08004a74 <cliServo>:

static int cliServo(int argc, char *argv[])
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b08c      	sub	sp, #48	; 0x30
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
    int i;
    int8_t servoRates[8] = { 30, 30, 100, 100, 100, 100, 100, 100 };
 8004a7e:	4aa2      	ldr	r2, [pc, #648]	; (8004d08 <cliServo+0x294>)
 8004a80:	f107 0320 	add.w	r3, r7, #32
 8004a84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a88:	e883 0003 	stmia.w	r3, {r0, r1}

    if (argc == 1) {
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d15c      	bne.n	8004b4c <cliServo+0xd8>
        pifLog_Print(LT_NONE, "servo servo_number\tmin\tmiddle\tmax\trate\r\n");
 8004a92:	499e      	ldr	r1, [pc, #632]	; (8004d0c <cliServo+0x298>)
 8004a94:	2000      	movs	r0, #0
 8004a96:	f00e fcef 	bl	8013478 <pifLog_Print>
        for (i = 0; i < MAX_SERVOS; i++) {
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a9e:	e049      	b.n	8004b34 <cliServo+0xc0>
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 8004aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	499a      	ldr	r1, [pc, #616]	; (8004d10 <cliServo+0x29c>)
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	f00e fd73 	bl	8013594 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].min);
 8004aae:	4999      	ldr	r1, [pc, #612]	; (8004d14 <cliServo+0x2a0>)
 8004ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	440b      	add	r3, r1
 8004abc:	33b8      	adds	r3, #184	; 0xb8
 8004abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	4994      	ldr	r1, [pc, #592]	; (8004d18 <cliServo+0x2a4>)
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	f00e fd64 	bl	8013594 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].middle);
 8004acc:	4991      	ldr	r1, [pc, #580]	; (8004d14 <cliServo+0x2a0>)
 8004ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	440b      	add	r3, r1
 8004ada:	33bc      	adds	r3, #188	; 0xbc
 8004adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	498d      	ldr	r1, [pc, #564]	; (8004d18 <cliServo+0x2a4>)
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	f00e fd55 	bl	8013594 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].max);
 8004aea:	498a      	ldr	r1, [pc, #552]	; (8004d14 <cliServo+0x2a0>)
 8004aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	440b      	add	r3, r1
 8004af8:	33ba      	adds	r3, #186	; 0xba
 8004afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004afe:	461a      	mov	r2, r3
 8004b00:	4985      	ldr	r1, [pc, #532]	; (8004d18 <cliServo+0x2a4>)
 8004b02:	2000      	movs	r0, #0
 8004b04:	f00e fd46 	bl	8013594 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].rate);
 8004b08:	4982      	ldr	r1, [pc, #520]	; (8004d14 <cliServo+0x2a0>)
 8004b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	440b      	add	r3, r1
 8004b16:	33be      	adds	r3, #190	; 0xbe
 8004b18:	f993 3000 	ldrsb.w	r3, [r3]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	497e      	ldr	r1, [pc, #504]	; (8004d18 <cliServo+0x2a4>)
 8004b20:	2000      	movs	r0, #0
 8004b22:	f00e fd37 	bl	8013594 <pifLog_Printf>
            pifLog_Print(LT_NONE, "\r\n");
 8004b26:	497d      	ldr	r1, [pc, #500]	; (8004d1c <cliServo+0x2a8>)
 8004b28:	2000      	movs	r0, #0
 8004b2a:	f00e fca5 	bl	8013478 <pifLog_Print>
        for (i = 0; i < MAX_SERVOS; i++) {
 8004b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b30:	3301      	adds	r3, #1
 8004b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b36:	2b07      	cmp	r3, #7
 8004b38:	ddb2      	ble.n	8004aa0 <cliServo+0x2c>
        }
        pifLog_Print(LT_NONE, "\r\n");
 8004b3a:	4978      	ldr	r1, [pc, #480]	; (8004d1c <cliServo+0x2a8>)
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	f00e fc9b 	bl	8013478 <pifLog_Print>
        pifLog_Print(LT_NONE, "Reset servos: servo reset\r\n");
 8004b42:	4977      	ldr	r1, [pc, #476]	; (8004d20 <cliServo+0x2ac>)
 8004b44:	2000      	movs	r0, #0
 8004b46:	f00e fc97 	bl	8013478 <pifLog_Print>
 8004b4a:	e0d7      	b.n	8004cfc <cliServo+0x288>
    } else if (strcasecmp(argv[1], "reset") == 0) {
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4974      	ldr	r1, [pc, #464]	; (8004d24 <cliServo+0x2b0>)
 8004b54:	4618      	mov	r0, r3
 8004b56:	f01d fa53 	bl	8022000 <strcasecmp>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d13a      	bne.n	8004bd6 <cliServo+0x162>
        // erase servo config
        for (i = 0; i < MAX_SERVOS; i++) {
 8004b60:	2300      	movs	r3, #0
 8004b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b64:	e033      	b.n	8004bce <cliServo+0x15a>
            cfg.servoConf[i].min = 1020;
 8004b66:	496b      	ldr	r1, [pc, #428]	; (8004d14 <cliServo+0x2a0>)
 8004b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	440b      	add	r3, r1
 8004b74:	33b8      	adds	r3, #184	; 0xb8
 8004b76:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8004b7a:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].max = 2000;
 8004b7c:	4965      	ldr	r1, [pc, #404]	; (8004d14 <cliServo+0x2a0>)
 8004b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b80:	4613      	mov	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	440b      	add	r3, r1
 8004b8a:	33ba      	adds	r3, #186	; 0xba
 8004b8c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004b90:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].middle = 1500;
 8004b92:	4960      	ldr	r1, [pc, #384]	; (8004d14 <cliServo+0x2a0>)
 8004b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b96:	4613      	mov	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	440b      	add	r3, r1
 8004ba0:	33bc      	adds	r3, #188	; 0xbc
 8004ba2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004ba6:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].rate = servoRates[i];
 8004ba8:	f107 0220 	add.w	r2, r7, #32
 8004bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bae:	4413      	add	r3, r2
 8004bb0:	f993 0000 	ldrsb.w	r0, [r3]
 8004bb4:	4957      	ldr	r1, [pc, #348]	; (8004d14 <cliServo+0x2a0>)
 8004bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bb8:	4613      	mov	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	440b      	add	r3, r1
 8004bc2:	33be      	adds	r3, #190	; 0xbe
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++) {
 8004bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bca:	3301      	adds	r3, #1
 8004bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd0:	2b07      	cmp	r3, #7
 8004bd2:	ddc8      	ble.n	8004b66 <cliServo+0xf2>
 8004bd4:	e092      	b.n	8004cfc <cliServo+0x288>
        }
    } else {
        enum {SERVO = 0, MIN, MIDDLE, MAX, RATE, ARGS_COUNT};
        int args[ARGS_COUNT], check = 0;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	62bb      	str	r3, [r7, #40]	; 0x28

        while (check + 1 < argc && check < ARGS_COUNT) {
 8004bda:	e012      	b.n	8004c02 <cliServo+0x18e>
            args[check] = atoi(argv[check + 1]);
 8004bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bde:	3301      	adds	r3, #1
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	4413      	add	r3, r2
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f01d f8a7 	bl	8021d3c <atoi>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	3330      	adds	r3, #48	; 0x30
 8004bf6:	443b      	add	r3, r7
 8004bf8:	f843 2c24 	str.w	r2, [r3, #-36]
            check++;
 8004bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfe:	3301      	adds	r3, #1
 8004c00:	62bb      	str	r3, [r7, #40]	; 0x28
        while (check + 1 < argc && check < ARGS_COUNT) {
 8004c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c04:	3301      	adds	r3, #1
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	dd02      	ble.n	8004c12 <cliServo+0x19e>
 8004c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	dde4      	ble.n	8004bdc <cliServo+0x168>
        }

        if (check != ARGS_COUNT) {
 8004c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c14:	2b05      	cmp	r3, #5
 8004c16:	d005      	beq.n	8004c24 <cliServo+0x1b0>
            pifLog_Print(LT_NONE, "ERR: Wrong number of arguments, needs servo_number min middle max rate\r\n");
 8004c18:	4943      	ldr	r1, [pc, #268]	; (8004d28 <cliServo+0x2b4>)
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	f00e fc2c 	bl	8013478 <pifLog_Print>
        	return PIF_LOG_CMD_NO_ERROR;
 8004c20:	2300      	movs	r3, #0
 8004c22:	e06c      	b.n	8004cfe <cliServo+0x28a>
        }

        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS &&
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	dd60      	ble.n	8004cec <cliServo+0x278>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	dc5d      	bgt.n	8004cec <cliServo+0x278>
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004c30:	693b      	ldr	r3, [r7, #16]
        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS &&
 8004c32:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004c36:	db59      	blt.n	8004cec <cliServo+0x278>
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f640 0234 	movw	r2, #2100	; 0x834
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	dc54      	bgt.n	8004cec <cliServo+0x278>
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004c42:	69bb      	ldr	r3, [r7, #24]
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004c44:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004c48:	db50      	blt.n	8004cec <cliServo+0x278>
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	f640 0234 	movw	r2, #2100	; 0x834
 8004c50:	4293      	cmp	r3, r2
 8004c52:	dc4b      	bgt.n	8004cec <cliServo+0x278>
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004c54:	697b      	ldr	r3, [r7, #20]
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004c56:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004c5a:	db47      	blt.n	8004cec <cliServo+0x278>
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f640 0234 	movw	r2, #2100	; 0x834
 8004c62:	4293      	cmp	r3, r2
 8004c64:	dc42      	bgt.n	8004cec <cliServo+0x278>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004c66:	69fb      	ldr	r3, [r7, #28]
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004c68:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8004c6c:	db3e      	blt.n	8004cec <cliServo+0x278>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	2b64      	cmp	r3, #100	; 0x64
 8004c72:	dc3b      	bgt.n	8004cec <cliServo+0x278>
            args[MIN] <= args[MIDDLE] && args[MIDDLE] <= args[MAX]) {
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	697b      	ldr	r3, [r7, #20]
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	dc37      	bgt.n	8004cec <cliServo+0x278>
            args[MIN] <= args[MIDDLE] && args[MIDDLE] <= args[MAX]) {
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	dc33      	bgt.n	8004cec <cliServo+0x278>
            args[SERVO]--;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	60fb      	str	r3, [r7, #12]
            cfg.servoConf[args[SERVO]].min = args[MIN];
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	b218      	sxth	r0, r3
 8004c90:	4920      	ldr	r1, [pc, #128]	; (8004d14 <cliServo+0x2a0>)
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	440b      	add	r3, r1
 8004c9c:	33b8      	adds	r3, #184	; 0xb8
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].max = args[MAX];
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	b218      	sxth	r0, r3
 8004ca8:	491a      	ldr	r1, [pc, #104]	; (8004d14 <cliServo+0x2a0>)
 8004caa:	4613      	mov	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	440b      	add	r3, r1
 8004cb4:	33ba      	adds	r3, #186	; 0xba
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].middle = args[MIDDLE];
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	b218      	sxth	r0, r3
 8004cc0:	4914      	ldr	r1, [pc, #80]	; (8004d14 <cliServo+0x2a0>)
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	440b      	add	r3, r1
 8004ccc:	33bc      	adds	r3, #188	; 0xbc
 8004cce:	4602      	mov	r2, r0
 8004cd0:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].rate = args[RATE];
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	b258      	sxtb	r0, r3
 8004cd8:	490e      	ldr	r1, [pc, #56]	; (8004d14 <cliServo+0x2a0>)
 8004cda:	4613      	mov	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	440b      	add	r3, r1
 8004ce4:	33be      	adds	r3, #190	; 0xbe
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	701a      	strb	r2, [r3, #0]
 8004cea:	e003      	b.n	8004cf4 <cliServo+0x280>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments, range for min, max and middle [900,2100], min <= middle <= max, range for rate [-100,100]\r\n");
 8004cec:	490f      	ldr	r1, [pc, #60]	; (8004d2c <cliServo+0x2b8>)
 8004cee:	2000      	movs	r0, #0
 8004cf0:	f00e fbc2 	bl	8013478 <pifLog_Print>
        cliServo(1, NULL);
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	2001      	movs	r0, #1
 8004cf8:	f7ff febc 	bl	8004a74 <cliServo>
    }
	return PIF_LOG_CMD_NO_ERROR;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3730      	adds	r7, #48	; 0x30
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	08025b7c 	.word	0x08025b7c
 8004d0c:	08025a68 	.word	0x08025a68
 8004d10:	08025998 	.word	0x08025998
 8004d14:	20001128 	.word	0x20001128
 8004d18:	08025a94 	.word	0x08025a94
 8004d1c:	080259c4 	.word	0x080259c4
 8004d20:	08025a98 	.word	0x08025a98
 8004d24:	080259c8 	.word	0x080259c8
 8004d28:	08025ab4 	.word	0x08025ab4
 8004d2c:	08025b00 	.word	0x08025b00

08004d30 <cliServoMix>:

static int cliServoMix(int argc, char *argv[])
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b090      	sub	sp, #64	; 0x40
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
    int i;
    int args[8], check = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	63bb      	str	r3, [r7, #56]	; 0x38

    if (argc == 1) {
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	f040 808a 	bne.w	8004e5a <cliServoMix+0x12a>
        pifLog_Print(LT_NONE, "Custom servo mixer: \r\nchange mixer: smix rule\ttarget_channel\tinput_channel\trate\tspeed\t\tmin\tmax\tbox\r\n");
 8004d46:	49ab      	ldr	r1, [pc, #684]	; (8004ff4 <cliServoMix+0x2c4>)
 8004d48:	2000      	movs	r0, #0
 8004d4a:	f00e fb95 	bl	8013478 <pifLog_Print>
        pifLog_Print(LT_NONE, "reset mixer: smix reset\r\nload mixer: smix load\r\nchange direction of channel: smix direction\r\n");
 8004d4e:	49aa      	ldr	r1, [pc, #680]	; (8004ff8 <cliServoMix+0x2c8>)
 8004d50:	2000      	movs	r0, #0
 8004d52:	f00e fb91 	bl	8013478 <pifLog_Print>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8004d56:	2300      	movs	r3, #0
 8004d58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d5a:	e074      	b.n	8004e46 <cliServoMix+0x116>
            if (mcfg.customServoMixer[i].rate == 0)
 8004d5c:	49a7      	ldr	r1, [pc, #668]	; (8004ffc <cliServoMix+0x2cc>)
 8004d5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d60:	4613      	mov	r3, r2
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	1a9b      	subs	r3, r3, r2
 8004d66:	440b      	add	r3, r1
 8004d68:	33d2      	adds	r3, #210	; 0xd2
 8004d6a:	f993 3000 	ldrsb.w	r3, [r3]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d06d      	beq.n	8004e4e <cliServoMix+0x11e>
                break;
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 8004d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d74:	3301      	adds	r3, #1
 8004d76:	461a      	mov	r2, r3
 8004d78:	49a1      	ldr	r1, [pc, #644]	; (8005000 <cliServoMix+0x2d0>)
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	f00e fc0a 	bl	8013594 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].targetChannel + 1);
 8004d80:	499e      	ldr	r1, [pc, #632]	; (8004ffc <cliServoMix+0x2cc>)
 8004d82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d84:	4613      	mov	r3, r2
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	1a9b      	subs	r3, r3, r2
 8004d8a:	440b      	add	r3, r1
 8004d8c:	33d0      	adds	r3, #208	; 0xd0
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	3301      	adds	r3, #1
 8004d92:	461a      	mov	r2, r3
 8004d94:	499b      	ldr	r1, [pc, #620]	; (8005004 <cliServoMix+0x2d4>)
 8004d96:	2000      	movs	r0, #0
 8004d98:	f00e fbfc 	bl	8013594 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].fromChannel + 1);
 8004d9c:	4997      	ldr	r1, [pc, #604]	; (8004ffc <cliServoMix+0x2cc>)
 8004d9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004da0:	4613      	mov	r3, r2
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	1a9b      	subs	r3, r3, r2
 8004da6:	440b      	add	r3, r1
 8004da8:	33d1      	adds	r3, #209	; 0xd1
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	3301      	adds	r3, #1
 8004dae:	461a      	mov	r2, r3
 8004db0:	4994      	ldr	r1, [pc, #592]	; (8005004 <cliServoMix+0x2d4>)
 8004db2:	2000      	movs	r0, #0
 8004db4:	f00e fbee 	bl	8013594 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].rate);
 8004db8:	4990      	ldr	r1, [pc, #576]	; (8004ffc <cliServoMix+0x2cc>)
 8004dba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	33d2      	adds	r3, #210	; 0xd2
 8004dc6:	f993 3000 	ldrsb.w	r3, [r3]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	498d      	ldr	r1, [pc, #564]	; (8005004 <cliServoMix+0x2d4>)
 8004dce:	2000      	movs	r0, #0
 8004dd0:	f00e fbe0 	bl	8013594 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].speed);
 8004dd4:	4989      	ldr	r1, [pc, #548]	; (8004ffc <cliServoMix+0x2cc>)
 8004dd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dd8:	4613      	mov	r3, r2
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	1a9b      	subs	r3, r3, r2
 8004dde:	440b      	add	r3, r1
 8004de0:	33d3      	adds	r3, #211	; 0xd3
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	4987      	ldr	r1, [pc, #540]	; (8005004 <cliServoMix+0x2d4>)
 8004de8:	2000      	movs	r0, #0
 8004dea:	f00e fbd3 	bl	8013594 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].min);
 8004dee:	4983      	ldr	r1, [pc, #524]	; (8004ffc <cliServoMix+0x2cc>)
 8004df0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004df2:	4613      	mov	r3, r2
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	1a9b      	subs	r3, r3, r2
 8004df8:	440b      	add	r3, r1
 8004dfa:	33d4      	adds	r3, #212	; 0xd4
 8004dfc:	f993 3000 	ldrsb.w	r3, [r3]
 8004e00:	461a      	mov	r2, r3
 8004e02:	4980      	ldr	r1, [pc, #512]	; (8005004 <cliServoMix+0x2d4>)
 8004e04:	2000      	movs	r0, #0
 8004e06:	f00e fbc5 	bl	8013594 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].max);
 8004e0a:	497c      	ldr	r1, [pc, #496]	; (8004ffc <cliServoMix+0x2cc>)
 8004e0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e0e:	4613      	mov	r3, r2
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	1a9b      	subs	r3, r3, r2
 8004e14:	440b      	add	r3, r1
 8004e16:	33d5      	adds	r3, #213	; 0xd5
 8004e18:	f993 3000 	ldrsb.w	r3, [r3]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	4979      	ldr	r1, [pc, #484]	; (8005004 <cliServoMix+0x2d4>)
 8004e20:	2000      	movs	r0, #0
 8004e22:	f00e fbb7 	bl	8013594 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\r\n", mcfg.customServoMixer[i].box);
 8004e26:	4975      	ldr	r1, [pc, #468]	; (8004ffc <cliServoMix+0x2cc>)
 8004e28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	1a9b      	subs	r3, r3, r2
 8004e30:	440b      	add	r3, r1
 8004e32:	33d6      	adds	r3, #214	; 0xd6
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	4973      	ldr	r1, [pc, #460]	; (8005008 <cliServoMix+0x2d8>)
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	f00e fbaa 	bl	8013594 <pifLog_Printf>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8004e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e42:	3301      	adds	r3, #1
 8004e44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e48:	2b0f      	cmp	r3, #15
 8004e4a:	dd87      	ble.n	8004d5c <cliServoMix+0x2c>
 8004e4c:	e000      	b.n	8004e50 <cliServoMix+0x120>
                break;
 8004e4e:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8004e50:	496e      	ldr	r1, [pc, #440]	; (800500c <cliServoMix+0x2dc>)
 8004e52:	2000      	movs	r0, #0
 8004e54:	f00e fb10 	bl	8013478 <pifLog_Print>
 8004e58:	e23b      	b.n	80052d2 <cliServoMix+0x5a2>
    } else if (strcasecmp(argv[1], "reset") == 0) {
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	496b      	ldr	r1, [pc, #428]	; (8005010 <cliServoMix+0x2e0>)
 8004e62:	4618      	mov	r0, r3
 8004e64:	f01d f8cc 	bl	8022000 <strcasecmp>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d118      	bne.n	8004ea0 <cliServoMix+0x170>
        // erase custom mixer
        memset(mcfg.customServoMixer, 0, sizeof(mcfg.customServoMixer));
 8004e6e:	2270      	movs	r2, #112	; 0x70
 8004e70:	2100      	movs	r1, #0
 8004e72:	4868      	ldr	r0, [pc, #416]	; (8005014 <cliServoMix+0x2e4>)
 8004e74:	f01c ffb6 	bl	8021de4 <memset>
        for (i = 0; i < MAX_SERVOS; i++)
 8004e78:	2300      	movs	r3, #0
 8004e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e7c:	e00c      	b.n	8004e98 <cliServoMix+0x168>
            cfg.servoConf[i].direction = 0;
 8004e7e:	4966      	ldr	r1, [pc, #408]	; (8005018 <cliServoMix+0x2e8>)
 8004e80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	440b      	add	r3, r1
 8004e8c:	33c0      	adds	r3, #192	; 0xc0
 8004e8e:	2200      	movs	r2, #0
 8004e90:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++)
 8004e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e94:	3301      	adds	r3, #1
 8004e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e9a:	2b07      	cmp	r3, #7
 8004e9c:	ddef      	ble.n	8004e7e <cliServoMix+0x14e>
 8004e9e:	e218      	b.n	80052d2 <cliServoMix+0x5a2>
    } else if (strcasecmp(argv[1], "load") == 0) {
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	495d      	ldr	r1, [pc, #372]	; (800501c <cliServoMix+0x2ec>)
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f01d f8a9 	bl	8022000 <strcasecmp>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d135      	bne.n	8004f20 <cliServoMix+0x1f0>
        if (argc > 2) {
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	dd2f      	ble.n	8004f1a <cliServoMix+0x1ea>
            for (i = 0; ; i++) {
 8004eba:	2300      	movs	r3, #0
 8004ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (mixerNames[i] == NULL) {
 8004ebe:	4a58      	ldr	r2, [pc, #352]	; (8005020 <cliServoMix+0x2f0>)
 8004ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d104      	bne.n	8004ed4 <cliServoMix+0x1a4>
                    pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 8004eca:	4956      	ldr	r1, [pc, #344]	; (8005024 <cliServoMix+0x2f4>)
 8004ecc:	2000      	movs	r0, #0
 8004ece:	f00e fad3 	bl	8013478 <pifLog_Print>
                    break;
 8004ed2:	e1fe      	b.n	80052d2 <cliServoMix+0x5a2>
                }
                if (strcasecmp(argv[2], mixerNames[i]) == 0) {
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	3308      	adds	r3, #8
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	4951      	ldr	r1, [pc, #324]	; (8005020 <cliServoMix+0x2f0>)
 8004edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ede:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	f01d f88b 	bl	8022000 <strcasecmp>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d110      	bne.n	8004f12 <cliServoMix+0x1e2>
                    servoMixerLoadMix(i);
 8004ef0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004ef2:	f006 f8ab 	bl	800b04c <servoMixerLoadMix>
                    pifLog_Printf(LT_NONE, "Loaded %s mix...\r\n", mixerNames[i]);
 8004ef6:	4a4a      	ldr	r2, [pc, #296]	; (8005020 <cliServoMix+0x2f0>)
 8004ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004efe:	461a      	mov	r2, r3
 8004f00:	4949      	ldr	r1, [pc, #292]	; (8005028 <cliServoMix+0x2f8>)
 8004f02:	2000      	movs	r0, #0
 8004f04:	f00e fb46 	bl	8013594 <pifLog_Printf>
                    cliServoMix(1, NULL);
 8004f08:	2100      	movs	r1, #0
 8004f0a:	2001      	movs	r0, #1
 8004f0c:	f7ff ff10 	bl	8004d30 <cliServoMix>
                    break;
 8004f10:	e1df      	b.n	80052d2 <cliServoMix+0x5a2>
            for (i = 0; ; i++) {
 8004f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f14:	3301      	adds	r3, #1
 8004f16:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (mixerNames[i] == NULL) {
 8004f18:	e7d1      	b.n	8004ebe <cliServoMix+0x18e>
                }
            }
        }
        else {
        	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8004f1a:	f06f 0302 	mvn.w	r3, #2
 8004f1e:	e1d9      	b.n	80052d4 <cliServoMix+0x5a4>
        }
    } else if (strcasecmp(argv[1], "direction") == 0) {
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	3304      	adds	r3, #4
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4941      	ldr	r1, [pc, #260]	; (800502c <cliServoMix+0x2fc>)
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f01d f869 	bl	8022000 <strcasecmp>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f040 8128 	bne.w	8005186 <cliServoMix+0x456>
        enum {SERVO = 0, INPUT_, DIRECTION, ARGS_COUNT};
        int servoIndex, channel;
        char* smix_dir[2] = { "smix", "direction" };
 8004f36:	4a3e      	ldr	r2, [pc, #248]	; (8005030 <cliServoMix+0x300>)
 8004f38:	f107 0308 	add.w	r3, r7, #8
 8004f3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f40:	e883 0003 	stmia.w	r3, {r0, r1}

        if (argc == 2) {
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	f040 8095 	bne.w	8005076 <cliServoMix+0x346>
            pifLog_Print(LT_NONE, "change the direction a servo reacts to a input channel: \r\nservo input -1|1\r\n");
 8004f4c:	4939      	ldr	r1, [pc, #228]	; (8005034 <cliServoMix+0x304>)
 8004f4e:	2000      	movs	r0, #0
 8004f50:	f00e fa92 	bl	8013478 <pifLog_Print>
            pifLog_Print(LT_NONE, "s");
 8004f54:	4938      	ldr	r1, [pc, #224]	; (8005038 <cliServoMix+0x308>)
 8004f56:	2000      	movs	r0, #0
 8004f58:	f00e fa8e 	bl	8013478 <pifLog_Print>
            for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f60:	e009      	b.n	8004f76 <cliServoMix+0x246>
                pifLog_Printf(LT_NONE, "\ti%d", channel + 1);
 8004f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f64:	3301      	adds	r3, #1
 8004f66:	461a      	mov	r2, r3
 8004f68:	4934      	ldr	r1, [pc, #208]	; (800503c <cliServoMix+0x30c>)
 8004f6a:	2000      	movs	r0, #0
 8004f6c:	f00e fb12 	bl	8013594 <pifLog_Printf>
            for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	3301      	adds	r3, #1
 8004f74:	633b      	str	r3, [r7, #48]	; 0x30
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	2b0b      	cmp	r3, #11
 8004f7a:	ddf2      	ble.n	8004f62 <cliServoMix+0x232>
            pifLog_Print(LT_NONE, "\r\n");
 8004f7c:	4923      	ldr	r1, [pc, #140]	; (800500c <cliServoMix+0x2dc>)
 8004f7e:	2000      	movs	r0, #0
 8004f80:	f00e fa7a 	bl	8013478 <pifLog_Print>

            for (servoIndex = 0; servoIndex < MAX_SERVOS; servoIndex++) {
 8004f84:	2300      	movs	r3, #0
 8004f86:	637b      	str	r3, [r7, #52]	; 0x34
 8004f88:	e02f      	b.n	8004fea <cliServoMix+0x2ba>
                pifLog_Printf(LT_NONE, "%d", servoIndex + 1);
 8004f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	461a      	mov	r2, r3
 8004f90:	492b      	ldr	r1, [pc, #172]	; (8005040 <cliServoMix+0x310>)
 8004f92:	2000      	movs	r0, #0
 8004f94:	f00e fafe 	bl	8013594 <pifLog_Printf>
                for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004f98:	2300      	movs	r3, #0
 8004f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f9c:	e01b      	b.n	8004fd6 <cliServoMix+0x2a6>
                    pifLog_Printf(LT_NONE, "\t%s  ", (cfg.servoConf[servoIndex].direction & (1 << channel)) ? "r" : "n");
 8004f9e:	491e      	ldr	r1, [pc, #120]	; (8005018 <cliServoMix+0x2e8>)
 8004fa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	440b      	add	r3, r1
 8004fac:	33c0      	adds	r3, #192	; 0xc0
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb4:	fa42 f303 	asr.w	r3, r2, r3
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <cliServoMix+0x294>
 8004fc0:	4b20      	ldr	r3, [pc, #128]	; (8005044 <cliServoMix+0x314>)
 8004fc2:	e000      	b.n	8004fc6 <cliServoMix+0x296>
 8004fc4:	4b20      	ldr	r3, [pc, #128]	; (8005048 <cliServoMix+0x318>)
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	4920      	ldr	r1, [pc, #128]	; (800504c <cliServoMix+0x31c>)
 8004fca:	2000      	movs	r0, #0
 8004fcc:	f00e fae2 	bl	8013594 <pifLog_Printf>
                for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	633b      	str	r3, [r7, #48]	; 0x30
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd8:	2b0b      	cmp	r3, #11
 8004fda:	dde0      	ble.n	8004f9e <cliServoMix+0x26e>
                pifLog_Print(LT_NONE, "\r\n");
 8004fdc:	490b      	ldr	r1, [pc, #44]	; (800500c <cliServoMix+0x2dc>)
 8004fde:	2000      	movs	r0, #0
 8004fe0:	f00e fa4a 	bl	8013478 <pifLog_Print>
            for (servoIndex = 0; servoIndex < MAX_SERVOS; servoIndex++) {
 8004fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fec:	2b07      	cmp	r3, #7
 8004fee:	ddcc      	ble.n	8004f8a <cliServoMix+0x25a>
            }
            return PIF_LOG_CMD_NO_ERROR;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	e16f      	b.n	80052d4 <cliServoMix+0x5a4>
 8004ff4:	08025b84 	.word	0x08025b84
 8004ff8:	08025bec 	.word	0x08025bec
 8004ffc:	20000bbc 	.word	0x20000bbc
 8005000:	08025998 	.word	0x08025998
 8005004:	08025a94 	.word	0x08025a94
 8005008:	08025c4c 	.word	0x08025c4c
 800500c:	080259c4 	.word	0x080259c4
 8005010:	080259c8 	.word	0x080259c8
 8005014:	20000c8c 	.word	0x20000c8c
 8005018:	20001128 	.word	0x20001128
 800501c:	080259d0 	.word	0x080259d0
 8005020:	08026bb4 	.word	0x08026bb4
 8005024:	080259d8 	.word	0x080259d8
 8005028:	080259f0 	.word	0x080259f0
 800502c:	08024c88 	.word	0x08024c88
 8005030:	08025d88 	.word	0x08025d88
 8005034:	08025c54 	.word	0x08025c54
 8005038:	08025ca4 	.word	0x08025ca4
 800503c:	08025ca8 	.word	0x08025ca8
 8005040:	08025cb0 	.word	0x08025cb0
 8005044:	08025cb4 	.word	0x08025cb4
 8005048:	08025cb8 	.word	0x08025cb8
 800504c:	08025cbc 	.word	0x08025cbc
        }

        while (check + 1 < argc && check < ARGS_COUNT) {
            args[check] = atoi(argv[check + 1]);
 8005050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005052:	3301      	adds	r3, #1
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	4413      	add	r3, r2
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f01c fe6d 	bl	8021d3c <atoi>
 8005062:	4602      	mov	r2, r0
 8005064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	3340      	adds	r3, #64	; 0x40
 800506a:	443b      	add	r3, r7
 800506c:	f843 2c30 	str.w	r2, [r3, #-48]
            check++;
 8005070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005072:	3301      	adds	r3, #1
 8005074:	63bb      	str	r3, [r7, #56]	; 0x38
        while (check + 1 < argc && check < ARGS_COUNT) {
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	3301      	adds	r3, #1
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	429a      	cmp	r2, r3
 800507e:	dd02      	ble.n	8005086 <cliServoMix+0x356>
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	2b02      	cmp	r3, #2
 8005084:	dde4      	ble.n	8005050 <cliServoMix+0x320>
        }

        if (check != ARGS_COUNT) {
 8005086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005088:	2b03      	cmp	r3, #3
 800508a:	d005      	beq.n	8005098 <cliServoMix+0x368>
            pifLog_Print(LT_NONE, "Wrong number of arguments, needs servo input direction\r\n");
 800508c:	4993      	ldr	r1, [pc, #588]	; (80052dc <cliServoMix+0x5ac>)
 800508e:	2000      	movs	r0, #0
 8005090:	f00e f9f2 	bl	8013478 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8005094:	2300      	movs	r3, #0
 8005096:	e11d      	b.n	80052d4 <cliServoMix+0x5a4>
        }

        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS && args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS && (args[DIRECTION] == -1 || args[DIRECTION] == 1)) {
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	dd55      	ble.n	800514a <cliServoMix+0x41a>
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	dc52      	bgt.n	800514a <cliServoMix+0x41a>
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	dd4f      	ble.n	800514a <cliServoMix+0x41a>
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b0c      	cmp	r3, #12
 80050ae:	dc4c      	bgt.n	800514a <cliServoMix+0x41a>
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050b6:	d002      	beq.n	80050be <cliServoMix+0x38e>
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d145      	bne.n	800514a <cliServoMix+0x41a>
            args[SERVO] -= 1;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	613b      	str	r3, [r7, #16]
            args[INPUT_] -= 1;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	617b      	str	r3, [r7, #20]
            if (args[DIRECTION] == -1)
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050d0:	d11c      	bne.n	800510c <cliServoMix+0x3dc>
                cfg.servoConf[args[SERVO]].direction |= 1 << args[INPUT_];
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4982      	ldr	r1, [pc, #520]	; (80052e0 <cliServoMix+0x5b0>)
 80050d6:	4613      	mov	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	440b      	add	r3, r1
 80050e0:	33c0      	adds	r3, #192	; 0xc0
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	b21a      	sxth	r2, r3
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2101      	movs	r1, #1
 80050ea:	fa01 f303 	lsl.w	r3, r1, r3
 80050ee:	b21b      	sxth	r3, r3
 80050f0:	4313      	orrs	r3, r2
 80050f2:	b21b      	sxth	r3, r3
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	b298      	uxth	r0, r3
 80050f8:	4979      	ldr	r1, [pc, #484]	; (80052e0 <cliServoMix+0x5b0>)
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	440b      	add	r3, r1
 8005104:	33c0      	adds	r3, #192	; 0xc0
 8005106:	4602      	mov	r2, r0
 8005108:	801a      	strh	r2, [r3, #0]
            if (args[DIRECTION] == -1)
 800510a:	e022      	b.n	8005152 <cliServoMix+0x422>
            else
                cfg.servoConf[args[SERVO]].direction &= ~(1 << args[INPUT_]);
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4974      	ldr	r1, [pc, #464]	; (80052e0 <cliServoMix+0x5b0>)
 8005110:	4613      	mov	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	440b      	add	r3, r1
 800511a:	33c0      	adds	r3, #192	; 0xc0
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	b21a      	sxth	r2, r3
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2101      	movs	r1, #1
 8005124:	fa01 f303 	lsl.w	r3, r1, r3
 8005128:	b21b      	sxth	r3, r3
 800512a:	43db      	mvns	r3, r3
 800512c:	b21b      	sxth	r3, r3
 800512e:	4013      	ands	r3, r2
 8005130:	b21b      	sxth	r3, r3
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	b298      	uxth	r0, r3
 8005136:	496a      	ldr	r1, [pc, #424]	; (80052e0 <cliServoMix+0x5b0>)
 8005138:	4613      	mov	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	440b      	add	r3, r1
 8005142:	33c0      	adds	r3, #192	; 0xc0
 8005144:	4602      	mov	r2, r0
 8005146:	801a      	strh	r2, [r3, #0]
            if (args[DIRECTION] == -1)
 8005148:	e003      	b.n	8005152 <cliServoMix+0x422>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments\r\n");
 800514a:	4966      	ldr	r1, [pc, #408]	; (80052e4 <cliServoMix+0x5b4>)
 800514c:	2000      	movs	r0, #0
 800514e:	f00e f993 	bl	8013478 <pifLog_Print>

        cliServoMix(2, smix_dir);
 8005152:	f107 0308 	add.w	r3, r7, #8
 8005156:	4619      	mov	r1, r3
 8005158:	2002      	movs	r0, #2
 800515a:	f7ff fde9 	bl	8004d30 <cliServoMix>
 800515e:	e0b8      	b.n	80052d2 <cliServoMix+0x5a2>
    } else {
        enum {RULE = 0, TARGET, INPUT_, RATE, SPEED, MIN, MAX, BOX, ARGS_COUNT};
        while (check + 1 < argc && check < ARGS_COUNT) {
            args[check] = atoi(argv[check + 1]);
 8005160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005162:	3301      	adds	r3, #1
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	4413      	add	r3, r2
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4618      	mov	r0, r3
 800516e:	f01c fde5 	bl	8021d3c <atoi>
 8005172:	4602      	mov	r2, r0
 8005174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	3340      	adds	r3, #64	; 0x40
 800517a:	443b      	add	r3, r7
 800517c:	f843 2c30 	str.w	r2, [r3, #-48]
            check++;
 8005180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005182:	3301      	adds	r3, #1
 8005184:	63bb      	str	r3, [r7, #56]	; 0x38
        while (check + 1 < argc && check < ARGS_COUNT) {
 8005186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005188:	3301      	adds	r3, #1
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	429a      	cmp	r2, r3
 800518e:	dd02      	ble.n	8005196 <cliServoMix+0x466>
 8005190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005192:	2b07      	cmp	r3, #7
 8005194:	dde4      	ble.n	8005160 <cliServoMix+0x430>
        }

        if (check != ARGS_COUNT) {
 8005196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005198:	2b08      	cmp	r3, #8
 800519a:	d005      	beq.n	80051a8 <cliServoMix+0x478>
            pifLog_Print(LT_NONE, "ERR: Wrong number of arguments, needs rule target_channel input_channel rate speed min max box\r\n");
 800519c:	4952      	ldr	r1, [pc, #328]	; (80052e8 <cliServoMix+0x5b8>)
 800519e:	2000      	movs	r0, #0
 80051a0:	f00e f96a 	bl	8013478 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 80051a4:	2300      	movs	r3, #0
 80051a6:	e095      	b.n	80052d4 <cliServoMix+0x5a4>
        }

        i = args[RULE] - 1;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (i >= 0 && i < MAX_SERVO_RULES &&
 80051ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f2c0 808a 	blt.w	80052ca <cliServoMix+0x59a>
 80051b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b8:	2b0f      	cmp	r3, #15
 80051ba:	f300 8086 	bgt.w	80052ca <cliServoMix+0x59a>
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 80051be:	697b      	ldr	r3, [r7, #20]
        if (i >= 0 && i < MAX_SERVO_RULES &&
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f340 8082 	ble.w	80052ca <cliServoMix+0x59a>
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	dc7e      	bgt.n	80052ca <cliServoMix+0x59a>
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 80051cc:	69bb      	ldr	r3, [r7, #24]
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	dd7b      	ble.n	80052ca <cliServoMix+0x59a>
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b0c      	cmp	r3, #12
 80051d6:	dc78      	bgt.n	80052ca <cliServoMix+0x59a>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 80051d8:	69fb      	ldr	r3, [r7, #28]
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 80051da:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80051de:	db74      	blt.n	80052ca <cliServoMix+0x59a>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	2b64      	cmp	r3, #100	; 0x64
 80051e4:	dc71      	bgt.n	80052ca <cliServoMix+0x59a>
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 80051e6:	6a3b      	ldr	r3, [r7, #32]
            args[RATE] >= -100 && args[RATE] <= 100 &&
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	db6e      	blt.n	80052ca <cliServoMix+0x59a>
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	2bff      	cmp	r3, #255	; 0xff
 80051f0:	dc6b      	bgt.n	80052ca <cliServoMix+0x59a>
            args[MIN] >= 0 && args[MIN] <= 100 &&
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	db68      	blt.n	80052ca <cliServoMix+0x59a>
            args[MIN] >= 0 && args[MIN] <= 100 &&
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	2b64      	cmp	r3, #100	; 0x64
 80051fc:	dc65      	bgt.n	80052ca <cliServoMix+0x59a>
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 80051fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
            args[MIN] >= 0 && args[MIN] <= 100 &&
 8005200:	2b00      	cmp	r3, #0
 8005202:	db62      	blt.n	80052ca <cliServoMix+0x59a>
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 8005204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005206:	2b64      	cmp	r3, #100	; 0x64
 8005208:	dc5f      	bgt.n	80052ca <cliServoMix+0x59a>
 800520a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	429a      	cmp	r2, r3
 8005210:	da5b      	bge.n	80052ca <cliServoMix+0x59a>
            args[BOX] >= 0 && args[BOX] <= MAX_SERVO_BOXES) {
 8005212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 8005214:	2b00      	cmp	r3, #0
 8005216:	db58      	blt.n	80052ca <cliServoMix+0x59a>
            args[BOX] >= 0 && args[BOX] <= MAX_SERVO_BOXES) {
 8005218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521a:	2b03      	cmp	r3, #3
 800521c:	dc55      	bgt.n	80052ca <cliServoMix+0x59a>
            mcfg.customServoMixer[i].targetChannel = args[TARGET] - 1;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	b2db      	uxtb	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b2d8      	uxtb	r0, r3
 8005226:	4931      	ldr	r1, [pc, #196]	; (80052ec <cliServoMix+0x5bc>)
 8005228:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800522a:	4613      	mov	r3, r2
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	1a9b      	subs	r3, r3, r2
 8005230:	440b      	add	r3, r1
 8005232:	33d0      	adds	r3, #208	; 0xd0
 8005234:	4602      	mov	r2, r0
 8005236:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].fromChannel = args[INPUT_] - 1;
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	b2db      	uxtb	r3, r3
 800523c:	3b01      	subs	r3, #1
 800523e:	b2d8      	uxtb	r0, r3
 8005240:	492a      	ldr	r1, [pc, #168]	; (80052ec <cliServoMix+0x5bc>)
 8005242:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005244:	4613      	mov	r3, r2
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	440b      	add	r3, r1
 800524c:	33d1      	adds	r3, #209	; 0xd1
 800524e:	4602      	mov	r2, r0
 8005250:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].rate = args[RATE];
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	b258      	sxtb	r0, r3
 8005256:	4925      	ldr	r1, [pc, #148]	; (80052ec <cliServoMix+0x5bc>)
 8005258:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800525a:	4613      	mov	r3, r2
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	1a9b      	subs	r3, r3, r2
 8005260:	440b      	add	r3, r1
 8005262:	33d2      	adds	r3, #210	; 0xd2
 8005264:	4602      	mov	r2, r0
 8005266:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].speed = args[SPEED];
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	b2d8      	uxtb	r0, r3
 800526c:	491f      	ldr	r1, [pc, #124]	; (80052ec <cliServoMix+0x5bc>)
 800526e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005270:	4613      	mov	r3, r2
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	1a9b      	subs	r3, r3, r2
 8005276:	440b      	add	r3, r1
 8005278:	33d3      	adds	r3, #211	; 0xd3
 800527a:	4602      	mov	r2, r0
 800527c:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].min = args[MIN];
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	b258      	sxtb	r0, r3
 8005282:	491a      	ldr	r1, [pc, #104]	; (80052ec <cliServoMix+0x5bc>)
 8005284:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005286:	4613      	mov	r3, r2
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	1a9b      	subs	r3, r3, r2
 800528c:	440b      	add	r3, r1
 800528e:	33d4      	adds	r3, #212	; 0xd4
 8005290:	4602      	mov	r2, r0
 8005292:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].max = args[MAX];
 8005294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005296:	b258      	sxtb	r0, r3
 8005298:	4914      	ldr	r1, [pc, #80]	; (80052ec <cliServoMix+0x5bc>)
 800529a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800529c:	4613      	mov	r3, r2
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	1a9b      	subs	r3, r3, r2
 80052a2:	440b      	add	r3, r1
 80052a4:	33d5      	adds	r3, #213	; 0xd5
 80052a6:	4602      	mov	r2, r0
 80052a8:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].box = args[BOX];
 80052aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ac:	b2d8      	uxtb	r0, r3
 80052ae:	490f      	ldr	r1, [pc, #60]	; (80052ec <cliServoMix+0x5bc>)
 80052b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052b2:	4613      	mov	r3, r2
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	1a9b      	subs	r3, r3, r2
 80052b8:	440b      	add	r3, r1
 80052ba:	33d6      	adds	r3, #214	; 0xd6
 80052bc:	4602      	mov	r2, r0
 80052be:	701a      	strb	r2, [r3, #0]
            cliServoMix(1, NULL);
 80052c0:	2100      	movs	r1, #0
 80052c2:	2001      	movs	r0, #1
 80052c4:	f7ff fd34 	bl	8004d30 <cliServoMix>
 80052c8:	e003      	b.n	80052d2 <cliServoMix+0x5a2>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments\r\n");
 80052ca:	4906      	ldr	r1, [pc, #24]	; (80052e4 <cliServoMix+0x5b4>)
 80052cc:	2000      	movs	r0, #0
 80052ce:	f00e f8d3 	bl	8013478 <pifLog_Print>
    }
	return PIF_LOG_CMD_NO_ERROR;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3740      	adds	r7, #64	; 0x40
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	08025cc4 	.word	0x08025cc4
 80052e0:	20001128 	.word	0x20001128
 80052e4:	08025d00 	.word	0x08025d00
 80052e8:	08025d24 	.word	0x08025d24
 80052ec:	20000bbc 	.word	0x20000bbc

080052f0 <cliDefaults>:

static int cliDefaults(int argc, char *argv[])
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Print(LT_NONE, "Resetting to defaults...\r\n");
 80052fa:	490b      	ldr	r1, [pc, #44]	; (8005328 <cliDefaults+0x38>)
 80052fc:	2000      	movs	r0, #0
 80052fe:	f00e f8bb 	bl	8013478 <pifLog_Print>
    checkFirstTime(true);
 8005302:	2001      	movs	r0, #1
 8005304:	f001 fb10 	bl	8006928 <checkFirstTime>
    pifLog_Print(LT_NONE, "Rebooting...");
 8005308:	4908      	ldr	r1, [pc, #32]	; (800532c <cliDefaults+0x3c>)
 800530a:	2000      	movs	r0, #0
 800530c:	f00e f8b4 	bl	8013478 <pifLog_Print>
    pif_Delay1ms(10);
 8005310:	200a      	movs	r0, #10
 8005312:	f00c f8eb 	bl	80114ec <pif_Delay1ms>
    systemReset(false);
 8005316:	2000      	movs	r0, #0
 8005318:	f7fc fe64 	bl	8001fe4 <systemReset>
	return PIF_LOG_CMD_NO_ERROR;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	08025d90 	.word	0x08025d90
 800532c:	08025dac 	.word	0x08025dac

08005330 <cliDump>:

static int cliDump(int argc, char *argv[])
{
 8005330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005332:	b093      	sub	sp, #76	; 0x4c
 8005334:	af04      	add	r7, sp, #16
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
    char buf[16];
    float thr, roll, pitch, yaw;
    uint32_t mask;
    const clivalue_t *setval;

    cliVersion(1, NULL);
 800533a:	2100      	movs	r1, #0
 800533c:	2001      	movs	r0, #1
 800533e:	f001 f86d 	bl	800641c <cliVersion>
    pifLog_Print(LT_NONE, "Current Config: Copy everything below here...\r\n");
 8005342:	49bc      	ldr	r1, [pc, #752]	; (8005634 <cliDump+0x304>)
 8005344:	2000      	movs	r0, #0
 8005346:	f00e f897 	bl	8013478 <pifLog_Print>

    // print out aux switches
    cliAux(1, NULL);
 800534a:	2100      	movs	r1, #0
 800534c:	2001      	movs	r0, #1
 800534e:	f7ff f961 	bl	8004614 <cliAux>

    // print out current motor mix
    pifLog_Printf(LT_NONE, "mixer %s\r\n", mixerNames[mcfg.mixerConfiguration - 1]);
 8005352:	4bb9      	ldr	r3, [pc, #740]	; (8005638 <cliDump+0x308>)
 8005354:	795b      	ldrb	r3, [r3, #5]
 8005356:	3b01      	subs	r3, #1
 8005358:	4ab8      	ldr	r2, [pc, #736]	; (800563c <cliDump+0x30c>)
 800535a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800535e:	461a      	mov	r2, r3
 8005360:	49b7      	ldr	r1, [pc, #732]	; (8005640 <cliDump+0x310>)
 8005362:	2000      	movs	r0, #0
 8005364:	f00e f916 	bl	8013594 <pifLog_Printf>

    // print custom mix if exists
    if (mcfg.customMixer[0].throttle != 0.0f) {
 8005368:	4bb3      	ldr	r3, [pc, #716]	; (8005638 <cliDump+0x308>)
 800536a:	edd3 7a04 	vldr	s15, [r3, #16]
 800536e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005376:	f000 80a4 	beq.w	80054c2 <cliDump+0x192>
        for (i = 0; i < MAX_MOTORS; i++) {
 800537a:	2300      	movs	r3, #0
 800537c:	637b      	str	r3, [r7, #52]	; 0x34
 800537e:	e093      	b.n	80054a8 <cliDump+0x178>
            if (mcfg.customMixer[i].throttle == 0.0f)
 8005380:	4aad      	ldr	r2, [pc, #692]	; (8005638 <cliDump+0x308>)
 8005382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005384:	3301      	adds	r3, #1
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	4413      	add	r3, r2
 800538a:	edd3 7a00 	vldr	s15, [r3]
 800538e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005396:	f000 808c 	beq.w	80054b2 <cliDump+0x182>
                break;
            thr = mcfg.customMixer[i].throttle;
 800539a:	4aa7      	ldr	r2, [pc, #668]	; (8005638 <cliDump+0x308>)
 800539c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539e:	3301      	adds	r3, #1
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	4413      	add	r3, r2
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	62fb      	str	r3, [r7, #44]	; 0x2c
            roll = mcfg.customMixer[i].roll;
 80053a8:	4aa3      	ldr	r2, [pc, #652]	; (8005638 <cliDump+0x308>)
 80053aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ac:	3301      	adds	r3, #1
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	4413      	add	r3, r2
 80053b2:	3304      	adds	r3, #4
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	62bb      	str	r3, [r7, #40]	; 0x28
            pitch = mcfg.customMixer[i].pitch;
 80053b8:	4a9f      	ldr	r2, [pc, #636]	; (8005638 <cliDump+0x308>)
 80053ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	4413      	add	r3, r2
 80053c0:	3318      	adds	r3, #24
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	627b      	str	r3, [r7, #36]	; 0x24
            yaw = mcfg.customMixer[i].yaw;
 80053c6:	4a9c      	ldr	r2, [pc, #624]	; (8005638 <cliDump+0x308>)
 80053c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	4413      	add	r3, r2
 80053ce:	331c      	adds	r3, #28
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	623b      	str	r3, [r7, #32]
            pifLog_Printf(LT_NONE, "cmix %d", i + 1);
 80053d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d6:	3301      	adds	r3, #1
 80053d8:	461a      	mov	r2, r3
 80053da:	499a      	ldr	r1, [pc, #616]	; (8005644 <cliDump+0x314>)
 80053dc:	2000      	movs	r0, #0
 80053de:	f00e f8d9 	bl	8013594 <pifLog_Printf>
            if (thr < 0)
 80053e2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80053e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ee:	d503      	bpl.n	80053f8 <cliDump+0xc8>
                pifLog_Print(LT_NONE, " ");
 80053f0:	4995      	ldr	r1, [pc, #596]	; (8005648 <cliDump+0x318>)
 80053f2:	2000      	movs	r0, #0
 80053f4:	f00e f840 	bl	8013478 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(thr, buf));
 80053f8:	f107 0308 	add.w	r3, r7, #8
 80053fc:	4618      	mov	r0, r3
 80053fe:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8005402:	f7ff f84b 	bl	800449c <ftoa>
 8005406:	4603      	mov	r3, r0
 8005408:	461a      	mov	r2, r3
 800540a:	4990      	ldr	r1, [pc, #576]	; (800564c <cliDump+0x31c>)
 800540c:	2000      	movs	r0, #0
 800540e:	f00e f8c1 	bl	8013594 <pifLog_Printf>
            if (roll < 0)
 8005412:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005416:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800541a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541e:	d503      	bpl.n	8005428 <cliDump+0xf8>
                pifLog_Print(LT_NONE, " ");
 8005420:	4989      	ldr	r1, [pc, #548]	; (8005648 <cliDump+0x318>)
 8005422:	2000      	movs	r0, #0
 8005424:	f00e f828 	bl	8013478 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(roll, buf));
 8005428:	f107 0308 	add.w	r3, r7, #8
 800542c:	4618      	mov	r0, r3
 800542e:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8005432:	f7ff f833 	bl	800449c <ftoa>
 8005436:	4603      	mov	r3, r0
 8005438:	461a      	mov	r2, r3
 800543a:	4984      	ldr	r1, [pc, #528]	; (800564c <cliDump+0x31c>)
 800543c:	2000      	movs	r0, #0
 800543e:	f00e f8a9 	bl	8013594 <pifLog_Printf>
            if (pitch < 0)
 8005442:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005446:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800544a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800544e:	d503      	bpl.n	8005458 <cliDump+0x128>
                pifLog_Print(LT_NONE, " ");
 8005450:	497d      	ldr	r1, [pc, #500]	; (8005648 <cliDump+0x318>)
 8005452:	2000      	movs	r0, #0
 8005454:	f00e f810 	bl	8013478 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(pitch, buf));
 8005458:	f107 0308 	add.w	r3, r7, #8
 800545c:	4618      	mov	r0, r3
 800545e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8005462:	f7ff f81b 	bl	800449c <ftoa>
 8005466:	4603      	mov	r3, r0
 8005468:	461a      	mov	r2, r3
 800546a:	4978      	ldr	r1, [pc, #480]	; (800564c <cliDump+0x31c>)
 800546c:	2000      	movs	r0, #0
 800546e:	f00e f891 	bl	8013594 <pifLog_Printf>
            if (yaw < 0)
 8005472:	edd7 7a08 	vldr	s15, [r7, #32]
 8005476:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800547a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800547e:	d503      	bpl.n	8005488 <cliDump+0x158>
                pifLog_Print(LT_NONE, " ");
 8005480:	4971      	ldr	r1, [pc, #452]	; (8005648 <cliDump+0x318>)
 8005482:	2000      	movs	r0, #0
 8005484:	f00d fff8 	bl	8013478 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s\r\n", ftoa(yaw, buf));
 8005488:	f107 0308 	add.w	r3, r7, #8
 800548c:	4618      	mov	r0, r3
 800548e:	ed97 0a08 	vldr	s0, [r7, #32]
 8005492:	f7ff f803 	bl	800449c <ftoa>
 8005496:	4603      	mov	r3, r0
 8005498:	461a      	mov	r2, r3
 800549a:	496d      	ldr	r1, [pc, #436]	; (8005650 <cliDump+0x320>)
 800549c:	2000      	movs	r0, #0
 800549e:	f00e f879 	bl	8013594 <pifLog_Printf>
        for (i = 0; i < MAX_MOTORS; i++) {
 80054a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a4:	3301      	adds	r3, #1
 80054a6:	637b      	str	r3, [r7, #52]	; 0x34
 80054a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054aa:	2b0b      	cmp	r3, #11
 80054ac:	f67f af68 	bls.w	8005380 <cliDump+0x50>
 80054b0:	e000      	b.n	80054b4 <cliDump+0x184>
                break;
 80054b2:	bf00      	nop
        }
        pifLog_Printf(LT_NONE, "cmix %d 0 0 0 0\r\n", i + 1);
 80054b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b6:	3301      	adds	r3, #1
 80054b8:	461a      	mov	r2, r3
 80054ba:	4966      	ldr	r1, [pc, #408]	; (8005654 <cliDump+0x324>)
 80054bc:	2000      	movs	r0, #0
 80054be:	f00e f869 	bl	8013594 <pifLog_Printf>
    }

    // print custom servo mixer if exists
    if (mcfg.customServoMixer[0].rate != 0) {
 80054c2:	4b5d      	ldr	r3, [pc, #372]	; (8005638 <cliDump+0x308>)
 80054c4:	f993 30d2 	ldrsb.w	r3, [r3, #210]	; 0xd2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 8084 	beq.w	80055d6 <cliDump+0x2a6>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80054ce:	2300      	movs	r3, #0
 80054d0:	637b      	str	r3, [r7, #52]	; 0x34
 80054d2:	e074      	b.n	80055be <cliDump+0x28e>
            if (mcfg.customServoMixer[i].rate == 0)
 80054d4:	4958      	ldr	r1, [pc, #352]	; (8005638 <cliDump+0x308>)
 80054d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054d8:	4613      	mov	r3, r2
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	1a9b      	subs	r3, r3, r2
 80054de:	440b      	add	r3, r1
 80054e0:	33d2      	adds	r3, #210	; 0xd2
 80054e2:	f993 3000 	ldrsb.w	r3, [r3]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d06d      	beq.n	80055c6 <cliDump+0x296>
                break;
            pifLog_Printf(LT_NONE, "smix %d ", i + 1);
 80054ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ec:	3301      	adds	r3, #1
 80054ee:	461a      	mov	r2, r3
 80054f0:	4959      	ldr	r1, [pc, #356]	; (8005658 <cliDump+0x328>)
 80054f2:	2000      	movs	r0, #0
 80054f4:	f00e f84e 	bl	8013594 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].targetChannel + 1);
 80054f8:	494f      	ldr	r1, [pc, #316]	; (8005638 <cliDump+0x308>)
 80054fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054fc:	4613      	mov	r3, r2
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	1a9b      	subs	r3, r3, r2
 8005502:	440b      	add	r3, r1
 8005504:	33d0      	adds	r3, #208	; 0xd0
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	3301      	adds	r3, #1
 800550a:	461a      	mov	r2, r3
 800550c:	4953      	ldr	r1, [pc, #332]	; (800565c <cliDump+0x32c>)
 800550e:	2000      	movs	r0, #0
 8005510:	f00e f840 	bl	8013594 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].fromChannel + 1);
 8005514:	4948      	ldr	r1, [pc, #288]	; (8005638 <cliDump+0x308>)
 8005516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005518:	4613      	mov	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	1a9b      	subs	r3, r3, r2
 800551e:	440b      	add	r3, r1
 8005520:	33d1      	adds	r3, #209	; 0xd1
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	3301      	adds	r3, #1
 8005526:	461a      	mov	r2, r3
 8005528:	494c      	ldr	r1, [pc, #304]	; (800565c <cliDump+0x32c>)
 800552a:	2000      	movs	r0, #0
 800552c:	f00e f832 	bl	8013594 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].rate);
 8005530:	4941      	ldr	r1, [pc, #260]	; (8005638 <cliDump+0x308>)
 8005532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005534:	4613      	mov	r3, r2
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	1a9b      	subs	r3, r3, r2
 800553a:	440b      	add	r3, r1
 800553c:	33d2      	adds	r3, #210	; 0xd2
 800553e:	f993 3000 	ldrsb.w	r3, [r3]
 8005542:	461a      	mov	r2, r3
 8005544:	4945      	ldr	r1, [pc, #276]	; (800565c <cliDump+0x32c>)
 8005546:	2000      	movs	r0, #0
 8005548:	f00e f824 	bl	8013594 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].speed);
 800554c:	493a      	ldr	r1, [pc, #232]	; (8005638 <cliDump+0x308>)
 800554e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005550:	4613      	mov	r3, r2
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	1a9b      	subs	r3, r3, r2
 8005556:	440b      	add	r3, r1
 8005558:	33d3      	adds	r3, #211	; 0xd3
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	493f      	ldr	r1, [pc, #252]	; (800565c <cliDump+0x32c>)
 8005560:	2000      	movs	r0, #0
 8005562:	f00e f817 	bl	8013594 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].min);
 8005566:	4934      	ldr	r1, [pc, #208]	; (8005638 <cliDump+0x308>)
 8005568:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800556a:	4613      	mov	r3, r2
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	1a9b      	subs	r3, r3, r2
 8005570:	440b      	add	r3, r1
 8005572:	33d4      	adds	r3, #212	; 0xd4
 8005574:	f993 3000 	ldrsb.w	r3, [r3]
 8005578:	461a      	mov	r2, r3
 800557a:	4938      	ldr	r1, [pc, #224]	; (800565c <cliDump+0x32c>)
 800557c:	2000      	movs	r0, #0
 800557e:	f00e f809 	bl	8013594 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].max);
 8005582:	492d      	ldr	r1, [pc, #180]	; (8005638 <cliDump+0x308>)
 8005584:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005586:	4613      	mov	r3, r2
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	1a9b      	subs	r3, r3, r2
 800558c:	440b      	add	r3, r1
 800558e:	33d5      	adds	r3, #213	; 0xd5
 8005590:	f993 3000 	ldrsb.w	r3, [r3]
 8005594:	461a      	mov	r2, r3
 8005596:	4931      	ldr	r1, [pc, #196]	; (800565c <cliDump+0x32c>)
 8005598:	2000      	movs	r0, #0
 800559a:	f00d fffb 	bl	8013594 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\r\n", mcfg.customServoMixer[i].box);
 800559e:	4926      	ldr	r1, [pc, #152]	; (8005638 <cliDump+0x308>)
 80055a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055a2:	4613      	mov	r3, r2
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	1a9b      	subs	r3, r3, r2
 80055a8:	440b      	add	r3, r1
 80055aa:	33d6      	adds	r3, #214	; 0xd6
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	492b      	ldr	r1, [pc, #172]	; (8005660 <cliDump+0x330>)
 80055b2:	2000      	movs	r0, #0
 80055b4:	f00d ffee 	bl	8013594 <pifLog_Printf>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80055b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ba:	3301      	adds	r3, #1
 80055bc:	637b      	str	r3, [r7, #52]	; 0x34
 80055be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c0:	2b0f      	cmp	r3, #15
 80055c2:	d987      	bls.n	80054d4 <cliDump+0x1a4>
 80055c4:	e000      	b.n	80055c8 <cliDump+0x298>
                break;
 80055c6:	bf00      	nop
        }
        pifLog_Printf(LT_NONE, "smix %d 0 0 0 0\r\n", i + 1);
 80055c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ca:	3301      	adds	r3, #1
 80055cc:	461a      	mov	r2, r3
 80055ce:	4925      	ldr	r1, [pc, #148]	; (8005664 <cliDump+0x334>)
 80055d0:	2000      	movs	r0, #0
 80055d2:	f00d ffdf 	bl	8013594 <pifLog_Printf>
    }

    // print servo directions
    for (i = 0; i < MAX_SERVOS; i++)
 80055d6:	2300      	movs	r3, #0
 80055d8:	637b      	str	r3, [r7, #52]	; 0x34
 80055da:	e024      	b.n	8005626 <cliDump+0x2f6>
        for (channel = 0; channel < INPUT_ITEMS; channel++)
 80055dc:	2300      	movs	r3, #0
 80055de:	633b      	str	r3, [r7, #48]	; 0x30
 80055e0:	e01b      	b.n	800561a <cliDump+0x2ea>
            if (cfg.servoConf[i].direction & (1 << channel))
 80055e2:	4921      	ldr	r1, [pc, #132]	; (8005668 <cliDump+0x338>)
 80055e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055e6:	4613      	mov	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	440b      	add	r3, r1
 80055f0:	33c0      	adds	r3, #192	; 0xc0
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	fa42 f303 	asr.w	r3, r2, r3
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	d007      	beq.n	8005614 <cliDump+0x2e4>
                pifLog_Printf(LT_NONE, "smix direction %d %d -1\r\n", i + 1 , channel + 1);
 8005604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560a:	3301      	adds	r3, #1
 800560c:	4917      	ldr	r1, [pc, #92]	; (800566c <cliDump+0x33c>)
 800560e:	2000      	movs	r0, #0
 8005610:	f00d ffc0 	bl	8013594 <pifLog_Printf>
        for (channel = 0; channel < INPUT_ITEMS; channel++)
 8005614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005616:	3301      	adds	r3, #1
 8005618:	633b      	str	r3, [r7, #48]	; 0x30
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	2b0b      	cmp	r3, #11
 800561e:	d9e0      	bls.n	80055e2 <cliDump+0x2b2>
    for (i = 0; i < MAX_SERVOS; i++)
 8005620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005622:	3301      	adds	r3, #1
 8005624:	637b      	str	r3, [r7, #52]	; 0x34
 8005626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005628:	2b07      	cmp	r3, #7
 800562a:	d9d7      	bls.n	80055dc <cliDump+0x2ac>

    // print servo config
    for (i = 0; i < MAX_SERVOS; i++)
 800562c:	2300      	movs	r3, #0
 800562e:	637b      	str	r3, [r7, #52]	; 0x34
 8005630:	e057      	b.n	80056e2 <cliDump+0x3b2>
 8005632:	bf00      	nop
 8005634:	08025dbc 	.word	0x08025dbc
 8005638:	20000bbc 	.word	0x20000bbc
 800563c:	08026bb4 	.word	0x08026bb4
 8005640:	08025dec 	.word	0x08025dec
 8005644:	08025df8 	.word	0x08025df8
 8005648:	08025e00 	.word	0x08025e00
 800564c:	08025e04 	.word	0x08025e04
 8005650:	080259a4 	.word	0x080259a4
 8005654:	08025e08 	.word	0x08025e08
 8005658:	08025e1c 	.word	0x08025e1c
 800565c:	08025e28 	.word	0x08025e28
 8005660:	08025c4c 	.word	0x08025c4c
 8005664:	08025e2c 	.word	0x08025e2c
 8005668:	20001128 	.word	0x20001128
 800566c:	08025e40 	.word	0x08025e40
        pifLog_Printf(LT_NONE, "servo %d %d %d %d %d\r\n", i + 1, cfg.servoConf[i].min, cfg.servoConf[i].middle, cfg.servoConf[i].max, cfg.servoConf[i].rate);
 8005670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005672:	1c59      	adds	r1, r3, #1
 8005674:	4863      	ldr	r0, [pc, #396]	; (8005804 <cliDump+0x4d4>)
 8005676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	4403      	add	r3, r0
 8005682:	33b8      	adds	r3, #184	; 0xb8
 8005684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005688:	461e      	mov	r6, r3
 800568a:	485e      	ldr	r0, [pc, #376]	; (8005804 <cliDump+0x4d4>)
 800568c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800568e:	4613      	mov	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	4403      	add	r3, r0
 8005698:	33bc      	adds	r3, #188	; 0xbc
 800569a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800569e:	461c      	mov	r4, r3
 80056a0:	4858      	ldr	r0, [pc, #352]	; (8005804 <cliDump+0x4d4>)
 80056a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056a4:	4613      	mov	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	4403      	add	r3, r0
 80056ae:	33ba      	adds	r3, #186	; 0xba
 80056b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056b4:	461d      	mov	r5, r3
 80056b6:	4853      	ldr	r0, [pc, #332]	; (8005804 <cliDump+0x4d4>)
 80056b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056ba:	4613      	mov	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	4403      	add	r3, r0
 80056c4:	33be      	adds	r3, #190	; 0xbe
 80056c6:	f993 3000 	ldrsb.w	r3, [r3]
 80056ca:	9302      	str	r3, [sp, #8]
 80056cc:	9501      	str	r5, [sp, #4]
 80056ce:	9400      	str	r4, [sp, #0]
 80056d0:	4633      	mov	r3, r6
 80056d2:	460a      	mov	r2, r1
 80056d4:	494c      	ldr	r1, [pc, #304]	; (8005808 <cliDump+0x4d8>)
 80056d6:	2000      	movs	r0, #0
 80056d8:	f00d ff5c 	bl	8013594 <pifLog_Printf>
    for (i = 0; i < MAX_SERVOS; i++)
 80056dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056de:	3301      	adds	r3, #1
 80056e0:	637b      	str	r3, [r7, #52]	; 0x34
 80056e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e4:	2b07      	cmp	r3, #7
 80056e6:	d9c3      	bls.n	8005670 <cliDump+0x340>

    // print enabled features
    mask = featureMask();
 80056e8:	f001 fcc6 	bl	8007078 <featureMask>
 80056ec:	61f8      	str	r0, [r7, #28]
    for (i = 0; ; i++) { // disable all feature first
 80056ee:	2300      	movs	r3, #0
 80056f0:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 80056f2:	4a46      	ldr	r2, [pc, #280]	; (800580c <cliDump+0x4dc>)
 80056f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00c      	beq.n	8005718 <cliDump+0x3e8>
            break;
        pifLog_Printf(LT_NONE, "feature -%s\r\n", featureNames[i]);
 80056fe:	4a43      	ldr	r2, [pc, #268]	; (800580c <cliDump+0x4dc>)
 8005700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005706:	461a      	mov	r2, r3
 8005708:	4941      	ldr	r1, [pc, #260]	; (8005810 <cliDump+0x4e0>)
 800570a:	2000      	movs	r0, #0
 800570c:	f00d ff42 	bl	8013594 <pifLog_Printf>
    for (i = 0; ; i++) { // disable all feature first
 8005710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005712:	3301      	adds	r3, #1
 8005714:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 8005716:	e7ec      	b.n	80056f2 <cliDump+0x3c2>
            break;
 8005718:	bf00      	nop
    }
    for (i = 0; ; i++) {  // reenable what we want.
 800571a:	2300      	movs	r3, #0
 800571c:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 800571e:	4a3b      	ldr	r2, [pc, #236]	; (800580c <cliDump+0x4dc>)
 8005720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d015      	beq.n	8005756 <cliDump+0x426>
            break;
        if (mask & (1 << i))
 800572a:	2201      	movs	r2, #1
 800572c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572e:	fa02 f303 	lsl.w	r3, r2, r3
 8005732:	461a      	mov	r2, r3
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	4013      	ands	r3, r2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d008      	beq.n	800574e <cliDump+0x41e>
            pifLog_Printf(LT_NONE, "feature %s\r\n", featureNames[i]);
 800573c:	4a33      	ldr	r2, [pc, #204]	; (800580c <cliDump+0x4dc>)
 800573e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005744:	461a      	mov	r2, r3
 8005746:	4933      	ldr	r1, [pc, #204]	; (8005814 <cliDump+0x4e4>)
 8005748:	2000      	movs	r0, #0
 800574a:	f00d ff23 	bl	8013594 <pifLog_Printf>
    for (i = 0; ; i++) {  // reenable what we want.
 800574e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005750:	3301      	adds	r3, #1
 8005752:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 8005754:	e7e3      	b.n	800571e <cliDump+0x3ee>
            break;
 8005756:	bf00      	nop
    }

    // print RC MAPPING
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005758:	2300      	movs	r3, #0
 800575a:	637b      	str	r3, [r7, #52]	; 0x34
 800575c:	e012      	b.n	8005784 <cliDump+0x454>
        buf[mcfg.rcmap[i]] = rcChannelLetters[i];
 800575e:	4a2e      	ldr	r2, [pc, #184]	; (8005818 <cliDump+0x4e8>)
 8005760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005762:	4413      	add	r3, r2
 8005764:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	4619      	mov	r1, r3
 800576c:	4a2b      	ldr	r2, [pc, #172]	; (800581c <cliDump+0x4ec>)
 800576e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005770:	4413      	add	r3, r2
 8005772:	781a      	ldrb	r2, [r3, #0]
 8005774:	f101 0338 	add.w	r3, r1, #56	; 0x38
 8005778:	443b      	add	r3, r7
 800577a:	f803 2c30 	strb.w	r2, [r3, #-48]
    for (i = 0; i < mcfg.rc_channel_count; i++)
 800577e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005780:	3301      	adds	r3, #1
 8005782:	637b      	str	r3, [r7, #52]	; 0x34
 8005784:	4b24      	ldr	r3, [pc, #144]	; (8005818 <cliDump+0x4e8>)
 8005786:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800578a:	461a      	mov	r2, r3
 800578c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578e:	4293      	cmp	r3, r2
 8005790:	d3e5      	bcc.n	800575e <cliDump+0x42e>
    buf[i] = '\0';
 8005792:	f107 0208 	add.w	r2, r7, #8
 8005796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005798:	4413      	add	r3, r2
 800579a:	2200      	movs	r2, #0
 800579c:	701a      	strb	r2, [r3, #0]
    pifLog_Printf(LT_NONE, "map %s\r\n", buf);
 800579e:	f107 0308 	add.w	r3, r7, #8
 80057a2:	461a      	mov	r2, r3
 80057a4:	491e      	ldr	r1, [pc, #120]	; (8005820 <cliDump+0x4f0>)
 80057a6:	2000      	movs	r0, #0
 80057a8:	f00d fef4 	bl	8013594 <pifLog_Printf>

    // print settings
    for (i = 0; i < VALUE_COUNT; i++) {
 80057ac:	2300      	movs	r3, #0
 80057ae:	637b      	str	r3, [r7, #52]	; 0x34
 80057b0:	e01f      	b.n	80057f2 <cliDump+0x4c2>
        setval = &valueTable[i];
 80057b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4a19      	ldr	r2, [pc, #100]	; (8005824 <cliDump+0x4f4>)
 80057be:	4413      	add	r3, r2
 80057c0:	61bb      	str	r3, [r7, #24]
        pifLog_Printf(LT_NONE, "set %s = ", valueTable[i].name);
 80057c2:	4918      	ldr	r1, [pc, #96]	; (8005824 <cliDump+0x4f4>)
 80057c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057c6:	4613      	mov	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	440b      	add	r3, r1
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	4914      	ldr	r1, [pc, #80]	; (8005828 <cliDump+0x4f8>)
 80057d6:	2000      	movs	r0, #0
 80057d8:	f00d fedc 	bl	8013594 <pifLog_Printf>
        cliPrintVar(setval, 0);
 80057dc:	2100      	movs	r1, #0
 80057de:	69b8      	ldr	r0, [r7, #24]
 80057e0:	f000 fb58 	bl	8005e94 <cliPrintVar>
        pifLog_Print(LT_NONE, "\r\n");
 80057e4:	4911      	ldr	r1, [pc, #68]	; (800582c <cliDump+0x4fc>)
 80057e6:	2000      	movs	r0, #0
 80057e8:	f00d fe46 	bl	8013478 <pifLog_Print>
    for (i = 0; i < VALUE_COUNT; i++) {
 80057ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ee:	3301      	adds	r3, #1
 80057f0:	637b      	str	r3, [r7, #52]	; 0x34
 80057f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f4:	2b8e      	cmp	r3, #142	; 0x8e
 80057f6:	d9dc      	bls.n	80057b2 <cliDump+0x482>
    }
	return PIF_LOG_CMD_NO_ERROR;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	373c      	adds	r7, #60	; 0x3c
 80057fe:	46bd      	mov	sp, r7
 8005800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005802:	bf00      	nop
 8005804:	20001128 	.word	0x20001128
 8005808:	08025e5c 	.word	0x08025e5c
 800580c:	08026c18 	.word	0x08026c18
 8005810:	08025e74 	.word	0x08025e74
 8005814:	08025e84 	.word	0x08025e84
 8005818:	20000bbc 	.word	0x20000bbc
 800581c:	08027888 	.word	0x08027888
 8005820:	08025e94 	.word	0x08025e94
 8005824:	08026d5c 	.word	0x08026d5c
 8005828:	08025ea0 	.word	0x08025ea0
 800582c:	080259c4 	.word	0x080259c4

08005830 <cliExit>:

static int cliExit(int argc, char *argv[])
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
    pifLog_Print(LT_NONE, "\r\nLeaving CLI mode...\r\n");
 800583a:	490c      	ldr	r1, [pc, #48]	; (800586c <cliExit+0x3c>)
 800583c:	2000      	movs	r0, #0
 800583e:	f00d fe1b 	bl	8013478 <pifLog_Print>
    *cliBuffer = '\0';
 8005842:	4b0b      	ldr	r3, [pc, #44]	; (8005870 <cliExit+0x40>)
 8005844:	2200      	movs	r2, #0
 8005846:	701a      	strb	r2, [r3, #0]
    bufferIndex = 0;
 8005848:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <cliExit+0x44>)
 800584a:	2200      	movs	r2, #0
 800584c:	601a      	str	r2, [r3, #0]
    cliMode = 0;
 800584e:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <cliExit+0x48>)
 8005850:	2200      	movs	r2, #0
 8005852:	701a      	strb	r2, [r3, #0]
    // incase some idiot leaves a motor running during motortest, clear it here
    mixerResetMotors();
 8005854:	f005 fbd0 	bl	800aff8 <mixerResetMotors>
    // save and reboot... I think this makes the most sense
    cliSave(argc, argv);
 8005858:	6839      	ldr	r1, [r7, #0]
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fafa 	bl	8005e54 <cliSave>
	return PIF_LOG_CMD_NO_ERROR;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	08025eac 	.word	0x08025eac
 8005870:	20000b88 	.word	0x20000b88
 8005874:	20000bb8 	.word	0x20000bb8
 8005878:	20000b84 	.word	0x20000b84

0800587c <cliFeature>:

static int cliFeature(int argc, char *argv[])
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t mask;

    mask = featureMask();
 8005886:	f001 fbf7 	bl	8007078 <featureMask>
 800588a:	60f8      	str	r0, [r7, #12]

    if (argc == 1) {
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d127      	bne.n	80058e2 <cliFeature+0x66>
        pifLog_Print(LT_NONE, "Enabled features: ");
 8005892:	4952      	ldr	r1, [pc, #328]	; (80059dc <cliFeature+0x160>)
 8005894:	2000      	movs	r0, #0
 8005896:	f00d fdef 	bl	8013478 <pifLog_Print>
        for (i = 0; ; i++) {
 800589a:	2300      	movs	r3, #0
 800589c:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 800589e:	4a50      	ldr	r2, [pc, #320]	; (80059e0 <cliFeature+0x164>)
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d015      	beq.n	80058d6 <cliFeature+0x5a>
                break;
            if (mask & (1 << i))
 80058aa:	2201      	movs	r2, #1
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	461a      	mov	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4013      	ands	r3, r2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d008      	beq.n	80058ce <cliFeature+0x52>
                pifLog_Printf(LT_NONE, "%s ", featureNames[i]);
 80058bc:	4a48      	ldr	r2, [pc, #288]	; (80059e0 <cliFeature+0x164>)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c4:	461a      	mov	r2, r3
 80058c6:	4947      	ldr	r1, [pc, #284]	; (80059e4 <cliFeature+0x168>)
 80058c8:	2000      	movs	r0, #0
 80058ca:	f00d fe63 	bl	8013594 <pifLog_Printf>
        for (i = 0; ; i++) {
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	3301      	adds	r3, #1
 80058d2:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 80058d4:	e7e3      	b.n	800589e <cliFeature+0x22>
                break;
 80058d6:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 80058d8:	4943      	ldr	r1, [pc, #268]	; (80059e8 <cliFeature+0x16c>)
 80058da:	2000      	movs	r0, #0
 80058dc:	f00d fdcc 	bl	8013478 <pifLog_Print>
 80058e0:	e076      	b.n	80059d0 <cliFeature+0x154>
    } else if (strcasecmp(argv[1], "list") == 0) {
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	3304      	adds	r3, #4
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4940      	ldr	r1, [pc, #256]	; (80059ec <cliFeature+0x170>)
 80058ea:	4618      	mov	r0, r3
 80058ec:	f01c fb88 	bl	8022000 <strcasecmp>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d11e      	bne.n	8005934 <cliFeature+0xb8>
        pifLog_Print(LT_NONE, "Available features: ");
 80058f6:	493e      	ldr	r1, [pc, #248]	; (80059f0 <cliFeature+0x174>)
 80058f8:	2000      	movs	r0, #0
 80058fa:	f00d fdbd 	bl	8013478 <pifLog_Print>
        for (i = 0; ; i++) {
 80058fe:	2300      	movs	r3, #0
 8005900:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 8005902:	4a37      	ldr	r2, [pc, #220]	; (80059e0 <cliFeature+0x164>)
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00c      	beq.n	8005928 <cliFeature+0xac>
                break;
            pifLog_Printf(LT_NONE, "%s ", featureNames[i]);
 800590e:	4a34      	ldr	r2, [pc, #208]	; (80059e0 <cliFeature+0x164>)
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005916:	461a      	mov	r2, r3
 8005918:	4932      	ldr	r1, [pc, #200]	; (80059e4 <cliFeature+0x168>)
 800591a:	2000      	movs	r0, #0
 800591c:	f00d fe3a 	bl	8013594 <pifLog_Printf>
        for (i = 0; ; i++) {
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	3301      	adds	r3, #1
 8005924:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 8005926:	e7ec      	b.n	8005902 <cliFeature+0x86>
                break;
 8005928:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 800592a:	492f      	ldr	r1, [pc, #188]	; (80059e8 <cliFeature+0x16c>)
 800592c:	2000      	movs	r0, #0
 800592e:	f00d fda3 	bl	8013478 <pifLog_Print>
 8005932:	e04d      	b.n	80059d0 <cliFeature+0x154>
    } else {
        bool remove = false;
 8005934:	2300      	movs	r3, #0
 8005936:	74fb      	strb	r3, [r7, #19]
        if (argv[1][0] == '-') {
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	3304      	adds	r3, #4
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b2d      	cmp	r3, #45	; 0x2d
 8005942:	d101      	bne.n	8005948 <cliFeature+0xcc>
            // remove feature
            remove = true;
 8005944:	2301      	movs	r3, #1
 8005946:	74fb      	strb	r3, [r7, #19]
        }

        for (i = 0; ; i++) {
 8005948:	2300      	movs	r3, #0
 800594a:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL) {
 800594c:	4a24      	ldr	r2, [pc, #144]	; (80059e0 <cliFeature+0x164>)
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d104      	bne.n	8005962 <cliFeature+0xe6>
                pifLog_Print(LT_NONE, "Invalid feature name...\r\n");
 8005958:	4926      	ldr	r1, [pc, #152]	; (80059f4 <cliFeature+0x178>)
 800595a:	2000      	movs	r0, #0
 800595c:	f00d fd8c 	bl	8013478 <pifLog_Print>
                break;
 8005960:	e036      	b.n	80059d0 <cliFeature+0x154>
            }
            if (strcasecmp(argv[1] + 1, featureNames[i]) == 0) {
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	3304      	adds	r3, #4
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	491d      	ldr	r1, [pc, #116]	; (80059e0 <cliFeature+0x164>)
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005972:	4619      	mov	r1, r3
 8005974:	4610      	mov	r0, r2
 8005976:	f01c fb43 	bl	8022000 <strcasecmp>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d123      	bne.n	80059c8 <cliFeature+0x14c>
                if (remove) {
 8005980:	7cfb      	ldrb	r3, [r7, #19]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00b      	beq.n	800599e <cliFeature+0x122>
                    featureClear(1 << i);
 8005986:	2201      	movs	r2, #1
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	4618      	mov	r0, r3
 8005990:	f001 fb52 	bl	8007038 <featureClear>
                    pifLog_Print(LT_NONE, "Disabled ");
 8005994:	4918      	ldr	r1, [pc, #96]	; (80059f8 <cliFeature+0x17c>)
 8005996:	2000      	movs	r0, #0
 8005998:	f00d fd6e 	bl	8013478 <pifLog_Print>
 800599c:	e00a      	b.n	80059b4 <cliFeature+0x138>
                } else {
                    featureSet(1 << i);
 800599e:	2201      	movs	r2, #1
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	fa02 f303 	lsl.w	r3, r2, r3
 80059a6:	4618      	mov	r0, r3
 80059a8:	f001 fb34 	bl	8007014 <featureSet>
                    pifLog_Print(LT_NONE, "Enabled ");
 80059ac:	4913      	ldr	r1, [pc, #76]	; (80059fc <cliFeature+0x180>)
 80059ae:	2000      	movs	r0, #0
 80059b0:	f00d fd62 	bl	8013478 <pifLog_Print>
                }
                pifLog_Printf(LT_NONE, "%s\r\n", featureNames[i]);
 80059b4:	4a0a      	ldr	r2, [pc, #40]	; (80059e0 <cliFeature+0x164>)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059bc:	461a      	mov	r2, r3
 80059be:	4910      	ldr	r1, [pc, #64]	; (8005a00 <cliFeature+0x184>)
 80059c0:	2000      	movs	r0, #0
 80059c2:	f00d fde7 	bl	8013594 <pifLog_Printf>
                break;
 80059c6:	e003      	b.n	80059d0 <cliFeature+0x154>
        for (i = 0; ; i++) {
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	3301      	adds	r3, #1
 80059cc:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL) {
 80059ce:	e7bd      	b.n	800594c <cliFeature+0xd0>
            }
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	08025ec4 	.word	0x08025ec4
 80059e0:	08026c18 	.word	0x08026c18
 80059e4:	08025ed8 	.word	0x08025ed8
 80059e8:	080259c4 	.word	0x080259c4
 80059ec:	08025edc 	.word	0x08025edc
 80059f0:	08025ee4 	.word	0x08025ee4
 80059f4:	08025efc 	.word	0x08025efc
 80059f8:	08025f18 	.word	0x08025f18
 80059fc:	08025f24 	.word	0x08025f24
 8005a00:	080259a4 	.word	0x080259a4

08005a04 <cliGpsPassthrough>:

#ifdef GPS
static int cliGpsPassthrough(int argc, char *argv[])
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;

    switch (gpsSetPassthrough()) {
 8005a0e:	f003 fa35 	bl	8008e7c <gpsSetPassthrough>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <cliGpsPassthrough+0x1a>
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d005      	beq.n	8005a28 <cliGpsPassthrough+0x24>
 8005a1c:	e009      	b.n	8005a32 <cliGpsPassthrough+0x2e>
    case 0:
        pifLog_Print(LT_NONE, "Disabling GPS passthrough...\r\n");
 8005a1e:	490a      	ldr	r1, [pc, #40]	; (8005a48 <cliGpsPassthrough+0x44>)
 8005a20:	2000      	movs	r0, #0
 8005a22:	f00d fd29 	bl	8013478 <pifLog_Print>
        break;
 8005a26:	e009      	b.n	8005a3c <cliGpsPassthrough+0x38>

    case 1:
        pifLog_Print(LT_NONE, "Enabling GPS passthrough...\r\n");
 8005a28:	4908      	ldr	r1, [pc, #32]	; (8005a4c <cliGpsPassthrough+0x48>)
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	f00d fd24 	bl	8013478 <pifLog_Print>
        break;
 8005a30:	e004      	b.n	8005a3c <cliGpsPassthrough+0x38>

    default:
        pifLog_Print(LT_NONE, "Error: Enable and plug in GPS first\r\n");
 8005a32:	4907      	ldr	r1, [pc, #28]	; (8005a50 <cliGpsPassthrough+0x4c>)
 8005a34:	2000      	movs	r0, #0
 8005a36:	f00d fd1f 	bl	8013478 <pifLog_Print>
        break;
 8005a3a:	bf00      	nop
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	08025f30 	.word	0x08025f30
 8005a4c:	08025f50 	.word	0x08025f50
 8005a50:	08025f70 	.word	0x08025f70

08005a54 <cliMap>:
#endif

static int cliMap(int argc, char *argv[])
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
    uint32_t len;
    uint32_t i;
    char out[9];

    if (argc < 2) return PIF_LOG_CMD_TOO_FEW_ARGS;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	dc02      	bgt.n	8005a6a <cliMap+0x16>
 8005a64:	f06f 0302 	mvn.w	r3, #2
 8005a68:	e09d      	b.n	8005ba6 <cliMap+0x152>

    len = strlen(argv[1]);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7fa fbbb 	bl	80001ec <strlen>
 8005a76:	61b8      	str	r0, [r7, #24]

    if (len == mcfg.rc_channel_count) {
 8005a78:	4b4d      	ldr	r3, [pc, #308]	; (8005bb0 <cliMap+0x15c>)
 8005a7a:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005a7e:	461a      	mov	r2, r3
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d160      	bne.n	8005b48 <cliMap+0xf4>
        // uppercase it
        for (i = 0; i < mcfg.rc_channel_count; i++)
 8005a86:	2300      	movs	r3, #0
 8005a88:	61fb      	str	r3, [r7, #28]
 8005a8a:	e01d      	b.n	8005ac8 <cliMap+0x74>
            argv[1][i] = toupper((unsigned char)argv[1][i]);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	3304      	adds	r3, #4
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	4413      	add	r3, r2
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	75fb      	strb	r3, [r7, #23]
 8005a9a:	7dfb      	ldrb	r3, [r7, #23]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	4a45      	ldr	r2, [pc, #276]	; (8005bb4 <cliMap+0x160>)
 8005aa0:	4413      	add	r3, r2
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	f003 0303 	and.w	r3, r3, #3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d102      	bne.n	8005ab2 <cliMap+0x5e>
 8005aac:	7dfb      	ldrb	r3, [r7, #23]
 8005aae:	3b20      	subs	r3, #32
 8005ab0:	e000      	b.n	8005ab4 <cliMap+0x60>
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	3204      	adds	r2, #4
 8005ab8:	6811      	ldr	r1, [r2, #0]
 8005aba:	69fa      	ldr	r2, [r7, #28]
 8005abc:	440a      	add	r2, r1
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	7013      	strb	r3, [r2, #0]
        for (i = 0; i < mcfg.rc_channel_count; i++)
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	61fb      	str	r3, [r7, #28]
 8005ac8:	4b39      	ldr	r3, [pc, #228]	; (8005bb0 <cliMap+0x15c>)
 8005aca:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005ace:	461a      	mov	r2, r3
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d3da      	bcc.n	8005a8c <cliMap+0x38>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61fb      	str	r3, [r7, #28]
 8005ada:	e028      	b.n	8005b2e <cliMap+0xda>
            if (strchr(rcChannelLetters, argv[1][i]) && !strchr(argv[1] + i + 1, argv[1][i]))
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	4619      	mov	r1, r3
 8005aea:	4833      	ldr	r0, [pc, #204]	; (8005bb8 <cliMap+0x164>)
 8005aec:	f01c fab1 	bl	8022052 <strchr>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d015      	beq.n	8005b22 <cliMap+0xce>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	3304      	adds	r3, #4
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	3301      	adds	r3, #1
 8005b00:	18d0      	adds	r0, r2, r3
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	3304      	adds	r3, #4
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	4619      	mov	r1, r3
 8005b10:	f01c fa9f 	bl	8022052 <strchr>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d103      	bne.n	8005b22 <cliMap+0xce>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	e005      	b.n	8005b2e <cliMap+0xda>
                continue;
            pifLog_Print(LT_NONE, "Must be any order of AETR1234\r\n");
 8005b22:	4926      	ldr	r1, [pc, #152]	; (8005bbc <cliMap+0x168>)
 8005b24:	2000      	movs	r0, #0
 8005b26:	f00d fca7 	bl	8013478 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	e03b      	b.n	8005ba6 <cliMap+0x152>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 8005b2e:	4b20      	ldr	r3, [pc, #128]	; (8005bb0 <cliMap+0x15c>)
 8005b30:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005b34:	461a      	mov	r2, r3
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d3cf      	bcc.n	8005adc <cliMap+0x88>
        }
        parseRcChannels(argv[1]);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	3304      	adds	r3, #4
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fcc4 	bl	80064d0 <parseRcChannels>
    }
    pifLog_Print(LT_NONE, "Current assignment: ");
 8005b48:	491d      	ldr	r1, [pc, #116]	; (8005bc0 <cliMap+0x16c>)
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	f00d fc94 	bl	8013478 <pifLog_Print>
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005b50:	2300      	movs	r3, #0
 8005b52:	61fb      	str	r3, [r7, #28]
 8005b54:	e012      	b.n	8005b7c <cliMap+0x128>
        out[mcfg.rcmap[i]] = rcChannelLetters[i];
 8005b56:	4a16      	ldr	r2, [pc, #88]	; (8005bb0 <cliMap+0x15c>)
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	4619      	mov	r1, r3
 8005b64:	4a14      	ldr	r2, [pc, #80]	; (8005bb8 <cliMap+0x164>)
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	4413      	add	r3, r2
 8005b6a:	781a      	ldrb	r2, [r3, #0]
 8005b6c:	f101 0320 	add.w	r3, r1, #32
 8005b70:	443b      	add	r3, r7
 8005b72:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	61fb      	str	r3, [r7, #28]
 8005b7c:	4b0c      	ldr	r3, [pc, #48]	; (8005bb0 <cliMap+0x15c>)
 8005b7e:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005b82:	461a      	mov	r2, r3
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d3e5      	bcc.n	8005b56 <cliMap+0x102>
    out[i] = '\0';
 8005b8a:	f107 020c 	add.w	r2, r7, #12
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	4413      	add	r3, r2
 8005b92:	2200      	movs	r2, #0
 8005b94:	701a      	strb	r2, [r3, #0]
    pifLog_Printf(LT_NONE, "%s\r\n", out);
 8005b96:	f107 030c 	add.w	r3, r7, #12
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	4909      	ldr	r1, [pc, #36]	; (8005bc4 <cliMap+0x170>)
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	f00d fcf8 	bl	8013594 <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3720      	adds	r7, #32
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000bbc 	.word	0x20000bbc
 8005bb4:	08028224 	.word	0x08028224
 8005bb8:	08027888 	.word	0x08027888
 8005bbc:	08025f98 	.word	0x08025f98
 8005bc0:	08025fb8 	.word	0x08025fb8
 8005bc4:	080259a4 	.word	0x080259a4

08005bc8 <cliMixer>:

static int cliMixer(int argc, char *argv[])
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
    int i;

    if (argc == 1) {
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d10c      	bne.n	8005bf2 <cliMixer+0x2a>
        pifLog_Printf(LT_NONE, "Current mixer: %s\r\n", mixerNames[mcfg.mixerConfiguration - 1]);
 8005bd8:	4b47      	ldr	r3, [pc, #284]	; (8005cf8 <cliMixer+0x130>)
 8005bda:	795b      	ldrb	r3, [r3, #5]
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	4a47      	ldr	r2, [pc, #284]	; (8005cfc <cliMixer+0x134>)
 8005be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005be4:	461a      	mov	r2, r3
 8005be6:	4946      	ldr	r1, [pc, #280]	; (8005d00 <cliMixer+0x138>)
 8005be8:	2000      	movs	r0, #0
 8005bea:	f00d fcd3 	bl	8013594 <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e07d      	b.n	8005cee <cliMixer+0x126>
    } else if (strcasecmp(argv[1], "list") == 0) {
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4942      	ldr	r1, [pc, #264]	; (8005d04 <cliMixer+0x13c>)
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f01c fa00 	bl	8022000 <strcasecmp>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d11f      	bne.n	8005c46 <cliMixer+0x7e>
        pifLog_Print(LT_NONE, "Available mixers: ");
 8005c06:	4940      	ldr	r1, [pc, #256]	; (8005d08 <cliMixer+0x140>)
 8005c08:	2000      	movs	r0, #0
 8005c0a:	f00d fc35 	bl	8013478 <pifLog_Print>
        for (i = 0; ; i++) {
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
            if (mixerNames[i] == NULL)
 8005c12:	4a3a      	ldr	r2, [pc, #232]	; (8005cfc <cliMixer+0x134>)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00c      	beq.n	8005c38 <cliMixer+0x70>
                break;
            pifLog_Printf(LT_NONE, "%s ", mixerNames[i]);
 8005c1e:	4a37      	ldr	r2, [pc, #220]	; (8005cfc <cliMixer+0x134>)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c26:	461a      	mov	r2, r3
 8005c28:	4938      	ldr	r1, [pc, #224]	; (8005d0c <cliMixer+0x144>)
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	f00d fcb2 	bl	8013594 <pifLog_Printf>
        for (i = 0; ; i++) {
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3301      	adds	r3, #1
 8005c34:	60fb      	str	r3, [r7, #12]
            if (mixerNames[i] == NULL)
 8005c36:	e7ec      	b.n	8005c12 <cliMixer+0x4a>
                break;
 8005c38:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8005c3a:	4935      	ldr	r1, [pc, #212]	; (8005d10 <cliMixer+0x148>)
 8005c3c:	2000      	movs	r0, #0
 8005c3e:	f00d fc1b 	bl	8013478 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005c42:	2300      	movs	r3, #0
 8005c44:	e053      	b.n	8005cee <cliMixer+0x126>
    }

    for (i = 0; ; i++) {
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]
        if (mixerNames[i] == NULL) {
 8005c4a:	4a2c      	ldr	r2, [pc, #176]	; (8005cfc <cliMixer+0x134>)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d105      	bne.n	8005c62 <cliMixer+0x9a>
            pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 8005c56:	492f      	ldr	r1, [pc, #188]	; (8005d14 <cliMixer+0x14c>)
 8005c58:	2000      	movs	r0, #0
 8005c5a:	f00d fc0d 	bl	8013478 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	e045      	b.n	8005cee <cliMixer+0x126>
        }
        if (strcasecmp(argv[1], mixerNames[i]) == 0) {
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	3304      	adds	r3, #4
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	4924      	ldr	r1, [pc, #144]	; (8005cfc <cliMixer+0x134>)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c70:	4619      	mov	r1, r3
 8005c72:	4610      	mov	r0, r2
 8005c74:	f01c f9c4 	bl	8022000 <strcasecmp>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d131      	bne.n	8005ce2 <cliMixer+0x11a>
            mcfg.mixerConfiguration = i + 1;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	3301      	adds	r3, #1
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	4b1c      	ldr	r3, [pc, #112]	; (8005cf8 <cliMixer+0x130>)
 8005c88:	715a      	strb	r2, [r3, #5]
            pifLog_Printf(LT_NONE, "Mixer set to %s\r\n", mixerNames[i]);
 8005c8a:	4a1c      	ldr	r2, [pc, #112]	; (8005cfc <cliMixer+0x134>)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c92:	461a      	mov	r2, r3
 8005c94:	4920      	ldr	r1, [pc, #128]	; (8005d18 <cliMixer+0x150>)
 8005c96:	2000      	movs	r0, #0
 8005c98:	f00d fc7c 	bl	8013594 <pifLog_Printf>

            // Presets for planes. Not functional with current reset
            // Really Ugly Hack
            if (mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_AIRPLANE) {
 8005c9c:	4b16      	ldr	r3, [pc, #88]	; (8005cf8 <cliMixer+0x130>)
 8005c9e:	795b      	ldrb	r3, [r3, #5]
 8005ca0:	2b08      	cmp	r3, #8
 8005ca2:	d003      	beq.n	8005cac <cliMixer+0xe4>
 8005ca4:	4b14      	ldr	r3, [pc, #80]	; (8005cf8 <cliMixer+0x130>)
 8005ca6:	795b      	ldrb	r3, [r3, #5]
 8005ca8:	2b0e      	cmp	r3, #14
 8005caa:	d11e      	bne.n	8005cea <cliMixer+0x122>
                cfg.dynThrPID = 90;
 8005cac:	4b1b      	ldr	r3, [pc, #108]	; (8005d1c <cliMixer+0x154>)
 8005cae:	225a      	movs	r2, #90	; 0x5a
 8005cb0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                cfg.rcExpo8 = 0;
 8005cb4:	4b19      	ldr	r3, [pc, #100]	; (8005d1c <cliMixer+0x154>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2020 	strb.w	r2, [r3, #32]
                cfg.P8[PIDALT] = 30;
 8005cbc:	4b17      	ldr	r3, [pc, #92]	; (8005d1c <cliMixer+0x154>)
 8005cbe:	221e      	movs	r2, #30
 8005cc0:	711a      	strb	r2, [r3, #4]
                cfg.I8[PIDALT] = 20;
 8005cc2:	4b16      	ldr	r3, [pc, #88]	; (8005d1c <cliMixer+0x154>)
 8005cc4:	2214      	movs	r2, #20
 8005cc6:	739a      	strb	r2, [r3, #14]
                cfg.D8[PIDALT] = 45;
 8005cc8:	4b14      	ldr	r3, [pc, #80]	; (8005d1c <cliMixer+0x154>)
 8005cca:	222d      	movs	r2, #45	; 0x2d
 8005ccc:	761a      	strb	r2, [r3, #24]
                cfg.P8[PIDNAVR] = 30;
 8005cce:	4b13      	ldr	r3, [pc, #76]	; (8005d1c <cliMixer+0x154>)
 8005cd0:	221e      	movs	r2, #30
 8005cd2:	71da      	strb	r2, [r3, #7]
                cfg.I8[PIDNAVR] = 20;
 8005cd4:	4b11      	ldr	r3, [pc, #68]	; (8005d1c <cliMixer+0x154>)
 8005cd6:	2214      	movs	r2, #20
 8005cd8:	745a      	strb	r2, [r3, #17]
                cfg.D8[PIDNAVR] = 45;
 8005cda:	4b10      	ldr	r3, [pc, #64]	; (8005d1c <cliMixer+0x154>)
 8005cdc:	222d      	movs	r2, #45	; 0x2d
 8005cde:	76da      	strb	r2, [r3, #27]
            }
            break;
 8005ce0:	e003      	b.n	8005cea <cliMixer+0x122>
    for (i = 0; ; i++) {
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	60fb      	str	r3, [r7, #12]
        if (mixerNames[i] == NULL) {
 8005ce8:	e7af      	b.n	8005c4a <cliMixer+0x82>
            break;
 8005cea:	bf00      	nop
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000bbc 	.word	0x20000bbc
 8005cfc:	08026bb4 	.word	0x08026bb4
 8005d00:	08025fd0 	.word	0x08025fd0
 8005d04:	08025edc 	.word	0x08025edc
 8005d08:	08025fe4 	.word	0x08025fe4
 8005d0c:	08025ed8 	.word	0x08025ed8
 8005d10:	080259c4 	.word	0x080259c4
 8005d14:	080259d8 	.word	0x080259d8
 8005d18:	08025ff8 	.word	0x08025ff8
 8005d1c:	20001128 	.word	0x20001128

08005d20 <cliMotor>:

static int cliMotor(int argc, char *argv[])
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
    int motor_index = 0;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60fb      	str	r3, [r7, #12]
    int motor_value = 0;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60bb      	str	r3, [r7, #8]

    if (argc == 1) {
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d105      	bne.n	8005d44 <cliMotor+0x24>
        pifLog_Print(LT_NONE, "Usage:\r\nmotor index [value] - show [or set] motor value\r\n");
 8005d38:	4926      	ldr	r1, [pc, #152]	; (8005dd4 <cliMotor+0xb4>)
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	f00d fb9c 	bl	8013478 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005d40:	2300      	movs	r3, #0
 8005d42:	e043      	b.n	8005dcc <cliMotor+0xac>
    }

    if (argc < 3) {
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	dc0a      	bgt.n	8005d60 <cliMotor+0x40>
        pifLog_Printf(LT_NONE, "Motor %d is set at %d\r\n", motor_index, motor_disarmed[motor_index]);
 8005d4a:	4a23      	ldr	r2, [pc, #140]	; (8005dd8 <cliMotor+0xb8>)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4921      	ldr	r1, [pc, #132]	; (8005ddc <cliMotor+0xbc>)
 8005d56:	2000      	movs	r0, #0
 8005d58:	f00d fc1c 	bl	8013594 <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	e035      	b.n	8005dcc <cliMotor+0xac>
    }

    motor_index = atoi(argv[1]);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	3304      	adds	r3, #4
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f01b ffe8 	bl	8021d3c <atoi>
 8005d6c:	60f8      	str	r0, [r7, #12]
    motor_value = atoi(argv[2]);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	3308      	adds	r3, #8
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f01b ffe1 	bl	8021d3c <atoi>
 8005d7a:	60b8      	str	r0, [r7, #8]

    if (motor_index < 0 || motor_index >= MAX_MOTORS) {
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	db02      	blt.n	8005d88 <cliMotor+0x68>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2b0b      	cmp	r3, #11
 8005d86:	dd06      	ble.n	8005d96 <cliMotor+0x76>
        pifLog_Printf(LT_NONE, "No such motor, use a number [0, %d]\r\n", MAX_MOTORS);
 8005d88:	220c      	movs	r2, #12
 8005d8a:	4915      	ldr	r1, [pc, #84]	; (8005de0 <cliMotor+0xc0>)
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	f00d fc01 	bl	8013594 <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005d92:	2300      	movs	r3, #0
 8005d94:	e01a      	b.n	8005dcc <cliMotor+0xac>
    }

    if (motor_value < 1000 || motor_value > 2000) {
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d9c:	db03      	blt.n	8005da6 <cliMotor+0x86>
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005da4:	dd05      	ble.n	8005db2 <cliMotor+0x92>
        pifLog_Print(LT_NONE, "Invalid motor value, 1000..2000\r\n");
 8005da6:	490f      	ldr	r1, [pc, #60]	; (8005de4 <cliMotor+0xc4>)
 8005da8:	2000      	movs	r0, #0
 8005daa:	f00d fb65 	bl	8013478 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005dae:	2300      	movs	r3, #0
 8005db0:	e00c      	b.n	8005dcc <cliMotor+0xac>
    }

    pifLog_Printf(LT_NONE, "Setting motor %d to %d\r\n", motor_index, motor_value);
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	490c      	ldr	r1, [pc, #48]	; (8005de8 <cliMotor+0xc8>)
 8005db8:	2000      	movs	r0, #0
 8005dba:	f00d fbeb 	bl	8013594 <pifLog_Printf>
    motor_disarmed[motor_index] = motor_value;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	b219      	sxth	r1, r3
 8005dc2:	4a05      	ldr	r2, [pc, #20]	; (8005dd8 <cliMotor+0xb8>)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	return PIF_LOG_CMD_NO_ERROR;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	0802600c 	.word	0x0802600c
 8005dd8:	20001808 	.word	0x20001808
 8005ddc:	08026048 	.word	0x08026048
 8005de0:	08026060 	.word	0x08026060
 8005de4:	08026088 	.word	0x08026088
 8005de8:	080260ac 	.word	0x080260ac

08005dec <cliProfile>:

static int cliProfile(int argc, char *argv[])
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
    int i;

    if (argc == 1) {
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d108      	bne.n	8005e0e <cliProfile+0x22>
        pifLog_Printf(LT_NONE, "Current profile: %d\r\n", mcfg.current_profile);
 8005dfc:	4b13      	ldr	r3, [pc, #76]	; (8005e4c <cliProfile+0x60>)
 8005dfe:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8005e02:	461a      	mov	r2, r3
 8005e04:	4912      	ldr	r1, [pc, #72]	; (8005e50 <cliProfile+0x64>)
 8005e06:	2000      	movs	r0, #0
 8005e08:	f00d fbc4 	bl	8013594 <pifLog_Printf>
 8005e0c:	e019      	b.n	8005e42 <cliProfile+0x56>
    } else {
        i = atoi(argv[1]);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	3304      	adds	r3, #4
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f01b ff91 	bl	8021d3c <atoi>
 8005e1a:	60f8      	str	r0, [r7, #12]
        if (i >= 0 && i <= 2) {
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	db0f      	blt.n	8005e42 <cliProfile+0x56>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	dc0c      	bgt.n	8005e42 <cliProfile+0x56>
            mcfg.current_profile = i;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	4b07      	ldr	r3, [pc, #28]	; (8005e4c <cliProfile+0x60>)
 8005e2e:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            writeEEPROM(0, false);
 8005e32:	2100      	movs	r1, #0
 8005e34:	2000      	movs	r0, #0
 8005e36:	f000 fcf5 	bl	8006824 <writeEEPROM>
            cliProfile(1, NULL);
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	2001      	movs	r0, #1
 8005e3e:	f7ff ffd5 	bl	8005dec <cliProfile>
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	20000bbc 	.word	0x20000bbc
 8005e50:	080260c8 	.word	0x080260c8

08005e54 <cliSave>:

static int cliSave(int argc, char *argv[])
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Print(LT_NONE, "Saving...");
 8005e5e:	490b      	ldr	r1, [pc, #44]	; (8005e8c <cliSave+0x38>)
 8005e60:	2000      	movs	r0, #0
 8005e62:	f00d fb09 	bl	8013478 <pifLog_Print>
    writeEEPROM(0, true);
 8005e66:	2101      	movs	r1, #1
 8005e68:	2000      	movs	r0, #0
 8005e6a:	f000 fcdb 	bl	8006824 <writeEEPROM>
    pifLog_Print(LT_NONE, "\r\nRebooting...");
 8005e6e:	4908      	ldr	r1, [pc, #32]	; (8005e90 <cliSave+0x3c>)
 8005e70:	2000      	movs	r0, #0
 8005e72:	f00d fb01 	bl	8013478 <pifLog_Print>
    pif_Delay1ms(10);
 8005e76:	200a      	movs	r0, #10
 8005e78:	f00b fb38 	bl	80114ec <pif_Delay1ms>
    systemReset(false);
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	f7fc f8b1 	bl	8001fe4 <systemReset>
	return PIF_LOG_CMD_NO_ERROR;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	080260e0 	.word	0x080260e0
 8005e90:	080260ec 	.word	0x080260ec

08005e94 <cliPrintVar>:

static void cliPrintVar(const clivalue_t *var, uint32_t full)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
    int32_t value = 0;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	617b      	str	r3, [r7, #20]
    char buf[8];

    switch (var->type) {
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	791b      	ldrb	r3, [r3, #4]
 8005ea6:	2b05      	cmp	r3, #5
 8005ea8:	d864      	bhi.n	8005f74 <cliPrintVar+0xe0>
 8005eaa:	a201      	add	r2, pc, #4	; (adr r2, 8005eb0 <cliPrintVar+0x1c>)
 8005eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb0:	08005ec9 	.word	0x08005ec9
 8005eb4:	08005ed3 	.word	0x08005ed3
 8005eb8:	08005edf 	.word	0x08005edf
 8005ebc:	08005ee9 	.word	0x08005ee9
 8005ec0:	08005ef5 	.word	0x08005ef5
 8005ec4:	08005eff 	.word	0x08005eff
        case VAR_UINT8:
            value = *(uint8_t *)var->ptr;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	617b      	str	r3, [r7, #20]
            break;
 8005ed0:	e050      	b.n	8005f74 <cliPrintVar+0xe0>

        case VAR_INT8:
            value = *(int8_t *)var->ptr;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f993 3000 	ldrsb.w	r3, [r3]
 8005eda:	617b      	str	r3, [r7, #20]
            break;
 8005edc:	e04a      	b.n	8005f74 <cliPrintVar+0xe0>

        case VAR_UINT16:
            value = *(uint16_t *)var->ptr;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	617b      	str	r3, [r7, #20]
            break;
 8005ee6:	e045      	b.n	8005f74 <cliPrintVar+0xe0>

        case VAR_INT16:
            value = *(int16_t *)var->ptr;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ef0:	617b      	str	r3, [r7, #20]
            break;
 8005ef2:	e03f      	b.n	8005f74 <cliPrintVar+0xe0>

        case VAR_UINT32:
            value = *(uint32_t *)var->ptr;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	617b      	str	r3, [r7, #20]
            break;
 8005efc:	e03a      	b.n	8005f74 <cliPrintVar+0xe0>

        case VAR_FLOAT:
            pifLog_Printf(LT_NONE, "%s", ftoa(*(float *)var->ptr, buf));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	edd3 7a00 	vldr	s15, [r3]
 8005f06:	f107 030c 	add.w	r3, r7, #12
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8005f10:	f7fe fac4 	bl	800449c <ftoa>
 8005f14:	4603      	mov	r3, r0
 8005f16:	461a      	mov	r2, r3
 8005f18:	4921      	ldr	r1, [pc, #132]	; (8005fa0 <cliPrintVar+0x10c>)
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	f00d fb3a 	bl	8013594 <pifLog_Printf>
            if (full) {
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d037      	beq.n	8005f96 <cliPrintVar+0x102>
                pifLog_Printf(LT_NONE, " %s", ftoa((float)var->min, buf));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f32:	f107 030c 	add.w	r3, r7, #12
 8005f36:	4618      	mov	r0, r3
 8005f38:	eeb0 0a67 	vmov.f32	s0, s15
 8005f3c:	f7fe faae 	bl	800449c <ftoa>
 8005f40:	4603      	mov	r3, r0
 8005f42:	461a      	mov	r2, r3
 8005f44:	4917      	ldr	r1, [pc, #92]	; (8005fa4 <cliPrintVar+0x110>)
 8005f46:	2000      	movs	r0, #0
 8005f48:	f00d fb24 	bl	8013594 <pifLog_Printf>
                pifLog_Printf(LT_NONE, " %s", ftoa((float)var->max, buf));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	ee07 3a90 	vmov	s15, r3
 8005f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f58:	f107 030c 	add.w	r3, r7, #12
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8005f62:	f7fe fa9b 	bl	800449c <ftoa>
 8005f66:	4603      	mov	r3, r0
 8005f68:	461a      	mov	r2, r3
 8005f6a:	490e      	ldr	r1, [pc, #56]	; (8005fa4 <cliPrintVar+0x110>)
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	f00d fb11 	bl	8013594 <pifLog_Printf>
 8005f72:	e011      	b.n	8005f98 <cliPrintVar+0x104>
            }
            return; // return from case for float only
    }
    pifLog_Printf(LT_NONE, "%d", value);
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	490c      	ldr	r1, [pc, #48]	; (8005fa8 <cliPrintVar+0x114>)
 8005f78:	2000      	movs	r0, #0
 8005f7a:	f00d fb0b 	bl	8013594 <pifLog_Printf>
    if (full)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d009      	beq.n	8005f98 <cliPrintVar+0x104>
        pifLog_Printf(LT_NONE, " %d %d", var->min, var->max);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68da      	ldr	r2, [r3, #12]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	4907      	ldr	r1, [pc, #28]	; (8005fac <cliPrintVar+0x118>)
 8005f8e:	2000      	movs	r0, #0
 8005f90:	f00d fb00 	bl	8013594 <pifLog_Printf>
 8005f94:	e000      	b.n	8005f98 <cliPrintVar+0x104>
            return; // return from case for float only
 8005f96:	bf00      	nop
}
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	08025e04 	.word	0x08025e04
 8005fa4:	080260fc 	.word	0x080260fc
 8005fa8:	08025cb0 	.word	0x08025cb0
 8005fac:	08026100 	.word	0x08026100

08005fb0 <cliSetVar>:

static void cliSetVar(const clivalue_t *var, const int_float_value_t value)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
    switch (var->type) {
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	791b      	ldrb	r3, [r3, #4]
 8005fbe:	2b05      	cmp	r3, #5
 8005fc0:	d824      	bhi.n	800600c <cliSetVar+0x5c>
 8005fc2:	a201      	add	r2, pc, #4	; (adr r2, 8005fc8 <cliSetVar+0x18>)
 8005fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc8:	08005fe1 	.word	0x08005fe1
 8005fcc:	08005fe1 	.word	0x08005fe1
 8005fd0:	08005fed 	.word	0x08005fed
 8005fd4:	08005fed 	.word	0x08005fed
 8005fd8:	08005ff9 	.word	0x08005ff9
 8005fdc:	08006003 	.word	0x08006003
        case VAR_UINT8:
        case VAR_INT8:
            *(char *)var->ptr = (char)value.int_value;
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	701a      	strb	r2, [r3, #0]
            break;
 8005fea:	e00f      	b.n	800600c <cliSetVar+0x5c>

        case VAR_UINT16:
        case VAR_INT16:
            *(short *)var->ptr = (short)value.int_value;
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	b212      	sxth	r2, r2
 8005ff4:	801a      	strh	r2, [r3, #0]
            break;
 8005ff6:	e009      	b.n	800600c <cliSetVar+0x5c>

        case VAR_UINT32:
            *(int *)var->ptr = (int)value.int_value;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	601a      	str	r2, [r3, #0]
            break;
 8006000:	e004      	b.n	800600c <cliSetVar+0x5c>

        case VAR_FLOAT:
            *(float *)var->ptr = (float)value.float_value;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	601a      	str	r2, [r3, #0]
            break;
 800600a:	bf00      	nop
    }
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <cliSet>:

static int cliSet(int argc, char *argv[])
{
 8006018:	b5b0      	push	{r4, r5, r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
    uint32_t i;
    const clivalue_t *val;
    char *eqptr = NULL;
 8006022:	2300      	movs	r3, #0
 8006024:	61bb      	str	r3, [r7, #24]
    int32_t value = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	617b      	str	r3, [r7, #20]
    float valuef = 0;
 800602a:	f04f 0300 	mov.w	r3, #0
 800602e:	613b      	str	r3, [r7, #16]

    if (argc == 1 || (argc == 2 && argv[1][0] == '*')) {
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d008      	beq.n	8006048 <cliSet+0x30>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b02      	cmp	r3, #2
 800603a:	d137      	bne.n	80060ac <cliSet+0x94>
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	3304      	adds	r3, #4
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	2b2a      	cmp	r3, #42	; 0x2a
 8006046:	d131      	bne.n	80060ac <cliSet+0x94>
        pifLog_Print(LT_NONE, "Current settings: \r\n");
 8006048:	4988      	ldr	r1, [pc, #544]	; (800626c <cliSet+0x254>)
 800604a:	2000      	movs	r0, #0
 800604c:	f00d fa14 	bl	8013478 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 8006050:	2300      	movs	r3, #0
 8006052:	61fb      	str	r3, [r7, #28]
 8006054:	e026      	b.n	80060a4 <cliSet+0x8c>
            val = &valueTable[i];
 8006056:	69fa      	ldr	r2, [r7, #28]
 8006058:	4613      	mov	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4a83      	ldr	r2, [pc, #524]	; (8006270 <cliSet+0x258>)
 8006062:	4413      	add	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]
            pifLog_Printf(LT_NONE, "%s = ", valueTable[i].name);
 8006066:	4982      	ldr	r1, [pc, #520]	; (8006270 <cliSet+0x258>)
 8006068:	69fa      	ldr	r2, [r7, #28]
 800606a:	4613      	mov	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	440b      	add	r3, r1
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	497e      	ldr	r1, [pc, #504]	; (8006274 <cliSet+0x25c>)
 800607a:	2000      	movs	r0, #0
 800607c:	f00d fa8a 	bl	8013594 <pifLog_Printf>
            cliPrintVar(val, strlen(argv[1])); // when len is 1 (when * is passed as argument), it will print min/max values as well, for gui
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	3304      	adds	r3, #4
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4618      	mov	r0, r3
 8006088:	f7fa f8b0 	bl	80001ec <strlen>
 800608c:	4603      	mov	r3, r0
 800608e:	4619      	mov	r1, r3
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f7ff feff 	bl	8005e94 <cliPrintVar>
            pifLog_Print(LT_NONE, "\r\n");
 8006096:	4978      	ldr	r1, [pc, #480]	; (8006278 <cliSet+0x260>)
 8006098:	2000      	movs	r0, #0
 800609a:	f00d f9ed 	bl	8013478 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	3301      	adds	r3, #1
 80060a2:	61fb      	str	r3, [r7, #28]
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	2b8e      	cmp	r3, #142	; 0x8e
 80060a8:	d9d5      	bls.n	8006056 <cliSet+0x3e>
    if (argc == 1 || (argc == 2 && argv[1][0] == '*')) {
 80060aa:	e0da      	b.n	8006262 <cliSet+0x24a>
        }
    } else if ((eqptr = strstr(argv[1], "=")) != NULL) {
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	3304      	adds	r3, #4
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	213d      	movs	r1, #61	; 0x3d
 80060b4:	4618      	mov	r0, r3
 80060b6:	f01b ffcc 	bl	8022052 <strchr>
 80060ba:	61b8      	str	r0, [r7, #24]
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 8097 	beq.w	80061f2 <cliSet+0x1da>
        // has equal, set var
        eqptr++;
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	3301      	adds	r3, #1
 80060c8:	61bb      	str	r3, [r7, #24]
        value = atoi(eqptr);
 80060ca:	69b8      	ldr	r0, [r7, #24]
 80060cc:	f01b fe36 	bl	8021d3c <atoi>
 80060d0:	6178      	str	r0, [r7, #20]
        valuef = _atof(eqptr);
 80060d2:	69b8      	ldr	r0, [r7, #24]
 80060d4:	f7fe f8ee 	bl	80042b4 <_atof>
 80060d8:	ed87 0a04 	vstr	s0, [r7, #16]
        for (i = 0; i < VALUE_COUNT; i++) {
 80060dc:	2300      	movs	r3, #0
 80060de:	61fb      	str	r3, [r7, #28]
 80060e0:	e07d      	b.n	80061de <cliSet+0x1c6>
            val = &valueTable[i];
 80060e2:	69fa      	ldr	r2, [r7, #28]
 80060e4:	4613      	mov	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4a60      	ldr	r2, [pc, #384]	; (8006270 <cliSet+0x258>)
 80060ee:	4413      	add	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]
            if (strncasecmp(argv[1], valueTable[i].name, strlen(valueTable[i].name)) == 0) {
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	3304      	adds	r3, #4
 80060f6:	681c      	ldr	r4, [r3, #0]
 80060f8:	495d      	ldr	r1, [pc, #372]	; (8006270 <cliSet+0x258>)
 80060fa:	69fa      	ldr	r2, [r7, #28]
 80060fc:	4613      	mov	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	440b      	add	r3, r1
 8006106:	681d      	ldr	r5, [r3, #0]
 8006108:	4959      	ldr	r1, [pc, #356]	; (8006270 <cliSet+0x258>)
 800610a:	69fa      	ldr	r2, [r7, #28]
 800610c:	4613      	mov	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	440b      	add	r3, r1
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4618      	mov	r0, r3
 800611a:	f7fa f867 	bl	80001ec <strlen>
 800611e:	4603      	mov	r3, r0
 8006120:	461a      	mov	r2, r3
 8006122:	4629      	mov	r1, r5
 8006124:	4620      	mov	r0, r4
 8006126:	f01b ffa9 	bl	802207c <strncasecmp>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d153      	bne.n	80061d8 <cliSet+0x1c0>
                if (valuef >= valueTable[i].min && valuef <= valueTable[i].max) { // here we compare the float value since... it should work, RIGHT?
 8006130:	494f      	ldr	r1, [pc, #316]	; (8006270 <cliSet+0x258>)
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	440b      	add	r3, r1
 800613e:	330c      	adds	r3, #12
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	ee07 3a90 	vmov	s15, r3
 8006146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800614a:	ed97 7a04 	vldr	s14, [r7, #16]
 800614e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006156:	db39      	blt.n	80061cc <cliSet+0x1b4>
 8006158:	4945      	ldr	r1, [pc, #276]	; (8006270 <cliSet+0x258>)
 800615a:	69fa      	ldr	r2, [r7, #28]
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	440b      	add	r3, r1
 8006166:	3310      	adds	r3, #16
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	ee07 3a90 	vmov	s15, r3
 800616e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006172:	ed97 7a04 	vldr	s14, [r7, #16]
 8006176:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800617a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800617e:	d825      	bhi.n	80061cc <cliSet+0x1b4>
                    int_float_value_t tmp;
                    if (valueTable[i].type == VAR_FLOAT)
 8006180:	493b      	ldr	r1, [pc, #236]	; (8006270 <cliSet+0x258>)
 8006182:	69fa      	ldr	r2, [r7, #28]
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	440b      	add	r3, r1
 800618e:	3304      	adds	r3, #4
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	2b05      	cmp	r3, #5
 8006194:	d102      	bne.n	800619c <cliSet+0x184>
                        tmp.float_value = valuef;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	60bb      	str	r3, [r7, #8]
 800619a:	e001      	b.n	80061a0 <cliSet+0x188>
                    else
                        tmp.int_value = value;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	60bb      	str	r3, [r7, #8]
                    cliSetVar(val, tmp);
 80061a0:	68b9      	ldr	r1, [r7, #8]
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f7ff ff04 	bl	8005fb0 <cliSetVar>
                    pifLog_Printf(LT_NONE, "%s set to ", valueTable[i].name);
 80061a8:	4931      	ldr	r1, [pc, #196]	; (8006270 <cliSet+0x258>)
 80061aa:	69fa      	ldr	r2, [r7, #28]
 80061ac:	4613      	mov	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	461a      	mov	r2, r3
 80061ba:	4930      	ldr	r1, [pc, #192]	; (800627c <cliSet+0x264>)
 80061bc:	2000      	movs	r0, #0
 80061be:	f00d f9e9 	bl	8013594 <pifLog_Printf>
                    cliPrintVar(val, 0);
 80061c2:	2100      	movs	r1, #0
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f7ff fe65 	bl	8005e94 <cliPrintVar>
                if (valuef >= valueTable[i].min && valuef <= valueTable[i].max) { // here we compare the float value since... it should work, RIGHT?
 80061ca:	e003      	b.n	80061d4 <cliSet+0x1bc>
                } else {
                    pifLog_Print(LT_NONE, "ERR: Value assignment out of range\r\n");
 80061cc:	492c      	ldr	r1, [pc, #176]	; (8006280 <cliSet+0x268>)
 80061ce:	2000      	movs	r0, #0
 80061d0:	f00d f952 	bl	8013478 <pifLog_Print>
                }
                return PIF_LOG_CMD_NO_ERROR;
 80061d4:	2300      	movs	r3, #0
 80061d6:	e045      	b.n	8006264 <cliSet+0x24c>
        for (i = 0; i < VALUE_COUNT; i++) {
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	3301      	adds	r3, #1
 80061dc:	61fb      	str	r3, [r7, #28]
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	2b8e      	cmp	r3, #142	; 0x8e
 80061e2:	f67f af7e 	bls.w	80060e2 <cliSet+0xca>
            }
        }
        pifLog_Print(LT_NONE, "ERR: Unknown variable name\r\n");
 80061e6:	4927      	ldr	r1, [pc, #156]	; (8006284 <cliSet+0x26c>)
 80061e8:	2000      	movs	r0, #0
 80061ea:	f00d f945 	bl	8013478 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 80061ee:	2300      	movs	r3, #0
 80061f0:	e038      	b.n	8006264 <cliSet+0x24c>
    } else {
        // no equals, check for matching variables.
        for (i = 0; i < VALUE_COUNT; i++) {
 80061f2:	2300      	movs	r3, #0
 80061f4:	61fb      	str	r3, [r7, #28]
 80061f6:	e031      	b.n	800625c <cliSet+0x244>
            if (strstr(valueTable[i].name, argv[1])) {
 80061f8:	491d      	ldr	r1, [pc, #116]	; (8006270 <cliSet+0x258>)
 80061fa:	69fa      	ldr	r2, [r7, #28]
 80061fc:	4613      	mov	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	440b      	add	r3, r1
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	3304      	adds	r3, #4
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4619      	mov	r1, r3
 8006210:	4610      	mov	r0, r2
 8006212:	f01b ff68 	bl	80220e6 <strstr>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d01c      	beq.n	8006256 <cliSet+0x23e>
                val = &valueTable[i];
 800621c:	69fa      	ldr	r2, [r7, #28]
 800621e:	4613      	mov	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4a12      	ldr	r2, [pc, #72]	; (8006270 <cliSet+0x258>)
 8006228:	4413      	add	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]
                pifLog_Printf(LT_NONE, "%s = ", valueTable[i].name);
 800622c:	4910      	ldr	r1, [pc, #64]	; (8006270 <cliSet+0x258>)
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	4613      	mov	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	440b      	add	r3, r1
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	461a      	mov	r2, r3
 800623e:	490d      	ldr	r1, [pc, #52]	; (8006274 <cliSet+0x25c>)
 8006240:	2000      	movs	r0, #0
 8006242:	f00d f9a7 	bl	8013594 <pifLog_Printf>
                cliPrintVar(val, 0);
 8006246:	2100      	movs	r1, #0
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f7ff fe23 	bl	8005e94 <cliPrintVar>
                pifLog_Print(LT_NONE, "\r\n");
 800624e:	490a      	ldr	r1, [pc, #40]	; (8006278 <cliSet+0x260>)
 8006250:	2000      	movs	r0, #0
 8006252:	f00d f911 	bl	8013478 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	3301      	adds	r3, #1
 800625a:	61fb      	str	r3, [r7, #28]
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	2b8e      	cmp	r3, #142	; 0x8e
 8006260:	d9ca      	bls.n	80061f8 <cliSet+0x1e0>
            }
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3720      	adds	r7, #32
 8006268:	46bd      	mov	sp, r7
 800626a:	bdb0      	pop	{r4, r5, r7, pc}
 800626c:	08026108 	.word	0x08026108
 8006270:	08026d5c 	.word	0x08026d5c
 8006274:	08026120 	.word	0x08026120
 8006278:	080259c4 	.word	0x080259c4
 800627c:	08026128 	.word	0x08026128
 8006280:	08026134 	.word	0x08026134
 8006284:	0802615c 	.word	0x0802615c

08006288 <cliStatus>:

static int cliStatus(int argc, char *argv[])
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af02      	add	r7, sp, #8
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    uint8_t i;
    uint32_t mask;

    pifLog_Printf(LT_NONE, "System Uptime: %ld seconds, Voltage: %d * 0.1V (%dS battery)\r\n",
 8006292:	4b4c      	ldr	r3, [pc, #304]	; (80063c4 <cliStatus+0x13c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a4c      	ldr	r2, [pc, #304]	; (80063c8 <cliStatus+0x140>)
 8006298:	fba2 2303 	umull	r2, r3, r2, r3
 800629c:	099a      	lsrs	r2, r3, #6
 800629e:	4b4b      	ldr	r3, [pc, #300]	; (80063cc <cliStatus+0x144>)
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	4619      	mov	r1, r3
 80062a4:	4b4a      	ldr	r3, [pc, #296]	; (80063d0 <cliStatus+0x148>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	460b      	mov	r3, r1
 80062ac:	4949      	ldr	r1, [pc, #292]	; (80063d4 <cliStatus+0x14c>)
 80062ae:	2000      	movs	r0, #0
 80062b0:	f00d f970 	bl	8013594 <pifLog_Printf>
           pif_cumulative_timer1ms / 1000, vbat, batteryCellCount);
    mask = sensorsMask();
 80062b4:	f000 fe8c 	bl	8006fd0 <sensorsMask>
 80062b8:	60b8      	str	r0, [r7, #8]

    pifLog_Printf(LT_NONE, "Hardware: %s @ %ldMHz, detected sensors: ", g_board_name, (g_core_clock / 1000000));
 80062ba:	4b47      	ldr	r3, [pc, #284]	; (80063d8 <cliStatus+0x150>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a47      	ldr	r2, [pc, #284]	; (80063dc <cliStatus+0x154>)
 80062c0:	fba2 2303 	umull	r2, r3, r2, r3
 80062c4:	0c9b      	lsrs	r3, r3, #18
 80062c6:	4a46      	ldr	r2, [pc, #280]	; (80063e0 <cliStatus+0x158>)
 80062c8:	4946      	ldr	r1, [pc, #280]	; (80063e4 <cliStatus+0x15c>)
 80062ca:	2000      	movs	r0, #0
 80062cc:	f00d f962 	bl	8013594 <pifLog_Printf>
    for (i = 0; ; i++) {
 80062d0:	2300      	movs	r3, #0
 80062d2:	73fb      	strb	r3, [r7, #15]
        if (sensorNames[i] == NULL)
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
 80062d6:	4a44      	ldr	r2, [pc, #272]	; (80063e8 <cliStatus+0x160>)
 80062d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d015      	beq.n	800630c <cliStatus+0x84>
            break;
        if (mask & (1 << i))
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
 80062e2:	2201      	movs	r2, #1
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	461a      	mov	r2, r3
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	4013      	ands	r3, r2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d008      	beq.n	8006304 <cliStatus+0x7c>
            pifLog_Printf(LT_NONE, "%s ", sensorNames[i]);
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
 80062f4:	4a3c      	ldr	r2, [pc, #240]	; (80063e8 <cliStatus+0x160>)
 80062f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062fa:	461a      	mov	r2, r3
 80062fc:	493b      	ldr	r1, [pc, #236]	; (80063ec <cliStatus+0x164>)
 80062fe:	2000      	movs	r0, #0
 8006300:	f00d f948 	bl	8013594 <pifLog_Printf>
    for (i = 0; ; i++) {
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	3301      	adds	r3, #1
 8006308:	73fb      	strb	r3, [r7, #15]
        if (sensorNames[i] == NULL)
 800630a:	e7e3      	b.n	80062d4 <cliStatus+0x4c>
            break;
 800630c:	bf00      	nop
    }
    pifLog_Print(LT_NONE, "\r\n");
 800630e:	4938      	ldr	r1, [pc, #224]	; (80063f0 <cliStatus+0x168>)
 8006310:	2000      	movs	r0, #0
 8006312:	f00d f8b1 	bl	8013478 <pifLog_Print>
    if (sensors(SENSOR_GYRO))
 8006316:	2001      	movs	r0, #1
 8006318:	f000 fe1e 	bl	8006f58 <sensors>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d006      	beq.n	8006330 <cliStatus+0xa8>
        pifLog_Printf(LT_NONE, "GYRO_HW: %s ", sensor_set.gyro.hardware);
 8006322:	4b34      	ldr	r3, [pc, #208]	; (80063f4 <cliStatus+0x16c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	4933      	ldr	r1, [pc, #204]	; (80063f8 <cliStatus+0x170>)
 800632a:	2000      	movs	r0, #0
 800632c:	f00d f932 	bl	8013594 <pifLog_Printf>
    if (sensors(SENSOR_ACC))
 8006330:	2002      	movs	r0, #2
 8006332:	f000 fe11 	bl	8006f58 <sensors>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d006      	beq.n	800634a <cliStatus+0xc2>
        pifLog_Printf(LT_NONE, "ACC_HW: %s ", sensor_set.acc.hardware);
 800633c:	4b2d      	ldr	r3, [pc, #180]	; (80063f4 <cliStatus+0x16c>)
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	461a      	mov	r2, r3
 8006342:	492e      	ldr	r1, [pc, #184]	; (80063fc <cliStatus+0x174>)
 8006344:	2000      	movs	r0, #0
 8006346:	f00d f925 	bl	8013594 <pifLog_Printf>
    if (sensors(SENSOR_MAG))
 800634a:	2008      	movs	r0, #8
 800634c:	f000 fe04 	bl	8006f58 <sensors>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d006      	beq.n	8006364 <cliStatus+0xdc>
        pifLog_Printf(LT_NONE, ", MAG_HW: %s ", sensor_set.mag.hardware);
 8006356:	4b27      	ldr	r3, [pc, #156]	; (80063f4 <cliStatus+0x16c>)
 8006358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800635a:	461a      	mov	r2, r3
 800635c:	4928      	ldr	r1, [pc, #160]	; (8006400 <cliStatus+0x178>)
 800635e:	2000      	movs	r0, #0
 8006360:	f00d f918 	bl	8013594 <pifLog_Printf>
    if (sensors(SENSOR_BARO))
 8006364:	2004      	movs	r0, #4
 8006366:	f000 fdf7 	bl	8006f58 <sensors>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d006      	beq.n	800637e <cliStatus+0xf6>
        pifLog_Printf(LT_NONE, ", BARO_HW: %s ", sensor_set.baro.hardware);
 8006370:	4b20      	ldr	r3, [pc, #128]	; (80063f4 <cliStatus+0x16c>)
 8006372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006374:	461a      	mov	r2, r3
 8006376:	4923      	ldr	r1, [pc, #140]	; (8006404 <cliStatus+0x17c>)
 8006378:	2000      	movs	r0, #0
 800637a:	f00d f90b 	bl	8013594 <pifLog_Printf>
    pifLog_Print(LT_NONE, "\r\n");
 800637e:	491c      	ldr	r1, [pc, #112]	; (80063f0 <cliStatus+0x168>)
 8006380:	2000      	movs	r0, #0
 8006382:	f00d f879 	bl	8013478 <pifLog_Print>

    pifLog_Printf(LT_NONE, "Cycle Time: %d, I2C Errors: %d, config size: %d\r\n", cycleTime, g_i2c_port.error_count, sizeof(master_t));
 8006386:	4b20      	ldr	r3, [pc, #128]	; (8006408 <cliStatus+0x180>)
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	4b1f      	ldr	r3, [pc, #124]	; (800640c <cliStatus+0x184>)
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	4619      	mov	r1, r3
 8006392:	f240 536c 	movw	r3, #1388	; 0x56c
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	460b      	mov	r3, r1
 800639a:	491d      	ldr	r1, [pc, #116]	; (8006410 <cliStatus+0x188>)
 800639c:	2000      	movs	r0, #0
 800639e:	f00d f8f9 	bl	8013594 <pifLog_Printf>

   	pifLog_Printf(LT_NONE, "PIF Timer 1ms count=%d\n", pifTimerManager_Count(&g_timer_1ms));
 80063a2:	481c      	ldr	r0, [pc, #112]	; (8006414 <cliStatus+0x18c>)
 80063a4:	f00e fcc1 	bl	8014d2a <pifTimerManager_Count>
 80063a8:	4603      	mov	r3, r0
 80063aa:	461a      	mov	r2, r3
 80063ac:	491a      	ldr	r1, [pc, #104]	; (8006418 <cliStatus+0x190>)
 80063ae:	2000      	movs	r0, #0
 80063b0:	f00d f8f0 	bl	8013594 <pifLog_Printf>

    cliStatusCallback();
 80063b4:	f000 f872 	bl	800649c <cliStatusCallback>

	return PIF_LOG_CMD_NO_ERROR;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	200020e0 	.word	0x200020e0
 80063c8:	10624dd3 	.word	0x10624dd3
 80063cc:	200019b0 	.word	0x200019b0
 80063d0:	20000054 	.word	0x20000054
 80063d4:	0802617c 	.word	0x0802617c
 80063d8:	20001978 	.word	0x20001978
 80063dc:	431bde83 	.word	0x431bde83
 80063e0:	08026b38 	.word	0x08026b38
 80063e4:	080261bc 	.word	0x080261bc
 80063e8:	08026c64 	.word	0x08026c64
 80063ec:	08025ed8 	.word	0x08025ed8
 80063f0:	080259c4 	.word	0x080259c4
 80063f4:	20001cc0 	.word	0x20001cc0
 80063f8:	080261e8 	.word	0x080261e8
 80063fc:	080261f8 	.word	0x080261f8
 8006400:	08026204 	.word	0x08026204
 8006404:	08026214 	.word	0x08026214
 8006408:	200019ac 	.word	0x200019ac
 800640c:	20001b34 	.word	0x20001b34
 8006410:	08026224 	.word	0x08026224
 8006414:	20001b64 	.word	0x20001b64
 8006418:	08026258 	.word	0x08026258

0800641c <cliVersion>:

static int cliVersion(int argc, char *argv[])
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Printf(LT_NONE, "Afro32 CLI version 2.3 " __DATE__ " / " __TIME__);
 8006426:	4904      	ldr	r1, [pc, #16]	; (8006438 <cliVersion+0x1c>)
 8006428:	2000      	movs	r0, #0
 800642a:	f00d f8b3 	bl	8013594 <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3708      	adds	r7, #8
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	08026270 	.word	0x08026270

0800643c <cliInit>:

BOOL cliInit(PifComm* p_comm)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
    if (!cliMode) {
 8006444:	4b11      	ldr	r3, [pc, #68]	; (800648c <cliInit+0x50>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d119      	bne.n	8006480 <cliInit+0x44>
        cliMode = 1;
 800644c:	4b0f      	ldr	r3, [pc, #60]	; (800648c <cliInit+0x50>)
 800644e:	2201      	movs	r2, #1
 8006450:	701a      	strb	r2, [r3, #0]

#ifndef __PIF_NO_LOG__
        pifLog_DetachComm();
 8006452:	f00d f953 	bl	80136fc <pifLog_DetachComm>
#else
        pifLog_Init();
#endif
        if (!pifLog_AttachComm(p_comm)) return FALSE;
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f00d f92a 	bl	80136b0 <pifLog_AttachComm>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <cliInit+0x2a>
 8006462:	2300      	movs	r3, #0
 8006464:	e00d      	b.n	8006482 <cliInit+0x46>
        if (!pifLog_UseCommand(c_psCmdTable, "\r\n# ")) return FALSE;
 8006466:	490a      	ldr	r1, [pc, #40]	; (8006490 <cliInit+0x54>)
 8006468:	480a      	ldr	r0, [pc, #40]	; (8006494 <cliInit+0x58>)
 800646a:	f00c ffcb 	bl	8013404 <pifLog_UseCommand>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <cliInit+0x3c>
 8006474:	2300      	movs	r3, #0
 8006476:	e004      	b.n	8006482 <cliInit+0x46>
        pifLog_Print(LT_NONE, "\r\nEntering CLI Mode, type 'exit' to return, or 'help'\r\n");
 8006478:	4907      	ldr	r1, [pc, #28]	; (8006498 <cliInit+0x5c>)
 800647a:	2000      	movs	r0, #0
 800647c:	f00c fffc 	bl	8013478 <pifLog_Print>
    }
    return TRUE;
 8006480:	2301      	movs	r3, #1
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	20000b84 	.word	0x20000b84
 8006490:	080262a0 	.word	0x080262a0
 8006494:	08026c84 	.word	0x08026c84
 8006498:	080262a8 	.word	0x080262a8

0800649c <cliStatusCallback>:

__attribute__ ((weak)) void cliStatusCallback()
{
 800649c:	b480      	push	{r7}
 800649e:	af00      	add	r7, sp, #0

}
 80064a0:	bf00      	nop
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
	...

080064ac <initEEPROM>:
static void resetConf(void);

static PifStorage* p_storage;

bool initEEPROM(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
	p_storage = storageInit();
 80064b0:	f7fb fe36 	bl	8002120 <storageInit>
 80064b4:	4603      	mov	r3, r0
 80064b6:	4a05      	ldr	r2, [pc, #20]	; (80064cc <initEEPROM+0x20>)
 80064b8:	6013      	str	r3, [r2, #0]
	return p_storage != NULL;
 80064ba:	4b04      	ldr	r3, [pc, #16]	; (80064cc <initEEPROM+0x20>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	bf14      	ite	ne
 80064c2:	2301      	movne	r3, #1
 80064c4:	2300      	moveq	r3, #0
 80064c6:	b2db      	uxtb	r3, r3
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	20001264 	.word	0x20001264

080064d0 <parseRcChannels>:

void parseRcChannels(const char *input)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
    const char *c, *s;

    for (c = input; *c; c++) {
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	e018      	b.n	8006510 <parseRcChannels+0x40>
        s = strchr(rcChannelLetters, *c);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	4619      	mov	r1, r3
 80064e4:	480f      	ldr	r0, [pc, #60]	; (8006524 <parseRcChannels+0x54>)
 80064e6:	f01b fdb4 	bl	8022052 <strchr>
 80064ea:	60b8      	str	r0, [r7, #8]
        if (s)
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00b      	beq.n	800650a <parseRcChannels+0x3a>
            mcfg.rcmap[s - rcChannelLetters] = c - input;
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	1ad1      	subs	r1, r2, r3
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	4a0a      	ldr	r2, [pc, #40]	; (8006524 <parseRcChannels+0x54>)
 80064fc:	1a9b      	subs	r3, r3, r2
 80064fe:	b2c9      	uxtb	r1, r1
 8006500:	4a09      	ldr	r2, [pc, #36]	; (8006528 <parseRcChannels+0x58>)
 8006502:	4413      	add	r3, r2
 8006504:	460a      	mov	r2, r1
 8006506:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
    for (c = input; *c; c++) {
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	3301      	adds	r3, #1
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1e2      	bne.n	80064de <parseRcChannels+0xe>
    }
}
 8006518:	bf00      	nop
 800651a:	bf00      	nop
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	08027888 	.word	0x08027888
 8006528:	20000bbc 	.word	0x20000bbc

0800652c <validEEPROM>:

static uint8_t validEEPROM(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
    master_t *temp = NULL;
 8006532:	2300      	movs	r3, #0
 8006534:	607b      	str	r3, [r7, #4]
    const uint8_t *p;
    uint8_t chk = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	72fb      	strb	r3, [r7, #11]
	PifStorageDataInfoP p_data_info;

    temp = malloc(sizeof(master_t));
 800653a:	f240 506c 	movw	r0, #1388	; 0x56c
 800653e:	f01b fc33 	bl	8021da8 <malloc>
 8006542:	4603      	mov	r3, r0
 8006544:	607b      	str	r3, [r7, #4]
    if (!temp) return 0;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <validEEPROM+0x24>
 800654c:	2300      	movs	r3, #0
 800654e:	e04e      	b.n	80065ee <validEEPROM+0xc2>

    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 8006550:	4b29      	ldr	r3, [pc, #164]	; (80065f8 <validEEPROM+0xcc>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	214c      	movs	r1, #76	; 0x4c
 8006556:	4618      	mov	r0, r3
 8006558:	f013 fc5d 	bl	8019e16 <pifStorage_Open>
 800655c:	6038      	str	r0, [r7, #0]
    if (!p_data_info) goto fail;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d037      	beq.n	80065d4 <validEEPROM+0xa8>

    if (!pifStorage_Read(p_storage, (uint8_t*)temp, p_data_info, sizeof(master_t))) goto fail;
 8006564:	4b24      	ldr	r3, [pc, #144]	; (80065f8 <validEEPROM+0xcc>)
 8006566:	6818      	ldr	r0, [r3, #0]
 8006568:	f240 536c 	movw	r3, #1388	; 0x56c
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	f013 fc62 	bl	8019e38 <pifStorage_Read>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d02e      	beq.n	80065d8 <validEEPROM+0xac>

    // check version number
    if (EEPROM_CONF_VERSION != temp->version)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	224c      	movs	r2, #76	; 0x4c
 8006580:	4293      	cmp	r3, r2
 8006582:	d12b      	bne.n	80065dc <validEEPROM+0xb0>
        goto fail;

    // check size and magic numbers
    if (temp->size != sizeof(master_t) || temp->magic_be != 0xBE || temp->magic_ef != 0xEF)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	885b      	ldrh	r3, [r3, #2]
 8006588:	f240 526c 	movw	r2, #1388	; 0x56c
 800658c:	4293      	cmp	r3, r2
 800658e:	d127      	bne.n	80065e0 <validEEPROM+0xb4>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	791b      	ldrb	r3, [r3, #4]
 8006594:	2bbe      	cmp	r3, #190	; 0xbe
 8006596:	d123      	bne.n	80065e0 <validEEPROM+0xb4>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 356a 	ldrb.w	r3, [r3, #1386]	; 0x56a
 800659e:	2bef      	cmp	r3, #239	; 0xef
 80065a0:	d11e      	bne.n	80065e0 <validEEPROM+0xb4>
        goto fail;

    // verify integrity of temporary copy
    for (p = (const uint8_t *)temp; p < ((const uint8_t *)temp + sizeof(master_t)); p++)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	60fb      	str	r3, [r7, #12]
 80065a6:	e007      	b.n	80065b8 <validEEPROM+0x8c>
        chk ^= *p;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	781a      	ldrb	r2, [r3, #0]
 80065ac:	7afb      	ldrb	r3, [r7, #11]
 80065ae:	4053      	eors	r3, r2
 80065b0:	72fb      	strb	r3, [r7, #11]
    for (p = (const uint8_t *)temp; p < ((const uint8_t *)temp + sizeof(master_t)); p++)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3301      	adds	r3, #1
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d3f1      	bcc.n	80065a8 <validEEPROM+0x7c>

    // checksum failed
    if (chk != 0)
 80065c4:	7afb      	ldrb	r3, [r7, #11]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10c      	bne.n	80065e4 <validEEPROM+0xb8>
        goto fail;

    free(temp);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f01b fbf4 	bl	8021db8 <free>

    // looks good, let's roll!
    return 1;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e00c      	b.n	80065ee <validEEPROM+0xc2>
    if (!p_data_info) goto fail;
 80065d4:	bf00      	nop
 80065d6:	e006      	b.n	80065e6 <validEEPROM+0xba>
    if (!pifStorage_Read(p_storage, (uint8_t*)temp, p_data_info, sizeof(master_t))) goto fail;
 80065d8:	bf00      	nop
 80065da:	e004      	b.n	80065e6 <validEEPROM+0xba>
        goto fail;
 80065dc:	bf00      	nop
 80065de:	e002      	b.n	80065e6 <validEEPROM+0xba>
        goto fail;
 80065e0:	bf00      	nop
 80065e2:	e000      	b.n	80065e6 <validEEPROM+0xba>
        goto fail;
 80065e4:	bf00      	nop

fail:
    free(temp);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f01b fbe6 	bl	8021db8 <free>
    return 0;    
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20001264 	.word	0x20001264

080065fc <readEEPROM>:

void readEEPROM(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
	PifStorageDataInfoP p_data_info;

    // Sanity check
    if (!validEEPROM()) goto fail;
 8006602:	f7ff ff93 	bl	800652c <validEEPROM>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d030      	beq.n	800666e <readEEPROM+0x72>

    // Read flash
    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 800660c:	4b1d      	ldr	r3, [pc, #116]	; (8006684 <readEEPROM+0x88>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	214c      	movs	r1, #76	; 0x4c
 8006612:	4618      	mov	r0, r3
 8006614:	f013 fbff 	bl	8019e16 <pifStorage_Open>
 8006618:	6078      	str	r0, [r7, #4]
    if (!p_data_info) goto fail;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d028      	beq.n	8006672 <readEEPROM+0x76>

    if (!pifStorage_Read(p_storage, (uint8_t*)&mcfg, p_data_info, sizeof(master_t))) goto fail;
 8006620:	4b18      	ldr	r3, [pc, #96]	; (8006684 <readEEPROM+0x88>)
 8006622:	6818      	ldr	r0, [r3, #0]
 8006624:	f240 536c 	movw	r3, #1388	; 0x56c
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	4917      	ldr	r1, [pc, #92]	; (8006688 <readEEPROM+0x8c>)
 800662c:	f013 fc04 	bl	8019e38 <pifStorage_Read>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d01f      	beq.n	8006676 <readEEPROM+0x7a>

    // Copy current profile
    if (mcfg.current_profile > 2) // sanity check
 8006636:	4b14      	ldr	r3, [pc, #80]	; (8006688 <readEEPROM+0x8c>)
 8006638:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800663c:	2b02      	cmp	r3, #2
 800663e:	d903      	bls.n	8006648 <readEEPROM+0x4c>
        mcfg.current_profile = 0;
 8006640:	4b11      	ldr	r3, [pc, #68]	; (8006688 <readEEPROM+0x8c>)
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
    memcpy(&cfg, &mcfg.profile[mcfg.current_profile], sizeof(config_t));
 8006648:	4b0f      	ldr	r3, [pc, #60]	; (8006688 <readEEPROM+0x8c>)
 800664a:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800664e:	461a      	mov	r2, r3
 8006650:	f44f 739c 	mov.w	r3, #312	; 0x138
 8006654:	fb02 f303 	mul.w	r3, r2, r3
 8006658:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800665c:	4a0a      	ldr	r2, [pc, #40]	; (8006688 <readEEPROM+0x8c>)
 800665e:	4413      	add	r3, r2
 8006660:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006664:	4619      	mov	r1, r3
 8006666:	4809      	ldr	r0, [pc, #36]	; (800668c <readEEPROM+0x90>)
 8006668:	f01b fbae 	bl	8021dc8 <memcpy>
    return;
 800666c:	e007      	b.n	800667e <readEEPROM+0x82>
    if (!validEEPROM()) goto fail;
 800666e:	bf00      	nop
 8006670:	e002      	b.n	8006678 <readEEPROM+0x7c>
    if (!p_data_info) goto fail;
 8006672:	bf00      	nop
 8006674:	e000      	b.n	8006678 <readEEPROM+0x7c>
    if (!pifStorage_Read(p_storage, (uint8_t*)&mcfg, p_data_info, sizeof(master_t))) goto fail;
 8006676:	bf00      	nop

fail:    
    failureMode(10);
 8006678:	200a      	movs	r0, #10
 800667a:	f7fb fc82 	bl	8001f82 <failureMode>
}
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	20001264 	.word	0x20001264
 8006688:	20000bbc 	.word	0x20000bbc
 800668c:	20001128 	.word	0x20001128

08006690 <activateConfig>:

void activateConfig(void)
{
 8006690:	b5b0      	push	{r4, r5, r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
    uint8_t i;
    for (i = 0; i < PITCH_LOOKUP_LENGTH; i++)
 8006696:	2300      	movs	r3, #0
 8006698:	71fb      	strb	r3, [r7, #7]
 800669a:	e021      	b.n	80066e0 <activateConfig+0x50>
        lookupPitchRollRC[i] = (2500 + cfg.rcExpo8 * (i * i - 25)) * i * (int32_t)cfg.rcRate8 / 2500;
 800669c:	4b56      	ldr	r3, [pc, #344]	; (80067f8 <activateConfig+0x168>)
 800669e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066a2:	4619      	mov	r1, r3
 80066a4:	79fb      	ldrb	r3, [r7, #7]
 80066a6:	79fa      	ldrb	r2, [r7, #7]
 80066a8:	fb02 f303 	mul.w	r3, r2, r3
 80066ac:	3b19      	subs	r3, #25
 80066ae:	fb01 f303 	mul.w	r3, r1, r3
 80066b2:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 80066b6:	79fa      	ldrb	r2, [r7, #7]
 80066b8:	fb02 f303 	mul.w	r3, r2, r3
 80066bc:	4a4e      	ldr	r2, [pc, #312]	; (80067f8 <activateConfig+0x168>)
 80066be:	7fd2      	ldrb	r2, [r2, #31]
 80066c0:	fb02 f303 	mul.w	r3, r2, r3
 80066c4:	4a4d      	ldr	r2, [pc, #308]	; (80067fc <activateConfig+0x16c>)
 80066c6:	fb82 1203 	smull	r1, r2, r2, r3
 80066ca:	1292      	asrs	r2, r2, #10
 80066cc:	17db      	asrs	r3, r3, #31
 80066ce:	1ad2      	subs	r2, r2, r3
 80066d0:	79fb      	ldrb	r3, [r7, #7]
 80066d2:	b211      	sxth	r1, r2
 80066d4:	4a4a      	ldr	r2, [pc, #296]	; (8006800 <activateConfig+0x170>)
 80066d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < PITCH_LOOKUP_LENGTH; i++)
 80066da:	79fb      	ldrb	r3, [r7, #7]
 80066dc:	3301      	adds	r3, #1
 80066de:	71fb      	strb	r3, [r7, #7]
 80066e0:	79fb      	ldrb	r3, [r7, #7]
 80066e2:	2b06      	cmp	r3, #6
 80066e4:	d9da      	bls.n	800669c <activateConfig+0xc>

    for (i = 0; i < THROTTLE_LOOKUP_LENGTH; i++) {
 80066e6:	2300      	movs	r3, #0
 80066e8:	71fb      	strb	r3, [r7, #7]
 80066ea:	e076      	b.n	80067da <activateConfig+0x14a>
        int16_t tmp = 10 * i - cfg.thrMid8;
 80066ec:	79fb      	ldrb	r3, [r7, #7]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	461a      	mov	r2, r3
 80066f2:	0092      	lsls	r2, r2, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	4b3f      	ldr	r3, [pc, #252]	; (80067f8 <activateConfig+0x168>)
 80066fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006700:	b29b      	uxth	r3, r3
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	b29b      	uxth	r3, r3
 8006706:	80bb      	strh	r3, [r7, #4]
        uint8_t y = 1;
 8006708:	2301      	movs	r3, #1
 800670a:	71bb      	strb	r3, [r7, #6]
        if (tmp > 0)
 800670c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	dd05      	ble.n	8006720 <activateConfig+0x90>
            y = 100 - cfg.thrMid8;
 8006714:	4b38      	ldr	r3, [pc, #224]	; (80067f8 <activateConfig+0x168>)
 8006716:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800671a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800671e:	71bb      	strb	r3, [r7, #6]
        if (tmp < 0)
 8006720:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	da03      	bge.n	8006730 <activateConfig+0xa0>
            y = cfg.thrMid8;
 8006728:	4b33      	ldr	r3, [pc, #204]	; (80067f8 <activateConfig+0x168>)
 800672a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800672e:	71bb      	strb	r3, [r7, #6]
        lookupThrottleRC[i] = 10 * cfg.thrMid8 + tmp * (100 - cfg.thrExpo8 + (int32_t)cfg.thrExpo8 * (tmp * tmp) / (y * y)) / 10;
 8006730:	4b31      	ldr	r3, [pc, #196]	; (80067f8 <activateConfig+0x168>)
 8006732:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006736:	b29b      	uxth	r3, r3
 8006738:	461a      	mov	r2, r3
 800673a:	0092      	lsls	r2, r2, #2
 800673c:	4413      	add	r3, r2
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	b29a      	uxth	r2, r3
 8006742:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006746:	492c      	ldr	r1, [pc, #176]	; (80067f8 <activateConfig+0x168>)
 8006748:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 800674c:	f1c1 0064 	rsb	r0, r1, #100	; 0x64
 8006750:	4929      	ldr	r1, [pc, #164]	; (80067f8 <activateConfig+0x168>)
 8006752:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8006756:	460d      	mov	r5, r1
 8006758:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800675c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006760:	fb04 f101 	mul.w	r1, r4, r1
 8006764:	fb01 f405 	mul.w	r4, r1, r5
 8006768:	79b9      	ldrb	r1, [r7, #6]
 800676a:	79bd      	ldrb	r5, [r7, #6]
 800676c:	fb05 f101 	mul.w	r1, r5, r1
 8006770:	fb94 f1f1 	sdiv	r1, r4, r1
 8006774:	4401      	add	r1, r0
 8006776:	fb01 f303 	mul.w	r3, r1, r3
 800677a:	4922      	ldr	r1, [pc, #136]	; (8006804 <activateConfig+0x174>)
 800677c:	fb81 0103 	smull	r0, r1, r1, r3
 8006780:	1089      	asrs	r1, r1, #2
 8006782:	17db      	asrs	r3, r3, #31
 8006784:	1acb      	subs	r3, r1, r3
 8006786:	b29b      	uxth	r3, r3
 8006788:	4413      	add	r3, r2
 800678a:	b29a      	uxth	r2, r3
 800678c:	79fb      	ldrb	r3, [r7, #7]
 800678e:	b211      	sxth	r1, r2
 8006790:	4a1d      	ldr	r2, [pc, #116]	; (8006808 <activateConfig+0x178>)
 8006792:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        lookupThrottleRC[i] = mcfg.minthrottle + (int32_t)(mcfg.maxthrottle - mcfg.minthrottle) * lookupThrottleRC[i] / 1000; // [MINTHROTTLE;MAXTHROTTLE]
 8006796:	4b1d      	ldr	r3, [pc, #116]	; (800680c <activateConfig+0x17c>)
 8006798:	f8b3 2140 	ldrh.w	r2, [r3, #320]	; 0x140
 800679c:	4b1b      	ldr	r3, [pc, #108]	; (800680c <activateConfig+0x17c>)
 800679e:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 80067a2:	4619      	mov	r1, r3
 80067a4:	4b19      	ldr	r3, [pc, #100]	; (800680c <activateConfig+0x17c>)
 80067a6:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 80067aa:	1acb      	subs	r3, r1, r3
 80067ac:	79f9      	ldrb	r1, [r7, #7]
 80067ae:	4816      	ldr	r0, [pc, #88]	; (8006808 <activateConfig+0x178>)
 80067b0:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 80067b4:	fb01 f303 	mul.w	r3, r1, r3
 80067b8:	4915      	ldr	r1, [pc, #84]	; (8006810 <activateConfig+0x180>)
 80067ba:	fb81 0103 	smull	r0, r1, r1, r3
 80067be:	1189      	asrs	r1, r1, #6
 80067c0:	17db      	asrs	r3, r3, #31
 80067c2:	1acb      	subs	r3, r1, r3
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	4413      	add	r3, r2
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	79fb      	ldrb	r3, [r7, #7]
 80067cc:	b211      	sxth	r1, r2
 80067ce:	4a0e      	ldr	r2, [pc, #56]	; (8006808 <activateConfig+0x178>)
 80067d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < THROTTLE_LOOKUP_LENGTH; i++) {
 80067d4:	79fb      	ldrb	r3, [r7, #7]
 80067d6:	3301      	adds	r3, #1
 80067d8:	71fb      	strb	r3, [r7, #7]
 80067da:	79fb      	ldrb	r3, [r7, #7]
 80067dc:	2b0b      	cmp	r3, #11
 80067de:	d985      	bls.n	80066ec <activateConfig+0x5c>
    }

    setPIDController(cfg.pidController);
 80067e0:	4b05      	ldr	r3, [pc, #20]	; (80067f8 <activateConfig+0x168>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f006 fc2f 	bl	800d048 <setPIDController>
#ifdef GPS
    gpsSetPIDs();
 80067ea:	f002 fa7f 	bl	8008cec <gpsSetPIDs>
#endif
}
 80067ee:	bf00      	nop
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bdb0      	pop	{r4, r5, r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20001128 	.word	0x20001128
 80067fc:	68db8bad 	.word	0x68db8bad
 8006800:	200019f0 	.word	0x200019f0
 8006804:	66666667 	.word	0x66666667
 8006808:	20001a00 	.word	0x20001a00
 800680c:	20000bbc 	.word	0x20000bbc
 8006810:	10624dd3 	.word	0x10624dd3

08006814 <loadAndActivateConfig>:

void loadAndActivateConfig(void)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	af00      	add	r7, sp, #0
    readEEPROM();
 8006818:	f7ff fef0 	bl	80065fc <readEEPROM>
    activateConfig();
 800681c:	f7ff ff38 	bl	8006690 <activateConfig>
}
 8006820:	bf00      	nop
 8006822:	bd80      	pop	{r7, pc}

08006824 <writeEEPROM>:

void writeEEPROM(uint8_t b, uint8_t updateProfile)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	4603      	mov	r3, r0
 800682c:	460a      	mov	r2, r1
 800682e:	71fb      	strb	r3, [r7, #7]
 8006830:	4613      	mov	r3, r2
 8006832:	71bb      	strb	r3, [r7, #6]
    bool status = false;
 8006834:	2300      	movs	r3, #0
 8006836:	75fb      	strb	r3, [r7, #23]
    uint8_t chk = 0;
 8006838:	2300      	movs	r3, #0
 800683a:	75bb      	strb	r3, [r7, #22]
    const uint8_t *p;
	PifStorageDataInfoP p_data_info;

    // prepare checksum/version constants
    mcfg.version = EEPROM_CONF_VERSION;
 800683c:	224c      	movs	r2, #76	; 0x4c
 800683e:	4b36      	ldr	r3, [pc, #216]	; (8006918 <writeEEPROM+0xf4>)
 8006840:	701a      	strb	r2, [r3, #0]
    mcfg.size = sizeof(master_t);
 8006842:	4b35      	ldr	r3, [pc, #212]	; (8006918 <writeEEPROM+0xf4>)
 8006844:	f240 526c 	movw	r2, #1388	; 0x56c
 8006848:	805a      	strh	r2, [r3, #2]
    mcfg.magic_be = 0xBE;
 800684a:	4b33      	ldr	r3, [pc, #204]	; (8006918 <writeEEPROM+0xf4>)
 800684c:	22be      	movs	r2, #190	; 0xbe
 800684e:	711a      	strb	r2, [r3, #4]
    mcfg.magic_ef = 0xEF;
 8006850:	4b31      	ldr	r3, [pc, #196]	; (8006918 <writeEEPROM+0xf4>)
 8006852:	22ef      	movs	r2, #239	; 0xef
 8006854:	f883 256a 	strb.w	r2, [r3, #1386]	; 0x56a
    mcfg.chk = 0;
 8006858:	4b2f      	ldr	r3, [pc, #188]	; (8006918 <writeEEPROM+0xf4>)
 800685a:	2200      	movs	r2, #0
 800685c:	f883 256b 	strb.w	r2, [r3, #1387]	; 0x56b

    // when updateProfile = true, we copy contents of cfg to global configuration. when false, only profile number is updated, and then that profile is loaded on readEEPROM()
    if (updateProfile) {
 8006860:	79bb      	ldrb	r3, [r7, #6]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d011      	beq.n	800688a <writeEEPROM+0x66>
        // copy current in-memory profile to stored configuration
        memcpy(&mcfg.profile[mcfg.current_profile], &cfg, sizeof(config_t));
 8006866:	4b2c      	ldr	r3, [pc, #176]	; (8006918 <writeEEPROM+0xf4>)
 8006868:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800686c:	461a      	mov	r2, r3
 800686e:	f44f 739c 	mov.w	r3, #312	; 0x138
 8006872:	fb02 f303 	mul.w	r3, r2, r3
 8006876:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800687a:	4a27      	ldr	r2, [pc, #156]	; (8006918 <writeEEPROM+0xf4>)
 800687c:	4413      	add	r3, r2
 800687e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006882:	4926      	ldr	r1, [pc, #152]	; (800691c <writeEEPROM+0xf8>)
 8006884:	4618      	mov	r0, r3
 8006886:	f01b fa9f 	bl	8021dc8 <memcpy>
    }

    // recalculate checksum before writing
    for (p = (const uint8_t *)&mcfg; p < ((const uint8_t *)&mcfg + sizeof(master_t)); p++)
 800688a:	4b23      	ldr	r3, [pc, #140]	; (8006918 <writeEEPROM+0xf4>)
 800688c:	613b      	str	r3, [r7, #16]
 800688e:	e007      	b.n	80068a0 <writeEEPROM+0x7c>
        chk ^= *p;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	781a      	ldrb	r2, [r3, #0]
 8006894:	7dbb      	ldrb	r3, [r7, #22]
 8006896:	4053      	eors	r3, r2
 8006898:	75bb      	strb	r3, [r7, #22]
    for (p = (const uint8_t *)&mcfg; p < ((const uint8_t *)&mcfg + sizeof(master_t)); p++)
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	3301      	adds	r3, #1
 800689e:	613b      	str	r3, [r7, #16]
 80068a0:	4a1f      	ldr	r2, [pc, #124]	; (8006920 <writeEEPROM+0xfc>)
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d3f3      	bcc.n	8006890 <writeEEPROM+0x6c>
    mcfg.chk = chk;
 80068a8:	4a1b      	ldr	r2, [pc, #108]	; (8006918 <writeEEPROM+0xf4>)
 80068aa:	7dbb      	ldrb	r3, [r7, #22]
 80068ac:	f882 356b 	strb.w	r3, [r2, #1387]	; 0x56b

    // write it
    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 80068b0:	4b1c      	ldr	r3, [pc, #112]	; (8006924 <writeEEPROM+0x100>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	214c      	movs	r1, #76	; 0x4c
 80068b6:	4618      	mov	r0, r3
 80068b8:	f013 faad 	bl	8019e16 <pifStorage_Open>
 80068bc:	60f8      	str	r0, [r7, #12]
    if (p_data_info) {
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00c      	beq.n	80068de <writeEEPROM+0xba>
        if (pifStorage_Write(p_storage, p_data_info, (uint8_t*)&mcfg, sizeof(master_t))) status = true;
 80068c4:	4b17      	ldr	r3, [pc, #92]	; (8006924 <writeEEPROM+0x100>)
 80068c6:	6818      	ldr	r0, [r3, #0]
 80068c8:	f240 536c 	movw	r3, #1388	; 0x56c
 80068cc:	4a12      	ldr	r2, [pc, #72]	; (8006918 <writeEEPROM+0xf4>)
 80068ce:	68f9      	ldr	r1, [r7, #12]
 80068d0:	f013 fac5 	bl	8019e5e <pifStorage_Write>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <writeEEPROM+0xba>
 80068da:	2301      	movs	r3, #1
 80068dc:	75fb      	strb	r3, [r7, #23]
    }

    // Flash write failed - just die now
    if (!status || !validEEPROM()) {
 80068de:	7dfb      	ldrb	r3, [r7, #23]
 80068e0:	f083 0301 	eor.w	r3, r3, #1
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d104      	bne.n	80068f4 <writeEEPROM+0xd0>
 80068ea:	f7ff fe1f 	bl	800652c <validEEPROM>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d102      	bne.n	80068fa <writeEEPROM+0xd6>
        failureMode(10);
 80068f4:	200a      	movs	r0, #10
 80068f6:	f7fb fb44 	bl	8001f82 <failureMode>
    }

    // re-read written data
    loadAndActivateConfig();
 80068fa:	f7ff ff8b 	bl	8006814 <loadAndActivateConfig>
    if (b)
 80068fe:	79fb      	ldrb	r3, [r7, #7]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d004      	beq.n	800690e <writeEEPROM+0xea>
        blinkLED(15, 20, 1);
 8006904:	2201      	movs	r2, #1
 8006906:	2114      	movs	r1, #20
 8006908:	200f      	movs	r0, #15
 800690a:	f005 fb6b 	bl	800bfe4 <blinkLED>
}
 800690e:	bf00      	nop
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	20000bbc 	.word	0x20000bbc
 800691c:	20001128 	.word	0x20001128
 8006920:	20001128 	.word	0x20001128
 8006924:	20001264 	.word	0x20001264

08006928 <checkFirstTime>:

bool checkFirstTime(bool reset)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	4603      	mov	r3, r0
 8006930:	71fb      	strb	r3, [r7, #7]
    bool alloc = true;
 8006932:	2301      	movs	r3, #1
 8006934:	73fb      	strb	r3, [r7, #15]

	if (!pifStorage_IsFormat(p_storage)) {
 8006936:	4b24      	ldr	r3, [pc, #144]	; (80069c8 <checkFirstTime+0xa0>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4618      	mov	r0, r3
 800693c:	f013 fa3e 	bl	8019dbc <pifStorage_IsFormat>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10c      	bne.n	8006960 <checkFirstTime+0x38>
		if (!pifStorage_Format(p_storage)) return false;
 8006946:	4b20      	ldr	r3, [pc, #128]	; (80069c8 <checkFirstTime+0xa0>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4618      	mov	r0, r3
 800694c:	f013 fa43 	bl	8019dd6 <pifStorage_Format>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <checkFirstTime+0x32>
 8006956:	2300      	movs	r3, #0
 8006958:	e032      	b.n	80069c0 <checkFirstTime+0x98>
        alloc = false;
 800695a:	2300      	movs	r3, #0
 800695c:	73fb      	strb	r3, [r7, #15]
 800695e:	e00b      	b.n	8006978 <checkFirstTime+0x50>
	}
    else {
        alloc = pifStorage_Open(p_storage, STORAGE_ID) != NULL;
 8006960:	4b19      	ldr	r3, [pc, #100]	; (80069c8 <checkFirstTime+0xa0>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	214c      	movs	r1, #76	; 0x4c
 8006966:	4618      	mov	r0, r3
 8006968:	f013 fa55 	bl	8019e16 <pifStorage_Open>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	bf14      	ite	ne
 8006972:	2301      	movne	r3, #1
 8006974:	2300      	moveq	r3, #0
 8006976:	73fb      	strb	r3, [r7, #15]
    }
    if (!alloc) {
 8006978:	7bfb      	ldrb	r3, [r7, #15]
 800697a:	f083 0301 	eor.w	r3, r3, #1
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00e      	beq.n	80069a2 <checkFirstTime+0x7a>
		if (!pifStorage_Create(p_storage, STORAGE_ID, sizeof(master_t))) return false;
 8006984:	4b10      	ldr	r3, [pc, #64]	; (80069c8 <checkFirstTime+0xa0>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f240 526c 	movw	r2, #1388	; 0x56c
 800698c:	214c      	movs	r1, #76	; 0x4c
 800698e:	4618      	mov	r0, r3
 8006990:	f013 fa2e 	bl	8019df0 <pifStorage_Create>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <checkFirstTime+0x76>
 800699a:	2300      	movs	r3, #0
 800699c:	e010      	b.n	80069c0 <checkFirstTime+0x98>
        reset = true;
 800699e:	2301      	movs	r3, #1
 80069a0:	71fb      	strb	r3, [r7, #7]
    }
    // check the EEPROM integrity before resetting values
    if (!validEEPROM() || reset) {
 80069a2:	f7ff fdc3 	bl	800652c <validEEPROM>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <checkFirstTime+0x8a>
 80069ac:	79fb      	ldrb	r3, [r7, #7]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d005      	beq.n	80069be <checkFirstTime+0x96>
        resetConf();
 80069b2:	f000 f80b 	bl	80069cc <resetConf>
        // no need to memcpy profile again, we just did it in resetConf() above
        writeEEPROM(0, false);
 80069b6:	2100      	movs	r1, #0
 80069b8:	2000      	movs	r0, #0
 80069ba:	f7ff ff33 	bl	8006824 <writeEEPROM>
    }
    return true;
 80069be:	2301      	movs	r3, #1
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	20001264 	.word	0x20001264

080069cc <resetConf>:

// Default settings
static void resetConf(void)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
    int i;
    int8_t servoRates[8] = { 30, 30, 100, 100, 100, 100, 100, 100 };
 80069d2:	4ac7      	ldr	r2, [pc, #796]	; (8006cf0 <resetConf+0x324>)
 80069d4:	1d3b      	adds	r3, r7, #4
 80069d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80069da:	e883 0003 	stmia.w	r3, {r0, r1}

    // Clear all configuration
    memset(&mcfg, 0, sizeof(master_t));
 80069de:	f240 526c 	movw	r2, #1388	; 0x56c
 80069e2:	2100      	movs	r1, #0
 80069e4:	48c3      	ldr	r0, [pc, #780]	; (8006cf4 <resetConf+0x328>)
 80069e6:	f01b f9fd 	bl	8021de4 <memset>
    memset(&cfg, 0, sizeof(config_t));
 80069ea:	f44f 729c 	mov.w	r2, #312	; 0x138
 80069ee:	2100      	movs	r1, #0
 80069f0:	48c1      	ldr	r0, [pc, #772]	; (8006cf8 <resetConf+0x32c>)
 80069f2:	f01b f9f7 	bl	8021de4 <memset>

    mcfg.version = EEPROM_CONF_VERSION;
 80069f6:	224c      	movs	r2, #76	; 0x4c
 80069f8:	4bbe      	ldr	r3, [pc, #760]	; (8006cf4 <resetConf+0x328>)
 80069fa:	701a      	strb	r2, [r3, #0]
    mcfg.mixerConfiguration = MULTITYPE_QUADX;
 80069fc:	4bbd      	ldr	r3, [pc, #756]	; (8006cf4 <resetConf+0x328>)
 80069fe:	2203      	movs	r2, #3
 8006a00:	715a      	strb	r2, [r3, #5]
    featureClearAll();
 8006a02:	f000 fb2d 	bl	8007060 <featureClearAll>
    if (g_featureDefault) (*g_featureDefault)();
 8006a06:	4bbd      	ldr	r3, [pc, #756]	; (8006cfc <resetConf+0x330>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <resetConf+0x48>
 8006a0e:	4bbb      	ldr	r3, [pc, #748]	; (8006cfc <resetConf+0x330>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4798      	blx	r3

    // global settings
    mcfg.current_profile = 0;       // default profile
 8006a14:	4bb7      	ldr	r3, [pc, #732]	; (8006cf4 <resetConf+0x328>)
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
    mcfg.gyro_cmpf_factor = 600;    // default MWC
 8006a1c:	4bb5      	ldr	r3, [pc, #724]	; (8006cf4 <resetConf+0x328>)
 8006a1e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006a22:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
    mcfg.gyro_cmpfm_factor = 250;   // default MWC
 8006a26:	4bb3      	ldr	r3, [pc, #716]	; (8006cf4 <resetConf+0x328>)
 8006a28:	22fa      	movs	r2, #250	; 0xfa
 8006a2a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
    mcfg.gyro_lpf = 42;             // supported by all gyro drivers now. In case of ST gyro, will default to 32Hz instead
 8006a2e:	4bb1      	ldr	r3, [pc, #708]	; (8006cf4 <resetConf+0x328>)
 8006a30:	222a      	movs	r2, #42	; 0x2a
 8006a32:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
    mcfg.accZero[0] = 0;
 8006a36:	4baf      	ldr	r3, [pc, #700]	; (8006cf4 <resetConf+0x328>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
    mcfg.accZero[1] = 0;
 8006a3e:	4bad      	ldr	r3, [pc, #692]	; (8006cf4 <resetConf+0x328>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
    mcfg.accZero[2] = 0;
 8006a46:	4bab      	ldr	r3, [pc, #684]	; (8006cf4 <resetConf+0x328>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
    mcfg.gyro_align = IMUS_ALIGN_DEFAULT;
 8006a4e:	4ba9      	ldr	r3, [pc, #676]	; (8006cf4 <resetConf+0x328>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
    mcfg.acc_align = IMUS_ALIGN_DEFAULT;
 8006a56:	4ba7      	ldr	r3, [pc, #668]	; (8006cf4 <resetConf+0x328>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
    mcfg.mag_align = IMUS_ALIGN_DEFAULT;
 8006a5e:	4ba5      	ldr	r3, [pc, #660]	; (8006cf4 <resetConf+0x328>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
    mcfg.board_align_roll = 0;
 8006a66:	4ba3      	ldr	r3, [pc, #652]	; (8006cf4 <resetConf+0x328>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
    mcfg.board_align_pitch = 0;
 8006a6e:	4ba1      	ldr	r3, [pc, #644]	; (8006cf4 <resetConf+0x328>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
    mcfg.board_align_yaw = 0;
 8006a76:	4b9f      	ldr	r3, [pc, #636]	; (8006cf4 <resetConf+0x328>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
    mcfg.acc_hardware = 0;               // default/autodetect
 8006a7e:	4b9d      	ldr	r3, [pc, #628]	; (8006cf4 <resetConf+0x328>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
    mcfg.mag_hardware = 0;
 8006a86:	4b9b      	ldr	r3, [pc, #620]	; (8006cf4 <resetConf+0x328>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
    mcfg.max_angle_inclination = 500;    // 50 degrees
 8006a8e:	4b99      	ldr	r3, [pc, #612]	; (8006cf4 <resetConf+0x328>)
 8006a90:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006a94:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
    mcfg.yaw_control_direction = 1;
 8006a98:	4b96      	ldr	r3, [pc, #600]	; (8006cf4 <resetConf+0x328>)
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    mcfg.moron_threshold = 32;
 8006aa0:	4b94      	ldr	r3, [pc, #592]	; (8006cf4 <resetConf+0x328>)
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
    mcfg.currentscale = 400; // for Allegro ACS758LCB-100U (40mV/A)
 8006aa8:	4b92      	ldr	r3, [pc, #584]	; (8006cf4 <resetConf+0x328>)
 8006aaa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006aae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
    mcfg.vbatscale = 110;
 8006ab2:	4b90      	ldr	r3, [pc, #576]	; (8006cf4 <resetConf+0x328>)
 8006ab4:	226e      	movs	r2, #110	; 0x6e
 8006ab6:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
    mcfg.vbatmaxcellvoltage = 43;
 8006aba:	4b8e      	ldr	r3, [pc, #568]	; (8006cf4 <resetConf+0x328>)
 8006abc:	222b      	movs	r2, #43	; 0x2b
 8006abe:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
    mcfg.vbatmincellvoltage = 33;
 8006ac2:	4b8c      	ldr	r3, [pc, #560]	; (8006cf4 <resetConf+0x328>)
 8006ac4:	2221      	movs	r2, #33	; 0x21
 8006ac6:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
    mcfg.vbatwarningcellvoltage = 35;
 8006aca:	4b8a      	ldr	r3, [pc, #552]	; (8006cf4 <resetConf+0x328>)
 8006acc:	2223      	movs	r2, #35	; 0x23
 8006ace:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
    mcfg.power_adc_channel = 0;
 8006ad2:	4b88      	ldr	r3, [pc, #544]	; (8006cf4 <resetConf+0x328>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
    mcfg.serialrx_type = 0;
 8006ada:	4b86      	ldr	r3, [pc, #536]	; (8006cf4 <resetConf+0x328>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
    mcfg.spektrum_sat_bind = 0;
 8006ae2:	4b84      	ldr	r3, [pc, #528]	; (8006cf4 <resetConf+0x328>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    mcfg.telemetry_provider = TELEMETRY_PROVIDER_FRSKY;
 8006aea:	4b82      	ldr	r3, [pc, #520]	; (8006cf4 <resetConf+0x328>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
    mcfg.telemetry_port = TELEMETRY_PORT_UART;
 8006af2:	4b80      	ldr	r3, [pc, #512]	; (8006cf4 <resetConf+0x328>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
    mcfg.telemetry_switch = 0;
 8006afa:	4b7e      	ldr	r3, [pc, #504]	; (8006cf4 <resetConf+0x328>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 21bc 	strb.w	r2, [r3, #444]	; 0x1bc
    mcfg.midrc = 1500;
 8006b02:	4b7c      	ldr	r3, [pc, #496]	; (8006cf4 <resetConf+0x328>)
 8006b04:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006b08:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
    mcfg.mincheck = 1100;
 8006b0c:	4b79      	ldr	r3, [pc, #484]	; (8006cf4 <resetConf+0x328>)
 8006b0e:	f240 424c 	movw	r2, #1100	; 0x44c
 8006b12:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
    mcfg.maxcheck = 1900;
 8006b16:	4b77      	ldr	r3, [pc, #476]	; (8006cf4 <resetConf+0x328>)
 8006b18:	f240 726c 	movw	r2, #1900	; 0x76c
 8006b1c:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
    mcfg.retarded_arm = 0;       // disable arm/disarm on roll left/right
 8006b20:	4b74      	ldr	r3, [pc, #464]	; (8006cf4 <resetConf+0x328>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
    mcfg.disarm_kill_switch = 1; // AUX disarm independently of throttle value
 8006b28:	4b72      	ldr	r3, [pc, #456]	; (8006cf4 <resetConf+0x328>)
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
    mcfg.fw_althold_dir = 1;
 8006b30:	4b70      	ldr	r3, [pc, #448]	; (8006cf4 <resetConf+0x328>)
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
    // Motor/ESC/Servo
    mcfg.minthrottle = 1150;
 8006b38:	4b6e      	ldr	r3, [pc, #440]	; (8006cf4 <resetConf+0x328>)
 8006b3a:	f240 427e 	movw	r2, #1150	; 0x47e
 8006b3e:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
    mcfg.maxthrottle = 1850;
 8006b42:	4b6c      	ldr	r3, [pc, #432]	; (8006cf4 <resetConf+0x328>)
 8006b44:	f240 723a 	movw	r2, #1850	; 0x73a
 8006b48:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
    mcfg.mincommand = 1000;
 8006b4c:	4b69      	ldr	r3, [pc, #420]	; (8006cf4 <resetConf+0x328>)
 8006b4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b52:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
    mcfg.deadband3d_low = 1406;
 8006b56:	4b67      	ldr	r3, [pc, #412]	; (8006cf4 <resetConf+0x328>)
 8006b58:	f240 527e 	movw	r2, #1406	; 0x57e
 8006b5c:	f8a3 2146 	strh.w	r2, [r3, #326]	; 0x146
    mcfg.deadband3d_high = 1514;
 8006b60:	4b64      	ldr	r3, [pc, #400]	; (8006cf4 <resetConf+0x328>)
 8006b62:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8006b66:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
    mcfg.neutral3d = 1460;
 8006b6a:	4b62      	ldr	r3, [pc, #392]	; (8006cf4 <resetConf+0x328>)
 8006b6c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8006b70:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
    mcfg.deadband3d_throttle = 50;
 8006b74:	4b5f      	ldr	r3, [pc, #380]	; (8006cf4 <resetConf+0x328>)
 8006b76:	2232      	movs	r2, #50	; 0x32
 8006b78:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
    mcfg.motor_pwm_rate = MOTOR_PWM_RATE;
 8006b7c:	4b5d      	ldr	r3, [pc, #372]	; (8006cf4 <resetConf+0x328>)
 8006b7e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006b82:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
    mcfg.servo_pwm_rate = 50;
 8006b86:	4b5b      	ldr	r3, [pc, #364]	; (8006cf4 <resetConf+0x328>)
 8006b88:	2232      	movs	r2, #50	; 0x32
 8006b8a:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
    // safety features
    mcfg.auto_disarm_board = 5; // auto disarm after 5 sec if motors not started or disarmed
 8006b8e:	4b59      	ldr	r3, [pc, #356]	; (8006cf4 <resetConf+0x328>)
 8006b90:	2205      	movs	r2, #5
 8006b92:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
    // gps/nav stuff
    mcfg.gps_type = GPS_NMEA;
 8006b96:	4b57      	ldr	r3, [pc, #348]	; (8006cf4 <resetConf+0x328>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
    mcfg.gps_baudrate = GPS_BAUD_115200;
 8006b9e:	4b55      	ldr	r3, [pc, #340]	; (8006cf4 <resetConf+0x328>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
    // serial (USART1) baudrate
    mcfg.serial_baudrate = 115200;
 8006ba6:	4b53      	ldr	r3, [pc, #332]	; (8006cf4 <resetConf+0x328>)
 8006ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006bac:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    mcfg.softserial_baudrate = 9600;
 8006bb0:	4b50      	ldr	r3, [pc, #320]	; (8006cf4 <resetConf+0x328>)
 8006bb2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006bb6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    mcfg.softserial_1_inverted = 0;
 8006bba:	4b4e      	ldr	r3, [pc, #312]	; (8006cf4 <resetConf+0x328>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
    mcfg.softserial_2_inverted = 0;
 8006bc2:	4b4c      	ldr	r3, [pc, #304]	; (8006cf4 <resetConf+0x328>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
    mcfg.looptime = 3500;
 8006bca:	4b4a      	ldr	r3, [pc, #296]	; (8006cf4 <resetConf+0x328>)
 8006bcc:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006bd0:	819a      	strh	r2, [r3, #12]
    mcfg.emf_avoidance = 0;
 8006bd2:	4b48      	ldr	r3, [pc, #288]	; (8006cf4 <resetConf+0x328>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	739a      	strb	r2, [r3, #14]
    mcfg.rssi_aux_channel = 0;
 8006bd8:	4b46      	ldr	r3, [pc, #280]	; (8006cf4 <resetConf+0x328>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    mcfg.rssi_aux_max = 1000;
 8006be0:	4b44      	ldr	r3, [pc, #272]	; (8006cf4 <resetConf+0x328>)
 8006be2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006be6:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
    mcfg.rssi_adc_max = 4095;
 8006bea:	4b42      	ldr	r3, [pc, #264]	; (8006cf4 <resetConf+0x328>)
 8006bec:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006bf0:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
    mcfg.rc_channel_count = 8;
 8006bf4:	4b3f      	ldr	r3, [pc, #252]	; (8006cf4 <resetConf+0x328>)
 8006bf6:	2208      	movs	r2, #8
 8006bf8:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa

    cfg.pidController = 0;
 8006bfc:	4b3e      	ldr	r3, [pc, #248]	; (8006cf8 <resetConf+0x32c>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	701a      	strb	r2, [r3, #0]
    cfg.P8[ROLL] = 40;
 8006c02:	4b3d      	ldr	r3, [pc, #244]	; (8006cf8 <resetConf+0x32c>)
 8006c04:	2228      	movs	r2, #40	; 0x28
 8006c06:	705a      	strb	r2, [r3, #1]
    cfg.I8[ROLL] = 30;
 8006c08:	4b3b      	ldr	r3, [pc, #236]	; (8006cf8 <resetConf+0x32c>)
 8006c0a:	221e      	movs	r2, #30
 8006c0c:	72da      	strb	r2, [r3, #11]
    cfg.D8[ROLL] = 23;
 8006c0e:	4b3a      	ldr	r3, [pc, #232]	; (8006cf8 <resetConf+0x32c>)
 8006c10:	2217      	movs	r2, #23
 8006c12:	755a      	strb	r2, [r3, #21]
    cfg.P8[PITCH] = 40;
 8006c14:	4b38      	ldr	r3, [pc, #224]	; (8006cf8 <resetConf+0x32c>)
 8006c16:	2228      	movs	r2, #40	; 0x28
 8006c18:	709a      	strb	r2, [r3, #2]
    cfg.I8[PITCH] = 30;
 8006c1a:	4b37      	ldr	r3, [pc, #220]	; (8006cf8 <resetConf+0x32c>)
 8006c1c:	221e      	movs	r2, #30
 8006c1e:	731a      	strb	r2, [r3, #12]
    cfg.D8[PITCH] = 23;
 8006c20:	4b35      	ldr	r3, [pc, #212]	; (8006cf8 <resetConf+0x32c>)
 8006c22:	2217      	movs	r2, #23
 8006c24:	759a      	strb	r2, [r3, #22]
    cfg.P8[YAW] = 85;
 8006c26:	4b34      	ldr	r3, [pc, #208]	; (8006cf8 <resetConf+0x32c>)
 8006c28:	2255      	movs	r2, #85	; 0x55
 8006c2a:	70da      	strb	r2, [r3, #3]
    cfg.I8[YAW] = 45;
 8006c2c:	4b32      	ldr	r3, [pc, #200]	; (8006cf8 <resetConf+0x32c>)
 8006c2e:	222d      	movs	r2, #45	; 0x2d
 8006c30:	735a      	strb	r2, [r3, #13]
    cfg.D8[YAW] = 0;
 8006c32:	4b31      	ldr	r3, [pc, #196]	; (8006cf8 <resetConf+0x32c>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	75da      	strb	r2, [r3, #23]
    cfg.P8[PIDALT] = 50;
 8006c38:	4b2f      	ldr	r3, [pc, #188]	; (8006cf8 <resetConf+0x32c>)
 8006c3a:	2232      	movs	r2, #50	; 0x32
 8006c3c:	711a      	strb	r2, [r3, #4]
    cfg.I8[PIDALT] = 0;
 8006c3e:	4b2e      	ldr	r3, [pc, #184]	; (8006cf8 <resetConf+0x32c>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	739a      	strb	r2, [r3, #14]
    cfg.D8[PIDALT] = 0;
 8006c44:	4b2c      	ldr	r3, [pc, #176]	; (8006cf8 <resetConf+0x32c>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	761a      	strb	r2, [r3, #24]
    cfg.P8[PIDPOS] = 11; // POSHOLD_P * 100;
 8006c4a:	4b2b      	ldr	r3, [pc, #172]	; (8006cf8 <resetConf+0x32c>)
 8006c4c:	220b      	movs	r2, #11
 8006c4e:	715a      	strb	r2, [r3, #5]
    cfg.I8[PIDPOS] = 0; // POSHOLD_I * 100;
 8006c50:	4b29      	ldr	r3, [pc, #164]	; (8006cf8 <resetConf+0x32c>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	73da      	strb	r2, [r3, #15]
    cfg.D8[PIDPOS] = 0;
 8006c56:	4b28      	ldr	r3, [pc, #160]	; (8006cf8 <resetConf+0x32c>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	765a      	strb	r2, [r3, #25]
    cfg.P8[PIDPOSR] = 20; // POSHOLD_RATE_P * 10;
 8006c5c:	4b26      	ldr	r3, [pc, #152]	; (8006cf8 <resetConf+0x32c>)
 8006c5e:	2214      	movs	r2, #20
 8006c60:	719a      	strb	r2, [r3, #6]
    cfg.I8[PIDPOSR] = 8; // POSHOLD_RATE_I * 100;
 8006c62:	4b25      	ldr	r3, [pc, #148]	; (8006cf8 <resetConf+0x32c>)
 8006c64:	2208      	movs	r2, #8
 8006c66:	741a      	strb	r2, [r3, #16]
    cfg.D8[PIDPOSR] = 45; // POSHOLD_RATE_D * 1000;
 8006c68:	4b23      	ldr	r3, [pc, #140]	; (8006cf8 <resetConf+0x32c>)
 8006c6a:	222d      	movs	r2, #45	; 0x2d
 8006c6c:	769a      	strb	r2, [r3, #26]
    cfg.P8[PIDNAVR] = 14; // NAV_P * 10;
 8006c6e:	4b22      	ldr	r3, [pc, #136]	; (8006cf8 <resetConf+0x32c>)
 8006c70:	220e      	movs	r2, #14
 8006c72:	71da      	strb	r2, [r3, #7]
    cfg.I8[PIDNAVR] = 20; // NAV_I * 100;
 8006c74:	4b20      	ldr	r3, [pc, #128]	; (8006cf8 <resetConf+0x32c>)
 8006c76:	2214      	movs	r2, #20
 8006c78:	745a      	strb	r2, [r3, #17]
    cfg.D8[PIDNAVR] = 80; // NAV_D * 1000;
 8006c7a:	4b1f      	ldr	r3, [pc, #124]	; (8006cf8 <resetConf+0x32c>)
 8006c7c:	2250      	movs	r2, #80	; 0x50
 8006c7e:	76da      	strb	r2, [r3, #27]
    cfg.P8[PIDLEVEL] = 90;
 8006c80:	4b1d      	ldr	r3, [pc, #116]	; (8006cf8 <resetConf+0x32c>)
 8006c82:	225a      	movs	r2, #90	; 0x5a
 8006c84:	721a      	strb	r2, [r3, #8]
    cfg.I8[PIDLEVEL] = 10;
 8006c86:	4b1c      	ldr	r3, [pc, #112]	; (8006cf8 <resetConf+0x32c>)
 8006c88:	220a      	movs	r2, #10
 8006c8a:	749a      	strb	r2, [r3, #18]
    cfg.D8[PIDLEVEL] = 100;
 8006c8c:	4b1a      	ldr	r3, [pc, #104]	; (8006cf8 <resetConf+0x32c>)
 8006c8e:	2264      	movs	r2, #100	; 0x64
 8006c90:	771a      	strb	r2, [r3, #28]
    cfg.P8[PIDMAG] = 40;
 8006c92:	4b19      	ldr	r3, [pc, #100]	; (8006cf8 <resetConf+0x32c>)
 8006c94:	2228      	movs	r2, #40	; 0x28
 8006c96:	725a      	strb	r2, [r3, #9]
    cfg.P8[PIDVEL] = 120;
 8006c98:	4b17      	ldr	r3, [pc, #92]	; (8006cf8 <resetConf+0x32c>)
 8006c9a:	2278      	movs	r2, #120	; 0x78
 8006c9c:	729a      	strb	r2, [r3, #10]
    cfg.I8[PIDVEL] = 45;
 8006c9e:	4b16      	ldr	r3, [pc, #88]	; (8006cf8 <resetConf+0x32c>)
 8006ca0:	222d      	movs	r2, #45	; 0x2d
 8006ca2:	751a      	strb	r2, [r3, #20]
    cfg.D8[PIDVEL] = 1;
 8006ca4:	4b14      	ldr	r3, [pc, #80]	; (8006cf8 <resetConf+0x32c>)
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	779a      	strb	r2, [r3, #30]
    cfg.rcRate8 = 90;
 8006caa:	4b13      	ldr	r3, [pc, #76]	; (8006cf8 <resetConf+0x32c>)
 8006cac:	225a      	movs	r2, #90	; 0x5a
 8006cae:	77da      	strb	r2, [r3, #31]
    cfg.rcExpo8 = 65;
 8006cb0:	4b11      	ldr	r3, [pc, #68]	; (8006cf8 <resetConf+0x32c>)
 8006cb2:	2241      	movs	r2, #65	; 0x41
 8006cb4:	f883 2020 	strb.w	r2, [r3, #32]
    cfg.yawRate = 0;
 8006cb8:	4b0f      	ldr	r3, [pc, #60]	; (8006cf8 <resetConf+0x32c>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    cfg.dynThrPID = 0;
 8006cc0:	4b0d      	ldr	r3, [pc, #52]	; (8006cf8 <resetConf+0x32c>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    cfg.tpa_breakpoint = 1500;
 8006cc8:	4b0b      	ldr	r3, [pc, #44]	; (8006cf8 <resetConf+0x32c>)
 8006cca:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006cce:	851a      	strh	r2, [r3, #40]	; 0x28
    cfg.thrMid8 = 50;
 8006cd0:	4b09      	ldr	r3, [pc, #36]	; (8006cf8 <resetConf+0x32c>)
 8006cd2:	2232      	movs	r2, #50	; 0x32
 8006cd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    cfg.thrExpo8 = 0;
 8006cd8:	4b07      	ldr	r3, [pc, #28]	; (8006cf8 <resetConf+0x32c>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    // for (i = 0; i < CHECKBOXITEMS; i++)
    //     cfg.activate[i] = 0;
    cfg.angleTrim[0] = 0;
 8006ce0:	4b05      	ldr	r3, [pc, #20]	; (8006cf8 <resetConf+0x32c>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	859a      	strh	r2, [r3, #44]	; 0x2c
    cfg.angleTrim[1] = 0;
 8006ce6:	4b04      	ldr	r3, [pc, #16]	; (8006cf8 <resetConf+0x32c>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006cec:	e008      	b.n	8006d00 <resetConf+0x334>
 8006cee:	bf00      	nop
 8006cf0:	080262f4 	.word	0x080262f4
 8006cf4:	20000bbc 	.word	0x20000bbc
 8006cf8:	20001128 	.word	0x20001128
 8006cfc:	20001970 	.word	0x20001970
    cfg.locked_in = 0;
 8006d00:	4b8e      	ldr	r3, [pc, #568]	; (8006f3c <resetConf+0x570>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    cfg.mag_declination = 0;    // For example, -6deg 37min, = -637 Japan, format is [sign]dddmm (degreesminutes) default is zero.
 8006d08:	4b8c      	ldr	r3, [pc, #560]	; (8006f3c <resetConf+0x570>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    cfg.acc_lpf_factor = 4;
 8006d0e:	4b8b      	ldr	r3, [pc, #556]	; (8006f3c <resetConf+0x570>)
 8006d10:	2204      	movs	r2, #4
 8006d12:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    cfg.accz_deadband = 40;
 8006d16:	4b89      	ldr	r3, [pc, #548]	; (8006f3c <resetConf+0x570>)
 8006d18:	2228      	movs	r2, #40	; 0x28
 8006d1a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    cfg.accxy_deadband = 40;
 8006d1e:	4b87      	ldr	r3, [pc, #540]	; (8006f3c <resetConf+0x570>)
 8006d20:	2228      	movs	r2, #40	; 0x28
 8006d22:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    cfg.baro_tab_size = 21;
 8006d26:	4b85      	ldr	r3, [pc, #532]	; (8006f3c <resetConf+0x570>)
 8006d28:	2215      	movs	r2, #21
 8006d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    cfg.baro_noise_lpf = 0.6f;
 8006d2e:	4b83      	ldr	r3, [pc, #524]	; (8006f3c <resetConf+0x570>)
 8006d30:	4a83      	ldr	r2, [pc, #524]	; (8006f40 <resetConf+0x574>)
 8006d32:	639a      	str	r2, [r3, #56]	; 0x38
    cfg.baro_cf_vel = 0.985f;
 8006d34:	4b81      	ldr	r3, [pc, #516]	; (8006f3c <resetConf+0x570>)
 8006d36:	4a83      	ldr	r2, [pc, #524]	; (8006f44 <resetConf+0x578>)
 8006d38:	63da      	str	r2, [r3, #60]	; 0x3c
    cfg.baro_cf_alt = 0.965f;
 8006d3a:	4b80      	ldr	r3, [pc, #512]	; (8006f3c <resetConf+0x570>)
 8006d3c:	4a82      	ldr	r2, [pc, #520]	; (8006f48 <resetConf+0x57c>)
 8006d3e:	641a      	str	r2, [r3, #64]	; 0x40
    cfg.accz_lpf_cutoff = 5.0f;
 8006d40:	4b7e      	ldr	r3, [pc, #504]	; (8006f3c <resetConf+0x570>)
 8006d42:	4a82      	ldr	r2, [pc, #520]	; (8006f4c <resetConf+0x580>)
 8006d44:	645a      	str	r2, [r3, #68]	; 0x44
    cfg.acc_unarmedcal = 1;
 8006d46:	4b7d      	ldr	r3, [pc, #500]	; (8006f3c <resetConf+0x570>)
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    cfg.small_angle = 25;
 8006d4e:	4b7b      	ldr	r3, [pc, #492]	; (8006f3c <resetConf+0x570>)
 8006d50:	2219      	movs	r2, #25
 8006d52:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    // Radio
    parseRcChannels( "AETR123456789LMNOP" );    //18 channels max
 8006d56:	487e      	ldr	r0, [pc, #504]	; (8006f50 <resetConf+0x584>)
 8006d58:	f7ff fbba 	bl	80064d0 <parseRcChannels>
    cfg.deadband = 0;
 8006d5c:	4b77      	ldr	r3, [pc, #476]	; (8006f3c <resetConf+0x570>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    cfg.yawdeadband = 0;
 8006d64:	4b75      	ldr	r3, [pc, #468]	; (8006f3c <resetConf+0x570>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    cfg.alt_hold_throttle_neutral = 40;
 8006d6c:	4b73      	ldr	r3, [pc, #460]	; (8006f3c <resetConf+0x570>)
 8006d6e:	2228      	movs	r2, #40	; 0x28
 8006d70:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
    cfg.alt_hold_fast_change = 1;
 8006d74:	4b71      	ldr	r3, [pc, #452]	; (8006f3c <resetConf+0x570>)
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
    cfg.throttle_correction_value = 0;      // could 10 with althold or 40 for fpv
 8006d7c:	4b6f      	ldr	r3, [pc, #444]	; (8006f3c <resetConf+0x570>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
    cfg.throttle_correction_angle = 800;    // could be 80.0 deg with atlhold or 45.0 for fpv
 8006d84:	4b6d      	ldr	r3, [pc, #436]	; (8006f3c <resetConf+0x570>)
 8006d86:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006d8a:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

    // Failsafe Variables
    cfg.failsafe_delay = 10;                // 1sec
 8006d8e:	4b6b      	ldr	r3, [pc, #428]	; (8006f3c <resetConf+0x570>)
 8006d90:	220a      	movs	r2, #10
 8006d92:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    cfg.failsafe_off_delay = 200;           // 20sec
 8006d96:	4b69      	ldr	r3, [pc, #420]	; (8006f3c <resetConf+0x570>)
 8006d98:	22c8      	movs	r2, #200	; 0xc8
 8006d9a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    cfg.failsafe_throttle = 1200;           // decent default which should always be below hover throttle for people.
 8006d9e:	4b67      	ldr	r3, [pc, #412]	; (8006f3c <resetConf+0x570>)
 8006da0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8006da4:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    cfg.failsafe_detect_threshold = 985;    // any of first 4 channels below this value will trigger failsafe
 8006da8:	4b64      	ldr	r3, [pc, #400]	; (8006f3c <resetConf+0x570>)
 8006daa:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006dae:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    // servos
    for (i = 0; i < 8; i++) {
 8006db2:	2300      	movs	r3, #0
 8006db4:	60fb      	str	r3, [r7, #12]
 8006db6:	e032      	b.n	8006e1e <resetConf+0x452>
        cfg.servoConf[i].min = 1020;
 8006db8:	4960      	ldr	r1, [pc, #384]	; (8006f3c <resetConf+0x570>)
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	005b      	lsls	r3, r3, #1
 8006dc4:	440b      	add	r3, r1
 8006dc6:	33b8      	adds	r3, #184	; 0xb8
 8006dc8:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8006dcc:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].max = 2000;
 8006dce:	495b      	ldr	r1, [pc, #364]	; (8006f3c <resetConf+0x570>)
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	440b      	add	r3, r1
 8006ddc:	33ba      	adds	r3, #186	; 0xba
 8006dde:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006de2:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].middle = 1500;
 8006de4:	4955      	ldr	r1, [pc, #340]	; (8006f3c <resetConf+0x570>)
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	4613      	mov	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	440b      	add	r3, r1
 8006df2:	33bc      	adds	r3, #188	; 0xbc
 8006df4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006df8:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].rate = servoRates[i];
 8006dfa:	1d3a      	adds	r2, r7, #4
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f993 0000 	ldrsb.w	r0, [r3]
 8006e04:	494d      	ldr	r1, [pc, #308]	; (8006f3c <resetConf+0x570>)
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	440b      	add	r3, r1
 8006e12:	33be      	adds	r3, #190	; 0xbe
 8006e14:	4602      	mov	r2, r0
 8006e16:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 8; i++) {
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	60fb      	str	r3, [r7, #12]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b07      	cmp	r3, #7
 8006e22:	ddc9      	ble.n	8006db8 <resetConf+0x3ec>
    }

    cfg.yaw_direction = 1;
 8006e24:	4b45      	ldr	r3, [pc, #276]	; (8006f3c <resetConf+0x570>)
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    cfg.tri_unarmed_servo = 1;
 8006e2c:	4b43      	ldr	r3, [pc, #268]	; (8006f3c <resetConf+0x570>)
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f

    // gimbal
    cfg.gimbal_flags = GIMBAL_NORMAL;
 8006e34:	4b41      	ldr	r3, [pc, #260]	; (8006f3c <resetConf+0x570>)
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // gps/nav stuff
    cfg.gps_wp_radius = 200;
 8006e3c:	4b3f      	ldr	r3, [pc, #252]	; (8006f3c <resetConf+0x570>)
 8006e3e:	22c8      	movs	r2, #200	; 0xc8
 8006e40:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
    cfg.gps_lpf = 20;
 8006e44:	4b3d      	ldr	r3, [pc, #244]	; (8006f3c <resetConf+0x570>)
 8006e46:	2214      	movs	r2, #20
 8006e48:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
    cfg.nav_slew_rate = 30;
 8006e4c:	4b3b      	ldr	r3, [pc, #236]	; (8006f3c <resetConf+0x570>)
 8006e4e:	221e      	movs	r2, #30
 8006e50:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    cfg.nav_controls_heading = 1;
 8006e54:	4b39      	ldr	r3, [pc, #228]	; (8006f3c <resetConf+0x570>)
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
    cfg.nav_speed_min = 100;
 8006e5c:	4b37      	ldr	r3, [pc, #220]	; (8006f3c <resetConf+0x570>)
 8006e5e:	2264      	movs	r2, #100	; 0x64
 8006e60:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
    cfg.nav_speed_max = 300;
 8006e64:	4b35      	ldr	r3, [pc, #212]	; (8006f3c <resetConf+0x570>)
 8006e66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006e6a:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
    cfg.ap_mode = 40;
 8006e6e:	4b33      	ldr	r3, [pc, #204]	; (8006f3c <resetConf+0x570>)
 8006e70:	2228      	movs	r2, #40	; 0x28
 8006e72:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
    // fw stuff
    cfg.fw_gps_maxcorr = 20;
 8006e76:	4b31      	ldr	r3, [pc, #196]	; (8006f3c <resetConf+0x570>)
 8006e78:	2214      	movs	r2, #20
 8006e7a:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    cfg.fw_gps_rudder = 15;
 8006e7e:	4b2f      	ldr	r3, [pc, #188]	; (8006f3c <resetConf+0x570>)
 8006e80:	220f      	movs	r2, #15
 8006e82:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    cfg.fw_gps_maxclimb = 15;
 8006e86:	4b2d      	ldr	r3, [pc, #180]	; (8006f3c <resetConf+0x570>)
 8006e88:	220f      	movs	r2, #15
 8006e8a:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    cfg.fw_gps_maxdive = 15;
 8006e8e:	4b2b      	ldr	r3, [pc, #172]	; (8006f3c <resetConf+0x570>)
 8006e90:	220f      	movs	r2, #15
 8006e92:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
    cfg.fw_climb_throttle = 1900;
 8006e96:	4b29      	ldr	r3, [pc, #164]	; (8006f3c <resetConf+0x570>)
 8006e98:	f240 726c 	movw	r2, #1900	; 0x76c
 8006e9c:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
    cfg.fw_cruise_throttle = 1500;
 8006ea0:	4b26      	ldr	r3, [pc, #152]	; (8006f3c <resetConf+0x570>)
 8006ea2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006ea6:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
    cfg.fw_idle_throttle = 1300;
 8006eaa:	4b24      	ldr	r3, [pc, #144]	; (8006f3c <resetConf+0x570>)
 8006eac:	f240 5214 	movw	r2, #1300	; 0x514
 8006eb0:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
    cfg.fw_scaler_throttle = 8;
 8006eb4:	4b21      	ldr	r3, [pc, #132]	; (8006f3c <resetConf+0x570>)
 8006eb6:	2208      	movs	r2, #8
 8006eb8:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
    cfg.fw_roll_comp = 100;
 8006ebc:	4b1f      	ldr	r3, [pc, #124]	; (8006f3c <resetConf+0x570>)
 8006ebe:	2264      	movs	r2, #100	; 0x64
 8006ec0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    cfg.fw_cruise_distance = 500;
 8006ec4:	4b1d      	ldr	r3, [pc, #116]	; (8006f3c <resetConf+0x570>)
 8006ec6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006eca:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
    cfg.fw_rth_alt = 50;
 8006ece:	4b1b      	ldr	r3, [pc, #108]	; (8006f3c <resetConf+0x570>)
 8006ed0:	2232      	movs	r2, #50	; 0x32
 8006ed2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
    // control stuff
    mcfg.reboot_character = 'R';
 8006ed6:	4b1f      	ldr	r3, [pc, #124]	; (8006f54 <resetConf+0x588>)
 8006ed8:	2252      	movs	r2, #82	; 0x52
 8006eda:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569

    // custom mixer. clear by defaults.
    for (i = 0; i < MAX_MOTORS; i++)
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60fb      	str	r3, [r7, #12]
 8006ee2:	e00a      	b.n	8006efa <resetConf+0x52e>
        mcfg.customMixer[i].throttle = 0.0f;
 8006ee4:	4a1b      	ldr	r2, [pc, #108]	; (8006f54 <resetConf+0x588>)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	011b      	lsls	r3, r3, #4
 8006eec:	4413      	add	r3, r2
 8006eee:	f04f 0200 	mov.w	r2, #0
 8006ef2:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MOTORS; i++)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2b0b      	cmp	r3, #11
 8006efe:	ddf1      	ble.n	8006ee4 <resetConf+0x518>

    // copy default config into all 3 profiles
    for (i = 0; i < 3; i++)
 8006f00:	2300      	movs	r3, #0
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	e011      	b.n	8006f2a <resetConf+0x55e>
        memcpy(&mcfg.profile[i], &cfg, sizeof(config_t));
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006f0c:	fb02 f303 	mul.w	r3, r2, r3
 8006f10:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8006f14:	4a0f      	ldr	r2, [pc, #60]	; (8006f54 <resetConf+0x588>)
 8006f16:	4413      	add	r3, r2
 8006f18:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006f1c:	4907      	ldr	r1, [pc, #28]	; (8006f3c <resetConf+0x570>)
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f01a ff52 	bl	8021dc8 <memcpy>
    for (i = 0; i < 3; i++)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	3301      	adds	r3, #1
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	ddea      	ble.n	8006f06 <resetConf+0x53a>
}
 8006f30:	bf00      	nop
 8006f32:	bf00      	nop
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20001128 	.word	0x20001128
 8006f40:	3f19999a 	.word	0x3f19999a
 8006f44:	3f7c28f6 	.word	0x3f7c28f6
 8006f48:	3f770a3d 	.word	0x3f770a3d
 8006f4c:	40a00000 	.word	0x40a00000
 8006f50:	080262e0 	.word	0x080262e0
 8006f54:	20000bbc 	.word	0x20000bbc

08006f58 <sensors>:

bool sensors(uint32_t mask)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
    return (enabledSensors & mask) != 0;
 8006f60:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <sensors+0x28>)
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4013      	ands	r3, r2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	bf14      	ite	ne
 8006f6c:	2301      	movne	r3, #1
 8006f6e:	2300      	moveq	r3, #0
 8006f70:	b2db      	uxtb	r3, r3
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	20001260 	.word	0x20001260

08006f84 <sensorsSet>:

void sensorsSet(uint32_t mask)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
    enabledSensors |= mask;
 8006f8c:	4b05      	ldr	r3, [pc, #20]	; (8006fa4 <sensorsSet+0x20>)
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	4a03      	ldr	r2, [pc, #12]	; (8006fa4 <sensorsSet+0x20>)
 8006f96:	6013      	str	r3, [r2, #0]
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	20001260 	.word	0x20001260

08006fa8 <sensorsClear>:

void sensorsClear(uint32_t mask)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
    enabledSensors &= ~(mask);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	43da      	mvns	r2, r3
 8006fb4:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <sensorsClear+0x24>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4013      	ands	r3, r2
 8006fba:	4a04      	ldr	r2, [pc, #16]	; (8006fcc <sensorsClear+0x24>)
 8006fbc:	6013      	str	r3, [r2, #0]
}
 8006fbe:	bf00      	nop
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	20001260 	.word	0x20001260

08006fd0 <sensorsMask>:

uint32_t sensorsMask(void)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	af00      	add	r7, sp, #0
    return enabledSensors;
 8006fd4:	4b03      	ldr	r3, [pc, #12]	; (8006fe4 <sensorsMask+0x14>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	20001260 	.word	0x20001260

08006fe8 <feature>:

bool feature(uint32_t mask)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
    return (mcfg.enabledFeatures & mask) != 0;
 8006ff0:	4b07      	ldr	r3, [pc, #28]	; (8007010 <feature+0x28>)
 8006ff2:	689a      	ldr	r2, [r3, #8]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	bf14      	ite	ne
 8006ffc:	2301      	movne	r3, #1
 8006ffe:	2300      	moveq	r3, #0
 8007000:	b2db      	uxtb	r3, r3
}
 8007002:	4618      	mov	r0, r3
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	20000bbc 	.word	0x20000bbc

08007014 <featureSet>:

void featureSet(uint32_t mask)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
    mcfg.enabledFeatures |= mask;
 800701c:	4b05      	ldr	r3, [pc, #20]	; (8007034 <featureSet+0x20>)
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4313      	orrs	r3, r2
 8007024:	4a03      	ldr	r2, [pc, #12]	; (8007034 <featureSet+0x20>)
 8007026:	6093      	str	r3, [r2, #8]
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	20000bbc 	.word	0x20000bbc

08007038 <featureClear>:

void featureClear(uint32_t mask)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
    mcfg.enabledFeatures &= ~(mask);
 8007040:	4b06      	ldr	r3, [pc, #24]	; (800705c <featureClear+0x24>)
 8007042:	689a      	ldr	r2, [r3, #8]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	43db      	mvns	r3, r3
 8007048:	4013      	ands	r3, r2
 800704a:	4a04      	ldr	r2, [pc, #16]	; (800705c <featureClear+0x24>)
 800704c:	6093      	str	r3, [r2, #8]
}
 800704e:	bf00      	nop
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	20000bbc 	.word	0x20000bbc

08007060 <featureClearAll>:

void featureClearAll()
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
    mcfg.enabledFeatures = 0;
 8007064:	4b03      	ldr	r3, [pc, #12]	; (8007074 <featureClearAll+0x14>)
 8007066:	2200      	movs	r2, #0
 8007068:	609a      	str	r2, [r3, #8]
}
 800706a:	bf00      	nop
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	20000bbc 	.word	0x20000bbc

08007078 <featureMask>:

uint32_t featureMask(void)
{
 8007078:	b480      	push	{r7}
 800707a:	af00      	add	r7, sp, #0
    return mcfg.enabledFeatures;
 800707c:	4b03      	ldr	r3, [pc, #12]	; (800708c <featureMask+0x14>)
 800707e:	689b      	ldr	r3, [r3, #8]
}
 8007080:	4618      	mov	r0, r3
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	20000bbc 	.word	0x20000bbc

08007090 <fw_nav_reset>:
static int16_t speedBoost;
static int16_t altHist[GPS_UPD_HZ + 1];     // shift register
static int16_t navDif[GPS_UPD_HZ + 1];      // shift register

void fw_nav_reset(void)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
    uint8_t i;

    navErrorI = 0;
 8007096:	4b15      	ldr	r3, [pc, #84]	; (80070ec <fw_nav_reset+0x5c>)
 8007098:	f04f 0200 	mov.w	r2, #0
 800709c:	601a      	str	r2, [r3, #0]
    altErrorI = 0;
 800709e:	4b14      	ldr	r3, [pc, #80]	; (80070f0 <fw_nav_reset+0x60>)
 80070a0:	f04f 0200 	mov.w	r2, #0
 80070a4:	601a      	str	r2, [r3, #0]
    lastAltDiff = 0;
 80070a6:	4b13      	ldr	r3, [pc, #76]	; (80070f4 <fw_nav_reset+0x64>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	801a      	strh	r2, [r3, #0]
    lastnavDiff = 0;
 80070ac:	4b12      	ldr	r3, [pc, #72]	; (80070f8 <fw_nav_reset+0x68>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	801a      	strh	r2, [r3, #0]
    speedBoost = 0;
 80070b2:	4b12      	ldr	r3, [pc, #72]	; (80070fc <fw_nav_reset+0x6c>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	801a      	strh	r2, [r3, #0]

    for (i = 0; i < GPS_UPD_HZ; i++) {
 80070b8:	2300      	movs	r3, #0
 80070ba:	71fb      	strb	r3, [r7, #7]
 80070bc:	e00c      	b.n	80070d8 <fw_nav_reset+0x48>
        altHist[i] = 0;
 80070be:	79fb      	ldrb	r3, [r7, #7]
 80070c0:	4a0f      	ldr	r2, [pc, #60]	; (8007100 <fw_nav_reset+0x70>)
 80070c2:	2100      	movs	r1, #0
 80070c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        navDif[i] = 0;
 80070c8:	79fb      	ldrb	r3, [r7, #7]
 80070ca:	4a0e      	ldr	r2, [pc, #56]	; (8007104 <fw_nav_reset+0x74>)
 80070cc:	2100      	movs	r1, #0
 80070ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < GPS_UPD_HZ; i++) {
 80070d2:	79fb      	ldrb	r3, [r7, #7]
 80070d4:	3301      	adds	r3, #1
 80070d6:	71fb      	strb	r3, [r7, #7]
 80070d8:	79fb      	ldrb	r3, [r7, #7]
 80070da:	2b04      	cmp	r3, #4
 80070dc:	d9ef      	bls.n	80070be <fw_nav_reset+0x2e>
    }
}
 80070de:	bf00      	nop
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	20001268 	.word	0x20001268
 80070f0:	2000126c 	.word	0x2000126c
 80070f4:	20001270 	.word	0x20001270
 80070f8:	20001272 	.word	0x20001272
 80070fc:	20001274 	.word	0x20001274
 8007100:	20001278 	.word	0x20001278
 8007104:	20001284 	.word	0x20001284

08007108 <fw_FlyTo>:

void fw_FlyTo(void) // PatrikE CruiseMode version
{
 8007108:	b5b0      	push	{r4, r5, r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
    float wp_lat_diff, wp_lon_diff, scaler;
    int32_t holdHeading = GPS_ground_course / 10;
 800710e:	4b48      	ldr	r3, [pc, #288]	; (8007230 <fw_FlyTo+0x128>)
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	4a48      	ldr	r2, [pc, #288]	; (8007234 <fw_FlyTo+0x12c>)
 8007114:	fba2 2303 	umull	r2, r3, r2, r3
 8007118:	08db      	lsrs	r3, r3, #3
 800711a:	b29b      	uxth	r3, r3
 800711c:	60fb      	str	r3, [r7, #12]
    if (holdHeading > 180)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2bb4      	cmp	r3, #180	; 0xb4
 8007122:	dd03      	ble.n	800712c <fw_FlyTo+0x24>
        holdHeading -= 360;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800712a:	60fb      	str	r3, [r7, #12]
    scaler = (GEO_SKALEFACT / GPS_scaleLonDown) * cfg.fw_cruise_distance;
 800712c:	4b42      	ldr	r3, [pc, #264]	; (8007238 <fw_FlyTo+0x130>)
 800712e:	edd3 7a00 	vldr	s15, [r3]
 8007132:	eddf 6a42 	vldr	s13, [pc, #264]	; 800723c <fw_FlyTo+0x134>
 8007136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800713a:	4b41      	ldr	r3, [pc, #260]	; (8007240 <fw_FlyTo+0x138>)
 800713c:	f9b3 3134 	ldrsh.w	r3, [r3, #308]	; 0x134
 8007140:	ee07 3a90 	vmov	s15, r3
 8007144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714c:	edc7 7a02 	vstr	s15, [r7, #8]
    wp_lat_diff = cos(holdHeading * 0.0174532925f);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	ee07 3a90 	vmov	s15, r3
 8007156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800715a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8007244 <fw_FlyTo+0x13c>
 800715e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007162:	ee17 0a90 	vmov	r0, s15
 8007166:	f7f9 f9ad 	bl	80004c4 <__aeabi_f2d>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	ec43 2b10 	vmov	d0, r2, r3
 8007172:	f01b f869 	bl	8022248 <cos>
 8007176:	ec53 2b10 	vmov	r2, r3, d0
 800717a:	4610      	mov	r0, r2
 800717c:	4619      	mov	r1, r3
 800717e:	f7f9 fcdb 	bl	8000b38 <__aeabi_d2f>
 8007182:	4603      	mov	r3, r0
 8007184:	607b      	str	r3, [r7, #4]
    wp_lon_diff = sin(holdHeading * 0.0174532925f) * GPS_scaleLonDown;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	ee07 3a90 	vmov	s15, r3
 800718c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007190:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007244 <fw_FlyTo+0x13c>
 8007194:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007198:	ee17 0a90 	vmov	r0, s15
 800719c:	f7f9 f992 	bl	80004c4 <__aeabi_f2d>
 80071a0:	4602      	mov	r2, r0
 80071a2:	460b      	mov	r3, r1
 80071a4:	ec43 2b10 	vmov	d0, r2, r3
 80071a8:	f01b f8a2 	bl	80222f0 <sin>
 80071ac:	ec55 4b10 	vmov	r4, r5, d0
 80071b0:	4b21      	ldr	r3, [pc, #132]	; (8007238 <fw_FlyTo+0x130>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7f9 f985 	bl	80004c4 <__aeabi_f2d>
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	4620      	mov	r0, r4
 80071c0:	4629      	mov	r1, r5
 80071c2:	f7f9 f9d7 	bl	8000574 <__aeabi_dmul>
 80071c6:	4602      	mov	r2, r0
 80071c8:	460b      	mov	r3, r1
 80071ca:	4610      	mov	r0, r2
 80071cc:	4619      	mov	r1, r3
 80071ce:	f7f9 fcb3 	bl	8000b38 <__aeabi_d2f>
 80071d2:	4603      	mov	r3, r0
 80071d4:	603b      	str	r3, [r7, #0]
    GPS_WP[LAT] += wp_lat_diff * scaler;
 80071d6:	4b1c      	ldr	r3, [pc, #112]	; (8007248 <fw_FlyTo+0x140>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071e2:	edd7 6a01 	vldr	s13, [r7, #4]
 80071e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80071ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80071ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071f6:	ee17 2a90 	vmov	r2, s15
 80071fa:	4b13      	ldr	r3, [pc, #76]	; (8007248 <fw_FlyTo+0x140>)
 80071fc:	601a      	str	r2, [r3, #0]
    GPS_WP[LON] += wp_lon_diff * scaler;
 80071fe:	4b12      	ldr	r3, [pc, #72]	; (8007248 <fw_FlyTo+0x140>)
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800720a:	edd7 6a00 	vldr	s13, [r7]
 800720e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007212:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800721a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800721e:	ee17 2a90 	vmov	r2, s15
 8007222:	4b09      	ldr	r3, [pc, #36]	; (8007248 <fw_FlyTo+0x140>)
 8007224:	605a      	str	r2, [r3, #4]
}
 8007226:	bf00      	nop
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bdb0      	pop	{r4, r5, r7, pc}
 800722e:	bf00      	nop
 8007230:	20001a82 	.word	0x20001a82
 8007234:	cccccccd 	.word	0xcccccccd
 8007238:	20000028 	.word	0x20000028
 800723c:	42b3a9fc 	.word	0x42b3a9fc
 8007240:	20001128 	.word	0x20001128
 8007244:	3c8efa35 	.word	0x3c8efa35
 8007248:	20001684 	.word	0x20001684

0800724c <fw_nav>:

void fw_nav(void)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b08a      	sub	sp, #40	; 0x28
 8007250:	af00      	add	r7, sp, #0
    int16_t GPS_Heading = GPS_ground_course;    // Store current bearing
 8007252:	4b56      	ldr	r3, [pc, #344]	; (80073ac <fw_nav+0x160>)
 8007254:	881b      	ldrh	r3, [r3, #0]
 8007256:	843b      	strh	r3, [r7, #32]
    int16_t Current_Heading;                    // Store current bearing
    int16_t altDiff = 0;
 8007258:	2300      	movs	r3, #0
 800725a:	83fb      	strh	r3, [r7, #30]
    uint8_t RTH_Alt = cfg.fw_rth_alt;           // Min Altitude to keep during RTH. (Max 200m)
 800725c:	4b54      	ldr	r3, [pc, #336]	; (80073b0 <fw_nav+0x164>)
 800725e:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8007262:	777b      	strb	r3, [r7, #29]
    int16_t delta[2] = { 0, 0 };                // D-Term
 8007264:	2300      	movs	r3, #0
 8007266:	80bb      	strh	r3, [r7, #4]
 8007268:	2300      	movs	r3, #0
 800726a:	80fb      	strh	r3, [r7, #6]
    static int16_t NAV_deltaSum, ALT_deltaSum, GPS_FwTarget, GPS_AltErr, NAV_Thro;
    int16_t TX_Thro = rcData[THROTTLE];         // Read and store Throttle pos.
 800726c:	4b51      	ldr	r3, [pc, #324]	; (80073b4 <fw_nav+0x168>)
 800726e:	88db      	ldrh	r3, [r3, #6]
 8007270:	837b      	strh	r3, [r7, #26]
    // Nav timer
    static uint32_t gpsTimer = 0;
    static uint16_t gpsFreq = 1000 / GPS_UPD_HZ;    // 5HZ 200ms DT

    // Calculated Altitude over home in meters
    int16_t currAlt = GPS_altitude - GPS_home[ALT];         // GPS
 8007272:	4b51      	ldr	r3, [pc, #324]	; (80073b8 <fw_nav+0x16c>)
 8007274:	881a      	ldrh	r2, [r3, #0]
 8007276:	4b51      	ldr	r3, [pc, #324]	; (80073bc <fw_nav+0x170>)
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	b29b      	uxth	r3, r3
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	b29b      	uxth	r3, r3
 8007280:	833b      	strh	r3, [r7, #24]
    int16_t navTargetAlt = GPS_hold[ALT] - GPS_home[ALT];   // Diff from homeAlt.
 8007282:	4b4f      	ldr	r3, [pc, #316]	; (80073c0 <fw_nav+0x174>)
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	b29a      	uxth	r2, r3
 8007288:	4b4c      	ldr	r3, [pc, #304]	; (80073bc <fw_nav+0x170>)
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	b29b      	uxth	r3, r3
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	b29b      	uxth	r3, r3
 8007292:	82fb      	strh	r3, [r7, #22]

    // Handles ReSetting RTH alt if rth is enabled to low!
    if (f.CLIMBOUT_FW && currAlt < RTH_Alt)
 8007294:	4b4b      	ldr	r3, [pc, #300]	; (80073c4 <fw_nav+0x178>)
 8007296:	7cdb      	ldrb	r3, [r3, #19]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <fw_nav+0x66>
 800729c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80072a0:	7f7b      	ldrb	r3, [r7, #29]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	da05      	bge.n	80072b2 <fw_nav+0x66>
        GPS_hold[ALT] = GPS_home[ALT] + RTH_Alt;
 80072a6:	4b45      	ldr	r3, [pc, #276]	; (80073bc <fw_nav+0x170>)
 80072a8:	689a      	ldr	r2, [r3, #8]
 80072aa:	7f7b      	ldrb	r3, [r7, #29]
 80072ac:	4413      	add	r3, r2
 80072ae:	4a44      	ldr	r2, [pc, #272]	; (80073c0 <fw_nav+0x174>)
 80072b0:	6093      	str	r3, [r2, #8]

    // Wrap GPS_Heading 1800
    GPS_Heading = wrap_18000(GPS_Heading * 10) / 10;
 80072b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80072b6:	4613      	mov	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	4618      	mov	r0, r3
 80072c0:	f002 fa54 	bl	800976c <wrap_18000>
 80072c4:	4603      	mov	r3, r0
 80072c6:	4a40      	ldr	r2, [pc, #256]	; (80073c8 <fw_nav+0x17c>)
 80072c8:	fb82 1203 	smull	r1, r2, r2, r3
 80072cc:	1092      	asrs	r2, r2, #2
 80072ce:	17db      	asrs	r3, r3, #31
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	843b      	strh	r3, [r7, #32]

    // Only use MAG if Mag and GPS_Heading aligns
    if (sensors(SENSOR_MAG)) {
 80072d4:	2008      	movs	r0, #8
 80072d6:	f7ff fe3f 	bl	8006f58 <sensors>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d024      	beq.n	800732a <fw_nav+0xde>
        if (abs(heading - (GPS_Heading / 10)) > 10 && GPS_speed > 200)
 80072e0:	4b3a      	ldr	r3, [pc, #232]	; (80073cc <fw_nav+0x180>)
 80072e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072e6:	4619      	mov	r1, r3
 80072e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80072ec:	4a36      	ldr	r2, [pc, #216]	; (80073c8 <fw_nav+0x17c>)
 80072ee:	fb82 0203 	smull	r0, r2, r2, r3
 80072f2:	1092      	asrs	r2, r2, #2
 80072f4:	17db      	asrs	r3, r3, #31
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	b21b      	sxth	r3, r3
 80072fa:	1acb      	subs	r3, r1, r3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	bfb8      	it	lt
 8007300:	425b      	neglt	r3, r3
 8007302:	2b0a      	cmp	r3, #10
 8007304:	dd0d      	ble.n	8007322 <fw_nav+0xd6>
 8007306:	4b32      	ldr	r3, [pc, #200]	; (80073d0 <fw_nav+0x184>)
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	2bc8      	cmp	r3, #200	; 0xc8
 800730c:	d909      	bls.n	8007322 <fw_nav+0xd6>
            Current_Heading = GPS_Heading / 10;
 800730e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007312:	4a2d      	ldr	r2, [pc, #180]	; (80073c8 <fw_nav+0x17c>)
 8007314:	fb82 1203 	smull	r1, r2, r2, r3
 8007318:	1092      	asrs	r2, r2, #2
 800731a:	17db      	asrs	r3, r3, #31
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007320:	e00c      	b.n	800733c <fw_nav+0xf0>
        else
            Current_Heading = heading;
 8007322:	4b2a      	ldr	r3, [pc, #168]	; (80073cc <fw_nav+0x180>)
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007328:	e008      	b.n	800733c <fw_nav+0xf0>
    } else
        Current_Heading = GPS_Heading / 10;
 800732a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800732e:	4a26      	ldr	r2, [pc, #152]	; (80073c8 <fw_nav+0x17c>)
 8007330:	fb82 1203 	smull	r1, r2, r2, r3
 8007334:	1092      	asrs	r2, r2, #2
 8007336:	17db      	asrs	r3, r3, #31
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	84fb      	strh	r3, [r7, #38]	; 0x26

    // Calculate Navigation errors
    GPS_FwTarget = nav_bearing / 100;
 800733c:	4b25      	ldr	r3, [pc, #148]	; (80073d4 <fw_nav+0x188>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a25      	ldr	r2, [pc, #148]	; (80073d8 <fw_nav+0x18c>)
 8007342:	fb82 1203 	smull	r1, r2, r2, r3
 8007346:	1152      	asrs	r2, r2, #5
 8007348:	17db      	asrs	r3, r3, #31
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	b21a      	sxth	r2, r3
 800734e:	4b23      	ldr	r3, [pc, #140]	; (80073dc <fw_nav+0x190>)
 8007350:	801a      	strh	r2, [r3, #0]
    navDiff = GPS_FwTarget - Current_Heading;   // Navigation Error
 8007352:	4b22      	ldr	r3, [pc, #136]	; (80073dc <fw_nav+0x190>)
 8007354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007358:	b29a      	uxth	r2, r3
 800735a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	b29b      	uxth	r3, r3
 8007360:	84bb      	strh	r3, [r7, #36]	; 0x24
    GPS_AltErr = currAlt - navTargetAlt;        // Altitude error Negative means you're to low
 8007362:	8b3a      	ldrh	r2, [r7, #24]
 8007364:	8afb      	ldrh	r3, [r7, #22]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	b29b      	uxth	r3, r3
 800736a:	b21a      	sxth	r2, r3
 800736c:	4b1c      	ldr	r3, [pc, #112]	; (80073e0 <fw_nav+0x194>)
 800736e:	801a      	strh	r2, [r3, #0]

    // Start of NavTimer
    if (pif_cumulative_timer1ms - gpsTimer >= gpsFreq) {
 8007370:	4b1c      	ldr	r3, [pc, #112]	; (80073e4 <fw_nav+0x198>)
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	4b1c      	ldr	r3, [pc, #112]	; (80073e8 <fw_nav+0x19c>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	4a1c      	ldr	r2, [pc, #112]	; (80073ec <fw_nav+0x1a0>)
 800737c:	8812      	ldrh	r2, [r2, #0]
 800737e:	4293      	cmp	r3, r2
 8007380:	f0c0 83e9 	bcc.w	8007b56 <fw_nav+0x90a>
        gpsTimer = pif_cumulative_timer1ms;
 8007384:	4b17      	ldr	r3, [pc, #92]	; (80073e4 <fw_nav+0x198>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a17      	ldr	r2, [pc, #92]	; (80073e8 <fw_nav+0x19c>)
 800738a:	6013      	str	r3, [r2, #0]

        // Throttle control
        // Deadpan for throttle at correct Alt.
        if (abs(GPS_AltErr) < 1) // Just cruise along in deadpan.
 800738c:	4b14      	ldr	r3, [pc, #80]	; (80073e0 <fw_nav+0x194>)
 800738e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007392:	2b00      	cmp	r3, #0
 8007394:	bfb8      	it	lt
 8007396:	425b      	neglt	r3, r3
 8007398:	b29b      	uxth	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d12a      	bne.n	80073f4 <fw_nav+0x1a8>
            NAV_Thro = cfg.fw_cruise_throttle;
 800739e:	4b04      	ldr	r3, [pc, #16]	; (80073b0 <fw_nav+0x164>)
 80073a0:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 80073a4:	b21a      	sxth	r2, r3
 80073a6:	4b12      	ldr	r3, [pc, #72]	; (80073f0 <fw_nav+0x1a4>)
 80073a8:	801a      	strh	r2, [r3, #0]
 80073aa:	e03f      	b.n	800742c <fw_nav+0x1e0>
 80073ac:	20001a82 	.word	0x20001a82
 80073b0:	20001128 	.word	0x20001128
 80073b4:	200019c4 	.word	0x200019c4
 80073b8:	20001a76 	.word	0x20001a76
 80073bc:	20001a58 	.word	0x20001a58
 80073c0:	20001a64 	.word	0x20001a64
 80073c4:	20001988 	.word	0x20001988
 80073c8:	66666667 	.word	0x66666667
 80073cc:	20001cb4 	.word	0x20001cb4
 80073d0:	20001a78 	.word	0x20001a78
 80073d4:	200016ec 	.word	0x200016ec
 80073d8:	51eb851f 	.word	0x51eb851f
 80073dc:	20001290 	.word	0x20001290
 80073e0:	20001292 	.word	0x20001292
 80073e4:	200020e0 	.word	0x200020e0
 80073e8:	20001294 	.word	0x20001294
 80073ec:	20000026 	.word	0x20000026
 80073f0:	20001298 	.word	0x20001298
        else
            // Add AltitudeError  and scale up with a factor to throttle
            NAV_Thro = constrain(cfg.fw_cruise_throttle - (GPS_AltErr * cfg.fw_scaler_throttle), cfg.fw_idle_throttle, cfg.fw_climb_throttle);
 80073f4:	4b99      	ldr	r3, [pc, #612]	; (800765c <fw_nav+0x410>)
 80073f6:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 80073fa:	461a      	mov	r2, r3
 80073fc:	4b98      	ldr	r3, [pc, #608]	; (8007660 <fw_nav+0x414>)
 80073fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007402:	4619      	mov	r1, r3
 8007404:	4b95      	ldr	r3, [pc, #596]	; (800765c <fw_nav+0x410>)
 8007406:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 800740a:	fb01 f303 	mul.w	r3, r1, r3
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	4a92      	ldr	r2, [pc, #584]	; (800765c <fw_nav+0x410>)
 8007412:	f8b2 212e 	ldrh.w	r2, [r2, #302]	; 0x12e
 8007416:	4611      	mov	r1, r2
 8007418:	4a90      	ldr	r2, [pc, #576]	; (800765c <fw_nav+0x410>)
 800741a:	f8b2 212a 	ldrh.w	r2, [r2, #298]	; 0x12a
 800741e:	4618      	mov	r0, r3
 8007420:	f7fc fc64 	bl	8003cec <constrain>
 8007424:	4603      	mov	r3, r0
 8007426:	b21a      	sxth	r2, r3
 8007428:	4b8e      	ldr	r3, [pc, #568]	; (8007664 <fw_nav+0x418>)
 800742a:	801a      	strh	r2, [r3, #0]

        // Reset Climbout Flag when Alt have been reached
        if (f.CLIMBOUT_FW && GPS_AltErr >= 0)
 800742c:	4b8e      	ldr	r3, [pc, #568]	; (8007668 <fw_nav+0x41c>)
 800742e:	7cdb      	ldrb	r3, [r3, #19]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d007      	beq.n	8007444 <fw_nav+0x1f8>
 8007434:	4b8a      	ldr	r3, [pc, #552]	; (8007660 <fw_nav+0x414>)
 8007436:	f9b3 3000 	ldrsh.w	r3, [r3]
 800743a:	2b00      	cmp	r3, #0
 800743c:	db02      	blt.n	8007444 <fw_nav+0x1f8>
            f.CLIMBOUT_FW = 0;
 800743e:	4b8a      	ldr	r3, [pc, #552]	; (8007668 <fw_nav+0x41c>)
 8007440:	2200      	movs	r2, #0
 8007442:	74da      	strb	r2, [r3, #19]

        // Climb out before RTH
        if (f.GPS_HOME_MODE) {
 8007444:	4b88      	ldr	r3, [pc, #544]	; (8007668 <fw_nav+0x41c>)
 8007446:	79db      	ldrb	r3, [r3, #7]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d02c      	beq.n	80074a6 <fw_nav+0x25a>
            if (f.CLIMBOUT_FW) {
 800744c:	4b86      	ldr	r3, [pc, #536]	; (8007668 <fw_nav+0x41c>)
 800744e:	7cdb      	ldrb	r3, [r3, #19]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d019      	beq.n	8007488 <fw_nav+0x23c>
                GPS_AltErr = -(cfg.fw_gps_maxclimb * 10);  // Max climbAngle
 8007454:	4b81      	ldr	r3, [pc, #516]	; (800765c <fw_nav+0x410>)
 8007456:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 800745a:	b29b      	uxth	r3, r3
 800745c:	461a      	mov	r2, r3
 800745e:	0352      	lsls	r2, r2, #13
 8007460:	1ad2      	subs	r2, r2, r3
 8007462:	0092      	lsls	r2, r2, #2
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	005b      	lsls	r3, r3, #1
 8007468:	b29b      	uxth	r3, r3
 800746a:	b21a      	sxth	r2, r3
 800746c:	4b7c      	ldr	r3, [pc, #496]	; (8007660 <fw_nav+0x414>)
 800746e:	801a      	strh	r2, [r3, #0]
                NAV_Thro = cfg.fw_climb_throttle;          // Max Allowed Throttle
 8007470:	4b7a      	ldr	r3, [pc, #488]	; (800765c <fw_nav+0x410>)
 8007472:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8007476:	b21a      	sxth	r2, r3
 8007478:	4b7a      	ldr	r3, [pc, #488]	; (8007664 <fw_nav+0x418>)
 800747a:	801a      	strh	r2, [r3, #0]
                if (currAlt < SAFE_NAV_ALT)
 800747c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007480:	2b18      	cmp	r3, #24
 8007482:	dc01      	bgt.n	8007488 <fw_nav+0x23c>
                    navDiff = 0;                        // Force climb with Level Wings below safe Alt
 8007484:	2300      	movs	r3, #0
 8007486:	84bb      	strh	r3, [r7, #36]	; 0x24
            }

            if ((GPS_distanceToHome < SAFE_DECSCEND_ZONE) && currAlt > RTH_Alt)
 8007488:	4b78      	ldr	r3, [pc, #480]	; (800766c <fw_nav+0x420>)
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	2b31      	cmp	r3, #49	; 0x31
 800748e:	d80a      	bhi.n	80074a6 <fw_nav+0x25a>
 8007490:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007494:	7f7b      	ldrb	r3, [r7, #29]
 8007496:	429a      	cmp	r2, r3
 8007498:	dd05      	ble.n	80074a6 <fw_nav+0x25a>
                GPS_hold[ALT] = GPS_home[ALT] + RTH_Alt;    // Start descend to correct RTH Alt.
 800749a:	4b75      	ldr	r3, [pc, #468]	; (8007670 <fw_nav+0x424>)
 800749c:	689a      	ldr	r2, [r3, #8]
 800749e:	7f7b      	ldrb	r3, [r7, #29]
 80074a0:	4413      	add	r3, r2
 80074a2:	4a74      	ldr	r2, [pc, #464]	; (8007674 <fw_nav+0x428>)
 80074a4:	6093      	str	r3, [r2, #8]
        }

        // Always DISARM when Home is within 10 meters if FC is in failsafe.
        if (f.FW_FAILSAFE_RTH_ENABLE && (GPS_distanceToHome < 10)) {
 80074a6:	4b70      	ldr	r3, [pc, #448]	; (8007668 <fw_nav+0x41c>)
 80074a8:	7c9b      	ldrb	r3, [r3, #18]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00e      	beq.n	80074cc <fw_nav+0x280>
 80074ae:	4b6f      	ldr	r3, [pc, #444]	; (800766c <fw_nav+0x420>)
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	2b09      	cmp	r3, #9
 80074b4:	d80a      	bhi.n	80074cc <fw_nav+0x280>
            f.ARMED = 0;
 80074b6:	4b6c      	ldr	r3, [pc, #432]	; (8007668 <fw_nav+0x41c>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	705a      	strb	r2, [r3, #1]
            f.CLIMBOUT_FW = 0;                  // Abort Climbout
 80074bc:	4b6a      	ldr	r3, [pc, #424]	; (8007668 <fw_nav+0x41c>)
 80074be:	2200      	movs	r2, #0
 80074c0:	74da      	strb	r2, [r3, #19]
            GPS_hold[ALT] = GPS_home[ALT] + 5;  // Come down
 80074c2:	4b6b      	ldr	r3, [pc, #428]	; (8007670 <fw_nav+0x424>)
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	3305      	adds	r3, #5
 80074c8:	4a6a      	ldr	r2, [pc, #424]	; (8007674 <fw_nav+0x428>)
 80074ca:	6093      	str	r3, [r2, #8]
        }

        // Filtering of navDiff around home to stop nervous servos
        if (GPS_distanceToHome < 10)
 80074cc:	4b67      	ldr	r3, [pc, #412]	; (800766c <fw_nav+0x420>)
 80074ce:	881b      	ldrh	r3, [r3, #0]
 80074d0:	2b09      	cmp	r3, #9
 80074d2:	d80e      	bhi.n	80074f2 <fw_nav+0x2a6>
            navDiff *= 0.1f;
 80074d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80074d8:	ee07 3a90 	vmov	s15, r3
 80074dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074e0:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8007678 <fw_nav+0x42c>
 80074e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80074e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074ec:	ee17 3a90 	vmov	r3, s15
 80074f0:	84bb      	strh	r3, [r7, #36]	; 0x24

        // Wrap Heading 180
        navDiff = wrap_18000(navDiff * 100) / 100;
 80074f2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80074f6:	2264      	movs	r2, #100	; 0x64
 80074f8:	fb02 f303 	mul.w	r3, r2, r3
 80074fc:	4618      	mov	r0, r3
 80074fe:	f002 f935 	bl	800976c <wrap_18000>
 8007502:	4603      	mov	r3, r0
 8007504:	4a5d      	ldr	r2, [pc, #372]	; (800767c <fw_nav+0x430>)
 8007506:	fb82 1203 	smull	r1, r2, r2, r3
 800750a:	1152      	asrs	r2, r2, #5
 800750c:	17db      	asrs	r3, r3, #31
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (abs(navDiff) > 170)
 8007512:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007516:	2b00      	cmp	r3, #0
 8007518:	bfb8      	it	lt
 800751a:	425b      	neglt	r3, r3
 800751c:	b29b      	uxth	r3, r3
 800751e:	2baa      	cmp	r3, #170	; 0xaa
 8007520:	d901      	bls.n	8007526 <fw_nav+0x2da>
            navDiff = 175;      // Forced turn.
 8007522:	23af      	movs	r3, #175	; 0xaf
 8007524:	84bb      	strh	r3, [r7, #36]	; 0x24

        // PID for Navigating planes.
        navDT = (float) (pif_cumulative_timer1ms - nav_loopT) / 1000;
 8007526:	4b56      	ldr	r3, [pc, #344]	; (8007680 <fw_nav+0x434>)
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	4b56      	ldr	r3, [pc, #344]	; (8007684 <fw_nav+0x438>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	ee07 3a90 	vmov	s15, r3
 8007534:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007538:	eddf 6a53 	vldr	s13, [pc, #332]	; 8007688 <fw_nav+0x43c>
 800753c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007540:	edc7 7a04 	vstr	s15, [r7, #16]
        nav_loopT = pif_cumulative_timer1ms;
 8007544:	4b4e      	ldr	r3, [pc, #312]	; (8007680 <fw_nav+0x434>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a4e      	ldr	r2, [pc, #312]	; (8007684 <fw_nav+0x438>)
 800754a:	6013      	str	r3, [r2, #0]

        // Altitude PID
        if (abs(GPS_AltErr) <= 3)
 800754c:	4b44      	ldr	r3, [pc, #272]	; (8007660 <fw_nav+0x414>)
 800754e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007552:	2b00      	cmp	r3, #0
 8007554:	bfb8      	it	lt
 8007556:	425b      	neglt	r3, r3
 8007558:	b29b      	uxth	r3, r3
 800755a:	2b03      	cmp	r3, #3
 800755c:	d809      	bhi.n	8007572 <fw_nav+0x326>
            altErrorI *= navDT; // Remove I-Term in deadspan
 800755e:	4b4b      	ldr	r3, [pc, #300]	; (800768c <fw_nav+0x440>)
 8007560:	ed93 7a00 	vldr	s14, [r3]
 8007564:	edd7 7a04 	vldr	s15, [r7, #16]
 8007568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756c:	4b47      	ldr	r3, [pc, #284]	; (800768c <fw_nav+0x440>)
 800756e:	edc3 7a00 	vstr	s15, [r3]

        GPS_AltErr *= 10;
 8007572:	4b3b      	ldr	r3, [pc, #236]	; (8007660 <fw_nav+0x414>)
 8007574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007578:	b29b      	uxth	r3, r3
 800757a:	461a      	mov	r2, r3
 800757c:	0092      	lsls	r2, r2, #2
 800757e:	4413      	add	r3, r2
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	b29b      	uxth	r3, r3
 8007584:	b21a      	sxth	r2, r3
 8007586:	4b36      	ldr	r3, [pc, #216]	; (8007660 <fw_nav+0x414>)
 8007588:	801a      	strh	r2, [r3, #0]
        altErrorI += (GPS_AltErr * altPID_PARAM.kI) * navDT;    // Acumulate I from PIDPOSR
 800758a:	4b35      	ldr	r3, [pc, #212]	; (8007660 <fw_nav+0x414>)
 800758c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007590:	ee07 3a90 	vmov	s15, r3
 8007594:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007598:	4b3d      	ldr	r3, [pc, #244]	; (8007690 <fw_nav+0x444>)
 800759a:	edd3 7a01 	vldr	s15, [r3, #4]
 800759e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80075a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80075a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80075aa:	4b38      	ldr	r3, [pc, #224]	; (800768c <fw_nav+0x440>)
 80075ac:	edd3 7a00 	vldr	s15, [r3]
 80075b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075b4:	4b35      	ldr	r3, [pc, #212]	; (800768c <fw_nav+0x440>)
 80075b6:	edc3 7a00 	vstr	s15, [r3]
        altErrorI = constrain(altErrorI, -500, 500);            // limits I term influence
 80075ba:	4b34      	ldr	r3, [pc, #208]	; (800768c <fw_nav+0x440>)
 80075bc:	edd3 7a00 	vldr	s15, [r3]
 80075c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80075c8:	4932      	ldr	r1, [pc, #200]	; (8007694 <fw_nav+0x448>)
 80075ca:	ee17 0a90 	vmov	r0, s15
 80075ce:	f7fc fb8d 	bl	8003cec <constrain>
 80075d2:	ee07 0a90 	vmov	s15, r0
 80075d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075da:	4b2c      	ldr	r3, [pc, #176]	; (800768c <fw_nav+0x440>)
 80075dc:	edc3 7a00 	vstr	s15, [r3]

        delta[0] = (GPS_AltErr - lastAltDiff);
 80075e0:	4b1f      	ldr	r3, [pc, #124]	; (8007660 <fw_nav+0x414>)
 80075e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	4b2b      	ldr	r3, [pc, #172]	; (8007698 <fw_nav+0x44c>)
 80075ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	b21b      	sxth	r3, r3
 80075f6:	80bb      	strh	r3, [r7, #4]
        lastAltDiff = GPS_AltErr;
 80075f8:	4b19      	ldr	r3, [pc, #100]	; (8007660 <fw_nav+0x414>)
 80075fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80075fe:	4b26      	ldr	r3, [pc, #152]	; (8007698 <fw_nav+0x44c>)
 8007600:	801a      	strh	r2, [r3, #0]
        if (abs(delta[0]) > 100)
 8007602:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	bfb8      	it	lt
 800760a:	425b      	neglt	r3, r3
 800760c:	b29b      	uxth	r3, r3
 800760e:	2b64      	cmp	r3, #100	; 0x64
 8007610:	d901      	bls.n	8007616 <fw_nav+0x3ca>
            delta[0] = 0;
 8007612:	2300      	movs	r3, #0
 8007614:	80bb      	strh	r3, [r7, #4]

        for (i = 0; i < GPS_UPD_HZ; i++)
 8007616:	2300      	movs	r3, #0
 8007618:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800761c:	e00f      	b.n	800763e <fw_nav+0x3f2>
            altHist[i] = altHist[i + 1];
 800761e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007628:	491c      	ldr	r1, [pc, #112]	; (800769c <fw_nav+0x450>)
 800762a:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800762e:	4a1b      	ldr	r2, [pc, #108]	; (800769c <fw_nav+0x450>)
 8007630:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007634:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007638:	3301      	adds	r3, #1
 800763a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800763e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007642:	2b04      	cmp	r3, #4
 8007644:	d9eb      	bls.n	800761e <fw_nav+0x3d2>

        altHist[GPS_UPD_HZ - 1] = delta[0];
 8007646:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800764a:	4b14      	ldr	r3, [pc, #80]	; (800769c <fw_nav+0x450>)
 800764c:	811a      	strh	r2, [r3, #8]

        // Store 1 sec history for D-term in shift register
        ALT_deltaSum = 0;       // Sum History
 800764e:	4b14      	ldr	r3, [pc, #80]	; (80076a0 <fw_nav+0x454>)
 8007650:	2200      	movs	r2, #0
 8007652:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007654:	2300      	movs	r3, #0
 8007656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800765a:	e037      	b.n	80076cc <fw_nav+0x480>
 800765c:	20001128 	.word	0x20001128
 8007660:	20001292 	.word	0x20001292
 8007664:	20001298 	.word	0x20001298
 8007668:	20001988 	.word	0x20001988
 800766c:	20001a72 	.word	0x20001a72
 8007670:	20001a58 	.word	0x20001a58
 8007674:	20001a64 	.word	0x20001a64
 8007678:	3dcccccd 	.word	0x3dcccccd
 800767c:	51eb851f 	.word	0x51eb851f
 8007680:	200020e0 	.word	0x200020e0
 8007684:	2000129c 	.word	0x2000129c
 8007688:	447a0000 	.word	0x447a0000
 800768c:	2000126c 	.word	0x2000126c
 8007690:	200015e8 	.word	0x200015e8
 8007694:	fffffe0c 	.word	0xfffffe0c
 8007698:	20001270 	.word	0x20001270
 800769c:	20001278 	.word	0x20001278
 80076a0:	200012a0 	.word	0x200012a0
            ALT_deltaSum += altHist[i];
 80076a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076a8:	4a64      	ldr	r2, [pc, #400]	; (800783c <fw_nav+0x5f0>)
 80076aa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	4b63      	ldr	r3, [pc, #396]	; (8007840 <fw_nav+0x5f4>)
 80076b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	4413      	add	r3, r2
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	b21a      	sxth	r2, r3
 80076be:	4b60      	ldr	r3, [pc, #384]	; (8007840 <fw_nav+0x5f4>)
 80076c0:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80076c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076c6:	3301      	adds	r3, #1
 80076c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076d0:	2b04      	cmp	r3, #4
 80076d2:	d9e7      	bls.n	80076a4 <fw_nav+0x458>

        ALT_deltaSum = (ALT_deltaSum * altPID_PARAM.kD) / navDT;
 80076d4:	4b5a      	ldr	r3, [pc, #360]	; (8007840 <fw_nav+0x5f4>)
 80076d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076da:	ee07 3a90 	vmov	s15, r3
 80076de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076e2:	4b58      	ldr	r3, [pc, #352]	; (8007844 <fw_nav+0x5f8>)
 80076e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80076e8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80076ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80076f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076f8:	ee17 3a90 	vmov	r3, s15
 80076fc:	b21a      	sxth	r2, r3
 80076fe:	4b50      	ldr	r3, [pc, #320]	; (8007840 <fw_nav+0x5f4>)
 8007700:	801a      	strh	r2, [r3, #0]
        altDiff = GPS_AltErr * altPID_PARAM.kP; // Add P in Elevator compensation.
 8007702:	4b51      	ldr	r3, [pc, #324]	; (8007848 <fw_nav+0x5fc>)
 8007704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007708:	ee07 3a90 	vmov	s15, r3
 800770c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007710:	4b4c      	ldr	r3, [pc, #304]	; (8007844 <fw_nav+0x5f8>)
 8007712:	edd3 7a00 	vldr	s15, [r3]
 8007716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800771a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800771e:	ee17 3a90 	vmov	r3, s15
 8007722:	83fb      	strh	r3, [r7, #30]
        altDiff += (altErrorI); // Add I
 8007724:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007728:	ee07 3a90 	vmov	s15, r3
 800772c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007730:	4b46      	ldr	r3, [pc, #280]	; (800784c <fw_nav+0x600>)
 8007732:	edd3 7a00 	vldr	s15, [r3]
 8007736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800773a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800773e:	ee17 3a90 	vmov	r3, s15
 8007742:	83fb      	strh	r3, [r7, #30]

        // Start of NavPID
        if (abs(navDiff) <= 3)
 8007744:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007748:	2b00      	cmp	r3, #0
 800774a:	bfb8      	it	lt
 800774c:	425b      	neglt	r3, r3
 800774e:	b29b      	uxth	r3, r3
 8007750:	2b03      	cmp	r3, #3
 8007752:	d809      	bhi.n	8007768 <fw_nav+0x51c>
            navErrorI *= navDT; // Remove I-Term in deadspan
 8007754:	4b3e      	ldr	r3, [pc, #248]	; (8007850 <fw_nav+0x604>)
 8007756:	ed93 7a00 	vldr	s14, [r3]
 800775a:	edd7 7a04 	vldr	s15, [r7, #16]
 800775e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007762:	4b3b      	ldr	r3, [pc, #236]	; (8007850 <fw_nav+0x604>)
 8007764:	edc3 7a00 	vstr	s15, [r3]

        navDiff *= 10;
 8007768:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800776a:	461a      	mov	r2, r3
 800776c:	0092      	lsls	r2, r2, #2
 800776e:	4413      	add	r3, r2
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	b29b      	uxth	r3, r3
 8007774:	84bb      	strh	r3, [r7, #36]	; 0x24

        navErrorI += (navDiff * navPID_PARAM.kI) * navDT;
 8007776:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800777a:	ee07 3a90 	vmov	s15, r3
 800777e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007782:	4b34      	ldr	r3, [pc, #208]	; (8007854 <fw_nav+0x608>)
 8007784:	edd3 7a01 	vldr	s15, [r3, #4]
 8007788:	ee27 7a27 	vmul.f32	s14, s14, s15
 800778c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007790:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007794:	4b2e      	ldr	r3, [pc, #184]	; (8007850 <fw_nav+0x604>)
 8007796:	edd3 7a00 	vldr	s15, [r3]
 800779a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800779e:	4b2c      	ldr	r3, [pc, #176]	; (8007850 <fw_nav+0x604>)
 80077a0:	edc3 7a00 	vstr	s15, [r3]
        navErrorI = constrain(navErrorI, -500, 500);
 80077a4:	4b2a      	ldr	r3, [pc, #168]	; (8007850 <fw_nav+0x604>)
 80077a6:	edd3 7a00 	vldr	s15, [r3]
 80077aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80077b2:	4929      	ldr	r1, [pc, #164]	; (8007858 <fw_nav+0x60c>)
 80077b4:	ee17 0a90 	vmov	r0, s15
 80077b8:	f7fc fa98 	bl	8003cec <constrain>
 80077bc:	ee07 0a90 	vmov	s15, r0
 80077c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077c4:	4b22      	ldr	r3, [pc, #136]	; (8007850 <fw_nav+0x604>)
 80077c6:	edc3 7a00 	vstr	s15, [r3]

        delta[1] = (navDiff - lastnavDiff);
 80077ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80077cc:	4b23      	ldr	r3, [pc, #140]	; (800785c <fw_nav+0x610>)
 80077ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	b21b      	sxth	r3, r3
 80077da:	80fb      	strh	r3, [r7, #6]
        lastnavDiff = navDiff;
 80077dc:	4a1f      	ldr	r2, [pc, #124]	; (800785c <fw_nav+0x610>)
 80077de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077e0:	8013      	strh	r3, [r2, #0]

        if (abs(delta[1]) > 100)
 80077e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	bfb8      	it	lt
 80077ea:	425b      	neglt	r3, r3
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	2b64      	cmp	r3, #100	; 0x64
 80077f0:	d901      	bls.n	80077f6 <fw_nav+0x5aa>
            delta[1] = 0;
 80077f2:	2300      	movs	r3, #0
 80077f4:	80fb      	strh	r3, [r7, #6]

        // Store 1 sec history for D-term in shift register
        for (i = 0; i < GPS_UPD_HZ; i++)
 80077f6:	2300      	movs	r3, #0
 80077f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077fc:	e00f      	b.n	800781e <fw_nav+0x5d2>
            navDif[i] = navDif[i + 1];
 80077fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007808:	4915      	ldr	r1, [pc, #84]	; (8007860 <fw_nav+0x614>)
 800780a:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800780e:	4a14      	ldr	r2, [pc, #80]	; (8007860 <fw_nav+0x614>)
 8007810:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007814:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007818:	3301      	adds	r3, #1
 800781a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800781e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007822:	2b04      	cmp	r3, #4
 8007824:	d9eb      	bls.n	80077fe <fw_nav+0x5b2>

        navDif[GPS_UPD_HZ - 1] = delta[1];
 8007826:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800782a:	4b0d      	ldr	r3, [pc, #52]	; (8007860 <fw_nav+0x614>)
 800782c:	811a      	strh	r2, [r3, #8]

        NAV_deltaSum = 0;       // Sum History
 800782e:	4b0d      	ldr	r3, [pc, #52]	; (8007864 <fw_nav+0x618>)
 8007830:	2200      	movs	r2, #0
 8007832:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007834:	2300      	movs	r3, #0
 8007836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800783a:	e029      	b.n	8007890 <fw_nav+0x644>
 800783c:	20001278 	.word	0x20001278
 8007840:	200012a0 	.word	0x200012a0
 8007844:	200015e8 	.word	0x200015e8
 8007848:	20001292 	.word	0x20001292
 800784c:	2000126c 	.word	0x2000126c
 8007850:	20001268 	.word	0x20001268
 8007854:	200015d8 	.word	0x200015d8
 8007858:	fffffe0c 	.word	0xfffffe0c
 800785c:	20001272 	.word	0x20001272
 8007860:	20001284 	.word	0x20001284
 8007864:	200012a2 	.word	0x200012a2
            NAV_deltaSum += navDif[i];
 8007868:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800786c:	4abc      	ldr	r2, [pc, #752]	; (8007b60 <fw_nav+0x914>)
 800786e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8007872:	b29a      	uxth	r2, r3
 8007874:	4bbb      	ldr	r3, [pc, #748]	; (8007b64 <fw_nav+0x918>)
 8007876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800787a:	b29b      	uxth	r3, r3
 800787c:	4413      	add	r3, r2
 800787e:	b29b      	uxth	r3, r3
 8007880:	b21a      	sxth	r2, r3
 8007882:	4bb8      	ldr	r3, [pc, #736]	; (8007b64 <fw_nav+0x918>)
 8007884:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007886:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800788a:	3301      	adds	r3, #1
 800788c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007890:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007894:	2b04      	cmp	r3, #4
 8007896:	d9e7      	bls.n	8007868 <fw_nav+0x61c>

        NAV_deltaSum = (NAV_deltaSum * navPID_PARAM.kD) / navDT;    // Add D
 8007898:	4bb2      	ldr	r3, [pc, #712]	; (8007b64 <fw_nav+0x918>)
 800789a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800789e:	ee07 3a90 	vmov	s15, r3
 80078a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80078a6:	4bb0      	ldr	r3, [pc, #704]	; (8007b68 <fw_nav+0x91c>)
 80078a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80078ac:	ee67 6a27 	vmul.f32	s13, s14, s15
 80078b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80078b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078bc:	ee17 3a90 	vmov	r3, s15
 80078c0:	b21a      	sxth	r2, r3
 80078c2:	4ba8      	ldr	r3, [pc, #672]	; (8007b64 <fw_nav+0x918>)
 80078c4:	801a      	strh	r2, [r3, #0]

        navDiff *= navPID_PARAM.kP;                                 // Add P
 80078c6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80078ca:	ee07 3a90 	vmov	s15, r3
 80078ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80078d2:	4ba5      	ldr	r3, [pc, #660]	; (8007b68 <fw_nav+0x91c>)
 80078d4:	edd3 7a00 	vldr	s15, [r3]
 80078d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078e0:	ee17 3a90 	vmov	r3, s15
 80078e4:	84bb      	strh	r3, [r7, #36]	; 0x24
        navDiff += navErrorI;                                       // Add I
 80078e6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80078ea:	ee07 3a90 	vmov	s15, r3
 80078ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80078f2:	4b9e      	ldr	r3, [pc, #632]	; (8007b6c <fw_nav+0x920>)
 80078f4:	edd3 7a00 	vldr	s15, [r3]
 80078f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007900:	ee17 3a90 	vmov	r3, s15
 8007904:	84bb      	strh	r3, [r7, #36]	; 0x24
        // End of NavPID

        // Limit outputs
        GPS_angle[PITCH] = constrain(altDiff / 10, -cfg.fw_gps_maxclimb * 10, cfg.fw_gps_maxdive * 10) + ALT_deltaSum;
 8007906:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800790a:	4a99      	ldr	r2, [pc, #612]	; (8007b70 <fw_nav+0x924>)
 800790c:	fb82 1203 	smull	r1, r2, r2, r3
 8007910:	1092      	asrs	r2, r2, #2
 8007912:	17db      	asrs	r3, r3, #31
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	b21b      	sxth	r3, r3
 8007918:	4618      	mov	r0, r3
 800791a:	4b96      	ldr	r3, [pc, #600]	; (8007b74 <fw_nav+0x928>)
 800791c:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8007920:	461a      	mov	r2, r3
 8007922:	f06f 0309 	mvn.w	r3, #9
 8007926:	fb03 f102 	mul.w	r1, r3, r2
 800792a:	4b92      	ldr	r3, [pc, #584]	; (8007b74 <fw_nav+0x928>)
 800792c:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 8007930:	461a      	mov	r2, r3
 8007932:	4613      	mov	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4413      	add	r3, r2
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	461a      	mov	r2, r3
 800793c:	f7fc f9d6 	bl	8003cec <constrain>
 8007940:	4603      	mov	r3, r0
 8007942:	b29a      	uxth	r2, r3
 8007944:	4b8c      	ldr	r3, [pc, #560]	; (8007b78 <fw_nav+0x92c>)
 8007946:	f9b3 3000 	ldrsh.w	r3, [r3]
 800794a:	b29b      	uxth	r3, r3
 800794c:	4413      	add	r3, r2
 800794e:	b29b      	uxth	r3, r3
 8007950:	b21a      	sxth	r2, r3
 8007952:	4b8a      	ldr	r3, [pc, #552]	; (8007b7c <fw_nav+0x930>)
 8007954:	805a      	strh	r2, [r3, #2]
        GPS_angle[ROLL] = constrain(navDiff / 10, -cfg.fw_gps_maxcorr * 10, cfg.fw_gps_maxcorr * 10) + NAV_deltaSum;
 8007956:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800795a:	4a85      	ldr	r2, [pc, #532]	; (8007b70 <fw_nav+0x924>)
 800795c:	fb82 1203 	smull	r1, r2, r2, r3
 8007960:	1092      	asrs	r2, r2, #2
 8007962:	17db      	asrs	r3, r3, #31
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	b21b      	sxth	r3, r3
 8007968:	4618      	mov	r0, r3
 800796a:	4b82      	ldr	r3, [pc, #520]	; (8007b74 <fw_nav+0x928>)
 800796c:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 8007970:	461a      	mov	r2, r3
 8007972:	f06f 0309 	mvn.w	r3, #9
 8007976:	fb03 f102 	mul.w	r1, r3, r2
 800797a:	4b7e      	ldr	r3, [pc, #504]	; (8007b74 <fw_nav+0x928>)
 800797c:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 8007980:	461a      	mov	r2, r3
 8007982:	4613      	mov	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	4413      	add	r3, r2
 8007988:	005b      	lsls	r3, r3, #1
 800798a:	461a      	mov	r2, r3
 800798c:	f7fc f9ae 	bl	8003cec <constrain>
 8007990:	4603      	mov	r3, r0
 8007992:	b29a      	uxth	r2, r3
 8007994:	4b73      	ldr	r3, [pc, #460]	; (8007b64 <fw_nav+0x918>)
 8007996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800799a:	b29b      	uxth	r3, r3
 800799c:	4413      	add	r3, r2
 800799e:	b29b      	uxth	r3, r3
 80079a0:	b21a      	sxth	r2, r3
 80079a2:	4b76      	ldr	r3, [pc, #472]	; (8007b7c <fw_nav+0x930>)
 80079a4:	801a      	strh	r2, [r3, #0]
        GPS_angle[YAW] = constrain(navDiff / 10, -cfg.fw_gps_rudder * 10, cfg.fw_gps_rudder * 10) + NAV_deltaSum;
 80079a6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80079aa:	4a71      	ldr	r2, [pc, #452]	; (8007b70 <fw_nav+0x924>)
 80079ac:	fb82 1203 	smull	r1, r2, r2, r3
 80079b0:	1092      	asrs	r2, r2, #2
 80079b2:	17db      	asrs	r3, r3, #31
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	b21b      	sxth	r3, r3
 80079b8:	4618      	mov	r0, r3
 80079ba:	4b6e      	ldr	r3, [pc, #440]	; (8007b74 <fw_nav+0x928>)
 80079bc:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 80079c0:	461a      	mov	r2, r3
 80079c2:	f06f 0309 	mvn.w	r3, #9
 80079c6:	fb03 f102 	mul.w	r1, r3, r2
 80079ca:	4b6a      	ldr	r3, [pc, #424]	; (8007b74 <fw_nav+0x928>)
 80079cc:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 80079d0:	461a      	mov	r2, r3
 80079d2:	4613      	mov	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	461a      	mov	r2, r3
 80079dc:	f7fc f986 	bl	8003cec <constrain>
 80079e0:	4603      	mov	r3, r0
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	4b5f      	ldr	r3, [pc, #380]	; (8007b64 <fw_nav+0x918>)
 80079e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	4413      	add	r3, r2
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	b21a      	sxth	r2, r3
 80079f2:	4b62      	ldr	r3, [pc, #392]	; (8007b7c <fw_nav+0x930>)
 80079f4:	809a      	strh	r2, [r3, #4]

        // Elevator compensation depending on behaviour.
        // Prevent stall with Disarmed motor
        if (f.MOTORS_STOPPED)
 80079f6:	4b62      	ldr	r3, [pc, #392]	; (8007b80 <fw_nav+0x934>)
 80079f8:	7c5b      	ldrb	r3, [r3, #17]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d016      	beq.n	8007a2c <fw_nav+0x7e0>
            GPS_angle[PITCH] = constrain(GPS_angle[PITCH], -cfg.fw_glide_angle, cfg.fw_gps_maxdive * 10);
 80079fe:	4b5f      	ldr	r3, [pc, #380]	; (8007b7c <fw_nav+0x930>)
 8007a00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007a04:	4618      	mov	r0, r3
 8007a06:	4b5b      	ldr	r3, [pc, #364]	; (8007b74 <fw_nav+0x928>)
 8007a08:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8007a0c:	4259      	negs	r1, r3
 8007a0e:	4b59      	ldr	r3, [pc, #356]	; (8007b74 <fw_nav+0x928>)
 8007a10:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 8007a14:	461a      	mov	r2, r3
 8007a16:	4613      	mov	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	461a      	mov	r2, r3
 8007a20:	f7fc f964 	bl	8003cec <constrain>
 8007a24:	4603      	mov	r3, r0
 8007a26:	b21a      	sxth	r2, r3
 8007a28:	4b54      	ldr	r3, [pc, #336]	; (8007b7c <fw_nav+0x930>)
 8007a2a:	805a      	strh	r2, [r3, #2]

        // Add elevator compared with rollAngle
        if (!f.CLIMBOUT_FW)
 8007a2c:	4b54      	ldr	r3, [pc, #336]	; (8007b80 <fw_nav+0x934>)
 8007a2e:	7cdb      	ldrb	r3, [r3, #19]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d11b      	bne.n	8007a6c <fw_nav+0x820>
            GPS_angle[PITCH] -= (abs(angle[ROLL]) * (cfg.fw_roll_comp / 100));
 8007a34:	4b51      	ldr	r3, [pc, #324]	; (8007b7c <fw_nav+0x930>)
 8007a36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	4b51      	ldr	r3, [pc, #324]	; (8007b84 <fw_nav+0x938>)
 8007a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	bfb8      	it	lt
 8007a46:	425b      	neglt	r3, r3
 8007a48:	b299      	uxth	r1, r3
 8007a4a:	4b4a      	ldr	r3, [pc, #296]	; (8007b74 <fw_nav+0x928>)
 8007a4c:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8007a50:	484d      	ldr	r0, [pc, #308]	; (8007b88 <fw_nav+0x93c>)
 8007a52:	fba0 0303 	umull	r0, r3, r0, r3
 8007a56:	095b      	lsrs	r3, r3, #5
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	fb11 f303 	smulbb	r3, r1, r3
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	b21a      	sxth	r2, r3
 8007a68:	4b44      	ldr	r3, [pc, #272]	; (8007b7c <fw_nav+0x930>)
 8007a6a:	805a      	strh	r2, [r3, #2]

        // Throttle compensation depending on behaviour.
        // Compensate throttle with pitch Angle
        NAV_Thro -= constrain(angle[PITCH] * PITCH_COMP, 0, 450);
 8007a6c:	4b45      	ldr	r3, [pc, #276]	; (8007b84 <fw_nav+0x938>)
 8007a6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007a72:	ee07 3a90 	vmov	s15, r3
 8007a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007a7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a86:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	ee17 0a90 	vmov	r0, s15
 8007a90:	f7fc f92c 	bl	8003cec <constrain>
 8007a94:	4601      	mov	r1, r0
 8007a96:	4b3d      	ldr	r3, [pc, #244]	; (8007b8c <fw_nav+0x940>)
 8007a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	b28b      	uxth	r3, r1
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	b21a      	sxth	r2, r3
 8007aa6:	4b39      	ldr	r3, [pc, #228]	; (8007b8c <fw_nav+0x940>)
 8007aa8:	801a      	strh	r2, [r3, #0]

        // Force the Plane move forward in headwind with speedBoost
        groundSpeed = GPS_speed;
 8007aaa:	4b39      	ldr	r3, [pc, #228]	; (8007b90 <fw_nav+0x944>)
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	81fb      	strh	r3, [r7, #14]
        spDiff = (GPS_MINSPEED - groundSpeed) * I_TERM;
 8007ab0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007ab4:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8007ab8:	ee07 3a90 	vmov	s15, r3
 8007abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ac0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007b94 <fw_nav+0x948>
 8007ac4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ac8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007acc:	ee17 3a90 	vmov	r3, s15
 8007ad0:	60bb      	str	r3, [r7, #8]

        if (GPS_speed < GPS_MINSPEED - 50 || GPS_speed > GPS_MINSPEED + 50)
 8007ad2:	4b2f      	ldr	r3, [pc, #188]	; (8007b90 <fw_nav+0x944>)
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8007ada:	d305      	bcc.n	8007ae8 <fw_nav+0x89c>
 8007adc:	4b2c      	ldr	r3, [pc, #176]	; (8007b90 <fw_nav+0x944>)
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	f240 2226 	movw	r2, #550	; 0x226
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d90a      	bls.n	8007afe <fw_nav+0x8b2>
            speedBoost += spDiff;
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	4b2a      	ldr	r3, [pc, #168]	; (8007b98 <fw_nav+0x94c>)
 8007aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	4413      	add	r3, r2
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	b21a      	sxth	r2, r3
 8007afa:	4b27      	ldr	r3, [pc, #156]	; (8007b98 <fw_nav+0x94c>)
 8007afc:	801a      	strh	r2, [r3, #0]

        speedBoost = constrain(speedBoost, 0, 500);
 8007afe:	4b26      	ldr	r3, [pc, #152]	; (8007b98 <fw_nav+0x94c>)
 8007b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007b08:	2100      	movs	r1, #0
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fc f8ee 	bl	8003cec <constrain>
 8007b10:	4603      	mov	r3, r0
 8007b12:	b21a      	sxth	r2, r3
 8007b14:	4b20      	ldr	r3, [pc, #128]	; (8007b98 <fw_nav+0x94c>)
 8007b16:	801a      	strh	r2, [r3, #0]
        NAV_Thro += speedBoost;
 8007b18:	4b1c      	ldr	r3, [pc, #112]	; (8007b8c <fw_nav+0x940>)
 8007b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	4b1d      	ldr	r3, [pc, #116]	; (8007b98 <fw_nav+0x94c>)
 8007b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	4413      	add	r3, r2
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	b21a      	sxth	r2, r3
 8007b2e:	4b17      	ldr	r3, [pc, #92]	; (8007b8c <fw_nav+0x940>)
 8007b30:	801a      	strh	r2, [r3, #0]

        // constrain throttle to Max climb.
        NAV_Thro = constrain(NAV_Thro, cfg.fw_idle_throttle, cfg.fw_climb_throttle);
 8007b32:	4b16      	ldr	r3, [pc, #88]	; (8007b8c <fw_nav+0x940>)
 8007b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	4b0e      	ldr	r3, [pc, #56]	; (8007b74 <fw_nav+0x928>)
 8007b3c:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 8007b40:	4619      	mov	r1, r3
 8007b42:	4b0c      	ldr	r3, [pc, #48]	; (8007b74 <fw_nav+0x928>)
 8007b44:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8007b48:	461a      	mov	r2, r3
 8007b4a:	f7fc f8cf 	bl	8003cec <constrain>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	b21a      	sxth	r2, r3
 8007b52:	4b0e      	ldr	r3, [pc, #56]	; (8007b8c <fw_nav+0x940>)
 8007b54:	801a      	strh	r2, [r3, #0]
    }
    // End of NavTimer

    // PassThru for throttle In AcroMode
    if ((!f.ANGLE_MODE && !f.HORIZON_MODE) || (f.PASSTHRU_MODE && !f.FW_FAILSAFE_RTH_ENABLE)) {
 8007b56:	4b0a      	ldr	r3, [pc, #40]	; (8007b80 <fw_nav+0x934>)
 8007b58:	78db      	ldrb	r3, [r3, #3]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d122      	bne.n	8007ba4 <fw_nav+0x958>
 8007b5e:	e01d      	b.n	8007b9c <fw_nav+0x950>
 8007b60:	20001284 	.word	0x20001284
 8007b64:	200012a2 	.word	0x200012a2
 8007b68:	200015d8 	.word	0x200015d8
 8007b6c:	20001268 	.word	0x20001268
 8007b70:	66666667 	.word	0x66666667
 8007b74:	20001128 	.word	0x20001128
 8007b78:	200012a0 	.word	0x200012a0
 8007b7c:	20001a7c 	.word	0x20001a7c
 8007b80:	20001988 	.word	0x20001988
 8007b84:	20001790 	.word	0x20001790
 8007b88:	51eb851f 	.word	0x51eb851f
 8007b8c:	20001298 	.word	0x20001298
 8007b90:	20001a78 	.word	0x20001a78
 8007b94:	3dcccccd 	.word	0x3dcccccd
 8007b98:	20001274 	.word	0x20001274
 8007b9c:	4b16      	ldr	r3, [pc, #88]	; (8007bf8 <fw_nav+0x9ac>)
 8007b9e:	791b      	ldrb	r3, [r3, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d007      	beq.n	8007bb4 <fw_nav+0x968>
 8007ba4:	4b14      	ldr	r3, [pc, #80]	; (8007bf8 <fw_nav+0x9ac>)
 8007ba6:	7a9b      	ldrb	r3, [r3, #10]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00f      	beq.n	8007bcc <fw_nav+0x980>
 8007bac:	4b12      	ldr	r3, [pc, #72]	; (8007bf8 <fw_nav+0x9ac>)
 8007bae:	7c9b      	ldrb	r3, [r3, #18]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10b      	bne.n	8007bcc <fw_nav+0x980>
        NAV_Thro = TX_Thro;
 8007bb4:	4a11      	ldr	r2, [pc, #68]	; (8007bfc <fw_nav+0x9b0>)
 8007bb6:	8b7b      	ldrh	r3, [r7, #26]
 8007bb8:	8013      	strh	r3, [r2, #0]
        GPS_angle[PITCH] = 0;
 8007bba:	4b11      	ldr	r3, [pc, #68]	; (8007c00 <fw_nav+0x9b4>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	805a      	strh	r2, [r3, #2]
        GPS_angle[ROLL] = 0;
 8007bc0:	4b0f      	ldr	r3, [pc, #60]	; (8007c00 <fw_nav+0x9b4>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	801a      	strh	r2, [r3, #0]
        GPS_angle[YAW] = 0;
 8007bc6:	4b0e      	ldr	r3, [pc, #56]	; (8007c00 <fw_nav+0x9b4>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	809a      	strh	r2, [r3, #4]
    }
    rcCommand[THROTTLE] = NAV_Thro;
 8007bcc:	4b0b      	ldr	r3, [pc, #44]	; (8007bfc <fw_nav+0x9b0>)
 8007bce:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007bd2:	4b0c      	ldr	r3, [pc, #48]	; (8007c04 <fw_nav+0x9b8>)
 8007bd4:	80da      	strh	r2, [r3, #6]
    rcCommand[YAW] += GPS_angle[YAW];
 8007bd6:	4b0b      	ldr	r3, [pc, #44]	; (8007c04 <fw_nav+0x9b8>)
 8007bd8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	4b08      	ldr	r3, [pc, #32]	; (8007c00 <fw_nav+0x9b4>)
 8007be0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	4413      	add	r3, r2
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	b21a      	sxth	r2, r3
 8007bec:	4b05      	ldr	r3, [pc, #20]	; (8007c04 <fw_nav+0x9b8>)
 8007bee:	809a      	strh	r2, [r3, #4]
}
 8007bf0:	bf00      	nop
 8007bf2:	3728      	adds	r7, #40	; 0x28
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	20001988 	.word	0x20001988
 8007bfc:	20001298 	.word	0x20001298
 8007c00:	20001a7c 	.word	0x20001a7c
 8007c04:	200019e8 	.word	0x200019e8

08007c08 <gpsSetState>:
static PifGpsNmea gps_nmea;
static PifGpsUblox gps_ublox;


static void gpsSetState(uint8_t state)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	71fb      	strb	r3, [r7, #7]
    gpsData.state = state;
 8007c12:	4a0b      	ldr	r2, [pc, #44]	; (8007c40 <gpsSetState+0x38>)
 8007c14:	79fb      	ldrb	r3, [r7, #7]
 8007c16:	7013      	strb	r3, [r2, #0]
    gpsData.state_position = 0;
 8007c18:	4b09      	ldr	r3, [pc, #36]	; (8007c40 <gpsSetState+0x38>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	611a      	str	r2, [r3, #16]
    gpsData.state_ts = pif_cumulative_timer1ms;
 8007c1e:	4b09      	ldr	r3, [pc, #36]	; (8007c44 <gpsSetState+0x3c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a07      	ldr	r2, [pc, #28]	; (8007c40 <gpsSetState+0x38>)
 8007c24:	6153      	str	r3, [r2, #20]
    gpsData.step = 0;
 8007c26:	4b06      	ldr	r3, [pc, #24]	; (8007c40 <gpsSetState+0x38>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	60da      	str	r2, [r3, #12]
    gpsData.receive = FALSE;
 8007c2c:	4b04      	ldr	r3, [pc, #16]	; (8007c40 <gpsSetState+0x38>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	761a      	strb	r2, [r3, #24]
}
 8007c32:	bf00      	nop
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	200012a4 	.word	0x200012a4
 8007c44:	200020e0 	.word	0x200020e0

08007c48 <_evtGpsUbloxCfgResult>:

static void _evtGpsUbloxCfgResult(PifGpsUblox* p_owner, BOOL result)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	460b      	mov	r3, r1
 8007c52:	70fb      	strb	r3, [r7, #3]
	(void)p_owner;

	gpsData.cfg_result = result ? GUCR_ACK : GUCR_NAK;
 8007c54:	78fb      	ldrb	r3, [r7, #3]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <_evtGpsUbloxCfgResult+0x16>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e000      	b.n	8007c60 <_evtGpsUbloxCfgResult+0x18>
 8007c5e:	2302      	movs	r3, #2
 8007c60:	4a03      	ldr	r2, [pc, #12]	; (8007c70 <_evtGpsUbloxCfgResult+0x28>)
 8007c62:	61d3      	str	r3, [r2, #28]
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr
 8007c70:	200012a4 	.word	0x200012a4
 8007c74:	00000000 	.word	0x00000000

08007c78 <_evtGpsReceive>:

static void _evtGpsReceive(PifGps *p_owner)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
    f.GPS_FIX = p_owner->_fix;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c86:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	4b5c      	ldr	r3, [pc, #368]	; (8007e00 <_evtGpsReceive+0x188>)
 8007c90:	72da      	strb	r2, [r3, #11]
    if (f.GPS_FIX) {
 8007c92:	4b5b      	ldr	r3, [pc, #364]	; (8007e00 <_evtGpsReceive+0x188>)
 8007c94:	7adb      	ldrb	r3, [r3, #11]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d049      	beq.n	8007d2e <_evtGpsReceive+0xb6>
        GPS_coord[LAT] = p_owner->_coord_deg[PIF_GPS_LAT] * 10000000UL;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007ca0:	a355      	add	r3, pc, #340	; (adr r3, 8007df8 <_evtGpsReceive+0x180>)
 8007ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca6:	f7f8 fc65 	bl	8000574 <__aeabi_dmul>
 8007caa:	4602      	mov	r2, r0
 8007cac:	460b      	mov	r3, r1
 8007cae:	4610      	mov	r0, r2
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	f7f8 fef9 	bl	8000aa8 <__aeabi_d2iz>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	4a52      	ldr	r2, [pc, #328]	; (8007e04 <_evtGpsReceive+0x18c>)
 8007cba:	6013      	str	r3, [r2, #0]
        GPS_coord[LON] = p_owner->_coord_deg[PIF_GPS_LON] * 10000000UL;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007cc2:	a34d      	add	r3, pc, #308	; (adr r3, 8007df8 <_evtGpsReceive+0x180>)
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	f7f8 fc54 	bl	8000574 <__aeabi_dmul>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	f7f8 fee8 	bl	8000aa8 <__aeabi_d2iz>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	4a4a      	ldr	r2, [pc, #296]	; (8007e04 <_evtGpsReceive+0x18c>)
 8007cdc:	6053      	str	r3, [r2, #4]
        GPS_numSat = p_owner->_num_sat;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8007ce4:	4b48      	ldr	r3, [pc, #288]	; (8007e08 <_evtGpsReceive+0x190>)
 8007ce6:	701a      	strb	r2, [r3, #0]
        GPS_altitude = p_owner->_altitude;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007cee:	4610      	mov	r0, r2
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	f7f8 ff01 	bl	8000af8 <__aeabi_d2uiz>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	4b44      	ldr	r3, [pc, #272]	; (8007e0c <_evtGpsReceive+0x194>)
 8007cfc:	801a      	strh	r2, [r3, #0]
        if (!sensors(SENSOR_BARO) && f.FIXED_WING)
 8007cfe:	2004      	movs	r0, #4
 8007d00:	f7ff f92a 	bl	8006f58 <sensors>
 8007d04:	4603      	mov	r3, r0
 8007d06:	f083 0301 	eor.w	r3, r3, #1
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00e      	beq.n	8007d2e <_evtGpsReceive+0xb6>
 8007d10:	4b3b      	ldr	r3, [pc, #236]	; (8007e00 <_evtGpsReceive+0x188>)
 8007d12:	7c1b      	ldrb	r3, [r3, #16]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00a      	beq.n	8007d2e <_evtGpsReceive+0xb6>
            EstAlt = (GPS_altitude - GPS_home[ALT]) * 100;    // Use values Based on GPS
 8007d18:	4b3c      	ldr	r3, [pc, #240]	; (8007e0c <_evtGpsReceive+0x194>)
 8007d1a:	881b      	ldrh	r3, [r3, #0]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	4b3c      	ldr	r3, [pc, #240]	; (8007e10 <_evtGpsReceive+0x198>)
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	2264      	movs	r2, #100	; 0x64
 8007d26:	fb02 f303 	mul.w	r3, r2, r3
 8007d2a:	4a3a      	ldr	r2, [pc, #232]	; (8007e14 <_evtGpsReceive+0x19c>)
 8007d2c:	6013      	str	r3, [r2, #0]
    }

    GPS_speed = (uint16_t)(p_owner->_ground_speed / 10);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	4b37      	ldr	r3, [pc, #220]	; (8007e18 <_evtGpsReceive+0x1a0>)
 8007d3a:	f7f8 fd45 	bl	80007c8 <__aeabi_ddiv>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4610      	mov	r0, r2
 8007d44:	4619      	mov	r1, r3
 8007d46:	f7f8 fed7 	bl	8000af8 <__aeabi_d2uiz>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	4b33      	ldr	r3, [pc, #204]	; (8007e1c <_evtGpsReceive+0x1a4>)
 8007d50:	801a      	strh	r2, [r3, #0]
    GPS_ground_course = (uint16_t)(p_owner->_ground_course * 10);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007d58:	f04f 0200 	mov.w	r2, #0
 8007d5c:	4b2e      	ldr	r3, [pc, #184]	; (8007e18 <_evtGpsReceive+0x1a0>)
 8007d5e:	f7f8 fc09 	bl	8000574 <__aeabi_dmul>
 8007d62:	4602      	mov	r2, r0
 8007d64:	460b      	mov	r3, r1
 8007d66:	4610      	mov	r0, r2
 8007d68:	4619      	mov	r1, r3
 8007d6a:	f7f8 fec5 	bl	8000af8 <__aeabi_d2uiz>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	4b2b      	ldr	r3, [pc, #172]	; (8007e20 <_evtGpsReceive+0x1a8>)
 8007d74:	801a      	strh	r2, [r3, #0]
    if (!sensors(SENSOR_MAG) && GPS_speed > 100) {
 8007d76:	2008      	movs	r0, #8
 8007d78:	f7ff f8ee 	bl	8006f58 <sensors>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	f083 0301 	eor.w	r3, r3, #1
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d021      	beq.n	8007dcc <_evtGpsReceive+0x154>
 8007d88:	4b24      	ldr	r3, [pc, #144]	; (8007e1c <_evtGpsReceive+0x1a4>)
 8007d8a:	881b      	ldrh	r3, [r3, #0]
 8007d8c:	2b64      	cmp	r3, #100	; 0x64
 8007d8e:	d91d      	bls.n	8007dcc <_evtGpsReceive+0x154>
        GPS_ground_course = wrap_18000(GPS_ground_course * 10) / 10;
 8007d90:	4b23      	ldr	r3, [pc, #140]	; (8007e20 <_evtGpsReceive+0x1a8>)
 8007d92:	881b      	ldrh	r3, [r3, #0]
 8007d94:	461a      	mov	r2, r3
 8007d96:	4613      	mov	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4413      	add	r3, r2
 8007d9c:	005b      	lsls	r3, r3, #1
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f001 fce4 	bl	800976c <wrap_18000>
 8007da4:	4603      	mov	r3, r0
 8007da6:	4a1f      	ldr	r2, [pc, #124]	; (8007e24 <_evtGpsReceive+0x1ac>)
 8007da8:	fb82 1203 	smull	r1, r2, r2, r3
 8007dac:	1092      	asrs	r2, r2, #2
 8007dae:	17db      	asrs	r3, r3, #31
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	4b1a      	ldr	r3, [pc, #104]	; (8007e20 <_evtGpsReceive+0x1a8>)
 8007db6:	801a      	strh	r2, [r3, #0]
        heading = GPS_ground_course / 10;    // Use values Based on GPS if we are moving.
 8007db8:	4b19      	ldr	r3, [pc, #100]	; (8007e20 <_evtGpsReceive+0x1a8>)
 8007dba:	881b      	ldrh	r3, [r3, #0]
 8007dbc:	4a1a      	ldr	r2, [pc, #104]	; (8007e28 <_evtGpsReceive+0x1b0>)
 8007dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc2:	08db      	lsrs	r3, r3, #3
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	b21a      	sxth	r2, r3
 8007dc8:	4b18      	ldr	r3, [pc, #96]	; (8007e2c <_evtGpsReceive+0x1b4>)
 8007dca:	801a      	strh	r2, [r3, #0]
    }

    GPS_HorizontalAcc = p_owner->_horizontal_acc;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd0:	4a17      	ldr	r2, [pc, #92]	; (8007e30 <_evtGpsReceive+0x1b8>)
 8007dd2:	6013      	str	r3, [r2, #0]
    GPS_VerticalAcc = p_owner->_vertical_acc;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd8:	4a16      	ldr	r2, [pc, #88]	; (8007e34 <_evtGpsReceive+0x1bc>)
 8007dda:	6013      	str	r3, [r2, #0]

    g_task_gps->immediate = TRUE;
 8007ddc:	4b16      	ldr	r3, [pc, #88]	; (8007e38 <_evtGpsReceive+0x1c0>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2201      	movs	r2, #1
 8007de2:	705a      	strb	r2, [r3, #1]
    gpsData.receive = TRUE;
 8007de4:	4b15      	ldr	r3, [pc, #84]	; (8007e3c <_evtGpsReceive+0x1c4>)
 8007de6:	2201      	movs	r2, #1
 8007de8:	761a      	strb	r2, [r3, #24]
}
 8007dea:	bf00      	nop
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	f3af 8000 	nop.w
 8007df8:	00000000 	.word	0x00000000
 8007dfc:	416312d0 	.word	0x416312d0
 8007e00:	20001988 	.word	0x20001988
 8007e04:	20001a50 	.word	0x20001a50
 8007e08:	20001a70 	.word	0x20001a70
 8007e0c:	20001a76 	.word	0x20001a76
 8007e10:	20001a58 	.word	0x20001a58
 8007e14:	20001754 	.word	0x20001754
 8007e18:	40240000 	.word	0x40240000
 8007e1c:	20001a78 	.word	0x20001a78
 8007e20:	20001a82 	.word	0x20001a82
 8007e24:	66666667 	.word	0x66666667
 8007e28:	cccccccd 	.word	0xcccccccd
 8007e2c:	20001cb4 	.word	0x20001cb4
 8007e30:	20001b20 	.word	0x20001b20
 8007e34:	20001b24 	.word	0x20001b24
 8007e38:	20001b90 	.word	0x20001b90
 8007e3c:	200012a4 	.word	0x200012a4

08007e40 <_evtGpsTimeout>:

static void _evtGpsTimeout(PifGps *p_owner)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
    (void)p_owner;

    // remove GPS from capability
    if (mcfg.gps_type != GPS_NMEA || gpsInitData[gpsData.baudrateIndex].baudrate != 9600) {
 8007e48:	4b10      	ldr	r3, [pc, #64]	; (8007e8c <_evtGpsTimeout+0x4c>)
 8007e4a:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d108      	bne.n	8007e64 <_evtGpsTimeout+0x24>
 8007e52:	4b0f      	ldr	r3, [pc, #60]	; (8007e90 <_evtGpsTimeout+0x50>)
 8007e54:	785b      	ldrb	r3, [r3, #1]
 8007e56:	4a0f      	ldr	r2, [pc, #60]	; (8007e94 <_evtGpsTimeout+0x54>)
 8007e58:	00db      	lsls	r3, r3, #3
 8007e5a:	4413      	add	r3, r2
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8007e62:	d005      	beq.n	8007e70 <_evtGpsTimeout+0x30>
        serialStopReceiveFunc(&core.gpsport->comm);
 8007e64:	4b0c      	ldr	r3, [pc, #48]	; (8007e98 <_evtGpsTimeout+0x58>)
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	3304      	adds	r3, #4
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fa fc12 	bl	8002694 <serialStopReceiveFunc>
    }
    sensorsClear(SENSOR_GPS);
 8007e70:	2020      	movs	r0, #32
 8007e72:	f7ff f899 	bl	8006fa8 <sensorsClear>
    gpsSetState(GPS_LOSTCOMMS);
 8007e76:	2006      	movs	r0, #6
 8007e78:	f7ff fec6 	bl	8007c08 <gpsSetState>
#ifndef __PIF_NO_LOG__
    pifLog_Print(LT_INFO, "GPS: Timeout");
 8007e7c:	4907      	ldr	r1, [pc, #28]	; (8007e9c <_evtGpsTimeout+0x5c>)
 8007e7e:	2002      	movs	r0, #2
 8007e80:	f00b fafa 	bl	8013478 <pifLog_Print>
#endif
}
 8007e84:	bf00      	nop
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	20000bbc 	.word	0x20000bbc
 8007e90:	200012a4 	.word	0x200012a4
 8007e94:	0802789c 	.word	0x0802789c
 8007e98:	20000afc 	.word	0x20000afc
 8007e9c:	080262fc 	.word	0x080262fc

08007ea0 <gpsInit>:

void gpsInit(uint8_t port, uint8_t baudrateIndex)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	460a      	mov	r2, r1
 8007eaa:	71fb      	strb	r3, [r7, #7]
 8007eac:	4613      	mov	r3, r2
 8007eae:	71bb      	strb	r3, [r7, #6]
    // init gpsData structure. if we're not actually enabled, don't bother doing anything else
    gpsSetState(GPS_UNKNOWN);
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	f7ff fea9 	bl	8007c08 <gpsSetState>

    gpsData.baudrateIndex = baudrateIndex;
 8007eb6:	4a32      	ldr	r2, [pc, #200]	; (8007f80 <gpsInit+0xe0>)
 8007eb8:	79bb      	ldrb	r3, [r7, #6]
 8007eba:	7053      	strb	r3, [r2, #1]
    gpsData.lastMessage = pif_cumulative_timer1ms;
 8007ebc:	4b31      	ldr	r3, [pc, #196]	; (8007f84 <gpsInit+0xe4>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a2f      	ldr	r2, [pc, #188]	; (8007f80 <gpsInit+0xe0>)
 8007ec2:	6093      	str	r3, [r2, #8]
    gpsData.errors = 0;
 8007ec4:	4b2e      	ldr	r3, [pc, #184]	; (8007f80 <gpsInit+0xe0>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	605a      	str	r2, [r3, #4]

    gpsSetPIDs();
 8007eca:	f000 ff0f 	bl	8008cec <gpsSetPIDs>
    // Open GPS UART, no callback - buffer will be read out in gpsThread()
    core.gpsport = uartOpen(port, 9600, MODE_RXTX);    // signal GPS "thread" to initialize when it gets to it
 8007ece:	79fb      	ldrb	r3, [r7, #7]
 8007ed0:	2203      	movs	r2, #3
 8007ed2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fa fa86 	bl	80023e8 <uartOpen>
 8007edc:	4603      	mov	r3, r0
 8007ede:	4a2a      	ldr	r2, [pc, #168]	; (8007f88 <gpsInit+0xe8>)
 8007ee0:	6093      	str	r3, [r2, #8]
    if (mcfg.gps_type == GPS_NMEA && gpsInitData[baudrateIndex].baudrate == 9600) {
 8007ee2:	4b2a      	ldr	r3, [pc, #168]	; (8007f8c <gpsInit+0xec>)
 8007ee4:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d125      	bne.n	8007f38 <gpsInit+0x98>
 8007eec:	79bb      	ldrb	r3, [r7, #6]
 8007eee:	4a28      	ldr	r2, [pc, #160]	; (8007f90 <gpsInit+0xf0>)
 8007ef0:	00db      	lsls	r3, r3, #3
 8007ef2:	4413      	add	r3, r2
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8007efa:	d11d      	bne.n	8007f38 <gpsInit+0x98>
    	serialStartReceiveFunc(&core.gpsport->comm);
 8007efc:	4b22      	ldr	r3, [pc, #136]	; (8007f88 <gpsInit+0xe8>)
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	3304      	adds	r3, #4
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fa fba2 	bl	800264c <serialStartReceiveFunc>

        if (!pifGpsNmea_Init(&gps_nmea, PIF_ID_AUTO)) return;
 8007f08:	2100      	movs	r1, #0
 8007f0a:	4822      	ldr	r0, [pc, #136]	; (8007f94 <gpsInit+0xf4>)
 8007f0c:	f00e fa6e 	bl	80163ec <pifGpsNmea_Init>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d02e      	beq.n	8007f74 <gpsInit+0xd4>
        gps_nmea._gps.evt_nmea_msg_id = PIF_GPS_NMEA_MSG_ID_GGA;
 8007f16:	4b1f      	ldr	r3, [pc, #124]	; (8007f94 <gpsInit+0xf4>)
 8007f18:	2203      	movs	r2, #3
 8007f1a:	701a      	strb	r2, [r3, #0]
        pifGpsNmea_AttachComm(&gps_nmea, &core.gpsport->comm);
 8007f1c:	4b1a      	ldr	r3, [pc, #104]	; (8007f88 <gpsInit+0xe8>)
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	3304      	adds	r3, #4
 8007f22:	4619      	mov	r1, r3
 8007f24:	481b      	ldr	r0, [pc, #108]	; (8007f94 <gpsInit+0xf4>)
 8007f26:	f00e fa97 	bl	8016458 <pifGpsNmea_AttachComm>
        gps_nmea._gps.evt_receive = _evtGpsReceive;
 8007f2a:	4b1a      	ldr	r3, [pc, #104]	; (8007f94 <gpsInit+0xf4>)
 8007f2c:	4a1a      	ldr	r2, [pc, #104]	; (8007f98 <gpsInit+0xf8>)
 8007f2e:	605a      	str	r2, [r3, #4]

		// signal GPS "thread" to initialize when it gets to it
		gpsSetState(GPS_CONFIGURATION);
 8007f30:	2004      	movs	r0, #4
 8007f32:	f7ff fe69 	bl	8007c08 <gpsSetState>
 8007f36:	e013      	b.n	8007f60 <gpsInit+0xc0>
    }
    else {
        if (!pifGpsUblox_Init(&gps_ublox, PIF_ID_AUTO)) return;
 8007f38:	2100      	movs	r1, #0
 8007f3a:	4818      	ldr	r0, [pc, #96]	; (8007f9c <gpsInit+0xfc>)
 8007f3c:	f00f f866 	bl	801700c <pifGpsUblox_Init>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d018      	beq.n	8007f78 <gpsInit+0xd8>
        pifGpsUblox_AttachComm(&gps_ublox, &core.gpsport->comm);
 8007f46:	4b10      	ldr	r3, [pc, #64]	; (8007f88 <gpsInit+0xe8>)
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	3304      	adds	r3, #4
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	4813      	ldr	r0, [pc, #76]	; (8007f9c <gpsInit+0xfc>)
 8007f50:	f00f f8b6 	bl	80170c0 <pifGpsUblox_AttachComm>
        gps_ublox._gps.evt_receive = _evtGpsReceive;
 8007f54:	4b11      	ldr	r3, [pc, #68]	; (8007f9c <gpsInit+0xfc>)
 8007f56:	4a10      	ldr	r2, [pc, #64]	; (8007f98 <gpsInit+0xf8>)
 8007f58:	615a      	str	r2, [r3, #20]

		// signal GPS "thread" to initialize when it gets to it
		gpsSetState(GPS_INITIALIZING);
 8007f5a:	2001      	movs	r0, #1
 8007f5c:	f7ff fe54 	bl	8007c08 <gpsSetState>
    }

    // copy ubx sbas config string to use
    if (mcfg.gps_ubx_sbas >= SBAS_LAST)
 8007f60:	4b0a      	ldr	r3, [pc, #40]	; (8007f8c <gpsInit+0xec>)
 8007f62:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8007f66:	2b04      	cmp	r3, #4
 8007f68:	dd07      	ble.n	8007f7a <gpsInit+0xda>
        mcfg.gps_ubx_sbas = SBAS_AUTO;
 8007f6a:	4b08      	ldr	r3, [pc, #32]	; (8007f8c <gpsInit+0xec>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
 8007f72:	e002      	b.n	8007f7a <gpsInit+0xda>
        if (!pifGpsNmea_Init(&gps_nmea, PIF_ID_AUTO)) return;
 8007f74:	bf00      	nop
 8007f76:	e000      	b.n	8007f7a <gpsInit+0xda>
        if (!pifGpsUblox_Init(&gps_ublox, PIF_ID_AUTO)) return;
 8007f78:	bf00      	nop
}
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	200012a4 	.word	0x200012a4
 8007f84:	200020e0 	.word	0x200020e0
 8007f88:	20000afc 	.word	0x20000afc
 8007f8c:	20000bbc 	.word	0x20000bbc
 8007f90:	0802789c 	.word	0x0802789c
 8007f94:	200012c8 	.word	0x200012c8
 8007f98:	08007c79 	.word	0x08007c79
 8007f9c:	20001338 	.word	0x20001338

08007fa0 <gpsInitNmea>:

static void gpsInitNmea(void)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	af00      	add	r7, sp, #0
    if (gpsInitData[gpsData.baudrateIndex].baudrate == 9600) {
 8007fa4:	4b0f      	ldr	r3, [pc, #60]	; (8007fe4 <gpsInitNmea+0x44>)
 8007fa6:	785b      	ldrb	r3, [r3, #1]
 8007fa8:	4a0f      	ldr	r2, [pc, #60]	; (8007fe8 <gpsInitNmea+0x48>)
 8007faa:	00db      	lsls	r3, r3, #3
 8007fac:	4413      	add	r3, r2
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8007fb4:	d107      	bne.n	8007fc6 <gpsInitNmea+0x26>
        pifGps_SetTimeout(&gps_nmea._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 8007fb6:	4b0d      	ldr	r3, [pc, #52]	; (8007fec <gpsInitNmea+0x4c>)
 8007fb8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007fbc:	490c      	ldr	r1, [pc, #48]	; (8007ff0 <gpsInitNmea+0x50>)
 8007fbe:	480d      	ldr	r0, [pc, #52]	; (8007ff4 <gpsInitNmea+0x54>)
 8007fc0:	f00d fcc4 	bl	801594c <pifGps_SetTimeout>
 8007fc4:	e009      	b.n	8007fda <gpsInitNmea+0x3a>
    }
    else {
        gps_ublox._gps.evt_nmea_msg_id = PIF_GPS_NMEA_MSG_ID_GGA;
 8007fc6:	4b0c      	ldr	r3, [pc, #48]	; (8007ff8 <gpsInitNmea+0x58>)
 8007fc8:	2203      	movs	r2, #3
 8007fca:	741a      	strb	r2, [r3, #16]
        pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 8007fcc:	4b07      	ldr	r3, [pc, #28]	; (8007fec <gpsInitNmea+0x4c>)
 8007fce:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007fd2:	4907      	ldr	r1, [pc, #28]	; (8007ff0 <gpsInitNmea+0x50>)
 8007fd4:	4809      	ldr	r0, [pc, #36]	; (8007ffc <gpsInitNmea+0x5c>)
 8007fd6:	f00d fcb9 	bl	801594c <pifGps_SetTimeout>
    }
    gpsSetState(GPS_RECEIVINGDATA);
 8007fda:	2005      	movs	r0, #5
 8007fdc:	f7ff fe14 	bl	8007c08 <gpsSetState>
}
 8007fe0:	bf00      	nop
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	200012a4 	.word	0x200012a4
 8007fe8:	0802789c 	.word	0x0802789c
 8007fec:	08007e41 	.word	0x08007e41
 8007ff0:	20001b64 	.word	0x20001b64
 8007ff4:	200012c8 	.word	0x200012c8
 8007ff8:	20001338 	.word	0x20001338
 8007ffc:	20001348 	.word	0x20001348

08008000 <gpsInitUblox>:

static void gpsInitUblox(void)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af02      	add	r7, sp, #8
	static uint8_t cfg_msg_size = 0;
    uint8_t i;
    int line = 0;
 8008006:	2300      	movs	r3, #0
 8008008:	607b      	str	r3, [r7, #4]

	// GPS_CONFIGURATION, push some ublox config strings
	if (gpsData.step >= 20) {
 800800a:	4b8c      	ldr	r3, [pc, #560]	; (800823c <gpsInitUblox+0x23c>)
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	2b13      	cmp	r3, #19
 8008010:	dd30      	ble.n	8008074 <gpsInitUblox+0x74>
		if (gpsData.cfg_result == GUCR_ACK) {
 8008012:	4b8a      	ldr	r3, [pc, #552]	; (800823c <gpsInitUblox+0x23c>)
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	2b01      	cmp	r3, #1
 8008018:	d112      	bne.n	8008040 <gpsInitUblox+0x40>
	  		gpsData.step = (gpsData.step - 20) + 1;
 800801a:	4b88      	ldr	r3, [pc, #544]	; (800823c <gpsInitUblox+0x23c>)
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	3b13      	subs	r3, #19
 8008020:	4a86      	ldr	r2, [pc, #536]	; (800823c <gpsInitUblox+0x23c>)
 8008022:	60d3      	str	r3, [r2, #12]
			if (gpsData.step == cfg_msg_size) gpsData.step = 15;
 8008024:	4b85      	ldr	r3, [pc, #532]	; (800823c <gpsInitUblox+0x23c>)
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	4a85      	ldr	r2, [pc, #532]	; (8008240 <gpsInitUblox+0x240>)
 800802a:	7812      	ldrb	r2, [r2, #0]
 800802c:	4293      	cmp	r3, r2
 800802e:	d102      	bne.n	8008036 <gpsInitUblox+0x36>
 8008030:	4b82      	ldr	r3, [pc, #520]	; (800823c <gpsInitUblox+0x23c>)
 8008032:	220f      	movs	r2, #15
 8008034:	60da      	str	r2, [r3, #12]
			gpsData.state_ts = pif_cumulative_timer1ms;
 8008036:	4b83      	ldr	r3, [pc, #524]	; (8008244 <gpsInitUblox+0x244>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a80      	ldr	r2, [pc, #512]	; (800823c <gpsInitUblox+0x23c>)
 800803c:	6153      	str	r3, [r2, #20]
 800803e:	e121      	b.n	8008284 <gpsInitUblox+0x284>
		}
		else if (gpsData.cfg_result == GUCR_NAK) {
 8008040:	4b7e      	ldr	r3, [pc, #504]	; (800823c <gpsInitUblox+0x23c>)
 8008042:	69db      	ldr	r3, [r3, #28]
 8008044:	2b02      	cmp	r3, #2
 8008046:	d106      	bne.n	8008056 <gpsInitUblox+0x56>
			pif_error = E_RECEIVE_NACK;
 8008048:	4b7f      	ldr	r3, [pc, #508]	; (8008248 <gpsInitUblox+0x248>)
 800804a:	2210      	movs	r2, #16
 800804c:	701a      	strb	r2, [r3, #0]
			line = __LINE__;
 800804e:	f240 1303 	movw	r3, #259	; 0x103
 8008052:	607b      	str	r3, [r7, #4]
 8008054:	e116      	b.n	8008284 <gpsInitUblox+0x284>
		}
		else {
			if (pif_cumulative_timer1ms - gpsData.state_ts >= 200) {
 8008056:	4b7b      	ldr	r3, [pc, #492]	; (8008244 <gpsInitUblox+0x244>)
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	4b78      	ldr	r3, [pc, #480]	; (800823c <gpsInitUblox+0x23c>)
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	2bc7      	cmp	r3, #199	; 0xc7
 8008062:	f240 810f 	bls.w	8008284 <gpsInitUblox+0x284>
				pif_error = E_TIMEOUT;
 8008066:	4b78      	ldr	r3, [pc, #480]	; (8008248 <gpsInitUblox+0x248>)
 8008068:	2207      	movs	r2, #7
 800806a:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 800806c:	f44f 7384 	mov.w	r3, #264	; 0x108
 8008070:	607b      	str	r3, [r7, #4]
 8008072:	e107      	b.n	8008284 <gpsInitUblox+0x284>
			}
		}
	}
	else {
		if (cfg_msg_size == 0) {
 8008074:	4b72      	ldr	r3, [pc, #456]	; (8008240 <gpsInitUblox+0x240>)
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d109      	bne.n	8008090 <gpsInitUblox+0x90>
			cfg_msg_size = sizeof(kCfgMsg) / sizeof(kCfgMsg[0]);
 800807c:	4b70      	ldr	r3, [pc, #448]	; (8008240 <gpsInitUblox+0x240>)
 800807e:	220a      	movs	r2, #10
 8008080:	701a      	strb	r2, [r3, #0]
			gps_ublox.evt_ubx_cfg_result = _evtGpsUbloxCfgResult;
 8008082:	4b72      	ldr	r3, [pc, #456]	; (800824c <gpsInitUblox+0x24c>)
 8008084:	4a72      	ldr	r2, [pc, #456]	; (8008250 <gpsInitUblox+0x250>)
 8008086:	601a      	str	r2, [r3, #0]
			gpsData.state_ts = pif_cumulative_timer1ms;
 8008088:	4b6e      	ldr	r3, [pc, #440]	; (8008244 <gpsInitUblox+0x244>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a6b      	ldr	r2, [pc, #428]	; (800823c <gpsInitUblox+0x23c>)
 800808e:	6153      	str	r3, [r2, #20]
		}
		if (pif_cumulative_timer1ms - gpsData.state_ts < 5) return;
 8008090:	4b6c      	ldr	r3, [pc, #432]	; (8008244 <gpsInitUblox+0x244>)
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	4b69      	ldr	r3, [pc, #420]	; (800823c <gpsInitUblox+0x23c>)
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	2b04      	cmp	r3, #4
 800809c:	f240 8108 	bls.w	80082b0 <gpsInitUblox+0x2b0>
		if (gpsData.step < cfg_msg_size) {
 80080a0:	4b66      	ldr	r3, [pc, #408]	; (800823c <gpsInitUblox+0x23c>)
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	4a66      	ldr	r2, [pc, #408]	; (8008240 <gpsInitUblox+0x240>)
 80080a6:	7812      	ldrb	r2, [r2, #0]
 80080a8:	4293      	cmp	r3, r2
 80080aa:	da26      	bge.n	80080fa <gpsInitUblox+0xfa>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_MSG, sizeof(kCfgMsg[gpsData.step]), (uint8_t*)kCfgMsg[gpsData.step], FALSE)) {
 80080ac:	4b63      	ldr	r3, [pc, #396]	; (800823c <gpsInitUblox+0x23c>)
 80080ae:	68da      	ldr	r2, [r3, #12]
 80080b0:	4613      	mov	r3, r2
 80080b2:	005b      	lsls	r3, r3, #1
 80080b4:	4413      	add	r3, r2
 80080b6:	4a67      	ldr	r2, [pc, #412]	; (8008254 <gpsInitUblox+0x254>)
 80080b8:	4413      	add	r3, r2
 80080ba:	2200      	movs	r2, #0
 80080bc:	9201      	str	r2, [sp, #4]
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	2303      	movs	r3, #3
 80080c2:	2201      	movs	r2, #1
 80080c4:	2106      	movs	r1, #6
 80080c6:	4861      	ldr	r0, [pc, #388]	; (800824c <gpsInitUblox+0x24c>)
 80080c8:	f00f f848 	bl	801715c <pifGpsUblox_SendUbxMsg>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00c      	beq.n	80080ec <gpsInitUblox+0xec>
                gpsData.cfg_result = GUCR_NONE;
 80080d2:	4b5a      	ldr	r3, [pc, #360]	; (800823c <gpsInitUblox+0x23c>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 80080d8:	4b58      	ldr	r3, [pc, #352]	; (800823c <gpsInitUblox+0x23c>)
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	3314      	adds	r3, #20
 80080de:	4a57      	ldr	r2, [pc, #348]	; (800823c <gpsInitUblox+0x23c>)
 80080e0:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 80080e2:	4b58      	ldr	r3, [pc, #352]	; (8008244 <gpsInitUblox+0x244>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a55      	ldr	r2, [pc, #340]	; (800823c <gpsInitUblox+0x23c>)
 80080e8:	6153      	str	r3, [r2, #20]
 80080ea:	e0cb      	b.n	8008284 <gpsInitUblox+0x284>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 80080ec:	4b56      	ldr	r3, [pc, #344]	; (8008248 <gpsInitUblox+0x248>)
 80080ee:	220a      	movs	r2, #10
 80080f0:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 80080f2:	f240 131b 	movw	r3, #283	; 0x11b
 80080f6:	607b      	str	r3, [r7, #4]
 80080f8:	e0c4      	b.n	8008284 <gpsInitUblox+0x284>
			}
		}
		else if (gpsData.step == 15) {
 80080fa:	4b50      	ldr	r3, [pc, #320]	; (800823c <gpsInitUblox+0x23c>)
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	2b0f      	cmp	r3, #15
 8008100:	d120      	bne.n	8008144 <gpsInitUblox+0x144>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_RATE, sizeof(kCfgRate), (uint8_t*)kCfgRate, FALSE)) {
 8008102:	2300      	movs	r3, #0
 8008104:	9301      	str	r3, [sp, #4]
 8008106:	4b54      	ldr	r3, [pc, #336]	; (8008258 <gpsInitUblox+0x258>)
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	2306      	movs	r3, #6
 800810c:	2208      	movs	r2, #8
 800810e:	2106      	movs	r1, #6
 8008110:	484e      	ldr	r0, [pc, #312]	; (800824c <gpsInitUblox+0x24c>)
 8008112:	f00f f823 	bl	801715c <pifGpsUblox_SendUbxMsg>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00c      	beq.n	8008136 <gpsInitUblox+0x136>
                gpsData.cfg_result = GUCR_NONE;
 800811c:	4b47      	ldr	r3, [pc, #284]	; (800823c <gpsInitUblox+0x23c>)
 800811e:	2200      	movs	r2, #0
 8008120:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 8008122:	4b46      	ldr	r3, [pc, #280]	; (800823c <gpsInitUblox+0x23c>)
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	3314      	adds	r3, #20
 8008128:	4a44      	ldr	r2, [pc, #272]	; (800823c <gpsInitUblox+0x23c>)
 800812a:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 800812c:	4b45      	ldr	r3, [pc, #276]	; (8008244 <gpsInitUblox+0x244>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a42      	ldr	r2, [pc, #264]	; (800823c <gpsInitUblox+0x23c>)
 8008132:	6153      	str	r3, [r2, #20]
 8008134:	e0a6      	b.n	8008284 <gpsInitUblox+0x284>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8008136:	4b44      	ldr	r3, [pc, #272]	; (8008248 <gpsInitUblox+0x248>)
 8008138:	220a      	movs	r2, #10
 800813a:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 800813c:	f44f 7393 	mov.w	r3, #294	; 0x126
 8008140:	607b      	str	r3, [r7, #4]
 8008142:	e09f      	b.n	8008284 <gpsInitUblox+0x284>
			}
		}
		else if (gpsData.step == 16) {
 8008144:	4b3d      	ldr	r3, [pc, #244]	; (800823c <gpsInitUblox+0x23c>)
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	2b10      	cmp	r3, #16
 800814a:	d120      	bne.n	800818e <gpsInitUblox+0x18e>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_NAV5, sizeof(kCfgNav5), (uint8_t*)kCfgNav5, FALSE)) {
 800814c:	2300      	movs	r3, #0
 800814e:	9301      	str	r3, [sp, #4]
 8008150:	4b42      	ldr	r3, [pc, #264]	; (800825c <gpsInitUblox+0x25c>)
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	2324      	movs	r3, #36	; 0x24
 8008156:	2224      	movs	r2, #36	; 0x24
 8008158:	2106      	movs	r1, #6
 800815a:	483c      	ldr	r0, [pc, #240]	; (800824c <gpsInitUblox+0x24c>)
 800815c:	f00e fffe 	bl	801715c <pifGpsUblox_SendUbxMsg>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00c      	beq.n	8008180 <gpsInitUblox+0x180>
                gpsData.cfg_result = GUCR_NONE;
 8008166:	4b35      	ldr	r3, [pc, #212]	; (800823c <gpsInitUblox+0x23c>)
 8008168:	2200      	movs	r2, #0
 800816a:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 800816c:	4b33      	ldr	r3, [pc, #204]	; (800823c <gpsInitUblox+0x23c>)
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	3314      	adds	r3, #20
 8008172:	4a32      	ldr	r2, [pc, #200]	; (800823c <gpsInitUblox+0x23c>)
 8008174:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 8008176:	4b33      	ldr	r3, [pc, #204]	; (8008244 <gpsInitUblox+0x244>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a30      	ldr	r2, [pc, #192]	; (800823c <gpsInitUblox+0x23c>)
 800817c:	6153      	str	r3, [r2, #20]
 800817e:	e081      	b.n	8008284 <gpsInitUblox+0x284>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8008180:	4b31      	ldr	r3, [pc, #196]	; (8008248 <gpsInitUblox+0x248>)
 8008182:	220a      	movs	r2, #10
 8008184:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8008186:	f240 1331 	movw	r3, #305	; 0x131
 800818a:	607b      	str	r3, [r7, #4]
 800818c:	e07a      	b.n	8008284 <gpsInitUblox+0x284>
			}
		}
		else if (gpsData.step == 17) {
 800818e:	4b2b      	ldr	r3, [pc, #172]	; (800823c <gpsInitUblox+0x23c>)
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	2b11      	cmp	r3, #17
 8008194:	d12f      	bne.n	80081f6 <gpsInitUblox+0x1f6>
			i = mcfg.gps_ubx_sbas > SBAS_DISABLED ? mcfg.gps_ubx_sbas : SBAS_LAST;
 8008196:	4b32      	ldr	r3, [pc, #200]	; (8008260 <gpsInitUblox+0x260>)
 8008198:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 800819c:	2b00      	cmp	r3, #0
 800819e:	db04      	blt.n	80081aa <gpsInitUblox+0x1aa>
 80081a0:	4b2f      	ldr	r3, [pc, #188]	; (8008260 <gpsInitUblox+0x260>)
 80081a2:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	e000      	b.n	80081ac <gpsInitUblox+0x1ac>
 80081aa:	2305      	movs	r3, #5
 80081ac:	70fb      	strb	r3, [r7, #3]
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_SBAS, sizeof(kCfgSbas[i]), (uint8_t*)kCfgSbas[i], FALSE)) {
 80081ae:	78fb      	ldrb	r3, [r7, #3]
 80081b0:	00db      	lsls	r3, r3, #3
 80081b2:	4a2c      	ldr	r2, [pc, #176]	; (8008264 <gpsInitUblox+0x264>)
 80081b4:	4413      	add	r3, r2
 80081b6:	2200      	movs	r2, #0
 80081b8:	9201      	str	r2, [sp, #4]
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	2308      	movs	r3, #8
 80081be:	2216      	movs	r2, #22
 80081c0:	2106      	movs	r1, #6
 80081c2:	4822      	ldr	r0, [pc, #136]	; (800824c <gpsInitUblox+0x24c>)
 80081c4:	f00e ffca 	bl	801715c <pifGpsUblox_SendUbxMsg>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00c      	beq.n	80081e8 <gpsInitUblox+0x1e8>
                gpsData.cfg_result = GUCR_NONE;
 80081ce:	4b1b      	ldr	r3, [pc, #108]	; (800823c <gpsInitUblox+0x23c>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 80081d4:	4b19      	ldr	r3, [pc, #100]	; (800823c <gpsInitUblox+0x23c>)
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	3314      	adds	r3, #20
 80081da:	4a18      	ldr	r2, [pc, #96]	; (800823c <gpsInitUblox+0x23c>)
 80081dc:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 80081de:	4b19      	ldr	r3, [pc, #100]	; (8008244 <gpsInitUblox+0x244>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a16      	ldr	r2, [pc, #88]	; (800823c <gpsInitUblox+0x23c>)
 80081e4:	6153      	str	r3, [r2, #20]
 80081e6:	e04d      	b.n	8008284 <gpsInitUblox+0x284>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 80081e8:	4b17      	ldr	r3, [pc, #92]	; (8008248 <gpsInitUblox+0x248>)
 80081ea:	220a      	movs	r2, #10
 80081ec:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 80081ee:	f240 133d 	movw	r3, #317	; 0x13d
 80081f2:	607b      	str	r3, [r7, #4]
 80081f4:	e046      	b.n	8008284 <gpsInitUblox+0x284>
			}
		}
		else if (gpsData.step == 18) {
 80081f6:	4b11      	ldr	r3, [pc, #68]	; (800823c <gpsInitUblox+0x23c>)
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	2b12      	cmp	r3, #18
 80081fc:	d142      	bne.n	8008284 <gpsInitUblox+0x284>
			if (pif_cumulative_timer1ms - gpsData.state_ts < 10000) {
 80081fe:	4b11      	ldr	r3, [pc, #68]	; (8008244 <gpsInitUblox+0x244>)
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	4b0e      	ldr	r3, [pc, #56]	; (800823c <gpsInitUblox+0x23c>)
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	f242 720f 	movw	r2, #9999	; 0x270f
 800820c:	4293      	cmp	r3, r2
 800820e:	d833      	bhi.n	8008278 <gpsInitUblox+0x278>
				if (gpsData.receive) {
 8008210:	4b0a      	ldr	r3, [pc, #40]	; (800823c <gpsInitUblox+0x23c>)
 8008212:	7e1b      	ldrb	r3, [r3, #24]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d035      	beq.n	8008284 <gpsInitUblox+0x284>
					// ublox should be init'd, time to try receiving some junk
					serialStartReceiveFunc(&core.gpsport->comm);
 8008218:	4b13      	ldr	r3, [pc, #76]	; (8008268 <gpsInitUblox+0x268>)
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	3304      	adds	r3, #4
 800821e:	4618      	mov	r0, r3
 8008220:	f7fa fa14 	bl	800264c <serialStartReceiveFunc>
					pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 8008224:	4b11      	ldr	r3, [pc, #68]	; (800826c <gpsInitUblox+0x26c>)
 8008226:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800822a:	4911      	ldr	r1, [pc, #68]	; (8008270 <gpsInitUblox+0x270>)
 800822c:	4811      	ldr	r0, [pc, #68]	; (8008274 <gpsInitUblox+0x274>)
 800822e:	f00d fb8d 	bl	801594c <pifGps_SetTimeout>
					gpsSetState(GPS_RECEIVINGDATA);
 8008232:	2005      	movs	r0, #5
 8008234:	f7ff fce8 	bl	8007c08 <gpsSetState>
 8008238:	e024      	b.n	8008284 <gpsInitUblox+0x284>
 800823a:	bf00      	nop
 800823c:	200012a4 	.word	0x200012a4
 8008240:	200016f2 	.word	0x200016f2
 8008244:	200020e0 	.word	0x200020e0
 8008248:	200020d1 	.word	0x200020d1
 800824c:	20001338 	.word	0x20001338
 8008250:	08007c49 	.word	0x08007c49
 8008254:	080278c4 	.word	0x080278c4
 8008258:	080278e4 	.word	0x080278e4
 800825c:	080278ec 	.word	0x080278ec
 8008260:	20000bbc 	.word	0x20000bbc
 8008264:	08027910 	.word	0x08027910
 8008268:	20000afc 	.word	0x20000afc
 800826c:	08007e41 	.word	0x08007e41
 8008270:	20001b64 	.word	0x20001b64
 8008274:	20001348 	.word	0x20001348
				}
			}
			else {
				pif_error = E_TIMEOUT;
 8008278:	4b0f      	ldr	r3, [pc, #60]	; (80082b8 <gpsInitUblox+0x2b8>)
 800827a:	2207      	movs	r2, #7
 800827c:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 800827e:	f240 134b 	movw	r3, #331	; 0x14b
 8008282:	607b      	str	r3, [r7, #4]
			}
		}
	}

	if (line) {
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d013      	beq.n	80082b2 <gpsInitUblox+0x2b2>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_ERROR, "GPS(%u) CS:%u S:%u E:%u", line, cfg_msg_size, gpsData.step, pif_error);
 800828a:	4b0c      	ldr	r3, [pc, #48]	; (80082bc <gpsInitUblox+0x2bc>)
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	4619      	mov	r1, r3
 8008290:	4b0b      	ldr	r3, [pc, #44]	; (80082c0 <gpsInitUblox+0x2c0>)
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	4a08      	ldr	r2, [pc, #32]	; (80082b8 <gpsInitUblox+0x2b8>)
 8008296:	7812      	ldrb	r2, [r2, #0]
 8008298:	9201      	str	r2, [sp, #4]
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	460b      	mov	r3, r1
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	4908      	ldr	r1, [pc, #32]	; (80082c4 <gpsInitUblox+0x2c4>)
 80082a2:	2004      	movs	r0, #4
 80082a4:	f00b f976 	bl	8013594 <pifLog_Printf>
#endif
		_evtGpsTimeout(&gps_ublox._gps);
 80082a8:	4807      	ldr	r0, [pc, #28]	; (80082c8 <gpsInitUblox+0x2c8>)
 80082aa:	f7ff fdc9 	bl	8007e40 <_evtGpsTimeout>
 80082ae:	e000      	b.n	80082b2 <gpsInitUblox+0x2b2>
		if (pif_cumulative_timer1ms - gpsData.state_ts < 5) return;
 80082b0:	bf00      	nop
	}
}
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	200020d1 	.word	0x200020d1
 80082bc:	200016f2 	.word	0x200016f2
 80082c0:	200012a4 	.word	0x200012a4
 80082c4:	0802630c 	.word	0x0802630c
 80082c8:	20001348 	.word	0x20001348

080082cc <gpsInitHardware>:

static void gpsInitHardware(void)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	af00      	add	r7, sp, #0
    switch (mcfg.gps_type) {
 80082d0:	4b0b      	ldr	r3, [pc, #44]	; (8008300 <gpsInitHardware+0x34>)
 80082d2:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	dc0d      	bgt.n	80082f6 <gpsInitHardware+0x2a>
 80082da:	2b02      	cmp	r3, #2
 80082dc:	da0a      	bge.n	80082f4 <gpsInitHardware+0x28>
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d002      	beq.n	80082e8 <gpsInitHardware+0x1c>
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d003      	beq.n	80082ee <gpsInitHardware+0x22>
 80082e6:	e006      	b.n	80082f6 <gpsInitHardware+0x2a>
        case GPS_NMEA:
            gpsInitNmea();
 80082e8:	f7ff fe5a 	bl	8007fa0 <gpsInitNmea>
            break;
 80082ec:	e003      	b.n	80082f6 <gpsInitHardware+0x2a>

        case GPS_UBLOX:
            gpsInitUblox();
 80082ee:	f7ff fe87 	bl	8008000 <gpsInitUblox>
            break;
 80082f2:	e000      	b.n	80082f6 <gpsInitHardware+0x2a>

        case GPS_MTK_NMEA:
        case GPS_MTK_BINARY:
            // TODO. need to find my old piece of shit MTK GPS.
            break;
 80082f4:	bf00      	nop
    }

    // clear error counter
    gpsData.errors = 0;
 80082f6:	4b03      	ldr	r3, [pc, #12]	; (8008304 <gpsInitHardware+0x38>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	605a      	str	r2, [r3, #4]
}
 80082fc:	bf00      	nop
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	20000bbc 	.word	0x20000bbc
 8008304:	200012a4 	.word	0x200012a4

08008308 <gpsThread>:

void gpsThread(void)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af02      	add	r7, sp, #8
    uint32_t m;

    switch (gpsData.state) {
 800830e:	4b70      	ldr	r3, [pc, #448]	; (80084d0 <gpsThread+0x1c8>)
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	2b06      	cmp	r3, #6
 8008314:	f200 80d8 	bhi.w	80084c8 <gpsThread+0x1c0>
 8008318:	a201      	add	r2, pc, #4	; (adr r2, 8008320 <gpsThread+0x18>)
 800831a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831e:	bf00      	nop
 8008320:	080084c9 	.word	0x080084c9
 8008324:	0800833d 	.word	0x0800833d
 8008328:	08008397 	.word	0x08008397
 800832c:	080083ef 	.word	0x080083ef
 8008330:	0800842d 	.word	0x0800842d
 8008334:	080084c9 	.word	0x080084c9
 8008338:	08008433 	.word	0x08008433
        case GPS_UNKNOWN:
            break;

        case GPS_INITIALIZING:
            m = pif_cumulative_timer1ms;
 800833c:	4b65      	ldr	r3, [pc, #404]	; (80084d4 <gpsThread+0x1cc>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < (gpsData.state_position ? GPS_BAUD_DELAY : 3000))
 8008342:	4b63      	ldr	r3, [pc, #396]	; (80084d0 <gpsThread+0x1c8>)
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	4a61      	ldr	r2, [pc, #388]	; (80084d0 <gpsThread+0x1c8>)
 800834c:	6912      	ldr	r2, [r2, #16]
 800834e:	2a00      	cmp	r2, #0
 8008350:	d001      	beq.n	8008356 <gpsThread+0x4e>
 8008352:	22c8      	movs	r2, #200	; 0xc8
 8008354:	e001      	b.n	800835a <gpsThread+0x52>
 8008356:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800835a:	429a      	cmp	r2, r3
 800835c:	f200 80af 	bhi.w	80084be <gpsThread+0x1b6>
                return;

            if (gpsData.state_position < GPS_INIT_ENTRIES) {
 8008360:	4b5b      	ldr	r3, [pc, #364]	; (80084d0 <gpsThread+0x1c8>)
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	2b04      	cmp	r3, #4
 8008366:	dc12      	bgt.n	800838e <gpsThread+0x86>
                // try different speed to INIT
                serialSetBaudRate(core.gpsport, gpsInitData[gpsData.state_position].baudrate);
 8008368:	4b5b      	ldr	r3, [pc, #364]	; (80084d8 <gpsThread+0x1d0>)
 800836a:	689a      	ldr	r2, [r3, #8]
 800836c:	4b58      	ldr	r3, [pc, #352]	; (80084d0 <gpsThread+0x1c8>)
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	495a      	ldr	r1, [pc, #360]	; (80084dc <gpsThread+0x1d4>)
 8008372:	00db      	lsls	r3, r3, #3
 8008374:	440b      	add	r3, r1
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	4619      	mov	r1, r3
 800837a:	4610      	mov	r0, r2
 800837c:	f7fa f954 	bl	8002628 <serialSetBaudRate>
                gpsData.state = GPS_SENDBAUD;
 8008380:	4b53      	ldr	r3, [pc, #332]	; (80084d0 <gpsThread+0x1c8>)
 8008382:	2202      	movs	r2, #2
 8008384:	701a      	strb	r2, [r3, #0]
                gpsData.state_ts = m;
 8008386:	4a52      	ldr	r2, [pc, #328]	; (80084d0 <gpsThread+0x1c8>)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6153      	str	r3, [r2, #20]
            else
            {
                // we're now (hopefully) at the correct rate, next state will switch to it
                gpsSetState(GPS_SETBAUD);
            }
            break;
 800838c:	e09c      	b.n	80084c8 <gpsThread+0x1c0>
                gpsSetState(GPS_SETBAUD);
 800838e:	2003      	movs	r0, #3
 8008390:	f7ff fc3a 	bl	8007c08 <gpsSetState>
            break;
 8008394:	e098      	b.n	80084c8 <gpsThread+0x1c0>

        case GPS_SENDBAUD:
            m = pif_cumulative_timer1ms;
 8008396:	4b4f      	ldr	r3, [pc, #316]	; (80084d4 <gpsThread+0x1cc>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < 200)
 800839c:	4b4c      	ldr	r3, [pc, #304]	; (80084d0 <gpsThread+0x1c8>)
 800839e:	695b      	ldr	r3, [r3, #20]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	1ad3      	subs	r3, r2, r3
 80083a4:	2bc7      	cmp	r3, #199	; 0xc7
 80083a6:	f240 808c 	bls.w	80084c2 <gpsThread+0x1ba>
                return;

            // but print our FIXED init string for the baudrate we want to be at
            if (pifGpsUblox_SetPubxConfig(&gps_ublox, 1, 0x07, 0x03, gpsInitData[gpsData.baudrateIndex].baudrate, FALSE)) {
 80083aa:	4b49      	ldr	r3, [pc, #292]	; (80084d0 <gpsThread+0x1c8>)
 80083ac:	785b      	ldrb	r3, [r3, #1]
 80083ae:	4a4b      	ldr	r2, [pc, #300]	; (80084dc <gpsThread+0x1d4>)
 80083b0:	00db      	lsls	r3, r3, #3
 80083b2:	4413      	add	r3, r2
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	9201      	str	r2, [sp, #4]
 80083ba:	9300      	str	r3, [sp, #0]
 80083bc:	2303      	movs	r3, #3
 80083be:	2207      	movs	r2, #7
 80083c0:	2101      	movs	r1, #1
 80083c2:	4847      	ldr	r0, [pc, #284]	; (80084e0 <gpsThread+0x1d8>)
 80083c4:	f00e fe94 	bl	80170f0 <pifGpsUblox_SetPubxConfig>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00b      	beq.n	80083e6 <gpsThread+0xde>
                gpsData.state_position++;
 80083ce:	4b40      	ldr	r3, [pc, #256]	; (80084d0 <gpsThread+0x1c8>)
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	3301      	adds	r3, #1
 80083d4:	4a3e      	ldr	r2, [pc, #248]	; (80084d0 <gpsThread+0x1c8>)
 80083d6:	6113      	str	r3, [r2, #16]
                gpsData.state = GPS_INITIALIZING;
 80083d8:	4b3d      	ldr	r3, [pc, #244]	; (80084d0 <gpsThread+0x1c8>)
 80083da:	2201      	movs	r2, #1
 80083dc:	701a      	strb	r2, [r3, #0]
                gpsData.state_ts = m;
 80083de:	4a3c      	ldr	r2, [pc, #240]	; (80084d0 <gpsThread+0x1c8>)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6153      	str	r3, [r2, #20]
            }
            else {
        		gpsSetState(GPS_INITIALIZING);
            }
            break;
 80083e4:	e070      	b.n	80084c8 <gpsThread+0x1c0>
        		gpsSetState(GPS_INITIALIZING);
 80083e6:	2001      	movs	r0, #1
 80083e8:	f7ff fc0e 	bl	8007c08 <gpsSetState>
            break;
 80083ec:	e06c      	b.n	80084c8 <gpsThread+0x1c0>

        case GPS_SETBAUD:
            m = pif_cumulative_timer1ms;
 80083ee:	4b39      	ldr	r3, [pc, #228]	; (80084d4 <gpsThread+0x1cc>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < GPS_BAUD_DELAY)
 80083f4:	4b36      	ldr	r3, [pc, #216]	; (80084d0 <gpsThread+0x1c8>)
 80083f6:	695b      	ldr	r3, [r3, #20]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	2bc7      	cmp	r3, #199	; 0xc7
 80083fe:	d962      	bls.n	80084c6 <gpsThread+0x1be>
                return;

            serialSetBaudRate(core.gpsport, gpsInitData[gpsData.baudrateIndex].baudrate);
 8008400:	4b35      	ldr	r3, [pc, #212]	; (80084d8 <gpsThread+0x1d0>)
 8008402:	689a      	ldr	r2, [r3, #8]
 8008404:	4b32      	ldr	r3, [pc, #200]	; (80084d0 <gpsThread+0x1c8>)
 8008406:	785b      	ldrb	r3, [r3, #1]
 8008408:	4934      	ldr	r1, [pc, #208]	; (80084dc <gpsThread+0x1d4>)
 800840a:	00db      	lsls	r3, r3, #3
 800840c:	440b      	add	r3, r1
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	4619      	mov	r1, r3
 8008412:	4610      	mov	r0, r2
 8008414:	f7fa f908 	bl	8002628 <serialSetBaudRate>
        	serialStartReceiveFunc(&core.gpsport->comm);
 8008418:	4b2f      	ldr	r3, [pc, #188]	; (80084d8 <gpsThread+0x1d0>)
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	3304      	adds	r3, #4
 800841e:	4618      	mov	r0, r3
 8008420:	f7fa f914 	bl	800264c <serialStartReceiveFunc>
            gpsSetState(GPS_CONFIGURATION);
 8008424:	2004      	movs	r0, #4
 8008426:	f7ff fbef 	bl	8007c08 <gpsSetState>
            break;
 800842a:	e04d      	b.n	80084c8 <gpsThread+0x1c0>

        case GPS_CONFIGURATION:
            gpsInitHardware();
 800842c:	f7ff ff4e 	bl	80082cc <gpsInitHardware>
            break;
 8008430:	e04a      	b.n	80084c8 <gpsThread+0x1c0>

        case GPS_LOSTCOMMS:
            if (mcfg.gps_type == GPS_NMEA && gpsInitData[gpsData.baudrateIndex].baudrate == 9600) {
 8008432:	4b2c      	ldr	r3, [pc, #176]	; (80084e4 <gpsThread+0x1dc>)
 8008434:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8008438:	2b00      	cmp	r3, #0
 800843a:	d10f      	bne.n	800845c <gpsThread+0x154>
 800843c:	4b24      	ldr	r3, [pc, #144]	; (80084d0 <gpsThread+0x1c8>)
 800843e:	785b      	ldrb	r3, [r3, #1]
 8008440:	4a26      	ldr	r2, [pc, #152]	; (80084dc <gpsThread+0x1d4>)
 8008442:	00db      	lsls	r3, r3, #3
 8008444:	4413      	add	r3, r2
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 800844c:	d106      	bne.n	800845c <gpsThread+0x154>
                pifGps_SetTimeout(&gps_nmea._gps, &g_timer_1ms, 0, NULL);
 800844e:	2300      	movs	r3, #0
 8008450:	2200      	movs	r2, #0
 8008452:	4925      	ldr	r1, [pc, #148]	; (80084e8 <gpsThread+0x1e0>)
 8008454:	4825      	ldr	r0, [pc, #148]	; (80084ec <gpsThread+0x1e4>)
 8008456:	f00d fa79 	bl	801594c <pifGps_SetTimeout>
 800845a:	e005      	b.n	8008468 <gpsThread+0x160>
            }
            else {
                pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, 0, NULL);
 800845c:	2300      	movs	r3, #0
 800845e:	2200      	movs	r2, #0
 8008460:	4921      	ldr	r1, [pc, #132]	; (80084e8 <gpsThread+0x1e0>)
 8008462:	4823      	ldr	r0, [pc, #140]	; (80084f0 <gpsThread+0x1e8>)
 8008464:	f00d fa72 	bl	801594c <pifGps_SetTimeout>
            }
            gpsData.errors++;
 8008468:	4b19      	ldr	r3, [pc, #100]	; (80084d0 <gpsThread+0x1c8>)
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	3301      	adds	r3, #1
 800846e:	4a18      	ldr	r2, [pc, #96]	; (80084d0 <gpsThread+0x1c8>)
 8008470:	6053      	str	r3, [r2, #4]
            // try another rate (Only if autobauding is enabled)
            if (mcfg.gps_autobaud) {
 8008472:	4b1c      	ldr	r3, [pc, #112]	; (80084e4 <gpsThread+0x1dc>)
 8008474:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8008478:	2b00      	cmp	r3, #0
 800847a:	d012      	beq.n	80084a2 <gpsThread+0x19a>
                gpsData.baudrateIndex++;
 800847c:	4b14      	ldr	r3, [pc, #80]	; (80084d0 <gpsThread+0x1c8>)
 800847e:	785b      	ldrb	r3, [r3, #1]
 8008480:	3301      	adds	r3, #1
 8008482:	b2da      	uxtb	r2, r3
 8008484:	4b12      	ldr	r3, [pc, #72]	; (80084d0 <gpsThread+0x1c8>)
 8008486:	705a      	strb	r2, [r3, #1]
                gpsData.baudrateIndex %= GPS_INIT_ENTRIES;
 8008488:	4b11      	ldr	r3, [pc, #68]	; (80084d0 <gpsThread+0x1c8>)
 800848a:	785a      	ldrb	r2, [r3, #1]
 800848c:	4b19      	ldr	r3, [pc, #100]	; (80084f4 <gpsThread+0x1ec>)
 800848e:	fba3 1302 	umull	r1, r3, r3, r2
 8008492:	0899      	lsrs	r1, r3, #2
 8008494:	460b      	mov	r3, r1
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	440b      	add	r3, r1
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	b2da      	uxtb	r2, r3
 800849e:	4b0c      	ldr	r3, [pc, #48]	; (80084d0 <gpsThread+0x1c8>)
 80084a0:	705a      	strb	r2, [r3, #1]
            }
            gpsData.lastMessage = pif_cumulative_timer1ms;
 80084a2:	4b0c      	ldr	r3, [pc, #48]	; (80084d4 <gpsThread+0x1cc>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a0a      	ldr	r2, [pc, #40]	; (80084d0 <gpsThread+0x1c8>)
 80084a8:	6093      	str	r3, [r2, #8]
            // TODO - move some / all of these into gpsData
            GPS_numSat = 0;
 80084aa:	4b13      	ldr	r3, [pc, #76]	; (80084f8 <gpsThread+0x1f0>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	701a      	strb	r2, [r3, #0]
            f.GPS_FIX = 0;
 80084b0:	4b12      	ldr	r3, [pc, #72]	; (80084fc <gpsThread+0x1f4>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	72da      	strb	r2, [r3, #11]
            gpsSetState(GPS_INITIALIZING);
 80084b6:	2001      	movs	r0, #1
 80084b8:	f7ff fba6 	bl	8007c08 <gpsSetState>
            break;
 80084bc:	e004      	b.n	80084c8 <gpsThread+0x1c0>
                return;
 80084be:	bf00      	nop
 80084c0:	e002      	b.n	80084c8 <gpsThread+0x1c0>
                return;
 80084c2:	bf00      	nop
 80084c4:	e000      	b.n	80084c8 <gpsThread+0x1c0>
                return;
 80084c6:	bf00      	nop

        case GPS_RECEIVINGDATA:
            break;
    }
}
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	200012a4 	.word	0x200012a4
 80084d4:	200020e0 	.word	0x200020e0
 80084d8:	20000afc 	.word	0x20000afc
 80084dc:	0802789c 	.word	0x0802789c
 80084e0:	20001338 	.word	0x20001338
 80084e4:	20000bbc 	.word	0x20000bbc
 80084e8:	20001b64 	.word	0x20001b64
 80084ec:	200012c8 	.word	0x200012c8
 80084f0:	20001348 	.word	0x20001348
 80084f4:	cccccccd 	.word	0xcccccccd
 80084f8:	20001a70 	.word	0x20001a70
 80084fc:	20001988 	.word	0x20001988

08008500 <gpsPollSvinfo>:

// gpsPollSvinfo-function. Used for polling UBX-NAV-SVINFO (0x01 0x30) information from GPS.
void gpsPollSvinfo(void)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af02      	add	r7, sp, #8
    // If selected GPS isn't UBLOX then we don't poll UBX messages.
    if (mcfg.gps_type != GPS_UBLOX)
 8008506:	4b2b      	ldr	r3, [pc, #172]	; (80085b4 <gpsPollSvinfo+0xb4>)
 8008508:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 800850c:	2b01      	cmp	r3, #1
 800850e:	d14d      	bne.n	80085ac <gpsPollSvinfo+0xac>
        return;

    GPS_numCh = gps_ublox._num_ch;
 8008510:	4b29      	ldr	r3, [pc, #164]	; (80085b8 <gpsPollSvinfo+0xb8>)
 8008512:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8008516:	4b29      	ldr	r3, [pc, #164]	; (80085bc <gpsPollSvinfo+0xbc>)
 8008518:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < GPS_numCh; i++) {
 800851a:	2300      	movs	r3, #0
 800851c:	607b      	str	r3, [r7, #4]
 800851e:	e02a      	b.n	8008576 <gpsPollSvinfo+0x76>
        GPS_svinfo_chn[i] = gps_ublox._svinfo_chn[i];
 8008520:	4a25      	ldr	r2, [pc, #148]	; (80085b8 <gpsPollSvinfo+0xb8>)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4413      	add	r3, r2
 8008526:	3379      	adds	r3, #121	; 0x79
 8008528:	7819      	ldrb	r1, [r3, #0]
 800852a:	4a25      	ldr	r2, [pc, #148]	; (80085c0 <gpsPollSvinfo+0xc0>)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4413      	add	r3, r2
 8008530:	460a      	mov	r2, r1
 8008532:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_svid[i] = gps_ublox._svinfo_svid[i];
 8008534:	4a20      	ldr	r2, [pc, #128]	; (80085b8 <gpsPollSvinfo+0xb8>)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4413      	add	r3, r2
 800853a:	3389      	adds	r3, #137	; 0x89
 800853c:	7819      	ldrb	r1, [r3, #0]
 800853e:	4a21      	ldr	r2, [pc, #132]	; (80085c4 <gpsPollSvinfo+0xc4>)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4413      	add	r3, r2
 8008544:	460a      	mov	r2, r1
 8008546:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_quality[i] = gps_ublox._svinfo_quality[i];
 8008548:	4a1b      	ldr	r2, [pc, #108]	; (80085b8 <gpsPollSvinfo+0xb8>)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4413      	add	r3, r2
 800854e:	3399      	adds	r3, #153	; 0x99
 8008550:	7819      	ldrb	r1, [r3, #0]
 8008552:	4a1d      	ldr	r2, [pc, #116]	; (80085c8 <gpsPollSvinfo+0xc8>)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4413      	add	r3, r2
 8008558:	460a      	mov	r2, r1
 800855a:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_cno[i] = gps_ublox._svinfo_cno[i];
 800855c:	4a16      	ldr	r2, [pc, #88]	; (80085b8 <gpsPollSvinfo+0xb8>)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4413      	add	r3, r2
 8008562:	33a9      	adds	r3, #169	; 0xa9
 8008564:	7819      	ldrb	r1, [r3, #0]
 8008566:	4a19      	ldr	r2, [pc, #100]	; (80085cc <gpsPollSvinfo+0xcc>)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4413      	add	r3, r2
 800856c:	460a      	mov	r2, r1
 800856e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < GPS_numCh; i++) {
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3301      	adds	r3, #1
 8008574:	607b      	str	r3, [r7, #4]
 8008576:	4b11      	ldr	r3, [pc, #68]	; (80085bc <gpsPollSvinfo+0xbc>)
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4293      	cmp	r3, r2
 8008580:	dbce      	blt.n	8008520 <gpsPollSvinfo+0x20>
    }
    // Update GPS SVIFO update rate table.
    GPS_svinfo_rate[0] = gps_ublox._svinfo_rate[0];
 8008582:	4b0d      	ldr	r3, [pc, #52]	; (80085b8 <gpsPollSvinfo+0xb8>)
 8008584:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008588:	4a11      	ldr	r2, [pc, #68]	; (80085d0 <gpsPollSvinfo+0xd0>)
 800858a:	6013      	str	r3, [r2, #0]
    GPS_svinfo_rate[1] = gps_ublox._svinfo_rate[1];
 800858c:	4b0a      	ldr	r3, [pc, #40]	; (80085b8 <gpsPollSvinfo+0xb8>)
 800858e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008592:	4a0f      	ldr	r2, [pc, #60]	; (80085d0 <gpsPollSvinfo+0xd0>)
 8008594:	6053      	str	r3, [r2, #4]

    pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_NAV, GUMI_NAV_SVINFO, 0, NULL, FALSE);
 8008596:	2300      	movs	r3, #0
 8008598:	9301      	str	r3, [sp, #4]
 800859a:	2300      	movs	r3, #0
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	2300      	movs	r3, #0
 80085a0:	2230      	movs	r2, #48	; 0x30
 80085a2:	2101      	movs	r1, #1
 80085a4:	4804      	ldr	r0, [pc, #16]	; (80085b8 <gpsPollSvinfo+0xb8>)
 80085a6:	f00e fdd9 	bl	801715c <pifGpsUblox_SendUbxMsg>
 80085aa:	e000      	b.n	80085ae <gpsPollSvinfo+0xae>
        return;
 80085ac:	bf00      	nop
}
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	20000bbc 	.word	0x20000bbc
 80085b8:	20001338 	.word	0x20001338
 80085bc:	20001a8d 	.word	0x20001a8d
 80085c0:	20001a90 	.word	0x20001a90
 80085c4:	20001ab0 	.word	0x20001ab0
 80085c8:	20001ad0 	.word	0x20001ad0
 80085cc:	20001af0 	.word	0x20001af0
 80085d0:	20001b18 	.word	0x20001b18

080085d4 <get_P>:
static PID posholdPID[2];
static PID poshold_ratePID[2];
static PID navPID[2];

static int32_t get_P(int32_t error, PID_PARAM *pid)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
    return (float)error * pid->kP;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	ee07 3a90 	vmov	s15, r3
 80085e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	edd3 7a00 	vldr	s15, [r3]
 80085ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085f6:	ee17 3a90 	vmov	r3, s15
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <get_I>:

static int32_t get_I(int32_t error, float *dt, PID *pid, PID_PARAM *pid_param)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b084      	sub	sp, #16
 800860a:	af00      	add	r7, sp, #0
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	607a      	str	r2, [r7, #4]
 8008612:	603b      	str	r3, [r7, #0]
    pid->integrator += ((float)error * pid_param->kI) **dt;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	ed93 7a00 	vldr	s14, [r3]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	ee07 3a90 	vmov	s15, r3
 8008620:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	edd3 7a01 	vldr	s15, [r3, #4]
 800862a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	edd3 7a00 	vldr	s15, [r3]
 8008634:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	edc3 7a00 	vstr	s15, [r3]
    pid->integrator = constrain(pid->integrator, -pid_param->Imax, pid_param->Imax);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	edd3 7a00 	vldr	s15, [r3]
 8008648:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	edd3 7a03 	vldr	s15, [r3, #12]
 8008652:	eef1 7a67 	vneg.f32	s15, s15
 8008656:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	edd3 7a03 	vldr	s15, [r3, #12]
 8008660:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008664:	ee17 2a90 	vmov	r2, s15
 8008668:	ee16 1a90 	vmov	r1, s13
 800866c:	ee17 0a10 	vmov	r0, s14
 8008670:	f7fb fb3c 	bl	8003cec <constrain>
 8008674:	ee07 0a90 	vmov	s15, r0
 8008678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	edc3 7a00 	vstr	s15, [r3]
    return pid->integrator;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	edd3 7a00 	vldr	s15, [r3]
 8008688:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800868c:	ee17 3a90 	vmov	r3, s15
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <get_D>:

static int32_t get_D(int32_t input, float *dt, PID *pid, PID_PARAM *pid_param)
{
 8008698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800869c:	b084      	sub	sp, #16
 800869e:	af00      	add	r7, sp, #0
 80086a0:	60f8      	str	r0, [r7, #12]
 80086a2:	60b9      	str	r1, [r7, #8]
 80086a4:	607a      	str	r2, [r7, #4]
 80086a6:	603b      	str	r3, [r7, #0]
    pid->derivative = (input - pid->last_input) / *dt;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	ee07 3a90 	vmov	s15, r3
 80086b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	ed93 7a00 	vldr	s14, [r3]
 80086be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	edc3 7a04 	vstr	s15, [r3, #16]
    // Low pass filter cut frequency for derivative calculation
    // Set to  "1 / ( 2 * PI * gps_lpf )"
#define PID_FILTER       (1.0f / (2.0f * M_PI * (float)cfg.gps_lpf))
    // discrete low pass filter, cuts out the
    // high frequency noise that can drive the controller crazy
    pid->derivative = pid->last_derivative + (*dt / (PID_FILTER + *dt)) * (pid->derivative - pid->last_derivative);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7f7 fef9 	bl	80004c4 <__aeabi_f2d>
 80086d2:	4604      	mov	r4, r0
 80086d4:	460d      	mov	r5, r1
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4618      	mov	r0, r3
 80086dc:	f7f7 fef2 	bl	80004c4 <__aeabi_f2d>
 80086e0:	4680      	mov	r8, r0
 80086e2:	4689      	mov	r9, r1
 80086e4:	4b36      	ldr	r3, [pc, #216]	; (80087c0 <get_D+0x128>)
 80086e6:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80086ea:	ee07 3a90 	vmov	s15, r3
 80086ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f2:	ee17 0a90 	vmov	r0, s15
 80086f6:	f7f7 fee5 	bl	80004c4 <__aeabi_f2d>
 80086fa:	a32f      	add	r3, pc, #188	; (adr r3, 80087b8 <get_D+0x120>)
 80086fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008700:	f7f7 ff38 	bl	8000574 <__aeabi_dmul>
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	f04f 0000 	mov.w	r0, #0
 800870c:	492d      	ldr	r1, [pc, #180]	; (80087c4 <get_D+0x12c>)
 800870e:	f7f8 f85b 	bl	80007c8 <__aeabi_ddiv>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4692      	mov	sl, r2
 8008718:	469b      	mov	fp, r3
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4618      	mov	r0, r3
 8008720:	f7f7 fed0 	bl	80004c4 <__aeabi_f2d>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4650      	mov	r0, sl
 800872a:	4659      	mov	r1, fp
 800872c:	f7f7 fd6c 	bl	8000208 <__adddf3>
 8008730:	4602      	mov	r2, r0
 8008732:	460b      	mov	r3, r1
 8008734:	4640      	mov	r0, r8
 8008736:	4649      	mov	r1, r9
 8008738:	f7f8 f846 	bl	80007c8 <__aeabi_ddiv>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	4690      	mov	r8, r2
 8008742:	4699      	mov	r9, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	ed93 7a04 	vldr	s14, [r3, #16]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008750:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008754:	ee17 0a90 	vmov	r0, s15
 8008758:	f7f7 feb4 	bl	80004c4 <__aeabi_f2d>
 800875c:	4602      	mov	r2, r0
 800875e:	460b      	mov	r3, r1
 8008760:	4640      	mov	r0, r8
 8008762:	4649      	mov	r1, r9
 8008764:	f7f7 ff06 	bl	8000574 <__aeabi_dmul>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	4620      	mov	r0, r4
 800876e:	4629      	mov	r1, r5
 8008770:	f7f7 fd4a 	bl	8000208 <__adddf3>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4610      	mov	r0, r2
 800877a:	4619      	mov	r1, r3
 800877c:	f7f8 f9dc 	bl	8000b38 <__aeabi_d2f>
 8008780:	4602      	mov	r2, r0
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	611a      	str	r2, [r3, #16]
    // update state
    pid->last_input = input;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	605a      	str	r2, [r3, #4]
    pid->last_derivative = pid->derivative;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	691a      	ldr	r2, [r3, #16]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	609a      	str	r2, [r3, #8]
    // add in derivative component
    return pid_param->kD * pid->derivative;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	ed93 7a02 	vldr	s14, [r3, #8]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	edd3 7a04 	vldr	s15, [r3, #16]
 80087a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087a8:	ee17 3a90 	vmov	r3, s15
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087b6:	bf00      	nop
 80087b8:	54442d18 	.word	0x54442d18
 80087bc:	401921fb 	.word	0x401921fb
 80087c0:	20001128 	.word	0x20001128
 80087c4:	3ff00000 	.word	0x3ff00000

080087c8 <reset_PID>:

static void reset_PID(PID *pid)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
    pid->integrator = 0;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f04f 0200 	mov.w	r2, #0
 80087d6:	601a      	str	r2, [r3, #0]
    pid->last_input = 0;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	605a      	str	r2, [r3, #4]
    pid->last_derivative = 0;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f04f 0200 	mov.w	r2, #0
 80087e4:	609a      	str	r2, [r3, #8]
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
	...

080087f4 <taskGpsNewData>:
int32_t nav_bearing;
// saves the bearing at takeof (1deg = 1) used to rotate to takeoff direction when arrives at home
static int16_t nav_takeoff_bearing;

uint16_t taskGpsNewData(PifTask *p_task)
{
 80087f4:	b590      	push	{r4, r7, lr}
 80087f6:	b089      	sub	sp, #36	; 0x24
 80087f8:	af02      	add	r7, sp, #8
 80087fa:	6078      	str	r0, [r7, #4]
    int16_t speed;

    (void)p_task;

        // new data received and parsed, we're in business
        gpsData.lastMessage = pif_cumulative_timer1ms;
 80087fc:	4b84      	ldr	r3, [pc, #528]	; (8008a10 <taskGpsNewData+0x21c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a84      	ldr	r2, [pc, #528]	; (8008a14 <taskGpsNewData+0x220>)
 8008802:	6093      	str	r3, [r2, #8]
        sensorsSet(SENSOR_GPS);
 8008804:	2020      	movs	r0, #32
 8008806:	f7fe fbbd 	bl	8006f84 <sensorsSet>
        if (GPS_update == 1)
 800880a:	4b83      	ldr	r3, [pc, #524]	; (8008a18 <taskGpsNewData+0x224>)
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d103      	bne.n	800881a <taskGpsNewData+0x26>
            GPS_update = 0;
 8008812:	4b81      	ldr	r3, [pc, #516]	; (8008a18 <taskGpsNewData+0x224>)
 8008814:	2200      	movs	r2, #0
 8008816:	701a      	strb	r2, [r3, #0]
 8008818:	e002      	b.n	8008820 <taskGpsNewData+0x2c>
        else
            GPS_update = 1;
 800881a:	4b7f      	ldr	r3, [pc, #508]	; (8008a18 <taskGpsNewData+0x224>)
 800881c:	2201      	movs	r2, #1
 800881e:	701a      	strb	r2, [r3, #0]
        if (f.GPS_FIX && GPS_numSat >= 5) {
 8008820:	4b7e      	ldr	r3, [pc, #504]	; (8008a1c <taskGpsNewData+0x228>)
 8008822:	7adb      	ldrb	r3, [r3, #11]
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 81ae 	beq.w	8008b86 <taskGpsNewData+0x392>
 800882a:	4b7d      	ldr	r3, [pc, #500]	; (8008a20 <taskGpsNewData+0x22c>)
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	2b04      	cmp	r3, #4
 8008830:	f240 81a9 	bls.w	8008b86 <taskGpsNewData+0x392>
            if (!f.ARMED && !f.FIXED_WING)
 8008834:	4b79      	ldr	r3, [pc, #484]	; (8008a1c <taskGpsNewData+0x228>)
 8008836:	785b      	ldrb	r3, [r3, #1]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d106      	bne.n	800884a <taskGpsNewData+0x56>
 800883c:	4b77      	ldr	r3, [pc, #476]	; (8008a1c <taskGpsNewData+0x228>)
 800883e:	7c1b      	ldrb	r3, [r3, #16]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d102      	bne.n	800884a <taskGpsNewData+0x56>
                f.GPS_FIX_HOME = 0;
 8008844:	4b75      	ldr	r3, [pc, #468]	; (8008a1c <taskGpsNewData+0x228>)
 8008846:	2200      	movs	r2, #0
 8008848:	731a      	strb	r2, [r3, #12]
            if (!f.GPS_FIX_HOME && f.ARMED)
 800884a:	4b74      	ldr	r3, [pc, #464]	; (8008a1c <taskGpsNewData+0x228>)
 800884c:	7b1b      	ldrb	r3, [r3, #12]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d105      	bne.n	800885e <taskGpsNewData+0x6a>
 8008852:	4b72      	ldr	r3, [pc, #456]	; (8008a1c <taskGpsNewData+0x228>)
 8008854:	785b      	ldrb	r3, [r3, #1]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <taskGpsNewData+0x6a>
                GPS_reset_home_position();
 800885a:	f000 f9c1 	bl	8008be0 <GPS_reset_home_position>
            // Apply moving average filter to GPS data
#if defined(GPS_FILTERING)
            GPS_filter_index = (GPS_filter_index + 1) % GPS_FILTER_VECTOR_LENGTH;
 800885e:	4b71      	ldr	r3, [pc, #452]	; (8008a24 <taskGpsNewData+0x230>)
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	1c5a      	adds	r2, r3, #1
 8008864:	4b70      	ldr	r3, [pc, #448]	; (8008a28 <taskGpsNewData+0x234>)
 8008866:	fb83 1302 	smull	r1, r3, r3, r2
 800886a:	1059      	asrs	r1, r3, #1
 800886c:	17d3      	asrs	r3, r2, #31
 800886e:	1ac9      	subs	r1, r1, r3
 8008870:	460b      	mov	r3, r1
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	440b      	add	r3, r1
 8008876:	1ad1      	subs	r1, r2, r3
 8008878:	b2ca      	uxtb	r2, r1
 800887a:	4b6a      	ldr	r3, [pc, #424]	; (8008a24 <taskGpsNewData+0x230>)
 800887c:	701a      	strb	r2, [r3, #0]
            for (axis = 0; axis < 2; axis++) {
 800887e:	2300      	movs	r3, #0
 8008880:	617b      	str	r3, [r7, #20]
 8008882:	e09f      	b.n	80089c4 <taskGpsNewData+0x1d0>
                GPS_read[axis] = GPS_coord[axis];               // latest unfiltered data is in GPS_latitude and GPS_longitude
 8008884:	4a69      	ldr	r2, [pc, #420]	; (8008a2c <taskGpsNewData+0x238>)
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800888c:	4968      	ldr	r1, [pc, #416]	; (8008a30 <taskGpsNewData+0x23c>)
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_degree[axis] = GPS_read[axis] / 10000000;   // get the degree to assure the sum fits to the int32_t
 8008894:	4a66      	ldr	r2, [pc, #408]	; (8008a30 <taskGpsNewData+0x23c>)
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800889c:	4a65      	ldr	r2, [pc, #404]	; (8008a34 <taskGpsNewData+0x240>)
 800889e:	fb82 1203 	smull	r1, r2, r2, r3
 80088a2:	1592      	asrs	r2, r2, #22
 80088a4:	17db      	asrs	r3, r3, #31
 80088a6:	1ad2      	subs	r2, r2, r3
 80088a8:	4963      	ldr	r1, [pc, #396]	; (8008a38 <taskGpsNewData+0x244>)
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                // How close we are to a degree line ? its the first three digits from the fractions of degree
                // later we use it to Check if we are close to a degree line, if yes, disable averaging,
                fraction3[axis] = (GPS_read[axis] - GPS_degree[axis] * 10000000) / 10000;
 80088b0:	4a5f      	ldr	r2, [pc, #380]	; (8008a30 <taskGpsNewData+0x23c>)
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80088b8:	495f      	ldr	r1, [pc, #380]	; (8008a38 <taskGpsNewData+0x244>)
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80088c0:	495e      	ldr	r1, [pc, #376]	; (8008a3c <taskGpsNewData+0x248>)
 80088c2:	fb01 f303 	mul.w	r3, r1, r3
 80088c6:	4413      	add	r3, r2
 80088c8:	4a5d      	ldr	r2, [pc, #372]	; (8008a40 <taskGpsNewData+0x24c>)
 80088ca:	fb82 1203 	smull	r1, r2, r2, r3
 80088ce:	1312      	asrs	r2, r2, #12
 80088d0:	17db      	asrs	r3, r3, #31
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	b299      	uxth	r1, r3
 80088d6:	4a5b      	ldr	r2, [pc, #364]	; (8008a44 <taskGpsNewData+0x250>)
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

                GPS_filter_sum[axis] -= GPS_filter[axis][GPS_filter_index];
 80088de:	4a5a      	ldr	r2, [pc, #360]	; (8008a48 <taskGpsNewData+0x254>)
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80088e6:	4b4f      	ldr	r3, [pc, #316]	; (8008a24 <taskGpsNewData+0x230>)
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	461c      	mov	r4, r3
 80088ec:	4857      	ldr	r0, [pc, #348]	; (8008a4c <taskGpsNewData+0x258>)
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	4613      	mov	r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4413      	add	r3, r2
 80088f6:	4423      	add	r3, r4
 80088f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80088fc:	1aca      	subs	r2, r1, r3
 80088fe:	4952      	ldr	r1, [pc, #328]	; (8008a48 <taskGpsNewData+0x254>)
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_filter[axis][GPS_filter_index] = GPS_read[axis] - (GPS_degree[axis] * 10000000);
 8008906:	4a4a      	ldr	r2, [pc, #296]	; (8008a30 <taskGpsNewData+0x23c>)
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800890e:	494a      	ldr	r1, [pc, #296]	; (8008a38 <taskGpsNewData+0x244>)
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008916:	4949      	ldr	r1, [pc, #292]	; (8008a3c <taskGpsNewData+0x248>)
 8008918:	fb01 f303 	mul.w	r3, r1, r3
 800891c:	4941      	ldr	r1, [pc, #260]	; (8008a24 <taskGpsNewData+0x230>)
 800891e:	7809      	ldrb	r1, [r1, #0]
 8008920:	460c      	mov	r4, r1
 8008922:	18d1      	adds	r1, r2, r3
 8008924:	4849      	ldr	r0, [pc, #292]	; (8008a4c <taskGpsNewData+0x258>)
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	4613      	mov	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	4413      	add	r3, r2
 800892e:	4423      	add	r3, r4
 8008930:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                GPS_filter_sum[axis] += GPS_filter[axis][GPS_filter_index];
 8008934:	4a44      	ldr	r2, [pc, #272]	; (8008a48 <taskGpsNewData+0x254>)
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800893c:	4b39      	ldr	r3, [pc, #228]	; (8008a24 <taskGpsNewData+0x230>)
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	461c      	mov	r4, r3
 8008942:	4842      	ldr	r0, [pc, #264]	; (8008a4c <taskGpsNewData+0x258>)
 8008944:	697a      	ldr	r2, [r7, #20]
 8008946:	4613      	mov	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	4423      	add	r3, r4
 800894e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008952:	18ca      	adds	r2, r1, r3
 8008954:	493c      	ldr	r1, [pc, #240]	; (8008a48 <taskGpsNewData+0x254>)
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_filtered[axis] = GPS_filter_sum[axis] / GPS_FILTER_VECTOR_LENGTH + (GPS_degree[axis] * 10000000);
 800895c:	4a3a      	ldr	r2, [pc, #232]	; (8008a48 <taskGpsNewData+0x254>)
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008964:	4a30      	ldr	r2, [pc, #192]	; (8008a28 <taskGpsNewData+0x234>)
 8008966:	fb82 1203 	smull	r1, r2, r2, r3
 800896a:	1052      	asrs	r2, r2, #1
 800896c:	17db      	asrs	r3, r3, #31
 800896e:	1ad2      	subs	r2, r2, r3
 8008970:	4931      	ldr	r1, [pc, #196]	; (8008a38 <taskGpsNewData+0x244>)
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008978:	4935      	ldr	r1, [pc, #212]	; (8008a50 <taskGpsNewData+0x25c>)
 800897a:	fb01 f303 	mul.w	r3, r1, r3
 800897e:	441a      	add	r2, r3
 8008980:	4934      	ldr	r1, [pc, #208]	; (8008a54 <taskGpsNewData+0x260>)
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (nav_mode == NAV_MODE_POSHOLD) {             // we use gps averaging only in poshold mode...
 8008988:	4b33      	ldr	r3, [pc, #204]	; (8008a58 <taskGpsNewData+0x264>)
 800898a:	f993 3000 	ldrsb.w	r3, [r3]
 800898e:	2b01      	cmp	r3, #1
 8008990:	d115      	bne.n	80089be <taskGpsNewData+0x1ca>
                    if (fraction3[axis] > 1 && fraction3[axis] < 999)
 8008992:	4a2c      	ldr	r2, [pc, #176]	; (8008a44 <taskGpsNewData+0x250>)
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800899a:	2b01      	cmp	r3, #1
 800899c:	d90f      	bls.n	80089be <taskGpsNewData+0x1ca>
 800899e:	4a29      	ldr	r2, [pc, #164]	; (8008a44 <taskGpsNewData+0x250>)
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089a6:	f240 32e6 	movw	r2, #998	; 0x3e6
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d807      	bhi.n	80089be <taskGpsNewData+0x1ca>
                        GPS_coord[axis] = GPS_filtered[axis];
 80089ae:	4a29      	ldr	r2, [pc, #164]	; (8008a54 <taskGpsNewData+0x260>)
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80089b6:	491d      	ldr	r1, [pc, #116]	; (8008a2c <taskGpsNewData+0x238>)
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (axis = 0; axis < 2; axis++) {
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	3301      	adds	r3, #1
 80089c2:	617b      	str	r3, [r7, #20]
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	f77f af5c 	ble.w	8008884 <taskGpsNewData+0x90>
                }
            }
#endif
            // dTnav calculation
            // Time for calculating x,y speed and navigation pids
            dTnav = (float)(pif_cumulative_timer1ms - nav_loopTimer) / 1000.0f;
 80089cc:	4b10      	ldr	r3, [pc, #64]	; (8008a10 <taskGpsNewData+0x21c>)
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	4b22      	ldr	r3, [pc, #136]	; (8008a5c <taskGpsNewData+0x268>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	ee07 3a90 	vmov	s15, r3
 80089da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80089de:	eddf 6a20 	vldr	s13, [pc, #128]	; 8008a60 <taskGpsNewData+0x26c>
 80089e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80089e6:	4b1f      	ldr	r3, [pc, #124]	; (8008a64 <taskGpsNewData+0x270>)
 80089e8:	edc3 7a00 	vstr	s15, [r3]
            nav_loopTimer = pif_cumulative_timer1ms;
 80089ec:	4b08      	ldr	r3, [pc, #32]	; (8008a10 <taskGpsNewData+0x21c>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a1a      	ldr	r2, [pc, #104]	; (8008a5c <taskGpsNewData+0x268>)
 80089f2:	6013      	str	r3, [r2, #0]
            // prevent runup from bad GPS
            dTnav = min(dTnav, 1.0f);
 80089f4:	4b1b      	ldr	r3, [pc, #108]	; (8008a64 <taskGpsNewData+0x270>)
 80089f6:	edd3 7a00 	vldr	s15, [r3]
 80089fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a06:	d52f      	bpl.n	8008a68 <taskGpsNewData+0x274>
 8008a08:	4b16      	ldr	r3, [pc, #88]	; (8008a64 <taskGpsNewData+0x270>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	e02e      	b.n	8008a6c <taskGpsNewData+0x278>
 8008a0e:	bf00      	nop
 8008a10:	200020e0 	.word	0x200020e0
 8008a14:	200012a4 	.word	0x200012a4
 8008a18:	20001a7a 	.word	0x20001a7a
 8008a1c:	20001988 	.word	0x20001988
 8008a20:	20001a70 	.word	0x20001a70
 8008a24:	2000169e 	.word	0x2000169e
 8008a28:	66666667 	.word	0x66666667
 8008a2c:	20001a50 	.word	0x20001a50
 8008a30:	200016d0 	.word	0x200016d0
 8008a34:	6b5fca6b 	.word	0x6b5fca6b
 8008a38:	200016e0 	.word	0x200016e0
 8008a3c:	ff676980 	.word	0xff676980
 8008a40:	68db8bad 	.word	0x68db8bad
 8008a44:	200016e8 	.word	0x200016e8
 8008a48:	200016c8 	.word	0x200016c8
 8008a4c:	200016a0 	.word	0x200016a0
 8008a50:	00989680 	.word	0x00989680
 8008a54:	200016d8 	.word	0x200016d8
 8008a58:	20001a8c 	.word	0x20001a8c
 8008a5c:	200016f4 	.word	0x200016f4
 8008a60:	447a0000 	.word	0x447a0000
 8008a64:	20001670 	.word	0x20001670
 8008a68:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008a6c:	4a4a      	ldr	r2, [pc, #296]	; (8008b98 <taskGpsNewData+0x3a4>)
 8008a6e:	6013      	str	r3, [r2, #0]

            // calculate distance and bearings for gui and other stuff continously - From home to copter
            GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_home[LAT], &GPS_home[LON], &dist, &dir);
 8008a70:	f107 0308 	add.w	r3, r7, #8
 8008a74:	9301      	str	r3, [sp, #4]
 8008a76:	f107 030c 	add.w	r3, r7, #12
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	4b47      	ldr	r3, [pc, #284]	; (8008b9c <taskGpsNewData+0x3a8>)
 8008a7e:	4a48      	ldr	r2, [pc, #288]	; (8008ba0 <taskGpsNewData+0x3ac>)
 8008a80:	4948      	ldr	r1, [pc, #288]	; (8008ba4 <taskGpsNewData+0x3b0>)
 8008a82:	4849      	ldr	r0, [pc, #292]	; (8008ba8 <taskGpsNewData+0x3b4>)
 8008a84:	f000 faec 	bl	8009060 <GPS_distance_cm_bearing>
            GPS_distanceToHome = dist / 100;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	4a48      	ldr	r2, [pc, #288]	; (8008bac <taskGpsNewData+0x3b8>)
 8008a8c:	fb82 1203 	smull	r1, r2, r2, r3
 8008a90:	1152      	asrs	r2, r2, #5
 8008a92:	17db      	asrs	r3, r3, #31
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	4b45      	ldr	r3, [pc, #276]	; (8008bb0 <taskGpsNewData+0x3bc>)
 8008a9a:	801a      	strh	r2, [r3, #0]
            GPS_directionToHome = dir / 100;
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	4a43      	ldr	r2, [pc, #268]	; (8008bac <taskGpsNewData+0x3b8>)
 8008aa0:	fb82 1203 	smull	r1, r2, r2, r3
 8008aa4:	1152      	asrs	r2, r2, #5
 8008aa6:	17db      	asrs	r3, r3, #31
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	b21a      	sxth	r2, r3
 8008aac:	4b41      	ldr	r3, [pc, #260]	; (8008bb4 <taskGpsNewData+0x3c0>)
 8008aae:	801a      	strh	r2, [r3, #0]

            if (!f.GPS_FIX_HOME) {      // If we don't have home set, do not display anything
 8008ab0:	4b41      	ldr	r3, [pc, #260]	; (8008bb8 <taskGpsNewData+0x3c4>)
 8008ab2:	7b1b      	ldrb	r3, [r3, #12]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d105      	bne.n	8008ac4 <taskGpsNewData+0x2d0>
                GPS_distanceToHome = 0;
 8008ab8:	4b3d      	ldr	r3, [pc, #244]	; (8008bb0 <taskGpsNewData+0x3bc>)
 8008aba:	2200      	movs	r2, #0
 8008abc:	801a      	strh	r2, [r3, #0]
                GPS_directionToHome = 0;
 8008abe:	4b3d      	ldr	r3, [pc, #244]	; (8008bb4 <taskGpsNewData+0x3c0>)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	801a      	strh	r2, [r3, #0]
            }

            // calculate the current velocity based on gps coordinates continously to get a valid speed at the moment when we start navigating
            GPS_calc_velocity();
 8008ac4:	f000 fb3a 	bl	800913c <GPS_calc_velocity>

            if (f.GPS_HOLD_MODE || f.GPS_HOME_MODE) { // ok we are navigating
 8008ac8:	4b3b      	ldr	r3, [pc, #236]	; (8008bb8 <taskGpsNewData+0x3c4>)
 8008aca:	7a1b      	ldrb	r3, [r3, #8]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d103      	bne.n	8008ad8 <taskGpsNewData+0x2e4>
 8008ad0:	4b39      	ldr	r3, [pc, #228]	; (8008bb8 <taskGpsNewData+0x3c4>)
 8008ad2:	79db      	ldrb	r3, [r3, #7]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d056      	beq.n	8008b86 <taskGpsNewData+0x392>
                // do gps nav calculations here, these are common for nav and poshold
                GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON], &wp_distance, &target_bearing);
 8008ad8:	4b38      	ldr	r3, [pc, #224]	; (8008bbc <taskGpsNewData+0x3c8>)
 8008ada:	9301      	str	r3, [sp, #4]
 8008adc:	4b38      	ldr	r3, [pc, #224]	; (8008bc0 <taskGpsNewData+0x3cc>)
 8008ade:	9300      	str	r3, [sp, #0]
 8008ae0:	4b38      	ldr	r3, [pc, #224]	; (8008bc4 <taskGpsNewData+0x3d0>)
 8008ae2:	4a39      	ldr	r2, [pc, #228]	; (8008bc8 <taskGpsNewData+0x3d4>)
 8008ae4:	492f      	ldr	r1, [pc, #188]	; (8008ba4 <taskGpsNewData+0x3b0>)
 8008ae6:	4830      	ldr	r0, [pc, #192]	; (8008ba8 <taskGpsNewData+0x3b4>)
 8008ae8:	f000 faba 	bl	8009060 <GPS_distance_cm_bearing>
                GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON]);
 8008aec:	4b2d      	ldr	r3, [pc, #180]	; (8008ba4 <taskGpsNewData+0x3b0>)
 8008aee:	4a2e      	ldr	r2, [pc, #184]	; (8008ba8 <taskGpsNewData+0x3b4>)
 8008af0:	4934      	ldr	r1, [pc, #208]	; (8008bc4 <taskGpsNewData+0x3d0>)
 8008af2:	4835      	ldr	r0, [pc, #212]	; (8008bc8 <taskGpsNewData+0x3d4>)
 8008af4:	f000 fba4 	bl	8009240 <GPS_calc_location_error>

                if (f.FIXED_WING)
 8008af8:	4b2f      	ldr	r3, [pc, #188]	; (8008bb8 <taskGpsNewData+0x3c4>)
 8008afa:	7c1b      	ldrb	r3, [r3, #16]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <taskGpsNewData+0x312>
                    nav_mode = NAV_MODE_WP; // Planes always navigate in Wp mode.
 8008b00:	4b32      	ldr	r3, [pc, #200]	; (8008bcc <taskGpsNewData+0x3d8>)
 8008b02:	2202      	movs	r2, #2
 8008b04:	701a      	strb	r2, [r3, #0]

                switch (nav_mode) {
 8008b06:	4b31      	ldr	r3, [pc, #196]	; (8008bcc <taskGpsNewData+0x3d8>)
 8008b08:	f993 3000 	ldrsb.w	r3, [r3]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d002      	beq.n	8008b16 <taskGpsNewData+0x322>
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d003      	beq.n	8008b1c <taskGpsNewData+0x328>
 8008b14:	e03a      	b.n	8008b8c <taskGpsNewData+0x398>
                    case NAV_MODE_POSHOLD:
                        // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
                        GPS_calc_poshold();
 8008b16:	f000 fbbf 	bl	8009298 <GPS_calc_poshold>
                        break;
 8008b1a:	e037      	b.n	8008b8c <taskGpsNewData+0x398>

                    case NAV_MODE_WP:
                        speed = GPS_calc_desired_speed(cfg.nav_speed_max, NAV_SLOW_NAV);    // slow navigation
 8008b1c:	4b2c      	ldr	r3, [pc, #176]	; (8008bd0 <taskGpsNewData+0x3dc>)
 8008b1e:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 8008b22:	b21b      	sxth	r3, r3
 8008b24:	2101      	movs	r1, #1
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 fdc4 	bl	80096b4 <GPS_calc_desired_speed>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	827b      	strh	r3, [r7, #18]
                        // use error as the desired rate towards the target
                        // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
                        GPS_calc_nav_rate(speed);
 8008b30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b34:	4618      	mov	r0, r3
 8008b36:	f000 fc67 	bl	8009408 <GPS_calc_nav_rate>

                        // Tail control
                        if (cfg.nav_controls_heading) {
 8008b3a:	4b25      	ldr	r3, [pc, #148]	; (8008bd0 <taskGpsNewData+0x3dc>)
 8008b3c:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00a      	beq.n	8008b5a <taskGpsNewData+0x366>
                            if (NAV_TAIL_FIRST) {
                                magHold = wrap_18000(nav_bearing - 18000) / 100;
                            } else {
                                magHold = nav_bearing / 100;
 8008b44:	4b23      	ldr	r3, [pc, #140]	; (8008bd4 <taskGpsNewData+0x3e0>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a18      	ldr	r2, [pc, #96]	; (8008bac <taskGpsNewData+0x3b8>)
 8008b4a:	fb82 1203 	smull	r1, r2, r2, r3
 8008b4e:	1152      	asrs	r2, r2, #5
 8008b50:	17db      	asrs	r3, r3, #31
 8008b52:	1ad3      	subs	r3, r2, r3
 8008b54:	b21a      	sxth	r2, r3
 8008b56:	4b20      	ldr	r3, [pc, #128]	; (8008bd8 <taskGpsNewData+0x3e4>)
 8008b58:	801a      	strh	r2, [r3, #0]
                            }
                        }
                        // Are we there yet ?(within x meters of the destination)
                        if ((wp_distance <= cfg.gps_wp_radius) || check_missed_wp()) {      // if yes switch to poshold mode
 8008b5a:	4b1d      	ldr	r3, [pc, #116]	; (8008bd0 <taskGpsNewData+0x3dc>)
 8008b5c:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8008b60:	461a      	mov	r2, r3
 8008b62:	4b17      	ldr	r3, [pc, #92]	; (8008bc0 <taskGpsNewData+0x3cc>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	da04      	bge.n	8008b74 <taskGpsNewData+0x380>
 8008b6a:	f000 fa59 	bl	8009020 <check_missed_wp>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00a      	beq.n	8008b8a <taskGpsNewData+0x396>
                            nav_mode = NAV_MODE_POSHOLD;
 8008b74:	4b15      	ldr	r3, [pc, #84]	; (8008bcc <taskGpsNewData+0x3d8>)
 8008b76:	2201      	movs	r2, #1
 8008b78:	701a      	strb	r2, [r3, #0]
                            if (NAV_SET_TAKEOFF_HEADING) {
                                magHold = nav_takeoff_bearing;
 8008b7a:	4b18      	ldr	r3, [pc, #96]	; (8008bdc <taskGpsNewData+0x3e8>)
 8008b7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008b80:	4b15      	ldr	r3, [pc, #84]	; (8008bd8 <taskGpsNewData+0x3e4>)
 8008b82:	801a      	strh	r2, [r3, #0]
                            }
                        }
                        break;
 8008b84:	e001      	b.n	8008b8a <taskGpsNewData+0x396>
                }
            }                   //end of gps calcs
 8008b86:	bf00      	nop
 8008b88:	e000      	b.n	8008b8c <taskGpsNewData+0x398>
                        break;
 8008b8a:	bf00      	nop
        }

    return 0;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	371c      	adds	r7, #28
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd90      	pop	{r4, r7, pc}
 8008b96:	bf00      	nop
 8008b98:	20001670 	.word	0x20001670
 8008b9c:	20001a5c 	.word	0x20001a5c
 8008ba0:	20001a58 	.word	0x20001a58
 8008ba4:	20001a54 	.word	0x20001a54
 8008ba8:	20001a50 	.word	0x20001a50
 8008bac:	51eb851f 	.word	0x51eb851f
 8008bb0:	20001a72 	.word	0x20001a72
 8008bb4:	20001a74 	.word	0x20001a74
 8008bb8:	20001988 	.word	0x20001988
 8008bbc:	2000168c 	.word	0x2000168c
 8008bc0:	20001698 	.word	0x20001698
 8008bc4:	20001688 	.word	0x20001688
 8008bc8:	20001684 	.word	0x20001684
 8008bcc:	20001a8c 	.word	0x20001a8c
 8008bd0:	20001128 	.word	0x20001128
 8008bd4:	200016ec 	.word	0x200016ec
 8008bd8:	20001cb6 	.word	0x20001cb6
 8008bdc:	200016f0 	.word	0x200016f0

08008be0 <GPS_reset_home_position>:

void GPS_reset_home_position(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
    if (f.GPS_FIX && GPS_numSat >= 5) {
 8008be4:	4b11      	ldr	r3, [pc, #68]	; (8008c2c <GPS_reset_home_position+0x4c>)
 8008be6:	7adb      	ldrb	r3, [r3, #11]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d01d      	beq.n	8008c28 <GPS_reset_home_position+0x48>
 8008bec:	4b10      	ldr	r3, [pc, #64]	; (8008c30 <GPS_reset_home_position+0x50>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	2b04      	cmp	r3, #4
 8008bf2:	d919      	bls.n	8008c28 <GPS_reset_home_position+0x48>
        GPS_home[LAT] = GPS_coord[LAT];
 8008bf4:	4b0f      	ldr	r3, [pc, #60]	; (8008c34 <GPS_reset_home_position+0x54>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a0f      	ldr	r2, [pc, #60]	; (8008c38 <GPS_reset_home_position+0x58>)
 8008bfa:	6013      	str	r3, [r2, #0]
        GPS_home[LON] = GPS_coord[LON];
 8008bfc:	4b0d      	ldr	r3, [pc, #52]	; (8008c34 <GPS_reset_home_position+0x54>)
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	4a0d      	ldr	r2, [pc, #52]	; (8008c38 <GPS_reset_home_position+0x58>)
 8008c02:	6053      	str	r3, [r2, #4]
        GPS_calc_longitude_scaling(GPS_coord[LAT]); // need an initial value for distance and bearing calc
 8008c04:	4b0b      	ldr	r3, [pc, #44]	; (8008c34 <GPS_reset_home_position+0x54>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 f981 	bl	8008f10 <GPS_calc_longitude_scaling>
        nav_takeoff_bearing = heading;              // save takeoff heading
 8008c0e:	4b0b      	ldr	r3, [pc, #44]	; (8008c3c <GPS_reset_home_position+0x5c>)
 8008c10:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008c14:	4b0a      	ldr	r3, [pc, #40]	; (8008c40 <GPS_reset_home_position+0x60>)
 8008c16:	801a      	strh	r2, [r3, #0]
        //Set ground altitude
        GPS_home[ALT] = GPS_altitude;
 8008c18:	4b0a      	ldr	r3, [pc, #40]	; (8008c44 <GPS_reset_home_position+0x64>)
 8008c1a:	881b      	ldrh	r3, [r3, #0]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	4b06      	ldr	r3, [pc, #24]	; (8008c38 <GPS_reset_home_position+0x58>)
 8008c20:	609a      	str	r2, [r3, #8]
        f.GPS_FIX_HOME = 1;
 8008c22:	4b02      	ldr	r3, [pc, #8]	; (8008c2c <GPS_reset_home_position+0x4c>)
 8008c24:	2201      	movs	r2, #1
 8008c26:	731a      	strb	r2, [r3, #12]
    }
}
 8008c28:	bf00      	nop
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	20001988 	.word	0x20001988
 8008c30:	20001a70 	.word	0x20001a70
 8008c34:	20001a50 	.word	0x20001a50
 8008c38:	20001a58 	.word	0x20001a58
 8008c3c:	20001cb4 	.word	0x20001cb4
 8008c40:	200016f0 	.word	0x200016f0
 8008c44:	20001a76 	.word	0x20001a76

08008c48 <GPS_reset_nav>:

// reset navigation (stop the navigation processor, and clear nav)
void GPS_reset_nav(void)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
    int i;

    for (i = 0; i < 2; i++) {
 8008c4e:	2300      	movs	r3, #0
 8008c50:	607b      	str	r3, [r7, #4]
 8008c52:	e02f      	b.n	8008cb4 <GPS_reset_nav+0x6c>
        GPS_angle[i] = 0;
 8008c54:	4a1e      	ldr	r2, [pc, #120]	; (8008cd0 <GPS_reset_nav+0x88>)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2100      	movs	r1, #0
 8008c5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav_rated[i] = 0;
 8008c5e:	4a1d      	ldr	r2, [pc, #116]	; (8008cd4 <GPS_reset_nav+0x8c>)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2100      	movs	r1, #0
 8008c64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav[i] = 0;
 8008c68:	4a1b      	ldr	r2, [pc, #108]	; (8008cd8 <GPS_reset_nav+0x90>)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        reset_PID(&posholdPID[i]);
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	4613      	mov	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	4413      	add	r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	4a17      	ldr	r2, [pc, #92]	; (8008cdc <GPS_reset_nav+0x94>)
 8008c7e:	4413      	add	r3, r2
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7ff fda1 	bl	80087c8 <reset_PID>
        reset_PID(&poshold_ratePID[i]);
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	4613      	mov	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4413      	add	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	4a13      	ldr	r2, [pc, #76]	; (8008ce0 <GPS_reset_nav+0x98>)
 8008c92:	4413      	add	r3, r2
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7ff fd97 	bl	80087c8 <reset_PID>
        reset_PID(&navPID[i]);
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4a0f      	ldr	r2, [pc, #60]	; (8008ce4 <GPS_reset_nav+0x9c>)
 8008ca6:	4413      	add	r3, r2
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7ff fd8d 	bl	80087c8 <reset_PID>
    for (i = 0; i < 2; i++) {
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	607b      	str	r3, [r7, #4]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	ddcc      	ble.n	8008c54 <GPS_reset_nav+0xc>
    }

    if (f.FIXED_WING)
 8008cba:	4b0b      	ldr	r3, [pc, #44]	; (8008ce8 <GPS_reset_nav+0xa0>)
 8008cbc:	7c1b      	ldrb	r3, [r3, #16]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d001      	beq.n	8008cc6 <GPS_reset_nav+0x7e>
        fw_nav_reset();
 8008cc2:	f7fe f9e5 	bl	8007090 <fw_nav_reset>

}
 8008cc6:	bf00      	nop
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	20001a7c 	.word	0x20001a7c
 8008cd4:	20001a88 	.word	0x20001a88
 8008cd8:	20001a84 	.word	0x20001a84
 8008cdc:	200015f8 	.word	0x200015f8
 8008ce0:	20001620 	.word	0x20001620
 8008ce4:	20001648 	.word	0x20001648
 8008ce8:	20001988 	.word	0x20001988

08008cec <gpsSetPIDs>:

// Get the relevant P I D values and set the PID controllers
void gpsSetPIDs(void)
{
 8008cec:	b480      	push	{r7}
 8008cee:	af00      	add	r7, sp, #0
    posholdPID_PARAM.kP = (float)cfg.P8[PIDPOS] / 100.0f;
 8008cf0:	4b50      	ldr	r3, [pc, #320]	; (8008e34 <gpsSetPIDs+0x148>)
 8008cf2:	795b      	ldrb	r3, [r3, #5]
 8008cf4:	ee07 3a90 	vmov	s15, r3
 8008cf8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008cfc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008e38 <gpsSetPIDs+0x14c>
 8008d00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d04:	4b4d      	ldr	r3, [pc, #308]	; (8008e3c <gpsSetPIDs+0x150>)
 8008d06:	edc3 7a00 	vstr	s15, [r3]
    posholdPID_PARAM.kI = (float)cfg.I8[PIDPOS] / 100.0f;
 8008d0a:	4b4a      	ldr	r3, [pc, #296]	; (8008e34 <gpsSetPIDs+0x148>)
 8008d0c:	7bdb      	ldrb	r3, [r3, #15]
 8008d0e:	ee07 3a90 	vmov	s15, r3
 8008d12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d16:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008e38 <gpsSetPIDs+0x14c>
 8008d1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d1e:	4b47      	ldr	r3, [pc, #284]	; (8008e3c <gpsSetPIDs+0x150>)
 8008d20:	edc3 7a01 	vstr	s15, [r3, #4]
    posholdPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008d24:	4b45      	ldr	r3, [pc, #276]	; (8008e3c <gpsSetPIDs+0x150>)
 8008d26:	4a46      	ldr	r2, [pc, #280]	; (8008e40 <gpsSetPIDs+0x154>)
 8008d28:	60da      	str	r2, [r3, #12]

    poshold_ratePID_PARAM.kP = (float)cfg.P8[PIDPOSR] / 10.0f;
 8008d2a:	4b42      	ldr	r3, [pc, #264]	; (8008e34 <gpsSetPIDs+0x148>)
 8008d2c:	799b      	ldrb	r3, [r3, #6]
 8008d2e:	ee07 3a90 	vmov	s15, r3
 8008d32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d36:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008d3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d3e:	4b41      	ldr	r3, [pc, #260]	; (8008e44 <gpsSetPIDs+0x158>)
 8008d40:	edc3 7a00 	vstr	s15, [r3]
    poshold_ratePID_PARAM.kI = (float)cfg.I8[PIDPOSR] / 100.0f;
 8008d44:	4b3b      	ldr	r3, [pc, #236]	; (8008e34 <gpsSetPIDs+0x148>)
 8008d46:	7c1b      	ldrb	r3, [r3, #16]
 8008d48:	ee07 3a90 	vmov	s15, r3
 8008d4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d50:	eddf 6a39 	vldr	s13, [pc, #228]	; 8008e38 <gpsSetPIDs+0x14c>
 8008d54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d58:	4b3a      	ldr	r3, [pc, #232]	; (8008e44 <gpsSetPIDs+0x158>)
 8008d5a:	edc3 7a01 	vstr	s15, [r3, #4]
    poshold_ratePID_PARAM.kD = (float)cfg.D8[PIDPOSR] / 1000.0f;
 8008d5e:	4b35      	ldr	r3, [pc, #212]	; (8008e34 <gpsSetPIDs+0x148>)
 8008d60:	7e9b      	ldrb	r3, [r3, #26]
 8008d62:	ee07 3a90 	vmov	s15, r3
 8008d66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d6a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008e48 <gpsSetPIDs+0x15c>
 8008d6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d72:	4b34      	ldr	r3, [pc, #208]	; (8008e44 <gpsSetPIDs+0x158>)
 8008d74:	edc3 7a02 	vstr	s15, [r3, #8]
    poshold_ratePID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008d78:	4b32      	ldr	r3, [pc, #200]	; (8008e44 <gpsSetPIDs+0x158>)
 8008d7a:	4a31      	ldr	r2, [pc, #196]	; (8008e40 <gpsSetPIDs+0x154>)
 8008d7c:	60da      	str	r2, [r3, #12]

    navPID_PARAM.kP = (float)cfg.P8[PIDNAVR] / 10.0f;
 8008d7e:	4b2d      	ldr	r3, [pc, #180]	; (8008e34 <gpsSetPIDs+0x148>)
 8008d80:	79db      	ldrb	r3, [r3, #7]
 8008d82:	ee07 3a90 	vmov	s15, r3
 8008d86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d8a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008d8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d92:	4b2e      	ldr	r3, [pc, #184]	; (8008e4c <gpsSetPIDs+0x160>)
 8008d94:	edc3 7a00 	vstr	s15, [r3]
    navPID_PARAM.kI = (float)cfg.I8[PIDNAVR] / 100.0f;
 8008d98:	4b26      	ldr	r3, [pc, #152]	; (8008e34 <gpsSetPIDs+0x148>)
 8008d9a:	7c5b      	ldrb	r3, [r3, #17]
 8008d9c:	ee07 3a90 	vmov	s15, r3
 8008da0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008da4:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008e38 <gpsSetPIDs+0x14c>
 8008da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008dac:	4b27      	ldr	r3, [pc, #156]	; (8008e4c <gpsSetPIDs+0x160>)
 8008dae:	edc3 7a01 	vstr	s15, [r3, #4]
    navPID_PARAM.kD = (float)cfg.D8[PIDNAVR] / 1000.0f;
 8008db2:	4b20      	ldr	r3, [pc, #128]	; (8008e34 <gpsSetPIDs+0x148>)
 8008db4:	7edb      	ldrb	r3, [r3, #27]
 8008db6:	ee07 3a90 	vmov	s15, r3
 8008dba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008dbe:	eddf 6a22 	vldr	s13, [pc, #136]	; 8008e48 <gpsSetPIDs+0x15c>
 8008dc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008dc6:	4b21      	ldr	r3, [pc, #132]	; (8008e4c <gpsSetPIDs+0x160>)
 8008dc8:	edc3 7a02 	vstr	s15, [r3, #8]
    navPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008dcc:	4b1f      	ldr	r3, [pc, #124]	; (8008e4c <gpsSetPIDs+0x160>)
 8008dce:	4a1c      	ldr	r2, [pc, #112]	; (8008e40 <gpsSetPIDs+0x154>)
 8008dd0:	60da      	str	r2, [r3, #12]

    if (f.FIXED_WING) {
 8008dd2:	4b1f      	ldr	r3, [pc, #124]	; (8008e50 <gpsSetPIDs+0x164>)
 8008dd4:	7c1b      	ldrb	r3, [r3, #16]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d026      	beq.n	8008e28 <gpsSetPIDs+0x13c>
        altPID_PARAM.kP   = (float)cfg.P8[PIDALT] / 10.0f;
 8008dda:	4b16      	ldr	r3, [pc, #88]	; (8008e34 <gpsSetPIDs+0x148>)
 8008ddc:	791b      	ldrb	r3, [r3, #4]
 8008dde:	ee07 3a90 	vmov	s15, r3
 8008de2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008de6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008dea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008dee:	4b19      	ldr	r3, [pc, #100]	; (8008e54 <gpsSetPIDs+0x168>)
 8008df0:	edc3 7a00 	vstr	s15, [r3]
        altPID_PARAM.kI   = (float)cfg.I8[PIDALT] / 100.0f;
 8008df4:	4b0f      	ldr	r3, [pc, #60]	; (8008e34 <gpsSetPIDs+0x148>)
 8008df6:	7b9b      	ldrb	r3, [r3, #14]
 8008df8:	ee07 3a90 	vmov	s15, r3
 8008dfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e00:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8008e38 <gpsSetPIDs+0x14c>
 8008e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008e08:	4b12      	ldr	r3, [pc, #72]	; (8008e54 <gpsSetPIDs+0x168>)
 8008e0a:	edc3 7a01 	vstr	s15, [r3, #4]
        altPID_PARAM.kD   = (float)cfg.D8[PIDALT] / 1000.0f;
 8008e0e:	4b09      	ldr	r3, [pc, #36]	; (8008e34 <gpsSetPIDs+0x148>)
 8008e10:	7e1b      	ldrb	r3, [r3, #24]
 8008e12:	ee07 3a90 	vmov	s15, r3
 8008e16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e1a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8008e48 <gpsSetPIDs+0x15c>
 8008e1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008e22:	4b0c      	ldr	r3, [pc, #48]	; (8008e54 <gpsSetPIDs+0x168>)
 8008e24:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 8008e28:	bf00      	nop
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	20001128 	.word	0x20001128
 8008e38:	42c80000 	.word	0x42c80000
 8008e3c:	200015b8 	.word	0x200015b8
 8008e40:	44fa0000 	.word	0x44fa0000
 8008e44:	200015c8 	.word	0x200015c8
 8008e48:	447a0000 	.word	0x447a0000
 8008e4c:	200015d8 	.word	0x200015d8
 8008e50:	20001988 	.word	0x20001988
 8008e54:	200015e8 	.word	0x200015e8

08008e58 <_EvtPrintFrame>:

static void _EvtPrintFrame(char* p_frame)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
    actLed0State(ON);
 8008e60:	2001      	movs	r0, #1
 8008e62:	f7f9 f8db 	bl	800201c <actLed0State>
#ifndef __PIF_NO_LOG__
    pifLog_Print(LT_NONE, p_frame);
 8008e66:	6879      	ldr	r1, [r7, #4]
 8008e68:	2000      	movs	r0, #0
 8008e6a:	f00a fb05 	bl	8013478 <pifLog_Print>
#else
    (void)p_frame;
#endif
    actLed0State(OFF);
 8008e6e:	2000      	movs	r0, #0
 8008e70:	f7f9 f8d4 	bl	800201c <actLed0State>
}
 8008e74:	bf00      	nop
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <gpsSetPassthrough>:

int8_t gpsSetPassthrough(void)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
    static bool state = false;
	PifGps* p_gps;

    if (gpsData.state != GPS_RECEIVINGDATA)
 8008e82:	4b1c      	ldr	r3, [pc, #112]	; (8008ef4 <gpsSetPassthrough+0x78>)
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	2b05      	cmp	r3, #5
 8008e88:	d002      	beq.n	8008e90 <gpsSetPassthrough+0x14>
        return -1;
 8008e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e8e:	e02d      	b.n	8008eec <gpsSetPassthrough+0x70>

    actLed0State(OFF);
 8008e90:	2000      	movs	r0, #0
 8008e92:	f7f9 f8c3 	bl	800201c <actLed0State>
    actLed1State(OFF);
 8008e96:	2000      	movs	r0, #0
 8008e98:	f7f9 f8ec 	bl	8002074 <actLed1State>

    if (mcfg.gps_type == GPS_NMEA) {
 8008e9c:	4b16      	ldr	r3, [pc, #88]	; (8008ef8 <gpsSetPassthrough+0x7c>)
 8008e9e:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d120      	bne.n	8008ee8 <gpsSetPassthrough+0x6c>
		p_gps = (gpsInitData[gpsData.baudrateIndex].baudrate == 9600) ? &gps_nmea._gps : &gps_ublox._gps;
 8008ea6:	4b13      	ldr	r3, [pc, #76]	; (8008ef4 <gpsSetPassthrough+0x78>)
 8008ea8:	785b      	ldrb	r3, [r3, #1]
 8008eaa:	4a14      	ldr	r2, [pc, #80]	; (8008efc <gpsSetPassthrough+0x80>)
 8008eac:	00db      	lsls	r3, r3, #3
 8008eae:	4413      	add	r3, r2
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8008eb6:	d101      	bne.n	8008ebc <gpsSetPassthrough+0x40>
 8008eb8:	4b11      	ldr	r3, [pc, #68]	; (8008f00 <gpsSetPassthrough+0x84>)
 8008eba:	e000      	b.n	8008ebe <gpsSetPassthrough+0x42>
 8008ebc:	4b11      	ldr	r3, [pc, #68]	; (8008f04 <gpsSetPassthrough+0x88>)
 8008ebe:	607b      	str	r3, [r7, #4]
        if (state) {
 8008ec0:	4b11      	ldr	r3, [pc, #68]	; (8008f08 <gpsSetPassthrough+0x8c>)
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d007      	beq.n	8008ed8 <gpsSetPassthrough+0x5c>
            p_gps->evt_frame = NULL;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	609a      	str	r2, [r3, #8]
            state = false;
 8008ece:	4b0e      	ldr	r3, [pc, #56]	; (8008f08 <gpsSetPassthrough+0x8c>)
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	701a      	strb	r2, [r3, #0]
            return 0;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	e009      	b.n	8008eec <gpsSetPassthrough+0x70>
        }
        else {
            p_gps->evt_frame = _EvtPrintFrame;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a0c      	ldr	r2, [pc, #48]	; (8008f0c <gpsSetPassthrough+0x90>)
 8008edc:	609a      	str	r2, [r3, #8]
            state = true;
 8008ede:	4b0a      	ldr	r3, [pc, #40]	; (8008f08 <gpsSetPassthrough+0x8c>)
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	701a      	strb	r2, [r3, #0]
            return 1;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e001      	b.n	8008eec <gpsSetPassthrough+0x70>
        }
    }
    return -1;
 8008ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	200012a4 	.word	0x200012a4
 8008ef8:	20000bbc 	.word	0x20000bbc
 8008efc:	0802789c 	.word	0x0802789c
 8008f00:	200012c8 	.word	0x200012c8
 8008f04:	20001348 	.word	0x20001348
 8008f08:	200016f8 	.word	0x200016f8
 8008f0c:	08008e59 	.word	0x08008e59

08008f10 <GPS_calc_longitude_scaling>:
////////////////////////////////////////////////////////////////////////////////////
// this is used to offset the shrinking longitude as we go towards the poles
// It's ok to calculate this once per waypoint setting, since it changes a little within the reach of a multicopter
//
static void GPS_calc_longitude_scaling(int32_t lat)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
    float rads = (abs((float)lat) / 10000000.0f) * 0.0174532925f;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	ee07 3a90 	vmov	s15, r3
 8008f1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f2a:	dd05      	ble.n	8008f38 <GPS_calc_longitude_scaling+0x28>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	ee07 3a90 	vmov	s15, r3
 8008f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f36:	e006      	b.n	8008f46 <GPS_calc_longitude_scaling+0x36>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	ee07 3a90 	vmov	s15, r3
 8008f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f42:	eef1 7a67 	vneg.f32	s15, s15
 8008f46:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8008f74 <GPS_calc_longitude_scaling+0x64>
 8008f4a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008f4e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008f78 <GPS_calc_longitude_scaling+0x68>
 8008f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f56:	edc7 7a03 	vstr	s15, [r7, #12]
    GPS_scaleLonDown = cosf(rads);
 8008f5a:	ed97 0a03 	vldr	s0, [r7, #12]
 8008f5e:	f019 fa1f 	bl	80223a0 <cosf>
 8008f62:	eef0 7a40 	vmov.f32	s15, s0
 8008f66:	4b05      	ldr	r3, [pc, #20]	; (8008f7c <GPS_calc_longitude_scaling+0x6c>)
 8008f68:	edc3 7a00 	vstr	s15, [r3]
}
 8008f6c:	bf00      	nop
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	4b189680 	.word	0x4b189680
 8008f78:	3c8efa35 	.word	0x3c8efa35
 8008f7c:	20000028 	.word	0x20000028

08008f80 <GPS_set_next_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Sets the waypoint to navigate, reset neccessary variables and calculate initial values
//
void GPS_set_next_wp(int32_t *lat, int32_t *lon)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af02      	add	r7, sp, #8
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
    GPS_WP[LAT] = *lat;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a19      	ldr	r2, [pc, #100]	; (8008ff4 <GPS_set_next_wp+0x74>)
 8008f90:	6013      	str	r3, [r2, #0]
    GPS_WP[LON] = *lon;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a17      	ldr	r2, [pc, #92]	; (8008ff4 <GPS_set_next_wp+0x74>)
 8008f98:	6053      	str	r3, [r2, #4]

    GPS_calc_longitude_scaling(*lat);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7ff ffb6 	bl	8008f10 <GPS_calc_longitude_scaling>
    if (f.CRUISE_MODE)
 8008fa4:	4b14      	ldr	r3, [pc, #80]	; (8008ff8 <GPS_set_next_wp+0x78>)
 8008fa6:	7d1b      	ldrb	r3, [r3, #20]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <GPS_set_next_wp+0x30>
        fw_FlyTo();  // PatrikE CruiseMode version
 8008fac:	f7fe f8ac 	bl	8007108 <fw_FlyTo>

    GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON], &wp_distance, &target_bearing);
 8008fb0:	4b12      	ldr	r3, [pc, #72]	; (8008ffc <GPS_set_next_wp+0x7c>)
 8008fb2:	9301      	str	r3, [sp, #4]
 8008fb4:	4b12      	ldr	r3, [pc, #72]	; (8009000 <GPS_set_next_wp+0x80>)
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	4b12      	ldr	r3, [pc, #72]	; (8009004 <GPS_set_next_wp+0x84>)
 8008fba:	4a0e      	ldr	r2, [pc, #56]	; (8008ff4 <GPS_set_next_wp+0x74>)
 8008fbc:	4912      	ldr	r1, [pc, #72]	; (8009008 <GPS_set_next_wp+0x88>)
 8008fbe:	4813      	ldr	r0, [pc, #76]	; (800900c <GPS_set_next_wp+0x8c>)
 8008fc0:	f000 f84e 	bl	8009060 <GPS_distance_cm_bearing>

    nav_bearing = target_bearing;
 8008fc4:	4b0d      	ldr	r3, [pc, #52]	; (8008ffc <GPS_set_next_wp+0x7c>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a11      	ldr	r2, [pc, #68]	; (8009010 <GPS_set_next_wp+0x90>)
 8008fca:	6013      	str	r3, [r2, #0]
    GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON]);
 8008fcc:	4b0e      	ldr	r3, [pc, #56]	; (8009008 <GPS_set_next_wp+0x88>)
 8008fce:	4a0f      	ldr	r2, [pc, #60]	; (800900c <GPS_set_next_wp+0x8c>)
 8008fd0:	490c      	ldr	r1, [pc, #48]	; (8009004 <GPS_set_next_wp+0x84>)
 8008fd2:	4808      	ldr	r0, [pc, #32]	; (8008ff4 <GPS_set_next_wp+0x74>)
 8008fd4:	f000 f934 	bl	8009240 <GPS_calc_location_error>
    original_target_bearing = target_bearing;
 8008fd8:	4b08      	ldr	r3, [pc, #32]	; (8008ffc <GPS_set_next_wp+0x7c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a0d      	ldr	r2, [pc, #52]	; (8009014 <GPS_set_next_wp+0x94>)
 8008fde:	6013      	str	r3, [r2, #0]
    waypoint_speed_gov = cfg.nav_speed_min;
 8008fe0:	4b0d      	ldr	r3, [pc, #52]	; (8009018 <GPS_set_next_wp+0x98>)
 8008fe2:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8008fe6:	b21a      	sxth	r2, r3
 8008fe8:	4b0c      	ldr	r3, [pc, #48]	; (800901c <GPS_set_next_wp+0x9c>)
 8008fea:	801a      	strh	r2, [r3, #0]
}
 8008fec:	bf00      	nop
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	20001684 	.word	0x20001684
 8008ff8:	20001988 	.word	0x20001988
 8008ffc:	2000168c 	.word	0x2000168c
 8009000:	20001698 	.word	0x20001698
 8009004:	20001688 	.word	0x20001688
 8009008:	20001a54 	.word	0x20001a54
 800900c:	20001a50 	.word	0x20001a50
 8009010:	200016ec 	.word	0x200016ec
 8009014:	20001690 	.word	0x20001690
 8009018:	20001128 	.word	0x20001128
 800901c:	2000169c 	.word	0x2000169c

08009020 <check_missed_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Check if we missed the destination somehow
//
static bool check_missed_wp(void)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
    int32_t temp;
    temp = target_bearing - original_target_bearing;
 8009026:	4b0c      	ldr	r3, [pc, #48]	; (8009058 <check_missed_wp+0x38>)
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	4b0c      	ldr	r3, [pc, #48]	; (800905c <check_missed_wp+0x3c>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	1ad3      	subs	r3, r2, r3
 8009030:	607b      	str	r3, [r7, #4]
    temp = wrap_18000(temp);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fb9a 	bl	800976c <wrap_18000>
 8009038:	6078      	str	r0, [r7, #4]
    return (abs(temp) > 10000); // we passed the waypoint by 100 degrees
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	bfb8      	it	lt
 8009040:	425b      	neglt	r3, r3
 8009042:	f242 7210 	movw	r2, #10000	; 0x2710
 8009046:	4293      	cmp	r3, r2
 8009048:	bfcc      	ite	gt
 800904a:	2301      	movgt	r3, #1
 800904c:	2300      	movle	r3, #0
 800904e:	b2db      	uxtb	r3, r3
}
 8009050:	4618      	mov	r0, r3
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	2000168c 	.word	0x2000168c
 800905c:	20001690 	.word	0x20001690

08009060 <GPS_distance_cm_bearing>:

////////////////////////////////////////////////////////////////////////////////////
// Get distance between two points in cm
// Get bearing from pos1 to pos2, returns an 1deg = 100 precision
static void GPS_distance_cm_bearing(int32_t *lat1, int32_t *lon1, int32_t *lat2, int32_t *lon2, int32_t *dist, int32_t *bearing)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	607a      	str	r2, [r7, #4]
 800906c:	603b      	str	r3, [r7, #0]
    float dLat = *lat2 - *lat1; // difference of latitude in 1/10 000 000 degrees
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	ee07 3a90 	vmov	s15, r3
 800907c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009080:	edc7 7a05 	vstr	s15, [r7, #20]
    float dLon = (float)(*lon2 - *lon1) * GPS_scaleLonDown;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	ee07 3a90 	vmov	s15, r3
 8009092:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009096:	4b25      	ldr	r3, [pc, #148]	; (800912c <GPS_distance_cm_bearing+0xcc>)
 8009098:	edd3 7a00 	vldr	s15, [r3]
 800909c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090a0:	edc7 7a04 	vstr	s15, [r7, #16]
    *dist = sqrtf(sq(dLat) + sq(dLon)) * 1.113195f;
 80090a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80090a8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80090ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80090b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80090b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090b8:	eeb0 0a67 	vmov.f32	s0, s15
 80090bc:	f019 fac0 	bl	8022640 <sqrtf>
 80090c0:	eef0 7a40 	vmov.f32	s15, s0
 80090c4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8009130 <GPS_distance_cm_bearing+0xd0>
 80090c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090d0:	ee17 2a90 	vmov	r2, s15
 80090d4:	6a3b      	ldr	r3, [r7, #32]
 80090d6:	601a      	str	r2, [r3, #0]

    *bearing = 9000.0f + atan2f(-dLat, dLon) * 5729.57795f;      // Convert the output radians to 100xdeg
 80090d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80090dc:	eef1 7a67 	vneg.f32	s15, s15
 80090e0:	edd7 0a04 	vldr	s1, [r7, #16]
 80090e4:	eeb0 0a67 	vmov.f32	s0, s15
 80090e8:	f019 fa50 	bl	802258c <atan2f>
 80090ec:	eef0 7a40 	vmov.f32	s15, s0
 80090f0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009134 <GPS_distance_cm_bearing+0xd4>
 80090f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090f8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8009138 <GPS_distance_cm_bearing+0xd8>
 80090fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009100:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009104:	ee17 2a90 	vmov	r2, s15
 8009108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910a:	601a      	str	r2, [r3, #0]
    if (*bearing < 0)
 800910c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	da06      	bge.n	8009122 <GPS_distance_cm_bearing+0xc2>
        *bearing += 36000;
 8009114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 800911c:	33a0      	adds	r3, #160	; 0xa0
 800911e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009120:	6013      	str	r3, [r2, #0]
}
 8009122:	bf00      	nop
 8009124:	3718      	adds	r7, #24
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	20000028 	.word	0x20000028
 8009130:	3f8e7d2c 	.word	0x3f8e7d2c
 8009134:	45b30ca0 	.word	0x45b30ca0
 8009138:	460ca000 	.word	0x460ca000

0800913c <GPS_calc_velocity>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate our current speed vector from gps position data
//
static void GPS_calc_velocity(void)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
    static int32_t last[2] = { 0, 0 };
    static uint8_t init = 0;
    // y_GPS_speed positve = Up
    // x_GPS_speed positve = Right

    if (init) {
 8009142:	4b38      	ldr	r3, [pc, #224]	; (8009224 <GPS_calc_velocity+0xe8>)
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d05b      	beq.n	8009202 <GPS_calc_velocity+0xc6>
        float tmp = 1.0f / dTnav;
 800914a:	4b37      	ldr	r3, [pc, #220]	; (8009228 <GPS_calc_velocity+0xec>)
 800914c:	ed93 7a00 	vldr	s14, [r3]
 8009150:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009158:	edc7 7a01 	vstr	s15, [r7, #4]
        actual_speed[GPS_X] = (float)(GPS_coord[LON] - last[LON]) * GPS_scaleLonDown * tmp;
 800915c:	4b33      	ldr	r3, [pc, #204]	; (800922c <GPS_calc_velocity+0xf0>)
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	4b33      	ldr	r3, [pc, #204]	; (8009230 <GPS_calc_velocity+0xf4>)
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	1ad3      	subs	r3, r2, r3
 8009166:	ee07 3a90 	vmov	s15, r3
 800916a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800916e:	4b31      	ldr	r3, [pc, #196]	; (8009234 <GPS_calc_velocity+0xf8>)
 8009170:	edd3 7a00 	vldr	s15, [r3]
 8009174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009178:	edd7 7a01 	vldr	s15, [r7, #4]
 800917c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009184:	ee17 3a90 	vmov	r3, s15
 8009188:	b21a      	sxth	r2, r3
 800918a:	4b2b      	ldr	r3, [pc, #172]	; (8009238 <GPS_calc_velocity+0xfc>)
 800918c:	805a      	strh	r2, [r3, #2]
        actual_speed[GPS_Y] = (float)(GPS_coord[LAT] - last[LAT]) * tmp;
 800918e:	4b27      	ldr	r3, [pc, #156]	; (800922c <GPS_calc_velocity+0xf0>)
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	4b27      	ldr	r3, [pc, #156]	; (8009230 <GPS_calc_velocity+0xf4>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	ee07 3a90 	vmov	s15, r3
 800919c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80091a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80091a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80091ac:	ee17 3a90 	vmov	r3, s15
 80091b0:	b21a      	sxth	r2, r3
 80091b2:	4b21      	ldr	r3, [pc, #132]	; (8009238 <GPS_calc_velocity+0xfc>)
 80091b4:	801a      	strh	r2, [r3, #0]

        actual_speed[GPS_X] = (actual_speed[GPS_X] + speed_old[GPS_X]) / 2;
 80091b6:	4b20      	ldr	r3, [pc, #128]	; (8009238 <GPS_calc_velocity+0xfc>)
 80091b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80091bc:	461a      	mov	r2, r3
 80091be:	4b1f      	ldr	r3, [pc, #124]	; (800923c <GPS_calc_velocity+0x100>)
 80091c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80091c4:	4413      	add	r3, r2
 80091c6:	0fda      	lsrs	r2, r3, #31
 80091c8:	4413      	add	r3, r2
 80091ca:	105b      	asrs	r3, r3, #1
 80091cc:	b21a      	sxth	r2, r3
 80091ce:	4b1a      	ldr	r3, [pc, #104]	; (8009238 <GPS_calc_velocity+0xfc>)
 80091d0:	805a      	strh	r2, [r3, #2]
        actual_speed[GPS_Y] = (actual_speed[GPS_Y] + speed_old[GPS_Y]) / 2;
 80091d2:	4b19      	ldr	r3, [pc, #100]	; (8009238 <GPS_calc_velocity+0xfc>)
 80091d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091d8:	461a      	mov	r2, r3
 80091da:	4b18      	ldr	r3, [pc, #96]	; (800923c <GPS_calc_velocity+0x100>)
 80091dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091e0:	4413      	add	r3, r2
 80091e2:	0fda      	lsrs	r2, r3, #31
 80091e4:	4413      	add	r3, r2
 80091e6:	105b      	asrs	r3, r3, #1
 80091e8:	b21a      	sxth	r2, r3
 80091ea:	4b13      	ldr	r3, [pc, #76]	; (8009238 <GPS_calc_velocity+0xfc>)
 80091ec:	801a      	strh	r2, [r3, #0]

        speed_old[GPS_X] = actual_speed[GPS_X];
 80091ee:	4b12      	ldr	r3, [pc, #72]	; (8009238 <GPS_calc_velocity+0xfc>)
 80091f0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80091f4:	4b11      	ldr	r3, [pc, #68]	; (800923c <GPS_calc_velocity+0x100>)
 80091f6:	805a      	strh	r2, [r3, #2]
        speed_old[GPS_Y] = actual_speed[GPS_Y];
 80091f8:	4b0f      	ldr	r3, [pc, #60]	; (8009238 <GPS_calc_velocity+0xfc>)
 80091fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80091fe:	4b0f      	ldr	r3, [pc, #60]	; (800923c <GPS_calc_velocity+0x100>)
 8009200:	801a      	strh	r2, [r3, #0]
    }
    init = 1;
 8009202:	4b08      	ldr	r3, [pc, #32]	; (8009224 <GPS_calc_velocity+0xe8>)
 8009204:	2201      	movs	r2, #1
 8009206:	701a      	strb	r2, [r3, #0]

    last[LON] = GPS_coord[LON];
 8009208:	4b08      	ldr	r3, [pc, #32]	; (800922c <GPS_calc_velocity+0xf0>)
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	4a08      	ldr	r2, [pc, #32]	; (8009230 <GPS_calc_velocity+0xf4>)
 800920e:	6053      	str	r3, [r2, #4]
    last[LAT] = GPS_coord[LAT];
 8009210:	4b06      	ldr	r3, [pc, #24]	; (800922c <GPS_calc_velocity+0xf0>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a06      	ldr	r2, [pc, #24]	; (8009230 <GPS_calc_velocity+0xf4>)
 8009216:	6013      	str	r3, [r2, #0]
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr
 8009224:	200016f9 	.word	0x200016f9
 8009228:	20001670 	.word	0x20001670
 800922c:	20001a50 	.word	0x20001a50
 8009230:	200016fc 	.word	0x200016fc
 8009234:	20000028 	.word	0x20000028
 8009238:	20001674 	.word	0x20001674
 800923c:	20001704 	.word	0x20001704

08009240 <GPS_calc_location_error>:
//      1800    = 19.80m = 60 feet
//      3000    = 33m
//      10000   = 111m
//
static void GPS_calc_location_error(int32_t *target_lat, int32_t *target_lng, int32_t *gps_lat, int32_t *gps_lng)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
 800924c:	603b      	str	r3, [r7, #0]
    error[LON] = (float)(*target_lng - *gps_lng) * GPS_scaleLonDown;   // X Error
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	ee07 3a90 	vmov	s15, r3
 800925c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009260:	4b0b      	ldr	r3, [pc, #44]	; (8009290 <GPS_calc_location_error+0x50>)
 8009262:	edd3 7a00 	vldr	s15, [r3]
 8009266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800926a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800926e:	ee17 2a90 	vmov	r2, s15
 8009272:	4b08      	ldr	r3, [pc, #32]	; (8009294 <GPS_calc_location_error+0x54>)
 8009274:	605a      	str	r2, [r3, #4]
    error[LAT] = *target_lat - *gps_lat;        // Y Error
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	4a04      	ldr	r2, [pc, #16]	; (8009294 <GPS_calc_location_error+0x54>)
 8009282:	6013      	str	r3, [r2, #0]
}
 8009284:	bf00      	nop
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr
 8009290:	20000028 	.word	0x20000028
 8009294:	2000167c 	.word	0x2000167c

08009298 <GPS_calc_poshold>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate nav_lat and nav_lon from the x and y error and the speed
//
static void GPS_calc_poshold(void)
{
 8009298:	b590      	push	{r4, r7, lr}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
    int32_t d;
    int32_t target_speed;
    int axis;

    for (axis = 0; axis < 2; axis++) {
 800929e:	2300      	movs	r3, #0
 80092a0:	60bb      	str	r3, [r7, #8]
 80092a2:	e092      	b.n	80093ca <GPS_calc_poshold+0x132>
        target_speed = get_P(error[axis], &posholdPID_PARAM);       // calculate desired speed from lon error
 80092a4:	4a4d      	ldr	r2, [pc, #308]	; (80093dc <GPS_calc_poshold+0x144>)
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092ac:	494c      	ldr	r1, [pc, #304]	; (80093e0 <GPS_calc_poshold+0x148>)
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7ff f990 	bl	80085d4 <get_P>
 80092b4:	6078      	str	r0, [r7, #4]
        rate_error[axis] = target_speed - actual_speed[axis];       // calc the speed error
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	494a      	ldr	r1, [pc, #296]	; (80093e4 <GPS_calc_poshold+0x14c>)
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	b219      	sxth	r1, r3
 80092ca:	4a47      	ldr	r2, [pc, #284]	; (80093e8 <GPS_calc_poshold+0x150>)
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 80092d2:	4a45      	ldr	r2, [pc, #276]	; (80093e8 <GPS_calc_poshold+0x150>)
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80092da:	4944      	ldr	r1, [pc, #272]	; (80093ec <GPS_calc_poshold+0x154>)
 80092dc:	4618      	mov	r0, r3
 80092de:	f7ff f979 	bl	80085d4 <get_P>
 80092e2:	4603      	mov	r3, r0
 80092e4:	b29c      	uxth	r4, r3
                    get_I(rate_error[axis] + error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 80092e6:	4a40      	ldr	r2, [pc, #256]	; (80093e8 <GPS_calc_poshold+0x150>)
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80092ee:	4619      	mov	r1, r3
 80092f0:	4a3a      	ldr	r2, [pc, #232]	; (80093dc <GPS_calc_poshold+0x144>)
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092f8:	18c8      	adds	r0, r1, r3
 80092fa:	68ba      	ldr	r2, [r7, #8]
 80092fc:	4613      	mov	r3, r2
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	4413      	add	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4a3a      	ldr	r2, [pc, #232]	; (80093f0 <GPS_calc_poshold+0x158>)
 8009306:	441a      	add	r2, r3
 8009308:	4b38      	ldr	r3, [pc, #224]	; (80093ec <GPS_calc_poshold+0x154>)
 800930a:	493a      	ldr	r1, [pc, #232]	; (80093f4 <GPS_calc_poshold+0x15c>)
 800930c:	f7ff f97b 	bl	8008606 <get_I>
 8009310:	4603      	mov	r3, r0
        nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 8009312:	b29b      	uxth	r3, r3
 8009314:	4423      	add	r3, r4
 8009316:	b29b      	uxth	r3, r3
 8009318:	b219      	sxth	r1, r3
 800931a:	4a37      	ldr	r2, [pc, #220]	; (80093f8 <GPS_calc_poshold+0x160>)
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        d = get_D(error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 8009322:	4a2e      	ldr	r2, [pc, #184]	; (80093dc <GPS_calc_poshold+0x144>)
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	4613      	mov	r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4413      	add	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4a2e      	ldr	r2, [pc, #184]	; (80093f0 <GPS_calc_poshold+0x158>)
 8009336:	441a      	add	r2, r3
 8009338:	4b2c      	ldr	r3, [pc, #176]	; (80093ec <GPS_calc_poshold+0x154>)
 800933a:	492e      	ldr	r1, [pc, #184]	; (80093f4 <GPS_calc_poshold+0x15c>)
 800933c:	f7ff f9ac 	bl	8008698 <get_D>
 8009340:	60f8      	str	r0, [r7, #12]
        d = constrain(d, -2000, 2000);
 8009342:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009346:	492d      	ldr	r1, [pc, #180]	; (80093fc <GPS_calc_poshold+0x164>)
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f7fa fccf 	bl	8003cec <constrain>
 800934e:	60f8      	str	r0, [r7, #12]

        // get rid of noise
#if defined(GPS_LOW_SPEED_D_FILTER)
        if (abs(actual_speed[axis]) < 50)
 8009350:	4a24      	ldr	r2, [pc, #144]	; (80093e4 <GPS_calc_poshold+0x14c>)
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009358:	2b00      	cmp	r3, #0
 800935a:	bfb8      	it	lt
 800935c:	425b      	neglt	r3, r3
 800935e:	b29b      	uxth	r3, r3
 8009360:	2b31      	cmp	r3, #49	; 0x31
 8009362:	d801      	bhi.n	8009368 <GPS_calc_poshold+0xd0>
            d = 0;
 8009364:	2300      	movs	r3, #0
 8009366:	60fb      	str	r3, [r7, #12]
#endif

        nav[axis] += d;
 8009368:	4a23      	ldr	r2, [pc, #140]	; (80093f8 <GPS_calc_poshold+0x160>)
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009370:	b29a      	uxth	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	b29b      	uxth	r3, r3
 8009376:	4413      	add	r3, r2
 8009378:	b29b      	uxth	r3, r3
 800937a:	b219      	sxth	r1, r3
 800937c:	4a1e      	ldr	r2, [pc, #120]	; (80093f8 <GPS_calc_poshold+0x160>)
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 8009384:	4a1c      	ldr	r2, [pc, #112]	; (80093f8 <GPS_calc_poshold+0x160>)
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800938c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009390:	491b      	ldr	r1, [pc, #108]	; (8009400 <GPS_calc_poshold+0x168>)
 8009392:	4618      	mov	r0, r3
 8009394:	f7fa fcaa 	bl	8003cec <constrain>
 8009398:	4603      	mov	r3, r0
 800939a:	b219      	sxth	r1, r3
 800939c:	4a16      	ldr	r2, [pc, #88]	; (80093f8 <GPS_calc_poshold+0x160>)
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        navPID[axis].integrator = poshold_ratePID[axis].integrator;
 80093a4:	4912      	ldr	r1, [pc, #72]	; (80093f0 <GPS_calc_poshold+0x158>)
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	4613      	mov	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	440b      	add	r3, r1
 80093b2:	6819      	ldr	r1, [r3, #0]
 80093b4:	4813      	ldr	r0, [pc, #76]	; (8009404 <GPS_calc_poshold+0x16c>)
 80093b6:	68ba      	ldr	r2, [r7, #8]
 80093b8:	4613      	mov	r3, r2
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	4413      	add	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4403      	add	r3, r0
 80093c2:	6019      	str	r1, [r3, #0]
    for (axis = 0; axis < 2; axis++) {
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	3301      	adds	r3, #1
 80093c8:	60bb      	str	r3, [r7, #8]
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	f77f af69 	ble.w	80092a4 <GPS_calc_poshold+0xc>
    }
}
 80093d2:	bf00      	nop
 80093d4:	bf00      	nop
 80093d6:	3714      	adds	r7, #20
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd90      	pop	{r4, r7, pc}
 80093dc:	2000167c 	.word	0x2000167c
 80093e0:	200015b8 	.word	0x200015b8
 80093e4:	20001674 	.word	0x20001674
 80093e8:	20001678 	.word	0x20001678
 80093ec:	200015c8 	.word	0x200015c8
 80093f0:	20001620 	.word	0x20001620
 80093f4:	20001670 	.word	0x20001670
 80093f8:	20001a84 	.word	0x20001a84
 80093fc:	fffff830 	.word	0xfffff830
 8009400:	fffff448 	.word	0xfffff448
 8009404:	20001648 	.word	0x20001648

08009408 <GPS_calc_nav_rate>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate the desired nav_lat and nav_lon for distance flying such as RTH
//
static void GPS_calc_nav_rate(int max_speed)
{
 8009408:	b590      	push	{r4, r7, lr}
 800940a:	b087      	sub	sp, #28
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
    float trig[2];
    float temp;
    int axis;

    // push us towards the original track
    GPS_update_crosstrack();
 8009410:	f000 f8cc 	bl	80095ac <GPS_update_crosstrack>

    // nav_bearing includes crosstrack
    temp = (9000l - nav_bearing) * RADX100;
 8009414:	4b5a      	ldr	r3, [pc, #360]	; (8009580 <GPS_calc_nav_rate+0x178>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f5c3 530c 	rsb	r3, r3, #8960	; 0x2300
 800941c:	3328      	adds	r3, #40	; 0x28
 800941e:	ee07 3a90 	vmov	s15, r3
 8009422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009426:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8009584 <GPS_calc_nav_rate+0x17c>
 800942a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800942e:	edc7 7a04 	vstr	s15, [r7, #16]
    trig[GPS_X] = cosf(temp);
 8009432:	ed97 0a04 	vldr	s0, [r7, #16]
 8009436:	f018 ffb3 	bl	80223a0 <cosf>
 800943a:	eef0 7a40 	vmov.f32	s15, s0
 800943e:	edc7 7a03 	vstr	s15, [r7, #12]
    trig[GPS_Y] = sinf(temp);
 8009442:	ed97 0a04 	vldr	s0, [r7, #16]
 8009446:	f019 f82f 	bl	80224a8 <sinf>
 800944a:	eef0 7a40 	vmov.f32	s15, s0
 800944e:	edc7 7a02 	vstr	s15, [r7, #8]

    for (axis = 0; axis < 2; axis++) {
 8009452:	2300      	movs	r3, #0
 8009454:	617b      	str	r3, [r7, #20]
 8009456:	e08a      	b.n	800956e <GPS_calc_nav_rate+0x166>
        rate_error[axis] = (trig[axis] * max_speed) - actual_speed[axis];
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	3318      	adds	r3, #24
 800945e:	443b      	add	r3, r7
 8009460:	3b10      	subs	r3, #16
 8009462:	ed93 7a00 	vldr	s14, [r3]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	ee07 3a90 	vmov	s15, r3
 800946c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009470:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009474:	4a44      	ldr	r2, [pc, #272]	; (8009588 <GPS_calc_nav_rate+0x180>)
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800947c:	ee07 3a90 	vmov	s15, r3
 8009480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009488:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800948c:	ee17 3a90 	vmov	r3, s15
 8009490:	b219      	sxth	r1, r3
 8009492:	4a3e      	ldr	r2, [pc, #248]	; (800958c <GPS_calc_nav_rate+0x184>)
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        rate_error[axis] = constrain(rate_error[axis], -1000, 1000);
 800949a:	4a3c      	ldr	r2, [pc, #240]	; (800958c <GPS_calc_nav_rate+0x184>)
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80094a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80094a6:	493a      	ldr	r1, [pc, #232]	; (8009590 <GPS_calc_nav_rate+0x188>)
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7fa fc1f 	bl	8003cec <constrain>
 80094ae:	4603      	mov	r3, r0
 80094b0:	b219      	sxth	r1, r3
 80094b2:	4a36      	ldr	r2, [pc, #216]	; (800958c <GPS_calc_nav_rate+0x184>)
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        // P + I + D
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 80094ba:	4a34      	ldr	r2, [pc, #208]	; (800958c <GPS_calc_nav_rate+0x184>)
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80094c2:	4934      	ldr	r1, [pc, #208]	; (8009594 <GPS_calc_nav_rate+0x18c>)
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7ff f885 	bl	80085d4 <get_P>
 80094ca:	4603      	mov	r3, r0
 80094cc:	b29c      	uxth	r4, r3
                    get_I(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM) +
 80094ce:	4a2f      	ldr	r2, [pc, #188]	; (800958c <GPS_calc_nav_rate+0x184>)
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80094d6:	4618      	mov	r0, r3
 80094d8:	697a      	ldr	r2, [r7, #20]
 80094da:	4613      	mov	r3, r2
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	4413      	add	r3, r2
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4a2d      	ldr	r2, [pc, #180]	; (8009598 <GPS_calc_nav_rate+0x190>)
 80094e4:	441a      	add	r2, r3
 80094e6:	4b2b      	ldr	r3, [pc, #172]	; (8009594 <GPS_calc_nav_rate+0x18c>)
 80094e8:	492c      	ldr	r1, [pc, #176]	; (800959c <GPS_calc_nav_rate+0x194>)
 80094ea:	f7ff f88c 	bl	8008606 <get_I>
 80094ee:	4603      	mov	r3, r0
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	4423      	add	r3, r4
 80094f4:	b29c      	uxth	r4, r3
                    get_D(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM);
 80094f6:	4a25      	ldr	r2, [pc, #148]	; (800958c <GPS_calc_nav_rate+0x184>)
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80094fe:	4618      	mov	r0, r3
 8009500:	697a      	ldr	r2, [r7, #20]
 8009502:	4613      	mov	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4413      	add	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4a23      	ldr	r2, [pc, #140]	; (8009598 <GPS_calc_nav_rate+0x190>)
 800950c:	441a      	add	r2, r3
 800950e:	4b21      	ldr	r3, [pc, #132]	; (8009594 <GPS_calc_nav_rate+0x18c>)
 8009510:	4922      	ldr	r1, [pc, #136]	; (800959c <GPS_calc_nav_rate+0x194>)
 8009512:	f7ff f8c1 	bl	8008698 <get_D>
 8009516:	4603      	mov	r3, r0
                    get_I(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM) +
 8009518:	b29b      	uxth	r3, r3
 800951a:	4423      	add	r3, r4
 800951c:	b29b      	uxth	r3, r3
 800951e:	b219      	sxth	r1, r3
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 8009520:	4a1f      	ldr	r2, [pc, #124]	; (80095a0 <GPS_calc_nav_rate+0x198>)
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 8009528:	4a1d      	ldr	r2, [pc, #116]	; (80095a0 <GPS_calc_nav_rate+0x198>)
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009530:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009534:	491b      	ldr	r1, [pc, #108]	; (80095a4 <GPS_calc_nav_rate+0x19c>)
 8009536:	4618      	mov	r0, r3
 8009538:	f7fa fbd8 	bl	8003cec <constrain>
 800953c:	4603      	mov	r3, r0
 800953e:	b219      	sxth	r1, r3
 8009540:	4a17      	ldr	r2, [pc, #92]	; (80095a0 <GPS_calc_nav_rate+0x198>)
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        poshold_ratePID[axis].integrator = navPID[axis].integrator;
 8009548:	4913      	ldr	r1, [pc, #76]	; (8009598 <GPS_calc_nav_rate+0x190>)
 800954a:	697a      	ldr	r2, [r7, #20]
 800954c:	4613      	mov	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	440b      	add	r3, r1
 8009556:	6819      	ldr	r1, [r3, #0]
 8009558:	4813      	ldr	r0, [pc, #76]	; (80095a8 <GPS_calc_nav_rate+0x1a0>)
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	4613      	mov	r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4403      	add	r3, r0
 8009566:	6019      	str	r1, [r3, #0]
    for (axis = 0; axis < 2; axis++) {
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	3301      	adds	r3, #1
 800956c:	617b      	str	r3, [r7, #20]
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	2b01      	cmp	r3, #1
 8009572:	f77f af71 	ble.w	8009458 <GPS_calc_nav_rate+0x50>
    }
}
 8009576:	bf00      	nop
 8009578:	bf00      	nop
 800957a:	371c      	adds	r7, #28
 800957c:	46bd      	mov	sp, r7
 800957e:	bd90      	pop	{r4, r7, pc}
 8009580:	200016ec 	.word	0x200016ec
 8009584:	393702d3 	.word	0x393702d3
 8009588:	20001674 	.word	0x20001674
 800958c:	20001678 	.word	0x20001678
 8009590:	fffffc18 	.word	0xfffffc18
 8009594:	200015d8 	.word	0x200015d8
 8009598:	20001648 	.word	0x20001648
 800959c:	20001670 	.word	0x20001670
 80095a0:	20001a84 	.word	0x20001a84
 80095a4:	fffff448 	.word	0xfffff448
 80095a8:	20001620 	.word	0x20001620

080095ac <GPS_update_crosstrack>:
////////////////////////////////////////////////////////////////////////////////////
// Calculating cross track error, this tries to keep the copter on a direct line
// when flying to a waypoint.
//
static void GPS_update_crosstrack(void)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
    if (abs(wrap_18000(target_bearing - original_target_bearing)) < 4500) {     // If we are too far off or too close we don't do track following
 80095b2:	4b38      	ldr	r3, [pc, #224]	; (8009694 <GPS_update_crosstrack+0xe8>)
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	4b38      	ldr	r3, [pc, #224]	; (8009698 <GPS_update_crosstrack+0xec>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	4618      	mov	r0, r3
 80095be:	f000 f8d5 	bl	800976c <wrap_18000>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	dd10      	ble.n	80095ea <GPS_update_crosstrack+0x3e>
 80095c8:	4b32      	ldr	r3, [pc, #200]	; (8009694 <GPS_update_crosstrack+0xe8>)
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	4b32      	ldr	r3, [pc, #200]	; (8009698 <GPS_update_crosstrack+0xec>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	1ad3      	subs	r3, r2, r3
 80095d2:	4618      	mov	r0, r3
 80095d4:	f000 f8ca 	bl	800976c <wrap_18000>
 80095d8:	4603      	mov	r3, r0
 80095da:	f241 1293 	movw	r2, #4499	; 0x1193
 80095de:	4293      	cmp	r3, r2
 80095e0:	bfd4      	ite	le
 80095e2:	2301      	movle	r3, #1
 80095e4:	2300      	movgt	r3, #0
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	e00e      	b.n	8009608 <GPS_update_crosstrack+0x5c>
 80095ea:	4b2a      	ldr	r3, [pc, #168]	; (8009694 <GPS_update_crosstrack+0xe8>)
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	4b2a      	ldr	r3, [pc, #168]	; (8009698 <GPS_update_crosstrack+0xec>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	4618      	mov	r0, r3
 80095f6:	f000 f8b9 	bl	800976c <wrap_18000>
 80095fa:	4603      	mov	r3, r0
 80095fc:	4a27      	ldr	r2, [pc, #156]	; (800969c <GPS_update_crosstrack+0xf0>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	bfac      	ite	ge
 8009602:	2301      	movge	r3, #1
 8009604:	2300      	movlt	r3, #0
 8009606:	b2db      	uxtb	r3, r3
 8009608:	2b00      	cmp	r3, #0
 800960a:	d03b      	beq.n	8009684 <GPS_update_crosstrack+0xd8>
        float temp = (target_bearing - original_target_bearing) * RADX100;
 800960c:	4b21      	ldr	r3, [pc, #132]	; (8009694 <GPS_update_crosstrack+0xe8>)
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	4b21      	ldr	r3, [pc, #132]	; (8009698 <GPS_update_crosstrack+0xec>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	ee07 3a90 	vmov	s15, r3
 800961a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800961e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80096a0 <GPS_update_crosstrack+0xf4>
 8009622:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009626:	edc7 7a01 	vstr	s15, [r7, #4]
        crosstrack_error = sinf(temp) * (wp_distance * CROSSTRACK_GAIN); // Meters we are off track line
 800962a:	ed97 0a01 	vldr	s0, [r7, #4]
 800962e:	f018 ff3b 	bl	80224a8 <sinf>
 8009632:	eeb0 7a40 	vmov.f32	s14, s0
 8009636:	4b1b      	ldr	r3, [pc, #108]	; (80096a4 <GPS_update_crosstrack+0xf8>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	ee07 3a90 	vmov	s15, r3
 800963e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800964a:	ee17 3a90 	vmov	r3, s15
 800964e:	b21a      	sxth	r2, r3
 8009650:	4b15      	ldr	r3, [pc, #84]	; (80096a8 <GPS_update_crosstrack+0xfc>)
 8009652:	801a      	strh	r2, [r3, #0]
        nav_bearing = target_bearing + constrain(crosstrack_error, -3000, 3000);
 8009654:	4b14      	ldr	r3, [pc, #80]	; (80096a8 <GPS_update_crosstrack+0xfc>)
 8009656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800965a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800965e:	4913      	ldr	r1, [pc, #76]	; (80096ac <GPS_update_crosstrack+0x100>)
 8009660:	4618      	mov	r0, r3
 8009662:	f7fa fb43 	bl	8003cec <constrain>
 8009666:	4602      	mov	r2, r0
 8009668:	4b0a      	ldr	r3, [pc, #40]	; (8009694 <GPS_update_crosstrack+0xe8>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4413      	add	r3, r2
 800966e:	4a10      	ldr	r2, [pc, #64]	; (80096b0 <GPS_update_crosstrack+0x104>)
 8009670:	6013      	str	r3, [r2, #0]
        nav_bearing = wrap_36000(nav_bearing);
 8009672:	4b0f      	ldr	r3, [pc, #60]	; (80096b0 <GPS_update_crosstrack+0x104>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4618      	mov	r0, r3
 8009678:	f000 f898 	bl	80097ac <wrap_36000>
 800967c:	4603      	mov	r3, r0
 800967e:	4a0c      	ldr	r2, [pc, #48]	; (80096b0 <GPS_update_crosstrack+0x104>)
 8009680:	6013      	str	r3, [r2, #0]
    } else {
        nav_bearing = target_bearing;
    }
}
 8009682:	e003      	b.n	800968c <GPS_update_crosstrack+0xe0>
        nav_bearing = target_bearing;
 8009684:	4b03      	ldr	r3, [pc, #12]	; (8009694 <GPS_update_crosstrack+0xe8>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a09      	ldr	r2, [pc, #36]	; (80096b0 <GPS_update_crosstrack+0x104>)
 800968a:	6013      	str	r3, [r2, #0]
}
 800968c:	bf00      	nop
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	2000168c 	.word	0x2000168c
 8009698:	20001690 	.word	0x20001690
 800969c:	ffffee6d 	.word	0xffffee6d
 80096a0:	393702d3 	.word	0x393702d3
 80096a4:	20001698 	.word	0x20001698
 80096a8:	20001694 	.word	0x20001694
 80096ac:	fffff448 	.word	0xfffff448
 80096b0:	200016ec 	.word	0x200016ec

080096b4 <GPS_calc_desired_speed>:
//                100  |  200     300     400cm/s
//                 |                                        +|+
//                 |< we should slow to 1.5 m/s as we hit the target
//
static int16_t GPS_calc_desired_speed(int16_t max_speed, bool _slow)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	4603      	mov	r3, r0
 80096bc:	460a      	mov	r2, r1
 80096be:	80fb      	strh	r3, [r7, #6]
 80096c0:	4613      	mov	r3, r2
 80096c2:	717b      	strb	r3, [r7, #5]
    // max_speed is default 400 or 4m/s
    if (_slow) {
 80096c4:	797b      	ldrb	r3, [r7, #5]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00c      	beq.n	80096e4 <GPS_calc_desired_speed+0x30>
        max_speed = min(max_speed, wp_distance / 2);
 80096ca:	4b23      	ldr	r3, [pc, #140]	; (8009758 <GPS_calc_desired_speed+0xa4>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	0fda      	lsrs	r2, r3, #31
 80096d0:	4413      	add	r3, r2
 80096d2:	105b      	asrs	r3, r3, #1
 80096d4:	461a      	mov	r2, r3
 80096d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80096da:	4293      	cmp	r3, r2
 80096dc:	bfa8      	it	ge
 80096de:	4613      	movge	r3, r2
 80096e0:	80fb      	strh	r3, [r7, #6]
 80096e2:	e011      	b.n	8009708 <GPS_calc_desired_speed+0x54>
    } else {
        max_speed = min(max_speed, wp_distance);
 80096e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80096e8:	4b1b      	ldr	r3, [pc, #108]	; (8009758 <GPS_calc_desired_speed+0xa4>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4293      	cmp	r3, r2
 80096ee:	bfa8      	it	ge
 80096f0:	4613      	movge	r3, r2
 80096f2:	80fb      	strh	r3, [r7, #6]
        max_speed = max(max_speed, cfg.nav_speed_min);      // go at least 100cm/s
 80096f4:	4b19      	ldr	r3, [pc, #100]	; (800975c <GPS_calc_desired_speed+0xa8>)
 80096f6:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80096fa:	461a      	mov	r2, r3
 80096fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009700:	4293      	cmp	r3, r2
 8009702:	bfb8      	it	lt
 8009704:	4613      	movlt	r3, r2
 8009706:	80fb      	strh	r3, [r7, #6]
    }

    // limit the ramp up of the speed
    // waypoint_speed_gov is reset to 0 at each new WP command
    if (max_speed > waypoint_speed_gov) {
 8009708:	4b15      	ldr	r3, [pc, #84]	; (8009760 <GPS_calc_desired_speed+0xac>)
 800970a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800970e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009712:	429a      	cmp	r2, r3
 8009714:	dd17      	ble.n	8009746 <GPS_calc_desired_speed+0x92>
        waypoint_speed_gov += (int)(100.0f * dTnav);    // increase at .5/ms
 8009716:	4b13      	ldr	r3, [pc, #76]	; (8009764 <GPS_calc_desired_speed+0xb0>)
 8009718:	edd3 7a00 	vldr	s15, [r3]
 800971c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8009768 <GPS_calc_desired_speed+0xb4>
 8009720:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009728:	ee17 3a90 	vmov	r3, s15
 800972c:	b29a      	uxth	r2, r3
 800972e:	4b0c      	ldr	r3, [pc, #48]	; (8009760 <GPS_calc_desired_speed+0xac>)
 8009730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009734:	b29b      	uxth	r3, r3
 8009736:	4413      	add	r3, r2
 8009738:	b29b      	uxth	r3, r3
 800973a:	b21a      	sxth	r2, r3
 800973c:	4b08      	ldr	r3, [pc, #32]	; (8009760 <GPS_calc_desired_speed+0xac>)
 800973e:	801a      	strh	r2, [r3, #0]
        max_speed = waypoint_speed_gov;
 8009740:	4b07      	ldr	r3, [pc, #28]	; (8009760 <GPS_calc_desired_speed+0xac>)
 8009742:	881b      	ldrh	r3, [r3, #0]
 8009744:	80fb      	strh	r3, [r7, #6]
    }
    return max_speed;
 8009746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800974a:	4618      	mov	r0, r3
 800974c:	370c      	adds	r7, #12
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	20001698 	.word	0x20001698
 800975c:	20001128 	.word	0x20001128
 8009760:	2000169c 	.word	0x2000169c
 8009764:	20001670 	.word	0x20001670
 8009768:	42c80000 	.word	0x42c80000

0800976c <wrap_18000>:

////////////////////////////////////////////////////////////////////////////////////
// Utilities
//
int32_t wrap_18000(int32_t err)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
    if (err > 18000)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f244 6250 	movw	r2, #18000	; 0x4650
 800977a:	4293      	cmp	r3, r2
 800977c:	dd04      	ble.n	8009788 <wrap_18000+0x1c>
        err -= 36000;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f5a3 430c 	sub.w	r3, r3, #35840	; 0x8c00
 8009784:	3ba0      	subs	r3, #160	; 0xa0
 8009786:	607b      	str	r3, [r7, #4]
    if (err < -18000)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a07      	ldr	r2, [pc, #28]	; (80097a8 <wrap_18000+0x3c>)
 800978c:	4293      	cmp	r3, r2
 800978e:	da04      	bge.n	800979a <wrap_18000+0x2e>
        err += 36000;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8009796:	33a0      	adds	r3, #160	; 0xa0
 8009798:	607b      	str	r3, [r7, #4]
    return err;
 800979a:	687b      	ldr	r3, [r7, #4]
}
 800979c:	4618      	mov	r0, r3
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr
 80097a8:	ffffb9b0 	.word	0xffffb9b0

080097ac <wrap_36000>:

static int32_t wrap_36000(int32_t deg)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
    if (deg > 36000)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80097ba:	4293      	cmp	r3, r2
 80097bc:	dd04      	ble.n	80097c8 <wrap_36000+0x1c>
        deg -= 36000;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f5a3 430c 	sub.w	r3, r3, #35840	; 0x8c00
 80097c4:	3ba0      	subs	r3, #160	; 0xa0
 80097c6:	607b      	str	r3, [r7, #4]
    if (deg < 0)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	da04      	bge.n	80097d8 <wrap_36000+0x2c>
        deg += 36000;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80097d4:	33a0      	adds	r3, #160	; 0xa0
 80097d6:	607b      	str	r3, [r7, #4]
    return deg;
 80097d8:	687b      	ldr	r3, [r7, #4]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	370c      	adds	r7, #12
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
	...

080097e8 <imuInit>:
float anglerad[2] = { 0.0f, 0.0f };    // absolute angle inclination in radians

static void getEstimatedAttitude(void);

void imuInit(void)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	ed2d 8b02 	vpush	{d8}
 80097ee:	af00      	add	r7, sp, #0
    smallAngle = lrintf(acc_1G * cosf(RAD * cfg.small_angle));
 80097f0:	4b45      	ldr	r3, [pc, #276]	; (8009908 <imuInit+0x120>)
 80097f2:	881b      	ldrh	r3, [r3, #0]
 80097f4:	ee07 3a90 	vmov	s15, r3
 80097f8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80097fc:	4b43      	ldr	r3, [pc, #268]	; (800990c <imuInit+0x124>)
 80097fe:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009802:	4618      	mov	r0, r3
 8009804:	f7f6 fe4c 	bl	80004a0 <__aeabi_i2d>
 8009808:	a339      	add	r3, pc, #228	; (adr r3, 80098f0 <imuInit+0x108>)
 800980a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980e:	f7f6 feb1 	bl	8000574 <__aeabi_dmul>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	4610      	mov	r0, r2
 8009818:	4619      	mov	r1, r3
 800981a:	f7f7 f98d 	bl	8000b38 <__aeabi_d2f>
 800981e:	4603      	mov	r3, r0
 8009820:	ee00 3a10 	vmov	s0, r3
 8009824:	f018 fdbc 	bl	80223a0 <cosf>
 8009828:	eef0 7a40 	vmov.f32	s15, s0
 800982c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8009830:	eeb0 0a67 	vmov.f32	s0, s15
 8009834:	f018 fdf8 	bl	8022428 <lrintf>
 8009838:	4603      	mov	r3, r0
 800983a:	b21a      	sxth	r2, r3
 800983c:	4b34      	ldr	r3, [pc, #208]	; (8009910 <imuInit+0x128>)
 800983e:	801a      	strh	r2, [r3, #0]
    accVelScale = 9.80665f / acc_1G / 10000.0f;
 8009840:	4b31      	ldr	r3, [pc, #196]	; (8009908 <imuInit+0x120>)
 8009842:	881b      	ldrh	r3, [r3, #0]
 8009844:	ee07 3a90 	vmov	s15, r3
 8009848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800984c:	eddf 6a31 	vldr	s13, [pc, #196]	; 8009914 <imuInit+0x12c>
 8009850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009854:	eddf 6a30 	vldr	s13, [pc, #192]	; 8009918 <imuInit+0x130>
 8009858:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800985c:	4b2f      	ldr	r3, [pc, #188]	; (800991c <imuInit+0x134>)
 800985e:	edc3 7a00 	vstr	s15, [r3]
    throttleAngleScale = (1800.0f / M_PI) * (900.0f / cfg.throttle_correction_angle);
 8009862:	4b2a      	ldr	r3, [pc, #168]	; (800990c <imuInit+0x124>)
 8009864:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8009868:	ee07 3a90 	vmov	s15, r3
 800986c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009870:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8009920 <imuInit+0x138>
 8009874:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009878:	ee16 0a90 	vmov	r0, s13
 800987c:	f7f6 fe22 	bl	80004c4 <__aeabi_f2d>
 8009880:	a31d      	add	r3, pc, #116	; (adr r3, 80098f8 <imuInit+0x110>)
 8009882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009886:	f7f6 fe75 	bl	8000574 <__aeabi_dmul>
 800988a:	4602      	mov	r2, r0
 800988c:	460b      	mov	r3, r1
 800988e:	4610      	mov	r0, r2
 8009890:	4619      	mov	r1, r3
 8009892:	f7f7 f951 	bl	8000b38 <__aeabi_d2f>
 8009896:	4603      	mov	r3, r0
 8009898:	4a22      	ldr	r2, [pc, #136]	; (8009924 <imuInit+0x13c>)
 800989a:	6013      	str	r3, [r2, #0]

    fc_acc = 0.5f / (M_PI * cfg.accz_lpf_cutoff); // calculate RC time constant used in the accZ lpf
 800989c:	4b1b      	ldr	r3, [pc, #108]	; (800990c <imuInit+0x124>)
 800989e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7f6 fe0f 	bl	80004c4 <__aeabi_f2d>
 80098a6:	a316      	add	r3, pc, #88	; (adr r3, 8009900 <imuInit+0x118>)
 80098a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ac:	f7f6 fe62 	bl	8000574 <__aeabi_dmul>
 80098b0:	4602      	mov	r2, r0
 80098b2:	460b      	mov	r3, r1
 80098b4:	f04f 0000 	mov.w	r0, #0
 80098b8:	491b      	ldr	r1, [pc, #108]	; (8009928 <imuInit+0x140>)
 80098ba:	f7f6 ff85 	bl	80007c8 <__aeabi_ddiv>
 80098be:	4602      	mov	r2, r0
 80098c0:	460b      	mov	r3, r1
 80098c2:	4610      	mov	r0, r2
 80098c4:	4619      	mov	r1, r3
 80098c6:	f7f7 f937 	bl	8000b38 <__aeabi_d2f>
 80098ca:	4603      	mov	r3, r0
 80098cc:	4a17      	ldr	r2, [pc, #92]	; (800992c <imuInit+0x144>)
 80098ce:	6013      	str	r3, [r2, #0]

#ifdef MAG
    // if mag sensor is enabled, use it
    if (sensors(SENSOR_MAG))
 80098d0:	2008      	movs	r0, #8
 80098d2:	f7fd fb41 	bl	8006f58 <sensors>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d001      	beq.n	80098e0 <imuInit+0xf8>
        Mag_init();
 80098dc:	f005 fa64 	bl	800eda8 <Mag_init>
#endif
}
 80098e0:	bf00      	nop
 80098e2:	46bd      	mov	sp, r7
 80098e4:	ecbd 8b02 	vpop	{d8}
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	f3af 8000 	nop.w
 80098f0:	a2529d39 	.word	0xa2529d39
 80098f4:	3f91df46 	.word	0x3f91df46
 80098f8:	907e593b 	.word	0x907e593b
 80098fc:	4081e7a9 	.word	0x4081e7a9
 8009900:	54442d18 	.word	0x54442d18
 8009904:	400921fb 	.word	0x400921fb
 8009908:	2000005a 	.word	0x2000005a
 800990c:	20001128 	.word	0x20001128
 8009910:	2000173c 	.word	0x2000173c
 8009914:	411ce80a 	.word	0x411ce80a
 8009918:	461c4000 	.word	0x461c4000
 800991c:	20001774 	.word	0x20001774
 8009920:	44610000 	.word	0x44610000
 8009924:	20001778 	.word	0x20001778
 8009928:	3fe00000 	.word	0x3fe00000
 800992c:	2000177c 	.word	0x2000177c

08009930 <computeIMU>:

int computeIMU(int step)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
    static int16_t gyroYawSmooth = 0;

	switch (step) {
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b02      	cmp	r3, #2
 800993c:	d02c      	beq.n	8009998 <computeIMU+0x68>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2b02      	cmp	r3, #2
 8009942:	dc2d      	bgt.n	80099a0 <computeIMU+0x70>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d003      	beq.n	8009952 <computeIMU+0x22>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d01a      	beq.n	8009986 <computeIMU+0x56>
 8009950:	e026      	b.n	80099a0 <computeIMU+0x70>
	case 0:
		if (Gyro_getADC()) {
 8009952:	f005 fa15 	bl	800ed80 <Gyro_getADC>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d012      	beq.n	8009982 <computeIMU+0x52>
			if (sensors(SENSOR_ACC)) return 1;
 800995c:	2002      	movs	r0, #2
 800995e:	f7fd fafb 	bl	8006f58 <sensors>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d001      	beq.n	800996c <computeIMU+0x3c>
 8009968:	2301      	movs	r3, #1
 800996a:	e043      	b.n	80099f4 <computeIMU+0xc4>

			accADC[X] = 0;
 800996c:	4b23      	ldr	r3, [pc, #140]	; (80099fc <computeIMU+0xcc>)
 800996e:	2200      	movs	r2, #0
 8009970:	801a      	strh	r2, [r3, #0]
			accADC[Y] = 0;
 8009972:	4b22      	ldr	r3, [pc, #136]	; (80099fc <computeIMU+0xcc>)
 8009974:	2200      	movs	r2, #0
 8009976:	805a      	strh	r2, [r3, #2]
			accADC[Z] = 0;
 8009978:	4b20      	ldr	r3, [pc, #128]	; (80099fc <computeIMU+0xcc>)
 800997a:	2200      	movs	r2, #0
 800997c:	809a      	strh	r2, [r3, #4]
			return 3;
 800997e:	2303      	movs	r3, #3
 8009980:	e038      	b.n	80099f4 <computeIMU+0xc4>
		}
		return step;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	e036      	b.n	80099f4 <computeIMU+0xc4>

	case 1:
		return ACC_getADC() ? 2 : step;
 8009986:	f004 ffe1 	bl	800e94c <ACC_getADC>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d101      	bne.n	8009994 <computeIMU+0x64>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	e02f      	b.n	80099f4 <computeIMU+0xc4>
 8009994:	2302      	movs	r3, #2
 8009996:	e02d      	b.n	80099f4 <computeIMU+0xc4>

	case 2:
		getEstimatedAttitude();
 8009998:	f000 fbba 	bl	800a110 <getEstimatedAttitude>
		return 3;
 800999c:	2303      	movs	r3, #3
 800999e:	e029      	b.n	80099f4 <computeIMU+0xc4>
	}

    if (mcfg.mixerConfiguration == MULTITYPE_TRI) {
 80099a0:	4b17      	ldr	r3, [pc, #92]	; (8009a00 <computeIMU+0xd0>)
 80099a2:	795b      	ldrb	r3, [r3, #5]
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d115      	bne.n	80099d4 <computeIMU+0xa4>
        gyroData[YAW] = (gyroYawSmooth * 2 + gyroADC[YAW]) / 3;
 80099a8:	4b16      	ldr	r3, [pc, #88]	; (8009a04 <computeIMU+0xd4>)
 80099aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099ae:	005b      	lsls	r3, r3, #1
 80099b0:	4a15      	ldr	r2, [pc, #84]	; (8009a08 <computeIMU+0xd8>)
 80099b2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80099b6:	4413      	add	r3, r2
 80099b8:	4a14      	ldr	r2, [pc, #80]	; (8009a0c <computeIMU+0xdc>)
 80099ba:	fb82 1203 	smull	r1, r2, r2, r3
 80099be:	17db      	asrs	r3, r3, #31
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	b21a      	sxth	r2, r3
 80099c4:	4b12      	ldr	r3, [pc, #72]	; (8009a10 <computeIMU+0xe0>)
 80099c6:	809a      	strh	r2, [r3, #4]
        gyroYawSmooth = gyroData[YAW];
 80099c8:	4b11      	ldr	r3, [pc, #68]	; (8009a10 <computeIMU+0xe0>)
 80099ca:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80099ce:	4b0d      	ldr	r3, [pc, #52]	; (8009a04 <computeIMU+0xd4>)
 80099d0:	801a      	strh	r2, [r3, #0]
 80099d2:	e004      	b.n	80099de <computeIMU+0xae>
    } else {
        gyroData[YAW] = gyroADC[YAW];
 80099d4:	4b0c      	ldr	r3, [pc, #48]	; (8009a08 <computeIMU+0xd8>)
 80099d6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80099da:	4b0d      	ldr	r3, [pc, #52]	; (8009a10 <computeIMU+0xe0>)
 80099dc:	809a      	strh	r2, [r3, #4]
    }
    gyroData[ROLL] = gyroADC[ROLL];
 80099de:	4b0a      	ldr	r3, [pc, #40]	; (8009a08 <computeIMU+0xd8>)
 80099e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099e4:	4b0a      	ldr	r3, [pc, #40]	; (8009a10 <computeIMU+0xe0>)
 80099e6:	801a      	strh	r2, [r3, #0]
    gyroData[PITCH] = gyroADC[PITCH];
 80099e8:	4b07      	ldr	r3, [pc, #28]	; (8009a08 <computeIMU+0xd8>)
 80099ea:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80099ee:	4b08      	ldr	r3, [pc, #32]	; (8009a10 <computeIMU+0xe0>)
 80099f0:	805a      	strh	r2, [r3, #2]
	return 4;
 80099f2:	2304      	movs	r3, #4
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	20001710 	.word	0x20001710
 8009a00:	20000bbc 	.word	0x20000bbc
 8009a04:	200017a8 	.word	0x200017a8
 8009a08:	20001708 	.word	0x20001708
 8009a0c:	55555556 	.word	0x55555556
 8009a10:	20001780 	.word	0x20001780

08009a14 <normalizeV>:

t_fp_vector EstG;

// Normalize a vector
void normalizeV(struct fp_vector *src, struct fp_vector *dest)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
    float length;

    length = sqrtf(src->X * src->X + src->Y * src->Y + src->Z * src->Z);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	ed93 7a00 	vldr	s14, [r3]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	edd3 7a00 	vldr	s15, [r3]
 8009a2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	edd3 6a01 	vldr	s13, [r3, #4]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	edd3 7a01 	vldr	s15, [r3, #4]
 8009a3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	edd3 6a02 	vldr	s13, [r3, #8]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8009a4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a56:	eeb0 0a67 	vmov.f32	s0, s15
 8009a5a:	f018 fdf1 	bl	8022640 <sqrtf>
 8009a5e:	ed87 0a03 	vstr	s0, [r7, #12]
    if (length != 0) {
 8009a62:	edd7 7a03 	vldr	s15, [r7, #12]
 8009a66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a6e:	d01d      	beq.n	8009aac <normalizeV+0x98>
        dest->X = src->X / length;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	edd3 6a00 	vldr	s13, [r3]
 8009a76:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	edc3 7a00 	vstr	s15, [r3]
        dest->Y = src->Y / length;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	edd3 6a01 	vldr	s13, [r3, #4]
 8009a8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	edc3 7a01 	vstr	s15, [r3, #4]
        dest->Z = src->Z / length;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	edd3 6a02 	vldr	s13, [r3, #8]
 8009a9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8009aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 8009aac:	bf00      	nop
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <rotateV>:

// Rotate Estimated vector(s) with small angle approximation, according to the gyro data
void rotateV(struct fp_vector *v, float *delta)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b098      	sub	sp, #96	; 0x60
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
    struct fp_vector v_tmp = *v;
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ac4:	ca07      	ldmia	r2, {r0, r1, r2}
 8009ac6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    // This does a  "proper" matrix rotation using gyro deltas without small-angle approximation
    float mat[3][3];
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, sinzcosx, coszsinx, sinzsinx;

    cosx = cosf(delta[ROLL]);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	edd3 7a00 	vldr	s15, [r3]
 8009ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8009ad4:	f018 fc64 	bl	80223a0 <cosf>
 8009ad8:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
    sinx = sinf(delta[ROLL]);
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	edd3 7a00 	vldr	s15, [r3]
 8009ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8009ae6:	f018 fcdf 	bl	80224a8 <sinf>
 8009aea:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    cosy = cosf(delta[PITCH]);
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	3304      	adds	r3, #4
 8009af2:	edd3 7a00 	vldr	s15, [r3]
 8009af6:	eeb0 0a67 	vmov.f32	s0, s15
 8009afa:	f018 fc51 	bl	80223a0 <cosf>
 8009afe:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
    siny = sinf(delta[PITCH]);
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	3304      	adds	r3, #4
 8009b06:	edd3 7a00 	vldr	s15, [r3]
 8009b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8009b0e:	f018 fccb 	bl	80224a8 <sinf>
 8009b12:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
    cosz = cosf(delta[YAW]);
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	3308      	adds	r3, #8
 8009b1a:	edd3 7a00 	vldr	s15, [r3]
 8009b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8009b22:	f018 fc3d 	bl	80223a0 <cosf>
 8009b26:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
    sinz = sinf(delta[YAW]);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	3308      	adds	r3, #8
 8009b2e:	edd3 7a00 	vldr	s15, [r3]
 8009b32:	eeb0 0a67 	vmov.f32	s0, s15
 8009b36:	f018 fcb7 	bl	80224a8 <sinf>
 8009b3a:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

    coszcosx = cosz * cosx;
 8009b3e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009b42:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b4a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    sinzcosx = sinz * cosx;
 8009b4e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009b52:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b5a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    coszsinx = sinx * cosz;
 8009b5e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009b62:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8009b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b6a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sinzsinx = sinx * sinz;
 8009b6e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009b72:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b7a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

    mat[0][0] = cosz * cosy;
 8009b7e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009b82:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b8a:	edc7 7a02 	vstr	s15, [r7, #8]
    mat[0][1] = -cosy * sinz;
 8009b8e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009b92:	eeb1 7a67 	vneg.f32	s14, s15
 8009b96:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b9e:	edc7 7a03 	vstr	s15, [r7, #12]
    mat[0][2] = siny;
 8009ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ba4:	613b      	str	r3, [r7, #16]
    mat[1][0] = sinzcosx + (coszsinx * siny);
 8009ba6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009baa:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009bae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009bb2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009bba:	edc7 7a05 	vstr	s15, [r7, #20]
    mat[1][1] = coszcosx - (sinzsinx * siny);
 8009bbe:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009bc2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bca:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009bce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bd2:	edc7 7a06 	vstr	s15, [r7, #24]
    mat[1][2] = -sinx * cosy;
 8009bd6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009bda:	eeb1 7a67 	vneg.f32	s14, s15
 8009bde:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009be6:	edc7 7a07 	vstr	s15, [r7, #28]
    mat[2][0] = (sinzsinx) - (coszcosx * siny);
 8009bea:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009bee:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bfe:	edc7 7a08 	vstr	s15, [r7, #32]
    mat[2][1] = (coszsinx) + (sinzcosx * siny);
 8009c02:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009c06:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009c0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c0e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c16:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    mat[2][2] = cosy * cosx;
 8009c1a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009c1e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c26:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    v->X = v_tmp.X * mat[0][0] + v_tmp.Y * mat[1][0] + v_tmp.Z * mat[2][0];
 8009c2a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009c2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009c32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c36:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009c3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8009c3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c46:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009c4a:	edd7 7a08 	vldr	s15, [r7, #32]
 8009c4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	edc3 7a00 	vstr	s15, [r3]
    v->Y = v_tmp.X * mat[0][1] + v_tmp.Y * mat[1][1] + v_tmp.Z * mat[2][1];
 8009c5c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009c60:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c68:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009c6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8009c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c78:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009c7c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	edc3 7a01 	vstr	s15, [r3, #4]
    v->Z = v_tmp.X * mat[0][2] + v_tmp.Y * mat[1][2] + v_tmp.Z * mat[2][2];
 8009c8e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009c92:	edd7 7a04 	vldr	s15, [r7, #16]
 8009c96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c9a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009c9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8009ca2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ca6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009caa:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009cae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009cb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8009cc0:	bf00      	nop
 8009cc2:	3760      	adds	r7, #96	; 0x60
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <applyDeadband>:

int32_t applyDeadband(int32_t value, int32_t deadband)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
    if (abs(value) < deadband) {
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	bfb8      	it	lt
 8009cd8:	425b      	neglt	r3, r3
 8009cda:	683a      	ldr	r2, [r7, #0]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	dd02      	ble.n	8009ce6 <applyDeadband+0x1e>
        value = 0;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	607b      	str	r3, [r7, #4]
 8009ce4:	e00e      	b.n	8009d04 <applyDeadband+0x3c>
    } else if (value > 0) {
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	dd04      	ble.n	8009cf6 <applyDeadband+0x2e>
        value -= deadband;
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	607b      	str	r3, [r7, #4]
 8009cf4:	e006      	b.n	8009d04 <applyDeadband+0x3c>
    } else if (value < 0) {
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	da03      	bge.n	8009d04 <applyDeadband+0x3c>
        value += deadband;
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	4413      	add	r3, r2
 8009d02:	607b      	str	r3, [r7, #4]
    }
    return value;
 8009d04:	687b      	ldr	r3, [r7, #4]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	370c      	adds	r7, #12
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	0000      	movs	r0, r0
 8009d14:	0000      	movs	r0, r0
	...

08009d18 <acc_calc>:

// rotate acc into Earth frame and calculate acceleration in it
void acc_calc(uint32_t deltaT)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b08a      	sub	sp, #40	; 0x28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
    static int32_t accZoffset = 0;
    static float accz_smooth = 0;
    float dT = 0;
 8009d20:	f04f 0300 	mov.w	r3, #0
 8009d24:	627b      	str	r3, [r7, #36]	; 0x24
    float rpy[3];
    t_fp_vector accel_ned;

    // deltaT is measured in us ticks
    dT = (float)deltaT * 1e-6f;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	ee07 3a90 	vmov	s15, r3
 8009d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d30:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8009f38 <acc_calc+0x220>
 8009d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d38:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // the accel values have to be rotated into the earth frame
    rpy[0] = -(float)anglerad[ROLL];
 8009d3c:	4b7f      	ldr	r3, [pc, #508]	; (8009f3c <acc_calc+0x224>)
 8009d3e:	edd3 7a00 	vldr	s15, [r3]
 8009d42:	eef1 7a67 	vneg.f32	s15, s15
 8009d46:	edc7 7a06 	vstr	s15, [r7, #24]
    rpy[1] = -(float)anglerad[PITCH];
 8009d4a:	4b7c      	ldr	r3, [pc, #496]	; (8009f3c <acc_calc+0x224>)
 8009d4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8009d50:	eef1 7a67 	vneg.f32	s15, s15
 8009d54:	edc7 7a07 	vstr	s15, [r7, #28]
    rpy[2] = -(float)heading * RAD;
 8009d58:	4b79      	ldr	r3, [pc, #484]	; (8009f40 <acc_calc+0x228>)
 8009d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d5e:	ee07 3a90 	vmov	s15, r3
 8009d62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d66:	eef1 7a67 	vneg.f32	s15, s15
 8009d6a:	ee17 3a90 	vmov	r3, s15
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7f6 fba8 	bl	80004c4 <__aeabi_f2d>
 8009d74:	a36e      	add	r3, pc, #440	; (adr r3, 8009f30 <acc_calc+0x218>)
 8009d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7a:	f7f6 fbfb 	bl	8000574 <__aeabi_dmul>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	460b      	mov	r3, r1
 8009d82:	4610      	mov	r0, r2
 8009d84:	4619      	mov	r1, r3
 8009d86:	f7f6 fed7 	bl	8000b38 <__aeabi_d2f>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	623b      	str	r3, [r7, #32]

    accel_ned.V.X = accSmooth[0];
 8009d8e:	4b6d      	ldr	r3, [pc, #436]	; (8009f44 <acc_calc+0x22c>)
 8009d90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d94:	ee07 3a90 	vmov	s15, r3
 8009d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d9c:	edc7 7a03 	vstr	s15, [r7, #12]
    accel_ned.V.Y = accSmooth[1];
 8009da0:	4b68      	ldr	r3, [pc, #416]	; (8009f44 <acc_calc+0x22c>)
 8009da2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009da6:	ee07 3a90 	vmov	s15, r3
 8009daa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009dae:	edc7 7a04 	vstr	s15, [r7, #16]
    accel_ned.V.Z = accSmooth[2];
 8009db2:	4b64      	ldr	r3, [pc, #400]	; (8009f44 <acc_calc+0x22c>)
 8009db4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009db8:	ee07 3a90 	vmov	s15, r3
 8009dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009dc0:	edc7 7a05 	vstr	s15, [r7, #20]

    rotateV(&accel_ned.V, rpy);
 8009dc4:	f107 0218 	add.w	r2, r7, #24
 8009dc8:	f107 030c 	add.w	r3, r7, #12
 8009dcc:	4611      	mov	r1, r2
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff fe70 	bl	8009ab4 <rotateV>

    if (cfg.acc_unarmedcal == 1) {
 8009dd4:	4b5c      	ldr	r3, [pc, #368]	; (8009f48 <acc_calc+0x230>)
 8009dd6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d131      	bne.n	8009e42 <acc_calc+0x12a>
        if (!f.ARMED) {
 8009dde:	4b5b      	ldr	r3, [pc, #364]	; (8009f4c <acc_calc+0x234>)
 8009de0:	785b      	ldrb	r3, [r3, #1]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d11c      	bne.n	8009e20 <acc_calc+0x108>
            accZoffset -= accZoffset / 64;
 8009de6:	4b5a      	ldr	r3, [pc, #360]	; (8009f50 <acc_calc+0x238>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	da00      	bge.n	8009df0 <acc_calc+0xd8>
 8009dee:	333f      	adds	r3, #63	; 0x3f
 8009df0:	119b      	asrs	r3, r3, #6
 8009df2:	425b      	negs	r3, r3
 8009df4:	461a      	mov	r2, r3
 8009df6:	4b56      	ldr	r3, [pc, #344]	; (8009f50 <acc_calc+0x238>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	4a54      	ldr	r2, [pc, #336]	; (8009f50 <acc_calc+0x238>)
 8009dfe:	6013      	str	r3, [r2, #0]
            accZoffset += accel_ned.V.Z;
 8009e00:	4b53      	ldr	r3, [pc, #332]	; (8009f50 <acc_calc+0x238>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	ee07 3a90 	vmov	s15, r3
 8009e08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009e0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e18:	ee17 2a90 	vmov	r2, s15
 8009e1c:	4b4c      	ldr	r3, [pc, #304]	; (8009f50 <acc_calc+0x238>)
 8009e1e:	601a      	str	r2, [r3, #0]
        }
        accel_ned.V.Z -= accZoffset / 64;  // compensate for gravitation on z-axis
 8009e20:	ed97 7a05 	vldr	s14, [r7, #20]
 8009e24:	4b4a      	ldr	r3, [pc, #296]	; (8009f50 <acc_calc+0x238>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	da00      	bge.n	8009e2e <acc_calc+0x116>
 8009e2c:	333f      	adds	r3, #63	; 0x3f
 8009e2e:	119b      	asrs	r3, r3, #6
 8009e30:	ee07 3a90 	vmov	s15, r3
 8009e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e3c:	edc7 7a05 	vstr	s15, [r7, #20]
 8009e40:	e00b      	b.n	8009e5a <acc_calc+0x142>
    } else
        accel_ned.V.Z -= acc_1G;
 8009e42:	ed97 7a05 	vldr	s14, [r7, #20]
 8009e46:	4b43      	ldr	r3, [pc, #268]	; (8009f54 <acc_calc+0x23c>)
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	ee07 3a90 	vmov	s15, r3
 8009e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e56:	edc7 7a05 	vstr	s15, [r7, #20]

    accz_smooth = accz_smooth + (dT / (fc_acc + dT)) * (accel_ned.V.Z - accz_smooth); // low pass filter
 8009e5a:	4b3f      	ldr	r3, [pc, #252]	; (8009f58 <acc_calc+0x240>)
 8009e5c:	ed93 7a00 	vldr	s14, [r3]
 8009e60:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e68:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e70:	edd7 6a05 	vldr	s13, [r7, #20]
 8009e74:	4b39      	ldr	r3, [pc, #228]	; (8009f5c <acc_calc+0x244>)
 8009e76:	edd3 7a00 	vldr	s15, [r3]
 8009e7a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009e7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e82:	4b36      	ldr	r3, [pc, #216]	; (8009f5c <acc_calc+0x244>)
 8009e84:	edd3 7a00 	vldr	s15, [r3]
 8009e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e8c:	4b33      	ldr	r3, [pc, #204]	; (8009f5c <acc_calc+0x244>)
 8009e8e:	edc3 7a00 	vstr	s15, [r3]

    // apply Deadband to reduce integration drift and vibration influence and
    // sum up Values for later integration to get velocity and distance
    accSum[X] += applyDeadband(lrintf(accel_ned.V.X), cfg.accxy_deadband);
 8009e92:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e96:	eeb0 0a67 	vmov.f32	s0, s15
 8009e9a:	f018 fac5 	bl	8022428 <lrintf>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	4a29      	ldr	r2, [pc, #164]	; (8009f48 <acc_calc+0x230>)
 8009ea2:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8009ea6:	4611      	mov	r1, r2
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7ff ff0d 	bl	8009cc8 <applyDeadband>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	4b2b      	ldr	r3, [pc, #172]	; (8009f60 <acc_calc+0x248>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	4a2a      	ldr	r2, [pc, #168]	; (8009f60 <acc_calc+0x248>)
 8009eb8:	6013      	str	r3, [r2, #0]
    accSum[Y] += applyDeadband(lrintf(accel_ned.V.Y), cfg.accxy_deadband);
 8009eba:	edd7 7a04 	vldr	s15, [r7, #16]
 8009ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8009ec2:	f018 fab1 	bl	8022428 <lrintf>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	4a1f      	ldr	r2, [pc, #124]	; (8009f48 <acc_calc+0x230>)
 8009eca:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8009ece:	4611      	mov	r1, r2
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7ff fef9 	bl	8009cc8 <applyDeadband>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	4b21      	ldr	r3, [pc, #132]	; (8009f60 <acc_calc+0x248>)
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	4413      	add	r3, r2
 8009ede:	4a20      	ldr	r2, [pc, #128]	; (8009f60 <acc_calc+0x248>)
 8009ee0:	6053      	str	r3, [r2, #4]
    accSum[Z] += applyDeadband(lrintf(accz_smooth), cfg.accz_deadband);
 8009ee2:	4b1e      	ldr	r3, [pc, #120]	; (8009f5c <acc_calc+0x244>)
 8009ee4:	edd3 7a00 	vldr	s15, [r3]
 8009ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8009eec:	f018 fa9c 	bl	8022428 <lrintf>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	4a15      	ldr	r2, [pc, #84]	; (8009f48 <acc_calc+0x230>)
 8009ef4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8009ef8:	4611      	mov	r1, r2
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7ff fee4 	bl	8009cc8 <applyDeadband>
 8009f00:	4602      	mov	r2, r0
 8009f02:	4b17      	ldr	r3, [pc, #92]	; (8009f60 <acc_calc+0x248>)
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	4413      	add	r3, r2
 8009f08:	4a15      	ldr	r2, [pc, #84]	; (8009f60 <acc_calc+0x248>)
 8009f0a:	6093      	str	r3, [r2, #8]

    accTimeSum += deltaT;
 8009f0c:	4b15      	ldr	r3, [pc, #84]	; (8009f64 <acc_calc+0x24c>)
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4413      	add	r3, r2
 8009f14:	4a13      	ldr	r2, [pc, #76]	; (8009f64 <acc_calc+0x24c>)
 8009f16:	6013      	str	r3, [r2, #0]
    accSumCount++;
 8009f18:	4b13      	ldr	r3, [pc, #76]	; (8009f68 <acc_calc+0x250>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	4a12      	ldr	r2, [pc, #72]	; (8009f68 <acc_calc+0x250>)
 8009f20:	6013      	str	r3, [r2, #0]
}
 8009f22:	bf00      	nop
 8009f24:	3728      	adds	r7, #40	; 0x28
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	f3af 8000 	nop.w
 8009f30:	a2529d39 	.word	0xa2529d39
 8009f34:	3f91df46 	.word	0x3f91df46
 8009f38:	358637bd 	.word	0x358637bd
 8009f3c:	20001794 	.word	0x20001794
 8009f40:	20001cb4 	.word	0x20001cb4
 8009f44:	20001718 	.word	0x20001718
 8009f48:	20001128 	.word	0x20001128
 8009f4c:	20001988 	.word	0x20001988
 8009f50:	200017ac 	.word	0x200017ac
 8009f54:	2000005a 	.word	0x2000005a
 8009f58:	2000177c 	.word	0x2000177c
 8009f5c:	200017b0 	.word	0x200017b0
 8009f60:	20001728 	.word	0x20001728
 8009f64:	20001734 	.word	0x20001734
 8009f68:	20001738 	.word	0x20001738

08009f6c <accSum_reset>:

void accSum_reset(void)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	af00      	add	r7, sp, #0
    accSum[0] = 0;
 8009f70:	4b09      	ldr	r3, [pc, #36]	; (8009f98 <accSum_reset+0x2c>)
 8009f72:	2200      	movs	r2, #0
 8009f74:	601a      	str	r2, [r3, #0]
    accSum[1] = 0;
 8009f76:	4b08      	ldr	r3, [pc, #32]	; (8009f98 <accSum_reset+0x2c>)
 8009f78:	2200      	movs	r2, #0
 8009f7a:	605a      	str	r2, [r3, #4]
    accSum[2] = 0;
 8009f7c:	4b06      	ldr	r3, [pc, #24]	; (8009f98 <accSum_reset+0x2c>)
 8009f7e:	2200      	movs	r2, #0
 8009f80:	609a      	str	r2, [r3, #8]
    accSumCount = 0;
 8009f82:	4b06      	ldr	r3, [pc, #24]	; (8009f9c <accSum_reset+0x30>)
 8009f84:	2200      	movs	r2, #0
 8009f86:	601a      	str	r2, [r3, #0]
    accTimeSum = 0;
 8009f88:	4b05      	ldr	r3, [pc, #20]	; (8009fa0 <accSum_reset+0x34>)
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	601a      	str	r2, [r3, #0]
}
 8009f8e:	bf00      	nop
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr
 8009f98:	20001728 	.word	0x20001728
 8009f9c:	20001738 	.word	0x20001738
 8009fa0:	20001734 	.word	0x20001734
 8009fa4:	00000000 	.word	0x00000000

08009fa8 <calculateHeading>:

// baseflight calculation by Luggi09 originates from arducopter
static int16_t calculateHeading(t_fp_vector *vec)
{
 8009fa8:	b5b0      	push	{r4, r5, r7, lr}
 8009faa:	b08a      	sub	sp, #40	; 0x28
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
    int16_t head;

    float cosineRoll = cosf(anglerad[ROLL]);
 8009fb0:	4b53      	ldr	r3, [pc, #332]	; (800a100 <calculateHeading+0x158>)
 8009fb2:	edd3 7a00 	vldr	s15, [r3]
 8009fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8009fba:	f018 f9f1 	bl	80223a0 <cosf>
 8009fbe:	ed87 0a08 	vstr	s0, [r7, #32]
    float sineRoll = sinf(anglerad[ROLL]);
 8009fc2:	4b4f      	ldr	r3, [pc, #316]	; (800a100 <calculateHeading+0x158>)
 8009fc4:	edd3 7a00 	vldr	s15, [r3]
 8009fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8009fcc:	f018 fa6c 	bl	80224a8 <sinf>
 8009fd0:	ed87 0a07 	vstr	s0, [r7, #28]
    float cosinePitch = cosf(anglerad[PITCH]);
 8009fd4:	4b4a      	ldr	r3, [pc, #296]	; (800a100 <calculateHeading+0x158>)
 8009fd6:	edd3 7a01 	vldr	s15, [r3, #4]
 8009fda:	eeb0 0a67 	vmov.f32	s0, s15
 8009fde:	f018 f9df 	bl	80223a0 <cosf>
 8009fe2:	ed87 0a06 	vstr	s0, [r7, #24]
    float sinePitch = sinf(anglerad[PITCH]);
 8009fe6:	4b46      	ldr	r3, [pc, #280]	; (800a100 <calculateHeading+0x158>)
 8009fe8:	edd3 7a01 	vldr	s15, [r3, #4]
 8009fec:	eeb0 0a67 	vmov.f32	s0, s15
 8009ff0:	f018 fa5a 	bl	80224a8 <sinf>
 8009ff4:	ed87 0a05 	vstr	s0, [r7, #20]
    float Xh = vec->A[X] * cosinePitch + vec->A[Y] * sineRoll * sinePitch + vec->A[Z] * sinePitch * cosineRoll;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	ed93 7a00 	vldr	s14, [r3]
 8009ffe:	edd7 7a06 	vldr	s15, [r7, #24]
 800a002:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	edd3 6a01 	vldr	s13, [r3, #4]
 800a00c:	edd7 7a07 	vldr	s15, [r7, #28]
 800a010:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a014:	edd7 7a05 	vldr	s15, [r7, #20]
 800a018:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a01c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	edd3 6a02 	vldr	s13, [r3, #8]
 800a026:	edd7 7a05 	vldr	s15, [r7, #20]
 800a02a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a02e:	edd7 7a08 	vldr	s15, [r7, #32]
 800a032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a03a:	edc7 7a04 	vstr	s15, [r7, #16]
    float Yh = vec->A[Y] * cosineRoll - vec->A[Z] * sineRoll;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	ed93 7a01 	vldr	s14, [r3, #4]
 800a044:	edd7 7a08 	vldr	s15, [r7, #32]
 800a048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	edd3 6a02 	vldr	s13, [r3, #8]
 800a052:	edd7 7a07 	vldr	s15, [r7, #28]
 800a056:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a05a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a05e:	edc7 7a03 	vstr	s15, [r7, #12]
    float hd = (atan2f(Yh, Xh) * 1800.0f / M_PI + sensor_set.mag.declination) / 10.0f;
 800a062:	edd7 0a04 	vldr	s1, [r7, #16]
 800a066:	ed97 0a03 	vldr	s0, [r7, #12]
 800a06a:	f018 fa8f 	bl	802258c <atan2f>
 800a06e:	eef0 7a40 	vmov.f32	s15, s0
 800a072:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800a104 <calculateHeading+0x15c>
 800a076:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a07a:	ee17 0a90 	vmov	r0, s15
 800a07e:	f7f6 fa21 	bl	80004c4 <__aeabi_f2d>
 800a082:	a31d      	add	r3, pc, #116	; (adr r3, 800a0f8 <calculateHeading+0x150>)
 800a084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a088:	f7f6 fb9e 	bl	80007c8 <__aeabi_ddiv>
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	4614      	mov	r4, r2
 800a092:	461d      	mov	r5, r3
 800a094:	4b1c      	ldr	r3, [pc, #112]	; (800a108 <calculateHeading+0x160>)
 800a096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a098:	4618      	mov	r0, r3
 800a09a:	f7f6 fa13 	bl	80004c4 <__aeabi_f2d>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	4629      	mov	r1, r5
 800a0a6:	f7f6 f8af 	bl	8000208 <__adddf3>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	4610      	mov	r0, r2
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	f04f 0200 	mov.w	r2, #0
 800a0b6:	4b15      	ldr	r3, [pc, #84]	; (800a10c <calculateHeading+0x164>)
 800a0b8:	f7f6 fb86 	bl	80007c8 <__aeabi_ddiv>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	f7f6 fd38 	bl	8000b38 <__aeabi_d2f>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	60bb      	str	r3, [r7, #8]
    head = lrintf(hd);
 800a0cc:	ed97 0a02 	vldr	s0, [r7, #8]
 800a0d0:	f018 f9aa 	bl	8022428 <lrintf>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (head < 0)
 800a0d8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	da04      	bge.n	800a0ea <calculateHeading+0x142>
        head += 360;
 800a0e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	84fb      	strh	r3, [r7, #38]	; 0x26

    return head;
 800a0ea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3728      	adds	r7, #40	; 0x28
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bdb0      	pop	{r4, r5, r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	54442d18 	.word	0x54442d18
 800a0fc:	400921fb 	.word	0x400921fb
 800a100:	20001794 	.word	0x20001794
 800a104:	44e10000 	.word	0x44e10000
 800a108:	20001cc0 	.word	0x20001cc0
 800a10c:	40240000 	.word	0x40240000

0800a110 <getEstimatedAttitude>:

static void getEstimatedAttitude(void)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	ed2d 8b02 	vpush	{d8}
 800a116:	b08a      	sub	sp, #40	; 0x28
 800a118:	af00      	add	r7, sp, #0
    int32_t axis;
    int32_t accMag = 0;
 800a11a:	2300      	movs	r3, #0
 800a11c:	623b      	str	r3, [r7, #32]
    static t_fp_vector EstM;
    static t_fp_vector EstN = { .A = { 1.0f, 0.0f, 0.0f } };
    static float accLPF[3];
    static uint32_t previousT = 0UL;
    uint32_t currentT = (*pif_act_timer1us)();
 800a11e:	4bbc      	ldr	r3, [pc, #752]	; (800a410 <getEstimatedAttitude+0x300>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4798      	blx	r3
 800a124:	61b8      	str	r0, [r7, #24]
    uint32_t deltaT;
    float scale, deltaGyroAngle[3];
    deltaT = currentT - previousT;
 800a126:	4bbb      	ldr	r3, [pc, #748]	; (800a414 <getEstimatedAttitude+0x304>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	69ba      	ldr	r2, [r7, #24]
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	617b      	str	r3, [r7, #20]
    scale = deltaT * sensor_set.gyro.scale;
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	ee07 3a90 	vmov	s15, r3
 800a136:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a13a:	4bb7      	ldr	r3, [pc, #732]	; (800a418 <getEstimatedAttitude+0x308>)
 800a13c:	edd3 7a05 	vldr	s15, [r3, #20]
 800a140:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a144:	edc7 7a04 	vstr	s15, [r7, #16]
    previousT = currentT;
 800a148:	4ab2      	ldr	r2, [pc, #712]	; (800a414 <getEstimatedAttitude+0x304>)
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	6013      	str	r3, [r2, #0]

    // Initialization
    for (axis = 0; axis < 3; axis++) {
 800a14e:	2300      	movs	r3, #0
 800a150:	627b      	str	r3, [r7, #36]	; 0x24
 800a152:	e074      	b.n	800a23e <getEstimatedAttitude+0x12e>
        deltaGyroAngle[axis] = gyroADC[axis] * scale;
 800a154:	4ab1      	ldr	r2, [pc, #708]	; (800a41c <getEstimatedAttitude+0x30c>)
 800a156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a158:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a15c:	ee07 3a90 	vmov	s15, r3
 800a160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a164:	edd7 7a04 	vldr	s15, [r7, #16]
 800a168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	3328      	adds	r3, #40	; 0x28
 800a172:	443b      	add	r3, r7
 800a174:	3b28      	subs	r3, #40	; 0x28
 800a176:	edc3 7a00 	vstr	s15, [r3]
        if (cfg.acc_lpf_factor > 0) {
 800a17a:	4ba9      	ldr	r3, [pc, #676]	; (800a420 <getEstimatedAttitude+0x310>)
 800a17c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a180:	2b00      	cmp	r3, #0
 800a182:	d043      	beq.n	800a20c <getEstimatedAttitude+0xfc>
            accLPF[axis] = accLPF[axis] * (1.0f - (1.0f / cfg.acc_lpf_factor)) + accADC[axis] * (1.0f / cfg.acc_lpf_factor);
 800a184:	4aa7      	ldr	r2, [pc, #668]	; (800a424 <getEstimatedAttitude+0x314>)
 800a186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	4413      	add	r3, r2
 800a18c:	ed93 7a00 	vldr	s14, [r3]
 800a190:	4ba3      	ldr	r3, [pc, #652]	; (800a420 <getEstimatedAttitude+0x310>)
 800a192:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a196:	ee07 3a90 	vmov	s15, r3
 800a19a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a19e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a1a2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a1a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a1ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1b2:	4a9d      	ldr	r2, [pc, #628]	; (800a428 <getEstimatedAttitude+0x318>)
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a1ba:	ee07 3a90 	vmov	s15, r3
 800a1be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a1c2:	4b97      	ldr	r3, [pc, #604]	; (800a420 <getEstimatedAttitude+0x310>)
 800a1c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a1c8:	ee07 3a90 	vmov	s15, r3
 800a1cc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a1d0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a1d4:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800a1d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a1dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1e0:	4a90      	ldr	r2, [pc, #576]	; (800a424 <getEstimatedAttitude+0x314>)
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4413      	add	r3, r2
 800a1e8:	edc3 7a00 	vstr	s15, [r3]
            accSmooth[axis] = accLPF[axis];
 800a1ec:	4a8d      	ldr	r2, [pc, #564]	; (800a424 <getEstimatedAttitude+0x314>)
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	4413      	add	r3, r2
 800a1f4:	edd3 7a00 	vldr	s15, [r3]
 800a1f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a1fc:	ee17 3a90 	vmov	r3, s15
 800a200:	b219      	sxth	r1, r3
 800a202:	4a8a      	ldr	r2, [pc, #552]	; (800a42c <getEstimatedAttitude+0x31c>)
 800a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a206:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800a20a:	e007      	b.n	800a21c <getEstimatedAttitude+0x10c>
        } else {
            accSmooth[axis] = accADC[axis];
 800a20c:	4a86      	ldr	r2, [pc, #536]	; (800a428 <getEstimatedAttitude+0x318>)
 800a20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a210:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800a214:	4a85      	ldr	r2, [pc, #532]	; (800a42c <getEstimatedAttitude+0x31c>)
 800a216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a218:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        accMag += (int32_t)accSmooth[axis] * accSmooth[axis];
 800a21c:	4a83      	ldr	r2, [pc, #524]	; (800a42c <getEstimatedAttitude+0x31c>)
 800a21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a220:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a224:	4619      	mov	r1, r3
 800a226:	4a81      	ldr	r2, [pc, #516]	; (800a42c <getEstimatedAttitude+0x31c>)
 800a228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a22e:	fb01 f303 	mul.w	r3, r1, r3
 800a232:	6a3a      	ldr	r2, [r7, #32]
 800a234:	4413      	add	r3, r2
 800a236:	623b      	str	r3, [r7, #32]
    for (axis = 0; axis < 3; axis++) {
 800a238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23a:	3301      	adds	r3, #1
 800a23c:	627b      	str	r3, [r7, #36]	; 0x24
 800a23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a240:	2b02      	cmp	r3, #2
 800a242:	dd87      	ble.n	800a154 <getEstimatedAttitude+0x44>
    }
    accMag = accMag * 100 / ((int32_t)acc_1G * acc_1G);
 800a244:	6a3b      	ldr	r3, [r7, #32]
 800a246:	2264      	movs	r2, #100	; 0x64
 800a248:	fb03 f202 	mul.w	r2, r3, r2
 800a24c:	4b78      	ldr	r3, [pc, #480]	; (800a430 <getEstimatedAttitude+0x320>)
 800a24e:	881b      	ldrh	r3, [r3, #0]
 800a250:	4619      	mov	r1, r3
 800a252:	4b77      	ldr	r3, [pc, #476]	; (800a430 <getEstimatedAttitude+0x320>)
 800a254:	881b      	ldrh	r3, [r3, #0]
 800a256:	fb01 f303 	mul.w	r3, r1, r3
 800a25a:	fb92 f3f3 	sdiv	r3, r2, r3
 800a25e:	623b      	str	r3, [r7, #32]

    rotateV(&EstG.V, deltaGyroAngle);
 800a260:	463b      	mov	r3, r7
 800a262:	4619      	mov	r1, r3
 800a264:	4873      	ldr	r0, [pc, #460]	; (800a434 <getEstimatedAttitude+0x324>)
 800a266:	f7ff fc25 	bl	8009ab4 <rotateV>

    // Apply complimentary filter (Gyro drift correction)
    // If accel magnitude >1.15G or <0.85G and ACC vector outside of the limit range => we neutralize the effect of accelerometers in the angle estimation.
    // To do that, we just skip filter, as EstV already rotated by Gyro
    if (72 < (uint16_t)accMag && (uint16_t)accMag < 133) {
 800a26a:	6a3b      	ldr	r3, [r7, #32]
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	2b48      	cmp	r3, #72	; 0x48
 800a270:	d93c      	bls.n	800a2ec <getEstimatedAttitude+0x1dc>
 800a272:	6a3b      	ldr	r3, [r7, #32]
 800a274:	b29b      	uxth	r3, r3
 800a276:	2b84      	cmp	r3, #132	; 0x84
 800a278:	d838      	bhi.n	800a2ec <getEstimatedAttitude+0x1dc>
        for (axis = 0; axis < 3; axis++)
 800a27a:	2300      	movs	r3, #0
 800a27c:	627b      	str	r3, [r7, #36]	; 0x24
 800a27e:	e032      	b.n	800a2e6 <getEstimatedAttitude+0x1d6>
            EstG.A[axis] = (EstG.A[axis] * (float)mcfg.gyro_cmpf_factor + accSmooth[axis]) * INV_GYR_CMPF_FACTOR;
 800a280:	4a6c      	ldr	r2, [pc, #432]	; (800a434 <getEstimatedAttitude+0x324>)
 800a282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	4413      	add	r3, r2
 800a288:	ed93 7a00 	vldr	s14, [r3]
 800a28c:	4b6a      	ldr	r3, [pc, #424]	; (800a438 <getEstimatedAttitude+0x328>)
 800a28e:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a292:	ee07 3a90 	vmov	s15, r3
 800a296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a29a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a29e:	4a63      	ldr	r2, [pc, #396]	; (800a42c <getEstimatedAttitude+0x31c>)
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a2a6:	ee07 3a90 	vmov	s15, r3
 800a2aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a2b2:	4b61      	ldr	r3, [pc, #388]	; (800a438 <getEstimatedAttitude+0x328>)
 800a2b4:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a2b8:	ee07 3a90 	vmov	s15, r3
 800a2bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2c4:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a2c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a2cc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a2d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2d4:	4a57      	ldr	r2, [pc, #348]	; (800a434 <getEstimatedAttitude+0x324>)
 800a2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	4413      	add	r3, r2
 800a2dc:	edc3 7a00 	vstr	s15, [r3]
        for (axis = 0; axis < 3; axis++)
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	ddc9      	ble.n	800a280 <getEstimatedAttitude+0x170>
    }

    f.SMALL_ANGLE = (EstG.A[Z] > smallAngle);
 800a2ec:	4b51      	ldr	r3, [pc, #324]	; (800a434 <getEstimatedAttitude+0x324>)
 800a2ee:	ed93 7a02 	vldr	s14, [r3, #8]
 800a2f2:	4b52      	ldr	r3, [pc, #328]	; (800a43c <getEstimatedAttitude+0x32c>)
 800a2f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a2f8:	ee07 3a90 	vmov	s15, r3
 800a2fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a308:	bfcc      	ite	gt
 800a30a:	2301      	movgt	r3, #1
 800a30c:	2300      	movle	r3, #0
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	461a      	mov	r2, r3
 800a312:	4b4b      	ldr	r3, [pc, #300]	; (800a440 <getEstimatedAttitude+0x330>)
 800a314:	735a      	strb	r2, [r3, #13]

    // Attitude of the estimated vector
    anglerad[ROLL] = atan2f(EstG.V.Y, EstG.V.Z);
 800a316:	4b47      	ldr	r3, [pc, #284]	; (800a434 <getEstimatedAttitude+0x324>)
 800a318:	edd3 7a01 	vldr	s15, [r3, #4]
 800a31c:	4b45      	ldr	r3, [pc, #276]	; (800a434 <getEstimatedAttitude+0x324>)
 800a31e:	ed93 7a02 	vldr	s14, [r3, #8]
 800a322:	eef0 0a47 	vmov.f32	s1, s14
 800a326:	eeb0 0a67 	vmov.f32	s0, s15
 800a32a:	f018 f92f 	bl	802258c <atan2f>
 800a32e:	eef0 7a40 	vmov.f32	s15, s0
 800a332:	4b44      	ldr	r3, [pc, #272]	; (800a444 <getEstimatedAttitude+0x334>)
 800a334:	edc3 7a00 	vstr	s15, [r3]
    anglerad[PITCH] = atan2f(-EstG.V.X, sqrtf(EstG.V.Y * EstG.V.Y + EstG.V.Z * EstG.V.Z));
 800a338:	4b3e      	ldr	r3, [pc, #248]	; (800a434 <getEstimatedAttitude+0x324>)
 800a33a:	edd3 7a00 	vldr	s15, [r3]
 800a33e:	eeb1 8a67 	vneg.f32	s16, s15
 800a342:	4b3c      	ldr	r3, [pc, #240]	; (800a434 <getEstimatedAttitude+0x324>)
 800a344:	ed93 7a01 	vldr	s14, [r3, #4]
 800a348:	4b3a      	ldr	r3, [pc, #232]	; (800a434 <getEstimatedAttitude+0x324>)
 800a34a:	edd3 7a01 	vldr	s15, [r3, #4]
 800a34e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a352:	4b38      	ldr	r3, [pc, #224]	; (800a434 <getEstimatedAttitude+0x324>)
 800a354:	edd3 6a02 	vldr	s13, [r3, #8]
 800a358:	4b36      	ldr	r3, [pc, #216]	; (800a434 <getEstimatedAttitude+0x324>)
 800a35a:	edd3 7a02 	vldr	s15, [r3, #8]
 800a35e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a362:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a366:	eeb0 0a67 	vmov.f32	s0, s15
 800a36a:	f018 f969 	bl	8022640 <sqrtf>
 800a36e:	eef0 7a40 	vmov.f32	s15, s0
 800a372:	eef0 0a67 	vmov.f32	s1, s15
 800a376:	eeb0 0a48 	vmov.f32	s0, s16
 800a37a:	f018 f907 	bl	802258c <atan2f>
 800a37e:	eef0 7a40 	vmov.f32	s15, s0
 800a382:	4b30      	ldr	r3, [pc, #192]	; (800a444 <getEstimatedAttitude+0x334>)
 800a384:	edc3 7a01 	vstr	s15, [r3, #4]
    angle[ROLL] = lrintf(anglerad[ROLL] * (1800.0f / M_PI));
 800a388:	4b2e      	ldr	r3, [pc, #184]	; (800a444 <getEstimatedAttitude+0x334>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7f6 f899 	bl	80004c4 <__aeabi_f2d>
 800a392:	a31d      	add	r3, pc, #116	; (adr r3, 800a408 <getEstimatedAttitude+0x2f8>)
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	f7f6 f8ec 	bl	8000574 <__aeabi_dmul>
 800a39c:	4602      	mov	r2, r0
 800a39e:	460b      	mov	r3, r1
 800a3a0:	4610      	mov	r0, r2
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	f7f6 fbc8 	bl	8000b38 <__aeabi_d2f>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	ee00 3a10 	vmov	s0, r3
 800a3ae:	f018 f83b 	bl	8022428 <lrintf>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	b21a      	sxth	r2, r3
 800a3b6:	4b24      	ldr	r3, [pc, #144]	; (800a448 <getEstimatedAttitude+0x338>)
 800a3b8:	801a      	strh	r2, [r3, #0]
    angle[PITCH] = lrintf(anglerad[PITCH] * (1800.0f / M_PI));
 800a3ba:	4b22      	ldr	r3, [pc, #136]	; (800a444 <getEstimatedAttitude+0x334>)
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7f6 f880 	bl	80004c4 <__aeabi_f2d>
 800a3c4:	a310      	add	r3, pc, #64	; (adr r3, 800a408 <getEstimatedAttitude+0x2f8>)
 800a3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ca:	f7f6 f8d3 	bl	8000574 <__aeabi_dmul>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	f7f6 fbaf 	bl	8000b38 <__aeabi_d2f>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	ee00 3a10 	vmov	s0, r3
 800a3e0:	f018 f822 	bl	8022428 <lrintf>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	b21a      	sxth	r2, r3
 800a3e8:	4b17      	ldr	r3, [pc, #92]	; (800a448 <getEstimatedAttitude+0x338>)
 800a3ea:	805a      	strh	r2, [r3, #2]

    if (sensors(SENSOR_MAG)) {
 800a3ec:	2008      	movs	r0, #8
 800a3ee:	f7fc fdb3 	bl	8006f58 <sensors>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d069      	beq.n	800a4cc <getEstimatedAttitude+0x3bc>
        rotateV(&EstM.V, deltaGyroAngle);
 800a3f8:	463b      	mov	r3, r7
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	4813      	ldr	r0, [pc, #76]	; (800a44c <getEstimatedAttitude+0x33c>)
 800a3fe:	f7ff fb59 	bl	8009ab4 <rotateV>
        for (axis = 0; axis < 3; axis++)
 800a402:	2300      	movs	r3, #0
 800a404:	627b      	str	r3, [r7, #36]	; 0x24
 800a406:	e056      	b.n	800a4b6 <getEstimatedAttitude+0x3a6>
 800a408:	907e593b 	.word	0x907e593b
 800a40c:	4081e7a9 	.word	0x4081e7a9
 800a410:	200020f0 	.word	0x200020f0
 800a414:	200017b4 	.word	0x200017b4
 800a418:	20001cc0 	.word	0x20001cc0
 800a41c:	20001708 	.word	0x20001708
 800a420:	20001128 	.word	0x20001128
 800a424:	200017b8 	.word	0x200017b8
 800a428:	20001710 	.word	0x20001710
 800a42c:	20001718 	.word	0x20001718
 800a430:	2000005a 	.word	0x2000005a
 800a434:	2000179c 	.word	0x2000179c
 800a438:	20000bbc 	.word	0x20000bbc
 800a43c:	2000173c 	.word	0x2000173c
 800a440:	20001988 	.word	0x20001988
 800a444:	20001794 	.word	0x20001794
 800a448:	20001790 	.word	0x20001790
 800a44c:	200017c4 	.word	0x200017c4
            EstM.A[axis] = (EstM.A[axis] * (float)mcfg.gyro_cmpfm_factor + magADC[axis]) * INV_GYR_CMPFM_FACTOR;
 800a450:	4a69      	ldr	r2, [pc, #420]	; (800a5f8 <getEstimatedAttitude+0x4e8>)
 800a452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	4413      	add	r3, r2
 800a458:	ed93 7a00 	vldr	s14, [r3]
 800a45c:	4b67      	ldr	r3, [pc, #412]	; (800a5fc <getEstimatedAttitude+0x4ec>)
 800a45e:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a462:	ee07 3a90 	vmov	s15, r3
 800a466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a46a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a46e:	4a64      	ldr	r2, [pc, #400]	; (800a600 <getEstimatedAttitude+0x4f0>)
 800a470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a472:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a476:	ee07 3a90 	vmov	s15, r3
 800a47a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a47e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a482:	4b5e      	ldr	r3, [pc, #376]	; (800a5fc <getEstimatedAttitude+0x4ec>)
 800a484:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a488:	ee07 3a90 	vmov	s15, r3
 800a48c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a494:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a498:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a49c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a4a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4a4:	4a54      	ldr	r2, [pc, #336]	; (800a5f8 <getEstimatedAttitude+0x4e8>)
 800a4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	4413      	add	r3, r2
 800a4ac:	edc3 7a00 	vstr	s15, [r3]
        for (axis = 0; axis < 3; axis++)
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	627b      	str	r3, [r7, #36]	; 0x24
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	ddc9      	ble.n	800a450 <getEstimatedAttitude+0x340>
        heading = calculateHeading(&EstM);
 800a4bc:	484e      	ldr	r0, [pc, #312]	; (800a5f8 <getEstimatedAttitude+0x4e8>)
 800a4be:	f7ff fd73 	bl	8009fa8 <calculateHeading>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	4b4f      	ldr	r3, [pc, #316]	; (800a604 <getEstimatedAttitude+0x4f4>)
 800a4c8:	801a      	strh	r2, [r3, #0]
 800a4ca:	e00f      	b.n	800a4ec <getEstimatedAttitude+0x3dc>
    } else {
        rotateV(&EstN.V, deltaGyroAngle);
 800a4cc:	463b      	mov	r3, r7
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	484d      	ldr	r0, [pc, #308]	; (800a608 <getEstimatedAttitude+0x4f8>)
 800a4d2:	f7ff faef 	bl	8009ab4 <rotateV>
        normalizeV(&EstN.V, &EstN.V);
 800a4d6:	494c      	ldr	r1, [pc, #304]	; (800a608 <getEstimatedAttitude+0x4f8>)
 800a4d8:	484b      	ldr	r0, [pc, #300]	; (800a608 <getEstimatedAttitude+0x4f8>)
 800a4da:	f7ff fa9b 	bl	8009a14 <normalizeV>
        heading = calculateHeading(&EstN);
 800a4de:	484a      	ldr	r0, [pc, #296]	; (800a608 <getEstimatedAttitude+0x4f8>)
 800a4e0:	f7ff fd62 	bl	8009fa8 <calculateHeading>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	4b46      	ldr	r3, [pc, #280]	; (800a604 <getEstimatedAttitude+0x4f4>)
 800a4ea:	801a      	strh	r2, [r3, #0]
    }

    acc_calc(deltaT); // rotate acc vector into earth frame
 800a4ec:	6978      	ldr	r0, [r7, #20]
 800a4ee:	f7ff fc13 	bl	8009d18 <acc_calc>

    if (cfg.throttle_correction_value) {
 800a4f2:	4b46      	ldr	r3, [pc, #280]	; (800a60c <getEstimatedAttitude+0x4fc>)
 800a4f4:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d072      	beq.n	800a5e2 <getEstimatedAttitude+0x4d2>

        float cosZ = EstG.V.Z / sqrtf(EstG.V.X * EstG.V.X + EstG.V.Y * EstG.V.Y + EstG.V.Z * EstG.V.Z);
 800a4fc:	4b44      	ldr	r3, [pc, #272]	; (800a610 <getEstimatedAttitude+0x500>)
 800a4fe:	ed93 8a02 	vldr	s16, [r3, #8]
 800a502:	4b43      	ldr	r3, [pc, #268]	; (800a610 <getEstimatedAttitude+0x500>)
 800a504:	ed93 7a00 	vldr	s14, [r3]
 800a508:	4b41      	ldr	r3, [pc, #260]	; (800a610 <getEstimatedAttitude+0x500>)
 800a50a:	edd3 7a00 	vldr	s15, [r3]
 800a50e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a512:	4b3f      	ldr	r3, [pc, #252]	; (800a610 <getEstimatedAttitude+0x500>)
 800a514:	edd3 6a01 	vldr	s13, [r3, #4]
 800a518:	4b3d      	ldr	r3, [pc, #244]	; (800a610 <getEstimatedAttitude+0x500>)
 800a51a:	edd3 7a01 	vldr	s15, [r3, #4]
 800a51e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a522:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a526:	4b3a      	ldr	r3, [pc, #232]	; (800a610 <getEstimatedAttitude+0x500>)
 800a528:	edd3 6a02 	vldr	s13, [r3, #8]
 800a52c:	4b38      	ldr	r3, [pc, #224]	; (800a610 <getEstimatedAttitude+0x500>)
 800a52e:	edd3 7a02 	vldr	s15, [r3, #8]
 800a532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a53a:	eeb0 0a67 	vmov.f32	s0, s15
 800a53e:	f018 f87f 	bl	8022640 <sqrtf>
 800a542:	eeb0 7a40 	vmov.f32	s14, s0
 800a546:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800a54a:	edc7 7a03 	vstr	s15, [r7, #12]

        if (cosZ <= 0.015f) { // we are inverted, vertical or with a small angle < 0.86 deg
 800a54e:	edd7 7a03 	vldr	s15, [r7, #12]
 800a552:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800a614 <getEstimatedAttitude+0x504>
 800a556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a55e:	d803      	bhi.n	800a568 <getEstimatedAttitude+0x458>
            throttleAngleCorrection = 0;
 800a560:	4b2d      	ldr	r3, [pc, #180]	; (800a618 <getEstimatedAttitude+0x508>)
 800a562:	2200      	movs	r2, #0
 800a564:	801a      	strh	r2, [r3, #0]
            if (deg > 900)
                deg = 900;
            throttleAngleCorrection = lrintf(cfg.throttle_correction_value * sinf(deg / (900.0f * M_PI / 2.0f)));
        }
    }
}
 800a566:	e03c      	b.n	800a5e2 <getEstimatedAttitude+0x4d2>
            int deg = lrintf(acosf(cosZ) * throttleAngleScale);
 800a568:	ed97 0a03 	vldr	s0, [r7, #12]
 800a56c:	f017 ffe2 	bl	8022534 <acosf>
 800a570:	eeb0 7a40 	vmov.f32	s14, s0
 800a574:	4b29      	ldr	r3, [pc, #164]	; (800a61c <getEstimatedAttitude+0x50c>)
 800a576:	edd3 7a00 	vldr	s15, [r3]
 800a57a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a57e:	eeb0 0a67 	vmov.f32	s0, s15
 800a582:	f017 ff51 	bl	8022428 <lrintf>
 800a586:	61f8      	str	r0, [r7, #28]
            if (deg > 900)
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800a58e:	dd02      	ble.n	800a596 <getEstimatedAttitude+0x486>
                deg = 900;
 800a590:	f44f 7361 	mov.w	r3, #900	; 0x384
 800a594:	61fb      	str	r3, [r7, #28]
            throttleAngleCorrection = lrintf(cfg.throttle_correction_value * sinf(deg / (900.0f * M_PI / 2.0f)));
 800a596:	4b1d      	ldr	r3, [pc, #116]	; (800a60c <getEstimatedAttitude+0x4fc>)
 800a598:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800a59c:	ee07 3a90 	vmov	s15, r3
 800a5a0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800a5a4:	69f8      	ldr	r0, [r7, #28]
 800a5a6:	f7f5 ff7b 	bl	80004a0 <__aeabi_i2d>
 800a5aa:	a311      	add	r3, pc, #68	; (adr r3, 800a5f0 <getEstimatedAttitude+0x4e0>)
 800a5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b0:	f7f6 f90a 	bl	80007c8 <__aeabi_ddiv>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	4610      	mov	r0, r2
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	f7f6 fabc 	bl	8000b38 <__aeabi_d2f>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	ee00 3a10 	vmov	s0, r3
 800a5c6:	f017 ff6f 	bl	80224a8 <sinf>
 800a5ca:	eef0 7a40 	vmov.f32	s15, s0
 800a5ce:	ee68 7a27 	vmul.f32	s15, s16, s15
 800a5d2:	eeb0 0a67 	vmov.f32	s0, s15
 800a5d6:	f017 ff27 	bl	8022428 <lrintf>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	b21a      	sxth	r2, r3
 800a5de:	4b0e      	ldr	r3, [pc, #56]	; (800a618 <getEstimatedAttitude+0x508>)
 800a5e0:	801a      	strh	r2, [r3, #0]
}
 800a5e2:	bf00      	nop
 800a5e4:	3728      	adds	r7, #40	; 0x28
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	ecbd 8b02 	vpop	{d8}
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	e50feba2 	.word	0xe50feba2
 800a5f4:	409616dd 	.word	0x409616dd
 800a5f8:	200017c4 	.word	0x200017c4
 800a5fc:	20000bbc 	.word	0x20000bbc
 800a600:	20001720 	.word	0x20001720
 800a604:	20001cb4 	.word	0x20001cb4
 800a608:	20000034 	.word	0x20000034
 800a60c:	20001128 	.word	0x20001128
 800a610:	2000179c 	.word	0x2000179c
 800a614:	3c75c28f 	.word	0x3c75c28f
 800a618:	20001770 	.word	0x20001770
 800a61c:	20001778 	.word	0x20001778

0800a620 <taskGetEstimatedAltitude>:

#ifdef BARO

uint16_t taskGetEstimatedAltitude(PifTask *p_task)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b08e      	sub	sp, #56	; 0x38
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
    static uint32_t previousT;
    uint32_t currentT = (*pif_act_timer1us)();
 800a628:	4b84      	ldr	r3, [pc, #528]	; (800a83c <taskGetEstimatedAltitude+0x21c>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4798      	blx	r3
 800a62e:	6338      	str	r0, [r7, #48]	; 0x30
    static float vel = 0.0f;
    static float accAlt = 0.0f;
    static int32_t lastBaroAlt;
    static int32_t baroGroundAltitude = 0;
    static int32_t baroGroundPressure = 0;
    int16_t tiltAngle = max(abs(angle[ROLL]), abs(angle[PITCH]));
 800a630:	4b83      	ldr	r3, [pc, #524]	; (800a840 <taskGetEstimatedAltitude+0x220>)
 800a632:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a636:	2b00      	cmp	r3, #0
 800a638:	bfb8      	it	lt
 800a63a:	425b      	neglt	r3, r3
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	4b80      	ldr	r3, [pc, #512]	; (800a840 <taskGetEstimatedAltitude+0x220>)
 800a640:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a644:	2b00      	cmp	r3, #0
 800a646:	bfb8      	it	lt
 800a648:	425b      	neglt	r3, r3
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	4293      	cmp	r3, r2
 800a64e:	bf38      	it	cc
 800a650:	4613      	movcc	r3, r2
 800a652:	b29b      	uxth	r3, r3
 800a654:	85fb      	strh	r3, [r7, #46]	; 0x2e

    (void)p_task;

    baroState = 0;
 800a656:	4b7b      	ldr	r3, [pc, #492]	; (800a844 <taskGetEstimatedAltitude+0x224>)
 800a658:	2200      	movs	r2, #0
 800a65a:	601a      	str	r2, [r3, #0]

    dTime = currentT - previousT;
 800a65c:	4b7a      	ldr	r3, [pc, #488]	; (800a848 <taskGetEstimatedAltitude+0x228>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a662:	1ad3      	subs	r3, r2, r3
 800a664:	62bb      	str	r3, [r7, #40]	; 0x28
    previousT = currentT;
 800a666:	4a78      	ldr	r2, [pc, #480]	; (800a848 <taskGetEstimatedAltitude+0x228>)
 800a668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66a:	6013      	str	r3, [r2, #0]

    if (calibratingB > 0) {
 800a66c:	4b77      	ldr	r3, [pc, #476]	; (800a84c <taskGetEstimatedAltitude+0x22c>)
 800a66e:	881b      	ldrh	r3, [r3, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d058      	beq.n	800a726 <taskGetEstimatedAltitude+0x106>
        baroGroundPressure -= baroGroundPressure / 8;
 800a674:	4b76      	ldr	r3, [pc, #472]	; (800a850 <taskGetEstimatedAltitude+0x230>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	da00      	bge.n	800a67e <taskGetEstimatedAltitude+0x5e>
 800a67c:	3307      	adds	r3, #7
 800a67e:	10db      	asrs	r3, r3, #3
 800a680:	425b      	negs	r3, r3
 800a682:	461a      	mov	r2, r3
 800a684:	4b72      	ldr	r3, [pc, #456]	; (800a850 <taskGetEstimatedAltitude+0x230>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4413      	add	r3, r2
 800a68a:	4a71      	ldr	r2, [pc, #452]	; (800a850 <taskGetEstimatedAltitude+0x230>)
 800a68c:	6013      	str	r3, [r2, #0]
        baroGroundPressure += baroPressureSum / (cfg.baro_tab_size - 1);
 800a68e:	4b71      	ldr	r3, [pc, #452]	; (800a854 <taskGetEstimatedAltitude+0x234>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a71      	ldr	r2, [pc, #452]	; (800a858 <taskGetEstimatedAltitude+0x238>)
 800a694:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a698:	3a01      	subs	r2, #1
 800a69a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a69e:	4a6c      	ldr	r2, [pc, #432]	; (800a850 <taskGetEstimatedAltitude+0x230>)
 800a6a0:	6812      	ldr	r2, [r2, #0]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	4b6a      	ldr	r3, [pc, #424]	; (800a850 <taskGetEstimatedAltitude+0x230>)
 800a6a8:	601a      	str	r2, [r3, #0]
        baroGroundAltitude = (1.0f - powf((baroGroundPressure / 8) / 101325.0f, 0.190295f)) * 4433000.0f;
 800a6aa:	4b69      	ldr	r3, [pc, #420]	; (800a850 <taskGetEstimatedAltitude+0x230>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	da00      	bge.n	800a6b4 <taskGetEstimatedAltitude+0x94>
 800a6b2:	3307      	adds	r3, #7
 800a6b4:	10db      	asrs	r3, r3, #3
 800a6b6:	ee07 3a90 	vmov	s15, r3
 800a6ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6be:	eddf 6a67 	vldr	s13, [pc, #412]	; 800a85c <taskGetEstimatedAltitude+0x23c>
 800a6c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a6c6:	eddf 0a66 	vldr	s1, [pc, #408]	; 800a860 <taskGetEstimatedAltitude+0x240>
 800a6ca:	eeb0 0a47 	vmov.f32	s0, s14
 800a6ce:	f017 ff5f 	bl	8022590 <powf>
 800a6d2:	eef0 7a40 	vmov.f32	s15, s0
 800a6d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6de:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800a864 <taskGetEstimatedAltitude+0x244>
 800a6e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a6e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a6ea:	ee17 2a90 	vmov	r2, s15
 800a6ee:	4b5e      	ldr	r3, [pc, #376]	; (800a868 <taskGetEstimatedAltitude+0x248>)
 800a6f0:	601a      	str	r2, [r3, #0]

        vel = 0;
 800a6f2:	4b5e      	ldr	r3, [pc, #376]	; (800a86c <taskGetEstimatedAltitude+0x24c>)
 800a6f4:	f04f 0200 	mov.w	r2, #0
 800a6f8:	601a      	str	r2, [r3, #0]
        accAlt = 0;
 800a6fa:	4b5d      	ldr	r3, [pc, #372]	; (800a870 <taskGetEstimatedAltitude+0x250>)
 800a6fc:	f04f 0200 	mov.w	r2, #0
 800a700:	601a      	str	r2, [r3, #0]
        calibratingB--;
 800a702:	4b52      	ldr	r3, [pc, #328]	; (800a84c <taskGetEstimatedAltitude+0x22c>)
 800a704:	881b      	ldrh	r3, [r3, #0]
 800a706:	3b01      	subs	r3, #1
 800a708:	b29a      	uxth	r2, r3
 800a70a:	4b50      	ldr	r3, [pc, #320]	; (800a84c <taskGetEstimatedAltitude+0x22c>)
 800a70c:	801a      	strh	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
        if (!calibratingB) {
 800a70e:	4b4f      	ldr	r3, [pc, #316]	; (800a84c <taskGetEstimatedAltitude+0x22c>)
 800a710:	881b      	ldrh	r3, [r3, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d107      	bne.n	800a726 <taskGetEstimatedAltitude+0x106>
        	pifLog_Printf(LT_INFO, "Baro: GP=%ld, GA=%ld", baroGroundPressure, baroGroundAltitude);
 800a716:	4b4e      	ldr	r3, [pc, #312]	; (800a850 <taskGetEstimatedAltitude+0x230>)
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	4b53      	ldr	r3, [pc, #332]	; (800a868 <taskGetEstimatedAltitude+0x248>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4955      	ldr	r1, [pc, #340]	; (800a874 <taskGetEstimatedAltitude+0x254>)
 800a720:	2002      	movs	r0, #2
 800a722:	f008 ff37 	bl	8013594 <pifLog_Printf>
#endif
    }

    // calculates height from ground via baro readings
    // see: https://github.com/diydrones/ardupilot/blob/master/libraries/AP_Baro/AP_Baro.cpp#L140
    BaroAlt_tmp = lrintf((1.0f - powf((float)(baroPressureSum / (cfg.baro_tab_size - 1)) / 101325.0f, 0.190295f)) * 4433000.0f); // in cm
 800a726:	4b4b      	ldr	r3, [pc, #300]	; (800a854 <taskGetEstimatedAltitude+0x234>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a4b      	ldr	r2, [pc, #300]	; (800a858 <taskGetEstimatedAltitude+0x238>)
 800a72c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a730:	3a01      	subs	r2, #1
 800a732:	fbb3 f3f2 	udiv	r3, r3, r2
 800a736:	ee07 3a90 	vmov	s15, r3
 800a73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a73e:	eddf 6a47 	vldr	s13, [pc, #284]	; 800a85c <taskGetEstimatedAltitude+0x23c>
 800a742:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a746:	eddf 0a46 	vldr	s1, [pc, #280]	; 800a860 <taskGetEstimatedAltitude+0x240>
 800a74a:	eeb0 0a47 	vmov.f32	s0, s14
 800a74e:	f017 ff1f 	bl	8022590 <powf>
 800a752:	eef0 7a40 	vmov.f32	s15, s0
 800a756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a75a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a75e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800a864 <taskGetEstimatedAltitude+0x244>
 800a762:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a766:	eeb0 0a67 	vmov.f32	s0, s15
 800a76a:	f017 fe5d 	bl	8022428 <lrintf>
 800a76e:	6278      	str	r0, [r7, #36]	; 0x24
    BaroAlt_tmp -= baroGroundAltitude;
 800a770:	4b3d      	ldr	r3, [pc, #244]	; (800a868 <taskGetEstimatedAltitude+0x248>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a776:	1ad3      	subs	r3, r2, r3
 800a778:	627b      	str	r3, [r7, #36]	; 0x24
    BaroAlt = lrintf((float)BaroAlt * cfg.baro_noise_lpf + (float)BaroAlt_tmp * (1.0f - cfg.baro_noise_lpf)); // additional LPF to reduce baro noise
 800a77a:	4b3f      	ldr	r3, [pc, #252]	; (800a878 <taskGetEstimatedAltitude+0x258>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	ee07 3a90 	vmov	s15, r3
 800a782:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a786:	4b34      	ldr	r3, [pc, #208]	; (800a858 <taskGetEstimatedAltitude+0x238>)
 800a788:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a78c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a792:	ee07 3a90 	vmov	s15, r3
 800a796:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a79a:	4b2f      	ldr	r3, [pc, #188]	; (800a858 <taskGetEstimatedAltitude+0x238>)
 800a79c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a7a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a7a4:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a7a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a7ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7b0:	eeb0 0a67 	vmov.f32	s0, s15
 800a7b4:	f017 fe38 	bl	8022428 <lrintf>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	4a2f      	ldr	r2, [pc, #188]	; (800a878 <taskGetEstimatedAltitude+0x258>)
 800a7bc:	6013      	str	r3, [r2, #0]

    // calculate sonar altitude only if the sonar is facing downwards(<25deg)
    if (tiltAngle > 250 || sonarDistance == -1)
 800a7be:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a7c2:	2bfa      	cmp	r3, #250	; 0xfa
 800a7c4:	dc04      	bgt.n	800a7d0 <taskGetEstimatedAltitude+0x1b0>
 800a7c6:	4b2d      	ldr	r3, [pc, #180]	; (800a87c <taskGetEstimatedAltitude+0x25c>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7ce:	d104      	bne.n	800a7da <taskGetEstimatedAltitude+0x1ba>
        sonarAlt = -1;
 800a7d0:	4b2b      	ldr	r3, [pc, #172]	; (800a880 <taskGetEstimatedAltitude+0x260>)
 800a7d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7d6:	601a      	str	r2, [r3, #0]
 800a7d8:	e01b      	b.n	800a812 <taskGetEstimatedAltitude+0x1f2>
    else
        sonarAlt = sonarDistance * (900.0f - tiltAngle) / 900.0f;
 800a7da:	4b28      	ldr	r3, [pc, #160]	; (800a87c <taskGetEstimatedAltitude+0x25c>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	ee07 3a90 	vmov	s15, r3
 800a7e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a7e6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a7ea:	ee07 3a90 	vmov	s15, r3
 800a7ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7f2:	eddf 6a24 	vldr	s13, [pc, #144]	; 800a884 <taskGetEstimatedAltitude+0x264>
 800a7f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a7fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7fe:	eddf 6a21 	vldr	s13, [pc, #132]	; 800a884 <taskGetEstimatedAltitude+0x264>
 800a802:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a806:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a80a:	ee17 2a90 	vmov	r2, s15
 800a80e:	4b1c      	ldr	r3, [pc, #112]	; (800a880 <taskGetEstimatedAltitude+0x260>)
 800a810:	601a      	str	r2, [r3, #0]

    // do sonarAlt and baroAlt fusion
    if (sonarAlt > 0 && sonarAlt < 200) {
 800a812:	4b1b      	ldr	r3, [pc, #108]	; (800a880 <taskGetEstimatedAltitude+0x260>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	dd38      	ble.n	800a88c <taskGetEstimatedAltitude+0x26c>
 800a81a:	4b19      	ldr	r3, [pc, #100]	; (800a880 <taskGetEstimatedAltitude+0x260>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2bc7      	cmp	r3, #199	; 0xc7
 800a820:	dc34      	bgt.n	800a88c <taskGetEstimatedAltitude+0x26c>
        baroAlt_offset = BaroAlt - sonarAlt;
 800a822:	4b15      	ldr	r3, [pc, #84]	; (800a878 <taskGetEstimatedAltitude+0x258>)
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	4b16      	ldr	r3, [pc, #88]	; (800a880 <taskGetEstimatedAltitude+0x260>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	4a16      	ldr	r2, [pc, #88]	; (800a888 <taskGetEstimatedAltitude+0x268>)
 800a82e:	6013      	str	r3, [r2, #0]
        BaroAlt = sonarAlt;
 800a830:	4b13      	ldr	r3, [pc, #76]	; (800a880 <taskGetEstimatedAltitude+0x260>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a10      	ldr	r2, [pc, #64]	; (800a878 <taskGetEstimatedAltitude+0x258>)
 800a836:	6013      	str	r3, [r2, #0]
 800a838:	e064      	b.n	800a904 <taskGetEstimatedAltitude+0x2e4>
 800a83a:	bf00      	nop
 800a83c:	200020f0 	.word	0x200020f0
 800a840:	20001790 	.word	0x20001790
 800a844:	20001748 	.word	0x20001748
 800a848:	200017d0 	.word	0x200017d0
 800a84c:	20001cb0 	.word	0x20001cb0
 800a850:	200017d4 	.word	0x200017d4
 800a854:	20001740 	.word	0x20001740
 800a858:	20001128 	.word	0x20001128
 800a85c:	47c5e680 	.word	0x47c5e680
 800a860:	3e42dcb1 	.word	0x3e42dcb1
 800a864:	4a8748d0 	.word	0x4a8748d0
 800a868:	200017d8 	.word	0x200017d8
 800a86c:	200017dc 	.word	0x200017dc
 800a870:	200017e0 	.word	0x200017e0
 800a874:	08026324 	.word	0x08026324
 800a878:	20001744 	.word	0x20001744
 800a87c:	2000002c 	.word	0x2000002c
 800a880:	20000030 	.word	0x20000030
 800a884:	44610000 	.word	0x44610000
 800a888:	20001750 	.word	0x20001750
    } else {
        BaroAlt -= baroAlt_offset;
 800a88c:	4ba0      	ldr	r3, [pc, #640]	; (800ab10 <taskGetEstimatedAltitude+0x4f0>)
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	4ba0      	ldr	r3, [pc, #640]	; (800ab14 <taskGetEstimatedAltitude+0x4f4>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	4a9e      	ldr	r2, [pc, #632]	; (800ab10 <taskGetEstimatedAltitude+0x4f0>)
 800a898:	6013      	str	r3, [r2, #0]
        if (sonarAlt > 0) {
 800a89a:	4b9f      	ldr	r3, [pc, #636]	; (800ab18 <taskGetEstimatedAltitude+0x4f8>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	dd30      	ble.n	800a904 <taskGetEstimatedAltitude+0x2e4>
            sonarTransition = (300 - sonarAlt) / 100.0f;
 800a8a2:	4b9d      	ldr	r3, [pc, #628]	; (800ab18 <taskGetEstimatedAltitude+0x4f8>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 800a8aa:	ee07 3a90 	vmov	s15, r3
 800a8ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8b2:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800ab1c <taskGetEstimatedAltitude+0x4fc>
 800a8b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a8ba:	4b99      	ldr	r3, [pc, #612]	; (800ab20 <taskGetEstimatedAltitude+0x500>)
 800a8bc:	edc3 7a00 	vstr	s15, [r3]
            BaroAlt = sonarAlt * sonarTransition + BaroAlt * (1.0f - sonarTransition);
 800a8c0:	4b95      	ldr	r3, [pc, #596]	; (800ab18 <taskGetEstimatedAltitude+0x4f8>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	ee07 3a90 	vmov	s15, r3
 800a8c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8cc:	4b94      	ldr	r3, [pc, #592]	; (800ab20 <taskGetEstimatedAltitude+0x500>)
 800a8ce:	edd3 7a00 	vldr	s15, [r3]
 800a8d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8d6:	4b8e      	ldr	r3, [pc, #568]	; (800ab10 <taskGetEstimatedAltitude+0x4f0>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	ee07 3a90 	vmov	s15, r3
 800a8de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a8e2:	4b8f      	ldr	r3, [pc, #572]	; (800ab20 <taskGetEstimatedAltitude+0x500>)
 800a8e4:	edd3 7a00 	vldr	s15, [r3]
 800a8e8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a8ec:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a8f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a8f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a8fc:	ee17 2a90 	vmov	r2, s15
 800a900:	4b83      	ldr	r3, [pc, #524]	; (800ab10 <taskGetEstimatedAltitude+0x4f0>)
 800a902:	601a      	str	r2, [r3, #0]
        }
    }

    dt = accTimeSum * 1e-6f; // delta acc reading time in seconds
 800a904:	4b87      	ldr	r3, [pc, #540]	; (800ab24 <taskGetEstimatedAltitude+0x504>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	ee07 3a90 	vmov	s15, r3
 800a90c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a910:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800ab28 <taskGetEstimatedAltitude+0x508>
 800a914:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a918:	edc7 7a08 	vstr	s15, [r7, #32]

    // Integrator - velocity, cm/sec
    accZ_tmp = (float)accSum[2] / (float)accSumCount;
 800a91c:	4b83      	ldr	r3, [pc, #524]	; (800ab2c <taskGetEstimatedAltitude+0x50c>)
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	ee07 3a90 	vmov	s15, r3
 800a924:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a928:	4b81      	ldr	r3, [pc, #516]	; (800ab30 <taskGetEstimatedAltitude+0x510>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	ee07 3a90 	vmov	s15, r3
 800a930:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a938:	edc7 7a07 	vstr	s15, [r7, #28]
    vel_acc = accZ_tmp * accVelScale * (float)accTimeSum;
 800a93c:	4b7d      	ldr	r3, [pc, #500]	; (800ab34 <taskGetEstimatedAltitude+0x514>)
 800a93e:	ed93 7a00 	vldr	s14, [r3]
 800a942:	edd7 7a07 	vldr	s15, [r7, #28]
 800a946:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a94a:	4b76      	ldr	r3, [pc, #472]	; (800ab24 <taskGetEstimatedAltitude+0x504>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	ee07 3a90 	vmov	s15, r3
 800a952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a95a:	edc7 7a06 	vstr	s15, [r7, #24]

    // Integrator - Altitude in cm
    accAlt += (vel_acc * 0.5f) * dt + vel * dt;                                         // integrate velocity to get distance (x= a/2 * t^2)
 800a95e:	edd7 7a06 	vldr	s15, [r7, #24]
 800a962:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a966:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a96a:	edd7 7a08 	vldr	s15, [r7, #32]
 800a96e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a972:	4b71      	ldr	r3, [pc, #452]	; (800ab38 <taskGetEstimatedAltitude+0x518>)
 800a974:	edd3 6a00 	vldr	s13, [r3]
 800a978:	edd7 7a08 	vldr	s15, [r7, #32]
 800a97c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a980:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a984:	4b6d      	ldr	r3, [pc, #436]	; (800ab3c <taskGetEstimatedAltitude+0x51c>)
 800a986:	edd3 7a00 	vldr	s15, [r3]
 800a98a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a98e:	4b6b      	ldr	r3, [pc, #428]	; (800ab3c <taskGetEstimatedAltitude+0x51c>)
 800a990:	edc3 7a00 	vstr	s15, [r3]
    accAlt = accAlt * cfg.baro_cf_alt + (float)BaroAlt * (1.0f - cfg.baro_cf_alt);      // complementary filter for altitude estimation (baro & acc)
 800a994:	4b6a      	ldr	r3, [pc, #424]	; (800ab40 <taskGetEstimatedAltitude+0x520>)
 800a996:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800a99a:	4b68      	ldr	r3, [pc, #416]	; (800ab3c <taskGetEstimatedAltitude+0x51c>)
 800a99c:	edd3 7a00 	vldr	s15, [r3]
 800a9a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9a4:	4b5a      	ldr	r3, [pc, #360]	; (800ab10 <taskGetEstimatedAltitude+0x4f0>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	ee07 3a90 	vmov	s15, r3
 800a9ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a9b0:	4b63      	ldr	r3, [pc, #396]	; (800ab40 <taskGetEstimatedAltitude+0x520>)
 800a9b2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800a9b6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a9ba:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a9be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a9c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9c6:	4b5d      	ldr	r3, [pc, #372]	; (800ab3c <taskGetEstimatedAltitude+0x51c>)
 800a9c8:	edc3 7a00 	vstr	s15, [r3]

    // when the sonar is in his best range
    if (sonarAlt > 0 && sonarAlt < 200)
 800a9cc:	4b52      	ldr	r3, [pc, #328]	; (800ab18 <taskGetEstimatedAltitude+0x4f8>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	dd08      	ble.n	800a9e6 <taskGetEstimatedAltitude+0x3c6>
 800a9d4:	4b50      	ldr	r3, [pc, #320]	; (800ab18 <taskGetEstimatedAltitude+0x4f8>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2bc7      	cmp	r3, #199	; 0xc7
 800a9da:	dc04      	bgt.n	800a9e6 <taskGetEstimatedAltitude+0x3c6>
        EstAlt = BaroAlt;
 800a9dc:	4b4c      	ldr	r3, [pc, #304]	; (800ab10 <taskGetEstimatedAltitude+0x4f0>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a58      	ldr	r2, [pc, #352]	; (800ab44 <taskGetEstimatedAltitude+0x524>)
 800a9e2:	6013      	str	r3, [r2, #0]
 800a9e4:	e008      	b.n	800a9f8 <taskGetEstimatedAltitude+0x3d8>
    else
        EstAlt = accAlt;
 800a9e6:	4b55      	ldr	r3, [pc, #340]	; (800ab3c <taskGetEstimatedAltitude+0x51c>)
 800a9e8:	edd3 7a00 	vldr	s15, [r3]
 800a9ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a9f0:	ee17 2a90 	vmov	r2, s15
 800a9f4:	4b53      	ldr	r3, [pc, #332]	; (800ab44 <taskGetEstimatedAltitude+0x524>)
 800a9f6:	601a      	str	r2, [r3, #0]

    vel += vel_acc;
 800a9f8:	4b4f      	ldr	r3, [pc, #316]	; (800ab38 <taskGetEstimatedAltitude+0x518>)
 800a9fa:	ed93 7a00 	vldr	s14, [r3]
 800a9fe:	edd7 7a06 	vldr	s15, [r7, #24]
 800aa02:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa06:	4b4c      	ldr	r3, [pc, #304]	; (800ab38 <taskGetEstimatedAltitude+0x518>)
 800aa08:	edc3 7a00 	vstr	s15, [r3]
    debug[0] = accSum[2] / accSumCount; // acceleration
    debug[1] = vel;                     // velocity
    debug[2] = accAlt;                  // height
#endif

    accSum_reset();
 800aa0c:	f7ff faae 	bl	8009f6c <accSum_reset>

    baroVel = (BaroAlt - lastBaroAlt) * 1000000.0f / dTime;
 800aa10:	4b3f      	ldr	r3, [pc, #252]	; (800ab10 <taskGetEstimatedAltitude+0x4f0>)
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	4b4c      	ldr	r3, [pc, #304]	; (800ab48 <taskGetEstimatedAltitude+0x528>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	1ad3      	subs	r3, r2, r3
 800aa1a:	ee07 3a90 	vmov	s15, r3
 800aa1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa22:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800ab4c <taskGetEstimatedAltitude+0x52c>
 800aa26:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2c:	ee07 3a90 	vmov	s15, r3
 800aa30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aa34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa3c:	ee17 3a90 	vmov	r3, s15
 800aa40:	617b      	str	r3, [r7, #20]
    lastBaroAlt = BaroAlt;
 800aa42:	4b33      	ldr	r3, [pc, #204]	; (800ab10 <taskGetEstimatedAltitude+0x4f0>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a40      	ldr	r2, [pc, #256]	; (800ab48 <taskGetEstimatedAltitude+0x528>)
 800aa48:	6013      	str	r3, [r2, #0]

    baroVel = constrain(baroVel, -1500, 1500);    // constrain baro velocity +/- 1500cm/s
 800aa4a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800aa4e:	4940      	ldr	r1, [pc, #256]	; (800ab50 <taskGetEstimatedAltitude+0x530>)
 800aa50:	6978      	ldr	r0, [r7, #20]
 800aa52:	f7f9 f94b 	bl	8003cec <constrain>
 800aa56:	6178      	str	r0, [r7, #20]
    baroVel = applyDeadband(baroVel, 10);         // to reduce noise near zero
 800aa58:	210a      	movs	r1, #10
 800aa5a:	6978      	ldr	r0, [r7, #20]
 800aa5c:	f7ff f934 	bl	8009cc8 <applyDeadband>
 800aa60:	6178      	str	r0, [r7, #20]

    // apply Complimentary Filter to keep the calculated velocity based on baro velocity (i.e. near real velocity).
    // By using CF it's possible to correct the drift of integrated accZ (velocity) without loosing the phase, i.e without delay
    vel = vel * cfg.baro_cf_vel + baroVel * (1 - cfg.baro_cf_vel);
 800aa62:	4b37      	ldr	r3, [pc, #220]	; (800ab40 <taskGetEstimatedAltitude+0x520>)
 800aa64:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800aa68:	4b33      	ldr	r3, [pc, #204]	; (800ab38 <taskGetEstimatedAltitude+0x518>)
 800aa6a:	edd3 7a00 	vldr	s15, [r3]
 800aa6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	ee07 3a90 	vmov	s15, r3
 800aa78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800aa7c:	4b30      	ldr	r3, [pc, #192]	; (800ab40 <taskGetEstimatedAltitude+0x520>)
 800aa7e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800aa82:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800aa86:	ee76 7a67 	vsub.f32	s15, s12, s15
 800aa8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa92:	4b29      	ldr	r3, [pc, #164]	; (800ab38 <taskGetEstimatedAltitude+0x518>)
 800aa94:	edc3 7a00 	vstr	s15, [r3]
    vel_tmp = lrintf(vel);
 800aa98:	4b27      	ldr	r3, [pc, #156]	; (800ab38 <taskGetEstimatedAltitude+0x518>)
 800aa9a:	edd3 7a00 	vldr	s15, [r3]
 800aa9e:	eeb0 0a67 	vmov.f32	s0, s15
 800aaa2:	f017 fcc1 	bl	8022428 <lrintf>
 800aaa6:	6138      	str	r0, [r7, #16]

    // set vario
    vario = applyDeadband(vel_tmp, 5);
 800aaa8:	2105      	movs	r1, #5
 800aaaa:	6938      	ldr	r0, [r7, #16]
 800aaac:	f7ff f90c 	bl	8009cc8 <applyDeadband>
 800aab0:	4603      	mov	r3, r0
 800aab2:	4a28      	ldr	r2, [pc, #160]	; (800ab54 <taskGetEstimatedAltitude+0x534>)
 800aab4:	6013      	str	r3, [r2, #0]

    if (tiltAngle < 800) { // only calculate pid if the copters thrust is facing downwards(<80deg)
 800aab6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800aaba:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800aabe:	f280 80b2 	bge.w	800ac26 <taskGetEstimatedAltitude+0x606>
        // Altitude P-Controller
        if (!velocityControl) {
 800aac2:	4b25      	ldr	r3, [pc, #148]	; (800ab58 <taskGetEstimatedAltitude+0x538>)
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d14e      	bne.n	800ab68 <taskGetEstimatedAltitude+0x548>
            error = constrain(AltHold - EstAlt, -500, 500);
 800aaca:	4b24      	ldr	r3, [pc, #144]	; (800ab5c <taskGetEstimatedAltitude+0x53c>)
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	4b1d      	ldr	r3, [pc, #116]	; (800ab44 <taskGetEstimatedAltitude+0x524>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	1ad3      	subs	r3, r2, r3
 800aad4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800aad8:	4921      	ldr	r1, [pc, #132]	; (800ab60 <taskGetEstimatedAltitude+0x540>)
 800aada:	4618      	mov	r0, r3
 800aadc:	f7f9 f906 	bl	8003cec <constrain>
 800aae0:	60f8      	str	r0, [r7, #12]
            error = applyDeadband(error, 10);       // remove small P parametr to reduce noise near zero position
 800aae2:	210a      	movs	r1, #10
 800aae4:	68f8      	ldr	r0, [r7, #12]
 800aae6:	f7ff f8ef 	bl	8009cc8 <applyDeadband>
 800aaea:	60f8      	str	r0, [r7, #12]
            setVel = constrain((cfg.P8[PIDALT] * error / 128), -300, +300); // limit velocity to +/- 3 m/s
 800aaec:	4b14      	ldr	r3, [pc, #80]	; (800ab40 <taskGetEstimatedAltitude+0x520>)
 800aaee:	791b      	ldrb	r3, [r3, #4]
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	fb02 f303 	mul.w	r3, r2, r3
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	da00      	bge.n	800aafe <taskGetEstimatedAltitude+0x4de>
 800aafc:	337f      	adds	r3, #127	; 0x7f
 800aafe:	11db      	asrs	r3, r3, #7
 800ab00:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ab04:	4917      	ldr	r1, [pc, #92]	; (800ab64 <taskGetEstimatedAltitude+0x544>)
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7f9 f8f0 	bl	8003cec <constrain>
 800ab0c:	6378      	str	r0, [r7, #52]	; 0x34
 800ab0e:	e02e      	b.n	800ab6e <taskGetEstimatedAltitude+0x54e>
 800ab10:	20001744 	.word	0x20001744
 800ab14:	20001750 	.word	0x20001750
 800ab18:	20000030 	.word	0x20000030
 800ab1c:	42c80000 	.word	0x42c80000
 800ab20:	2000174c 	.word	0x2000174c
 800ab24:	20001734 	.word	0x20001734
 800ab28:	358637bd 	.word	0x358637bd
 800ab2c:	20001728 	.word	0x20001728
 800ab30:	20001738 	.word	0x20001738
 800ab34:	20001774 	.word	0x20001774
 800ab38:	200017dc 	.word	0x200017dc
 800ab3c:	200017e0 	.word	0x200017e0
 800ab40:	20001128 	.word	0x20001128
 800ab44:	20001754 	.word	0x20001754
 800ab48:	200017e4 	.word	0x200017e4
 800ab4c:	49742400 	.word	0x49742400
 800ab50:	fffffa24 	.word	0xfffffa24
 800ab54:	2000176c 	.word	0x2000176c
 800ab58:	20001764 	.word	0x20001764
 800ab5c:	2000175c 	.word	0x2000175c
 800ab60:	fffffe0c 	.word	0xfffffe0c
 800ab64:	fffffed4 	.word	0xfffffed4
        } else {
            setVel = setVelocity;
 800ab68:	4b34      	ldr	r3, [pc, #208]	; (800ac3c <taskGetEstimatedAltitude+0x61c>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // Velocity PID-Controller
        // P
        error = setVel - vel_tmp;
 800ab6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	60fb      	str	r3, [r7, #12]
        BaroPID = constrain((cfg.P8[PIDVEL] * error / 32), -300, +300);
 800ab76:	4b32      	ldr	r3, [pc, #200]	; (800ac40 <taskGetEstimatedAltitude+0x620>)
 800ab78:	7a9b      	ldrb	r3, [r3, #10]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	fb02 f303 	mul.w	r3, r2, r3
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	da00      	bge.n	800ab88 <taskGetEstimatedAltitude+0x568>
 800ab86:	331f      	adds	r3, #31
 800ab88:	115b      	asrs	r3, r3, #5
 800ab8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ab8e:	492d      	ldr	r1, [pc, #180]	; (800ac44 <taskGetEstimatedAltitude+0x624>)
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7f9 f8ab 	bl	8003cec <constrain>
 800ab96:	4603      	mov	r3, r0
 800ab98:	4a2b      	ldr	r2, [pc, #172]	; (800ac48 <taskGetEstimatedAltitude+0x628>)
 800ab9a:	6013      	str	r3, [r2, #0]

        // I
        errorVelocityI += (cfg.I8[PIDVEL] * error);
 800ab9c:	4b28      	ldr	r3, [pc, #160]	; (800ac40 <taskGetEstimatedAltitude+0x620>)
 800ab9e:	7d1b      	ldrb	r3, [r3, #20]
 800aba0:	461a      	mov	r2, r3
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	fb03 f202 	mul.w	r2, r3, r2
 800aba8:	4b28      	ldr	r3, [pc, #160]	; (800ac4c <taskGetEstimatedAltitude+0x62c>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4413      	add	r3, r2
 800abae:	4a27      	ldr	r2, [pc, #156]	; (800ac4c <taskGetEstimatedAltitude+0x62c>)
 800abb0:	6013      	str	r3, [r2, #0]
        errorVelocityI = constrain(errorVelocityI, -(8196 * 200), (8196 * 200));
 800abb2:	4b26      	ldr	r3, [pc, #152]	; (800ac4c <taskGetEstimatedAltitude+0x62c>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a26      	ldr	r2, [pc, #152]	; (800ac50 <taskGetEstimatedAltitude+0x630>)
 800abb8:	4926      	ldr	r1, [pc, #152]	; (800ac54 <taskGetEstimatedAltitude+0x634>)
 800abba:	4618      	mov	r0, r3
 800abbc:	f7f9 f896 	bl	8003cec <constrain>
 800abc0:	4603      	mov	r3, r0
 800abc2:	4a22      	ldr	r2, [pc, #136]	; (800ac4c <taskGetEstimatedAltitude+0x62c>)
 800abc4:	6013      	str	r3, [r2, #0]
        BaroPID += errorVelocityI / 8196;     // I in the range of +/-200
 800abc6:	4b21      	ldr	r3, [pc, #132]	; (800ac4c <taskGetEstimatedAltitude+0x62c>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a23      	ldr	r2, [pc, #140]	; (800ac58 <taskGetEstimatedAltitude+0x638>)
 800abcc:	fb82 1203 	smull	r1, r2, r2, r3
 800abd0:	10d2      	asrs	r2, r2, #3
 800abd2:	17db      	asrs	r3, r3, #31
 800abd4:	1ad2      	subs	r2, r2, r3
 800abd6:	4b1c      	ldr	r3, [pc, #112]	; (800ac48 <taskGetEstimatedAltitude+0x628>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4413      	add	r3, r2
 800abdc:	4a1a      	ldr	r2, [pc, #104]	; (800ac48 <taskGetEstimatedAltitude+0x628>)
 800abde:	6013      	str	r3, [r2, #0]

        // D
        BaroPID -= constrain(cfg.D8[PIDVEL] * (accZ_tmp + accZ_old) / 512, -150, 150);
 800abe0:	4b17      	ldr	r3, [pc, #92]	; (800ac40 <taskGetEstimatedAltitude+0x620>)
 800abe2:	7f9b      	ldrb	r3, [r3, #30]
 800abe4:	ee07 3a90 	vmov	s15, r3
 800abe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800abec:	4b1b      	ldr	r3, [pc, #108]	; (800ac5c <taskGetEstimatedAltitude+0x63c>)
 800abee:	edd3 6a00 	vldr	s13, [r3]
 800abf2:	edd7 7a07 	vldr	s15, [r7, #28]
 800abf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abfe:	eddf 6a18 	vldr	s13, [pc, #96]	; 800ac60 <taskGetEstimatedAltitude+0x640>
 800ac02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ac06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac0a:	2296      	movs	r2, #150	; 0x96
 800ac0c:	f06f 0195 	mvn.w	r1, #149	; 0x95
 800ac10:	ee17 0a90 	vmov	r0, s15
 800ac14:	f7f9 f86a 	bl	8003cec <constrain>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	4b0b      	ldr	r3, [pc, #44]	; (800ac48 <taskGetEstimatedAltitude+0x628>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	1a9b      	subs	r3, r3, r2
 800ac20:	4a09      	ldr	r2, [pc, #36]	; (800ac48 <taskGetEstimatedAltitude+0x628>)
 800ac22:	6013      	str	r3, [r2, #0]
 800ac24:	e002      	b.n	800ac2c <taskGetEstimatedAltitude+0x60c>

    } else {
        BaroPID = 0;
 800ac26:	4b08      	ldr	r3, [pc, #32]	; (800ac48 <taskGetEstimatedAltitude+0x628>)
 800ac28:	2200      	movs	r2, #0
 800ac2a:	601a      	str	r2, [r3, #0]
    }

    accZ_old = accZ_tmp;
 800ac2c:	4a0b      	ldr	r2, [pc, #44]	; (800ac5c <taskGetEstimatedAltitude+0x63c>)
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	6013      	str	r3, [r2, #0]

    return 1;
 800ac32:	2301      	movs	r3, #1
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3738      	adds	r7, #56	; 0x38
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	20001760 	.word	0x20001760
 800ac40:	20001128 	.word	0x20001128
 800ac44:	fffffed4 	.word	0xfffffed4
 800ac48:	20001758 	.word	0x20001758
 800ac4c:	20001768 	.word	0x20001768
 800ac50:	00190320 	.word	0x00190320
 800ac54:	ffe6fce0 	.word	0xffe6fce0
 800ac58:	003ff801 	.word	0x003ff801
 800ac5c:	200017e8 	.word	0x200017e8
 800ac60:	44000000 	.word	0x44000000

0800ac64 <servoMiddle>:
    { 0, NULL },                // MULTITYPE_CUSTOM_PLANE
};


int16_t servoMiddle(int nr)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
    // Normally, servo.middle is a value between 1000..2000, but for the purposes of stupid, if it's less than
    // the number of RC channels, it means the center value is taken FROM that RC channel (by its index)
    if (cfg.servoConf[nr].middle < RC_CHANS && nr < MAX_SERVOS)
 800ac6c:	4916      	ldr	r1, [pc, #88]	; (800acc8 <servoMiddle+0x64>)
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	4613      	mov	r3, r2
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	4413      	add	r3, r2
 800ac76:	005b      	lsls	r3, r3, #1
 800ac78:	440b      	add	r3, r1
 800ac7a:	33bc      	adds	r3, #188	; 0xbc
 800ac7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac80:	2b11      	cmp	r3, #17
 800ac82:	dc11      	bgt.n	800aca8 <servoMiddle+0x44>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2b07      	cmp	r3, #7
 800ac88:	dc0e      	bgt.n	800aca8 <servoMiddle+0x44>
        return rcData[cfg.servoConf[nr].middle];
 800ac8a:	490f      	ldr	r1, [pc, #60]	; (800acc8 <servoMiddle+0x64>)
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	4613      	mov	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4413      	add	r3, r2
 800ac94:	005b      	lsls	r3, r3, #1
 800ac96:	440b      	add	r3, r1
 800ac98:	33bc      	adds	r3, #188	; 0xbc
 800ac9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac9e:	461a      	mov	r2, r3
 800aca0:	4b0a      	ldr	r3, [pc, #40]	; (800accc <servoMiddle+0x68>)
 800aca2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800aca6:	e009      	b.n	800acbc <servoMiddle+0x58>
    else
        return cfg.servoConf[nr].middle;
 800aca8:	4907      	ldr	r1, [pc, #28]	; (800acc8 <servoMiddle+0x64>)
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	4613      	mov	r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	005b      	lsls	r3, r3, #1
 800acb4:	440b      	add	r3, r1
 800acb6:	33bc      	adds	r3, #188	; 0xbc
 800acb8:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr
 800acc8:	20001128 	.word	0x20001128
 800accc:	200019c4 	.word	0x200019c4

0800acd0 <servoDirection>:

int servoDirection(int nr, int lr)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
    // load the direction from the direction field of the servo
    if (cfg.servoConf[nr].direction & (1 << lr))
 800acda:	490d      	ldr	r1, [pc, #52]	; (800ad10 <servoDirection+0x40>)
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	4613      	mov	r3, r2
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	4413      	add	r3, r2
 800ace4:	005b      	lsls	r3, r3, #1
 800ace6:	440b      	add	r3, r1
 800ace8:	33c0      	adds	r3, #192	; 0xc0
 800acea:	881b      	ldrh	r3, [r3, #0]
 800acec:	461a      	mov	r2, r3
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	fa42 f303 	asr.w	r3, r2, r3
 800acf4:	f003 0301 	and.w	r3, r3, #1
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d002      	beq.n	800ad02 <servoDirection+0x32>
        return -1;
 800acfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad00:	e000      	b.n	800ad04 <servoDirection+0x34>
    else
        return 1;
 800ad02:	2301      	movs	r3, #1
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr
 800ad10:	20001128 	.word	0x20001128

0800ad14 <loadCustomServoMixer>:

void loadCustomServoMixer(void)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
    uint8_t i;

    // reset settings
    numberRules = 0;
 800ad1a:	4b1e      	ldr	r3, [pc, #120]	; (800ad94 <loadCustomServoMixer+0x80>)
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	701a      	strb	r2, [r3, #0]
    memset(currentServoMixer, 0, sizeof(currentServoMixer));
 800ad20:	2270      	movs	r2, #112	; 0x70
 800ad22:	2100      	movs	r1, #0
 800ad24:	481c      	ldr	r0, [pc, #112]	; (800ad98 <loadCustomServoMixer+0x84>)
 800ad26:	f017 f85d 	bl	8021de4 <memset>

    // load custom mixer into currentServoMixer
    for (i = 0; i < MAX_SERVO_RULES; i++) {
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	71fb      	strb	r3, [r7, #7]
 800ad2e:	e028      	b.n	800ad82 <loadCustomServoMixer+0x6e>
        // check if done
        if (mcfg.customServoMixer[i].rate == 0)
 800ad30:	79fa      	ldrb	r2, [r7, #7]
 800ad32:	491a      	ldr	r1, [pc, #104]	; (800ad9c <loadCustomServoMixer+0x88>)
 800ad34:	4613      	mov	r3, r2
 800ad36:	00db      	lsls	r3, r3, #3
 800ad38:	1a9b      	subs	r3, r3, r2
 800ad3a:	440b      	add	r3, r1
 800ad3c:	33d2      	adds	r3, #210	; 0xd2
 800ad3e:	f993 3000 	ldrsb.w	r3, [r3]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d021      	beq.n	800ad8a <loadCustomServoMixer+0x76>
            break;
        currentServoMixer[i] = mcfg.customServoMixer[i];
 800ad46:	79fa      	ldrb	r2, [r7, #7]
 800ad48:	79f9      	ldrb	r1, [r7, #7]
 800ad4a:	4813      	ldr	r0, [pc, #76]	; (800ad98 <loadCustomServoMixer+0x84>)
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	00db      	lsls	r3, r3, #3
 800ad50:	1a5b      	subs	r3, r3, r1
 800ad52:	4418      	add	r0, r3
 800ad54:	4911      	ldr	r1, [pc, #68]	; (800ad9c <loadCustomServoMixer+0x88>)
 800ad56:	4613      	mov	r3, r2
 800ad58:	00db      	lsls	r3, r3, #3
 800ad5a:	1a9b      	subs	r3, r3, r2
 800ad5c:	440b      	add	r3, r1
 800ad5e:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800ad62:	4603      	mov	r3, r0
 800ad64:	6811      	ldr	r1, [r2, #0]
 800ad66:	6019      	str	r1, [r3, #0]
 800ad68:	8891      	ldrh	r1, [r2, #4]
 800ad6a:	7992      	ldrb	r2, [r2, #6]
 800ad6c:	8099      	strh	r1, [r3, #4]
 800ad6e:	719a      	strb	r2, [r3, #6]
        numberRules++;
 800ad70:	4b08      	ldr	r3, [pc, #32]	; (800ad94 <loadCustomServoMixer+0x80>)
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	3301      	adds	r3, #1
 800ad76:	b2da      	uxtb	r2, r3
 800ad78:	4b06      	ldr	r3, [pc, #24]	; (800ad94 <loadCustomServoMixer+0x80>)
 800ad7a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MAX_SERVO_RULES; i++) {
 800ad7c:	79fb      	ldrb	r3, [r7, #7]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	71fb      	strb	r3, [r7, #7]
 800ad82:	79fb      	ldrb	r3, [r7, #7]
 800ad84:	2b0f      	cmp	r3, #15
 800ad86:	d9d3      	bls.n	800ad30 <loadCustomServoMixer+0x1c>
    }
}
 800ad88:	e000      	b.n	800ad8c <loadCustomServoMixer+0x78>
            break;
 800ad8a:	bf00      	nop
}
 800ad8c:	bf00      	nop
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	200017ed 	.word	0x200017ed
 800ad98:	200018e0 	.word	0x200018e0
 800ad9c:	20000bbc 	.word	0x20000bbc

0800ada0 <mixerInit>:

void mixerInit(void)
{
 800ada0:	b590      	push	{r4, r7, lr}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
    int i;

    // enable servos for mixes that require them. note, this shifts motor counts.
    core.useServo = mixers[mcfg.mixerConfiguration].useServo;
 800ada6:	4b8b      	ldr	r3, [pc, #556]	; (800afd4 <mixerInit+0x234>)
 800ada8:	795b      	ldrb	r3, [r3, #5]
 800adaa:	4a8b      	ldr	r2, [pc, #556]	; (800afd8 <mixerInit+0x238>)
 800adac:	00db      	lsls	r3, r3, #3
 800adae:	4413      	add	r3, r2
 800adb0:	785b      	ldrb	r3, [r3, #1]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	bf14      	ite	ne
 800adb6:	2301      	movne	r3, #1
 800adb8:	2300      	moveq	r3, #0
 800adba:	b2da      	uxtb	r2, r3
 800adbc:	4b87      	ldr	r3, [pc, #540]	; (800afdc <mixerInit+0x23c>)
 800adbe:	755a      	strb	r2, [r3, #21]
    // if we want camstab/trig, that also enables servos, even if mixer doesn't
    if (feature(FEATURE_SERVO_TILT))
 800adc0:	2020      	movs	r0, #32
 800adc2:	f7fc f911 	bl	8006fe8 <feature>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d002      	beq.n	800add2 <mixerInit+0x32>
        core.useServo = 1;
 800adcc:	4b83      	ldr	r3, [pc, #524]	; (800afdc <mixerInit+0x23c>)
 800adce:	2201      	movs	r2, #1
 800add0:	755a      	strb	r2, [r3, #21]

    if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM) {
 800add2:	4b80      	ldr	r3, [pc, #512]	; (800afd4 <mixerInit+0x234>)
 800add4:	795b      	ldrb	r3, [r3, #5]
 800add6:	2b17      	cmp	r3, #23
 800add8:	d128      	bne.n	800ae2c <mixerInit+0x8c>
        // load custom mixer into currentMixer
        for (i = 0; i < MAX_MOTORS; i++) {
 800adda:	2300      	movs	r3, #0
 800addc:	607b      	str	r3, [r7, #4]
 800adde:	e021      	b.n	800ae24 <mixerInit+0x84>
            // check if done
            if (mcfg.customMixer[i].throttle == 0.0f)
 800ade0:	4a7c      	ldr	r2, [pc, #496]	; (800afd4 <mixerInit+0x234>)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	3301      	adds	r3, #1
 800ade6:	011b      	lsls	r3, r3, #4
 800ade8:	4413      	add	r3, r2
 800adea:	edd3 7a00 	vldr	s15, [r3]
 800adee:	eef5 7a40 	vcmp.f32	s15, #0.0
 800adf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf6:	d048      	beq.n	800ae8a <mixerInit+0xea>
                break;
            currentMixer[i] = mcfg.customMixer[i];
 800adf8:	4a79      	ldr	r2, [pc, #484]	; (800afe0 <mixerInit+0x240>)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	011b      	lsls	r3, r3, #4
 800adfe:	18d1      	adds	r1, r2, r3
 800ae00:	4a74      	ldr	r2, [pc, #464]	; (800afd4 <mixerInit+0x234>)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	3301      	adds	r3, #1
 800ae06:	011b      	lsls	r3, r3, #4
 800ae08:	4413      	add	r3, r2
 800ae0a:	460c      	mov	r4, r1
 800ae0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ae0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            numberMotor++;
 800ae12:	4b74      	ldr	r3, [pc, #464]	; (800afe4 <mixerInit+0x244>)
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	3301      	adds	r3, #1
 800ae18:	b2da      	uxtb	r2, r3
 800ae1a:	4b72      	ldr	r3, [pc, #456]	; (800afe4 <mixerInit+0x244>)
 800ae1c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_MOTORS; i++) {
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	3301      	adds	r3, #1
 800ae22:	607b      	str	r3, [r7, #4]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b0b      	cmp	r3, #11
 800ae28:	ddda      	ble.n	800ade0 <mixerInit+0x40>
 800ae2a:	e02f      	b.n	800ae8c <mixerInit+0xec>
        }
    } else {
        numberMotor = mixers[mcfg.mixerConfiguration].numberMotor;
 800ae2c:	4b69      	ldr	r3, [pc, #420]	; (800afd4 <mixerInit+0x234>)
 800ae2e:	795b      	ldrb	r3, [r3, #5]
 800ae30:	461a      	mov	r2, r3
 800ae32:	4b69      	ldr	r3, [pc, #420]	; (800afd8 <mixerInit+0x238>)
 800ae34:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800ae38:	4b6a      	ldr	r3, [pc, #424]	; (800afe4 <mixerInit+0x244>)
 800ae3a:	701a      	strb	r2, [r3, #0]
        // copy motor-based mixers
        if (mixers[mcfg.mixerConfiguration].motor) {
 800ae3c:	4b65      	ldr	r3, [pc, #404]	; (800afd4 <mixerInit+0x234>)
 800ae3e:	795b      	ldrb	r3, [r3, #5]
 800ae40:	4a65      	ldr	r2, [pc, #404]	; (800afd8 <mixerInit+0x238>)
 800ae42:	00db      	lsls	r3, r3, #3
 800ae44:	4413      	add	r3, r2
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d01f      	beq.n	800ae8c <mixerInit+0xec>
            for (i = 0; i < numberMotor; i++)
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	607b      	str	r3, [r7, #4]
 800ae50:	e014      	b.n	800ae7c <mixerInit+0xdc>
                currentMixer[i] = mixers[mcfg.mixerConfiguration].motor[i];
 800ae52:	4b60      	ldr	r3, [pc, #384]	; (800afd4 <mixerInit+0x234>)
 800ae54:	795b      	ldrb	r3, [r3, #5]
 800ae56:	4a60      	ldr	r2, [pc, #384]	; (800afd8 <mixerInit+0x238>)
 800ae58:	00db      	lsls	r3, r3, #3
 800ae5a:	4413      	add	r3, r2
 800ae5c:	685a      	ldr	r2, [r3, #4]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	011b      	lsls	r3, r3, #4
 800ae62:	18d1      	adds	r1, r2, r3
 800ae64:	4a5e      	ldr	r2, [pc, #376]	; (800afe0 <mixerInit+0x240>)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	011b      	lsls	r3, r3, #4
 800ae6a:	4413      	add	r3, r2
 800ae6c:	461c      	mov	r4, r3
 800ae6e:	460b      	mov	r3, r1
 800ae70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ae72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (i = 0; i < numberMotor; i++)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	607b      	str	r3, [r7, #4]
 800ae7c:	4b59      	ldr	r3, [pc, #356]	; (800afe4 <mixerInit+0x244>)
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	461a      	mov	r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	4293      	cmp	r3, r2
 800ae86:	dbe4      	blt.n	800ae52 <mixerInit+0xb2>
 800ae88:	e000      	b.n	800ae8c <mixerInit+0xec>
                break;
 800ae8a:	bf00      	nop
        }
    }

    if (core.useServo) {
 800ae8c:	4b53      	ldr	r3, [pc, #332]	; (800afdc <mixerInit+0x23c>)
 800ae8e:	7d5b      	ldrb	r3, [r3, #21]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d033      	beq.n	800aefc <mixerInit+0x15c>
        numberRules = servoMixers[mcfg.mixerConfiguration].numberRules;
 800ae94:	4b4f      	ldr	r3, [pc, #316]	; (800afd4 <mixerInit+0x234>)
 800ae96:	795b      	ldrb	r3, [r3, #5]
 800ae98:	461a      	mov	r2, r3
 800ae9a:	4b53      	ldr	r3, [pc, #332]	; (800afe8 <mixerInit+0x248>)
 800ae9c:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800aea0:	4b52      	ldr	r3, [pc, #328]	; (800afec <mixerInit+0x24c>)
 800aea2:	701a      	strb	r2, [r3, #0]
        if (servoMixers[mcfg.mixerConfiguration].rule) {
 800aea4:	4b4b      	ldr	r3, [pc, #300]	; (800afd4 <mixerInit+0x234>)
 800aea6:	795b      	ldrb	r3, [r3, #5]
 800aea8:	4a4f      	ldr	r2, [pc, #316]	; (800afe8 <mixerInit+0x248>)
 800aeaa:	00db      	lsls	r3, r3, #3
 800aeac:	4413      	add	r3, r2
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d023      	beq.n	800aefc <mixerInit+0x15c>
            for (i = 0; i < numberRules; i++)
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	607b      	str	r3, [r7, #4]
 800aeb8:	e01a      	b.n	800aef0 <mixerInit+0x150>
                currentServoMixer[i] = servoMixers[mcfg.mixerConfiguration].rule[i];
 800aeba:	4b46      	ldr	r3, [pc, #280]	; (800afd4 <mixerInit+0x234>)
 800aebc:	795b      	ldrb	r3, [r3, #5]
 800aebe:	4a4a      	ldr	r2, [pc, #296]	; (800afe8 <mixerInit+0x248>)
 800aec0:	00db      	lsls	r3, r3, #3
 800aec2:	4413      	add	r3, r2
 800aec4:	6859      	ldr	r1, [r3, #4]
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	4613      	mov	r3, r2
 800aeca:	00db      	lsls	r3, r3, #3
 800aecc:	1a9b      	subs	r3, r3, r2
 800aece:	18c8      	adds	r0, r1, r3
 800aed0:	4947      	ldr	r1, [pc, #284]	; (800aff0 <mixerInit+0x250>)
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	4613      	mov	r3, r2
 800aed6:	00db      	lsls	r3, r3, #3
 800aed8:	1a9b      	subs	r3, r3, r2
 800aeda:	440b      	add	r3, r1
 800aedc:	4602      	mov	r2, r0
 800aede:	6811      	ldr	r1, [r2, #0]
 800aee0:	6019      	str	r1, [r3, #0]
 800aee2:	8891      	ldrh	r1, [r2, #4]
 800aee4:	7992      	ldrb	r2, [r2, #6]
 800aee6:	8099      	strh	r1, [r3, #4]
 800aee8:	719a      	strb	r2, [r3, #6]
            for (i = 0; i < numberRules; i++)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	3301      	adds	r3, #1
 800aeee:	607b      	str	r3, [r7, #4]
 800aef0:	4b3e      	ldr	r3, [pc, #248]	; (800afec <mixerInit+0x24c>)
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	461a      	mov	r2, r3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4293      	cmp	r3, r2
 800aefa:	dbde      	blt.n	800aeba <mixerInit+0x11a>
        }
    }

    // in 3D mode, mixer gain has to be halved
    if (feature(FEATURE_3D)) {
 800aefc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800af00:	f7fc f872 	bl	8006fe8 <feature>
 800af04:	4603      	mov	r3, r0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d045      	beq.n	800af96 <mixerInit+0x1f6>
        if (numberMotor > 1) {
 800af0a:	4b36      	ldr	r3, [pc, #216]	; (800afe4 <mixerInit+0x244>)
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d941      	bls.n	800af96 <mixerInit+0x1f6>
            for (i = 0; i < numberMotor; i++) {
 800af12:	2300      	movs	r3, #0
 800af14:	607b      	str	r3, [r7, #4]
 800af16:	e038      	b.n	800af8a <mixerInit+0x1ea>
                currentMixer[i].pitch *= 0.5f;
 800af18:	4a31      	ldr	r2, [pc, #196]	; (800afe0 <mixerInit+0x240>)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	011b      	lsls	r3, r3, #4
 800af1e:	4413      	add	r3, r2
 800af20:	3308      	adds	r3, #8
 800af22:	edd3 7a00 	vldr	s15, [r3]
 800af26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800af2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af2e:	4a2c      	ldr	r2, [pc, #176]	; (800afe0 <mixerInit+0x240>)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	011b      	lsls	r3, r3, #4
 800af34:	4413      	add	r3, r2
 800af36:	3308      	adds	r3, #8
 800af38:	edc3 7a00 	vstr	s15, [r3]
                currentMixer[i].roll *= 0.5f;
 800af3c:	4a28      	ldr	r2, [pc, #160]	; (800afe0 <mixerInit+0x240>)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	011b      	lsls	r3, r3, #4
 800af42:	4413      	add	r3, r2
 800af44:	3304      	adds	r3, #4
 800af46:	edd3 7a00 	vldr	s15, [r3]
 800af4a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800af4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af52:	4a23      	ldr	r2, [pc, #140]	; (800afe0 <mixerInit+0x240>)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	011b      	lsls	r3, r3, #4
 800af58:	4413      	add	r3, r2
 800af5a:	3304      	adds	r3, #4
 800af5c:	edc3 7a00 	vstr	s15, [r3]
                currentMixer[i].yaw *= 0.5f;
 800af60:	4a1f      	ldr	r2, [pc, #124]	; (800afe0 <mixerInit+0x240>)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	011b      	lsls	r3, r3, #4
 800af66:	4413      	add	r3, r2
 800af68:	330c      	adds	r3, #12
 800af6a:	edd3 7a00 	vldr	s15, [r3]
 800af6e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800af72:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af76:	4a1a      	ldr	r2, [pc, #104]	; (800afe0 <mixerInit+0x240>)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	011b      	lsls	r3, r3, #4
 800af7c:	4413      	add	r3, r2
 800af7e:	330c      	adds	r3, #12
 800af80:	edc3 7a00 	vstr	s15, [r3]
            for (i = 0; i < numberMotor; i++) {
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	3301      	adds	r3, #1
 800af88:	607b      	str	r3, [r7, #4]
 800af8a:	4b16      	ldr	r3, [pc, #88]	; (800afe4 <mixerInit+0x244>)
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	461a      	mov	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4293      	cmp	r3, r2
 800af94:	dbc0      	blt.n	800af18 <mixerInit+0x178>
            }
        }
    }

    // set flag that we're on something with wings
    if (mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_AIRPLANE || mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE) {
 800af96:	4b0f      	ldr	r3, [pc, #60]	; (800afd4 <mixerInit+0x234>)
 800af98:	795b      	ldrb	r3, [r3, #5]
 800af9a:	2b08      	cmp	r3, #8
 800af9c:	d007      	beq.n	800afae <mixerInit+0x20e>
 800af9e:	4b0d      	ldr	r3, [pc, #52]	; (800afd4 <mixerInit+0x234>)
 800afa0:	795b      	ldrb	r3, [r3, #5]
 800afa2:	2b0e      	cmp	r3, #14
 800afa4:	d003      	beq.n	800afae <mixerInit+0x20e>
 800afa6:	4b0b      	ldr	r3, [pc, #44]	; (800afd4 <mixerInit+0x234>)
 800afa8:	795b      	ldrb	r3, [r3, #5]
 800afaa:	2b18      	cmp	r3, #24
 800afac:	d109      	bne.n	800afc2 <mixerInit+0x222>
        f.FIXED_WING = 1;
 800afae:	4b11      	ldr	r3, [pc, #68]	; (800aff4 <mixerInit+0x254>)
 800afb0:	2201      	movs	r2, #1
 800afb2:	741a      	strb	r2, [r3, #16]

        if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800afb4:	4b07      	ldr	r3, [pc, #28]	; (800afd4 <mixerInit+0x234>)
 800afb6:	795b      	ldrb	r3, [r3, #5]
 800afb8:	2b18      	cmp	r3, #24
 800afba:	d105      	bne.n	800afc8 <mixerInit+0x228>
            loadCustomServoMixer();
 800afbc:	f7ff feaa 	bl	800ad14 <loadCustomServoMixer>
        if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800afc0:	e002      	b.n	800afc8 <mixerInit+0x228>
    } else
        f.FIXED_WING = 0;
 800afc2:	4b0c      	ldr	r3, [pc, #48]	; (800aff4 <mixerInit+0x254>)
 800afc4:	2200      	movs	r2, #0
 800afc6:	741a      	strb	r2, [r3, #16]

    mixerResetMotors();
 800afc8:	f000 f816 	bl	800aff8 <mixerResetMotors>
}
 800afcc:	bf00      	nop
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd90      	pop	{r4, r7, pc}
 800afd4:	20000bbc 	.word	0x20000bbc
 800afd8:	08027e10 	.word	0x08027e10
 800afdc:	20000afc 	.word	0x20000afc
 800afe0:	20001820 	.word	0x20001820
 800afe4:	200017ec 	.word	0x200017ec
 800afe8:	08027f7c 	.word	0x08027f7c
 800afec:	200017ed 	.word	0x200017ed
 800aff0:	200018e0 	.word	0x200018e0
 800aff4:	20001988 	.word	0x20001988

0800aff8 <mixerResetMotors>:

void mixerResetMotors(void)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
    int i;
    // set disarmed motor values
    for (i = 0; i < MAX_MOTORS; i++)
 800affe:	2300      	movs	r3, #0
 800b000:	607b      	str	r3, [r7, #4]
 800b002:	e016      	b.n	800b032 <mixerResetMotors+0x3a>
        motor_disarmed[i] = feature(FEATURE_3D) ? mcfg.neutral3d : mcfg.mincommand;
 800b004:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b008:	f7fb ffee 	bl	8006fe8 <feature>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d004      	beq.n	800b01c <mixerResetMotors+0x24>
 800b012:	4b0c      	ldr	r3, [pc, #48]	; (800b044 <mixerResetMotors+0x4c>)
 800b014:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 800b018:	b21b      	sxth	r3, r3
 800b01a:	e003      	b.n	800b024 <mixerResetMotors+0x2c>
 800b01c:	4b09      	ldr	r3, [pc, #36]	; (800b044 <mixerResetMotors+0x4c>)
 800b01e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800b022:	b21b      	sxth	r3, r3
 800b024:	4908      	ldr	r1, [pc, #32]	; (800b048 <mixerResetMotors+0x50>)
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
    for (i = 0; i < MAX_MOTORS; i++)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	3301      	adds	r3, #1
 800b030:	607b      	str	r3, [r7, #4]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b0b      	cmp	r3, #11
 800b036:	dde5      	ble.n	800b004 <mixerResetMotors+0xc>
}
 800b038:	bf00      	nop
 800b03a:	bf00      	nop
 800b03c:	3708      	adds	r7, #8
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	20000bbc 	.word	0x20000bbc
 800b048:	20001808 	.word	0x20001808

0800b04c <servoMixerLoadMix>:

void servoMixerLoadMix(int index)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b085      	sub	sp, #20
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
    int i;

    // we're 1-based
    index++;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	3301      	adds	r3, #1
 800b058:	607b      	str	r3, [r7, #4]
    // clear existing
    for (i = 0; i < MAX_SERVO_RULES; i++)
 800b05a:	2300      	movs	r3, #0
 800b05c:	60fb      	str	r3, [r7, #12]
 800b05e:	e038      	b.n	800b0d2 <servoMixerLoadMix+0x86>
        mcfg.customServoMixer[i].targetChannel = mcfg.customServoMixer[i].fromChannel = mcfg.customServoMixer[i].rate = mcfg.customServoMixer[i].box = 0;
 800b060:	4934      	ldr	r1, [pc, #208]	; (800b134 <servoMixerLoadMix+0xe8>)
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	4613      	mov	r3, r2
 800b066:	00db      	lsls	r3, r3, #3
 800b068:	1a9b      	subs	r3, r3, r2
 800b06a:	440b      	add	r3, r1
 800b06c:	33d6      	adds	r3, #214	; 0xd6
 800b06e:	2200      	movs	r2, #0
 800b070:	701a      	strb	r2, [r3, #0]
 800b072:	4930      	ldr	r1, [pc, #192]	; (800b134 <servoMixerLoadMix+0xe8>)
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	4613      	mov	r3, r2
 800b078:	00db      	lsls	r3, r3, #3
 800b07a:	1a9b      	subs	r3, r3, r2
 800b07c:	440b      	add	r3, r1
 800b07e:	33d2      	adds	r3, #210	; 0xd2
 800b080:	2200      	movs	r2, #0
 800b082:	701a      	strb	r2, [r3, #0]
 800b084:	492b      	ldr	r1, [pc, #172]	; (800b134 <servoMixerLoadMix+0xe8>)
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	4613      	mov	r3, r2
 800b08a:	00db      	lsls	r3, r3, #3
 800b08c:	1a9b      	subs	r3, r3, r2
 800b08e:	440b      	add	r3, r1
 800b090:	33d2      	adds	r3, #210	; 0xd2
 800b092:	f993 3000 	ldrsb.w	r3, [r3]
 800b096:	b2d8      	uxtb	r0, r3
 800b098:	4926      	ldr	r1, [pc, #152]	; (800b134 <servoMixerLoadMix+0xe8>)
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	4613      	mov	r3, r2
 800b09e:	00db      	lsls	r3, r3, #3
 800b0a0:	1a9b      	subs	r3, r3, r2
 800b0a2:	440b      	add	r3, r1
 800b0a4:	33d1      	adds	r3, #209	; 0xd1
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	701a      	strb	r2, [r3, #0]
 800b0aa:	4922      	ldr	r1, [pc, #136]	; (800b134 <servoMixerLoadMix+0xe8>)
 800b0ac:	68fa      	ldr	r2, [r7, #12]
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	00db      	lsls	r3, r3, #3
 800b0b2:	1a9b      	subs	r3, r3, r2
 800b0b4:	440b      	add	r3, r1
 800b0b6:	33d1      	adds	r3, #209	; 0xd1
 800b0b8:	7818      	ldrb	r0, [r3, #0]
 800b0ba:	491e      	ldr	r1, [pc, #120]	; (800b134 <servoMixerLoadMix+0xe8>)
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	4613      	mov	r3, r2
 800b0c0:	00db      	lsls	r3, r3, #3
 800b0c2:	1a9b      	subs	r3, r3, r2
 800b0c4:	440b      	add	r3, r1
 800b0c6:	33d0      	adds	r3, #208	; 0xd0
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MAX_SERVO_RULES; i++)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	60fb      	str	r3, [r7, #12]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2b0f      	cmp	r3, #15
 800b0d6:	ddc3      	ble.n	800b060 <servoMixerLoadMix+0x14>

    for (i = 0; i < servoMixers[index].numberRules; i++)
 800b0d8:	2300      	movs	r3, #0
 800b0da:	60fb      	str	r3, [r7, #12]
 800b0dc:	e01a      	b.n	800b114 <servoMixerLoadMix+0xc8>
        mcfg.customServoMixer[i] = servoMixers[index].rule[i];
 800b0de:	4a16      	ldr	r2, [pc, #88]	; (800b138 <servoMixerLoadMix+0xec>)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	00db      	lsls	r3, r3, #3
 800b0e4:	4413      	add	r3, r2
 800b0e6:	6859      	ldr	r1, [r3, #4]
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	00db      	lsls	r3, r3, #3
 800b0ee:	1a9b      	subs	r3, r3, r2
 800b0f0:	18c8      	adds	r0, r1, r3
 800b0f2:	4910      	ldr	r1, [pc, #64]	; (800b134 <servoMixerLoadMix+0xe8>)
 800b0f4:	68fa      	ldr	r2, [r7, #12]
 800b0f6:	4613      	mov	r3, r2
 800b0f8:	00db      	lsls	r3, r3, #3
 800b0fa:	1a9b      	subs	r3, r3, r2
 800b0fc:	440b      	add	r3, r1
 800b0fe:	33d0      	adds	r3, #208	; 0xd0
 800b100:	4602      	mov	r2, r0
 800b102:	6811      	ldr	r1, [r2, #0]
 800b104:	6019      	str	r1, [r3, #0]
 800b106:	8891      	ldrh	r1, [r2, #4]
 800b108:	7992      	ldrb	r2, [r2, #6]
 800b10a:	8099      	strh	r1, [r3, #4]
 800b10c:	719a      	strb	r2, [r3, #6]
    for (i = 0; i < servoMixers[index].numberRules; i++)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	3301      	adds	r3, #1
 800b112:	60fb      	str	r3, [r7, #12]
 800b114:	4a08      	ldr	r2, [pc, #32]	; (800b138 <servoMixerLoadMix+0xec>)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b11c:	461a      	mov	r2, r3
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	4293      	cmp	r3, r2
 800b122:	dbdc      	blt.n	800b0de <servoMixerLoadMix+0x92>
}
 800b124:	bf00      	nop
 800b126:	bf00      	nop
 800b128:	3714      	adds	r7, #20
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop
 800b134:	20000bbc 	.word	0x20000bbc
 800b138:	08027f7c 	.word	0x08027f7c

0800b13c <mixerLoadMix>:

void mixerLoadMix(int index)
{
 800b13c:	b490      	push	{r4, r7}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
    int i;

    // we're 1-based
    index++;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	3301      	adds	r3, #1
 800b148:	607b      	str	r3, [r7, #4]
    // clear existing
    for (i = 0; i < MAX_MOTORS; i++)
 800b14a:	2300      	movs	r3, #0
 800b14c:	60fb      	str	r3, [r7, #12]
 800b14e:	e00a      	b.n	800b166 <mixerLoadMix+0x2a>
        mcfg.customMixer[i].throttle = 0.0f;
 800b150:	4a1c      	ldr	r2, [pc, #112]	; (800b1c4 <mixerLoadMix+0x88>)
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	3301      	adds	r3, #1
 800b156:	011b      	lsls	r3, r3, #4
 800b158:	4413      	add	r3, r2
 800b15a:	f04f 0200 	mov.w	r2, #0
 800b15e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MOTORS; i++)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	3301      	adds	r3, #1
 800b164:	60fb      	str	r3, [r7, #12]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2b0b      	cmp	r3, #11
 800b16a:	ddf1      	ble.n	800b150 <mixerLoadMix+0x14>

    // do we have anything here to begin with?
    if (mixers[index].motor != NULL) {
 800b16c:	4a16      	ldr	r2, [pc, #88]	; (800b1c8 <mixerLoadMix+0x8c>)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	00db      	lsls	r3, r3, #3
 800b172:	4413      	add	r3, r2
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d01f      	beq.n	800b1ba <mixerLoadMix+0x7e>
        for (i = 0; i < mixers[index].numberMotor; i++)
 800b17a:	2300      	movs	r3, #0
 800b17c:	60fb      	str	r3, [r7, #12]
 800b17e:	e014      	b.n	800b1aa <mixerLoadMix+0x6e>
            mcfg.customMixer[i] = mixers[index].motor[i];
 800b180:	4a11      	ldr	r2, [pc, #68]	; (800b1c8 <mixerLoadMix+0x8c>)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	00db      	lsls	r3, r3, #3
 800b186:	4413      	add	r3, r2
 800b188:	685a      	ldr	r2, [r3, #4]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	011b      	lsls	r3, r3, #4
 800b18e:	18d1      	adds	r1, r2, r3
 800b190:	4a0c      	ldr	r2, [pc, #48]	; (800b1c4 <mixerLoadMix+0x88>)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	3301      	adds	r3, #1
 800b196:	011b      	lsls	r3, r3, #4
 800b198:	4413      	add	r3, r2
 800b19a:	461c      	mov	r4, r3
 800b19c:	460b      	mov	r3, r1
 800b19e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b1a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (i = 0; i < mixers[index].numberMotor; i++)
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	60fb      	str	r3, [r7, #12]
 800b1aa:	4a07      	ldr	r2, [pc, #28]	; (800b1c8 <mixerLoadMix+0x8c>)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	dbe2      	blt.n	800b180 <mixerLoadMix+0x44>
    }
}
 800b1ba:	bf00      	nop
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bc90      	pop	{r4, r7}
 800b1c2:	4770      	bx	lr
 800b1c4:	20000bbc 	.word	0x20000bbc
 800b1c8:	08027e10 	.word	0x08027e10

0800b1cc <writeServos>:

void writeServos(void)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	af00      	add	r7, sp, #0
    if (!core.useServo)
 800b1d0:	4b95      	ldr	r3, [pc, #596]	; (800b428 <writeServos+0x25c>)
 800b1d2:	7d5b      	ldrb	r3, [r3, #21]
 800b1d4:	f083 0301 	eor.w	r3, r3, #1
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	f040 811d 	bne.w	800b41a <writeServos+0x24e>
        return;

    switch (mcfg.mixerConfiguration) {
 800b1e0:	4b92      	ldr	r3, [pc, #584]	; (800b42c <writeServos+0x260>)
 800b1e2:	795b      	ldrb	r3, [r3, #5]
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	2b17      	cmp	r3, #23
 800b1e8:	f200 8100 	bhi.w	800b3ec <writeServos+0x220>
 800b1ec:	a201      	add	r2, pc, #4	; (adr r2, 800b1f4 <writeServos+0x28>)
 800b1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f2:	bf00      	nop
 800b1f4:	0800b277 	.word	0x0800b277
 800b1f8:	0800b3ed 	.word	0x0800b3ed
 800b1fc:	0800b3ed 	.word	0x0800b3ed
 800b200:	0800b255 	.word	0x0800b255
 800b204:	0800b2b7 	.word	0x0800b2b7
 800b208:	0800b3ed 	.word	0x0800b3ed
 800b20c:	0800b3ed 	.word	0x0800b3ed
 800b210:	0800b2fb 	.word	0x0800b2fb
 800b214:	0800b3ed 	.word	0x0800b3ed
 800b218:	0800b3ed 	.word	0x0800b3ed
 800b21c:	0800b3ed 	.word	0x0800b3ed
 800b220:	0800b3ed 	.word	0x0800b3ed
 800b224:	0800b3ed 	.word	0x0800b3ed
 800b228:	0800b31d 	.word	0x0800b31d
 800b22c:	0800b3ed 	.word	0x0800b3ed
 800b230:	0800b3ed 	.word	0x0800b3ed
 800b234:	0800b3ed 	.word	0x0800b3ed
 800b238:	0800b3ed 	.word	0x0800b3ed
 800b23c:	0800b3ed 	.word	0x0800b3ed
 800b240:	0800b2d9 	.word	0x0800b2d9
 800b244:	0800b31d 	.word	0x0800b31d
 800b248:	0800b3ed 	.word	0x0800b3ed
 800b24c:	0800b3ed 	.word	0x0800b3ed
 800b250:	0800b35f 	.word	0x0800b35f
        case MULTITYPE_BI:
        	actPwmWriteServo(0, servo[4]);
 800b254:	4b76      	ldr	r3, [pc, #472]	; (800b430 <writeServos+0x264>)
 800b256:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	4619      	mov	r1, r3
 800b25e:	2000      	movs	r0, #0
 800b260:	f7f6 fe60 	bl	8001f24 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[5]);
 800b264:	4b72      	ldr	r3, [pc, #456]	; (800b430 <writeServos+0x264>)
 800b266:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	4619      	mov	r1, r3
 800b26e:	2001      	movs	r0, #1
 800b270:	f7f6 fe58 	bl	8001f24 <actPwmWriteServo>
            break;
 800b274:	e0d6      	b.n	800b424 <writeServos+0x258>

        case MULTITYPE_TRI:
            if (cfg.tri_unarmed_servo) {
 800b276:	4b6f      	ldr	r3, [pc, #444]	; (800b434 <writeServos+0x268>)
 800b278:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d008      	beq.n	800b292 <writeServos+0xc6>
                // if unarmed flag set, we always move servo
            	actPwmWriteServo(0, servo[5]);
 800b280:	4b6b      	ldr	r3, [pc, #428]	; (800b430 <writeServos+0x264>)
 800b282:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b286:	b29b      	uxth	r3, r3
 800b288:	4619      	mov	r1, r3
 800b28a:	2000      	movs	r0, #0
 800b28c:	f7f6 fe4a 	bl	8001f24 <actPwmWriteServo>
                if (f.ARMED)
                	actPwmWriteServo(0, servo[5]);
                else
                	actPwmWriteServo(0, 0); // kill servo signal completely.
            }
            break;
 800b290:	e0c8      	b.n	800b424 <writeServos+0x258>
                if (f.ARMED)
 800b292:	4b69      	ldr	r3, [pc, #420]	; (800b438 <writeServos+0x26c>)
 800b294:	785b      	ldrb	r3, [r3, #1]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d008      	beq.n	800b2ac <writeServos+0xe0>
                	actPwmWriteServo(0, servo[5]);
 800b29a:	4b65      	ldr	r3, [pc, #404]	; (800b430 <writeServos+0x264>)
 800b29c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	2000      	movs	r0, #0
 800b2a6:	f7f6 fe3d 	bl	8001f24 <actPwmWriteServo>
            break;
 800b2aa:	e0bb      	b.n	800b424 <writeServos+0x258>
                	actPwmWriteServo(0, 0); // kill servo signal completely.
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	f7f6 fe38 	bl	8001f24 <actPwmWriteServo>
            break;
 800b2b4:	e0b6      	b.n	800b424 <writeServos+0x258>

        case MULTITYPE_GIMBAL:
        	actPwmWriteServo(0, servo[0]);
 800b2b6:	4b5e      	ldr	r3, [pc, #376]	; (800b430 <writeServos+0x264>)
 800b2b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	4619      	mov	r1, r3
 800b2c0:	2000      	movs	r0, #0
 800b2c2:	f7f6 fe2f 	bl	8001f24 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[1]);
 800b2c6:	4b5a      	ldr	r3, [pc, #360]	; (800b430 <writeServos+0x264>)
 800b2c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	2001      	movs	r0, #1
 800b2d2:	f7f6 fe27 	bl	8001f24 <actPwmWriteServo>
            break;
 800b2d6:	e0a5      	b.n	800b424 <writeServos+0x258>

        case MULTITYPE_DUALCOPTER:
        	actPwmWriteServo(0, servo[4]);
 800b2d8:	4b55      	ldr	r3, [pc, #340]	; (800b430 <writeServos+0x264>)
 800b2da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	2000      	movs	r0, #0
 800b2e4:	f7f6 fe1e 	bl	8001f24 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[5]);
 800b2e8:	4b51      	ldr	r3, [pc, #324]	; (800b430 <writeServos+0x264>)
 800b2ea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	2001      	movs	r0, #1
 800b2f4:	f7f6 fe16 	bl	8001f24 <actPwmWriteServo>
            break;
 800b2f8:	e094      	b.n	800b424 <writeServos+0x258>

        case MULTITYPE_FLYING_WING:
        	actPwmWriteServo(0, servo[3]);
 800b2fa:	4b4d      	ldr	r3, [pc, #308]	; (800b430 <writeServos+0x264>)
 800b2fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b300:	b29b      	uxth	r3, r3
 800b302:	4619      	mov	r1, r3
 800b304:	2000      	movs	r0, #0
 800b306:	f7f6 fe0d 	bl	8001f24 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b30a:	4b49      	ldr	r3, [pc, #292]	; (800b430 <writeServos+0x264>)
 800b30c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b310:	b29b      	uxth	r3, r3
 800b312:	4619      	mov	r1, r3
 800b314:	2001      	movs	r0, #1
 800b316:	f7f6 fe05 	bl	8001f24 <actPwmWriteServo>
            break;
 800b31a:	e083      	b.n	800b424 <writeServos+0x258>

        case MULTITYPE_AIRPLANE:
        case MULTITYPE_SINGLECOPTER:
        	actPwmWriteServo(0, servo[3]);
 800b31c:	4b44      	ldr	r3, [pc, #272]	; (800b430 <writeServos+0x264>)
 800b31e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b322:	b29b      	uxth	r3, r3
 800b324:	4619      	mov	r1, r3
 800b326:	2000      	movs	r0, #0
 800b328:	f7f6 fdfc 	bl	8001f24 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b32c:	4b40      	ldr	r3, [pc, #256]	; (800b430 <writeServos+0x264>)
 800b32e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b332:	b29b      	uxth	r3, r3
 800b334:	4619      	mov	r1, r3
 800b336:	2001      	movs	r0, #1
 800b338:	f7f6 fdf4 	bl	8001f24 <actPwmWriteServo>
        	actPwmWriteServo(2, servo[5]);
 800b33c:	4b3c      	ldr	r3, [pc, #240]	; (800b430 <writeServos+0x264>)
 800b33e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b342:	b29b      	uxth	r3, r3
 800b344:	4619      	mov	r1, r3
 800b346:	2002      	movs	r0, #2
 800b348:	f7f6 fdec 	bl	8001f24 <actPwmWriteServo>
        	actPwmWriteServo(3, servo[6]);
 800b34c:	4b38      	ldr	r3, [pc, #224]	; (800b430 <writeServos+0x264>)
 800b34e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b352:	b29b      	uxth	r3, r3
 800b354:	4619      	mov	r1, r3
 800b356:	2003      	movs	r0, #3
 800b358:	f7f6 fde4 	bl	8001f24 <actPwmWriteServo>
            break;
 800b35c:	e062      	b.n	800b424 <writeServos+0x258>

        case MULTITYPE_CUSTOM_PLANE:
        	actPwmWriteServo(0, servo[3]);
 800b35e:	4b34      	ldr	r3, [pc, #208]	; (800b430 <writeServos+0x264>)
 800b360:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b364:	b29b      	uxth	r3, r3
 800b366:	4619      	mov	r1, r3
 800b368:	2000      	movs	r0, #0
 800b36a:	f7f6 fddb 	bl	8001f24 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b36e:	4b30      	ldr	r3, [pc, #192]	; (800b430 <writeServos+0x264>)
 800b370:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b374:	b29b      	uxth	r3, r3
 800b376:	4619      	mov	r1, r3
 800b378:	2001      	movs	r0, #1
 800b37a:	f7f6 fdd3 	bl	8001f24 <actPwmWriteServo>
        	actPwmWriteServo(2, servo[5]);
 800b37e:	4b2c      	ldr	r3, [pc, #176]	; (800b430 <writeServos+0x264>)
 800b380:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b384:	b29b      	uxth	r3, r3
 800b386:	4619      	mov	r1, r3
 800b388:	2002      	movs	r0, #2
 800b38a:	f7f6 fdcb 	bl	8001f24 <actPwmWriteServo>
        	actPwmWriteServo(3, servo[6]);
 800b38e:	4b28      	ldr	r3, [pc, #160]	; (800b430 <writeServos+0x264>)
 800b390:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b394:	b29b      	uxth	r3, r3
 800b396:	4619      	mov	r1, r3
 800b398:	2003      	movs	r0, #3
 800b39a:	f7f6 fdc3 	bl	8001f24 <actPwmWriteServo>
            if (feature(FEATURE_PPM)) {
 800b39e:	2001      	movs	r0, #1
 800b3a0:	f7fb fe22 	bl	8006fe8 <feature>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d039      	beq.n	800b41e <writeServos+0x252>
            	actPwmWriteServo(4, servo[0]);
 800b3aa:	4b21      	ldr	r3, [pc, #132]	; (800b430 <writeServos+0x264>)
 800b3ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	2004      	movs	r0, #4
 800b3b6:	f7f6 fdb5 	bl	8001f24 <actPwmWriteServo>
            	actPwmWriteServo(5, servo[1]);
 800b3ba:	4b1d      	ldr	r3, [pc, #116]	; (800b430 <writeServos+0x264>)
 800b3bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	2005      	movs	r0, #5
 800b3c6:	f7f6 fdad 	bl	8001f24 <actPwmWriteServo>
            	actPwmWriteServo(6, servo[2]);
 800b3ca:	4b19      	ldr	r3, [pc, #100]	; (800b430 <writeServos+0x264>)
 800b3cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	2006      	movs	r0, #6
 800b3d6:	f7f6 fda5 	bl	8001f24 <actPwmWriteServo>
            	actPwmWriteServo(7, servo[7]);
 800b3da:	4b15      	ldr	r3, [pc, #84]	; (800b430 <writeServos+0x264>)
 800b3dc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	2007      	movs	r0, #7
 800b3e6:	f7f6 fd9d 	bl	8001f24 <actPwmWriteServo>
            }
            break;
 800b3ea:	e018      	b.n	800b41e <writeServos+0x252>

        default:
            // Two servos for SERVO_TILT, if enabled
            if (feature(FEATURE_SERVO_TILT)) {
 800b3ec:	2020      	movs	r0, #32
 800b3ee:	f7fb fdfb 	bl	8006fe8 <feature>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d014      	beq.n	800b422 <writeServos+0x256>
            	actPwmWriteServo(0, servo[0]);
 800b3f8:	4b0d      	ldr	r3, [pc, #52]	; (800b430 <writeServos+0x264>)
 800b3fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	4619      	mov	r1, r3
 800b402:	2000      	movs	r0, #0
 800b404:	f7f6 fd8e 	bl	8001f24 <actPwmWriteServo>
            	actPwmWriteServo(1, servo[1]);
 800b408:	4b09      	ldr	r3, [pc, #36]	; (800b430 <writeServos+0x264>)
 800b40a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b40e:	b29b      	uxth	r3, r3
 800b410:	4619      	mov	r1, r3
 800b412:	2001      	movs	r0, #1
 800b414:	f7f6 fd86 	bl	8001f24 <actPwmWriteServo>
            }
            break;
 800b418:	e003      	b.n	800b422 <writeServos+0x256>
        return;
 800b41a:	bf00      	nop
 800b41c:	e002      	b.n	800b424 <writeServos+0x258>
            break;
 800b41e:	bf00      	nop
 800b420:	e000      	b.n	800b424 <writeServos+0x258>
            break;
 800b422:	bf00      	nop
    }
}
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	20000afc 	.word	0x20000afc
 800b42c:	20000bbc 	.word	0x20000bbc
 800b430:	20000040 	.word	0x20000040
 800b434:	20001128 	.word	0x20001128
 800b438:	20001988 	.word	0x20001988

0800b43c <writeMotors>:

void writeMotors(void)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
    uint8_t i;

    for (i = 0; i < numberMotor; i++)
 800b442:	2300      	movs	r3, #0
 800b444:	71fb      	strb	r3, [r7, #7]
 800b446:	e00c      	b.n	800b462 <writeMotors+0x26>
        actPwmWriteMotor(i, motor[i]);
 800b448:	79fb      	ldrb	r3, [r7, #7]
 800b44a:	4a0b      	ldr	r2, [pc, #44]	; (800b478 <writeMotors+0x3c>)
 800b44c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b450:	b29a      	uxth	r2, r3
 800b452:	79fb      	ldrb	r3, [r7, #7]
 800b454:	4611      	mov	r1, r2
 800b456:	4618      	mov	r0, r3
 800b458:	f7f6 fd48 	bl	8001eec <actPwmWriteMotor>
    for (i = 0; i < numberMotor; i++)
 800b45c:	79fb      	ldrb	r3, [r7, #7]
 800b45e:	3301      	adds	r3, #1
 800b460:	71fb      	strb	r3, [r7, #7]
 800b462:	4b06      	ldr	r3, [pc, #24]	; (800b47c <writeMotors+0x40>)
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	79fa      	ldrb	r2, [r7, #7]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d3ed      	bcc.n	800b448 <writeMotors+0xc>
}
 800b46c:	bf00      	nop
 800b46e:	bf00      	nop
 800b470:	3708      	adds	r7, #8
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	200017f0 	.word	0x200017f0
 800b47c:	200017ec 	.word	0x200017ec

0800b480 <servoMixer>:
        motor[i] = mc;
    writeMotors();
}

static void servoMixer(void)
{
 800b480:	b590      	push	{r4, r7, lr}
 800b482:	b08b      	sub	sp, #44	; 0x2c
 800b484:	af00      	add	r7, sp, #0
    int16_t input[INPUT_ITEMS];
    static int16_t currentOutput[MAX_SERVO_RULES];
    uint8_t i;

    if (f.PASSTHRU_MODE) {
 800b486:	4bae      	ldr	r3, [pc, #696]	; (800b740 <servoMixer+0x2c0>)
 800b488:	7a9b      	ldrb	r3, [r3, #10]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00c      	beq.n	800b4a8 <servoMixer+0x28>
        // Direct passthru from RX
        input[INPUT_ROLL] = rcCommand[ROLL];
 800b48e:	4bad      	ldr	r3, [pc, #692]	; (800b744 <servoMixer+0x2c4>)
 800b490:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b494:	80bb      	strh	r3, [r7, #4]
        input[INPUT_PITCH] = rcCommand[PITCH];
 800b496:	4bab      	ldr	r3, [pc, #684]	; (800b744 <servoMixer+0x2c4>)
 800b498:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b49c:	80fb      	strh	r3, [r7, #6]
        input[INPUT_YAW] = rcCommand[YAW];
 800b49e:	4ba9      	ldr	r3, [pc, #676]	; (800b744 <servoMixer+0x2c4>)
 800b4a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b4a4:	813b      	strh	r3, [r7, #8]
 800b4a6:	e00b      	b.n	800b4c0 <servoMixer+0x40>
    } else {
        // Assisted modes (gyro only or gyro+acc according to AUX configuration in Gui
        input[INPUT_ROLL] = axisPID[ROLL];
 800b4a8:	4ba7      	ldr	r3, [pc, #668]	; (800b748 <servoMixer+0x2c8>)
 800b4aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4ae:	80bb      	strh	r3, [r7, #4]
        input[INPUT_PITCH] = axisPID[PITCH];
 800b4b0:	4ba5      	ldr	r3, [pc, #660]	; (800b748 <servoMixer+0x2c8>)
 800b4b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b4b6:	80fb      	strh	r3, [r7, #6]
        input[INPUT_YAW] = axisPID[YAW];
 800b4b8:	4ba3      	ldr	r3, [pc, #652]	; (800b748 <servoMixer+0x2c8>)
 800b4ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b4be:	813b      	strh	r3, [r7, #8]
    }

    input[INPUT_THROTTLE] = motor[0];
 800b4c0:	4ba2      	ldr	r3, [pc, #648]	; (800b74c <servoMixer+0x2cc>)
 800b4c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4c6:	817b      	strh	r3, [r7, #10]
    // by subtracting the RC middle value from the RC input value, we get:
    // data - middle = input
    // 2000 - 1500 = +500
    // 1500 - 1500 = 0
    // 1000 - 1500 = -500
    input[INPUT_AUX1] = rcData[AUX1] - mcfg.midrc;
 800b4c8:	4ba1      	ldr	r3, [pc, #644]	; (800b750 <servoMixer+0x2d0>)
 800b4ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	4ba0      	ldr	r3, [pc, #640]	; (800b754 <servoMixer+0x2d4>)
 800b4d2:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b4d6:	1ad3      	subs	r3, r2, r3
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	b21b      	sxth	r3, r3
 800b4dc:	81bb      	strh	r3, [r7, #12]
    input[INPUT_AUX2] = rcData[AUX2] - mcfg.midrc;
 800b4de:	4b9c      	ldr	r3, [pc, #624]	; (800b750 <servoMixer+0x2d0>)
 800b4e0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b4e4:	b29a      	uxth	r2, r3
 800b4e6:	4b9b      	ldr	r3, [pc, #620]	; (800b754 <servoMixer+0x2d4>)
 800b4e8:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b4ec:	1ad3      	subs	r3, r2, r3
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	b21b      	sxth	r3, r3
 800b4f2:	81fb      	strh	r3, [r7, #14]
    input[INPUT_AUX3] = rcData[AUX3] - mcfg.midrc;
 800b4f4:	4b96      	ldr	r3, [pc, #600]	; (800b750 <servoMixer+0x2d0>)
 800b4f6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b4fa:	b29a      	uxth	r2, r3
 800b4fc:	4b95      	ldr	r3, [pc, #596]	; (800b754 <servoMixer+0x2d4>)
 800b4fe:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	b29b      	uxth	r3, r3
 800b506:	b21b      	sxth	r3, r3
 800b508:	823b      	strh	r3, [r7, #16]
    input[INPUT_AUX4] = rcData[AUX4] - mcfg.midrc;
 800b50a:	4b91      	ldr	r3, [pc, #580]	; (800b750 <servoMixer+0x2d0>)
 800b50c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b510:	b29a      	uxth	r2, r3
 800b512:	4b90      	ldr	r3, [pc, #576]	; (800b754 <servoMixer+0x2d4>)
 800b514:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b518:	1ad3      	subs	r3, r2, r3
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	b21b      	sxth	r3, r3
 800b51e:	827b      	strh	r3, [r7, #18]
    input[INPUT_RC_ROLL] = rcData[ROLL] - mcfg.midrc;
 800b520:	4b8b      	ldr	r3, [pc, #556]	; (800b750 <servoMixer+0x2d0>)
 800b522:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b526:	b29a      	uxth	r2, r3
 800b528:	4b8a      	ldr	r3, [pc, #552]	; (800b754 <servoMixer+0x2d4>)
 800b52a:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b52e:	1ad3      	subs	r3, r2, r3
 800b530:	b29b      	uxth	r3, r3
 800b532:	b21b      	sxth	r3, r3
 800b534:	82bb      	strh	r3, [r7, #20]
    input[INPUT_RC_PITCH] = rcData[PITCH] - mcfg.midrc;
 800b536:	4b86      	ldr	r3, [pc, #536]	; (800b750 <servoMixer+0x2d0>)
 800b538:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b53c:	b29a      	uxth	r2, r3
 800b53e:	4b85      	ldr	r3, [pc, #532]	; (800b754 <servoMixer+0x2d4>)
 800b540:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b544:	1ad3      	subs	r3, r2, r3
 800b546:	b29b      	uxth	r3, r3
 800b548:	b21b      	sxth	r3, r3
 800b54a:	82fb      	strh	r3, [r7, #22]
    input[INPUT_RC_YAW] = rcData[YAW] - mcfg.midrc;
 800b54c:	4b80      	ldr	r3, [pc, #512]	; (800b750 <servoMixer+0x2d0>)
 800b54e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b552:	b29a      	uxth	r2, r3
 800b554:	4b7f      	ldr	r3, [pc, #508]	; (800b754 <servoMixer+0x2d4>)
 800b556:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b55a:	1ad3      	subs	r3, r2, r3
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	b21b      	sxth	r3, r3
 800b560:	833b      	strh	r3, [r7, #24]
    input[INPUT_RC_THROTTLE] = rcData[THROTTLE] - mcfg.midrc;
 800b562:	4b7b      	ldr	r3, [pc, #492]	; (800b750 <servoMixer+0x2d0>)
 800b564:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b568:	b29a      	uxth	r2, r3
 800b56a:	4b7a      	ldr	r3, [pc, #488]	; (800b754 <servoMixer+0x2d4>)
 800b56c:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b570:	1ad3      	subs	r3, r2, r3
 800b572:	b29b      	uxth	r3, r3
 800b574:	b21b      	sxth	r3, r3
 800b576:	837b      	strh	r3, [r7, #26]

    for (i = 0; i < MAX_SERVOS; i++)
 800b578:	2300      	movs	r3, #0
 800b57a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b57e:	e00a      	b.n	800b596 <servoMixer+0x116>
        servo[i] = 0;
 800b580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b584:	4a74      	ldr	r2, [pc, #464]	; (800b758 <servoMixer+0x2d8>)
 800b586:	2100      	movs	r1, #0
 800b588:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++)
 800b58c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b590:	3301      	adds	r3, #1
 800b592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b59a:	2b07      	cmp	r3, #7
 800b59c:	d9f0      	bls.n	800b580 <servoMixer+0x100>

    // mix servos according to rules
    for (i = 0; i < numberRules; i++) {
 800b59e:	2300      	movs	r3, #0
 800b5a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5a4:	e15f      	b.n	800b866 <servoMixer+0x3e6>
        // consider rule if no box assigned or box is active
        if (currentServoMixer[i].box == 0 || rcOptions[BOXSERVO1 + currentServoMixer[i].box - 1]) {
 800b5a6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5aa:	496c      	ldr	r1, [pc, #432]	; (800b75c <servoMixer+0x2dc>)
 800b5ac:	4613      	mov	r3, r2
 800b5ae:	00db      	lsls	r3, r3, #3
 800b5b0:	1a9b      	subs	r3, r3, r2
 800b5b2:	440b      	add	r3, r1
 800b5b4:	3306      	adds	r3, #6
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d00e      	beq.n	800b5da <servoMixer+0x15a>
 800b5bc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5c0:	4966      	ldr	r1, [pc, #408]	; (800b75c <servoMixer+0x2dc>)
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	00db      	lsls	r3, r3, #3
 800b5c6:	1a9b      	subs	r3, r3, r2
 800b5c8:	440b      	add	r3, r1
 800b5ca:	3306      	adds	r3, #6
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	3314      	adds	r3, #20
 800b5d0:	4a63      	ldr	r2, [pc, #396]	; (800b760 <servoMixer+0x2e0>)
 800b5d2:	5cd3      	ldrb	r3, [r2, r3]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	f000 813b 	beq.w	800b850 <servoMixer+0x3d0>
            uint8_t target = currentServoMixer[i].targetChannel;
 800b5da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5de:	495f      	ldr	r1, [pc, #380]	; (800b75c <servoMixer+0x2dc>)
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	00db      	lsls	r3, r3, #3
 800b5e4:	1a9b      	subs	r3, r3, r2
 800b5e6:	440b      	add	r3, r1
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            uint8_t from = currentServoMixer[i].fromChannel;
 800b5ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5f2:	495a      	ldr	r1, [pc, #360]	; (800b75c <servoMixer+0x2dc>)
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	00db      	lsls	r3, r3, #3
 800b5f8:	1a9b      	subs	r3, r3, r2
 800b5fa:	440b      	add	r3, r1
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            uint16_t servo_width = cfg.servoConf[target].max - cfg.servoConf[target].min;
 800b604:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b608:	4956      	ldr	r1, [pc, #344]	; (800b764 <servoMixer+0x2e4>)
 800b60a:	4613      	mov	r3, r2
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	4413      	add	r3, r2
 800b610:	005b      	lsls	r3, r3, #1
 800b612:	440b      	add	r3, r1
 800b614:	33ba      	adds	r3, #186	; 0xba
 800b616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b61a:	b299      	uxth	r1, r3
 800b61c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b620:	4850      	ldr	r0, [pc, #320]	; (800b764 <servoMixer+0x2e4>)
 800b622:	4613      	mov	r3, r2
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	4413      	add	r3, r2
 800b628:	005b      	lsls	r3, r3, #1
 800b62a:	4403      	add	r3, r0
 800b62c:	33b8      	adds	r3, #184	; 0xb8
 800b62e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b632:	b29b      	uxth	r3, r3
 800b634:	1acb      	subs	r3, r1, r3
 800b636:	847b      	strh	r3, [r7, #34]	; 0x22
            int16_t min = currentServoMixer[i].min * servo_width / 100 - servo_width / 2;
 800b638:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b63c:	4947      	ldr	r1, [pc, #284]	; (800b75c <servoMixer+0x2dc>)
 800b63e:	4613      	mov	r3, r2
 800b640:	00db      	lsls	r3, r3, #3
 800b642:	1a9b      	subs	r3, r3, r2
 800b644:	440b      	add	r3, r1
 800b646:	3304      	adds	r3, #4
 800b648:	f993 3000 	ldrsb.w	r3, [r3]
 800b64c:	461a      	mov	r2, r3
 800b64e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b650:	fb02 f303 	mul.w	r3, r2, r3
 800b654:	4a44      	ldr	r2, [pc, #272]	; (800b768 <servoMixer+0x2e8>)
 800b656:	fb82 1203 	smull	r1, r2, r2, r3
 800b65a:	1152      	asrs	r2, r2, #5
 800b65c:	17db      	asrs	r3, r3, #31
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	b29a      	uxth	r2, r3
 800b662:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b664:	085b      	lsrs	r3, r3, #1
 800b666:	b29b      	uxth	r3, r3
 800b668:	1ad3      	subs	r3, r2, r3
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	843b      	strh	r3, [r7, #32]
            int16_t max = currentServoMixer[i].max * servo_width / 100 - servo_width / 2;
 800b66e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b672:	493a      	ldr	r1, [pc, #232]	; (800b75c <servoMixer+0x2dc>)
 800b674:	4613      	mov	r3, r2
 800b676:	00db      	lsls	r3, r3, #3
 800b678:	1a9b      	subs	r3, r3, r2
 800b67a:	440b      	add	r3, r1
 800b67c:	3305      	adds	r3, #5
 800b67e:	f993 3000 	ldrsb.w	r3, [r3]
 800b682:	461a      	mov	r2, r3
 800b684:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b686:	fb02 f303 	mul.w	r3, r2, r3
 800b68a:	4a37      	ldr	r2, [pc, #220]	; (800b768 <servoMixer+0x2e8>)
 800b68c:	fb82 1203 	smull	r1, r2, r2, r3
 800b690:	1152      	asrs	r2, r2, #5
 800b692:	17db      	asrs	r3, r3, #31
 800b694:	1ad3      	subs	r3, r2, r3
 800b696:	b29a      	uxth	r2, r3
 800b698:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b69a:	085b      	lsrs	r3, r3, #1
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	1ad3      	subs	r3, r2, r3
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	83fb      	strh	r3, [r7, #30]

            if (currentServoMixer[i].speed == 0)
 800b6a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b6a8:	492c      	ldr	r1, [pc, #176]	; (800b75c <servoMixer+0x2dc>)
 800b6aa:	4613      	mov	r3, r2
 800b6ac:	00db      	lsls	r3, r3, #3
 800b6ae:	1a9b      	subs	r3, r3, r2
 800b6b0:	440b      	add	r3, r1
 800b6b2:	3303      	adds	r3, #3
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d10c      	bne.n	800b6d4 <servoMixer+0x254>
                currentOutput[i] = input[from];
 800b6ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b6be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b6c2:	005b      	lsls	r3, r3, #1
 800b6c4:	3328      	adds	r3, #40	; 0x28
 800b6c6:	443b      	add	r3, r7
 800b6c8:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 800b6cc:	4b27      	ldr	r3, [pc, #156]	; (800b76c <servoMixer+0x2ec>)
 800b6ce:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800b6d2:	e082      	b.n	800b7da <servoMixer+0x35a>
            else {
                if (currentOutput[i] < input[from])
 800b6d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6d8:	4a24      	ldr	r2, [pc, #144]	; (800b76c <servoMixer+0x2ec>)
 800b6da:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800b6de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b6e2:	005b      	lsls	r3, r3, #1
 800b6e4:	3328      	adds	r3, #40	; 0x28
 800b6e6:	443b      	add	r3, r7
 800b6e8:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	da3f      	bge.n	800b770 <servoMixer+0x2f0>
                    currentOutput[i] = constrain(currentOutput[i] + currentServoMixer[i].speed, currentOutput[i], input[from]);
 800b6f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6f4:	4a1d      	ldr	r2, [pc, #116]	; (800b76c <servoMixer+0x2ec>)
 800b6f6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b700:	4916      	ldr	r1, [pc, #88]	; (800b75c <servoMixer+0x2dc>)
 800b702:	4613      	mov	r3, r2
 800b704:	00db      	lsls	r3, r3, #3
 800b706:	1a9b      	subs	r3, r3, r2
 800b708:	440b      	add	r3, r1
 800b70a:	3303      	adds	r3, #3
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	4418      	add	r0, r3
 800b710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b714:	4a15      	ldr	r2, [pc, #84]	; (800b76c <servoMixer+0x2ec>)
 800b716:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b71a:	4619      	mov	r1, r3
 800b71c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b720:	005b      	lsls	r3, r3, #1
 800b722:	3328      	adds	r3, #40	; 0x28
 800b724:	443b      	add	r3, r7
 800b726:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b72a:	461a      	mov	r2, r3
 800b72c:	f7f8 fade 	bl	8003cec <constrain>
 800b730:	4602      	mov	r2, r0
 800b732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b736:	b211      	sxth	r1, r2
 800b738:	4a0c      	ldr	r2, [pc, #48]	; (800b76c <servoMixer+0x2ec>)
 800b73a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800b73e:	e04c      	b.n	800b7da <servoMixer+0x35a>
 800b740:	20001988 	.word	0x20001988
 800b744:	200019e8 	.word	0x200019e8
 800b748:	20001a48 	.word	0x20001a48
 800b74c:	200017f0 	.word	0x200017f0
 800b750:	200019c4 	.word	0x200019c4
 800b754:	20000bbc 	.word	0x20000bbc
 800b758:	20000040 	.word	0x20000040
 800b75c:	200018e0 	.word	0x200018e0
 800b760:	20001a2c 	.word	0x20001a2c
 800b764:	20001128 	.word	0x20001128
 800b768:	51eb851f 	.word	0x51eb851f
 800b76c:	20001950 	.word	0x20001950
                else if (currentOutput[i] > input[from])
 800b770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b774:	4a63      	ldr	r2, [pc, #396]	; (800b904 <servoMixer+0x484>)
 800b776:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800b77a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b77e:	005b      	lsls	r3, r3, #1
 800b780:	3328      	adds	r3, #40	; 0x28
 800b782:	443b      	add	r3, r7
 800b784:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b788:	429a      	cmp	r2, r3
 800b78a:	dd26      	ble.n	800b7da <servoMixer+0x35a>
                    currentOutput[i] = constrain(currentOutput[i] - currentServoMixer[i].speed, input[from], currentOutput[i]);
 800b78c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b790:	4a5c      	ldr	r2, [pc, #368]	; (800b904 <servoMixer+0x484>)
 800b792:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b796:	4618      	mov	r0, r3
 800b798:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b79c:	495a      	ldr	r1, [pc, #360]	; (800b908 <servoMixer+0x488>)
 800b79e:	4613      	mov	r3, r2
 800b7a0:	00db      	lsls	r3, r3, #3
 800b7a2:	1a9b      	subs	r3, r3, r2
 800b7a4:	440b      	add	r3, r1
 800b7a6:	3303      	adds	r3, #3
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	1ac0      	subs	r0, r0, r3
 800b7ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b7b0:	005b      	lsls	r3, r3, #1
 800b7b2:	3328      	adds	r3, #40	; 0x28
 800b7b4:	443b      	add	r3, r7
 800b7b6:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7c0:	4a50      	ldr	r2, [pc, #320]	; (800b904 <servoMixer+0x484>)
 800b7c2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	f7f8 fa90 	bl	8003cec <constrain>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7d2:	b211      	sxth	r1, r2
 800b7d4:	4a4b      	ldr	r2, [pc, #300]	; (800b904 <servoMixer+0x484>)
 800b7d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            servo[target] += servoDirection(target, from) * constrain(((int32_t)currentOutput[i] * currentServoMixer[i].rate) / 100, min, max);
 800b7da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b7de:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800b7e2:	4611      	mov	r1, r2
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7ff fa73 	bl	800acd0 <servoDirection>
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7f0:	4a44      	ldr	r2, [pc, #272]	; (800b904 <servoMixer+0x484>)
 800b7f2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b7fc:	4942      	ldr	r1, [pc, #264]	; (800b908 <servoMixer+0x488>)
 800b7fe:	4613      	mov	r3, r2
 800b800:	00db      	lsls	r3, r3, #3
 800b802:	1a9b      	subs	r3, r3, r2
 800b804:	440b      	add	r3, r1
 800b806:	3302      	adds	r3, #2
 800b808:	f993 3000 	ldrsb.w	r3, [r3]
 800b80c:	fb00 f303 	mul.w	r3, r0, r3
 800b810:	4a3e      	ldr	r2, [pc, #248]	; (800b90c <servoMixer+0x48c>)
 800b812:	fb82 1203 	smull	r1, r2, r2, r3
 800b816:	1152      	asrs	r2, r2, #5
 800b818:	17db      	asrs	r3, r3, #31
 800b81a:	1ad3      	subs	r3, r2, r3
 800b81c:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 800b820:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b824:	4618      	mov	r0, r3
 800b826:	f7f8 fa61 	bl	8003cec <constrain>
 800b82a:	4603      	mov	r3, r0
 800b82c:	fb03 f104 	mul.w	r1, r3, r4
 800b830:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b834:	4a36      	ldr	r2, [pc, #216]	; (800b910 <servoMixer+0x490>)
 800b836:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	b28b      	uxth	r3, r1
 800b83e:	4413      	add	r3, r2
 800b840:	b29a      	uxth	r2, r3
 800b842:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b846:	b211      	sxth	r1, r2
 800b848:	4a31      	ldr	r2, [pc, #196]	; (800b910 <servoMixer+0x490>)
 800b84a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        if (currentServoMixer[i].box == 0 || rcOptions[BOXSERVO1 + currentServoMixer[i].box - 1]) {
 800b84e:	e005      	b.n	800b85c <servoMixer+0x3dc>
        } else
            currentOutput[i] = 0;
 800b850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b854:	4a2b      	ldr	r2, [pc, #172]	; (800b904 <servoMixer+0x484>)
 800b856:	2100      	movs	r1, #0
 800b858:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < numberRules; i++) {
 800b85c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b860:	3301      	adds	r3, #1
 800b862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b866:	4b2b      	ldr	r3, [pc, #172]	; (800b914 <servoMixer+0x494>)
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b86e:	429a      	cmp	r2, r3
 800b870:	f4ff ae99 	bcc.w	800b5a6 <servoMixer+0x126>
    }

    // servo rates
    for (i = 0; i < MAX_SERVOS; i++) {
 800b874:	2300      	movs	r3, #0
 800b876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b87a:	e039      	b.n	800b8f0 <servoMixer+0x470>
        servo[i] = ((int32_t)cfg.servoConf[i].rate * servo[i]) / 100;
 800b87c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b880:	4925      	ldr	r1, [pc, #148]	; (800b918 <servoMixer+0x498>)
 800b882:	4613      	mov	r3, r2
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	4413      	add	r3, r2
 800b888:	005b      	lsls	r3, r3, #1
 800b88a:	440b      	add	r3, r1
 800b88c:	33be      	adds	r3, #190	; 0xbe
 800b88e:	f993 3000 	ldrsb.w	r3, [r3]
 800b892:	4619      	mov	r1, r3
 800b894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b898:	4a1d      	ldr	r2, [pc, #116]	; (800b910 <servoMixer+0x490>)
 800b89a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b89e:	fb01 f303 	mul.w	r3, r1, r3
 800b8a2:	4a1a      	ldr	r2, [pc, #104]	; (800b90c <servoMixer+0x48c>)
 800b8a4:	fb82 1203 	smull	r1, r2, r2, r3
 800b8a8:	1152      	asrs	r2, r2, #5
 800b8aa:	17db      	asrs	r3, r3, #31
 800b8ac:	1ad2      	subs	r2, r2, r3
 800b8ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8b2:	b211      	sxth	r1, r2
 800b8b4:	4a16      	ldr	r2, [pc, #88]	; (800b910 <servoMixer+0x490>)
 800b8b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        servo[i] += servoMiddle(i);
 800b8ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7ff f9d0 	bl	800ac64 <servoMiddle>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8cc:	4a10      	ldr	r2, [pc, #64]	; (800b910 <servoMixer+0x490>)
 800b8ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b8d2:	b29a      	uxth	r2, r3
 800b8d4:	b28b      	uxth	r3, r1
 800b8d6:	4413      	add	r3, r2
 800b8d8:	b29a      	uxth	r2, r3
 800b8da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8de:	b211      	sxth	r1, r2
 800b8e0:	4a0b      	ldr	r2, [pc, #44]	; (800b910 <servoMixer+0x490>)
 800b8e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++) {
 800b8e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b8f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8f4:	2b07      	cmp	r3, #7
 800b8f6:	d9c1      	bls.n	800b87c <servoMixer+0x3fc>
    }
}
 800b8f8:	bf00      	nop
 800b8fa:	bf00      	nop
 800b8fc:	372c      	adds	r7, #44	; 0x2c
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd90      	pop	{r4, r7, pc}
 800b902:	bf00      	nop
 800b904:	20001950 	.word	0x20001950
 800b908:	200018e0 	.word	0x200018e0
 800b90c:	51eb851f 	.word	0x51eb851f
 800b910:	20000040 	.word	0x20000040
 800b914:	200017ed 	.word	0x200017ed
 800b918:	20001128 	.word	0x20001128

0800b91c <mixTable>:

void mixTable(void)
{
 800b91c:	b590      	push	{r4, r7, lr}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
    int16_t maxMotor;
    uint32_t i;

    if (numberMotor > 3) {
 800b922:	4b7e      	ldr	r3, [pc, #504]	; (800bb1c <mixTable+0x200>)
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	2b03      	cmp	r3, #3
 800b928:	d91d      	bls.n	800b966 <mixTable+0x4a>
        // prevent "yaw jump" during yaw correction
        axisPID[YAW] = constrain(axisPID[YAW], -100 - abs(rcCommand[YAW]), +100 + abs(rcCommand[YAW]));
 800b92a:	4b7d      	ldr	r3, [pc, #500]	; (800bb20 <mixTable+0x204>)
 800b92c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b930:	4618      	mov	r0, r3
 800b932:	4b7c      	ldr	r3, [pc, #496]	; (800bb24 <mixTable+0x208>)
 800b934:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	bfb8      	it	lt
 800b93c:	425b      	neglt	r3, r3
 800b93e:	b29b      	uxth	r3, r3
 800b940:	461a      	mov	r2, r3
 800b942:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800b946:	1a9b      	subs	r3, r3, r2
 800b948:	4a76      	ldr	r2, [pc, #472]	; (800bb24 <mixTable+0x208>)
 800b94a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b94e:	2a00      	cmp	r2, #0
 800b950:	bfb8      	it	lt
 800b952:	4252      	neglt	r2, r2
 800b954:	b292      	uxth	r2, r2
 800b956:	3264      	adds	r2, #100	; 0x64
 800b958:	4619      	mov	r1, r3
 800b95a:	f7f8 f9c7 	bl	8003cec <constrain>
 800b95e:	4603      	mov	r3, r0
 800b960:	b21a      	sxth	r2, r3
 800b962:	4b6f      	ldr	r3, [pc, #444]	; (800bb20 <mixTable+0x204>)
 800b964:	809a      	strh	r2, [r3, #4]
    }

    // motors for non-servo mixes
    if (numberMotor > 1) {
 800b966:	4b6d      	ldr	r3, [pc, #436]	; (800bb1c <mixTable+0x200>)
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	f240 809a 	bls.w	800baa4 <mixTable+0x188>
        for (i = 0; i < numberMotor; i++) {
 800b970:	2300      	movs	r3, #0
 800b972:	60bb      	str	r3, [r7, #8]
 800b974:	e08f      	b.n	800ba96 <mixTable+0x17a>
            motor[i] = rcCommand[THROTTLE] * currentMixer[i].throttle + axisPID[PITCH] * currentMixer[i].pitch + axisPID[ROLL] * currentMixer[i].roll + -cfg.yaw_direction * axisPID[YAW] * currentMixer[i].yaw;
 800b976:	4b6b      	ldr	r3, [pc, #428]	; (800bb24 <mixTable+0x208>)
 800b978:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b97c:	ee07 3a90 	vmov	s15, r3
 800b980:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b984:	4a68      	ldr	r2, [pc, #416]	; (800bb28 <mixTable+0x20c>)
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	011b      	lsls	r3, r3, #4
 800b98a:	4413      	add	r3, r2
 800b98c:	edd3 7a00 	vldr	s15, [r3]
 800b990:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b994:	4b62      	ldr	r3, [pc, #392]	; (800bb20 <mixTable+0x204>)
 800b996:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b99a:	ee07 3a90 	vmov	s15, r3
 800b99e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b9a2:	4a61      	ldr	r2, [pc, #388]	; (800bb28 <mixTable+0x20c>)
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	011b      	lsls	r3, r3, #4
 800b9a8:	4413      	add	r3, r2
 800b9aa:	3308      	adds	r3, #8
 800b9ac:	edd3 7a00 	vldr	s15, [r3]
 800b9b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b9b8:	4b59      	ldr	r3, [pc, #356]	; (800bb20 <mixTable+0x204>)
 800b9ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9be:	ee07 3a90 	vmov	s15, r3
 800b9c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b9c6:	4a58      	ldr	r2, [pc, #352]	; (800bb28 <mixTable+0x20c>)
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	011b      	lsls	r3, r3, #4
 800b9cc:	4413      	add	r3, r2
 800b9ce:	3304      	adds	r3, #4
 800b9d0:	edd3 7a00 	vldr	s15, [r3]
 800b9d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b9dc:	4b53      	ldr	r3, [pc, #332]	; (800bb2c <mixTable+0x210>)
 800b9de:	f993 310e 	ldrsb.w	r3, [r3, #270]	; 0x10e
 800b9e2:	425b      	negs	r3, r3
 800b9e4:	4a4e      	ldr	r2, [pc, #312]	; (800bb20 <mixTable+0x204>)
 800b9e6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b9ea:	fb02 f303 	mul.w	r3, r2, r3
 800b9ee:	ee07 3a90 	vmov	s15, r3
 800b9f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b9f6:	4a4c      	ldr	r2, [pc, #304]	; (800bb28 <mixTable+0x20c>)
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	011b      	lsls	r3, r3, #4
 800b9fc:	4413      	add	r3, r2
 800b9fe:	330c      	adds	r3, #12
 800ba00:	edd3 7a00 	vldr	s15, [r3]
 800ba04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba08:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba10:	ee17 3a90 	vmov	r3, s15
 800ba14:	b219      	sxth	r1, r3
 800ba16:	4a46      	ldr	r2, [pc, #280]	; (800bb30 <mixTable+0x214>)
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (f.FIXED_WING) { // vector_thrust handeling
 800ba1e:	4b45      	ldr	r3, [pc, #276]	; (800bb34 <mixTable+0x218>)
 800ba20:	7c1b      	ldrb	r3, [r3, #16]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d034      	beq.n	800ba90 <mixTable+0x174>
                if (cfg.fw_vector_thrust) {
 800ba26:	4b41      	ldr	r3, [pc, #260]	; (800bb2c <mixTable+0x210>)
 800ba28:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d028      	beq.n	800ba82 <mixTable+0x166>
                    if (f.PASSTHRU_MODE)
 800ba30:	4b40      	ldr	r3, [pc, #256]	; (800bb34 <mixTable+0x218>)
 800ba32:	7a9b      	ldrb	r3, [r3, #10]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d02b      	beq.n	800ba90 <mixTable+0x174>
                        motor[i] = rcCommand[THROTTLE] - rcCommand[YAW] * (i - 0.5f);
 800ba38:	4b3a      	ldr	r3, [pc, #232]	; (800bb24 <mixTable+0x208>)
 800ba3a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ba3e:	ee07 3a90 	vmov	s15, r3
 800ba42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba46:	4b37      	ldr	r3, [pc, #220]	; (800bb24 <mixTable+0x208>)
 800ba48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ba4c:	ee07 3a90 	vmov	s15, r3
 800ba50:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	ee07 3a90 	vmov	s15, r3
 800ba5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba5e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800ba62:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ba66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba72:	ee17 3a90 	vmov	r3, s15
 800ba76:	b219      	sxth	r1, r3
 800ba78:	4a2d      	ldr	r2, [pc, #180]	; (800bb30 <mixTable+0x214>)
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800ba80:	e006      	b.n	800ba90 <mixTable+0x174>
                } else { // Override mixerVectorThrust
                    motor[i] = rcCommand[THROTTLE];
 800ba82:	4b28      	ldr	r3, [pc, #160]	; (800bb24 <mixTable+0x208>)
 800ba84:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800ba88:	4a29      	ldr	r2, [pc, #164]	; (800bb30 <mixTable+0x214>)
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < numberMotor; i++) {
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	3301      	adds	r3, #1
 800ba94:	60bb      	str	r3, [r7, #8]
 800ba96:	4b21      	ldr	r3, [pc, #132]	; (800bb1c <mixTable+0x200>)
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	f4ff af69 	bcc.w	800b976 <mixTable+0x5a>
            }
        }
    }

    // airplane / servo mixes
    switch (mcfg.mixerConfiguration) {
 800baa4:	4b24      	ldr	r3, [pc, #144]	; (800bb38 <mixTable+0x21c>)
 800baa6:	795b      	ldrb	r3, [r3, #5]
 800baa8:	3b01      	subs	r3, #1
 800baaa:	2b17      	cmp	r3, #23
 800baac:	d87b      	bhi.n	800bba6 <mixTable+0x28a>
 800baae:	a201      	add	r2, pc, #4	; (adr r2, 800bab4 <mixTable+0x198>)
 800bab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab4:	0800bb15 	.word	0x0800bb15
 800bab8:	0800bba7 	.word	0x0800bba7
 800babc:	0800bba7 	.word	0x0800bba7
 800bac0:	0800bb15 	.word	0x0800bb15
 800bac4:	0800bb3d 	.word	0x0800bb3d
 800bac8:	0800bba7 	.word	0x0800bba7
 800bacc:	0800bba7 	.word	0x0800bba7
 800bad0:	0800bb15 	.word	0x0800bb15
 800bad4:	0800bba7 	.word	0x0800bba7
 800bad8:	0800bba7 	.word	0x0800bba7
 800badc:	0800bba7 	.word	0x0800bba7
 800bae0:	0800bba7 	.word	0x0800bba7
 800bae4:	0800bba7 	.word	0x0800bba7
 800bae8:	0800bb15 	.word	0x0800bb15
 800baec:	0800bba7 	.word	0x0800bba7
 800baf0:	0800bba7 	.word	0x0800bba7
 800baf4:	0800bba7 	.word	0x0800bba7
 800baf8:	0800bba7 	.word	0x0800bba7
 800bafc:	0800bba7 	.word	0x0800bba7
 800bb00:	0800bb15 	.word	0x0800bb15
 800bb04:	0800bb15 	.word	0x0800bb15
 800bb08:	0800bba7 	.word	0x0800bba7
 800bb0c:	0800bba7 	.word	0x0800bba7
 800bb10:	0800bb15 	.word	0x0800bb15
        case MULTITYPE_AIRPLANE:
        case MULTITYPE_BI:
        case MULTITYPE_TRI:
        case MULTITYPE_DUALCOPTER:
        case MULTITYPE_SINGLECOPTER:
            servoMixer();
 800bb14:	f7ff fcb4 	bl	800b480 <servoMixer>
            break;
 800bb18:	e045      	b.n	800bba6 <mixTable+0x28a>
 800bb1a:	bf00      	nop
 800bb1c:	200017ec 	.word	0x200017ec
 800bb20:	20001a48 	.word	0x20001a48
 800bb24:	200019e8 	.word	0x200019e8
 800bb28:	20001820 	.word	0x20001820
 800bb2c:	20001128 	.word	0x20001128
 800bb30:	200017f0 	.word	0x200017f0
 800bb34:	20001988 	.word	0x20001988
 800bb38:	20000bbc 	.word	0x20000bbc
        case MULTITYPE_GIMBAL:
            servo[0] = (((int32_t)cfg.servoConf[0].rate * angle[PITCH]) / 50) + servoMiddle(0);
 800bb3c:	4ba7      	ldr	r3, [pc, #668]	; (800bddc <mixTable+0x4c0>)
 800bb3e:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bb42:	461a      	mov	r2, r3
 800bb44:	4ba6      	ldr	r3, [pc, #664]	; (800bde0 <mixTable+0x4c4>)
 800bb46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bb4a:	fb02 f303 	mul.w	r3, r2, r3
 800bb4e:	4aa5      	ldr	r2, [pc, #660]	; (800bde4 <mixTable+0x4c8>)
 800bb50:	fb82 1203 	smull	r1, r2, r2, r3
 800bb54:	1112      	asrs	r2, r2, #4
 800bb56:	17db      	asrs	r3, r3, #31
 800bb58:	1ad3      	subs	r3, r2, r3
 800bb5a:	b29c      	uxth	r4, r3
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	f7ff f881 	bl	800ac64 <servoMiddle>
 800bb62:	4603      	mov	r3, r0
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	4423      	add	r3, r4
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	b21a      	sxth	r2, r3
 800bb6c:	4b9e      	ldr	r3, [pc, #632]	; (800bde8 <mixTable+0x4cc>)
 800bb6e:	801a      	strh	r2, [r3, #0]
            servo[1] = (((int32_t)cfg.servoConf[1].rate * angle[ROLL]) / 50) + servoMiddle(1);
 800bb70:	4b9a      	ldr	r3, [pc, #616]	; (800bddc <mixTable+0x4c0>)
 800bb72:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bb76:	461a      	mov	r2, r3
 800bb78:	4b99      	ldr	r3, [pc, #612]	; (800bde0 <mixTable+0x4c4>)
 800bb7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb7e:	fb02 f303 	mul.w	r3, r2, r3
 800bb82:	4a98      	ldr	r2, [pc, #608]	; (800bde4 <mixTable+0x4c8>)
 800bb84:	fb82 1203 	smull	r1, r2, r2, r3
 800bb88:	1112      	asrs	r2, r2, #4
 800bb8a:	17db      	asrs	r3, r3, #31
 800bb8c:	1ad3      	subs	r3, r2, r3
 800bb8e:	b29c      	uxth	r4, r3
 800bb90:	2001      	movs	r0, #1
 800bb92:	f7ff f867 	bl	800ac64 <servoMiddle>
 800bb96:	4603      	mov	r3, r0
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	4423      	add	r3, r4
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	b21a      	sxth	r2, r3
 800bba0:	4b91      	ldr	r3, [pc, #580]	; (800bde8 <mixTable+0x4cc>)
 800bba2:	805a      	strh	r2, [r3, #2]
            break;
 800bba4:	bf00      	nop
    }

    // do camstab
    if (feature(FEATURE_SERVO_TILT)) {
 800bba6:	2020      	movs	r0, #32
 800bba8:	f7fb fa1e 	bl	8006fe8 <feature>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	f000 80a3 	beq.w	800bcfa <mixTable+0x3de>
        // center at fixed position, or vary either pitch or roll by RC channel
        servo[0] = servoMiddle(0);
 800bbb4:	2000      	movs	r0, #0
 800bbb6:	f7ff f855 	bl	800ac64 <servoMiddle>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	4b8a      	ldr	r3, [pc, #552]	; (800bde8 <mixTable+0x4cc>)
 800bbc0:	801a      	strh	r2, [r3, #0]
        servo[1] = servoMiddle(1);
 800bbc2:	2001      	movs	r0, #1
 800bbc4:	f7ff f84e 	bl	800ac64 <servoMiddle>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	461a      	mov	r2, r3
 800bbcc:	4b86      	ldr	r3, [pc, #536]	; (800bde8 <mixTable+0x4cc>)
 800bbce:	805a      	strh	r2, [r3, #2]

        if (rcOptions[BOXCAMSTAB]) {
 800bbd0:	4b86      	ldr	r3, [pc, #536]	; (800bdec <mixTable+0x4d0>)
 800bbd2:	7a1b      	ldrb	r3, [r3, #8]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f000 8090 	beq.w	800bcfa <mixTable+0x3de>
            if (cfg.gimbal_flags & GIMBAL_MIXTILT) {
 800bbda:	4b80      	ldr	r3, [pc, #512]	; (800bddc <mixTable+0x4c0>)
 800bbdc:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800bbe0:	f003 0302 	and.w	r3, r3, #2
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d056      	beq.n	800bc96 <mixTable+0x37a>
                servo[0] -= (-(int32_t)cfg.servoConf[0].rate) * angle[PITCH] / 50 - (int32_t)cfg.servoConf[1].rate * angle[ROLL] / 50;
 800bbe8:	4b7f      	ldr	r3, [pc, #508]	; (800bde8 <mixTable+0x4cc>)
 800bbea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	4b7a      	ldr	r3, [pc, #488]	; (800bddc <mixTable+0x4c0>)
 800bbf2:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bbf6:	425b      	negs	r3, r3
 800bbf8:	4979      	ldr	r1, [pc, #484]	; (800bde0 <mixTable+0x4c4>)
 800bbfa:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800bbfe:	fb01 f303 	mul.w	r3, r1, r3
 800bc02:	4978      	ldr	r1, [pc, #480]	; (800bde4 <mixTable+0x4c8>)
 800bc04:	fb81 0103 	smull	r0, r1, r1, r3
 800bc08:	1109      	asrs	r1, r1, #4
 800bc0a:	17db      	asrs	r3, r3, #31
 800bc0c:	1acb      	subs	r3, r1, r3
 800bc0e:	b299      	uxth	r1, r3
 800bc10:	4b72      	ldr	r3, [pc, #456]	; (800bddc <mixTable+0x4c0>)
 800bc12:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bc16:	4618      	mov	r0, r3
 800bc18:	4b71      	ldr	r3, [pc, #452]	; (800bde0 <mixTable+0x4c4>)
 800bc1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc1e:	fb00 f303 	mul.w	r3, r0, r3
 800bc22:	4870      	ldr	r0, [pc, #448]	; (800bde4 <mixTable+0x4c8>)
 800bc24:	fb80 4003 	smull	r4, r0, r0, r3
 800bc28:	1100      	asrs	r0, r0, #4
 800bc2a:	17db      	asrs	r3, r3, #31
 800bc2c:	1a1b      	subs	r3, r3, r0
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	440b      	add	r3, r1
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	1ad3      	subs	r3, r2, r3
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	b21a      	sxth	r2, r3
 800bc3a:	4b6b      	ldr	r3, [pc, #428]	; (800bde8 <mixTable+0x4cc>)
 800bc3c:	801a      	strh	r2, [r3, #0]
                servo[1] += (-(int32_t)cfg.servoConf[0].rate) * angle[PITCH] / 50 + (int32_t)cfg.servoConf[1].rate * angle[ROLL] / 50;
 800bc3e:	4b6a      	ldr	r3, [pc, #424]	; (800bde8 <mixTable+0x4cc>)
 800bc40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	4b65      	ldr	r3, [pc, #404]	; (800bddc <mixTable+0x4c0>)
 800bc48:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bc4c:	425b      	negs	r3, r3
 800bc4e:	4964      	ldr	r1, [pc, #400]	; (800bde0 <mixTable+0x4c4>)
 800bc50:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800bc54:	fb01 f303 	mul.w	r3, r1, r3
 800bc58:	4962      	ldr	r1, [pc, #392]	; (800bde4 <mixTable+0x4c8>)
 800bc5a:	fb81 0103 	smull	r0, r1, r1, r3
 800bc5e:	1109      	asrs	r1, r1, #4
 800bc60:	17db      	asrs	r3, r3, #31
 800bc62:	1acb      	subs	r3, r1, r3
 800bc64:	b299      	uxth	r1, r3
 800bc66:	4b5d      	ldr	r3, [pc, #372]	; (800bddc <mixTable+0x4c0>)
 800bc68:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	4b5c      	ldr	r3, [pc, #368]	; (800bde0 <mixTable+0x4c4>)
 800bc70:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc74:	fb00 f303 	mul.w	r3, r0, r3
 800bc78:	485a      	ldr	r0, [pc, #360]	; (800bde4 <mixTable+0x4c8>)
 800bc7a:	fb80 4003 	smull	r4, r0, r0, r3
 800bc7e:	1100      	asrs	r0, r0, #4
 800bc80:	17db      	asrs	r3, r3, #31
 800bc82:	1ac3      	subs	r3, r0, r3
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	440b      	add	r3, r1
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	4413      	add	r3, r2
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	b21a      	sxth	r2, r3
 800bc90:	4b55      	ldr	r3, [pc, #340]	; (800bde8 <mixTable+0x4cc>)
 800bc92:	805a      	strh	r2, [r3, #2]
 800bc94:	e031      	b.n	800bcfa <mixTable+0x3de>
            } else {
                servo[0] += (int32_t)cfg.servoConf[0].rate * angle[PITCH] / 50;
 800bc96:	4b54      	ldr	r3, [pc, #336]	; (800bde8 <mixTable+0x4cc>)
 800bc98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc9c:	b29a      	uxth	r2, r3
 800bc9e:	4b4f      	ldr	r3, [pc, #316]	; (800bddc <mixTable+0x4c0>)
 800bca0:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bca4:	4619      	mov	r1, r3
 800bca6:	4b4e      	ldr	r3, [pc, #312]	; (800bde0 <mixTable+0x4c4>)
 800bca8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bcac:	fb01 f303 	mul.w	r3, r1, r3
 800bcb0:	494c      	ldr	r1, [pc, #304]	; (800bde4 <mixTable+0x4c8>)
 800bcb2:	fb81 0103 	smull	r0, r1, r1, r3
 800bcb6:	1109      	asrs	r1, r1, #4
 800bcb8:	17db      	asrs	r3, r3, #31
 800bcba:	1acb      	subs	r3, r1, r3
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	4413      	add	r3, r2
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	b21a      	sxth	r2, r3
 800bcc4:	4b48      	ldr	r3, [pc, #288]	; (800bde8 <mixTable+0x4cc>)
 800bcc6:	801a      	strh	r2, [r3, #0]
                servo[1] += (int32_t)cfg.servoConf[1].rate * angle[ROLL]  / 50;
 800bcc8:	4b47      	ldr	r3, [pc, #284]	; (800bde8 <mixTable+0x4cc>)
 800bcca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bcce:	b29a      	uxth	r2, r3
 800bcd0:	4b42      	ldr	r3, [pc, #264]	; (800bddc <mixTable+0x4c0>)
 800bcd2:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	4b41      	ldr	r3, [pc, #260]	; (800bde0 <mixTable+0x4c4>)
 800bcda:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bcde:	fb01 f303 	mul.w	r3, r1, r3
 800bce2:	4940      	ldr	r1, [pc, #256]	; (800bde4 <mixTable+0x4c8>)
 800bce4:	fb81 0103 	smull	r0, r1, r1, r3
 800bce8:	1109      	asrs	r1, r1, #4
 800bcea:	17db      	asrs	r3, r3, #31
 800bcec:	1acb      	subs	r3, r1, r3
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	4413      	add	r3, r2
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	b21a      	sxth	r2, r3
 800bcf6:	4b3c      	ldr	r3, [pc, #240]	; (800bde8 <mixTable+0x4cc>)
 800bcf8:	805a      	strh	r2, [r3, #2]
            }
        }
    }

    // constrain servos
    for (i = 0; i < MAX_SERVOS; i++)
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	60bb      	str	r3, [r7, #8]
 800bcfe:	e026      	b.n	800bd4e <mixTable+0x432>
        servo[i] = constrain(servo[i], cfg.servoConf[i].min, cfg.servoConf[i].max); // limit the values
 800bd00:	4a39      	ldr	r2, [pc, #228]	; (800bde8 <mixTable+0x4cc>)
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bd08:	4618      	mov	r0, r3
 800bd0a:	4934      	ldr	r1, [pc, #208]	; (800bddc <mixTable+0x4c0>)
 800bd0c:	68ba      	ldr	r2, [r7, #8]
 800bd0e:	4613      	mov	r3, r2
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	4413      	add	r3, r2
 800bd14:	005b      	lsls	r3, r3, #1
 800bd16:	440b      	add	r3, r1
 800bd18:	33b8      	adds	r3, #184	; 0xb8
 800bd1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd1e:	461c      	mov	r4, r3
 800bd20:	492e      	ldr	r1, [pc, #184]	; (800bddc <mixTable+0x4c0>)
 800bd22:	68ba      	ldr	r2, [r7, #8]
 800bd24:	4613      	mov	r3, r2
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	4413      	add	r3, r2
 800bd2a:	005b      	lsls	r3, r3, #1
 800bd2c:	440b      	add	r3, r1
 800bd2e:	33ba      	adds	r3, #186	; 0xba
 800bd30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd34:	461a      	mov	r2, r3
 800bd36:	4621      	mov	r1, r4
 800bd38:	f7f7 ffd8 	bl	8003cec <constrain>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	b219      	sxth	r1, r3
 800bd40:	4a29      	ldr	r2, [pc, #164]	; (800bde8 <mixTable+0x4cc>)
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++)
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	60bb      	str	r3, [r7, #8]
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	2b07      	cmp	r3, #7
 800bd52:	d9d5      	bls.n	800bd00 <mixTable+0x3e4>

    // forward AUX1-4 to servo outputs (not constrained)
    if (cfg.gimbal_flags & GIMBAL_FORWARDAUX) {
 800bd54:	4b21      	ldr	r3, [pc, #132]	; (800bddc <mixTable+0x4c0>)
 800bd56:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800bd5a:	f003 0304 	and.w	r3, r3, #4
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d01c      	beq.n	800bd9c <mixTable+0x480>
        int offset = core.numServos - 4;
 800bd62:	4b23      	ldr	r3, [pc, #140]	; (800bdf0 <mixTable+0x4d4>)
 800bd64:	7d9b      	ldrb	r3, [r3, #22]
 800bd66:	3b04      	subs	r3, #4
 800bd68:	607b      	str	r3, [r7, #4]
        // offset servos based off number already used in mixer types
        // airplane and servo_tilt together can't be used
        // calculate offset by taking 4 from core.numServos
        for (i = 0; i < 4; i++)
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	60bb      	str	r3, [r7, #8]
 800bd6e:	e012      	b.n	800bd96 <mixTable+0x47a>
        	actPwmWriteServo(i + offset, rcData[AUX1 + i]);
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	b2da      	uxtb	r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	4413      	add	r3, r2
 800bd7a:	b2da      	uxtb	r2, r3
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	3304      	adds	r3, #4
 800bd80:	491c      	ldr	r1, [pc, #112]	; (800bdf4 <mixTable+0x4d8>)
 800bd82:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	4619      	mov	r1, r3
 800bd8a:	4610      	mov	r0, r2
 800bd8c:	f7f6 f8ca 	bl	8001f24 <actPwmWriteServo>
        for (i = 0; i < 4; i++)
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	3301      	adds	r3, #1
 800bd94:	60bb      	str	r3, [r7, #8]
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	2b03      	cmp	r3, #3
 800bd9a:	d9e9      	bls.n	800bd70 <mixTable+0x454>
    }

    maxMotor = motor[0];
 800bd9c:	4b16      	ldr	r3, [pc, #88]	; (800bdf8 <mixTable+0x4dc>)
 800bd9e:	881b      	ldrh	r3, [r3, #0]
 800bda0:	81fb      	strh	r3, [r7, #14]
    for (i = 1; i < numberMotor; i++)
 800bda2:	2301      	movs	r3, #1
 800bda4:	60bb      	str	r3, [r7, #8]
 800bda6:	e00f      	b.n	800bdc8 <mixTable+0x4ac>
        if (motor[i] > maxMotor)
 800bda8:	4a13      	ldr	r2, [pc, #76]	; (800bdf8 <mixTable+0x4dc>)
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bdb0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	da04      	bge.n	800bdc2 <mixTable+0x4a6>
            maxMotor = motor[i];
 800bdb8:	4a0f      	ldr	r2, [pc, #60]	; (800bdf8 <mixTable+0x4dc>)
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdc0:	81fb      	strh	r3, [r7, #14]
    for (i = 1; i < numberMotor; i++)
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	60bb      	str	r3, [r7, #8]
 800bdc8:	4b0c      	ldr	r3, [pc, #48]	; (800bdfc <mixTable+0x4e0>)
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	461a      	mov	r2, r3
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d3e9      	bcc.n	800bda8 <mixTable+0x48c>
    for (i = 0; i < numberMotor; i++) {
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	60bb      	str	r3, [r7, #8]
 800bdd8:	e0e8      	b.n	800bfac <mixTable+0x690>
 800bdda:	bf00      	nop
 800bddc:	20001128 	.word	0x20001128
 800bde0:	20001790 	.word	0x20001790
 800bde4:	51eb851f 	.word	0x51eb851f
 800bde8:	20000040 	.word	0x20000040
 800bdec:	20001a2c 	.word	0x20001a2c
 800bdf0:	20000afc 	.word	0x20000afc
 800bdf4:	200019c4 	.word	0x200019c4
 800bdf8:	200017f0 	.word	0x200017f0
 800bdfc:	200017ec 	.word	0x200017ec
        if (maxMotor > mcfg.maxthrottle && !f.FIXED_WING)     // this is a way to still have good gyro corrections if at least one motor reaches its max.
 800be00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800be04:	4a6f      	ldr	r2, [pc, #444]	; (800bfc4 <mixTable+0x6a8>)
 800be06:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800be0a:	4293      	cmp	r3, r2
 800be0c:	dd15      	ble.n	800be3a <mixTable+0x51e>
 800be0e:	4b6e      	ldr	r3, [pc, #440]	; (800bfc8 <mixTable+0x6ac>)
 800be10:	7c1b      	ldrb	r3, [r3, #16]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d111      	bne.n	800be3a <mixTable+0x51e>
            motor[i] -= maxMotor - mcfg.maxthrottle;
 800be16:	4a6d      	ldr	r2, [pc, #436]	; (800bfcc <mixTable+0x6b0>)
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800be1e:	b29a      	uxth	r2, r3
 800be20:	4b68      	ldr	r3, [pc, #416]	; (800bfc4 <mixTable+0x6a8>)
 800be22:	f8b3 1142 	ldrh.w	r1, [r3, #322]	; 0x142
 800be26:	89fb      	ldrh	r3, [r7, #14]
 800be28:	1acb      	subs	r3, r1, r3
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	4413      	add	r3, r2
 800be2e:	b29b      	uxth	r3, r3
 800be30:	b219      	sxth	r1, r3
 800be32:	4a66      	ldr	r2, [pc, #408]	; (800bfcc <mixTable+0x6b0>)
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        if (feature(FEATURE_3D)) {
 800be3a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800be3e:	f7fb f8d3 	bl	8006fe8 <feature>
 800be42:	4603      	mov	r3, r0
 800be44:	2b00      	cmp	r3, #0
 800be46:	d060      	beq.n	800bf0a <mixTable+0x5ee>
            if ((rcData[THROTTLE]) > mcfg.midrc) {
 800be48:	4b61      	ldr	r3, [pc, #388]	; (800bfd0 <mixTable+0x6b4>)
 800be4a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800be4e:	461a      	mov	r2, r3
 800be50:	4b5c      	ldr	r3, [pc, #368]	; (800bfc4 <mixTable+0x6a8>)
 800be52:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800be56:	429a      	cmp	r2, r3
 800be58:	dd2b      	ble.n	800beb2 <mixTable+0x596>
                motor[i] = constrain(motor[i], mcfg.deadband3d_high, mcfg.maxthrottle);
 800be5a:	4a5c      	ldr	r2, [pc, #368]	; (800bfcc <mixTable+0x6b0>)
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800be62:	4618      	mov	r0, r3
 800be64:	4b57      	ldr	r3, [pc, #348]	; (800bfc4 <mixTable+0x6a8>)
 800be66:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 800be6a:	4619      	mov	r1, r3
 800be6c:	4b55      	ldr	r3, [pc, #340]	; (800bfc4 <mixTable+0x6a8>)
 800be6e:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800be72:	461a      	mov	r2, r3
 800be74:	f7f7 ff3a 	bl	8003cec <constrain>
 800be78:	4603      	mov	r3, r0
 800be7a:	b219      	sxth	r1, r3
 800be7c:	4a53      	ldr	r2, [pc, #332]	; (800bfcc <mixTable+0x6b0>)
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if ((mcfg.mixerConfiguration) == MULTITYPE_TRI) {
 800be84:	4b4f      	ldr	r3, [pc, #316]	; (800bfc4 <mixTable+0x6a8>)
 800be86:	795b      	ldrb	r3, [r3, #5]
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d17d      	bne.n	800bf88 <mixTable+0x66c>
                    servo[5] = constrain(servo[5], cfg.servoConf[5].min, cfg.servoConf[5].max);
 800be8c:	4b51      	ldr	r3, [pc, #324]	; (800bfd4 <mixTable+0x6b8>)
 800be8e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800be92:	4618      	mov	r0, r3
 800be94:	4b50      	ldr	r3, [pc, #320]	; (800bfd8 <mixTable+0x6bc>)
 800be96:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	; 0xea
 800be9a:	4619      	mov	r1, r3
 800be9c:	4b4e      	ldr	r3, [pc, #312]	; (800bfd8 <mixTable+0x6bc>)
 800be9e:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800bea2:	461a      	mov	r2, r3
 800bea4:	f7f7 ff22 	bl	8003cec <constrain>
 800bea8:	4603      	mov	r3, r0
 800beaa:	b21a      	sxth	r2, r3
 800beac:	4b49      	ldr	r3, [pc, #292]	; (800bfd4 <mixTable+0x6b8>)
 800beae:	815a      	strh	r2, [r3, #10]
 800beb0:	e06a      	b.n	800bf88 <mixTable+0x66c>
                }
            } else {
                motor[i] = constrain(motor[i], mcfg.mincommand, mcfg.deadband3d_low);
 800beb2:	4a46      	ldr	r2, [pc, #280]	; (800bfcc <mixTable+0x6b0>)
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800beba:	4618      	mov	r0, r3
 800bebc:	4b41      	ldr	r3, [pc, #260]	; (800bfc4 <mixTable+0x6a8>)
 800bebe:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800bec2:	4619      	mov	r1, r3
 800bec4:	4b3f      	ldr	r3, [pc, #252]	; (800bfc4 <mixTable+0x6a8>)
 800bec6:	f8b3 3146 	ldrh.w	r3, [r3, #326]	; 0x146
 800beca:	461a      	mov	r2, r3
 800becc:	f7f7 ff0e 	bl	8003cec <constrain>
 800bed0:	4603      	mov	r3, r0
 800bed2:	b219      	sxth	r1, r3
 800bed4:	4a3d      	ldr	r2, [pc, #244]	; (800bfcc <mixTable+0x6b0>)
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if ((mcfg.mixerConfiguration) == MULTITYPE_TRI) {
 800bedc:	4b39      	ldr	r3, [pc, #228]	; (800bfc4 <mixTable+0x6a8>)
 800bede:	795b      	ldrb	r3, [r3, #5]
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d151      	bne.n	800bf88 <mixTable+0x66c>
                    servo[5] = constrain(servo[5], cfg.servoConf[5].max, cfg.servoConf[5].min);
 800bee4:	4b3b      	ldr	r3, [pc, #236]	; (800bfd4 <mixTable+0x6b8>)
 800bee6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800beea:	4618      	mov	r0, r3
 800beec:	4b3a      	ldr	r3, [pc, #232]	; (800bfd8 <mixTable+0x6bc>)
 800beee:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800bef2:	4619      	mov	r1, r3
 800bef4:	4b38      	ldr	r3, [pc, #224]	; (800bfd8 <mixTable+0x6bc>)
 800bef6:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	; 0xea
 800befa:	461a      	mov	r2, r3
 800befc:	f7f7 fef6 	bl	8003cec <constrain>
 800bf00:	4603      	mov	r3, r0
 800bf02:	b21a      	sxth	r2, r3
 800bf04:	4b33      	ldr	r3, [pc, #204]	; (800bfd4 <mixTable+0x6b8>)
 800bf06:	815a      	strh	r2, [r3, #10]
 800bf08:	e03e      	b.n	800bf88 <mixTable+0x66c>
                }
            }
        } else {
            motor[i] = constrain(motor[i], mcfg.minthrottle, mcfg.maxthrottle);
 800bf0a:	4a30      	ldr	r2, [pc, #192]	; (800bfcc <mixTable+0x6b0>)
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bf12:	4618      	mov	r0, r3
 800bf14:	4b2b      	ldr	r3, [pc, #172]	; (800bfc4 <mixTable+0x6a8>)
 800bf16:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	4b29      	ldr	r3, [pc, #164]	; (800bfc4 <mixTable+0x6a8>)
 800bf1e:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800bf22:	461a      	mov	r2, r3
 800bf24:	f7f7 fee2 	bl	8003cec <constrain>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	b219      	sxth	r1, r3
 800bf2c:	4a27      	ldr	r2, [pc, #156]	; (800bfcc <mixTable+0x6b0>)
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if ((rcData[THROTTLE]) < mcfg.mincheck) {
 800bf34:	4b26      	ldr	r3, [pc, #152]	; (800bfd0 <mixTable+0x6b4>)
 800bf36:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	4b21      	ldr	r3, [pc, #132]	; (800bfc4 <mixTable+0x6a8>)
 800bf3e:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800bf42:	429a      	cmp	r2, r3
 800bf44:	da1d      	bge.n	800bf82 <mixTable+0x666>
                if (!feature(FEATURE_MOTOR_STOP))
 800bf46:	2010      	movs	r0, #16
 800bf48:	f7fb f84e 	bl	8006fe8 <feature>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	f083 0301 	eor.w	r3, r3, #1
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d008      	beq.n	800bf6a <mixTable+0x64e>
                    motor[i] = mcfg.minthrottle;
 800bf58:	4b1a      	ldr	r3, [pc, #104]	; (800bfc4 <mixTable+0x6a8>)
 800bf5a:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800bf5e:	b219      	sxth	r1, r3
 800bf60:	4a1a      	ldr	r2, [pc, #104]	; (800bfcc <mixTable+0x6b0>)
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800bf68:	e00e      	b.n	800bf88 <mixTable+0x66c>
                else {
                    motor[i] = mcfg.mincommand;
 800bf6a:	4b16      	ldr	r3, [pc, #88]	; (800bfc4 <mixTable+0x6a8>)
 800bf6c:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800bf70:	b219      	sxth	r1, r3
 800bf72:	4a16      	ldr	r2, [pc, #88]	; (800bfcc <mixTable+0x6b0>)
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    f.MOTORS_STOPPED = 1;
 800bf7a:	4b13      	ldr	r3, [pc, #76]	; (800bfc8 <mixTable+0x6ac>)
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	745a      	strb	r2, [r3, #17]
 800bf80:	e002      	b.n	800bf88 <mixTable+0x66c>
                }
            } else {
                f.MOTORS_STOPPED = 0;
 800bf82:	4b11      	ldr	r3, [pc, #68]	; (800bfc8 <mixTable+0x6ac>)
 800bf84:	2200      	movs	r2, #0
 800bf86:	745a      	strb	r2, [r3, #17]
            }
        }
        if (!f.ARMED) {
 800bf88:	4b0f      	ldr	r3, [pc, #60]	; (800bfc8 <mixTable+0x6ac>)
 800bf8a:	785b      	ldrb	r3, [r3, #1]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d10a      	bne.n	800bfa6 <mixTable+0x68a>
            motor[i] = motor_disarmed[i];
 800bf90:	4a12      	ldr	r2, [pc, #72]	; (800bfdc <mixTable+0x6c0>)
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800bf98:	4a0c      	ldr	r2, [pc, #48]	; (800bfcc <mixTable+0x6b0>)
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            f.MOTORS_STOPPED = 1;
 800bfa0:	4b09      	ldr	r3, [pc, #36]	; (800bfc8 <mixTable+0x6ac>)
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	745a      	strb	r2, [r3, #17]
    for (i = 0; i < numberMotor; i++) {
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	60bb      	str	r3, [r7, #8]
 800bfac:	4b0c      	ldr	r3, [pc, #48]	; (800bfe0 <mixTable+0x6c4>)
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	f4ff af23 	bcc.w	800be00 <mixTable+0x4e4>
        }
    }
}
 800bfba:	bf00      	nop
 800bfbc:	bf00      	nop
 800bfbe:	3714      	adds	r7, #20
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd90      	pop	{r4, r7, pc}
 800bfc4:	20000bbc 	.word	0x20000bbc
 800bfc8:	20001988 	.word	0x20001988
 800bfcc:	200017f0 	.word	0x200017f0
 800bfd0:	200019c4 	.word	0x200019c4
 800bfd4:	20000040 	.word	0x20000040
 800bfd8:	20001128 	.word	0x20001128
 800bfdc:	20001808 	.word	0x20001808
 800bfe0:	200017ec 	.word	0x200017ec

0800bfe4 <blinkLED>:
// Time of automatic disarm when "Don't spin the motors when armed" is enabled.
static uint32_t disarmTime = 0;


void blinkLED(uint8_t num, uint8_t wait, uint8_t repeat)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	4603      	mov	r3, r0
 800bfec:	71fb      	strb	r3, [r7, #7]
 800bfee:	460b      	mov	r3, r1
 800bff0:	71bb      	strb	r3, [r7, #6]
 800bff2:	4613      	mov	r3, r2
 800bff4:	717b      	strb	r3, [r7, #5]
    uint8_t i, r;

    for (r = 0; r < repeat; r++) {
 800bff6:	2300      	movs	r3, #0
 800bff8:	73bb      	strb	r3, [r7, #14]
 800bffa:	e020      	b.n	800c03e <blinkLED+0x5a>
        for (i = 0; i < num; i++) {
 800bffc:	2300      	movs	r3, #0
 800bffe:	73fb      	strb	r3, [r7, #15]
 800c000:	e013      	b.n	800c02a <blinkLED+0x46>
            actLed0Toggle();            // switch LEDPIN state
 800c002:	f7f6 f821 	bl	8002048 <actLed0Toggle>
            actBuzzerAction(PIF_ID_BUZZER, ON);
 800c006:	2101      	movs	r1, #1
 800c008:	f44f 7098 	mov.w	r0, #304	; 0x130
 800c00c:	f7f6 f85e 	bl	80020cc <actBuzzerAction>
            pif_Delay1ms(wait);
 800c010:	79bb      	ldrb	r3, [r7, #6]
 800c012:	b29b      	uxth	r3, r3
 800c014:	4618      	mov	r0, r3
 800c016:	f005 fa69 	bl	80114ec <pif_Delay1ms>
            actBuzzerAction(PIF_ID_BUZZER, OFF);
 800c01a:	2100      	movs	r1, #0
 800c01c:	f44f 7098 	mov.w	r0, #304	; 0x130
 800c020:	f7f6 f854 	bl	80020cc <actBuzzerAction>
        for (i = 0; i < num; i++) {
 800c024:	7bfb      	ldrb	r3, [r7, #15]
 800c026:	3301      	adds	r3, #1
 800c028:	73fb      	strb	r3, [r7, #15]
 800c02a:	7bfa      	ldrb	r2, [r7, #15]
 800c02c:	79fb      	ldrb	r3, [r7, #7]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d3e7      	bcc.n	800c002 <blinkLED+0x1e>
        }
        pif_Delay1ms(60);
 800c032:	203c      	movs	r0, #60	; 0x3c
 800c034:	f005 fa5a 	bl	80114ec <pif_Delay1ms>
    for (r = 0; r < repeat; r++) {
 800c038:	7bbb      	ldrb	r3, [r7, #14]
 800c03a:	3301      	adds	r3, #1
 800c03c:	73bb      	strb	r3, [r7, #14]
 800c03e:	7bba      	ldrb	r2, [r7, #14]
 800c040:	797b      	ldrb	r3, [r7, #5]
 800c042:	429a      	cmp	r2, r3
 800c044:	d3da      	bcc.n	800bffc <blinkLED+0x18>
    }
}
 800c046:	bf00      	nop
 800c048:	bf00      	nop
 800c04a:	3710      	adds	r7, #16
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <annexCode>:

void annexCode(void)
{
 800c050:	b590      	push	{r4, r7, lr}
 800c052:	b08b      	sub	sp, #44	; 0x2c
 800c054:	af00      	add	r7, sp, #0
    int32_t tmp, tmp2;
    int32_t axis, prop1, prop2;
    static uint16_t MaxBrkpoint = 300; // Max angle of APA

    if (!f.FIXED_WING) { // Baseflight original dynamic PID adjustemnt
 800c056:	4b98      	ldr	r3, [pc, #608]	; (800c2b8 <annexCode+0x268>)
 800c058:	7c1b      	ldrb	r3, [r3, #16]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d12e      	bne.n	800c0bc <annexCode+0x6c>
        // PITCH & ROLL only dynamic PID adjustemnt,  depending on throttle value
        if (rcData[THROTTLE] < cfg.tpa_breakpoint) {
 800c05e:	4b97      	ldr	r3, [pc, #604]	; (800c2bc <annexCode+0x26c>)
 800c060:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c064:	461a      	mov	r2, r3
 800c066:	4b96      	ldr	r3, [pc, #600]	; (800c2c0 <annexCode+0x270>)
 800c068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c06a:	429a      	cmp	r2, r3
 800c06c:	da02      	bge.n	800c074 <annexCode+0x24>
            prop2 = 100;
 800c06e:	2364      	movs	r3, #100	; 0x64
 800c070:	61bb      	str	r3, [r7, #24]
 800c072:	e07b      	b.n	800c16c <annexCode+0x11c>
        } else {
            if (rcData[THROTTLE] < 2000) {
 800c074:	4b91      	ldr	r3, [pc, #580]	; (800c2bc <annexCode+0x26c>)
 800c076:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c07a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c07e:	da16      	bge.n	800c0ae <annexCode+0x5e>
                prop2 = 100 - (uint16_t)cfg.dynThrPID * (rcData[THROTTLE] - cfg.tpa_breakpoint) / (2000 - cfg.tpa_breakpoint);
 800c080:	4b8f      	ldr	r3, [pc, #572]	; (800c2c0 <annexCode+0x270>)
 800c082:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c086:	461a      	mov	r2, r3
 800c088:	4b8c      	ldr	r3, [pc, #560]	; (800c2bc <annexCode+0x26c>)
 800c08a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c08e:	4619      	mov	r1, r3
 800c090:	4b8b      	ldr	r3, [pc, #556]	; (800c2c0 <annexCode+0x270>)
 800c092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c094:	1acb      	subs	r3, r1, r3
 800c096:	fb03 f202 	mul.w	r2, r3, r2
 800c09a:	4b89      	ldr	r3, [pc, #548]	; (800c2c0 <annexCode+0x270>)
 800c09c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c09e:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800c0a2:	fb92 f3f3 	sdiv	r3, r2, r3
 800c0a6:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800c0aa:	61bb      	str	r3, [r7, #24]
 800c0ac:	e05e      	b.n	800c16c <annexCode+0x11c>
            } else {
                prop2 = 100 - cfg.dynThrPID;
 800c0ae:	4b84      	ldr	r3, [pc, #528]	; (800c2c0 <annexCode+0x270>)
 800c0b0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c0b4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800c0b8:	61bb      	str	r3, [r7, #24]
 800c0ba:	e057      	b.n	800c16c <annexCode+0x11c>
            }
        }
    } else {
        // Throttle & Angle combined PID Attenuation
        // Will dampen the PID's in High speeds dive on Fixed Wing Only
        prop2 = 128; // prop2 was 100, is 128 now
 800c0bc:	2380      	movs	r3, #128	; 0x80
 800c0be:	61bb      	str	r3, [r7, #24]
        if (rcData[THROTTLE] < cfg.tpa_breakpoint) {
 800c0c0:	4b7e      	ldr	r3, [pc, #504]	; (800c2bc <annexCode+0x26c>)
 800c0c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	4b7d      	ldr	r3, [pc, #500]	; (800c2c0 <annexCode+0x270>)
 800c0ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	da02      	bge.n	800c0d6 <annexCode+0x86>
            prop2 = 128; // Higher prop2 for Fixed wing Same as used in MWii
 800c0d0:	2380      	movs	r3, #128	; 0x80
 800c0d2:	61bb      	str	r3, [r7, #24]
 800c0d4:	e028      	b.n	800c128 <annexCode+0xd8>
        } else {
            if (rcCommand[THROTTLE] > cfg.dynThrPID) { // Using rcCommand() to include Tpa even in Gps modes.
 800c0d6:	4b7b      	ldr	r3, [pc, #492]	; (800c2c4 <annexCode+0x274>)
 800c0d8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c0dc:	461a      	mov	r2, r3
 800c0de:	4b78      	ldr	r3, [pc, #480]	; (800c2c0 <annexCode+0x270>)
 800c0e0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	dd1f      	ble.n	800c128 <annexCode+0xd8>
                if (rcCommand[THROTTLE] < 2000) {
 800c0e8:	4b76      	ldr	r3, [pc, #472]	; (800c2c4 <annexCode+0x274>)
 800c0ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c0ee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c0f2:	da12      	bge.n	800c11a <annexCode+0xca>
                    prop2 -=  ((uint16_t)cfg.dynThrPID * (rcCommand[THROTTLE] - cfg.dynThrPID) >> 9);
 800c0f4:	4b72      	ldr	r3, [pc, #456]	; (800c2c0 <annexCode+0x270>)
 800c0f6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	4b71      	ldr	r3, [pc, #452]	; (800c2c4 <annexCode+0x274>)
 800c0fe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c102:	4619      	mov	r1, r3
 800c104:	4b6e      	ldr	r3, [pc, #440]	; (800c2c0 <annexCode+0x270>)
 800c106:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c10a:	1acb      	subs	r3, r1, r3
 800c10c:	fb02 f303 	mul.w	r3, r2, r3
 800c110:	125b      	asrs	r3, r3, #9
 800c112:	69ba      	ldr	r2, [r7, #24]
 800c114:	1ad3      	subs	r3, r2, r3
 800c116:	61bb      	str	r3, [r7, #24]
 800c118:	e006      	b.n	800c128 <annexCode+0xd8>
                } else {
                    prop2 -=  cfg.dynThrPID;
 800c11a:	4b69      	ldr	r3, [pc, #420]	; (800c2c0 <annexCode+0x270>)
 800c11c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c120:	461a      	mov	r2, r3
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	1a9b      	subs	r3, r3, r2
 800c126:	61bb      	str	r3, [r7, #24]
                }
            }
        }
        // APA dynamic PID adjustemnt, depending on Angle of attack
        if (angle[1] > 20)
 800c128:	4b67      	ldr	r3, [pc, #412]	; (800c2c8 <annexCode+0x278>)
 800c12a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c12e:	2b14      	cmp	r3, #20
 800c130:	dd12      	ble.n	800c158 <annexCode+0x108>
            prop2 -= ((uint16_t)cfg.dynThrPID * (min(angle[1], MaxBrkpoint)) >> 8);
 800c132:	4b63      	ldr	r3, [pc, #396]	; (800c2c0 <annexCode+0x270>)
 800c134:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c138:	461a      	mov	r2, r3
 800c13a:	4b64      	ldr	r3, [pc, #400]	; (800c2cc <annexCode+0x27c>)
 800c13c:	881b      	ldrh	r3, [r3, #0]
 800c13e:	4619      	mov	r1, r3
 800c140:	4b61      	ldr	r3, [pc, #388]	; (800c2c8 <annexCode+0x278>)
 800c142:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c146:	428b      	cmp	r3, r1
 800c148:	bfa8      	it	ge
 800c14a:	460b      	movge	r3, r1
 800c14c:	fb02 f303 	mul.w	r3, r2, r3
 800c150:	121b      	asrs	r3, r3, #8
 800c152:	69ba      	ldr	r2, [r7, #24]
 800c154:	1ad3      	subs	r3, r2, r3
 800c156:	61bb      	str	r3, [r7, #24]
        prop2 = max((128 - cfg.dynThrPID), prop2);
 800c158:	4b59      	ldr	r3, [pc, #356]	; (800c2c0 <annexCode+0x270>)
 800c15a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c15e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800c162:	69ba      	ldr	r2, [r7, #24]
 800c164:	4293      	cmp	r3, r2
 800c166:	bfb8      	it	lt
 800c168:	4613      	movlt	r3, r2
 800c16a:	61bb      	str	r3, [r7, #24]
    }


    for (axis = 0; axis < 3; axis++) {
 800c16c:	2300      	movs	r3, #0
 800c16e:	623b      	str	r3, [r7, #32]
 800c170:	e131      	b.n	800c3d6 <annexCode+0x386>
        tmp = min(abs(rcData[axis] - mcfg.midrc), 500);
 800c172:	4a52      	ldr	r2, [pc, #328]	; (800c2bc <annexCode+0x26c>)
 800c174:	6a3b      	ldr	r3, [r7, #32]
 800c176:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c17a:	461a      	mov	r2, r3
 800c17c:	4b54      	ldr	r3, [pc, #336]	; (800c2d0 <annexCode+0x280>)
 800c17e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c182:	1ad3      	subs	r3, r2, r3
 800c184:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800c188:	dd18      	ble.n	800c1bc <annexCode+0x16c>
 800c18a:	4a4c      	ldr	r2, [pc, #304]	; (800c2bc <annexCode+0x26c>)
 800c18c:	6a3b      	ldr	r3, [r7, #32]
 800c18e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c192:	461a      	mov	r2, r3
 800c194:	4b4e      	ldr	r3, [pc, #312]	; (800c2d0 <annexCode+0x280>)
 800c196:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c19a:	1ad3      	subs	r3, r2, r3
 800c19c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c1a0:	da0c      	bge.n	800c1bc <annexCode+0x16c>
 800c1a2:	4a46      	ldr	r2, [pc, #280]	; (800c2bc <annexCode+0x26c>)
 800c1a4:	6a3b      	ldr	r3, [r7, #32]
 800c1a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	4b48      	ldr	r3, [pc, #288]	; (800c2d0 <annexCode+0x280>)
 800c1ae:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	bfb8      	it	lt
 800c1b8:	425b      	neglt	r3, r3
 800c1ba:	e001      	b.n	800c1c0 <annexCode+0x170>
 800c1bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c1c0:	627b      	str	r3, [r7, #36]	; 0x24
        if (axis != 2) {        // ROLL & PITCH
 800c1c2:	6a3b      	ldr	r3, [r7, #32]
 800c1c4:	2b02      	cmp	r3, #2
 800c1c6:	d063      	beq.n	800c290 <annexCode+0x240>
            if (cfg.deadband) {
 800c1c8:	4b3d      	ldr	r3, [pc, #244]	; (800c2c0 <annexCode+0x270>)
 800c1ca:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d010      	beq.n	800c1f4 <annexCode+0x1a4>
                if (tmp > cfg.deadband) {
 800c1d2:	4b3b      	ldr	r3, [pc, #236]	; (800c2c0 <annexCode+0x270>)
 800c1d4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c1d8:	461a      	mov	r2, r3
 800c1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	dd07      	ble.n	800c1f0 <annexCode+0x1a0>
                    tmp -= cfg.deadband;
 800c1e0:	4b37      	ldr	r3, [pc, #220]	; (800c2c0 <annexCode+0x270>)
 800c1e2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ea:	1a9b      	subs	r3, r3, r2
 800c1ec:	627b      	str	r3, [r7, #36]	; 0x24
 800c1ee:	e001      	b.n	800c1f4 <annexCode+0x1a4>
                } else {
                    tmp = 0;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }

            tmp2 = tmp / 100;
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f6:	4a37      	ldr	r2, [pc, #220]	; (800c2d4 <annexCode+0x284>)
 800c1f8:	fb82 1203 	smull	r1, r2, r2, r3
 800c1fc:	1152      	asrs	r2, r2, #5
 800c1fe:	17db      	asrs	r3, r3, #31
 800c200:	1ad3      	subs	r3, r2, r3
 800c202:	617b      	str	r3, [r7, #20]
            rcCommand[axis] = lookupPitchRollRC[tmp2] + (tmp - tmp2 * 100) * (lookupPitchRollRC[tmp2 + 1] - lookupPitchRollRC[tmp2]) / 100;
 800c204:	4a34      	ldr	r2, [pc, #208]	; (800c2d8 <annexCode+0x288>)
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c20c:	b29a      	uxth	r2, r3
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800c214:	fb03 f101 	mul.w	r1, r3, r1
 800c218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21a:	440b      	add	r3, r1
 800c21c:	6979      	ldr	r1, [r7, #20]
 800c21e:	3101      	adds	r1, #1
 800c220:	482d      	ldr	r0, [pc, #180]	; (800c2d8 <annexCode+0x288>)
 800c222:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c226:	460c      	mov	r4, r1
 800c228:	482b      	ldr	r0, [pc, #172]	; (800c2d8 <annexCode+0x288>)
 800c22a:	6979      	ldr	r1, [r7, #20]
 800c22c:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c230:	1a61      	subs	r1, r4, r1
 800c232:	fb01 f303 	mul.w	r3, r1, r3
 800c236:	4927      	ldr	r1, [pc, #156]	; (800c2d4 <annexCode+0x284>)
 800c238:	fb81 0103 	smull	r0, r1, r1, r3
 800c23c:	1149      	asrs	r1, r1, #5
 800c23e:	17db      	asrs	r3, r3, #31
 800c240:	1acb      	subs	r3, r1, r3
 800c242:	b29b      	uxth	r3, r3
 800c244:	4413      	add	r3, r2
 800c246:	b29b      	uxth	r3, r3
 800c248:	b219      	sxth	r1, r3
 800c24a:	4a1e      	ldr	r2, [pc, #120]	; (800c2c4 <annexCode+0x274>)
 800c24c:	6a3b      	ldr	r3, [r7, #32]
 800c24e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            prop1 = 100 - (uint16_t)cfg.rollPitchRate[axis] * tmp / 500;
 800c252:	4a1b      	ldr	r2, [pc, #108]	; (800c2c0 <annexCode+0x270>)
 800c254:	6a3b      	ldr	r3, [r7, #32]
 800c256:	4413      	add	r3, r2
 800c258:	3323      	adds	r3, #35	; 0x23
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	461a      	mov	r2, r3
 800c25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c260:	fb02 f303 	mul.w	r3, r2, r3
 800c264:	4a1d      	ldr	r2, [pc, #116]	; (800c2dc <annexCode+0x28c>)
 800c266:	fb82 1203 	smull	r1, r2, r2, r3
 800c26a:	1152      	asrs	r2, r2, #5
 800c26c:	17db      	asrs	r3, r3, #31
 800c26e:	1a9b      	subs	r3, r3, r2
 800c270:	3364      	adds	r3, #100	; 0x64
 800c272:	61fb      	str	r3, [r7, #28]
            prop1 = (uint16_t)prop1 * prop2 / 100;
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	b29b      	uxth	r3, r3
 800c278:	461a      	mov	r2, r3
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	fb02 f303 	mul.w	r3, r2, r3
 800c280:	4a14      	ldr	r2, [pc, #80]	; (800c2d4 <annexCode+0x284>)
 800c282:	fb82 1203 	smull	r1, r2, r2, r3
 800c286:	1152      	asrs	r2, r2, #5
 800c288:	17db      	asrs	r3, r3, #31
 800c28a:	1ad3      	subs	r3, r2, r3
 800c28c:	61fb      	str	r3, [r7, #28]
 800c28e:	e04a      	b.n	800c326 <annexCode+0x2d6>
        } else {                // YAW
            if (cfg.yawdeadband) {
 800c290:	4b0b      	ldr	r3, [pc, #44]	; (800c2c0 <annexCode+0x270>)
 800c292:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c296:	2b00      	cmp	r3, #0
 800c298:	d024      	beq.n	800c2e4 <annexCode+0x294>
                if (tmp > cfg.yawdeadband) {
 800c29a:	4b09      	ldr	r3, [pc, #36]	; (800c2c0 <annexCode+0x270>)
 800c29c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	dd1b      	ble.n	800c2e0 <annexCode+0x290>
                    tmp -= cfg.yawdeadband;
 800c2a8:	4b05      	ldr	r3, [pc, #20]	; (800c2c0 <annexCode+0x270>)
 800c2aa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b2:	1a9b      	subs	r3, r3, r2
 800c2b4:	627b      	str	r3, [r7, #36]	; 0x24
 800c2b6:	e015      	b.n	800c2e4 <annexCode+0x294>
 800c2b8:	20001988 	.word	0x20001988
 800c2bc:	200019c4 	.word	0x200019c4
 800c2c0:	20001128 	.word	0x20001128
 800c2c4:	200019e8 	.word	0x200019e8
 800c2c8:	20001790 	.word	0x20001790
 800c2cc:	20000056 	.word	0x20000056
 800c2d0:	20000bbc 	.word	0x20000bbc
 800c2d4:	51eb851f 	.word	0x51eb851f
 800c2d8:	200019f0 	.word	0x200019f0
 800c2dc:	10624dd3 	.word	0x10624dd3
                } else {
                    tmp = 0;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
            rcCommand[axis] = tmp * -mcfg.yaw_control_direction;
 800c2e4:	4ba0      	ldr	r3, [pc, #640]	; (800c568 <annexCode+0x518>)
 800c2e6:	f993 315c 	ldrsb.w	r3, [r3, #348]	; 0x15c
 800c2ea:	425b      	negs	r3, r3
 800c2ec:	b29a      	uxth	r2, r3
 800c2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	fb12 f303 	smulbb	r3, r2, r3
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	b219      	sxth	r1, r3
 800c2fa:	4a9c      	ldr	r2, [pc, #624]	; (800c56c <annexCode+0x51c>)
 800c2fc:	6a3b      	ldr	r3, [r7, #32]
 800c2fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            prop1 = 100 - (uint16_t)cfg.yawRate * abs(tmp) / 500;
 800c302:	4b9b      	ldr	r3, [pc, #620]	; (800c570 <annexCode+0x520>)
 800c304:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c308:	461a      	mov	r2, r3
 800c30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	bfb8      	it	lt
 800c310:	425b      	neglt	r3, r3
 800c312:	fb02 f303 	mul.w	r3, r2, r3
 800c316:	4a97      	ldr	r2, [pc, #604]	; (800c574 <annexCode+0x524>)
 800c318:	fb82 1203 	smull	r1, r2, r2, r3
 800c31c:	1152      	asrs	r2, r2, #5
 800c31e:	17db      	asrs	r3, r3, #31
 800c320:	1a9b      	subs	r3, r3, r2
 800c322:	3364      	adds	r3, #100	; 0x64
 800c324:	61fb      	str	r3, [r7, #28]
        }
        dynP8[axis] = (uint16_t)cfg.P8[axis] * prop1 / 100;
 800c326:	4a92      	ldr	r2, [pc, #584]	; (800c570 <annexCode+0x520>)
 800c328:	6a3b      	ldr	r3, [r7, #32]
 800c32a:	4413      	add	r3, r2
 800c32c:	3301      	adds	r3, #1
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	461a      	mov	r2, r3
 800c332:	69fb      	ldr	r3, [r7, #28]
 800c334:	fb02 f303 	mul.w	r3, r2, r3
 800c338:	4a8f      	ldr	r2, [pc, #572]	; (800c578 <annexCode+0x528>)
 800c33a:	fb82 1203 	smull	r1, r2, r2, r3
 800c33e:	1152      	asrs	r2, r2, #5
 800c340:	17db      	asrs	r3, r3, #31
 800c342:	1ad3      	subs	r3, r2, r3
 800c344:	b2d9      	uxtb	r1, r3
 800c346:	4a8d      	ldr	r2, [pc, #564]	; (800c57c <annexCode+0x52c>)
 800c348:	6a3b      	ldr	r3, [r7, #32]
 800c34a:	4413      	add	r3, r2
 800c34c:	460a      	mov	r2, r1
 800c34e:	701a      	strb	r2, [r3, #0]
        dynI8[axis] = (uint16_t)cfg.I8[axis] * prop1 / 100;
 800c350:	4a87      	ldr	r2, [pc, #540]	; (800c570 <annexCode+0x520>)
 800c352:	6a3b      	ldr	r3, [r7, #32]
 800c354:	4413      	add	r3, r2
 800c356:	330b      	adds	r3, #11
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	461a      	mov	r2, r3
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	fb02 f303 	mul.w	r3, r2, r3
 800c362:	4a85      	ldr	r2, [pc, #532]	; (800c578 <annexCode+0x528>)
 800c364:	fb82 1203 	smull	r1, r2, r2, r3
 800c368:	1152      	asrs	r2, r2, #5
 800c36a:	17db      	asrs	r3, r3, #31
 800c36c:	1ad3      	subs	r3, r2, r3
 800c36e:	b2d9      	uxtb	r1, r3
 800c370:	4a83      	ldr	r2, [pc, #524]	; (800c580 <annexCode+0x530>)
 800c372:	6a3b      	ldr	r3, [r7, #32]
 800c374:	4413      	add	r3, r2
 800c376:	460a      	mov	r2, r1
 800c378:	701a      	strb	r2, [r3, #0]
        dynD8[axis] = (uint16_t)cfg.D8[axis] * prop1 / 100;
 800c37a:	4a7d      	ldr	r2, [pc, #500]	; (800c570 <annexCode+0x520>)
 800c37c:	6a3b      	ldr	r3, [r7, #32]
 800c37e:	4413      	add	r3, r2
 800c380:	3315      	adds	r3, #21
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	461a      	mov	r2, r3
 800c386:	69fb      	ldr	r3, [r7, #28]
 800c388:	fb02 f303 	mul.w	r3, r2, r3
 800c38c:	4a7a      	ldr	r2, [pc, #488]	; (800c578 <annexCode+0x528>)
 800c38e:	fb82 1203 	smull	r1, r2, r2, r3
 800c392:	1152      	asrs	r2, r2, #5
 800c394:	17db      	asrs	r3, r3, #31
 800c396:	1ad3      	subs	r3, r2, r3
 800c398:	b2d9      	uxtb	r1, r3
 800c39a:	4a7a      	ldr	r2, [pc, #488]	; (800c584 <annexCode+0x534>)
 800c39c:	6a3b      	ldr	r3, [r7, #32]
 800c39e:	4413      	add	r3, r2
 800c3a0:	460a      	mov	r2, r1
 800c3a2:	701a      	strb	r2, [r3, #0]
        if (rcData[axis] < mcfg.midrc)
 800c3a4:	4a78      	ldr	r2, [pc, #480]	; (800c588 <annexCode+0x538>)
 800c3a6:	6a3b      	ldr	r3, [r7, #32]
 800c3a8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	4b6e      	ldr	r3, [pc, #440]	; (800c568 <annexCode+0x518>)
 800c3b0:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	da0b      	bge.n	800c3d0 <annexCode+0x380>
            rcCommand[axis] = -rcCommand[axis];
 800c3b8:	4a6c      	ldr	r2, [pc, #432]	; (800c56c <annexCode+0x51c>)
 800c3ba:	6a3b      	ldr	r3, [r7, #32]
 800c3bc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	425b      	negs	r3, r3
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	b219      	sxth	r1, r3
 800c3c8:	4a68      	ldr	r2, [pc, #416]	; (800c56c <annexCode+0x51c>)
 800c3ca:	6a3b      	ldr	r3, [r7, #32]
 800c3cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800c3d0:	6a3b      	ldr	r3, [r7, #32]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	623b      	str	r3, [r7, #32]
 800c3d6:	6a3b      	ldr	r3, [r7, #32]
 800c3d8:	2b02      	cmp	r3, #2
 800c3da:	f77f aeca 	ble.w	800c172 <annexCode+0x122>
    }

    tmp = constrain(rcData[THROTTLE], mcfg.mincheck, 2000);
 800c3de:	4b6a      	ldr	r3, [pc, #424]	; (800c588 <annexCode+0x538>)
 800c3e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	4b60      	ldr	r3, [pc, #384]	; (800c568 <annexCode+0x518>)
 800c3e8:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800c3ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	f7f7 fc7b 	bl	8003cec <constrain>
 800c3f6:	6278      	str	r0, [r7, #36]	; 0x24
    tmp = (uint32_t)(tmp - mcfg.mincheck) * 1000 / (2000 - mcfg.mincheck);       // [MINCHECK;2000] -> [0;1000]
 800c3f8:	4b5b      	ldr	r3, [pc, #364]	; (800c568 <annexCode+0x518>)
 800c3fa:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800c3fe:	461a      	mov	r2, r3
 800c400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c402:	1a9b      	subs	r3, r3, r2
 800c404:	461a      	mov	r2, r3
 800c406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c40a:	fb02 f303 	mul.w	r3, r2, r3
 800c40e:	4a56      	ldr	r2, [pc, #344]	; (800c568 <annexCode+0x518>)
 800c410:	f8b2 219a 	ldrh.w	r2, [r2, #410]	; 0x19a
 800c414:	f5c2 62fa 	rsb	r2, r2, #2000	; 0x7d0
 800c418:	fbb3 f3f2 	udiv	r3, r3, r2
 800c41c:	627b      	str	r3, [r7, #36]	; 0x24
    tmp2 = tmp / 100;
 800c41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c420:	4a55      	ldr	r2, [pc, #340]	; (800c578 <annexCode+0x528>)
 800c422:	fb82 1203 	smull	r1, r2, r2, r3
 800c426:	1152      	asrs	r2, r2, #5
 800c428:	17db      	asrs	r3, r3, #31
 800c42a:	1ad3      	subs	r3, r2, r3
 800c42c:	617b      	str	r3, [r7, #20]
    rcCommand[THROTTLE] = lookupThrottleRC[tmp2] + (tmp - tmp2 * 100) * (lookupThrottleRC[tmp2 + 1] - lookupThrottleRC[tmp2]) / 100;    // [0;1000] -> expo -> [MINTHROTTLE;MAXTHROTTLE]
 800c42e:	4a57      	ldr	r2, [pc, #348]	; (800c58c <annexCode+0x53c>)
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c436:	b29a      	uxth	r2, r3
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800c43e:	fb03 f101 	mul.w	r1, r3, r1
 800c442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c444:	440b      	add	r3, r1
 800c446:	6979      	ldr	r1, [r7, #20]
 800c448:	3101      	adds	r1, #1
 800c44a:	4850      	ldr	r0, [pc, #320]	; (800c58c <annexCode+0x53c>)
 800c44c:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c450:	460c      	mov	r4, r1
 800c452:	484e      	ldr	r0, [pc, #312]	; (800c58c <annexCode+0x53c>)
 800c454:	6979      	ldr	r1, [r7, #20]
 800c456:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c45a:	1a61      	subs	r1, r4, r1
 800c45c:	fb01 f303 	mul.w	r3, r1, r3
 800c460:	4945      	ldr	r1, [pc, #276]	; (800c578 <annexCode+0x528>)
 800c462:	fb81 0103 	smull	r0, r1, r1, r3
 800c466:	1149      	asrs	r1, r1, #5
 800c468:	17db      	asrs	r3, r3, #31
 800c46a:	1acb      	subs	r3, r1, r3
 800c46c:	b29b      	uxth	r3, r3
 800c46e:	4413      	add	r3, r2
 800c470:	b29b      	uxth	r3, r3
 800c472:	b21a      	sxth	r2, r3
 800c474:	4b3d      	ldr	r3, [pc, #244]	; (800c56c <annexCode+0x51c>)
 800c476:	80da      	strh	r2, [r3, #6]

    if (f.HEADFREE_MODE) {
 800c478:	4b45      	ldr	r3, [pc, #276]	; (800c590 <annexCode+0x540>)
 800c47a:	7a5b      	ldrb	r3, [r3, #9]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d06b      	beq.n	800c558 <annexCode+0x508>
        float radDiff = (heading - headFreeModeHold) * M_PI / 180.0f;
 800c480:	4b44      	ldr	r3, [pc, #272]	; (800c594 <annexCode+0x544>)
 800c482:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c486:	461a      	mov	r2, r3
 800c488:	4b43      	ldr	r3, [pc, #268]	; (800c598 <annexCode+0x548>)
 800c48a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c48e:	1ad3      	subs	r3, r2, r3
 800c490:	4618      	mov	r0, r3
 800c492:	f7f4 f805 	bl	80004a0 <__aeabi_i2d>
 800c496:	a332      	add	r3, pc, #200	; (adr r3, 800c560 <annexCode+0x510>)
 800c498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49c:	f7f4 f86a 	bl	8000574 <__aeabi_dmul>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	4610      	mov	r0, r2
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	f04f 0200 	mov.w	r2, #0
 800c4ac:	4b3b      	ldr	r3, [pc, #236]	; (800c59c <annexCode+0x54c>)
 800c4ae:	f7f4 f98b 	bl	80007c8 <__aeabi_ddiv>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	4610      	mov	r0, r2
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	f7f4 fb3d 	bl	8000b38 <__aeabi_d2f>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	613b      	str	r3, [r7, #16]
        float cosDiff = cosf(radDiff);
 800c4c2:	ed97 0a04 	vldr	s0, [r7, #16]
 800c4c6:	f015 ff6b 	bl	80223a0 <cosf>
 800c4ca:	ed87 0a03 	vstr	s0, [r7, #12]
        float sinDiff = sinf(radDiff);
 800c4ce:	ed97 0a04 	vldr	s0, [r7, #16]
 800c4d2:	f015 ffe9 	bl	80224a8 <sinf>
 800c4d6:	ed87 0a02 	vstr	s0, [r7, #8]
        int16_t rcCommand_PITCH = rcCommand[PITCH] * cosDiff + rcCommand[ROLL] * sinDiff;
 800c4da:	4b24      	ldr	r3, [pc, #144]	; (800c56c <annexCode+0x51c>)
 800c4dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c4e0:	ee07 3a90 	vmov	s15, r3
 800c4e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c4e8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c4ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4f0:	4b1e      	ldr	r3, [pc, #120]	; (800c56c <annexCode+0x51c>)
 800c4f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c4f6:	ee07 3a90 	vmov	s15, r3
 800c4fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c4fe:	edd7 7a02 	vldr	s15, [r7, #8]
 800c502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c50a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c50e:	ee17 3a90 	vmov	r3, s15
 800c512:	80fb      	strh	r3, [r7, #6]
        rcCommand[ROLL] = rcCommand[ROLL] * cosDiff - rcCommand[PITCH] * sinDiff;
 800c514:	4b15      	ldr	r3, [pc, #84]	; (800c56c <annexCode+0x51c>)
 800c516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c51a:	ee07 3a90 	vmov	s15, r3
 800c51e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c522:	edd7 7a03 	vldr	s15, [r7, #12]
 800c526:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c52a:	4b10      	ldr	r3, [pc, #64]	; (800c56c <annexCode+0x51c>)
 800c52c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c530:	ee07 3a90 	vmov	s15, r3
 800c534:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c538:	edd7 7a02 	vldr	s15, [r7, #8]
 800c53c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c540:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c544:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c548:	ee17 3a90 	vmov	r3, s15
 800c54c:	b21a      	sxth	r2, r3
 800c54e:	4b07      	ldr	r3, [pc, #28]	; (800c56c <annexCode+0x51c>)
 800c550:	801a      	strh	r2, [r3, #0]
        rcCommand[PITCH] = rcCommand_PITCH;
 800c552:	4a06      	ldr	r2, [pc, #24]	; (800c56c <annexCode+0x51c>)
 800c554:	88fb      	ldrh	r3, [r7, #6]
 800c556:	8053      	strh	r3, [r2, #2]
    }
}
 800c558:	bf00      	nop
 800c55a:	372c      	adds	r7, #44	; 0x2c
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd90      	pop	{r4, r7, pc}
 800c560:	54442d18 	.word	0x54442d18
 800c564:	400921fb 	.word	0x400921fb
 800c568:	20000bbc 	.word	0x20000bbc
 800c56c:	200019e8 	.word	0x200019e8
 800c570:	20001128 	.word	0x20001128
 800c574:	10624dd3 	.word	0x10624dd3
 800c578:	51eb851f 	.word	0x51eb851f
 800c57c:	20001a20 	.word	0x20001a20
 800c580:	20001a24 	.word	0x20001a24
 800c584:	20001a28 	.word	0x20001a28
 800c588:	200019c4 	.word	0x200019c4
 800c58c:	20001a00 	.word	0x20001a00
 800c590:	20001988 	.word	0x20001988
 800c594:	20001cb4 	.word	0x20001cb4
 800c598:	200019ae 	.word	0x200019ae
 800c59c:	40668000 	.word	0x40668000

0800c5a0 <taskLedState>:

uint16_t taskLedState(PifTask *p_task)
{
 800c5a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c5a4:	b082      	sub	sp, #8
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
    static int64_t mAhdrawnRaw = 0;
    static int32_t vbatCycleTime = 0;

    (void)p_task;

    if (feature(FEATURE_VBAT)) {
 800c5aa:	2002      	movs	r0, #2
 800c5ac:	f7fa fd1c 	bl	8006fe8 <feature>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f000 80bb 	beq.w	800c72e <taskLedState+0x18e>
        vbatCycleTime += cycleTime;
 800c5b8:	4b90      	ldr	r3, [pc, #576]	; (800c7fc <taskLedState+0x25c>)
 800c5ba:	881b      	ldrh	r3, [r3, #0]
 800c5bc:	461a      	mov	r2, r3
 800c5be:	4b90      	ldr	r3, [pc, #576]	; (800c800 <taskLedState+0x260>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4413      	add	r3, r2
 800c5c4:	4a8e      	ldr	r2, [pc, #568]	; (800c800 <taskLedState+0x260>)
 800c5c6:	6013      	str	r3, [r2, #0]
        if (!(++vbatTimer % VBATFREQ)) {
 800c5c8:	4b8e      	ldr	r3, [pc, #568]	; (800c804 <taskLedState+0x264>)
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	b2da      	uxtb	r2, r3
 800c5d0:	4b8c      	ldr	r3, [pc, #560]	; (800c804 <taskLedState+0x264>)
 800c5d2:	701a      	strb	r2, [r3, #0]
 800c5d4:	4b8b      	ldr	r3, [pc, #556]	; (800c804 <taskLedState+0x264>)
 800c5d6:	781a      	ldrb	r2, [r3, #0]
 800c5d8:	4b8b      	ldr	r3, [pc, #556]	; (800c808 <taskLedState+0x268>)
 800c5da:	fba3 1302 	umull	r1, r3, r3, r2
 800c5de:	0899      	lsrs	r1, r3, #2
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	005b      	lsls	r3, r3, #1
 800c5e4:	440b      	add	r3, r1
 800c5e6:	005b      	lsls	r3, r3, #1
 800c5e8:	1ad3      	subs	r3, r2, r3
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f040 808b 	bne.w	800c708 <taskLedState+0x168>
            vbatRaw -= vbatRaw / 8;
 800c5f2:	4b86      	ldr	r3, [pc, #536]	; (800c80c <taskLedState+0x26c>)
 800c5f4:	ed93 7a00 	vldr	s14, [r3]
 800c5f8:	4b84      	ldr	r3, [pc, #528]	; (800c80c <taskLedState+0x26c>)
 800c5fa:	edd3 6a00 	vldr	s13, [r3]
 800c5fe:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
 800c602:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800c606:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c60a:	4b80      	ldr	r3, [pc, #512]	; (800c80c <taskLedState+0x26c>)
 800c60c:	edc3 7a00 	vstr	s15, [r3]
            vbatRaw += actGetBatteryVoltage() * mcfg.vbatscale;
 800c610:	f7f4 fde6 	bl	80011e0 <actGetBatteryVoltage>
 800c614:	eeb0 7a40 	vmov.f32	s14, s0
 800c618:	4b7d      	ldr	r3, [pc, #500]	; (800c810 <taskLedState+0x270>)
 800c61a:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800c61e:	ee07 3a90 	vmov	s15, r3
 800c622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c626:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c62a:	4b78      	ldr	r3, [pc, #480]	; (800c80c <taskLedState+0x26c>)
 800c62c:	edd3 7a00 	vldr	s15, [r3]
 800c630:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c634:	4b75      	ldr	r3, [pc, #468]	; (800c80c <taskLedState+0x26c>)
 800c636:	edc3 7a00 	vstr	s15, [r3]
            vbat = vbatRaw / 8;
 800c63a:	4b74      	ldr	r3, [pc, #464]	; (800c80c <taskLedState+0x26c>)
 800c63c:	ed93 7a00 	vldr	s14, [r3]
 800c640:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800c644:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c64c:	ee17 3a90 	vmov	r3, s15
 800c650:	b29a      	uxth	r2, r3
 800c652:	4b70      	ldr	r3, [pc, #448]	; (800c814 <taskLedState+0x274>)
 800c654:	801a      	strh	r2, [r3, #0]

            if (mcfg.power_adc_channel > 0) {
 800c656:	4b6e      	ldr	r3, [pc, #440]	; (800c810 <taskLedState+0x270>)
 800c658:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d053      	beq.n	800c708 <taskLedState+0x168>
                amperageRaw -= amperageRaw / 8;
 800c660:	4b6d      	ldr	r3, [pc, #436]	; (800c818 <taskLedState+0x278>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	da00      	bge.n	800c66a <taskLedState+0xca>
 800c668:	3307      	adds	r3, #7
 800c66a:	10db      	asrs	r3, r3, #3
 800c66c:	425b      	negs	r3, r3
 800c66e:	461a      	mov	r2, r3
 800c670:	4b69      	ldr	r3, [pc, #420]	; (800c818 <taskLedState+0x278>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4413      	add	r3, r2
 800c676:	4a68      	ldr	r2, [pc, #416]	; (800c818 <taskLedState+0x278>)
 800c678:	6013      	str	r3, [r2, #0]
                amperageRaw += (actGetBatteryCurrent() - mcfg.currentoffset) * 1000 / (int32_t)mcfg.currentscale; // current in 0.01A steps
 800c67a:	f7f4 fdcf 	bl	800121c <actGetBatteryCurrent>
 800c67e:	4603      	mov	r3, r0
 800c680:	4a63      	ldr	r2, [pc, #396]	; (800c810 <taskLedState+0x270>)
 800c682:	f8b2 217a 	ldrh.w	r2, [r2, #378]	; 0x17a
 800c686:	1a9b      	subs	r3, r3, r2
 800c688:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c68c:	fb02 f303 	mul.w	r3, r2, r3
 800c690:	4a5f      	ldr	r2, [pc, #380]	; (800c810 <taskLedState+0x270>)
 800c692:	f8b2 2178 	ldrh.w	r2, [r2, #376]	; 0x178
 800c696:	fbb3 f3f2 	udiv	r3, r3, r2
 800c69a:	4a5f      	ldr	r2, [pc, #380]	; (800c818 <taskLedState+0x278>)
 800c69c:	6812      	ldr	r2, [r2, #0]
 800c69e:	4413      	add	r3, r2
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	4b5d      	ldr	r3, [pc, #372]	; (800c818 <taskLedState+0x278>)
 800c6a4:	601a      	str	r2, [r3, #0]
                amperage = amperageRaw / 8;
 800c6a6:	4b5c      	ldr	r3, [pc, #368]	; (800c818 <taskLedState+0x278>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	da00      	bge.n	800c6b0 <taskLedState+0x110>
 800c6ae:	3307      	adds	r3, #7
 800c6b0:	10db      	asrs	r3, r3, #3
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	4b59      	ldr	r3, [pc, #356]	; (800c81c <taskLedState+0x27c>)
 800c6b6:	601a      	str	r2, [r3, #0]
                mAhdrawnRaw += (amperage * vbatCycleTime) / 1000;
 800c6b8:	4b58      	ldr	r3, [pc, #352]	; (800c81c <taskLedState+0x27c>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a50      	ldr	r2, [pc, #320]	; (800c800 <taskLedState+0x260>)
 800c6be:	6812      	ldr	r2, [r2, #0]
 800c6c0:	fb02 f303 	mul.w	r3, r2, r3
 800c6c4:	4a56      	ldr	r2, [pc, #344]	; (800c820 <taskLedState+0x280>)
 800c6c6:	fb82 1203 	smull	r1, r2, r2, r3
 800c6ca:	1192      	asrs	r2, r2, #6
 800c6cc:	17db      	asrs	r3, r3, #31
 800c6ce:	1ad3      	subs	r3, r2, r3
 800c6d0:	17da      	asrs	r2, r3, #31
 800c6d2:	461c      	mov	r4, r3
 800c6d4:	4615      	mov	r5, r2
 800c6d6:	4b53      	ldr	r3, [pc, #332]	; (800c824 <taskLedState+0x284>)
 800c6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6dc:	eb14 0802 	adds.w	r8, r4, r2
 800c6e0:	eb45 0903 	adc.w	r9, r5, r3
 800c6e4:	4b4f      	ldr	r3, [pc, #316]	; (800c824 <taskLedState+0x284>)
 800c6e6:	e9c3 8900 	strd	r8, r9, [r3]
                mAhdrawn = mAhdrawnRaw / (3600 * 100);
 800c6ea:	4b4e      	ldr	r3, [pc, #312]	; (800c824 <taskLedState+0x284>)
 800c6ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c6f0:	4a4d      	ldr	r2, [pc, #308]	; (800c828 <taskLedState+0x288>)
 800c6f2:	f04f 0300 	mov.w	r3, #0
 800c6f6:	f7f4 fb7d 	bl	8000df4 <__aeabi_ldivmod>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	4b4b      	ldr	r3, [pc, #300]	; (800c82c <taskLedState+0x28c>)
 800c700:	601a      	str	r2, [r3, #0]
                vbatCycleTime = 0;
 800c702:	4b3f      	ldr	r3, [pc, #252]	; (800c800 <taskLedState+0x260>)
 800c704:	2200      	movs	r2, #0
 800c706:	601a      	str	r2, [r3, #0]
            }

        }
        // Buzzers for low and critical battery levels
        if (vbat <= batteryCriticalVoltage)
 800c708:	4b42      	ldr	r3, [pc, #264]	; (800c814 <taskLedState+0x274>)
 800c70a:	881a      	ldrh	r2, [r3, #0]
 800c70c:	4b48      	ldr	r3, [pc, #288]	; (800c830 <taskLedState+0x290>)
 800c70e:	881b      	ldrh	r3, [r3, #0]
 800c710:	429a      	cmp	r2, r3
 800c712:	d803      	bhi.n	800c71c <taskLedState+0x17c>
            buzzer(BUZZER_BAT_CRIT_LOW);     // Critically low battery
 800c714:	2001      	movs	r0, #1
 800c716:	f7f7 fc77 	bl	8004008 <buzzer>
 800c71a:	e008      	b.n	800c72e <taskLedState+0x18e>
        else if (vbat <= batteryWarningVoltage)
 800c71c:	4b3d      	ldr	r3, [pc, #244]	; (800c814 <taskLedState+0x274>)
 800c71e:	881a      	ldrh	r2, [r3, #0]
 800c720:	4b44      	ldr	r3, [pc, #272]	; (800c834 <taskLedState+0x294>)
 800c722:	881b      	ldrh	r3, [r3, #0]
 800c724:	429a      	cmp	r2, r3
 800c726:	d802      	bhi.n	800c72e <taskLedState+0x18e>
            buzzer(BUZZER_BAT_LOW);     // low battery
 800c728:	2002      	movs	r0, #2
 800c72a:	f7f7 fc6d 	bl	8004008 <buzzer>
    }
    // update buzzer handler
    buzzerUpdate();
 800c72e:	f7f7 fd57 	bl	80041e0 <buzzerUpdate>
    if (!cliMode && feature(FEATURE_TELEMETRY)) {
        handleTelemetry();
    }
#endif

    serialCom();
 800c732:	f004 fdd9 	bl	80112e8 <serialCom>

    // Read out gyro temperature. can use it for something somewhere. maybe get MCU temperature instead? lots of fun possibilities.
    if (sensor_set.gyro.temperature)
 800c736:	4b40      	ldr	r3, [pc, #256]	; (800c838 <taskLedState+0x298>)
 800c738:	68db      	ldr	r3, [r3, #12]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d003      	beq.n	800c746 <taskLedState+0x1a6>
        sensor_set.gyro.temperature(&telemTemperature1);
 800c73e:	4b3e      	ldr	r3, [pc, #248]	; (800c838 <taskLedState+0x298>)
 800c740:	68db      	ldr	r3, [r3, #12]
 800c742:	483e      	ldr	r0, [pc, #248]	; (800c83c <taskLedState+0x29c>)
 800c744:	4798      	blx	r3
    else {
        // TODO MCU temp
    }

    if ((calibratingA > 0 && sensors(SENSOR_ACC)) || (calibratingG > 0)) {      // Calibration phasis
 800c746:	4b3e      	ldr	r3, [pc, #248]	; (800c840 <taskLedState+0x2a0>)
 800c748:	881b      	ldrh	r3, [r3, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d005      	beq.n	800c75a <taskLedState+0x1ba>
 800c74e:	2002      	movs	r0, #2
 800c750:	f7fa fc02 	bl	8006f58 <sensors>
 800c754:	4603      	mov	r3, r0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d103      	bne.n	800c762 <taskLedState+0x1c2>
 800c75a:	4b3a      	ldr	r3, [pc, #232]	; (800c844 <taskLedState+0x2a4>)
 800c75c:	881b      	ldrh	r3, [r3, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d002      	beq.n	800c768 <taskLedState+0x1c8>
        actLed0Toggle();
 800c762:	f7f5 fc71 	bl	8002048 <actLed0Toggle>
 800c766:	e00d      	b.n	800c784 <taskLedState+0x1e4>
    } else {
        if (f.ACC_CALIBRATED)
 800c768:	4b37      	ldr	r3, [pc, #220]	; (800c848 <taskLedState+0x2a8>)
 800c76a:	789b      	ldrb	r3, [r3, #2]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d002      	beq.n	800c776 <taskLedState+0x1d6>
            actLed0State(OFF);
 800c770:	2000      	movs	r0, #0
 800c772:	f7f5 fc53 	bl	800201c <actLed0State>
        if (f.ARMED)
 800c776:	4b34      	ldr	r3, [pc, #208]	; (800c848 <taskLedState+0x2a8>)
 800c778:	785b      	ldrb	r3, [r3, #1]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d002      	beq.n	800c784 <taskLedState+0x1e4>
            actLed0State(ON);
 800c77e:	2001      	movs	r0, #1
 800c780:	f7f5 fc4c 	bl	800201c <actLed0State>
        ledringState();
    }
#endif

    static uint8_t AccCalibLed = 0;
    if (AccCalibLed) AccCalibLed--;
 800c784:	4b31      	ldr	r3, [pc, #196]	; (800c84c <taskLedState+0x2ac>)
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d006      	beq.n	800c79a <taskLedState+0x1fa>
 800c78c:	4b2f      	ldr	r3, [pc, #188]	; (800c84c <taskLedState+0x2ac>)
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	3b01      	subs	r3, #1
 800c792:	b2da      	uxtb	r2, r3
 800c794:	4b2d      	ldr	r3, [pc, #180]	; (800c84c <taskLedState+0x2ac>)
 800c796:	701a      	strb	r2, [r3, #0]
 800c798:	e00f      	b.n	800c7ba <taskLedState+0x21a>
    else {
        if (!f.SMALL_ANGLE) {
 800c79a:	4b2b      	ldr	r3, [pc, #172]	; (800c848 <taskLedState+0x2a8>)
 800c79c:	7b5b      	ldrb	r3, [r3, #13]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d105      	bne.n	800c7ae <taskLedState+0x20e>
            f.ACC_CALIBRATED = 0; // the multi uses ACC and is not calibrated or is too much inclinated
 800c7a2:	4b29      	ldr	r3, [pc, #164]	; (800c848 <taskLedState+0x2a8>)
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	709a      	strb	r2, [r3, #2]
            actLed0Toggle();
 800c7a8:	f7f5 fc4e 	bl	8002048 <actLed0Toggle>
 800c7ac:	e002      	b.n	800c7b4 <taskLedState+0x214>
        } else {
            f.ACC_CALIBRATED = 1;
 800c7ae:	4b26      	ldr	r3, [pc, #152]	; (800c848 <taskLedState+0x2a8>)
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	709a      	strb	r2, [r3, #2]
        }
        AccCalibLed = 10 - 1;       // 50ms * 10 = 500ms
 800c7b4:	4b25      	ldr	r3, [pc, #148]	; (800c84c <taskLedState+0x2ac>)
 800c7b6:	2209      	movs	r2, #9
 800c7b8:	701a      	strb	r2, [r3, #0]
    }

    if (sensors(SENSOR_GPS)) {
 800c7ba:	2020      	movs	r0, #32
 800c7bc:	f7fa fbcc 	bl	8006f58 <sensors>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d013      	beq.n	800c7ee <taskLedState+0x24e>
        static uint8_t GPSLEDTime = 0;
        if (GPSLEDTime) GPSLEDTime--;
 800c7c6:	4b22      	ldr	r3, [pc, #136]	; (800c850 <taskLedState+0x2b0>)
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d006      	beq.n	800c7dc <taskLedState+0x23c>
 800c7ce:	4b20      	ldr	r3, [pc, #128]	; (800c850 <taskLedState+0x2b0>)
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	3b01      	subs	r3, #1
 800c7d4:	b2da      	uxtb	r2, r3
 800c7d6:	4b1e      	ldr	r3, [pc, #120]	; (800c850 <taskLedState+0x2b0>)
 800c7d8:	701a      	strb	r2, [r3, #0]
 800c7da:	e008      	b.n	800c7ee <taskLedState+0x24e>
        else {
            if (GPS_numSat >= 5) actLed1Toggle();
 800c7dc:	4b1d      	ldr	r3, [pc, #116]	; (800c854 <taskLedState+0x2b4>)
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	2b04      	cmp	r3, #4
 800c7e2:	d901      	bls.n	800c7e8 <taskLedState+0x248>
 800c7e4:	f7f5 fc5c 	bl	80020a0 <actLed1Toggle>
            GPSLEDTime = 3 - 1;     // 50ms * 3 = 150ms
 800c7e8:	4b19      	ldr	r3, [pc, #100]	; (800c850 <taskLedState+0x2b0>)
 800c7ea:	2202      	movs	r2, #2
 800c7ec:	701a      	strb	r2, [r3, #0]
        }
    }
    return 0;
 800c7ee:	2300      	movs	r3, #0
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3708      	adds	r7, #8
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c7fa:	bf00      	nop
 800c7fc:	200019ac 	.word	0x200019ac
 800c800:	20001bb0 	.word	0x20001bb0
 800c804:	20001bb4 	.word	0x20001bb4
 800c808:	aaaaaaab 	.word	0xaaaaaaab
 800c80c:	20001bb8 	.word	0x20001bb8
 800c810:	20000bbc 	.word	0x20000bbc
 800c814:	200019b0 	.word	0x200019b0
 800c818:	20001bbc 	.word	0x20001bbc
 800c81c:	200019b4 	.word	0x200019b4
 800c820:	10624dd3 	.word	0x10624dd3
 800c824:	20001bc0 	.word	0x20001bc0
 800c828:	00057e40 	.word	0x00057e40
 800c82c:	200019b8 	.word	0x200019b8
 800c830:	20001b30 	.word	0x20001b30
 800c834:	20001b2e 	.word	0x20001b2e
 800c838:	20001cc0 	.word	0x20001cc0
 800c83c:	200019bc 	.word	0x200019bc
 800c840:	20001cae 	.word	0x20001cae
 800c844:	20001cb2 	.word	0x20001cb2
 800c848:	20001988 	.word	0x20001988
 800c84c:	20001bc8 	.word	0x20001bc8
 800c850:	20001bc9 	.word	0x20001bc9
 800c854:	20001a70 	.word	0x20001a70

0800c858 <pwmReadRawRC>:

uint16_t pwmReadRawRC(uint8_t chan)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	4603      	mov	r3, r0
 800c860:	71fb      	strb	r3, [r7, #7]
    return actPwmRead(mcfg.rcmap[chan]);
 800c862:	79fb      	ldrb	r3, [r7, #7]
 800c864:	4a05      	ldr	r2, [pc, #20]	; (800c87c <pwmReadRawRC+0x24>)
 800c866:	4413      	add	r3, r2
 800c868:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7f5 fb67 	bl	8001f40 <actPwmRead>
 800c872:	4603      	mov	r3, r0
}
 800c874:	4618      	mov	r0, r3
 800c876:	3708      	adds	r7, #8
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	20000bbc 	.word	0x20000bbc

0800c880 <computeRC>:

void computeRC(void)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
    uint16_t capture;
    int i, chan;

    if (feature(FEATURE_SERIALRX)) {
 800c886:	2008      	movs	r0, #8
 800c888:	f7fa fbae 	bl	8006fe8 <feature>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d019      	beq.n	800c8c6 <computeRC+0x46>
        for (chan = 0; chan < mcfg.rc_channel_count; chan++)
 800c892:	2300      	movs	r3, #0
 800c894:	607b      	str	r3, [r7, #4]
 800c896:	e00e      	b.n	800c8b6 <computeRC+0x36>
            rcData[chan] = rcReadRawFunc(chan);
 800c898:	4b41      	ldr	r3, [pc, #260]	; (800c9a0 <computeRC+0x120>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	b2d2      	uxtb	r2, r2
 800c8a0:	4610      	mov	r0, r2
 800c8a2:	4798      	blx	r3
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	b219      	sxth	r1, r3
 800c8a8:	4a3e      	ldr	r2, [pc, #248]	; (800c9a4 <computeRC+0x124>)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (chan = 0; chan < mcfg.rc_channel_count; chan++)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	607b      	str	r3, [r7, #4]
 800c8b6:	4b3c      	ldr	r3, [pc, #240]	; (800c9a8 <computeRC+0x128>)
 800c8b8:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800c8bc:	461a      	mov	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	dbe9      	blt.n	800c898 <computeRC+0x18>
                rcData[chan] += rcDataAverage[chan][i];
            rcData[chan] /= 4;
        }
        rcAverageIndex++;
    }
}
 800c8c4:	e068      	b.n	800c998 <computeRC+0x118>
        for (chan = 0; chan < mcfg.rc_channel_count; chan++) {
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	607b      	str	r3, [r7, #4]
 800c8ca:	e059      	b.n	800c980 <computeRC+0x100>
            capture = rcReadRawFunc(chan);
 800c8cc:	4b34      	ldr	r3, [pc, #208]	; (800c9a0 <computeRC+0x120>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	b2d2      	uxtb	r2, r2
 800c8d4:	4610      	mov	r0, r2
 800c8d6:	4798      	blx	r3
 800c8d8:	4603      	mov	r3, r0
 800c8da:	81fb      	strh	r3, [r7, #14]
            if (capture < PULSE_MIN || capture > PULSE_MAX)
 800c8dc:	89fb      	ldrh	r3, [r7, #14]
 800c8de:	f240 22ed 	movw	r2, #749	; 0x2ed
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d904      	bls.n	800c8f0 <computeRC+0x70>
 800c8e6:	89fb      	ldrh	r3, [r7, #14]
 800c8e8:	f640 02ca 	movw	r2, #2250	; 0x8ca
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d903      	bls.n	800c8f8 <computeRC+0x78>
                capture = mcfg.midrc;
 800c8f0:	4b2d      	ldr	r3, [pc, #180]	; (800c9a8 <computeRC+0x128>)
 800c8f2:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c8f6:	81fb      	strh	r3, [r7, #14]
            rcDataAverage[chan][rcAverageIndex % 4] = capture;
 800c8f8:	4b2c      	ldr	r3, [pc, #176]	; (800c9ac <computeRC+0x12c>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	425a      	negs	r2, r3
 800c8fe:	f003 0303 	and.w	r3, r3, #3
 800c902:	f002 0203 	and.w	r2, r2, #3
 800c906:	bf58      	it	pl
 800c908:	4253      	negpl	r3, r2
 800c90a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800c90e:	4928      	ldr	r1, [pc, #160]	; (800c9b0 <computeRC+0x130>)
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	0092      	lsls	r2, r2, #2
 800c914:	4413      	add	r3, r2
 800c916:	4602      	mov	r2, r0
 800c918:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            rcData[chan] = 0;
 800c91c:	4a21      	ldr	r2, [pc, #132]	; (800c9a4 <computeRC+0x124>)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2100      	movs	r1, #0
 800c922:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < 4; i++)
 800c926:	2300      	movs	r3, #0
 800c928:	60bb      	str	r3, [r7, #8]
 800c92a:	e016      	b.n	800c95a <computeRC+0xda>
                rcData[chan] += rcDataAverage[chan][i];
 800c92c:	4a1d      	ldr	r2, [pc, #116]	; (800c9a4 <computeRC+0x124>)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c934:	b29a      	uxth	r2, r3
 800c936:	481e      	ldr	r0, [pc, #120]	; (800c9b0 <computeRC+0x130>)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	0099      	lsls	r1, r3, #2
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	440b      	add	r3, r1
 800c940:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800c944:	b29b      	uxth	r3, r3
 800c946:	4413      	add	r3, r2
 800c948:	b29b      	uxth	r3, r3
 800c94a:	b219      	sxth	r1, r3
 800c94c:	4a15      	ldr	r2, [pc, #84]	; (800c9a4 <computeRC+0x124>)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < 4; i++)
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	3301      	adds	r3, #1
 800c958:	60bb      	str	r3, [r7, #8]
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	2b03      	cmp	r3, #3
 800c95e:	dde5      	ble.n	800c92c <computeRC+0xac>
            rcData[chan] /= 4;
 800c960:	4a10      	ldr	r2, [pc, #64]	; (800c9a4 <computeRC+0x124>)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	da00      	bge.n	800c96e <computeRC+0xee>
 800c96c:	3303      	adds	r3, #3
 800c96e:	109b      	asrs	r3, r3, #2
 800c970:	b219      	sxth	r1, r3
 800c972:	4a0c      	ldr	r2, [pc, #48]	; (800c9a4 <computeRC+0x124>)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (chan = 0; chan < mcfg.rc_channel_count; chan++) {
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	3301      	adds	r3, #1
 800c97e:	607b      	str	r3, [r7, #4]
 800c980:	4b09      	ldr	r3, [pc, #36]	; (800c9a8 <computeRC+0x128>)
 800c982:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800c986:	461a      	mov	r2, r3
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	4293      	cmp	r3, r2
 800c98c:	db9e      	blt.n	800c8cc <computeRC+0x4c>
        rcAverageIndex++;
 800c98e:	4b07      	ldr	r3, [pc, #28]	; (800c9ac <computeRC+0x12c>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	3301      	adds	r3, #1
 800c994:	4a05      	ldr	r2, [pc, #20]	; (800c9ac <computeRC+0x12c>)
 800c996:	6013      	str	r3, [r2, #0]
}
 800c998:	bf00      	nop
 800c99a:	3710      	adds	r7, #16
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	20001a1c 	.word	0x20001a1c
 800c9a4:	200019c4 	.word	0x200019c4
 800c9a8:	20000bbc 	.word	0x20000bbc
 800c9ac:	20001bcc 	.word	0x20001bcc
 800c9b0:	20001bd0 	.word	0x20001bd0

0800c9b4 <mwArm>:

static void mwArm(void)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	af00      	add	r7, sp, #0
    if (calibratingG == 0 && f.ACC_CALIBRATED) {
 800c9b8:	4b1b      	ldr	r3, [pc, #108]	; (800ca28 <mwArm+0x74>)
 800c9ba:	881b      	ldrh	r3, [r3, #0]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d126      	bne.n	800ca0e <mwArm+0x5a>
 800c9c0:	4b1a      	ldr	r3, [pc, #104]	; (800ca2c <mwArm+0x78>)
 800c9c2:	789b      	ldrb	r3, [r3, #2]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d022      	beq.n	800ca0e <mwArm+0x5a>
        // TODO: feature(FEATURE_FAILSAFE) && failsafeCnt < 2
        // TODO: && ( !feature || ( feature && ( failsafecnt > 2) )
        if (!f.ARMED) {         // arm now!
 800c9c8:	4b18      	ldr	r3, [pc, #96]	; (800ca2c <mwArm+0x78>)
 800c9ca:	785b      	ldrb	r3, [r3, #1]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d128      	bne.n	800ca22 <mwArm+0x6e>
            f.ARMED = 1;
 800c9d0:	4b16      	ldr	r3, [pc, #88]	; (800ca2c <mwArm+0x78>)
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	705a      	strb	r2, [r3, #1]
            headFreeModeHold = heading;
 800c9d6:	4b16      	ldr	r3, [pc, #88]	; (800ca30 <mwArm+0x7c>)
 800c9d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c9dc:	4b15      	ldr	r3, [pc, #84]	; (800ca34 <mwArm+0x80>)
 800c9de:	801a      	strh	r2, [r3, #0]
            // Beep for inform about arming
#ifdef GPS
            if (feature(FEATURE_GPS) && f.GPS_FIX && GPS_numSat >= 5)
 800c9e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c9e4:	f7fa fb00 	bl	8006fe8 <feature>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d00b      	beq.n	800ca06 <mwArm+0x52>
 800c9ee:	4b0f      	ldr	r3, [pc, #60]	; (800ca2c <mwArm+0x78>)
 800c9f0:	7adb      	ldrb	r3, [r3, #11]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d007      	beq.n	800ca06 <mwArm+0x52>
 800c9f6:	4b10      	ldr	r3, [pc, #64]	; (800ca38 <mwArm+0x84>)
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	2b04      	cmp	r3, #4
 800c9fc:	d903      	bls.n	800ca06 <mwArm+0x52>
                buzzer(BUZZER_ARMING_GPS_FIX);
 800c9fe:	2007      	movs	r0, #7
 800ca00:	f7f7 fb02 	bl	8004008 <buzzer>
        if (!f.ARMED) {         // arm now!
 800ca04:	e00d      	b.n	800ca22 <mwArm+0x6e>
            else
                buzzer(BUZZER_ARMING);
 800ca06:	2006      	movs	r0, #6
 800ca08:	f7f7 fafe 	bl	8004008 <buzzer>
        if (!f.ARMED) {         // arm now!
 800ca0c:	e009      	b.n	800ca22 <mwArm+0x6e>
#else
            buzzer(BUZZER_ARMING);
#endif
        }
    } else if (!f.ARMED) {
 800ca0e:	4b07      	ldr	r3, [pc, #28]	; (800ca2c <mwArm+0x78>)
 800ca10:	785b      	ldrb	r3, [r3, #1]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d105      	bne.n	800ca22 <mwArm+0x6e>
        blinkLED(2, 255, 1);
 800ca16:	2201      	movs	r2, #1
 800ca18:	21ff      	movs	r1, #255	; 0xff
 800ca1a:	2002      	movs	r0, #2
 800ca1c:	f7ff fae2 	bl	800bfe4 <blinkLED>
    }
}
 800ca20:	e7ff      	b.n	800ca22 <mwArm+0x6e>
 800ca22:	bf00      	nop
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	20001cb2 	.word	0x20001cb2
 800ca2c:	20001988 	.word	0x20001988
 800ca30:	20001cb4 	.word	0x20001cb4
 800ca34:	200019ae 	.word	0x200019ae
 800ca38:	20001a70 	.word	0x20001a70

0800ca3c <mwDisarm>:

static void mwDisarm(void)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	af00      	add	r7, sp, #0
    if (f.ARMED) {
 800ca40:	4b09      	ldr	r3, [pc, #36]	; (800ca68 <mwDisarm+0x2c>)
 800ca42:	785b      	ldrb	r3, [r3, #1]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d00c      	beq.n	800ca62 <mwDisarm+0x26>
        f.ARMED = 0;
 800ca48:	4b07      	ldr	r3, [pc, #28]	; (800ca68 <mwDisarm+0x2c>)
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	705a      	strb	r2, [r3, #1]
        // Beep for inform about disarming
        buzzer(BUZZER_DISARMING);
 800ca4e:	2005      	movs	r0, #5
 800ca50:	f7f7 fada 	bl	8004008 <buzzer>
        // Reset disarm time so that it works next time we arm the board.
        if (disarmTime != 0)
 800ca54:	4b05      	ldr	r3, [pc, #20]	; (800ca6c <mwDisarm+0x30>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d002      	beq.n	800ca62 <mwDisarm+0x26>
            disarmTime = 0;
 800ca5c:	4b03      	ldr	r3, [pc, #12]	; (800ca6c <mwDisarm+0x30>)
 800ca5e:	2200      	movs	r2, #0
 800ca60:	601a      	str	r2, [r3, #0]
    }
}
 800ca62:	bf00      	nop
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	20001988 	.word	0x20001988
 800ca6c:	20001b94 	.word	0x20001b94

0800ca70 <mwVario>:

static void mwVario(void)
{
 800ca70:	b480      	push	{r7}
 800ca72:	af00      	add	r7, sp, #0

}
 800ca74:	bf00      	nop
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr
	...

0800ca80 <pidMultiWii>:

static int32_t errorGyroI[3] = { 0, 0, 0 };
static int32_t errorAngleI[2] = { 0, 0 };

static void pidMultiWii(void)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b08e      	sub	sp, #56	; 0x38
 800ca84:	af00      	add	r7, sp, #0
    int axis, prop;
    int32_t error, errorAngle;
    int32_t PTerm, ITerm, PTermACC = 0, ITermACC = 0, PTermGYRO = 0, ITermGYRO = 0, DTerm;
 800ca86:	2300      	movs	r3, #0
 800ca88:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ca8e:	2300      	movs	r3, #0
 800ca90:	623b      	str	r3, [r7, #32]
 800ca92:	2300      	movs	r3, #0
 800ca94:	61fb      	str	r3, [r7, #28]
    static int32_t delta1[3], delta2[3];
    int32_t deltaSum;
    int32_t delta;

    // **** PITCH & ROLL & YAW PID ****
    prop = max(abs(rcCommand[PITCH]), abs(rcCommand[ROLL])); // range [0;500]
 800ca96:	4b91      	ldr	r3, [pc, #580]	; (800ccdc <pidMultiWii+0x25c>)
 800ca98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	bfb8      	it	lt
 800caa0:	425b      	neglt	r3, r3
 800caa2:	b29a      	uxth	r2, r3
 800caa4:	4b8d      	ldr	r3, [pc, #564]	; (800ccdc <pidMultiWii+0x25c>)
 800caa6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	bfb8      	it	lt
 800caae:	425b      	neglt	r3, r3
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	4293      	cmp	r3, r2
 800cab4:	bf38      	it	cc
 800cab6:	4613      	movcc	r3, r2
 800cab8:	b29b      	uxth	r3, r3
 800caba:	61bb      	str	r3, [r7, #24]
    for (axis = 0; axis < 3; axis++) {
 800cabc:	2300      	movs	r3, #0
 800cabe:	637b      	str	r3, [r7, #52]	; 0x34
 800cac0:	e189      	b.n	800cdd6 <pidMultiWii+0x356>
        if ((f.ANGLE_MODE || f.HORIZON_MODE) && axis < 2) { // MODE relying on ACC
 800cac2:	4b87      	ldr	r3, [pc, #540]	; (800cce0 <pidMultiWii+0x260>)
 800cac4:	78db      	ldrb	r3, [r3, #3]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d103      	bne.n	800cad2 <pidMultiWii+0x52>
 800caca:	4b85      	ldr	r3, [pc, #532]	; (800cce0 <pidMultiWii+0x260>)
 800cacc:	791b      	ldrb	r3, [r3, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d060      	beq.n	800cb94 <pidMultiWii+0x114>
 800cad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	dc5d      	bgt.n	800cb94 <pidMultiWii+0x114>
            // 50 degrees max inclination
            errorAngle = constrain(2 * rcCommand[axis] + GPS_angle[axis], -((int)mcfg.max_angle_inclination), +mcfg.max_angle_inclination) - angle[axis] + cfg.angleTrim[axis];
 800cad8:	4a80      	ldr	r2, [pc, #512]	; (800ccdc <pidMultiWii+0x25c>)
 800cada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cadc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cae0:	005b      	lsls	r3, r3, #1
 800cae2:	4980      	ldr	r1, [pc, #512]	; (800cce4 <pidMultiWii+0x264>)
 800cae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cae6:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800caea:	4413      	add	r3, r2
 800caec:	4a7e      	ldr	r2, [pc, #504]	; (800cce8 <pidMultiWii+0x268>)
 800caee:	f8b2 2168 	ldrh.w	r2, [r2, #360]	; 0x168
 800caf2:	4251      	negs	r1, r2
 800caf4:	4a7c      	ldr	r2, [pc, #496]	; (800cce8 <pidMultiWii+0x268>)
 800caf6:	f8b2 2168 	ldrh.w	r2, [r2, #360]	; 0x168
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7f7 f8f6 	bl	8003cec <constrain>
 800cb00:	4602      	mov	r2, r0
 800cb02:	497a      	ldr	r1, [pc, #488]	; (800ccec <pidMultiWii+0x26c>)
 800cb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb06:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800cb0a:	1ad2      	subs	r2, r2, r3
 800cb0c:	4978      	ldr	r1, [pc, #480]	; (800ccf0 <pidMultiWii+0x270>)
 800cb0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb10:	3314      	adds	r3, #20
 800cb12:	005b      	lsls	r3, r3, #1
 800cb14:	440b      	add	r3, r1
 800cb16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	617b      	str	r3, [r7, #20]
            PTermACC = errorAngle * cfg.P8[PIDLEVEL] / 100; // 32 bits is needed for calculation: errorAngle*P8[PIDLEVEL] could exceed 32768   16 bits is ok for result
 800cb1e:	4b74      	ldr	r3, [pc, #464]	; (800ccf0 <pidMultiWii+0x270>)
 800cb20:	7a1b      	ldrb	r3, [r3, #8]
 800cb22:	461a      	mov	r2, r3
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	fb02 f303 	mul.w	r3, r2, r3
 800cb2a:	4a72      	ldr	r2, [pc, #456]	; (800ccf4 <pidMultiWii+0x274>)
 800cb2c:	fb82 1203 	smull	r1, r2, r2, r3
 800cb30:	1152      	asrs	r2, r2, #5
 800cb32:	17db      	asrs	r3, r3, #31
 800cb34:	1ad3      	subs	r3, r2, r3
 800cb36:	62bb      	str	r3, [r7, #40]	; 0x28
            PTermACC = constrain(PTermACC, -cfg.D8[PIDLEVEL] * 5, +cfg.D8[PIDLEVEL] * 5);
 800cb38:	4b6d      	ldr	r3, [pc, #436]	; (800ccf0 <pidMultiWii+0x270>)
 800cb3a:	7f1b      	ldrb	r3, [r3, #28]
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	4613      	mov	r3, r2
 800cb40:	079b      	lsls	r3, r3, #30
 800cb42:	1a9b      	subs	r3, r3, r2
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	1a99      	subs	r1, r3, r2
 800cb48:	4b69      	ldr	r3, [pc, #420]	; (800ccf0 <pidMultiWii+0x270>)
 800cb4a:	7f1b      	ldrb	r3, [r3, #28]
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	4613      	mov	r3, r2
 800cb50:	009b      	lsls	r3, r3, #2
 800cb52:	4413      	add	r3, r2
 800cb54:	461a      	mov	r2, r3
 800cb56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb58:	f7f7 f8c8 	bl	8003cec <constrain>
 800cb5c:	62b8      	str	r0, [r7, #40]	; 0x28

            errorAngleI[axis] = constrain(errorAngleI[axis] + errorAngle, -10000, +10000); // WindUp
 800cb5e:	4a66      	ldr	r2, [pc, #408]	; (800ccf8 <pidMultiWii+0x278>)
 800cb60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	4413      	add	r3, r2
 800cb6a:	f242 7210 	movw	r2, #10000	; 0x2710
 800cb6e:	4963      	ldr	r1, [pc, #396]	; (800ccfc <pidMultiWii+0x27c>)
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7f7 f8bb 	bl	8003cec <constrain>
 800cb76:	4602      	mov	r2, r0
 800cb78:	495f      	ldr	r1, [pc, #380]	; (800ccf8 <pidMultiWii+0x278>)
 800cb7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            ITermACC = (errorAngleI[axis] * cfg.I8[PIDLEVEL]) >> 12;
 800cb80:	4a5d      	ldr	r2, [pc, #372]	; (800ccf8 <pidMultiWii+0x278>)
 800cb82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb88:	4a59      	ldr	r2, [pc, #356]	; (800ccf0 <pidMultiWii+0x270>)
 800cb8a:	7c92      	ldrb	r2, [r2, #18]
 800cb8c:	fb02 f303 	mul.w	r3, r2, r3
 800cb90:	131b      	asrs	r3, r3, #12
 800cb92:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if (!f.ANGLE_MODE || f.HORIZON_MODE || axis == 2) { // MODE relying on GYRO or YAW axis
 800cb94:	4b52      	ldr	r3, [pc, #328]	; (800cce0 <pidMultiWii+0x260>)
 800cb96:	78db      	ldrb	r3, [r3, #3]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d006      	beq.n	800cbaa <pidMultiWii+0x12a>
 800cb9c:	4b50      	ldr	r3, [pc, #320]	; (800cce0 <pidMultiWii+0x260>)
 800cb9e:	791b      	ldrb	r3, [r3, #4]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d102      	bne.n	800cbaa <pidMultiWii+0x12a>
 800cba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cba6:	2b02      	cmp	r3, #2
 800cba8:	d15f      	bne.n	800cc6a <pidMultiWii+0x1ea>
            error = (int32_t)rcCommand[axis] * 10 * 8 / cfg.P8[axis];
 800cbaa:	4a4c      	ldr	r2, [pc, #304]	; (800ccdc <pidMultiWii+0x25c>)
 800cbac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	4413      	add	r3, r2
 800cbba:	011b      	lsls	r3, r3, #4
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	4a4c      	ldr	r2, [pc, #304]	; (800ccf0 <pidMultiWii+0x270>)
 800cbc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc2:	4413      	add	r3, r2
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	fb91 f3f3 	sdiv	r3, r1, r3
 800cbcc:	613b      	str	r3, [r7, #16]
            error -= gyroData[axis];
 800cbce:	4a4c      	ldr	r2, [pc, #304]	; (800cd00 <pidMultiWii+0x280>)
 800cbd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	1a9b      	subs	r3, r3, r2
 800cbdc:	613b      	str	r3, [r7, #16]

            PTermGYRO = rcCommand[axis];
 800cbde:	4a3f      	ldr	r2, [pc, #252]	; (800ccdc <pidMultiWii+0x25c>)
 800cbe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cbe6:	623b      	str	r3, [r7, #32]

            errorGyroI[axis] = constrain(errorGyroI[axis] + error, -16000, +16000); // WindUp
 800cbe8:	4a46      	ldr	r2, [pc, #280]	; (800cd04 <pidMultiWii+0x284>)
 800cbea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800cbf8:	4943      	ldr	r1, [pc, #268]	; (800cd08 <pidMultiWii+0x288>)
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7f7 f876 	bl	8003cec <constrain>
 800cc00:	4602      	mov	r2, r0
 800cc02:	4940      	ldr	r1, [pc, #256]	; (800cd04 <pidMultiWii+0x284>)
 800cc04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if ((abs(gyroData[axis]) > 640) || ((axis == YAW) && (abs(rcCommand[axis]) > 100)))
 800cc0a:	4a3d      	ldr	r2, [pc, #244]	; (800cd00 <pidMultiWii+0x280>)
 800cc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc0e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	bfb8      	it	lt
 800cc16:	425b      	neglt	r3, r3
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cc1e:	d80c      	bhi.n	800cc3a <pidMultiWii+0x1ba>
 800cc20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc22:	2b02      	cmp	r3, #2
 800cc24:	d10e      	bne.n	800cc44 <pidMultiWii+0x1c4>
 800cc26:	4a2d      	ldr	r2, [pc, #180]	; (800ccdc <pidMultiWii+0x25c>)
 800cc28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc2a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	bfb8      	it	lt
 800cc32:	425b      	neglt	r3, r3
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	2b64      	cmp	r3, #100	; 0x64
 800cc38:	d904      	bls.n	800cc44 <pidMultiWii+0x1c4>
                errorGyroI[axis] = 0;
 800cc3a:	4a32      	ldr	r2, [pc, #200]	; (800cd04 <pidMultiWii+0x284>)
 800cc3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc3e:	2100      	movs	r1, #0
 800cc40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            ITermGYRO = (errorGyroI[axis] / 125 * cfg.I8[axis]) >> 6;
 800cc44:	4a2f      	ldr	r2, [pc, #188]	; (800cd04 <pidMultiWii+0x284>)
 800cc46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc4c:	4a2f      	ldr	r2, [pc, #188]	; (800cd0c <pidMultiWii+0x28c>)
 800cc4e:	fb82 1203 	smull	r1, r2, r2, r3
 800cc52:	10d2      	asrs	r2, r2, #3
 800cc54:	17db      	asrs	r3, r3, #31
 800cc56:	1ad3      	subs	r3, r2, r3
 800cc58:	4925      	ldr	r1, [pc, #148]	; (800ccf0 <pidMultiWii+0x270>)
 800cc5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc5c:	440a      	add	r2, r1
 800cc5e:	320b      	adds	r2, #11
 800cc60:	7812      	ldrb	r2, [r2, #0]
 800cc62:	fb02 f303 	mul.w	r3, r2, r3
 800cc66:	119b      	asrs	r3, r3, #6
 800cc68:	61fb      	str	r3, [r7, #28]
        }
        if (f.HORIZON_MODE && axis < 2) {
 800cc6a:	4b1d      	ldr	r3, [pc, #116]	; (800cce0 <pidMultiWii+0x260>)
 800cc6c:	791b      	ldrb	r3, [r3, #4]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d027      	beq.n	800ccc2 <pidMultiWii+0x242>
 800cc72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	dc24      	bgt.n	800ccc2 <pidMultiWii+0x242>
            PTerm = (PTermACC * (500 - prop) + PTermGYRO * prop) / 500;
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800cc7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc80:	fb03 f202 	mul.w	r2, r3, r2
 800cc84:	6a3b      	ldr	r3, [r7, #32]
 800cc86:	69b9      	ldr	r1, [r7, #24]
 800cc88:	fb01 f303 	mul.w	r3, r1, r3
 800cc8c:	4413      	add	r3, r2
 800cc8e:	4a1f      	ldr	r2, [pc, #124]	; (800cd0c <pidMultiWii+0x28c>)
 800cc90:	fb82 1203 	smull	r1, r2, r2, r3
 800cc94:	1152      	asrs	r2, r2, #5
 800cc96:	17db      	asrs	r3, r3, #31
 800cc98:	1ad3      	subs	r3, r2, r3
 800cc9a:	633b      	str	r3, [r7, #48]	; 0x30
            ITerm = (ITermACC * (500 - prop) + ITermGYRO * prop) / 500;
 800cc9c:	69bb      	ldr	r3, [r7, #24]
 800cc9e:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800cca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cca4:	fb03 f202 	mul.w	r2, r3, r2
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	69b9      	ldr	r1, [r7, #24]
 800ccac:	fb01 f303 	mul.w	r3, r1, r3
 800ccb0:	4413      	add	r3, r2
 800ccb2:	4a16      	ldr	r2, [pc, #88]	; (800cd0c <pidMultiWii+0x28c>)
 800ccb4:	fb82 1203 	smull	r1, r2, r2, r3
 800ccb8:	1152      	asrs	r2, r2, #5
 800ccba:	17db      	asrs	r3, r3, #31
 800ccbc:	1ad3      	subs	r3, r2, r3
 800ccbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccc0:	e02a      	b.n	800cd18 <pidMultiWii+0x298>
        } else {
            if (f.ANGLE_MODE && axis < 2) {
 800ccc2:	4b07      	ldr	r3, [pc, #28]	; (800cce0 <pidMultiWii+0x260>)
 800ccc4:	78db      	ldrb	r3, [r3, #3]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d022      	beq.n	800cd10 <pidMultiWii+0x290>
 800ccca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	dc1f      	bgt.n	800cd10 <pidMultiWii+0x290>
                PTerm = PTermACC;
 800ccd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd2:	633b      	str	r3, [r7, #48]	; 0x30
                ITerm = ITermACC;
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccd8:	e01e      	b.n	800cd18 <pidMultiWii+0x298>
 800ccda:	bf00      	nop
 800ccdc:	200019e8 	.word	0x200019e8
 800cce0:	20001988 	.word	0x20001988
 800cce4:	20001a7c 	.word	0x20001a7c
 800cce8:	20000bbc 	.word	0x20000bbc
 800ccec:	20001790 	.word	0x20001790
 800ccf0:	20001128 	.word	0x20001128
 800ccf4:	51eb851f 	.word	0x51eb851f
 800ccf8:	20001ba4 	.word	0x20001ba4
 800ccfc:	ffffd8f0 	.word	0xffffd8f0
 800cd00:	20001780 	.word	0x20001780
 800cd04:	20001b98 	.word	0x20001b98
 800cd08:	ffffc180 	.word	0xffffc180
 800cd0c:	10624dd3 	.word	0x10624dd3
            } else {
                PTerm = PTermGYRO;
 800cd10:	6a3b      	ldr	r3, [r7, #32]
 800cd12:	633b      	str	r3, [r7, #48]	; 0x30
                ITerm = ITermGYRO;
 800cd14:	69fb      	ldr	r3, [r7, #28]
 800cd16:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        PTerm -= (int32_t)gyroData[axis] * dynP8[axis] / 10 / 8; // 32 bits is needed for calculation
 800cd18:	4a33      	ldr	r2, [pc, #204]	; (800cde8 <pidMultiWii+0x368>)
 800cd1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd1c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd20:	4619      	mov	r1, r3
 800cd22:	4a32      	ldr	r2, [pc, #200]	; (800cdec <pidMultiWii+0x36c>)
 800cd24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd26:	4413      	add	r3, r2
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	fb01 f303 	mul.w	r3, r1, r3
 800cd2e:	4a30      	ldr	r2, [pc, #192]	; (800cdf0 <pidMultiWii+0x370>)
 800cd30:	fb82 1203 	smull	r1, r2, r2, r3
 800cd34:	1152      	asrs	r2, r2, #5
 800cd36:	17db      	asrs	r3, r3, #31
 800cd38:	1a9b      	subs	r3, r3, r2
 800cd3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd3c:	4413      	add	r3, r2
 800cd3e:	633b      	str	r3, [r7, #48]	; 0x30
        delta = gyroData[axis] - lastGyro[axis];
 800cd40:	4a29      	ldr	r2, [pc, #164]	; (800cde8 <pidMultiWii+0x368>)
 800cd42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd44:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd48:	4619      	mov	r1, r3
 800cd4a:	4a2a      	ldr	r2, [pc, #168]	; (800cdf4 <pidMultiWii+0x374>)
 800cd4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd4e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd52:	1acb      	subs	r3, r1, r3
 800cd54:	60fb      	str	r3, [r7, #12]
        lastGyro[axis] = gyroData[axis];
 800cd56:	4a24      	ldr	r2, [pc, #144]	; (800cde8 <pidMultiWii+0x368>)
 800cd58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd5a:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800cd5e:	4a25      	ldr	r2, [pc, #148]	; (800cdf4 <pidMultiWii+0x374>)
 800cd60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        deltaSum = delta1[axis] + delta2[axis] + delta;
 800cd66:	4a24      	ldr	r2, [pc, #144]	; (800cdf8 <pidMultiWii+0x378>)
 800cd68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cd6e:	4923      	ldr	r1, [pc, #140]	; (800cdfc <pidMultiWii+0x37c>)
 800cd70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cd76:	4413      	add	r3, r2
 800cd78:	68fa      	ldr	r2, [r7, #12]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	60bb      	str	r3, [r7, #8]
        delta2[axis] = delta1[axis];
 800cd7e:	4a1e      	ldr	r2, [pc, #120]	; (800cdf8 <pidMultiWii+0x378>)
 800cd80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cd86:	491d      	ldr	r1, [pc, #116]	; (800cdfc <pidMultiWii+0x37c>)
 800cd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        delta1[axis] = delta;
 800cd8e:	491a      	ldr	r1, [pc, #104]	; (800cdf8 <pidMultiWii+0x378>)
 800cd90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd92:	68fa      	ldr	r2, [r7, #12]
 800cd94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DTerm = (deltaSum * dynD8[axis]) / 32;
 800cd98:	4a19      	ldr	r2, [pc, #100]	; (800ce00 <pidMultiWii+0x380>)
 800cd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd9c:	4413      	add	r3, r2
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	461a      	mov	r2, r3
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	fb02 f303 	mul.w	r3, r2, r3
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	da00      	bge.n	800cdae <pidMultiWii+0x32e>
 800cdac:	331f      	adds	r3, #31
 800cdae:	115b      	asrs	r3, r3, #5
 800cdb0:	607b      	str	r3, [r7, #4]
        axisPID[axis] = PTerm + ITerm - DTerm;
 800cdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb4:	b29a      	uxth	r2, r3
 800cdb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	4413      	add	r3, r2
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	b219      	sxth	r1, r3
 800cdc8:	4a0e      	ldr	r2, [pc, #56]	; (800ce04 <pidMultiWii+0x384>)
 800cdca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdcc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800cdd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	637b      	str	r3, [r7, #52]	; 0x34
 800cdd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd8:	2b02      	cmp	r3, #2
 800cdda:	f77f ae72 	ble.w	800cac2 <pidMultiWii+0x42>
    }
}
 800cdde:	bf00      	nop
 800cde0:	bf00      	nop
 800cde2:	3738      	adds	r7, #56	; 0x38
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	20001780 	.word	0x20001780
 800cdec:	20001a20 	.word	0x20001a20
 800cdf0:	66666667 	.word	0x66666667
 800cdf4:	20001c60 	.word	0x20001c60
 800cdf8:	20001c68 	.word	0x20001c68
 800cdfc:	20001c74 	.word	0x20001c74
 800ce00:	20001a28 	.word	0x20001a28
 800ce04:	20001a48 	.word	0x20001a48

0800ce08 <pidRewrite>:

#define GYRO_I_MAX 256

static void pidRewrite(void)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b08a      	sub	sp, #40	; 0x28
 800ce0c:	af00      	add	r7, sp, #0
    int32_t errorAngle = 0;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	61fb      	str	r3, [r7, #28]
    int32_t PTerm, ITerm, DTerm;
    static int32_t lastError[3] = { 0, 0, 0 };
    int32_t AngleRateTmp, RateError;

    // ----------PID controller----------
    for (axis = 0; axis < 3; axis++) {
 800ce12:	2300      	movs	r3, #0
 800ce14:	627b      	str	r3, [r7, #36]	; 0x24
 800ce16:	e0f2      	b.n	800cffe <pidRewrite+0x1f6>
        // -----Get the desired angle rate depending on flight mode
        if (axis == 2) { // YAW is always gyro-controlled (MAG correction is applied to rcCommand)
 800ce18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1a:	2b02      	cmp	r3, #2
 800ce1c:	d10b      	bne.n	800ce36 <pidRewrite+0x2e>
            AngleRateTmp = (((int32_t)(cfg.yawRate + 27) * rcCommand[YAW]) >> 5);
 800ce1e:	4b7c      	ldr	r3, [pc, #496]	; (800d010 <pidRewrite+0x208>)
 800ce20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ce24:	331b      	adds	r3, #27
 800ce26:	4a7b      	ldr	r2, [pc, #492]	; (800d014 <pidRewrite+0x20c>)
 800ce28:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ce2c:	fb02 f303 	mul.w	r3, r2, r3
 800ce30:	115b      	asrs	r3, r3, #5
 800ce32:	623b      	str	r3, [r7, #32]
 800ce34:	e053      	b.n	800cede <pidRewrite+0xd6>
        } else {
            // calculate error and limit the angle to 50 degrees max inclination
            errorAngle = (constrain(rcCommand[axis] + GPS_angle[axis], -500, +500) - angle[axis] + cfg.angleTrim[axis]) / 10.0f; // 16 bits is ok here
 800ce36:	4a77      	ldr	r2, [pc, #476]	; (800d014 <pidRewrite+0x20c>)
 800ce38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ce3e:	4619      	mov	r1, r3
 800ce40:	4a75      	ldr	r2, [pc, #468]	; (800d018 <pidRewrite+0x210>)
 800ce42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce44:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ce48:	440b      	add	r3, r1
 800ce4a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ce4e:	4973      	ldr	r1, [pc, #460]	; (800d01c <pidRewrite+0x214>)
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7f6 ff4b 	bl	8003cec <constrain>
 800ce56:	4602      	mov	r2, r0
 800ce58:	4971      	ldr	r1, [pc, #452]	; (800d020 <pidRewrite+0x218>)
 800ce5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800ce60:	1ad2      	subs	r2, r2, r3
 800ce62:	496b      	ldr	r1, [pc, #428]	; (800d010 <pidRewrite+0x208>)
 800ce64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce66:	3314      	adds	r3, #20
 800ce68:	005b      	lsls	r3, r3, #1
 800ce6a:	440b      	add	r3, r1
 800ce6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ce70:	4413      	add	r3, r2
 800ce72:	ee07 3a90 	vmov	s15, r3
 800ce76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ce7a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800ce7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ce82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce86:	ee17 3a90 	vmov	r3, s15
 800ce8a:	61fb      	str	r3, [r7, #28]
            if (!f.ANGLE_MODE) { //control is GYRO based (ACRO and HORIZON - direct sticks control is applied to rate PID
 800ce8c:	4b65      	ldr	r3, [pc, #404]	; (800d024 <pidRewrite+0x21c>)
 800ce8e:	78db      	ldrb	r3, [r3, #3]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d11c      	bne.n	800cece <pidRewrite+0xc6>
                AngleRateTmp = ((int32_t)(cfg.rollPitchRate[axis] + 27) * rcCommand[axis]) >> 4;
 800ce94:	4a5e      	ldr	r2, [pc, #376]	; (800d010 <pidRewrite+0x208>)
 800ce96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce98:	4413      	add	r3, r2
 800ce9a:	3323      	adds	r3, #35	; 0x23
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	331b      	adds	r3, #27
 800cea0:	495c      	ldr	r1, [pc, #368]	; (800d014 <pidRewrite+0x20c>)
 800cea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cea4:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800cea8:	fb02 f303 	mul.w	r3, r2, r3
 800ceac:	111b      	asrs	r3, r3, #4
 800ceae:	623b      	str	r3, [r7, #32]

                if (f.HORIZON_MODE) {
 800ceb0:	4b5c      	ldr	r3, [pc, #368]	; (800d024 <pidRewrite+0x21c>)
 800ceb2:	791b      	ldrb	r3, [r3, #4]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d012      	beq.n	800cede <pidRewrite+0xd6>
                    // mix up angle error to desired AngleRateTmp to add a little auto-level feel
                    AngleRateTmp += (errorAngle * cfg.I8[PIDLEVEL]) >> 8;
 800ceb8:	4b55      	ldr	r3, [pc, #340]	; (800d010 <pidRewrite+0x208>)
 800ceba:	7c9b      	ldrb	r3, [r3, #18]
 800cebc:	461a      	mov	r2, r3
 800cebe:	69fb      	ldr	r3, [r7, #28]
 800cec0:	fb02 f303 	mul.w	r3, r2, r3
 800cec4:	121b      	asrs	r3, r3, #8
 800cec6:	6a3a      	ldr	r2, [r7, #32]
 800cec8:	4413      	add	r3, r2
 800ceca:	623b      	str	r3, [r7, #32]
 800cecc:	e007      	b.n	800cede <pidRewrite+0xd6>
                }
            } else { // it's the ANGLE mode - control is angle based, so control loop is needed
                AngleRateTmp = (errorAngle * cfg.P8[PIDLEVEL]) >> 4;
 800cece:	4b50      	ldr	r3, [pc, #320]	; (800d010 <pidRewrite+0x208>)
 800ced0:	7a1b      	ldrb	r3, [r3, #8]
 800ced2:	461a      	mov	r2, r3
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	fb02 f303 	mul.w	r3, r2, r3
 800ceda:	111b      	asrs	r3, r3, #4
 800cedc:	623b      	str	r3, [r7, #32]

        // --------low-level gyro-based PID. ----------
        // Used in stand-alone mode for ACRO, controlled by higher level regulators in other modes
        // -----calculate scaled error.AngleRates
        // multiplication of rcCommand corresponds to changing the sticks scaling here
        RateError = AngleRateTmp - gyroData[axis];
 800cede:	4a52      	ldr	r2, [pc, #328]	; (800d028 <pidRewrite+0x220>)
 800cee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cee6:	461a      	mov	r2, r3
 800cee8:	6a3b      	ldr	r3, [r7, #32]
 800ceea:	1a9b      	subs	r3, r3, r2
 800ceec:	61bb      	str	r3, [r7, #24]

        // -----calculate P component
        PTerm = (RateError * cfg.P8[axis]) >> 7;
 800ceee:	4a48      	ldr	r2, [pc, #288]	; (800d010 <pidRewrite+0x208>)
 800cef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef2:	4413      	add	r3, r2
 800cef4:	3301      	adds	r3, #1
 800cef6:	781b      	ldrb	r3, [r3, #0]
 800cef8:	461a      	mov	r2, r3
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	fb02 f303 	mul.w	r3, r2, r3
 800cf00:	11db      	asrs	r3, r3, #7
 800cf02:	617b      	str	r3, [r7, #20]
        // -----calculate I component
        // there should be no division before accumulating the error to integrator, because the precision would be reduced.
        // Precision is critical, as I prevents from long-time drift. Thus, 32 bits integrator is used.
        // Time correction (to avoid different I scaling for different builds based on average cycle time)
        // is normalized to cycle time = 2048.
        errorGyroI[axis] = errorGyroI[axis] + ((RateError * cycleTime) >> 11) * cfg.I8[axis];
 800cf04:	4a49      	ldr	r2, [pc, #292]	; (800d02c <pidRewrite+0x224>)
 800cf06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cf0c:	4b48      	ldr	r3, [pc, #288]	; (800d030 <pidRewrite+0x228>)
 800cf0e:	881b      	ldrh	r3, [r3, #0]
 800cf10:	4619      	mov	r1, r3
 800cf12:	69bb      	ldr	r3, [r7, #24]
 800cf14:	fb01 f303 	mul.w	r3, r1, r3
 800cf18:	12db      	asrs	r3, r3, #11
 800cf1a:	483d      	ldr	r0, [pc, #244]	; (800d010 <pidRewrite+0x208>)
 800cf1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf1e:	4401      	add	r1, r0
 800cf20:	310b      	adds	r1, #11
 800cf22:	7809      	ldrb	r1, [r1, #0]
 800cf24:	fb01 f303 	mul.w	r3, r1, r3
 800cf28:	441a      	add	r2, r3
 800cf2a:	4940      	ldr	r1, [pc, #256]	; (800d02c <pidRewrite+0x224>)
 800cf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // limit maximum integrator value to prevent WindUp - accumulating extreme values when system is saturated.
        // I coefficient (I8) moved before integration to make limiting independent from PID settings
        errorGyroI[axis] = constrain(errorGyroI[axis], (int32_t)(-GYRO_I_MAX) << 13, (int32_t)(+GYRO_I_MAX) << 13);
 800cf32:	4a3e      	ldr	r2, [pc, #248]	; (800d02c <pidRewrite+0x224>)
 800cf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cf3e:	493d      	ldr	r1, [pc, #244]	; (800d034 <pidRewrite+0x22c>)
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7f6 fed3 	bl	8003cec <constrain>
 800cf46:	4602      	mov	r2, r0
 800cf48:	4938      	ldr	r1, [pc, #224]	; (800d02c <pidRewrite+0x224>)
 800cf4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ITerm = errorGyroI[axis] >> 13;
 800cf50:	4a36      	ldr	r2, [pc, #216]	; (800d02c <pidRewrite+0x224>)
 800cf52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf58:	135b      	asrs	r3, r3, #13
 800cf5a:	613b      	str	r3, [r7, #16]

        //-----calculate D-term
        delta = RateError - lastError[axis];  // 16 bits is ok here, the dif between 2 consecutive gyro reads is limited to 800
 800cf5c:	4a36      	ldr	r2, [pc, #216]	; (800d038 <pidRewrite+0x230>)
 800cf5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf64:	69ba      	ldr	r2, [r7, #24]
 800cf66:	1ad3      	subs	r3, r2, r3
 800cf68:	60fb      	str	r3, [r7, #12]
        lastError[axis] = RateError;
 800cf6a:	4933      	ldr	r1, [pc, #204]	; (800d038 <pidRewrite+0x230>)
 800cf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6e:	69ba      	ldr	r2, [r7, #24]
 800cf70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Correct difference by cycle time. Cycle time is jittery (can be different 2 times), so calculated difference
        // would be scaled by different dt each time. Division by dT fixes that.
        delta = (delta * ((uint16_t)0xFFFF / (cycleTime >> 4))) >> 6;
 800cf74:	4b2e      	ldr	r3, [pc, #184]	; (800d030 <pidRewrite+0x228>)
 800cf76:	881b      	ldrh	r3, [r3, #0]
 800cf78:	091b      	lsrs	r3, r3, #4
 800cf7a:	b29b      	uxth	r3, r3
 800cf7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf80:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	461a      	mov	r2, r3
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	fb02 f303 	mul.w	r3, r2, r3
 800cf8e:	119b      	asrs	r3, r3, #6
 800cf90:	60fb      	str	r3, [r7, #12]
        // add moving average here to reduce noise
        deltaSum = delta1[axis] + delta2[axis] + delta;
 800cf92:	4a2a      	ldr	r2, [pc, #168]	; (800d03c <pidRewrite+0x234>)
 800cf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cf9a:	4929      	ldr	r1, [pc, #164]	; (800d040 <pidRewrite+0x238>)
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cfa2:	4413      	add	r3, r2
 800cfa4:	68fa      	ldr	r2, [r7, #12]
 800cfa6:	4413      	add	r3, r2
 800cfa8:	60bb      	str	r3, [r7, #8]
        delta2[axis] = delta1[axis];
 800cfaa:	4a24      	ldr	r2, [pc, #144]	; (800d03c <pidRewrite+0x234>)
 800cfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cfb2:	4923      	ldr	r1, [pc, #140]	; (800d040 <pidRewrite+0x238>)
 800cfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        delta1[axis] = delta;
 800cfba:	4920      	ldr	r1, [pc, #128]	; (800d03c <pidRewrite+0x234>)
 800cfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfbe:	68fa      	ldr	r2, [r7, #12]
 800cfc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DTerm = (deltaSum * cfg.D8[axis]) >> 8;
 800cfc4:	4a12      	ldr	r2, [pc, #72]	; (800d010 <pidRewrite+0x208>)
 800cfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc8:	4413      	add	r3, r2
 800cfca:	3315      	adds	r3, #21
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	fb02 f303 	mul.w	r3, r2, r3
 800cfd6:	121b      	asrs	r3, r3, #8
 800cfd8:	607b      	str	r3, [r7, #4]

        // -----calculate total PID output
        axisPID[axis] = PTerm + ITerm + DTerm;
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	4413      	add	r3, r2
 800cfe4:	b29a      	uxth	r2, r3
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	4413      	add	r3, r2
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	b219      	sxth	r1, r3
 800cff0:	4a14      	ldr	r2, [pc, #80]	; (800d044 <pidRewrite+0x23c>)
 800cff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800cff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffa:	3301      	adds	r3, #1
 800cffc:	627b      	str	r3, [r7, #36]	; 0x24
 800cffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d000:	2b02      	cmp	r3, #2
 800d002:	f77f af09 	ble.w	800ce18 <pidRewrite+0x10>
    }
}
 800d006:	bf00      	nop
 800d008:	bf00      	nop
 800d00a:	3728      	adds	r7, #40	; 0x28
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}
 800d010:	20001128 	.word	0x20001128
 800d014:	200019e8 	.word	0x200019e8
 800d018:	20001a7c 	.word	0x20001a7c
 800d01c:	fffffe0c 	.word	0xfffffe0c
 800d020:	20001790 	.word	0x20001790
 800d024:	20001988 	.word	0x20001988
 800d028:	20001780 	.word	0x20001780
 800d02c:	20001b98 	.word	0x20001b98
 800d030:	200019ac 	.word	0x200019ac
 800d034:	ffe00000 	.word	0xffe00000
 800d038:	20001c80 	.word	0x20001c80
 800d03c:	20001c8c 	.word	0x20001c8c
 800d040:	20001c98 	.word	0x20001c98
 800d044:	20001a48 	.word	0x20001a48

0800d048 <setPIDController>:

void setPIDController(int type)
{
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
    switch (type) {
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2b01      	cmp	r3, #1
 800d054:	d003      	beq.n	800d05e <setPIDController+0x16>
        case 0:
        default:
            pid_controller = pidMultiWii;
 800d056:	4b07      	ldr	r3, [pc, #28]	; (800d074 <setPIDController+0x2c>)
 800d058:	4a07      	ldr	r2, [pc, #28]	; (800d078 <setPIDController+0x30>)
 800d05a:	601a      	str	r2, [r3, #0]
            break;
 800d05c:	e003      	b.n	800d066 <setPIDController+0x1e>
        case 1:
            pid_controller = pidRewrite;
 800d05e:	4b05      	ldr	r3, [pc, #20]	; (800d074 <setPIDController+0x2c>)
 800d060:	4a06      	ldr	r2, [pc, #24]	; (800d07c <setPIDController+0x34>)
 800d062:	601a      	str	r2, [r3, #0]
            break;
 800d064:	bf00      	nop
    }
}
 800d066:	bf00      	nop
 800d068:	370c      	adds	r7, #12
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop
 800d074:	20000050 	.word	0x20000050
 800d078:	0800ca81 	.word	0x0800ca81
 800d07c:	0800ce09 	.word	0x0800ce09

0800d080 <taskComputeRc>:
#ifdef BARO
    static int16_t initialThrottleHold;
#endif

uint16_t taskComputeRc(PifTask *p_task)	// 50Hz
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b086      	sub	sp, #24
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
    static uint8_t rcDelayCommand;      // this indicates the number of time (multiple of RC measurement at 50Hz) the sticks must be maintained to run or switch off motors
    static uint8_t rcSticks;            // this hold sticks position for command combos
    uint8_t stTmp = 0;
 800d088:	2300      	movs	r3, #0
 800d08a:	75fb      	strb	r3, [r7, #23]
    int i;
    uint32_t auxState = 0;
 800d08c:	2300      	movs	r3, #0
 800d08e:	60fb      	str	r3, [r7, #12]
#ifdef GPS
    static uint8_t GPSNavReset = 1;
#endif
    bool isThrottleLow = false;
 800d090:	2300      	movs	r3, #0
 800d092:	72fb      	strb	r3, [r7, #11]

    (void)p_task;

        computeRC();
 800d094:	f7ff fbf4 	bl	800c880 <computeRC>

        // in 3D mode, we need to be able to disarm by switch at any time
        if (feature(FEATURE_3D)) {
 800d098:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d09c:	f7f9 ffa4 	bl	8006fe8 <feature>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d005      	beq.n	800d0b2 <taskComputeRc+0x32>
            if (!rcOptions[BOXARM])
 800d0a6:	4b9d      	ldr	r3, [pc, #628]	; (800d31c <taskComputeRc+0x29c>)
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d101      	bne.n	800d0b2 <taskComputeRc+0x32>
                mwDisarm();
 800d0ae:	f7ff fcc5 	bl	800ca3c <mwDisarm>
        }

        // Read rssi value
        rssi = RSSI_getValue();
 800d0b2:	f001 f9e1 	bl	800e478 <RSSI_getValue>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	4b99      	ldr	r3, [pc, #612]	; (800d320 <taskComputeRc+0x2a0>)
 800d0bc:	801a      	strh	r2, [r3, #0]

        // Failsafe routine
        if (feature(FEATURE_FAILSAFE) || feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d0be:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d0c2:	f7f9 ff91 	bl	8006fe8 <feature>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d106      	bne.n	800d0da <taskComputeRc+0x5a>
 800d0cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d0d0:	f7f9 ff8a 	bl	8006fe8 <feature>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d072      	beq.n	800d1c0 <taskComputeRc+0x140>
            if (failsafeCnt > (5 * cfg.failsafe_delay) && f.ARMED) { // Stabilize, and set Throttle to specified level
 800d0da:	4b92      	ldr	r3, [pc, #584]	; (800d324 <taskComputeRc+0x2a4>)
 800d0dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	4b91      	ldr	r3, [pc, #580]	; (800d328 <taskComputeRc+0x2a8>)
 800d0e4:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	4613      	mov	r3, r2
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	4413      	add	r3, r2
 800d0f0:	4299      	cmp	r1, r3
 800d0f2:	dd43      	ble.n	800d17c <taskComputeRc+0xfc>
 800d0f4:	4b8d      	ldr	r3, [pc, #564]	; (800d32c <taskComputeRc+0x2ac>)
 800d0f6:	785b      	ldrb	r3, [r3, #1]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d03f      	beq.n	800d17c <taskComputeRc+0xfc>
                for (i = 0; i < 3; i++)
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	613b      	str	r3, [r7, #16]
 800d100:	e00a      	b.n	800d118 <taskComputeRc+0x98>
                    rcData[i] = mcfg.midrc;      // after specified guard time after RC signal is lost (in 0.1sec)
 800d102:	4b8b      	ldr	r3, [pc, #556]	; (800d330 <taskComputeRc+0x2b0>)
 800d104:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d108:	b219      	sxth	r1, r3
 800d10a:	4a8a      	ldr	r2, [pc, #552]	; (800d334 <taskComputeRc+0x2b4>)
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (i = 0; i < 3; i++)
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	3301      	adds	r3, #1
 800d116:	613b      	str	r3, [r7, #16]
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	2b02      	cmp	r3, #2
 800d11c:	ddf1      	ble.n	800d102 <taskComputeRc+0x82>
                rcData[THROTTLE] = cfg.failsafe_throttle;
 800d11e:	4b82      	ldr	r3, [pc, #520]	; (800d328 <taskComputeRc+0x2a8>)
 800d120:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800d124:	b21a      	sxth	r2, r3
 800d126:	4b83      	ldr	r3, [pc, #524]	; (800d334 <taskComputeRc+0x2b4>)
 800d128:	80da      	strh	r2, [r3, #6]
                buzzer(BUZZER_TX_LOST_ARMED);
 800d12a:	2003      	movs	r0, #3
 800d12c:	f7f6 ff6c 	bl	8004008 <buzzer>
                if ((failsafeCnt > 5 * (cfg.failsafe_delay + cfg.failsafe_off_delay)) && !f.FW_FAILSAFE_RTH_ENABLE) {  // Turn OFF motors after specified Time (in 0.1sec)
 800d130:	4b7c      	ldr	r3, [pc, #496]	; (800d324 <taskComputeRc+0x2a4>)
 800d132:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d136:	4619      	mov	r1, r3
 800d138:	4b7b      	ldr	r3, [pc, #492]	; (800d328 <taskComputeRc+0x2a8>)
 800d13a:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d13e:	461a      	mov	r2, r3
 800d140:	4b79      	ldr	r3, [pc, #484]	; (800d328 <taskComputeRc+0x2a8>)
 800d142:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 800d146:	441a      	add	r2, r3
 800d148:	4613      	mov	r3, r2
 800d14a:	009b      	lsls	r3, r3, #2
 800d14c:	4413      	add	r3, r2
 800d14e:	4299      	cmp	r1, r3
 800d150:	dd0b      	ble.n	800d16a <taskComputeRc+0xea>
 800d152:	4b76      	ldr	r3, [pc, #472]	; (800d32c <taskComputeRc+0x2ac>)
 800d154:	7c9b      	ldrb	r3, [r3, #18]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d107      	bne.n	800d16a <taskComputeRc+0xea>
                    mwDisarm();             // This will prevent the copter to automatically rearm if failsafe shuts it down and prevents
 800d15a:	f7ff fc6f 	bl	800ca3c <mwDisarm>
                    f.OK_TO_ARM = 0;        // to restart accidentely by just reconnect to the tx - you will have to switch off first to rearm
 800d15e:	4b73      	ldr	r3, [pc, #460]	; (800d32c <taskComputeRc+0x2ac>)
 800d160:	2200      	movs	r2, #0
 800d162:	701a      	strb	r2, [r3, #0]
                    buzzer(BUZZER_TX_LOST);
 800d164:	2004      	movs	r0, #4
 800d166:	f7f6 ff4f 	bl	8004008 <buzzer>
                }
                failsafeEvents++;
 800d16a:	4b73      	ldr	r3, [pc, #460]	; (800d338 <taskComputeRc+0x2b8>)
 800d16c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d170:	b29b      	uxth	r3, r3
 800d172:	3301      	adds	r3, #1
 800d174:	b29b      	uxth	r3, r3
 800d176:	b21a      	sxth	r2, r3
 800d178:	4b6f      	ldr	r3, [pc, #444]	; (800d338 <taskComputeRc+0x2b8>)
 800d17a:	801a      	strh	r2, [r3, #0]
            }
            if (failsafeCnt > (5 * cfg.failsafe_delay) && !f.ARMED) {  // Turn off "Ok To arm to prevent the motors from spinning after repowering the RX with low throttle and aux to arm
 800d17c:	4b69      	ldr	r3, [pc, #420]	; (800d324 <taskComputeRc+0x2a4>)
 800d17e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d182:	4619      	mov	r1, r3
 800d184:	4b68      	ldr	r3, [pc, #416]	; (800d328 <taskComputeRc+0x2a8>)
 800d186:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d18a:	461a      	mov	r2, r3
 800d18c:	4613      	mov	r3, r2
 800d18e:	009b      	lsls	r3, r3, #2
 800d190:	4413      	add	r3, r2
 800d192:	4299      	cmp	r1, r3
 800d194:	dd0b      	ble.n	800d1ae <taskComputeRc+0x12e>
 800d196:	4b65      	ldr	r3, [pc, #404]	; (800d32c <taskComputeRc+0x2ac>)
 800d198:	785b      	ldrb	r3, [r3, #1]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d107      	bne.n	800d1ae <taskComputeRc+0x12e>
                mwDisarm();         // This will prevent the copter to automatically rearm if failsafe shuts it down and prevents
 800d19e:	f7ff fc4d 	bl	800ca3c <mwDisarm>
                f.OK_TO_ARM = 0;    // to restart accidentely by just reconnect to the tx - you will have to switch off first to rearm
 800d1a2:	4b62      	ldr	r3, [pc, #392]	; (800d32c <taskComputeRc+0x2ac>)
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	701a      	strb	r2, [r3, #0]
                buzzer(BUZZER_TX_LOST);
 800d1a8:	2004      	movs	r0, #4
 800d1aa:	f7f6 ff2d 	bl	8004008 <buzzer>
            }
            failsafeCnt++;
 800d1ae:	4b5d      	ldr	r3, [pc, #372]	; (800d324 <taskComputeRc+0x2a4>)
 800d1b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	b21a      	sxth	r2, r3
 800d1bc:	4b59      	ldr	r3, [pc, #356]	; (800d324 <taskComputeRc+0x2a4>)
 800d1be:	801a      	strh	r2, [r3, #0]
        }
        // end of failsafe routine - next change is made with RcOptions setting

        // ------------------ STICKS COMMAND HANDLER --------------------
        // checking sticks positions
        for (i = 0; i < 4; i++) {
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	613b      	str	r3, [r7, #16]
 800d1c4:	e021      	b.n	800d20a <taskComputeRc+0x18a>
            stTmp >>= 2;
 800d1c6:	7dfb      	ldrb	r3, [r7, #23]
 800d1c8:	089b      	lsrs	r3, r3, #2
 800d1ca:	75fb      	strb	r3, [r7, #23]
            if (rcData[i] > mcfg.mincheck)
 800d1cc:	4a59      	ldr	r2, [pc, #356]	; (800d334 <taskComputeRc+0x2b4>)
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	4b56      	ldr	r3, [pc, #344]	; (800d330 <taskComputeRc+0x2b0>)
 800d1d8:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	dd03      	ble.n	800d1e8 <taskComputeRc+0x168>
                stTmp |= 0x80;  // check for MIN
 800d1e0:	7dfb      	ldrb	r3, [r7, #23]
 800d1e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d1e6:	75fb      	strb	r3, [r7, #23]
            if (rcData[i] < mcfg.maxcheck)
 800d1e8:	4a52      	ldr	r2, [pc, #328]	; (800d334 <taskComputeRc+0x2b4>)
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	4b4f      	ldr	r3, [pc, #316]	; (800d330 <taskComputeRc+0x2b0>)
 800d1f4:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	da03      	bge.n	800d204 <taskComputeRc+0x184>
                stTmp |= 0x40;  // check for MAX
 800d1fc:	7dfb      	ldrb	r3, [r7, #23]
 800d1fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d202:	75fb      	strb	r3, [r7, #23]
        for (i = 0; i < 4; i++) {
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	3301      	adds	r3, #1
 800d208:	613b      	str	r3, [r7, #16]
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	2b03      	cmp	r3, #3
 800d20e:	ddda      	ble.n	800d1c6 <taskComputeRc+0x146>
        }
        if (stTmp == rcSticks) {
 800d210:	4b4a      	ldr	r3, [pc, #296]	; (800d33c <taskComputeRc+0x2bc>)
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	7dfa      	ldrb	r2, [r7, #23]
 800d216:	429a      	cmp	r2, r3
 800d218:	d10a      	bne.n	800d230 <taskComputeRc+0x1b0>
            if (rcDelayCommand < 250)
 800d21a:	4b49      	ldr	r3, [pc, #292]	; (800d340 <taskComputeRc+0x2c0>)
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	2bf9      	cmp	r3, #249	; 0xf9
 800d220:	d809      	bhi.n	800d236 <taskComputeRc+0x1b6>
                rcDelayCommand++;
 800d222:	4b47      	ldr	r3, [pc, #284]	; (800d340 <taskComputeRc+0x2c0>)
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	3301      	adds	r3, #1
 800d228:	b2da      	uxtb	r2, r3
 800d22a:	4b45      	ldr	r3, [pc, #276]	; (800d340 <taskComputeRc+0x2c0>)
 800d22c:	701a      	strb	r2, [r3, #0]
 800d22e:	e002      	b.n	800d236 <taskComputeRc+0x1b6>
        } else
            rcDelayCommand = 0;
 800d230:	4b43      	ldr	r3, [pc, #268]	; (800d340 <taskComputeRc+0x2c0>)
 800d232:	2200      	movs	r2, #0
 800d234:	701a      	strb	r2, [r3, #0]
        rcSticks = stTmp;
 800d236:	4a41      	ldr	r2, [pc, #260]	; (800d33c <taskComputeRc+0x2bc>)
 800d238:	7dfb      	ldrb	r3, [r7, #23]
 800d23a:	7013      	strb	r3, [r2, #0]

        // perform actions
        if (feature(FEATURE_3D) && (rcData[THROTTLE] > (mcfg.midrc - mcfg.deadband3d_throttle) && rcData[THROTTLE] < (mcfg.midrc + mcfg.deadband3d_throttle)))
 800d23c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d240:	f7f9 fed2 	bl	8006fe8 <feature>
 800d244:	4603      	mov	r3, r0
 800d246:	2b00      	cmp	r3, #0
 800d248:	d01e      	beq.n	800d288 <taskComputeRc+0x208>
 800d24a:	4b3a      	ldr	r3, [pc, #232]	; (800d334 <taskComputeRc+0x2b4>)
 800d24c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d250:	461a      	mov	r2, r3
 800d252:	4b37      	ldr	r3, [pc, #220]	; (800d330 <taskComputeRc+0x2b0>)
 800d254:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d258:	4619      	mov	r1, r3
 800d25a:	4b35      	ldr	r3, [pc, #212]	; (800d330 <taskComputeRc+0x2b0>)
 800d25c:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800d260:	1acb      	subs	r3, r1, r3
 800d262:	429a      	cmp	r2, r3
 800d264:	dd10      	ble.n	800d288 <taskComputeRc+0x208>
 800d266:	4b33      	ldr	r3, [pc, #204]	; (800d334 <taskComputeRc+0x2b4>)
 800d268:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d26c:	461a      	mov	r2, r3
 800d26e:	4b30      	ldr	r3, [pc, #192]	; (800d330 <taskComputeRc+0x2b0>)
 800d270:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d274:	4619      	mov	r1, r3
 800d276:	4b2e      	ldr	r3, [pc, #184]	; (800d330 <taskComputeRc+0x2b0>)
 800d278:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800d27c:	440b      	add	r3, r1
 800d27e:	429a      	cmp	r2, r3
 800d280:	da02      	bge.n	800d288 <taskComputeRc+0x208>
            isThrottleLow = true;
 800d282:	2301      	movs	r3, #1
 800d284:	72fb      	strb	r3, [r7, #11]
 800d286:	e014      	b.n	800d2b2 <taskComputeRc+0x232>
        else if (!feature(FEATURE_3D) && (rcData[THROTTLE] < mcfg.mincheck))
 800d288:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d28c:	f7f9 feac 	bl	8006fe8 <feature>
 800d290:	4603      	mov	r3, r0
 800d292:	f083 0301 	eor.w	r3, r3, #1
 800d296:	b2db      	uxtb	r3, r3
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d00a      	beq.n	800d2b2 <taskComputeRc+0x232>
 800d29c:	4b25      	ldr	r3, [pc, #148]	; (800d334 <taskComputeRc+0x2b4>)
 800d29e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	4b22      	ldr	r3, [pc, #136]	; (800d330 <taskComputeRc+0x2b0>)
 800d2a6:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	da01      	bge.n	800d2b2 <taskComputeRc+0x232>
            isThrottleLow = true;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	72fb      	strb	r3, [r7, #11]
        if (isThrottleLow) {
 800d2b2:	7afb      	ldrb	r3, [r7, #11]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d01c      	beq.n	800d2f2 <taskComputeRc+0x272>
            errorGyroI[ROLL] = 0;
 800d2b8:	4b22      	ldr	r3, [pc, #136]	; (800d344 <taskComputeRc+0x2c4>)
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	601a      	str	r2, [r3, #0]
            errorGyroI[PITCH] = 0;
 800d2be:	4b21      	ldr	r3, [pc, #132]	; (800d344 <taskComputeRc+0x2c4>)
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	605a      	str	r2, [r3, #4]
            errorGyroI[YAW] = 0;
 800d2c4:	4b1f      	ldr	r3, [pc, #124]	; (800d344 <taskComputeRc+0x2c4>)
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	609a      	str	r2, [r3, #8]
            errorAngleI[ROLL] = 0;
 800d2ca:	4b1f      	ldr	r3, [pc, #124]	; (800d348 <taskComputeRc+0x2c8>)
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	601a      	str	r2, [r3, #0]
            errorAngleI[PITCH] = 0;
 800d2d0:	4b1d      	ldr	r3, [pc, #116]	; (800d348 <taskComputeRc+0x2c8>)
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	605a      	str	r2, [r3, #4]
            if (cfg.activate[BOXARM] > 0) { // Arming via ARM BOX
 800d2d6:	4b14      	ldr	r3, [pc, #80]	; (800d328 <taskComputeRc+0x2a8>)
 800d2d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d009      	beq.n	800d2f2 <taskComputeRc+0x272>
                if (rcOptions[BOXARM] && f.OK_TO_ARM)
 800d2de:	4b0f      	ldr	r3, [pc, #60]	; (800d31c <taskComputeRc+0x29c>)
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d005      	beq.n	800d2f2 <taskComputeRc+0x272>
 800d2e6:	4b11      	ldr	r3, [pc, #68]	; (800d32c <taskComputeRc+0x2ac>)
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d001      	beq.n	800d2f2 <taskComputeRc+0x272>
                    mwArm();
 800d2ee:	f7ff fb61 	bl	800c9b4 <mwArm>
            }
        }

        if (cfg.activate[BOXARM] > 0) { // Disarming via ARM BOX
 800d2f2:	4b0d      	ldr	r3, [pc, #52]	; (800d328 <taskComputeRc+0x2a8>)
 800d2f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d02d      	beq.n	800d356 <taskComputeRc+0x2d6>
            if (!rcOptions[BOXARM] && f.ARMED) {
 800d2fa:	4b08      	ldr	r3, [pc, #32]	; (800d31c <taskComputeRc+0x29c>)
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d129      	bne.n	800d356 <taskComputeRc+0x2d6>
 800d302:	4b0a      	ldr	r3, [pc, #40]	; (800d32c <taskComputeRc+0x2ac>)
 800d304:	785b      	ldrb	r3, [r3, #1]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d025      	beq.n	800d356 <taskComputeRc+0x2d6>
                if (mcfg.disarm_kill_switch) {
 800d30a:	4b09      	ldr	r3, [pc, #36]	; (800d330 <taskComputeRc+0x2b0>)
 800d30c:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800d310:	2b00      	cmp	r3, #0
 800d312:	d01b      	beq.n	800d34c <taskComputeRc+0x2cc>
                    mwDisarm();
 800d314:	f7ff fb92 	bl	800ca3c <mwDisarm>
 800d318:	e01d      	b.n	800d356 <taskComputeRc+0x2d6>
 800d31a:	bf00      	nop
 800d31c:	20001a2c 	.word	0x20001a2c
 800d320:	20001a18 	.word	0x20001a18
 800d324:	200019be 	.word	0x200019be
 800d328:	20001128 	.word	0x20001128
 800d32c:	20001988 	.word	0x20001988
 800d330:	20000bbc 	.word	0x20000bbc
 800d334:	200019c4 	.word	0x200019c4
 800d338:	200019c0 	.word	0x200019c0
 800d33c:	20001ca4 	.word	0x20001ca4
 800d340:	20001ca5 	.word	0x20001ca5
 800d344:	20001b98 	.word	0x20001b98
 800d348:	20001ba4 	.word	0x20001ba4
                } else if (isThrottleLow) {
 800d34c:	7afb      	ldrb	r3, [r7, #11]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d001      	beq.n	800d356 <taskComputeRc+0x2d6>
                    mwDisarm();
 800d352:	f7ff fb73 	bl	800ca3c <mwDisarm>
                }
            }
        }

        if (rcDelayCommand == 20) {
 800d356:	4b82      	ldr	r3, [pc, #520]	; (800d560 <taskComputeRc+0x4e0>)
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	2b14      	cmp	r3, #20
 800d35c:	f040 8131 	bne.w	800d5c2 <taskComputeRc+0x542>
            if (f.ARMED) {      // actions during armed
 800d360:	4b80      	ldr	r3, [pc, #512]	; (800d564 <taskComputeRc+0x4e4>)
 800d362:	785b      	ldrb	r3, [r3, #1]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d01c      	beq.n	800d3a2 <taskComputeRc+0x322>
                // Disarm on throttle down + yaw
                if (cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_CE))
 800d368:	4b7f      	ldr	r3, [pc, #508]	; (800d568 <taskComputeRc+0x4e8>)
 800d36a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d105      	bne.n	800d37c <taskComputeRc+0x2fc>
 800d370:	4b7e      	ldr	r3, [pc, #504]	; (800d56c <taskComputeRc+0x4ec>)
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	2b5f      	cmp	r3, #95	; 0x5f
 800d376:	d101      	bne.n	800d37c <taskComputeRc+0x2fc>
                    mwDisarm();
 800d378:	f7ff fb60 	bl	800ca3c <mwDisarm>
                // Disarm on roll (only when retarded_arm is enabled)
                if (mcfg.retarded_arm && cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_LO))
 800d37c:	4b7c      	ldr	r3, [pc, #496]	; (800d570 <taskComputeRc+0x4f0>)
 800d37e:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 800d382:	2b00      	cmp	r3, #0
 800d384:	f000 811d 	beq.w	800d5c2 <taskComputeRc+0x542>
 800d388:	4b77      	ldr	r3, [pc, #476]	; (800d568 <taskComputeRc+0x4e8>)
 800d38a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	f040 8118 	bne.w	800d5c2 <taskComputeRc+0x542>
 800d392:	4b76      	ldr	r3, [pc, #472]	; (800d56c <taskComputeRc+0x4ec>)
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	2b7d      	cmp	r3, #125	; 0x7d
 800d398:	f040 8113 	bne.w	800d5c2 <taskComputeRc+0x542>
                    mwDisarm();
 800d39c:	f7ff fb4e 	bl	800ca3c <mwDisarm>
 800d3a0:	e10f      	b.n	800d5c2 <taskComputeRc+0x542>
            } else {            // actions during not armed
                i = 0;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	613b      	str	r3, [r7, #16]
                // GYRO calibration
                if (rcSticks == THR_LO + YAW_LO + PIT_LO + ROL_CE) {
 800d3a6:	4b71      	ldr	r3, [pc, #452]	; (800d56c <taskComputeRc+0x4ec>)
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	2b57      	cmp	r3, #87	; 0x57
 800d3ac:	d122      	bne.n	800d3f4 <taskComputeRc+0x374>
                    calibratingG = CALIBRATING_GYRO_CYCLES;
 800d3ae:	4b71      	ldr	r3, [pc, #452]	; (800d574 <taskComputeRc+0x4f4>)
 800d3b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d3b4:	801a      	strh	r2, [r3, #0]
#ifdef GPS
                    if (feature(FEATURE_GPS))
 800d3b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d3ba:	f7f9 fe15 	bl	8006fe8 <feature>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d001      	beq.n	800d3c8 <taskComputeRc+0x348>
                        GPS_reset_home_position();
 800d3c4:	f7fb fc0c 	bl	8008be0 <GPS_reset_home_position>
#endif
                    if (sensors(SENSOR_BARO))
 800d3c8:	2004      	movs	r0, #4
 800d3ca:	f7f9 fdc5 	bl	8006f58 <sensors>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d002      	beq.n	800d3da <taskComputeRc+0x35a>
                        calibratingB = 10; // calibrate baro to new ground level (10 * 25 ms = ~250 ms non blocking)
 800d3d4:	4b68      	ldr	r3, [pc, #416]	; (800d578 <taskComputeRc+0x4f8>)
 800d3d6:	220a      	movs	r2, #10
 800d3d8:	801a      	strh	r2, [r3, #0]
                    if (!sensors(SENSOR_MAG))
 800d3da:	2008      	movs	r0, #8
 800d3dc:	f7f9 fdbc 	bl	8006f58 <sensors>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	f083 0301 	eor.w	r3, r3, #1
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d032      	beq.n	800d452 <taskComputeRc+0x3d2>
                        heading = 0; // reset heading to zero after gyro calibration
 800d3ec:	4b63      	ldr	r3, [pc, #396]	; (800d57c <taskComputeRc+0x4fc>)
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	801a      	strh	r2, [r3, #0]
 800d3f2:	e02e      	b.n	800d452 <taskComputeRc+0x3d2>
                    // Inflight ACC Calibration
                } else if (feature(FEATURE_INFLIGHT_ACC_CAL) && (rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_HI)) {
 800d3f4:	2004      	movs	r0, #4
 800d3f6:	f7f9 fdf7 	bl	8006fe8 <feature>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d028      	beq.n	800d452 <taskComputeRc+0x3d2>
 800d400:	4b5a      	ldr	r3, [pc, #360]	; (800d56c <taskComputeRc+0x4ec>)
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	2b5a      	cmp	r3, #90	; 0x5a
 800d406:	d124      	bne.n	800d452 <taskComputeRc+0x3d2>
                    if (AccInflightCalibrationMeasurementDone) {        // trigger saving into eeprom after landing
 800d408:	4b5d      	ldr	r3, [pc, #372]	; (800d580 <taskComputeRc+0x500>)
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d006      	beq.n	800d41e <taskComputeRc+0x39e>
                        AccInflightCalibrationMeasurementDone = false;
 800d410:	4b5b      	ldr	r3, [pc, #364]	; (800d580 <taskComputeRc+0x500>)
 800d412:	2200      	movs	r2, #0
 800d414:	701a      	strb	r2, [r3, #0]
                        AccInflightCalibrationSavetoEEProm = true;
 800d416:	4b5b      	ldr	r3, [pc, #364]	; (800d584 <taskComputeRc+0x504>)
 800d418:	2201      	movs	r2, #1
 800d41a:	701a      	strb	r2, [r3, #0]
 800d41c:	e019      	b.n	800d452 <taskComputeRc+0x3d2>
                    } else {
                        AccInflightCalibrationArmed = !AccInflightCalibrationArmed;
 800d41e:	4b5a      	ldr	r3, [pc, #360]	; (800d588 <taskComputeRc+0x508>)
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	bf14      	ite	ne
 800d426:	2301      	movne	r3, #1
 800d428:	2300      	moveq	r3, #0
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	f083 0301 	eor.w	r3, r3, #1
 800d430:	b2db      	uxtb	r3, r3
 800d432:	f003 0301 	and.w	r3, r3, #1
 800d436:	b2da      	uxtb	r2, r3
 800d438:	4b53      	ldr	r3, [pc, #332]	; (800d588 <taskComputeRc+0x508>)
 800d43a:	701a      	strb	r2, [r3, #0]
                        if (AccInflightCalibrationArmed) {
 800d43c:	4b52      	ldr	r3, [pc, #328]	; (800d588 <taskComputeRc+0x508>)
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d003      	beq.n	800d44c <taskComputeRc+0x3cc>
                            buzzer(BUZZER_ACC_CALIBRATION);
 800d444:	200a      	movs	r0, #10
 800d446:	f7f6 fddf 	bl	8004008 <buzzer>
 800d44a:	e002      	b.n	800d452 <taskComputeRc+0x3d2>
                        } else {
                            buzzer(BUZZER_ACC_CALIBRATION_FAIL);
 800d44c:	200b      	movs	r0, #11
 800d44e:	f7f6 fddb 	bl	8004008 <buzzer>
                        }
                    }
                }

                // Multiple configuration profiles
                if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_LO)          // ROLL left  -> Profile 1
 800d452:	4b46      	ldr	r3, [pc, #280]	; (800d56c <taskComputeRc+0x4ec>)
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	2b5d      	cmp	r3, #93	; 0x5d
 800d458:	d102      	bne.n	800d460 <taskComputeRc+0x3e0>
                    i = 1;
 800d45a:	2301      	movs	r3, #1
 800d45c:	613b      	str	r3, [r7, #16]
 800d45e:	e00c      	b.n	800d47a <taskComputeRc+0x3fa>
                else if (rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_CE)     // PITCH up   -> Profile 2
 800d460:	4b42      	ldr	r3, [pc, #264]	; (800d56c <taskComputeRc+0x4ec>)
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	2b5b      	cmp	r3, #91	; 0x5b
 800d466:	d102      	bne.n	800d46e <taskComputeRc+0x3ee>
                    i = 2;
 800d468:	2302      	movs	r3, #2
 800d46a:	613b      	str	r3, [r7, #16]
 800d46c:	e005      	b.n	800d47a <taskComputeRc+0x3fa>
                else if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_HI)     // ROLL right -> Profile 3
 800d46e:	4b3f      	ldr	r3, [pc, #252]	; (800d56c <taskComputeRc+0x4ec>)
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	2b5e      	cmp	r3, #94	; 0x5e
 800d474:	d101      	bne.n	800d47a <taskComputeRc+0x3fa>
                    i = 3;
 800d476:	2303      	movs	r3, #3
 800d478:	613b      	str	r3, [r7, #16]
                if (i) {
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d011      	beq.n	800d4a4 <taskComputeRc+0x424>
                    mcfg.current_profile = i - 1;
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	b2db      	uxtb	r3, r3
 800d484:	3b01      	subs	r3, #1
 800d486:	b2da      	uxtb	r2, r3
 800d488:	4b39      	ldr	r3, [pc, #228]	; (800d570 <taskComputeRc+0x4f0>)
 800d48a:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
                    writeEEPROM(0, false);
 800d48e:	2100      	movs	r1, #0
 800d490:	2000      	movs	r0, #0
 800d492:	f7f9 f9c7 	bl	8006824 <writeEEPROM>
                    blinkLED(2, 40, i);
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	b2db      	uxtb	r3, r3
 800d49a:	461a      	mov	r2, r3
 800d49c:	2128      	movs	r1, #40	; 0x28
 800d49e:	2002      	movs	r0, #2
 800d4a0:	f7fe fda0 	bl	800bfe4 <blinkLED>
                    // TODO alarmArray[0] = i;
                }

                // Arm via YAW
                if (cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_HI + PIT_CE + ROL_CE))
 800d4a4:	4b30      	ldr	r3, [pc, #192]	; (800d568 <taskComputeRc+0x4e8>)
 800d4a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d106      	bne.n	800d4ba <taskComputeRc+0x43a>
 800d4ac:	4b2f      	ldr	r3, [pc, #188]	; (800d56c <taskComputeRc+0x4ec>)
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	2b6f      	cmp	r3, #111	; 0x6f
 800d4b2:	d102      	bne.n	800d4ba <taskComputeRc+0x43a>
                    mwArm();
 800d4b4:	f7ff fa7e 	bl	800c9b4 <mwArm>
 800d4b8:	e01f      	b.n	800d4fa <taskComputeRc+0x47a>
                // Arm via ROLL
                else if (mcfg.retarded_arm && cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_HI))
 800d4ba:	4b2d      	ldr	r3, [pc, #180]	; (800d570 <taskComputeRc+0x4f0>)
 800d4bc:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d00a      	beq.n	800d4da <taskComputeRc+0x45a>
 800d4c4:	4b28      	ldr	r3, [pc, #160]	; (800d568 <taskComputeRc+0x4e8>)
 800d4c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d106      	bne.n	800d4da <taskComputeRc+0x45a>
 800d4cc:	4b27      	ldr	r3, [pc, #156]	; (800d56c <taskComputeRc+0x4ec>)
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	2b7e      	cmp	r3, #126	; 0x7e
 800d4d2:	d102      	bne.n	800d4da <taskComputeRc+0x45a>
                    mwArm();
 800d4d4:	f7ff fa6e 	bl	800c9b4 <mwArm>
 800d4d8:	e00f      	b.n	800d4fa <taskComputeRc+0x47a>
                // Calibrating Acc
                else if (rcSticks == THR_HI + YAW_LO + PIT_LO + ROL_CE)
 800d4da:	4b24      	ldr	r3, [pc, #144]	; (800d56c <taskComputeRc+0x4ec>)
 800d4dc:	781b      	ldrb	r3, [r3, #0]
 800d4de:	2b97      	cmp	r3, #151	; 0x97
 800d4e0:	d104      	bne.n	800d4ec <taskComputeRc+0x46c>
                    calibratingA = CALIBRATING_ACC_CYCLES;
 800d4e2:	4b2a      	ldr	r3, [pc, #168]	; (800d58c <taskComputeRc+0x50c>)
 800d4e4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d4e8:	801a      	strh	r2, [r3, #0]
 800d4ea:	e006      	b.n	800d4fa <taskComputeRc+0x47a>
                // Calibrating Mag
                else if (rcSticks == THR_HI + YAW_HI + PIT_LO + ROL_CE)
 800d4ec:	4b1f      	ldr	r3, [pc, #124]	; (800d56c <taskComputeRc+0x4ec>)
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	2ba7      	cmp	r3, #167	; 0xa7
 800d4f2:	d102      	bne.n	800d4fa <taskComputeRc+0x47a>
                    f.CALIBRATE_MAG = 1;
 800d4f4:	4b1b      	ldr	r3, [pc, #108]	; (800d564 <taskComputeRc+0x4e4>)
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	739a      	strb	r2, [r3, #14]
                i = 0;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	613b      	str	r3, [r7, #16]
                // Acc Trim
                if (rcSticks == THR_HI + YAW_CE + PIT_HI + ROL_CE) {
 800d4fe:	4b1b      	ldr	r3, [pc, #108]	; (800d56c <taskComputeRc+0x4ec>)
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	2bbb      	cmp	r3, #187	; 0xbb
 800d504:	d10b      	bne.n	800d51e <taskComputeRc+0x49e>
                    cfg.angleTrim[PITCH] += 2;
 800d506:	4b18      	ldr	r3, [pc, #96]	; (800d568 <taskComputeRc+0x4e8>)
 800d508:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	3302      	adds	r3, #2
 800d510:	b29b      	uxth	r3, r3
 800d512:	b21a      	sxth	r2, r3
 800d514:	4b14      	ldr	r3, [pc, #80]	; (800d568 <taskComputeRc+0x4e8>)
 800d516:	85da      	strh	r2, [r3, #46]	; 0x2e
                    i = 1;
 800d518:	2301      	movs	r3, #1
 800d51a:	613b      	str	r3, [r7, #16]
 800d51c:	e047      	b.n	800d5ae <taskComputeRc+0x52e>
                } else if (rcSticks == THR_HI + YAW_CE + PIT_LO + ROL_CE) {
 800d51e:	4b13      	ldr	r3, [pc, #76]	; (800d56c <taskComputeRc+0x4ec>)
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	2bb7      	cmp	r3, #183	; 0xb7
 800d524:	d10b      	bne.n	800d53e <taskComputeRc+0x4be>
                    cfg.angleTrim[PITCH] -= 2;
 800d526:	4b10      	ldr	r3, [pc, #64]	; (800d568 <taskComputeRc+0x4e8>)
 800d528:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	3b02      	subs	r3, #2
 800d530:	b29b      	uxth	r3, r3
 800d532:	b21a      	sxth	r2, r3
 800d534:	4b0c      	ldr	r3, [pc, #48]	; (800d568 <taskComputeRc+0x4e8>)
 800d536:	85da      	strh	r2, [r3, #46]	; 0x2e
                    i = 1;
 800d538:	2301      	movs	r3, #1
 800d53a:	613b      	str	r3, [r7, #16]
 800d53c:	e037      	b.n	800d5ae <taskComputeRc+0x52e>
                } else if (rcSticks == THR_HI + YAW_CE + PIT_CE + ROL_HI) {
 800d53e:	4b0b      	ldr	r3, [pc, #44]	; (800d56c <taskComputeRc+0x4ec>)
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	2bbe      	cmp	r3, #190	; 0xbe
 800d544:	d124      	bne.n	800d590 <taskComputeRc+0x510>
                    cfg.angleTrim[ROLL] += 2;
 800d546:	4b08      	ldr	r3, [pc, #32]	; (800d568 <taskComputeRc+0x4e8>)
 800d548:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	3302      	adds	r3, #2
 800d550:	b29b      	uxth	r3, r3
 800d552:	b21a      	sxth	r2, r3
 800d554:	4b04      	ldr	r3, [pc, #16]	; (800d568 <taskComputeRc+0x4e8>)
 800d556:	859a      	strh	r2, [r3, #44]	; 0x2c
                    i = 1;
 800d558:	2301      	movs	r3, #1
 800d55a:	613b      	str	r3, [r7, #16]
 800d55c:	e027      	b.n	800d5ae <taskComputeRc+0x52e>
 800d55e:	bf00      	nop
 800d560:	20001ca5 	.word	0x20001ca5
 800d564:	20001988 	.word	0x20001988
 800d568:	20001128 	.word	0x20001128
 800d56c:	20001ca4 	.word	0x20001ca4
 800d570:	20000bbc 	.word	0x20000bbc
 800d574:	20001cb2 	.word	0x20001cb2
 800d578:	20001cb0 	.word	0x20001cb0
 800d57c:	20001cb4 	.word	0x20001cb4
 800d580:	20001b29 	.word	0x20001b29
 800d584:	20001b2a 	.word	0x20001b2a
 800d588:	20001b28 	.word	0x20001b28
 800d58c:	20001cae 	.word	0x20001cae
                } else if (rcSticks == THR_HI + YAW_CE + PIT_CE + ROL_LO) {
 800d590:	4b9e      	ldr	r3, [pc, #632]	; (800d80c <taskComputeRc+0x78c>)
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	2bbd      	cmp	r3, #189	; 0xbd
 800d596:	d10a      	bne.n	800d5ae <taskComputeRc+0x52e>
                    cfg.angleTrim[ROLL] -= 2;
 800d598:	4b9d      	ldr	r3, [pc, #628]	; (800d810 <taskComputeRc+0x790>)
 800d59a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	3b02      	subs	r3, #2
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	b21a      	sxth	r2, r3
 800d5a6:	4b9a      	ldr	r3, [pc, #616]	; (800d810 <taskComputeRc+0x790>)
 800d5a8:	859a      	strh	r2, [r3, #44]	; 0x2c
                    i = 1;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	613b      	str	r3, [r7, #16]
                }
                if (i) {
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d006      	beq.n	800d5c2 <taskComputeRc+0x542>
                    writeEEPROM(1, true);
 800d5b4:	2101      	movs	r1, #1
 800d5b6:	2001      	movs	r0, #1
 800d5b8:	f7f9 f934 	bl	8006824 <writeEEPROM>
                    rcDelayCommand = 0; // allow autorepetition
 800d5bc:	4b95      	ldr	r3, [pc, #596]	; (800d814 <taskComputeRc+0x794>)
 800d5be:	2200      	movs	r2, #0
 800d5c0:	701a      	strb	r2, [r3, #0]
                }
            }
        }

        if (feature(FEATURE_INFLIGHT_ACC_CAL)) {
 800d5c2:	2004      	movs	r0, #4
 800d5c4:	f7f9 fd10 	bl	8006fe8 <feature>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d041      	beq.n	800d652 <taskComputeRc+0x5d2>
            if (AccInflightCalibrationArmed && f.ARMED && rcData[THROTTLE] > mcfg.mincheck && !rcOptions[BOXARM]) {   // Copter is airborne and you are turning it off via boxarm : start measurement
 800d5ce:	4b92      	ldr	r3, [pc, #584]	; (800d818 <taskComputeRc+0x798>)
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d016      	beq.n	800d604 <taskComputeRc+0x584>
 800d5d6:	4b91      	ldr	r3, [pc, #580]	; (800d81c <taskComputeRc+0x79c>)
 800d5d8:	785b      	ldrb	r3, [r3, #1]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d012      	beq.n	800d604 <taskComputeRc+0x584>
 800d5de:	4b90      	ldr	r3, [pc, #576]	; (800d820 <taskComputeRc+0x7a0>)
 800d5e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	4b8f      	ldr	r3, [pc, #572]	; (800d824 <taskComputeRc+0x7a4>)
 800d5e8:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	dd09      	ble.n	800d604 <taskComputeRc+0x584>
 800d5f0:	4b8d      	ldr	r3, [pc, #564]	; (800d828 <taskComputeRc+0x7a8>)
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d105      	bne.n	800d604 <taskComputeRc+0x584>
                InflightcalibratingA = 50;
 800d5f8:	4b8c      	ldr	r3, [pc, #560]	; (800d82c <taskComputeRc+0x7ac>)
 800d5fa:	2232      	movs	r2, #50	; 0x32
 800d5fc:	801a      	strh	r2, [r3, #0]
                AccInflightCalibrationArmed = false;
 800d5fe:	4b86      	ldr	r3, [pc, #536]	; (800d818 <taskComputeRc+0x798>)
 800d600:	2200      	movs	r2, #0
 800d602:	701a      	strb	r2, [r3, #0]
            }
            if (rcOptions[BOXCALIB]) {      // Use the Calib Option to activate : Calib = TRUE Meausrement started, Land and Calib = 0 measurement stored
 800d604:	4b88      	ldr	r3, [pc, #544]	; (800d828 <taskComputeRc+0x7a8>)
 800d606:	7c5b      	ldrb	r3, [r3, #17]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d014      	beq.n	800d636 <taskComputeRc+0x5b6>
                if (!AccInflightCalibrationActive && !AccInflightCalibrationMeasurementDone)
 800d60c:	4b88      	ldr	r3, [pc, #544]	; (800d830 <taskComputeRc+0x7b0>)
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	f083 0301 	eor.w	r3, r3, #1
 800d614:	b2db      	uxtb	r3, r3
 800d616:	2b00      	cmp	r3, #0
 800d618:	d009      	beq.n	800d62e <taskComputeRc+0x5ae>
 800d61a:	4b86      	ldr	r3, [pc, #536]	; (800d834 <taskComputeRc+0x7b4>)
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	f083 0301 	eor.w	r3, r3, #1
 800d622:	b2db      	uxtb	r3, r3
 800d624:	2b00      	cmp	r3, #0
 800d626:	d002      	beq.n	800d62e <taskComputeRc+0x5ae>
                    InflightcalibratingA = 50;
 800d628:	4b80      	ldr	r3, [pc, #512]	; (800d82c <taskComputeRc+0x7ac>)
 800d62a:	2232      	movs	r2, #50	; 0x32
 800d62c:	801a      	strh	r2, [r3, #0]
                AccInflightCalibrationActive = true;
 800d62e:	4b80      	ldr	r3, [pc, #512]	; (800d830 <taskComputeRc+0x7b0>)
 800d630:	2201      	movs	r2, #1
 800d632:	701a      	strb	r2, [r3, #0]
 800d634:	e00d      	b.n	800d652 <taskComputeRc+0x5d2>
            } else if (AccInflightCalibrationMeasurementDone && !f.ARMED) {
 800d636:	4b7f      	ldr	r3, [pc, #508]	; (800d834 <taskComputeRc+0x7b4>)
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d009      	beq.n	800d652 <taskComputeRc+0x5d2>
 800d63e:	4b77      	ldr	r3, [pc, #476]	; (800d81c <taskComputeRc+0x79c>)
 800d640:	785b      	ldrb	r3, [r3, #1]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d105      	bne.n	800d652 <taskComputeRc+0x5d2>
                AccInflightCalibrationMeasurementDone = false;
 800d646:	4b7b      	ldr	r3, [pc, #492]	; (800d834 <taskComputeRc+0x7b4>)
 800d648:	2200      	movs	r2, #0
 800d64a:	701a      	strb	r2, [r3, #0]
                AccInflightCalibrationSavetoEEProm = true;
 800d64c:	4b7a      	ldr	r3, [pc, #488]	; (800d838 <taskComputeRc+0x7b8>)
 800d64e:	2201      	movs	r2, #1
 800d650:	701a      	strb	r2, [r3, #0]
            }
        }

        // Check AUX switches

        for (i = 0; i < core.numAuxChannels; i++)
 800d652:	2300      	movs	r3, #0
 800d654:	613b      	str	r3, [r7, #16]
 800d656:	e04a      	b.n	800d6ee <taskComputeRc+0x66e>
            auxState |= (rcData[AUX1 + i] < 1300) << (3 * i) | (1300 < rcData[AUX1 + i] && rcData[AUX1 + i] < 1700) << (3 * i + 1) | (rcData[AUX1 + i] > 1700) << (3 * i + 2);
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	3304      	adds	r3, #4
 800d65c:	4a70      	ldr	r2, [pc, #448]	; (800d820 <taskComputeRc+0x7a0>)
 800d65e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d662:	f240 5213 	movw	r2, #1299	; 0x513
 800d666:	4293      	cmp	r3, r2
 800d668:	bfd4      	ite	le
 800d66a:	2301      	movle	r3, #1
 800d66c:	2300      	movgt	r3, #0
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	4619      	mov	r1, r3
 800d672:	693a      	ldr	r2, [r7, #16]
 800d674:	4613      	mov	r3, r2
 800d676:	005b      	lsls	r3, r3, #1
 800d678:	4413      	add	r3, r2
 800d67a:	4099      	lsls	r1, r3
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	3304      	adds	r3, #4
 800d680:	4a67      	ldr	r2, [pc, #412]	; (800d820 <taskComputeRc+0x7a0>)
 800d682:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d686:	f240 5214 	movw	r2, #1300	; 0x514
 800d68a:	4293      	cmp	r3, r2
 800d68c:	dd0a      	ble.n	800d6a4 <taskComputeRc+0x624>
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	3304      	adds	r3, #4
 800d692:	4a63      	ldr	r2, [pc, #396]	; (800d820 <taskComputeRc+0x7a0>)
 800d694:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d698:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800d69c:	4293      	cmp	r3, r2
 800d69e:	dc01      	bgt.n	800d6a4 <taskComputeRc+0x624>
 800d6a0:	2001      	movs	r0, #1
 800d6a2:	e000      	b.n	800d6a6 <taskComputeRc+0x626>
 800d6a4:	2000      	movs	r0, #0
 800d6a6:	693a      	ldr	r2, [r7, #16]
 800d6a8:	4613      	mov	r3, r2
 800d6aa:	005b      	lsls	r3, r3, #1
 800d6ac:	4413      	add	r3, r2
 800d6ae:	3301      	adds	r3, #1
 800d6b0:	fa00 f303 	lsl.w	r3, r0, r3
 800d6b4:	4319      	orrs	r1, r3
 800d6b6:	693b      	ldr	r3, [r7, #16]
 800d6b8:	3304      	adds	r3, #4
 800d6ba:	4a59      	ldr	r2, [pc, #356]	; (800d820 <taskComputeRc+0x7a0>)
 800d6bc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d6c0:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	bfcc      	ite	gt
 800d6c8:	2301      	movgt	r3, #1
 800d6ca:	2300      	movle	r3, #0
 800d6cc:	b2db      	uxtb	r3, r3
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	693a      	ldr	r2, [r7, #16]
 800d6d2:	4613      	mov	r3, r2
 800d6d4:	005b      	lsls	r3, r3, #1
 800d6d6:	4413      	add	r3, r2
 800d6d8:	3302      	adds	r3, #2
 800d6da:	fa00 f303 	lsl.w	r3, r0, r3
 800d6de:	430b      	orrs	r3, r1
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < core.numAuxChannels; i++)
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	613b      	str	r3, [r7, #16]
 800d6ee:	4b53      	ldr	r3, [pc, #332]	; (800d83c <taskComputeRc+0x7bc>)
 800d6f0:	7d1b      	ldrb	r3, [r3, #20]
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	dbae      	blt.n	800d658 <taskComputeRc+0x5d8>
        for (i = 0; i < CHECKBOXITEMS; i++)
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	613b      	str	r3, [r7, #16]
 800d6fe:	e015      	b.n	800d72c <taskComputeRc+0x6ac>
            rcOptions[i] = (auxState & cfg.activate[i]) > 0;
 800d700:	4a43      	ldr	r2, [pc, #268]	; (800d810 <taskComputeRc+0x790>)
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	3312      	adds	r3, #18
 800d706:	009b      	lsls	r3, r3, #2
 800d708:	4413      	add	r3, r2
 800d70a:	685a      	ldr	r2, [r3, #4]
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	4013      	ands	r3, r2
 800d710:	2b00      	cmp	r3, #0
 800d712:	bf14      	ite	ne
 800d714:	2301      	movne	r3, #1
 800d716:	2300      	moveq	r3, #0
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	4619      	mov	r1, r3
 800d71c:	4a42      	ldr	r2, [pc, #264]	; (800d828 <taskComputeRc+0x7a8>)
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	4413      	add	r3, r2
 800d722:	460a      	mov	r2, r1
 800d724:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < CHECKBOXITEMS; i++)
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	3301      	adds	r3, #1
 800d72a:	613b      	str	r3, [r7, #16]
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	2b18      	cmp	r3, #24
 800d730:	dde6      	ble.n	800d700 <taskComputeRc+0x680>
        f.CRUISE_MODE = rcOptions[BOXGCRUISE];
 800d732:	4b3d      	ldr	r3, [pc, #244]	; (800d828 <taskComputeRc+0x7a8>)
 800d734:	7e1a      	ldrb	r2, [r3, #24]
 800d736:	4b39      	ldr	r3, [pc, #228]	; (800d81c <taskComputeRc+0x79c>)
 800d738:	751a      	strb	r2, [r3, #20]
        if (f.CRUISE_MODE) {
 800d73a:	4b38      	ldr	r3, [pc, #224]	; (800d81c <taskComputeRc+0x79c>)
 800d73c:	7d1b      	ldrb	r3, [r3, #20]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d005      	beq.n	800d74e <taskComputeRc+0x6ce>
            rcOptions[BOXGPSHOLD] = true;
 800d742:	4b39      	ldr	r3, [pc, #228]	; (800d828 <taskComputeRc+0x7a8>)
 800d744:	2201      	movs	r2, #1
 800d746:	72da      	strb	r2, [r3, #11]
            rcOptions[BOXHORIZON] = true;
 800d748:	4b37      	ldr	r3, [pc, #220]	; (800d828 <taskComputeRc+0x7a8>)
 800d74a:	2201      	movs	r2, #1
 800d74c:	709a      	strb	r2, [r3, #2]
        }

        // note: if FAILSAFE is disable, failsafeCnt > 5 * FAILSAVE_DELAY is always false
        if ((rcOptions[BOXANGLE] || (failsafeCnt > 5 * cfg.failsafe_delay)) && (sensors(SENSOR_ACC))) {
 800d74e:	4b36      	ldr	r3, [pc, #216]	; (800d828 <taskComputeRc+0x7a8>)
 800d750:	785b      	ldrb	r3, [r3, #1]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d10c      	bne.n	800d770 <taskComputeRc+0x6f0>
 800d756:	4b3a      	ldr	r3, [pc, #232]	; (800d840 <taskComputeRc+0x7c0>)
 800d758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d75c:	4619      	mov	r1, r3
 800d75e:	4b2c      	ldr	r3, [pc, #176]	; (800d810 <taskComputeRc+0x790>)
 800d760:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d764:	461a      	mov	r2, r3
 800d766:	4613      	mov	r3, r2
 800d768:	009b      	lsls	r3, r3, #2
 800d76a:	4413      	add	r3, r2
 800d76c:	4299      	cmp	r1, r3
 800d76e:	dd30      	ble.n	800d7d2 <taskComputeRc+0x752>
 800d770:	2002      	movs	r0, #2
 800d772:	f7f9 fbf1 	bl	8006f58 <sensors>
 800d776:	4603      	mov	r3, r0
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d02a      	beq.n	800d7d2 <taskComputeRc+0x752>
            // bumpless transfer to Level mode
            if (!f.ANGLE_MODE) {
 800d77c:	4b27      	ldr	r3, [pc, #156]	; (800d81c <taskComputeRc+0x79c>)
 800d77e:	78db      	ldrb	r3, [r3, #3]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d108      	bne.n	800d796 <taskComputeRc+0x716>
                errorAngleI[ROLL] = 0;
 800d784:	4b2f      	ldr	r3, [pc, #188]	; (800d844 <taskComputeRc+0x7c4>)
 800d786:	2200      	movs	r2, #0
 800d788:	601a      	str	r2, [r3, #0]
                errorAngleI[PITCH] = 0;
 800d78a:	4b2e      	ldr	r3, [pc, #184]	; (800d844 <taskComputeRc+0x7c4>)
 800d78c:	2200      	movs	r2, #0
 800d78e:	605a      	str	r2, [r3, #4]
                f.ANGLE_MODE = 1;
 800d790:	4b22      	ldr	r3, [pc, #136]	; (800d81c <taskComputeRc+0x79c>)
 800d792:	2201      	movs	r2, #1
 800d794:	70da      	strb	r2, [r3, #3]
            }
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d796:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d79a:	f7f9 fc25 	bl	8006fe8 <feature>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d01d      	beq.n	800d7e0 <taskComputeRc+0x760>
                if ((failsafeCnt > 5 * cfg.failsafe_delay) && sensors(SENSOR_GPS)) {
 800d7a4:	4b26      	ldr	r3, [pc, #152]	; (800d840 <taskComputeRc+0x7c0>)
 800d7a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	4b18      	ldr	r3, [pc, #96]	; (800d810 <taskComputeRc+0x790>)
 800d7ae:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	4613      	mov	r3, r2
 800d7b6:	009b      	lsls	r3, r3, #2
 800d7b8:	4413      	add	r3, r2
 800d7ba:	4299      	cmp	r1, r3
 800d7bc:	dd10      	ble.n	800d7e0 <taskComputeRc+0x760>
 800d7be:	2020      	movs	r0, #32
 800d7c0:	f7f9 fbca 	bl	8006f58 <sensors>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d00a      	beq.n	800d7e0 <taskComputeRc+0x760>
                    f.FW_FAILSAFE_RTH_ENABLE = 1;
 800d7ca:	4b14      	ldr	r3, [pc, #80]	; (800d81c <taskComputeRc+0x79c>)
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	749a      	strb	r2, [r3, #18]
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d7d0:	e006      	b.n	800d7e0 <taskComputeRc+0x760>
                }
            }
        } else {
            f.ANGLE_MODE = 0;   // failsafe support
 800d7d2:	4b12      	ldr	r3, [pc, #72]	; (800d81c <taskComputeRc+0x79c>)
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	70da      	strb	r2, [r3, #3]
            f.FW_FAILSAFE_RTH_ENABLE = 0;
 800d7d8:	4b10      	ldr	r3, [pc, #64]	; (800d81c <taskComputeRc+0x79c>)
 800d7da:	2200      	movs	r2, #0
 800d7dc:	749a      	strb	r2, [r3, #18]
 800d7de:	e000      	b.n	800d7e2 <taskComputeRc+0x762>
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d7e0:	bf00      	nop
        }

        if (rcOptions[BOXHORIZON]) {
 800d7e2:	4b11      	ldr	r3, [pc, #68]	; (800d828 <taskComputeRc+0x7a8>)
 800d7e4:	789b      	ldrb	r3, [r3, #2]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d02e      	beq.n	800d848 <taskComputeRc+0x7c8>
            f.ANGLE_MODE = 0;
 800d7ea:	4b0c      	ldr	r3, [pc, #48]	; (800d81c <taskComputeRc+0x79c>)
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	70da      	strb	r2, [r3, #3]
            if (!f.HORIZON_MODE) {
 800d7f0:	4b0a      	ldr	r3, [pc, #40]	; (800d81c <taskComputeRc+0x79c>)
 800d7f2:	791b      	ldrb	r3, [r3, #4]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d12a      	bne.n	800d84e <taskComputeRc+0x7ce>
                errorAngleI[ROLL] = 0;
 800d7f8:	4b12      	ldr	r3, [pc, #72]	; (800d844 <taskComputeRc+0x7c4>)
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	601a      	str	r2, [r3, #0]
                errorAngleI[PITCH] = 0;
 800d7fe:	4b11      	ldr	r3, [pc, #68]	; (800d844 <taskComputeRc+0x7c4>)
 800d800:	2200      	movs	r2, #0
 800d802:	605a      	str	r2, [r3, #4]
                f.HORIZON_MODE = 1;
 800d804:	4b05      	ldr	r3, [pc, #20]	; (800d81c <taskComputeRc+0x79c>)
 800d806:	2201      	movs	r2, #1
 800d808:	711a      	strb	r2, [r3, #4]
 800d80a:	e020      	b.n	800d84e <taskComputeRc+0x7ce>
 800d80c:	20001ca4 	.word	0x20001ca4
 800d810:	20001128 	.word	0x20001128
 800d814:	20001ca5 	.word	0x20001ca5
 800d818:	20001b28 	.word	0x20001b28
 800d81c:	20001988 	.word	0x20001988
 800d820:	200019c4 	.word	0x200019c4
 800d824:	20000bbc 	.word	0x20000bbc
 800d828:	20001a2c 	.word	0x20001a2c
 800d82c:	20001b2c 	.word	0x20001b2c
 800d830:	20001b2b 	.word	0x20001b2b
 800d834:	20001b29 	.word	0x20001b29
 800d838:	20001b2a 	.word	0x20001b2a
 800d83c:	20000afc 	.word	0x20000afc
 800d840:	200019be 	.word	0x200019be
 800d844:	20001ba4 	.word	0x20001ba4
            }
        } else {
            f.HORIZON_MODE = 0;
 800d848:	4b9c      	ldr	r3, [pc, #624]	; (800dabc <taskComputeRc+0xa3c>)
 800d84a:	2200      	movs	r2, #0
 800d84c:	711a      	strb	r2, [r3, #4]
        }

        if ((rcOptions[BOXARM]) == 0)
 800d84e:	4b9c      	ldr	r3, [pc, #624]	; (800dac0 <taskComputeRc+0xa40>)
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d102      	bne.n	800d85c <taskComputeRc+0x7dc>
            f.OK_TO_ARM = 1;
 800d856:	4b99      	ldr	r3, [pc, #612]	; (800dabc <taskComputeRc+0xa3c>)
 800d858:	2201      	movs	r2, #1
 800d85a:	701a      	strb	r2, [r3, #0]
        if (f.ANGLE_MODE || f.HORIZON_MODE) {
 800d85c:	4b97      	ldr	r3, [pc, #604]	; (800dabc <taskComputeRc+0xa3c>)
 800d85e:	78db      	ldrb	r3, [r3, #3]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d103      	bne.n	800d86c <taskComputeRc+0x7ec>
 800d864:	4b95      	ldr	r3, [pc, #596]	; (800dabc <taskComputeRc+0xa3c>)
 800d866:	791b      	ldrb	r3, [r3, #4]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d003      	beq.n	800d874 <taskComputeRc+0x7f4>
            actLed1State(ON);
 800d86c:	2001      	movs	r0, #1
 800d86e:	f7f4 fc01 	bl	8002074 <actLed1State>
 800d872:	e002      	b.n	800d87a <taskComputeRc+0x7fa>
        } else {
            actLed1State(OFF);
 800d874:	2000      	movs	r0, #0
 800d876:	f7f4 fbfd 	bl	8002074 <actLed1State>
        }

#ifdef BARO
        if (sensors(SENSOR_BARO)) {
 800d87a:	2004      	movs	r0, #4
 800d87c:	f7f9 fb6c 	bl	8006f58 <sensors>
 800d880:	4603      	mov	r3, r0
 800d882:	2b00      	cmp	r3, #0
 800d884:	d033      	beq.n	800d8ee <taskComputeRc+0x86e>
            // Baro alt hold activate
            if (rcOptions[BOXBARO]) {
 800d886:	4b8e      	ldr	r3, [pc, #568]	; (800dac0 <taskComputeRc+0xa40>)
 800d888:	78db      	ldrb	r3, [r3, #3]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d016      	beq.n	800d8bc <taskComputeRc+0x83c>
                if (!f.BARO_MODE) {
 800d88e:	4b8b      	ldr	r3, [pc, #556]	; (800dabc <taskComputeRc+0xa3c>)
 800d890:	799b      	ldrb	r3, [r3, #6]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d115      	bne.n	800d8c2 <taskComputeRc+0x842>
                    f.BARO_MODE = 1;
 800d896:	4b89      	ldr	r3, [pc, #548]	; (800dabc <taskComputeRc+0xa3c>)
 800d898:	2201      	movs	r2, #1
 800d89a:	719a      	strb	r2, [r3, #6]
                    AltHold = EstAlt;
 800d89c:	4b89      	ldr	r3, [pc, #548]	; (800dac4 <taskComputeRc+0xa44>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a89      	ldr	r2, [pc, #548]	; (800dac8 <taskComputeRc+0xa48>)
 800d8a2:	6013      	str	r3, [r2, #0]
                    initialThrottleHold = rcCommand[THROTTLE];
 800d8a4:	4b89      	ldr	r3, [pc, #548]	; (800dacc <taskComputeRc+0xa4c>)
 800d8a6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800d8aa:	4b89      	ldr	r3, [pc, #548]	; (800dad0 <taskComputeRc+0xa50>)
 800d8ac:	801a      	strh	r2, [r3, #0]
                    errorVelocityI = 0;
 800d8ae:	4b89      	ldr	r3, [pc, #548]	; (800dad4 <taskComputeRc+0xa54>)
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	601a      	str	r2, [r3, #0]
                    BaroPID = 0;
 800d8b4:	4b88      	ldr	r3, [pc, #544]	; (800dad8 <taskComputeRc+0xa58>)
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	601a      	str	r2, [r3, #0]
 800d8ba:	e002      	b.n	800d8c2 <taskComputeRc+0x842>
                }
            } else {
                f.BARO_MODE = 0;
 800d8bc:	4b7f      	ldr	r3, [pc, #508]	; (800dabc <taskComputeRc+0xa3c>)
 800d8be:	2200      	movs	r2, #0
 800d8c0:	719a      	strb	r2, [r3, #6]
            }
            // Vario signalling activate
            if (feature(FEATURE_VARIO)) {
 800d8c2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800d8c6:	f7f9 fb8f 	bl	8006fe8 <feature>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00e      	beq.n	800d8ee <taskComputeRc+0x86e>
                if (rcOptions[BOXVARIO]) {
 800d8d0:	4b7b      	ldr	r3, [pc, #492]	; (800dac0 <taskComputeRc+0xa40>)
 800d8d2:	791b      	ldrb	r3, [r3, #4]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d007      	beq.n	800d8e8 <taskComputeRc+0x868>
                    if (!f.VARIO_MODE) {
 800d8d8:	4b78      	ldr	r3, [pc, #480]	; (800dabc <taskComputeRc+0xa3c>)
 800d8da:	7bdb      	ldrb	r3, [r3, #15]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d106      	bne.n	800d8ee <taskComputeRc+0x86e>
                        f.VARIO_MODE = 1;
 800d8e0:	4b76      	ldr	r3, [pc, #472]	; (800dabc <taskComputeRc+0xa3c>)
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	73da      	strb	r2, [r3, #15]
 800d8e6:	e002      	b.n	800d8ee <taskComputeRc+0x86e>
                    }
                } else {
                    f.VARIO_MODE = 0;
 800d8e8:	4b74      	ldr	r3, [pc, #464]	; (800dabc <taskComputeRc+0xa3c>)
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	73da      	strb	r2, [r3, #15]
            }
        }
#endif

#ifdef  MAG
        if (sensors(SENSOR_ACC) || sensors(SENSOR_MAG)) {
 800d8ee:	2002      	movs	r0, #2
 800d8f0:	f7f9 fb32 	bl	8006f58 <sensors>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d105      	bne.n	800d906 <taskComputeRc+0x886>
 800d8fa:	2008      	movs	r0, #8
 800d8fc:	f7f9 fb2c 	bl	8006f58 <sensors>
 800d900:	4603      	mov	r3, r0
 800d902:	2b00      	cmp	r3, #0
 800d904:	d02b      	beq.n	800d95e <taskComputeRc+0x8de>
            if (rcOptions[BOXMAG]) {
 800d906:	4b6e      	ldr	r3, [pc, #440]	; (800dac0 <taskComputeRc+0xa40>)
 800d908:	795b      	ldrb	r3, [r3, #5]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d00c      	beq.n	800d928 <taskComputeRc+0x8a8>
                if (!f.MAG_MODE) {
 800d90e:	4b6b      	ldr	r3, [pc, #428]	; (800dabc <taskComputeRc+0xa3c>)
 800d910:	795b      	ldrb	r3, [r3, #5]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d10b      	bne.n	800d92e <taskComputeRc+0x8ae>
                    f.MAG_MODE = 1;
 800d916:	4b69      	ldr	r3, [pc, #420]	; (800dabc <taskComputeRc+0xa3c>)
 800d918:	2201      	movs	r2, #1
 800d91a:	715a      	strb	r2, [r3, #5]
                    magHold = heading;
 800d91c:	4b6f      	ldr	r3, [pc, #444]	; (800dadc <taskComputeRc+0xa5c>)
 800d91e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d922:	4b6f      	ldr	r3, [pc, #444]	; (800dae0 <taskComputeRc+0xa60>)
 800d924:	801a      	strh	r2, [r3, #0]
 800d926:	e002      	b.n	800d92e <taskComputeRc+0x8ae>
                }
            } else {
                f.MAG_MODE = 0;
 800d928:	4b64      	ldr	r3, [pc, #400]	; (800dabc <taskComputeRc+0xa3c>)
 800d92a:	2200      	movs	r2, #0
 800d92c:	715a      	strb	r2, [r3, #5]
            }
            if (rcOptions[BOXHEADFREE]) {
 800d92e:	4b64      	ldr	r3, [pc, #400]	; (800dac0 <taskComputeRc+0xa40>)
 800d930:	799b      	ldrb	r3, [r3, #6]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d007      	beq.n	800d946 <taskComputeRc+0x8c6>
                if (!f.HEADFREE_MODE) {
 800d936:	4b61      	ldr	r3, [pc, #388]	; (800dabc <taskComputeRc+0xa3c>)
 800d938:	7a5b      	ldrb	r3, [r3, #9]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d106      	bne.n	800d94c <taskComputeRc+0x8cc>
                    f.HEADFREE_MODE = 1;
 800d93e:	4b5f      	ldr	r3, [pc, #380]	; (800dabc <taskComputeRc+0xa3c>)
 800d940:	2201      	movs	r2, #1
 800d942:	725a      	strb	r2, [r3, #9]
 800d944:	e002      	b.n	800d94c <taskComputeRc+0x8cc>
                }
            } else {
                f.HEADFREE_MODE = 0;
 800d946:	4b5d      	ldr	r3, [pc, #372]	; (800dabc <taskComputeRc+0xa3c>)
 800d948:	2200      	movs	r2, #0
 800d94a:	725a      	strb	r2, [r3, #9]
            }
            if (rcOptions[BOXHEADADJ]) {
 800d94c:	4b5c      	ldr	r3, [pc, #368]	; (800dac0 <taskComputeRc+0xa40>)
 800d94e:	79db      	ldrb	r3, [r3, #7]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d004      	beq.n	800d95e <taskComputeRc+0x8de>
                headFreeModeHold = heading; // acquire new heading
 800d954:	4b61      	ldr	r3, [pc, #388]	; (800dadc <taskComputeRc+0xa5c>)
 800d956:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d95a:	4b62      	ldr	r3, [pc, #392]	; (800dae4 <taskComputeRc+0xa64>)
 800d95c:	801a      	strh	r2, [r3, #0]
            }
        }
#endif

#ifdef GPS
        if (sensors(SENSOR_GPS)) {
 800d95e:	2020      	movs	r0, #32
 800d960:	f7f9 fafa 	bl	8006f58 <sensors>
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	f000 809c 	beq.w	800daa4 <taskComputeRc+0xa24>
            if (f.GPS_FIX && GPS_numSat >= 5) {
 800d96c:	4b53      	ldr	r3, [pc, #332]	; (800dabc <taskComputeRc+0xa3c>)
 800d96e:	7adb      	ldrb	r3, [r3, #11]
 800d970:	2b00      	cmp	r3, #0
 800d972:	f000 808e 	beq.w	800da92 <taskComputeRc+0xa12>
 800d976:	4b5c      	ldr	r3, [pc, #368]	; (800dae8 <taskComputeRc+0xa68>)
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	2b04      	cmp	r3, #4
 800d97c:	f240 8089 	bls.w	800da92 <taskComputeRc+0xa12>
                if (nav_mode != NAV_MODE_NONE && (!f.HORIZON_MODE && !f.ANGLE_MODE))
 800d980:	4b5a      	ldr	r3, [pc, #360]	; (800daec <taskComputeRc+0xa6c>)
 800d982:	f993 3000 	ldrsb.w	r3, [r3]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00a      	beq.n	800d9a0 <taskComputeRc+0x920>
 800d98a:	4b4c      	ldr	r3, [pc, #304]	; (800dabc <taskComputeRc+0xa3c>)
 800d98c:	791b      	ldrb	r3, [r3, #4]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d106      	bne.n	800d9a0 <taskComputeRc+0x920>
 800d992:	4b4a      	ldr	r3, [pc, #296]	; (800dabc <taskComputeRc+0xa3c>)
 800d994:	78db      	ldrb	r3, [r3, #3]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d102      	bne.n	800d9a0 <taskComputeRc+0x920>
                    f.ANGLE_MODE = true; // Force a stable mode in GPS Mode
 800d99a:	4b48      	ldr	r3, [pc, #288]	; (800dabc <taskComputeRc+0xa3c>)
 800d99c:	2201      	movs	r2, #1
 800d99e:	70da      	strb	r2, [r3, #3]

                // if both GPS_HOME & GPS_HOLD are checked => GPS_HOME is the priority
                if (rcOptions[BOXGPSHOME] || f.FW_FAILSAFE_RTH_ENABLE ) {
 800d9a0:	4b47      	ldr	r3, [pc, #284]	; (800dac0 <taskComputeRc+0xa40>)
 800d9a2:	7a9b      	ldrb	r3, [r3, #10]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d103      	bne.n	800d9b0 <taskComputeRc+0x930>
 800d9a8:	4b44      	ldr	r3, [pc, #272]	; (800dabc <taskComputeRc+0xa3c>)
 800d9aa:	7c9b      	ldrb	r3, [r3, #18]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d01c      	beq.n	800d9ea <taskComputeRc+0x96a>
                    if (!f.GPS_HOME_MODE) {
 800d9b0:	4b42      	ldr	r3, [pc, #264]	; (800dabc <taskComputeRc+0xa3c>)
 800d9b2:	79db      	ldrb	r3, [r3, #7]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d168      	bne.n	800da8a <taskComputeRc+0xa0a>
                        f.GPS_HOME_MODE = 1;
 800d9b8:	4b40      	ldr	r3, [pc, #256]	; (800dabc <taskComputeRc+0xa3c>)
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	71da      	strb	r2, [r3, #7]
                        f.GPS_HOLD_MODE = 0;
 800d9be:	4b3f      	ldr	r3, [pc, #252]	; (800dabc <taskComputeRc+0xa3c>)
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	721a      	strb	r2, [r3, #8]
                        GPSNavReset = 0;
 800d9c4:	4b4a      	ldr	r3, [pc, #296]	; (800daf0 <taskComputeRc+0xa70>)
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	701a      	strb	r2, [r3, #0]
                        GPS_set_next_wp(&GPS_home[LAT], &GPS_home[LON]);
 800d9ca:	494a      	ldr	r1, [pc, #296]	; (800daf4 <taskComputeRc+0xa74>)
 800d9cc:	484a      	ldr	r0, [pc, #296]	; (800daf8 <taskComputeRc+0xa78>)
 800d9ce:	f7fb fad7 	bl	8008f80 <GPS_set_next_wp>
                        nav_mode = NAV_MODE_WP;
 800d9d2:	4b46      	ldr	r3, [pc, #280]	; (800daec <taskComputeRc+0xa6c>)
 800d9d4:	2202      	movs	r2, #2
 800d9d6:	701a      	strb	r2, [r3, #0]
                        GPS_hold[ALT] = GPS_altitude;
 800d9d8:	4b48      	ldr	r3, [pc, #288]	; (800dafc <taskComputeRc+0xa7c>)
 800d9da:	881b      	ldrh	r3, [r3, #0]
 800d9dc:	461a      	mov	r2, r3
 800d9de:	4b48      	ldr	r3, [pc, #288]	; (800db00 <taskComputeRc+0xa80>)
 800d9e0:	609a      	str	r2, [r3, #8]
                        f.CLIMBOUT_FW = 1;
 800d9e2:	4b36      	ldr	r3, [pc, #216]	; (800dabc <taskComputeRc+0xa3c>)
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	74da      	strb	r2, [r3, #19]
                    if (!f.GPS_HOME_MODE) {
 800d9e8:	e04f      	b.n	800da8a <taskComputeRc+0xa0a>
                    }
                } else {
                    f.GPS_HOME_MODE = 0;
 800d9ea:	4b34      	ldr	r3, [pc, #208]	; (800dabc <taskComputeRc+0xa3c>)
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	71da      	strb	r2, [r3, #7]
                    if (rcOptions[BOXGPSHOLD] && abs(rcCommand[ROLL]) < cfg.ap_mode && abs(rcCommand[PITCH]) < cfg.ap_mode) {
 800d9f0:	4b33      	ldr	r3, [pc, #204]	; (800dac0 <taskComputeRc+0xa40>)
 800d9f2:	7adb      	ldrb	r3, [r3, #11]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d039      	beq.n	800da6c <taskComputeRc+0x9ec>
 800d9f8:	4b34      	ldr	r3, [pc, #208]	; (800dacc <taskComputeRc+0xa4c>)
 800d9fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	bfb8      	it	lt
 800da02:	425b      	neglt	r3, r3
 800da04:	b29a      	uxth	r2, r3
 800da06:	4b3f      	ldr	r3, [pc, #252]	; (800db04 <taskComputeRc+0xa84>)
 800da08:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800da0c:	429a      	cmp	r2, r3
 800da0e:	d22d      	bcs.n	800da6c <taskComputeRc+0x9ec>
 800da10:	4b2e      	ldr	r3, [pc, #184]	; (800dacc <taskComputeRc+0xa4c>)
 800da12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800da16:	2b00      	cmp	r3, #0
 800da18:	bfb8      	it	lt
 800da1a:	425b      	neglt	r3, r3
 800da1c:	b29a      	uxth	r2, r3
 800da1e:	4b39      	ldr	r3, [pc, #228]	; (800db04 <taskComputeRc+0xa84>)
 800da20:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800da24:	429a      	cmp	r2, r3
 800da26:	d221      	bcs.n	800da6c <taskComputeRc+0x9ec>
                        if (!f.GPS_HOLD_MODE) {
 800da28:	4b24      	ldr	r3, [pc, #144]	; (800dabc <taskComputeRc+0xa3c>)
 800da2a:	7a1b      	ldrb	r3, [r3, #8]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d12c      	bne.n	800da8a <taskComputeRc+0xa0a>
                            f.GPS_HOLD_MODE = 1;
 800da30:	4b22      	ldr	r3, [pc, #136]	; (800dabc <taskComputeRc+0xa3c>)
 800da32:	2201      	movs	r2, #1
 800da34:	721a      	strb	r2, [r3, #8]
                            GPSNavReset = 0;
 800da36:	4b2e      	ldr	r3, [pc, #184]	; (800daf0 <taskComputeRc+0xa70>)
 800da38:	2200      	movs	r2, #0
 800da3a:	701a      	strb	r2, [r3, #0]
                            GPS_hold[LAT] = GPS_coord[LAT];
 800da3c:	4b32      	ldr	r3, [pc, #200]	; (800db08 <taskComputeRc+0xa88>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a2f      	ldr	r2, [pc, #188]	; (800db00 <taskComputeRc+0xa80>)
 800da42:	6013      	str	r3, [r2, #0]
                            GPS_hold[LON] = GPS_coord[LON];
 800da44:	4b30      	ldr	r3, [pc, #192]	; (800db08 <taskComputeRc+0xa88>)
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	4a2d      	ldr	r2, [pc, #180]	; (800db00 <taskComputeRc+0xa80>)
 800da4a:	6053      	str	r3, [r2, #4]
                            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
 800da4c:	492f      	ldr	r1, [pc, #188]	; (800db0c <taskComputeRc+0xa8c>)
 800da4e:	482c      	ldr	r0, [pc, #176]	; (800db00 <taskComputeRc+0xa80>)
 800da50:	f7fb fa96 	bl	8008f80 <GPS_set_next_wp>
                            nav_mode = NAV_MODE_POSHOLD;
 800da54:	4b25      	ldr	r3, [pc, #148]	; (800daec <taskComputeRc+0xa6c>)
 800da56:	2201      	movs	r2, #1
 800da58:	701a      	strb	r2, [r3, #0]
                            GPS_hold[ALT] = GPS_altitude;
 800da5a:	4b28      	ldr	r3, [pc, #160]	; (800dafc <taskComputeRc+0xa7c>)
 800da5c:	881b      	ldrh	r3, [r3, #0]
 800da5e:	461a      	mov	r2, r3
 800da60:	4b27      	ldr	r3, [pc, #156]	; (800db00 <taskComputeRc+0xa80>)
 800da62:	609a      	str	r2, [r3, #8]
                            f.CLIMBOUT_FW = 0;
 800da64:	4b15      	ldr	r3, [pc, #84]	; (800dabc <taskComputeRc+0xa3c>)
 800da66:	2200      	movs	r2, #0
 800da68:	74da      	strb	r2, [r3, #19]
                        if (!f.GPS_HOLD_MODE) {
 800da6a:	e00e      	b.n	800da8a <taskComputeRc+0xa0a>
                        }
                    } else {
                        f.GPS_HOLD_MODE = 0;
 800da6c:	4b13      	ldr	r3, [pc, #76]	; (800dabc <taskComputeRc+0xa3c>)
 800da6e:	2200      	movs	r2, #0
 800da70:	721a      	strb	r2, [r3, #8]
                        // both boxes are unselected here, nav is reset if not already done
                        if (GPSNavReset == 0) {
 800da72:	4b1f      	ldr	r3, [pc, #124]	; (800daf0 <taskComputeRc+0xa70>)
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d107      	bne.n	800da8a <taskComputeRc+0xa0a>
                            GPSNavReset = 1;
 800da7a:	4b1d      	ldr	r3, [pc, #116]	; (800daf0 <taskComputeRc+0xa70>)
 800da7c:	2201      	movs	r2, #1
 800da7e:	701a      	strb	r2, [r3, #0]
                            GPS_reset_nav();
 800da80:	f7fb f8e2 	bl	8008c48 <GPS_reset_nav>
                            f.CLIMBOUT_FW = 0;
 800da84:	4b0d      	ldr	r3, [pc, #52]	; (800dabc <taskComputeRc+0xa3c>)
 800da86:	2200      	movs	r2, #0
 800da88:	74da      	strb	r2, [r3, #19]
                        }
                    }
                }
                // Beep for indication that GPS has found satellites and naze32 is ready to fly
                buzzer(BUZZER_READY_BEEP);
 800da8a:	200c      	movs	r0, #12
 800da8c:	f7f6 fabc 	bl	8004008 <buzzer>
 800da90:	e008      	b.n	800daa4 <taskComputeRc+0xa24>
            } else {
                f.GPS_HOME_MODE = 0;
 800da92:	4b0a      	ldr	r3, [pc, #40]	; (800dabc <taskComputeRc+0xa3c>)
 800da94:	2200      	movs	r2, #0
 800da96:	71da      	strb	r2, [r3, #7]
                f.GPS_HOLD_MODE = 0;
 800da98:	4b08      	ldr	r3, [pc, #32]	; (800dabc <taskComputeRc+0xa3c>)
 800da9a:	2200      	movs	r2, #0
 800da9c:	721a      	strb	r2, [r3, #8]
                nav_mode = NAV_MODE_NONE;
 800da9e:	4b13      	ldr	r3, [pc, #76]	; (800daec <taskComputeRc+0xa6c>)
 800daa0:	2200      	movs	r2, #0
 800daa2:	701a      	strb	r2, [r3, #0]
            }
        }
#endif

        if (rcOptions[BOXPASSTHRU] && !f.FW_FAILSAFE_RTH_ENABLE) {
 800daa4:	4b06      	ldr	r3, [pc, #24]	; (800dac0 <taskComputeRc+0xa40>)
 800daa6:	7b1b      	ldrb	r3, [r3, #12]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d031      	beq.n	800db10 <taskComputeRc+0xa90>
 800daac:	4b03      	ldr	r3, [pc, #12]	; (800dabc <taskComputeRc+0xa3c>)
 800daae:	7c9b      	ldrb	r3, [r3, #18]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d12d      	bne.n	800db10 <taskComputeRc+0xa90>
            f.PASSTHRU_MODE = 1;
 800dab4:	4b01      	ldr	r3, [pc, #4]	; (800dabc <taskComputeRc+0xa3c>)
 800dab6:	2201      	movs	r2, #1
 800dab8:	729a      	strb	r2, [r3, #10]
 800daba:	e02c      	b.n	800db16 <taskComputeRc+0xa96>
 800dabc:	20001988 	.word	0x20001988
 800dac0:	20001a2c 	.word	0x20001a2c
 800dac4:	20001754 	.word	0x20001754
 800dac8:	2000175c 	.word	0x2000175c
 800dacc:	200019e8 	.word	0x200019e8
 800dad0:	20001bac 	.word	0x20001bac
 800dad4:	20001768 	.word	0x20001768
 800dad8:	20001758 	.word	0x20001758
 800dadc:	20001cb4 	.word	0x20001cb4
 800dae0:	20001cb6 	.word	0x20001cb6
 800dae4:	200019ae 	.word	0x200019ae
 800dae8:	20001a70 	.word	0x20001a70
 800daec:	20001a8c 	.word	0x20001a8c
 800daf0:	20000058 	.word	0x20000058
 800daf4:	20001a5c 	.word	0x20001a5c
 800daf8:	20001a58 	.word	0x20001a58
 800dafc:	20001a76 	.word	0x20001a76
 800db00:	20001a64 	.word	0x20001a64
 800db04:	20001128 	.word	0x20001128
 800db08:	20001a50 	.word	0x20001a50
 800db0c:	20001a68 	.word	0x20001a68
        } else {
            f.PASSTHRU_MODE = 0;
 800db10:	4b47      	ldr	r3, [pc, #284]	; (800dc30 <taskComputeRc+0xbb0>)
 800db12:	2200      	movs	r2, #0
 800db14:	729a      	strb	r2, [r3, #10]
        }

        if (f.FIXED_WING) {
 800db16:	4b46      	ldr	r3, [pc, #280]	; (800dc30 <taskComputeRc+0xbb0>)
 800db18:	7c1b      	ldrb	r3, [r3, #16]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d047      	beq.n	800dbae <taskComputeRc+0xb2e>
            f.HEADFREE_MODE = 0;
 800db1e:	4b44      	ldr	r3, [pc, #272]	; (800dc30 <taskComputeRc+0xbb0>)
 800db20:	2200      	movs	r2, #0
 800db22:	725a      	strb	r2, [r3, #9]
            if (feature(FEATURE_FAILSAFE) && failsafeCnt > (6 * cfg.failsafe_delay)) {
 800db24:	f44f 7000 	mov.w	r0, #512	; 0x200
 800db28:	f7f9 fa5e 	bl	8006fe8 <feature>
 800db2c:	4603      	mov	r3, r0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d03d      	beq.n	800dbae <taskComputeRc+0xb2e>
 800db32:	4b40      	ldr	r3, [pc, #256]	; (800dc34 <taskComputeRc+0xbb4>)
 800db34:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db38:	4619      	mov	r1, r3
 800db3a:	4b3f      	ldr	r3, [pc, #252]	; (800dc38 <taskComputeRc+0xbb8>)
 800db3c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800db40:	461a      	mov	r2, r3
 800db42:	4613      	mov	r3, r2
 800db44:	005b      	lsls	r3, r3, #1
 800db46:	4413      	add	r3, r2
 800db48:	005b      	lsls	r3, r3, #1
 800db4a:	4299      	cmp	r1, r3
 800db4c:	dd2f      	ble.n	800dbae <taskComputeRc+0xb2e>
                f.PASSTHRU_MODE = 0;
 800db4e:	4b38      	ldr	r3, [pc, #224]	; (800dc30 <taskComputeRc+0xbb0>)
 800db50:	2200      	movs	r2, #0
 800db52:	729a      	strb	r2, [r3, #10]
                f.ANGLE_MODE = 1;
 800db54:	4b36      	ldr	r3, [pc, #216]	; (800dc30 <taskComputeRc+0xbb0>)
 800db56:	2201      	movs	r2, #1
 800db58:	70da      	strb	r2, [r3, #3]
                for (i = 0; i < 3; i++)
 800db5a:	2300      	movs	r3, #0
 800db5c:	613b      	str	r3, [r7, #16]
 800db5e:	e00a      	b.n	800db76 <taskComputeRc+0xaf6>
                    rcData[i] = mcfg.midrc;
 800db60:	4b36      	ldr	r3, [pc, #216]	; (800dc3c <taskComputeRc+0xbbc>)
 800db62:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800db66:	b219      	sxth	r1, r3
 800db68:	4a35      	ldr	r2, [pc, #212]	; (800dc40 <taskComputeRc+0xbc0>)
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (i = 0; i < 3; i++)
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	3301      	adds	r3, #1
 800db74:	613b      	str	r3, [r7, #16]
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	2b02      	cmp	r3, #2
 800db7a:	ddf1      	ble.n	800db60 <taskComputeRc+0xae0>
                rcData[THROTTLE] = cfg.failsafe_throttle;
 800db7c:	4b2e      	ldr	r3, [pc, #184]	; (800dc38 <taskComputeRc+0xbb8>)
 800db7e:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800db82:	b21a      	sxth	r2, r3
 800db84:	4b2e      	ldr	r3, [pc, #184]	; (800dc40 <taskComputeRc+0xbc0>)
 800db86:	80da      	strh	r2, [r3, #6]
                // No GPS?  Force a soft left turn.
                if (!f.GPS_FIX && GPS_numSat <= 5) {
 800db88:	4b29      	ldr	r3, [pc, #164]	; (800dc30 <taskComputeRc+0xbb0>)
 800db8a:	7adb      	ldrb	r3, [r3, #11]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d10e      	bne.n	800dbae <taskComputeRc+0xb2e>
 800db90:	4b2c      	ldr	r3, [pc, #176]	; (800dc44 <taskComputeRc+0xbc4>)
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	2b05      	cmp	r3, #5
 800db96:	d80a      	bhi.n	800dbae <taskComputeRc+0xb2e>
                    f.FW_FAILSAFE_RTH_ENABLE = 0;
 800db98:	4b25      	ldr	r3, [pc, #148]	; (800dc30 <taskComputeRc+0xbb0>)
 800db9a:	2200      	movs	r2, #0
 800db9c:	749a      	strb	r2, [r3, #18]
                    rcData[ROLL] = mcfg.midrc - 50;
 800db9e:	4b27      	ldr	r3, [pc, #156]	; (800dc3c <taskComputeRc+0xbbc>)
 800dba0:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800dba4:	3b32      	subs	r3, #50	; 0x32
 800dba6:	b29b      	uxth	r3, r3
 800dba8:	b21a      	sxth	r2, r3
 800dbaa:	4b25      	ldr	r3, [pc, #148]	; (800dc40 <taskComputeRc+0xbc0>)
 800dbac:	801a      	strh	r2, [r3, #0]
                }
            }
        }
        // When armed and motors aren't spinning. Make warning beeps so that accidentally won't lose fingers...
        // Also disarm board after 5 sec so users without buzzer won't lose fingers.
        if (feature(FEATURE_MOTOR_STOP) && f.ARMED && !f.FIXED_WING) {
 800dbae:	2010      	movs	r0, #16
 800dbb0:	f7f9 fa1a 	bl	8006fe8 <feature>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d035      	beq.n	800dc26 <taskComputeRc+0xba6>
 800dbba:	4b1d      	ldr	r3, [pc, #116]	; (800dc30 <taskComputeRc+0xbb0>)
 800dbbc:	785b      	ldrb	r3, [r3, #1]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d031      	beq.n	800dc26 <taskComputeRc+0xba6>
 800dbc2:	4b1b      	ldr	r3, [pc, #108]	; (800dc30 <taskComputeRc+0xbb0>)
 800dbc4:	7c1b      	ldrb	r3, [r3, #16]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d12d      	bne.n	800dc26 <taskComputeRc+0xba6>
            if (isThrottleLow) {
 800dbca:	7afb      	ldrb	r3, [r7, #11]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d023      	beq.n	800dc18 <taskComputeRc+0xb98>
                if (disarmTime == 0)
 800dbd0:	4b1d      	ldr	r3, [pc, #116]	; (800dc48 <taskComputeRc+0xbc8>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d10e      	bne.n	800dbf6 <taskComputeRc+0xb76>
                    disarmTime = pif_cumulative_timer1ms + 1000 * mcfg.auto_disarm_board;
 800dbd8:	4b18      	ldr	r3, [pc, #96]	; (800dc3c <taskComputeRc+0xbbc>)
 800dbda:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
 800dbde:	461a      	mov	r2, r3
 800dbe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dbe4:	fb02 f303 	mul.w	r3, r2, r3
 800dbe8:	461a      	mov	r2, r3
 800dbea:	4b18      	ldr	r3, [pc, #96]	; (800dc4c <taskComputeRc+0xbcc>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	4413      	add	r3, r2
 800dbf0:	4a15      	ldr	r2, [pc, #84]	; (800dc48 <taskComputeRc+0xbc8>)
 800dbf2:	6013      	str	r3, [r2, #0]
 800dbf4:	e00c      	b.n	800dc10 <taskComputeRc+0xb90>
                else if (disarmTime < pif_cumulative_timer1ms && mcfg.auto_disarm_board != 0)
 800dbf6:	4b14      	ldr	r3, [pc, #80]	; (800dc48 <taskComputeRc+0xbc8>)
 800dbf8:	681a      	ldr	r2, [r3, #0]
 800dbfa:	4b14      	ldr	r3, [pc, #80]	; (800dc4c <taskComputeRc+0xbcc>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d206      	bcs.n	800dc10 <taskComputeRc+0xb90>
 800dc02:	4b0e      	ldr	r3, [pc, #56]	; (800dc3c <taskComputeRc+0xbbc>)
 800dc04:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d001      	beq.n	800dc10 <taskComputeRc+0xb90>
                    mwDisarm();
 800dc0c:	f7fe ff16 	bl	800ca3c <mwDisarm>
                buzzer(BUZZER_ARMED);
 800dc10:	2009      	movs	r0, #9
 800dc12:	f7f6 f9f9 	bl	8004008 <buzzer>
 800dc16:	e006      	b.n	800dc26 <taskComputeRc+0xba6>
            } else if (disarmTime != 0)
 800dc18:	4b0b      	ldr	r3, [pc, #44]	; (800dc48 <taskComputeRc+0xbc8>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d002      	beq.n	800dc26 <taskComputeRc+0xba6>
                disarmTime = 0;
 800dc20:	4b09      	ldr	r3, [pc, #36]	; (800dc48 <taskComputeRc+0xbc8>)
 800dc22:	2200      	movs	r2, #0
 800dc24:	601a      	str	r2, [r3, #0]
        }
    return 0;
 800dc26:	2300      	movs	r3, #0
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3718      	adds	r7, #24
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	20001988 	.word	0x20001988
 800dc34:	200019be 	.word	0x200019be
 800dc38:	20001128 	.word	0x20001128
 800dc3c:	20000bbc 	.word	0x20000bbc
 800dc40:	200019c4 	.word	0x200019c4
 800dc44:	20001a70 	.word	0x20001a70
 800dc48:	20001b94 	.word	0x20001b94
 800dc4c:	200020e0 	.word	0x200020e0

0800dc50 <taskLoop>:

uint16_t taskLoop(PifTask *p_task)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
	static int taskOrder = 0;   // never call all function in the same loop, to avoid high delay spikes

	(void)p_task;

	switch (taskOrder) {
 800dc58:	4b15      	ldr	r3, [pc, #84]	; (800dcb0 <taskLoop+0x60>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d002      	beq.n	800dc66 <taskLoop+0x16>
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d00f      	beq.n	800dc84 <taskLoop+0x34>
 800dc64:	e01f      	b.n	800dca6 <taskLoop+0x56>
		case 0:
			// if GPS feature is enabled, gpsThread() will be called at some intervals to check for stuck
			// hardware, wrong baud rates, init GPS if needed, etc. Don't use SENSOR_GPS here as gpsThread() can and will
			// change this based on available hardware
			taskOrder++;
 800dc66:	4b12      	ldr	r3, [pc, #72]	; (800dcb0 <taskLoop+0x60>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	4a10      	ldr	r2, [pc, #64]	; (800dcb0 <taskLoop+0x60>)
 800dc6e:	6013      	str	r3, [r2, #0]
#ifdef GPS
			if (feature(FEATURE_GPS)) {
 800dc70:	f44f 7080 	mov.w	r0, #256	; 0x100
 800dc74:	f7f9 f9b8 	bl	8006fe8 <feature>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d002      	beq.n	800dc84 <taskLoop+0x34>
				gpsThread();
 800dc7e:	f7fa fb43 	bl	8008308 <gpsThread>
				break;
 800dc82:	e010      	b.n	800dca6 <taskLoop+0x56>
			}
#endif
		case 1:
			taskOrder = 0;
 800dc84:	4b0a      	ldr	r3, [pc, #40]	; (800dcb0 <taskLoop+0x60>)
 800dc86:	2200      	movs	r2, #0
 800dc88:	601a      	str	r2, [r3, #0]
			if (feature(FEATURE_VARIO) && f.VARIO_MODE)
 800dc8a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800dc8e:	f7f9 f9ab 	bl	8006fe8 <feature>
 800dc92:	4603      	mov	r3, r0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d005      	beq.n	800dca4 <taskLoop+0x54>
 800dc98:	4b06      	ldr	r3, [pc, #24]	; (800dcb4 <taskLoop+0x64>)
 800dc9a:	7bdb      	ldrb	r3, [r3, #15]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d001      	beq.n	800dca4 <taskLoop+0x54>
				mwVario();
 800dca0:	f7fe fee6 	bl	800ca70 <mwVario>
			break;
 800dca4:	bf00      	nop
	}
    return 0;
 800dca6:	2300      	movs	r3, #0
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3708      	adds	r7, #8
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}
 800dcb0:	20001ca8 	.word	0x20001ca8
 800dcb4:	20001988 	.word	0x20001988

0800dcb8 <taskComputeImu>:

uint16_t taskComputeImu(PifTask *p_task)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b086      	sub	sp, #24
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
	uint32_t current;
	static uint8_t step = 0;

    (void)p_task;

    step = computeIMU(step);
 800dcc0:	4b99      	ldr	r3, [pc, #612]	; (800df28 <taskComputeImu+0x270>)
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7fb fe33 	bl	8009930 <computeIMU>
 800dcca:	4603      	mov	r3, r0
 800dccc:	b2da      	uxtb	r2, r3
 800dcce:	4b96      	ldr	r3, [pc, #600]	; (800df28 <taskComputeImu+0x270>)
 800dcd0:	701a      	strb	r2, [r3, #0]
    if (step < 4) {
 800dcd2:	4b95      	ldr	r3, [pc, #596]	; (800df28 <taskComputeImu+0x270>)
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	2b03      	cmp	r3, #3
 800dcd8:	d803      	bhi.n	800dce2 <taskComputeImu+0x2a>
		p_task->immediate = TRUE;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2201      	movs	r2, #1
 800dcde:	705a      	strb	r2, [r3, #1]
 800dce0:	e29d      	b.n	800e21e <taskComputeImu+0x566>
    }
    else {
        // Measure loop rate just afer reading the sensors
        current = (*pif_act_timer1us)();
 800dce2:	4b92      	ldr	r3, [pc, #584]	; (800df2c <taskComputeImu+0x274>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4798      	blx	r3
 800dce8:	6138      	str	r0, [r7, #16]
        cycleTime = (int32_t)(current - previousTime);
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	b29a      	uxth	r2, r3
 800dcee:	4b90      	ldr	r3, [pc, #576]	; (800df30 <taskComputeImu+0x278>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	1ad3      	subs	r3, r2, r3
 800dcf6:	b29a      	uxth	r2, r3
 800dcf8:	4b8e      	ldr	r3, [pc, #568]	; (800df34 <taskComputeImu+0x27c>)
 800dcfa:	801a      	strh	r2, [r3, #0]
        previousTime = current;
 800dcfc:	4a8c      	ldr	r2, [pc, #560]	; (800df30 <taskComputeImu+0x278>)
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	6013      	str	r3, [r2, #0]
        // non IMU critical, temeperatur
        annexCode();
 800dd02:	f7fe f9a5 	bl	800c050 <annexCode>
#ifdef MAG
        if (sensors(SENSOR_MAG)) {
 800dd06:	2008      	movs	r0, #8
 800dd08:	f7f9 f926 	bl	8006f58 <sensors>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d057      	beq.n	800ddc2 <taskComputeImu+0x10a>
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800dd12:	4b89      	ldr	r3, [pc, #548]	; (800df38 <taskComputeImu+0x280>)
 800dd14:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	bfb8      	it	lt
 800dd1c:	425b      	neglt	r3, r3
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	2b45      	cmp	r3, #69	; 0x45
 800dd22:	d847      	bhi.n	800ddb4 <taskComputeImu+0xfc>
 800dd24:	4b85      	ldr	r3, [pc, #532]	; (800df3c <taskComputeImu+0x284>)
 800dd26:	795b      	ldrb	r3, [r3, #5]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d043      	beq.n	800ddb4 <taskComputeImu+0xfc>
                int16_t dif = heading - magHold;
 800dd2c:	4b84      	ldr	r3, [pc, #528]	; (800df40 <taskComputeImu+0x288>)
 800dd2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd32:	b29a      	uxth	r2, r3
 800dd34:	4b83      	ldr	r3, [pc, #524]	; (800df44 <taskComputeImu+0x28c>)
 800dd36:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd3a:	b29b      	uxth	r3, r3
 800dd3c:	1ad3      	subs	r3, r2, r3
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	82fb      	strh	r3, [r7, #22]
                if (dif <= -180)
 800dd42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd46:	f113 0fb3 	cmn.w	r3, #179	; 0xb3
 800dd4a:	da04      	bge.n	800dd56 <taskComputeImu+0x9e>
                    dif += 360;
 800dd4c:	8afb      	ldrh	r3, [r7, #22]
 800dd4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800dd52:	b29b      	uxth	r3, r3
 800dd54:	82fb      	strh	r3, [r7, #22]
                if (dif >= +180)
 800dd56:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd5a:	2bb3      	cmp	r3, #179	; 0xb3
 800dd5c:	dd04      	ble.n	800dd68 <taskComputeImu+0xb0>
                    dif -= 360;
 800dd5e:	8afb      	ldrh	r3, [r7, #22]
 800dd60:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	82fb      	strh	r3, [r7, #22]
                dif *= -mcfg.yaw_control_direction;
 800dd68:	4b77      	ldr	r3, [pc, #476]	; (800df48 <taskComputeImu+0x290>)
 800dd6a:	f993 315c 	ldrsb.w	r3, [r3, #348]	; 0x15c
 800dd6e:	425b      	negs	r3, r3
 800dd70:	b29a      	uxth	r2, r3
 800dd72:	8afb      	ldrh	r3, [r7, #22]
 800dd74:	fb12 f303 	smulbb	r3, r2, r3
 800dd78:	b29b      	uxth	r3, r3
 800dd7a:	82fb      	strh	r3, [r7, #22]
                if (f.SMALL_ANGLE)
 800dd7c:	4b6f      	ldr	r3, [pc, #444]	; (800df3c <taskComputeImu+0x284>)
 800dd7e:	7b5b      	ldrb	r3, [r3, #13]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d01d      	beq.n	800ddc0 <taskComputeImu+0x108>
                    rcCommand[YAW] -= dif * cfg.P8[PIDMAG] / 30;    // 18 deg
 800dd84:	4b6c      	ldr	r3, [pc, #432]	; (800df38 <taskComputeImu+0x280>)
 800dd86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dd8a:	b29a      	uxth	r2, r3
 800dd8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd90:	496e      	ldr	r1, [pc, #440]	; (800df4c <taskComputeImu+0x294>)
 800dd92:	7a49      	ldrb	r1, [r1, #9]
 800dd94:	fb01 f303 	mul.w	r3, r1, r3
 800dd98:	496d      	ldr	r1, [pc, #436]	; (800df50 <taskComputeImu+0x298>)
 800dd9a:	fb81 0103 	smull	r0, r1, r1, r3
 800dd9e:	4419      	add	r1, r3
 800dda0:	1109      	asrs	r1, r1, #4
 800dda2:	17db      	asrs	r3, r3, #31
 800dda4:	1a5b      	subs	r3, r3, r1
 800dda6:	b29b      	uxth	r3, r3
 800dda8:	4413      	add	r3, r2
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	b21a      	sxth	r2, r3
 800ddae:	4b62      	ldr	r3, [pc, #392]	; (800df38 <taskComputeImu+0x280>)
 800ddb0:	809a      	strh	r2, [r3, #4]
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800ddb2:	e005      	b.n	800ddc0 <taskComputeImu+0x108>
            } else
                magHold = heading;
 800ddb4:	4b62      	ldr	r3, [pc, #392]	; (800df40 <taskComputeImu+0x288>)
 800ddb6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ddba:	4b62      	ldr	r3, [pc, #392]	; (800df44 <taskComputeImu+0x28c>)
 800ddbc:	801a      	strh	r2, [r3, #0]
 800ddbe:	e000      	b.n	800ddc2 <taskComputeImu+0x10a>
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800ddc0:	bf00      	nop
        }
#endif

#ifdef BARO
        if (sensors(SENSOR_BARO)) {
 800ddc2:	2004      	movs	r0, #4
 800ddc4:	f7f9 f8c8 	bl	8006f58 <sensors>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	f000 80e5 	beq.w	800df9a <taskComputeImu+0x2e2>
            if (f.BARO_MODE) {
 800ddd0:	4b5a      	ldr	r3, [pc, #360]	; (800df3c <taskComputeImu+0x284>)
 800ddd2:	799b      	ldrb	r3, [r3, #6]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	f000 80e0 	beq.w	800df9a <taskComputeImu+0x2e2>
                static uint8_t isAltHoldChanged = 0;
                if (!f.FIXED_WING) {
 800ddda:	4b58      	ldr	r3, [pc, #352]	; (800df3c <taskComputeImu+0x284>)
 800dddc:	7c1b      	ldrb	r3, [r3, #16]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	f040 80c8 	bne.w	800df74 <taskComputeImu+0x2bc>
                    // multirotor alt hold
                    if (cfg.alt_hold_fast_change) {
 800dde4:	4b59      	ldr	r3, [pc, #356]	; (800df4c <taskComputeImu+0x294>)
 800dde6:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d053      	beq.n	800de96 <taskComputeImu+0x1de>
                        // rapid alt changes
                        if (abs(rcCommand[THROTTLE] - initialThrottleHold) > cfg.alt_hold_throttle_neutral) {
 800ddee:	4b52      	ldr	r3, [pc, #328]	; (800df38 <taskComputeImu+0x280>)
 800ddf0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	4b57      	ldr	r3, [pc, #348]	; (800df54 <taskComputeImu+0x29c>)
 800ddf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ddfc:	1ad3      	subs	r3, r2, r3
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	bfb8      	it	lt
 800de02:	425b      	neglt	r3, r3
 800de04:	4a51      	ldr	r2, [pc, #324]	; (800df4c <taskComputeImu+0x294>)
 800de06:	f892 20b2 	ldrb.w	r2, [r2, #178]	; 0xb2
 800de0a:	4293      	cmp	r3, r2
 800de0c:	dd22      	ble.n	800de54 <taskComputeImu+0x19c>
                            errorVelocityI = 0;
 800de0e:	4b52      	ldr	r3, [pc, #328]	; (800df58 <taskComputeImu+0x2a0>)
 800de10:	2200      	movs	r2, #0
 800de12:	601a      	str	r2, [r3, #0]
                            isAltHoldChanged = 1;
 800de14:	4b51      	ldr	r3, [pc, #324]	; (800df5c <taskComputeImu+0x2a4>)
 800de16:	2201      	movs	r2, #1
 800de18:	701a      	strb	r2, [r3, #0]
                            rcCommand[THROTTLE] += (rcCommand[THROTTLE] > initialThrottleHold) ? -cfg.alt_hold_throttle_neutral : cfg.alt_hold_throttle_neutral;
 800de1a:	4b47      	ldr	r3, [pc, #284]	; (800df38 <taskComputeImu+0x280>)
 800de1c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800de20:	b29a      	uxth	r2, r3
 800de22:	4b45      	ldr	r3, [pc, #276]	; (800df38 <taskComputeImu+0x280>)
 800de24:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800de28:	4b4a      	ldr	r3, [pc, #296]	; (800df54 <taskComputeImu+0x29c>)
 800de2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de2e:	4299      	cmp	r1, r3
 800de30:	dd06      	ble.n	800de40 <taskComputeImu+0x188>
 800de32:	4b46      	ldr	r3, [pc, #280]	; (800df4c <taskComputeImu+0x294>)
 800de34:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800de38:	b29b      	uxth	r3, r3
 800de3a:	425b      	negs	r3, r3
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	e003      	b.n	800de48 <taskComputeImu+0x190>
 800de40:	4b42      	ldr	r3, [pc, #264]	; (800df4c <taskComputeImu+0x294>)
 800de42:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800de46:	b29b      	uxth	r3, r3
 800de48:	4413      	add	r3, r2
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	b21a      	sxth	r2, r3
 800de4e:	4b3a      	ldr	r3, [pc, #232]	; (800df38 <taskComputeImu+0x280>)
 800de50:	80da      	strh	r2, [r3, #6]
 800de52:	e0a2      	b.n	800df9a <taskComputeImu+0x2e2>
                        } else {
                            if (isAltHoldChanged) {
 800de54:	4b41      	ldr	r3, [pc, #260]	; (800df5c <taskComputeImu+0x2a4>)
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d006      	beq.n	800de6a <taskComputeImu+0x1b2>
                                AltHold = EstAlt;
 800de5c:	4b40      	ldr	r3, [pc, #256]	; (800df60 <taskComputeImu+0x2a8>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4a40      	ldr	r2, [pc, #256]	; (800df64 <taskComputeImu+0x2ac>)
 800de62:	6013      	str	r3, [r2, #0]
                                isAltHoldChanged = 0;
 800de64:	4b3d      	ldr	r3, [pc, #244]	; (800df5c <taskComputeImu+0x2a4>)
 800de66:	2200      	movs	r2, #0
 800de68:	701a      	strb	r2, [r3, #0]
                            }
                            rcCommand[THROTTLE] = constrain(initialThrottleHold + BaroPID, mcfg.minthrottle, mcfg.maxthrottle);
 800de6a:	4b3a      	ldr	r3, [pc, #232]	; (800df54 <taskComputeImu+0x29c>)
 800de6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de70:	461a      	mov	r2, r3
 800de72:	4b3d      	ldr	r3, [pc, #244]	; (800df68 <taskComputeImu+0x2b0>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4413      	add	r3, r2
 800de78:	4a33      	ldr	r2, [pc, #204]	; (800df48 <taskComputeImu+0x290>)
 800de7a:	f8b2 2140 	ldrh.w	r2, [r2, #320]	; 0x140
 800de7e:	4611      	mov	r1, r2
 800de80:	4a31      	ldr	r2, [pc, #196]	; (800df48 <taskComputeImu+0x290>)
 800de82:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800de86:	4618      	mov	r0, r3
 800de88:	f7f5 ff30 	bl	8003cec <constrain>
 800de8c:	4603      	mov	r3, r0
 800de8e:	b21a      	sxth	r2, r3
 800de90:	4b29      	ldr	r3, [pc, #164]	; (800df38 <taskComputeImu+0x280>)
 800de92:	80da      	strh	r2, [r3, #6]
 800de94:	e081      	b.n	800df9a <taskComputeImu+0x2e2>
                        }
                    } else {
                        // slow alt changes for apfags
                        if (abs(rcCommand[THROTTLE] - initialThrottleHold) > cfg.alt_hold_throttle_neutral) {
 800de96:	4b28      	ldr	r3, [pc, #160]	; (800df38 <taskComputeImu+0x280>)
 800de98:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800de9c:	461a      	mov	r2, r3
 800de9e:	4b2d      	ldr	r3, [pc, #180]	; (800df54 <taskComputeImu+0x29c>)
 800dea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dea4:	1ad3      	subs	r3, r2, r3
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	bfb8      	it	lt
 800deaa:	425b      	neglt	r3, r3
 800deac:	4a27      	ldr	r2, [pc, #156]	; (800df4c <taskComputeImu+0x294>)
 800deae:	f892 20b2 	ldrb.w	r2, [r2, #178]	; 0xb2
 800deb2:	4293      	cmp	r3, r2
 800deb4:	dd14      	ble.n	800dee0 <taskComputeImu+0x228>
                            // set velocity proportional to stick movement +100 throttle gives ~ +50 cm/s
                            setVelocity = (rcCommand[THROTTLE] - initialThrottleHold) / 2;
 800deb6:	4b20      	ldr	r3, [pc, #128]	; (800df38 <taskComputeImu+0x280>)
 800deb8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800debc:	461a      	mov	r2, r3
 800debe:	4b25      	ldr	r3, [pc, #148]	; (800df54 <taskComputeImu+0x29c>)
 800dec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dec4:	1ad3      	subs	r3, r2, r3
 800dec6:	0fda      	lsrs	r2, r3, #31
 800dec8:	4413      	add	r3, r2
 800deca:	105b      	asrs	r3, r3, #1
 800decc:	461a      	mov	r2, r3
 800dece:	4b27      	ldr	r3, [pc, #156]	; (800df6c <taskComputeImu+0x2b4>)
 800ded0:	601a      	str	r2, [r3, #0]
                            velocityControl = 1;
 800ded2:	4b27      	ldr	r3, [pc, #156]	; (800df70 <taskComputeImu+0x2b8>)
 800ded4:	2201      	movs	r2, #1
 800ded6:	701a      	strb	r2, [r3, #0]
                            isAltHoldChanged = 1;
 800ded8:	4b20      	ldr	r3, [pc, #128]	; (800df5c <taskComputeImu+0x2a4>)
 800deda:	2201      	movs	r2, #1
 800dedc:	701a      	strb	r2, [r3, #0]
 800dede:	e00d      	b.n	800defc <taskComputeImu+0x244>
                        } else if (isAltHoldChanged) {
 800dee0:	4b1e      	ldr	r3, [pc, #120]	; (800df5c <taskComputeImu+0x2a4>)
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d009      	beq.n	800defc <taskComputeImu+0x244>
                            AltHold = EstAlt;
 800dee8:	4b1d      	ldr	r3, [pc, #116]	; (800df60 <taskComputeImu+0x2a8>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	4a1d      	ldr	r2, [pc, #116]	; (800df64 <taskComputeImu+0x2ac>)
 800deee:	6013      	str	r3, [r2, #0]
                            velocityControl = 0;
 800def0:	4b1f      	ldr	r3, [pc, #124]	; (800df70 <taskComputeImu+0x2b8>)
 800def2:	2200      	movs	r2, #0
 800def4:	701a      	strb	r2, [r3, #0]
                            isAltHoldChanged = 0;
 800def6:	4b19      	ldr	r3, [pc, #100]	; (800df5c <taskComputeImu+0x2a4>)
 800def8:	2200      	movs	r2, #0
 800defa:	701a      	strb	r2, [r3, #0]
                        }
                        rcCommand[THROTTLE] = constrain(initialThrottleHold + BaroPID, mcfg.minthrottle, mcfg.maxthrottle);
 800defc:	4b15      	ldr	r3, [pc, #84]	; (800df54 <taskComputeImu+0x29c>)
 800defe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df02:	461a      	mov	r2, r3
 800df04:	4b18      	ldr	r3, [pc, #96]	; (800df68 <taskComputeImu+0x2b0>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	4413      	add	r3, r2
 800df0a:	4a0f      	ldr	r2, [pc, #60]	; (800df48 <taskComputeImu+0x290>)
 800df0c:	f8b2 2140 	ldrh.w	r2, [r2, #320]	; 0x140
 800df10:	4611      	mov	r1, r2
 800df12:	4a0d      	ldr	r2, [pc, #52]	; (800df48 <taskComputeImu+0x290>)
 800df14:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800df18:	4618      	mov	r0, r3
 800df1a:	f7f5 fee7 	bl	8003cec <constrain>
 800df1e:	4603      	mov	r3, r0
 800df20:	b21a      	sxth	r2, r3
 800df22:	4b05      	ldr	r3, [pc, #20]	; (800df38 <taskComputeImu+0x280>)
 800df24:	80da      	strh	r2, [r3, #6]
 800df26:	e038      	b.n	800df9a <taskComputeImu+0x2e2>
 800df28:	20001cac 	.word	0x20001cac
 800df2c:	200020f0 	.word	0x200020f0
 800df30:	200019a8 	.word	0x200019a8
 800df34:	200019ac 	.word	0x200019ac
 800df38:	200019e8 	.word	0x200019e8
 800df3c:	20001988 	.word	0x20001988
 800df40:	20001cb4 	.word	0x20001cb4
 800df44:	20001cb6 	.word	0x20001cb6
 800df48:	20000bbc 	.word	0x20000bbc
 800df4c:	20001128 	.word	0x20001128
 800df50:	88888889 	.word	0x88888889
 800df54:	20001bac 	.word	0x20001bac
 800df58:	20001768 	.word	0x20001768
 800df5c:	20001cad 	.word	0x20001cad
 800df60:	20001754 	.word	0x20001754
 800df64:	2000175c 	.word	0x2000175c
 800df68:	20001758 	.word	0x20001758
 800df6c:	20001760 	.word	0x20001760
 800df70:	20001764 	.word	0x20001764
                    }
                } else {
                    // handle fixedwing-related althold. UNTESTED! and probably wrong
                    // most likely need to check changes on pitch channel and 'reset' althold similar to
                    // how throttle does it on multirotor
                    rcCommand[PITCH] += BaroPID * mcfg.fw_althold_dir;
 800df74:	4bac      	ldr	r3, [pc, #688]	; (800e228 <taskComputeImu+0x570>)
 800df76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800df7a:	b29a      	uxth	r2, r3
 800df7c:	4bab      	ldr	r3, [pc, #684]	; (800e22c <taskComputeImu+0x574>)
 800df7e:	f993 31a0 	ldrsb.w	r3, [r3, #416]	; 0x1a0
 800df82:	b299      	uxth	r1, r3
 800df84:	4baa      	ldr	r3, [pc, #680]	; (800e230 <taskComputeImu+0x578>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	b29b      	uxth	r3, r3
 800df8a:	fb11 f303 	smulbb	r3, r1, r3
 800df8e:	b29b      	uxth	r3, r3
 800df90:	4413      	add	r3, r2
 800df92:	b29b      	uxth	r3, r3
 800df94:	b21a      	sxth	r2, r3
 800df96:	4ba4      	ldr	r3, [pc, #656]	; (800e228 <taskComputeImu+0x570>)
 800df98:	805a      	strh	r2, [r3, #2]
                }
            }
        }
#endif

        if (cfg.throttle_correction_value && (f.ANGLE_MODE || f.HORIZON_MODE)) {
 800df9a:	4ba6      	ldr	r3, [pc, #664]	; (800e234 <taskComputeImu+0x57c>)
 800df9c:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d014      	beq.n	800dfce <taskComputeImu+0x316>
 800dfa4:	4ba4      	ldr	r3, [pc, #656]	; (800e238 <taskComputeImu+0x580>)
 800dfa6:	78db      	ldrb	r3, [r3, #3]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d103      	bne.n	800dfb4 <taskComputeImu+0x2fc>
 800dfac:	4ba2      	ldr	r3, [pc, #648]	; (800e238 <taskComputeImu+0x580>)
 800dfae:	791b      	ldrb	r3, [r3, #4]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d00c      	beq.n	800dfce <taskComputeImu+0x316>
            rcCommand[THROTTLE] += throttleAngleCorrection;
 800dfb4:	4b9c      	ldr	r3, [pc, #624]	; (800e228 <taskComputeImu+0x570>)
 800dfb6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dfba:	b29a      	uxth	r2, r3
 800dfbc:	4b9f      	ldr	r3, [pc, #636]	; (800e23c <taskComputeImu+0x584>)
 800dfbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfc2:	b29b      	uxth	r3, r3
 800dfc4:	4413      	add	r3, r2
 800dfc6:	b29b      	uxth	r3, r3
 800dfc8:	b21a      	sxth	r2, r3
 800dfca:	4b97      	ldr	r3, [pc, #604]	; (800e228 <taskComputeImu+0x570>)
 800dfcc:	80da      	strh	r2, [r3, #6]
        }

#ifdef GPS
        if (sensors(SENSOR_GPS)) {
 800dfce:	2020      	movs	r0, #32
 800dfd0:	f7f8 ffc2 	bl	8006f58 <sensors>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	f000 8115 	beq.w	800e206 <taskComputeImu+0x54e>
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800dfdc:	4b96      	ldr	r3, [pc, #600]	; (800e238 <taskComputeImu+0x580>)
 800dfde:	79db      	ldrb	r3, [r3, #7]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d104      	bne.n	800dfee <taskComputeImu+0x336>
 800dfe4:	4b94      	ldr	r3, [pc, #592]	; (800e238 <taskComputeImu+0x580>)
 800dfe6:	7a1b      	ldrb	r3, [r3, #8]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	f000 8103 	beq.w	800e1f4 <taskComputeImu+0x53c>
 800dfee:	4b92      	ldr	r3, [pc, #584]	; (800e238 <taskComputeImu+0x580>)
 800dff0:	7b1b      	ldrb	r3, [r3, #12]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	f000 80fe 	beq.w	800e1f4 <taskComputeImu+0x53c>
                float sin_yaw_y = sinf(heading * 0.0174532925f);
 800dff8:	4b91      	ldr	r3, [pc, #580]	; (800e240 <taskComputeImu+0x588>)
 800dffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dffe:	ee07 3a90 	vmov	s15, r3
 800e002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e006:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 800e244 <taskComputeImu+0x58c>
 800e00a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e00e:	eeb0 0a67 	vmov.f32	s0, s15
 800e012:	f014 fa49 	bl	80224a8 <sinf>
 800e016:	ed87 0a03 	vstr	s0, [r7, #12]
                float cos_yaw_x = cosf(heading * 0.0174532925f);
 800e01a:	4b89      	ldr	r3, [pc, #548]	; (800e240 <taskComputeImu+0x588>)
 800e01c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e020:	ee07 3a90 	vmov	s15, r3
 800e024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e028:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800e244 <taskComputeImu+0x58c>
 800e02c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e030:	eeb0 0a67 	vmov.f32	s0, s15
 800e034:	f014 f9b4 	bl	80223a0 <cosf>
 800e038:	ed87 0a02 	vstr	s0, [r7, #8]
                if (!f.FIXED_WING) {
 800e03c:	4b7e      	ldr	r3, [pc, #504]	; (800e238 <taskComputeImu+0x580>)
 800e03e:	7c1b      	ldrb	r3, [r3, #16]
 800e040:	2b00      	cmp	r3, #0
 800e042:	f040 80d4 	bne.w	800e1ee <taskComputeImu+0x536>
                    if (cfg.nav_slew_rate) {
 800e046:	4b7b      	ldr	r3, [pc, #492]	; (800e234 <taskComputeImu+0x57c>)
 800e048:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	f000 8087 	beq.w	800e160 <taskComputeImu+0x4a8>
                        nav_rated[LON] += constrain(wrap_18000(nav[LON] - nav_rated[LON]), -cfg.nav_slew_rate, cfg.nav_slew_rate); // TODO check this on uint8
 800e052:	4b7d      	ldr	r3, [pc, #500]	; (800e248 <taskComputeImu+0x590>)
 800e054:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e058:	461a      	mov	r2, r3
 800e05a:	4b7c      	ldr	r3, [pc, #496]	; (800e24c <taskComputeImu+0x594>)
 800e05c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e060:	1ad3      	subs	r3, r2, r3
 800e062:	4618      	mov	r0, r3
 800e064:	f7fb fb82 	bl	800976c <wrap_18000>
 800e068:	4b72      	ldr	r3, [pc, #456]	; (800e234 <taskComputeImu+0x57c>)
 800e06a:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e06e:	425b      	negs	r3, r3
 800e070:	4a70      	ldr	r2, [pc, #448]	; (800e234 <taskComputeImu+0x57c>)
 800e072:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 800e076:	4619      	mov	r1, r3
 800e078:	f7f5 fe38 	bl	8003cec <constrain>
 800e07c:	4601      	mov	r1, r0
 800e07e:	4b73      	ldr	r3, [pc, #460]	; (800e24c <taskComputeImu+0x594>)
 800e080:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e084:	b29a      	uxth	r2, r3
 800e086:	b28b      	uxth	r3, r1
 800e088:	4413      	add	r3, r2
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	b21a      	sxth	r2, r3
 800e08e:	4b6f      	ldr	r3, [pc, #444]	; (800e24c <taskComputeImu+0x594>)
 800e090:	805a      	strh	r2, [r3, #2]
                        nav_rated[LAT] += constrain(wrap_18000(nav[LAT] - nav_rated[LAT]), -cfg.nav_slew_rate, cfg.nav_slew_rate);
 800e092:	4b6d      	ldr	r3, [pc, #436]	; (800e248 <taskComputeImu+0x590>)
 800e094:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e098:	461a      	mov	r2, r3
 800e09a:	4b6c      	ldr	r3, [pc, #432]	; (800e24c <taskComputeImu+0x594>)
 800e09c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0a0:	1ad3      	subs	r3, r2, r3
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7fb fb62 	bl	800976c <wrap_18000>
 800e0a8:	4b62      	ldr	r3, [pc, #392]	; (800e234 <taskComputeImu+0x57c>)
 800e0aa:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e0ae:	425b      	negs	r3, r3
 800e0b0:	4a60      	ldr	r2, [pc, #384]	; (800e234 <taskComputeImu+0x57c>)
 800e0b2:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	f7f5 fe18 	bl	8003cec <constrain>
 800e0bc:	4601      	mov	r1, r0
 800e0be:	4b63      	ldr	r3, [pc, #396]	; (800e24c <taskComputeImu+0x594>)
 800e0c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0c4:	b29a      	uxth	r2, r3
 800e0c6:	b28b      	uxth	r3, r1
 800e0c8:	4413      	add	r3, r2
 800e0ca:	b29b      	uxth	r3, r3
 800e0cc:	b21a      	sxth	r2, r3
 800e0ce:	4b5f      	ldr	r3, [pc, #380]	; (800e24c <taskComputeImu+0x594>)
 800e0d0:	801a      	strh	r2, [r3, #0]
                        GPS_angle[ROLL] = (nav_rated[LON] * cos_yaw_x - nav_rated[LAT] * sin_yaw_y) / 10;
 800e0d2:	4b5e      	ldr	r3, [pc, #376]	; (800e24c <taskComputeImu+0x594>)
 800e0d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e0d8:	ee07 3a90 	vmov	s15, r3
 800e0dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e0e0:	edd7 7a02 	vldr	s15, [r7, #8]
 800e0e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0e8:	4b58      	ldr	r3, [pc, #352]	; (800e24c <taskComputeImu+0x594>)
 800e0ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0ee:	ee07 3a90 	vmov	s15, r3
 800e0f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e0f6:	edd7 7a03 	vldr	s15, [r7, #12]
 800e0fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e0fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e102:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e106:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e10a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e10e:	ee17 3a90 	vmov	r3, s15
 800e112:	b21a      	sxth	r2, r3
 800e114:	4b4e      	ldr	r3, [pc, #312]	; (800e250 <taskComputeImu+0x598>)
 800e116:	801a      	strh	r2, [r3, #0]
                        GPS_angle[PITCH] = (nav_rated[LON] * sin_yaw_y + nav_rated[LAT] * cos_yaw_x) / 10;
 800e118:	4b4c      	ldr	r3, [pc, #304]	; (800e24c <taskComputeImu+0x594>)
 800e11a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e11e:	ee07 3a90 	vmov	s15, r3
 800e122:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e126:	edd7 7a03 	vldr	s15, [r7, #12]
 800e12a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e12e:	4b47      	ldr	r3, [pc, #284]	; (800e24c <taskComputeImu+0x594>)
 800e130:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e134:	ee07 3a90 	vmov	s15, r3
 800e138:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e13c:	edd7 7a02 	vldr	s15, [r7, #8]
 800e140:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e144:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e148:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e14c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e154:	ee17 3a90 	vmov	r3, s15
 800e158:	b21a      	sxth	r2, r3
 800e15a:	4b3d      	ldr	r3, [pc, #244]	; (800e250 <taskComputeImu+0x598>)
 800e15c:	805a      	strh	r2, [r3, #2]
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e15e:	e052      	b.n	800e206 <taskComputeImu+0x54e>
                    } else {
                        GPS_angle[ROLL] = (nav[LON] * cos_yaw_x - nav[LAT] * sin_yaw_y) / 10;
 800e160:	4b39      	ldr	r3, [pc, #228]	; (800e248 <taskComputeImu+0x590>)
 800e162:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e166:	ee07 3a90 	vmov	s15, r3
 800e16a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e16e:	edd7 7a02 	vldr	s15, [r7, #8]
 800e172:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e176:	4b34      	ldr	r3, [pc, #208]	; (800e248 <taskComputeImu+0x590>)
 800e178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e17c:	ee07 3a90 	vmov	s15, r3
 800e180:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e184:	edd7 7a03 	vldr	s15, [r7, #12]
 800e188:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e18c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e190:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e194:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e19c:	ee17 3a90 	vmov	r3, s15
 800e1a0:	b21a      	sxth	r2, r3
 800e1a2:	4b2b      	ldr	r3, [pc, #172]	; (800e250 <taskComputeImu+0x598>)
 800e1a4:	801a      	strh	r2, [r3, #0]
                        GPS_angle[PITCH] = (nav[LON] * sin_yaw_y + nav[LAT] * cos_yaw_x) / 10;
 800e1a6:	4b28      	ldr	r3, [pc, #160]	; (800e248 <taskComputeImu+0x590>)
 800e1a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e1ac:	ee07 3a90 	vmov	s15, r3
 800e1b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e1b4:	edd7 7a03 	vldr	s15, [r7, #12]
 800e1b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e1bc:	4b22      	ldr	r3, [pc, #136]	; (800e248 <taskComputeImu+0x590>)
 800e1be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e1c2:	ee07 3a90 	vmov	s15, r3
 800e1c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e1ca:	edd7 7a02 	vldr	s15, [r7, #8]
 800e1ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e1d6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e1da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e1de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e1e2:	ee17 3a90 	vmov	r3, s15
 800e1e6:	b21a      	sxth	r2, r3
 800e1e8:	4b19      	ldr	r3, [pc, #100]	; (800e250 <taskComputeImu+0x598>)
 800e1ea:	805a      	strh	r2, [r3, #2]
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e1ec:	e00b      	b.n	800e206 <taskComputeImu+0x54e>
                    }
                } else fw_nav();
 800e1ee:	f7f9 f82d 	bl	800724c <fw_nav>
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e1f2:	e008      	b.n	800e206 <taskComputeImu+0x54e>
            } else {
                GPS_angle[ROLL] = 0;
 800e1f4:	4b16      	ldr	r3, [pc, #88]	; (800e250 <taskComputeImu+0x598>)
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	801a      	strh	r2, [r3, #0]
                GPS_angle[PITCH] = 0;
 800e1fa:	4b15      	ldr	r3, [pc, #84]	; (800e250 <taskComputeImu+0x598>)
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	805a      	strh	r2, [r3, #2]
                GPS_angle[YAW] = 0;
 800e200:	4b13      	ldr	r3, [pc, #76]	; (800e250 <taskComputeImu+0x598>)
 800e202:	2200      	movs	r2, #0
 800e204:	809a      	strh	r2, [r3, #4]
            }
        }
#endif

        // PID - note this is function pointer set by setPIDController()
        pid_controller();
 800e206:	4b13      	ldr	r3, [pc, #76]	; (800e254 <taskComputeImu+0x59c>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	4798      	blx	r3

        mixTable();
 800e20c:	f7fd fb86 	bl	800b91c <mixTable>
        writeServos();
 800e210:	f7fc ffdc 	bl	800b1cc <writeServos>
        writeMotors();
 800e214:	f7fd f912 	bl	800b43c <writeMotors>
        step = 0;
 800e218:	4b0f      	ldr	r3, [pc, #60]	; (800e258 <taskComputeImu+0x5a0>)
 800e21a:	2200      	movs	r2, #0
 800e21c:	701a      	strb	r2, [r3, #0]
	}

    return 0;
 800e21e:	2300      	movs	r3, #0
}
 800e220:	4618      	mov	r0, r3
 800e222:	3718      	adds	r7, #24
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}
 800e228:	200019e8 	.word	0x200019e8
 800e22c:	20000bbc 	.word	0x20000bbc
 800e230:	20001758 	.word	0x20001758
 800e234:	20001128 	.word	0x20001128
 800e238:	20001988 	.word	0x20001988
 800e23c:	20001770 	.word	0x20001770
 800e240:	20001cb4 	.word	0x20001cb4
 800e244:	3c8efa35 	.word	0x3c8efa35
 800e248:	20001a84 	.word	0x20001a84
 800e24c:	20001a88 	.word	0x20001a88
 800e250:	20001a7c 	.word	0x20001a7c
 800e254:	20000050 	.word	0x20000050
 800e258:	20001cac 	.word	0x20001cac

0800e25c <mspFrameRecieve>:
{
    return rcData[chan];
}

void mspFrameRecieve(void)
{
 800e25c:	b480      	push	{r7}
 800e25e:	af00      	add	r7, sp, #0
    failsafeCnt = 0; // clear FailSafe counter
 800e260:	4b05      	ldr	r3, [pc, #20]	; (800e278 <mspFrameRecieve+0x1c>)
 800e262:	2200      	movs	r2, #0
 800e264:	801a      	strh	r2, [r3, #0]

    g_task_compute_rc->immediate = TRUE;
 800e266:	4b05      	ldr	r3, [pc, #20]	; (800e27c <mspFrameRecieve+0x20>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2201      	movs	r2, #1
 800e26c:	705a      	strb	r2, [r3, #1]
}
 800e26e:	bf00      	nop
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr
 800e278:	200019be 	.word	0x200019be
 800e27c:	20001b8c 	.word	0x20001b8c

0800e280 <sensorsAutodetect>:
	.baro.hardware = NULL		// barometer access functions
};
PifImuSensor imu_sensor;

bool sensorsAutodetect(sensorDetect_t* gyroDetect, sensorDetect_t* accDetect, sensorDetect_t* baroDetect, sensorDetect_t* magDetect)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b086      	sub	sp, #24
 800e284:	af00      	add	r7, sp, #0
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	60b9      	str	r1, [r7, #8]
 800e28a:	607a      	str	r2, [r7, #4]
 800e28c:	603b      	str	r3, [r7, #0]
    int16_t deg, min;

    pifImuSensor_Init(&imu_sensor);
 800e28e:	4874      	ldr	r0, [pc, #464]	; (800e460 <sensorsAutodetect+0x1e0>)
 800e290:	f00a fa28 	bl	80186e4 <pifImuSensor_Init>
    pifImuSensor_InitBoardAlignment(&imu_sensor, mcfg.board_align_roll, mcfg.board_align_pitch, mcfg.board_align_yaw);
 800e294:	4b73      	ldr	r3, [pc, #460]	; (800e464 <sensorsAutodetect+0x1e4>)
 800e296:	f9b3 1156 	ldrsh.w	r1, [r3, #342]	; 0x156
 800e29a:	4b72      	ldr	r3, [pc, #456]	; (800e464 <sensorsAutodetect+0x1e4>)
 800e29c:	f9b3 2158 	ldrsh.w	r2, [r3, #344]	; 0x158
 800e2a0:	4b70      	ldr	r3, [pc, #448]	; (800e464 <sensorsAutodetect+0x1e4>)
 800e2a2:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 800e2a6:	486e      	ldr	r0, [pc, #440]	; (800e460 <sensorsAutodetect+0x1e0>)
 800e2a8:	f00a fa2a 	bl	8018700 <pifImuSensor_InitBoardAlignment>

    // set gyro low pass filter parameters
    sensor_set.gyro.lpf = mcfg.gyro_lpf;
 800e2ac:	4b6d      	ldr	r3, [pc, #436]	; (800e464 <sensorsAutodetect+0x1e4>)
 800e2ae:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
 800e2b2:	4b6d      	ldr	r3, [pc, #436]	; (800e468 <sensorsAutodetect+0x1e8>)
 800e2b4:	821a      	strh	r2, [r3, #16]

    // Autodetect Invensense gyro hardware
    while (gyroDetect->p_func) {
 800e2b6:	e010      	b.n	800e2da <sensorsAutodetect+0x5a>
    	if ((*gyroDetect->p_func)(&sensor_set, gyroDetect->p_param)) {
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	68fa      	ldr	r2, [r7, #12]
 800e2be:	6852      	ldr	r2, [r2, #4]
 800e2c0:	4611      	mov	r1, r2
 800e2c2:	4869      	ldr	r0, [pc, #420]	; (800e468 <sensorsAutodetect+0x1e8>)
 800e2c4:	4798      	blx	r3
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d003      	beq.n	800e2d4 <sensorsAutodetect+0x54>
    	    sensorsSet(SENSOR_GYRO);
 800e2cc:	2001      	movs	r0, #1
 800e2ce:	f7f8 fe59 	bl	8006f84 <sensorsSet>
    		break;
 800e2d2:	e006      	b.n	800e2e2 <sensorsAutodetect+0x62>
    	}
    	gyroDetect++;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	3308      	adds	r3, #8
 800e2d8:	60fb      	str	r3, [r7, #12]
    while (gyroDetect->p_func) {
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d1ea      	bne.n	800e2b8 <sensorsAutodetect+0x38>
    }
    if (!sensor_set.gyro.hardware) return false;
 800e2e2:	4b61      	ldr	r3, [pc, #388]	; (800e468 <sensorsAutodetect+0x1e8>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d101      	bne.n	800e2ee <sensorsAutodetect+0x6e>
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	e0b3      	b.n	800e456 <sensorsAutodetect+0x1d6>

    // Autodetect Invensense acc hardware
    if (sensor_set.acc.hardware) {
 800e2ee:	4b5e      	ldr	r3, [pc, #376]	; (800e468 <sensorsAutodetect+0x1e8>)
 800e2f0:	699b      	ldr	r3, [r3, #24]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d003      	beq.n	800e2fe <sensorsAutodetect+0x7e>
    	sensorsSet(SENSOR_ACC);
 800e2f6:	2002      	movs	r0, #2
 800e2f8:	f7f8 fe44 	bl	8006f84 <sensorsSet>
 800e2fc:	e018      	b.n	800e330 <sensorsAutodetect+0xb0>
    }
    else if (accDetect) {
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d015      	beq.n	800e330 <sensorsAutodetect+0xb0>
        while (accDetect->p_func) {
 800e304:	e010      	b.n	800e328 <sensorsAutodetect+0xa8>
        	if ((*accDetect->p_func)(&sensor_set, accDetect->p_param)) {
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	68ba      	ldr	r2, [r7, #8]
 800e30c:	6852      	ldr	r2, [r2, #4]
 800e30e:	4611      	mov	r1, r2
 800e310:	4855      	ldr	r0, [pc, #340]	; (800e468 <sensorsAutodetect+0x1e8>)
 800e312:	4798      	blx	r3
 800e314:	4603      	mov	r3, r0
 800e316:	2b00      	cmp	r3, #0
 800e318:	d003      	beq.n	800e322 <sensorsAutodetect+0xa2>
            	sensorsSet(SENSOR_ACC);
 800e31a:	2002      	movs	r0, #2
 800e31c:	f7f8 fe32 	bl	8006f84 <sensorsSet>
        		break;
 800e320:	e006      	b.n	800e330 <sensorsAutodetect+0xb0>
        	}
        	accDetect++;
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	3308      	adds	r3, #8
 800e326:	60bb      	str	r3, [r7, #8]
        while (accDetect->p_func) {
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d1ea      	bne.n	800e306 <sensorsAutodetect+0x86>
        }
    }

#ifdef BARO
    // Autodetect Invensense baro hardware
    if (sensor_set.baro.hardware) {
 800e330:	4b4d      	ldr	r3, [pc, #308]	; (800e468 <sensorsAutodetect+0x1e8>)
 800e332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e334:	2b00      	cmp	r3, #0
 800e336:	d003      	beq.n	800e340 <sensorsAutodetect+0xc0>
    	sensorsSet(SENSOR_BARO);
 800e338:	2004      	movs	r0, #4
 800e33a:	f7f8 fe23 	bl	8006f84 <sensorsSet>
 800e33e:	e018      	b.n	800e372 <sensorsAutodetect+0xf2>
    }
    else if (baroDetect) {
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d015      	beq.n	800e372 <sensorsAutodetect+0xf2>
		while (baroDetect->p_func) {
 800e346:	e010      	b.n	800e36a <sensorsAutodetect+0xea>
			if ((*baroDetect->p_func)(&sensor_set, baroDetect->p_param)) {
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	6852      	ldr	r2, [r2, #4]
 800e350:	4611      	mov	r1, r2
 800e352:	4845      	ldr	r0, [pc, #276]	; (800e468 <sensorsAutodetect+0x1e8>)
 800e354:	4798      	blx	r3
 800e356:	4603      	mov	r3, r0
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d003      	beq.n	800e364 <sensorsAutodetect+0xe4>
				sensorsSet(SENSOR_BARO);
 800e35c:	2004      	movs	r0, #4
 800e35e:	f7f8 fe11 	bl	8006f84 <sensorsSet>
				break;
 800e362:	e006      	b.n	800e372 <sensorsAutodetect+0xf2>
			}
			baroDetect++;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	3308      	adds	r3, #8
 800e368:	607b      	str	r3, [r7, #4]
		while (baroDetect->p_func) {
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d1ea      	bne.n	800e348 <sensorsAutodetect+0xc8>
#else
    (void)baroDetect;
#endif

    // Now time to init things, acc first
    if (sensors(SENSOR_ACC))
 800e372:	2002      	movs	r0, #2
 800e374:	f7f8 fdf0 	bl	8006f58 <sensors>
 800e378:	4603      	mov	r3, r0
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d006      	beq.n	800e38c <sensorsAutodetect+0x10c>
        sensor_set.acc.init(mcfg.acc_align);
 800e37e:	4b3a      	ldr	r3, [pc, #232]	; (800e468 <sensorsAutodetect+0x1e8>)
 800e380:	69db      	ldr	r3, [r3, #28]
 800e382:	4a38      	ldr	r2, [pc, #224]	; (800e464 <sensorsAutodetect+0x1e4>)
 800e384:	f892 2154 	ldrb.w	r2, [r2, #340]	; 0x154
 800e388:	4610      	mov	r0, r2
 800e38a:	4798      	blx	r3
    // this is safe because either mpu6050 or mpu3050 or lg3d20 sets it, and in case of fail, we never get here.
    sensor_set.gyro.init(mcfg.gyro_align);
 800e38c:	4b36      	ldr	r3, [pc, #216]	; (800e468 <sensorsAutodetect+0x1e8>)
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	4a34      	ldr	r2, [pc, #208]	; (800e464 <sensorsAutodetect+0x1e4>)
 800e392:	f892 2153 	ldrb.w	r2, [r2, #339]	; 0x153
 800e396:	4610      	mov	r0, r2
 800e398:	4798      	blx	r3

#ifdef MAG
    // Autodetect Invensense mag hardware
    if (sensor_set.mag.hardware) {
 800e39a:	4b33      	ldr	r3, [pc, #204]	; (800e468 <sensorsAutodetect+0x1e8>)
 800e39c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d003      	beq.n	800e3aa <sensorsAutodetect+0x12a>
    	sensorsSet(SENSOR_MAG);
 800e3a2:	2008      	movs	r0, #8
 800e3a4:	f7f8 fdee 	bl	8006f84 <sensorsSet>
 800e3a8:	e018      	b.n	800e3dc <sensorsAutodetect+0x15c>
    }
    else if (magDetect) {
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d015      	beq.n	800e3dc <sensorsAutodetect+0x15c>
		while (magDetect->p_func) {
 800e3b0:	e010      	b.n	800e3d4 <sensorsAutodetect+0x154>
			if ((*magDetect->p_func)(&sensor_set, magDetect->p_param)) {
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	683a      	ldr	r2, [r7, #0]
 800e3b8:	6852      	ldr	r2, [r2, #4]
 800e3ba:	4611      	mov	r1, r2
 800e3bc:	482a      	ldr	r0, [pc, #168]	; (800e468 <sensorsAutodetect+0x1e8>)
 800e3be:	4798      	blx	r3
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d003      	beq.n	800e3ce <sensorsAutodetect+0x14e>
				sensorsSet(SENSOR_MAG);
 800e3c6:	2008      	movs	r0, #8
 800e3c8:	f7f8 fddc 	bl	8006f84 <sensorsSet>
				break;
 800e3cc:	e006      	b.n	800e3dc <sensorsAutodetect+0x15c>
			}
			magDetect++;
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	3308      	adds	r3, #8
 800e3d2:	603b      	str	r3, [r7, #0]
		while (magDetect->p_func) {
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d1ea      	bne.n	800e3b2 <sensorsAutodetect+0x132>
#else
    (void)magDetect;
#endif

    // calculate magnetic declination
    deg = cfg.mag_declination / 100;
 800e3dc:	4b23      	ldr	r3, [pc, #140]	; (800e46c <sensorsAutodetect+0x1ec>)
 800e3de:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800e3e2:	4a23      	ldr	r2, [pc, #140]	; (800e470 <sensorsAutodetect+0x1f0>)
 800e3e4:	fb82 1203 	smull	r1, r2, r2, r3
 800e3e8:	1152      	asrs	r2, r2, #5
 800e3ea:	17db      	asrs	r3, r3, #31
 800e3ec:	1ad3      	subs	r3, r2, r3
 800e3ee:	82fb      	strh	r3, [r7, #22]
    min = cfg.mag_declination % 100;
 800e3f0:	4b1e      	ldr	r3, [pc, #120]	; (800e46c <sensorsAutodetect+0x1ec>)
 800e3f2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800e3f6:	4a1e      	ldr	r2, [pc, #120]	; (800e470 <sensorsAutodetect+0x1f0>)
 800e3f8:	fb82 1203 	smull	r1, r2, r2, r3
 800e3fc:	1151      	asrs	r1, r2, #5
 800e3fe:	17da      	asrs	r2, r3, #31
 800e400:	1a8a      	subs	r2, r1, r2
 800e402:	2164      	movs	r1, #100	; 0x64
 800e404:	fb01 f202 	mul.w	r2, r1, r2
 800e408:	1a9b      	subs	r3, r3, r2
 800e40a:	82bb      	strh	r3, [r7, #20]
    if (sensors(SENSOR_MAG))
 800e40c:	2008      	movs	r0, #8
 800e40e:	f7f8 fda3 	bl	8006f58 <sensors>
 800e412:	4603      	mov	r3, r0
 800e414:	2b00      	cmp	r3, #0
 800e416:	d019      	beq.n	800e44c <sensorsAutodetect+0x1cc>
        sensor_set.mag.declination = (deg + ((float)min * (1.0f / 60.0f))) * 10; // heading is in 0.1deg units
 800e418:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e41c:	ee07 3a90 	vmov	s15, r3
 800e420:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e424:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e428:	ee07 3a90 	vmov	s15, r3
 800e42c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e430:	eddf 6a10 	vldr	s13, [pc, #64]	; 800e474 <sensorsAutodetect+0x1f4>
 800e434:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e43c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800e440:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e444:	4b08      	ldr	r3, [pc, #32]	; (800e468 <sensorsAutodetect+0x1e8>)
 800e446:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 800e44a:	e003      	b.n	800e454 <sensorsAutodetect+0x1d4>
    else
        sensor_set.mag.declination = 0.0f;
 800e44c:	4b06      	ldr	r3, [pc, #24]	; (800e468 <sensorsAutodetect+0x1e8>)
 800e44e:	f04f 0200 	mov.w	r2, #0
 800e452:	659a      	str	r2, [r3, #88]	; 0x58

    return true;
 800e454:	2301      	movs	r3, #1
}
 800e456:	4618      	mov	r0, r3
 800e458:	3718      	adds	r7, #24
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}
 800e45e:	bf00      	nop
 800e460:	20001d20 	.word	0x20001d20
 800e464:	20000bbc 	.word	0x20000bbc
 800e468:	20001cc0 	.word	0x20001cc0
 800e46c:	20001128 	.word	0x20001128
 800e470:	51eb851f 	.word	0x51eb851f
 800e474:	3c888889 	.word	0x3c888889

0800e478 <RSSI_getValue>:

uint16_t RSSI_getValue(void)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
    uint16_t value = 0;
 800e47e:	2300      	movs	r3, #0
 800e480:	80fb      	strh	r3, [r7, #6]

    if (mcfg.rssi_aux_channel > 0) {
 800e482:	4b2a      	ldr	r3, [pc, #168]	; (800e52c <RSSI_getValue+0xb4>)
 800e484:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d029      	beq.n	800e4e0 <RSSI_getValue+0x68>
        const int16_t rssiChannelData = rcData[AUX1 + mcfg.rssi_aux_channel - 1];
 800e48c:	4b27      	ldr	r3, [pc, #156]	; (800e52c <RSSI_getValue+0xb4>)
 800e48e:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800e492:	3303      	adds	r3, #3
 800e494:	4a26      	ldr	r2, [pc, #152]	; (800e530 <RSSI_getValue+0xb8>)
 800e496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e49a:	807b      	strh	r3, [r7, #2]
        // Range of rssiChannelData is [1000;2000]. rssi should be in [0;1023];
        value = (uint16_t)((constrain(rssiChannelData - 1000, 0, mcfg.rssi_aux_max) / (float) mcfg.rssi_aux_max) * 1023.0f);
 800e49c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e4a0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800e4a4:	4a21      	ldr	r2, [pc, #132]	; (800e52c <RSSI_getValue+0xb4>)
 800e4a6:	f8b2 21a2 	ldrh.w	r2, [r2, #418]	; 0x1a2
 800e4aa:	2100      	movs	r1, #0
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7f5 fc1d 	bl	8003cec <constrain>
 800e4b2:	ee07 0a90 	vmov	s15, r0
 800e4b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e4ba:	4b1c      	ldr	r3, [pc, #112]	; (800e52c <RSSI_getValue+0xb4>)
 800e4bc:	f8b3 31a2 	ldrh.w	r3, [r3, #418]	; 0x1a2
 800e4c0:	ee07 3a90 	vmov	s15, r3
 800e4c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e4c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e4cc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800e534 <RSSI_getValue+0xbc>
 800e4d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e4d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e4d8:	ee17 3a90 	vmov	r3, s15
 800e4dc:	80fb      	strh	r3, [r7, #6]
 800e4de:	e020      	b.n	800e522 <RSSI_getValue+0xaa>
    } else if (mcfg.rssi_adc_channel > 0) {
 800e4e0:	4b12      	ldr	r3, [pc, #72]	; (800e52c <RSSI_getValue+0xb4>)
 800e4e2:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d01b      	beq.n	800e522 <RSSI_getValue+0xaa>
        const int16_t rssiData = (((int32_t)(actGetAdcChannel(ADC_RSSI) - mcfg.rssi_adc_offset)) * 1023L) / mcfg.rssi_adc_max;
 800e4ea:	2003      	movs	r0, #3
 800e4ec:	f7f2 fe66 	bl	80011bc <actGetAdcChannel>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	461a      	mov	r2, r3
 800e4f4:	4b0d      	ldr	r3, [pc, #52]	; (800e52c <RSSI_getValue+0xb4>)
 800e4f6:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 800e4fa:	1ad2      	subs	r2, r2, r3
 800e4fc:	4613      	mov	r3, r2
 800e4fe:	029b      	lsls	r3, r3, #10
 800e500:	1a9b      	subs	r3, r3, r2
 800e502:	4a0a      	ldr	r2, [pc, #40]	; (800e52c <RSSI_getValue+0xb4>)
 800e504:	f8b2 21a6 	ldrh.w	r2, [r2, #422]	; 0x1a6
 800e508:	fb93 f3f2 	sdiv	r3, r3, r2
 800e50c:	80bb      	strh	r3, [r7, #4]
        // Set to correct range [0;1023]
        value = constrain(rssiData, 0, 1023);
 800e50e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e512:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e516:	2100      	movs	r1, #0
 800e518:	4618      	mov	r0, r3
 800e51a:	f7f5 fbe7 	bl	8003cec <constrain>
 800e51e:	4603      	mov	r3, r0
 800e520:	80fb      	strh	r3, [r7, #6]
    }

    // return range [0;1023]
    return value;
 800e522:	88fb      	ldrh	r3, [r7, #6]
}
 800e524:	4618      	mov	r0, r3
 800e526:	3708      	adds	r7, #8
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}
 800e52c:	20000bbc 	.word	0x20000bbc
 800e530:	200019c4 	.word	0x200019c4
 800e534:	447fc000 	.word	0x447fc000

0800e538 <batteryInit>:

void batteryInit(void)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b082      	sub	sp, #8
 800e53c:	af00      	add	r7, sp, #0
    uint32_t i;
    float voltage = 0;
 800e53e:	f04f 0300 	mov.w	r3, #0
 800e542:	603b      	str	r3, [r7, #0]

    // average up some voltage readings
    for (i = 0; i < 32; i++) {
 800e544:	2300      	movs	r3, #0
 800e546:	607b      	str	r3, [r7, #4]
 800e548:	e018      	b.n	800e57c <batteryInit+0x44>
        voltage += actGetBatteryVoltage() * mcfg.vbatscale;
 800e54a:	f7f2 fe49 	bl	80011e0 <actGetBatteryVoltage>
 800e54e:	eeb0 7a40 	vmov.f32	s14, s0
 800e552:	4b35      	ldr	r3, [pc, #212]	; (800e628 <batteryInit+0xf0>)
 800e554:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800e558:	ee07 3a90 	vmov	s15, r3
 800e55c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e560:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e564:	ed97 7a00 	vldr	s14, [r7]
 800e568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e56c:	edc7 7a00 	vstr	s15, [r7]
        pif_Delay1ms(10);
 800e570:	200a      	movs	r0, #10
 800e572:	f002 ffbb 	bl	80114ec <pif_Delay1ms>
    for (i = 0; i < 32; i++) {
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	3301      	adds	r3, #1
 800e57a:	607b      	str	r3, [r7, #4]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2b1f      	cmp	r3, #31
 800e580:	d9e3      	bls.n	800e54a <batteryInit+0x12>
    }

    voltage = voltage / 32;
 800e582:	ed97 7a00 	vldr	s14, [r7]
 800e586:	eddf 6a29 	vldr	s13, [pc, #164]	; 800e62c <batteryInit+0xf4>
 800e58a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e58e:	edc7 7a00 	vstr	s15, [r7]
#ifndef __PIF_NO_LOG__
    pifLog_Printf(LT_INFO, "Battery: %fV", voltage / 10);
 800e592:	edd7 7a00 	vldr	s15, [r7]
 800e596:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800e59a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e59e:	ee16 0a90 	vmov	r0, s13
 800e5a2:	f7f1 ff8f 	bl	80004c4 <__aeabi_f2d>
 800e5a6:	4602      	mov	r2, r0
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	4921      	ldr	r1, [pc, #132]	; (800e630 <batteryInit+0xf8>)
 800e5ac:	2002      	movs	r0, #2
 800e5ae:	f004 fff1 	bl	8013594 <pifLog_Printf>
#endif

    // autodetect cell count, going from 2S..8S
    for (i = 1; i < 8; i++) {
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	607b      	str	r3, [r7, #4]
 800e5b6:	e014      	b.n	800e5e2 <batteryInit+0xaa>
        if (voltage < i * mcfg.vbatmaxcellvoltage)
 800e5b8:	4b1b      	ldr	r3, [pc, #108]	; (800e628 <batteryInit+0xf0>)
 800e5ba:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 800e5be:	461a      	mov	r2, r3
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	fb02 f303 	mul.w	r3, r2, r3
 800e5c6:	ee07 3a90 	vmov	s15, r3
 800e5ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5ce:	ed97 7a00 	vldr	s14, [r7]
 800e5d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5da:	d406      	bmi.n	800e5ea <batteryInit+0xb2>
    for (i = 1; i < 8; i++) {
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	3301      	adds	r3, #1
 800e5e0:	607b      	str	r3, [r7, #4]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2b07      	cmp	r3, #7
 800e5e6:	d9e7      	bls.n	800e5b8 <batteryInit+0x80>
 800e5e8:	e000      	b.n	800e5ec <batteryInit+0xb4>
            break;
 800e5ea:	bf00      	nop
    }
    batteryCellCount = i;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	b2da      	uxtb	r2, r3
 800e5f0:	4b10      	ldr	r3, [pc, #64]	; (800e634 <batteryInit+0xfc>)
 800e5f2:	701a      	strb	r2, [r3, #0]
    batteryWarningVoltage = i * mcfg.vbatwarningcellvoltage; // 3.5V per cell minimum, configurable in CLI
 800e5f4:	4b0c      	ldr	r3, [pc, #48]	; (800e628 <batteryInit+0xf0>)
 800e5f6:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800e5fa:	b29a      	uxth	r2, r3
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	fb12 f303 	smulbb	r3, r2, r3
 800e604:	b29a      	uxth	r2, r3
 800e606:	4b0c      	ldr	r3, [pc, #48]	; (800e638 <batteryInit+0x100>)
 800e608:	801a      	strh	r2, [r3, #0]
    batteryCriticalVoltage = i * mcfg.vbatmincellvoltage; // 3.3V per cell minimum, configurable in CLI
 800e60a:	4b07      	ldr	r3, [pc, #28]	; (800e628 <batteryInit+0xf0>)
 800e60c:	f893 317f 	ldrb.w	r3, [r3, #383]	; 0x17f
 800e610:	b29a      	uxth	r2, r3
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	b29b      	uxth	r3, r3
 800e616:	fb12 f303 	smulbb	r3, r2, r3
 800e61a:	b29a      	uxth	r2, r3
 800e61c:	4b07      	ldr	r3, [pc, #28]	; (800e63c <batteryInit+0x104>)
 800e61e:	801a      	strh	r2, [r3, #0]
}
 800e620:	bf00      	nop
 800e622:	3708      	adds	r7, #8
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}
 800e628:	20000bbc 	.word	0x20000bbc
 800e62c:	42000000 	.word	0x42000000
 800e630:	0802633c 	.word	0x0802633c
 800e634:	20000054 	.word	0x20000054
 800e638:	20001b2e 	.word	0x20001b2e
 800e63c:	20001b30 	.word	0x20001b30

0800e640 <ACC_Common>:

static void ACC_Common(void)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
    static int32_t a[3];
    int axis;

    if (calibratingA > 0) {
 800e646:	4b4d      	ldr	r3, [pc, #308]	; (800e77c <ACC_Common+0x13c>)
 800e648:	881b      	ldrh	r3, [r3, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d06b      	beq.n	800e726 <ACC_Common+0xe6>
        for (axis = 0; axis < 3; axis++) {
 800e64e:	2300      	movs	r3, #0
 800e650:	607b      	str	r3, [r7, #4]
 800e652:	e025      	b.n	800e6a0 <ACC_Common+0x60>
            // Reset a[axis] at start of calibration
            if (calibratingA == CALIBRATING_ACC_CYCLES)
 800e654:	4b49      	ldr	r3, [pc, #292]	; (800e77c <ACC_Common+0x13c>)
 800e656:	881b      	ldrh	r3, [r3, #0]
 800e658:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800e65c:	d104      	bne.n	800e668 <ACC_Common+0x28>
                a[axis] = 0;
 800e65e:	4a48      	ldr	r2, [pc, #288]	; (800e780 <ACC_Common+0x140>)
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2100      	movs	r1, #0
 800e664:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            // Sum up CALIBRATING_ACC_CYCLES readings
            a[axis] += accADC[axis];
 800e668:	4a45      	ldr	r2, [pc, #276]	; (800e780 <ACC_Common+0x140>)
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e670:	4944      	ldr	r1, [pc, #272]	; (800e784 <ACC_Common+0x144>)
 800e672:	687a      	ldr	r2, [r7, #4]
 800e674:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800e678:	441a      	add	r2, r3
 800e67a:	4941      	ldr	r1, [pc, #260]	; (800e780 <ACC_Common+0x140>)
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            // Clear global variables for next reading
            accADC[axis] = 0;
 800e682:	4a40      	ldr	r2, [pc, #256]	; (800e784 <ACC_Common+0x144>)
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2100      	movs	r1, #0
 800e688:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            mcfg.accZero[axis] = 0;
 800e68c:	4a3e      	ldr	r2, [pc, #248]	; (800e788 <ACC_Common+0x148>)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	33b4      	adds	r3, #180	; 0xb4
 800e692:	005b      	lsls	r3, r3, #1
 800e694:	4413      	add	r3, r2
 800e696:	2200      	movs	r2, #0
 800e698:	805a      	strh	r2, [r3, #2]
        for (axis = 0; axis < 3; axis++) {
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	3301      	adds	r3, #1
 800e69e:	607b      	str	r3, [r7, #4]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2b02      	cmp	r3, #2
 800e6a4:	ddd6      	ble.n	800e654 <ACC_Common+0x14>
        }
        // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
        if (calibratingA == 1) {
 800e6a6:	4b35      	ldr	r3, [pc, #212]	; (800e77c <ACC_Common+0x13c>)
 800e6a8:	881b      	ldrh	r3, [r3, #0]
 800e6aa:	2b01      	cmp	r3, #1
 800e6ac:	d135      	bne.n	800e71a <ACC_Common+0xda>
            mcfg.accZero[ROLL] = (a[ROLL] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
 800e6ae:	4b34      	ldr	r3, [pc, #208]	; (800e780 <ACC_Common+0x140>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	33c8      	adds	r3, #200	; 0xc8
 800e6b4:	4a35      	ldr	r2, [pc, #212]	; (800e78c <ACC_Common+0x14c>)
 800e6b6:	fb82 1203 	smull	r1, r2, r2, r3
 800e6ba:	11d2      	asrs	r2, r2, #7
 800e6bc:	17db      	asrs	r3, r3, #31
 800e6be:	1ad3      	subs	r3, r2, r3
 800e6c0:	b21a      	sxth	r2, r3
 800e6c2:	4b31      	ldr	r3, [pc, #196]	; (800e788 <ACC_Common+0x148>)
 800e6c4:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
            mcfg.accZero[PITCH] = (a[PITCH] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
 800e6c8:	4b2d      	ldr	r3, [pc, #180]	; (800e780 <ACC_Common+0x140>)
 800e6ca:	685b      	ldr	r3, [r3, #4]
 800e6cc:	33c8      	adds	r3, #200	; 0xc8
 800e6ce:	4a2f      	ldr	r2, [pc, #188]	; (800e78c <ACC_Common+0x14c>)
 800e6d0:	fb82 1203 	smull	r1, r2, r2, r3
 800e6d4:	11d2      	asrs	r2, r2, #7
 800e6d6:	17db      	asrs	r3, r3, #31
 800e6d8:	1ad3      	subs	r3, r2, r3
 800e6da:	b21a      	sxth	r2, r3
 800e6dc:	4b2a      	ldr	r3, [pc, #168]	; (800e788 <ACC_Common+0x148>)
 800e6de:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
            mcfg.accZero[YAW] = (a[YAW] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES - acc_1G;
 800e6e2:	4b27      	ldr	r3, [pc, #156]	; (800e780 <ACC_Common+0x140>)
 800e6e4:	689b      	ldr	r3, [r3, #8]
 800e6e6:	33c8      	adds	r3, #200	; 0xc8
 800e6e8:	4a28      	ldr	r2, [pc, #160]	; (800e78c <ACC_Common+0x14c>)
 800e6ea:	fb82 1203 	smull	r1, r2, r2, r3
 800e6ee:	11d2      	asrs	r2, r2, #7
 800e6f0:	17db      	asrs	r3, r3, #31
 800e6f2:	1ad3      	subs	r3, r2, r3
 800e6f4:	b29a      	uxth	r2, r3
 800e6f6:	4b26      	ldr	r3, [pc, #152]	; (800e790 <ACC_Common+0x150>)
 800e6f8:	881b      	ldrh	r3, [r3, #0]
 800e6fa:	1ad3      	subs	r3, r2, r3
 800e6fc:	b29b      	uxth	r3, r3
 800e6fe:	b21a      	sxth	r2, r3
 800e700:	4b21      	ldr	r3, [pc, #132]	; (800e788 <ACC_Common+0x148>)
 800e702:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
            cfg.angleTrim[ROLL] = 0;
 800e706:	4b23      	ldr	r3, [pc, #140]	; (800e794 <ACC_Common+0x154>)
 800e708:	2200      	movs	r2, #0
 800e70a:	859a      	strh	r2, [r3, #44]	; 0x2c
            cfg.angleTrim[PITCH] = 0;
 800e70c:	4b21      	ldr	r3, [pc, #132]	; (800e794 <ACC_Common+0x154>)
 800e70e:	2200      	movs	r2, #0
 800e710:	85da      	strh	r2, [r3, #46]	; 0x2e
            writeEEPROM(1, true);      // write accZero in EEPROM
 800e712:	2101      	movs	r1, #1
 800e714:	2001      	movs	r0, #1
 800e716:	f7f8 f885 	bl	8006824 <writeEEPROM>
        }
        calibratingA--;
 800e71a:	4b18      	ldr	r3, [pc, #96]	; (800e77c <ACC_Common+0x13c>)
 800e71c:	881b      	ldrh	r3, [r3, #0]
 800e71e:	3b01      	subs	r3, #1
 800e720:	b29a      	uxth	r2, r3
 800e722:	4b16      	ldr	r3, [pc, #88]	; (800e77c <ACC_Common+0x13c>)
 800e724:	801a      	strh	r2, [r3, #0]
    }

    if (feature(FEATURE_INFLIGHT_ACC_CAL)) {
 800e726:	2004      	movs	r0, #4
 800e728:	f7f8 fc5e 	bl	8006fe8 <feature>
 800e72c:	4603      	mov	r3, r0
 800e72e:	2b00      	cmp	r3, #0
 800e730:	f000 80c9 	beq.w	800e8c6 <ACC_Common+0x286>
        static int32_t b[3];
        static int16_t accZero_saved[3] = { 0, 0, 0 };
        static int16_t angleTrim_saved[2] = { 0, 0 };
        // Saving old zeropoints before measurement
        if (InflightcalibratingA == 50) {
 800e734:	4b18      	ldr	r3, [pc, #96]	; (800e798 <ACC_Common+0x158>)
 800e736:	881b      	ldrh	r3, [r3, #0]
 800e738:	2b32      	cmp	r3, #50	; 0x32
 800e73a:	d118      	bne.n	800e76e <ACC_Common+0x12e>
            accZero_saved[ROLL] = mcfg.accZero[ROLL];
 800e73c:	4b12      	ldr	r3, [pc, #72]	; (800e788 <ACC_Common+0x148>)
 800e73e:	f9b3 216a 	ldrsh.w	r2, [r3, #362]	; 0x16a
 800e742:	4b16      	ldr	r3, [pc, #88]	; (800e79c <ACC_Common+0x15c>)
 800e744:	801a      	strh	r2, [r3, #0]
            accZero_saved[PITCH] = mcfg.accZero[PITCH];
 800e746:	4b10      	ldr	r3, [pc, #64]	; (800e788 <ACC_Common+0x148>)
 800e748:	f9b3 216c 	ldrsh.w	r2, [r3, #364]	; 0x16c
 800e74c:	4b13      	ldr	r3, [pc, #76]	; (800e79c <ACC_Common+0x15c>)
 800e74e:	805a      	strh	r2, [r3, #2]
            accZero_saved[YAW] = mcfg.accZero[YAW];
 800e750:	4b0d      	ldr	r3, [pc, #52]	; (800e788 <ACC_Common+0x148>)
 800e752:	f9b3 216e 	ldrsh.w	r2, [r3, #366]	; 0x16e
 800e756:	4b11      	ldr	r3, [pc, #68]	; (800e79c <ACC_Common+0x15c>)
 800e758:	809a      	strh	r2, [r3, #4]
            angleTrim_saved[ROLL] = cfg.angleTrim[ROLL];
 800e75a:	4b0e      	ldr	r3, [pc, #56]	; (800e794 <ACC_Common+0x154>)
 800e75c:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800e760:	4b0f      	ldr	r3, [pc, #60]	; (800e7a0 <ACC_Common+0x160>)
 800e762:	801a      	strh	r2, [r3, #0]
            angleTrim_saved[PITCH] = cfg.angleTrim[PITCH];
 800e764:	4b0b      	ldr	r3, [pc, #44]	; (800e794 <ACC_Common+0x154>)
 800e766:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 800e76a:	4b0d      	ldr	r3, [pc, #52]	; (800e7a0 <ACC_Common+0x160>)
 800e76c:	805a      	strh	r2, [r3, #2]
        }
        if (InflightcalibratingA > 0) {
 800e76e:	4b0a      	ldr	r3, [pc, #40]	; (800e798 <ACC_Common+0x158>)
 800e770:	881b      	ldrh	r3, [r3, #0]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d06d      	beq.n	800e852 <ACC_Common+0x212>
            for (axis = 0; axis < 3; axis++) {
 800e776:	2300      	movs	r3, #0
 800e778:	607b      	str	r3, [r7, #4]
 800e77a:	e038      	b.n	800e7ee <ACC_Common+0x1ae>
 800e77c:	20001cae 	.word	0x20001cae
 800e780:	20001da0 	.word	0x20001da0
 800e784:	20001710 	.word	0x20001710
 800e788:	20000bbc 	.word	0x20000bbc
 800e78c:	51eb851f 	.word	0x51eb851f
 800e790:	2000005a 	.word	0x2000005a
 800e794:	20001128 	.word	0x20001128
 800e798:	20001b2c 	.word	0x20001b2c
 800e79c:	20001dac 	.word	0x20001dac
 800e7a0:	20001db4 	.word	0x20001db4
                // Reset a[axis] at start of calibration
                if (InflightcalibratingA == 50)
 800e7a4:	4b5d      	ldr	r3, [pc, #372]	; (800e91c <ACC_Common+0x2dc>)
 800e7a6:	881b      	ldrh	r3, [r3, #0]
 800e7a8:	2b32      	cmp	r3, #50	; 0x32
 800e7aa:	d104      	bne.n	800e7b6 <ACC_Common+0x176>
                    b[axis] = 0;
 800e7ac:	4a5c      	ldr	r2, [pc, #368]	; (800e920 <ACC_Common+0x2e0>)
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2100      	movs	r1, #0
 800e7b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                // Sum up 50 readings
                b[axis] += accADC[axis];
 800e7b6:	4a5a      	ldr	r2, [pc, #360]	; (800e920 <ACC_Common+0x2e0>)
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7be:	4959      	ldr	r1, [pc, #356]	; (800e924 <ACC_Common+0x2e4>)
 800e7c0:	687a      	ldr	r2, [r7, #4]
 800e7c2:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800e7c6:	441a      	add	r2, r3
 800e7c8:	4955      	ldr	r1, [pc, #340]	; (800e920 <ACC_Common+0x2e0>)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Clear global variables for next reading
                accADC[axis] = 0;
 800e7d0:	4a54      	ldr	r2, [pc, #336]	; (800e924 <ACC_Common+0x2e4>)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2100      	movs	r1, #0
 800e7d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                mcfg.accZero[axis] = 0;
 800e7da:	4a53      	ldr	r2, [pc, #332]	; (800e928 <ACC_Common+0x2e8>)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	33b4      	adds	r3, #180	; 0xb4
 800e7e0:	005b      	lsls	r3, r3, #1
 800e7e2:	4413      	add	r3, r2
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	805a      	strh	r2, [r3, #2]
            for (axis = 0; axis < 3; axis++) {
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	607b      	str	r3, [r7, #4]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2b02      	cmp	r3, #2
 800e7f2:	ddd7      	ble.n	800e7a4 <ACC_Common+0x164>
            }
            // all values are measured
            if (InflightcalibratingA == 1) {
 800e7f4:	4b49      	ldr	r3, [pc, #292]	; (800e91c <ACC_Common+0x2dc>)
 800e7f6:	881b      	ldrh	r3, [r3, #0]
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d124      	bne.n	800e846 <ACC_Common+0x206>
                AccInflightCalibrationActive = false;
 800e7fc:	4b4b      	ldr	r3, [pc, #300]	; (800e92c <ACC_Common+0x2ec>)
 800e7fe:	2200      	movs	r2, #0
 800e800:	701a      	strb	r2, [r3, #0]
                AccInflightCalibrationMeasurementDone = true;
 800e802:	4b4b      	ldr	r3, [pc, #300]	; (800e930 <ACC_Common+0x2f0>)
 800e804:	2201      	movs	r2, #1
 800e806:	701a      	strb	r2, [r3, #0]
                buzzer(BUZZER_ACC_CALIBRATION);      // buzzer for indicatiing the end of calibration
 800e808:	200a      	movs	r0, #10
 800e80a:	f7f5 fbfd 	bl	8004008 <buzzer>
                // recover saved values to maintain current flight behavior until new values are transferred
                mcfg.accZero[ROLL] = accZero_saved[ROLL];
 800e80e:	4b49      	ldr	r3, [pc, #292]	; (800e934 <ACC_Common+0x2f4>)
 800e810:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e814:	4b44      	ldr	r3, [pc, #272]	; (800e928 <ACC_Common+0x2e8>)
 800e816:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
                mcfg.accZero[PITCH] = accZero_saved[PITCH];
 800e81a:	4b46      	ldr	r3, [pc, #280]	; (800e934 <ACC_Common+0x2f4>)
 800e81c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e820:	4b41      	ldr	r3, [pc, #260]	; (800e928 <ACC_Common+0x2e8>)
 800e822:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
                mcfg.accZero[YAW] = accZero_saved[YAW];
 800e826:	4b43      	ldr	r3, [pc, #268]	; (800e934 <ACC_Common+0x2f4>)
 800e828:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800e82c:	4b3e      	ldr	r3, [pc, #248]	; (800e928 <ACC_Common+0x2e8>)
 800e82e:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
                cfg.angleTrim[ROLL] = angleTrim_saved[ROLL];
 800e832:	4b41      	ldr	r3, [pc, #260]	; (800e938 <ACC_Common+0x2f8>)
 800e834:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e838:	4b40      	ldr	r3, [pc, #256]	; (800e93c <ACC_Common+0x2fc>)
 800e83a:	859a      	strh	r2, [r3, #44]	; 0x2c
                cfg.angleTrim[PITCH] = angleTrim_saved[PITCH];
 800e83c:	4b3e      	ldr	r3, [pc, #248]	; (800e938 <ACC_Common+0x2f8>)
 800e83e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e842:	4b3e      	ldr	r3, [pc, #248]	; (800e93c <ACC_Common+0x2fc>)
 800e844:	85da      	strh	r2, [r3, #46]	; 0x2e
            }
            InflightcalibratingA--;
 800e846:	4b35      	ldr	r3, [pc, #212]	; (800e91c <ACC_Common+0x2dc>)
 800e848:	881b      	ldrh	r3, [r3, #0]
 800e84a:	3b01      	subs	r3, #1
 800e84c:	b29a      	uxth	r2, r3
 800e84e:	4b33      	ldr	r3, [pc, #204]	; (800e91c <ACC_Common+0x2dc>)
 800e850:	801a      	strh	r2, [r3, #0]
        }
        // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
        if (AccInflightCalibrationSavetoEEProm) {      // the copter is landed, disarmed and the combo has been done again
 800e852:	4b3b      	ldr	r3, [pc, #236]	; (800e940 <ACC_Common+0x300>)
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d035      	beq.n	800e8c6 <ACC_Common+0x286>
            AccInflightCalibrationSavetoEEProm = false;
 800e85a:	4b39      	ldr	r3, [pc, #228]	; (800e940 <ACC_Common+0x300>)
 800e85c:	2200      	movs	r2, #0
 800e85e:	701a      	strb	r2, [r3, #0]
            mcfg.accZero[ROLL] = b[ROLL] / 50;
 800e860:	4b2f      	ldr	r3, [pc, #188]	; (800e920 <ACC_Common+0x2e0>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	4a37      	ldr	r2, [pc, #220]	; (800e944 <ACC_Common+0x304>)
 800e866:	fb82 1203 	smull	r1, r2, r2, r3
 800e86a:	1112      	asrs	r2, r2, #4
 800e86c:	17db      	asrs	r3, r3, #31
 800e86e:	1ad3      	subs	r3, r2, r3
 800e870:	b21a      	sxth	r2, r3
 800e872:	4b2d      	ldr	r3, [pc, #180]	; (800e928 <ACC_Common+0x2e8>)
 800e874:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
            mcfg.accZero[PITCH] = b[PITCH] / 50;
 800e878:	4b29      	ldr	r3, [pc, #164]	; (800e920 <ACC_Common+0x2e0>)
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	4a31      	ldr	r2, [pc, #196]	; (800e944 <ACC_Common+0x304>)
 800e87e:	fb82 1203 	smull	r1, r2, r2, r3
 800e882:	1112      	asrs	r2, r2, #4
 800e884:	17db      	asrs	r3, r3, #31
 800e886:	1ad3      	subs	r3, r2, r3
 800e888:	b21a      	sxth	r2, r3
 800e88a:	4b27      	ldr	r3, [pc, #156]	; (800e928 <ACC_Common+0x2e8>)
 800e88c:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
            mcfg.accZero[YAW] = b[YAW] / 50 - acc_1G;    // for nunchuk 200=1G
 800e890:	4b23      	ldr	r3, [pc, #140]	; (800e920 <ACC_Common+0x2e0>)
 800e892:	689b      	ldr	r3, [r3, #8]
 800e894:	4a2b      	ldr	r2, [pc, #172]	; (800e944 <ACC_Common+0x304>)
 800e896:	fb82 1203 	smull	r1, r2, r2, r3
 800e89a:	1112      	asrs	r2, r2, #4
 800e89c:	17db      	asrs	r3, r3, #31
 800e89e:	1ad3      	subs	r3, r2, r3
 800e8a0:	b29a      	uxth	r2, r3
 800e8a2:	4b29      	ldr	r3, [pc, #164]	; (800e948 <ACC_Common+0x308>)
 800e8a4:	881b      	ldrh	r3, [r3, #0]
 800e8a6:	1ad3      	subs	r3, r2, r3
 800e8a8:	b29b      	uxth	r3, r3
 800e8aa:	b21a      	sxth	r2, r3
 800e8ac:	4b1e      	ldr	r3, [pc, #120]	; (800e928 <ACC_Common+0x2e8>)
 800e8ae:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
            cfg.angleTrim[ROLL] = 0;
 800e8b2:	4b22      	ldr	r3, [pc, #136]	; (800e93c <ACC_Common+0x2fc>)
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	859a      	strh	r2, [r3, #44]	; 0x2c
            cfg.angleTrim[PITCH] = 0;
 800e8b8:	4b20      	ldr	r3, [pc, #128]	; (800e93c <ACC_Common+0x2fc>)
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	85da      	strh	r2, [r3, #46]	; 0x2e
            writeEEPROM(1, true);          // write accZero in EEPROM
 800e8be:	2101      	movs	r1, #1
 800e8c0:	2001      	movs	r0, #1
 800e8c2:	f7f7 ffaf 	bl	8006824 <writeEEPROM>
        }
    }

    accADC[ROLL] -= mcfg.accZero[ROLL];
 800e8c6:	4b17      	ldr	r3, [pc, #92]	; (800e924 <ACC_Common+0x2e4>)
 800e8c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e8cc:	b29a      	uxth	r2, r3
 800e8ce:	4b16      	ldr	r3, [pc, #88]	; (800e928 <ACC_Common+0x2e8>)
 800e8d0:	f9b3 316a 	ldrsh.w	r3, [r3, #362]	; 0x16a
 800e8d4:	b29b      	uxth	r3, r3
 800e8d6:	1ad3      	subs	r3, r2, r3
 800e8d8:	b29b      	uxth	r3, r3
 800e8da:	b21a      	sxth	r2, r3
 800e8dc:	4b11      	ldr	r3, [pc, #68]	; (800e924 <ACC_Common+0x2e4>)
 800e8de:	801a      	strh	r2, [r3, #0]
    accADC[PITCH] -= mcfg.accZero[PITCH];
 800e8e0:	4b10      	ldr	r3, [pc, #64]	; (800e924 <ACC_Common+0x2e4>)
 800e8e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e8e6:	b29a      	uxth	r2, r3
 800e8e8:	4b0f      	ldr	r3, [pc, #60]	; (800e928 <ACC_Common+0x2e8>)
 800e8ea:	f9b3 316c 	ldrsh.w	r3, [r3, #364]	; 0x16c
 800e8ee:	b29b      	uxth	r3, r3
 800e8f0:	1ad3      	subs	r3, r2, r3
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	b21a      	sxth	r2, r3
 800e8f6:	4b0b      	ldr	r3, [pc, #44]	; (800e924 <ACC_Common+0x2e4>)
 800e8f8:	805a      	strh	r2, [r3, #2]
    accADC[YAW] -= mcfg.accZero[YAW];
 800e8fa:	4b0a      	ldr	r3, [pc, #40]	; (800e924 <ACC_Common+0x2e4>)
 800e8fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e900:	b29a      	uxth	r2, r3
 800e902:	4b09      	ldr	r3, [pc, #36]	; (800e928 <ACC_Common+0x2e8>)
 800e904:	f9b3 316e 	ldrsh.w	r3, [r3, #366]	; 0x16e
 800e908:	b29b      	uxth	r3, r3
 800e90a:	1ad3      	subs	r3, r2, r3
 800e90c:	b29b      	uxth	r3, r3
 800e90e:	b21a      	sxth	r2, r3
 800e910:	4b04      	ldr	r3, [pc, #16]	; (800e924 <ACC_Common+0x2e4>)
 800e912:	809a      	strh	r2, [r3, #4]
}
 800e914:	bf00      	nop
 800e916:	3708      	adds	r7, #8
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	20001b2c 	.word	0x20001b2c
 800e920:	20001db8 	.word	0x20001db8
 800e924:	20001710 	.word	0x20001710
 800e928:	20000bbc 	.word	0x20000bbc
 800e92c:	20001b2b 	.word	0x20001b2b
 800e930:	20001b29 	.word	0x20001b29
 800e934:	20001dac 	.word	0x20001dac
 800e938:	20001db4 	.word	0x20001db4
 800e93c:	20001128 	.word	0x20001128
 800e940:	20001b2a 	.word	0x20001b2a
 800e944:	51eb851f 	.word	0x51eb851f
 800e948:	2000005a 	.word	0x2000005a

0800e94c <ACC_getADC>:

BOOL ACC_getADC(void)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	af00      	add	r7, sp, #0
    if (sensor_set.acc.read(accADC)) {
 800e950:	4b06      	ldr	r3, [pc, #24]	; (800e96c <ACC_getADC+0x20>)
 800e952:	6a1b      	ldr	r3, [r3, #32]
 800e954:	4806      	ldr	r0, [pc, #24]	; (800e970 <ACC_getADC+0x24>)
 800e956:	4798      	blx	r3
 800e958:	4603      	mov	r3, r0
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d003      	beq.n	800e966 <ACC_getADC+0x1a>
    	ACC_Common();
 800e95e:	f7ff fe6f 	bl	800e640 <ACC_Common>
    	return TRUE;
 800e962:	2301      	movs	r3, #1
 800e964:	e000      	b.n	800e968 <ACC_getADC+0x1c>
    }
	return FALSE;
 800e966:	2300      	movs	r3, #0
}
 800e968:	4618      	mov	r0, r3
 800e96a:	bd80      	pop	{r7, pc}
 800e96c:	20001cc0 	.word	0x20001cc0
 800e970:	20001710 	.word	0x20001710

0800e974 <Baro_Common>:

#ifdef BARO
static void Baro_Common(void)
{
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
    static int32_t baroHistTab[BARO_TAB_SIZE_MAX];
    static int baroHistIdx = 0;
    int indexplus1;

    indexplus1 = (baroHistIdx + 1);
 800e97a:	4b18      	ldr	r3, [pc, #96]	; (800e9dc <Baro_Common+0x68>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	3301      	adds	r3, #1
 800e980:	607b      	str	r3, [r7, #4]
    if (indexplus1 >= cfg.baro_tab_size)
 800e982:	4b17      	ldr	r3, [pc, #92]	; (800e9e0 <Baro_Common+0x6c>)
 800e984:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e988:	461a      	mov	r2, r3
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	4293      	cmp	r3, r2
 800e98e:	db01      	blt.n	800e994 <Baro_Common+0x20>
        indexplus1 = 0;
 800e990:	2300      	movs	r3, #0
 800e992:	607b      	str	r3, [r7, #4]
    baroHistTab[baroHistIdx] = baroPressure;
 800e994:	4b11      	ldr	r3, [pc, #68]	; (800e9dc <Baro_Common+0x68>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	4a12      	ldr	r2, [pc, #72]	; (800e9e4 <Baro_Common+0x70>)
 800e99a:	6812      	ldr	r2, [r2, #0]
 800e99c:	4912      	ldr	r1, [pc, #72]	; (800e9e8 <Baro_Common+0x74>)
 800e99e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    baroPressureSum += baroHistTab[baroHistIdx];
 800e9a2:	4b0e      	ldr	r3, [pc, #56]	; (800e9dc <Baro_Common+0x68>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	4a10      	ldr	r2, [pc, #64]	; (800e9e8 <Baro_Common+0x74>)
 800e9a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9ac:	461a      	mov	r2, r3
 800e9ae:	4b0f      	ldr	r3, [pc, #60]	; (800e9ec <Baro_Common+0x78>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	4413      	add	r3, r2
 800e9b4:	4a0d      	ldr	r2, [pc, #52]	; (800e9ec <Baro_Common+0x78>)
 800e9b6:	6013      	str	r3, [r2, #0]
    baroPressureSum -= baroHistTab[indexplus1];
 800e9b8:	4b0c      	ldr	r3, [pc, #48]	; (800e9ec <Baro_Common+0x78>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	490a      	ldr	r1, [pc, #40]	; (800e9e8 <Baro_Common+0x74>)
 800e9be:	687a      	ldr	r2, [r7, #4]
 800e9c0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e9c4:	1a9b      	subs	r3, r3, r2
 800e9c6:	4a09      	ldr	r2, [pc, #36]	; (800e9ec <Baro_Common+0x78>)
 800e9c8:	6013      	str	r3, [r2, #0]
    baroHistIdx = indexplus1;
 800e9ca:	4a04      	ldr	r2, [pc, #16]	; (800e9dc <Baro_Common+0x68>)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6013      	str	r3, [r2, #0]
}
 800e9d0:	bf00      	nop
 800e9d2:	370c      	adds	r7, #12
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9da:	4770      	bx	lr
 800e9dc:	20001dc4 	.word	0x20001dc4
 800e9e0:	20001128 	.word	0x20001128
 800e9e4:	20001cb8 	.word	0x20001cb8
 800e9e8:	20001dc8 	.word	0x20001dc8
 800e9ec:	20001740 	.word	0x20001740

0800e9f0 <evtBaroRead>:

void evtBaroRead(int32_t pressure, float temperature)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b082      	sub	sp, #8
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	ed87 0a00 	vstr	s0, [r7]
    baroPressure = pressure;
 800e9fc:	4a0c      	ldr	r2, [pc, #48]	; (800ea30 <evtBaroRead+0x40>)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6013      	str	r3, [r2, #0]
    baroTemperature = temperature * 100;
 800ea02:	edd7 7a00 	vldr	s15, [r7]
 800ea06:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800ea34 <evtBaroRead+0x44>
 800ea0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ea12:	ee17 2a90 	vmov	r2, s15
 800ea16:	4b08      	ldr	r3, [pc, #32]	; (800ea38 <evtBaroRead+0x48>)
 800ea18:	601a      	str	r2, [r3, #0]
    Baro_Common();
 800ea1a:	f7ff ffab 	bl	800e974 <Baro_Common>
    sensor_set.baro.p_b_task->immediate = TRUE;
 800ea1e:	4b07      	ldr	r3, [pc, #28]	; (800ea3c <evtBaroRead+0x4c>)
 800ea20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea22:	2201      	movs	r2, #1
 800ea24:	705a      	strb	r2, [r3, #1]
}
 800ea26:	bf00      	nop
 800ea28:	3708      	adds	r7, #8
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	20001cb8 	.word	0x20001cb8
 800ea34:	42c80000 	.word	0x42c80000
 800ea38:	20001cbc 	.word	0x20001cbc
 800ea3c:	20001cc0 	.word	0x20001cc0

0800ea40 <devClear>:
    float m_oldM, m_newM, m_oldS, m_newS;
    int m_n;
} stdev_t;

static void devClear(stdev_t *dev)
{
 800ea40:	b480      	push	{r7}
 800ea42:	b083      	sub	sp, #12
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
    dev->m_n = 0;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	611a      	str	r2, [r3, #16]
}
 800ea4e:	bf00      	nop
 800ea50:	370c      	adds	r7, #12
 800ea52:	46bd      	mov	sp, r7
 800ea54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea58:	4770      	bx	lr

0800ea5a <devPush>:

static void devPush(stdev_t *dev, float x)
{
 800ea5a:	b480      	push	{r7}
 800ea5c:	b083      	sub	sp, #12
 800ea5e:	af00      	add	r7, sp, #0
 800ea60:	6078      	str	r0, [r7, #4]
 800ea62:	ed87 0a00 	vstr	s0, [r7]
    dev->m_n++;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	691b      	ldr	r3, [r3, #16]
 800ea6a:	1c5a      	adds	r2, r3, #1
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	611a      	str	r2, [r3, #16]
    if (dev->m_n == 1) {
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	691b      	ldr	r3, [r3, #16]
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	d10b      	bne.n	800ea90 <devPush+0x36>
        dev->m_oldM = dev->m_newM = x;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	683a      	ldr	r2, [r7, #0]
 800ea7c:	605a      	str	r2, [r3, #4]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	685a      	ldr	r2, [r3, #4]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	601a      	str	r2, [r3, #0]
        dev->m_oldS = 0.0f;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f04f 0200 	mov.w	r2, #0
 800ea8c:	609a      	str	r2, [r3, #8]
        dev->m_newM = dev->m_oldM + (x - dev->m_oldM) / dev->m_n;
        dev->m_newS = dev->m_oldS + (x - dev->m_oldM) * (x - dev->m_newM);
        dev->m_oldM = dev->m_newM;
        dev->m_oldS = dev->m_newS;
    }
}
 800ea8e:	e036      	b.n	800eafe <devPush+0xa4>
        dev->m_newM = dev->m_oldM + (x - dev->m_oldM) / dev->m_n;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	ed93 7a00 	vldr	s14, [r3]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	edd3 7a00 	vldr	s15, [r3]
 800ea9c:	edd7 6a00 	vldr	s13, [r7]
 800eaa0:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	691b      	ldr	r3, [r3, #16]
 800eaa8:	ee07 3a90 	vmov	s15, r3
 800eaac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800eab0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800eab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	edc3 7a01 	vstr	s15, [r3, #4]
        dev->m_newS = dev->m_oldS + (x - dev->m_oldM) * (x - dev->m_newM);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	ed93 7a02 	vldr	s14, [r3, #8]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	edd3 7a00 	vldr	s15, [r3]
 800eaca:	edd7 6a00 	vldr	s13, [r7]
 800eace:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	edd3 7a01 	vldr	s15, [r3, #4]
 800ead8:	ed97 6a00 	vldr	s12, [r7]
 800eadc:	ee76 7a67 	vsub.f32	s15, s12, s15
 800eae0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eae4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	edc3 7a03 	vstr	s15, [r3, #12]
        dev->m_oldM = dev->m_newM;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	685a      	ldr	r2, [r3, #4]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	601a      	str	r2, [r3, #0]
        dev->m_oldS = dev->m_newS;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	68da      	ldr	r2, [r3, #12]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	609a      	str	r2, [r3, #8]
}
 800eafe:	bf00      	nop
 800eb00:	370c      	adds	r7, #12
 800eb02:	46bd      	mov	sp, r7
 800eb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb08:	4770      	bx	lr
	...

0800eb0c <devVariance>:

static float devVariance(stdev_t *dev)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
    return ((dev->m_n > 1) ? dev->m_newS / (dev->m_n - 1) : 0.0f);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	691b      	ldr	r3, [r3, #16]
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	dd0c      	ble.n	800eb36 <devVariance+0x2a>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	ed93 7a03 	vldr	s14, [r3, #12]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	691b      	ldr	r3, [r3, #16]
 800eb26:	3b01      	subs	r3, #1
 800eb28:	ee07 3a90 	vmov	s15, r3
 800eb2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb30:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800eb34:	e001      	b.n	800eb3a <devVariance+0x2e>
 800eb36:	eddf 6a05 	vldr	s13, [pc, #20]	; 800eb4c <devVariance+0x40>
 800eb3a:	eef0 7a66 	vmov.f32	s15, s13
}
 800eb3e:	eeb0 0a67 	vmov.f32	s0, s15
 800eb42:	370c      	adds	r7, #12
 800eb44:	46bd      	mov	sp, r7
 800eb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4a:	4770      	bx	lr
 800eb4c:	00000000 	.word	0x00000000

0800eb50 <devStandardDeviation>:

static float devStandardDeviation(stdev_t *dev)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
    return sqrtf(devVariance(dev));
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f7ff ffd7 	bl	800eb0c <devVariance>
 800eb5e:	eef0 7a40 	vmov.f32	s15, s0
 800eb62:	eeb0 0a67 	vmov.f32	s0, s15
 800eb66:	f013 fd6b 	bl	8022640 <sqrtf>
 800eb6a:	eef0 7a40 	vmov.f32	s15, s0
}
 800eb6e:	eeb0 0a67 	vmov.f32	s0, s15
 800eb72:	3708      	adds	r7, #8
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <GYRO_Common>:

static void GYRO_Common(void)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b086      	sub	sp, #24
 800eb7c:	af04      	add	r7, sp, #16
    int axis;
    static int32_t g[3];
    static stdev_t var[3];

    if (calibratingG > 0) {
 800eb7e:	4b75      	ldr	r3, [pc, #468]	; (800ed54 <GYRO_Common+0x1dc>)
 800eb80:	881b      	ldrh	r3, [r3, #0]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	f000 80c6 	beq.w	800ed14 <GYRO_Common+0x19c>
        for (axis = 0; axis < 3; axis++) {
 800eb88:	2300      	movs	r3, #0
 800eb8a:	607b      	str	r3, [r7, #4]
 800eb8c:	e0a3      	b.n	800ecd6 <GYRO_Common+0x15e>
            // Reset g[axis] at start of calibration
            if (calibratingG == CALIBRATING_GYRO_CYCLES) {
 800eb8e:	4b71      	ldr	r3, [pc, #452]	; (800ed54 <GYRO_Common+0x1dc>)
 800eb90:	881b      	ldrh	r3, [r3, #0]
 800eb92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eb96:	d10e      	bne.n	800ebb6 <GYRO_Common+0x3e>
                g[axis] = 0;
 800eb98:	4a6f      	ldr	r2, [pc, #444]	; (800ed58 <GYRO_Common+0x1e0>)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2100      	movs	r1, #0
 800eb9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                devClear(&var[axis]);
 800eba2:	687a      	ldr	r2, [r7, #4]
 800eba4:	4613      	mov	r3, r2
 800eba6:	009b      	lsls	r3, r3, #2
 800eba8:	4413      	add	r3, r2
 800ebaa:	009b      	lsls	r3, r3, #2
 800ebac:	4a6b      	ldr	r2, [pc, #428]	; (800ed5c <GYRO_Common+0x1e4>)
 800ebae:	4413      	add	r3, r2
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7ff ff45 	bl	800ea40 <devClear>
            }
            // Sum up 1000 readings
            g[axis] += gyroADC[axis];
 800ebb6:	4a68      	ldr	r2, [pc, #416]	; (800ed58 <GYRO_Common+0x1e0>)
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebbe:	4968      	ldr	r1, [pc, #416]	; (800ed60 <GYRO_Common+0x1e8>)
 800ebc0:	687a      	ldr	r2, [r7, #4]
 800ebc2:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800ebc6:	441a      	add	r2, r3
 800ebc8:	4963      	ldr	r1, [pc, #396]	; (800ed58 <GYRO_Common+0x1e0>)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            devPush(&var[axis], (float)gyroADC[axis]);
 800ebd0:	687a      	ldr	r2, [r7, #4]
 800ebd2:	4613      	mov	r3, r2
 800ebd4:	009b      	lsls	r3, r3, #2
 800ebd6:	4413      	add	r3, r2
 800ebd8:	009b      	lsls	r3, r3, #2
 800ebda:	4a60      	ldr	r2, [pc, #384]	; (800ed5c <GYRO_Common+0x1e4>)
 800ebdc:	441a      	add	r2, r3
 800ebde:	4960      	ldr	r1, [pc, #384]	; (800ed60 <GYRO_Common+0x1e8>)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800ebe6:	ee07 3a90 	vmov	s15, r3
 800ebea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ebee:	eeb0 0a67 	vmov.f32	s0, s15
 800ebf2:	4610      	mov	r0, r2
 800ebf4:	f7ff ff31 	bl	800ea5a <devPush>
            // Clear global variables for next reading
            gyroADC[axis] = 0;
 800ebf8:	4a59      	ldr	r2, [pc, #356]	; (800ed60 <GYRO_Common+0x1e8>)
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2100      	movs	r1, #0
 800ebfe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            gyroZero[axis] = 0;
 800ec02:	4a58      	ldr	r2, [pc, #352]	; (800ed64 <GYRO_Common+0x1ec>)
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2100      	movs	r1, #0
 800ec08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (calibratingG == 1) {
 800ec0c:	4b51      	ldr	r3, [pc, #324]	; (800ed54 <GYRO_Common+0x1dc>)
 800ec0e:	881b      	ldrh	r3, [r3, #0]
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	d15d      	bne.n	800ecd0 <GYRO_Common+0x158>
                float dev = devStandardDeviation(&var[axis]);
 800ec14:	687a      	ldr	r2, [r7, #4]
 800ec16:	4613      	mov	r3, r2
 800ec18:	009b      	lsls	r3, r3, #2
 800ec1a:	4413      	add	r3, r2
 800ec1c:	009b      	lsls	r3, r3, #2
 800ec1e:	4a4f      	ldr	r2, [pc, #316]	; (800ed5c <GYRO_Common+0x1e4>)
 800ec20:	4413      	add	r3, r2
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7ff ff94 	bl	800eb50 <devStandardDeviation>
 800ec28:	ed87 0a00 	vstr	s0, [r7]
                // check deviation and startover if idiot was moving the model
                if (mcfg.moron_threshold && dev > mcfg.moron_threshold) {
 800ec2c:	4b4e      	ldr	r3, [pc, #312]	; (800ed68 <GYRO_Common+0x1f0>)
 800ec2e:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d036      	beq.n	800eca4 <GYRO_Common+0x12c>
 800ec36:	4b4c      	ldr	r3, [pc, #304]	; (800ed68 <GYRO_Common+0x1f0>)
 800ec38:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800ec3c:	ee07 3a90 	vmov	s15, r3
 800ec40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec44:	ed97 7a00 	vldr	s14, [r7]
 800ec48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ec4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec50:	dd28      	ble.n	800eca4 <GYRO_Common+0x12c>
#ifndef __PIF_NO_LOG__
                    pifLog_Printf(LT_INFO, "Gyro Calib[%u]: %f > %d", axis, dev, mcfg.moron_threshold);
 800ec52:	6838      	ldr	r0, [r7, #0]
 800ec54:	f7f1 fc36 	bl	80004c4 <__aeabi_f2d>
 800ec58:	4602      	mov	r2, r0
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	4942      	ldr	r1, [pc, #264]	; (800ed68 <GYRO_Common+0x1f0>)
 800ec5e:	f891 1166 	ldrb.w	r1, [r1, #358]	; 0x166
 800ec62:	9102      	str	r1, [sp, #8]
 800ec64:	e9cd 2300 	strd	r2, r3, [sp]
 800ec68:	687a      	ldr	r2, [r7, #4]
 800ec6a:	4940      	ldr	r1, [pc, #256]	; (800ed6c <GYRO_Common+0x1f4>)
 800ec6c:	2002      	movs	r0, #2
 800ec6e:	f004 fc91 	bl	8013594 <pifLog_Printf>
#endif
                    calibratingG = CALIBRATING_GYRO_CYCLES;
 800ec72:	4b38      	ldr	r3, [pc, #224]	; (800ed54 <GYRO_Common+0x1dc>)
 800ec74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ec78:	801a      	strh	r2, [r3, #0]
                    devClear(&var[0]);
 800ec7a:	4838      	ldr	r0, [pc, #224]	; (800ed5c <GYRO_Common+0x1e4>)
 800ec7c:	f7ff fee0 	bl	800ea40 <devClear>
                    devClear(&var[1]);
 800ec80:	483b      	ldr	r0, [pc, #236]	; (800ed70 <GYRO_Common+0x1f8>)
 800ec82:	f7ff fedd 	bl	800ea40 <devClear>
                    devClear(&var[2]);
 800ec86:	483b      	ldr	r0, [pc, #236]	; (800ed74 <GYRO_Common+0x1fc>)
 800ec88:	f7ff feda 	bl	800ea40 <devClear>
                    g[0] = g[1] = g[2] = 0;
 800ec8c:	4b32      	ldr	r3, [pc, #200]	; (800ed58 <GYRO_Common+0x1e0>)
 800ec8e:	2200      	movs	r2, #0
 800ec90:	609a      	str	r2, [r3, #8]
 800ec92:	4b31      	ldr	r3, [pc, #196]	; (800ed58 <GYRO_Common+0x1e0>)
 800ec94:	689b      	ldr	r3, [r3, #8]
 800ec96:	4a30      	ldr	r2, [pc, #192]	; (800ed58 <GYRO_Common+0x1e0>)
 800ec98:	6053      	str	r3, [r2, #4]
 800ec9a:	4b2f      	ldr	r3, [pc, #188]	; (800ed58 <GYRO_Common+0x1e0>)
 800ec9c:	685b      	ldr	r3, [r3, #4]
 800ec9e:	4a2e      	ldr	r2, [pc, #184]	; (800ed58 <GYRO_Common+0x1e0>)
 800eca0:	6013      	str	r3, [r2, #0]
                    continue;
 800eca2:	e015      	b.n	800ecd0 <GYRO_Common+0x158>
                }
                gyroZero[axis] = (g[axis] + (CALIBRATING_GYRO_CYCLES / 2)) / CALIBRATING_GYRO_CYCLES;
 800eca4:	4a2c      	ldr	r2, [pc, #176]	; (800ed58 <GYRO_Common+0x1e0>)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ecb0:	4a31      	ldr	r2, [pc, #196]	; (800ed78 <GYRO_Common+0x200>)
 800ecb2:	fb82 1203 	smull	r1, r2, r2, r3
 800ecb6:	1192      	asrs	r2, r2, #6
 800ecb8:	17db      	asrs	r3, r3, #31
 800ecba:	1ad3      	subs	r3, r2, r3
 800ecbc:	b219      	sxth	r1, r3
 800ecbe:	4a29      	ldr	r2, [pc, #164]	; (800ed64 <GYRO_Common+0x1ec>)
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                blinkLED(10, 15, 1);
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	210f      	movs	r1, #15
 800ecca:	200a      	movs	r0, #10
 800eccc:	f7fd f98a 	bl	800bfe4 <blinkLED>
        for (axis = 0; axis < 3; axis++) {
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	3301      	adds	r3, #1
 800ecd4:	607b      	str	r3, [r7, #4]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2b02      	cmp	r3, #2
 800ecda:	f77f af58 	ble.w	800eb8e <GYRO_Common+0x16>
            }
        }
        calibratingG--;
 800ecde:	4b1d      	ldr	r3, [pc, #116]	; (800ed54 <GYRO_Common+0x1dc>)
 800ece0:	881b      	ldrh	r3, [r3, #0]
 800ece2:	3b01      	subs	r3, #1
 800ece4:	b29a      	uxth	r2, r3
 800ece6:	4b1b      	ldr	r3, [pc, #108]	; (800ed54 <GYRO_Common+0x1dc>)
 800ece8:	801a      	strh	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
        if (!calibratingG) pifLog_Printf(LT_INFO, "Gyro Zero: %d %d %d", gyroZero[X], gyroZero[Y], gyroZero[Z]);
 800ecea:	4b1a      	ldr	r3, [pc, #104]	; (800ed54 <GYRO_Common+0x1dc>)
 800ecec:	881b      	ldrh	r3, [r3, #0]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d110      	bne.n	800ed14 <GYRO_Common+0x19c>
 800ecf2:	4b1c      	ldr	r3, [pc, #112]	; (800ed64 <GYRO_Common+0x1ec>)
 800ecf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ecf8:	461a      	mov	r2, r3
 800ecfa:	4b1a      	ldr	r3, [pc, #104]	; (800ed64 <GYRO_Common+0x1ec>)
 800ecfc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ed00:	4619      	mov	r1, r3
 800ed02:	4b18      	ldr	r3, [pc, #96]	; (800ed64 <GYRO_Common+0x1ec>)
 800ed04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ed08:	9300      	str	r3, [sp, #0]
 800ed0a:	460b      	mov	r3, r1
 800ed0c:	491b      	ldr	r1, [pc, #108]	; (800ed7c <GYRO_Common+0x204>)
 800ed0e:	2002      	movs	r0, #2
 800ed10:	f004 fc40 	bl	8013594 <pifLog_Printf>
#endif
    }
    for (axis = 0; axis < 3; axis++)
 800ed14:	2300      	movs	r3, #0
 800ed16:	607b      	str	r3, [r7, #4]
 800ed18:	e013      	b.n	800ed42 <GYRO_Common+0x1ca>
        gyroADC[axis] -= gyroZero[axis];
 800ed1a:	4a11      	ldr	r2, [pc, #68]	; (800ed60 <GYRO_Common+0x1e8>)
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ed22:	b29a      	uxth	r2, r3
 800ed24:	490f      	ldr	r1, [pc, #60]	; (800ed64 <GYRO_Common+0x1ec>)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800ed2c:	b29b      	uxth	r3, r3
 800ed2e:	1ad3      	subs	r3, r2, r3
 800ed30:	b29b      	uxth	r3, r3
 800ed32:	b219      	sxth	r1, r3
 800ed34:	4a0a      	ldr	r2, [pc, #40]	; (800ed60 <GYRO_Common+0x1e8>)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	3301      	adds	r3, #1
 800ed40:	607b      	str	r3, [r7, #4]
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2b02      	cmp	r3, #2
 800ed46:	dde8      	ble.n	800ed1a <GYRO_Common+0x1a2>
}
 800ed48:	bf00      	nop
 800ed4a:	bf00      	nop
 800ed4c:	3708      	adds	r7, #8
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	20001cb2 	.word	0x20001cb2
 800ed58:	20001e88 	.word	0x20001e88
 800ed5c:	20001e94 	.word	0x20001e94
 800ed60:	20001708 	.word	0x20001708
 800ed64:	20001788 	.word	0x20001788
 800ed68:	20000bbc 	.word	0x20000bbc
 800ed6c:	0802634c 	.word	0x0802634c
 800ed70:	20001ea8 	.word	0x20001ea8
 800ed74:	20001ebc 	.word	0x20001ebc
 800ed78:	10624dd3 	.word	0x10624dd3
 800ed7c:	08026364 	.word	0x08026364

0800ed80 <Gyro_getADC>:

BOOL Gyro_getADC(void)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	af00      	add	r7, sp, #0
    // range: +/- 8192; +/- 2000 deg/sec
    if (sensor_set.gyro.read(gyroADC)) {
 800ed84:	4b06      	ldr	r3, [pc, #24]	; (800eda0 <Gyro_getADC+0x20>)
 800ed86:	689b      	ldr	r3, [r3, #8]
 800ed88:	4806      	ldr	r0, [pc, #24]	; (800eda4 <Gyro_getADC+0x24>)
 800ed8a:	4798      	blx	r3
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d003      	beq.n	800ed9a <Gyro_getADC+0x1a>
    	GYRO_Common();
 800ed92:	f7ff fef1 	bl	800eb78 <GYRO_Common>
    	return TRUE;
 800ed96:	2301      	movs	r3, #1
 800ed98:	e000      	b.n	800ed9c <Gyro_getADC+0x1c>
    }
    return FALSE;
 800ed9a:	2300      	movs	r3, #0
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	20001cc0 	.word	0x20001cc0
 800eda4:	20001708 	.word	0x20001708

0800eda8 <Mag_init>:

#ifdef MAG
static uint8_t magInit = 0;

void Mag_init(void)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	af00      	add	r7, sp, #0
    // initialize and calibration. turn on led during mag calibration (calibration routine blinks it)
    actLed1State(ON);
 800edac:	2001      	movs	r0, #1
 800edae:	f7f3 f961 	bl	8002074 <actLed1State>
    if (!sensor_set.mag.init(mcfg.mag_align)) {
 800edb2:	4b0c      	ldr	r3, [pc, #48]	; (800ede4 <Mag_init+0x3c>)
 800edb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edb6:	4a0c      	ldr	r2, [pc, #48]	; (800ede8 <Mag_init+0x40>)
 800edb8:	f892 2155 	ldrb.w	r2, [r2, #341]	; 0x155
 800edbc:	4610      	mov	r0, r2
 800edbe:	4798      	blx	r3
 800edc0:	4603      	mov	r3, r0
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d106      	bne.n	800edd4 <Mag_init+0x2c>
#ifndef __PIF_NO_LOG__
    	pifLog_Printf(LT_INFO, "Mag Error:%d", pif_error);
 800edc6:	4b09      	ldr	r3, [pc, #36]	; (800edec <Mag_init+0x44>)
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	461a      	mov	r2, r3
 800edcc:	4908      	ldr	r1, [pc, #32]	; (800edf0 <Mag_init+0x48>)
 800edce:	2002      	movs	r0, #2
 800edd0:	f004 fbe0 	bl	8013594 <pifLog_Printf>
#endif
    }
    actLed1State(OFF);
 800edd4:	2000      	movs	r0, #0
 800edd6:	f7f3 f94d 	bl	8002074 <actLed1State>
    magInit = 1;
 800edda:	4b06      	ldr	r3, [pc, #24]	; (800edf4 <Mag_init+0x4c>)
 800eddc:	2201      	movs	r2, #1
 800edde:	701a      	strb	r2, [r3, #0]
}
 800ede0:	bf00      	nop
 800ede2:	bd80      	pop	{r7, pc}
 800ede4:	20001cc0 	.word	0x20001cc0
 800ede8:	20000bbc 	.word	0x20000bbc
 800edec:	200020d1 	.word	0x200020d1
 800edf0:	08026378 	.word	0x08026378
 800edf4:	20001d98 	.word	0x20001d98

0800edf8 <taskMagGetAdc>:

uint16_t taskMagGetAdc(PifTask *p_task)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b084      	sub	sp, #16
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
    uint32_t axis;

    (void)p_task;

    // Read mag sensor
    if (!sensor_set.mag.read(magADC)) {
 800ee00:	4b64      	ldr	r3, [pc, #400]	; (800ef94 <taskMagGetAdc+0x19c>)
 800ee02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee04:	4864      	ldr	r0, [pc, #400]	; (800ef98 <taskMagGetAdc+0x1a0>)
 800ee06:	4798      	blx	r3
 800ee08:	4603      	mov	r3, r0
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d104      	bne.n	800ee18 <taskMagGetAdc+0x20>
    	p_task->immediate = TRUE;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2201      	movs	r2, #1
 800ee12:	705a      	strb	r2, [r3, #1]
    	return 0;
 800ee14:	2300      	movs	r3, #0
 800ee16:	e0b8      	b.n	800ef8a <taskMagGetAdc+0x192>
    }

    if (f.CALIBRATE_MAG) {
 800ee18:	4b60      	ldr	r3, [pc, #384]	; (800ef9c <taskMagGetAdc+0x1a4>)
 800ee1a:	7b9b      	ldrb	r3, [r3, #14]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d027      	beq.n	800ee70 <taskMagGetAdc+0x78>
        tCal = (*pif_act_timer1us)();
 800ee20:	4b5f      	ldr	r3, [pc, #380]	; (800efa0 <taskMagGetAdc+0x1a8>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	4798      	blx	r3
 800ee26:	4603      	mov	r3, r0
 800ee28:	4a5e      	ldr	r2, [pc, #376]	; (800efa4 <taskMagGetAdc+0x1ac>)
 800ee2a:	6013      	str	r3, [r2, #0]
        for (axis = 0; axis < 3; axis++) {
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	60fb      	str	r3, [r7, #12]
 800ee30:	e018      	b.n	800ee64 <taskMagGetAdc+0x6c>
            mcfg.magZero[axis] = 0;
 800ee32:	4a5d      	ldr	r2, [pc, #372]	; (800efa8 <taskMagGetAdc+0x1b0>)
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	33b8      	adds	r3, #184	; 0xb8
 800ee38:	2100      	movs	r1, #0
 800ee3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            magZeroTempMin[axis] = magADC[axis];
 800ee3e:	4a56      	ldr	r2, [pc, #344]	; (800ef98 <taskMagGetAdc+0x1a0>)
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800ee46:	4a59      	ldr	r2, [pc, #356]	; (800efac <taskMagGetAdc+0x1b4>)
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            magZeroTempMax[axis] = magADC[axis];
 800ee4e:	4a52      	ldr	r2, [pc, #328]	; (800ef98 <taskMagGetAdc+0x1a0>)
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800ee56:	4a56      	ldr	r2, [pc, #344]	; (800efb0 <taskMagGetAdc+0x1b8>)
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (axis = 0; axis < 3; axis++) {
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	3301      	adds	r3, #1
 800ee62:	60fb      	str	r3, [r7, #12]
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	2b02      	cmp	r3, #2
 800ee68:	d9e3      	bls.n	800ee32 <taskMagGetAdc+0x3a>
        }
        f.CALIBRATE_MAG = 0;
 800ee6a:	4b4c      	ldr	r3, [pc, #304]	; (800ef9c <taskMagGetAdc+0x1a4>)
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	739a      	strb	r2, [r3, #14]
    }

    if (magInit) {              // we apply offset only once mag calibration is done
 800ee70:	4b50      	ldr	r3, [pc, #320]	; (800efb4 <taskMagGetAdc+0x1bc>)
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d026      	beq.n	800eec6 <taskMagGetAdc+0xce>
        magADC[X] -= mcfg.magZero[X];
 800ee78:	4b47      	ldr	r3, [pc, #284]	; (800ef98 <taskMagGetAdc+0x1a0>)
 800ee7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee7e:	b29a      	uxth	r2, r3
 800ee80:	4b49      	ldr	r3, [pc, #292]	; (800efa8 <taskMagGetAdc+0x1b0>)
 800ee82:	f9b3 3170 	ldrsh.w	r3, [r3, #368]	; 0x170
 800ee86:	b29b      	uxth	r3, r3
 800ee88:	1ad3      	subs	r3, r2, r3
 800ee8a:	b29b      	uxth	r3, r3
 800ee8c:	b21a      	sxth	r2, r3
 800ee8e:	4b42      	ldr	r3, [pc, #264]	; (800ef98 <taskMagGetAdc+0x1a0>)
 800ee90:	801a      	strh	r2, [r3, #0]
        magADC[Y] -= mcfg.magZero[Y];
 800ee92:	4b41      	ldr	r3, [pc, #260]	; (800ef98 <taskMagGetAdc+0x1a0>)
 800ee94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ee98:	b29a      	uxth	r2, r3
 800ee9a:	4b43      	ldr	r3, [pc, #268]	; (800efa8 <taskMagGetAdc+0x1b0>)
 800ee9c:	f9b3 3172 	ldrsh.w	r3, [r3, #370]	; 0x172
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	1ad3      	subs	r3, r2, r3
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	b21a      	sxth	r2, r3
 800eea8:	4b3b      	ldr	r3, [pc, #236]	; (800ef98 <taskMagGetAdc+0x1a0>)
 800eeaa:	805a      	strh	r2, [r3, #2]
        magADC[Z] -= mcfg.magZero[Z];
 800eeac:	4b3a      	ldr	r3, [pc, #232]	; (800ef98 <taskMagGetAdc+0x1a0>)
 800eeae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800eeb2:	b29a      	uxth	r2, r3
 800eeb4:	4b3c      	ldr	r3, [pc, #240]	; (800efa8 <taskMagGetAdc+0x1b0>)
 800eeb6:	f9b3 3174 	ldrsh.w	r3, [r3, #372]	; 0x174
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	1ad3      	subs	r3, r2, r3
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	b21a      	sxth	r2, r3
 800eec2:	4b35      	ldr	r3, [pc, #212]	; (800ef98 <taskMagGetAdc+0x1a0>)
 800eec4:	809a      	strh	r2, [r3, #4]
    }

    if (tCal != 0) {
 800eec6:	4b37      	ldr	r3, [pc, #220]	; (800efa4 <taskMagGetAdc+0x1ac>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d05c      	beq.n	800ef88 <taskMagGetAdc+0x190>
        if (((*pif_act_timer1us)() - tCal) < 30000000) {    // 30s: you have 30s to turn the multi in all directions
 800eece:	4b34      	ldr	r3, [pc, #208]	; (800efa0 <taskMagGetAdc+0x1a8>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	4798      	blx	r3
 800eed4:	4602      	mov	r2, r0
 800eed6:	4b33      	ldr	r3, [pc, #204]	; (800efa4 <taskMagGetAdc+0x1ac>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	1ad3      	subs	r3, r2, r3
 800eedc:	4a36      	ldr	r2, [pc, #216]	; (800efb8 <taskMagGetAdc+0x1c0>)
 800eede:	4293      	cmp	r3, r2
 800eee0:	d82f      	bhi.n	800ef42 <taskMagGetAdc+0x14a>
            actLed0Toggle();
 800eee2:	f7f3 f8b1 	bl	8002048 <actLed0Toggle>
            for (axis = 0; axis < 3; axis++) {
 800eee6:	2300      	movs	r3, #0
 800eee8:	60fb      	str	r3, [r7, #12]
 800eeea:	e026      	b.n	800ef3a <taskMagGetAdc+0x142>
                if (magADC[axis] < magZeroTempMin[axis])
 800eeec:	4a2a      	ldr	r2, [pc, #168]	; (800ef98 <taskMagGetAdc+0x1a0>)
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800eef4:	492d      	ldr	r1, [pc, #180]	; (800efac <taskMagGetAdc+0x1b4>)
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800eefc:	429a      	cmp	r2, r3
 800eefe:	da07      	bge.n	800ef10 <taskMagGetAdc+0x118>
                    magZeroTempMin[axis] = magADC[axis];
 800ef00:	4a25      	ldr	r2, [pc, #148]	; (800ef98 <taskMagGetAdc+0x1a0>)
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800ef08:	4a28      	ldr	r2, [pc, #160]	; (800efac <taskMagGetAdc+0x1b4>)
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if (magADC[axis] > magZeroTempMax[axis])
 800ef10:	4a21      	ldr	r2, [pc, #132]	; (800ef98 <taskMagGetAdc+0x1a0>)
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800ef18:	4925      	ldr	r1, [pc, #148]	; (800efb0 <taskMagGetAdc+0x1b8>)
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800ef20:	429a      	cmp	r2, r3
 800ef22:	dd07      	ble.n	800ef34 <taskMagGetAdc+0x13c>
                    magZeroTempMax[axis] = magADC[axis];
 800ef24:	4a1c      	ldr	r2, [pc, #112]	; (800ef98 <taskMagGetAdc+0x1a0>)
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800ef2c:	4a20      	ldr	r2, [pc, #128]	; (800efb0 <taskMagGetAdc+0x1b8>)
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (axis = 0; axis < 3; axis++) {
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	3301      	adds	r3, #1
 800ef38:	60fb      	str	r3, [r7, #12]
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	2b02      	cmp	r3, #2
 800ef3e:	d9d5      	bls.n	800eeec <taskMagGetAdc+0xf4>
 800ef40:	e022      	b.n	800ef88 <taskMagGetAdc+0x190>
            }
        } else {
            tCal = 0;
 800ef42:	4b18      	ldr	r3, [pc, #96]	; (800efa4 <taskMagGetAdc+0x1ac>)
 800ef44:	2200      	movs	r2, #0
 800ef46:	601a      	str	r2, [r3, #0]
            for (axis = 0; axis < 3; axis++)
 800ef48:	2300      	movs	r3, #0
 800ef4a:	60fb      	str	r3, [r7, #12]
 800ef4c:	e015      	b.n	800ef7a <taskMagGetAdc+0x182>
                mcfg.magZero[axis] = (magZeroTempMin[axis] + magZeroTempMax[axis]) / 2; // Calculate offsets
 800ef4e:	4a17      	ldr	r2, [pc, #92]	; (800efac <taskMagGetAdc+0x1b4>)
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ef56:	4619      	mov	r1, r3
 800ef58:	4a15      	ldr	r2, [pc, #84]	; (800efb0 <taskMagGetAdc+0x1b8>)
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ef60:	440b      	add	r3, r1
 800ef62:	0fda      	lsrs	r2, r3, #31
 800ef64:	4413      	add	r3, r2
 800ef66:	105b      	asrs	r3, r3, #1
 800ef68:	b219      	sxth	r1, r3
 800ef6a:	4a0f      	ldr	r2, [pc, #60]	; (800efa8 <taskMagGetAdc+0x1b0>)
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	33b8      	adds	r3, #184	; 0xb8
 800ef70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (axis = 0; axis < 3; axis++)
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	3301      	adds	r3, #1
 800ef78:	60fb      	str	r3, [r7, #12]
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2b02      	cmp	r3, #2
 800ef7e:	d9e6      	bls.n	800ef4e <taskMagGetAdc+0x156>
            writeEEPROM(1, true);
 800ef80:	2101      	movs	r1, #1
 800ef82:	2001      	movs	r0, #1
 800ef84:	f7f7 fc4e 	bl	8006824 <writeEEPROM>
        }
    }
    return 0;
 800ef88:	2300      	movs	r3, #0
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3710      	adds	r7, #16
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	20001cc0 	.word	0x20001cc0
 800ef98:	20001720 	.word	0x20001720
 800ef9c:	20001988 	.word	0x20001988
 800efa0:	200020f0 	.word	0x200020f0
 800efa4:	20001ed0 	.word	0x20001ed0
 800efa8:	20000bbc 	.word	0x20000bbc
 800efac:	20001ed4 	.word	0x20001ed4
 800efb0:	20001edc 	.word	0x20001edc
 800efb4:	20001d98 	.word	0x20001d98
 800efb8:	01c9c37f 	.word	0x01c9c37f

0800efbc <getSonarDistance>:
#ifdef SONAR

static PifNoiseFilter* p_sonar_noise_filter;

static float getSonarDistance(int32_t distance)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b082      	sub	sp, #8
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
	if (distance > 300)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800efca:	dd02      	ble.n	800efd2 <getSonarDistance+0x16>
		distance = -1;
 800efcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800efd0:	607b      	str	r3, [r7, #4]
	sonarDistance = distance;
 800efd2:	4a0d      	ldr	r2, [pc, #52]	; (800f008 <getSonarDistance+0x4c>)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6013      	str	r3, [r2, #0]

#ifdef BARO
	return baroTemperature / 100.0;
 800efd8:	4b0c      	ldr	r3, [pc, #48]	; (800f00c <getSonarDistance+0x50>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	4618      	mov	r0, r3
 800efde:	f7f1 fa5f 	bl	80004a0 <__aeabi_i2d>
 800efe2:	f04f 0200 	mov.w	r2, #0
 800efe6:	4b0a      	ldr	r3, [pc, #40]	; (800f010 <getSonarDistance+0x54>)
 800efe8:	f7f1 fbee 	bl	80007c8 <__aeabi_ddiv>
 800efec:	4602      	mov	r2, r0
 800efee:	460b      	mov	r3, r1
 800eff0:	4610      	mov	r0, r2
 800eff2:	4619      	mov	r1, r3
 800eff4:	f7f1 fda0 	bl	8000b38 <__aeabi_d2f>
 800eff8:	4603      	mov	r3, r0
 800effa:	ee07 3a90 	vmov	s15, r3
#else
	return 20.0;
#endif
}
 800effe:	eeb0 0a67 	vmov.f32	s0, s15
 800f002:	3708      	adds	r7, #8
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}
 800f008:	2000002c 	.word	0x2000002c
 800f00c:	20001cbc 	.word	0x20001cbc
 800f010:	40590000 	.word	0x40590000

0800f014 <getSonarDistanceFilter>:

static float getSonarDistanceFilter(int32_t distance)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b082      	sub	sp, #8
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
	distance = *(int32_t*)pifNoiseFilter_Process(p_sonar_noise_filter, &distance);
 800f01c:	4b15      	ldr	r3, [pc, #84]	; (800f074 <getSonarDistanceFilter+0x60>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	1d3a      	adds	r2, r7, #4
 800f022:	4611      	mov	r1, r2
 800f024:	4618      	mov	r0, r3
 800f026:	f005 ffb5 	bl	8014f94 <pifNoiseFilter_Process>
 800f02a:	4603      	mov	r3, r0
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	607b      	str	r3, [r7, #4]
	if (distance > 300)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f036:	dd02      	ble.n	800f03e <getSonarDistanceFilter+0x2a>
		distance = -1;
 800f038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f03c:	607b      	str	r3, [r7, #4]
	sonarDistance = distance;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	4a0d      	ldr	r2, [pc, #52]	; (800f078 <getSonarDistanceFilter+0x64>)
 800f042:	6013      	str	r3, [r2, #0]

#ifdef BARO
	return baroTemperature / 100.0;
 800f044:	4b0d      	ldr	r3, [pc, #52]	; (800f07c <getSonarDistanceFilter+0x68>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	4618      	mov	r0, r3
 800f04a:	f7f1 fa29 	bl	80004a0 <__aeabi_i2d>
 800f04e:	f04f 0200 	mov.w	r2, #0
 800f052:	4b0b      	ldr	r3, [pc, #44]	; (800f080 <getSonarDistanceFilter+0x6c>)
 800f054:	f7f1 fbb8 	bl	80007c8 <__aeabi_ddiv>
 800f058:	4602      	mov	r2, r0
 800f05a:	460b      	mov	r3, r1
 800f05c:	4610      	mov	r0, r2
 800f05e:	4619      	mov	r1, r3
 800f060:	f7f1 fd6a 	bl	8000b38 <__aeabi_d2f>
 800f064:	4603      	mov	r3, r0
 800f066:	ee07 3a90 	vmov	s15, r3
#else
	return 20.0;
#endif
}
 800f06a:	eeb0 0a67 	vmov.f32	s0, s15
 800f06e:	3708      	adds	r7, #8
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}
 800f074:	20001d9c 	.word	0x20001d9c
 800f078:	2000002c 	.word	0x2000002c
 800f07c:	20001cbc 	.word	0x20001cbc
 800f080:	40590000 	.word	0x40590000

0800f084 <Sonar_init>:

void Sonar_init(sonarInitFuncPtr sonarInit, sonar_filter_t filter)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b082      	sub	sp, #8
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	460b      	mov	r3, r1
 800f08e:	70fb      	strb	r3, [r7, #3]
    static PifNoiseFilterInt32 noise_filter;

    // the repeat interval of trig signal should be greater than 60ms
    // to avoid interference between connective measurements.
	switch (filter) {
 800f090:	78fb      	ldrb	r3, [r7, #3]
 800f092:	2b01      	cmp	r3, #1
 800f094:	d002      	beq.n	800f09c <Sonar_init+0x18>
 800f096:	2b02      	cmp	r3, #2
 800f098:	d00b      	beq.n	800f0b2 <Sonar_init+0x2e>
	        }
	    }
		break;

	default:
		break;
 800f09a:	e01e      	b.n	800f0da <Sonar_init+0x56>
	    if (pifNoiseFilterInt32_Init(&noise_filter, 5)) {
 800f09c:	2105      	movs	r1, #5
 800f09e:	4820      	ldr	r0, [pc, #128]	; (800f120 <Sonar_init+0x9c>)
 800f0a0:	f006 f928 	bl	80152f4 <pifNoiseFilterInt32_Init>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d014      	beq.n	800f0d4 <Sonar_init+0x50>
	        p_sonar_noise_filter = &noise_filter.parent;
 800f0aa:	4b1e      	ldr	r3, [pc, #120]	; (800f124 <Sonar_init+0xa0>)
 800f0ac:	4a1c      	ldr	r2, [pc, #112]	; (800f120 <Sonar_init+0x9c>)
 800f0ae:	601a      	str	r2, [r3, #0]
		break;
 800f0b0:	e010      	b.n	800f0d4 <Sonar_init+0x50>
	    if (pifNoiseFilterInt32_Init(&noise_filter, 7)) {
 800f0b2:	2107      	movs	r1, #7
 800f0b4:	481a      	ldr	r0, [pc, #104]	; (800f120 <Sonar_init+0x9c>)
 800f0b6:	f006 f91d 	bl	80152f4 <pifNoiseFilterInt32_Init>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d00b      	beq.n	800f0d8 <Sonar_init+0x54>
	        if (pifNoiseFilterInt32_SetNoiseCancel(&noise_filter)) {
 800f0c0:	4817      	ldr	r0, [pc, #92]	; (800f120 <Sonar_init+0x9c>)
 800f0c2:	f006 f957 	bl	8015374 <pifNoiseFilterInt32_SetNoiseCancel>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d005      	beq.n	800f0d8 <Sonar_init+0x54>
	            p_sonar_noise_filter = &noise_filter.parent;
 800f0cc:	4b15      	ldr	r3, [pc, #84]	; (800f124 <Sonar_init+0xa0>)
 800f0ce:	4a14      	ldr	r2, [pc, #80]	; (800f120 <Sonar_init+0x9c>)
 800f0d0:	601a      	str	r2, [r3, #0]
		break;
 800f0d2:	e001      	b.n	800f0d8 <Sonar_init+0x54>
		break;
 800f0d4:	bf00      	nop
 800f0d6:	e000      	b.n	800f0da <Sonar_init+0x56>
		break;
 800f0d8:	bf00      	nop
	}
	if (p_sonar_noise_filter) {
 800f0da:	4b12      	ldr	r3, [pc, #72]	; (800f124 <Sonar_init+0xa0>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d007      	beq.n	800f0f2 <Sonar_init+0x6e>
		if (!(*sonarInit)(60, getSonarDistanceFilter)) return;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	4910      	ldr	r1, [pc, #64]	; (800f128 <Sonar_init+0xa4>)
 800f0e6:	203c      	movs	r0, #60	; 0x3c
 800f0e8:	4798      	blx	r3
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d107      	bne.n	800f100 <Sonar_init+0x7c>
 800f0f0:	e013      	b.n	800f11a <Sonar_init+0x96>
	}
	else {
		if (!(*sonarInit)(60, getSonarDistance)) return;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	490d      	ldr	r1, [pc, #52]	; (800f12c <Sonar_init+0xa8>)
 800f0f6:	203c      	movs	r0, #60	; 0x3c
 800f0f8:	4798      	blx	r3
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d00b      	beq.n	800f118 <Sonar_init+0x94>
	}
    sensorsSet(SENSOR_SONAR);
 800f100:	2010      	movs	r0, #16
 800f102:	f7f7 ff3f 	bl	8006f84 <sensorsSet>
    sonarDistance = -1;
 800f106:	4b0a      	ldr	r3, [pc, #40]	; (800f130 <Sonar_init+0xac>)
 800f108:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f10c:	601a      	str	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Print(LT_INFO, "Sonar init : success");
 800f10e:	4909      	ldr	r1, [pc, #36]	; (800f134 <Sonar_init+0xb0>)
 800f110:	2002      	movs	r0, #2
 800f112:	f004 f9b1 	bl	8013478 <pifLog_Print>
 800f116:	e000      	b.n	800f11a <Sonar_init+0x96>
		if (!(*sonarInit)(60, getSonarDistance)) return;
 800f118:	bf00      	nop
#endif
}
 800f11a:	3708      	adds	r7, #8
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}
 800f120:	20001ee4 	.word	0x20001ee4
 800f124:	20001d9c 	.word	0x20001d9c
 800f128:	0800f015 	.word	0x0800f015
 800f12c:	0800efbd 	.word	0x0800efbd
 800f130:	2000002c 	.word	0x2000002c
 800f134:	08026388 	.word	0x08026388

0800f138 <_Read8>:

static void evtMspReceive(PifMsp* p_owner, PifMspPacket* p_packet);
static void evtMspOtherPacket(PifMsp* p_owner, uint8_t data);

static uint8_t _Read8(mspPortState_t* p_port)
{
 800f138:	b480      	push	{r7}
 800f13a:	b085      	sub	sp, #20
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
	uint8_t data = p_port->p_rx_packet[0];
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	73fb      	strb	r3, [r7, #15]
	p_port->p_rx_packet++;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f14c:	1c5a      	adds	r2, r3, #1
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	651a      	str	r2, [r3, #80]	; 0x50
	return data;
 800f152:	7bfb      	ldrb	r3, [r7, #15]
}
 800f154:	4618      	mov	r0, r3
 800f156:	3714      	adds	r7, #20
 800f158:	46bd      	mov	sp, r7
 800f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15e:	4770      	bx	lr

0800f160 <_Read16>:

static uint16_t _Read16(mspPortState_t* p_port)
{
 800f160:	b480      	push	{r7}
 800f162:	b085      	sub	sp, #20
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
	uint16_t data = p_port->p_rx_packet[0] + (p_port->p_rx_packet[1] << 8);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	b29a      	uxth	r2, r3
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f174:	3301      	adds	r3, #1
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	b29b      	uxth	r3, r3
 800f17a:	021b      	lsls	r3, r3, #8
 800f17c:	b29b      	uxth	r3, r3
 800f17e:	4413      	add	r3, r2
 800f180:	81fb      	strh	r3, [r7, #14]
	p_port->p_rx_packet += 2;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f186:	1c9a      	adds	r2, r3, #2
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	651a      	str	r2, [r3, #80]	; 0x50
	return data;
 800f18c:	89fb      	ldrh	r3, [r7, #14]
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3714      	adds	r7, #20
 800f192:	46bd      	mov	sp, r7
 800f194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f198:	4770      	bx	lr

0800f19a <_Read32>:

static uint16_t _Read32(mspPortState_t* p_port)
{
 800f19a:	b480      	push	{r7}
 800f19c:	b085      	sub	sp, #20
 800f19e:	af00      	add	r7, sp, #0
 800f1a0:	6078      	str	r0, [r7, #4]
	uint32_t data = p_port->p_rx_packet[0] + (p_port->p_rx_packet[1] << 8) +
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1ae:	3301      	adds	r3, #1
 800f1b0:	781b      	ldrb	r3, [r3, #0]
 800f1b2:	021b      	lsls	r3, r3, #8
 800f1b4:	4413      	add	r3, r2
 800f1b6:	461a      	mov	r2, r3
			((uint32_t)p_port->p_rx_packet[2] << 16) + ((uint32_t)p_port->p_rx_packet[3] << 24);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1bc:	3302      	adds	r3, #2
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	041b      	lsls	r3, r3, #16
	uint32_t data = p_port->p_rx_packet[0] + (p_port->p_rx_packet[1] << 8) +
 800f1c2:	441a      	add	r2, r3
			((uint32_t)p_port->p_rx_packet[2] << 16) + ((uint32_t)p_port->p_rx_packet[3] << 24);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1c8:	3303      	adds	r3, #3
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	061b      	lsls	r3, r3, #24
	uint32_t data = p_port->p_rx_packet[0] + (p_port->p_rx_packet[1] << 8) +
 800f1ce:	4413      	add	r3, r2
 800f1d0:	60fb      	str	r3, [r7, #12]
	p_port->p_rx_packet += 4;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1d6:	1d1a      	adds	r2, r3, #4
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	651a      	str	r2, [r3, #80]	; 0x50
	return data;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	b29b      	uxth	r3, r3
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3714      	adds	r7, #20
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ea:	4770      	bx	lr

0800f1ec <_Serialize8>:

static void _Serialize8(mspPortState_t* p_port, uint8_t a)
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b083      	sub	sp, #12
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	70fb      	strb	r3, [r7, #3]
    p_port->p_tx_packet[0] = a;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f1fe:	78fa      	ldrb	r2, [r7, #3]
 800f200:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet++;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f208:	1c5a      	adds	r2, r3, #1
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
 800f210:	bf00      	nop
 800f212:	370c      	adds	r7, #12
 800f214:	46bd      	mov	sp, r7
 800f216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21a:	4770      	bx	lr

0800f21c <_Serialize16>:

static void _Serialize16(mspPortState_t* p_port, int16_t a)
{
 800f21c:	b480      	push	{r7}
 800f21e:	b083      	sub	sp, #12
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	460b      	mov	r3, r1
 800f226:	807b      	strh	r3, [r7, #2]
    p_port->p_tx_packet[0] = a & 0xFF;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f22e:	887a      	ldrh	r2, [r7, #2]
 800f230:	b2d2      	uxtb	r2, r2
 800f232:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet[1] = (a >> 8) & 0xFF;
 800f234:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f238:	121b      	asrs	r3, r3, #8
 800f23a:	b21a      	sxth	r2, r3
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f242:	3301      	adds	r3, #1
 800f244:	b2d2      	uxtb	r2, r2
 800f246:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet += 2;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f24e:	1c9a      	adds	r2, r3, #2
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
 800f256:	bf00      	nop
 800f258:	370c      	adds	r7, #12
 800f25a:	46bd      	mov	sp, r7
 800f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f260:	4770      	bx	lr

0800f262 <_Serialize32>:

static void _Serialize32(mspPortState_t* p_port, uint32_t a)
{
 800f262:	b480      	push	{r7}
 800f264:	b083      	sub	sp, #12
 800f266:	af00      	add	r7, sp, #0
 800f268:	6078      	str	r0, [r7, #4]
 800f26a:	6039      	str	r1, [r7, #0]
    p_port->p_tx_packet[0] = a & 0xFF;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f272:	683a      	ldr	r2, [r7, #0]
 800f274:	b2d2      	uxtb	r2, r2
 800f276:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet[1] = (a >> 8) & 0xFF;
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	0a1a      	lsrs	r2, r3, #8
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f282:	3301      	adds	r3, #1
 800f284:	b2d2      	uxtb	r2, r2
 800f286:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet[2] = (a >> 16) & 0xFF;
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	0c1a      	lsrs	r2, r3, #16
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f292:	3302      	adds	r3, #2
 800f294:	b2d2      	uxtb	r2, r2
 800f296:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet[3] = (a >> 24) & 0xFF;
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	0e1a      	lsrs	r2, r3, #24
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f2a2:	3303      	adds	r3, #3
 800f2a4:	b2d2      	uxtb	r2, r2
 800f2a6:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet += 4;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f2ae:	1d1a      	adds	r2, r3, #4
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
 800f2b6:	bf00      	nop
 800f2b8:	370c      	adds	r7, #12
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c0:	4770      	bx	lr

0800f2c2 <_SerializeStruct>:

static void _SerializeStruct(mspPortState_t* p_port, uint8_t *cb, uint8_t siz)
{
 800f2c2:	b480      	push	{r7}
 800f2c4:	b085      	sub	sp, #20
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	60f8      	str	r0, [r7, #12]
 800f2ca:	60b9      	str	r1, [r7, #8]
 800f2cc:	4613      	mov	r3, r2
 800f2ce:	71fb      	strb	r3, [r7, #7]
    while (siz--)
 800f2d0:	e00b      	b.n	800f2ea <_SerializeStruct+0x28>
        *p_port->p_tx_packet++ = *cb++;
 800f2d2:	68ba      	ldr	r2, [r7, #8]
 800f2d4:	1c53      	adds	r3, r2, #1
 800f2d6:	60bb      	str	r3, [r7, #8]
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f2de:	1c58      	adds	r0, r3, #1
 800f2e0:	68f9      	ldr	r1, [r7, #12]
 800f2e2:	f8c1 00d4 	str.w	r0, [r1, #212]	; 0xd4
 800f2e6:	7812      	ldrb	r2, [r2, #0]
 800f2e8:	701a      	strb	r2, [r3, #0]
    while (siz--)
 800f2ea:	79fb      	ldrb	r3, [r7, #7]
 800f2ec:	1e5a      	subs	r2, r3, #1
 800f2ee:	71fa      	strb	r2, [r7, #7]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d1ee      	bne.n	800f2d2 <_SerializeStruct+0x10>
}
 800f2f4:	bf00      	nop
 800f2f6:	bf00      	nop
 800f2f8:	3714      	adds	r7, #20
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f300:	4770      	bx	lr

0800f302 <_SerializeNames>:

static void _SerializeNames(mspPortState_t* p_port, const char *s)
{
 800f302:	b480      	push	{r7}
 800f304:	b085      	sub	sp, #20
 800f306:	af00      	add	r7, sp, #0
 800f308:	6078      	str	r0, [r7, #4]
 800f30a:	6039      	str	r1, [r7, #0]
    const char *c;
    for (c = s; *c; c++)
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	60fb      	str	r3, [r7, #12]
 800f310:	e00c      	b.n	800f32c <_SerializeNames+0x2a>
        *p_port->p_tx_packet++ = *c;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f318:	1c59      	adds	r1, r3, #1
 800f31a:	687a      	ldr	r2, [r7, #4]
 800f31c:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
 800f320:	68fa      	ldr	r2, [r7, #12]
 800f322:	7812      	ldrb	r2, [r2, #0]
 800f324:	701a      	strb	r2, [r3, #0]
    for (c = s; *c; c++)
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	3301      	adds	r3, #1
 800f32a:	60fb      	str	r3, [r7, #12]
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d1ee      	bne.n	800f312 <_SerializeNames+0x10>
}
 800f334:	bf00      	nop
 800f336:	bf00      	nop
 800f338:	3714      	adds	r7, #20
 800f33a:	46bd      	mov	sp, r7
 800f33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f340:	4770      	bx	lr
	...

0800f344 <_SerializeBoxNamesReply>:

static int _SerializeBoxNamesReply(mspPortState_t* p_port)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b088      	sub	sp, #32
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
    int i, idx, j, flag = 1, count = 0, len;
 800f34c:	2301      	movs	r3, #1
 800f34e:	617b      	str	r3, [r7, #20]
 800f350:	2300      	movs	r3, #0
 800f352:	613b      	str	r3, [r7, #16]

reset:
    // in first run of the loop, we grab total size of junk to be sent
    // then come back and actually send it
    for (i = 0; i < numberBoxItems; i++) {
 800f354:	2300      	movs	r3, #0
 800f356:	61fb      	str	r3, [r7, #28]
 800f358:	e03b      	b.n	800f3d2 <_SerializeBoxNamesReply+0x8e>
        idx = availableBoxes[i];
 800f35a:	4a26      	ldr	r2, [pc, #152]	; (800f3f4 <_SerializeBoxNamesReply+0xb0>)
 800f35c:	69fb      	ldr	r3, [r7, #28]
 800f35e:	4413      	add	r3, r2
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	60fb      	str	r3, [r7, #12]
        len = strlen(boxes[idx].boxName);
 800f364:	4924      	ldr	r1, [pc, #144]	; (800f3f8 <_SerializeBoxNamesReply+0xb4>)
 800f366:	68fa      	ldr	r2, [r7, #12]
 800f368:	4613      	mov	r3, r2
 800f36a:	005b      	lsls	r3, r3, #1
 800f36c:	4413      	add	r3, r2
 800f36e:	009b      	lsls	r3, r3, #2
 800f370:	440b      	add	r3, r1
 800f372:	3304      	adds	r3, #4
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	4618      	mov	r0, r3
 800f378:	f7f0 ff38 	bl	80001ec <strlen>
 800f37c:	4603      	mov	r3, r0
 800f37e:	60bb      	str	r3, [r7, #8]
        if (flag) {
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d004      	beq.n	800f390 <_SerializeBoxNamesReply+0x4c>
            count += len;
 800f386:	693a      	ldr	r2, [r7, #16]
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	4413      	add	r3, r2
 800f38c:	613b      	str	r3, [r7, #16]
 800f38e:	e01d      	b.n	800f3cc <_SerializeBoxNamesReply+0x88>
        } else {
            for (j = 0; j < len; j++)
 800f390:	2300      	movs	r3, #0
 800f392:	61bb      	str	r3, [r7, #24]
 800f394:	e016      	b.n	800f3c4 <_SerializeBoxNamesReply+0x80>
                *p_port->p_tx_packet++ = boxes[idx].boxName[j];
 800f396:	4918      	ldr	r1, [pc, #96]	; (800f3f8 <_SerializeBoxNamesReply+0xb4>)
 800f398:	68fa      	ldr	r2, [r7, #12]
 800f39a:	4613      	mov	r3, r2
 800f39c:	005b      	lsls	r3, r3, #1
 800f39e:	4413      	add	r3, r2
 800f3a0:	009b      	lsls	r3, r3, #2
 800f3a2:	440b      	add	r3, r1
 800f3a4:	3304      	adds	r3, #4
 800f3a6:	681a      	ldr	r2, [r3, #0]
 800f3a8:	69bb      	ldr	r3, [r7, #24]
 800f3aa:	441a      	add	r2, r3
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f3b2:	1c58      	adds	r0, r3, #1
 800f3b4:	6879      	ldr	r1, [r7, #4]
 800f3b6:	f8c1 00d4 	str.w	r0, [r1, #212]	; 0xd4
 800f3ba:	7812      	ldrb	r2, [r2, #0]
 800f3bc:	701a      	strb	r2, [r3, #0]
            for (j = 0; j < len; j++)
 800f3be:	69bb      	ldr	r3, [r7, #24]
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	61bb      	str	r3, [r7, #24]
 800f3c4:	69ba      	ldr	r2, [r7, #24]
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	dbe4      	blt.n	800f396 <_SerializeBoxNamesReply+0x52>
    for (i = 0; i < numberBoxItems; i++) {
 800f3cc:	69fb      	ldr	r3, [r7, #28]
 800f3ce:	3301      	adds	r3, #1
 800f3d0:	61fb      	str	r3, [r7, #28]
 800f3d2:	4b0a      	ldr	r3, [pc, #40]	; (800f3fc <_SerializeBoxNamesReply+0xb8>)
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	461a      	mov	r2, r3
 800f3d8:	69fb      	ldr	r3, [r7, #28]
 800f3da:	4293      	cmp	r3, r2
 800f3dc:	dbbd      	blt.n	800f35a <_SerializeBoxNamesReply+0x16>
        }
    }

    if (flag) {
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d002      	beq.n	800f3ea <_SerializeBoxNamesReply+0xa6>
        flag = 0;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	617b      	str	r3, [r7, #20]
        goto reset;
 800f3e8:	e7b4      	b.n	800f354 <_SerializeBoxNamesReply+0x10>
    }
    return count;
 800f3ea:	693b      	ldr	r3, [r7, #16]
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3720      	adds	r7, #32
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}
 800f3f4:	20001f04 	.word	0x20001f04
 800f3f8:	08028044 	.word	0x08028044
 800f3fc:	20001f1d 	.word	0x20001f1d

0800f400 <serialInit>:

void serialInit(uint8_t port, uint32_t baudrate, uint8_t flexport)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b084      	sub	sp, #16
 800f404:	af00      	add	r7, sp, #0
 800f406:	4603      	mov	r3, r0
 800f408:	6039      	str	r1, [r7, #0]
 800f40a:	71fb      	strb	r3, [r7, #7]
 800f40c:	4613      	mov	r3, r2
 800f40e:	71bb      	strb	r3, [r7, #6]
    int idx;

    core.mainport = uartOpen(port, baudrate, MODE_RXTX);
 800f410:	79fb      	ldrb	r3, [r7, #7]
 800f412:	2203      	movs	r2, #3
 800f414:	6839      	ldr	r1, [r7, #0]
 800f416:	4618      	mov	r0, r3
 800f418:	f7f2 ffe6 	bl	80023e8 <uartOpen>
 800f41c:	4603      	mov	r3, r0
 800f41e:	4a92      	ldr	r2, [pc, #584]	; (800f668 <serialInit+0x268>)
 800f420:	6013      	str	r3, [r2, #0]
    ports[0].port = core.mainport;
 800f422:	4b91      	ldr	r3, [pc, #580]	; (800f668 <serialInit+0x268>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	4a91      	ldr	r2, [pc, #580]	; (800f66c <serialInit+0x26c>)
 800f428:	6013      	str	r3, [r2, #0]

    if (!pifMsp_Init(&ports[0].pif_msp, &g_timer_1ms, PIF_ID_MSP(0))) return;
 800f42a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800f42e:	4990      	ldr	r1, [pc, #576]	; (800f670 <serialInit+0x270>)
 800f430:	4890      	ldr	r0, [pc, #576]	; (800f674 <serialInit+0x274>)
 800f432:	f008 f8a7 	bl	8017584 <pifMsp_Init>
 800f436:	4603      	mov	r3, r0
 800f438:	2b00      	cmp	r3, #0
 800f43a:	f000 810f 	beq.w	800f65c <serialInit+0x25c>
    ports[0].pif_msp.evt_receive = evtMspReceive;
 800f43e:	4b8b      	ldr	r3, [pc, #556]	; (800f66c <serialInit+0x26c>)
 800f440:	4a8d      	ldr	r2, [pc, #564]	; (800f678 <serialInit+0x278>)
 800f442:	605a      	str	r2, [r3, #4]
    ports[0].pif_msp.evt_other_packet = evtMspOtherPacket;
 800f444:	4b89      	ldr	r3, [pc, #548]	; (800f66c <serialInit+0x26c>)
 800f446:	4a8d      	ldr	r2, [pc, #564]	; (800f67c <serialInit+0x27c>)
 800f448:	609a      	str	r2, [r3, #8]
    pifMsp_AttachComm(&ports[0].pif_msp, &core.mainport->comm);
 800f44a:	4b87      	ldr	r3, [pc, #540]	; (800f668 <serialInit+0x268>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	3304      	adds	r3, #4
 800f450:	4619      	mov	r1, r3
 800f452:	4888      	ldr	r0, [pc, #544]	; (800f674 <serialInit+0x274>)
 800f454:	f008 f924 	bl	80176a0 <pifMsp_AttachComm>

    serialStartReceiveFunc(&core.mainport->comm);
 800f458:	4b83      	ldr	r3, [pc, #524]	; (800f668 <serialInit+0x268>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	3304      	adds	r3, #4
 800f45e:	4618      	mov	r0, r3
 800f460:	f7f3 f8f4 	bl	800264c <serialStartReceiveFunc>

    // additional telemetry port available only if spektrum sat isn't already assigned there
    if (flexport) {
 800f464:	79bb      	ldrb	r3, [r7, #6]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d02c      	beq.n	800f4c4 <serialInit+0xc4>
        core.flexport = uartOpen(flexport, baudrate, MODE_RXTX);
 800f46a:	79bb      	ldrb	r3, [r7, #6]
 800f46c:	2203      	movs	r2, #3
 800f46e:	6839      	ldr	r1, [r7, #0]
 800f470:	4618      	mov	r0, r3
 800f472:	f7f2 ffb9 	bl	80023e8 <uartOpen>
 800f476:	4603      	mov	r3, r0
 800f478:	4a7b      	ldr	r2, [pc, #492]	; (800f668 <serialInit+0x268>)
 800f47a:	6053      	str	r3, [r2, #4]
        ports[1].port = core.flexport;
 800f47c:	4b7a      	ldr	r3, [pc, #488]	; (800f668 <serialInit+0x268>)
 800f47e:	685b      	ldr	r3, [r3, #4]
 800f480:	4a7a      	ldr	r2, [pc, #488]	; (800f66c <serialInit+0x26c>)
 800f482:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8

        if (!pifMsp_Init(&ports[1].pif_msp, &g_timer_1ms, PIF_ID_MSP(1))) return;
 800f486:	f240 1211 	movw	r2, #273	; 0x111
 800f48a:	4979      	ldr	r1, [pc, #484]	; (800f670 <serialInit+0x270>)
 800f48c:	487c      	ldr	r0, [pc, #496]	; (800f680 <serialInit+0x280>)
 800f48e:	f008 f879 	bl	8017584 <pifMsp_Init>
 800f492:	4603      	mov	r3, r0
 800f494:	2b00      	cmp	r3, #0
 800f496:	f000 80e3 	beq.w	800f660 <serialInit+0x260>
        ports[1].pif_msp.evt_receive = evtMspReceive;
 800f49a:	4b74      	ldr	r3, [pc, #464]	; (800f66c <serialInit+0x26c>)
 800f49c:	4a76      	ldr	r2, [pc, #472]	; (800f678 <serialInit+0x278>)
 800f49e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
        ports[1].pif_msp.evt_other_packet = evtMspOtherPacket;
 800f4a2:	4b72      	ldr	r3, [pc, #456]	; (800f66c <serialInit+0x26c>)
 800f4a4:	4a75      	ldr	r2, [pc, #468]	; (800f67c <serialInit+0x27c>)
 800f4a6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
        pifMsp_AttachComm(&ports[1].pif_msp, &core.flexport->comm);
 800f4aa:	4b6f      	ldr	r3, [pc, #444]	; (800f668 <serialInit+0x268>)
 800f4ac:	685b      	ldr	r3, [r3, #4]
 800f4ae:	3304      	adds	r3, #4
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	4873      	ldr	r0, [pc, #460]	; (800f680 <serialInit+0x280>)
 800f4b4:	f008 f8f4 	bl	80176a0 <pifMsp_AttachComm>

        serialStartReceiveFunc(&core.flexport->comm);
 800f4b8:	4b6b      	ldr	r3, [pc, #428]	; (800f668 <serialInit+0x268>)
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	3304      	adds	r3, #4
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f7f3 f8c4 	bl	800264c <serialStartReceiveFunc>
    }

    // calculate used boxes based on features and fill availableBoxes[] array
    memset(availableBoxes, 0xFF, sizeof(availableBoxes));
 800f4c4:	2219      	movs	r2, #25
 800f4c6:	21ff      	movs	r1, #255	; 0xff
 800f4c8:	486e      	ldr	r0, [pc, #440]	; (800f684 <serialInit+0x284>)
 800f4ca:	f012 fc8b 	bl	8021de4 <memset>

    idx = 0;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	60fb      	str	r3, [r7, #12]
    availableBoxes[idx++] = BOXARM;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	1c5a      	adds	r2, r3, #1
 800f4d6:	60fa      	str	r2, [r7, #12]
 800f4d8:	4a6a      	ldr	r2, [pc, #424]	; (800f684 <serialInit+0x284>)
 800f4da:	2100      	movs	r1, #0
 800f4dc:	54d1      	strb	r1, [r2, r3]
    if (sensors(SENSOR_ACC)) {
 800f4de:	2002      	movs	r0, #2
 800f4e0:	f7f7 fd3a 	bl	8006f58 <sensors>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d00b      	beq.n	800f502 <serialInit+0x102>
        availableBoxes[idx++] = BOXANGLE;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	1c5a      	adds	r2, r3, #1
 800f4ee:	60fa      	str	r2, [r7, #12]
 800f4f0:	4a64      	ldr	r2, [pc, #400]	; (800f684 <serialInit+0x284>)
 800f4f2:	2101      	movs	r1, #1
 800f4f4:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHORIZON;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	1c5a      	adds	r2, r3, #1
 800f4fa:	60fa      	str	r2, [r7, #12]
 800f4fc:	4a61      	ldr	r2, [pc, #388]	; (800f684 <serialInit+0x284>)
 800f4fe:	2102      	movs	r1, #2
 800f500:	54d1      	strb	r1, [r2, r3]
    }
    if (sensors(SENSOR_BARO)) {
 800f502:	2004      	movs	r0, #4
 800f504:	f7f7 fd28 	bl	8006f58 <sensors>
 800f508:	4603      	mov	r3, r0
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d012      	beq.n	800f534 <serialInit+0x134>
        availableBoxes[idx++] = BOXBARO;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	1c5a      	adds	r2, r3, #1
 800f512:	60fa      	str	r2, [r7, #12]
 800f514:	4a5b      	ldr	r2, [pc, #364]	; (800f684 <serialInit+0x284>)
 800f516:	2103      	movs	r1, #3
 800f518:	54d1      	strb	r1, [r2, r3]
        if (feature(FEATURE_VARIO))
 800f51a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800f51e:	f7f7 fd63 	bl	8006fe8 <feature>
 800f522:	4603      	mov	r3, r0
 800f524:	2b00      	cmp	r3, #0
 800f526:	d005      	beq.n	800f534 <serialInit+0x134>
            availableBoxes[idx++] = BOXVARIO;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	1c5a      	adds	r2, r3, #1
 800f52c:	60fa      	str	r2, [r7, #12]
 800f52e:	4a55      	ldr	r2, [pc, #340]	; (800f684 <serialInit+0x284>)
 800f530:	2104      	movs	r1, #4
 800f532:	54d1      	strb	r1, [r2, r3]
    }
    if (sensors(SENSOR_ACC) || sensors(SENSOR_MAG)) {
 800f534:	2002      	movs	r0, #2
 800f536:	f7f7 fd0f 	bl	8006f58 <sensors>
 800f53a:	4603      	mov	r3, r0
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d105      	bne.n	800f54c <serialInit+0x14c>
 800f540:	2008      	movs	r0, #8
 800f542:	f7f7 fd09 	bl	8006f58 <sensors>
 800f546:	4603      	mov	r3, r0
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d011      	beq.n	800f570 <serialInit+0x170>
        availableBoxes[idx++] = BOXMAG;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	1c5a      	adds	r2, r3, #1
 800f550:	60fa      	str	r2, [r7, #12]
 800f552:	4a4c      	ldr	r2, [pc, #304]	; (800f684 <serialInit+0x284>)
 800f554:	2105      	movs	r1, #5
 800f556:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHEADFREE;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	1c5a      	adds	r2, r3, #1
 800f55c:	60fa      	str	r2, [r7, #12]
 800f55e:	4a49      	ldr	r2, [pc, #292]	; (800f684 <serialInit+0x284>)
 800f560:	2106      	movs	r1, #6
 800f562:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHEADADJ;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	1c5a      	adds	r2, r3, #1
 800f568:	60fa      	str	r2, [r7, #12]
 800f56a:	4a46      	ldr	r2, [pc, #280]	; (800f684 <serialInit+0x284>)
 800f56c:	2107      	movs	r1, #7
 800f56e:	54d1      	strb	r1, [r2, r3]
    }
    if (feature(FEATURE_SERVO_TILT))
 800f570:	2020      	movs	r0, #32
 800f572:	f7f7 fd39 	bl	8006fe8 <feature>
 800f576:	4603      	mov	r3, r0
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d005      	beq.n	800f588 <serialInit+0x188>
        availableBoxes[idx++] = BOXCAMSTAB;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	1c5a      	adds	r2, r3, #1
 800f580:	60fa      	str	r2, [r7, #12]
 800f582:	4a40      	ldr	r2, [pc, #256]	; (800f684 <serialInit+0x284>)
 800f584:	2108      	movs	r1, #8
 800f586:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_GPS)) {
 800f588:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f58c:	f7f7 fd2c 	bl	8006fe8 <feature>
 800f590:	4603      	mov	r3, r0
 800f592:	2b00      	cmp	r3, #0
 800f594:	d00b      	beq.n	800f5ae <serialInit+0x1ae>
        availableBoxes[idx++] = BOXGPSHOME;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	1c5a      	adds	r2, r3, #1
 800f59a:	60fa      	str	r2, [r7, #12]
 800f59c:	4a39      	ldr	r2, [pc, #228]	; (800f684 <serialInit+0x284>)
 800f59e:	210a      	movs	r1, #10
 800f5a0:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXGPSHOLD;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	1c5a      	adds	r2, r3, #1
 800f5a6:	60fa      	str	r2, [r7, #12]
 800f5a8:	4a36      	ldr	r2, [pc, #216]	; (800f684 <serialInit+0x284>)
 800f5aa:	210b      	movs	r1, #11
 800f5ac:	54d1      	strb	r1, [r2, r3]
    }
    if (f.FIXED_WING) {
 800f5ae:	4b36      	ldr	r3, [pc, #216]	; (800f688 <serialInit+0x288>)
 800f5b0:	7c1b      	ldrb	r3, [r3, #16]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d00b      	beq.n	800f5ce <serialInit+0x1ce>
        availableBoxes[idx++] = BOXPASSTHRU;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	1c5a      	adds	r2, r3, #1
 800f5ba:	60fa      	str	r2, [r7, #12]
 800f5bc:	4a31      	ldr	r2, [pc, #196]	; (800f684 <serialInit+0x284>)
 800f5be:	210c      	movs	r1, #12
 800f5c0:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXGCRUISE;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	1c5a      	adds	r2, r3, #1
 800f5c6:	60fa      	str	r2, [r7, #12]
 800f5c8:	4a2e      	ldr	r2, [pc, #184]	; (800f684 <serialInit+0x284>)
 800f5ca:	2118      	movs	r1, #24
 800f5cc:	54d1      	strb	r1, [r2, r3]
    }
    availableBoxes[idx++] = BOXBEEPERON;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	1c5a      	adds	r2, r3, #1
 800f5d2:	60fa      	str	r2, [r7, #12]
 800f5d4:	4a2b      	ldr	r2, [pc, #172]	; (800f684 <serialInit+0x284>)
 800f5d6:	210d      	movs	r1, #13
 800f5d8:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_INFLIGHT_ACC_CAL))
 800f5da:	2004      	movs	r0, #4
 800f5dc:	f7f7 fd04 	bl	8006fe8 <feature>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d005      	beq.n	800f5f2 <serialInit+0x1f2>
        availableBoxes[idx++] = BOXCALIB;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	1c5a      	adds	r2, r3, #1
 800f5ea:	60fa      	str	r2, [r7, #12]
 800f5ec:	4a25      	ldr	r2, [pc, #148]	; (800f684 <serialInit+0x284>)
 800f5ee:	2111      	movs	r1, #17
 800f5f0:	54d1      	strb	r1, [r2, r3]
    availableBoxes[idx++] = BOXOSD;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	1c5a      	adds	r2, r3, #1
 800f5f6:	60fa      	str	r2, [r7, #12]
 800f5f8:	4a22      	ldr	r2, [pc, #136]	; (800f684 <serialInit+0x284>)
 800f5fa:	2113      	movs	r1, #19
 800f5fc:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_TELEMETRY && mcfg.telemetry_switch))
 800f5fe:	4b23      	ldr	r3, [pc, #140]	; (800f68c <serialInit+0x28c>)
 800f600:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800f604:	2b00      	cmp	r3, #0
 800f606:	bf14      	ite	ne
 800f608:	2301      	movne	r3, #1
 800f60a:	2300      	moveq	r3, #0
 800f60c:	b2db      	uxtb	r3, r3
 800f60e:	4618      	mov	r0, r3
 800f610:	f7f7 fcea 	bl	8006fe8 <feature>
 800f614:	4603      	mov	r3, r0
 800f616:	2b00      	cmp	r3, #0
 800f618:	d005      	beq.n	800f626 <serialInit+0x226>
        availableBoxes[idx++] = BOXTELEMETRY;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	1c5a      	adds	r2, r3, #1
 800f61e:	60fa      	str	r2, [r7, #12]
 800f620:	4a18      	ldr	r2, [pc, #96]	; (800f684 <serialInit+0x284>)
 800f622:	2114      	movs	r1, #20
 800f624:	54d1      	strb	r1, [r2, r3]
    if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE) {
 800f626:	4b19      	ldr	r3, [pc, #100]	; (800f68c <serialInit+0x28c>)
 800f628:	795b      	ldrb	r3, [r3, #5]
 800f62a:	2b18      	cmp	r3, #24
 800f62c:	d111      	bne.n	800f652 <serialInit+0x252>
        availableBoxes[idx++] = BOXSERVO1;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	1c5a      	adds	r2, r3, #1
 800f632:	60fa      	str	r2, [r7, #12]
 800f634:	4a13      	ldr	r2, [pc, #76]	; (800f684 <serialInit+0x284>)
 800f636:	2115      	movs	r1, #21
 800f638:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXSERVO2;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	1c5a      	adds	r2, r3, #1
 800f63e:	60fa      	str	r2, [r7, #12]
 800f640:	4a10      	ldr	r2, [pc, #64]	; (800f684 <serialInit+0x284>)
 800f642:	2116      	movs	r1, #22
 800f644:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXSERVO3;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	1c5a      	adds	r2, r3, #1
 800f64a:	60fa      	str	r2, [r7, #12]
 800f64c:	4a0d      	ldr	r2, [pc, #52]	; (800f684 <serialInit+0x284>)
 800f64e:	2117      	movs	r1, #23
 800f650:	54d1      	strb	r1, [r2, r3]
    }

    numberBoxItems = idx;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	b2da      	uxtb	r2, r3
 800f656:	4b0e      	ldr	r3, [pc, #56]	; (800f690 <serialInit+0x290>)
 800f658:	701a      	strb	r2, [r3, #0]
 800f65a:	e002      	b.n	800f662 <serialInit+0x262>
    if (!pifMsp_Init(&ports[0].pif_msp, &g_timer_1ms, PIF_ID_MSP(0))) return;
 800f65c:	bf00      	nop
 800f65e:	e000      	b.n	800f662 <serialInit+0x262>
        if (!pifMsp_Init(&ports[1].pif_msp, &g_timer_1ms, PIF_ID_MSP(1))) return;
 800f660:	bf00      	nop
}
 800f662:	3710      	adds	r7, #16
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}
 800f668:	20000afc 	.word	0x20000afc
 800f66c:	20001f20 	.word	0x20001f20
 800f670:	20001b64 	.word	0x20001b64
 800f674:	20001f24 	.word	0x20001f24
 800f678:	0800f695 	.word	0x0800f695
 800f67c:	0801129d 	.word	0x0801129d
 800f680:	20001ffc 	.word	0x20001ffc
 800f684:	20001f04 	.word	0x20001f04
 800f688:	20001988 	.word	0x20001988
 800f68c:	20000bbc 	.word	0x20000bbc
 800f690:	20001f1d 	.word	0x20001f1d

0800f694 <evtMspReceive>:

void evtMspReceive(PifMsp* p_owner, PifMspPacket* p_packet)
{
 800f694:	b590      	push	{r4, r7, lr}
 800f696:	b091      	sub	sp, #68	; 0x44
 800f698:	af02      	add	r7, sp, #8
 800f69a:	6078      	str	r0, [r7, #4]
 800f69c:	6039      	str	r1, [r7, #0]
    uint32_t i, j, tmp, junk;
#ifdef GPS
    uint8_t wp_no;
    int32_t lat = 0, lon = 0, alt = 0;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	627b      	str	r3, [r7, #36]	; 0x24
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	623b      	str	r3, [r7, #32]
#endif
    const char *build = __DATE__;
 800f6aa:	4be7      	ldr	r3, [pc, #924]	; (800fa48 <evtMspReceive+0x3b4>)
 800f6ac:	61fb      	str	r3, [r7, #28]
    mspPortState_t* p_port = &ports[PIF_ID_MSP_2_IDX(p_owner->_id)];
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	891b      	ldrh	r3, [r3, #8]
 800f6b2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f6b6:	22d8      	movs	r2, #216	; 0xd8
 800f6b8:	fb02 f303 	mul.w	r3, r2, r3
 800f6bc:	4ae3      	ldr	r2, [pc, #908]	; (800fa4c <evtMspReceive+0x3b8>)
 800f6be:	4413      	add	r3, r2
 800f6c0:	61bb      	str	r3, [r7, #24]

    p_port->p_rx_packet = p_packet->p_data;
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	685a      	ldr	r2, [r3, #4]
 800f6c6:	69bb      	ldr	r3, [r7, #24]
 800f6c8:	651a      	str	r2, [r3, #80]	; 0x50
    p_port->p_tx_packet = p_port->tx_packet;
 800f6ca:	69bb      	ldr	r3, [r7, #24]
 800f6cc:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800f6d0:	69bb      	ldr	r3, [r7, #24]
 800f6d2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    switch (p_packet->command) {
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	781b      	ldrb	r3, [r3, #0]
 800f6da:	3b40      	subs	r3, #64	; 0x40
 800f6dc:	2bbe      	cmp	r3, #190	; 0xbe
 800f6de:	f201 85cd 	bhi.w	801127c <evtMspReceive+0x1be8>
 800f6e2:	a201      	add	r2, pc, #4	; (adr r2, 800f6e8 <evtMspReceive+0x54>)
 800f6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6e8:	080111b5 	.word	0x080111b5
 800f6ec:	080111ed 	.word	0x080111ed
 800f6f0:	080110cd 	.word	0x080110cd
 800f6f4:	08010f49 	.word	0x08010f49
 800f6f8:	08011225 	.word	0x08011225
 800f6fc:	08011239 	.word	0x08011239
 800f700:	0801127d 	.word	0x0801127d
 800f704:	0801127d 	.word	0x0801127d
 800f708:	0801127d 	.word	0x0801127d
 800f70c:	0801127d 	.word	0x0801127d
 800f710:	0801127d 	.word	0x0801127d
 800f714:	0801127d 	.word	0x0801127d
 800f718:	0801127d 	.word	0x0801127d
 800f71c:	0801127d 	.word	0x0801127d
 800f720:	0801127d 	.word	0x0801127d
 800f724:	0801127d 	.word	0x0801127d
 800f728:	0801127d 	.word	0x0801127d
 800f72c:	0801127d 	.word	0x0801127d
 800f730:	0801127d 	.word	0x0801127d
 800f734:	0801127d 	.word	0x0801127d
 800f738:	0801127d 	.word	0x0801127d
 800f73c:	0801127d 	.word	0x0801127d
 800f740:	0801127d 	.word	0x0801127d
 800f744:	0801127d 	.word	0x0801127d
 800f748:	0801127d 	.word	0x0801127d
 800f74c:	0801127d 	.word	0x0801127d
 800f750:	0801127d 	.word	0x0801127d
 800f754:	0801127d 	.word	0x0801127d
 800f758:	0801127d 	.word	0x0801127d
 800f75c:	0801127d 	.word	0x0801127d
 800f760:	0801127d 	.word	0x0801127d
 800f764:	0801127d 	.word	0x0801127d
 800f768:	0801127d 	.word	0x0801127d
 800f76c:	0801127d 	.word	0x0801127d
 800f770:	0801127d 	.word	0x0801127d
 800f774:	0801127d 	.word	0x0801127d
 800f778:	0800fdfb 	.word	0x0800fdfb
 800f77c:	0800fe33 	.word	0x0800fe33
 800f780:	0800ffd1 	.word	0x0800ffd1
 800f784:	080100b5 	.word	0x080100b5
 800f788:	080105c1 	.word	0x080105c1
 800f78c:	080105df 	.word	0x080105df
 800f790:	08010625 	.word	0x08010625
 800f794:	08010693 	.word	0x08010693
 800f798:	080106d5 	.word	0x080106d5
 800f79c:	08010719 	.word	0x08010719
 800f7a0:	08010747 	.word	0x08010747
 800f7a4:	080107fb 	.word	0x080107fb
 800f7a8:	0801086f 	.word	0x0801086f
 800f7ac:	08010965 	.word	0x08010965
 800f7b0:	08010a51 	.word	0x08010a51
 800f7b4:	08010b59 	.word	0x08010b59
 800f7b8:	080109b5 	.word	0x080109b5
 800f7bc:	08010949 	.word	0x08010949
 800f7c0:	08010baf 	.word	0x08010baf
 800f7c4:	080109d5 	.word	0x080109d5
 800f7c8:	080100d3 	.word	0x080100d3
 800f7cc:	0801127d 	.word	0x0801127d
 800f7d0:	0801127d 	.word	0x0801127d
 800f7d4:	0801041b 	.word	0x0801041b
 800f7d8:	0801127d 	.word	0x0801127d
 800f7dc:	0801127d 	.word	0x0801127d
 800f7e0:	0801127d 	.word	0x0801127d
 800f7e4:	0801127d 	.word	0x0801127d
 800f7e8:	0801127d 	.word	0x0801127d
 800f7ec:	0801127d 	.word	0x0801127d
 800f7f0:	0801127d 	.word	0x0801127d
 800f7f4:	0801127d 	.word	0x0801127d
 800f7f8:	0801127d 	.word	0x0801127d
 800f7fc:	0801127d 	.word	0x0801127d
 800f800:	0801127d 	.word	0x0801127d
 800f804:	0801127d 	.word	0x0801127d
 800f808:	0801127d 	.word	0x0801127d
 800f80c:	0801127d 	.word	0x0801127d
 800f810:	0801127d 	.word	0x0801127d
 800f814:	0801127d 	.word	0x0801127d
 800f818:	0801127d 	.word	0x0801127d
 800f81c:	0801127d 	.word	0x0801127d
 800f820:	0801127d 	.word	0x0801127d
 800f824:	0801127d 	.word	0x0801127d
 800f828:	0801127d 	.word	0x0801127d
 800f82c:	0801127d 	.word	0x0801127d
 800f830:	0801127d 	.word	0x0801127d
 800f834:	0801127d 	.word	0x0801127d
 800f838:	0801127d 	.word	0x0801127d
 800f83c:	0801127d 	.word	0x0801127d
 800f840:	0801127d 	.word	0x0801127d
 800f844:	0801127d 	.word	0x0801127d
 800f848:	0801127d 	.word	0x0801127d
 800f84c:	0801127d 	.word	0x0801127d
 800f850:	0801127d 	.word	0x0801127d
 800f854:	0801127d 	.word	0x0801127d
 800f858:	0801127d 	.word	0x0801127d
 800f85c:	0801127d 	.word	0x0801127d
 800f860:	0801127d 	.word	0x0801127d
 800f864:	0801127d 	.word	0x0801127d
 800f868:	08010de7 	.word	0x08010de7
 800f86c:	0801127d 	.word	0x0801127d
 800f870:	0801127d 	.word	0x0801127d
 800f874:	0801127d 	.word	0x0801127d
 800f878:	08010e1d 	.word	0x08010e1d
 800f87c:	0801127d 	.word	0x0801127d
 800f880:	08010edd 	.word	0x08010edd
 800f884:	0801127d 	.word	0x0801127d
 800f888:	0801127d 	.word	0x0801127d
 800f88c:	0801127d 	.word	0x0801127d
 800f890:	0801127d 	.word	0x0801127d
 800f894:	0801127d 	.word	0x0801127d
 800f898:	0801127d 	.word	0x0801127d
 800f89c:	0801127d 	.word	0x0801127d
 800f8a0:	0801127d 	.word	0x0801127d
 800f8a4:	0801127d 	.word	0x0801127d
 800f8a8:	0801127d 	.word	0x0801127d
 800f8ac:	0801127d 	.word	0x0801127d
 800f8b0:	0801127d 	.word	0x0801127d
 800f8b4:	0801127d 	.word	0x0801127d
 800f8b8:	0801127d 	.word	0x0801127d
 800f8bc:	0801127d 	.word	0x0801127d
 800f8c0:	0801127d 	.word	0x0801127d
 800f8c4:	0801127d 	.word	0x0801127d
 800f8c8:	0801127d 	.word	0x0801127d
 800f8cc:	0801127d 	.word	0x0801127d
 800f8d0:	0801127d 	.word	0x0801127d
 800f8d4:	0801127d 	.word	0x0801127d
 800f8d8:	0801127d 	.word	0x0801127d
 800f8dc:	0801127d 	.word	0x0801127d
 800f8e0:	0801127d 	.word	0x0801127d
 800f8e4:	0801127d 	.word	0x0801127d
 800f8e8:	0801127d 	.word	0x0801127d
 800f8ec:	0801127d 	.word	0x0801127d
 800f8f0:	0801127d 	.word	0x0801127d
 800f8f4:	0801127d 	.word	0x0801127d
 800f8f8:	0801127d 	.word	0x0801127d
 800f8fc:	0801127d 	.word	0x0801127d
 800f900:	0801127d 	.word	0x0801127d
 800f904:	0801127d 	.word	0x0801127d
 800f908:	0800f9e5 	.word	0x0800f9e5
 800f90c:	0800fa59 	.word	0x0800fa59
 800f910:	0800facb 	.word	0x0800facb
 800f914:	0800fb61 	.word	0x0800fb61
 800f918:	0800fba5 	.word	0x0800fba5
 800f91c:	08010cef 	.word	0x08010cef
 800f920:	08010d0d 	.word	0x08010d0d
 800f924:	0800fc19 	.word	0x0800fc19
 800f928:	08010cd3 	.word	0x08010cd3
 800f92c:	08010c33 	.word	0x08010c33
 800f930:	0800fd9b 	.word	0x0800fd9b
 800f934:	0800fddd 	.word	0x0800fddd
 800f938:	08010187 	.word	0x08010187
 800f93c:	0801127d 	.word	0x0801127d
 800f940:	0800fd3b 	.word	0x0800fd3b
 800f944:	0801127d 	.word	0x0801127d
 800f948:	080104f3 	.word	0x080104f3
 800f94c:	0801127d 	.word	0x0801127d
 800f950:	0801127d 	.word	0x0801127d
 800f954:	0801127d 	.word	0x0801127d
 800f958:	0801127d 	.word	0x0801127d
 800f95c:	0801127d 	.word	0x0801127d
 800f960:	0801127d 	.word	0x0801127d
 800f964:	0801127d 	.word	0x0801127d
 800f968:	0801127d 	.word	0x0801127d
 800f96c:	0801127d 	.word	0x0801127d
 800f970:	0801127d 	.word	0x0801127d
 800f974:	0801127d 	.word	0x0801127d
 800f978:	0801127d 	.word	0x0801127d
 800f97c:	0801127d 	.word	0x0801127d
 800f980:	0801127d 	.word	0x0801127d
 800f984:	0801127d 	.word	0x0801127d
 800f988:	0801127d 	.word	0x0801127d
 800f98c:	0801127d 	.word	0x0801127d
 800f990:	0801127d 	.word	0x0801127d
 800f994:	0801127d 	.word	0x0801127d
 800f998:	0801127d 	.word	0x0801127d
 800f99c:	0801127d 	.word	0x0801127d
 800f9a0:	0801127d 	.word	0x0801127d
 800f9a4:	0800fa1d 	.word	0x0800fa1d
 800f9a8:	08010db9 	.word	0x08010db9
 800f9ac:	0801023f 	.word	0x0801023f
 800f9b0:	08010331 	.word	0x08010331
 800f9b4:	0801127d 	.word	0x0801127d
 800f9b8:	0801127d 	.word	0x0801127d
 800f9bc:	0801127d 	.word	0x0801127d
 800f9c0:	0801127d 	.word	0x0801127d
 800f9c4:	0801127d 	.word	0x0801127d
 800f9c8:	0801127d 	.word	0x0801127d
 800f9cc:	0801127d 	.word	0x0801127d
 800f9d0:	08010d29 	.word	0x08010d29
 800f9d4:	0801127d 	.word	0x0801127d
 800f9d8:	0801127d 	.word	0x0801127d
 800f9dc:	0801127d 	.word	0x0801127d
 800f9e0:	08010d51 	.word	0x08010d51
    case MSP_SET_RAW_RC:
        for (i = 0; i < 8; i++)
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	637b      	str	r3, [r7, #52]	; 0x34
 800f9e8:	e00b      	b.n	800fa02 <evtMspReceive+0x36e>
            rcData[i] = _Read16(p_port);
 800f9ea:	69b8      	ldr	r0, [r7, #24]
 800f9ec:	f7ff fbb8 	bl	800f160 <_Read16>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	b219      	sxth	r1, r3
 800f9f4:	4a16      	ldr	r2, [pc, #88]	; (800fa50 <evtMspReceive+0x3bc>)
 800f9f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < 8; i++)
 800f9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9fe:	3301      	adds	r3, #1
 800fa00:	637b      	str	r3, [r7, #52]	; 0x34
 800fa02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa04:	2b07      	cmp	r3, #7
 800fa06:	d9f0      	bls.n	800f9ea <evtMspReceive+0x356>
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fa08:	2300      	movs	r3, #0
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	6839      	ldr	r1, [r7, #0]
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f007 fe6c 	bl	80176ec <pifMsp_MakeAnswer>
        mspFrameRecieve();
 800fa14:	f7fe fc22 	bl	800e25c <mspFrameRecieve>
        break;
 800fa18:	f001 bc35 	b.w	8011286 <evtMspReceive+0x1bf2>
        
    case MSP_SET_ACC_TRIM:
        cfg.angleTrim[PITCH] = _Read16(p_port);
 800fa1c:	69b8      	ldr	r0, [r7, #24]
 800fa1e:	f7ff fb9f 	bl	800f160 <_Read16>
 800fa22:	4603      	mov	r3, r0
 800fa24:	b21a      	sxth	r2, r3
 800fa26:	4b0b      	ldr	r3, [pc, #44]	; (800fa54 <evtMspReceive+0x3c0>)
 800fa28:	85da      	strh	r2, [r3, #46]	; 0x2e
        cfg.angleTrim[ROLL]  = _Read16(p_port);
 800fa2a:	69b8      	ldr	r0, [r7, #24]
 800fa2c:	f7ff fb98 	bl	800f160 <_Read16>
 800fa30:	4603      	mov	r3, r0
 800fa32:	b21a      	sxth	r2, r3
 800fa34:	4b07      	ldr	r3, [pc, #28]	; (800fa54 <evtMspReceive+0x3c0>)
 800fa36:	859a      	strh	r2, [r3, #44]	; 0x2c
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fa38:	2300      	movs	r3, #0
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	6839      	ldr	r1, [r7, #0]
 800fa3e:	6878      	ldr	r0, [r7, #4]
 800fa40:	f007 fe54 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 800fa44:	f001 bc1f 	b.w	8011286 <evtMspReceive+0x1bf2>
 800fa48:	08026494 	.word	0x08026494
 800fa4c:	20001f20 	.word	0x20001f20
 800fa50:	200019c4 	.word	0x200019c4
 800fa54:	20001128 	.word	0x20001128

#ifdef GPS
    case MSP_SET_RAW_GPS:
        f.GPS_FIX = _Read8(p_port);
 800fa58:	69b8      	ldr	r0, [r7, #24]
 800fa5a:	f7ff fb6d 	bl	800f138 <_Read8>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	461a      	mov	r2, r3
 800fa62:	4bb7      	ldr	r3, [pc, #732]	; (800fd40 <evtMspReceive+0x6ac>)
 800fa64:	72da      	strb	r2, [r3, #11]
        GPS_numSat = _Read8(p_port);
 800fa66:	69b8      	ldr	r0, [r7, #24]
 800fa68:	f7ff fb66 	bl	800f138 <_Read8>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	461a      	mov	r2, r3
 800fa70:	4bb4      	ldr	r3, [pc, #720]	; (800fd44 <evtMspReceive+0x6b0>)
 800fa72:	701a      	strb	r2, [r3, #0]
        GPS_coord[LAT] = _Read32(p_port);
 800fa74:	69b8      	ldr	r0, [r7, #24]
 800fa76:	f7ff fb90 	bl	800f19a <_Read32>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	461a      	mov	r2, r3
 800fa7e:	4bb2      	ldr	r3, [pc, #712]	; (800fd48 <evtMspReceive+0x6b4>)
 800fa80:	601a      	str	r2, [r3, #0]
        GPS_coord[LON] = _Read32(p_port);
 800fa82:	69b8      	ldr	r0, [r7, #24]
 800fa84:	f7ff fb89 	bl	800f19a <_Read32>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	4bae      	ldr	r3, [pc, #696]	; (800fd48 <evtMspReceive+0x6b4>)
 800fa8e:	605a      	str	r2, [r3, #4]
        GPS_altitude = _Read16(p_port);
 800fa90:	69b8      	ldr	r0, [r7, #24]
 800fa92:	f7ff fb65 	bl	800f160 <_Read16>
 800fa96:	4603      	mov	r3, r0
 800fa98:	461a      	mov	r2, r3
 800fa9a:	4bac      	ldr	r3, [pc, #688]	; (800fd4c <evtMspReceive+0x6b8>)
 800fa9c:	801a      	strh	r2, [r3, #0]
        GPS_speed = _Read16(p_port);
 800fa9e:	69b8      	ldr	r0, [r7, #24]
 800faa0:	f7ff fb5e 	bl	800f160 <_Read16>
 800faa4:	4603      	mov	r3, r0
 800faa6:	461a      	mov	r2, r3
 800faa8:	4ba9      	ldr	r3, [pc, #676]	; (800fd50 <evtMspReceive+0x6bc>)
 800faaa:	801a      	strh	r2, [r3, #0]
        GPS_update |= 2;        // New data signalisation to GPS functions
 800faac:	4ba9      	ldr	r3, [pc, #676]	; (800fd54 <evtMspReceive+0x6c0>)
 800faae:	781b      	ldrb	r3, [r3, #0]
 800fab0:	f043 0302 	orr.w	r3, r3, #2
 800fab4:	b2da      	uxtb	r2, r3
 800fab6:	4ba7      	ldr	r3, [pc, #668]	; (800fd54 <evtMspReceive+0x6c0>)
 800fab8:	701a      	strb	r2, [r3, #0]
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800faba:	2300      	movs	r3, #0
 800fabc:	2200      	movs	r2, #0
 800fabe:	6839      	ldr	r1, [r7, #0]
 800fac0:	6878      	ldr	r0, [r7, #4]
 800fac2:	f007 fe13 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 800fac6:	f001 bbde 	b.w	8011286 <evtMspReceive+0x1bf2>
#endif

    case MSP_SET_PID:
        for (i = 0; i < PIDITEMS; i++) {
 800faca:	2300      	movs	r3, #0
 800facc:	637b      	str	r3, [r7, #52]	; 0x34
 800face:	e03c      	b.n	800fb4a <evtMspReceive+0x4b6>
            cfg.P8[i] = _Read8(p_port);
 800fad0:	69b8      	ldr	r0, [r7, #24]
 800fad2:	f7ff fb31 	bl	800f138 <_Read8>
 800fad6:	4603      	mov	r3, r0
 800fad8:	4619      	mov	r1, r3
 800fada:	4a9f      	ldr	r2, [pc, #636]	; (800fd58 <evtMspReceive+0x6c4>)
 800fadc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fade:	4413      	add	r3, r2
 800fae0:	3301      	adds	r3, #1
 800fae2:	460a      	mov	r2, r1
 800fae4:	701a      	strb	r2, [r3, #0]
            cfg.I8[i] = _Read8(p_port);
 800fae6:	69b8      	ldr	r0, [r7, #24]
 800fae8:	f7ff fb26 	bl	800f138 <_Read8>
 800faec:	4603      	mov	r3, r0
 800faee:	4619      	mov	r1, r3
 800faf0:	4a99      	ldr	r2, [pc, #612]	; (800fd58 <evtMspReceive+0x6c4>)
 800faf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faf4:	4413      	add	r3, r2
 800faf6:	330b      	adds	r3, #11
 800faf8:	460a      	mov	r2, r1
 800fafa:	701a      	strb	r2, [r3, #0]
            cfg.D8[i] = _Read8(p_port);
 800fafc:	69b8      	ldr	r0, [r7, #24]
 800fafe:	f7ff fb1b 	bl	800f138 <_Read8>
 800fb02:	4603      	mov	r3, r0
 800fb04:	4619      	mov	r1, r3
 800fb06:	4a94      	ldr	r2, [pc, #592]	; (800fd58 <evtMspReceive+0x6c4>)
 800fb08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb0a:	4413      	add	r3, r2
 800fb0c:	3315      	adds	r3, #21
 800fb0e:	460a      	mov	r2, r1
 800fb10:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
            pifLog_Printf(LT_INFO, "S-PID:%d P=%u I=%u D=%u", i, cfg.P8[i], cfg.I8[i], cfg.D8[i]);
 800fb12:	4a91      	ldr	r2, [pc, #580]	; (800fd58 <evtMspReceive+0x6c4>)
 800fb14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb16:	4413      	add	r3, r2
 800fb18:	3301      	adds	r3, #1
 800fb1a:	781b      	ldrb	r3, [r3, #0]
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	4a8e      	ldr	r2, [pc, #568]	; (800fd58 <evtMspReceive+0x6c4>)
 800fb20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb22:	4413      	add	r3, r2
 800fb24:	330b      	adds	r3, #11
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	4619      	mov	r1, r3
 800fb2a:	4a8b      	ldr	r2, [pc, #556]	; (800fd58 <evtMspReceive+0x6c4>)
 800fb2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb2e:	4413      	add	r3, r2
 800fb30:	3315      	adds	r3, #21
 800fb32:	781b      	ldrb	r3, [r3, #0]
 800fb34:	9301      	str	r3, [sp, #4]
 800fb36:	9100      	str	r1, [sp, #0]
 800fb38:	4603      	mov	r3, r0
 800fb3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb3c:	4987      	ldr	r1, [pc, #540]	; (800fd5c <evtMspReceive+0x6c8>)
 800fb3e:	2002      	movs	r0, #2
 800fb40:	f003 fd28 	bl	8013594 <pifLog_Printf>
        for (i = 0; i < PIDITEMS; i++) {
 800fb44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb46:	3301      	adds	r3, #1
 800fb48:	637b      	str	r3, [r7, #52]	; 0x34
 800fb4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb4c:	2b09      	cmp	r3, #9
 800fb4e:	d9bf      	bls.n	800fad0 <evtMspReceive+0x43c>
#endif
        }
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fb50:	2300      	movs	r3, #0
 800fb52:	2200      	movs	r2, #0
 800fb54:	6839      	ldr	r1, [r7, #0]
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f007 fdc8 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 800fb5c:	f001 bb93 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_SET_BOX:
        for (i = 0; i < numberBoxItems; i++)
 800fb60:	2300      	movs	r3, #0
 800fb62:	637b      	str	r3, [r7, #52]	; 0x34
 800fb64:	e010      	b.n	800fb88 <evtMspReceive+0x4f4>
            cfg.activate[availableBoxes[i]] = _Read16(p_port);
 800fb66:	69b8      	ldr	r0, [r7, #24]
 800fb68:	f7ff fafa 	bl	800f160 <_Read16>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	4619      	mov	r1, r3
 800fb70:	4a7b      	ldr	r2, [pc, #492]	; (800fd60 <evtMspReceive+0x6cc>)
 800fb72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb74:	4413      	add	r3, r2
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	4a77      	ldr	r2, [pc, #476]	; (800fd58 <evtMspReceive+0x6c4>)
 800fb7a:	3312      	adds	r3, #18
 800fb7c:	009b      	lsls	r3, r3, #2
 800fb7e:	4413      	add	r3, r2
 800fb80:	6059      	str	r1, [r3, #4]
        for (i = 0; i < numberBoxItems; i++)
 800fb82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb84:	3301      	adds	r3, #1
 800fb86:	637b      	str	r3, [r7, #52]	; 0x34
 800fb88:	4b76      	ldr	r3, [pc, #472]	; (800fd64 <evtMspReceive+0x6d0>)
 800fb8a:	781b      	ldrb	r3, [r3, #0]
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb90:	4293      	cmp	r3, r2
 800fb92:	d3e8      	bcc.n	800fb66 <evtMspReceive+0x4d2>
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fb94:	2300      	movs	r3, #0
 800fb96:	2200      	movs	r2, #0
 800fb98:	6839      	ldr	r1, [r7, #0]
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f007 fda6 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 800fba0:	f001 bb71 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_SET_RC_TUNING:
        cfg.rcRate8 = _Read8(p_port);
 800fba4:	69b8      	ldr	r0, [r7, #24]
 800fba6:	f7ff fac7 	bl	800f138 <_Read8>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	461a      	mov	r2, r3
 800fbae:	4b6a      	ldr	r3, [pc, #424]	; (800fd58 <evtMspReceive+0x6c4>)
 800fbb0:	77da      	strb	r2, [r3, #31]
        cfg.rcExpo8 = _Read8(p_port);
 800fbb2:	69b8      	ldr	r0, [r7, #24]
 800fbb4:	f7ff fac0 	bl	800f138 <_Read8>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	461a      	mov	r2, r3
 800fbbc:	4b66      	ldr	r3, [pc, #408]	; (800fd58 <evtMspReceive+0x6c4>)
 800fbbe:	f883 2020 	strb.w	r2, [r3, #32]
        _Read8(p_port); // Legacy pitch-roll rate, read but not set.
 800fbc2:	69b8      	ldr	r0, [r7, #24]
 800fbc4:	f7ff fab8 	bl	800f138 <_Read8>
        cfg.yawRate = _Read8(p_port);
 800fbc8:	69b8      	ldr	r0, [r7, #24]
 800fbca:	f7ff fab5 	bl	800f138 <_Read8>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	461a      	mov	r2, r3
 800fbd2:	4b61      	ldr	r3, [pc, #388]	; (800fd58 <evtMspReceive+0x6c4>)
 800fbd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        cfg.dynThrPID = _Read8(p_port);
 800fbd8:	69b8      	ldr	r0, [r7, #24]
 800fbda:	f7ff faad 	bl	800f138 <_Read8>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	4b5d      	ldr	r3, [pc, #372]	; (800fd58 <evtMspReceive+0x6c4>)
 800fbe4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        cfg.thrMid8 = _Read8(p_port);
 800fbe8:	69b8      	ldr	r0, [r7, #24]
 800fbea:	f7ff faa5 	bl	800f138 <_Read8>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	461a      	mov	r2, r3
 800fbf2:	4b59      	ldr	r3, [pc, #356]	; (800fd58 <evtMspReceive+0x6c4>)
 800fbf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        cfg.thrExpo8 = _Read8(p_port);
 800fbf8:	69b8      	ldr	r0, [r7, #24]
 800fbfa:	f7ff fa9d 	bl	800f138 <_Read8>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	461a      	mov	r2, r3
 800fc02:	4b55      	ldr	r3, [pc, #340]	; (800fd58 <evtMspReceive+0x6c4>)
 800fc04:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fc08:	2300      	movs	r3, #0
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	6839      	ldr	r1, [r7, #0]
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f007 fd6c 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 800fc14:	f001 bb37 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_SET_MISC:
        tmp = _Read16(p_port);
 800fc18:	69b8      	ldr	r0, [r7, #24]
 800fc1a:	f7ff faa1 	bl	800f160 <_Read16>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	613b      	str	r3, [r7, #16]
        // sanity check
        if (tmp < 1600 && tmp > 1400)
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fc28:	d208      	bcs.n	800fc3c <evtMspReceive+0x5a8>
 800fc2a:	693b      	ldr	r3, [r7, #16]
 800fc2c:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800fc30:	d904      	bls.n	800fc3c <evtMspReceive+0x5a8>
            mcfg.midrc = tmp;
 800fc32:	693b      	ldr	r3, [r7, #16]
 800fc34:	b29a      	uxth	r2, r3
 800fc36:	4b4c      	ldr	r3, [pc, #304]	; (800fd68 <evtMspReceive+0x6d4>)
 800fc38:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
        mcfg.minthrottle = _Read16(p_port);
 800fc3c:	69b8      	ldr	r0, [r7, #24]
 800fc3e:	f7ff fa8f 	bl	800f160 <_Read16>
 800fc42:	4603      	mov	r3, r0
 800fc44:	461a      	mov	r2, r3
 800fc46:	4b48      	ldr	r3, [pc, #288]	; (800fd68 <evtMspReceive+0x6d4>)
 800fc48:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
        mcfg.maxthrottle = _Read16(p_port);
 800fc4c:	69b8      	ldr	r0, [r7, #24]
 800fc4e:	f7ff fa87 	bl	800f160 <_Read16>
 800fc52:	4603      	mov	r3, r0
 800fc54:	461a      	mov	r2, r3
 800fc56:	4b44      	ldr	r3, [pc, #272]	; (800fd68 <evtMspReceive+0x6d4>)
 800fc58:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
        mcfg.mincommand = _Read16(p_port);
 800fc5c:	69b8      	ldr	r0, [r7, #24]
 800fc5e:	f7ff fa7f 	bl	800f160 <_Read16>
 800fc62:	4603      	mov	r3, r0
 800fc64:	461a      	mov	r2, r3
 800fc66:	4b40      	ldr	r3, [pc, #256]	; (800fd68 <evtMspReceive+0x6d4>)
 800fc68:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
        cfg.failsafe_throttle = _Read16(p_port);
 800fc6c:	69b8      	ldr	r0, [r7, #24]
 800fc6e:	f7ff fa77 	bl	800f160 <_Read16>
 800fc72:	4603      	mov	r3, r0
 800fc74:	461a      	mov	r2, r3
 800fc76:	4b38      	ldr	r3, [pc, #224]	; (800fd58 <evtMspReceive+0x6c4>)
 800fc78:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
        mcfg.gps_type = _Read8(p_port);
 800fc7c:	69b8      	ldr	r0, [r7, #24]
 800fc7e:	f7ff fa5b 	bl	800f138 <_Read8>
 800fc82:	4603      	mov	r3, r0
 800fc84:	461a      	mov	r2, r3
 800fc86:	4b38      	ldr	r3, [pc, #224]	; (800fd68 <evtMspReceive+0x6d4>)
 800fc88:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
        mcfg.gps_baudrate = _Read8(p_port);
 800fc8c:	69b8      	ldr	r0, [r7, #24]
 800fc8e:	f7ff fa53 	bl	800f138 <_Read8>
 800fc92:	4603      	mov	r3, r0
 800fc94:	b25a      	sxtb	r2, r3
 800fc96:	4b34      	ldr	r3, [pc, #208]	; (800fd68 <evtMspReceive+0x6d4>)
 800fc98:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
        mcfg.gps_ubx_sbas = _Read8(p_port);
 800fc9c:	69b8      	ldr	r0, [r7, #24]
 800fc9e:	f7ff fa4b 	bl	800f138 <_Read8>
 800fca2:	4603      	mov	r3, r0
 800fca4:	b25a      	sxtb	r2, r3
 800fca6:	4b30      	ldr	r3, [pc, #192]	; (800fd68 <evtMspReceive+0x6d4>)
 800fca8:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
        mcfg.multiwiicurrentoutput = _Read8(p_port);
 800fcac:	69b8      	ldr	r0, [r7, #24]
 800fcae:	f7ff fa43 	bl	800f138 <_Read8>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	4b2c      	ldr	r3, [pc, #176]	; (800fd68 <evtMspReceive+0x6d4>)
 800fcb8:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
        mcfg.rssi_aux_channel = _Read8(p_port);
 800fcbc:	69b8      	ldr	r0, [r7, #24]
 800fcbe:	f7ff fa3b 	bl	800f138 <_Read8>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	461a      	mov	r2, r3
 800fcc6:	4b28      	ldr	r3, [pc, #160]	; (800fd68 <evtMspReceive+0x6d4>)
 800fcc8:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
        _Read8(p_port);
 800fccc:	69b8      	ldr	r0, [r7, #24]
 800fcce:	f7ff fa33 	bl	800f138 <_Read8>
        cfg.mag_declination = _Read16(p_port) * 10;
 800fcd2:	69b8      	ldr	r0, [r7, #24]
 800fcd4:	f7ff fa44 	bl	800f160 <_Read16>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	461a      	mov	r2, r3
 800fcdc:	0092      	lsls	r2, r2, #2
 800fcde:	4413      	add	r3, r2
 800fce0:	005b      	lsls	r3, r3, #1
 800fce2:	b29b      	uxth	r3, r3
 800fce4:	b21a      	sxth	r2, r3
 800fce6:	4b1c      	ldr	r3, [pc, #112]	; (800fd58 <evtMspReceive+0x6c4>)
 800fce8:	855a      	strh	r2, [r3, #42]	; 0x2a
        mcfg.vbatscale = _Read8(p_port);           // actual vbatscale as intended
 800fcea:	69b8      	ldr	r0, [r7, #24]
 800fcec:	f7ff fa24 	bl	800f138 <_Read8>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	461a      	mov	r2, r3
 800fcf4:	4b1c      	ldr	r3, [pc, #112]	; (800fd68 <evtMspReceive+0x6d4>)
 800fcf6:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
        mcfg.vbatmincellvoltage = _Read8(p_port);  // vbatlevel_warn1 in MWC2.3 GUI
 800fcfa:	69b8      	ldr	r0, [r7, #24]
 800fcfc:	f7ff fa1c 	bl	800f138 <_Read8>
 800fd00:	4603      	mov	r3, r0
 800fd02:	461a      	mov	r2, r3
 800fd04:	4b18      	ldr	r3, [pc, #96]	; (800fd68 <evtMspReceive+0x6d4>)
 800fd06:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
        mcfg.vbatmaxcellvoltage = _Read8(p_port);  // vbatlevel_warn2 in MWC2.3 GUI
 800fd0a:	69b8      	ldr	r0, [r7, #24]
 800fd0c:	f7ff fa14 	bl	800f138 <_Read8>
 800fd10:	4603      	mov	r3, r0
 800fd12:	461a      	mov	r2, r3
 800fd14:	4b14      	ldr	r3, [pc, #80]	; (800fd68 <evtMspReceive+0x6d4>)
 800fd16:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
        mcfg.vbatwarningcellvoltage = _Read8(p_port); // vbatlevel when buzzer starts to alert
 800fd1a:	69b8      	ldr	r0, [r7, #24]
 800fd1c:	f7ff fa0c 	bl	800f138 <_Read8>
 800fd20:	4603      	mov	r3, r0
 800fd22:	461a      	mov	r2, r3
 800fd24:	4b10      	ldr	r3, [pc, #64]	; (800fd68 <evtMspReceive+0x6d4>)
 800fd26:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	6839      	ldr	r1, [r7, #0]
 800fd30:	6878      	ldr	r0, [r7, #4]
 800fd32:	f007 fcdb 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 800fd36:	f001 baa6 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_SET_MOTOR:
        for (i = 0; i < 8; i++)
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	637b      	str	r3, [r7, #52]	; 0x34
 800fd3e:	e021      	b.n	800fd84 <evtMspReceive+0x6f0>
 800fd40:	20001988 	.word	0x20001988
 800fd44:	20001a70 	.word	0x20001a70
 800fd48:	20001a50 	.word	0x20001a50
 800fd4c:	20001a76 	.word	0x20001a76
 800fd50:	20001a78 	.word	0x20001a78
 800fd54:	20001a7a 	.word	0x20001a7a
 800fd58:	20001128 	.word	0x20001128
 800fd5c:	080264a0 	.word	0x080264a0
 800fd60:	20001f04 	.word	0x20001f04
 800fd64:	20001f1d 	.word	0x20001f1d
 800fd68:	20000bbc 	.word	0x20000bbc
            motor_disarmed[i] = _Read16(p_port);
 800fd6c:	69b8      	ldr	r0, [r7, #24]
 800fd6e:	f7ff f9f7 	bl	800f160 <_Read16>
 800fd72:	4603      	mov	r3, r0
 800fd74:	b219      	sxth	r1, r3
 800fd76:	4aa6      	ldr	r2, [pc, #664]	; (8010010 <evtMspReceive+0x97c>)
 800fd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < 8; i++)
 800fd7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd80:	3301      	adds	r3, #1
 800fd82:	637b      	str	r3, [r7, #52]	; 0x34
 800fd84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd86:	2b07      	cmp	r3, #7
 800fd88:	d9f0      	bls.n	800fd6c <evtMspReceive+0x6d8>
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	6839      	ldr	r1, [r7, #0]
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f007 fcab 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 800fd96:	f001 ba76 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_SELECT_SETTING:
        if (!f.ARMED) {
 800fd9a:	4b9e      	ldr	r3, [pc, #632]	; (8010014 <evtMspReceive+0x980>)
 800fd9c:	785b      	ldrb	r3, [r3, #1]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d114      	bne.n	800fdcc <evtMspReceive+0x738>
            mcfg.current_profile = _Read8(p_port);
 800fda2:	69b8      	ldr	r0, [r7, #24]
 800fda4:	f7ff f9c8 	bl	800f138 <_Read8>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	461a      	mov	r2, r3
 800fdac:	4b9a      	ldr	r3, [pc, #616]	; (8010018 <evtMspReceive+0x984>)
 800fdae:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            if (mcfg.current_profile > 2)
 800fdb2:	4b99      	ldr	r3, [pc, #612]	; (8010018 <evtMspReceive+0x984>)
 800fdb4:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800fdb8:	2b02      	cmp	r3, #2
 800fdba:	d903      	bls.n	800fdc4 <evtMspReceive+0x730>
                mcfg.current_profile = 0;
 800fdbc:	4b96      	ldr	r3, [pc, #600]	; (8010018 <evtMspReceive+0x984>)
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            // this writes new profile index and re-reads it
            writeEEPROM(0, false);
 800fdc4:	2100      	movs	r1, #0
 800fdc6:	2000      	movs	r0, #0
 800fdc8:	f7f6 fd2c 	bl	8006824 <writeEEPROM>
        }
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fdcc:	2300      	movs	r3, #0
 800fdce:	2200      	movs	r2, #0
 800fdd0:	6839      	ldr	r1, [r7, #0]
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	f007 fc8a 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 800fdd8:	f001 ba55 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_SET_HEAD:
        magHold = _Read16(p_port);
 800fddc:	69b8      	ldr	r0, [r7, #24]
 800fdde:	f7ff f9bf 	bl	800f160 <_Read16>
 800fde2:	4603      	mov	r3, r0
 800fde4:	b21a      	sxth	r2, r3
 800fde6:	4b8d      	ldr	r3, [pc, #564]	; (801001c <evtMspReceive+0x988>)
 800fde8:	801a      	strh	r2, [r3, #0]
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fdea:	2300      	movs	r3, #0
 800fdec:	2200      	movs	r2, #0
 800fdee:	6839      	ldr	r1, [r7, #0]
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f007 fc7b 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 800fdf6:	f001 ba46 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_IDENT:
        _Serialize8(p_port, VERSION);                    // multiwii version
 800fdfa:	21e7      	movs	r1, #231	; 0xe7
 800fdfc:	69b8      	ldr	r0, [r7, #24]
 800fdfe:	f7ff f9f5 	bl	800f1ec <_Serialize8>
        _Serialize8(p_port, mcfg.mixerConfiguration);    // type of multicopter
 800fe02:	4b85      	ldr	r3, [pc, #532]	; (8010018 <evtMspReceive+0x984>)
 800fe04:	795b      	ldrb	r3, [r3, #5]
 800fe06:	4619      	mov	r1, r3
 800fe08:	69b8      	ldr	r0, [r7, #24]
 800fe0a:	f7ff f9ef 	bl	800f1ec <_Serialize8>
        _Serialize8(p_port, MSP_VERSION);                // MultiWii Serial Protocol Version
 800fe0e:	2104      	movs	r1, #4
 800fe10:	69b8      	ldr	r0, [r7, #24]
 800fe12:	f7ff f9eb 	bl	800f1ec <_Serialize8>
        _Serialize32(p_port, CAP_PLATFORM_32BIT | CAP_BASEFLIGHT_CONFIG | CAP_DYNBALANCE | CAP_FW_FLAPS); // "capability"
 800fe16:	4982      	ldr	r1, [pc, #520]	; (8010020 <evtMspReceive+0x98c>)
 800fe18:	69b8      	ldr	r0, [r7, #24]
 800fe1a:	f7ff fa22 	bl	800f262 <_Serialize32>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 7);
 800fe1e:	69bb      	ldr	r3, [r7, #24]
 800fe20:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800fe24:	2307      	movs	r3, #7
 800fe26:	6839      	ldr	r1, [r7, #0]
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f007 fc5f 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 800fe2e:	f001 ba2a 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_STATUS:
        _Serialize16(p_port, cycleTime);
 800fe32:	4b7c      	ldr	r3, [pc, #496]	; (8010024 <evtMspReceive+0x990>)
 800fe34:	881b      	ldrh	r3, [r3, #0]
 800fe36:	b21b      	sxth	r3, r3
 800fe38:	4619      	mov	r1, r3
 800fe3a:	69b8      	ldr	r0, [r7, #24]
 800fe3c:	f7ff f9ee 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, g_i2c_port.error_count);
 800fe40:	4b79      	ldr	r3, [pc, #484]	; (8010028 <evtMspReceive+0x994>)
 800fe42:	881b      	ldrh	r3, [r3, #0]
 800fe44:	b21b      	sxth	r3, r3
 800fe46:	4619      	mov	r1, r3
 800fe48:	69b8      	ldr	r0, [r7, #24]
 800fe4a:	f7ff f9e7 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, sensors(SENSOR_ACC) | sensors(SENSOR_BARO) << 1 | sensors(SENSOR_MAG) << 2 | sensors(SENSOR_GPS) << 3 | sensors(SENSOR_SONAR) << 4);
 800fe4e:	2002      	movs	r0, #2
 800fe50:	f7f7 f882 	bl	8006f58 <sensors>
 800fe54:	4603      	mov	r3, r0
 800fe56:	b21c      	sxth	r4, r3
 800fe58:	2004      	movs	r0, #4
 800fe5a:	f7f7 f87d 	bl	8006f58 <sensors>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	005b      	lsls	r3, r3, #1
 800fe62:	b21b      	sxth	r3, r3
 800fe64:	4323      	orrs	r3, r4
 800fe66:	b21c      	sxth	r4, r3
 800fe68:	2008      	movs	r0, #8
 800fe6a:	f7f7 f875 	bl	8006f58 <sensors>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	009b      	lsls	r3, r3, #2
 800fe72:	b21b      	sxth	r3, r3
 800fe74:	4323      	orrs	r3, r4
 800fe76:	b21c      	sxth	r4, r3
 800fe78:	2020      	movs	r0, #32
 800fe7a:	f7f7 f86d 	bl	8006f58 <sensors>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	00db      	lsls	r3, r3, #3
 800fe82:	b21b      	sxth	r3, r3
 800fe84:	4323      	orrs	r3, r4
 800fe86:	b21c      	sxth	r4, r3
 800fe88:	2010      	movs	r0, #16
 800fe8a:	f7f7 f865 	bl	8006f58 <sensors>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	011b      	lsls	r3, r3, #4
 800fe92:	b21b      	sxth	r3, r3
 800fe94:	4323      	orrs	r3, r4
 800fe96:	b21b      	sxth	r3, r3
 800fe98:	4619      	mov	r1, r3
 800fe9a:	69b8      	ldr	r0, [r7, #24]
 800fe9c:	f7ff f9be 	bl	800f21c <_Serialize16>
        // OK, so you waste all the fucking time to have BOXNAMES and BOXINDEXES etc, and then you go ahead and serialize enabled shit simply by stuffing all
        // the bits in order, instead of setting the enabled bits based on BOXINDEX. WHERE IS THE FUCKING LOGIC IN THIS, FUCKWADS.
        // Serialize the boxes in the order we delivered them, until multiwii retards fix their shit
        junk = 0;
 800fea0:	2300      	movs	r3, #0
 800fea2:	62fb      	str	r3, [r7, #44]	; 0x2c
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800fea4:	4b5b      	ldr	r3, [pc, #364]	; (8010014 <evtMspReceive+0x980>)
 800fea6:	78db      	ldrb	r3, [r3, #3]
 800fea8:	005a      	lsls	r2, r3, #1
 800feaa:	4b5a      	ldr	r3, [pc, #360]	; (8010014 <evtMspReceive+0x980>)
 800feac:	791b      	ldrb	r3, [r3, #4]
 800feae:	009b      	lsls	r3, r3, #2
 800feb0:	431a      	orrs	r2, r3
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800feb2:	4b58      	ldr	r3, [pc, #352]	; (8010014 <evtMspReceive+0x980>)
 800feb4:	799b      	ldrb	r3, [r3, #6]
 800feb6:	00db      	lsls	r3, r3, #3
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800feb8:	431a      	orrs	r2, r3
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800feba:	4b56      	ldr	r3, [pc, #344]	; (8010014 <evtMspReceive+0x980>)
 800febc:	795b      	ldrb	r3, [r3, #5]
 800febe:	015b      	lsls	r3, r3, #5
 800fec0:	431a      	orrs	r2, r3
 800fec2:	4b54      	ldr	r3, [pc, #336]	; (8010014 <evtMspReceive+0x980>)
 800fec4:	7a5b      	ldrb	r3, [r3, #9]
 800fec6:	019b      	lsls	r3, r3, #6
 800fec8:	431a      	orrs	r2, r3
 800feca:	4b58      	ldr	r3, [pc, #352]	; (801002c <evtMspReceive+0x998>)
 800fecc:	79db      	ldrb	r3, [r3, #7]
 800fece:	01db      	lsls	r3, r3, #7
 800fed0:	431a      	orrs	r2, r3
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800fed2:	4b56      	ldr	r3, [pc, #344]	; (801002c <evtMspReceive+0x998>)
 800fed4:	7a1b      	ldrb	r3, [r3, #8]
 800fed6:	021b      	lsls	r3, r3, #8
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800fed8:	431a      	orrs	r2, r3
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800feda:	4b54      	ldr	r3, [pc, #336]	; (801002c <evtMspReceive+0x998>)
 800fedc:	7a5b      	ldrb	r3, [r3, #9]
 800fede:	025b      	lsls	r3, r3, #9
 800fee0:	431a      	orrs	r2, r3
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800fee2:	4b4c      	ldr	r3, [pc, #304]	; (8010014 <evtMspReceive+0x980>)
 800fee4:	79db      	ldrb	r3, [r3, #7]
 800fee6:	029b      	lsls	r3, r3, #10
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800fee8:	431a      	orrs	r2, r3
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800feea:	4b4a      	ldr	r3, [pc, #296]	; (8010014 <evtMspReceive+0x980>)
 800feec:	7a1b      	ldrb	r3, [r3, #8]
 800feee:	02db      	lsls	r3, r3, #11
 800fef0:	431a      	orrs	r2, r3
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800fef2:	4b48      	ldr	r3, [pc, #288]	; (8010014 <evtMspReceive+0x980>)
 800fef4:	7d1b      	ldrb	r3, [r3, #20]
 800fef6:	061b      	lsls	r3, r3, #24
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800fef8:	431a      	orrs	r2, r3
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800fefa:	4b46      	ldr	r3, [pc, #280]	; (8010014 <evtMspReceive+0x980>)
 800fefc:	7a9b      	ldrb	r3, [r3, #10]
 800fefe:	031b      	lsls	r3, r3, #12
 800ff00:	431a      	orrs	r2, r3
                rcOptions[BOXBEEPERON] << BOXBEEPERON |
 800ff02:	4b4a      	ldr	r3, [pc, #296]	; (801002c <evtMspReceive+0x998>)
 800ff04:	7b5b      	ldrb	r3, [r3, #13]
 800ff06:	035b      	lsls	r3, r3, #13
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800ff08:	431a      	orrs	r2, r3
                rcOptions[BOXLEDMAX] << BOXLEDMAX |
 800ff0a:	4b48      	ldr	r3, [pc, #288]	; (801002c <evtMspReceive+0x998>)
 800ff0c:	7b9b      	ldrb	r3, [r3, #14]
 800ff0e:	039b      	lsls	r3, r3, #14
                rcOptions[BOXBEEPERON] << BOXBEEPERON |
 800ff10:	431a      	orrs	r2, r3
                rcOptions[BOXLLIGHTS] << BOXLLIGHTS |
 800ff12:	4b46      	ldr	r3, [pc, #280]	; (801002c <evtMspReceive+0x998>)
 800ff14:	7c1b      	ldrb	r3, [r3, #16]
 800ff16:	041b      	lsls	r3, r3, #16
                rcOptions[BOXLEDMAX] << BOXLEDMAX |
 800ff18:	431a      	orrs	r2, r3
                rcOptions[BOXVARIO] << BOXVARIO |
 800ff1a:	4b44      	ldr	r3, [pc, #272]	; (801002c <evtMspReceive+0x998>)
 800ff1c:	791b      	ldrb	r3, [r3, #4]
 800ff1e:	011b      	lsls	r3, r3, #4
                rcOptions[BOXLLIGHTS] << BOXLLIGHTS |
 800ff20:	431a      	orrs	r2, r3
                rcOptions[BOXCALIB] << BOXCALIB |
 800ff22:	4b42      	ldr	r3, [pc, #264]	; (801002c <evtMspReceive+0x998>)
 800ff24:	7c5b      	ldrb	r3, [r3, #17]
 800ff26:	045b      	lsls	r3, r3, #17
                rcOptions[BOXVARIO] << BOXVARIO |
 800ff28:	431a      	orrs	r2, r3
                rcOptions[BOXGOV] << BOXGOV |
 800ff2a:	4b40      	ldr	r3, [pc, #256]	; (801002c <evtMspReceive+0x998>)
 800ff2c:	7c9b      	ldrb	r3, [r3, #18]
 800ff2e:	049b      	lsls	r3, r3, #18
                rcOptions[BOXCALIB] << BOXCALIB |
 800ff30:	431a      	orrs	r2, r3
                rcOptions[BOXOSD] << BOXOSD |
 800ff32:	4b3e      	ldr	r3, [pc, #248]	; (801002c <evtMspReceive+0x998>)
 800ff34:	7cdb      	ldrb	r3, [r3, #19]
 800ff36:	04db      	lsls	r3, r3, #19
                rcOptions[BOXGOV] << BOXGOV |
 800ff38:	431a      	orrs	r2, r3
                rcOptions[BOXTELEMETRY] << BOXTELEMETRY |
 800ff3a:	4b3c      	ldr	r3, [pc, #240]	; (801002c <evtMspReceive+0x998>)
 800ff3c:	7d1b      	ldrb	r3, [r3, #20]
 800ff3e:	051b      	lsls	r3, r3, #20
                rcOptions[BOXOSD] << BOXOSD |
 800ff40:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO1] << BOXSERVO1 |
 800ff42:	4b3a      	ldr	r3, [pc, #232]	; (801002c <evtMspReceive+0x998>)
 800ff44:	7d5b      	ldrb	r3, [r3, #21]
 800ff46:	055b      	lsls	r3, r3, #21
                rcOptions[BOXTELEMETRY] << BOXTELEMETRY |
 800ff48:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO2] << BOXSERVO2 |
 800ff4a:	4b38      	ldr	r3, [pc, #224]	; (801002c <evtMspReceive+0x998>)
 800ff4c:	7d9b      	ldrb	r3, [r3, #22]
 800ff4e:	059b      	lsls	r3, r3, #22
                rcOptions[BOXSERVO1] << BOXSERVO1 |
 800ff50:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO3] << BOXSERVO3 |
 800ff52:	4b36      	ldr	r3, [pc, #216]	; (801002c <evtMspReceive+0x998>)
 800ff54:	7ddb      	ldrb	r3, [r3, #23]
 800ff56:	05db      	lsls	r3, r3, #23
                rcOptions[BOXSERVO2] << BOXSERVO2 |
 800ff58:	4313      	orrs	r3, r2
                f.ARMED << BOXARM;
 800ff5a:	4a2e      	ldr	r2, [pc, #184]	; (8010014 <evtMspReceive+0x980>)
 800ff5c:	7852      	ldrb	r2, [r2, #1]
                rcOptions[BOXSERVO3] << BOXSERVO3 |
 800ff5e:	4313      	orrs	r3, r2
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800ff60:	613b      	str	r3, [r7, #16]
        for (i = 0; i < numberBoxItems; i++) {
 800ff62:	2300      	movs	r3, #0
 800ff64:	637b      	str	r3, [r7, #52]	; 0x34
 800ff66:	e018      	b.n	800ff9a <evtMspReceive+0x906>
            int flag = (tmp & (1 << availableBoxes[i]));
 800ff68:	4a31      	ldr	r2, [pc, #196]	; (8010030 <evtMspReceive+0x99c>)
 800ff6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff6c:	4413      	add	r3, r2
 800ff6e:	781b      	ldrb	r3, [r3, #0]
 800ff70:	461a      	mov	r2, r3
 800ff72:	2301      	movs	r3, #1
 800ff74:	4093      	lsls	r3, r2
 800ff76:	461a      	mov	r2, r3
 800ff78:	693b      	ldr	r3, [r7, #16]
 800ff7a:	4013      	ands	r3, r2
 800ff7c:	60fb      	str	r3, [r7, #12]
            if (flag)
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d007      	beq.n	800ff94 <evtMspReceive+0x900>
                junk |= 1 << i;
 800ff84:	2201      	movs	r2, #1
 800ff86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff88:	fa02 f303 	lsl.w	r3, r2, r3
 800ff8c:	461a      	mov	r2, r3
 800ff8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff90:	4313      	orrs	r3, r2
 800ff92:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = 0; i < numberBoxItems; i++) {
 800ff94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff96:	3301      	adds	r3, #1
 800ff98:	637b      	str	r3, [r7, #52]	; 0x34
 800ff9a:	4b26      	ldr	r3, [pc, #152]	; (8010034 <evtMspReceive+0x9a0>)
 800ff9c:	781b      	ldrb	r3, [r3, #0]
 800ff9e:	461a      	mov	r2, r3
 800ffa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffa2:	4293      	cmp	r3, r2
 800ffa4:	d3e0      	bcc.n	800ff68 <evtMspReceive+0x8d4>
        }
        _Serialize32(p_port, junk);
 800ffa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ffa8:	69b8      	ldr	r0, [r7, #24]
 800ffaa:	f7ff f95a 	bl	800f262 <_Serialize32>
        _Serialize8(p_port, mcfg.current_profile);
 800ffae:	4b1a      	ldr	r3, [pc, #104]	; (8010018 <evtMspReceive+0x984>)
 800ffb0:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	69b8      	ldr	r0, [r7, #24]
 800ffb8:	f7ff f918 	bl	800f1ec <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 11);
 800ffbc:	69bb      	ldr	r3, [r7, #24]
 800ffbe:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800ffc2:	230b      	movs	r3, #11
 800ffc4:	6839      	ldr	r1, [r7, #0]
 800ffc6:	6878      	ldr	r0, [r7, #4]
 800ffc8:	f007 fb90 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 800ffcc:	f001 b95b 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_RAW_IMU:
        // Retarded hack until multiwiidorks start using real units for sensor data
        if (acc_1G > 1024) {
 800ffd0:	4b19      	ldr	r3, [pc, #100]	; (8010038 <evtMspReceive+0x9a4>)
 800ffd2:	881b      	ldrh	r3, [r3, #0]
 800ffd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ffd8:	d916      	bls.n	8010008 <evtMspReceive+0x974>
            for (i = 0; i < 3; i++)
 800ffda:	2300      	movs	r3, #0
 800ffdc:	637b      	str	r3, [r7, #52]	; 0x34
 800ffde:	e00f      	b.n	8010000 <evtMspReceive+0x96c>
                _Serialize16(p_port, accSmooth[i] / 8);
 800ffe0:	4a16      	ldr	r2, [pc, #88]	; (801003c <evtMspReceive+0x9a8>)
 800ffe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffe4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	da00      	bge.n	800ffee <evtMspReceive+0x95a>
 800ffec:	3307      	adds	r3, #7
 800ffee:	10db      	asrs	r3, r3, #3
 800fff0:	b21b      	sxth	r3, r3
 800fff2:	4619      	mov	r1, r3
 800fff4:	69b8      	ldr	r0, [r7, #24]
 800fff6:	f7ff f911 	bl	800f21c <_Serialize16>
            for (i = 0; i < 3; i++)
 800fffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fffc:	3301      	adds	r3, #1
 800fffe:	637b      	str	r3, [r7, #52]	; 0x34
 8010000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010002:	2b02      	cmp	r3, #2
 8010004:	d9ec      	bls.n	800ffe0 <evtMspReceive+0x94c>
 8010006:	e029      	b.n	801005c <evtMspReceive+0x9c8>
        } else {
            for (i = 0; i < 3; i++)
 8010008:	2300      	movs	r3, #0
 801000a:	637b      	str	r3, [r7, #52]	; 0x34
 801000c:	e023      	b.n	8010056 <evtMspReceive+0x9c2>
 801000e:	bf00      	nop
 8010010:	20001808 	.word	0x20001808
 8010014:	20001988 	.word	0x20001988
 8010018:	20000bbc 	.word	0x20000bbc
 801001c:	20001cb6 	.word	0x20001cb6
 8010020:	c000000c 	.word	0xc000000c
 8010024:	200019ac 	.word	0x200019ac
 8010028:	20001b34 	.word	0x20001b34
 801002c:	20001a2c 	.word	0x20001a2c
 8010030:	20001f04 	.word	0x20001f04
 8010034:	20001f1d 	.word	0x20001f1d
 8010038:	2000005a 	.word	0x2000005a
 801003c:	20001718 	.word	0x20001718
                _Serialize16(p_port, accSmooth[i]);
 8010040:	4ab5      	ldr	r2, [pc, #724]	; (8010318 <evtMspReceive+0xc84>)
 8010042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010044:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010048:	4619      	mov	r1, r3
 801004a:	69b8      	ldr	r0, [r7, #24]
 801004c:	f7ff f8e6 	bl	800f21c <_Serialize16>
            for (i = 0; i < 3; i++)
 8010050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010052:	3301      	adds	r3, #1
 8010054:	637b      	str	r3, [r7, #52]	; 0x34
 8010056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010058:	2b02      	cmp	r3, #2
 801005a:	d9f1      	bls.n	8010040 <evtMspReceive+0x9ac>
        }
        for (i = 0; i < 3; i++)
 801005c:	2300      	movs	r3, #0
 801005e:	637b      	str	r3, [r7, #52]	; 0x34
 8010060:	e00a      	b.n	8010078 <evtMspReceive+0x9e4>
            _Serialize16(p_port, gyroData[i]);
 8010062:	4aae      	ldr	r2, [pc, #696]	; (801031c <evtMspReceive+0xc88>)
 8010064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010066:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801006a:	4619      	mov	r1, r3
 801006c:	69b8      	ldr	r0, [r7, #24]
 801006e:	f7ff f8d5 	bl	800f21c <_Serialize16>
        for (i = 0; i < 3; i++)
 8010072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010074:	3301      	adds	r3, #1
 8010076:	637b      	str	r3, [r7, #52]	; 0x34
 8010078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801007a:	2b02      	cmp	r3, #2
 801007c:	d9f1      	bls.n	8010062 <evtMspReceive+0x9ce>
        for (i = 0; i < 3; i++)
 801007e:	2300      	movs	r3, #0
 8010080:	637b      	str	r3, [r7, #52]	; 0x34
 8010082:	e00a      	b.n	801009a <evtMspReceive+0xa06>
            _Serialize16(p_port, magADC[i]);
 8010084:	4aa6      	ldr	r2, [pc, #664]	; (8010320 <evtMspReceive+0xc8c>)
 8010086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010088:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801008c:	4619      	mov	r1, r3
 801008e:	69b8      	ldr	r0, [r7, #24]
 8010090:	f7ff f8c4 	bl	800f21c <_Serialize16>
        for (i = 0; i < 3; i++)
 8010094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010096:	3301      	adds	r3, #1
 8010098:	637b      	str	r3, [r7, #52]	; 0x34
 801009a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801009c:	2b02      	cmp	r3, #2
 801009e:	d9f1      	bls.n	8010084 <evtMspReceive+0x9f0>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 18);
 80100a0:	69bb      	ldr	r3, [r7, #24]
 80100a2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80100a6:	2312      	movs	r3, #18
 80100a8:	6839      	ldr	r1, [r7, #0]
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f007 fb1e 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 80100b0:	f001 b8e9 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_SERVO:
        _SerializeStruct(p_port, (uint8_t *)&servo, 16);
 80100b4:	2210      	movs	r2, #16
 80100b6:	499b      	ldr	r1, [pc, #620]	; (8010324 <evtMspReceive+0xc90>)
 80100b8:	69b8      	ldr	r0, [r7, #24]
 80100ba:	f7ff f902 	bl	800f2c2 <_SerializeStruct>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 16);
 80100be:	69bb      	ldr	r3, [r7, #24]
 80100c0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80100c4:	2310      	movs	r3, #16
 80100c6:	6839      	ldr	r1, [r7, #0]
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f007 fb0f 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 80100ce:	f001 b8da 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_SERVO_CONF:
        for (i = 0; i < MAX_SERVOS; i++) {
 80100d2:	2300      	movs	r3, #0
 80100d4:	637b      	str	r3, [r7, #52]	; 0x34
 80100d6:	e049      	b.n	801016c <evtMspReceive+0xad8>
            _Serialize16(p_port, cfg.servoConf[i].min);
 80100d8:	4993      	ldr	r1, [pc, #588]	; (8010328 <evtMspReceive+0xc94>)
 80100da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100dc:	4613      	mov	r3, r2
 80100de:	009b      	lsls	r3, r3, #2
 80100e0:	4413      	add	r3, r2
 80100e2:	005b      	lsls	r3, r3, #1
 80100e4:	440b      	add	r3, r1
 80100e6:	33b8      	adds	r3, #184	; 0xb8
 80100e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80100ec:	4619      	mov	r1, r3
 80100ee:	69b8      	ldr	r0, [r7, #24]
 80100f0:	f7ff f894 	bl	800f21c <_Serialize16>
            _Serialize16(p_port, cfg.servoConf[i].max);
 80100f4:	498c      	ldr	r1, [pc, #560]	; (8010328 <evtMspReceive+0xc94>)
 80100f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100f8:	4613      	mov	r3, r2
 80100fa:	009b      	lsls	r3, r3, #2
 80100fc:	4413      	add	r3, r2
 80100fe:	005b      	lsls	r3, r3, #1
 8010100:	440b      	add	r3, r1
 8010102:	33ba      	adds	r3, #186	; 0xba
 8010104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010108:	4619      	mov	r1, r3
 801010a:	69b8      	ldr	r0, [r7, #24]
 801010c:	f7ff f886 	bl	800f21c <_Serialize16>
            _Serialize16(p_port, cfg.servoConf[i].middle);
 8010110:	4985      	ldr	r1, [pc, #532]	; (8010328 <evtMspReceive+0xc94>)
 8010112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010114:	4613      	mov	r3, r2
 8010116:	009b      	lsls	r3, r3, #2
 8010118:	4413      	add	r3, r2
 801011a:	005b      	lsls	r3, r3, #1
 801011c:	440b      	add	r3, r1
 801011e:	33bc      	adds	r3, #188	; 0xbc
 8010120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010124:	4619      	mov	r1, r3
 8010126:	69b8      	ldr	r0, [r7, #24]
 8010128:	f7ff f878 	bl	800f21c <_Serialize16>
            _Serialize8(p_port, cfg.servoConf[i].rate);
 801012c:	497e      	ldr	r1, [pc, #504]	; (8010328 <evtMspReceive+0xc94>)
 801012e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010130:	4613      	mov	r3, r2
 8010132:	009b      	lsls	r3, r3, #2
 8010134:	4413      	add	r3, r2
 8010136:	005b      	lsls	r3, r3, #1
 8010138:	440b      	add	r3, r1
 801013a:	33be      	adds	r3, #190	; 0xbe
 801013c:	f993 3000 	ldrsb.w	r3, [r3]
 8010140:	b2db      	uxtb	r3, r3
 8010142:	4619      	mov	r1, r3
 8010144:	69b8      	ldr	r0, [r7, #24]
 8010146:	f7ff f851 	bl	800f1ec <_Serialize8>
            _Serialize16(p_port, cfg.servoConf[i].direction);
 801014a:	4977      	ldr	r1, [pc, #476]	; (8010328 <evtMspReceive+0xc94>)
 801014c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801014e:	4613      	mov	r3, r2
 8010150:	009b      	lsls	r3, r3, #2
 8010152:	4413      	add	r3, r2
 8010154:	005b      	lsls	r3, r3, #1
 8010156:	440b      	add	r3, r1
 8010158:	33c0      	adds	r3, #192	; 0xc0
 801015a:	881b      	ldrh	r3, [r3, #0]
 801015c:	b21b      	sxth	r3, r3
 801015e:	4619      	mov	r1, r3
 8010160:	69b8      	ldr	r0, [r7, #24]
 8010162:	f7ff f85b 	bl	800f21c <_Serialize16>
        for (i = 0; i < MAX_SERVOS; i++) {
 8010166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010168:	3301      	adds	r3, #1
 801016a:	637b      	str	r3, [r7, #52]	; 0x34
 801016c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801016e:	2b07      	cmp	r3, #7
 8010170:	d9b2      	bls.n	80100d8 <evtMspReceive+0xa44>
        }
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, MAX_SERVOS * 9);
 8010172:	69bb      	ldr	r3, [r7, #24]
 8010174:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010178:	2348      	movs	r3, #72	; 0x48
 801017a:	6839      	ldr	r1, [r7, #0]
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f007 fab5 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010182:	f001 b880 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_SET_SERVO_CONF:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010186:	2300      	movs	r3, #0
 8010188:	2200      	movs	r2, #0
 801018a:	6839      	ldr	r1, [r7, #0]
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	f007 faad 	bl	80176ec <pifMsp_MakeAnswer>
        for (i = 0; i < MAX_SERVOS; i++) {
 8010192:	2300      	movs	r3, #0
 8010194:	637b      	str	r3, [r7, #52]	; 0x34
 8010196:	e04d      	b.n	8010234 <evtMspReceive+0xba0>
            cfg.servoConf[i].min = _Read16(p_port);
 8010198:	69b8      	ldr	r0, [r7, #24]
 801019a:	f7fe ffe1 	bl	800f160 <_Read16>
 801019e:	4603      	mov	r3, r0
 80101a0:	b218      	sxth	r0, r3
 80101a2:	4961      	ldr	r1, [pc, #388]	; (8010328 <evtMspReceive+0xc94>)
 80101a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101a6:	4613      	mov	r3, r2
 80101a8:	009b      	lsls	r3, r3, #2
 80101aa:	4413      	add	r3, r2
 80101ac:	005b      	lsls	r3, r3, #1
 80101ae:	440b      	add	r3, r1
 80101b0:	33b8      	adds	r3, #184	; 0xb8
 80101b2:	4602      	mov	r2, r0
 80101b4:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].max = _Read16(p_port);
 80101b6:	69b8      	ldr	r0, [r7, #24]
 80101b8:	f7fe ffd2 	bl	800f160 <_Read16>
 80101bc:	4603      	mov	r3, r0
 80101be:	b218      	sxth	r0, r3
 80101c0:	4959      	ldr	r1, [pc, #356]	; (8010328 <evtMspReceive+0xc94>)
 80101c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101c4:	4613      	mov	r3, r2
 80101c6:	009b      	lsls	r3, r3, #2
 80101c8:	4413      	add	r3, r2
 80101ca:	005b      	lsls	r3, r3, #1
 80101cc:	440b      	add	r3, r1
 80101ce:	33ba      	adds	r3, #186	; 0xba
 80101d0:	4602      	mov	r2, r0
 80101d2:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].middle = _Read16(p_port);
 80101d4:	69b8      	ldr	r0, [r7, #24]
 80101d6:	f7fe ffc3 	bl	800f160 <_Read16>
 80101da:	4603      	mov	r3, r0
 80101dc:	b218      	sxth	r0, r3
 80101de:	4952      	ldr	r1, [pc, #328]	; (8010328 <evtMspReceive+0xc94>)
 80101e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101e2:	4613      	mov	r3, r2
 80101e4:	009b      	lsls	r3, r3, #2
 80101e6:	4413      	add	r3, r2
 80101e8:	005b      	lsls	r3, r3, #1
 80101ea:	440b      	add	r3, r1
 80101ec:	33bc      	adds	r3, #188	; 0xbc
 80101ee:	4602      	mov	r2, r0
 80101f0:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].rate = _Read8(p_port);
 80101f2:	69b8      	ldr	r0, [r7, #24]
 80101f4:	f7fe ffa0 	bl	800f138 <_Read8>
 80101f8:	4603      	mov	r3, r0
 80101fa:	b258      	sxtb	r0, r3
 80101fc:	494a      	ldr	r1, [pc, #296]	; (8010328 <evtMspReceive+0xc94>)
 80101fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010200:	4613      	mov	r3, r2
 8010202:	009b      	lsls	r3, r3, #2
 8010204:	4413      	add	r3, r2
 8010206:	005b      	lsls	r3, r3, #1
 8010208:	440b      	add	r3, r1
 801020a:	33be      	adds	r3, #190	; 0xbe
 801020c:	4602      	mov	r2, r0
 801020e:	701a      	strb	r2, [r3, #0]
            cfg.servoConf[i].direction = _Read16(p_port);
 8010210:	69b8      	ldr	r0, [r7, #24]
 8010212:	f7fe ffa5 	bl	800f160 <_Read16>
 8010216:	4603      	mov	r3, r0
 8010218:	4618      	mov	r0, r3
 801021a:	4943      	ldr	r1, [pc, #268]	; (8010328 <evtMspReceive+0xc94>)
 801021c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801021e:	4613      	mov	r3, r2
 8010220:	009b      	lsls	r3, r3, #2
 8010222:	4413      	add	r3, r2
 8010224:	005b      	lsls	r3, r3, #1
 8010226:	440b      	add	r3, r1
 8010228:	33c0      	adds	r3, #192	; 0xc0
 801022a:	4602      	mov	r2, r0
 801022c:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++) {
 801022e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010230:	3301      	adds	r3, #1
 8010232:	637b      	str	r3, [r7, #52]	; 0x34
 8010234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010236:	2b07      	cmp	r3, #7
 8010238:	d9ae      	bls.n	8010198 <evtMspReceive+0xb04>
        }
        break;
 801023a:	f001 b824 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_SERVOMIX_CONF:
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 801023e:	2300      	movs	r3, #0
 8010240:	637b      	str	r3, [r7, #52]	; 0x34
 8010242:	e05c      	b.n	80102fe <evtMspReceive+0xc6a>
            _Serialize8(p_port, mcfg.customServoMixer[i].targetChannel);
 8010244:	4939      	ldr	r1, [pc, #228]	; (801032c <evtMspReceive+0xc98>)
 8010246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010248:	4613      	mov	r3, r2
 801024a:	00db      	lsls	r3, r3, #3
 801024c:	1a9b      	subs	r3, r3, r2
 801024e:	440b      	add	r3, r1
 8010250:	33d0      	adds	r3, #208	; 0xd0
 8010252:	781b      	ldrb	r3, [r3, #0]
 8010254:	4619      	mov	r1, r3
 8010256:	69b8      	ldr	r0, [r7, #24]
 8010258:	f7fe ffc8 	bl	800f1ec <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].fromChannel);
 801025c:	4933      	ldr	r1, [pc, #204]	; (801032c <evtMspReceive+0xc98>)
 801025e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010260:	4613      	mov	r3, r2
 8010262:	00db      	lsls	r3, r3, #3
 8010264:	1a9b      	subs	r3, r3, r2
 8010266:	440b      	add	r3, r1
 8010268:	33d1      	adds	r3, #209	; 0xd1
 801026a:	781b      	ldrb	r3, [r3, #0]
 801026c:	4619      	mov	r1, r3
 801026e:	69b8      	ldr	r0, [r7, #24]
 8010270:	f7fe ffbc 	bl	800f1ec <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].rate);
 8010274:	492d      	ldr	r1, [pc, #180]	; (801032c <evtMspReceive+0xc98>)
 8010276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010278:	4613      	mov	r3, r2
 801027a:	00db      	lsls	r3, r3, #3
 801027c:	1a9b      	subs	r3, r3, r2
 801027e:	440b      	add	r3, r1
 8010280:	33d2      	adds	r3, #210	; 0xd2
 8010282:	f993 3000 	ldrsb.w	r3, [r3]
 8010286:	b2db      	uxtb	r3, r3
 8010288:	4619      	mov	r1, r3
 801028a:	69b8      	ldr	r0, [r7, #24]
 801028c:	f7fe ffae 	bl	800f1ec <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].speed);
 8010290:	4926      	ldr	r1, [pc, #152]	; (801032c <evtMspReceive+0xc98>)
 8010292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010294:	4613      	mov	r3, r2
 8010296:	00db      	lsls	r3, r3, #3
 8010298:	1a9b      	subs	r3, r3, r2
 801029a:	440b      	add	r3, r1
 801029c:	33d3      	adds	r3, #211	; 0xd3
 801029e:	781b      	ldrb	r3, [r3, #0]
 80102a0:	4619      	mov	r1, r3
 80102a2:	69b8      	ldr	r0, [r7, #24]
 80102a4:	f7fe ffa2 	bl	800f1ec <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].min);
 80102a8:	4920      	ldr	r1, [pc, #128]	; (801032c <evtMspReceive+0xc98>)
 80102aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102ac:	4613      	mov	r3, r2
 80102ae:	00db      	lsls	r3, r3, #3
 80102b0:	1a9b      	subs	r3, r3, r2
 80102b2:	440b      	add	r3, r1
 80102b4:	33d4      	adds	r3, #212	; 0xd4
 80102b6:	f993 3000 	ldrsb.w	r3, [r3]
 80102ba:	b2db      	uxtb	r3, r3
 80102bc:	4619      	mov	r1, r3
 80102be:	69b8      	ldr	r0, [r7, #24]
 80102c0:	f7fe ff94 	bl	800f1ec <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].max);
 80102c4:	4919      	ldr	r1, [pc, #100]	; (801032c <evtMspReceive+0xc98>)
 80102c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102c8:	4613      	mov	r3, r2
 80102ca:	00db      	lsls	r3, r3, #3
 80102cc:	1a9b      	subs	r3, r3, r2
 80102ce:	440b      	add	r3, r1
 80102d0:	33d5      	adds	r3, #213	; 0xd5
 80102d2:	f993 3000 	ldrsb.w	r3, [r3]
 80102d6:	b2db      	uxtb	r3, r3
 80102d8:	4619      	mov	r1, r3
 80102da:	69b8      	ldr	r0, [r7, #24]
 80102dc:	f7fe ff86 	bl	800f1ec <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].box);
 80102e0:	4912      	ldr	r1, [pc, #72]	; (801032c <evtMspReceive+0xc98>)
 80102e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102e4:	4613      	mov	r3, r2
 80102e6:	00db      	lsls	r3, r3, #3
 80102e8:	1a9b      	subs	r3, r3, r2
 80102ea:	440b      	add	r3, r1
 80102ec:	33d6      	adds	r3, #214	; 0xd6
 80102ee:	781b      	ldrb	r3, [r3, #0]
 80102f0:	4619      	mov	r1, r3
 80102f2:	69b8      	ldr	r0, [r7, #24]
 80102f4:	f7fe ff7a 	bl	800f1ec <_Serialize8>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80102f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102fa:	3301      	adds	r3, #1
 80102fc:	637b      	str	r3, [r7, #52]	; 0x34
 80102fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010300:	2b0f      	cmp	r3, #15
 8010302:	d99f      	bls.n	8010244 <evtMspReceive+0xbb0>
        }
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, MAX_SERVO_RULES * sizeof(servoMixer_t));
 8010304:	69bb      	ldr	r3, [r7, #24]
 8010306:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801030a:	2370      	movs	r3, #112	; 0x70
 801030c:	6839      	ldr	r1, [r7, #0]
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f007 f9ec 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010314:	f000 bfb7 	b.w	8011286 <evtMspReceive+0x1bf2>
 8010318:	20001718 	.word	0x20001718
 801031c:	20001780 	.word	0x20001780
 8010320:	20001720 	.word	0x20001720
 8010324:	20000040 	.word	0x20000040
 8010328:	20001128 	.word	0x20001128
 801032c:	20000bbc 	.word	0x20000bbc

    case MSP_SET_SERVOMIX_CONF:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010330:	2300      	movs	r3, #0
 8010332:	2200      	movs	r2, #0
 8010334:	6839      	ldr	r1, [r7, #0]
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f007 f9d8 	bl	80176ec <pifMsp_MakeAnswer>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 801033c:	2300      	movs	r3, #0
 801033e:	637b      	str	r3, [r7, #52]	; 0x34
 8010340:	e064      	b.n	801040c <evtMspReceive+0xd78>
            mcfg.customServoMixer[i].targetChannel = _Read8(p_port);
 8010342:	69b8      	ldr	r0, [r7, #24]
 8010344:	f7fe fef8 	bl	800f138 <_Read8>
 8010348:	4603      	mov	r3, r0
 801034a:	4618      	mov	r0, r3
 801034c:	49b1      	ldr	r1, [pc, #708]	; (8010614 <evtMspReceive+0xf80>)
 801034e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010350:	4613      	mov	r3, r2
 8010352:	00db      	lsls	r3, r3, #3
 8010354:	1a9b      	subs	r3, r3, r2
 8010356:	440b      	add	r3, r1
 8010358:	33d0      	adds	r3, #208	; 0xd0
 801035a:	4602      	mov	r2, r0
 801035c:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].fromChannel = _Read8(p_port);
 801035e:	69b8      	ldr	r0, [r7, #24]
 8010360:	f7fe feea 	bl	800f138 <_Read8>
 8010364:	4603      	mov	r3, r0
 8010366:	4618      	mov	r0, r3
 8010368:	49aa      	ldr	r1, [pc, #680]	; (8010614 <evtMspReceive+0xf80>)
 801036a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801036c:	4613      	mov	r3, r2
 801036e:	00db      	lsls	r3, r3, #3
 8010370:	1a9b      	subs	r3, r3, r2
 8010372:	440b      	add	r3, r1
 8010374:	33d1      	adds	r3, #209	; 0xd1
 8010376:	4602      	mov	r2, r0
 8010378:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].rate = _Read8(p_port);
 801037a:	69b8      	ldr	r0, [r7, #24]
 801037c:	f7fe fedc 	bl	800f138 <_Read8>
 8010380:	4603      	mov	r3, r0
 8010382:	b258      	sxtb	r0, r3
 8010384:	49a3      	ldr	r1, [pc, #652]	; (8010614 <evtMspReceive+0xf80>)
 8010386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010388:	4613      	mov	r3, r2
 801038a:	00db      	lsls	r3, r3, #3
 801038c:	1a9b      	subs	r3, r3, r2
 801038e:	440b      	add	r3, r1
 8010390:	33d2      	adds	r3, #210	; 0xd2
 8010392:	4602      	mov	r2, r0
 8010394:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].speed = _Read8(p_port);
 8010396:	69b8      	ldr	r0, [r7, #24]
 8010398:	f7fe fece 	bl	800f138 <_Read8>
 801039c:	4603      	mov	r3, r0
 801039e:	4618      	mov	r0, r3
 80103a0:	499c      	ldr	r1, [pc, #624]	; (8010614 <evtMspReceive+0xf80>)
 80103a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103a4:	4613      	mov	r3, r2
 80103a6:	00db      	lsls	r3, r3, #3
 80103a8:	1a9b      	subs	r3, r3, r2
 80103aa:	440b      	add	r3, r1
 80103ac:	33d3      	adds	r3, #211	; 0xd3
 80103ae:	4602      	mov	r2, r0
 80103b0:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].min = _Read8(p_port);
 80103b2:	69b8      	ldr	r0, [r7, #24]
 80103b4:	f7fe fec0 	bl	800f138 <_Read8>
 80103b8:	4603      	mov	r3, r0
 80103ba:	b258      	sxtb	r0, r3
 80103bc:	4995      	ldr	r1, [pc, #596]	; (8010614 <evtMspReceive+0xf80>)
 80103be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103c0:	4613      	mov	r3, r2
 80103c2:	00db      	lsls	r3, r3, #3
 80103c4:	1a9b      	subs	r3, r3, r2
 80103c6:	440b      	add	r3, r1
 80103c8:	33d4      	adds	r3, #212	; 0xd4
 80103ca:	4602      	mov	r2, r0
 80103cc:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].max = _Read8(p_port);
 80103ce:	69b8      	ldr	r0, [r7, #24]
 80103d0:	f7fe feb2 	bl	800f138 <_Read8>
 80103d4:	4603      	mov	r3, r0
 80103d6:	b258      	sxtb	r0, r3
 80103d8:	498e      	ldr	r1, [pc, #568]	; (8010614 <evtMspReceive+0xf80>)
 80103da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103dc:	4613      	mov	r3, r2
 80103de:	00db      	lsls	r3, r3, #3
 80103e0:	1a9b      	subs	r3, r3, r2
 80103e2:	440b      	add	r3, r1
 80103e4:	33d5      	adds	r3, #213	; 0xd5
 80103e6:	4602      	mov	r2, r0
 80103e8:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].box = _Read8(p_port);
 80103ea:	69b8      	ldr	r0, [r7, #24]
 80103ec:	f7fe fea4 	bl	800f138 <_Read8>
 80103f0:	4603      	mov	r3, r0
 80103f2:	4618      	mov	r0, r3
 80103f4:	4987      	ldr	r1, [pc, #540]	; (8010614 <evtMspReceive+0xf80>)
 80103f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103f8:	4613      	mov	r3, r2
 80103fa:	00db      	lsls	r3, r3, #3
 80103fc:	1a9b      	subs	r3, r3, r2
 80103fe:	440b      	add	r3, r1
 8010400:	33d6      	adds	r3, #214	; 0xd6
 8010402:	4602      	mov	r2, r0
 8010404:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8010406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010408:	3301      	adds	r3, #1
 801040a:	637b      	str	r3, [r7, #52]	; 0x34
 801040c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801040e:	2b0f      	cmp	r3, #15
 8010410:	d997      	bls.n	8010342 <evtMspReceive+0xcae>
        }
        loadCustomServoMixer();
 8010412:	f7fa fc7f 	bl	800ad14 <loadCustomServoMixer>
        break;
 8010416:	f000 bf36 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_FW_CONFIG:
        _Serialize8(p_port, mcfg.fw_althold_dir);
 801041a:	4b7e      	ldr	r3, [pc, #504]	; (8010614 <evtMspReceive+0xf80>)
 801041c:	f993 31a0 	ldrsb.w	r3, [r3, #416]	; 0x1a0
 8010420:	b2db      	uxtb	r3, r3
 8010422:	4619      	mov	r1, r3
 8010424:	69b8      	ldr	r0, [r7, #24]
 8010426:	f7fe fee1 	bl	800f1ec <_Serialize8>
        // _Serialize8(p_port, cfg.fw_vector_thrust); // Future Gui setting?
        _Serialize16(p_port, cfg.fw_gps_maxcorr);
 801042a:	4b7b      	ldr	r3, [pc, #492]	; (8010618 <evtMspReceive+0xf84>)
 801042c:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 8010430:	4619      	mov	r1, r3
 8010432:	69b8      	ldr	r0, [r7, #24]
 8010434:	f7fe fef2 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, cfg.fw_gps_rudder);
 8010438:	4b77      	ldr	r3, [pc, #476]	; (8010618 <evtMspReceive+0xf84>)
 801043a:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 801043e:	4619      	mov	r1, r3
 8010440:	69b8      	ldr	r0, [r7, #24]
 8010442:	f7fe feeb 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, cfg.fw_gps_maxclimb);
 8010446:	4b74      	ldr	r3, [pc, #464]	; (8010618 <evtMspReceive+0xf84>)
 8010448:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 801044c:	4619      	mov	r1, r3
 801044e:	69b8      	ldr	r0, [r7, #24]
 8010450:	f7fe fee4 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, cfg.fw_gps_maxdive);
 8010454:	4b70      	ldr	r3, [pc, #448]	; (8010618 <evtMspReceive+0xf84>)
 8010456:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 801045a:	4619      	mov	r1, r3
 801045c:	69b8      	ldr	r0, [r7, #24]
 801045e:	f7fe fedd 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, cfg.fw_climb_throttle);
 8010462:	4b6d      	ldr	r3, [pc, #436]	; (8010618 <evtMspReceive+0xf84>)
 8010464:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8010468:	b21b      	sxth	r3, r3
 801046a:	4619      	mov	r1, r3
 801046c:	69b8      	ldr	r0, [r7, #24]
 801046e:	f7fe fed5 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, cfg.fw_cruise_throttle);
 8010472:	4b69      	ldr	r3, [pc, #420]	; (8010618 <evtMspReceive+0xf84>)
 8010474:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 8010478:	b21b      	sxth	r3, r3
 801047a:	4619      	mov	r1, r3
 801047c:	69b8      	ldr	r0, [r7, #24]
 801047e:	f7fe fecd 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, cfg.fw_idle_throttle);
 8010482:	4b65      	ldr	r3, [pc, #404]	; (8010618 <evtMspReceive+0xf84>)
 8010484:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 8010488:	b21b      	sxth	r3, r3
 801048a:	4619      	mov	r1, r3
 801048c:	69b8      	ldr	r0, [r7, #24]
 801048e:	f7fe fec5 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, cfg.fw_scaler_throttle);
 8010492:	4b61      	ldr	r3, [pc, #388]	; (8010618 <evtMspReceive+0xf84>)
 8010494:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 8010498:	b21b      	sxth	r3, r3
 801049a:	4619      	mov	r1, r3
 801049c:	69b8      	ldr	r0, [r7, #24]
 801049e:	f7fe febd 	bl	800f21c <_Serialize16>
        _Serialize32(p_port, cfg.fw_roll_comp); // Float is Not compatible with Gui. Change to _Serialize8
 80104a2:	4b5d      	ldr	r3, [pc, #372]	; (8010618 <evtMspReceive+0xf84>)
 80104a4:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 80104a8:	4619      	mov	r1, r3
 80104aa:	69b8      	ldr	r0, [r7, #24]
 80104ac:	f7fe fed9 	bl	800f262 <_Serialize32>
        _Serialize8(p_port, cfg.fw_rth_alt);
 80104b0:	4b59      	ldr	r3, [pc, #356]	; (8010618 <evtMspReceive+0xf84>)
 80104b2:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 80104b6:	4619      	mov	r1, r3
 80104b8:	69b8      	ldr	r0, [r7, #24]
 80104ba:	f7fe fe97 	bl	800f1ec <_Serialize8>
        // next added for future use
        _Serialize32(p_port, 0);
 80104be:	2100      	movs	r1, #0
 80104c0:	69b8      	ldr	r0, [r7, #24]
 80104c2:	f7fe fece 	bl	800f262 <_Serialize32>
        _Serialize32(p_port, 0);
 80104c6:	2100      	movs	r1, #0
 80104c8:	69b8      	ldr	r0, [r7, #24]
 80104ca:	f7fe feca 	bl	800f262 <_Serialize32>
        _Serialize32(p_port, 0);
 80104ce:	2100      	movs	r1, #0
 80104d0:	69b8      	ldr	r0, [r7, #24]
 80104d2:	f7fe fec6 	bl	800f262 <_Serialize32>
        _Serialize32(p_port, 0);
 80104d6:	2100      	movs	r1, #0
 80104d8:	69b8      	ldr	r0, [r7, #24]
 80104da:	f7fe fec2 	bl	800f262 <_Serialize32>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 38);
 80104de:	69bb      	ldr	r3, [r7, #24]
 80104e0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80104e4:	2326      	movs	r3, #38	; 0x26
 80104e6:	6839      	ldr	r1, [r7, #0]
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f007 f8ff 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 80104ee:	f000 beca 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_SET_FW_CONFIG:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 80104f2:	2300      	movs	r3, #0
 80104f4:	2200      	movs	r2, #0
 80104f6:	6839      	ldr	r1, [r7, #0]
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f007 f8f7 	bl	80176ec <pifMsp_MakeAnswer>
        mcfg.fw_althold_dir = _Read8(p_port);
 80104fe:	69b8      	ldr	r0, [r7, #24]
 8010500:	f7fe fe1a 	bl	800f138 <_Read8>
 8010504:	4603      	mov	r3, r0
 8010506:	b25a      	sxtb	r2, r3
 8010508:	4b42      	ldr	r3, [pc, #264]	; (8010614 <evtMspReceive+0xf80>)
 801050a:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        // cfg.fw_vector_thrust = _Read8(p_port); // Future Gui setting?
        cfg.fw_gps_maxcorr = _Read16(p_port);
 801050e:	69b8      	ldr	r0, [r7, #24]
 8010510:	f7fe fe26 	bl	800f160 <_Read16>
 8010514:	4603      	mov	r3, r0
 8010516:	b21a      	sxth	r2, r3
 8010518:	4b3f      	ldr	r3, [pc, #252]	; (8010618 <evtMspReceive+0xf84>)
 801051a:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
        cfg.fw_gps_rudder = _Read16(p_port);
 801051e:	69b8      	ldr	r0, [r7, #24]
 8010520:	f7fe fe1e 	bl	800f160 <_Read16>
 8010524:	4603      	mov	r3, r0
 8010526:	b21a      	sxth	r2, r3
 8010528:	4b3b      	ldr	r3, [pc, #236]	; (8010618 <evtMspReceive+0xf84>)
 801052a:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
        cfg.fw_gps_maxclimb = _Read16(p_port);
 801052e:	69b8      	ldr	r0, [r7, #24]
 8010530:	f7fe fe16 	bl	800f160 <_Read16>
 8010534:	4603      	mov	r3, r0
 8010536:	b21a      	sxth	r2, r3
 8010538:	4b37      	ldr	r3, [pc, #220]	; (8010618 <evtMspReceive+0xf84>)
 801053a:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
        cfg.fw_gps_maxdive = _Read16(p_port);
 801053e:	69b8      	ldr	r0, [r7, #24]
 8010540:	f7fe fe0e 	bl	800f160 <_Read16>
 8010544:	4603      	mov	r3, r0
 8010546:	b21a      	sxth	r2, r3
 8010548:	4b33      	ldr	r3, [pc, #204]	; (8010618 <evtMspReceive+0xf84>)
 801054a:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
        cfg.fw_climb_throttle = _Read16(p_port);
 801054e:	69b8      	ldr	r0, [r7, #24]
 8010550:	f7fe fe06 	bl	800f160 <_Read16>
 8010554:	4603      	mov	r3, r0
 8010556:	461a      	mov	r2, r3
 8010558:	4b2f      	ldr	r3, [pc, #188]	; (8010618 <evtMspReceive+0xf84>)
 801055a:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
        cfg.fw_cruise_throttle = _Read16(p_port);
 801055e:	69b8      	ldr	r0, [r7, #24]
 8010560:	f7fe fdfe 	bl	800f160 <_Read16>
 8010564:	4603      	mov	r3, r0
 8010566:	461a      	mov	r2, r3
 8010568:	4b2b      	ldr	r3, [pc, #172]	; (8010618 <evtMspReceive+0xf84>)
 801056a:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
        cfg.fw_idle_throttle = _Read16(p_port);
 801056e:	69b8      	ldr	r0, [r7, #24]
 8010570:	f7fe fdf6 	bl	800f160 <_Read16>
 8010574:	4603      	mov	r3, r0
 8010576:	461a      	mov	r2, r3
 8010578:	4b27      	ldr	r3, [pc, #156]	; (8010618 <evtMspReceive+0xf84>)
 801057a:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
        cfg.fw_scaler_throttle = _Read16(p_port);
 801057e:	69b8      	ldr	r0, [r7, #24]
 8010580:	f7fe fdee 	bl	800f160 <_Read16>
 8010584:	4603      	mov	r3, r0
 8010586:	461a      	mov	r2, r3
 8010588:	4b23      	ldr	r3, [pc, #140]	; (8010618 <evtMspReceive+0xf84>)
 801058a:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
        //cfg.fw_gps_maxdive = _Read32(p_port);// Wrong when using float in MSP!... Change to _Read8
        _Read32(p_port); // Just read and skip
 801058e:	69b8      	ldr	r0, [r7, #24]
 8010590:	f7fe fe03 	bl	800f19a <_Read32>
        cfg.fw_rth_alt = _Read8(p_port);
 8010594:	69b8      	ldr	r0, [r7, #24]
 8010596:	f7fe fdcf 	bl	800f138 <_Read8>
 801059a:	4603      	mov	r3, r0
 801059c:	461a      	mov	r2, r3
 801059e:	4b1e      	ldr	r3, [pc, #120]	; (8010618 <evtMspReceive+0xf84>)
 80105a0:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
        // next added for future use
        _Read32(p_port);
 80105a4:	69b8      	ldr	r0, [r7, #24]
 80105a6:	f7fe fdf8 	bl	800f19a <_Read32>
        _Read32(p_port);
 80105aa:	69b8      	ldr	r0, [r7, #24]
 80105ac:	f7fe fdf5 	bl	800f19a <_Read32>
        _Read32(p_port);
 80105b0:	69b8      	ldr	r0, [r7, #24]
 80105b2:	f7fe fdf2 	bl	800f19a <_Read32>
        _Read32(p_port);
 80105b6:	69b8      	ldr	r0, [r7, #24]
 80105b8:	f7fe fdef 	bl	800f19a <_Read32>
        break;
 80105bc:	f000 be63 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_MOTOR:
        _SerializeStruct(p_port, (uint8_t *)&motor, 16);
 80105c0:	2210      	movs	r2, #16
 80105c2:	4916      	ldr	r1, [pc, #88]	; (801061c <evtMspReceive+0xf88>)
 80105c4:	69b8      	ldr	r0, [r7, #24]
 80105c6:	f7fe fe7c 	bl	800f2c2 <_SerializeStruct>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 16);
 80105ca:	69bb      	ldr	r3, [r7, #24]
 80105cc:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80105d0:	2310      	movs	r3, #16
 80105d2:	6839      	ldr	r1, [r7, #0]
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f007 f889 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 80105da:	f000 be54 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_RC:
        for (i = 0; i < 8; i++)
 80105de:	2300      	movs	r3, #0
 80105e0:	637b      	str	r3, [r7, #52]	; 0x34
 80105e2:	e00a      	b.n	80105fa <evtMspReceive+0xf66>
            _Serialize16(p_port, rcData[i]);
 80105e4:	4a0e      	ldr	r2, [pc, #56]	; (8010620 <evtMspReceive+0xf8c>)
 80105e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105e8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80105ec:	4619      	mov	r1, r3
 80105ee:	69b8      	ldr	r0, [r7, #24]
 80105f0:	f7fe fe14 	bl	800f21c <_Serialize16>
        for (i = 0; i < 8; i++)
 80105f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105f6:	3301      	adds	r3, #1
 80105f8:	637b      	str	r3, [r7, #52]	; 0x34
 80105fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105fc:	2b07      	cmp	r3, #7
 80105fe:	d9f1      	bls.n	80105e4 <evtMspReceive+0xf50>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 16);
 8010600:	69bb      	ldr	r3, [r7, #24]
 8010602:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010606:	2310      	movs	r3, #16
 8010608:	6839      	ldr	r1, [r7, #0]
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f007 f86e 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010610:	f000 be39 	b.w	8011286 <evtMspReceive+0x1bf2>
 8010614:	20000bbc 	.word	0x20000bbc
 8010618:	20001128 	.word	0x20001128
 801061c:	200017f0 	.word	0x200017f0
 8010620:	200019c4 	.word	0x200019c4

    case MSP_RAW_GPS:
        _Serialize8(p_port, f.GPS_FIX);
 8010624:	4b93      	ldr	r3, [pc, #588]	; (8010874 <evtMspReceive+0x11e0>)
 8010626:	7adb      	ldrb	r3, [r3, #11]
 8010628:	4619      	mov	r1, r3
 801062a:	69b8      	ldr	r0, [r7, #24]
 801062c:	f7fe fdde 	bl	800f1ec <_Serialize8>
        _Serialize8(p_port, GPS_numSat);
 8010630:	4b91      	ldr	r3, [pc, #580]	; (8010878 <evtMspReceive+0x11e4>)
 8010632:	781b      	ldrb	r3, [r3, #0]
 8010634:	4619      	mov	r1, r3
 8010636:	69b8      	ldr	r0, [r7, #24]
 8010638:	f7fe fdd8 	bl	800f1ec <_Serialize8>
        _Serialize32(p_port, GPS_coord[LAT]);
 801063c:	4b8f      	ldr	r3, [pc, #572]	; (801087c <evtMspReceive+0x11e8>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	4619      	mov	r1, r3
 8010642:	69b8      	ldr	r0, [r7, #24]
 8010644:	f7fe fe0d 	bl	800f262 <_Serialize32>
        _Serialize32(p_port, GPS_coord[LON]);
 8010648:	4b8c      	ldr	r3, [pc, #560]	; (801087c <evtMspReceive+0x11e8>)
 801064a:	685b      	ldr	r3, [r3, #4]
 801064c:	4619      	mov	r1, r3
 801064e:	69b8      	ldr	r0, [r7, #24]
 8010650:	f7fe fe07 	bl	800f262 <_Serialize32>
        _Serialize16(p_port, GPS_altitude);
 8010654:	4b8a      	ldr	r3, [pc, #552]	; (8010880 <evtMspReceive+0x11ec>)
 8010656:	881b      	ldrh	r3, [r3, #0]
 8010658:	b21b      	sxth	r3, r3
 801065a:	4619      	mov	r1, r3
 801065c:	69b8      	ldr	r0, [r7, #24]
 801065e:	f7fe fddd 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, GPS_speed);
 8010662:	4b88      	ldr	r3, [pc, #544]	; (8010884 <evtMspReceive+0x11f0>)
 8010664:	881b      	ldrh	r3, [r3, #0]
 8010666:	b21b      	sxth	r3, r3
 8010668:	4619      	mov	r1, r3
 801066a:	69b8      	ldr	r0, [r7, #24]
 801066c:	f7fe fdd6 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, GPS_ground_course);
 8010670:	4b85      	ldr	r3, [pc, #532]	; (8010888 <evtMspReceive+0x11f4>)
 8010672:	881b      	ldrh	r3, [r3, #0]
 8010674:	b21b      	sxth	r3, r3
 8010676:	4619      	mov	r1, r3
 8010678:	69b8      	ldr	r0, [r7, #24]
 801067a:	f7fe fdcf 	bl	800f21c <_Serialize16>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 16);
 801067e:	69bb      	ldr	r3, [r7, #24]
 8010680:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010684:	2310      	movs	r3, #16
 8010686:	6839      	ldr	r1, [r7, #0]
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f007 f82f 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 801068e:	f000 bdfa 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_COMP_GPS:
        _Serialize16(p_port, GPS_distanceToHome);
 8010692:	4b7e      	ldr	r3, [pc, #504]	; (801088c <evtMspReceive+0x11f8>)
 8010694:	881b      	ldrh	r3, [r3, #0]
 8010696:	b21b      	sxth	r3, r3
 8010698:	4619      	mov	r1, r3
 801069a:	69b8      	ldr	r0, [r7, #24]
 801069c:	f7fe fdbe 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, GPS_directionToHome);
 80106a0:	4b7b      	ldr	r3, [pc, #492]	; (8010890 <evtMspReceive+0x11fc>)
 80106a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80106a6:	4619      	mov	r1, r3
 80106a8:	69b8      	ldr	r0, [r7, #24]
 80106aa:	f7fe fdb7 	bl	800f21c <_Serialize16>
        _Serialize8(p_port, GPS_update & 1);
 80106ae:	4b79      	ldr	r3, [pc, #484]	; (8010894 <evtMspReceive+0x1200>)
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	f003 0301 	and.w	r3, r3, #1
 80106b6:	b2db      	uxtb	r3, r3
 80106b8:	4619      	mov	r1, r3
 80106ba:	69b8      	ldr	r0, [r7, #24]
 80106bc:	f7fe fd96 	bl	800f1ec <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 5);
 80106c0:	69bb      	ldr	r3, [r7, #24]
 80106c2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80106c6:	2305      	movs	r3, #5
 80106c8:	6839      	ldr	r1, [r7, #0]
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f007 f80e 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 80106d0:	f000 bdd9 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_ATTITUDE:
        for (i = 0; i < 2; i++)
 80106d4:	2300      	movs	r3, #0
 80106d6:	637b      	str	r3, [r7, #52]	; 0x34
 80106d8:	e00a      	b.n	80106f0 <evtMspReceive+0x105c>
            _Serialize16(p_port, angle[i]);
 80106da:	4a6f      	ldr	r2, [pc, #444]	; (8010898 <evtMspReceive+0x1204>)
 80106dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106de:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80106e2:	4619      	mov	r1, r3
 80106e4:	69b8      	ldr	r0, [r7, #24]
 80106e6:	f7fe fd99 	bl	800f21c <_Serialize16>
        for (i = 0; i < 2; i++)
 80106ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106ec:	3301      	adds	r3, #1
 80106ee:	637b      	str	r3, [r7, #52]	; 0x34
 80106f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106f2:	2b01      	cmp	r3, #1
 80106f4:	d9f1      	bls.n	80106da <evtMspReceive+0x1046>
        _Serialize16(p_port, heading);
 80106f6:	4b69      	ldr	r3, [pc, #420]	; (801089c <evtMspReceive+0x1208>)
 80106f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80106fc:	4619      	mov	r1, r3
 80106fe:	69b8      	ldr	r0, [r7, #24]
 8010700:	f7fe fd8c 	bl	800f21c <_Serialize16>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 6);
 8010704:	69bb      	ldr	r3, [r7, #24]
 8010706:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801070a:	2306      	movs	r3, #6
 801070c:	6839      	ldr	r1, [r7, #0]
 801070e:	6878      	ldr	r0, [r7, #4]
 8010710:	f006 ffec 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010714:	f000 bdb7 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_ALTITUDE:
        _Serialize32(p_port, EstAlt);
 8010718:	4b61      	ldr	r3, [pc, #388]	; (80108a0 <evtMspReceive+0x120c>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	4619      	mov	r1, r3
 801071e:	69b8      	ldr	r0, [r7, #24]
 8010720:	f7fe fd9f 	bl	800f262 <_Serialize32>
        _Serialize16(p_port, vario);
 8010724:	4b5f      	ldr	r3, [pc, #380]	; (80108a4 <evtMspReceive+0x1210>)
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	b21b      	sxth	r3, r3
 801072a:	4619      	mov	r1, r3
 801072c:	69b8      	ldr	r0, [r7, #24]
 801072e:	f7fe fd75 	bl	800f21c <_Serialize16>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 6);
 8010732:	69bb      	ldr	r3, [r7, #24]
 8010734:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010738:	2306      	movs	r3, #6
 801073a:	6839      	ldr	r1, [r7, #0]
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f006 ffd5 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010742:	f000 bda0 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_ANALOG:
        _Serialize8(p_port, (uint8_t)constrain((int16_t)vbat, 0, 255));
 8010746:	4b58      	ldr	r3, [pc, #352]	; (80108a8 <evtMspReceive+0x1214>)
 8010748:	881b      	ldrh	r3, [r3, #0]
 801074a:	b21b      	sxth	r3, r3
 801074c:	22ff      	movs	r2, #255	; 0xff
 801074e:	2100      	movs	r1, #0
 8010750:	4618      	mov	r0, r3
 8010752:	f7f3 facb 	bl	8003cec <constrain>
 8010756:	4603      	mov	r3, r0
 8010758:	b2db      	uxtb	r3, r3
 801075a:	4619      	mov	r1, r3
 801075c:	69b8      	ldr	r0, [r7, #24]
 801075e:	f7fe fd45 	bl	800f1ec <_Serialize8>
        _Serialize16(p_port, (uint16_t)constrain(mAhdrawn, 0, 0xFFFF)); // milliamphours drawn from battery
 8010762:	4b52      	ldr	r3, [pc, #328]	; (80108ac <evtMspReceive+0x1218>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801076a:	2100      	movs	r1, #0
 801076c:	4618      	mov	r0, r3
 801076e:	f7f3 fabd 	bl	8003cec <constrain>
 8010772:	4603      	mov	r3, r0
 8010774:	b21b      	sxth	r3, r3
 8010776:	4619      	mov	r1, r3
 8010778:	69b8      	ldr	r0, [r7, #24]
 801077a:	f7fe fd4f 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, rssi);
 801077e:	4b4c      	ldr	r3, [pc, #304]	; (80108b0 <evtMspReceive+0x121c>)
 8010780:	881b      	ldrh	r3, [r3, #0]
 8010782:	b21b      	sxth	r3, r3
 8010784:	4619      	mov	r1, r3
 8010786:	69b8      	ldr	r0, [r7, #24]
 8010788:	f7fe fd48 	bl	800f21c <_Serialize16>
        if (mcfg.multiwiicurrentoutput)
 801078c:	4b49      	ldr	r3, [pc, #292]	; (80108b4 <evtMspReceive+0x1220>)
 801078e:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8010792:	2b00      	cmp	r3, #0
 8010794:	d016      	beq.n	80107c4 <evtMspReceive+0x1130>
            _Serialize16(p_port, (uint16_t)constrain((abs(amperage) * 10), 0, 0xFFFF)); // send amperage in 0.001 A steps
 8010796:	4b48      	ldr	r3, [pc, #288]	; (80108b8 <evtMspReceive+0x1224>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 801079e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80107a2:	4613      	mov	r3, r2
 80107a4:	009b      	lsls	r3, r3, #2
 80107a6:	4413      	add	r3, r2
 80107a8:	005b      	lsls	r3, r3, #1
 80107aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80107ae:	2100      	movs	r1, #0
 80107b0:	4618      	mov	r0, r3
 80107b2:	f7f3 fa9b 	bl	8003cec <constrain>
 80107b6:	4603      	mov	r3, r0
 80107b8:	b21b      	sxth	r3, r3
 80107ba:	4619      	mov	r1, r3
 80107bc:	69b8      	ldr	r0, [r7, #24]
 80107be:	f7fe fd2d 	bl	800f21c <_Serialize16>
 80107c2:	e010      	b.n	80107e6 <evtMspReceive+0x1152>
        else
            _Serialize16(p_port, (uint16_t)constrain(abs(amperage), 0, 0xFFFF)); // send amperage in 0.01 A steps
 80107c4:	4b3c      	ldr	r3, [pc, #240]	; (80108b8 <evtMspReceive+0x1224>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	bfb8      	it	lt
 80107cc:	425b      	neglt	r3, r3
 80107ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80107d2:	2100      	movs	r1, #0
 80107d4:	4618      	mov	r0, r3
 80107d6:	f7f3 fa89 	bl	8003cec <constrain>
 80107da:	4603      	mov	r3, r0
 80107dc:	b21b      	sxth	r3, r3
 80107de:	4619      	mov	r1, r3
 80107e0:	69b8      	ldr	r0, [r7, #24]
 80107e2:	f7fe fd1b 	bl	800f21c <_Serialize16>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 7);
 80107e6:	69bb      	ldr	r3, [r7, #24]
 80107e8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80107ec:	2307      	movs	r3, #7
 80107ee:	6839      	ldr	r1, [r7, #0]
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	f006 ff7b 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 80107f6:	f000 bd46 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_RC_TUNING:
        _Serialize8(p_port, cfg.rcRate8);
 80107fa:	4b30      	ldr	r3, [pc, #192]	; (80108bc <evtMspReceive+0x1228>)
 80107fc:	7fdb      	ldrb	r3, [r3, #31]
 80107fe:	4619      	mov	r1, r3
 8010800:	69b8      	ldr	r0, [r7, #24]
 8010802:	f7fe fcf3 	bl	800f1ec <_Serialize8>
        _Serialize8(p_port, cfg.rcExpo8);
 8010806:	4b2d      	ldr	r3, [pc, #180]	; (80108bc <evtMspReceive+0x1228>)
 8010808:	f893 3020 	ldrb.w	r3, [r3, #32]
 801080c:	4619      	mov	r1, r3
 801080e:	69b8      	ldr	r0, [r7, #24]
 8010810:	f7fe fcec 	bl	800f1ec <_Serialize8>
        _Serialize8(p_port, cfg.rollPitchRate[0]); // here for legacy support
 8010814:	4b29      	ldr	r3, [pc, #164]	; (80108bc <evtMspReceive+0x1228>)
 8010816:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801081a:	4619      	mov	r1, r3
 801081c:	69b8      	ldr	r0, [r7, #24]
 801081e:	f7fe fce5 	bl	800f1ec <_Serialize8>
        _Serialize8(p_port, cfg.yawRate);
 8010822:	4b26      	ldr	r3, [pc, #152]	; (80108bc <evtMspReceive+0x1228>)
 8010824:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8010828:	4619      	mov	r1, r3
 801082a:	69b8      	ldr	r0, [r7, #24]
 801082c:	f7fe fcde 	bl	800f1ec <_Serialize8>
        _Serialize8(p_port, cfg.dynThrPID);
 8010830:	4b22      	ldr	r3, [pc, #136]	; (80108bc <evtMspReceive+0x1228>)
 8010832:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8010836:	4619      	mov	r1, r3
 8010838:	69b8      	ldr	r0, [r7, #24]
 801083a:	f7fe fcd7 	bl	800f1ec <_Serialize8>
        _Serialize8(p_port, cfg.thrMid8);
 801083e:	4b1f      	ldr	r3, [pc, #124]	; (80108bc <evtMspReceive+0x1228>)
 8010840:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010844:	4619      	mov	r1, r3
 8010846:	69b8      	ldr	r0, [r7, #24]
 8010848:	f7fe fcd0 	bl	800f1ec <_Serialize8>
        _Serialize8(p_port, cfg.thrExpo8);
 801084c:	4b1b      	ldr	r3, [pc, #108]	; (80108bc <evtMspReceive+0x1228>)
 801084e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8010852:	4619      	mov	r1, r3
 8010854:	69b8      	ldr	r0, [r7, #24]
 8010856:	f7fe fcc9 	bl	800f1ec <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 7);
 801085a:	69bb      	ldr	r3, [r7, #24]
 801085c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010860:	2307      	movs	r3, #7
 8010862:	6839      	ldr	r1, [r7, #0]
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f006 ff41 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 801086a:	f000 bd0c 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_PID:
        for (i = 0; i < PIDITEMS; i++) {
 801086e:	2300      	movs	r3, #0
 8010870:	637b      	str	r3, [r7, #52]	; 0x34
 8010872:	e05c      	b.n	801092e <evtMspReceive+0x129a>
 8010874:	20001988 	.word	0x20001988
 8010878:	20001a70 	.word	0x20001a70
 801087c:	20001a50 	.word	0x20001a50
 8010880:	20001a76 	.word	0x20001a76
 8010884:	20001a78 	.word	0x20001a78
 8010888:	20001a82 	.word	0x20001a82
 801088c:	20001a72 	.word	0x20001a72
 8010890:	20001a74 	.word	0x20001a74
 8010894:	20001a7a 	.word	0x20001a7a
 8010898:	20001790 	.word	0x20001790
 801089c:	20001cb4 	.word	0x20001cb4
 80108a0:	20001754 	.word	0x20001754
 80108a4:	2000176c 	.word	0x2000176c
 80108a8:	200019b0 	.word	0x200019b0
 80108ac:	200019b8 	.word	0x200019b8
 80108b0:	20001a18 	.word	0x20001a18
 80108b4:	20000bbc 	.word	0x20000bbc
 80108b8:	200019b4 	.word	0x200019b4
 80108bc:	20001128 	.word	0x20001128
            _Serialize8(p_port, cfg.P8[i]);
 80108c0:	4aa7      	ldr	r2, [pc, #668]	; (8010b60 <evtMspReceive+0x14cc>)
 80108c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108c4:	4413      	add	r3, r2
 80108c6:	3301      	adds	r3, #1
 80108c8:	781b      	ldrb	r3, [r3, #0]
 80108ca:	4619      	mov	r1, r3
 80108cc:	69b8      	ldr	r0, [r7, #24]
 80108ce:	f7fe fc8d 	bl	800f1ec <_Serialize8>
            _Serialize8(p_port, cfg.I8[i]);
 80108d2:	4aa3      	ldr	r2, [pc, #652]	; (8010b60 <evtMspReceive+0x14cc>)
 80108d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108d6:	4413      	add	r3, r2
 80108d8:	330b      	adds	r3, #11
 80108da:	781b      	ldrb	r3, [r3, #0]
 80108dc:	4619      	mov	r1, r3
 80108de:	69b8      	ldr	r0, [r7, #24]
 80108e0:	f7fe fc84 	bl	800f1ec <_Serialize8>
            _Serialize8(p_port, cfg.D8[i]);
 80108e4:	4a9e      	ldr	r2, [pc, #632]	; (8010b60 <evtMspReceive+0x14cc>)
 80108e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108e8:	4413      	add	r3, r2
 80108ea:	3315      	adds	r3, #21
 80108ec:	781b      	ldrb	r3, [r3, #0]
 80108ee:	4619      	mov	r1, r3
 80108f0:	69b8      	ldr	r0, [r7, #24]
 80108f2:	f7fe fc7b 	bl	800f1ec <_Serialize8>
#ifndef __PIF_NO_LOG__
            pifLog_Printf(LT_INFO, "PID:%d P=%u I=%u D=%u", i, cfg.P8[i], cfg.I8[i], cfg.D8[i]);
 80108f6:	4a9a      	ldr	r2, [pc, #616]	; (8010b60 <evtMspReceive+0x14cc>)
 80108f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108fa:	4413      	add	r3, r2
 80108fc:	3301      	adds	r3, #1
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	4618      	mov	r0, r3
 8010902:	4a97      	ldr	r2, [pc, #604]	; (8010b60 <evtMspReceive+0x14cc>)
 8010904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010906:	4413      	add	r3, r2
 8010908:	330b      	adds	r3, #11
 801090a:	781b      	ldrb	r3, [r3, #0]
 801090c:	4619      	mov	r1, r3
 801090e:	4a94      	ldr	r2, [pc, #592]	; (8010b60 <evtMspReceive+0x14cc>)
 8010910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010912:	4413      	add	r3, r2
 8010914:	3315      	adds	r3, #21
 8010916:	781b      	ldrb	r3, [r3, #0]
 8010918:	9301      	str	r3, [sp, #4]
 801091a:	9100      	str	r1, [sp, #0]
 801091c:	4603      	mov	r3, r0
 801091e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010920:	4990      	ldr	r1, [pc, #576]	; (8010b64 <evtMspReceive+0x14d0>)
 8010922:	2002      	movs	r0, #2
 8010924:	f002 fe36 	bl	8013594 <pifLog_Printf>
        for (i = 0; i < PIDITEMS; i++) {
 8010928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801092a:	3301      	adds	r3, #1
 801092c:	637b      	str	r3, [r7, #52]	; 0x34
 801092e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010930:	2b09      	cmp	r3, #9
 8010932:	d9c5      	bls.n	80108c0 <evtMspReceive+0x122c>
#endif
        }
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 3 * PIDITEMS);
 8010934:	69bb      	ldr	r3, [r7, #24]
 8010936:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801093a:	231e      	movs	r3, #30
 801093c:	6839      	ldr	r1, [r7, #0]
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f006 fed4 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010944:	f000 bc9f 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_PIDNAMES:
        _SerializeNames(p_port, pidnames);
 8010948:	4987      	ldr	r1, [pc, #540]	; (8010b68 <evtMspReceive+0x14d4>)
 801094a:	69b8      	ldr	r0, [r7, #24]
 801094c:	f7fe fcd9 	bl	800f302 <_SerializeNames>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, sizeof(pidnames) - 1);
 8010950:	69bb      	ldr	r3, [r7, #24]
 8010952:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010956:	232f      	movs	r3, #47	; 0x2f
 8010958:	6839      	ldr	r1, [r7, #0]
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f006 fec6 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010960:	f000 bc91 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_BOX:
        for (i = 0; i < numberBoxItems; i++)
 8010964:	2300      	movs	r3, #0
 8010966:	637b      	str	r3, [r7, #52]	; 0x34
 8010968:	e010      	b.n	801098c <evtMspReceive+0x12f8>
            _Serialize16(p_port, cfg.activate[availableBoxes[i]]);
 801096a:	4a80      	ldr	r2, [pc, #512]	; (8010b6c <evtMspReceive+0x14d8>)
 801096c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801096e:	4413      	add	r3, r2
 8010970:	781b      	ldrb	r3, [r3, #0]
 8010972:	4a7b      	ldr	r2, [pc, #492]	; (8010b60 <evtMspReceive+0x14cc>)
 8010974:	3312      	adds	r3, #18
 8010976:	009b      	lsls	r3, r3, #2
 8010978:	4413      	add	r3, r2
 801097a:	685b      	ldr	r3, [r3, #4]
 801097c:	b21b      	sxth	r3, r3
 801097e:	4619      	mov	r1, r3
 8010980:	69b8      	ldr	r0, [r7, #24]
 8010982:	f7fe fc4b 	bl	800f21c <_Serialize16>
        for (i = 0; i < numberBoxItems; i++)
 8010986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010988:	3301      	adds	r3, #1
 801098a:	637b      	str	r3, [r7, #52]	; 0x34
 801098c:	4b78      	ldr	r3, [pc, #480]	; (8010b70 <evtMspReceive+0x14dc>)
 801098e:	781b      	ldrb	r3, [r3, #0]
 8010990:	461a      	mov	r2, r3
 8010992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010994:	4293      	cmp	r3, r2
 8010996:	d3e8      	bcc.n	801096a <evtMspReceive+0x12d6>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 2 * numberBoxItems);
 8010998:	69bb      	ldr	r3, [r7, #24]
 801099a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801099e:	4b74      	ldr	r3, [pc, #464]	; (8010b70 <evtMspReceive+0x14dc>)
 80109a0:	781b      	ldrb	r3, [r3, #0]
 80109a2:	b29b      	uxth	r3, r3
 80109a4:	005b      	lsls	r3, r3, #1
 80109a6:	b29b      	uxth	r3, r3
 80109a8:	6839      	ldr	r1, [r7, #0]
 80109aa:	6878      	ldr	r0, [r7, #4]
 80109ac:	f006 fe9e 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 80109b0:	f000 bc69 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_BOXNAMES:
        tmp = _SerializeBoxNamesReply(p_port);
 80109b4:	69b8      	ldr	r0, [r7, #24]
 80109b6:	f7fe fcc5 	bl	800f344 <_SerializeBoxNamesReply>
 80109ba:	4603      	mov	r3, r0
 80109bc:	613b      	str	r3, [r7, #16]
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, tmp);
 80109be:	69bb      	ldr	r3, [r7, #24]
 80109c0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80109c4:	693b      	ldr	r3, [r7, #16]
 80109c6:	b29b      	uxth	r3, r3
 80109c8:	6839      	ldr	r1, [r7, #0]
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f006 fe8e 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 80109d0:	f000 bc59 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_BOXIDS:
        for (i = 0; i < numberBoxItems; i++) {
 80109d4:	2300      	movs	r3, #0
 80109d6:	637b      	str	r3, [r7, #52]	; 0x34
 80109d8:	e028      	b.n	8010a2c <evtMspReceive+0x1398>
            for  (j = 0; j < CHECKBOXITEMS; j++) {
 80109da:	2300      	movs	r3, #0
 80109dc:	633b      	str	r3, [r7, #48]	; 0x30
 80109de:	e01f      	b.n	8010a20 <evtMspReceive+0x138c>
                if (boxes[j].permanentId == availableBoxes[i]) {
 80109e0:	4964      	ldr	r1, [pc, #400]	; (8010b74 <evtMspReceive+0x14e0>)
 80109e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109e4:	4613      	mov	r3, r2
 80109e6:	005b      	lsls	r3, r3, #1
 80109e8:	4413      	add	r3, r2
 80109ea:	009b      	lsls	r3, r3, #2
 80109ec:	440b      	add	r3, r1
 80109ee:	3308      	adds	r3, #8
 80109f0:	781a      	ldrb	r2, [r3, #0]
 80109f2:	495e      	ldr	r1, [pc, #376]	; (8010b6c <evtMspReceive+0x14d8>)
 80109f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109f6:	440b      	add	r3, r1
 80109f8:	781b      	ldrb	r3, [r3, #0]
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d10d      	bne.n	8010a1a <evtMspReceive+0x1386>
                    _Serialize8(p_port, boxes[j].permanentId);
 80109fe:	495d      	ldr	r1, [pc, #372]	; (8010b74 <evtMspReceive+0x14e0>)
 8010a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a02:	4613      	mov	r3, r2
 8010a04:	005b      	lsls	r3, r3, #1
 8010a06:	4413      	add	r3, r2
 8010a08:	009b      	lsls	r3, r3, #2
 8010a0a:	440b      	add	r3, r1
 8010a0c:	3308      	adds	r3, #8
 8010a0e:	781b      	ldrb	r3, [r3, #0]
 8010a10:	4619      	mov	r1, r3
 8010a12:	69b8      	ldr	r0, [r7, #24]
 8010a14:	f7fe fbea 	bl	800f1ec <_Serialize8>
                    break;
 8010a18:	e005      	b.n	8010a26 <evtMspReceive+0x1392>
            for  (j = 0; j < CHECKBOXITEMS; j++) {
 8010a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1c:	3301      	adds	r3, #1
 8010a1e:	633b      	str	r3, [r7, #48]	; 0x30
 8010a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a22:	2b18      	cmp	r3, #24
 8010a24:	d9dc      	bls.n	80109e0 <evtMspReceive+0x134c>
        for (i = 0; i < numberBoxItems; i++) {
 8010a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a28:	3301      	adds	r3, #1
 8010a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8010a2c:	4b50      	ldr	r3, [pc, #320]	; (8010b70 <evtMspReceive+0x14dc>)
 8010a2e:	781b      	ldrb	r3, [r3, #0]
 8010a30:	461a      	mov	r2, r3
 8010a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a34:	4293      	cmp	r3, r2
 8010a36:	d3d0      	bcc.n	80109da <evtMspReceive+0x1346>
                }
            }
        }
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, numberBoxItems);
 8010a38:	69bb      	ldr	r3, [r7, #24]
 8010a3a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010a3e:	4b4c      	ldr	r3, [pc, #304]	; (8010b70 <evtMspReceive+0x14dc>)
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	b29b      	uxth	r3, r3
 8010a44:	6839      	ldr	r1, [r7, #0]
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f006 fe50 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010a4c:	f000 bc1b 	b.w	8011286 <evtMspReceive+0x1bf2>

    case MSP_MISC:
        _Serialize16(p_port, mcfg.midrc);
 8010a50:	4b49      	ldr	r3, [pc, #292]	; (8010b78 <evtMspReceive+0x14e4>)
 8010a52:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8010a56:	b21b      	sxth	r3, r3
 8010a58:	4619      	mov	r1, r3
 8010a5a:	69b8      	ldr	r0, [r7, #24]
 8010a5c:	f7fe fbde 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, mcfg.minthrottle);
 8010a60:	4b45      	ldr	r3, [pc, #276]	; (8010b78 <evtMspReceive+0x14e4>)
 8010a62:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8010a66:	b21b      	sxth	r3, r3
 8010a68:	4619      	mov	r1, r3
 8010a6a:	69b8      	ldr	r0, [r7, #24]
 8010a6c:	f7fe fbd6 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, mcfg.maxthrottle);
 8010a70:	4b41      	ldr	r3, [pc, #260]	; (8010b78 <evtMspReceive+0x14e4>)
 8010a72:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 8010a76:	b21b      	sxth	r3, r3
 8010a78:	4619      	mov	r1, r3
 8010a7a:	69b8      	ldr	r0, [r7, #24]
 8010a7c:	f7fe fbce 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, mcfg.mincommand);
 8010a80:	4b3d      	ldr	r3, [pc, #244]	; (8010b78 <evtMspReceive+0x14e4>)
 8010a82:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8010a86:	b21b      	sxth	r3, r3
 8010a88:	4619      	mov	r1, r3
 8010a8a:	69b8      	ldr	r0, [r7, #24]
 8010a8c:	f7fe fbc6 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, cfg.failsafe_throttle);
 8010a90:	4b33      	ldr	r3, [pc, #204]	; (8010b60 <evtMspReceive+0x14cc>)
 8010a92:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8010a96:	b21b      	sxth	r3, r3
 8010a98:	4619      	mov	r1, r3
 8010a9a:	69b8      	ldr	r0, [r7, #24]
 8010a9c:	f7fe fbbe 	bl	800f21c <_Serialize16>
        _Serialize8(p_port, mcfg.gps_type);
 8010aa0:	4b35      	ldr	r3, [pc, #212]	; (8010b78 <evtMspReceive+0x14e4>)
 8010aa2:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8010aa6:	4619      	mov	r1, r3
 8010aa8:	69b8      	ldr	r0, [r7, #24]
 8010aaa:	f7fe fb9f 	bl	800f1ec <_Serialize8>
        _Serialize8(p_port, mcfg.gps_baudrate);
 8010aae:	4b32      	ldr	r3, [pc, #200]	; (8010b78 <evtMspReceive+0x14e4>)
 8010ab0:	f993 31ac 	ldrsb.w	r3, [r3, #428]	; 0x1ac
 8010ab4:	b2db      	uxtb	r3, r3
 8010ab6:	4619      	mov	r1, r3
 8010ab8:	69b8      	ldr	r0, [r7, #24]
 8010aba:	f7fe fb97 	bl	800f1ec <_Serialize8>
        _Serialize8(p_port, mcfg.gps_ubx_sbas);
 8010abe:	4b2e      	ldr	r3, [pc, #184]	; (8010b78 <evtMspReceive+0x14e4>)
 8010ac0:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8010ac4:	b2db      	uxtb	r3, r3
 8010ac6:	4619      	mov	r1, r3
 8010ac8:	69b8      	ldr	r0, [r7, #24]
 8010aca:	f7fe fb8f 	bl	800f1ec <_Serialize8>
        _Serialize8(p_port, mcfg.multiwiicurrentoutput);
 8010ace:	4b2a      	ldr	r3, [pc, #168]	; (8010b78 <evtMspReceive+0x14e4>)
 8010ad0:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8010ad4:	4619      	mov	r1, r3
 8010ad6:	69b8      	ldr	r0, [r7, #24]
 8010ad8:	f7fe fb88 	bl	800f1ec <_Serialize8>
        _Serialize8(p_port, mcfg.rssi_aux_channel);
 8010adc:	4b26      	ldr	r3, [pc, #152]	; (8010b78 <evtMspReceive+0x14e4>)
 8010ade:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8010ae2:	4619      	mov	r1, r3
 8010ae4:	69b8      	ldr	r0, [r7, #24]
 8010ae6:	f7fe fb81 	bl	800f1ec <_Serialize8>
        _Serialize8(p_port, 0);
 8010aea:	2100      	movs	r1, #0
 8010aec:	69b8      	ldr	r0, [r7, #24]
 8010aee:	f7fe fb7d 	bl	800f1ec <_Serialize8>
        _Serialize16(p_port, cfg.mag_declination / 10); // TODO check this shit
 8010af2:	4b1b      	ldr	r3, [pc, #108]	; (8010b60 <evtMspReceive+0x14cc>)
 8010af4:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8010af8:	4a20      	ldr	r2, [pc, #128]	; (8010b7c <evtMspReceive+0x14e8>)
 8010afa:	fb82 1203 	smull	r1, r2, r2, r3
 8010afe:	1092      	asrs	r2, r2, #2
 8010b00:	17db      	asrs	r3, r3, #31
 8010b02:	1ad3      	subs	r3, r2, r3
 8010b04:	b21b      	sxth	r3, r3
 8010b06:	4619      	mov	r1, r3
 8010b08:	69b8      	ldr	r0, [r7, #24]
 8010b0a:	f7fe fb87 	bl	800f21c <_Serialize16>
        _Serialize8(p_port, mcfg.vbatscale);
 8010b0e:	4b1a      	ldr	r3, [pc, #104]	; (8010b78 <evtMspReceive+0x14e4>)
 8010b10:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 8010b14:	4619      	mov	r1, r3
 8010b16:	69b8      	ldr	r0, [r7, #24]
 8010b18:	f7fe fb68 	bl	800f1ec <_Serialize8>
        _Serialize8(p_port, mcfg.vbatmincellvoltage);
 8010b1c:	4b16      	ldr	r3, [pc, #88]	; (8010b78 <evtMspReceive+0x14e4>)
 8010b1e:	f893 317f 	ldrb.w	r3, [r3, #383]	; 0x17f
 8010b22:	4619      	mov	r1, r3
 8010b24:	69b8      	ldr	r0, [r7, #24]
 8010b26:	f7fe fb61 	bl	800f1ec <_Serialize8>
        _Serialize8(p_port, mcfg.vbatmaxcellvoltage);
 8010b2a:	4b13      	ldr	r3, [pc, #76]	; (8010b78 <evtMspReceive+0x14e4>)
 8010b2c:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 8010b30:	4619      	mov	r1, r3
 8010b32:	69b8      	ldr	r0, [r7, #24]
 8010b34:	f7fe fb5a 	bl	800f1ec <_Serialize8>
        _Serialize8(p_port, mcfg.vbatwarningcellvoltage);
 8010b38:	4b0f      	ldr	r3, [pc, #60]	; (8010b78 <evtMspReceive+0x14e4>)
 8010b3a:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8010b3e:	4619      	mov	r1, r3
 8010b40:	69b8      	ldr	r0, [r7, #24]
 8010b42:	f7fe fb53 	bl	800f1ec <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 2 * 6 + 4 + 2 + 4);
 8010b46:	69bb      	ldr	r3, [r7, #24]
 8010b48:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010b4c:	2316      	movs	r3, #22
 8010b4e:	6839      	ldr	r1, [r7, #0]
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	f006 fdcb 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010b56:	e396      	b.n	8011286 <evtMspReceive+0x1bf2>

    case MSP_MOTOR_PINS:
        for (i = 0; i < 8; i++)
 8010b58:	2300      	movs	r3, #0
 8010b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8010b5c:	e01b      	b.n	8010b96 <evtMspReceive+0x1502>
 8010b5e:	bf00      	nop
 8010b60:	20001128 	.word	0x20001128
 8010b64:	080264b8 	.word	0x080264b8
 8010b68:	0802817c 	.word	0x0802817c
 8010b6c:	20001f04 	.word	0x20001f04
 8010b70:	20001f1d 	.word	0x20001f1d
 8010b74:	08028044 	.word	0x08028044
 8010b78:	20000bbc 	.word	0x20000bbc
 8010b7c:	66666667 	.word	0x66666667
            _Serialize8(p_port, i + 1);
 8010b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b82:	b2db      	uxtb	r3, r3
 8010b84:	3301      	adds	r3, #1
 8010b86:	b2db      	uxtb	r3, r3
 8010b88:	4619      	mov	r1, r3
 8010b8a:	69b8      	ldr	r0, [r7, #24]
 8010b8c:	f7fe fb2e 	bl	800f1ec <_Serialize8>
        for (i = 0; i < 8; i++)
 8010b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b92:	3301      	adds	r3, #1
 8010b94:	637b      	str	r3, [r7, #52]	; 0x34
 8010b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b98:	2b07      	cmp	r3, #7
 8010b9a:	d9f1      	bls.n	8010b80 <evtMspReceive+0x14ec>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 8);
 8010b9c:	69bb      	ldr	r3, [r7, #24]
 8010b9e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010ba2:	2308      	movs	r3, #8
 8010ba4:	6839      	ldr	r1, [r7, #0]
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f006 fda0 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010bac:	e36b      	b.n	8011286 <evtMspReceive+0x1bf2>

#ifdef GPS
    case MSP_WP:
        wp_no = _Read8(p_port);    // get the wp number
 8010bae:	69b8      	ldr	r0, [r7, #24]
 8010bb0:	f7fe fac2 	bl	800f138 <_Read8>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	75fb      	strb	r3, [r7, #23]
        if (wp_no == 0) {
 8010bb8:	7dfb      	ldrb	r3, [r7, #23]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d106      	bne.n	8010bcc <evtMspReceive+0x1538>
            lat = GPS_home[LAT];
 8010bbe:	4b9c      	ldr	r3, [pc, #624]	; (8010e30 <evtMspReceive+0x179c>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	62bb      	str	r3, [r7, #40]	; 0x28
            lon = GPS_home[LON];
 8010bc4:	4b9a      	ldr	r3, [pc, #616]	; (8010e30 <evtMspReceive+0x179c>)
 8010bc6:	685b      	ldr	r3, [r3, #4]
 8010bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8010bca:	e008      	b.n	8010bde <evtMspReceive+0x154a>
        } else if (wp_no == 16) {
 8010bcc:	7dfb      	ldrb	r3, [r7, #23]
 8010bce:	2b10      	cmp	r3, #16
 8010bd0:	d105      	bne.n	8010bde <evtMspReceive+0x154a>
            lat = GPS_hold[LAT];
 8010bd2:	4b98      	ldr	r3, [pc, #608]	; (8010e34 <evtMspReceive+0x17a0>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	62bb      	str	r3, [r7, #40]	; 0x28
            lon = GPS_hold[LON];
 8010bd8:	4b96      	ldr	r3, [pc, #600]	; (8010e34 <evtMspReceive+0x17a0>)
 8010bda:	685b      	ldr	r3, [r3, #4]
 8010bdc:	627b      	str	r3, [r7, #36]	; 0x24
        }
        _Serialize8(p_port, wp_no);
 8010bde:	7dfb      	ldrb	r3, [r7, #23]
 8010be0:	4619      	mov	r1, r3
 8010be2:	69b8      	ldr	r0, [r7, #24]
 8010be4:	f7fe fb02 	bl	800f1ec <_Serialize8>
        _Serialize32(p_port, lat);
 8010be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bea:	4619      	mov	r1, r3
 8010bec:	69b8      	ldr	r0, [r7, #24]
 8010bee:	f7fe fb38 	bl	800f262 <_Serialize32>
        _Serialize32(p_port, lon);
 8010bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf4:	4619      	mov	r1, r3
 8010bf6:	69b8      	ldr	r0, [r7, #24]
 8010bf8:	f7fe fb33 	bl	800f262 <_Serialize32>
        _Serialize32(p_port, AltHold);           // altitude (cm) will come here -- temporary implementation to test feature with apps
 8010bfc:	4b8e      	ldr	r3, [pc, #568]	; (8010e38 <evtMspReceive+0x17a4>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	4619      	mov	r1, r3
 8010c02:	69b8      	ldr	r0, [r7, #24]
 8010c04:	f7fe fb2d 	bl	800f262 <_Serialize32>
        _Serialize16(p_port, 0);                 // heading  will come here (deg)
 8010c08:	2100      	movs	r1, #0
 8010c0a:	69b8      	ldr	r0, [r7, #24]
 8010c0c:	f7fe fb06 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, 0);                 // time to stay (ms) will come here
 8010c10:	2100      	movs	r1, #0
 8010c12:	69b8      	ldr	r0, [r7, #24]
 8010c14:	f7fe fb02 	bl	800f21c <_Serialize16>
        _Serialize8(p_port, 0);                  // nav flag will come here
 8010c18:	2100      	movs	r1, #0
 8010c1a:	69b8      	ldr	r0, [r7, #24]
 8010c1c:	f7fe fae6 	bl	800f1ec <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 18);
 8010c20:	69bb      	ldr	r3, [r7, #24]
 8010c22:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010c26:	2312      	movs	r3, #18
 8010c28:	6839      	ldr	r1, [r7, #0]
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f006 fd5e 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010c30:	e329      	b.n	8011286 <evtMspReceive+0x1bf2>

    case MSP_SET_WP:
        wp_no = _Read8(p_port);    //get the wp number
 8010c32:	69b8      	ldr	r0, [r7, #24]
 8010c34:	f7fe fa80 	bl	800f138 <_Read8>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	75fb      	strb	r3, [r7, #23]
        lat = _Read32(p_port);
 8010c3c:	69b8      	ldr	r0, [r7, #24]
 8010c3e:	f7fe faac 	bl	800f19a <_Read32>
 8010c42:	4603      	mov	r3, r0
 8010c44:	62bb      	str	r3, [r7, #40]	; 0x28
        lon = _Read32(p_port);
 8010c46:	69b8      	ldr	r0, [r7, #24]
 8010c48:	f7fe faa7 	bl	800f19a <_Read32>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	627b      	str	r3, [r7, #36]	; 0x24
        alt = _Read32(p_port);     // to set altitude (cm)
 8010c50:	69b8      	ldr	r0, [r7, #24]
 8010c52:	f7fe faa2 	bl	800f19a <_Read32>
 8010c56:	4603      	mov	r3, r0
 8010c58:	623b      	str	r3, [r7, #32]
        _Read16(p_port);           // future: to set heading (deg)
 8010c5a:	69b8      	ldr	r0, [r7, #24]
 8010c5c:	f7fe fa80 	bl	800f160 <_Read16>
        _Read16(p_port);           // future: to set time to stay (ms)
 8010c60:	69b8      	ldr	r0, [r7, #24]
 8010c62:	f7fe fa7d 	bl	800f160 <_Read16>
        _Read8(p_port);            // future: to set nav flag
 8010c66:	69b8      	ldr	r0, [r7, #24]
 8010c68:	f7fe fa66 	bl	800f138 <_Read8>
        if (wp_no == 0) {
 8010c6c:	7dfb      	ldrb	r3, [r7, #23]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d112      	bne.n	8010c98 <evtMspReceive+0x1604>
            GPS_home[LAT] = lat;
 8010c72:	4a6f      	ldr	r2, [pc, #444]	; (8010e30 <evtMspReceive+0x179c>)
 8010c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c76:	6013      	str	r3, [r2, #0]
            GPS_home[LON] = lon;
 8010c78:	4a6d      	ldr	r2, [pc, #436]	; (8010e30 <evtMspReceive+0x179c>)
 8010c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c7c:	6053      	str	r3, [r2, #4]
            f.GPS_HOME_MODE = 0;        // with this flag, GPS_set_next_wp will be called in the next loop -- OK with SERIAL GPS / OK with I2C GPS
 8010c7e:	4b6f      	ldr	r3, [pc, #444]	; (8010e3c <evtMspReceive+0x17a8>)
 8010c80:	2200      	movs	r2, #0
 8010c82:	71da      	strb	r2, [r3, #7]
            f.GPS_FIX_HOME = 1;
 8010c84:	4b6d      	ldr	r3, [pc, #436]	; (8010e3c <evtMspReceive+0x17a8>)
 8010c86:	2201      	movs	r2, #1
 8010c88:	731a      	strb	r2, [r3, #12]
            if (alt != 0)
 8010c8a:	6a3b      	ldr	r3, [r7, #32]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d019      	beq.n	8010cc4 <evtMspReceive+0x1630>
                AltHold = alt;          // temporary implementation to test feature with apps
 8010c90:	4a69      	ldr	r2, [pc, #420]	; (8010e38 <evtMspReceive+0x17a4>)
 8010c92:	6a3b      	ldr	r3, [r7, #32]
 8010c94:	6013      	str	r3, [r2, #0]
 8010c96:	e015      	b.n	8010cc4 <evtMspReceive+0x1630>
        } else if (wp_no == 16) {       // OK with SERIAL GPS  --  NOK for I2C GPS / needs more code dev in order to inject GPS coord inside I2C GPS
 8010c98:	7dfb      	ldrb	r3, [r7, #23]
 8010c9a:	2b10      	cmp	r3, #16
 8010c9c:	d112      	bne.n	8010cc4 <evtMspReceive+0x1630>
            GPS_hold[LAT] = lat;
 8010c9e:	4a65      	ldr	r2, [pc, #404]	; (8010e34 <evtMspReceive+0x17a0>)
 8010ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ca2:	6013      	str	r3, [r2, #0]
            GPS_hold[LON] = lon;
 8010ca4:	4a63      	ldr	r2, [pc, #396]	; (8010e34 <evtMspReceive+0x17a0>)
 8010ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca8:	6053      	str	r3, [r2, #4]
            if (alt != 0)
 8010caa:	6a3b      	ldr	r3, [r7, #32]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d002      	beq.n	8010cb6 <evtMspReceive+0x1622>
                AltHold = alt;          // temporary implementation to test feature with apps
 8010cb0:	4a61      	ldr	r2, [pc, #388]	; (8010e38 <evtMspReceive+0x17a4>)
 8010cb2:	6a3b      	ldr	r3, [r7, #32]
 8010cb4:	6013      	str	r3, [r2, #0]
            nav_mode = NAV_MODE_WP;
 8010cb6:	4b62      	ldr	r3, [pc, #392]	; (8010e40 <evtMspReceive+0x17ac>)
 8010cb8:	2202      	movs	r2, #2
 8010cba:	701a      	strb	r2, [r3, #0]
            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
 8010cbc:	4961      	ldr	r1, [pc, #388]	; (8010e44 <evtMspReceive+0x17b0>)
 8010cbe:	485d      	ldr	r0, [pc, #372]	; (8010e34 <evtMspReceive+0x17a0>)
 8010cc0:	f7f8 f95e 	bl	8008f80 <GPS_set_next_wp>
        }
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	6839      	ldr	r1, [r7, #0]
 8010cca:	6878      	ldr	r0, [r7, #4]
 8010ccc:	f006 fd0e 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010cd0:	e2d9      	b.n	8011286 <evtMspReceive+0x1bf2>
#endif  // GPS

    case MSP_RESET_CONF:
        if (!f.ARMED)
 8010cd2:	4b5a      	ldr	r3, [pc, #360]	; (8010e3c <evtMspReceive+0x17a8>)
 8010cd4:	785b      	ldrb	r3, [r3, #1]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d102      	bne.n	8010ce0 <evtMspReceive+0x164c>
            checkFirstTime(true);
 8010cda:	2001      	movs	r0, #1
 8010cdc:	f7f5 fe24 	bl	8006928 <checkFirstTime>
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	6839      	ldr	r1, [r7, #0]
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f006 fd00 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010cec:	e2cb      	b.n	8011286 <evtMspReceive+0x1bf2>

    case MSP_ACC_CALIBRATION:
        if (!f.ARMED)
 8010cee:	4b53      	ldr	r3, [pc, #332]	; (8010e3c <evtMspReceive+0x17a8>)
 8010cf0:	785b      	ldrb	r3, [r3, #1]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d103      	bne.n	8010cfe <evtMspReceive+0x166a>
            calibratingA = CALIBRATING_ACC_CYCLES;
 8010cf6:	4b54      	ldr	r3, [pc, #336]	; (8010e48 <evtMspReceive+0x17b4>)
 8010cf8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010cfc:	801a      	strh	r2, [r3, #0]
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010cfe:	2300      	movs	r3, #0
 8010d00:	2200      	movs	r2, #0
 8010d02:	6839      	ldr	r1, [r7, #0]
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f006 fcf1 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010d0a:	e2bc      	b.n	8011286 <evtMspReceive+0x1bf2>

    case MSP_MAG_CALIBRATION:
        if (!f.ARMED)
 8010d0c:	4b4b      	ldr	r3, [pc, #300]	; (8010e3c <evtMspReceive+0x17a8>)
 8010d0e:	785b      	ldrb	r3, [r3, #1]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d102      	bne.n	8010d1a <evtMspReceive+0x1686>
            f.CALIBRATE_MAG = 1;
 8010d14:	4b49      	ldr	r3, [pc, #292]	; (8010e3c <evtMspReceive+0x17a8>)
 8010d16:	2201      	movs	r2, #1
 8010d18:	739a      	strb	r2, [r3, #14]
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	6839      	ldr	r1, [r7, #0]
 8010d20:	6878      	ldr	r0, [r7, #4]
 8010d22:	f006 fce3 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010d26:	e2ae      	b.n	8011286 <evtMspReceive+0x1bf2>

    case MSP_EEPROM_WRITE:
        if (f.ARMED) {
 8010d28:	4b44      	ldr	r3, [pc, #272]	; (8010e3c <evtMspReceive+0x17a8>)
 8010d2a:	785b      	ldrb	r3, [r3, #1]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d004      	beq.n	8010d3a <evtMspReceive+0x16a6>
            pifMsp_MakeError(p_owner, p_packet);
 8010d30:	6839      	ldr	r1, [r7, #0]
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f006 fd56 	bl	80177e4 <pifMsp_MakeError>
        } else {
            writeEEPROM(0, true);
            pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
        }
        break;
 8010d38:	e2a5      	b.n	8011286 <evtMspReceive+0x1bf2>
            writeEEPROM(0, true);
 8010d3a:	2101      	movs	r1, #1
 8010d3c:	2000      	movs	r0, #0
 8010d3e:	f7f5 fd71 	bl	8006824 <writeEEPROM>
            pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010d42:	2300      	movs	r3, #0
 8010d44:	2200      	movs	r2, #0
 8010d46:	6839      	ldr	r1, [r7, #0]
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f006 fccf 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010d4e:	e29a      	b.n	8011286 <evtMspReceive+0x1bf2>

    case MSP_DEBUG:
        // make use of this crap, output some useful QA statistics
        debug[3] = ((g_crystal_clock / 1000000) * 1000) + (g_core_clock / 1000000);         // XX0YY [crystal clock : core clock]
 8010d50:	4b3e      	ldr	r3, [pc, #248]	; (8010e4c <evtMspReceive+0x17b8>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	4a3e      	ldr	r2, [pc, #248]	; (8010e50 <evtMspReceive+0x17bc>)
 8010d56:	fba2 2303 	umull	r2, r3, r2, r3
 8010d5a:	0c9b      	lsrs	r3, r3, #18
 8010d5c:	b29b      	uxth	r3, r3
 8010d5e:	461a      	mov	r2, r3
 8010d60:	0152      	lsls	r2, r2, #5
 8010d62:	1ad2      	subs	r2, r2, r3
 8010d64:	0092      	lsls	r2, r2, #2
 8010d66:	4413      	add	r3, r2
 8010d68:	00db      	lsls	r3, r3, #3
 8010d6a:	b29a      	uxth	r2, r3
 8010d6c:	4b39      	ldr	r3, [pc, #228]	; (8010e54 <evtMspReceive+0x17c0>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	4937      	ldr	r1, [pc, #220]	; (8010e50 <evtMspReceive+0x17bc>)
 8010d72:	fba1 1303 	umull	r1, r3, r1, r3
 8010d76:	0c9b      	lsrs	r3, r3, #18
 8010d78:	b29b      	uxth	r3, r3
 8010d7a:	4413      	add	r3, r2
 8010d7c:	b29b      	uxth	r3, r3
 8010d7e:	b21a      	sxth	r2, r3
 8010d80:	4b35      	ldr	r3, [pc, #212]	; (8010e58 <evtMspReceive+0x17c4>)
 8010d82:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 4; i++)
 8010d84:	2300      	movs	r3, #0
 8010d86:	637b      	str	r3, [r7, #52]	; 0x34
 8010d88:	e00a      	b.n	8010da0 <evtMspReceive+0x170c>
            _Serialize16(p_port, debug[i]);      // 4 variables are here for general monitoring purpose
 8010d8a:	4a33      	ldr	r2, [pc, #204]	; (8010e58 <evtMspReceive+0x17c4>)
 8010d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d8e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010d92:	4619      	mov	r1, r3
 8010d94:	69b8      	ldr	r0, [r7, #24]
 8010d96:	f7fe fa41 	bl	800f21c <_Serialize16>
        for (i = 0; i < 4; i++)
 8010d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d9c:	3301      	adds	r3, #1
 8010d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8010da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010da2:	2b03      	cmp	r3, #3
 8010da4:	d9f1      	bls.n	8010d8a <evtMspReceive+0x16f6>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 8);
 8010da6:	69bb      	ldr	r3, [r7, #24]
 8010da8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010dac:	2308      	movs	r3, #8
 8010dae:	6839      	ldr	r1, [r7, #0]
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f006 fc9b 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010db6:	e266      	b.n	8011286 <evtMspReceive+0x1bf2>

    // Additional commands that are not compatible with MultiWii
    case MSP_ACC_TRIM:
        _Serialize16(p_port, cfg.angleTrim[PITCH]);
 8010db8:	4b28      	ldr	r3, [pc, #160]	; (8010e5c <evtMspReceive+0x17c8>)
 8010dba:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8010dbe:	4619      	mov	r1, r3
 8010dc0:	69b8      	ldr	r0, [r7, #24]
 8010dc2:	f7fe fa2b 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, cfg.angleTrim[ROLL]);
 8010dc6:	4b25      	ldr	r3, [pc, #148]	; (8010e5c <evtMspReceive+0x17c8>)
 8010dc8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8010dcc:	4619      	mov	r1, r3
 8010dce:	69b8      	ldr	r0, [r7, #24]
 8010dd0:	f7fe fa24 	bl	800f21c <_Serialize16>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 4);
 8010dd4:	69bb      	ldr	r3, [r7, #24]
 8010dd6:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010dda:	2304      	movs	r3, #4
 8010ddc:	6839      	ldr	r1, [r7, #0]
 8010dde:	6878      	ldr	r0, [r7, #4]
 8010de0:	f006 fc84 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010de4:	e24f      	b.n	8011286 <evtMspReceive+0x1bf2>

    case MSP_UID:
        _Serialize32(p_port, g_unique_id[0]);
 8010de6:	4b1e      	ldr	r3, [pc, #120]	; (8010e60 <evtMspReceive+0x17cc>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	4619      	mov	r1, r3
 8010dec:	69b8      	ldr	r0, [r7, #24]
 8010dee:	f7fe fa38 	bl	800f262 <_Serialize32>
        _Serialize32(p_port, g_unique_id[1]);
 8010df2:	4b1b      	ldr	r3, [pc, #108]	; (8010e60 <evtMspReceive+0x17cc>)
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	4619      	mov	r1, r3
 8010df8:	69b8      	ldr	r0, [r7, #24]
 8010dfa:	f7fe fa32 	bl	800f262 <_Serialize32>
        _Serialize32(p_port, g_unique_id[2]);
 8010dfe:	4b18      	ldr	r3, [pc, #96]	; (8010e60 <evtMspReceive+0x17cc>)
 8010e00:	689b      	ldr	r3, [r3, #8]
 8010e02:	4619      	mov	r1, r3
 8010e04:	69b8      	ldr	r0, [r7, #24]
 8010e06:	f7fe fa2c 	bl	800f262 <_Serialize32>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 12);
 8010e0a:	69bb      	ldr	r3, [r7, #24]
 8010e0c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010e10:	230c      	movs	r3, #12
 8010e12:	6839      	ldr	r1, [r7, #0]
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f006 fc69 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010e1a:	e234      	b.n	8011286 <evtMspReceive+0x1bf2>

#ifdef GPS
    case MSP_GPSSVINFO:
        _Serialize8(p_port, GPS_numCh);
 8010e1c:	4b11      	ldr	r3, [pc, #68]	; (8010e64 <evtMspReceive+0x17d0>)
 8010e1e:	781b      	ldrb	r3, [r3, #0]
 8010e20:	4619      	mov	r1, r3
 8010e22:	69b8      	ldr	r0, [r7, #24]
 8010e24:	f7fe f9e2 	bl	800f1ec <_Serialize8>
        for (i = 0; i < GPS_numCh; i++) {
 8010e28:	2300      	movs	r3, #0
 8010e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8010e2c:	e03f      	b.n	8010eae <evtMspReceive+0x181a>
 8010e2e:	bf00      	nop
 8010e30:	20001a58 	.word	0x20001a58
 8010e34:	20001a64 	.word	0x20001a64
 8010e38:	2000175c 	.word	0x2000175c
 8010e3c:	20001988 	.word	0x20001988
 8010e40:	20001a8c 	.word	0x20001a8c
 8010e44:	20001a68 	.word	0x20001a68
 8010e48:	20001cae 	.word	0x20001cae
 8010e4c:	20001974 	.word	0x20001974
 8010e50:	431bde83 	.word	0x431bde83
 8010e54:	20001978 	.word	0x20001978
 8010e58:	200019a0 	.word	0x200019a0
 8010e5c:	20001128 	.word	0x20001128
 8010e60:	2000197c 	.word	0x2000197c
 8010e64:	20001a8d 	.word	0x20001a8d
            _Serialize8(p_port, GPS_svinfo_chn[i]);
 8010e68:	4a8c      	ldr	r2, [pc, #560]	; (801109c <evtMspReceive+0x1a08>)
 8010e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e6c:	4413      	add	r3, r2
 8010e6e:	781b      	ldrb	r3, [r3, #0]
 8010e70:	4619      	mov	r1, r3
 8010e72:	69b8      	ldr	r0, [r7, #24]
 8010e74:	f7fe f9ba 	bl	800f1ec <_Serialize8>
            _Serialize8(p_port, GPS_svinfo_svid[i]);
 8010e78:	4a89      	ldr	r2, [pc, #548]	; (80110a0 <evtMspReceive+0x1a0c>)
 8010e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e7c:	4413      	add	r3, r2
 8010e7e:	781b      	ldrb	r3, [r3, #0]
 8010e80:	4619      	mov	r1, r3
 8010e82:	69b8      	ldr	r0, [r7, #24]
 8010e84:	f7fe f9b2 	bl	800f1ec <_Serialize8>
            _Serialize8(p_port, GPS_svinfo_quality[i]);
 8010e88:	4a86      	ldr	r2, [pc, #536]	; (80110a4 <evtMspReceive+0x1a10>)
 8010e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e8c:	4413      	add	r3, r2
 8010e8e:	781b      	ldrb	r3, [r3, #0]
 8010e90:	4619      	mov	r1, r3
 8010e92:	69b8      	ldr	r0, [r7, #24]
 8010e94:	f7fe f9aa 	bl	800f1ec <_Serialize8>
            _Serialize8(p_port, GPS_svinfo_cno[i]);
 8010e98:	4a83      	ldr	r2, [pc, #524]	; (80110a8 <evtMspReceive+0x1a14>)
 8010e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e9c:	4413      	add	r3, r2
 8010e9e:	781b      	ldrb	r3, [r3, #0]
 8010ea0:	4619      	mov	r1, r3
 8010ea2:	69b8      	ldr	r0, [r7, #24]
 8010ea4:	f7fe f9a2 	bl	800f1ec <_Serialize8>
        for (i = 0; i < GPS_numCh; i++) {
 8010ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eaa:	3301      	adds	r3, #1
 8010eac:	637b      	str	r3, [r7, #52]	; 0x34
 8010eae:	4b7f      	ldr	r3, [pc, #508]	; (80110ac <evtMspReceive+0x1a18>)
 8010eb0:	781b      	ldrb	r3, [r3, #0]
 8010eb2:	461a      	mov	r2, r3
 8010eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eb6:	4293      	cmp	r3, r2
 8010eb8:	d3d6      	bcc.n	8010e68 <evtMspReceive+0x17d4>
        }
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 1 + (GPS_numCh * 4));
 8010eba:	69bb      	ldr	r3, [r7, #24]
 8010ebc:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010ec0:	4b7a      	ldr	r3, [pc, #488]	; (80110ac <evtMspReceive+0x1a18>)
 8010ec2:	781b      	ldrb	r3, [r3, #0]
 8010ec4:	b29b      	uxth	r3, r3
 8010ec6:	009b      	lsls	r3, r3, #2
 8010ec8:	b29b      	uxth	r3, r3
 8010eca:	3301      	adds	r3, #1
 8010ecc:	b29b      	uxth	r3, r3
 8010ece:	6839      	ldr	r1, [r7, #0]
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f006 fc0b 	bl	80176ec <pifMsp_MakeAnswer>
        // Poll new SVINFO from GPS
        gpsPollSvinfo();
 8010ed6:	f7f7 fb13 	bl	8008500 <gpsPollSvinfo>
        break;
 8010eda:	e1d4      	b.n	8011286 <evtMspReceive+0x1bf2>
    case MSP_GPSDEBUGINFO:
        if (sensors(SENSOR_GPS)) {
 8010edc:	2020      	movs	r0, #32
 8010ede:	f7f6 f83b 	bl	8006f58 <sensors>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d012      	beq.n	8010f0e <evtMspReceive+0x187a>
            _Serialize32(p_port, GPS_update_rate[1] - GPS_update_rate[0]);
 8010ee8:	4b71      	ldr	r3, [pc, #452]	; (80110b0 <evtMspReceive+0x1a1c>)
 8010eea:	685a      	ldr	r2, [r3, #4]
 8010eec:	4b70      	ldr	r3, [pc, #448]	; (80110b0 <evtMspReceive+0x1a1c>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	1ad3      	subs	r3, r2, r3
 8010ef2:	4619      	mov	r1, r3
 8010ef4:	69b8      	ldr	r0, [r7, #24]
 8010ef6:	f7fe f9b4 	bl	800f262 <_Serialize32>
            _Serialize32(p_port, GPS_svinfo_rate[1] - GPS_svinfo_rate[0]);
 8010efa:	4b6e      	ldr	r3, [pc, #440]	; (80110b4 <evtMspReceive+0x1a20>)
 8010efc:	685a      	ldr	r2, [r3, #4]
 8010efe:	4b6d      	ldr	r3, [pc, #436]	; (80110b4 <evtMspReceive+0x1a20>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	1ad3      	subs	r3, r2, r3
 8010f04:	4619      	mov	r1, r3
 8010f06:	69b8      	ldr	r0, [r7, #24]
 8010f08:	f7fe f9ab 	bl	800f262 <_Serialize32>
 8010f0c:	e007      	b.n	8010f1e <evtMspReceive+0x188a>
        } else {
            _Serialize32(p_port, 0);
 8010f0e:	2100      	movs	r1, #0
 8010f10:	69b8      	ldr	r0, [r7, #24]
 8010f12:	f7fe f9a6 	bl	800f262 <_Serialize32>
            _Serialize32(p_port, 0);
 8010f16:	2100      	movs	r1, #0
 8010f18:	69b8      	ldr	r0, [r7, #24]
 8010f1a:	f7fe f9a2 	bl	800f262 <_Serialize32>
        }
        _Serialize32(p_port, GPS_HorizontalAcc);
 8010f1e:	4b66      	ldr	r3, [pc, #408]	; (80110b8 <evtMspReceive+0x1a24>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	4619      	mov	r1, r3
 8010f24:	69b8      	ldr	r0, [r7, #24]
 8010f26:	f7fe f99c 	bl	800f262 <_Serialize32>
        _Serialize32(p_port, GPS_VerticalAcc);
 8010f2a:	4b64      	ldr	r3, [pc, #400]	; (80110bc <evtMspReceive+0x1a28>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	4619      	mov	r1, r3
 8010f30:	69b8      	ldr	r0, [r7, #24]
 8010f32:	f7fe f996 	bl	800f262 <_Serialize32>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 16);
 8010f36:	69bb      	ldr	r3, [r7, #24]
 8010f38:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010f3c:	2310      	movs	r3, #16
 8010f3e:	6839      	ldr	r1, [r7, #0]
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	f006 fbd3 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 8010f46:	e19e      	b.n	8011286 <evtMspReceive+0x1bf2>
#endif  // GPS

    case MSP_SET_CONFIG:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010f48:	2300      	movs	r3, #0
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	6839      	ldr	r1, [r7, #0]
 8010f4e:	6878      	ldr	r0, [r7, #4]
 8010f50:	f006 fbcc 	bl	80176ec <pifMsp_MakeAnswer>
        mcfg.mixerConfiguration = _Read8(p_port); // multitype
 8010f54:	69b8      	ldr	r0, [r7, #24]
 8010f56:	f7fe f8ef 	bl	800f138 <_Read8>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	4b58      	ldr	r3, [pc, #352]	; (80110c0 <evtMspReceive+0x1a2c>)
 8010f60:	715a      	strb	r2, [r3, #5]
        featureClearAll();
 8010f62:	f7f6 f87d 	bl	8007060 <featureClearAll>
        featureSet(_Read32(p_port)); // features bitmap
 8010f66:	69b8      	ldr	r0, [r7, #24]
 8010f68:	f7fe f917 	bl	800f19a <_Read32>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f7f6 f850 	bl	8007014 <featureSet>
        mcfg.serialrx_type = _Read8(p_port); // serialrx_type
 8010f74:	69b8      	ldr	r0, [r7, #24]
 8010f76:	f7fe f8df 	bl	800f138 <_Read8>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	461a      	mov	r2, r3
 8010f7e:	4b50      	ldr	r3, [pc, #320]	; (80110c0 <evtMspReceive+0x1a2c>)
 8010f80:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
        mcfg.board_align_roll = _Read16(p_port); // board_align_roll
 8010f84:	69b8      	ldr	r0, [r7, #24]
 8010f86:	f7fe f8eb 	bl	800f160 <_Read16>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	b21a      	sxth	r2, r3
 8010f8e:	4b4c      	ldr	r3, [pc, #304]	; (80110c0 <evtMspReceive+0x1a2c>)
 8010f90:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
        mcfg.board_align_pitch = _Read16(p_port); // board_align_pitch
 8010f94:	69b8      	ldr	r0, [r7, #24]
 8010f96:	f7fe f8e3 	bl	800f160 <_Read16>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	b21a      	sxth	r2, r3
 8010f9e:	4b48      	ldr	r3, [pc, #288]	; (80110c0 <evtMspReceive+0x1a2c>)
 8010fa0:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
        mcfg.board_align_yaw = _Read16(p_port); // board_align_yaw
 8010fa4:	69b8      	ldr	r0, [r7, #24]
 8010fa6:	f7fe f8db 	bl	800f160 <_Read16>
 8010faa:	4603      	mov	r3, r0
 8010fac:	b21a      	sxth	r2, r3
 8010fae:	4b44      	ldr	r3, [pc, #272]	; (80110c0 <evtMspReceive+0x1a2c>)
 8010fb0:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
        mcfg.currentscale = _Read16(p_port);
 8010fb4:	69b8      	ldr	r0, [r7, #24]
 8010fb6:	f7fe f8d3 	bl	800f160 <_Read16>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	461a      	mov	r2, r3
 8010fbe:	4b40      	ldr	r3, [pc, #256]	; (80110c0 <evtMspReceive+0x1a2c>)
 8010fc0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
        mcfg.currentoffset = _Read16(p_port);
 8010fc4:	69b8      	ldr	r0, [r7, #24]
 8010fc6:	f7fe f8cb 	bl	800f160 <_Read16>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	461a      	mov	r2, r3
 8010fce:	4b3c      	ldr	r3, [pc, #240]	; (80110c0 <evtMspReceive+0x1a2c>)
 8010fd0:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
        mcfg.motor_pwm_rate = _Read16(p_port);
 8010fd4:	69b8      	ldr	r0, [r7, #24]
 8010fd6:	f7fe f8c3 	bl	800f160 <_Read16>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	461a      	mov	r2, r3
 8010fde:	4b38      	ldr	r3, [pc, #224]	; (80110c0 <evtMspReceive+0x1a2c>)
 8010fe0:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
        cfg.rollPitchRate[0] = _Read8(p_port);
 8010fe4:	69b8      	ldr	r0, [r7, #24]
 8010fe6:	f7fe f8a7 	bl	800f138 <_Read8>
 8010fea:	4603      	mov	r3, r0
 8010fec:	461a      	mov	r2, r3
 8010fee:	4b35      	ldr	r3, [pc, #212]	; (80110c4 <evtMspReceive+0x1a30>)
 8010ff0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        cfg.rollPitchRate[1] = _Read8(p_port);
 8010ff4:	69b8      	ldr	r0, [r7, #24]
 8010ff6:	f7fe f89f 	bl	800f138 <_Read8>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	461a      	mov	r2, r3
 8010ffe:	4b31      	ldr	r3, [pc, #196]	; (80110c4 <evtMspReceive+0x1a30>)
 8011000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mcfg.power_adc_channel = _Read8(p_port);
 8011004:	69b8      	ldr	r0, [r7, #24]
 8011006:	f7fe f897 	bl	800f138 <_Read8>
 801100a:	4603      	mov	r3, r0
 801100c:	461a      	mov	r2, r3
 801100e:	4b2c      	ldr	r3, [pc, #176]	; (80110c0 <evtMspReceive+0x1a2c>)
 8011010:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
        cfg.small_angle = _Read8(p_port);
 8011014:	69b8      	ldr	r0, [r7, #24]
 8011016:	f7fe f88f 	bl	800f138 <_Read8>
 801101a:	4603      	mov	r3, r0
 801101c:	461a      	mov	r2, r3
 801101e:	4b29      	ldr	r3, [pc, #164]	; (80110c4 <evtMspReceive+0x1a30>)
 8011020:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        tmp = _Read16(p_port);
 8011024:	69b8      	ldr	r0, [r7, #24]
 8011026:	f7fe f89b 	bl	800f160 <_Read16>
 801102a:	4603      	mov	r3, r0
 801102c:	613b      	str	r3, [r7, #16]
        if (tmp != mcfg.looptime) {
 801102e:	4b24      	ldr	r3, [pc, #144]	; (80110c0 <evtMspReceive+0x1a2c>)
 8011030:	899b      	ldrh	r3, [r3, #12]
 8011032:	461a      	mov	r2, r3
 8011034:	693b      	ldr	r3, [r7, #16]
 8011036:	4293      	cmp	r3, r2
 8011038:	d026      	beq.n	8011088 <evtMspReceive+0x19f4>
            if (mcfg.looptime && tmp) {
 801103a:	4b21      	ldr	r3, [pc, #132]	; (80110c0 <evtMspReceive+0x1a2c>)
 801103c:	899b      	ldrh	r3, [r3, #12]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d00b      	beq.n	801105a <evtMspReceive+0x19c6>
 8011042:	693b      	ldr	r3, [r7, #16]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d008      	beq.n	801105a <evtMspReceive+0x19c6>
                pifTask_ChangePeriod(g_task_compute_imu, tmp);
 8011048:	4b1f      	ldr	r3, [pc, #124]	; (80110c8 <evtMspReceive+0x1a34>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	693a      	ldr	r2, [r7, #16]
 801104e:	b292      	uxth	r2, r2
 8011050:	4611      	mov	r1, r2
 8011052:	4618      	mov	r0, r3
 8011054:	f003 fbb0 	bl	80147b8 <pifTask_ChangePeriod>
 8011058:	e012      	b.n	8011080 <evtMspReceive+0x19ec>
            }
            else {
                if (tmp) {
 801105a:	693b      	ldr	r3, [r7, #16]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d008      	beq.n	8011072 <evtMspReceive+0x19de>
                    pifTask_ChangeMode(g_task_compute_imu, TM_PERIOD_US, tmp);
 8011060:	4b19      	ldr	r3, [pc, #100]	; (80110c8 <evtMspReceive+0x1a34>)
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	693a      	ldr	r2, [r7, #16]
 8011066:	b292      	uxth	r2, r2
 8011068:	2103      	movs	r1, #3
 801106a:	4618      	mov	r0, r3
 801106c:	f003 fb76 	bl	801475c <pifTask_ChangeMode>
 8011070:	e006      	b.n	8011080 <evtMspReceive+0x19ec>
                }
                else {
                    pifTask_ChangeMode(g_task_compute_imu, TM_ALWAYS, 100);	    // 100%
 8011072:	4b15      	ldr	r3, [pc, #84]	; (80110c8 <evtMspReceive+0x1a34>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	2264      	movs	r2, #100	; 0x64
 8011078:	2101      	movs	r1, #1
 801107a:	4618      	mov	r0, r3
 801107c:	f003 fb6e 	bl	801475c <pifTask_ChangeMode>
                }
            }
            mcfg.looptime = tmp;
 8011080:	693b      	ldr	r3, [r7, #16]
 8011082:	b29a      	uxth	r2, r3
 8011084:	4b0e      	ldr	r3, [pc, #56]	; (80110c0 <evtMspReceive+0x1a2c>)
 8011086:	819a      	strh	r2, [r3, #12]
        }
        cfg.locked_in = _Read8(p_port);
 8011088:	69b8      	ldr	r0, [r7, #24]
 801108a:	f7fe f855 	bl	800f138 <_Read8>
 801108e:	4603      	mov	r3, r0
 8011090:	461a      	mov	r2, r3
 8011092:	4b0c      	ldr	r3, [pc, #48]	; (80110c4 <evtMspReceive+0x1a30>)
 8011094:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        /// ???
        break;
 8011098:	e0f5      	b.n	8011286 <evtMspReceive+0x1bf2>
 801109a:	bf00      	nop
 801109c:	20001a90 	.word	0x20001a90
 80110a0:	20001ab0 	.word	0x20001ab0
 80110a4:	20001ad0 	.word	0x20001ad0
 80110a8:	20001af0 	.word	0x20001af0
 80110ac:	20001a8d 	.word	0x20001a8d
 80110b0:	20001b10 	.word	0x20001b10
 80110b4:	20001b18 	.word	0x20001b18
 80110b8:	20001b20 	.word	0x20001b20
 80110bc:	20001b24 	.word	0x20001b24
 80110c0:	20000bbc 	.word	0x20000bbc
 80110c4:	20001128 	.word	0x20001128
 80110c8:	20001b88 	.word	0x20001b88

    case MSP_CONFIG:
        _Serialize8(p_port, mcfg.mixerConfiguration);
 80110cc:	4b70      	ldr	r3, [pc, #448]	; (8011290 <evtMspReceive+0x1bfc>)
 80110ce:	795b      	ldrb	r3, [r3, #5]
 80110d0:	4619      	mov	r1, r3
 80110d2:	69b8      	ldr	r0, [r7, #24]
 80110d4:	f7fe f88a 	bl	800f1ec <_Serialize8>
        _Serialize32(p_port, featureMask());
 80110d8:	f7f5 ffce 	bl	8007078 <featureMask>
 80110dc:	4603      	mov	r3, r0
 80110de:	4619      	mov	r1, r3
 80110e0:	69b8      	ldr	r0, [r7, #24]
 80110e2:	f7fe f8be 	bl	800f262 <_Serialize32>
        _Serialize8(p_port, mcfg.serialrx_type);
 80110e6:	4b6a      	ldr	r3, [pc, #424]	; (8011290 <evtMspReceive+0x1bfc>)
 80110e8:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80110ec:	4619      	mov	r1, r3
 80110ee:	69b8      	ldr	r0, [r7, #24]
 80110f0:	f7fe f87c 	bl	800f1ec <_Serialize8>
        _Serialize16(p_port, mcfg.board_align_roll);
 80110f4:	4b66      	ldr	r3, [pc, #408]	; (8011290 <evtMspReceive+0x1bfc>)
 80110f6:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 80110fa:	4619      	mov	r1, r3
 80110fc:	69b8      	ldr	r0, [r7, #24]
 80110fe:	f7fe f88d 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, mcfg.board_align_pitch);
 8011102:	4b63      	ldr	r3, [pc, #396]	; (8011290 <evtMspReceive+0x1bfc>)
 8011104:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8011108:	4619      	mov	r1, r3
 801110a:	69b8      	ldr	r0, [r7, #24]
 801110c:	f7fe f886 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, mcfg.board_align_yaw);
 8011110:	4b5f      	ldr	r3, [pc, #380]	; (8011290 <evtMspReceive+0x1bfc>)
 8011112:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8011116:	4619      	mov	r1, r3
 8011118:	69b8      	ldr	r0, [r7, #24]
 801111a:	f7fe f87f 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, mcfg.currentscale);
 801111e:	4b5c      	ldr	r3, [pc, #368]	; (8011290 <evtMspReceive+0x1bfc>)
 8011120:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
 8011124:	b21b      	sxth	r3, r3
 8011126:	4619      	mov	r1, r3
 8011128:	69b8      	ldr	r0, [r7, #24]
 801112a:	f7fe f877 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, mcfg.currentoffset);
 801112e:	4b58      	ldr	r3, [pc, #352]	; (8011290 <evtMspReceive+0x1bfc>)
 8011130:	f8b3 317a 	ldrh.w	r3, [r3, #378]	; 0x17a
 8011134:	b21b      	sxth	r3, r3
 8011136:	4619      	mov	r1, r3
 8011138:	69b8      	ldr	r0, [r7, #24]
 801113a:	f7fe f86f 	bl	800f21c <_Serialize16>
        _Serialize16(p_port, mcfg.motor_pwm_rate);
 801113e:	4b54      	ldr	r3, [pc, #336]	; (8011290 <evtMspReceive+0x1bfc>)
 8011140:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8011144:	b21b      	sxth	r3, r3
 8011146:	4619      	mov	r1, r3
 8011148:	69b8      	ldr	r0, [r7, #24]
 801114a:	f7fe f867 	bl	800f21c <_Serialize16>
        _Serialize8(p_port, cfg.rollPitchRate[0]);
 801114e:	4b51      	ldr	r3, [pc, #324]	; (8011294 <evtMspReceive+0x1c00>)
 8011150:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8011154:	4619      	mov	r1, r3
 8011156:	69b8      	ldr	r0, [r7, #24]
 8011158:	f7fe f848 	bl	800f1ec <_Serialize8>
        _Serialize8(p_port, cfg.rollPitchRate[1]);
 801115c:	4b4d      	ldr	r3, [pc, #308]	; (8011294 <evtMspReceive+0x1c00>)
 801115e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011162:	4619      	mov	r1, r3
 8011164:	69b8      	ldr	r0, [r7, #24]
 8011166:	f7fe f841 	bl	800f1ec <_Serialize8>
        _Serialize8(p_port, mcfg.power_adc_channel);
 801116a:	4b49      	ldr	r3, [pc, #292]	; (8011290 <evtMspReceive+0x1bfc>)
 801116c:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 8011170:	4619      	mov	r1, r3
 8011172:	69b8      	ldr	r0, [r7, #24]
 8011174:	f7fe f83a 	bl	800f1ec <_Serialize8>
        _Serialize8(p_port, cfg.small_angle);
 8011178:	4b46      	ldr	r3, [pc, #280]	; (8011294 <evtMspReceive+0x1c00>)
 801117a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801117e:	4619      	mov	r1, r3
 8011180:	69b8      	ldr	r0, [r7, #24]
 8011182:	f7fe f833 	bl	800f1ec <_Serialize8>
        _Serialize16(p_port, mcfg.looptime);
 8011186:	4b42      	ldr	r3, [pc, #264]	; (8011290 <evtMspReceive+0x1bfc>)
 8011188:	899b      	ldrh	r3, [r3, #12]
 801118a:	b21b      	sxth	r3, r3
 801118c:	4619      	mov	r1, r3
 801118e:	69b8      	ldr	r0, [r7, #24]
 8011190:	f7fe f844 	bl	800f21c <_Serialize16>
        _Serialize8(p_port, cfg.locked_in);
 8011194:	4b3f      	ldr	r3, [pc, #252]	; (8011294 <evtMspReceive+0x1c00>)
 8011196:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801119a:	4619      	mov	r1, r3
 801119c:	69b8      	ldr	r0, [r7, #24]
 801119e:	f7fe f825 	bl	800f1ec <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 1 + 4 + 1 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 1 + 1 + 2 + 1);
 80111a2:	69bb      	ldr	r3, [r7, #24]
 80111a4:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80111a8:	2319      	movs	r3, #25
 80111aa:	6839      	ldr	r1, [r7, #0]
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	f006 fa9d 	bl	80176ec <pifMsp_MakeAnswer>
        /// ???
        break;
 80111b2:	e068      	b.n	8011286 <evtMspReceive+0x1bf2>

    case MSP_RCMAP:
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 80111b4:	2300      	movs	r3, #0
 80111b6:	637b      	str	r3, [r7, #52]	; 0x34
 80111b8:	e00c      	b.n	80111d4 <evtMspReceive+0x1b40>
            _Serialize8(p_port, mcfg.rcmap[i]);
 80111ba:	4a35      	ldr	r2, [pc, #212]	; (8011290 <evtMspReceive+0x1bfc>)
 80111bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111be:	4413      	add	r3, r2
 80111c0:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 80111c4:	781b      	ldrb	r3, [r3, #0]
 80111c6:	4619      	mov	r1, r3
 80111c8:	69b8      	ldr	r0, [r7, #24]
 80111ca:	f7fe f80f 	bl	800f1ec <_Serialize8>
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 80111ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111d0:	3301      	adds	r3, #1
 80111d2:	637b      	str	r3, [r7, #52]	; 0x34
 80111d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111d6:	2b07      	cmp	r3, #7
 80111d8:	d9ef      	bls.n	80111ba <evtMspReceive+0x1b26>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, MAX_SERIAL_INPUTS);
 80111da:	69bb      	ldr	r3, [r7, #24]
 80111dc:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80111e0:	2308      	movs	r3, #8
 80111e2:	6839      	ldr	r1, [r7, #0]
 80111e4:	6878      	ldr	r0, [r7, #4]
 80111e6:	f006 fa81 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 80111ea:	e04c      	b.n	8011286 <evtMspReceive+0x1bf2>

    case MSP_SET_RCMAP:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 80111ec:	2300      	movs	r3, #0
 80111ee:	2200      	movs	r2, #0
 80111f0:	6839      	ldr	r1, [r7, #0]
 80111f2:	6878      	ldr	r0, [r7, #4]
 80111f4:	f006 fa7a 	bl	80176ec <pifMsp_MakeAnswer>
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 80111f8:	2300      	movs	r3, #0
 80111fa:	637b      	str	r3, [r7, #52]	; 0x34
 80111fc:	e00e      	b.n	801121c <evtMspReceive+0x1b88>
            mcfg.rcmap[i] = _Read8(p_port);
 80111fe:	69b8      	ldr	r0, [r7, #24]
 8011200:	f7fd ff9a 	bl	800f138 <_Read8>
 8011204:	4603      	mov	r3, r0
 8011206:	4619      	mov	r1, r3
 8011208:	4a21      	ldr	r2, [pc, #132]	; (8011290 <evtMspReceive+0x1bfc>)
 801120a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801120c:	4413      	add	r3, r2
 801120e:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8011212:	460a      	mov	r2, r1
 8011214:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8011216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011218:	3301      	adds	r3, #1
 801121a:	637b      	str	r3, [r7, #52]	; 0x34
 801121c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801121e:	2b07      	cmp	r3, #7
 8011220:	d9ed      	bls.n	80111fe <evtMspReceive+0x1b6a>
        break;
 8011222:	e030      	b.n	8011286 <evtMspReceive+0x1bf2>

    case MSP_REBOOT:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8011224:	2300      	movs	r3, #0
 8011226:	2200      	movs	r2, #0
 8011228:	6839      	ldr	r1, [r7, #0]
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f006 fa5e 	bl	80176ec <pifMsp_MakeAnswer>
        pendReboot = true;
 8011230:	4b19      	ldr	r3, [pc, #100]	; (8011298 <evtMspReceive+0x1c04>)
 8011232:	2201      	movs	r2, #1
 8011234:	701a      	strb	r2, [r3, #0]
        break;
 8011236:	e026      	b.n	8011286 <evtMspReceive+0x1bf2>

    case MSP_BUILDINFO:
        for (i = 0; i < 11; i++)
 8011238:	2300      	movs	r3, #0
 801123a:	637b      	str	r3, [r7, #52]	; 0x34
 801123c:	e00a      	b.n	8011254 <evtMspReceive+0x1bc0>
            _Serialize8(p_port, build[i]); // MMM DD YYYY as ascii, MMM = Jan/Feb... etc
 801123e:	69fa      	ldr	r2, [r7, #28]
 8011240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011242:	4413      	add	r3, r2
 8011244:	781b      	ldrb	r3, [r3, #0]
 8011246:	4619      	mov	r1, r3
 8011248:	69b8      	ldr	r0, [r7, #24]
 801124a:	f7fd ffcf 	bl	800f1ec <_Serialize8>
        for (i = 0; i < 11; i++)
 801124e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011250:	3301      	adds	r3, #1
 8011252:	637b      	str	r3, [r7, #52]	; 0x34
 8011254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011256:	2b0a      	cmp	r3, #10
 8011258:	d9f1      	bls.n	801123e <evtMspReceive+0x1baa>
        _Serialize32(p_port, 0); // future exp
 801125a:	2100      	movs	r1, #0
 801125c:	69b8      	ldr	r0, [r7, #24]
 801125e:	f7fe f800 	bl	800f262 <_Serialize32>
        _Serialize32(p_port, 0); // future exp
 8011262:	2100      	movs	r1, #0
 8011264:	69b8      	ldr	r0, [r7, #24]
 8011266:	f7fd fffc 	bl	800f262 <_Serialize32>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 11 + 4 + 4);
 801126a:	69bb      	ldr	r3, [r7, #24]
 801126c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8011270:	2313      	movs	r3, #19
 8011272:	6839      	ldr	r1, [r7, #0]
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f006 fa39 	bl	80176ec <pifMsp_MakeAnswer>
        break;
 801127a:	e004      	b.n	8011286 <evtMspReceive+0x1bf2>

    default:                   // we do not know how to handle the (valid) message, indicate error MSP $M!
        pifMsp_MakeError(p_owner, p_packet);
 801127c:	6839      	ldr	r1, [r7, #0]
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f006 fab0 	bl	80177e4 <pifMsp_MakeError>
        break;
 8011284:	bf00      	nop
    }
}
 8011286:	bf00      	nop
 8011288:	373c      	adds	r7, #60	; 0x3c
 801128a:	46bd      	mov	sp, r7
 801128c:	bd90      	pop	{r4, r7, pc}
 801128e:	bf00      	nop
 8011290:	20000bbc 	.word	0x20000bbc
 8011294:	20001128 	.word	0x20001128
 8011298:	20001f1e 	.word	0x20001f1e

0801129c <evtMspOtherPacket>:

static void evtMspOtherPacket(PifMsp* p_owner, uint8_t data)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b082      	sub	sp, #8
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
 80112a4:	460b      	mov	r3, r1
 80112a6:	70fb      	strb	r3, [r7, #3]
    (void)p_owner;

    if (f.ARMED) return;
 80112a8:	4b0c      	ldr	r3, [pc, #48]	; (80112dc <evtMspOtherPacket+0x40>)
 80112aa:	785b      	ldrb	r3, [r3, #1]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d110      	bne.n	80112d2 <evtMspOtherPacket+0x36>

    if (data == '#')
 80112b0:	78fb      	ldrb	r3, [r7, #3]
 80112b2:	2b23      	cmp	r3, #35	; 0x23
 80112b4:	d103      	bne.n	80112be <evtMspOtherPacket+0x22>
        s_change_cli = TRUE;
 80112b6:	4b0a      	ldr	r3, [pc, #40]	; (80112e0 <evtMspOtherPacket+0x44>)
 80112b8:	2201      	movs	r2, #1
 80112ba:	701a      	strb	r2, [r3, #0]
 80112bc:	e00a      	b.n	80112d4 <evtMspOtherPacket+0x38>
    else if (data == mcfg.reboot_character)
 80112be:	4b09      	ldr	r3, [pc, #36]	; (80112e4 <evtMspOtherPacket+0x48>)
 80112c0:	f893 3569 	ldrb.w	r3, [r3, #1385]	; 0x569
 80112c4:	78fa      	ldrb	r2, [r7, #3]
 80112c6:	429a      	cmp	r2, r3
 80112c8:	d104      	bne.n	80112d4 <evtMspOtherPacket+0x38>
        systemReset(true);      // reboot to bootloader
 80112ca:	2001      	movs	r0, #1
 80112cc:	f7f0 fe8a 	bl	8001fe4 <systemReset>
 80112d0:	e000      	b.n	80112d4 <evtMspOtherPacket+0x38>
    if (f.ARMED) return;
 80112d2:	bf00      	nop
}
 80112d4:	3708      	adds	r7, #8
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}
 80112da:	bf00      	nop
 80112dc:	20001988 	.word	0x20001988
 80112e0:	200020d0 	.word	0x200020d0
 80112e4:	20000bbc 	.word	0x20000bbc

080112e8 <serialCom>:

void serialCom(void)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	af00      	add	r7, sp, #0
    if (s_change_cli) {
 80112ec:	4b0c      	ldr	r3, [pc, #48]	; (8011320 <serialCom+0x38>)
 80112ee:	781b      	ldrb	r3, [r3, #0]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d00b      	beq.n	801130c <serialCom+0x24>
        s_change_cli = FALSE;
 80112f4:	4b0a      	ldr	r3, [pc, #40]	; (8011320 <serialCom+0x38>)
 80112f6:	2200      	movs	r2, #0
 80112f8:	701a      	strb	r2, [r3, #0]

        pifMsp_DetachComm(&ports[0].pif_msp);
 80112fa:	480a      	ldr	r0, [pc, #40]	; (8011324 <serialCom+0x3c>)
 80112fc:	f006 f9e6 	bl	80176cc <pifMsp_DetachComm>
        cliInit(&core.mainport->comm);
 8011300:	4b09      	ldr	r3, [pc, #36]	; (8011328 <serialCom+0x40>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	3304      	adds	r3, #4
 8011306:	4618      	mov	r0, r3
 8011308:	f7f5 f898 	bl	800643c <cliInit>
    };

    if (pendReboot)
 801130c:	4b07      	ldr	r3, [pc, #28]	; (801132c <serialCom+0x44>)
 801130e:	781b      	ldrb	r3, [r3, #0]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d002      	beq.n	801131a <serialCom+0x32>
        systemReset(false); // noreturn
 8011314:	2000      	movs	r0, #0
 8011316:	f7f0 fe65 	bl	8001fe4 <systemReset>
}
 801131a:	bf00      	nop
 801131c:	bd80      	pop	{r7, pc}
 801131e:	bf00      	nop
 8011320:	200020d0 	.word	0x200020d0
 8011324:	20001f24 	.word	0x20001f24
 8011328:	20000afc 	.word	0x20000afc
 801132c:	20001f1e 	.word	0x20001f1e

08011330 <pif_Init>:
void PIF_WEAK pifSequenceColSig_Clear() {}

#endif

void pif_Init(PifActTimer1us act_timer1us)
{
 8011330:	b480      	push	{r7}
 8011332:	b083      	sub	sp, #12
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
	pif_act_timer1us = act_timer1us;
 8011338:	4a07      	ldr	r2, [pc, #28]	; (8011358 <pif_Init+0x28>)
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6013      	str	r3, [r2, #0]

	pif_datetime.month = 1;
 801133e:	4b07      	ldr	r3, [pc, #28]	; (801135c <pif_Init+0x2c>)
 8011340:	2201      	movs	r2, #1
 8011342:	705a      	strb	r2, [r3, #1]
	pif_datetime.day = 1;
 8011344:	4b05      	ldr	r3, [pc, #20]	; (801135c <pif_Init+0x2c>)
 8011346:	2201      	movs	r2, #1
 8011348:	709a      	strb	r2, [r3, #2]
    pifSensorDigitalColSig_Init();
    pifSensorSwitchColSig_Init();
    pifSolenoidColSig_Init();
    pifSequenceColSig_Init();
#endif
}
 801134a:	bf00      	nop
 801134c:	370c      	adds	r7, #12
 801134e:	46bd      	mov	sp, r7
 8011350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011354:	4770      	bx	lr
 8011356:	bf00      	nop
 8011358:	200020f0 	.word	0x200020f0
 801135c:	200020d8 	.word	0x200020d8

08011360 <pif_sigTimer1ms>:
    pifSequenceColSig_Clear();
#endif
}

void pif_sigTimer1ms()
{
 8011360:	b480      	push	{r7}
 8011362:	b083      	sub	sp, #12
 8011364:	af00      	add	r7, sp, #0
	uint8_t days;
	uint16_t year;
#ifndef __PIF_NO_LOG__
	static uint16_t usTimerPerform = 0;

    if (pif_log_flag.bt.performance) {
 8011366:	4b59      	ldr	r3, [pc, #356]	; (80114cc <pif_sigTimer1ms+0x16c>)
 8011368:	781b      	ldrb	r3, [r3, #0]
 801136a:	f003 0301 	and.w	r3, r3, #1
 801136e:	b2db      	uxtb	r3, r3
 8011370:	2b00      	cmp	r3, #0
 8011372:	d010      	beq.n	8011396 <pif_sigTimer1ms+0x36>
		usTimerPerform++;
 8011374:	4b56      	ldr	r3, [pc, #344]	; (80114d0 <pif_sigTimer1ms+0x170>)
 8011376:	881b      	ldrh	r3, [r3, #0]
 8011378:	3301      	adds	r3, #1
 801137a:	b29a      	uxth	r2, r3
 801137c:	4b54      	ldr	r3, [pc, #336]	; (80114d0 <pif_sigTimer1ms+0x170>)
 801137e:	801a      	strh	r2, [r3, #0]
		if (usTimerPerform >= 1000) {
 8011380:	4b53      	ldr	r3, [pc, #332]	; (80114d0 <pif_sigTimer1ms+0x170>)
 8011382:	881b      	ldrh	r3, [r3, #0]
 8011384:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011388:	d305      	bcc.n	8011396 <pif_sigTimer1ms+0x36>
			usTimerPerform = 0;
 801138a:	4b51      	ldr	r3, [pc, #324]	; (80114d0 <pif_sigTimer1ms+0x170>)
 801138c:	2200      	movs	r2, #0
 801138e:	801a      	strh	r2, [r3, #0]
			pif_performance.__state = TRUE;
 8011390:	4b50      	ldr	r3, [pc, #320]	; (80114d4 <pif_sigTimer1ms+0x174>)
 8011392:	2201      	movs	r2, #1
 8011394:	711a      	strb	r2, [r3, #4]
		}
    }
#endif

	pif_cumulative_timer1ms++;
 8011396:	4b50      	ldr	r3, [pc, #320]	; (80114d8 <pif_sigTimer1ms+0x178>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	3301      	adds	r3, #1
 801139c:	4a4e      	ldr	r2, [pc, #312]	; (80114d8 <pif_sigTimer1ms+0x178>)
 801139e:	6013      	str	r3, [r2, #0]
    pif_timer1ms++;
 80113a0:	4b4e      	ldr	r3, [pc, #312]	; (80114dc <pif_sigTimer1ms+0x17c>)
 80113a2:	881b      	ldrh	r3, [r3, #0]
 80113a4:	b29b      	uxth	r3, r3
 80113a6:	3301      	adds	r3, #1
 80113a8:	b29a      	uxth	r2, r3
 80113aa:	4b4c      	ldr	r3, [pc, #304]	; (80114dc <pif_sigTimer1ms+0x17c>)
 80113ac:	801a      	strh	r2, [r3, #0]
    if (pif_timer1ms >= 1000) {
 80113ae:	4b4b      	ldr	r3, [pc, #300]	; (80114dc <pif_sigTimer1ms+0x17c>)
 80113b0:	881b      	ldrh	r3, [r3, #0]
 80113b2:	b29b      	uxth	r3, r3
 80113b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80113b8:	f0c0 8082 	bcc.w	80114c0 <pif_sigTimer1ms+0x160>
        pif_timer1ms = 0;
 80113bc:	4b47      	ldr	r3, [pc, #284]	; (80114dc <pif_sigTimer1ms+0x17c>)
 80113be:	2200      	movs	r2, #0
 80113c0:	801a      	strh	r2, [r3, #0]

        pif_timer1sec++;
 80113c2:	4b47      	ldr	r3, [pc, #284]	; (80114e0 <pif_sigTimer1ms+0x180>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	3301      	adds	r3, #1
 80113c8:	4a45      	ldr	r2, [pc, #276]	; (80114e0 <pif_sigTimer1ms+0x180>)
 80113ca:	6013      	str	r3, [r2, #0]
    	pif_datetime.second++;
 80113cc:	4b45      	ldr	r3, [pc, #276]	; (80114e4 <pif_sigTimer1ms+0x184>)
 80113ce:	795b      	ldrb	r3, [r3, #5]
 80113d0:	b2db      	uxtb	r3, r3
 80113d2:	3301      	adds	r3, #1
 80113d4:	b2da      	uxtb	r2, r3
 80113d6:	4b43      	ldr	r3, [pc, #268]	; (80114e4 <pif_sigTimer1ms+0x184>)
 80113d8:	715a      	strb	r2, [r3, #5]
    	if (pif_datetime.second >= 60) {
 80113da:	4b42      	ldr	r3, [pc, #264]	; (80114e4 <pif_sigTimer1ms+0x184>)
 80113dc:	795b      	ldrb	r3, [r3, #5]
 80113de:	b2db      	uxtb	r3, r3
 80113e0:	2b3b      	cmp	r3, #59	; 0x3b
 80113e2:	d96d      	bls.n	80114c0 <pif_sigTimer1ms+0x160>
#ifdef __PIF_DEBUG__
#ifndef __PIF_NO_LOG__
    		pif_performance.__max_loop_time1us = 0UL;
 80113e4:	4b3b      	ldr	r3, [pc, #236]	; (80114d4 <pif_sigTimer1ms+0x174>)
 80113e6:	2200      	movs	r2, #0
 80113e8:	609a      	str	r2, [r3, #8]
#endif
#endif
    		pif_datetime.second = 0;
 80113ea:	4b3e      	ldr	r3, [pc, #248]	; (80114e4 <pif_sigTimer1ms+0x184>)
 80113ec:	2200      	movs	r2, #0
 80113ee:	715a      	strb	r2, [r3, #5]
    		pif_datetime.minute++;
 80113f0:	4b3c      	ldr	r3, [pc, #240]	; (80114e4 <pif_sigTimer1ms+0x184>)
 80113f2:	791b      	ldrb	r3, [r3, #4]
 80113f4:	b2db      	uxtb	r3, r3
 80113f6:	3301      	adds	r3, #1
 80113f8:	b2da      	uxtb	r2, r3
 80113fa:	4b3a      	ldr	r3, [pc, #232]	; (80114e4 <pif_sigTimer1ms+0x184>)
 80113fc:	711a      	strb	r2, [r3, #4]
    		if (pif_datetime.minute >= 60) {
 80113fe:	4b39      	ldr	r3, [pc, #228]	; (80114e4 <pif_sigTimer1ms+0x184>)
 8011400:	791b      	ldrb	r3, [r3, #4]
 8011402:	b2db      	uxtb	r3, r3
 8011404:	2b3b      	cmp	r3, #59	; 0x3b
 8011406:	d95b      	bls.n	80114c0 <pif_sigTimer1ms+0x160>
    			pif_datetime.minute = 0;
 8011408:	4b36      	ldr	r3, [pc, #216]	; (80114e4 <pif_sigTimer1ms+0x184>)
 801140a:	2200      	movs	r2, #0
 801140c:	711a      	strb	r2, [r3, #4]
    			pif_datetime.hour++;
 801140e:	4b35      	ldr	r3, [pc, #212]	; (80114e4 <pif_sigTimer1ms+0x184>)
 8011410:	78db      	ldrb	r3, [r3, #3]
 8011412:	b2db      	uxtb	r3, r3
 8011414:	3301      	adds	r3, #1
 8011416:	b2da      	uxtb	r2, r3
 8011418:	4b32      	ldr	r3, [pc, #200]	; (80114e4 <pif_sigTimer1ms+0x184>)
 801141a:	70da      	strb	r2, [r3, #3]
    			if (pif_datetime.hour >= 24) {
 801141c:	4b31      	ldr	r3, [pc, #196]	; (80114e4 <pif_sigTimer1ms+0x184>)
 801141e:	78db      	ldrb	r3, [r3, #3]
 8011420:	b2db      	uxtb	r3, r3
 8011422:	2b17      	cmp	r3, #23
 8011424:	d94c      	bls.n	80114c0 <pif_sigTimer1ms+0x160>
    				pif_datetime.hour = 0;
 8011426:	4b2f      	ldr	r3, [pc, #188]	; (80114e4 <pif_sigTimer1ms+0x184>)
 8011428:	2200      	movs	r2, #0
 801142a:	70da      	strb	r2, [r3, #3]
    				pif_datetime.day++;
 801142c:	4b2d      	ldr	r3, [pc, #180]	; (80114e4 <pif_sigTimer1ms+0x184>)
 801142e:	789b      	ldrb	r3, [r3, #2]
 8011430:	b2db      	uxtb	r3, r3
 8011432:	3301      	adds	r3, #1
 8011434:	b2da      	uxtb	r2, r3
 8011436:	4b2b      	ldr	r3, [pc, #172]	; (80114e4 <pif_sigTimer1ms+0x184>)
 8011438:	709a      	strb	r2, [r3, #2]
    				days = kDaysInMonth[pif_datetime.month - 1];
 801143a:	4b2a      	ldr	r3, [pc, #168]	; (80114e4 <pif_sigTimer1ms+0x184>)
 801143c:	785b      	ldrb	r3, [r3, #1]
 801143e:	b2db      	uxtb	r3, r3
 8011440:	3b01      	subs	r3, #1
 8011442:	4a29      	ldr	r2, [pc, #164]	; (80114e8 <pif_sigTimer1ms+0x188>)
 8011444:	5cd3      	ldrb	r3, [r2, r3]
 8011446:	71fb      	strb	r3, [r7, #7]
    				if (pif_datetime.month == 2) {
 8011448:	4b26      	ldr	r3, [pc, #152]	; (80114e4 <pif_sigTimer1ms+0x184>)
 801144a:	785b      	ldrb	r3, [r3, #1]
 801144c:	b2db      	uxtb	r3, r3
 801144e:	2b02      	cmp	r3, #2
 8011450:	d117      	bne.n	8011482 <pif_sigTimer1ms+0x122>
    					year = 2000 + pif_datetime.year;
 8011452:	4b24      	ldr	r3, [pc, #144]	; (80114e4 <pif_sigTimer1ms+0x184>)
 8011454:	781b      	ldrb	r3, [r3, #0]
 8011456:	b2db      	uxtb	r3, r3
 8011458:	b29b      	uxth	r3, r3
 801145a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801145e:	80bb      	strh	r3, [r7, #4]
    					if (year / 4 == 0) {
 8011460:	88bb      	ldrh	r3, [r7, #4]
 8011462:	2b03      	cmp	r3, #3
 8011464:	d80d      	bhi.n	8011482 <pif_sigTimer1ms+0x122>
    						if (year / 100 == 0) {
 8011466:	88bb      	ldrh	r3, [r7, #4]
 8011468:	2b63      	cmp	r3, #99	; 0x63
 801146a:	d807      	bhi.n	801147c <pif_sigTimer1ms+0x11c>
    							if (year / 400 == 0) days++;
 801146c:	88bb      	ldrh	r3, [r7, #4]
 801146e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8011472:	d206      	bcs.n	8011482 <pif_sigTimer1ms+0x122>
 8011474:	79fb      	ldrb	r3, [r7, #7]
 8011476:	3301      	adds	r3, #1
 8011478:	71fb      	strb	r3, [r7, #7]
 801147a:	e002      	b.n	8011482 <pif_sigTimer1ms+0x122>
    						}
    						else days++;
 801147c:	79fb      	ldrb	r3, [r7, #7]
 801147e:	3301      	adds	r3, #1
 8011480:	71fb      	strb	r3, [r7, #7]
    					}
    				}
    				if (pif_datetime.day > days) {
 8011482:	4b18      	ldr	r3, [pc, #96]	; (80114e4 <pif_sigTimer1ms+0x184>)
 8011484:	789b      	ldrb	r3, [r3, #2]
 8011486:	b2db      	uxtb	r3, r3
 8011488:	79fa      	ldrb	r2, [r7, #7]
 801148a:	429a      	cmp	r2, r3
 801148c:	d218      	bcs.n	80114c0 <pif_sigTimer1ms+0x160>
    					pif_datetime.day = 1;
 801148e:	4b15      	ldr	r3, [pc, #84]	; (80114e4 <pif_sigTimer1ms+0x184>)
 8011490:	2201      	movs	r2, #1
 8011492:	709a      	strb	r2, [r3, #2]
    					pif_datetime.month++;
 8011494:	4b13      	ldr	r3, [pc, #76]	; (80114e4 <pif_sigTimer1ms+0x184>)
 8011496:	785b      	ldrb	r3, [r3, #1]
 8011498:	b2db      	uxtb	r3, r3
 801149a:	3301      	adds	r3, #1
 801149c:	b2da      	uxtb	r2, r3
 801149e:	4b11      	ldr	r3, [pc, #68]	; (80114e4 <pif_sigTimer1ms+0x184>)
 80114a0:	705a      	strb	r2, [r3, #1]
    					if (pif_datetime.month > 12) {
 80114a2:	4b10      	ldr	r3, [pc, #64]	; (80114e4 <pif_sigTimer1ms+0x184>)
 80114a4:	785b      	ldrb	r3, [r3, #1]
 80114a6:	b2db      	uxtb	r3, r3
 80114a8:	2b0c      	cmp	r3, #12
 80114aa:	d909      	bls.n	80114c0 <pif_sigTimer1ms+0x160>
    						pif_datetime.month = 1;
 80114ac:	4b0d      	ldr	r3, [pc, #52]	; (80114e4 <pif_sigTimer1ms+0x184>)
 80114ae:	2201      	movs	r2, #1
 80114b0:	705a      	strb	r2, [r3, #1]
    						pif_datetime.year++;
 80114b2:	4b0c      	ldr	r3, [pc, #48]	; (80114e4 <pif_sigTimer1ms+0x184>)
 80114b4:	781b      	ldrb	r3, [r3, #0]
 80114b6:	b2db      	uxtb	r3, r3
 80114b8:	3301      	adds	r3, #1
 80114ba:	b2da      	uxtb	r2, r3
 80114bc:	4b09      	ldr	r3, [pc, #36]	; (80114e4 <pif_sigTimer1ms+0x184>)
 80114be:	701a      	strb	r2, [r3, #0]
    				}
    			}
    		}
    	}
    }
}
 80114c0:	bf00      	nop
 80114c2:	370c      	adds	r7, #12
 80114c4:	46bd      	mov	sp, r7
 80114c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ca:	4770      	bx	lr
 80114cc:	200020f8 	.word	0x200020f8
 80114d0:	200020f4 	.word	0x200020f4
 80114d4:	200020e4 	.word	0x200020e4
 80114d8:	200020e0 	.word	0x200020e0
 80114dc:	200020d2 	.word	0x200020d2
 80114e0:	200020d4 	.word	0x200020d4
 80114e4:	200020d8 	.word	0x200020d8
 80114e8:	080281ac 	.word	0x080281ac

080114ec <pif_Delay1ms>:

void pif_Delay1ms(uint16_t delay)
{
 80114ec:	b480      	push	{r7}
 80114ee:	b085      	sub	sp, #20
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	4603      	mov	r3, r0
 80114f4:	80fb      	strh	r3, [r7, #6]
	uint32_t start;
	uint16_t diff;

	start = pif_cumulative_timer1ms;
 80114f6:	4b0a      	ldr	r3, [pc, #40]	; (8011520 <pif_Delay1ms+0x34>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	60fb      	str	r3, [r7, #12]
	do {
		diff = pif_cumulative_timer1ms - start;
 80114fc:	4b08      	ldr	r3, [pc, #32]	; (8011520 <pif_Delay1ms+0x34>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	b29a      	uxth	r2, r3
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	b29b      	uxth	r3, r3
 8011506:	1ad3      	subs	r3, r2, r3
 8011508:	817b      	strh	r3, [r7, #10]
	} while (diff < delay);
 801150a:	897a      	ldrh	r2, [r7, #10]
 801150c:	88fb      	ldrh	r3, [r7, #6]
 801150e:	429a      	cmp	r2, r3
 8011510:	d3f4      	bcc.n	80114fc <pif_Delay1ms+0x10>
}
 8011512:	bf00      	nop
 8011514:	bf00      	nop
 8011516:	3714      	adds	r7, #20
 8011518:	46bd      	mov	sp, r7
 801151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151e:	4770      	bx	lr
 8011520:	200020e0 	.word	0x200020e0

08011524 <pif_Delay1us>:

void pif_Delay1us(uint16_t delay)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b084      	sub	sp, #16
 8011528:	af00      	add	r7, sp, #0
 801152a:	4603      	mov	r3, r0
 801152c:	80fb      	strh	r3, [r7, #6]
	uint32_t start;
	uint16_t diff;

	start = (*pif_act_timer1us)();
 801152e:	4b0b      	ldr	r3, [pc, #44]	; (801155c <pif_Delay1us+0x38>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	4798      	blx	r3
 8011534:	60f8      	str	r0, [r7, #12]
	do {
		diff = (*pif_act_timer1us)() - start;
 8011536:	4b09      	ldr	r3, [pc, #36]	; (801155c <pif_Delay1us+0x38>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	4798      	blx	r3
 801153c:	4603      	mov	r3, r0
 801153e:	b29a      	uxth	r2, r3
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	b29b      	uxth	r3, r3
 8011544:	1ad3      	subs	r3, r2, r3
 8011546:	817b      	strh	r3, [r7, #10]
	} while (diff < delay);
 8011548:	897a      	ldrh	r2, [r7, #10]
 801154a:	88fb      	ldrh	r3, [r7, #6]
 801154c:	429a      	cmp	r2, r3
 801154e:	d3f2      	bcc.n	8011536 <pif_Delay1us+0x12>
}
 8011550:	bf00      	nop
 8011552:	bf00      	nop
 8011554:	3710      	adds	r7, #16
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}
 801155a:	bf00      	nop
 801155c:	200020f0 	.word	0x200020f0

08011560 <pif_BinToString>:
{
	pif_error = E_SUCCESS;
}

int pif_BinToString(char* p_buffer, uint32_t value, uint16_t str_cnt)
{
 8011560:	b480      	push	{r7}
 8011562:	b089      	sub	sp, #36	; 0x24
 8011564:	af00      	add	r7, sp, #0
 8011566:	60f8      	str	r0, [r7, #12]
 8011568:	60b9      	str	r1, [r7, #8]
 801156a:	4613      	mov	r3, r2
 801156c:	80fb      	strh	r3, [r7, #6]
	int i, idx = 0;
 801156e:	2300      	movs	r3, #0
 8011570:	61bb      	str	r3, [r7, #24]
	BOOL first;
    uint32_t tmp_val;

    if (str_cnt) {
 8011572:	88fb      	ldrh	r3, [r7, #6]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d01b      	beq.n	80115b0 <pif_BinToString+0x50>
    	for (i = str_cnt - 1; i >= 0; i--) {
 8011578:	88fb      	ldrh	r3, [r7, #6]
 801157a:	3b01      	subs	r3, #1
 801157c:	61fb      	str	r3, [r7, #28]
 801157e:	e013      	b.n	80115a8 <pif_BinToString+0x48>
    		p_buffer[idx++] = '0' + ((value >> i) & 1);
 8011580:	68ba      	ldr	r2, [r7, #8]
 8011582:	69fb      	ldr	r3, [r7, #28]
 8011584:	fa22 f303 	lsr.w	r3, r2, r3
 8011588:	b2db      	uxtb	r3, r3
 801158a:	f003 0301 	and.w	r3, r3, #1
 801158e:	b2da      	uxtb	r2, r3
 8011590:	69bb      	ldr	r3, [r7, #24]
 8011592:	1c59      	adds	r1, r3, #1
 8011594:	61b9      	str	r1, [r7, #24]
 8011596:	4619      	mov	r1, r3
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	440b      	add	r3, r1
 801159c:	3230      	adds	r2, #48	; 0x30
 801159e:	b2d2      	uxtb	r2, r2
 80115a0:	701a      	strb	r2, [r3, #0]
    	for (i = str_cnt - 1; i >= 0; i--) {
 80115a2:	69fb      	ldr	r3, [r7, #28]
 80115a4:	3b01      	subs	r3, #1
 80115a6:	61fb      	str	r3, [r7, #28]
 80115a8:	69fb      	ldr	r3, [r7, #28]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	dae8      	bge.n	8011580 <pif_BinToString+0x20>
 80115ae:	e030      	b.n	8011612 <pif_BinToString+0xb2>
    	}
    }
    else if (value > 0) {
 80115b0:	68bb      	ldr	r3, [r7, #8]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d025      	beq.n	8011602 <pif_BinToString+0xa2>
    	first = TRUE;
 80115b6:	2301      	movs	r3, #1
 80115b8:	75fb      	strb	r3, [r7, #23]
    	for (i = 31; i >= 0; i--) {
 80115ba:	231f      	movs	r3, #31
 80115bc:	61fb      	str	r3, [r7, #28]
 80115be:	e01c      	b.n	80115fa <pif_BinToString+0x9a>
    		tmp_val = (value >> i) & 1;
 80115c0:	68ba      	ldr	r2, [r7, #8]
 80115c2:	69fb      	ldr	r3, [r7, #28]
 80115c4:	fa22 f303 	lsr.w	r3, r2, r3
 80115c8:	f003 0301 	and.w	r3, r3, #1
 80115cc:	613b      	str	r3, [r7, #16]
    		if (!first || tmp_val) {
 80115ce:	7dfb      	ldrb	r3, [r7, #23]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d002      	beq.n	80115da <pif_BinToString+0x7a>
 80115d4:	693b      	ldr	r3, [r7, #16]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d00c      	beq.n	80115f4 <pif_BinToString+0x94>
    			p_buffer[idx++] = '0' + tmp_val;
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	b2da      	uxtb	r2, r3
 80115de:	69bb      	ldr	r3, [r7, #24]
 80115e0:	1c59      	adds	r1, r3, #1
 80115e2:	61b9      	str	r1, [r7, #24]
 80115e4:	4619      	mov	r1, r3
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	440b      	add	r3, r1
 80115ea:	3230      	adds	r2, #48	; 0x30
 80115ec:	b2d2      	uxtb	r2, r2
 80115ee:	701a      	strb	r2, [r3, #0]
    			first = FALSE;
 80115f0:	2300      	movs	r3, #0
 80115f2:	75fb      	strb	r3, [r7, #23]
    	for (i = 31; i >= 0; i--) {
 80115f4:	69fb      	ldr	r3, [r7, #28]
 80115f6:	3b01      	subs	r3, #1
 80115f8:	61fb      	str	r3, [r7, #28]
 80115fa:	69fb      	ldr	r3, [r7, #28]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	dadf      	bge.n	80115c0 <pif_BinToString+0x60>
 8011600:	e007      	b.n	8011612 <pif_BinToString+0xb2>
    		}
    	}
    }
    else {
    	p_buffer[idx++] = '0';
 8011602:	69bb      	ldr	r3, [r7, #24]
 8011604:	1c5a      	adds	r2, r3, #1
 8011606:	61ba      	str	r2, [r7, #24]
 8011608:	461a      	mov	r2, r3
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	4413      	add	r3, r2
 801160e:	2230      	movs	r2, #48	; 0x30
 8011610:	701a      	strb	r2, [r3, #0]
    }
    return idx;
 8011612:	69bb      	ldr	r3, [r7, #24]
}
 8011614:	4618      	mov	r0, r3
 8011616:	3724      	adds	r7, #36	; 0x24
 8011618:	46bd      	mov	sp, r7
 801161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161e:	4770      	bx	lr

08011620 <pif_DecToString>:

int pif_DecToString(char* p_buffer, uint32_t value, uint16_t str_cnt)
{
 8011620:	b480      	push	{r7}
 8011622:	b08d      	sub	sp, #52	; 0x34
 8011624:	af00      	add	r7, sp, #0
 8011626:	60f8      	str	r0, [r7, #12]
 8011628:	60b9      	str	r1, [r7, #8]
 801162a:	4613      	mov	r3, r2
 801162c:	80fb      	strh	r3, [r7, #6]
    uint16_t exp_cnt = 0;
 801162e:	2300      	movs	r3, #0
 8011630:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t zero_str_cnt = 0;
 8011632:	2300      	movs	r3, #0
 8011634:	85bb      	strh	r3, [r7, #44]	; 0x2c
    int idx = 0;
 8011636:	2300      	movs	r3, #0
 8011638:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t idx_inv = 0;
 801163a:	2300      	movs	r3, #0
 801163c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t tmp_val;
    char inv_buf[11] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 801163e:	4a43      	ldr	r2, [pc, #268]	; (801174c <pif_DecToString+0x12c>)
 8011640:	f107 0314 	add.w	r3, r7, #20
 8011644:	ca07      	ldmia	r2, {r0, r1, r2}
 8011646:	c303      	stmia	r3!, {r0, r1}
 8011648:	801a      	strh	r2, [r3, #0]
 801164a:	3302      	adds	r3, #2
 801164c:	0c12      	lsrs	r2, r2, #16
 801164e:	701a      	strb	r2, [r3, #0]

    tmp_val = value;
 8011650:	68bb      	ldr	r3, [r7, #8]
 8011652:	623b      	str	r3, [r7, #32]
    if (tmp_val != 0) {
 8011654:	6a3b      	ldr	r3, [r7, #32]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d05e      	beq.n	8011718 <pif_DecToString+0xf8>
        while (tmp_val) {
 801165a:	e02c      	b.n	80116b6 <pif_DecToString+0x96>
        	exp_cnt++;
 801165c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801165e:	3301      	adds	r3, #1
 8011660:	85fb      	strh	r3, [r7, #46]	; 0x2e
            if (tmp_val >= 10) {
 8011662:	6a3b      	ldr	r3, [r7, #32]
 8011664:	2b09      	cmp	r3, #9
 8011666:	d914      	bls.n	8011692 <pif_DecToString+0x72>
                inv_buf[idx_inv++] = (tmp_val % 10) + '0';
 8011668:	6a39      	ldr	r1, [r7, #32]
 801166a:	4b39      	ldr	r3, [pc, #228]	; (8011750 <pif_DecToString+0x130>)
 801166c:	fba3 2301 	umull	r2, r3, r3, r1
 8011670:	08da      	lsrs	r2, r3, #3
 8011672:	4613      	mov	r3, r2
 8011674:	009b      	lsls	r3, r3, #2
 8011676:	4413      	add	r3, r2
 8011678:	005b      	lsls	r3, r3, #1
 801167a:	1aca      	subs	r2, r1, r3
 801167c:	b2d2      	uxtb	r2, r2
 801167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011680:	1c59      	adds	r1, r3, #1
 8011682:	6279      	str	r1, [r7, #36]	; 0x24
 8011684:	3230      	adds	r2, #48	; 0x30
 8011686:	b2d2      	uxtb	r2, r2
 8011688:	3330      	adds	r3, #48	; 0x30
 801168a:	443b      	add	r3, r7
 801168c:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8011690:	e00b      	b.n	80116aa <pif_DecToString+0x8a>
            }
            else {
                inv_buf[idx_inv++] = tmp_val + '0';
 8011692:	6a3b      	ldr	r3, [r7, #32]
 8011694:	b2da      	uxtb	r2, r3
 8011696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011698:	1c59      	adds	r1, r3, #1
 801169a:	6279      	str	r1, [r7, #36]	; 0x24
 801169c:	3230      	adds	r2, #48	; 0x30
 801169e:	b2d2      	uxtb	r2, r2
 80116a0:	3330      	adds	r3, #48	; 0x30
 80116a2:	443b      	add	r3, r7
 80116a4:	f803 2c1c 	strb.w	r2, [r3, #-28]
                break;
 80116a8:	e008      	b.n	80116bc <pif_DecToString+0x9c>
            }
            tmp_val = tmp_val / 10;
 80116aa:	6a3b      	ldr	r3, [r7, #32]
 80116ac:	4a28      	ldr	r2, [pc, #160]	; (8011750 <pif_DecToString+0x130>)
 80116ae:	fba2 2303 	umull	r2, r3, r2, r3
 80116b2:	08db      	lsrs	r3, r3, #3
 80116b4:	623b      	str	r3, [r7, #32]
        while (tmp_val) {
 80116b6:	6a3b      	ldr	r3, [r7, #32]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d1cf      	bne.n	801165c <pif_DecToString+0x3c>
        }

        if ((str_cnt != 0) && (exp_cnt < str_cnt)) {
 80116bc:	88fb      	ldrh	r3, [r7, #6]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d026      	beq.n	8011710 <pif_DecToString+0xf0>
 80116c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80116c4:	88fb      	ldrh	r3, [r7, #6]
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d222      	bcs.n	8011710 <pif_DecToString+0xf0>
            zero_str_cnt = str_cnt - exp_cnt;
 80116ca:	88fa      	ldrh	r2, [r7, #6]
 80116cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80116ce:	1ad3      	subs	r3, r2, r3
 80116d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
            while (zero_str_cnt) {
 80116d2:	e00a      	b.n	80116ea <pif_DecToString+0xca>
            	p_buffer[idx++] = '0';
 80116d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116d6:	1c5a      	adds	r2, r3, #1
 80116d8:	62ba      	str	r2, [r7, #40]	; 0x28
 80116da:	461a      	mov	r2, r3
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	4413      	add	r3, r2
 80116e0:	2230      	movs	r2, #48	; 0x30
 80116e2:	701a      	strb	r2, [r3, #0]
                zero_str_cnt--;
 80116e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80116e6:	3b01      	subs	r3, #1
 80116e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
            while (zero_str_cnt) {
 80116ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d1f1      	bne.n	80116d4 <pif_DecToString+0xb4>
            }
        }
        while (idx_inv) {
 80116f0:	e00e      	b.n	8011710 <pif_DecToString+0xf0>
            idx_inv--;
 80116f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f4:	3b01      	subs	r3, #1
 80116f6:	627b      	str	r3, [r7, #36]	; 0x24
            p_buffer[idx++] = inv_buf[idx_inv];
 80116f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116fa:	1c5a      	adds	r2, r3, #1
 80116fc:	62ba      	str	r2, [r7, #40]	; 0x28
 80116fe:	461a      	mov	r2, r3
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	4413      	add	r3, r2
 8011704:	f107 0114 	add.w	r1, r7, #20
 8011708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801170a:	440a      	add	r2, r1
 801170c:	7812      	ldrb	r2, [r2, #0]
 801170e:	701a      	strb	r2, [r3, #0]
        while (idx_inv) {
 8011710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011712:	2b00      	cmp	r3, #0
 8011714:	d1ed      	bne.n	80116f2 <pif_DecToString+0xd2>
 8011716:	e012      	b.n	801173e <pif_DecToString+0x11e>
        }
    }
    else {
        zero_str_cnt = str_cnt;
 8011718:	88fb      	ldrh	r3, [r7, #6]
 801171a:	85bb      	strh	r3, [r7, #44]	; 0x2c
        do {
        	p_buffer[idx++] = '0';
 801171c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801171e:	1c5a      	adds	r2, r3, #1
 8011720:	62ba      	str	r2, [r7, #40]	; 0x28
 8011722:	461a      	mov	r2, r3
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	4413      	add	r3, r2
 8011728:	2230      	movs	r2, #48	; 0x30
 801172a:	701a      	strb	r2, [r3, #0]
            if (zero_str_cnt > 0) zero_str_cnt--;
 801172c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801172e:	2b00      	cmp	r3, #0
 8011730:	d002      	beq.n	8011738 <pif_DecToString+0x118>
 8011732:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011734:	3b01      	subs	r3, #1
 8011736:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
        while (zero_str_cnt);
 8011738:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801173a:	2b00      	cmp	r3, #0
 801173c:	d1ee      	bne.n	801171c <pif_DecToString+0xfc>
    }
    return idx;
 801173e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8011740:	4618      	mov	r0, r3
 8011742:	3734      	adds	r7, #52	; 0x34
 8011744:	46bd      	mov	sp, r7
 8011746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174a:	4770      	bx	lr
 801174c:	08026528 	.word	0x08026528
 8011750:	cccccccd 	.word	0xcccccccd

08011754 <pif_HexToString>:

int pif_HexToString(char* p_buffer, uint32_t value, uint16_t str_cnt, BOOL upper)
{
 8011754:	b480      	push	{r7}
 8011756:	b08b      	sub	sp, #44	; 0x2c
 8011758:	af00      	add	r7, sp, #0
 801175a:	60f8      	str	r0, [r7, #12]
 801175c:	60b9      	str	r1, [r7, #8]
 801175e:	4611      	mov	r1, r2
 8011760:	461a      	mov	r2, r3
 8011762:	460b      	mov	r3, r1
 8011764:	80fb      	strh	r3, [r7, #6]
 8011766:	4613      	mov	r3, r2
 8011768:	717b      	strb	r3, [r7, #5]
	int i, idx = 0;
 801176a:	2300      	movs	r3, #0
 801176c:	623b      	str	r3, [r7, #32]
	BOOL first;
    uint32_t tmp_val;
    const char* kHexChar = upper ? kPifHexUpperChar : kPifHexLowerChar;
 801176e:	797b      	ldrb	r3, [r7, #5]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d002      	beq.n	801177a <pif_HexToString+0x26>
 8011774:	4b2f      	ldr	r3, [pc, #188]	; (8011834 <pif_HexToString+0xe0>)
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	e001      	b.n	801177e <pif_HexToString+0x2a>
 801177a:	4b2f      	ldr	r3, [pc, #188]	; (8011838 <pif_HexToString+0xe4>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	61bb      	str	r3, [r7, #24]

    if (str_cnt) {
 8011780:	88fb      	ldrh	r3, [r7, #6]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d01d      	beq.n	80117c2 <pif_HexToString+0x6e>
    	for (i = (str_cnt - 1) * 4; i >= 0; i -= 4) {
 8011786:	88fb      	ldrh	r3, [r7, #6]
 8011788:	3b01      	subs	r3, #1
 801178a:	009b      	lsls	r3, r3, #2
 801178c:	627b      	str	r3, [r7, #36]	; 0x24
 801178e:	e014      	b.n	80117ba <pif_HexToString+0x66>
    		tmp_val = (value >> i) & 0x0F;
 8011790:	68ba      	ldr	r2, [r7, #8]
 8011792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011794:	fa22 f303 	lsr.w	r3, r2, r3
 8011798:	f003 030f 	and.w	r3, r3, #15
 801179c:	617b      	str	r3, [r7, #20]
    		p_buffer[idx++] = kHexChar[tmp_val];
 801179e:	69ba      	ldr	r2, [r7, #24]
 80117a0:	697b      	ldr	r3, [r7, #20]
 80117a2:	441a      	add	r2, r3
 80117a4:	6a3b      	ldr	r3, [r7, #32]
 80117a6:	1c59      	adds	r1, r3, #1
 80117a8:	6239      	str	r1, [r7, #32]
 80117aa:	4619      	mov	r1, r3
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	440b      	add	r3, r1
 80117b0:	7812      	ldrb	r2, [r2, #0]
 80117b2:	701a      	strb	r2, [r3, #0]
    	for (i = (str_cnt - 1) * 4; i >= 0; i -= 4) {
 80117b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117b6:	3b04      	subs	r3, #4
 80117b8:	627b      	str	r3, [r7, #36]	; 0x24
 80117ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117bc:	2b00      	cmp	r3, #0
 80117be:	dae7      	bge.n	8011790 <pif_HexToString+0x3c>
 80117c0:	e030      	b.n	8011824 <pif_HexToString+0xd0>
    	}
    }
    else if (value > 0) {
 80117c2:	68bb      	ldr	r3, [r7, #8]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d025      	beq.n	8011814 <pif_HexToString+0xc0>
    	first = TRUE;
 80117c8:	2301      	movs	r3, #1
 80117ca:	77fb      	strb	r3, [r7, #31]
    	for (i = 28; i >= 0; i -= 4) {
 80117cc:	231c      	movs	r3, #28
 80117ce:	627b      	str	r3, [r7, #36]	; 0x24
 80117d0:	e01c      	b.n	801180c <pif_HexToString+0xb8>
    		tmp_val = (value >> i) & 0x0F;
 80117d2:	68ba      	ldr	r2, [r7, #8]
 80117d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d6:	fa22 f303 	lsr.w	r3, r2, r3
 80117da:	f003 030f 	and.w	r3, r3, #15
 80117de:	617b      	str	r3, [r7, #20]
    		if (!first || tmp_val) {
 80117e0:	7ffb      	ldrb	r3, [r7, #31]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d002      	beq.n	80117ec <pif_HexToString+0x98>
 80117e6:	697b      	ldr	r3, [r7, #20]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d00c      	beq.n	8011806 <pif_HexToString+0xb2>
    			p_buffer[idx++] = kHexChar[tmp_val];
 80117ec:	69ba      	ldr	r2, [r7, #24]
 80117ee:	697b      	ldr	r3, [r7, #20]
 80117f0:	441a      	add	r2, r3
 80117f2:	6a3b      	ldr	r3, [r7, #32]
 80117f4:	1c59      	adds	r1, r3, #1
 80117f6:	6239      	str	r1, [r7, #32]
 80117f8:	4619      	mov	r1, r3
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	440b      	add	r3, r1
 80117fe:	7812      	ldrb	r2, [r2, #0]
 8011800:	701a      	strb	r2, [r3, #0]
    			first = FALSE;
 8011802:	2300      	movs	r3, #0
 8011804:	77fb      	strb	r3, [r7, #31]
    	for (i = 28; i >= 0; i -= 4) {
 8011806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011808:	3b04      	subs	r3, #4
 801180a:	627b      	str	r3, [r7, #36]	; 0x24
 801180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801180e:	2b00      	cmp	r3, #0
 8011810:	dadf      	bge.n	80117d2 <pif_HexToString+0x7e>
 8011812:	e007      	b.n	8011824 <pif_HexToString+0xd0>
    		}
    	}
    }
    else {
    	p_buffer[idx++] = '0';
 8011814:	6a3b      	ldr	r3, [r7, #32]
 8011816:	1c5a      	adds	r2, r3, #1
 8011818:	623a      	str	r2, [r7, #32]
 801181a:	461a      	mov	r2, r3
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	4413      	add	r3, r2
 8011820:	2230      	movs	r2, #48	; 0x30
 8011822:	701a      	strb	r2, [r3, #0]
    }
    return idx;
 8011824:	6a3b      	ldr	r3, [r7, #32]
}
 8011826:	4618      	mov	r0, r3
 8011828:	372c      	adds	r7, #44	; 0x2c
 801182a:	46bd      	mov	sp, r7
 801182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011830:	4770      	bx	lr
 8011832:	bf00      	nop
 8011834:	20000060 	.word	0x20000060
 8011838:	20000064 	.word	0x20000064

0801183c <pif_FloatToString>:

int pif_FloatToString(char* p_buffer, double value, uint16_t point)
{
 801183c:	b5b0      	push	{r4, r5, r7, lr}
 801183e:	b086      	sub	sp, #24
 8011840:	af00      	add	r7, sp, #0
 8011842:	60f8      	str	r0, [r7, #12]
 8011844:	ed87 0b00 	vstr	d0, [r7]
 8011848:	460b      	mov	r3, r1
 801184a:	817b      	strh	r3, [r7, #10]
	uint16_t i, idx = 0;
 801184c:	2300      	movs	r3, #0
 801184e:	82bb      	strh	r3, [r7, #20]
	uint32_t num;

	if (value < 0.0) {
 8011850:	f04f 0200 	mov.w	r2, #0
 8011854:	f04f 0300 	mov.w	r3, #0
 8011858:	e9d7 0100 	ldrd	r0, r1, [r7]
 801185c:	f7ef f8fc 	bl	8000a58 <__aeabi_dcmplt>
 8011860:	4603      	mov	r3, r0
 8011862:	2b00      	cmp	r3, #0
 8011864:	d00d      	beq.n	8011882 <pif_FloatToString+0x46>
		p_buffer[idx++] = '-';
 8011866:	8abb      	ldrh	r3, [r7, #20]
 8011868:	1c5a      	adds	r2, r3, #1
 801186a:	82ba      	strh	r2, [r7, #20]
 801186c:	461a      	mov	r2, r3
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	4413      	add	r3, r2
 8011872:	222d      	movs	r2, #45	; 0x2d
 8011874:	701a      	strb	r2, [r3, #0]
		value *= -1.0;
 8011876:	683c      	ldr	r4, [r7, #0]
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 801187e:	e9c7 4500 	strd	r4, r5, [r7]
	}

	num = (uint32_t)value;
 8011882:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011886:	f7ef f937 	bl	8000af8 <__aeabi_d2uiz>
 801188a:	4603      	mov	r3, r0
 801188c:	613b      	str	r3, [r7, #16]
	idx += pif_DecToString(p_buffer + idx, num, 0);
 801188e:	8abb      	ldrh	r3, [r7, #20]
 8011890:	68fa      	ldr	r2, [r7, #12]
 8011892:	4413      	add	r3, r2
 8011894:	2200      	movs	r2, #0
 8011896:	6939      	ldr	r1, [r7, #16]
 8011898:	4618      	mov	r0, r3
 801189a:	f7ff fec1 	bl	8011620 <pif_DecToString>
 801189e:	4603      	mov	r3, r0
 80118a0:	b29a      	uxth	r2, r3
 80118a2:	8abb      	ldrh	r3, [r7, #20]
 80118a4:	4413      	add	r3, r2
 80118a6:	82bb      	strh	r3, [r7, #20]
	p_buffer[idx++] = '.';
 80118a8:	8abb      	ldrh	r3, [r7, #20]
 80118aa:	1c5a      	adds	r2, r3, #1
 80118ac:	82ba      	strh	r2, [r7, #20]
 80118ae:	461a      	mov	r2, r3
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	4413      	add	r3, r2
 80118b4:	222e      	movs	r2, #46	; 0x2e
 80118b6:	701a      	strb	r2, [r3, #0]

	if (point == 0) point = 6;
 80118b8:	897b      	ldrh	r3, [r7, #10]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d101      	bne.n	80118c2 <pif_FloatToString+0x86>
 80118be:	2306      	movs	r3, #6
 80118c0:	817b      	strh	r3, [r7, #10]
	value -= num;
 80118c2:	6938      	ldr	r0, [r7, #16]
 80118c4:	f7ee fddc 	bl	8000480 <__aeabi_ui2d>
 80118c8:	4602      	mov	r2, r0
 80118ca:	460b      	mov	r3, r1
 80118cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80118d0:	f7ee fc98 	bl	8000204 <__aeabi_dsub>
 80118d4:	4602      	mov	r2, r0
 80118d6:	460b      	mov	r3, r1
 80118d8:	e9c7 2300 	strd	r2, r3, [r7]
	for (i = 0; i < point; i++) value *= 10;
 80118dc:	2300      	movs	r3, #0
 80118de:	82fb      	strh	r3, [r7, #22]
 80118e0:	e00d      	b.n	80118fe <pif_FloatToString+0xc2>
 80118e2:	f04f 0200 	mov.w	r2, #0
 80118e6:	4b13      	ldr	r3, [pc, #76]	; (8011934 <pif_FloatToString+0xf8>)
 80118e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80118ec:	f7ee fe42 	bl	8000574 <__aeabi_dmul>
 80118f0:	4602      	mov	r2, r0
 80118f2:	460b      	mov	r3, r1
 80118f4:	e9c7 2300 	strd	r2, r3, [r7]
 80118f8:	8afb      	ldrh	r3, [r7, #22]
 80118fa:	3301      	adds	r3, #1
 80118fc:	82fb      	strh	r3, [r7, #22]
 80118fe:	8afa      	ldrh	r2, [r7, #22]
 8011900:	897b      	ldrh	r3, [r7, #10]
 8011902:	429a      	cmp	r2, r3
 8011904:	d3ed      	bcc.n	80118e2 <pif_FloatToString+0xa6>

	idx += pif_DecToString(p_buffer + idx, (uint32_t)value, point);
 8011906:	8abb      	ldrh	r3, [r7, #20]
 8011908:	68fa      	ldr	r2, [r7, #12]
 801190a:	18d4      	adds	r4, r2, r3
 801190c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011910:	f7ef f8f2 	bl	8000af8 <__aeabi_d2uiz>
 8011914:	4601      	mov	r1, r0
 8011916:	897b      	ldrh	r3, [r7, #10]
 8011918:	461a      	mov	r2, r3
 801191a:	4620      	mov	r0, r4
 801191c:	f7ff fe80 	bl	8011620 <pif_DecToString>
 8011920:	4603      	mov	r3, r0
 8011922:	b29a      	uxth	r2, r3
 8011924:	8abb      	ldrh	r3, [r7, #20]
 8011926:	4413      	add	r3, r2
 8011928:	82bb      	strh	r3, [r7, #20]
    return idx;
 801192a:	8abb      	ldrh	r3, [r7, #20]
}
 801192c:	4618      	mov	r0, r3
 801192e:	3718      	adds	r7, #24
 8011930:	46bd      	mov	sp, r7
 8011932:	bdb0      	pop	{r4, r5, r7, pc}
 8011934:	40240000 	.word	0x40240000

08011938 <pif_PrintFormat>:

void pif_PrintFormat(char* p_buffer, va_list* p_data, const char* p_format)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b08c      	sub	sp, #48	; 0x30
 801193c:	af00      	add	r7, sp, #0
 801193e:	60f8      	str	r0, [r7, #12]
 8011940:	60b9      	str	r1, [r7, #8]
 8011942:	607a      	str	r2, [r7, #4]
	unsigned long ulong_val;
	long long_val;
	uint16_t num_str_cnt;
	BOOL is_long;
	char *p_var_str;
	int offset = 0;
 8011944:	2300      	movs	r3, #0
 8011946:	623b      	str	r3, [r7, #32]
	size_t size;

	while (*p_format) {
 8011948:	e242      	b.n	8011dd0 <pif_PrintFormat+0x498>
        if (*p_format == '%') {
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	2b25      	cmp	r3, #37	; 0x25
 8011950:	f040 8230 	bne.w	8011db4 <pif_PrintFormat+0x47c>
            num_str_cnt = 0;
 8011954:	2300      	movs	r3, #0
 8011956:	84fb      	strh	r3, [r7, #38]	; 0x26
        	is_long = FALSE;
 8011958:	2300      	movs	r3, #0
 801195a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
NEXT_STR:
			p_format = p_format + 1;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	3301      	adds	r3, #1
 8011962:	607b      	str	r3, [r7, #4]
            switch(*p_format) {
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	781b      	ldrb	r3, [r3, #0]
 8011968:	3b25      	subs	r3, #37	; 0x25
 801196a:	2b53      	cmp	r3, #83	; 0x53
 801196c:	f200 822d 	bhi.w	8011dca <pif_PrintFormat+0x492>
 8011970:	a201      	add	r2, pc, #4	; (adr r2, 8011978 <pif_PrintFormat+0x40>)
 8011972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011976:	bf00      	nop
 8011978:	08011da3 	.word	0x08011da3
 801197c:	08011dcb 	.word	0x08011dcb
 8011980:	08011dcb 	.word	0x08011dcb
 8011984:	08011dcb 	.word	0x08011dcb
 8011988:	08011dcb 	.word	0x08011dcb
 801198c:	08011dcb 	.word	0x08011dcb
 8011990:	08011dcb 	.word	0x08011dcb
 8011994:	08011dcb 	.word	0x08011dcb
 8011998:	08011dcb 	.word	0x08011dcb
 801199c:	08011dcb 	.word	0x08011dcb
 80119a0:	08011dcb 	.word	0x08011dcb
 80119a4:	08011ac9 	.word	0x08011ac9
 80119a8:	08011ac9 	.word	0x08011ac9
 80119ac:	08011ac9 	.word	0x08011ac9
 80119b0:	08011ac9 	.word	0x08011ac9
 80119b4:	08011ac9 	.word	0x08011ac9
 80119b8:	08011ac9 	.word	0x08011ac9
 80119bc:	08011ac9 	.word	0x08011ac9
 80119c0:	08011ac9 	.word	0x08011ac9
 80119c4:	08011ac9 	.word	0x08011ac9
 80119c8:	08011ac9 	.word	0x08011ac9
 80119cc:	08011dcb 	.word	0x08011dcb
 80119d0:	08011dcb 	.word	0x08011dcb
 80119d4:	08011dcb 	.word	0x08011dcb
 80119d8:	08011dcb 	.word	0x08011dcb
 80119dc:	08011dcb 	.word	0x08011dcb
 80119e0:	08011dcb 	.word	0x08011dcb
 80119e4:	08011dcb 	.word	0x08011dcb
 80119e8:	08011dcb 	.word	0x08011dcb
 80119ec:	08011dcb 	.word	0x08011dcb
 80119f0:	08011dcb 	.word	0x08011dcb
 80119f4:	08011dcb 	.word	0x08011dcb
 80119f8:	08011dcb 	.word	0x08011dcb
 80119fc:	08011dcb 	.word	0x08011dcb
 8011a00:	08011dcb 	.word	0x08011dcb
 8011a04:	08011dcb 	.word	0x08011dcb
 8011a08:	08011dcb 	.word	0x08011dcb
 8011a0c:	08011dcb 	.word	0x08011dcb
 8011a10:	08011dcb 	.word	0x08011dcb
 8011a14:	08011dcb 	.word	0x08011dcb
 8011a18:	08011dcb 	.word	0x08011dcb
 8011a1c:	08011dcb 	.word	0x08011dcb
 8011a20:	08011dcb 	.word	0x08011dcb
 8011a24:	08011dcb 	.word	0x08011dcb
 8011a28:	08011dcb 	.word	0x08011dcb
 8011a2c:	08011dcb 	.word	0x08011dcb
 8011a30:	08011dcb 	.word	0x08011dcb
 8011a34:	08011dcb 	.word	0x08011dcb
 8011a38:	08011dcb 	.word	0x08011dcb
 8011a3c:	08011dcb 	.word	0x08011dcb
 8011a40:	08011dcb 	.word	0x08011dcb
 8011a44:	08011c9f 	.word	0x08011c9f
 8011a48:	08011dcb 	.word	0x08011dcb
 8011a4c:	08011dcb 	.word	0x08011dcb
 8011a50:	08011dcb 	.word	0x08011dcb
 8011a54:	08011dcb 	.word	0x08011dcb
 8011a58:	08011dcb 	.word	0x08011dcb
 8011a5c:	08011dcb 	.word	0x08011dcb
 8011a60:	08011dcb 	.word	0x08011dcb
 8011a64:	08011dcb 	.word	0x08011dcb
 8011a68:	08011dcb 	.word	0x08011dcb
 8011a6c:	08011aef 	.word	0x08011aef
 8011a70:	08011d85 	.word	0x08011d85
 8011a74:	08011b47 	.word	0x08011b47
 8011a78:	08011dcb 	.word	0x08011dcb
 8011a7c:	08011cf7 	.word	0x08011cf7
 8011a80:	08011dcb 	.word	0x08011dcb
 8011a84:	08011dcb 	.word	0x08011dcb
 8011a88:	08011b47 	.word	0x08011b47
 8011a8c:	08011dcb 	.word	0x08011dcb
 8011a90:	08011dcb 	.word	0x08011dcb
 8011a94:	08011ae7 	.word	0x08011ae7
 8011a98:	08011dcb 	.word	0x08011dcb
 8011a9c:	08011dcb 	.word	0x08011dcb
 8011aa0:	08011dcb 	.word	0x08011dcb
 8011aa4:	08011dcb 	.word	0x08011dcb
 8011aa8:	08011dcb 	.word	0x08011dcb
 8011aac:	08011dcb 	.word	0x08011dcb
 8011ab0:	08011d2d 	.word	0x08011d2d
 8011ab4:	08011dcb 	.word	0x08011dcb
 8011ab8:	08011bef 	.word	0x08011bef
 8011abc:	08011dcb 	.word	0x08011dcb
 8011ac0:	08011dcb 	.word	0x08011dcb
 8011ac4:	08011c47 	.word	0x08011c47
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                    num_str_cnt *= 10;
 8011ac8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011aca:	461a      	mov	r2, r3
 8011acc:	0092      	lsls	r2, r2, #2
 8011ace:	4413      	add	r3, r2
 8011ad0:	005b      	lsls	r3, r3, #1
 8011ad2:	84fb      	strh	r3, [r7, #38]	; 0x26
                    num_str_cnt += *p_format - '0';
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	781b      	ldrb	r3, [r3, #0]
 8011ad8:	b29a      	uxth	r2, r3
 8011ada:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011adc:	4413      	add	r3, r2
 8011ade:	b29b      	uxth	r3, r3
 8011ae0:	3b30      	subs	r3, #48	; 0x30
 8011ae2:	84fb      	strh	r3, [r7, #38]	; 0x26
                    goto NEXT_STR;
 8011ae4:	e73b      	b.n	801195e <pif_PrintFormat+0x26>

                case 'l':
					is_long = TRUE;
 8011ae6:	2301      	movs	r3, #1
 8011ae8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					goto NEXT_STR;
 8011aec:	e737      	b.n	801195e <pif_PrintFormat+0x26>

                case 'b':
                	if (is_long) {
 8011aee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d013      	beq.n	8011b1e <pif_PrintFormat+0x1e6>
                		ulong_val = va_arg(*p_data, unsigned long);
 8011af6:	68bb      	ldr	r3, [r7, #8]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	1d19      	adds	r1, r3, #4
 8011afc:	68ba      	ldr	r2, [r7, #8]
 8011afe:	6011      	str	r1, [r2, #0]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	617b      	str	r3, [r7, #20]
						offset += pif_BinToString(p_buffer + offset, ulong_val, num_str_cnt);
 8011b04:	6a3b      	ldr	r3, [r7, #32]
 8011b06:	68fa      	ldr	r2, [r7, #12]
 8011b08:	4413      	add	r3, r2
 8011b0a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011b0c:	6979      	ldr	r1, [r7, #20]
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f7ff fd26 	bl	8011560 <pif_BinToString>
 8011b14:	4602      	mov	r2, r0
 8011b16:	6a3b      	ldr	r3, [r7, #32]
 8011b18:	4413      	add	r3, r2
 8011b1a:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_BinToString(p_buffer + offset, uint_val, num_str_cnt);
                	}
                    break;
 8011b1c:	e155      	b.n	8011dca <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 8011b1e:	68bb      	ldr	r3, [r7, #8]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	1d19      	adds	r1, r3, #4
 8011b24:	68ba      	ldr	r2, [r7, #8]
 8011b26:	6011      	str	r1, [r2, #0]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	61bb      	str	r3, [r7, #24]
						offset += pif_BinToString(p_buffer + offset, uint_val, num_str_cnt);
 8011b2c:	6a3b      	ldr	r3, [r7, #32]
 8011b2e:	68fa      	ldr	r2, [r7, #12]
 8011b30:	4413      	add	r3, r2
 8011b32:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011b34:	69b9      	ldr	r1, [r7, #24]
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7ff fd12 	bl	8011560 <pif_BinToString>
 8011b3c:	4602      	mov	r2, r0
 8011b3e:	6a3b      	ldr	r3, [r7, #32]
 8011b40:	4413      	add	r3, r2
 8011b42:	623b      	str	r3, [r7, #32]
                    break;
 8011b44:	e141      	b.n	8011dca <pif_PrintFormat+0x492>

                case 'd':
                case 'i':
                	if (is_long) {
 8011b46:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d027      	beq.n	8011b9e <pif_PrintFormat+0x266>
            			long_val = va_arg(*p_data, long);
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	1d19      	adds	r1, r3, #4
 8011b54:	68ba      	ldr	r2, [r7, #8]
 8011b56:	6011      	str	r1, [r2, #0]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	62bb      	str	r3, [r7, #40]	; 0x28
            			if (long_val < 0) {
 8011b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	da10      	bge.n	8011b84 <pif_PrintFormat+0x24c>
            				p_buffer[offset++] = '-';
 8011b62:	6a3b      	ldr	r3, [r7, #32]
 8011b64:	1c5a      	adds	r2, r3, #1
 8011b66:	623a      	str	r2, [r7, #32]
 8011b68:	461a      	mov	r2, r3
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	4413      	add	r3, r2
 8011b6e:	222d      	movs	r2, #45	; 0x2d
 8011b70:	701a      	strb	r2, [r3, #0]
            				long_val *= -1;
 8011b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b74:	425b      	negs	r3, r3
 8011b76:	62bb      	str	r3, [r7, #40]	; 0x28
            				if (num_str_cnt) num_str_cnt--;
 8011b78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d002      	beq.n	8011b84 <pif_PrintFormat+0x24c>
 8011b7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011b80:	3b01      	subs	r3, #1
 8011b82:	84fb      	strh	r3, [r7, #38]	; 0x26
            			}
            			offset += pif_DecToString(p_buffer + offset, long_val, num_str_cnt);
 8011b84:	6a3b      	ldr	r3, [r7, #32]
 8011b86:	68fa      	ldr	r2, [r7, #12]
 8011b88:	4413      	add	r3, r2
 8011b8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011b8c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f7ff fd46 	bl	8011620 <pif_DecToString>
 8011b94:	4602      	mov	r2, r0
 8011b96:	6a3b      	ldr	r3, [r7, #32]
 8011b98:	4413      	add	r3, r2
 8011b9a:	623b      	str	r3, [r7, #32]
                			int_val *= -1;
                			if (num_str_cnt) num_str_cnt--;
            			}
            			offset += pif_DecToString(p_buffer + offset, int_val, num_str_cnt);
                	}
                    break;
 8011b9c:	e115      	b.n	8011dca <pif_PrintFormat+0x492>
            			int_val = va_arg(*p_data, int);
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	1d19      	adds	r1, r3, #4
 8011ba4:	68ba      	ldr	r2, [r7, #8]
 8011ba6:	6011      	str	r1, [r2, #0]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	62fb      	str	r3, [r7, #44]	; 0x2c
            			if (int_val < 0) {
 8011bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	da10      	bge.n	8011bd4 <pif_PrintFormat+0x29c>
            				p_buffer[offset++] = '-';
 8011bb2:	6a3b      	ldr	r3, [r7, #32]
 8011bb4:	1c5a      	adds	r2, r3, #1
 8011bb6:	623a      	str	r2, [r7, #32]
 8011bb8:	461a      	mov	r2, r3
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	4413      	add	r3, r2
 8011bbe:	222d      	movs	r2, #45	; 0x2d
 8011bc0:	701a      	strb	r2, [r3, #0]
                			int_val *= -1;
 8011bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc4:	425b      	negs	r3, r3
 8011bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
                			if (num_str_cnt) num_str_cnt--;
 8011bc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d002      	beq.n	8011bd4 <pif_PrintFormat+0x29c>
 8011bce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011bd0:	3b01      	subs	r3, #1
 8011bd2:	84fb      	strh	r3, [r7, #38]	; 0x26
            			offset += pif_DecToString(p_buffer + offset, int_val, num_str_cnt);
 8011bd4:	6a3b      	ldr	r3, [r7, #32]
 8011bd6:	68fa      	ldr	r2, [r7, #12]
 8011bd8:	4413      	add	r3, r2
 8011bda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011bdc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011bde:	4618      	mov	r0, r3
 8011be0:	f7ff fd1e 	bl	8011620 <pif_DecToString>
 8011be4:	4602      	mov	r2, r0
 8011be6:	6a3b      	ldr	r3, [r7, #32]
 8011be8:	4413      	add	r3, r2
 8011bea:	623b      	str	r3, [r7, #32]
                    break;
 8011bec:	e0ed      	b.n	8011dca <pif_PrintFormat+0x492>

                case 'u':
                	if (is_long) {
 8011bee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d013      	beq.n	8011c1e <pif_PrintFormat+0x2e6>
						ulong_val = va_arg(*p_data, unsigned long);
 8011bf6:	68bb      	ldr	r3, [r7, #8]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	1d19      	adds	r1, r3, #4
 8011bfc:	68ba      	ldr	r2, [r7, #8]
 8011bfe:	6011      	str	r1, [r2, #0]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	617b      	str	r3, [r7, #20]
						offset += pif_DecToString(p_buffer + offset, ulong_val, num_str_cnt);
 8011c04:	6a3b      	ldr	r3, [r7, #32]
 8011c06:	68fa      	ldr	r2, [r7, #12]
 8011c08:	4413      	add	r3, r2
 8011c0a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011c0c:	6979      	ldr	r1, [r7, #20]
 8011c0e:	4618      	mov	r0, r3
 8011c10:	f7ff fd06 	bl	8011620 <pif_DecToString>
 8011c14:	4602      	mov	r2, r0
 8011c16:	6a3b      	ldr	r3, [r7, #32]
 8011c18:	4413      	add	r3, r2
 8011c1a:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_DecToString(p_buffer + offset, uint_val, num_str_cnt);
                	}
                    break;
 8011c1c:	e0d5      	b.n	8011dca <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	1d19      	adds	r1, r3, #4
 8011c24:	68ba      	ldr	r2, [r7, #8]
 8011c26:	6011      	str	r1, [r2, #0]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	61bb      	str	r3, [r7, #24]
						offset += pif_DecToString(p_buffer + offset, uint_val, num_str_cnt);
 8011c2c:	6a3b      	ldr	r3, [r7, #32]
 8011c2e:	68fa      	ldr	r2, [r7, #12]
 8011c30:	4413      	add	r3, r2
 8011c32:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011c34:	69b9      	ldr	r1, [r7, #24]
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7ff fcf2 	bl	8011620 <pif_DecToString>
 8011c3c:	4602      	mov	r2, r0
 8011c3e:	6a3b      	ldr	r3, [r7, #32]
 8011c40:	4413      	add	r3, r2
 8011c42:	623b      	str	r3, [r7, #32]
                    break;
 8011c44:	e0c1      	b.n	8011dca <pif_PrintFormat+0x492>

                case 'x':
                	if (is_long) {
 8011c46:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d013      	beq.n	8011c76 <pif_PrintFormat+0x33e>
                		ulong_val = va_arg(*p_data, unsigned long);
 8011c4e:	68bb      	ldr	r3, [r7, #8]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	1d19      	adds	r1, r3, #4
 8011c54:	68ba      	ldr	r2, [r7, #8]
 8011c56:	6011      	str	r1, [r2, #0]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	617b      	str	r3, [r7, #20]
						offset += pif_HexToString(p_buffer + offset, ulong_val, num_str_cnt, FALSE);
 8011c5c:	6a3b      	ldr	r3, [r7, #32]
 8011c5e:	68fa      	ldr	r2, [r7, #12]
 8011c60:	18d0      	adds	r0, r2, r3
 8011c62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011c64:	2300      	movs	r3, #0
 8011c66:	6979      	ldr	r1, [r7, #20]
 8011c68:	f7ff fd74 	bl	8011754 <pif_HexToString>
 8011c6c:	4602      	mov	r2, r0
 8011c6e:	6a3b      	ldr	r3, [r7, #32]
 8011c70:	4413      	add	r3, r2
 8011c72:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, FALSE);
                	}
                    break;
 8011c74:	e0a9      	b.n	8011dca <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 8011c76:	68bb      	ldr	r3, [r7, #8]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	1d19      	adds	r1, r3, #4
 8011c7c:	68ba      	ldr	r2, [r7, #8]
 8011c7e:	6011      	str	r1, [r2, #0]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	61bb      	str	r3, [r7, #24]
						offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, FALSE);
 8011c84:	6a3b      	ldr	r3, [r7, #32]
 8011c86:	68fa      	ldr	r2, [r7, #12]
 8011c88:	18d0      	adds	r0, r2, r3
 8011c8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	69b9      	ldr	r1, [r7, #24]
 8011c90:	f7ff fd60 	bl	8011754 <pif_HexToString>
 8011c94:	4602      	mov	r2, r0
 8011c96:	6a3b      	ldr	r3, [r7, #32]
 8011c98:	4413      	add	r3, r2
 8011c9a:	623b      	str	r3, [r7, #32]
                    break;
 8011c9c:	e095      	b.n	8011dca <pif_PrintFormat+0x492>

                case 'X':
                	if (is_long) {
 8011c9e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d013      	beq.n	8011cce <pif_PrintFormat+0x396>
                		ulong_val = va_arg(*p_data, unsigned long);
 8011ca6:	68bb      	ldr	r3, [r7, #8]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	1d19      	adds	r1, r3, #4
 8011cac:	68ba      	ldr	r2, [r7, #8]
 8011cae:	6011      	str	r1, [r2, #0]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	617b      	str	r3, [r7, #20]
                		offset += pif_HexToString(p_buffer + offset, ulong_val, num_str_cnt, TRUE);
 8011cb4:	6a3b      	ldr	r3, [r7, #32]
 8011cb6:	68fa      	ldr	r2, [r7, #12]
 8011cb8:	18d0      	adds	r0, r2, r3
 8011cba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011cbc:	2301      	movs	r3, #1
 8011cbe:	6979      	ldr	r1, [r7, #20]
 8011cc0:	f7ff fd48 	bl	8011754 <pif_HexToString>
 8011cc4:	4602      	mov	r2, r0
 8011cc6:	6a3b      	ldr	r3, [r7, #32]
 8011cc8:	4413      	add	r3, r2
 8011cca:	623b      	str	r3, [r7, #32]
                	}
                	else {
                		uint_val = va_arg(*p_data, unsigned int);
                		offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, TRUE);
                	}
                    break;
 8011ccc:	e07d      	b.n	8011dca <pif_PrintFormat+0x492>
                		uint_val = va_arg(*p_data, unsigned int);
 8011cce:	68bb      	ldr	r3, [r7, #8]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	1d19      	adds	r1, r3, #4
 8011cd4:	68ba      	ldr	r2, [r7, #8]
 8011cd6:	6011      	str	r1, [r2, #0]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	61bb      	str	r3, [r7, #24]
                		offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, TRUE);
 8011cdc:	6a3b      	ldr	r3, [r7, #32]
 8011cde:	68fa      	ldr	r2, [r7, #12]
 8011ce0:	18d0      	adds	r0, r2, r3
 8011ce2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011ce4:	2301      	movs	r3, #1
 8011ce6:	69b9      	ldr	r1, [r7, #24]
 8011ce8:	f7ff fd34 	bl	8011754 <pif_HexToString>
 8011cec:	4602      	mov	r2, r0
 8011cee:	6a3b      	ldr	r3, [r7, #32]
 8011cf0:	4413      	add	r3, r2
 8011cf2:	623b      	str	r3, [r7, #32]
                    break;
 8011cf4:	e069      	b.n	8011dca <pif_PrintFormat+0x492>

                case 'f':
					offset += pif_FloatToString(p_buffer + offset, va_arg(*p_data, double), num_str_cnt);
 8011cf6:	6a3b      	ldr	r3, [r7, #32]
 8011cf8:	68fa      	ldr	r2, [r7, #12]
 8011cfa:	18d0      	adds	r0, r2, r3
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	3307      	adds	r3, #7
 8011d02:	f023 0307 	bic.w	r3, r3, #7
 8011d06:	f103 0108 	add.w	r1, r3, #8
 8011d0a:	68ba      	ldr	r2, [r7, #8]
 8011d0c:	6011      	str	r1, [r2, #0]
 8011d0e:	ed93 7b00 	vldr	d7, [r3]
 8011d12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011d14:	4619      	mov	r1, r3
 8011d16:	eeb0 0a47 	vmov.f32	s0, s14
 8011d1a:	eef0 0a67 	vmov.f32	s1, s15
 8011d1e:	f7ff fd8d 	bl	801183c <pif_FloatToString>
 8011d22:	4602      	mov	r2, r0
 8011d24:	6a3b      	ldr	r3, [r7, #32]
 8011d26:	4413      	add	r3, r2
 8011d28:	623b      	str	r3, [r7, #32]
                    break;
 8011d2a:	e04e      	b.n	8011dca <pif_PrintFormat+0x492>

                case 's':
                    p_var_str = va_arg(*p_data, char *);
 8011d2c:	68bb      	ldr	r3, [r7, #8]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	1d19      	adds	r1, r3, #4
 8011d32:	68ba      	ldr	r2, [r7, #8]
 8011d34:	6011      	str	r1, [r2, #0]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	613b      	str	r3, [r7, #16]
                    if (p_var_str) {
 8011d3a:	693b      	ldr	r3, [r7, #16]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d043      	beq.n	8011dc8 <pif_PrintFormat+0x490>
						size = strlen(p_var_str);
 8011d40:	6938      	ldr	r0, [r7, #16]
 8011d42:	f7ee fa53 	bl	80001ec <strlen>
 8011d46:	61f8      	str	r0, [r7, #28]
						if (offset + size < PIF_LOG_LINE_SIZE - 1) {
 8011d48:	6a3a      	ldr	r2, [r7, #32]
 8011d4a:	69fb      	ldr	r3, [r7, #28]
 8011d4c:	4413      	add	r3, r2
 8011d4e:	2b4e      	cmp	r3, #78	; 0x4e
 8011d50:	d807      	bhi.n	8011d62 <pif_PrintFormat+0x42a>
							strcpy(p_buffer + offset, p_var_str);
 8011d52:	6a3b      	ldr	r3, [r7, #32]
 8011d54:	68fa      	ldr	r2, [r7, #12]
 8011d56:	4413      	add	r3, r2
 8011d58:	6939      	ldr	r1, [r7, #16]
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f010 f986 	bl	802206c <strcpy>
 8011d60:	e00b      	b.n	8011d7a <pif_PrintFormat+0x442>
						}
						else {
							size = PIF_LOG_LINE_SIZE - 1 - offset;
 8011d62:	6a3b      	ldr	r3, [r7, #32]
 8011d64:	f1c3 034f 	rsb	r3, r3, #79	; 0x4f
 8011d68:	61fb      	str	r3, [r7, #28]
							strncpy(p_buffer + offset, p_var_str, size);
 8011d6a:	6a3b      	ldr	r3, [r7, #32]
 8011d6c:	68fa      	ldr	r2, [r7, #12]
 8011d6e:	4413      	add	r3, r2
 8011d70:	69fa      	ldr	r2, [r7, #28]
 8011d72:	6939      	ldr	r1, [r7, #16]
 8011d74:	4618      	mov	r0, r3
 8011d76:	f010 f9a3 	bl	80220c0 <strncpy>
						}
						offset += size;
 8011d7a:	6a3a      	ldr	r2, [r7, #32]
 8011d7c:	69fb      	ldr	r3, [r7, #28]
 8011d7e:	4413      	add	r3, r2
 8011d80:	623b      	str	r3, [r7, #32]
                    }
                    break;
 8011d82:	e021      	b.n	8011dc8 <pif_PrintFormat+0x490>

                case 'c':
                	p_buffer[offset++] = va_arg(*p_data, int);
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	1d19      	adds	r1, r3, #4
 8011d8a:	68ba      	ldr	r2, [r7, #8]
 8011d8c:	6011      	str	r1, [r2, #0]
 8011d8e:	6819      	ldr	r1, [r3, #0]
 8011d90:	6a3b      	ldr	r3, [r7, #32]
 8011d92:	1c5a      	adds	r2, r3, #1
 8011d94:	623a      	str	r2, [r7, #32]
 8011d96:	461a      	mov	r2, r3
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	4413      	add	r3, r2
 8011d9c:	b2ca      	uxtb	r2, r1
 8011d9e:	701a      	strb	r2, [r3, #0]
                    break;
 8011da0:	e013      	b.n	8011dca <pif_PrintFormat+0x492>

                case '%':
                	p_buffer[offset++] = '%';
 8011da2:	6a3b      	ldr	r3, [r7, #32]
 8011da4:	1c5a      	adds	r2, r3, #1
 8011da6:	623a      	str	r2, [r7, #32]
 8011da8:	461a      	mov	r2, r3
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	4413      	add	r3, r2
 8011dae:	2225      	movs	r2, #37	; 0x25
 8011db0:	701a      	strb	r2, [r3, #0]
                    break;
 8011db2:	e00a      	b.n	8011dca <pif_PrintFormat+0x492>
            }
        }
        else {
        	p_buffer[offset++] = *p_format;
 8011db4:	6a3b      	ldr	r3, [r7, #32]
 8011db6:	1c5a      	adds	r2, r3, #1
 8011db8:	623a      	str	r2, [r7, #32]
 8011dba:	461a      	mov	r2, r3
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	4413      	add	r3, r2
 8011dc0:	687a      	ldr	r2, [r7, #4]
 8011dc2:	7812      	ldrb	r2, [r2, #0]
 8011dc4:	701a      	strb	r2, [r3, #0]
 8011dc6:	e000      	b.n	8011dca <pif_PrintFormat+0x492>
                    break;
 8011dc8:	bf00      	nop
        }
        p_format = p_format + 1;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	3301      	adds	r3, #1
 8011dce:	607b      	str	r3, [r7, #4]
	while (*p_format) {
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	781b      	ldrb	r3, [r3, #0]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	f47f adb8 	bne.w	801194a <pif_PrintFormat+0x12>
	}
	p_buffer[offset] = 0;
 8011dda:	6a3b      	ldr	r3, [r7, #32]
 8011ddc:	68fa      	ldr	r2, [r7, #12]
 8011dde:	4413      	add	r3, r2
 8011de0:	2200      	movs	r2, #0
 8011de2:	701a      	strb	r2, [r3, #0]
}
 8011de4:	bf00      	nop
 8011de6:	3730      	adds	r7, #48	; 0x30
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}

08011dec <pif_Printf>:

void pif_Printf(char* p_buffer, const char* p_format, ...)
{
 8011dec:	b40e      	push	{r1, r2, r3}
 8011dee:	b580      	push	{r7, lr}
 8011df0:	b085      	sub	sp, #20
 8011df2:	af00      	add	r7, sp, #0
 8011df4:	6078      	str	r0, [r7, #4]
	va_list data;

	va_start(data, p_format);
 8011df6:	f107 0320 	add.w	r3, r7, #32
 8011dfa:	60fb      	str	r3, [r7, #12]
	pif_PrintFormat(p_buffer, &data, p_format);
 8011dfc:	f107 030c 	add.w	r3, r7, #12
 8011e00:	69fa      	ldr	r2, [r7, #28]
 8011e02:	4619      	mov	r1, r3
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	f7ff fd97 	bl	8011938 <pif_PrintFormat>
	va_end(data);
}
 8011e0a:	bf00      	nop
 8011e0c:	3714      	adds	r7, #20
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011e14:	b003      	add	sp, #12
 8011e16:	4770      	bx	lr

08011e18 <pifCrc16_Add>:
	}
	return pifCrc7_Result(crc);
}

uint16_t pifCrc16_Add(uint16_t crc, uint8_t data)
{
 8011e18:	b480      	push	{r7}
 8011e1a:	b085      	sub	sp, #20
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	4603      	mov	r3, r0
 8011e20:	460a      	mov	r2, r1
 8011e22:	80fb      	strh	r3, [r7, #6]
 8011e24:	4613      	mov	r3, r2
 8011e26:	717b      	strb	r3, [r7, #5]
	uint16_t i;

    crc ^= (uint16_t)data << 8;
 8011e28:	797b      	ldrb	r3, [r7, #5]
 8011e2a:	021b      	lsls	r3, r3, #8
 8011e2c:	b21a      	sxth	r2, r3
 8011e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e32:	4053      	eors	r3, r2
 8011e34:	b21b      	sxth	r3, r3
 8011e36:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 8011e38:	2300      	movs	r3, #0
 8011e3a:	81fb      	strh	r3, [r7, #14]
 8011e3c:	e013      	b.n	8011e66 <pifCrc16_Add+0x4e>
        if (crc & 0x8000) crc = (crc << 1) ^ 0x1021;
 8011e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	da09      	bge.n	8011e5a <pifCrc16_Add+0x42>
 8011e46:	88fb      	ldrh	r3, [r7, #6]
 8011e48:	005b      	lsls	r3, r3, #1
 8011e4a:	b21b      	sxth	r3, r3
 8011e4c:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8011e50:	f083 0301 	eor.w	r3, r3, #1
 8011e54:	b21b      	sxth	r3, r3
 8011e56:	80fb      	strh	r3, [r7, #6]
 8011e58:	e002      	b.n	8011e60 <pifCrc16_Add+0x48>
        else crc <<= 1;
 8011e5a:	88fb      	ldrh	r3, [r7, #6]
 8011e5c:	005b      	lsls	r3, r3, #1
 8011e5e:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 8011e60:	89fb      	ldrh	r3, [r7, #14]
 8011e62:	3301      	adds	r3, #1
 8011e64:	81fb      	strh	r3, [r7, #14]
 8011e66:	89fb      	ldrh	r3, [r7, #14]
 8011e68:	2b07      	cmp	r3, #7
 8011e6a:	d9e8      	bls.n	8011e3e <pifCrc16_Add+0x26>
    }
	return crc;
 8011e6c:	88fb      	ldrh	r3, [r7, #6]
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	3714      	adds	r7, #20
 8011e72:	46bd      	mov	sp, r7
 8011e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e78:	4770      	bx	lr

08011e7a <pifCrc16>:

uint16_t pifCrc16(uint8_t* p_data, uint16_t length)
{
 8011e7a:	b580      	push	{r7, lr}
 8011e7c:	b084      	sub	sp, #16
 8011e7e:	af00      	add	r7, sp, #0
 8011e80:	6078      	str	r0, [r7, #4]
 8011e82:	460b      	mov	r3, r1
 8011e84:	807b      	strh	r3, [r7, #2]
	uint16_t i, crc = 0;
 8011e86:	2300      	movs	r3, #0
 8011e88:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < length; i++) {
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	81fb      	strh	r3, [r7, #14]
 8011e8e:	e00d      	b.n	8011eac <pifCrc16+0x32>
		crc = pifCrc16_Add(crc, p_data[i]);
 8011e90:	89fb      	ldrh	r3, [r7, #14]
 8011e92:	687a      	ldr	r2, [r7, #4]
 8011e94:	4413      	add	r3, r2
 8011e96:	781a      	ldrb	r2, [r3, #0]
 8011e98:	89bb      	ldrh	r3, [r7, #12]
 8011e9a:	4611      	mov	r1, r2
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	f7ff ffbb 	bl	8011e18 <pifCrc16_Add>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < length; i++) {
 8011ea6:	89fb      	ldrh	r3, [r7, #14]
 8011ea8:	3301      	adds	r3, #1
 8011eaa:	81fb      	strh	r3, [r7, #14]
 8011eac:	89fa      	ldrh	r2, [r7, #14]
 8011eae:	887b      	ldrh	r3, [r7, #2]
 8011eb0:	429a      	cmp	r2, r3
 8011eb2:	d3ed      	bcc.n	8011e90 <pifCrc16+0x16>
	}
	return crc;
 8011eb4:	89bb      	ldrh	r3, [r7, #12]
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3710      	adds	r7, #16
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}

08011ebe <pifCheckXor>:
	}
	return sum;
}

uint8_t pifCheckXor(uint8_t* p_data, uint16_t length)
{
 8011ebe:	b480      	push	{r7}
 8011ec0:	b085      	sub	sp, #20
 8011ec2:	af00      	add	r7, sp, #0
 8011ec4:	6078      	str	r0, [r7, #4]
 8011ec6:	460b      	mov	r3, r1
 8011ec8:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	uint8_t xor = 0;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	737b      	strb	r3, [r7, #13]

	for (i = 0; i < length; i++) {
 8011ece:	2300      	movs	r3, #0
 8011ed0:	81fb      	strh	r3, [r7, #14]
 8011ed2:	e009      	b.n	8011ee8 <pifCheckXor+0x2a>
		xor ^= p_data[i];
 8011ed4:	89fb      	ldrh	r3, [r7, #14]
 8011ed6:	687a      	ldr	r2, [r7, #4]
 8011ed8:	4413      	add	r3, r2
 8011eda:	781a      	ldrb	r2, [r3, #0]
 8011edc:	7b7b      	ldrb	r3, [r7, #13]
 8011ede:	4053      	eors	r3, r2
 8011ee0:	737b      	strb	r3, [r7, #13]
	for (i = 0; i < length; i++) {
 8011ee2:	89fb      	ldrh	r3, [r7, #14]
 8011ee4:	3301      	adds	r3, #1
 8011ee6:	81fb      	strh	r3, [r7, #14]
 8011ee8:	89fa      	ldrh	r2, [r7, #14]
 8011eea:	887b      	ldrh	r3, [r7, #2]
 8011eec:	429a      	cmp	r2, r3
 8011eee:	d3f1      	bcc.n	8011ed4 <pifCheckXor+0x16>
	}
	return xor;
 8011ef0:	7b7b      	ldrb	r3, [r7, #13]
}
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	3714      	adds	r7, #20
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efc:	4770      	bx	lr

08011efe <_actReceiveData>:
#include "core/pif_comm.h"


static BOOL _actReceiveData(PifComm* p_owner, uint8_t* p_data)
{
 8011efe:	b580      	push	{r7, lr}
 8011f00:	b082      	sub	sp, #8
 8011f02:	af00      	add	r7, sp, #0
 8011f04:	6078      	str	r0, [r7, #4]
 8011f06:	6039      	str	r1, [r7, #0]
	return pifRingBuffer_GetByte(p_owner->_p_rx_buffer, p_data);
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	699b      	ldr	r3, [r3, #24]
 8011f0c:	6839      	ldr	r1, [r7, #0]
 8011f0e:	4618      	mov	r0, r3
 8011f10:	f002 f860 	bl	8013fd4 <pifRingBuffer_GetByte>
 8011f14:	4603      	mov	r3, r0
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	3708      	adds	r7, #8
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}

08011f1e <_actSendData>:

static uint16_t _actSendData(PifComm* p_owner, uint8_t* p_buffer, uint16_t size)
{
 8011f1e:	b580      	push	{r7, lr}
 8011f20:	b086      	sub	sp, #24
 8011f22:	af00      	add	r7, sp, #0
 8011f24:	60f8      	str	r0, [r7, #12]
 8011f26:	60b9      	str	r1, [r7, #8]
 8011f28:	4613      	mov	r3, r2
 8011f2a:	80fb      	strh	r3, [r7, #6]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner->_p_tx_buffer);
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	695b      	ldr	r3, [r3, #20]
 8011f30:	4618      	mov	r0, r3
 8011f32:	f001 ff42 	bl	8013dba <pifRingBuffer_GetRemainSize>
 8011f36:	4603      	mov	r3, r0
 8011f38:	82fb      	strh	r3, [r7, #22]

	if (!remain) return 0;
 8011f3a:	8afb      	ldrh	r3, [r7, #22]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d101      	bne.n	8011f44 <_actSendData+0x26>
 8011f40:	2300      	movs	r3, #0
 8011f42:	e012      	b.n	8011f6a <_actSendData+0x4c>
	if (size > remain) size = remain;
 8011f44:	88fa      	ldrh	r2, [r7, #6]
 8011f46:	8afb      	ldrh	r3, [r7, #22]
 8011f48:	429a      	cmp	r2, r3
 8011f4a:	d901      	bls.n	8011f50 <_actSendData+0x32>
 8011f4c:	8afb      	ldrh	r3, [r7, #22]
 8011f4e:	80fb      	strh	r3, [r7, #6]
	if (pifRingBuffer_PutData(p_owner->_p_tx_buffer, p_buffer, size)) {
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	695b      	ldr	r3, [r3, #20]
 8011f54:	88fa      	ldrh	r2, [r7, #6]
 8011f56:	68b9      	ldr	r1, [r7, #8]
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f001 ffa3 	bl	8013ea4 <pifRingBuffer_PutData>
 8011f5e:	4603      	mov	r3, r0
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d001      	beq.n	8011f68 <_actSendData+0x4a>
		return size;
 8011f64:	88fb      	ldrh	r3, [r7, #6]
 8011f66:	e000      	b.n	8011f6a <_actSendData+0x4c>
	}
	return 0;
 8011f68:	2300      	movs	r3, #0
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	3718      	adds	r7, #24
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}
	...

08011f74 <_sendData>:

static void _sendData(PifComm* p_owner)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b082      	sub	sp, #8
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
	if (p_owner->act_send_data) {
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	689b      	ldr	r3, [r3, #8]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d008      	beq.n	8011f96 <_sendData+0x22>
		(*p_owner->__evt_sending)(p_owner->__p_client, p_owner->act_send_data);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f88:	687a      	ldr	r2, [r7, #4]
 8011f8a:	6a10      	ldr	r0, [r2, #32]
 8011f8c:	687a      	ldr	r2, [r7, #4]
 8011f8e:	6892      	ldr	r2, [r2, #8]
 8011f90:	4611      	mov	r1, r2
 8011f92:	4798      	blx	r3
					if (!(*p_owner->act_start_transfer)(p_owner)) p_owner->__state = CTS_IDLE;
				}
			}
		}
	}
}
 8011f94:	e025      	b.n	8011fe2 <_sendData+0x6e>
	else if (p_owner->_p_tx_buffer) {
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	695b      	ldr	r3, [r3, #20]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d021      	beq.n	8011fe2 <_sendData+0x6e>
		if ((*p_owner->__evt_sending)(p_owner->__p_client, _actSendData)) {
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fa2:	687a      	ldr	r2, [r7, #4]
 8011fa4:	6a12      	ldr	r2, [r2, #32]
 8011fa6:	4911      	ldr	r1, [pc, #68]	; (8011fec <_sendData+0x78>)
 8011fa8:	4610      	mov	r0, r2
 8011faa:	4798      	blx	r3
 8011fac:	4603      	mov	r3, r0
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d017      	beq.n	8011fe2 <_sendData+0x6e>
			if (p_owner->__state == CTS_IDLE) {
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d112      	bne.n	8011fe2 <_sendData+0x6e>
				p_owner->__state = CTS_SENDING;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2201      	movs	r2, #1
 8011fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				if (p_owner->act_start_transfer) {
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	68db      	ldr	r3, [r3, #12]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d00a      	beq.n	8011fe2 <_sendData+0x6e>
					if (!(*p_owner->act_start_transfer)(p_owner)) p_owner->__state = CTS_IDLE;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	68db      	ldr	r3, [r3, #12]
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	4798      	blx	r3
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d103      	bne.n	8011fe2 <_sendData+0x6e>
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	2200      	movs	r2, #0
 8011fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8011fe2:	bf00      	nop
 8011fe4:	3708      	adds	r7, #8
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	bd80      	pop	{r7, pc}
 8011fea:	bf00      	nop
 8011fec:	08011f1f 	.word	0x08011f1f

08011ff0 <pifComm_Init>:

BOOL pifComm_Init(PifComm* p_owner, PifId id)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b082      	sub	sp, #8
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	460b      	mov	r3, r1
 8011ffa:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d104      	bne.n	801200c <pifComm_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8012002:	4b0e      	ldr	r3, [pc, #56]	; (801203c <pifComm_Init+0x4c>)
 8012004:	2201      	movs	r2, #1
 8012006:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8012008:	2300      	movs	r3, #0
 801200a:	e012      	b.n	8012032 <pifComm_Init+0x42>
	}

	memset(p_owner, 0, sizeof(PifComm));
 801200c:	2230      	movs	r2, #48	; 0x30
 801200e:	2100      	movs	r1, #0
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f00f fee7 	bl	8021de4 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8012016:	887b      	ldrh	r3, [r7, #2]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d106      	bne.n	801202a <pifComm_Init+0x3a>
 801201c:	4b08      	ldr	r3, [pc, #32]	; (8012040 <pifComm_Init+0x50>)
 801201e:	881b      	ldrh	r3, [r3, #0]
 8012020:	1c5a      	adds	r2, r3, #1
 8012022:	b291      	uxth	r1, r2
 8012024:	4a06      	ldr	r2, [pc, #24]	; (8012040 <pifComm_Init+0x50>)
 8012026:	8011      	strh	r1, [r2, #0]
 8012028:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	887a      	ldrh	r2, [r7, #2]
 801202e:	821a      	strh	r2, [r3, #16]
    return TRUE;
 8012030:	2301      	movs	r3, #1
}
 8012032:	4618      	mov	r0, r3
 8012034:	3708      	adds	r7, #8
 8012036:	46bd      	mov	sp, r7
 8012038:	bd80      	pop	{r7, pc}
 801203a:	bf00      	nop
 801203c:	200020d1 	.word	0x200020d1
 8012040:	2000005c 	.word	0x2000005c

08012044 <pifComm_Clear>:

void pifComm_Clear(PifComm* p_owner)
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b082      	sub	sp, #8
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_task) {
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	69db      	ldr	r3, [r3, #28]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d007      	beq.n	8012064 <pifComm_Clear+0x20>
		pifTaskManager_Remove(p_owner->_p_task);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	69db      	ldr	r3, [r3, #28]
 8012058:	4618      	mov	r0, r3
 801205a:	f002 fc43 	bl	80148e4 <pifTaskManager_Remove>
		p_owner->_p_task = NULL;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2200      	movs	r2, #0
 8012062:	61da      	str	r2, [r3, #28]
	}
	if (p_owner->_p_rx_buffer) pifRingBuffer_Destroy(&p_owner->_p_rx_buffer);
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	699b      	ldr	r3, [r3, #24]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d004      	beq.n	8012076 <pifComm_Clear+0x32>
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	3318      	adds	r3, #24
 8012070:	4618      	mov	r0, r3
 8012072:	f001 fd8f 	bl	8013b94 <pifRingBuffer_Destroy>
	if (p_owner->_p_tx_buffer) pifRingBuffer_Destroy(&p_owner->_p_tx_buffer);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	695b      	ldr	r3, [r3, #20]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d004      	beq.n	8012088 <pifComm_Clear+0x44>
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	3314      	adds	r3, #20
 8012082:	4618      	mov	r0, r3
 8012084:	f001 fd86 	bl	8013b94 <pifRingBuffer_Destroy>
}
 8012088:	bf00      	nop
 801208a:	3708      	adds	r7, #8
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}

08012090 <pifComm_AllocRxBuffer>:

BOOL pifComm_AllocRxBuffer(PifComm* p_owner, uint16_t rx_size, uint8_t threshold)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b082      	sub	sp, #8
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
 8012098:	460b      	mov	r3, r1
 801209a:	807b      	strh	r3, [r7, #2]
 801209c:	4613      	mov	r3, r2
 801209e:	707b      	strb	r3, [r7, #1]
    if (!rx_size) {
 80120a0:	887b      	ldrh	r3, [r7, #2]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d104      	bne.n	80120b0 <pifComm_AllocRxBuffer+0x20>
    	pif_error = E_INVALID_PARAM;
 80120a6:	4b1a      	ldr	r3, [pc, #104]	; (8012110 <pifComm_AllocRxBuffer+0x80>)
 80120a8:	2201      	movs	r2, #1
 80120aa:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 80120ac:	2300      	movs	r3, #0
 80120ae:	e02a      	b.n	8012106 <pifComm_AllocRxBuffer+0x76>
    }

    p_owner->_p_rx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, rx_size);
 80120b0:	887b      	ldrh	r3, [r7, #2]
 80120b2:	4619      	mov	r1, r3
 80120b4:	2000      	movs	r0, #0
 80120b6:	f001 fd41 	bl	8013b3c <pifRingBuffer_CreateHeap>
 80120ba:	4602      	mov	r2, r0
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	619a      	str	r2, [r3, #24]
    if (!p_owner->_p_rx_buffer) return FALSE;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	699b      	ldr	r3, [r3, #24]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d101      	bne.n	80120cc <pifComm_AllocRxBuffer+0x3c>
 80120c8:	2300      	movs	r3, #0
 80120ca:	e01c      	b.n	8012106 <pifComm_AllocRxBuffer+0x76>
    if (threshold > 100) threshold = 100;
 80120cc:	787b      	ldrb	r3, [r7, #1]
 80120ce:	2b64      	cmp	r3, #100	; 0x64
 80120d0:	d901      	bls.n	80120d6 <pifComm_AllocRxBuffer+0x46>
 80120d2:	2364      	movs	r3, #100	; 0x64
 80120d4:	707b      	strb	r3, [r7, #1]
    p_owner->__rx_threshold = rx_size * 100 / threshold;
 80120d6:	887b      	ldrh	r3, [r7, #2]
 80120d8:	2264      	movs	r2, #100	; 0x64
 80120da:	fb03 f202 	mul.w	r2, r3, r2
 80120de:	787b      	ldrb	r3, [r7, #1]
 80120e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80120e4:	b29a      	uxth	r2, r3
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	84da      	strh	r2, [r3, #38]	; 0x26
    if (p_owner->__rx_threshold == 0) p_owner->__rx_threshold = 1;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d102      	bne.n	80120f8 <pifComm_AllocRxBuffer+0x68>
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	2201      	movs	r2, #1
 80120f6:	84da      	strh	r2, [r3, #38]	; 0x26
    pifRingBuffer_SetName(p_owner->_p_rx_buffer, "RB");
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	699b      	ldr	r3, [r3, #24]
 80120fc:	4905      	ldr	r1, [pc, #20]	; (8012114 <pifComm_AllocRxBuffer+0x84>)
 80120fe:	4618      	mov	r0, r3
 8012100:	f001 fdc3 	bl	8013c8a <pifRingBuffer_SetName>
    return TRUE;
 8012104:	2301      	movs	r3, #1
}
 8012106:	4618      	mov	r0, r3
 8012108:	3708      	adds	r7, #8
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}
 801210e:	bf00      	nop
 8012110:	200020d1 	.word	0x200020d1
 8012114:	08026534 	.word	0x08026534

08012118 <pifComm_AllocTxBuffer>:

BOOL pifComm_AllocTxBuffer(PifComm* p_owner, uint16_t tx_size)
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b082      	sub	sp, #8
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
 8012120:	460b      	mov	r3, r1
 8012122:	807b      	strh	r3, [r7, #2]
	if (!tx_size) {
 8012124:	887b      	ldrh	r3, [r7, #2]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d104      	bne.n	8012134 <pifComm_AllocTxBuffer+0x1c>
    	pif_error = E_INVALID_PARAM;
 801212a:	4b0f      	ldr	r3, [pc, #60]	; (8012168 <pifComm_AllocTxBuffer+0x50>)
 801212c:	2201      	movs	r2, #1
 801212e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8012130:	2300      	movs	r3, #0
 8012132:	e014      	b.n	801215e <pifComm_AllocTxBuffer+0x46>
    }

    p_owner->_p_tx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, tx_size);
 8012134:	887b      	ldrh	r3, [r7, #2]
 8012136:	4619      	mov	r1, r3
 8012138:	2000      	movs	r0, #0
 801213a:	f001 fcff 	bl	8013b3c <pifRingBuffer_CreateHeap>
 801213e:	4602      	mov	r2, r0
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	615a      	str	r2, [r3, #20]
    if (!p_owner->_p_tx_buffer) return FALSE;
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	695b      	ldr	r3, [r3, #20]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d101      	bne.n	8012150 <pifComm_AllocTxBuffer+0x38>
 801214c:	2300      	movs	r3, #0
 801214e:	e006      	b.n	801215e <pifComm_AllocTxBuffer+0x46>
    pifRingBuffer_SetName(p_owner->_p_tx_buffer, "TB");
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	695b      	ldr	r3, [r3, #20]
 8012154:	4905      	ldr	r1, [pc, #20]	; (801216c <pifComm_AllocTxBuffer+0x54>)
 8012156:	4618      	mov	r0, r3
 8012158:	f001 fd97 	bl	8013c8a <pifRingBuffer_SetName>
	return TRUE;
 801215c:	2301      	movs	r3, #1
}
 801215e:	4618      	mov	r0, r3
 8012160:	3708      	adds	r7, #8
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}
 8012166:	bf00      	nop
 8012168:	200020d1 	.word	0x200020d1
 801216c:	08026538 	.word	0x08026538

08012170 <pifComm_AttachClient>:

void pifComm_AttachClient(PifComm* p_owner, void* p_client, PifEvtCommParsing evt_parsing, PifEvtCommSending evt_sending)
{
 8012170:	b480      	push	{r7}
 8012172:	b085      	sub	sp, #20
 8012174:	af00      	add	r7, sp, #0
 8012176:	60f8      	str	r0, [r7, #12]
 8012178:	60b9      	str	r1, [r7, #8]
 801217a:	607a      	str	r2, [r7, #4]
 801217c:	603b      	str	r3, [r7, #0]
	p_owner->__p_client = p_client;
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	68ba      	ldr	r2, [r7, #8]
 8012182:	621a      	str	r2, [r3, #32]
	p_owner->__evt_parsing = evt_parsing;
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	687a      	ldr	r2, [r7, #4]
 8012188:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__evt_sending = evt_sending;
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	683a      	ldr	r2, [r7, #0]
 801218e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8012190:	bf00      	nop
 8012192:	3714      	adds	r7, #20
 8012194:	46bd      	mov	sp, r7
 8012196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219a:	4770      	bx	lr

0801219c <pifComm_DetachClient>:

void pifComm_DetachClient(PifComm* p_owner)
{
 801219c:	b480      	push	{r7}
 801219e:	b083      	sub	sp, #12
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
	p_owner->__p_client = NULL;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2200      	movs	r2, #0
 80121a8:	621a      	str	r2, [r3, #32]
	p_owner->__evt_parsing = NULL;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	2200      	movs	r2, #0
 80121ae:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__evt_sending = NULL;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2200      	movs	r2, #0
 80121b4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80121b6:	bf00      	nop
 80121b8:	370c      	adds	r7, #12
 80121ba:	46bd      	mov	sp, r7
 80121bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c0:	4770      	bx	lr

080121c2 <pifComm_PutRxByte>:
{
	return pifRingBuffer_GetFillSize(p_owner->_p_tx_buffer);
}

BOOL pifComm_PutRxByte(PifComm* p_owner, uint8_t data)
{
 80121c2:	b580      	push	{r7, lr}
 80121c4:	b082      	sub	sp, #8
 80121c6:	af00      	add	r7, sp, #0
 80121c8:	6078      	str	r0, [r7, #4]
 80121ca:	460b      	mov	r3, r1
 80121cc:	70fb      	strb	r3, [r7, #3]
	if (!p_owner->_p_rx_buffer) return FALSE;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	699b      	ldr	r3, [r3, #24]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d101      	bne.n	80121da <pifComm_PutRxByte+0x18>
 80121d6:	2300      	movs	r3, #0
 80121d8:	e01b      	b.n	8012212 <pifComm_PutRxByte+0x50>

	if (!pifRingBuffer_PutByte(p_owner->_p_rx_buffer, data)) return FALSE;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	699b      	ldr	r3, [r3, #24]
 80121de:	78fa      	ldrb	r2, [r7, #3]
 80121e0:	4611      	mov	r1, r2
 80121e2:	4618      	mov	r0, r3
 80121e4:	f001 fe2a 	bl	8013e3c <pifRingBuffer_PutByte>
 80121e8:	4603      	mov	r3, r0
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d101      	bne.n	80121f2 <pifComm_PutRxByte+0x30>
 80121ee:	2300      	movs	r3, #0
 80121f0:	e00f      	b.n	8012212 <pifComm_PutRxByte+0x50>
	if (pifRingBuffer_GetFillSize(p_owner->_p_rx_buffer) >= p_owner->__rx_threshold) p_owner->_p_task->immediate = TRUE;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	699b      	ldr	r3, [r3, #24]
 80121f6:	4618      	mov	r0, r3
 80121f8:	f001 fd94 	bl	8013d24 <pifRingBuffer_GetFillSize>
 80121fc:	4603      	mov	r3, r0
 80121fe:	461a      	mov	r2, r3
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012204:	429a      	cmp	r2, r3
 8012206:	d303      	bcc.n	8012210 <pifComm_PutRxByte+0x4e>
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	69db      	ldr	r3, [r3, #28]
 801220c:	2201      	movs	r2, #1
 801220e:	705a      	strb	r2, [r3, #1]
	return TRUE;
 8012210:	2301      	movs	r3, #1
}
 8012212:	4618      	mov	r0, r3
 8012214:	3708      	adds	r7, #8
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}

0801221a <pifComm_StartGetTxData>:
	else ucState |= PIF_COMM_SEND_DATA_STATE_EMPTY;
	return ucState;
}

uint8_t pifComm_StartGetTxData(PifComm* p_owner, uint8_t** pp_data, uint16_t* p_length)
{
 801221a:	b580      	push	{r7, lr}
 801221c:	b086      	sub	sp, #24
 801221e:	af00      	add	r7, sp, #0
 8012220:	60f8      	str	r0, [r7, #12]
 8012222:	60b9      	str	r1, [r7, #8]
 8012224:	607a      	str	r2, [r7, #4]
	uint16_t usLength;

    if (!p_owner->_p_tx_buffer) return PIF_COMM_SEND_DATA_STATE_INIT;
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	695b      	ldr	r3, [r3, #20]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d101      	bne.n	8012232 <pifComm_StartGetTxData+0x18>
 801222e:	2300      	movs	r3, #0
 8012230:	e027      	b.n	8012282 <pifComm_StartGetTxData+0x68>
    if (pifRingBuffer_IsEmpty(p_owner->_p_tx_buffer)) return PIF_COMM_SEND_DATA_STATE_EMPTY;
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	695b      	ldr	r3, [r3, #20]
 8012236:	4618      	mov	r0, r3
 8012238:	f001 fd61 	bl	8013cfe <pifRingBuffer_IsEmpty>
 801223c:	4603      	mov	r3, r0
 801223e:	2b00      	cmp	r3, #0
 8012240:	d001      	beq.n	8012246 <pifComm_StartGetTxData+0x2c>
 8012242:	2302      	movs	r3, #2
 8012244:	e01d      	b.n	8012282 <pifComm_StartGetTxData+0x68>

    *pp_data = pifRingBuffer_GetTailPointer(p_owner->_p_tx_buffer, 0);
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	695b      	ldr	r3, [r3, #20]
 801224a:	2100      	movs	r1, #0
 801224c:	4618      	mov	r0, r3
 801224e:	f001 fd2a 	bl	8013ca6 <pifRingBuffer_GetTailPointer>
 8012252:	4602      	mov	r2, r0
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	601a      	str	r2, [r3, #0]
    usLength = pifRingBuffer_GetLinerSize(p_owner->_p_tx_buffer, 0);
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	695b      	ldr	r3, [r3, #20]
 801225c:	2100      	movs	r1, #0
 801225e:	4618      	mov	r0, r3
 8012260:	f001 fd82 	bl	8013d68 <pifRingBuffer_GetLinerSize>
 8012264:	4603      	mov	r3, r0
 8012266:	82fb      	strh	r3, [r7, #22]
    if (!*p_length || usLength <= *p_length) *p_length = usLength;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	881b      	ldrh	r3, [r3, #0]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d004      	beq.n	801227a <pifComm_StartGetTxData+0x60>
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	881b      	ldrh	r3, [r3, #0]
 8012274:	8afa      	ldrh	r2, [r7, #22]
 8012276:	429a      	cmp	r2, r3
 8012278:	d802      	bhi.n	8012280 <pifComm_StartGetTxData+0x66>
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	8afa      	ldrh	r2, [r7, #22]
 801227e:	801a      	strh	r2, [r3, #0]
	return PIF_COMM_SEND_DATA_STATE_DATA;
 8012280:	2301      	movs	r3, #1
}
 8012282:	4618      	mov	r0, r3
 8012284:	3718      	adds	r7, #24
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}

0801228a <pifComm_EndGetTxData>:

uint8_t pifComm_EndGetTxData(PifComm* p_owner, uint16_t length)
{
 801228a:	b580      	push	{r7, lr}
 801228c:	b082      	sub	sp, #8
 801228e:	af00      	add	r7, sp, #0
 8012290:	6078      	str	r0, [r7, #4]
 8012292:	460b      	mov	r3, r1
 8012294:	807b      	strh	r3, [r7, #2]
    pifRingBuffer_Remove(p_owner->_p_tx_buffer, length);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	695b      	ldr	r3, [r3, #20]
 801229a:	887a      	ldrh	r2, [r7, #2]
 801229c:	4611      	mov	r1, r2
 801229e:	4618      	mov	r0, r3
 80122a0:	f001 ff09 	bl	80140b6 <pifRingBuffer_Remove>
	return pifRingBuffer_IsEmpty(p_owner->_p_tx_buffer) << 1;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	695b      	ldr	r3, [r3, #20]
 80122a8:	4618      	mov	r0, r3
 80122aa:	f001 fd28 	bl	8013cfe <pifRingBuffer_IsEmpty>
 80122ae:	4603      	mov	r3, r0
 80122b0:	005b      	lsls	r3, r3, #1
 80122b2:	b2db      	uxtb	r3, r3
}
 80122b4:	4618      	mov	r0, r3
 80122b6:	3708      	adds	r7, #8
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}

080122bc <pifComm_FinishTransfer>:
	}
	return FALSE;
}

void pifComm_FinishTransfer(PifComm* p_owner)
{
 80122bc:	b480      	push	{r7}
 80122be:	b083      	sub	sp, #12
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
	p_owner->__state = CTS_IDLE;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2200      	movs	r2, #0
 80122c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	p_owner->_p_task->immediate = TRUE;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	69db      	ldr	r3, [r3, #28]
 80122d0:	2201      	movs	r2, #1
 80122d2:	705a      	strb	r2, [r3, #1]
}
 80122d4:	bf00      	nop
 80122d6:	370c      	adds	r7, #12
 80122d8:	46bd      	mov	sp, r7
 80122da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122de:	4770      	bx	lr

080122e0 <_doTask>:
{
	if (p_owner->__evt_sending) _sendData(p_owner);
}

static uint16_t _doTask(PifTask* p_task)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b084      	sub	sp, #16
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
	PifComm *p_owner = p_task->_p_client;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	68db      	ldr	r3, [r3, #12]
 80122ec:	60fb      	str	r3, [r7, #12]

	if (p_owner->__evt_parsing) {
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d017      	beq.n	8012326 <_doTask+0x46>
		if (p_owner->act_receive_data) {
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	685b      	ldr	r3, [r3, #4]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d008      	beq.n	8012310 <_doTask+0x30>
			(*p_owner->__evt_parsing)(p_owner->__p_client, p_owner->act_receive_data);
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012302:	68fa      	ldr	r2, [r7, #12]
 8012304:	6a10      	ldr	r0, [r2, #32]
 8012306:	68fa      	ldr	r2, [r7, #12]
 8012308:	6852      	ldr	r2, [r2, #4]
 801230a:	4611      	mov	r1, r2
 801230c:	4798      	blx	r3
 801230e:	e00a      	b.n	8012326 <_doTask+0x46>
		}
		else if (p_owner->_p_rx_buffer) {
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	699b      	ldr	r3, [r3, #24]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d006      	beq.n	8012326 <_doTask+0x46>
			(*p_owner->__evt_parsing)(p_owner->__p_client, _actReceiveData);
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801231c:	68fa      	ldr	r2, [r7, #12]
 801231e:	6a12      	ldr	r2, [r2, #32]
 8012320:	4907      	ldr	r1, [pc, #28]	; (8012340 <_doTask+0x60>)
 8012322:	4610      	mov	r0, r2
 8012324:	4798      	blx	r3
		}
	}

	if (p_owner->__evt_sending) _sendData(p_owner);
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801232a:	2b00      	cmp	r3, #0
 801232c:	d002      	beq.n	8012334 <_doTask+0x54>
 801232e:	68f8      	ldr	r0, [r7, #12]
 8012330:	f7ff fe20 	bl	8011f74 <_sendData>
	return 0;
 8012334:	2300      	movs	r3, #0
}
 8012336:	4618      	mov	r0, r3
 8012338:	3710      	adds	r7, #16
 801233a:	46bd      	mov	sp, r7
 801233c:	bd80      	pop	{r7, pc}
 801233e:	bf00      	nop
 8012340:	08011eff 	.word	0x08011eff

08012344 <pifComm_AttachTask>:

PifTask* pifComm_AttachTask(PifComm* p_owner, PifTaskMode mode, uint16_t period, BOOL start)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b084      	sub	sp, #16
 8012348:	af02      	add	r7, sp, #8
 801234a:	6078      	str	r0, [r7, #4]
 801234c:	4608      	mov	r0, r1
 801234e:	4611      	mov	r1, r2
 8012350:	461a      	mov	r2, r3
 8012352:	4603      	mov	r3, r0
 8012354:	70fb      	strb	r3, [r7, #3]
 8012356:	460b      	mov	r3, r1
 8012358:	803b      	strh	r3, [r7, #0]
 801235a:	4613      	mov	r3, r2
 801235c:	70bb      	strb	r3, [r7, #2]
	p_owner->_p_task = pifTaskManager_Add(mode, period, _doTask, p_owner, start);
 801235e:	8839      	ldrh	r1, [r7, #0]
 8012360:	78f8      	ldrb	r0, [r7, #3]
 8012362:	78bb      	ldrb	r3, [r7, #2]
 8012364:	9300      	str	r3, [sp, #0]
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	4a05      	ldr	r2, [pc, #20]	; (8012380 <pifComm_AttachTask+0x3c>)
 801236a:	f002 fa69 	bl	8014840 <pifTaskManager_Add>
 801236e:	4602      	mov	r2, r0
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	61da      	str	r2, [r3, #28]
	return p_owner->_p_task;
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	69db      	ldr	r3, [r3, #28]
}
 8012378:	4618      	mov	r0, r3
 801237a:	3708      	adds	r7, #8
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}
 8012380:	080122e1 	.word	0x080122e1

08012384 <pifI2cPort_Init>:
#endif
#include "core/pif_task.h"


BOOL pifI2cPort_Init(PifI2cPort* p_owner, PifId id, uint8_t device_count, uint16_t max_transfer_size)
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b084      	sub	sp, #16
 8012388:	af00      	add	r7, sp, #0
 801238a:	60f8      	str	r0, [r7, #12]
 801238c:	4608      	mov	r0, r1
 801238e:	4611      	mov	r1, r2
 8012390:	461a      	mov	r2, r3
 8012392:	4603      	mov	r3, r0
 8012394:	817b      	strh	r3, [r7, #10]
 8012396:	460b      	mov	r3, r1
 8012398:	727b      	strb	r3, [r7, #9]
 801239a:	4613      	mov	r3, r2
 801239c:	80fb      	strh	r3, [r7, #6]
	if (!p_owner || !device_count || !max_transfer_size) {
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d005      	beq.n	80123b0 <pifI2cPort_Init+0x2c>
 80123a4:	7a7b      	ldrb	r3, [r7, #9]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d002      	beq.n	80123b0 <pifI2cPort_Init+0x2c>
 80123aa:	88fb      	ldrh	r3, [r7, #6]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d104      	bne.n	80123ba <pifI2cPort_Init+0x36>
		pif_error = E_INVALID_PARAM;
 80123b0:	4b17      	ldr	r3, [pc, #92]	; (8012410 <pifI2cPort_Init+0x8c>)
 80123b2:	2201      	movs	r2, #1
 80123b4:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80123b6:	2300      	movs	r3, #0
 80123b8:	e025      	b.n	8012406 <pifI2cPort_Init+0x82>
	}

    memset(p_owner, 0, sizeof(PifI2cPort));
 80123ba:	2230      	movs	r2, #48	; 0x30
 80123bc:	2100      	movs	r1, #0
 80123be:	68f8      	ldr	r0, [r7, #12]
 80123c0:	f00f fd10 	bl	8021de4 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 80123c4:	897b      	ldrh	r3, [r7, #10]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d106      	bne.n	80123d8 <pifI2cPort_Init+0x54>
 80123ca:	4b12      	ldr	r3, [pc, #72]	; (8012414 <pifI2cPort_Init+0x90>)
 80123cc:	881b      	ldrh	r3, [r3, #0]
 80123ce:	1c5a      	adds	r2, r3, #1
 80123d0:	b291      	uxth	r1, r2
 80123d2:	4a10      	ldr	r2, [pc, #64]	; (8012414 <pifI2cPort_Init+0x90>)
 80123d4:	8011      	strh	r1, [r2, #0]
 80123d6:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	897a      	ldrh	r2, [r7, #10]
 80123dc:	819a      	strh	r2, [r3, #12]
    p_owner->__max_transfer_size = max_transfer_size;
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	88fa      	ldrh	r2, [r7, #6]
 80123e2:	851a      	strh	r2, [r3, #40]	; 0x28
    if (!pifFixList_Init(&p_owner->__devices, sizeof(PifI2cDevice), device_count)) goto fail;
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	3310      	adds	r3, #16
 80123e8:	7a7a      	ldrb	r2, [r7, #9]
 80123ea:	2108      	movs	r1, #8
 80123ec:	4618      	mov	r0, r3
 80123ee:	f000 fac5 	bl	801297c <pifFixList_Init>
 80123f2:	4603      	mov	r3, r0
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d001      	beq.n	80123fc <pifI2cPort_Init+0x78>
    return TRUE;
 80123f8:	2301      	movs	r3, #1
 80123fa:	e004      	b.n	8012406 <pifI2cPort_Init+0x82>
    if (!pifFixList_Init(&p_owner->__devices, sizeof(PifI2cDevice), device_count)) goto fail;
 80123fc:	bf00      	nop

fail:
	pifI2cPort_Clear(p_owner);
 80123fe:	68f8      	ldr	r0, [r7, #12]
 8012400:	f000 f80a 	bl	8012418 <pifI2cPort_Clear>
	return FALSE;
 8012404:	2300      	movs	r3, #0
}
 8012406:	4618      	mov	r0, r3
 8012408:	3710      	adds	r7, #16
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}
 801240e:	bf00      	nop
 8012410:	200020d1 	.word	0x200020d1
 8012414:	2000005c 	.word	0x2000005c

08012418 <pifI2cPort_Clear>:

void pifI2cPort_Clear(PifI2cPort* p_owner)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b082      	sub	sp, #8
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
	pifFixList_Clear(&p_owner->__devices, NULL);
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	3310      	adds	r3, #16
 8012424:	2100      	movs	r1, #0
 8012426:	4618      	mov	r0, r3
 8012428:	f000 fb08 	bl	8012a3c <pifFixList_Clear>
}
 801242c:	bf00      	nop
 801242e:	3708      	adds	r7, #8
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}

08012434 <pifI2cPort_AddDevice>:

PifI2cDevice* pifI2cPort_AddDevice(PifI2cPort* p_owner)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b084      	sub	sp, #16
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
	if (!p_owner) {
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d104      	bne.n	801244c <pifI2cPort_AddDevice+0x18>
		pif_error = E_INVALID_PARAM;
 8012442:	4b0d      	ldr	r3, [pc, #52]	; (8012478 <pifI2cPort_AddDevice+0x44>)
 8012444:	2201      	movs	r2, #1
 8012446:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8012448:	2300      	movs	r3, #0
 801244a:	e011      	b.n	8012470 <pifI2cPort_AddDevice+0x3c>
	}

	PifI2cDevice* p_device = (PifI2cDevice*)pifFixList_AddFirst(&p_owner->__devices);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	3310      	adds	r3, #16
 8012450:	4618      	mov	r0, r3
 8012452:	f000 fb26 	bl	8012aa2 <pifFixList_AddFirst>
 8012456:	60f8      	str	r0, [r7, #12]
    if (!p_device) return FALSE;
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d101      	bne.n	8012462 <pifI2cPort_AddDevice+0x2e>
 801245e:	2300      	movs	r3, #0
 8012460:	e006      	b.n	8012470 <pifI2cPort_AddDevice+0x3c>

    p_device->__p_port = p_owner;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	687a      	ldr	r2, [r7, #4]
 8012466:	605a      	str	r2, [r3, #4]
    p_device->timeout = 10;		// 10ms
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	220a      	movs	r2, #10
 801246c:	705a      	strb	r2, [r3, #1]
    return p_device;
 801246e:	68fb      	ldr	r3, [r7, #12]
}
 8012470:	4618      	mov	r0, r3
 8012472:	3710      	adds	r7, #16
 8012474:	46bd      	mov	sp, r7
 8012476:	bd80      	pop	{r7, pc}
 8012478:	200020d1 	.word	0x200020d1

0801247c <pifI2cPort_RemoveDevice>:

void pifI2cPort_RemoveDevice(PifI2cPort* p_owner, PifI2cDevice* p_device)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b082      	sub	sp, #8
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
 8012484:	6039      	str	r1, [r7, #0]
	if (p_device) {
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d007      	beq.n	801249c <pifI2cPort_RemoveDevice+0x20>
		pifFixList_Remove(&p_owner->__devices, p_device);
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	3310      	adds	r3, #16
 8012490:	6839      	ldr	r1, [r7, #0]
 8012492:	4618      	mov	r0, r3
 8012494:	f000 fb39 	bl	8012b0a <pifFixList_Remove>
		p_device = NULL;
 8012498:	2300      	movs	r3, #0
 801249a:	603b      	str	r3, [r7, #0]
	}
}
 801249c:	bf00      	nop
 801249e:	3708      	adds	r7, #8
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}

080124a4 <pifI2cDevice_Read>:
}

#endif

BOOL pifI2cDevice_Read(PifI2cDevice* p_owner, uint32_t iaddr, uint8_t isize, uint8_t* p_data, size_t size)
{
 80124a4:	b5b0      	push	{r4, r5, r7, lr}
 80124a6:	b08c      	sub	sp, #48	; 0x30
 80124a8:	af02      	add	r7, sp, #8
 80124aa:	60f8      	str	r0, [r7, #12]
 80124ac:	60b9      	str	r1, [r7, #8]
 80124ae:	603b      	str	r3, [r7, #0]
 80124b0:	4613      	mov	r3, r2
 80124b2:	71fb      	strb	r3, [r7, #7]
	PifI2cPort* p_port = p_owner->__p_port;
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	685b      	ldr	r3, [r3, #4]
 80124b8:	61fb      	str	r3, [r7, #28]
	size_t ptr;
#ifndef __PIF_NO_LOG__
	int line;
#endif

	if (!p_port->act_read) return FALSE;
 80124ba:	69fb      	ldr	r3, [r7, #28]
 80124bc:	685b      	ldr	r3, [r3, #4]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d101      	bne.n	80124c6 <pifI2cDevice_Read+0x22>
 80124c2:	2300      	movs	r3, #0
 80124c4:	e08e      	b.n	80125e4 <pifI2cDevice_Read+0x140>
	if (p_port->__use_device) {
 80124c6:	69fb      	ldr	r3, [r7, #28]
 80124c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d00f      	beq.n	80124ee <pifI2cDevice_Read+0x4a>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_INFO, "I2CR:%u Addr:%Xh Use Addr:%Xh", __LINE__, p_owner->addr, p_port->__use_device->addr);
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	781b      	ldrb	r3, [r3, #0]
 80124d2:	461a      	mov	r2, r3
 80124d4:	69fb      	ldr	r3, [r7, #28]
 80124d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124d8:	781b      	ldrb	r3, [r3, #0]
 80124da:	b2db      	uxtb	r3, r3
 80124dc:	9300      	str	r3, [sp, #0]
 80124de:	4613      	mov	r3, r2
 80124e0:	2262      	movs	r2, #98	; 0x62
 80124e2:	4942      	ldr	r1, [pc, #264]	; (80125ec <pifI2cDevice_Read+0x148>)
 80124e4:	2002      	movs	r0, #2
 80124e6:	f001 f855 	bl	8013594 <pifLog_Printf>
#endif
		return FALSE;
 80124ea:	2300      	movs	r3, #0
 80124ec:	e07a      	b.n	80125e4 <pifI2cDevice_Read+0x140>
	}

	p_port->__use_device = p_owner;
 80124ee:	69fb      	ldr	r3, [r7, #28]
 80124f0:	68fa      	ldr	r2, [r7, #12]
 80124f2:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_RUN;
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	2201      	movs	r2, #1
 80124f8:	709a      	strb	r2, [r3, #2]
	ptr = 0;
 80124fa:	2300      	movs	r3, #0
 80124fc:	627b      	str	r3, [r7, #36]	; 0x24
	while (size) {
 80124fe:	e048      	b.n	8012592 <pifI2cDevice_Read+0xee>
		len = size > p_port->__max_transfer_size ? p_port->__max_transfer_size : size;
 8012500:	69fb      	ldr	r3, [r7, #28]
 8012502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012504:	461a      	mov	r2, r3
 8012506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012508:	4293      	cmp	r3, r2
 801250a:	bf28      	it	cs
 801250c:	4613      	movcs	r3, r2
 801250e:	76fb      	strb	r3, [r7, #27]
		switch ((*p_port->act_read)(p_owner->addr, iaddr + ptr, isize, p_data + ptr, len)) {
 8012510:	69fb      	ldr	r3, [r7, #28]
 8012512:	685c      	ldr	r4, [r3, #4]
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	7818      	ldrb	r0, [r3, #0]
 8012518:	68ba      	ldr	r2, [r7, #8]
 801251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801251c:	18d1      	adds	r1, r2, r3
 801251e:	683a      	ldr	r2, [r7, #0]
 8012520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012522:	18d5      	adds	r5, r2, r3
 8012524:	7efb      	ldrb	r3, [r7, #27]
 8012526:	b29b      	uxth	r3, r3
 8012528:	79fa      	ldrb	r2, [r7, #7]
 801252a:	9300      	str	r3, [sp, #0]
 801252c:	462b      	mov	r3, r5
 801252e:	47a0      	blx	r4
 8012530:	4603      	mov	r3, r0
 8012532:	2b02      	cmp	r3, #2
 8012534:	d021      	beq.n	801257a <pifI2cDevice_Read+0xd6>
 8012536:	2b02      	cmp	r3, #2
 8012538:	dc23      	bgt.n	8012582 <pifI2cDevice_Read+0xde>
 801253a:	2b00      	cmp	r3, #0
 801253c:	d001      	beq.n	8012542 <pifI2cDevice_Read+0x9e>
 801253e:	2b01      	cmp	r3, #1
				goto fail;
			}
			break;

		case IR_COMPLETE:
			break;
 8012540:	e01f      	b.n	8012582 <pifI2cDevice_Read+0xde>
			timer1ms = pif_cumulative_timer1ms;
 8012542:	4b2b      	ldr	r3, [pc, #172]	; (80125f0 <pifI2cDevice_Read+0x14c>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	617b      	str	r3, [r7, #20]
			while (p_owner->_state == IS_RUN) {
 8012548:	e00a      	b.n	8012560 <pifI2cDevice_Read+0xbc>
				if (pif_cumulative_timer1ms - timer1ms > p_owner->timeout) {
 801254a:	4b29      	ldr	r3, [pc, #164]	; (80125f0 <pifI2cDevice_Read+0x14c>)
 801254c:	681a      	ldr	r2, [r3, #0]
 801254e:	697b      	ldr	r3, [r7, #20]
 8012550:	1ad3      	subs	r3, r2, r3
 8012552:	68fa      	ldr	r2, [r7, #12]
 8012554:	7852      	ldrb	r2, [r2, #1]
 8012556:	4293      	cmp	r3, r2
 8012558:	d902      	bls.n	8012560 <pifI2cDevice_Read+0xbc>
					line = __LINE__;
 801255a:	2372      	movs	r3, #114	; 0x72
 801255c:	623b      	str	r3, [r7, #32]
					goto fail;
 801255e:	e023      	b.n	80125a8 <pifI2cDevice_Read+0x104>
			while (p_owner->_state == IS_RUN) {
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	789b      	ldrb	r3, [r3, #2]
 8012564:	b2db      	uxtb	r3, r3
 8012566:	2b01      	cmp	r3, #1
 8012568:	d0ef      	beq.n	801254a <pifI2cDevice_Read+0xa6>
			if (p_owner->_state == IS_ERROR) {
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	789b      	ldrb	r3, [r3, #2]
 801256e:	b2db      	uxtb	r3, r3
 8012570:	2b03      	cmp	r3, #3
 8012572:	d105      	bne.n	8012580 <pifI2cDevice_Read+0xdc>
				line = __LINE__;
 8012574:	2379      	movs	r3, #121	; 0x79
 8012576:	623b      	str	r3, [r7, #32]
				goto fail;
 8012578:	e016      	b.n	80125a8 <pifI2cDevice_Read+0x104>

		case IR_ERROR:
#ifndef __PIF_NO_LOG__
			line = __LINE__;
 801257a:	2384      	movs	r3, #132	; 0x84
 801257c:	623b      	str	r3, [r7, #32]
#endif
			goto fail;
 801257e:	e013      	b.n	80125a8 <pifI2cDevice_Read+0x104>
			break;
 8012580:	bf00      	nop
		}
		ptr += len;
 8012582:	7efb      	ldrb	r3, [r7, #27]
 8012584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012586:	4413      	add	r3, r2
 8012588:	627b      	str	r3, [r7, #36]	; 0x24
		size -= len;
 801258a:	7efb      	ldrb	r3, [r7, #27]
 801258c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801258e:	1ad3      	subs	r3, r2, r3
 8012590:	63bb      	str	r3, [r7, #56]	; 0x38
	while (size) {
 8012592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012594:	2b00      	cmp	r3, #0
 8012596:	d1b3      	bne.n	8012500 <pifI2cDevice_Read+0x5c>
	}
	p_port->__use_device = NULL;
 8012598:	69fb      	ldr	r3, [r7, #28]
 801259a:	2200      	movs	r2, #0
 801259c:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_IDLE;
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	2200      	movs	r2, #0
 80125a2:	709a      	strb	r2, [r3, #2]
	return TRUE;
 80125a4:	2301      	movs	r3, #1
 80125a6:	e01d      	b.n	80125e4 <pifI2cDevice_Read+0x140>

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "I2CR:%u A:%Xh R:%Xh E:%u", line, p_owner->addr, iaddr, pif_error);
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	781b      	ldrb	r3, [r3, #0]
 80125ac:	461a      	mov	r2, r3
 80125ae:	4b11      	ldr	r3, [pc, #68]	; (80125f4 <pifI2cDevice_Read+0x150>)
 80125b0:	781b      	ldrb	r3, [r3, #0]
 80125b2:	9301      	str	r3, [sp, #4]
 80125b4:	68bb      	ldr	r3, [r7, #8]
 80125b6:	9300      	str	r3, [sp, #0]
 80125b8:	4613      	mov	r3, r2
 80125ba:	6a3a      	ldr	r2, [r7, #32]
 80125bc:	490e      	ldr	r1, [pc, #56]	; (80125f8 <pifI2cDevice_Read+0x154>)
 80125be:	2004      	movs	r0, #4
 80125c0:	f000 ffe8 	bl	8013594 <pifLog_Printf>
#endif
	p_port->__use_device = NULL;
 80125c4:	69fb      	ldr	r3, [r7, #28]
 80125c6:	2200      	movs	r2, #0
 80125c8:	62da      	str	r2, [r3, #44]	; 0x2c
	p_port->error_count++;
 80125ca:	69fb      	ldr	r3, [r7, #28]
 80125cc:	881b      	ldrh	r3, [r3, #0]
 80125ce:	3301      	adds	r3, #1
 80125d0:	b29a      	uxth	r2, r3
 80125d2:	69fb      	ldr	r3, [r7, #28]
 80125d4:	801a      	strh	r2, [r3, #0]
	p_owner->_state = IS_IDLE;
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	2200      	movs	r2, #0
 80125da:	709a      	strb	r2, [r3, #2]
	pif_error = E_TRANSFER_FAILED;
 80125dc:	4b05      	ldr	r3, [pc, #20]	; (80125f4 <pifI2cDevice_Read+0x150>)
 80125de:	220a      	movs	r2, #10
 80125e0:	701a      	strb	r2, [r3, #0]
	return FALSE;
 80125e2:	2300      	movs	r3, #0
}
 80125e4:	4618      	mov	r0, r3
 80125e6:	3728      	adds	r7, #40	; 0x28
 80125e8:	46bd      	mov	sp, r7
 80125ea:	bdb0      	pop	{r4, r5, r7, pc}
 80125ec:	0802656c 	.word	0x0802656c
 80125f0:	200020e0 	.word	0x200020e0
 80125f4:	200020d1 	.word	0x200020d1
 80125f8:	0802658c 	.word	0x0802658c

080125fc <pifI2cDevice_ReadRegByte>:

BOOL pifI2cDevice_ReadRegByte(PifI2cDevice* p_owner, uint8_t reg, uint8_t* p_data)
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b086      	sub	sp, #24
 8012600:	af02      	add	r7, sp, #8
 8012602:	60f8      	str	r0, [r7, #12]
 8012604:	460b      	mov	r3, r1
 8012606:	607a      	str	r2, [r7, #4]
 8012608:	72fb      	strb	r3, [r7, #11]
	return pifI2cDevice_Read(p_owner, reg, 1, p_data, 1);
 801260a:	7af9      	ldrb	r1, [r7, #11]
 801260c:	2301      	movs	r3, #1
 801260e:	9300      	str	r3, [sp, #0]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	2201      	movs	r2, #1
 8012614:	68f8      	ldr	r0, [r7, #12]
 8012616:	f7ff ff45 	bl	80124a4 <pifI2cDevice_Read>
 801261a:	4603      	mov	r3, r0
}
 801261c:	4618      	mov	r0, r3
 801261e:	3710      	adds	r7, #16
 8012620:	46bd      	mov	sp, r7
 8012622:	bd80      	pop	{r7, pc}

08012624 <pifI2cDevice_ReadRegWord>:

BOOL pifI2cDevice_ReadRegWord(PifI2cDevice* p_owner, uint8_t reg, uint16_t* p_data)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b088      	sub	sp, #32
 8012628:	af02      	add	r7, sp, #8
 801262a:	60f8      	str	r0, [r7, #12]
 801262c:	460b      	mov	r3, r1
 801262e:	607a      	str	r2, [r7, #4]
 8012630:	72fb      	strb	r3, [r7, #11]
	uint8_t tmp[2];

	if (!pifI2cDevice_Read(p_owner, reg, 1, tmp, 2)) return FALSE;
 8012632:	7af9      	ldrb	r1, [r7, #11]
 8012634:	f107 0314 	add.w	r3, r7, #20
 8012638:	2202      	movs	r2, #2
 801263a:	9200      	str	r2, [sp, #0]
 801263c:	2201      	movs	r2, #1
 801263e:	68f8      	ldr	r0, [r7, #12]
 8012640:	f7ff ff30 	bl	80124a4 <pifI2cDevice_Read>
 8012644:	4603      	mov	r3, r0
 8012646:	2b00      	cmp	r3, #0
 8012648:	d101      	bne.n	801264e <pifI2cDevice_ReadRegWord+0x2a>
 801264a:	2300      	movs	r3, #0
 801264c:	e00a      	b.n	8012664 <pifI2cDevice_ReadRegWord+0x40>
	*p_data = (tmp[0] << 8) + tmp[1];
 801264e:	7d3b      	ldrb	r3, [r7, #20]
 8012650:	b29b      	uxth	r3, r3
 8012652:	021b      	lsls	r3, r3, #8
 8012654:	b29a      	uxth	r2, r3
 8012656:	7d7b      	ldrb	r3, [r7, #21]
 8012658:	b29b      	uxth	r3, r3
 801265a:	4413      	add	r3, r2
 801265c:	b29a      	uxth	r2, r3
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8012662:	2301      	movs	r3, #1
}
 8012664:	4618      	mov	r0, r3
 8012666:	3718      	adds	r7, #24
 8012668:	46bd      	mov	sp, r7
 801266a:	bd80      	pop	{r7, pc}

0801266c <pifI2cDevice_ReadRegBytes>:

BOOL pifI2cDevice_ReadRegBytes(PifI2cDevice* p_owner, uint8_t reg, uint8_t* p_data, size_t size)
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b086      	sub	sp, #24
 8012670:	af02      	add	r7, sp, #8
 8012672:	60f8      	str	r0, [r7, #12]
 8012674:	607a      	str	r2, [r7, #4]
 8012676:	603b      	str	r3, [r7, #0]
 8012678:	460b      	mov	r3, r1
 801267a:	72fb      	strb	r3, [r7, #11]
	return pifI2cDevice_Read(p_owner, reg, 1, p_data, size);
 801267c:	7af9      	ldrb	r1, [r7, #11]
 801267e:	683b      	ldr	r3, [r7, #0]
 8012680:	9300      	str	r3, [sp, #0]
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	2201      	movs	r2, #1
 8012686:	68f8      	ldr	r0, [r7, #12]
 8012688:	f7ff ff0c 	bl	80124a4 <pifI2cDevice_Read>
 801268c:	4603      	mov	r3, r0
}
 801268e:	4618      	mov	r0, r3
 8012690:	3710      	adds	r7, #16
 8012692:	46bd      	mov	sp, r7
 8012694:	bd80      	pop	{r7, pc}

08012696 <pifI2cDevice_ReadRegBit8>:

BOOL pifI2cDevice_ReadRegBit8(PifI2cDevice* p_owner, uint8_t reg, PifI2cRegField field, uint8_t* p_data)
{
 8012696:	b580      	push	{r7, lr}
 8012698:	b088      	sub	sp, #32
 801269a:	af02      	add	r7, sp, #8
 801269c:	60f8      	str	r0, [r7, #12]
 801269e:	607b      	str	r3, [r7, #4]
 80126a0:	460b      	mov	r3, r1
 80126a2:	72fb      	strb	r3, [r7, #11]
 80126a4:	4613      	mov	r3, r2
 80126a6:	813b      	strh	r3, [r7, #8]
	uint8_t tmp, shift, mask;

	shift = field >> 8;
 80126a8:	893b      	ldrh	r3, [r7, #8]
 80126aa:	0a1b      	lsrs	r3, r3, #8
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	75fb      	strb	r3, [r7, #23]
	mask = (1 << (field & 0xFF)) - 1;
 80126b0:	893b      	ldrh	r3, [r7, #8]
 80126b2:	b2db      	uxtb	r3, r3
 80126b4:	2201      	movs	r2, #1
 80126b6:	fa02 f303 	lsl.w	r3, r2, r3
 80126ba:	b2db      	uxtb	r3, r3
 80126bc:	3b01      	subs	r3, #1
 80126be:	75bb      	strb	r3, [r7, #22]

	if (!pifI2cDevice_Read(p_owner, reg, 1, &tmp, 1)) return FALSE;
 80126c0:	7af9      	ldrb	r1, [r7, #11]
 80126c2:	f107 0315 	add.w	r3, r7, #21
 80126c6:	2201      	movs	r2, #1
 80126c8:	9200      	str	r2, [sp, #0]
 80126ca:	2201      	movs	r2, #1
 80126cc:	68f8      	ldr	r0, [r7, #12]
 80126ce:	f7ff fee9 	bl	80124a4 <pifI2cDevice_Read>
 80126d2:	4603      	mov	r3, r0
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d101      	bne.n	80126dc <pifI2cDevice_ReadRegBit8+0x46>
 80126d8:	2300      	movs	r3, #0
 80126da:	e00d      	b.n	80126f8 <pifI2cDevice_ReadRegBit8+0x62>
	*p_data = (tmp >> shift) & mask;
 80126dc:	7d7b      	ldrb	r3, [r7, #21]
 80126de:	461a      	mov	r2, r3
 80126e0:	7dfb      	ldrb	r3, [r7, #23]
 80126e2:	fa42 f303 	asr.w	r3, r2, r3
 80126e6:	b25a      	sxtb	r2, r3
 80126e8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80126ec:	4013      	ands	r3, r2
 80126ee:	b25b      	sxtb	r3, r3
 80126f0:	b2da      	uxtb	r2, r3
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	701a      	strb	r2, [r3, #0]
	return TRUE;
 80126f6:	2301      	movs	r3, #1
}
 80126f8:	4618      	mov	r0, r3
 80126fa:	3718      	adds	r7, #24
 80126fc:	46bd      	mov	sp, r7
 80126fe:	bd80      	pop	{r7, pc}

08012700 <pifI2cDevice_Write>:
	*p_data = (((tmp[0] << 8) + tmp[1]) >> shift) & mask;
	return TRUE;
}

BOOL pifI2cDevice_Write(PifI2cDevice* p_owner, uint32_t iaddr, uint8_t isize, uint8_t* p_data, size_t size)
{
 8012700:	b5b0      	push	{r4, r5, r7, lr}
 8012702:	b08c      	sub	sp, #48	; 0x30
 8012704:	af02      	add	r7, sp, #8
 8012706:	60f8      	str	r0, [r7, #12]
 8012708:	60b9      	str	r1, [r7, #8]
 801270a:	603b      	str	r3, [r7, #0]
 801270c:	4613      	mov	r3, r2
 801270e:	71fb      	strb	r3, [r7, #7]
	PifI2cPort* p_port = p_owner->__p_port;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	685b      	ldr	r3, [r3, #4]
 8012714:	61fb      	str	r3, [r7, #28]
	size_t ptr;
#ifndef __PIF_NO_LOG__
	int line;
#endif

	if (!p_port->act_write) return FALSE;
 8012716:	69fb      	ldr	r3, [r7, #28]
 8012718:	689b      	ldr	r3, [r3, #8]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d101      	bne.n	8012722 <pifI2cDevice_Write+0x22>
 801271e:	2300      	movs	r3, #0
 8012720:	e08e      	b.n	8012840 <pifI2cDevice_Write+0x140>
	if (p_port->__use_device) {
 8012722:	69fb      	ldr	r3, [r7, #28]
 8012724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012726:	2b00      	cmp	r3, #0
 8012728:	d00f      	beq.n	801274a <pifI2cDevice_Write+0x4a>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_INFO, "I2CW:%u Addr:%Xh Use Addr:%Xh", __LINE__, p_owner->addr, p_port->__use_device->addr);
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	781b      	ldrb	r3, [r3, #0]
 801272e:	461a      	mov	r2, r3
 8012730:	69fb      	ldr	r3, [r7, #28]
 8012732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012734:	781b      	ldrb	r3, [r3, #0]
 8012736:	b2db      	uxtb	r3, r3
 8012738:	9300      	str	r3, [sp, #0]
 801273a:	4613      	mov	r3, r2
 801273c:	22d3      	movs	r2, #211	; 0xd3
 801273e:	4942      	ldr	r1, [pc, #264]	; (8012848 <pifI2cDevice_Write+0x148>)
 8012740:	2002      	movs	r0, #2
 8012742:	f000 ff27 	bl	8013594 <pifLog_Printf>
#endif
		return FALSE;
 8012746:	2300      	movs	r3, #0
 8012748:	e07a      	b.n	8012840 <pifI2cDevice_Write+0x140>
	}

	p_port->__use_device = p_owner;
 801274a:	69fb      	ldr	r3, [r7, #28]
 801274c:	68fa      	ldr	r2, [r7, #12]
 801274e:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_RUN;
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	2201      	movs	r2, #1
 8012754:	709a      	strb	r2, [r3, #2]
	ptr = 0;
 8012756:	2300      	movs	r3, #0
 8012758:	627b      	str	r3, [r7, #36]	; 0x24
	while (size) {
 801275a:	e048      	b.n	80127ee <pifI2cDevice_Write+0xee>
		len = size > p_port->__max_transfer_size ? p_port->__max_transfer_size : size;
 801275c:	69fb      	ldr	r3, [r7, #28]
 801275e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012760:	461a      	mov	r2, r3
 8012762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012764:	4293      	cmp	r3, r2
 8012766:	bf28      	it	cs
 8012768:	4613      	movcs	r3, r2
 801276a:	76fb      	strb	r3, [r7, #27]
		switch ((*p_port->act_write)(p_owner->addr, iaddr + ptr, isize, p_data + ptr, len)) {
 801276c:	69fb      	ldr	r3, [r7, #28]
 801276e:	689c      	ldr	r4, [r3, #8]
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	7818      	ldrb	r0, [r3, #0]
 8012774:	68ba      	ldr	r2, [r7, #8]
 8012776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012778:	18d1      	adds	r1, r2, r3
 801277a:	683a      	ldr	r2, [r7, #0]
 801277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801277e:	18d5      	adds	r5, r2, r3
 8012780:	7efb      	ldrb	r3, [r7, #27]
 8012782:	b29b      	uxth	r3, r3
 8012784:	79fa      	ldrb	r2, [r7, #7]
 8012786:	9300      	str	r3, [sp, #0]
 8012788:	462b      	mov	r3, r5
 801278a:	47a0      	blx	r4
 801278c:	4603      	mov	r3, r0
 801278e:	2b02      	cmp	r3, #2
 8012790:	d021      	beq.n	80127d6 <pifI2cDevice_Write+0xd6>
 8012792:	2b02      	cmp	r3, #2
 8012794:	dc23      	bgt.n	80127de <pifI2cDevice_Write+0xde>
 8012796:	2b00      	cmp	r3, #0
 8012798:	d001      	beq.n	801279e <pifI2cDevice_Write+0x9e>
 801279a:	2b01      	cmp	r3, #1
				goto fail;
			}
			break;

		case IR_COMPLETE:
			break;
 801279c:	e01f      	b.n	80127de <pifI2cDevice_Write+0xde>
			timer1ms = pif_cumulative_timer1ms;
 801279e:	4b2b      	ldr	r3, [pc, #172]	; (801284c <pifI2cDevice_Write+0x14c>)
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	617b      	str	r3, [r7, #20]
			while (p_owner->_state == IS_RUN) {
 80127a4:	e00a      	b.n	80127bc <pifI2cDevice_Write+0xbc>
				if (pif_cumulative_timer1ms - timer1ms > p_owner->timeout) {
 80127a6:	4b29      	ldr	r3, [pc, #164]	; (801284c <pifI2cDevice_Write+0x14c>)
 80127a8:	681a      	ldr	r2, [r3, #0]
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	1ad3      	subs	r3, r2, r3
 80127ae:	68fa      	ldr	r2, [r7, #12]
 80127b0:	7852      	ldrb	r2, [r2, #1]
 80127b2:	4293      	cmp	r3, r2
 80127b4:	d902      	bls.n	80127bc <pifI2cDevice_Write+0xbc>
					line = __LINE__;
 80127b6:	23e3      	movs	r3, #227	; 0xe3
 80127b8:	623b      	str	r3, [r7, #32]
					goto fail;
 80127ba:	e023      	b.n	8012804 <pifI2cDevice_Write+0x104>
			while (p_owner->_state == IS_RUN) {
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	789b      	ldrb	r3, [r3, #2]
 80127c0:	b2db      	uxtb	r3, r3
 80127c2:	2b01      	cmp	r3, #1
 80127c4:	d0ef      	beq.n	80127a6 <pifI2cDevice_Write+0xa6>
			if (p_owner->_state == IS_ERROR) {
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	789b      	ldrb	r3, [r3, #2]
 80127ca:	b2db      	uxtb	r3, r3
 80127cc:	2b03      	cmp	r3, #3
 80127ce:	d105      	bne.n	80127dc <pifI2cDevice_Write+0xdc>
				line = __LINE__;
 80127d0:	23ea      	movs	r3, #234	; 0xea
 80127d2:	623b      	str	r3, [r7, #32]
				goto fail;
 80127d4:	e016      	b.n	8012804 <pifI2cDevice_Write+0x104>

		case IR_ERROR:
#ifndef __PIF_NO_LOG__
			line = __LINE__;
 80127d6:	23f5      	movs	r3, #245	; 0xf5
 80127d8:	623b      	str	r3, [r7, #32]
#endif
			goto fail;
 80127da:	e013      	b.n	8012804 <pifI2cDevice_Write+0x104>
			break;
 80127dc:	bf00      	nop
		}
		ptr += len;
 80127de:	7efb      	ldrb	r3, [r7, #27]
 80127e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127e2:	4413      	add	r3, r2
 80127e4:	627b      	str	r3, [r7, #36]	; 0x24
		size -= len;
 80127e6:	7efb      	ldrb	r3, [r7, #27]
 80127e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80127ea:	1ad3      	subs	r3, r2, r3
 80127ec:	63bb      	str	r3, [r7, #56]	; 0x38
	while (size) {
 80127ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d1b3      	bne.n	801275c <pifI2cDevice_Write+0x5c>
	}
	p_port->__use_device = NULL;
 80127f4:	69fb      	ldr	r3, [r7, #28]
 80127f6:	2200      	movs	r2, #0
 80127f8:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_IDLE;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	2200      	movs	r2, #0
 80127fe:	709a      	strb	r2, [r3, #2]
	return TRUE;
 8012800:	2301      	movs	r3, #1
 8012802:	e01d      	b.n	8012840 <pifI2cDevice_Write+0x140>

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "I2CW:%u A:%Xh R:%Xh E:%u", line, p_owner->addr, iaddr, pif_error);
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	781b      	ldrb	r3, [r3, #0]
 8012808:	461a      	mov	r2, r3
 801280a:	4b11      	ldr	r3, [pc, #68]	; (8012850 <pifI2cDevice_Write+0x150>)
 801280c:	781b      	ldrb	r3, [r3, #0]
 801280e:	9301      	str	r3, [sp, #4]
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	9300      	str	r3, [sp, #0]
 8012814:	4613      	mov	r3, r2
 8012816:	6a3a      	ldr	r2, [r7, #32]
 8012818:	490e      	ldr	r1, [pc, #56]	; (8012854 <pifI2cDevice_Write+0x154>)
 801281a:	2004      	movs	r0, #4
 801281c:	f000 feba 	bl	8013594 <pifLog_Printf>
#endif
	p_port->__use_device = NULL;
 8012820:	69fb      	ldr	r3, [r7, #28]
 8012822:	2200      	movs	r2, #0
 8012824:	62da      	str	r2, [r3, #44]	; 0x2c
	p_port->error_count++;
 8012826:	69fb      	ldr	r3, [r7, #28]
 8012828:	881b      	ldrh	r3, [r3, #0]
 801282a:	3301      	adds	r3, #1
 801282c:	b29a      	uxth	r2, r3
 801282e:	69fb      	ldr	r3, [r7, #28]
 8012830:	801a      	strh	r2, [r3, #0]
	p_owner->_state = IS_IDLE;
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	2200      	movs	r2, #0
 8012836:	709a      	strb	r2, [r3, #2]
	pif_error = E_TRANSFER_FAILED;
 8012838:	4b05      	ldr	r3, [pc, #20]	; (8012850 <pifI2cDevice_Write+0x150>)
 801283a:	220a      	movs	r2, #10
 801283c:	701a      	strb	r2, [r3, #0]
	return FALSE;
 801283e:	2300      	movs	r3, #0
}
 8012840:	4618      	mov	r0, r3
 8012842:	3728      	adds	r7, #40	; 0x28
 8012844:	46bd      	mov	sp, r7
 8012846:	bdb0      	pop	{r4, r5, r7, pc}
 8012848:	080265a8 	.word	0x080265a8
 801284c:	200020e0 	.word	0x200020e0
 8012850:	200020d1 	.word	0x200020d1
 8012854:	080265c8 	.word	0x080265c8

08012858 <pifI2cDevice_WriteRegByte>:

BOOL pifI2cDevice_WriteRegByte(PifI2cDevice* p_owner, uint8_t reg, uint8_t data)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b084      	sub	sp, #16
 801285c:	af02      	add	r7, sp, #8
 801285e:	6078      	str	r0, [r7, #4]
 8012860:	460b      	mov	r3, r1
 8012862:	70fb      	strb	r3, [r7, #3]
 8012864:	4613      	mov	r3, r2
 8012866:	70bb      	strb	r3, [r7, #2]
	return pifI2cDevice_Write(p_owner, reg, 1, &data, 1);
 8012868:	78f9      	ldrb	r1, [r7, #3]
 801286a:	1cbb      	adds	r3, r7, #2
 801286c:	2201      	movs	r2, #1
 801286e:	9200      	str	r2, [sp, #0]
 8012870:	2201      	movs	r2, #1
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f7ff ff44 	bl	8012700 <pifI2cDevice_Write>
 8012878:	4603      	mov	r3, r0
}
 801287a:	4618      	mov	r0, r3
 801287c:	3708      	adds	r7, #8
 801287e:	46bd      	mov	sp, r7
 8012880:	bd80      	pop	{r7, pc}
	...

08012884 <pifI2cDevice_WriteRegBit8>:
{
	return pifI2cDevice_Write(p_owner, reg, 1, p_data, size);
}

BOOL pifI2cDevice_WriteRegBit8(PifI2cDevice* p_owner, uint8_t reg, PifI2cRegField field, uint8_t data)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b086      	sub	sp, #24
 8012888:	af02      	add	r7, sp, #8
 801288a:	6078      	str	r0, [r7, #4]
 801288c:	4608      	mov	r0, r1
 801288e:	4611      	mov	r1, r2
 8012890:	461a      	mov	r2, r3
 8012892:	4603      	mov	r3, r0
 8012894:	70fb      	strb	r3, [r7, #3]
 8012896:	460b      	mov	r3, r1
 8012898:	803b      	strh	r3, [r7, #0]
 801289a:	4613      	mov	r3, r2
 801289c:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp, org, shift, mask;

	shift = field >> 8;
 801289e:	883b      	ldrh	r3, [r7, #0]
 80128a0:	0a1b      	lsrs	r3, r3, #8
 80128a2:	b29b      	uxth	r3, r3
 80128a4:	73fb      	strb	r3, [r7, #15]
	mask = (1 << (field & 0xFF)) - 1;
 80128a6:	883b      	ldrh	r3, [r7, #0]
 80128a8:	b2db      	uxtb	r3, r3
 80128aa:	2201      	movs	r2, #1
 80128ac:	fa02 f303 	lsl.w	r3, r2, r3
 80128b0:	b2db      	uxtb	r3, r3
 80128b2:	3b01      	subs	r3, #1
 80128b4:	73bb      	strb	r3, [r7, #14]

	if (data > mask) {
 80128b6:	78ba      	ldrb	r2, [r7, #2]
 80128b8:	7bbb      	ldrb	r3, [r7, #14]
 80128ba:	429a      	cmp	r2, r3
 80128bc:	d904      	bls.n	80128c8 <pifI2cDevice_WriteRegBit8+0x44>
		pif_error = E_WRONG_DATA;
 80128be:	4b21      	ldr	r3, [pc, #132]	; (8012944 <pifI2cDevice_WriteRegBit8+0xc0>)
 80128c0:	2206      	movs	r2, #6
 80128c2:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80128c4:	2300      	movs	r3, #0
 80128c6:	e039      	b.n	801293c <pifI2cDevice_WriteRegBit8+0xb8>
	}
	if (!pifI2cDevice_Read(p_owner, reg, 1, &org, 1)) return FALSE;
 80128c8:	78f9      	ldrb	r1, [r7, #3]
 80128ca:	f107 030c 	add.w	r3, r7, #12
 80128ce:	2201      	movs	r2, #1
 80128d0:	9200      	str	r2, [sp, #0]
 80128d2:	2201      	movs	r2, #1
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f7ff fde5 	bl	80124a4 <pifI2cDevice_Read>
 80128da:	4603      	mov	r3, r0
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d101      	bne.n	80128e4 <pifI2cDevice_WriteRegBit8+0x60>
 80128e0:	2300      	movs	r3, #0
 80128e2:	e02b      	b.n	801293c <pifI2cDevice_WriteRegBit8+0xb8>

	if (((org >> shift) & mask) != data) {
 80128e4:	7b3b      	ldrb	r3, [r7, #12]
 80128e6:	461a      	mov	r2, r3
 80128e8:	7bfb      	ldrb	r3, [r7, #15]
 80128ea:	411a      	asrs	r2, r3
 80128ec:	7bbb      	ldrb	r3, [r7, #14]
 80128ee:	401a      	ands	r2, r3
 80128f0:	78bb      	ldrb	r3, [r7, #2]
 80128f2:	429a      	cmp	r2, r3
 80128f4:	d021      	beq.n	801293a <pifI2cDevice_WriteRegBit8+0xb6>
		tmp = (org & ~(mask << shift)) | (data << shift);
 80128f6:	7bba      	ldrb	r2, [r7, #14]
 80128f8:	7bfb      	ldrb	r3, [r7, #15]
 80128fa:	fa02 f303 	lsl.w	r3, r2, r3
 80128fe:	b25b      	sxtb	r3, r3
 8012900:	43db      	mvns	r3, r3
 8012902:	b25a      	sxtb	r2, r3
 8012904:	7b3b      	ldrb	r3, [r7, #12]
 8012906:	b25b      	sxtb	r3, r3
 8012908:	4013      	ands	r3, r2
 801290a:	b25a      	sxtb	r2, r3
 801290c:	78b9      	ldrb	r1, [r7, #2]
 801290e:	7bfb      	ldrb	r3, [r7, #15]
 8012910:	fa01 f303 	lsl.w	r3, r1, r3
 8012914:	b25b      	sxtb	r3, r3
 8012916:	4313      	orrs	r3, r2
 8012918:	b25b      	sxtb	r3, r3
 801291a:	b2db      	uxtb	r3, r3
 801291c:	737b      	strb	r3, [r7, #13]
		if (!pifI2cDevice_Write(p_owner, reg, 1, &tmp, 1)) return FALSE;
 801291e:	78f9      	ldrb	r1, [r7, #3]
 8012920:	f107 030d 	add.w	r3, r7, #13
 8012924:	2201      	movs	r2, #1
 8012926:	9200      	str	r2, [sp, #0]
 8012928:	2201      	movs	r2, #1
 801292a:	6878      	ldr	r0, [r7, #4]
 801292c:	f7ff fee8 	bl	8012700 <pifI2cDevice_Write>
 8012930:	4603      	mov	r3, r0
 8012932:	2b00      	cmp	r3, #0
 8012934:	d101      	bne.n	801293a <pifI2cDevice_WriteRegBit8+0xb6>
 8012936:	2300      	movs	r3, #0
 8012938:	e000      	b.n	801293c <pifI2cDevice_WriteRegBit8+0xb8>
	}
    return TRUE;
 801293a:	2301      	movs	r3, #1
}
 801293c:	4618      	mov	r0, r3
 801293e:	3710      	adds	r7, #16
 8012940:	46bd      	mov	sp, r7
 8012942:	bd80      	pop	{r7, pc}
 8012944:	200020d1 	.word	0x200020d1

08012948 <pifI2cPort_sigEndTransfer>:
	}
    return TRUE;
}

void pifI2cPort_sigEndTransfer(PifI2cPort* p_owner, BOOL result)
{
 8012948:	b480      	push	{r7}
 801294a:	b083      	sub	sp, #12
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
 8012950:	460b      	mov	r3, r1
 8012952:	70fb      	strb	r3, [r7, #3]
	if (!p_owner->__use_device) return;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012958:	2b00      	cmp	r3, #0
 801295a:	d009      	beq.n	8012970 <pifI2cPort_sigEndTransfer+0x28>
	p_owner->__use_device->_state = result ? IS_COMPLETE : IS_ERROR;
 801295c:	78fb      	ldrb	r3, [r7, #3]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d001      	beq.n	8012966 <pifI2cPort_sigEndTransfer+0x1e>
 8012962:	2202      	movs	r2, #2
 8012964:	e000      	b.n	8012968 <pifI2cPort_sigEndTransfer+0x20>
 8012966:	2203      	movs	r2, #3
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801296c:	709a      	strb	r2, [r3, #2]
 801296e:	e000      	b.n	8012972 <pifI2cPort_sigEndTransfer+0x2a>
	if (!p_owner->__use_device) return;
 8012970:	bf00      	nop
}
 8012972:	370c      	adds	r7, #12
 8012974:	46bd      	mov	sp, r7
 8012976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297a:	4770      	bx	lr

0801297c <pifFixList_Init>:
}

// ---------- PIF Fixed Linked List ----------

BOOL pifFixList_Init(PifFixList* p_owner, int size, int max_count)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b088      	sub	sp, #32
 8012980:	af00      	add	r7, sp, #0
 8012982:	60f8      	str	r0, [r7, #12]
 8012984:	60b9      	str	r1, [r7, #8]
 8012986:	607a      	str	r2, [r7, #4]
	char* p_buffer;
	PifFixListIterator p_node;

	if (!p_owner || !size || !max_count) {
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d005      	beq.n	801299a <pifFixList_Init+0x1e>
 801298e:	68bb      	ldr	r3, [r7, #8]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d002      	beq.n	801299a <pifFixList_Init+0x1e>
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d104      	bne.n	80129a4 <pifFixList_Init+0x28>
		pif_error = E_INVALID_PARAM;
 801299a:	4b27      	ldr	r3, [pc, #156]	; (8012a38 <pifFixList_Init+0xbc>)
 801299c:	2201      	movs	r2, #1
 801299e:	701a      	strb	r2, [r3, #0]
        return FALSE;
 80129a0:	2300      	movs	r3, #0
 80129a2:	e045      	b.n	8012a30 <pifFixList_Init+0xb4>
	}

	p_buffer = calloc(2 * sizeof(PifFixListIterator) + size, max_count);
 80129a4:	68bb      	ldr	r3, [r7, #8]
 80129a6:	3308      	adds	r3, #8
 80129a8:	687a      	ldr	r2, [r7, #4]
 80129aa:	4611      	mov	r1, r2
 80129ac:	4618      	mov	r0, r3
 80129ae:	f00f f9c9 	bl	8021d44 <calloc>
 80129b2:	4603      	mov	r3, r0
 80129b4:	61fb      	str	r3, [r7, #28]
	if (!p_buffer) goto fail;
 80129b6:	69fb      	ldr	r3, [r7, #28]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d033      	beq.n	8012a24 <pifFixList_Init+0xa8>

	p_owner->p_node = (PifFixListIterator)p_buffer;
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	69fa      	ldr	r2, [r7, #28]
 80129c0:	60da      	str	r2, [r3, #12]
	p_owner->size = size;
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	68ba      	ldr	r2, [r7, #8]
 80129c6:	601a      	str	r2, [r3, #0]
	p_owner->max_count = max_count;
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	687a      	ldr	r2, [r7, #4]
 80129cc:	605a      	str	r2, [r3, #4]
	p_owner->count = 0;
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	2200      	movs	r2, #0
 80129d2:	609a      	str	r2, [r3, #8]

	p_owner->p_first = NULL;
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	2200      	movs	r2, #0
 80129d8:	611a      	str	r2, [r3, #16]

	p_node = p_owner->p_node;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	68db      	ldr	r3, [r3, #12]
 80129de:	61bb      	str	r3, [r7, #24]
	p_owner->p_free = p_node;
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	69ba      	ldr	r2, [r7, #24]
 80129e4:	615a      	str	r2, [r3, #20]
	for (int i = 1; i < max_count; i++) {
 80129e6:	2301      	movs	r3, #1
 80129e8:	617b      	str	r3, [r7, #20]
 80129ea:	e00f      	b.n	8012a0c <pifFixList_Init+0x90>
		p_buffer += 2 * sizeof(PifFixListIterator) + size;
 80129ec:	68bb      	ldr	r3, [r7, #8]
 80129ee:	3308      	adds	r3, #8
 80129f0:	69fa      	ldr	r2, [r7, #28]
 80129f2:	4413      	add	r3, r2
 80129f4:	61fb      	str	r3, [r7, #28]
		p_node->p_next = (PifFixListIterator)p_buffer;
 80129f6:	69bb      	ldr	r3, [r7, #24]
 80129f8:	69fa      	ldr	r2, [r7, #28]
 80129fa:	601a      	str	r2, [r3, #0]
		p_node->p_prev = NULL;
 80129fc:	69bb      	ldr	r3, [r7, #24]
 80129fe:	2200      	movs	r2, #0
 8012a00:	605a      	str	r2, [r3, #4]
		p_node = (PifFixListIterator)p_buffer;
 8012a02:	69fb      	ldr	r3, [r7, #28]
 8012a04:	61bb      	str	r3, [r7, #24]
	for (int i = 1; i < max_count; i++) {
 8012a06:	697b      	ldr	r3, [r7, #20]
 8012a08:	3301      	adds	r3, #1
 8012a0a:	617b      	str	r3, [r7, #20]
 8012a0c:	697a      	ldr	r2, [r7, #20]
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	429a      	cmp	r2, r3
 8012a12:	dbeb      	blt.n	80129ec <pifFixList_Init+0x70>
	}
	p_node->p_next = NULL;
 8012a14:	69bb      	ldr	r3, [r7, #24]
 8012a16:	2200      	movs	r2, #0
 8012a18:	601a      	str	r2, [r3, #0]
	p_node->p_prev = NULL;
 8012a1a:	69bb      	ldr	r3, [r7, #24]
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	605a      	str	r2, [r3, #4]

	return TRUE;
 8012a20:	2301      	movs	r3, #1
 8012a22:	e005      	b.n	8012a30 <pifFixList_Init+0xb4>
	if (!p_buffer) goto fail;
 8012a24:	bf00      	nop

fail:
	pifFixList_Clear(p_owner, NULL);
 8012a26:	2100      	movs	r1, #0
 8012a28:	68f8      	ldr	r0, [r7, #12]
 8012a2a:	f000 f807 	bl	8012a3c <pifFixList_Clear>
	return FALSE;
 8012a2e:	2300      	movs	r3, #0
}
 8012a30:	4618      	mov	r0, r3
 8012a32:	3720      	adds	r7, #32
 8012a34:	46bd      	mov	sp, r7
 8012a36:	bd80      	pop	{r7, pc}
 8012a38:	200020d1 	.word	0x200020d1

08012a3c <pifFixList_Clear>:

void pifFixList_Clear(PifFixList* p_owner, PifEvtFixListClear evt_clear)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b084      	sub	sp, #16
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
 8012a44:	6039      	str	r1, [r7, #0]
	if (p_owner->p_node) {
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	68db      	ldr	r3, [r3, #12]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d01f      	beq.n	8012a8e <pifFixList_Clear+0x52>
		if (evt_clear) {
 8012a4e:	683b      	ldr	r3, [r7, #0]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d014      	beq.n	8012a7e <pifFixList_Clear+0x42>
			PifFixListIterator it = p_owner->p_first;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	691b      	ldr	r3, [r3, #16]
 8012a58:	60fb      	str	r3, [r7, #12]
			while (it) {
 8012a5a:	e00d      	b.n	8012a78 <pifFixList_Clear+0x3c>
				(*evt_clear)(it->data);
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	f103 0208 	add.w	r2, r3, #8
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	4610      	mov	r0, r2
 8012a66:	4798      	blx	r3
				it = it ? it->p_next : NULL;
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d002      	beq.n	8012a74 <pifFixList_Clear+0x38>
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	e000      	b.n	8012a76 <pifFixList_Clear+0x3a>
 8012a74:	2300      	movs	r3, #0
 8012a76:	60fb      	str	r3, [r7, #12]
			while (it) {
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d1ee      	bne.n	8012a5c <pifFixList_Clear+0x20>
			}
		}

		free(p_owner->p_node);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	68db      	ldr	r3, [r3, #12]
 8012a82:	4618      	mov	r0, r3
 8012a84:	f00f f998 	bl	8021db8 <free>
		p_owner->p_node = NULL;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	60da      	str	r2, [r3, #12]
	}

	p_owner->size = 0;
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	2200      	movs	r2, #0
 8012a92:	601a      	str	r2, [r3, #0]
	p_owner->max_count = 0;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	2200      	movs	r2, #0
 8012a98:	605a      	str	r2, [r3, #4]
}
 8012a9a:	bf00      	nop
 8012a9c:	3710      	adds	r7, #16
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	bd80      	pop	{r7, pc}

08012aa2 <pifFixList_AddFirst>:

void* pifFixList_AddFirst(PifFixList* p_owner)
{
 8012aa2:	b580      	push	{r7, lr}
 8012aa4:	b084      	sub	sp, #16
 8012aa6:	af00      	add	r7, sp, #0
 8012aa8:	6078      	str	r0, [r7, #4]
	char* p;

	if (p_owner->p_free == NULL) return NULL;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	695b      	ldr	r3, [r3, #20]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d101      	bne.n	8012ab6 <pifFixList_AddFirst+0x14>
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	e025      	b.n	8012b02 <pifFixList_AddFirst+0x60>

	PifFixListIterator p_node = p_owner->p_free;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	695b      	ldr	r3, [r3, #20]
 8012aba:	60fb      	str	r3, [r7, #12]
	p_owner->p_free = p_node->p_next;
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	681a      	ldr	r2, [r3, #0]
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	615a      	str	r2, [r3, #20]

	p_node->p_next = p_owner->p_first;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	691a      	ldr	r2, [r3, #16]
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	601a      	str	r2, [r3, #0]
	if (p_owner->p_first) {
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	691b      	ldr	r3, [r3, #16]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d003      	beq.n	8012adc <pifFixList_AddFirst+0x3a>
		p_owner->p_first->p_prev = p_node;
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	691b      	ldr	r3, [r3, #16]
 8012ad8:	68fa      	ldr	r2, [r7, #12]
 8012ada:	605a      	str	r2, [r3, #4]
	}
	p_owner->p_first = p_node;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	68fa      	ldr	r2, [r7, #12]
 8012ae0:	611a      	str	r2, [r3, #16]
	p_owner->count++;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	689b      	ldr	r3, [r3, #8]
 8012ae6:	1c5a      	adds	r2, r3, #1
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	609a      	str	r2, [r3, #8]

	p = (char*)p_node + 2 * sizeof(PifFixListIterator);
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	3308      	adds	r3, #8
 8012af0:	60bb      	str	r3, [r7, #8]
	memset(p, 0, p_owner->size);
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	461a      	mov	r2, r3
 8012af8:	2100      	movs	r1, #0
 8012afa:	68b8      	ldr	r0, [r7, #8]
 8012afc:	f00f f972 	bl	8021de4 <memset>
    return p;
 8012b00:	68bb      	ldr	r3, [r7, #8]
}
 8012b02:	4618      	mov	r0, r3
 8012b04:	3710      	adds	r7, #16
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd80      	pop	{r7, pc}

08012b0a <pifFixList_Remove>:

void pifFixList_Remove(PifFixList* p_owner, void* p_data)
{
 8012b0a:	b480      	push	{r7}
 8012b0c:	b085      	sub	sp, #20
 8012b0e:	af00      	add	r7, sp, #0
 8012b10:	6078      	str	r0, [r7, #4]
 8012b12:	6039      	str	r1, [r7, #0]
	PifFixListIterator p_node = (PifFixListIterator)((uint8_t*)p_data - 2 * sizeof(PifFixListIterator));
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	3b08      	subs	r3, #8
 8012b18:	60fb      	str	r3, [r7, #12]

	if (p_node->p_prev) {
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	685b      	ldr	r3, [r3, #4]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d005      	beq.n	8012b2e <pifFixList_Remove+0x24>
		p_node->p_prev->p_next = p_node->p_next;
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	685b      	ldr	r3, [r3, #4]
 8012b26:	68fa      	ldr	r2, [r7, #12]
 8012b28:	6812      	ldr	r2, [r2, #0]
 8012b2a:	601a      	str	r2, [r3, #0]
 8012b2c:	e003      	b.n	8012b36 <pifFixList_Remove+0x2c>
	}
	else {
		p_owner->p_first = p_node->p_next;
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	681a      	ldr	r2, [r3, #0]
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	611a      	str	r2, [r3, #16]
	}
	if (p_node->p_next) {
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d004      	beq.n	8012b48 <pifFixList_Remove+0x3e>
		p_node->p_next->p_prev = p_node->p_prev;
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	68fa      	ldr	r2, [r7, #12]
 8012b44:	6852      	ldr	r2, [r2, #4]
 8012b46:	605a      	str	r2, [r3, #4]
	}
	p_node->p_next = p_owner->p_free;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	695a      	ldr	r2, [r3, #20]
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	601a      	str	r2, [r3, #0]
	p_node->p_prev = NULL;
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	2200      	movs	r2, #0
 8012b54:	605a      	str	r2, [r3, #4]
	p_owner->p_free = p_node;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	68fa      	ldr	r2, [r7, #12]
 8012b5a:	615a      	str	r2, [r3, #20]

	p_owner->count--;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	689b      	ldr	r3, [r3, #8]
 8012b60:	1e5a      	subs	r2, r3, #1
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	609a      	str	r2, [r3, #8]
}
 8012b66:	bf00      	nop
 8012b68:	3714      	adds	r7, #20
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b70:	4770      	bx	lr

08012b72 <pifFixList_Count>:

#ifdef __PIF_NO_USE_INLINE__

int pifFixList_Count(PifFixList* p_owner)
{
 8012b72:	b480      	push	{r7}
 8012b74:	b083      	sub	sp, #12
 8012b76:	af00      	add	r7, sp, #0
 8012b78:	6078      	str	r0, [r7, #4]
	return p_owner->count;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	689b      	ldr	r3, [r3, #8]
}
 8012b7e:	4618      	mov	r0, r3
 8012b80:	370c      	adds	r7, #12
 8012b82:	46bd      	mov	sp, r7
 8012b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b88:	4770      	bx	lr

08012b8a <pifFixList_Begin>:

PifFixListIterator pifFixList_Begin(PifFixList* p_owner)
{
 8012b8a:	b480      	push	{r7}
 8012b8c:	b083      	sub	sp, #12
 8012b8e:	af00      	add	r7, sp, #0
 8012b90:	6078      	str	r0, [r7, #4]
	return p_owner->p_first;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	691b      	ldr	r3, [r3, #16]
}
 8012b96:	4618      	mov	r0, r3
 8012b98:	370c      	adds	r7, #12
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba0:	4770      	bx	lr

08012ba2 <pifFixList_Next>:

PifFixListIterator pifFixList_Next(PifFixListIterator it)
{
 8012ba2:	b480      	push	{r7}
 8012ba4:	b083      	sub	sp, #12
 8012ba6:	af00      	add	r7, sp, #0
 8012ba8:	6078      	str	r0, [r7, #4]
	return it ? it->p_next : NULL;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d002      	beq.n	8012bb6 <pifFixList_Next+0x14>
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	e000      	b.n	8012bb8 <pifFixList_Next+0x16>
 8012bb6:	2300      	movs	r3, #0
}
 8012bb8:	4618      	mov	r0, r3
 8012bba:	370c      	adds	r7, #12
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc2:	4770      	bx	lr

08012bc4 <_cmdHelp>:
		{ NULL, NULL, NULL }
};


static int _cmdHelp(int argc, char *argv[])
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b084      	sub	sp, #16
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
 8012bcc:	6039      	str	r1, [r7, #0]
    int i;

    (void)argc;
    (void)argv;

    pifLog_Print(LT_NONE, "Available PIF commands:\n");
 8012bce:	492d      	ldr	r1, [pc, #180]	; (8012c84 <_cmdHelp+0xc0>)
 8012bd0:	2000      	movs	r0, #0
 8012bd2:	f000 fc51 	bl	8013478 <pifLog_Print>
    i = 0;
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	60fb      	str	r3, [r7, #12]
    while (c_cmd_table[i].p_name) {
 8012bda:	e018      	b.n	8012c0e <_cmdHelp+0x4a>
        pifLog_Printf(LT_NONE, "  %s\t%s\n", c_cmd_table[i].p_name, c_cmd_table[i].p_help);
 8012bdc:	492a      	ldr	r1, [pc, #168]	; (8012c88 <_cmdHelp+0xc4>)
 8012bde:	68fa      	ldr	r2, [r7, #12]
 8012be0:	4613      	mov	r3, r2
 8012be2:	005b      	lsls	r3, r3, #1
 8012be4:	4413      	add	r3, r2
 8012be6:	009b      	lsls	r3, r3, #2
 8012be8:	440b      	add	r3, r1
 8012bea:	6819      	ldr	r1, [r3, #0]
 8012bec:	4826      	ldr	r0, [pc, #152]	; (8012c88 <_cmdHelp+0xc4>)
 8012bee:	68fa      	ldr	r2, [r7, #12]
 8012bf0:	4613      	mov	r3, r2
 8012bf2:	005b      	lsls	r3, r3, #1
 8012bf4:	4413      	add	r3, r2
 8012bf6:	009b      	lsls	r3, r3, #2
 8012bf8:	4403      	add	r3, r0
 8012bfa:	3308      	adds	r3, #8
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	460a      	mov	r2, r1
 8012c00:	4922      	ldr	r1, [pc, #136]	; (8012c8c <_cmdHelp+0xc8>)
 8012c02:	2000      	movs	r0, #0
 8012c04:	f000 fcc6 	bl	8013594 <pifLog_Printf>
        i++;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	3301      	adds	r3, #1
 8012c0c:	60fb      	str	r3, [r7, #12]
    while (c_cmd_table[i].p_name) {
 8012c0e:	491e      	ldr	r1, [pc, #120]	; (8012c88 <_cmdHelp+0xc4>)
 8012c10:	68fa      	ldr	r2, [r7, #12]
 8012c12:	4613      	mov	r3, r2
 8012c14:	005b      	lsls	r3, r3, #1
 8012c16:	4413      	add	r3, r2
 8012c18:	009b      	lsls	r3, r3, #2
 8012c1a:	440b      	add	r3, r1
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d1dc      	bne.n	8012bdc <_cmdHelp+0x18>
    }

    pifLog_Print(LT_NONE, "\nAvailable user commands:\n");
 8012c22:	491b      	ldr	r1, [pc, #108]	; (8012c90 <_cmdHelp+0xcc>)
 8012c24:	2000      	movs	r0, #0
 8012c26:	f000 fc27 	bl	8013478 <pifLog_Print>
    i = 0;
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	60fb      	str	r3, [r7, #12]
    while (s_log.p_cmd_table[1][i].p_name) {
 8012c2e:	e019      	b.n	8012c64 <_cmdHelp+0xa0>
        pifLog_Printf(LT_NONE, "  %s\t%s\n", s_log.p_cmd_table[1][i].p_name, s_log.p_cmd_table[1][i].p_help);
 8012c30:	4b18      	ldr	r3, [pc, #96]	; (8012c94 <_cmdHelp+0xd0>)
 8012c32:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012c34:	68fa      	ldr	r2, [r7, #12]
 8012c36:	4613      	mov	r3, r2
 8012c38:	005b      	lsls	r3, r3, #1
 8012c3a:	4413      	add	r3, r2
 8012c3c:	009b      	lsls	r3, r3, #2
 8012c3e:	440b      	add	r3, r1
 8012c40:	6818      	ldr	r0, [r3, #0]
 8012c42:	4b14      	ldr	r3, [pc, #80]	; (8012c94 <_cmdHelp+0xd0>)
 8012c44:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012c46:	68fa      	ldr	r2, [r7, #12]
 8012c48:	4613      	mov	r3, r2
 8012c4a:	005b      	lsls	r3, r3, #1
 8012c4c:	4413      	add	r3, r2
 8012c4e:	009b      	lsls	r3, r3, #2
 8012c50:	440b      	add	r3, r1
 8012c52:	689b      	ldr	r3, [r3, #8]
 8012c54:	4602      	mov	r2, r0
 8012c56:	490d      	ldr	r1, [pc, #52]	; (8012c8c <_cmdHelp+0xc8>)
 8012c58:	2000      	movs	r0, #0
 8012c5a:	f000 fc9b 	bl	8013594 <pifLog_Printf>
        i++;
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	3301      	adds	r3, #1
 8012c62:	60fb      	str	r3, [r7, #12]
    while (s_log.p_cmd_table[1][i].p_name) {
 8012c64:	4b0b      	ldr	r3, [pc, #44]	; (8012c94 <_cmdHelp+0xd0>)
 8012c66:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012c68:	68fa      	ldr	r2, [r7, #12]
 8012c6a:	4613      	mov	r3, r2
 8012c6c:	005b      	lsls	r3, r3, #1
 8012c6e:	4413      	add	r3, r2
 8012c70:	009b      	lsls	r3, r3, #2
 8012c72:	440b      	add	r3, r1
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d1da      	bne.n	8012c30 <_cmdHelp+0x6c>
    }
	return PIF_LOG_CMD_NO_ERROR;
 8012c7a:	2300      	movs	r3, #0
}
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	3710      	adds	r7, #16
 8012c80:	46bd      	mov	sp, r7
 8012c82:	bd80      	pop	{r7, pc}
 8012c84:	0802668c 	.word	0x0802668c
 8012c88:	080281ec 	.word	0x080281ec
 8012c8c:	080266a8 	.word	0x080266a8
 8012c90:	080266b4 	.word	0x080266b4
 8012c94:	200020fc 	.word	0x200020fc

08012c98 <_cmdPrintVersion>:

static int _cmdPrintVersion(int argc, char* argv[])
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b084      	sub	sp, #16
 8012c9c:	af02      	add	r7, sp, #8
 8012c9e:	6078      	str	r0, [r7, #4]
 8012ca0:	6039      	str	r1, [r7, #0]
	(void)argc;
	(void)argv;

	pifLog_Printf(LT_NONE, "PIF Version: %d.%d.%d %s\n", PIF_VERSION_MAJOR, PIF_VERSION_MINOR, PIF_VERSION_PATCH, __DATE__);
 8012ca2:	4b07      	ldr	r3, [pc, #28]	; (8012cc0 <_cmdPrintVersion+0x28>)
 8012ca4:	9301      	str	r3, [sp, #4]
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	9300      	str	r3, [sp, #0]
 8012caa:	2301      	movs	r3, #1
 8012cac:	2200      	movs	r2, #0
 8012cae:	4905      	ldr	r1, [pc, #20]	; (8012cc4 <_cmdPrintVersion+0x2c>)
 8012cb0:	2000      	movs	r0, #0
 8012cb2:	f000 fc6f 	bl	8013594 <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 8012cb6:	2300      	movs	r3, #0
}
 8012cb8:	4618      	mov	r0, r3
 8012cba:	3708      	adds	r7, #8
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	bd80      	pop	{r7, pc}
 8012cc0:	080266ec 	.word	0x080266ec
 8012cc4:	080266d0 	.word	0x080266d0

08012cc8 <_cmdSetStatus>:

static int _cmdSetStatus(int argc, char* argv[])
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b086      	sub	sp, #24
 8012ccc:	af02      	add	r7, sp, #8
 8012cce:	6078      	str	r0, [r7, #4]
 8012cd0:	6039      	str	r1, [r7, #0]
	BOOL value;
	int i;

	if (argc == 1) {
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	2b01      	cmp	r3, #1
 8012cd6:	d137      	bne.n	8012d48 <_cmdSetStatus+0x80>
	   	pifLog_Printf(LT_NONE, "Task count: %d\n", pifTaskManager_Count());
 8012cd8:	f001 fe1e 	bl	8014918 <pifTaskManager_Count>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	461a      	mov	r2, r3
 8012ce0:	494a      	ldr	r1, [pc, #296]	; (8012e0c <_cmdSetStatus+0x144>)
 8012ce2:	2000      	movs	r0, #0
 8012ce4:	f000 fc56 	bl	8013594 <pifLog_Printf>
	   	pifLog_Printf(LT_NONE, "Error: %d\n", pif_error);
 8012ce8:	4b49      	ldr	r3, [pc, #292]	; (8012e10 <_cmdSetStatus+0x148>)
 8012cea:	781b      	ldrb	r3, [r3, #0]
 8012cec:	461a      	mov	r2, r3
 8012cee:	4949      	ldr	r1, [pc, #292]	; (8012e14 <_cmdSetStatus+0x14c>)
 8012cf0:	2000      	movs	r0, #0
 8012cf2:	f000 fc4f 	bl	8013594 <pifLog_Printf>
	   	pifLog_Printf(LT_NONE, "Flag:\n");
 8012cf6:	4948      	ldr	r1, [pc, #288]	; (8012e18 <_cmdSetStatus+0x150>)
 8012cf8:	2000      	movs	r0, #0
 8012cfa:	f000 fc4b 	bl	8013594 <pifLog_Printf>
	   	i = 0;
 8012cfe:	2300      	movs	r3, #0
 8012d00:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012d02:	e019      	b.n	8012d38 <_cmdSetStatus+0x70>
			pifLog_Printf(LT_NONE, "  %s(%s): %d\n", c_log_flags[i].p_name, c_log_flags[i].p_command, (pif_log_flag.all >> i) & 1);
 8012d04:	4a45      	ldr	r2, [pc, #276]	; (8012e1c <_cmdSetStatus+0x154>)
 8012d06:	68bb      	ldr	r3, [r7, #8]
 8012d08:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8012d0c:	4a43      	ldr	r2, [pc, #268]	; (8012e1c <_cmdSetStatus+0x154>)
 8012d0e:	68bb      	ldr	r3, [r7, #8]
 8012d10:	00db      	lsls	r3, r3, #3
 8012d12:	4413      	add	r3, r2
 8012d14:	6858      	ldr	r0, [r3, #4]
 8012d16:	4b42      	ldr	r3, [pc, #264]	; (8012e20 <_cmdSetStatus+0x158>)
 8012d18:	681a      	ldr	r2, [r3, #0]
 8012d1a:	68bb      	ldr	r3, [r7, #8]
 8012d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8012d20:	f003 0301 	and.w	r3, r3, #1
 8012d24:	9300      	str	r3, [sp, #0]
 8012d26:	4603      	mov	r3, r0
 8012d28:	460a      	mov	r2, r1
 8012d2a:	493e      	ldr	r1, [pc, #248]	; (8012e24 <_cmdSetStatus+0x15c>)
 8012d2c:	2000      	movs	r0, #0
 8012d2e:	f000 fc31 	bl	8013594 <pifLog_Printf>
			i++;
 8012d32:	68bb      	ldr	r3, [r7, #8]
 8012d34:	3301      	adds	r3, #1
 8012d36:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012d38:	4a38      	ldr	r2, [pc, #224]	; (8012e1c <_cmdSetStatus+0x154>)
 8012d3a:	68bb      	ldr	r3, [r7, #8]
 8012d3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d1df      	bne.n	8012d04 <_cmdSetStatus+0x3c>
		}
		return PIF_LOG_CMD_NO_ERROR;
 8012d44:	2300      	movs	r3, #0
 8012d46:	e05d      	b.n	8012e04 <_cmdSetStatus+0x13c>
	}
	else if (argc > 2) {
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	2b02      	cmp	r3, #2
 8012d4c:	dd58      	ble.n	8012e00 <_cmdSetStatus+0x138>
		switch (argv[2][0]) {
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	3308      	adds	r3, #8
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	781b      	ldrb	r3, [r3, #0]
 8012d56:	2b74      	cmp	r3, #116	; 0x74
 8012d58:	d015      	beq.n	8012d86 <_cmdSetStatus+0xbe>
 8012d5a:	2b74      	cmp	r3, #116	; 0x74
 8012d5c:	dc16      	bgt.n	8012d8c <_cmdSetStatus+0xc4>
 8012d5e:	2b66      	cmp	r3, #102	; 0x66
 8012d60:	d00e      	beq.n	8012d80 <_cmdSetStatus+0xb8>
 8012d62:	2b66      	cmp	r3, #102	; 0x66
 8012d64:	dc12      	bgt.n	8012d8c <_cmdSetStatus+0xc4>
 8012d66:	2b54      	cmp	r3, #84	; 0x54
 8012d68:	d00d      	beq.n	8012d86 <_cmdSetStatus+0xbe>
 8012d6a:	2b54      	cmp	r3, #84	; 0x54
 8012d6c:	dc0e      	bgt.n	8012d8c <_cmdSetStatus+0xc4>
 8012d6e:	2b46      	cmp	r3, #70	; 0x46
 8012d70:	d006      	beq.n	8012d80 <_cmdSetStatus+0xb8>
 8012d72:	2b46      	cmp	r3, #70	; 0x46
 8012d74:	dc0a      	bgt.n	8012d8c <_cmdSetStatus+0xc4>
 8012d76:	2b30      	cmp	r3, #48	; 0x30
 8012d78:	d002      	beq.n	8012d80 <_cmdSetStatus+0xb8>
 8012d7a:	2b31      	cmp	r3, #49	; 0x31
 8012d7c:	d003      	beq.n	8012d86 <_cmdSetStatus+0xbe>
 8012d7e:	e005      	b.n	8012d8c <_cmdSetStatus+0xc4>
		case '0':
		case 'F':
		case 'f':
			value = FALSE;
 8012d80:	2300      	movs	r3, #0
 8012d82:	73fb      	strb	r3, [r7, #15]
			break;
 8012d84:	e005      	b.n	8012d92 <_cmdSetStatus+0xca>

		case '1':
		case 'T':
		case 't':
			value = TRUE;
 8012d86:	2301      	movs	r3, #1
 8012d88:	73fb      	strb	r3, [r7, #15]
			break;
 8012d8a:	e002      	b.n	8012d92 <_cmdSetStatus+0xca>

		default:
			return PIF_LOG_CMD_INVALID_ARG;
 8012d8c:	f06f 0303 	mvn.w	r3, #3
 8012d90:	e038      	b.n	8012e04 <_cmdSetStatus+0x13c>
		}
		i = 0;
 8012d92:	2300      	movs	r3, #0
 8012d94:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012d96:	e02a      	b.n	8012dee <_cmdSetStatus+0x126>
			if (!strcmp(argv[1], c_log_flags[i].p_command)) {
 8012d98:	683b      	ldr	r3, [r7, #0]
 8012d9a:	3304      	adds	r3, #4
 8012d9c:	681a      	ldr	r2, [r3, #0]
 8012d9e:	491f      	ldr	r1, [pc, #124]	; (8012e1c <_cmdSetStatus+0x154>)
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	00db      	lsls	r3, r3, #3
 8012da4:	440b      	add	r3, r1
 8012da6:	685b      	ldr	r3, [r3, #4]
 8012da8:	4619      	mov	r1, r3
 8012daa:	4610      	mov	r0, r2
 8012dac:	f7ed fa14 	bl	80001d8 <strcmp>
 8012db0:	4603      	mov	r3, r0
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d118      	bne.n	8012de8 <_cmdSetStatus+0x120>
				if (value) {
 8012db6:	7bfb      	ldrb	r3, [r7, #15]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d009      	beq.n	8012dd0 <_cmdSetStatus+0x108>
					pif_log_flag.all |= 1L << i;
 8012dbc:	4b18      	ldr	r3, [pc, #96]	; (8012e20 <_cmdSetStatus+0x158>)
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	2101      	movs	r1, #1
 8012dc2:	68ba      	ldr	r2, [r7, #8]
 8012dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8012dc8:	4313      	orrs	r3, r2
 8012dca:	4a15      	ldr	r2, [pc, #84]	; (8012e20 <_cmdSetStatus+0x158>)
 8012dcc:	6013      	str	r3, [r2, #0]
 8012dce:	e009      	b.n	8012de4 <_cmdSetStatus+0x11c>
				}
				else {
					pif_log_flag.all &= ~(1L << i);
 8012dd0:	4b13      	ldr	r3, [pc, #76]	; (8012e20 <_cmdSetStatus+0x158>)
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	2101      	movs	r1, #1
 8012dd6:	68ba      	ldr	r2, [r7, #8]
 8012dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8012ddc:	43d2      	mvns	r2, r2
 8012dde:	4013      	ands	r3, r2
 8012de0:	4a0f      	ldr	r2, [pc, #60]	; (8012e20 <_cmdSetStatus+0x158>)
 8012de2:	6013      	str	r3, [r2, #0]
				}
				return PIF_LOG_CMD_NO_ERROR;
 8012de4:	2300      	movs	r3, #0
 8012de6:	e00d      	b.n	8012e04 <_cmdSetStatus+0x13c>
			}
			i++;
 8012de8:	68bb      	ldr	r3, [r7, #8]
 8012dea:	3301      	adds	r3, #1
 8012dec:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012dee:	4a0b      	ldr	r2, [pc, #44]	; (8012e1c <_cmdSetStatus+0x154>)
 8012df0:	68bb      	ldr	r3, [r7, #8]
 8012df2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d1ce      	bne.n	8012d98 <_cmdSetStatus+0xd0>
		}
		return PIF_LOG_CMD_INVALID_ARG;
 8012dfa:	f06f 0303 	mvn.w	r3, #3
 8012dfe:	e001      	b.n	8012e04 <_cmdSetStatus+0x13c>
	}
	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8012e00:	f06f 0302 	mvn.w	r3, #2
}
 8012e04:	4618      	mov	r0, r3
 8012e06:	3710      	adds	r7, #16
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bd80      	pop	{r7, pc}
 8012e0c:	080266f8 	.word	0x080266f8
 8012e10:	200020d1 	.word	0x200020d1
 8012e14:	08026708 	.word	0x08026708
 8012e18:	08026714 	.word	0x08026714
 8012e1c:	080281b8 	.word	0x080281b8
 8012e20:	200020f8 	.word	0x200020f8
 8012e24:	0802671c 	.word	0x0802671c

08012e28 <_getDebugString>:

static BOOL _getDebugString(PifLog* p_owner, PifActCommReceiveData act_receive_data)
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b084      	sub	sp, #16
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
 8012e30:	6039      	str	r1, [r7, #0]
    char tmp_char;
    BOOL str_get_done_flag = FALSE;
 8012e32:	2300      	movs	r3, #0
 8012e34:	73fb      	strb	r3, [r7, #15]
    static BOOL last_cr = FALSE;

	while ((*act_receive_data)(p_owner->p_comm, (uint8_t*)&tmp_char)) {
 8012e36:	e0a7      	b.n	8012f88 <_getDebugString+0x160>
        switch (tmp_char) {
 8012e38:	7bbb      	ldrb	r3, [r7, #14]
 8012e3a:	3b08      	subs	r3, #8
 8012e3c:	2b13      	cmp	r3, #19
 8012e3e:	d861      	bhi.n	8012f04 <_getDebugString+0xdc>
 8012e40:	a201      	add	r2, pc, #4	; (adr r2, 8012e48 <_getDebugString+0x20>)
 8012e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e46:	bf00      	nop
 8012e48:	08012e99 	.word	0x08012e99
 8012e4c:	08012f05 	.word	0x08012f05
 8012e50:	08012ee9 	.word	0x08012ee9
 8012e54:	08012f05 	.word	0x08012f05
 8012e58:	08012f05 	.word	0x08012f05
 8012e5c:	08012edd 	.word	0x08012edd
 8012e60:	08012f05 	.word	0x08012f05
 8012e64:	08012f05 	.word	0x08012f05
 8012e68:	08012f05 	.word	0x08012f05
 8012e6c:	08012f05 	.word	0x08012f05
 8012e70:	08012f05 	.word	0x08012f05
 8012e74:	08012f05 	.word	0x08012f05
 8012e78:	08012f05 	.word	0x08012f05
 8012e7c:	08012f05 	.word	0x08012f05
 8012e80:	08012f05 	.word	0x08012f05
 8012e84:	08012f05 	.word	0x08012f05
 8012e88:	08012f05 	.word	0x08012f05
 8012e8c:	08012f05 	.word	0x08012f05
 8012e90:	08012f05 	.word	0x08012f05
 8012e94:	08012eff 	.word	0x08012eff
        case '\b':
            if (p_owner->char_idx > 0) {
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d058      	beq.n	8012f54 <_getDebugString+0x12c>
            	while (!pifRingBuffer_PutString(p_owner->p_tx_buffer, "\b \b")) {
 8012ea2:	e001      	b.n	8012ea8 <_getDebugString+0x80>
            		pifTaskManager_Yield();
 8012ea4:	f001 fdb6 	bl	8014a14 <pifTaskManager_Yield>
            	while (!pifRingBuffer_PutString(p_owner->p_tx_buffer, "\b \b")) {
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eac:	493e      	ldr	r1, [pc, #248]	; (8012fa8 <_getDebugString+0x180>)
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f001 f842 	bl	8013f38 <pifRingBuffer_PutString>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d0f4      	beq.n	8012ea4 <_getDebugString+0x7c>
            	}
                p_owner->char_idx--;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ec0:	3b01      	subs	r3, #1
 8012ec2:	b2da      	uxtb	r2, r3
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                p_owner->p_rx_buffer[p_owner->char_idx] = 0;
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ece:	687a      	ldr	r2, [r7, #4]
 8012ed0:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012ed4:	4413      	add	r3, r2
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012eda:	e03b      	b.n	8012f54 <_getDebugString+0x12c>

        case '\r':
        	last_cr = TRUE;
 8012edc:	4b33      	ldr	r3, [pc, #204]	; (8012fac <_getDebugString+0x184>)
 8012ede:	2201      	movs	r2, #1
 8012ee0:	701a      	strb	r2, [r3, #0]
            str_get_done_flag = TRUE;
 8012ee2:	2301      	movs	r3, #1
 8012ee4:	73fb      	strb	r3, [r7, #15]
            break;
 8012ee6:	e038      	b.n	8012f5a <_getDebugString+0x132>

        case '\n':
            if (last_cr == TRUE) {
 8012ee8:	4b30      	ldr	r3, [pc, #192]	; (8012fac <_getDebugString+0x184>)
 8012eea:	781b      	ldrb	r3, [r3, #0]
 8012eec:	2b01      	cmp	r3, #1
 8012eee:	d103      	bne.n	8012ef8 <_getDebugString+0xd0>
            	last_cr = FALSE;
 8012ef0:	4b2e      	ldr	r3, [pc, #184]	; (8012fac <_getDebugString+0x184>)
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	701a      	strb	r2, [r3, #0]
            }
            else {
            	str_get_done_flag = TRUE;
            }
            break;
 8012ef6:	e030      	b.n	8012f5a <_getDebugString+0x132>
            	str_get_done_flag = TRUE;
 8012ef8:	2301      	movs	r3, #1
 8012efa:	73fb      	strb	r3, [r7, #15]
            break;
 8012efc:	e02d      	b.n	8012f5a <_getDebugString+0x132>

        case 0x1b:  // ESC-Key pressed
            str_get_done_flag = TRUE;
 8012efe:	2301      	movs	r3, #1
 8012f00:	73fb      	strb	r3, [r7, #15]
            break;
 8012f02:	e02a      	b.n	8012f5a <_getDebugString+0x132>

        default:
            if (p_owner->char_idx < p_owner->rx_buffer_size - 3) {
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012f0a:	461a      	mov	r2, r3
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012f12:	3b03      	subs	r3, #3
 8012f14:	429a      	cmp	r2, r3
 8012f16:	da1f      	bge.n	8012f58 <_getDebugString+0x130>
                while (!pifRingBuffer_PutByte(p_owner->p_tx_buffer, tmp_char)) {
 8012f18:	e001      	b.n	8012f1e <_getDebugString+0xf6>
                    pifTaskManager_Yield();
 8012f1a:	f001 fd7b 	bl	8014a14 <pifTaskManager_Yield>
                while (!pifRingBuffer_PutByte(p_owner->p_tx_buffer, tmp_char)) {
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f22:	7bba      	ldrb	r2, [r7, #14]
 8012f24:	4611      	mov	r1, r2
 8012f26:	4618      	mov	r0, r3
 8012f28:	f000 ff88 	bl	8013e3c <pifRingBuffer_PutByte>
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d0f3      	beq.n	8012f1a <_getDebugString+0xf2>
                }
                p_owner->p_rx_buffer[p_owner->char_idx] = tmp_char;
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f36:	687a      	ldr	r2, [r7, #4]
 8012f38:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012f3c:	4413      	add	r3, r2
 8012f3e:	7bba      	ldrb	r2, [r7, #14]
 8012f40:	701a      	strb	r2, [r3, #0]
                p_owner->char_idx++;
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012f48:	3301      	adds	r3, #1
 8012f4a:	b2da      	uxtb	r2, r3
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            }
            break;
 8012f52:	e001      	b.n	8012f58 <_getDebugString+0x130>
            break;
 8012f54:	bf00      	nop
 8012f56:	e000      	b.n	8012f5a <_getDebugString+0x132>
            break;
 8012f58:	bf00      	nop
        }

        if (str_get_done_flag == TRUE) {
 8012f5a:	7bfb      	ldrb	r3, [r7, #15]
 8012f5c:	2b01      	cmp	r3, #1
 8012f5e:	d113      	bne.n	8012f88 <_getDebugString+0x160>
        	p_owner->p_rx_buffer[p_owner->char_idx] = 0;
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f64:	687a      	ldr	r2, [r7, #4]
 8012f66:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012f6a:	4413      	add	r3, r2
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	701a      	strb	r2, [r3, #0]
        	while (!pifRingBuffer_PutByte(p_owner->p_tx_buffer, '\n')) {
 8012f70:	e001      	b.n	8012f76 <_getDebugString+0x14e>
        		pifTaskManager_Yield();
 8012f72:	f001 fd4f 	bl	8014a14 <pifTaskManager_Yield>
        	while (!pifRingBuffer_PutByte(p_owner->p_tx_buffer, '\n')) {
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f7a:	210a      	movs	r1, #10
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	f000 ff5d 	bl	8013e3c <pifRingBuffer_PutByte>
 8012f82:	4603      	mov	r3, r0
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d0f4      	beq.n	8012f72 <_getDebugString+0x14a>
	while ((*act_receive_data)(p_owner->p_comm, (uint8_t*)&tmp_char)) {
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	6a1a      	ldr	r2, [r3, #32]
 8012f8c:	f107 010e 	add.w	r1, r7, #14
 8012f90:	683b      	ldr	r3, [r7, #0]
 8012f92:	4610      	mov	r0, r2
 8012f94:	4798      	blx	r3
 8012f96:	4603      	mov	r3, r0
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	f47f af4d 	bne.w	8012e38 <_getDebugString+0x10>
        	}
        }
    }
    return str_get_done_flag;
 8012f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	3710      	adds	r7, #16
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	bd80      	pop	{r7, pc}
 8012fa8:	0802672c 	.word	0x0802672c
 8012fac:	20002160 	.word	0x20002160

08012fb0 <_processDebugCmd>:

static int _processDebugCmd(PifLog* p_owner)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b088      	sub	sp, #32
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
    char* p_tmp_cmd;
    BOOL find_arg;
    unsigned int argc;
    const PifLogCmdEntry* p_cmd_entry;

    find_arg = TRUE;
 8012fb8:	2301      	movs	r3, #1
 8012fba:	76fb      	strb	r3, [r7, #27]
    argc = 0;
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	617b      	str	r3, [r7, #20]
    p_tmp_cmd = p_owner->p_rx_buffer;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fc4:	61fb      	str	r3, [r7, #28]

    while (*p_tmp_cmd) {
 8012fc6:	e022      	b.n	801300e <_processDebugCmd+0x5e>
        if (*p_tmp_cmd == ' ') {
 8012fc8:	69fb      	ldr	r3, [r7, #28]
 8012fca:	781b      	ldrb	r3, [r3, #0]
 8012fcc:	2b20      	cmp	r3, #32
 8012fce:	d105      	bne.n	8012fdc <_processDebugCmd+0x2c>
            *p_tmp_cmd = 0;
 8012fd0:	69fb      	ldr	r3, [r7, #28]
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	701a      	strb	r2, [r3, #0]
            find_arg = TRUE;
 8012fd6:	2301      	movs	r3, #1
 8012fd8:	76fb      	strb	r3, [r7, #27]
 8012fda:	e015      	b.n	8013008 <_processDebugCmd+0x58>
        }
        else {
            if (find_arg) {
 8012fdc:	7efb      	ldrb	r3, [r7, #27]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d012      	beq.n	8013008 <_processDebugCmd+0x58>
                if (argc < PIF_LOG_CMD_MAX_ARGS) {
 8012fe2:	697b      	ldr	r3, [r7, #20]
 8012fe4:	2b07      	cmp	r3, #7
 8012fe6:	d80c      	bhi.n	8013002 <_processDebugCmd+0x52>
                	p_owner->p_argv[argc] = p_tmp_cmd;
 8012fe8:	687a      	ldr	r2, [r7, #4]
 8012fea:	697b      	ldr	r3, [r7, #20]
 8012fec:	330c      	adds	r3, #12
 8012fee:	009b      	lsls	r3, r3, #2
 8012ff0:	4413      	add	r3, r2
 8012ff2:	69fa      	ldr	r2, [r7, #28]
 8012ff4:	605a      	str	r2, [r3, #4]
                	argc++;
 8012ff6:	697b      	ldr	r3, [r7, #20]
 8012ff8:	3301      	adds	r3, #1
 8012ffa:	617b      	str	r3, [r7, #20]
                    find_arg = FALSE;
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	76fb      	strb	r3, [r7, #27]
 8013000:	e002      	b.n	8013008 <_processDebugCmd+0x58>
                }
                else {
                    return PIF_LOG_CMD_TOO_MANY_ARGS;
 8013002:	f06f 0301 	mvn.w	r3, #1
 8013006:	e038      	b.n	801307a <_processDebugCmd+0xca>
                }
            }
        }

        p_tmp_cmd++;
 8013008:	69fb      	ldr	r3, [r7, #28]
 801300a:	3301      	adds	r3, #1
 801300c:	61fb      	str	r3, [r7, #28]
    while (*p_tmp_cmd) {
 801300e:	69fb      	ldr	r3, [r7, #28]
 8013010:	781b      	ldrb	r3, [r3, #0]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d1d8      	bne.n	8012fc8 <_processDebugCmd+0x18>
    }

    if (argc) {
 8013016:	697b      	ldr	r3, [r7, #20]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d02d      	beq.n	8013078 <_processDebugCmd+0xc8>
    	for (int i = 0; i < 2; i++) {
 801301c:	2300      	movs	r3, #0
 801301e:	60fb      	str	r3, [r7, #12]
 8013020:	e024      	b.n	801306c <_processDebugCmd+0xbc>
    		p_cmd_entry = p_owner->p_cmd_table[i];
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	68fa      	ldr	r2, [r7, #12]
 8013026:	3216      	adds	r2, #22
 8013028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801302c:	613b      	str	r3, [r7, #16]
            while (p_cmd_entry->p_name) {
 801302e:	e016      	b.n	801305e <_processDebugCmd+0xae>
                if (!strcmp(p_owner->p_argv[0], p_cmd_entry->p_name)) {
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013034:	693b      	ldr	r3, [r7, #16]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	4619      	mov	r1, r3
 801303a:	4610      	mov	r0, r2
 801303c:	f7ed f8cc 	bl	80001d8 <strcmp>
 8013040:	4603      	mov	r3, r0
 8013042:	2b00      	cmp	r3, #0
 8013044:	d108      	bne.n	8013058 <_processDebugCmd+0xa8>
                    return p_cmd_entry->processor(argc, p_owner->p_argv);
 8013046:	693b      	ldr	r3, [r7, #16]
 8013048:	685b      	ldr	r3, [r3, #4]
 801304a:	6978      	ldr	r0, [r7, #20]
 801304c:	687a      	ldr	r2, [r7, #4]
 801304e:	3234      	adds	r2, #52	; 0x34
 8013050:	4611      	mov	r1, r2
 8013052:	4798      	blx	r3
 8013054:	4603      	mov	r3, r0
 8013056:	e010      	b.n	801307a <_processDebugCmd+0xca>
                }

                p_cmd_entry++;
 8013058:	693b      	ldr	r3, [r7, #16]
 801305a:	330c      	adds	r3, #12
 801305c:	613b      	str	r3, [r7, #16]
            while (p_cmd_entry->p_name) {
 801305e:	693b      	ldr	r3, [r7, #16]
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d1e4      	bne.n	8013030 <_processDebugCmd+0x80>
    	for (int i = 0; i < 2; i++) {
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	3301      	adds	r3, #1
 801306a:	60fb      	str	r3, [r7, #12]
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	2b01      	cmp	r3, #1
 8013070:	ddd7      	ble.n	8013022 <_processDebugCmd+0x72>
            }
    	}
        return PIF_LOG_CMD_BAD_CMD;
 8013072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013076:	e000      	b.n	801307a <_processDebugCmd+0xca>
    }
    return PIF_LOG_CMD_NO_ERROR;
 8013078:	2300      	movs	r3, #0
}
 801307a:	4618      	mov	r0, r3
 801307c:	3720      	adds	r7, #32
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}

08013082 <_evtParsing>:

static void _evtParsing(void* p_client, PifActCommReceiveData act_receive_data)
{
 8013082:	b580      	push	{r7, lr}
 8013084:	b084      	sub	sp, #16
 8013086:	af00      	add	r7, sp, #0
 8013088:	6078      	str	r0, [r7, #4]
 801308a:	6039      	str	r1, [r7, #0]
	PifLog* p_owner = (PifLog*)p_client;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	60fb      	str	r3, [r7, #12]

    if (p_owner->cmd_done == FALSE) {
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8013096:	2b00      	cmp	r3, #0
 8013098:	d10e      	bne.n	80130b8 <_evtParsing+0x36>
        if (_getDebugString(p_owner, act_receive_data)) {
 801309a:	6839      	ldr	r1, [r7, #0]
 801309c:	68f8      	ldr	r0, [r7, #12]
 801309e:	f7ff fec3 	bl	8012e28 <_getDebugString>
 80130a2:	4603      	mov	r3, r0
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d007      	beq.n	80130b8 <_evtParsing+0x36>
        	p_owner->cmd_done = TRUE;
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	2201      	movs	r2, #1
 80130ac:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        	p_owner->p_task->immediate = TRUE;
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130b4:	2201      	movs	r2, #1
 80130b6:	705a      	strb	r2, [r3, #1]
        }
    }
}
 80130b8:	bf00      	nop
 80130ba:	3710      	adds	r7, #16
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}

080130c0 <_doTask>:

static uint16_t _doTask(PifTask* p_task)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b08e      	sub	sp, #56	; 0x38
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
    int status = PIF_LOG_CMD_NO_ERROR;
 80130c8:	2300      	movs	r3, #0
 80130ca:	633b      	str	r3, [r7, #48]	; 0x30
    char msg[40];

    (void)p_task;

	if (s_log.cmd_done == TRUE) {
 80130cc:	4b48      	ldr	r3, [pc, #288]	; (80131f0 <_doTask+0x130>)
 80130ce:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80130d2:	2b01      	cmp	r3, #1
 80130d4:	d17b      	bne.n	80131ce <_doTask+0x10e>
		status = _processDebugCmd(&s_log);
 80130d6:	4846      	ldr	r0, [pc, #280]	; (80131f0 <_doTask+0x130>)
 80130d8:	f7ff ff6a 	bl	8012fb0 <_processDebugCmd>
 80130dc:	6338      	str	r0, [r7, #48]	; 0x30

	    while (s_log.char_idx) {
 80130de:	e00f      	b.n	8013100 <_doTask+0x40>
	    	s_log.p_rx_buffer[s_log.char_idx] = 0;
 80130e0:	4b43      	ldr	r3, [pc, #268]	; (80131f0 <_doTask+0x130>)
 80130e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130e4:	4a42      	ldr	r2, [pc, #264]	; (80131f0 <_doTask+0x130>)
 80130e6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80130ea:	4413      	add	r3, r2
 80130ec:	2200      	movs	r2, #0
 80130ee:	701a      	strb	r2, [r3, #0]
	    	s_log.char_idx--;
 80130f0:	4b3f      	ldr	r3, [pc, #252]	; (80131f0 <_doTask+0x130>)
 80130f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80130f6:	3b01      	subs	r3, #1
 80130f8:	b2da      	uxtb	r2, r3
 80130fa:	4b3d      	ldr	r3, [pc, #244]	; (80131f0 <_doTask+0x130>)
 80130fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	    while (s_log.char_idx) {
 8013100:	4b3b      	ldr	r3, [pc, #236]	; (80131f0 <_doTask+0x130>)
 8013102:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013106:	2b00      	cmp	r3, #0
 8013108:	d1ea      	bne.n	80130e0 <_doTask+0x20>
	    }

	    for (int i = 0; i < PIF_LOG_CMD_MAX_ARGS; i++) {
 801310a:	2300      	movs	r3, #0
 801310c:	637b      	str	r3, [r7, #52]	; 0x34
 801310e:	e009      	b.n	8013124 <_doTask+0x64>
	    	s_log.p_argv[i] = 0;
 8013110:	4a37      	ldr	r2, [pc, #220]	; (80131f0 <_doTask+0x130>)
 8013112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013114:	330c      	adds	r3, #12
 8013116:	009b      	lsls	r3, r3, #2
 8013118:	4413      	add	r3, r2
 801311a:	2200      	movs	r2, #0
 801311c:	605a      	str	r2, [r3, #4]
	    for (int i = 0; i < PIF_LOG_CMD_MAX_ARGS; i++) {
 801311e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013120:	3301      	adds	r3, #1
 8013122:	637b      	str	r3, [r7, #52]	; 0x34
 8013124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013126:	2b07      	cmp	r3, #7
 8013128:	ddf2      	ble.n	8013110 <_doTask+0x50>
	    }

	    // Handle the case of bad command.
	    if (status == PIF_LOG_CMD_BAD_CMD) {
 801312a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801312c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013130:	d10c      	bne.n	801314c <_doTask+0x8c>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, "Not defined command!\n")) {
 8013132:	e001      	b.n	8013138 <_doTask+0x78>
        		pifTaskManager_Yield();
 8013134:	f001 fc6e 	bl	8014a14 <pifTaskManager_Yield>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, "Not defined command!\n")) {
 8013138:	4b2d      	ldr	r3, [pc, #180]	; (80131f0 <_doTask+0x130>)
 801313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801313c:	492d      	ldr	r1, [pc, #180]	; (80131f4 <_doTask+0x134>)
 801313e:	4618      	mov	r0, r3
 8013140:	f000 fefa 	bl	8013f38 <pifRingBuffer_PutString>
 8013144:	4603      	mov	r3, r0
 8013146:	2b00      	cmp	r3, #0
 8013148:	d0f4      	beq.n	8013134 <_doTask+0x74>
 801314a:	e039      	b.n	80131c0 <_doTask+0x100>
	    	}
	    }

	    // Handle the case of too many arguments.
	    else if (status == PIF_LOG_CMD_TOO_MANY_ARGS) {
 801314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801314e:	f113 0f02 	cmn.w	r3, #2
 8013152:	d10c      	bne.n	801316e <_doTask+0xae>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, "Too many arguments for command!\n")) {
 8013154:	e001      	b.n	801315a <_doTask+0x9a>
        		pifTaskManager_Yield();
 8013156:	f001 fc5d 	bl	8014a14 <pifTaskManager_Yield>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, "Too many arguments for command!\n")) {
 801315a:	4b25      	ldr	r3, [pc, #148]	; (80131f0 <_doTask+0x130>)
 801315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801315e:	4926      	ldr	r1, [pc, #152]	; (80131f8 <_doTask+0x138>)
 8013160:	4618      	mov	r0, r3
 8013162:	f000 fee9 	bl	8013f38 <pifRingBuffer_PutString>
 8013166:	4603      	mov	r3, r0
 8013168:	2b00      	cmp	r3, #0
 801316a:	d0f4      	beq.n	8013156 <_doTask+0x96>
 801316c:	e028      	b.n	80131c0 <_doTask+0x100>
	    	}
	    }

	    // Handle the case of too few arguments.
	    else if (status == PIF_LOG_CMD_TOO_FEW_ARGS) {
 801316e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013170:	f113 0f03 	cmn.w	r3, #3
 8013174:	d10c      	bne.n	8013190 <_doTask+0xd0>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, "Too few arguments for command!\n")) {
 8013176:	e001      	b.n	801317c <_doTask+0xbc>
        		pifTaskManager_Yield();
 8013178:	f001 fc4c 	bl	8014a14 <pifTaskManager_Yield>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, "Too few arguments for command!\n")) {
 801317c:	4b1c      	ldr	r3, [pc, #112]	; (80131f0 <_doTask+0x130>)
 801317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013180:	491e      	ldr	r1, [pc, #120]	; (80131fc <_doTask+0x13c>)
 8013182:	4618      	mov	r0, r3
 8013184:	f000 fed8 	bl	8013f38 <pifRingBuffer_PutString>
 8013188:	4603      	mov	r3, r0
 801318a:	2b00      	cmp	r3, #0
 801318c:	d0f4      	beq.n	8013178 <_doTask+0xb8>
 801318e:	e017      	b.n	80131c0 <_doTask+0x100>
	    	}
	    }

	    // Otherwise the command was executed.  Print the error
	    // code if one was returned.
	    else if (status != PIF_LOG_CMD_NO_ERROR) {
 8013190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013192:	2b00      	cmp	r3, #0
 8013194:	d014      	beq.n	80131c0 <_doTask+0x100>
	    	pif_Printf(msg, "Command returned error code: %d\n", status);
 8013196:	f107 0308 	add.w	r3, r7, #8
 801319a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801319c:	4918      	ldr	r1, [pc, #96]	; (8013200 <_doTask+0x140>)
 801319e:	4618      	mov	r0, r3
 80131a0:	f7fe fe24 	bl	8011dec <pif_Printf>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, msg)) {
 80131a4:	e001      	b.n	80131aa <_doTask+0xea>
        		pifTaskManager_Yield();
 80131a6:	f001 fc35 	bl	8014a14 <pifTaskManager_Yield>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, msg)) {
 80131aa:	4b11      	ldr	r3, [pc, #68]	; (80131f0 <_doTask+0x130>)
 80131ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131ae:	f107 0208 	add.w	r2, r7, #8
 80131b2:	4611      	mov	r1, r2
 80131b4:	4618      	mov	r0, r3
 80131b6:	f000 febf 	bl	8013f38 <pifRingBuffer_PutString>
 80131ba:	4603      	mov	r3, r0
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d0f2      	beq.n	80131a6 <_doTask+0xe6>
	    	}
	    }

		s_log.cmd_done = FALSE;
 80131c0:	4b0b      	ldr	r3, [pc, #44]	; (80131f0 <_doTask+0x130>)
 80131c2:	2200      	movs	r2, #0
 80131c4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}

	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, (char *)s_log.p_prompt)) {
 80131c8:	e001      	b.n	80131ce <_doTask+0x10e>
		pifTaskManager_Yield();
 80131ca:	f001 fc23 	bl	8014a14 <pifTaskManager_Yield>
	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, (char *)s_log.p_prompt)) {
 80131ce:	4b08      	ldr	r3, [pc, #32]	; (80131f0 <_doTask+0x130>)
 80131d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131d2:	4a07      	ldr	r2, [pc, #28]	; (80131f0 <_doTask+0x130>)
 80131d4:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80131d6:	4611      	mov	r1, r2
 80131d8:	4618      	mov	r0, r3
 80131da:	f000 fead 	bl	8013f38 <pifRingBuffer_PutString>
 80131de:	4603      	mov	r3, r0
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d0f2      	beq.n	80131ca <_doTask+0x10a>
	}

	return 0;
 80131e4:	2300      	movs	r3, #0
}
 80131e6:	4618      	mov	r0, r3
 80131e8:	3738      	adds	r7, #56	; 0x38
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd80      	pop	{r7, pc}
 80131ee:	bf00      	nop
 80131f0:	200020fc 	.word	0x200020fc
 80131f4:	08026730 	.word	0x08026730
 80131f8:	08026748 	.word	0x08026748
 80131fc:	0802676c 	.word	0x0802676c
 8013200:	0802678c 	.word	0x0802678c

08013204 <_evtSending>:
}

#endif

static BOOL _evtSending(void* p_client, PifActCommSendData act_send_data)
{
 8013204:	b5b0      	push	{r4, r5, r7, lr}
 8013206:	b084      	sub	sp, #16
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
 801320c:	6039      	str	r1, [r7, #0]
	PifLog* p_owner = (PifLog*)p_client;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	if (!pifRingBuffer_IsEmpty(p_owner->p_tx_buffer)) {
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013216:	4618      	mov	r0, r3
 8013218:	f000 fd71 	bl	8013cfe <pifRingBuffer_IsEmpty>
 801321c:	4603      	mov	r3, r0
 801321e:	2b00      	cmp	r3, #0
 8013220:	d11f      	bne.n	8013262 <_evtSending+0x5e>
		length = (*act_send_data)(p_owner->p_comm, pifRingBuffer_GetTailPointer(p_owner->p_tx_buffer, 0),
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	6a1c      	ldr	r4, [r3, #32]
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801322a:	2100      	movs	r1, #0
 801322c:	4618      	mov	r0, r3
 801322e:	f000 fd3a 	bl	8013ca6 <pifRingBuffer_GetTailPointer>
 8013232:	4605      	mov	r5, r0
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013238:	2100      	movs	r1, #0
 801323a:	4618      	mov	r0, r3
 801323c:	f000 fd94 	bl	8013d68 <pifRingBuffer_GetLinerSize>
 8013240:	4603      	mov	r3, r0
 8013242:	461a      	mov	r2, r3
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	4629      	mov	r1, r5
 8013248:	4620      	mov	r0, r4
 801324a:	4798      	blx	r3
 801324c:	4603      	mov	r3, r0
 801324e:	817b      	strh	r3, [r7, #10]
    			pifRingBuffer_GetLinerSize(p_owner->p_tx_buffer, 0));
		pifRingBuffer_Remove(p_owner->p_tx_buffer, length);
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013254:	897a      	ldrh	r2, [r7, #10]
 8013256:	4611      	mov	r1, r2
 8013258:	4618      	mov	r0, r3
 801325a:	f000 ff2c 	bl	80140b6 <pifRingBuffer_Remove>
		return TRUE;
 801325e:	2301      	movs	r3, #1
 8013260:	e000      	b.n	8013264 <_evtSending+0x60>
	}
	return FALSE;
 8013262:	2300      	movs	r3, #0
}
 8013264:	4618      	mov	r0, r3
 8013266:	3710      	adds	r7, #16
 8013268:	46bd      	mov	sp, r7
 801326a:	bdb0      	pop	{r4, r5, r7, pc}

0801326c <_printLog>:

static void _printLog(char* p_string, BOOL vcd)
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b082      	sub	sp, #8
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
 8013274:	460b      	mov	r3, r1
 8013276:	70fb      	strb	r3, [r7, #3]
	if (!vcd && pifRingBuffer_IsBuffer(&s_log.buffer)) {
 8013278:	78fb      	ldrb	r3, [r7, #3]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d109      	bne.n	8013292 <_printLog+0x26>
 801327e:	4810      	ldr	r0, [pc, #64]	; (80132c0 <_printLog+0x54>)
 8013280:	f000 fd2c 	bl	8013cdc <pifRingBuffer_IsBuffer>
 8013284:	4603      	mov	r3, r0
 8013286:	2b00      	cmp	r3, #0
 8013288:	d003      	beq.n	8013292 <_printLog+0x26>
		pifRingBuffer_PutString(&s_log.buffer, p_string);
 801328a:	6879      	ldr	r1, [r7, #4]
 801328c:	480c      	ldr	r0, [pc, #48]	; (80132c0 <_printLog+0x54>)
 801328e:	f000 fe53 	bl	8013f38 <pifRingBuffer_PutString>
	}

	if (s_log.enable || vcd) {
 8013292:	4b0c      	ldr	r3, [pc, #48]	; (80132c4 <_printLog+0x58>)
 8013294:	781b      	ldrb	r3, [r3, #0]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d105      	bne.n	80132a6 <_printLog+0x3a>
 801329a:	78fb      	ldrb	r3, [r7, #3]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d00b      	beq.n	80132b8 <_printLog+0x4c>
        while (!pifRingBuffer_PutString(s_log.p_tx_buffer, p_string)) {
 80132a0:	e001      	b.n	80132a6 <_printLog+0x3a>
        	pifTaskManager_Yield();
 80132a2:	f001 fbb7 	bl	8014a14 <pifTaskManager_Yield>
        while (!pifRingBuffer_PutString(s_log.p_tx_buffer, p_string)) {
 80132a6:	4b07      	ldr	r3, [pc, #28]	; (80132c4 <_printLog+0x58>)
 80132a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132aa:	6879      	ldr	r1, [r7, #4]
 80132ac:	4618      	mov	r0, r3
 80132ae:	f000 fe43 	bl	8013f38 <pifRingBuffer_PutString>
 80132b2:	4603      	mov	r3, r0
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d0f4      	beq.n	80132a2 <_printLog+0x36>
        }
	}
}
 80132b8:	bf00      	nop
 80132ba:	3708      	adds	r7, #8
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}
 80132c0:	20002100 	.word	0x20002100
 80132c4:	200020fc 	.word	0x200020fc

080132c8 <_printTime>:

static void _printTime()
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b082      	sub	sp, #8
 80132cc:	af00      	add	r7, sp, #0
	int offset = 0;
 80132ce:	2300      	movs	r3, #0
 80132d0:	607b      	str	r3, [r7, #4]
    static char tmp_buf[20];

    tmp_buf[offset++] = '\n';
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	1c5a      	adds	r2, r3, #1
 80132d6:	607a      	str	r2, [r7, #4]
 80132d8:	4a35      	ldr	r2, [pc, #212]	; (80133b0 <_printTime+0xe8>)
 80132da:	210a      	movs	r1, #10
 80132dc:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	4a33      	ldr	r2, [pc, #204]	; (80133b0 <_printTime+0xe8>)
 80132e2:	4413      	add	r3, r2
 80132e4:	4a33      	ldr	r2, [pc, #204]	; (80133b4 <_printTime+0xec>)
 80132e6:	7952      	ldrb	r2, [r2, #5]
 80132e8:	b2d2      	uxtb	r2, r2
 80132ea:	4611      	mov	r1, r2
 80132ec:	2202      	movs	r2, #2
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7fe f996 	bl	8011620 <pif_DecToString>
 80132f4:	4602      	mov	r2, r0
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	4413      	add	r3, r2
 80132fa:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = '.';
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	1c5a      	adds	r2, r3, #1
 8013300:	607a      	str	r2, [r7, #4]
 8013302:	4a2b      	ldr	r2, [pc, #172]	; (80133b0 <_printTime+0xe8>)
 8013304:	212e      	movs	r1, #46	; 0x2e
 8013306:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	4a29      	ldr	r2, [pc, #164]	; (80133b0 <_printTime+0xe8>)
 801330c:	4413      	add	r3, r2
 801330e:	4a2a      	ldr	r2, [pc, #168]	; (80133b8 <_printTime+0xf0>)
 8013310:	8812      	ldrh	r2, [r2, #0]
 8013312:	b292      	uxth	r2, r2
 8013314:	4611      	mov	r1, r2
 8013316:	2203      	movs	r2, #3
 8013318:	4618      	mov	r0, r3
 801331a:	f7fe f981 	bl	8011620 <pif_DecToString>
 801331e:	4602      	mov	r2, r0
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	4413      	add	r3, r2
 8013324:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ' ';
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	1c5a      	adds	r2, r3, #1
 801332a:	607a      	str	r2, [r7, #4]
 801332c:	4a20      	ldr	r2, [pc, #128]	; (80133b0 <_printTime+0xe8>)
 801332e:	2120      	movs	r1, #32
 8013330:	54d1      	strb	r1, [r2, r3]
	tmp_buf[offset++] = 'T';
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	1c5a      	adds	r2, r3, #1
 8013336:	607a      	str	r2, [r7, #4]
 8013338:	4a1d      	ldr	r2, [pc, #116]	; (80133b0 <_printTime+0xe8>)
 801333a:	2154      	movs	r1, #84	; 0x54
 801333c:	54d1      	strb	r1, [r2, r3]
	tmp_buf[offset++] = ' ';
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	1c5a      	adds	r2, r3, #1
 8013342:	607a      	str	r2, [r7, #4]
 8013344:	4a1a      	ldr	r2, [pc, #104]	; (80133b0 <_printTime+0xe8>)
 8013346:	2120      	movs	r1, #32
 8013348:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.hour, 2);
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	4a18      	ldr	r2, [pc, #96]	; (80133b0 <_printTime+0xe8>)
 801334e:	4413      	add	r3, r2
 8013350:	4a18      	ldr	r2, [pc, #96]	; (80133b4 <_printTime+0xec>)
 8013352:	78d2      	ldrb	r2, [r2, #3]
 8013354:	b2d2      	uxtb	r2, r2
 8013356:	4611      	mov	r1, r2
 8013358:	2202      	movs	r2, #2
 801335a:	4618      	mov	r0, r3
 801335c:	f7fe f960 	bl	8011620 <pif_DecToString>
 8013360:	4602      	mov	r2, r0
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	4413      	add	r3, r2
 8013366:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ':';
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	1c5a      	adds	r2, r3, #1
 801336c:	607a      	str	r2, [r7, #4]
 801336e:	4a10      	ldr	r2, [pc, #64]	; (80133b0 <_printTime+0xe8>)
 8013370:	213a      	movs	r1, #58	; 0x3a
 8013372:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.minute, 2);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	4a0e      	ldr	r2, [pc, #56]	; (80133b0 <_printTime+0xe8>)
 8013378:	4413      	add	r3, r2
 801337a:	4a0e      	ldr	r2, [pc, #56]	; (80133b4 <_printTime+0xec>)
 801337c:	7912      	ldrb	r2, [r2, #4]
 801337e:	b2d2      	uxtb	r2, r2
 8013380:	4611      	mov	r1, r2
 8013382:	2202      	movs	r2, #2
 8013384:	4618      	mov	r0, r3
 8013386:	f7fe f94b 	bl	8011620 <pif_DecToString>
 801338a:	4602      	mov	r2, r0
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	4413      	add	r3, r2
 8013390:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ' ';
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	1c5a      	adds	r2, r3, #1
 8013396:	607a      	str	r2, [r7, #4]
 8013398:	4a05      	ldr	r2, [pc, #20]	; (80133b0 <_printTime+0xe8>)
 801339a:	2120      	movs	r1, #32
 801339c:	54d1      	strb	r1, [r2, r3]

	_printLog(tmp_buf, FALSE);
 801339e:	2100      	movs	r1, #0
 80133a0:	4803      	ldr	r0, [pc, #12]	; (80133b0 <_printTime+0xe8>)
 80133a2:	f7ff ff63 	bl	801326c <_printLog>
}
 80133a6:	bf00      	nop
 80133a8:	3708      	adds	r7, #8
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd80      	pop	{r7, pc}
 80133ae:	bf00      	nop
 80133b0:	20002164 	.word	0x20002164
 80133b4:	200020d8 	.word	0x200020d8
 80133b8:	200020d2 	.word	0x200020d2

080133bc <pifLog_Init>:

BOOL pifLog_Init()
{
 80133bc:	b580      	push	{r7, lr}
 80133be:	b082      	sub	sp, #8
 80133c0:	af02      	add	r7, sp, #8
	memset(&s_log, 0, sizeof(PifLog));
 80133c2:	2264      	movs	r2, #100	; 0x64
 80133c4:	2100      	movs	r1, #0
 80133c6:	480d      	ldr	r0, [pc, #52]	; (80133fc <pifLog_Init+0x40>)
 80133c8:	f00e fd0c 	bl	8021de4 <memset>

	s_log.enable = TRUE;
 80133cc:	4b0b      	ldr	r3, [pc, #44]	; (80133fc <pifLog_Init+0x40>)
 80133ce:	2201      	movs	r2, #1
 80133d0:	701a      	strb	r2, [r3, #0]
#ifdef __PIF_LOG_COMMAND__
	s_log.p_task = pifTaskManager_Add(TM_PERIOD_MS, 1, _doTask, &s_log, FALSE);
 80133d2:	2300      	movs	r3, #0
 80133d4:	9300      	str	r3, [sp, #0]
 80133d6:	4b09      	ldr	r3, [pc, #36]	; (80133fc <pifLog_Init+0x40>)
 80133d8:	4a09      	ldr	r2, [pc, #36]	; (8013400 <pifLog_Init+0x44>)
 80133da:	2101      	movs	r1, #1
 80133dc:	2002      	movs	r0, #2
 80133de:	f001 fa2f 	bl	8014840 <pifTaskManager_Add>
 80133e2:	4603      	mov	r3, r0
 80133e4:	4a05      	ldr	r2, [pc, #20]	; (80133fc <pifLog_Init+0x40>)
 80133e6:	6293      	str	r3, [r2, #40]	; 0x28
	if (!s_log.p_task) return FALSE;
 80133e8:	4b04      	ldr	r3, [pc, #16]	; (80133fc <pifLog_Init+0x40>)
 80133ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d101      	bne.n	80133f4 <pifLog_Init+0x38>
 80133f0:	2300      	movs	r3, #0
 80133f2:	e000      	b.n	80133f6 <pifLog_Init+0x3a>
#endif
   	return TRUE;
 80133f4:	2301      	movs	r3, #1
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	46bd      	mov	sp, r7
 80133fa:	bd80      	pop	{r7, pc}
 80133fc:	200020fc 	.word	0x200020fc
 8013400:	080130c1 	.word	0x080130c1

08013404 <pifLog_UseCommand>:
}

#ifdef __PIF_LOG_COMMAND__

BOOL pifLog_UseCommand(const PifLogCmdEntry* p_cmd_table, const char* p_prompt)
{
 8013404:	b580      	push	{r7, lr}
 8013406:	b082      	sub	sp, #8
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
 801340c:	6039      	str	r1, [r7, #0]
    if (!p_cmd_table || !p_prompt) {
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d002      	beq.n	801341a <pifLog_UseCommand+0x16>
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d104      	bne.n	8013424 <pifLog_UseCommand+0x20>
    	pif_error = E_INVALID_PARAM;
 801341a:	4b14      	ldr	r3, [pc, #80]	; (801346c <pifLog_UseCommand+0x68>)
 801341c:	2201      	movs	r2, #1
 801341e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013420:	2300      	movs	r3, #0
 8013422:	e01e      	b.n	8013462 <pifLog_UseCommand+0x5e>
    }

    s_log.p_rx_buffer = calloc(sizeof(char), PIF_LOG_RX_BUFFER_SIZE);
 8013424:	2120      	movs	r1, #32
 8013426:	2001      	movs	r0, #1
 8013428:	f00e fc8c 	bl	8021d44 <calloc>
 801342c:	4603      	mov	r3, r0
 801342e:	461a      	mov	r2, r3
 8013430:	4b0f      	ldr	r3, [pc, #60]	; (8013470 <pifLog_UseCommand+0x6c>)
 8013432:	631a      	str	r2, [r3, #48]	; 0x30
    if (!s_log.p_rx_buffer) {
 8013434:	4b0e      	ldr	r3, [pc, #56]	; (8013470 <pifLog_UseCommand+0x6c>)
 8013436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013438:	2b00      	cmp	r3, #0
 801343a:	d104      	bne.n	8013446 <pifLog_UseCommand+0x42>
        pif_error = E_OUT_OF_HEAP;
 801343c:	4b0b      	ldr	r3, [pc, #44]	; (801346c <pifLog_UseCommand+0x68>)
 801343e:	2203      	movs	r2, #3
 8013440:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013442:	2300      	movs	r3, #0
 8013444:	e00d      	b.n	8013462 <pifLog_UseCommand+0x5e>
    }
    s_log.rx_buffer_size = PIF_LOG_RX_BUFFER_SIZE;
 8013446:	4b0a      	ldr	r3, [pc, #40]	; (8013470 <pifLog_UseCommand+0x6c>)
 8013448:	2220      	movs	r2, #32
 801344a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    s_log.p_cmd_table[0] = c_cmd_table;
 801344e:	4b08      	ldr	r3, [pc, #32]	; (8013470 <pifLog_UseCommand+0x6c>)
 8013450:	4a08      	ldr	r2, [pc, #32]	; (8013474 <pifLog_UseCommand+0x70>)
 8013452:	659a      	str	r2, [r3, #88]	; 0x58
    s_log.p_cmd_table[1] = p_cmd_table;
 8013454:	4a06      	ldr	r2, [pc, #24]	; (8013470 <pifLog_UseCommand+0x6c>)
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	65d3      	str	r3, [r2, #92]	; 0x5c
    s_log.p_prompt = p_prompt;
 801345a:	4a05      	ldr	r2, [pc, #20]	; (8013470 <pifLog_UseCommand+0x6c>)
 801345c:	683b      	ldr	r3, [r7, #0]
 801345e:	6613      	str	r3, [r2, #96]	; 0x60
    return TRUE;
 8013460:	2301      	movs	r3, #1
}
 8013462:	4618      	mov	r0, r3
 8013464:	3708      	adds	r7, #8
 8013466:	46bd      	mov	sp, r7
 8013468:	bd80      	pop	{r7, pc}
 801346a:	bf00      	nop
 801346c:	200020d1 	.word	0x200020d1
 8013470:	200020fc 	.word	0x200020fc
 8013474:	080281ec 	.word	0x080281ec

08013478 <pifLog_Print>:
{
	return pifRingBuffer_IsEmpty(&s_log.buffer);
}

void pifLog_Print(PifLogType type, const char* p_string)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b098      	sub	sp, #96	; 0x60
 801347c:	af00      	add	r7, sp, #0
 801347e:	4603      	mov	r3, r0
 8013480:	6039      	str	r1, [r7, #0]
 8013482:	71fb      	strb	r3, [r7, #7]
	int offset = 0;
 8013484:	2300      	movs	r3, #0
 8013486:	65fb      	str	r3, [r7, #92]	; 0x5c
    char tmp_buf[PIF_LOG_LINE_SIZE];

    if (type >= LT_INFO) {
 8013488:	79fb      	ldrb	r3, [r7, #7]
 801348a:	2b01      	cmp	r3, #1
 801348c:	d96b      	bls.n	8013566 <pifLog_Print+0xee>
        if (s_minute != pif_datetime.minute) {
 801348e:	4b3d      	ldr	r3, [pc, #244]	; (8013584 <pifLog_Print+0x10c>)
 8013490:	791b      	ldrb	r3, [r3, #4]
 8013492:	b2da      	uxtb	r2, r3
 8013494:	4b3c      	ldr	r3, [pc, #240]	; (8013588 <pifLog_Print+0x110>)
 8013496:	781b      	ldrb	r3, [r3, #0]
 8013498:	429a      	cmp	r2, r3
 801349a:	d006      	beq.n	80134aa <pifLog_Print+0x32>
        	_printTime();
 801349c:	f7ff ff14 	bl	80132c8 <_printTime>
        	s_minute = pif_datetime.minute;
 80134a0:	4b38      	ldr	r3, [pc, #224]	; (8013584 <pifLog_Print+0x10c>)
 80134a2:	791b      	ldrb	r3, [r3, #4]
 80134a4:	b2da      	uxtb	r2, r3
 80134a6:	4b38      	ldr	r3, [pc, #224]	; (8013588 <pifLog_Print+0x110>)
 80134a8:	701a      	strb	r2, [r3, #0]
    	}

        tmp_buf[offset++] = '\n';
 80134aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134ac:	1c5a      	adds	r2, r3, #1
 80134ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 80134b0:	3360      	adds	r3, #96	; 0x60
 80134b2:	443b      	add	r3, r7
 80134b4:	220a      	movs	r2, #10
 80134b6:	f803 2c54 	strb.w	r2, [r3, #-84]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 80134ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134bc:	f107 020c 	add.w	r2, r7, #12
 80134c0:	4413      	add	r3, r2
 80134c2:	4a30      	ldr	r2, [pc, #192]	; (8013584 <pifLog_Print+0x10c>)
 80134c4:	7952      	ldrb	r2, [r2, #5]
 80134c6:	b2d2      	uxtb	r2, r2
 80134c8:	4611      	mov	r1, r2
 80134ca:	2202      	movs	r2, #2
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7fe f8a7 	bl	8011620 <pif_DecToString>
 80134d2:	4602      	mov	r2, r0
 80134d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134d6:	4413      	add	r3, r2
 80134d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    	tmp_buf[offset++] = '.';
 80134da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134dc:	1c5a      	adds	r2, r3, #1
 80134de:	65fa      	str	r2, [r7, #92]	; 0x5c
 80134e0:	3360      	adds	r3, #96	; 0x60
 80134e2:	443b      	add	r3, r7
 80134e4:	222e      	movs	r2, #46	; 0x2e
 80134e6:	f803 2c54 	strb.w	r2, [r3, #-84]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 80134ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134ec:	f107 020c 	add.w	r2, r7, #12
 80134f0:	4413      	add	r3, r2
 80134f2:	4a26      	ldr	r2, [pc, #152]	; (801358c <pifLog_Print+0x114>)
 80134f4:	8812      	ldrh	r2, [r2, #0]
 80134f6:	b292      	uxth	r2, r2
 80134f8:	4611      	mov	r1, r2
 80134fa:	2203      	movs	r2, #3
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7fe f88f 	bl	8011620 <pif_DecToString>
 8013502:	4602      	mov	r2, r0
 8013504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013506:	4413      	add	r3, r2
 8013508:	65fb      	str	r3, [r7, #92]	; 0x5c
    	tmp_buf[offset++] = ' ';
 801350a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801350c:	1c5a      	adds	r2, r3, #1
 801350e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013510:	3360      	adds	r3, #96	; 0x60
 8013512:	443b      	add	r3, r7
 8013514:	2220      	movs	r2, #32
 8013516:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset++] = type_ch[type - LT_INFO];
 801351a:	79fb      	ldrb	r3, [r7, #7]
 801351c:	1e9a      	subs	r2, r3, #2
 801351e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013520:	1c59      	adds	r1, r3, #1
 8013522:	65f9      	str	r1, [r7, #92]	; 0x5c
 8013524:	491a      	ldr	r1, [pc, #104]	; (8013590 <pifLog_Print+0x118>)
 8013526:	5c8a      	ldrb	r2, [r1, r2]
 8013528:	3360      	adds	r3, #96	; 0x60
 801352a:	443b      	add	r3, r7
 801352c:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset++] = ' ';
 8013530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013532:	1c5a      	adds	r2, r3, #1
 8013534:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013536:	3360      	adds	r3, #96	; 0x60
 8013538:	443b      	add	r3, r7
 801353a:	2220      	movs	r2, #32
 801353c:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset] = 0;
 8013540:	f107 020c 	add.w	r2, r7, #12
 8013544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013546:	4413      	add	r3, r2
 8013548:	2200      	movs	r2, #0
 801354a:	701a      	strb	r2, [r3, #0]
    	_printLog(tmp_buf, type == LT_VCD);
 801354c:	79fb      	ldrb	r3, [r7, #7]
 801354e:	2b01      	cmp	r3, #1
 8013550:	bf0c      	ite	eq
 8013552:	2301      	moveq	r3, #1
 8013554:	2300      	movne	r3, #0
 8013556:	b2db      	uxtb	r3, r3
 8013558:	461a      	mov	r2, r3
 801355a:	f107 030c 	add.w	r3, r7, #12
 801355e:	4611      	mov	r1, r2
 8013560:	4618      	mov	r0, r3
 8013562:	f7ff fe83 	bl	801326c <_printLog>
    }

	_printLog((char*)p_string, type == LT_VCD);
 8013566:	79fb      	ldrb	r3, [r7, #7]
 8013568:	2b01      	cmp	r3, #1
 801356a:	bf0c      	ite	eq
 801356c:	2301      	moveq	r3, #1
 801356e:	2300      	movne	r3, #0
 8013570:	b2db      	uxtb	r3, r3
 8013572:	4619      	mov	r1, r3
 8013574:	6838      	ldr	r0, [r7, #0]
 8013576:	f7ff fe79 	bl	801326c <_printLog>
}
 801357a:	bf00      	nop
 801357c:	3760      	adds	r7, #96	; 0x60
 801357e:	46bd      	mov	sp, r7
 8013580:	bd80      	pop	{r7, pc}
 8013582:	bf00      	nop
 8013584:	200020d8 	.word	0x200020d8
 8013588:	20000068 	.word	0x20000068
 801358c:	200020d2 	.word	0x200020d2
 8013590:	080281e8 	.word	0x080281e8

08013594 <pifLog_Printf>:

void pifLog_Printf(PifLogType type, const char* p_format, ...)
{
 8013594:	b40e      	push	{r1, r2, r3}
 8013596:	b580      	push	{r7, lr}
 8013598:	b09b      	sub	sp, #108	; 0x6c
 801359a:	af00      	add	r7, sp, #0
 801359c:	4603      	mov	r3, r0
 801359e:	71fb      	strb	r3, [r7, #7]
	va_list data;
	int offset = 0;
 80135a0:	2300      	movs	r3, #0
 80135a2:	667b      	str	r3, [r7, #100]	; 0x64
    char tmp_buf[PIF_LOG_LINE_SIZE + 1];

    if (type >= LT_INFO) {
 80135a4:	79fb      	ldrb	r3, [r7, #7]
 80135a6:	2b01      	cmp	r3, #1
 80135a8:	d958      	bls.n	801365c <pifLog_Printf+0xc8>
        if (s_minute != pif_datetime.minute) {
 80135aa:	4b3d      	ldr	r3, [pc, #244]	; (80136a0 <pifLog_Printf+0x10c>)
 80135ac:	791b      	ldrb	r3, [r3, #4]
 80135ae:	b2da      	uxtb	r2, r3
 80135b0:	4b3c      	ldr	r3, [pc, #240]	; (80136a4 <pifLog_Printf+0x110>)
 80135b2:	781b      	ldrb	r3, [r3, #0]
 80135b4:	429a      	cmp	r2, r3
 80135b6:	d006      	beq.n	80135c6 <pifLog_Printf+0x32>
        	_printTime();
 80135b8:	f7ff fe86 	bl	80132c8 <_printTime>
        	s_minute = pif_datetime.minute;
 80135bc:	4b38      	ldr	r3, [pc, #224]	; (80136a0 <pifLog_Printf+0x10c>)
 80135be:	791b      	ldrb	r3, [r3, #4]
 80135c0:	b2da      	uxtb	r2, r3
 80135c2:	4b38      	ldr	r3, [pc, #224]	; (80136a4 <pifLog_Printf+0x110>)
 80135c4:	701a      	strb	r2, [r3, #0]
    	}

        tmp_buf[offset++] = '\n';
 80135c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80135c8:	1c5a      	adds	r2, r3, #1
 80135ca:	667a      	str	r2, [r7, #100]	; 0x64
 80135cc:	3368      	adds	r3, #104	; 0x68
 80135ce:	443b      	add	r3, r7
 80135d0:	220a      	movs	r2, #10
 80135d2:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 80135d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80135d8:	f107 020c 	add.w	r2, r7, #12
 80135dc:	4413      	add	r3, r2
 80135de:	4a30      	ldr	r2, [pc, #192]	; (80136a0 <pifLog_Printf+0x10c>)
 80135e0:	7952      	ldrb	r2, [r2, #5]
 80135e2:	b2d2      	uxtb	r2, r2
 80135e4:	4611      	mov	r1, r2
 80135e6:	2202      	movs	r2, #2
 80135e8:	4618      	mov	r0, r3
 80135ea:	f7fe f819 	bl	8011620 <pif_DecToString>
 80135ee:	4602      	mov	r2, r0
 80135f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80135f2:	4413      	add	r3, r2
 80135f4:	667b      	str	r3, [r7, #100]	; 0x64
    	tmp_buf[offset++] = '.';
 80135f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80135f8:	1c5a      	adds	r2, r3, #1
 80135fa:	667a      	str	r2, [r7, #100]	; 0x64
 80135fc:	3368      	adds	r3, #104	; 0x68
 80135fe:	443b      	add	r3, r7
 8013600:	222e      	movs	r2, #46	; 0x2e
 8013602:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 8013606:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013608:	f107 020c 	add.w	r2, r7, #12
 801360c:	4413      	add	r3, r2
 801360e:	4a26      	ldr	r2, [pc, #152]	; (80136a8 <pifLog_Printf+0x114>)
 8013610:	8812      	ldrh	r2, [r2, #0]
 8013612:	b292      	uxth	r2, r2
 8013614:	4611      	mov	r1, r2
 8013616:	2203      	movs	r2, #3
 8013618:	4618      	mov	r0, r3
 801361a:	f7fe f801 	bl	8011620 <pif_DecToString>
 801361e:	4602      	mov	r2, r0
 8013620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013622:	4413      	add	r3, r2
 8013624:	667b      	str	r3, [r7, #100]	; 0x64
    	tmp_buf[offset++] = ' ';
 8013626:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013628:	1c5a      	adds	r2, r3, #1
 801362a:	667a      	str	r2, [r7, #100]	; 0x64
 801362c:	3368      	adds	r3, #104	; 0x68
 801362e:	443b      	add	r3, r7
 8013630:	2220      	movs	r2, #32
 8013632:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	tmp_buf[offset++] = type_ch[type - LT_INFO];
 8013636:	79fb      	ldrb	r3, [r7, #7]
 8013638:	1e9a      	subs	r2, r3, #2
 801363a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801363c:	1c59      	adds	r1, r3, #1
 801363e:	6679      	str	r1, [r7, #100]	; 0x64
 8013640:	491a      	ldr	r1, [pc, #104]	; (80136ac <pifLog_Printf+0x118>)
 8013642:	5c8a      	ldrb	r2, [r1, r2]
 8013644:	3368      	adds	r3, #104	; 0x68
 8013646:	443b      	add	r3, r7
 8013648:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	tmp_buf[offset++] = ' ';
 801364c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801364e:	1c5a      	adds	r2, r3, #1
 8013650:	667a      	str	r2, [r7, #100]	; 0x64
 8013652:	3368      	adds	r3, #104	; 0x68
 8013654:	443b      	add	r3, r7
 8013656:	2220      	movs	r2, #32
 8013658:	f803 2c5c 	strb.w	r2, [r3, #-92]
    }

	va_start(data, p_format);
 801365c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013660:	663b      	str	r3, [r7, #96]	; 0x60
	pif_PrintFormat(tmp_buf + offset, &data, p_format);
 8013662:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013664:	f107 020c 	add.w	r2, r7, #12
 8013668:	4413      	add	r3, r2
 801366a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801366e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013670:	4618      	mov	r0, r3
 8013672:	f7fe f961 	bl	8011938 <pif_PrintFormat>
	va_end(data);

	_printLog(tmp_buf, type == LT_VCD);
 8013676:	79fb      	ldrb	r3, [r7, #7]
 8013678:	2b01      	cmp	r3, #1
 801367a:	bf0c      	ite	eq
 801367c:	2301      	moveq	r3, #1
 801367e:	2300      	movne	r3, #0
 8013680:	b2db      	uxtb	r3, r3
 8013682:	461a      	mov	r2, r3
 8013684:	f107 030c 	add.w	r3, r7, #12
 8013688:	4611      	mov	r1, r2
 801368a:	4618      	mov	r0, r3
 801368c:	f7ff fdee 	bl	801326c <_printLog>
}
 8013690:	bf00      	nop
 8013692:	376c      	adds	r7, #108	; 0x6c
 8013694:	46bd      	mov	sp, r7
 8013696:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801369a:	b003      	add	sp, #12
 801369c:	4770      	bx	lr
 801369e:	bf00      	nop
 80136a0:	200020d8 	.word	0x200020d8
 80136a4:	20000068 	.word	0x20000068
 80136a8:	200020d2 	.word	0x200020d2
 80136ac:	080281e8 	.word	0x080281e8

080136b0 <pifLog_AttachComm>:
{
	return s_log.p_comm->_p_task;
}

BOOL pifLog_AttachComm(PifComm* p_comm)
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b082      	sub	sp, #8
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
    s_log.p_tx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, PIF_LOG_TX_BUFFER_SIZE);
 80136b8:	2150      	movs	r1, #80	; 0x50
 80136ba:	2000      	movs	r0, #0
 80136bc:	f000 fa3e 	bl	8013b3c <pifRingBuffer_CreateHeap>
 80136c0:	4603      	mov	r3, r0
 80136c2:	4a0b      	ldr	r2, [pc, #44]	; (80136f0 <pifLog_AttachComm+0x40>)
 80136c4:	6253      	str	r3, [r2, #36]	; 0x24
    if (!s_log.p_tx_buffer) return FALSE;
 80136c6:	4b0a      	ldr	r3, [pc, #40]	; (80136f0 <pifLog_AttachComm+0x40>)
 80136c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d101      	bne.n	80136d2 <pifLog_AttachComm+0x22>
 80136ce:	2300      	movs	r3, #0
 80136d0:	e009      	b.n	80136e6 <pifLog_AttachComm+0x36>

	s_log.p_comm = p_comm;
 80136d2:	4a07      	ldr	r2, [pc, #28]	; (80136f0 <pifLog_AttachComm+0x40>)
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	6213      	str	r3, [r2, #32]
	pifComm_AttachClient(p_comm, &s_log, _evtParsing, _evtSending);
 80136d8:	4b06      	ldr	r3, [pc, #24]	; (80136f4 <pifLog_AttachComm+0x44>)
 80136da:	4a07      	ldr	r2, [pc, #28]	; (80136f8 <pifLog_AttachComm+0x48>)
 80136dc:	4904      	ldr	r1, [pc, #16]	; (80136f0 <pifLog_AttachComm+0x40>)
 80136de:	6878      	ldr	r0, [r7, #4]
 80136e0:	f7fe fd46 	bl	8012170 <pifComm_AttachClient>
    return TRUE;
 80136e4:	2301      	movs	r3, #1
}
 80136e6:	4618      	mov	r0, r3
 80136e8:	3708      	adds	r7, #8
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bd80      	pop	{r7, pc}
 80136ee:	bf00      	nop
 80136f0:	200020fc 	.word	0x200020fc
 80136f4:	08013205 	.word	0x08013205
 80136f8:	08013083 	.word	0x08013083

080136fc <pifLog_DetachComm>:

void pifLog_DetachComm()
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	af00      	add	r7, sp, #0
	pifComm_DetachClient(s_log.p_comm);
 8013700:	4b06      	ldr	r3, [pc, #24]	; (801371c <pifLog_DetachComm+0x20>)
 8013702:	6a1b      	ldr	r3, [r3, #32]
 8013704:	4618      	mov	r0, r3
 8013706:	f7fe fd49 	bl	801219c <pifComm_DetachClient>
	s_log.p_comm = NULL;
 801370a:	4b04      	ldr	r3, [pc, #16]	; (801371c <pifLog_DetachComm+0x20>)
 801370c:	2200      	movs	r2, #0
 801370e:	621a      	str	r2, [r3, #32]

	pifRingBuffer_Destroy(&s_log.p_tx_buffer);
 8013710:	4803      	ldr	r0, [pc, #12]	; (8013720 <pifLog_DetachComm+0x24>)
 8013712:	f000 fa3f 	bl	8013b94 <pifRingBuffer_Destroy>
}
 8013716:	bf00      	nop
 8013718:	bd80      	pop	{r7, pc}
 801371a:	bf00      	nop
 801371c:	200020fc 	.word	0x200020fc
 8013720:	20002120 	.word	0x20002120

08013724 <pifLog_SendAndExit>:

void pifLog_SendAndExit()
{
 8013724:	b580      	push	{r7, lr}
 8013726:	af00      	add	r7, sp, #0
	while (pifRingBuffer_GetFillSize(s_log.p_tx_buffer)) {
 8013728:	e008      	b.n	801373c <pifLog_SendAndExit+0x18>
		s_log.p_comm->_p_task->__evt_loop(s_log.p_comm->_p_task);
 801372a:	4b0a      	ldr	r3, [pc, #40]	; (8013754 <pifLog_SendAndExit+0x30>)
 801372c:	6a1b      	ldr	r3, [r3, #32]
 801372e:	69db      	ldr	r3, [r3, #28]
 8013730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013732:	4a08      	ldr	r2, [pc, #32]	; (8013754 <pifLog_SendAndExit+0x30>)
 8013734:	6a12      	ldr	r2, [r2, #32]
 8013736:	69d2      	ldr	r2, [r2, #28]
 8013738:	4610      	mov	r0, r2
 801373a:	4798      	blx	r3
	while (pifRingBuffer_GetFillSize(s_log.p_tx_buffer)) {
 801373c:	4b05      	ldr	r3, [pc, #20]	; (8013754 <pifLog_SendAndExit+0x30>)
 801373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013740:	4618      	mov	r0, r3
 8013742:	f000 faef 	bl	8013d24 <pifRingBuffer_GetFillSize>
 8013746:	4603      	mov	r3, r0
 8013748:	2b00      	cmp	r3, #0
 801374a:	d1ee      	bne.n	801372a <pifLog_SendAndExit+0x6>
	}
}
 801374c:	bf00      	nop
 801374e:	bf00      	nop
 8013750:	bd80      	pop	{r7, pc}
 8013752:	bf00      	nop
 8013754:	200020fc 	.word	0x200020fc

08013758 <_calcuratePositionModulation>:
	static PifDList s_cs_list;
#endif


static BOOL _calcuratePositionModulation(PifPulse* p_owner, uint16_t diff)
{
 8013758:	b480      	push	{r7}
 801375a:	b085      	sub	sp, #20
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
 8013760:	460b      	mov	r3, r1
 8013762:	807b      	strh	r3, [r7, #2]
	BOOL rtn = FALSE;
 8013764:	2300      	movs	r3, #0
 8013766:	73fb      	strb	r3, [r7, #15]

	if (diff < p_owner->__threshold_1us) {
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 801376e:	887a      	ldrh	r2, [r7, #2]
 8013770:	429a      	cmp	r2, r3
 8013772:	d23f      	bcs.n	80137f4 <_calcuratePositionModulation+0x9c>
		p_owner->_channel++;
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	f993 3007 	ldrsb.w	r3, [r3, #7]
 801377a:	b2db      	uxtb	r3, r3
 801377c:	3301      	adds	r3, #1
 801377e:	b2db      	uxtb	r3, r3
 8013780:	b25a      	sxtb	r2, r3
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	71da      	strb	r2, [r3, #7]
		if (p_owner->_channel < p_owner->__channel_count) {
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	f993 3007 	ldrsb.w	r3, [r3, #7]
 801378c:	461a      	mov	r2, r3
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013794:	429a      	cmp	r2, r3
 8013796:	da30      	bge.n	80137fa <_calcuratePositionModulation+0xa2>
			if (p_owner->__valid_range[3].check) {
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801379e:	f003 0301 	and.w	r3, r3, #1
 80137a2:	b2db      	uxtb	r3, r3
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d019      	beq.n	80137dc <_calcuratePositionModulation+0x84>
				if (diff >= p_owner->__valid_range[3].min && diff <= p_owner->__valid_range[3].max) {
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80137ac:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80137b0:	b29b      	uxth	r3, r3
 80137b2:	461a      	mov	r2, r3
 80137b4:	887b      	ldrh	r3, [r7, #2]
 80137b6:	4293      	cmp	r3, r2
 80137b8:	d31f      	bcc.n	80137fa <_calcuratePositionModulation+0xa2>
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80137be:	887a      	ldrh	r2, [r7, #2]
 80137c0:	429a      	cmp	r2, r3
 80137c2:	d81a      	bhi.n	80137fa <_calcuratePositionModulation+0xa2>
					p_owner->__p_position[p_owner->_channel] = diff;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80137ce:	005b      	lsls	r3, r3, #1
 80137d0:	4413      	add	r3, r2
 80137d2:	887a      	ldrh	r2, [r7, #2]
 80137d4:	801a      	strh	r2, [r3, #0]
					rtn = TRUE;
 80137d6:	2301      	movs	r3, #1
 80137d8:	73fb      	strb	r3, [r7, #15]
 80137da:	e00e      	b.n	80137fa <_calcuratePositionModulation+0xa2>
				}
			}
			else {
				p_owner->__p_position[p_owner->_channel] = diff;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80137e6:	005b      	lsls	r3, r3, #1
 80137e8:	4413      	add	r3, r2
 80137ea:	887a      	ldrh	r2, [r7, #2]
 80137ec:	801a      	strh	r2, [r3, #0]
				rtn = TRUE;
 80137ee:	2301      	movs	r3, #1
 80137f0:	73fb      	strb	r3, [r7, #15]
 80137f2:	e002      	b.n	80137fa <_calcuratePositionModulation+0xa2>
			}
		}
	}
	else {
		p_owner->_channel = -1;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	22ff      	movs	r2, #255	; 0xff
 80137f8:	71da      	strb	r2, [r3, #7]
	}
	return rtn;
 80137fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80137fc:	4618      	mov	r0, r3
 80137fe:	3714      	adds	r7, #20
 8013800:	46bd      	mov	sp, r7
 8013802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013806:	4770      	bx	lr

08013808 <pifPulse_Init>:
}

#endif	// __PIF_COLLECT_SIGNAL__

BOOL pifPulse_Init(PifPulse* p_owner, PifId id)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b082      	sub	sp, #8
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
 8013810:	460b      	mov	r3, r1
 8013812:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d104      	bne.n	8013824 <pifPulse_Init+0x1c>
        pif_error = E_INVALID_PARAM;
 801381a:	4b0e      	ldr	r3, [pc, #56]	; (8013854 <pifPulse_Init+0x4c>)
 801381c:	2201      	movs	r2, #1
 801381e:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8013820:	2300      	movs	r3, #0
 8013822:	e012      	b.n	801384a <pifPulse_Init+0x42>
    }

	memset(p_owner, 0, sizeof(PifPulse));
 8013824:	224c      	movs	r2, #76	; 0x4c
 8013826:	2100      	movs	r1, #0
 8013828:	6878      	ldr	r0, [r7, #4]
 801382a:	f00e fadb 	bl	8021de4 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 801382e:	887b      	ldrh	r3, [r7, #2]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d106      	bne.n	8013842 <pifPulse_Init+0x3a>
 8013834:	4b08      	ldr	r3, [pc, #32]	; (8013858 <pifPulse_Init+0x50>)
 8013836:	881b      	ldrh	r3, [r3, #0]
 8013838:	1c5a      	adds	r2, r3, #1
 801383a:	b291      	uxth	r1, r2
 801383c:	4a06      	ldr	r2, [pc, #24]	; (8013858 <pifPulse_Init+0x50>)
 801383e:	8011      	strh	r1, [r2, #0]
 8013840:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	887a      	ldrh	r2, [r7, #2]
 8013846:	809a      	strh	r2, [r3, #4]
	PifPulseColSig* p_colsig = pifDList_AddLast(&s_cs_list, sizeof(PifPulseColSig));
	if (!p_colsig) goto fail;
	p_colsig->p_owner = p_owner;
	p_owner->__p_colsig = p_colsig;
#endif
    return TRUE;
 8013848:	2301      	movs	r3, #1
#ifdef __PIF_COLLECT_SIGNAL__
fail:
	pifPulse_Clear(p_owner);
    return FALSE;
#endif
}
 801384a:	4618      	mov	r0, r3
 801384c:	3708      	adds	r7, #8
 801384e:	46bd      	mov	sp, r7
 8013850:	bd80      	pop	{r7, pc}
 8013852:	bf00      	nop
 8013854:	200020d1 	.word	0x200020d1
 8013858:	2000005c 	.word	0x2000005c

0801385c <pifPulse_SetPositionMode>:
{
	p_owner->_measure_mode &= ~measure_mode;
}

BOOL pifPulse_SetPositionMode(PifPulse* p_owner, uint8_t channel_count, uint16_t threshold_1us, uint16_t* p_value)
{
 801385c:	b480      	push	{r7}
 801385e:	b085      	sub	sp, #20
 8013860:	af00      	add	r7, sp, #0
 8013862:	60f8      	str	r0, [r7, #12]
 8013864:	607b      	str	r3, [r7, #4]
 8013866:	460b      	mov	r3, r1
 8013868:	72fb      	strb	r3, [r7, #11]
 801386a:	4613      	mov	r3, r2
 801386c:	813b      	strh	r3, [r7, #8]
    if (p_owner->_measure_mode & PIF_PMM_EDGE_MASK) {
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	799b      	ldrb	r3, [r3, #6]
 8013872:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8013876:	2b00      	cmp	r3, #0
 8013878:	d004      	beq.n	8013884 <pifPulse_SetPositionMode+0x28>
		pif_error = E_INVALID_PARAM;
 801387a:	4b0f      	ldr	r3, [pc, #60]	; (80138b8 <pifPulse_SetPositionMode+0x5c>)
 801387c:	2201      	movs	r2, #1
 801387e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013880:	2300      	movs	r3, #0
 8013882:	e012      	b.n	80138aa <pifPulse_SetPositionMode+0x4e>
    }

	p_owner->__channel_count = channel_count;
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	7afa      	ldrb	r2, [r7, #11]
 8013888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    p_owner->__threshold_1us = threshold_1us;
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	893a      	ldrh	r2, [r7, #8]
 8013890:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    p_owner->__p_position = p_value;
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	687a      	ldr	r2, [r7, #4]
 8013898:	645a      	str	r2, [r3, #68]	; 0x44
    p_owner->_measure_mode |= PIF_PMM_TICK_POSITION;
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	799b      	ldrb	r3, [r3, #6]
 801389e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138a2:	b2da      	uxtb	r2, r3
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	719a      	strb	r2, [r3, #6]
    return TRUE;
 80138a8:	2301      	movs	r3, #1
}
 80138aa:	4618      	mov	r0, r3
 80138ac:	3714      	adds	r7, #20
 80138ae:	46bd      	mov	sp, r7
 80138b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b4:	4770      	bx	lr
 80138b6:	bf00      	nop
 80138b8:	200020d1 	.word	0x200020d1

080138bc <pifPulse_SetValidRange>:

BOOL pifPulse_SetValidRange(PifPulse* p_owner, uint8_t measure_mode, uint32_t min, uint32_t max)
{
 80138bc:	b480      	push	{r7}
 80138be:	b087      	sub	sp, #28
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	60f8      	str	r0, [r7, #12]
 80138c4:	607a      	str	r2, [r7, #4]
 80138c6:	603b      	str	r3, [r7, #0]
 80138c8:	460b      	mov	r3, r1
 80138ca:	72fb      	strb	r3, [r7, #11]
	int index = -1;
 80138cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80138d0:	617b      	str	r3, [r7, #20]

	switch (measure_mode) {
 80138d2:	7afb      	ldrb	r3, [r7, #11]
 80138d4:	2b40      	cmp	r3, #64	; 0x40
 80138d6:	d013      	beq.n	8013900 <pifPulse_SetValidRange+0x44>
 80138d8:	2b40      	cmp	r3, #64	; 0x40
 80138da:	dc14      	bgt.n	8013906 <pifPulse_SetValidRange+0x4a>
 80138dc:	2b20      	cmp	r3, #32
 80138de:	d00c      	beq.n	80138fa <pifPulse_SetValidRange+0x3e>
 80138e0:	2b20      	cmp	r3, #32
 80138e2:	dc10      	bgt.n	8013906 <pifPulse_SetValidRange+0x4a>
 80138e4:	2b01      	cmp	r3, #1
 80138e6:	d002      	beq.n	80138ee <pifPulse_SetValidRange+0x32>
 80138e8:	2b10      	cmp	r3, #16
 80138ea:	d003      	beq.n	80138f4 <pifPulse_SetValidRange+0x38>
 80138ec:	e00b      	b.n	8013906 <pifPulse_SetValidRange+0x4a>
	case PIF_PMM_COMMON_PERIOD:
		index = 0;
 80138ee:	2300      	movs	r3, #0
 80138f0:	617b      	str	r3, [r7, #20]
		break;
 80138f2:	e008      	b.n	8013906 <pifPulse_SetValidRange+0x4a>

	case PIF_PMM_EDGE_LOW_WIDTH:
		index = 1;
 80138f4:	2301      	movs	r3, #1
 80138f6:	617b      	str	r3, [r7, #20]
		break;
 80138f8:	e005      	b.n	8013906 <pifPulse_SetValidRange+0x4a>

	case PIF_PMM_EDGE_HIGH_WIDTH:
		index = 2;
 80138fa:	2302      	movs	r3, #2
 80138fc:	617b      	str	r3, [r7, #20]
		break;
 80138fe:	e002      	b.n	8013906 <pifPulse_SetValidRange+0x4a>

	case PIF_PMM_TICK_POSITION:
		index = 3;
 8013900:	2303      	movs	r3, #3
 8013902:	617b      	str	r3, [r7, #20]
		break;
 8013904:	bf00      	nop
	}
	if (index < 0) {
 8013906:	697b      	ldr	r3, [r7, #20]
 8013908:	2b00      	cmp	r3, #0
 801390a:	da04      	bge.n	8013916 <pifPulse_SetValidRange+0x5a>
		pif_error = E_INVALID_PARAM;
 801390c:	4b15      	ldr	r3, [pc, #84]	; (8013964 <pifPulse_SetValidRange+0xa8>)
 801390e:	2201      	movs	r2, #1
 8013910:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013912:	2300      	movs	r3, #0
 8013914:	e01f      	b.n	8013956 <pifPulse_SetValidRange+0x9a>
	}
	p_owner->__valid_range[index].check = TRUE;
 8013916:	68fa      	ldr	r2, [r7, #12]
 8013918:	697b      	ldr	r3, [r7, #20]
 801391a:	330a      	adds	r3, #10
 801391c:	009b      	lsls	r3, r3, #2
 801391e:	4413      	add	r3, r2
 8013920:	791a      	ldrb	r2, [r3, #4]
 8013922:	f042 0201 	orr.w	r2, r2, #1
 8013926:	711a      	strb	r2, [r3, #4]
	p_owner->__valid_range[index].min = min;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801392e:	b299      	uxth	r1, r3
 8013930:	68fa      	ldr	r2, [r7, #12]
 8013932:	697b      	ldr	r3, [r7, #20]
 8013934:	330a      	adds	r3, #10
 8013936:	009b      	lsls	r3, r3, #2
 8013938:	4413      	add	r3, r2
 801393a:	889a      	ldrh	r2, [r3, #4]
 801393c:	f361 024f 	bfi	r2, r1, #1, #15
 8013940:	809a      	strh	r2, [r3, #4]
	p_owner->__valid_range[index].max = max;
 8013942:	683b      	ldr	r3, [r7, #0]
 8013944:	b299      	uxth	r1, r3
 8013946:	68fa      	ldr	r2, [r7, #12]
 8013948:	697b      	ldr	r3, [r7, #20]
 801394a:	330a      	adds	r3, #10
 801394c:	009b      	lsls	r3, r3, #2
 801394e:	4413      	add	r3, r2
 8013950:	460a      	mov	r2, r1
 8013952:	80da      	strh	r2, [r3, #6]
	return TRUE;
 8013954:	2301      	movs	r3, #1
}
 8013956:	4618      	mov	r0, r3
 8013958:	371c      	adds	r7, #28
 801395a:	46bd      	mov	sp, r7
 801395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013960:	4770      	bx	lr
 8013962:	bf00      	nop
 8013964:	200020d1 	.word	0x200020d1

08013968 <pifPulse_sigTick>:

	return rtn;
}

uint8_t pifPulse_sigTick(PifPulse* p_owner, uint32_t time_us)
{
 8013968:	b580      	push	{r7, lr}
 801396a:	b084      	sub	sp, #16
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
 8013970:	6039      	str	r1, [r7, #0]
	uint8_t rtn = 0;
 8013972:	2300      	movs	r3, #0
 8013974:	73fb      	strb	r3, [r7, #15]

	p_owner->__data[p_owner->__ptr].falling = time_us;
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801397c:	687a      	ldr	r2, [r7, #4]
 801397e:	3301      	adds	r3, #1
 8013980:	00db      	lsls	r3, r3, #3
 8013982:	4413      	add	r3, r2
 8013984:	683a      	ldr	r2, [r7, #0]
 8013986:	605a      	str	r2, [r3, #4]
	if (p_owner->_measure_mode & PIF_PMM_COMMON_COUNT) {
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	799b      	ldrb	r3, [r3, #6]
 801398c:	f003 0302 	and.w	r3, r3, #2
 8013990:	2b00      	cmp	r3, #0
 8013992:	d004      	beq.n	801399e <pifPulse_sigTick+0x36>
		p_owner->falling_count++;
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	1c5a      	adds	r2, r3, #1
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	601a      	str	r2, [r3, #0]
	}
	if (p_owner->_measure_mode & PIF_PMM_TICK_POSITION) {
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	799b      	ldrb	r3, [r3, #6]
 80139a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d01f      	beq.n	80139ea <pifPulse_sigTick+0x82>
		rtn |= _calcuratePositionModulation(p_owner, p_owner->__data[p_owner->__ptr].falling - p_owner->__data[p_owner->__last_ptr].falling) << 4;
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80139b0:	687a      	ldr	r2, [r7, #4]
 80139b2:	3301      	adds	r3, #1
 80139b4:	00db      	lsls	r3, r3, #3
 80139b6:	4413      	add	r3, r2
 80139b8:	685b      	ldr	r3, [r3, #4]
 80139ba:	b29a      	uxth	r2, r3
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80139c2:	6879      	ldr	r1, [r7, #4]
 80139c4:	3301      	adds	r3, #1
 80139c6:	00db      	lsls	r3, r3, #3
 80139c8:	440b      	add	r3, r1
 80139ca:	685b      	ldr	r3, [r3, #4]
 80139cc:	b29b      	uxth	r3, r3
 80139ce:	1ad3      	subs	r3, r2, r3
 80139d0:	b29b      	uxth	r3, r3
 80139d2:	4619      	mov	r1, r3
 80139d4:	6878      	ldr	r0, [r7, #4]
 80139d6:	f7ff febf 	bl	8013758 <_calcuratePositionModulation>
 80139da:	4603      	mov	r3, r0
 80139dc:	011b      	lsls	r3, r3, #4
 80139de:	b25a      	sxtb	r2, r3
 80139e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80139e4:	4313      	orrs	r3, r2
 80139e6:	b25b      	sxtb	r3, r3
 80139e8:	73fb      	strb	r3, [r7, #15]
	}
	p_owner->__last_ptr = p_owner->__ptr;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	p_owner->__ptr = (p_owner->__ptr + 1) & PIF_PULSE_DATA_MASK;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80139fc:	3301      	adds	r3, #1
 80139fe:	b2db      	uxtb	r3, r3
 8013a00:	f003 0303 	and.w	r3, r3, #3
 8013a04:	b2da      	uxtb	r2, r3
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	if (p_owner->__count < PIF_PULSE_DATA_SIZE) p_owner->__count++;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8013a12:	2b03      	cmp	r3, #3
 8013a14:	d807      	bhi.n	8013a26 <pifPulse_sigTick+0xbe>
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8013a1c:	3301      	adds	r3, #1
 8013a1e:	b2da      	uxtb	r2, r3
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	if (p_owner->__evt.tick) {
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d005      	beq.n	8013a3a <pifPulse_sigTick+0xd2>
		(*p_owner->__evt.tick)(p_owner->__p_issuer);
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013a32:	687a      	ldr	r2, [r7, #4]
 8013a34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8013a36:	4610      	mov	r0, r2
 8013a38:	4798      	blx	r3
	}

	return rtn;
 8013a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	3710      	adds	r7, #16
 8013a40:	46bd      	mov	sp, r7
 8013a42:	bd80      	pop	{r7, pc}

08013a44 <_chopOff>:

#include <string.h>


static BOOL _chopOff(PifRingBuffer* p_owner, uint16_t count)
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	b084      	sub	sp, #16
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	6078      	str	r0, [r7, #4]
 8013a4c:	460b      	mov	r3, r1
 8013a4e:	807b      	strh	r3, [r7, #2]
	uint16_t length;
	uint16_t size, tail;

	switch (p_owner->_bt.chop_off) {
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	791b      	ldrb	r3, [r3, #4]
 8013a54:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8013a58:	b2db      	uxtb	r3, r3
 8013a5a:	2b01      	cmp	r3, #1
 8013a5c:	d002      	beq.n	8013a64 <_chopOff+0x20>
 8013a5e:	2b02      	cmp	r3, #2
 8013a60:	d02e      	beq.n	8013ac0 <_chopOff+0x7c>
 8013a62:	e065      	b.n	8013b30 <_chopOff+0xec>
	case RB_CHOP_OFF_CHAR:
		size = 0;
 8013a64:	2300      	movs	r3, #0
 8013a66:	81fb      	strh	r3, [r7, #14]
		tail = p_owner->__tail;
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	8adb      	ldrh	r3, [r3, #22]
 8013a6c:	81bb      	strh	r3, [r7, #12]
		while (tail != p_owner->__head) {
 8013a6e:	e021      	b.n	8013ab4 <_chopOff+0x70>
			if (p_owner->__p_buffer[tail] == p_owner->__ui.chop_off_char) {
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	691a      	ldr	r2, [r3, #16]
 8013a74:	89bb      	ldrh	r3, [r7, #12]
 8013a76:	4413      	add	r3, r2
 8013a78:	781a      	ldrb	r2, [r3, #0]
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	7e9b      	ldrb	r3, [r3, #26]
 8013a7e:	429a      	cmp	r2, r3
 8013a80:	d108      	bne.n	8013a94 <_chopOff+0x50>
				if (size > count) {
 8013a82:	89fa      	ldrh	r2, [r7, #14]
 8013a84:	887b      	ldrh	r3, [r7, #2]
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d904      	bls.n	8013a94 <_chopOff+0x50>
					p_owner->__tail = tail;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	89ba      	ldrh	r2, [r7, #12]
 8013a8e:	82da      	strh	r2, [r3, #22]
					return TRUE;
 8013a90:	2301      	movs	r3, #1
 8013a92:	e04e      	b.n	8013b32 <_chopOff+0xee>
				}
			}
			tail++;
 8013a94:	89bb      	ldrh	r3, [r7, #12]
 8013a96:	3301      	adds	r3, #1
 8013a98:	81bb      	strh	r3, [r7, #12]
			if (tail >= p_owner->_size) tail -= p_owner->_size;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	891b      	ldrh	r3, [r3, #8]
 8013a9e:	89ba      	ldrh	r2, [r7, #12]
 8013aa0:	429a      	cmp	r2, r3
 8013aa2:	d304      	bcc.n	8013aae <_chopOff+0x6a>
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	891b      	ldrh	r3, [r3, #8]
 8013aa8:	89ba      	ldrh	r2, [r7, #12]
 8013aaa:	1ad3      	subs	r3, r2, r3
 8013aac:	81bb      	strh	r3, [r7, #12]
			size++;
 8013aae:	89fb      	ldrh	r3, [r7, #14]
 8013ab0:	3301      	adds	r3, #1
 8013ab2:	81fb      	strh	r3, [r7, #14]
		while (tail != p_owner->__head) {
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	8a9b      	ldrh	r3, [r3, #20]
 8013ab8:	89ba      	ldrh	r2, [r7, #12]
 8013aba:	429a      	cmp	r2, r3
 8013abc:	d1d8      	bne.n	8013a70 <_chopOff+0x2c>
		}
		break;
 8013abe:	e037      	b.n	8013b30 <_chopOff+0xec>

	case RB_CHOP_OFF_LENGTH:
		length = pifRingBuffer_GetFillSize(p_owner);
 8013ac0:	6878      	ldr	r0, [r7, #4]
 8013ac2:	f000 f92f 	bl	8013d24 <pifRingBuffer_GetFillSize>
 8013ac6:	4603      	mov	r3, r0
 8013ac8:	817b      	strh	r3, [r7, #10]
		size = p_owner->__ui.chop_off_length;
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	8b5b      	ldrh	r3, [r3, #26]
 8013ace:	81fb      	strh	r3, [r7, #14]
		while (count > size) {
 8013ad0:	e004      	b.n	8013adc <_chopOff+0x98>
			size += p_owner->__ui.chop_off_length;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	8b5a      	ldrh	r2, [r3, #26]
 8013ad6:	89fb      	ldrh	r3, [r7, #14]
 8013ad8:	4413      	add	r3, r2
 8013ada:	81fb      	strh	r3, [r7, #14]
		while (count > size) {
 8013adc:	887a      	ldrh	r2, [r7, #2]
 8013ade:	89fb      	ldrh	r3, [r7, #14]
 8013ae0:	429a      	cmp	r2, r3
 8013ae2:	d8f6      	bhi.n	8013ad2 <_chopOff+0x8e>
		}
		if (size < length) {
 8013ae4:	89fa      	ldrh	r2, [r7, #14]
 8013ae6:	897b      	ldrh	r3, [r7, #10]
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d216      	bcs.n	8013b1a <_chopOff+0xd6>
			p_owner->__tail += size;
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	8ada      	ldrh	r2, [r3, #22]
 8013af0:	89fb      	ldrh	r3, [r7, #14]
 8013af2:	4413      	add	r3, r2
 8013af4:	b29a      	uxth	r2, r3
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	82da      	strh	r2, [r3, #22]
			if (p_owner->__tail >= p_owner->_size) p_owner->__tail -= p_owner->_size;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	8ada      	ldrh	r2, [r3, #22]
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	891b      	ldrh	r3, [r3, #8]
 8013b02:	429a      	cmp	r2, r3
 8013b04:	d307      	bcc.n	8013b16 <_chopOff+0xd2>
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	8ada      	ldrh	r2, [r3, #22]
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	891b      	ldrh	r3, [r3, #8]
 8013b0e:	1ad3      	subs	r3, r2, r3
 8013b10:	b29a      	uxth	r2, r3
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	82da      	strh	r2, [r3, #22]
			return TRUE;
 8013b16:	2301      	movs	r3, #1
 8013b18:	e00b      	b.n	8013b32 <_chopOff+0xee>
		}
		else if (count <= length) {
 8013b1a:	887a      	ldrh	r2, [r7, #2]
 8013b1c:	897b      	ldrh	r3, [r7, #10]
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d805      	bhi.n	8013b2e <_chopOff+0xea>
			p_owner->__tail = p_owner->__head;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	8a9a      	ldrh	r2, [r3, #20]
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	82da      	strh	r2, [r3, #22]
			return TRUE;
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	e001      	b.n	8013b32 <_chopOff+0xee>
		}
		break;
 8013b2e:	bf00      	nop
	}
	return FALSE;
 8013b30:	2300      	movs	r3, #0
}
 8013b32:	4618      	mov	r0, r3
 8013b34:	3710      	adds	r7, #16
 8013b36:	46bd      	mov	sp, r7
 8013b38:	bd80      	pop	{r7, pc}
	...

08013b3c <pifRingBuffer_CreateHeap>:

PifRingBuffer* pifRingBuffer_CreateHeap(PifId id, uint16_t size)
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b084      	sub	sp, #16
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	4603      	mov	r3, r0
 8013b44:	460a      	mov	r2, r1
 8013b46:	80fb      	strh	r3, [r7, #6]
 8013b48:	4613      	mov	r3, r2
 8013b4a:	80bb      	strh	r3, [r7, #4]
	PifRingBuffer* p_owner = malloc(sizeof(PifRingBuffer));
 8013b4c:	201c      	movs	r0, #28
 8013b4e:	f00e f92b 	bl	8021da8 <malloc>
 8013b52:	4603      	mov	r3, r0
 8013b54:	60fb      	str	r3, [r7, #12]
	if (!p_owner) {
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d104      	bne.n	8013b66 <pifRingBuffer_CreateHeap+0x2a>
		pif_error = E_OUT_OF_HEAP;
 8013b5c:	4b0c      	ldr	r3, [pc, #48]	; (8013b90 <pifRingBuffer_CreateHeap+0x54>)
 8013b5e:	2203      	movs	r2, #3
 8013b60:	701a      	strb	r2, [r3, #0]
		return NULL;
 8013b62:	2300      	movs	r3, #0
 8013b64:	e010      	b.n	8013b88 <pifRingBuffer_CreateHeap+0x4c>
	}

	if (!pifRingBuffer_InitHeap(p_owner, id, size)) {
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	88ba      	ldrh	r2, [r7, #4]
 8013b6a:	88f9      	ldrh	r1, [r7, #6]
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f000 f829 	bl	8013bc4 <pifRingBuffer_InitHeap>
 8013b72:	4603      	mov	r3, r0
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d106      	bne.n	8013b86 <pifRingBuffer_CreateHeap+0x4a>
		pifRingBuffer_Destroy(&p_owner);
 8013b78:	f107 030c 	add.w	r3, r7, #12
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	f000 f809 	bl	8013b94 <pifRingBuffer_Destroy>
		return NULL;
 8013b82:	2300      	movs	r3, #0
 8013b84:	e000      	b.n	8013b88 <pifRingBuffer_CreateHeap+0x4c>
	}
    return p_owner;
 8013b86:	68fb      	ldr	r3, [r7, #12]
}
 8013b88:	4618      	mov	r0, r3
 8013b8a:	3710      	adds	r7, #16
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	bd80      	pop	{r7, pc}
 8013b90:	200020d1 	.word	0x200020d1

08013b94 <pifRingBuffer_Destroy>:
	}
    return p_owner;
}

void pifRingBuffer_Destroy(PifRingBuffer** pp_owner)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b082      	sub	sp, #8
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
	if (pp_owner) {
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d00c      	beq.n	8013bbc <pifRingBuffer_Destroy+0x28>
		pifRingBuffer_Clear(*pp_owner);
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	f000 f854 	bl	8013c54 <pifRingBuffer_Clear>
		free(*pp_owner);
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f00e f901 	bl	8021db8 <free>
		*pp_owner = NULL;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	2200      	movs	r2, #0
 8013bba:	601a      	str	r2, [r3, #0]
	}
}
 8013bbc:	bf00      	nop
 8013bbe:	3708      	adds	r7, #8
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}

08013bc4 <pifRingBuffer_InitHeap>:

BOOL pifRingBuffer_InitHeap(PifRingBuffer* p_owner, PifId id, uint16_t size)
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b082      	sub	sp, #8
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
 8013bcc:	460b      	mov	r3, r1
 8013bce:	807b      	strh	r3, [r7, #2]
 8013bd0:	4613      	mov	r3, r2
 8013bd2:	803b      	strh	r3, [r7, #0]
    if (!p_owner || !size) {
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d002      	beq.n	8013be0 <pifRingBuffer_InitHeap+0x1c>
 8013bda:	883b      	ldrh	r3, [r7, #0]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d104      	bne.n	8013bea <pifRingBuffer_InitHeap+0x26>
		pif_error = E_INVALID_PARAM;
 8013be0:	4b1a      	ldr	r3, [pc, #104]	; (8013c4c <pifRingBuffer_InitHeap+0x88>)
 8013be2:	2201      	movs	r2, #1
 8013be4:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013be6:	2300      	movs	r3, #0
 8013be8:	e02b      	b.n	8013c42 <pifRingBuffer_InitHeap+0x7e>
	}

	memset(p_owner, 0, sizeof(PifRingBuffer));
 8013bea:	221c      	movs	r2, #28
 8013bec:	2100      	movs	r1, #0
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f00e f8f8 	bl	8021de4 <memset>

	p_owner->__p_buffer = calloc(sizeof(uint8_t), size);
 8013bf4:	883b      	ldrh	r3, [r7, #0]
 8013bf6:	4619      	mov	r1, r3
 8013bf8:	2001      	movs	r0, #1
 8013bfa:	f00e f8a3 	bl	8021d44 <calloc>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	461a      	mov	r2, r3
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	611a      	str	r2, [r3, #16]
	if (!p_owner->__p_buffer) {
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	691b      	ldr	r3, [r3, #16]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d108      	bne.n	8013c20 <pifRingBuffer_InitHeap+0x5c>
		pif_error = E_OUT_OF_HEAP;
 8013c0e:	4b0f      	ldr	r3, [pc, #60]	; (8013c4c <pifRingBuffer_InitHeap+0x88>)
 8013c10:	2203      	movs	r2, #3
 8013c12:	701a      	strb	r2, [r3, #0]
		goto fail;
 8013c14:	bf00      	nop
	p_owner->_id = id;
    p_owner->_size = size;
    return TRUE;

fail:
	pifRingBuffer_Clear(p_owner);
 8013c16:	6878      	ldr	r0, [r7, #4]
 8013c18:	f000 f81c 	bl	8013c54 <pifRingBuffer_Clear>
    return FALSE;
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	e010      	b.n	8013c42 <pifRingBuffer_InitHeap+0x7e>
	if (id == PIF_ID_AUTO) id = pif_id++;
 8013c20:	887b      	ldrh	r3, [r7, #2]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d106      	bne.n	8013c34 <pifRingBuffer_InitHeap+0x70>
 8013c26:	4b0a      	ldr	r3, [pc, #40]	; (8013c50 <pifRingBuffer_InitHeap+0x8c>)
 8013c28:	881b      	ldrh	r3, [r3, #0]
 8013c2a:	1c5a      	adds	r2, r3, #1
 8013c2c:	b291      	uxth	r1, r2
 8013c2e:	4a08      	ldr	r2, [pc, #32]	; (8013c50 <pifRingBuffer_InitHeap+0x8c>)
 8013c30:	8011      	strh	r1, [r2, #0]
 8013c32:	807b      	strh	r3, [r7, #2]
	p_owner->_id = id;
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	887a      	ldrh	r2, [r7, #2]
 8013c38:	801a      	strh	r2, [r3, #0]
    p_owner->_size = size;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	883a      	ldrh	r2, [r7, #0]
 8013c3e:	811a      	strh	r2, [r3, #8]
    return TRUE;
 8013c40:	2301      	movs	r3, #1
}
 8013c42:	4618      	mov	r0, r3
 8013c44:	3708      	adds	r7, #8
 8013c46:	46bd      	mov	sp, r7
 8013c48:	bd80      	pop	{r7, pc}
 8013c4a:	bf00      	nop
 8013c4c:	200020d1 	.word	0x200020d1
 8013c50:	2000005c 	.word	0x2000005c

08013c54 <pifRingBuffer_Clear>:
    p_owner->_size = size;
    return TRUE;
}

void pifRingBuffer_Clear(PifRingBuffer* p_owner)
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b082      	sub	sp, #8
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
	if (p_owner->_bt.is_static == FALSE && p_owner->__p_buffer) {
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	791b      	ldrb	r3, [r3, #4]
 8013c60:	f003 0301 	and.w	r3, r3, #1
 8013c64:	b2db      	uxtb	r3, r3
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d108      	bne.n	8013c7c <pifRingBuffer_Clear+0x28>
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	691b      	ldr	r3, [r3, #16]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d004      	beq.n	8013c7c <pifRingBuffer_Clear+0x28>
        free(p_owner->__p_buffer);
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	691b      	ldr	r3, [r3, #16]
 8013c76:	4618      	mov	r0, r3
 8013c78:	f00e f89e 	bl	8021db8 <free>
    }
    p_owner->__p_buffer = NULL;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	2200      	movs	r2, #0
 8013c80:	611a      	str	r2, [r3, #16]
}
 8013c82:	bf00      	nop
 8013c84:	3708      	adds	r7, #8
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bd80      	pop	{r7, pc}

08013c8a <pifRingBuffer_SetName>:
    p_owner->_size = size;
	return TRUE;
}

void pifRingBuffer_SetName(PifRingBuffer* p_owner, const char* p_name)
{
 8013c8a:	b480      	push	{r7}
 8013c8c:	b083      	sub	sp, #12
 8013c8e:	af00      	add	r7, sp, #0
 8013c90:	6078      	str	r0, [r7, #4]
 8013c92:	6039      	str	r1, [r7, #0]
	p_owner->__p_name = p_name;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	683a      	ldr	r2, [r7, #0]
 8013c98:	60da      	str	r2, [r3, #12]
}
 8013c9a:	bf00      	nop
 8013c9c:	370c      	adds	r7, #12
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca4:	4770      	bx	lr

08013ca6 <pifRingBuffer_GetTailPointer>:

uint8_t *pifRingBuffer_GetTailPointer(PifRingBuffer* p_owner, uint16_t pos)
{
 8013ca6:	b480      	push	{r7}
 8013ca8:	b083      	sub	sp, #12
 8013caa:	af00      	add	r7, sp, #0
 8013cac:	6078      	str	r0, [r7, #4]
 8013cae:	460b      	mov	r3, r1
 8013cb0:	807b      	strh	r3, [r7, #2]
	return &p_owner->__p_buffer[(p_owner->__tail + pos) % p_owner->_size];
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	6919      	ldr	r1, [r3, #16]
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	8adb      	ldrh	r3, [r3, #22]
 8013cba:	461a      	mov	r2, r3
 8013cbc:	887b      	ldrh	r3, [r7, #2]
 8013cbe:	4413      	add	r3, r2
 8013cc0:	687a      	ldr	r2, [r7, #4]
 8013cc2:	8912      	ldrh	r2, [r2, #8]
 8013cc4:	fb93 f0f2 	sdiv	r0, r3, r2
 8013cc8:	fb00 f202 	mul.w	r2, r0, r2
 8013ccc:	1a9b      	subs	r3, r3, r2
 8013cce:	440b      	add	r3, r1
}
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	370c      	adds	r7, #12
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cda:	4770      	bx	lr

08013cdc <pifRingBuffer_IsBuffer>:
	p_owner->_bt.chop_off = RB_CHOP_OFF_LENGTH;
	p_owner->__ui.chop_off_length = length;
}

BOOL pifRingBuffer_IsBuffer(PifRingBuffer* p_owner)
{
 8013cdc:	b480      	push	{r7}
 8013cde:	b083      	sub	sp, #12
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
	return p_owner->__p_buffer != NULL;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	691b      	ldr	r3, [r3, #16]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	bf14      	ite	ne
 8013cec:	2301      	movne	r3, #1
 8013cee:	2300      	moveq	r3, #0
 8013cf0:	b2db      	uxtb	r3, r3
}
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	370c      	adds	r7, #12
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfc:	4770      	bx	lr

08013cfe <pifRingBuffer_IsEmpty>:

BOOL pifRingBuffer_IsEmpty(PifRingBuffer* p_owner)
{
 8013cfe:	b480      	push	{r7}
 8013d00:	b083      	sub	sp, #12
 8013d02:	af00      	add	r7, sp, #0
 8013d04:	6078      	str	r0, [r7, #4]
	return p_owner->__head == p_owner->__tail;
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	8a9a      	ldrh	r2, [r3, #20]
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	8adb      	ldrh	r3, [r3, #22]
 8013d0e:	429a      	cmp	r2, r3
 8013d10:	bf0c      	ite	eq
 8013d12:	2301      	moveq	r3, #1
 8013d14:	2300      	movne	r3, #0
 8013d16:	b2db      	uxtb	r3, r3
}
 8013d18:	4618      	mov	r0, r3
 8013d1a:	370c      	adds	r7, #12
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d22:	4770      	bx	lr

08013d24 <pifRingBuffer_GetFillSize>:

uint16_t pifRingBuffer_GetFillSize(PifRingBuffer* p_owner)
{
 8013d24:	b480      	push	{r7}
 8013d26:	b085      	sub	sp, #20
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
	uint16_t usFill;

    if (p_owner->__head >= p_owner->__tail) {
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	8a9a      	ldrh	r2, [r3, #20]
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	8adb      	ldrh	r3, [r3, #22]
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d306      	bcc.n	8013d46 <pifRingBuffer_GetFillSize+0x22>
    	usFill = p_owner->__head - p_owner->__tail;
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	8a9a      	ldrh	r2, [r3, #20]
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	8adb      	ldrh	r3, [r3, #22]
 8013d40:	1ad3      	subs	r3, r2, r3
 8013d42:	81fb      	strh	r3, [r7, #14]
 8013d44:	e009      	b.n	8013d5a <pifRingBuffer_GetFillSize+0x36>
    }
    else {
    	usFill = p_owner->_size - p_owner->__tail + p_owner->__head;
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	891a      	ldrh	r2, [r3, #8]
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	8adb      	ldrh	r3, [r3, #22]
 8013d4e:	1ad3      	subs	r3, r2, r3
 8013d50:	b29a      	uxth	r2, r3
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	8a9b      	ldrh	r3, [r3, #20]
 8013d56:	4413      	add	r3, r2
 8013d58:	81fb      	strh	r3, [r7, #14]
    }
    return usFill;
 8013d5a:	89fb      	ldrh	r3, [r7, #14]
}
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	3714      	adds	r7, #20
 8013d60:	46bd      	mov	sp, r7
 8013d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d66:	4770      	bx	lr

08013d68 <pifRingBuffer_GetLinerSize>:

uint16_t pifRingBuffer_GetLinerSize(PifRingBuffer* p_owner, uint16_t pos)
{
 8013d68:	b480      	push	{r7}
 8013d6a:	b085      	sub	sp, #20
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
 8013d70:	460b      	mov	r3, r1
 8013d72:	807b      	strh	r3, [r7, #2]
	uint16_t tail = (p_owner->__tail + pos) % p_owner->_size;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	8adb      	ldrh	r3, [r3, #22]
 8013d78:	461a      	mov	r2, r3
 8013d7a:	887b      	ldrh	r3, [r7, #2]
 8013d7c:	4413      	add	r3, r2
 8013d7e:	687a      	ldr	r2, [r7, #4]
 8013d80:	8912      	ldrh	r2, [r2, #8]
 8013d82:	fb93 f1f2 	sdiv	r1, r3, r2
 8013d86:	fb01 f202 	mul.w	r2, r1, r2
 8013d8a:	1a9b      	subs	r3, r3, r2
 8013d8c:	81fb      	strh	r3, [r7, #14]

    if (p_owner->__head >= tail) {
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	8a9b      	ldrh	r3, [r3, #20]
 8013d92:	89fa      	ldrh	r2, [r7, #14]
 8013d94:	429a      	cmp	r2, r3
 8013d96:	d805      	bhi.n	8013da4 <pifRingBuffer_GetLinerSize+0x3c>
    	return p_owner->__head - tail;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	8a9a      	ldrh	r2, [r3, #20]
 8013d9c:	89fb      	ldrh	r3, [r7, #14]
 8013d9e:	1ad3      	subs	r3, r2, r3
 8013da0:	b29b      	uxth	r3, r3
 8013da2:	e004      	b.n	8013dae <pifRingBuffer_GetLinerSize+0x46>
    }
    else {
    	return p_owner->_size - tail;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	891a      	ldrh	r2, [r3, #8]
 8013da8:	89fb      	ldrh	r3, [r7, #14]
 8013daa:	1ad3      	subs	r3, r2, r3
 8013dac:	b29b      	uxth	r3, r3
    }
}
 8013dae:	4618      	mov	r0, r3
 8013db0:	3714      	adds	r7, #20
 8013db2:	46bd      	mov	sp, r7
 8013db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db8:	4770      	bx	lr

08013dba <pifRingBuffer_GetRemainSize>:

uint16_t pifRingBuffer_GetRemainSize(PifRingBuffer* p_owner)
{
 8013dba:	b480      	push	{r7}
 8013dbc:	b085      	sub	sp, #20
 8013dbe:	af00      	add	r7, sp, #0
 8013dc0:	6078      	str	r0, [r7, #4]
	uint16_t remain;

    if (p_owner->__head < p_owner->__tail) {
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	8a9a      	ldrh	r2, [r3, #20]
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	8adb      	ldrh	r3, [r3, #22]
 8013dca:	429a      	cmp	r2, r3
 8013dcc:	d206      	bcs.n	8013ddc <pifRingBuffer_GetRemainSize+0x22>
    	remain = p_owner->__tail - p_owner->__head;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	8ada      	ldrh	r2, [r3, #22]
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	8a9b      	ldrh	r3, [r3, #20]
 8013dd6:	1ad3      	subs	r3, r2, r3
 8013dd8:	81fb      	strh	r3, [r7, #14]
 8013dda:	e009      	b.n	8013df0 <pifRingBuffer_GetRemainSize+0x36>
    }
    else {
    	remain = p_owner->_size - p_owner->__head + p_owner->__tail;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	891a      	ldrh	r2, [r3, #8]
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	8a9b      	ldrh	r3, [r3, #20]
 8013de4:	1ad3      	subs	r3, r2, r3
 8013de6:	b29a      	uxth	r2, r3
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	8adb      	ldrh	r3, [r3, #22]
 8013dec:	4413      	add	r3, r2
 8013dee:	81fb      	strh	r3, [r7, #14]
    }
    return remain - 1;
 8013df0:	89fb      	ldrh	r3, [r7, #14]
 8013df2:	3b01      	subs	r3, #1
 8013df4:	b29b      	uxth	r3, r3
}
 8013df6:	4618      	mov	r0, r3
 8013df8:	3714      	adds	r7, #20
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e00:	4770      	bx	lr

08013e02 <pifRingBuffer_BackupHead>:

void pifRingBuffer_BackupHead(PifRingBuffer* p_owner)
{
 8013e02:	b480      	push	{r7}
 8013e04:	b083      	sub	sp, #12
 8013e06:	af00      	add	r7, sp, #0
 8013e08:	6078      	str	r0, [r7, #4]
	p_owner->__backup_head = p_owner->__head;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	8a9a      	ldrh	r2, [r3, #20]
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	831a      	strh	r2, [r3, #24]
}
 8013e12:	bf00      	nop
 8013e14:	370c      	adds	r7, #12
 8013e16:	46bd      	mov	sp, r7
 8013e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1c:	4770      	bx	lr

08013e1e <pifRingBuffer_RestoreHead>:

void pifRingBuffer_RestoreHead(PifRingBuffer* p_owner)
{
 8013e1e:	b480      	push	{r7}
 8013e20:	b083      	sub	sp, #12
 8013e22:	af00      	add	r7, sp, #0
 8013e24:	6078      	str	r0, [r7, #4]
	p_owner->__head = p_owner->__backup_head;
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	8b1a      	ldrh	r2, [r3, #24]
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	829a      	strh	r2, [r3, #20]
}
 8013e2e:	bf00      	nop
 8013e30:	370c      	adds	r7, #12
 8013e32:	46bd      	mov	sp, r7
 8013e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e38:	4770      	bx	lr
	...

08013e3c <pifRingBuffer_PutByte>:

BOOL pifRingBuffer_PutByte(PifRingBuffer* p_owner, uint8_t data)
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b084      	sub	sp, #16
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	6078      	str	r0, [r7, #4]
 8013e44:	460b      	mov	r3, r1
 8013e46:	70fb      	strb	r3, [r7, #3]
    uint16_t next;

    next = p_owner->__head + 1;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	8a9b      	ldrh	r3, [r3, #20]
 8013e4c:	3301      	adds	r3, #1
 8013e4e:	81fb      	strh	r3, [r7, #14]
	if (next >= p_owner->_size) next = 0;
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	891b      	ldrh	r3, [r3, #8]
 8013e54:	89fa      	ldrh	r2, [r7, #14]
 8013e56:	429a      	cmp	r2, r3
 8013e58:	d301      	bcc.n	8013e5e <pifRingBuffer_PutByte+0x22>
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	81fb      	strh	r3, [r7, #14]
    if (next == p_owner->__tail) {
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	8adb      	ldrh	r3, [r3, #22]
 8013e62:	89fa      	ldrh	r2, [r7, #14]
 8013e64:	429a      	cmp	r2, r3
 8013e66:	d10b      	bne.n	8013e80 <pifRingBuffer_PutByte+0x44>
    	if (!_chopOff(p_owner, 1)) {
 8013e68:	2101      	movs	r1, #1
 8013e6a:	6878      	ldr	r0, [r7, #4]
 8013e6c:	f7ff fdea 	bl	8013a44 <_chopOff>
 8013e70:	4603      	mov	r3, r0
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d104      	bne.n	8013e80 <pifRingBuffer_PutByte+0x44>
    		pif_error = E_OVERFLOW_BUFFER;
 8013e76:	4b0a      	ldr	r3, [pc, #40]	; (8013ea0 <pifRingBuffer_PutByte+0x64>)
 8013e78:	2204      	movs	r2, #4
 8013e7a:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	e00a      	b.n	8013e96 <pifRingBuffer_PutByte+0x5a>
    	}
    }

    p_owner->__p_buffer[p_owner->__head] = data;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	691b      	ldr	r3, [r3, #16]
 8013e84:	687a      	ldr	r2, [r7, #4]
 8013e86:	8a92      	ldrh	r2, [r2, #20]
 8013e88:	4413      	add	r3, r2
 8013e8a:	78fa      	ldrb	r2, [r7, #3]
 8013e8c:	701a      	strb	r2, [r3, #0]
    p_owner->__head = next;
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	89fa      	ldrh	r2, [r7, #14]
 8013e92:	829a      	strh	r2, [r3, #20]
    return TRUE;
 8013e94:	2301      	movs	r3, #1
}
 8013e96:	4618      	mov	r0, r3
 8013e98:	3710      	adds	r7, #16
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	bd80      	pop	{r7, pc}
 8013e9e:	bf00      	nop
 8013ea0:	200020d1 	.word	0x200020d1

08013ea4 <pifRingBuffer_PutData>:

BOOL pifRingBuffer_PutData(PifRingBuffer* p_owner, uint8_t* p_data, uint16_t length)
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b086      	sub	sp, #24
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	60f8      	str	r0, [r7, #12]
 8013eac:	60b9      	str	r1, [r7, #8]
 8013eae:	4613      	mov	r3, r2
 8013eb0:	80fb      	strh	r3, [r7, #6]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner);
 8013eb2:	68f8      	ldr	r0, [r7, #12]
 8013eb4:	f7ff ff81 	bl	8013dba <pifRingBuffer_GetRemainSize>
 8013eb8:	4603      	mov	r3, r0
 8013eba:	82bb      	strh	r3, [r7, #20]

    if (length > remain) {
 8013ebc:	88fa      	ldrh	r2, [r7, #6]
 8013ebe:	8abb      	ldrh	r3, [r7, #20]
 8013ec0:	429a      	cmp	r2, r3
 8013ec2:	d90f      	bls.n	8013ee4 <pifRingBuffer_PutData+0x40>
    	if (!_chopOff(p_owner, length - remain)) {
 8013ec4:	88fa      	ldrh	r2, [r7, #6]
 8013ec6:	8abb      	ldrh	r3, [r7, #20]
 8013ec8:	1ad3      	subs	r3, r2, r3
 8013eca:	b29b      	uxth	r3, r3
 8013ecc:	4619      	mov	r1, r3
 8013ece:	68f8      	ldr	r0, [r7, #12]
 8013ed0:	f7ff fdb8 	bl	8013a44 <_chopOff>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d104      	bne.n	8013ee4 <pifRingBuffer_PutData+0x40>
    		pif_error = E_OVERFLOW_BUFFER;
 8013eda:	4b16      	ldr	r3, [pc, #88]	; (8013f34 <pifRingBuffer_PutData+0x90>)
 8013edc:	2204      	movs	r2, #4
 8013ede:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	e023      	b.n	8013f2c <pifRingBuffer_PutData+0x88>
    	}
    }

    for (uint16_t i = 0; i < length; i++) {
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	82fb      	strh	r3, [r7, #22]
 8013ee8:	e01b      	b.n	8013f22 <pifRingBuffer_PutData+0x7e>
    	p_owner->__p_buffer[p_owner->__head] = p_data[i];
 8013eea:	8afb      	ldrh	r3, [r7, #22]
 8013eec:	68ba      	ldr	r2, [r7, #8]
 8013eee:	441a      	add	r2, r3
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	691b      	ldr	r3, [r3, #16]
 8013ef4:	68f9      	ldr	r1, [r7, #12]
 8013ef6:	8a89      	ldrh	r1, [r1, #20]
 8013ef8:	440b      	add	r3, r1
 8013efa:	7812      	ldrb	r2, [r2, #0]
 8013efc:	701a      	strb	r2, [r3, #0]
    	p_owner->__head++;
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	8a9b      	ldrh	r3, [r3, #20]
 8013f02:	3301      	adds	r3, #1
 8013f04:	b29a      	uxth	r2, r3
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	829a      	strh	r2, [r3, #20]
    	if (p_owner->__head >= p_owner->_size) p_owner->__head = 0;
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	8a9a      	ldrh	r2, [r3, #20]
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	891b      	ldrh	r3, [r3, #8]
 8013f12:	429a      	cmp	r2, r3
 8013f14:	d302      	bcc.n	8013f1c <pifRingBuffer_PutData+0x78>
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	2200      	movs	r2, #0
 8013f1a:	829a      	strh	r2, [r3, #20]
    for (uint16_t i = 0; i < length; i++) {
 8013f1c:	8afb      	ldrh	r3, [r7, #22]
 8013f1e:	3301      	adds	r3, #1
 8013f20:	82fb      	strh	r3, [r7, #22]
 8013f22:	8afa      	ldrh	r2, [r7, #22]
 8013f24:	88fb      	ldrh	r3, [r7, #6]
 8013f26:	429a      	cmp	r2, r3
 8013f28:	d3df      	bcc.n	8013eea <pifRingBuffer_PutData+0x46>
    }
    return TRUE;
 8013f2a:	2301      	movs	r3, #1
}
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	3718      	adds	r7, #24
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd80      	pop	{r7, pc}
 8013f34:	200020d1 	.word	0x200020d1

08013f38 <pifRingBuffer_PutString>:

BOOL pifRingBuffer_PutString(PifRingBuffer* p_owner, char* p_string)
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b084      	sub	sp, #16
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
 8013f40:	6039      	str	r1, [r7, #0]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner);
 8013f42:	6878      	ldr	r0, [r7, #4]
 8013f44:	f7ff ff39 	bl	8013dba <pifRingBuffer_GetRemainSize>
 8013f48:	4603      	mov	r3, r0
 8013f4a:	81bb      	strh	r3, [r7, #12]
	uint16_t length = strlen(p_string);
 8013f4c:	6838      	ldr	r0, [r7, #0]
 8013f4e:	f7ec f94d 	bl	80001ec <strlen>
 8013f52:	4603      	mov	r3, r0
 8013f54:	817b      	strh	r3, [r7, #10]

    if (length > remain) {
 8013f56:	897a      	ldrh	r2, [r7, #10]
 8013f58:	89bb      	ldrh	r3, [r7, #12]
 8013f5a:	429a      	cmp	r2, r3
 8013f5c:	d90f      	bls.n	8013f7e <pifRingBuffer_PutString+0x46>
    	if (!_chopOff(p_owner, length - remain)) {
 8013f5e:	897a      	ldrh	r2, [r7, #10]
 8013f60:	89bb      	ldrh	r3, [r7, #12]
 8013f62:	1ad3      	subs	r3, r2, r3
 8013f64:	b29b      	uxth	r3, r3
 8013f66:	4619      	mov	r1, r3
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	f7ff fd6b 	bl	8013a44 <_chopOff>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d104      	bne.n	8013f7e <pifRingBuffer_PutString+0x46>
    		pif_error = E_OVERFLOW_BUFFER;
 8013f74:	4b16      	ldr	r3, [pc, #88]	; (8013fd0 <pifRingBuffer_PutString+0x98>)
 8013f76:	2204      	movs	r2, #4
 8013f78:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	e023      	b.n	8013fc6 <pifRingBuffer_PutString+0x8e>
    	}
    }

    for (uint16_t i = 0; i < length; i++) {
 8013f7e:	2300      	movs	r3, #0
 8013f80:	81fb      	strh	r3, [r7, #14]
 8013f82:	e01b      	b.n	8013fbc <pifRingBuffer_PutString+0x84>
    	p_owner->__p_buffer[p_owner->__head] = p_string[i];
 8013f84:	89fb      	ldrh	r3, [r7, #14]
 8013f86:	683a      	ldr	r2, [r7, #0]
 8013f88:	441a      	add	r2, r3
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	691b      	ldr	r3, [r3, #16]
 8013f8e:	6879      	ldr	r1, [r7, #4]
 8013f90:	8a89      	ldrh	r1, [r1, #20]
 8013f92:	440b      	add	r3, r1
 8013f94:	7812      	ldrb	r2, [r2, #0]
 8013f96:	701a      	strb	r2, [r3, #0]
    	p_owner->__head++;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	8a9b      	ldrh	r3, [r3, #20]
 8013f9c:	3301      	adds	r3, #1
 8013f9e:	b29a      	uxth	r2, r3
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	829a      	strh	r2, [r3, #20]
    	if (p_owner->__head >= p_owner->_size) p_owner->__head = 0;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	8a9a      	ldrh	r2, [r3, #20]
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	891b      	ldrh	r3, [r3, #8]
 8013fac:	429a      	cmp	r2, r3
 8013fae:	d302      	bcc.n	8013fb6 <pifRingBuffer_PutString+0x7e>
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	829a      	strh	r2, [r3, #20]
    for (uint16_t i = 0; i < length; i++) {
 8013fb6:	89fb      	ldrh	r3, [r7, #14]
 8013fb8:	3301      	adds	r3, #1
 8013fba:	81fb      	strh	r3, [r7, #14]
 8013fbc:	89fa      	ldrh	r2, [r7, #14]
 8013fbe:	897b      	ldrh	r3, [r7, #10]
 8013fc0:	429a      	cmp	r2, r3
 8013fc2:	d3df      	bcc.n	8013f84 <pifRingBuffer_PutString+0x4c>
    }
    return TRUE;
 8013fc4:	2301      	movs	r3, #1
}
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	3710      	adds	r7, #16
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bd80      	pop	{r7, pc}
 8013fce:	bf00      	nop
 8013fd0:	200020d1 	.word	0x200020d1

08013fd4 <pifRingBuffer_GetByte>:

BOOL pifRingBuffer_GetByte(PifRingBuffer* p_owner, uint8_t* p_data)
{
 8013fd4:	b480      	push	{r7}
 8013fd6:	b083      	sub	sp, #12
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	6078      	str	r0, [r7, #4]
 8013fdc:	6039      	str	r1, [r7, #0]
	if (p_owner->__tail == p_owner->__head) return FALSE;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	8ada      	ldrh	r2, [r3, #22]
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	8a9b      	ldrh	r3, [r3, #20]
 8013fe6:	429a      	cmp	r2, r3
 8013fe8:	d101      	bne.n	8013fee <pifRingBuffer_GetByte+0x1a>
 8013fea:	2300      	movs	r3, #0
 8013fec:	e017      	b.n	801401e <pifRingBuffer_GetByte+0x4a>

	*p_data = p_owner->__p_buffer[p_owner->__tail];
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	691b      	ldr	r3, [r3, #16]
 8013ff2:	687a      	ldr	r2, [r7, #4]
 8013ff4:	8ad2      	ldrh	r2, [r2, #22]
 8013ff6:	4413      	add	r3, r2
 8013ff8:	781a      	ldrb	r2, [r3, #0]
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	701a      	strb	r2, [r3, #0]
	p_owner->__tail++;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	8adb      	ldrh	r3, [r3, #22]
 8014002:	3301      	adds	r3, #1
 8014004:	b29a      	uxth	r2, r3
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	82da      	strh	r2, [r3, #22]
	if (p_owner->__tail >= p_owner->_size) p_owner->__tail = 0;
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	8ada      	ldrh	r2, [r3, #22]
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	891b      	ldrh	r3, [r3, #8]
 8014012:	429a      	cmp	r2, r3
 8014014:	d302      	bcc.n	801401c <pifRingBuffer_GetByte+0x48>
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	2200      	movs	r2, #0
 801401a:	82da      	strh	r2, [r3, #22]
	return TRUE;
 801401c:	2301      	movs	r3, #1
}
 801401e:	4618      	mov	r0, r3
 8014020:	370c      	adds	r7, #12
 8014022:	46bd      	mov	sp, r7
 8014024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014028:	4770      	bx	lr

0801402a <pifRingBuffer_CopyToArray>:

uint16_t pifRingBuffer_CopyToArray(uint8_t* p_dst, uint16_t count, PifRingBuffer* p_src, uint16_t pos)
{
 801402a:	b480      	push	{r7}
 801402c:	b087      	sub	sp, #28
 801402e:	af00      	add	r7, sp, #0
 8014030:	60f8      	str	r0, [r7, #12]
 8014032:	607a      	str	r2, [r7, #4]
 8014034:	461a      	mov	r2, r3
 8014036:	460b      	mov	r3, r1
 8014038:	817b      	strh	r3, [r7, #10]
 801403a:	4613      	mov	r3, r2
 801403c:	813b      	strh	r3, [r7, #8]
	uint16_t tail = p_src->__tail + pos;
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	8ada      	ldrh	r2, [r3, #22]
 8014042:	893b      	ldrh	r3, [r7, #8]
 8014044:	4413      	add	r3, r2
 8014046:	82fb      	strh	r3, [r7, #22]
	if (tail >= p_src->_size) tail -= p_src->_size;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	891b      	ldrh	r3, [r3, #8]
 801404c:	8afa      	ldrh	r2, [r7, #22]
 801404e:	429a      	cmp	r2, r3
 8014050:	d304      	bcc.n	801405c <pifRingBuffer_CopyToArray+0x32>
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	891b      	ldrh	r3, [r3, #8]
 8014056:	8afa      	ldrh	r2, [r7, #22]
 8014058:	1ad3      	subs	r3, r2, r3
 801405a:	82fb      	strh	r3, [r7, #22]

	for (uint16_t i = 0; i < count; i++) {
 801405c:	2300      	movs	r3, #0
 801405e:	82bb      	strh	r3, [r7, #20]
 8014060:	e01e      	b.n	80140a0 <pifRingBuffer_CopyToArray+0x76>
		p_dst[i] = p_src->__p_buffer[tail];
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	691a      	ldr	r2, [r3, #16]
 8014066:	8afb      	ldrh	r3, [r7, #22]
 8014068:	441a      	add	r2, r3
 801406a:	8abb      	ldrh	r3, [r7, #20]
 801406c:	68f9      	ldr	r1, [r7, #12]
 801406e:	440b      	add	r3, r1
 8014070:	7812      	ldrb	r2, [r2, #0]
 8014072:	701a      	strb	r2, [r3, #0]
		tail++;
 8014074:	8afb      	ldrh	r3, [r7, #22]
 8014076:	3301      	adds	r3, #1
 8014078:	82fb      	strh	r3, [r7, #22]
		if (tail >= p_src->_size) tail = 0;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	891b      	ldrh	r3, [r3, #8]
 801407e:	8afa      	ldrh	r2, [r7, #22]
 8014080:	429a      	cmp	r2, r3
 8014082:	d301      	bcc.n	8014088 <pifRingBuffer_CopyToArray+0x5e>
 8014084:	2300      	movs	r3, #0
 8014086:	82fb      	strh	r3, [r7, #22]
		if (tail == p_src->__head) return i + 1;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	8a9b      	ldrh	r3, [r3, #20]
 801408c:	8afa      	ldrh	r2, [r7, #22]
 801408e:	429a      	cmp	r2, r3
 8014090:	d103      	bne.n	801409a <pifRingBuffer_CopyToArray+0x70>
 8014092:	8abb      	ldrh	r3, [r7, #20]
 8014094:	3301      	adds	r3, #1
 8014096:	b29b      	uxth	r3, r3
 8014098:	e007      	b.n	80140aa <pifRingBuffer_CopyToArray+0x80>
	for (uint16_t i = 0; i < count; i++) {
 801409a:	8abb      	ldrh	r3, [r7, #20]
 801409c:	3301      	adds	r3, #1
 801409e:	82bb      	strh	r3, [r7, #20]
 80140a0:	8aba      	ldrh	r2, [r7, #20]
 80140a2:	897b      	ldrh	r3, [r7, #10]
 80140a4:	429a      	cmp	r2, r3
 80140a6:	d3dc      	bcc.n	8014062 <pifRingBuffer_CopyToArray+0x38>
	}
	return count;
 80140a8:	897b      	ldrh	r3, [r7, #10]
}
 80140aa:	4618      	mov	r0, r3
 80140ac:	371c      	adds	r7, #28
 80140ae:	46bd      	mov	sp, r7
 80140b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b4:	4770      	bx	lr

080140b6 <pifRingBuffer_Remove>:
	}
	return TRUE;
}

void pifRingBuffer_Remove(PifRingBuffer* p_owner, uint16_t size)
{
 80140b6:	b580      	push	{r7, lr}
 80140b8:	b084      	sub	sp, #16
 80140ba:	af00      	add	r7, sp, #0
 80140bc:	6078      	str	r0, [r7, #4]
 80140be:	460b      	mov	r3, r1
 80140c0:	807b      	strh	r3, [r7, #2]
	uint16_t fill = pifRingBuffer_GetFillSize(p_owner);
 80140c2:	6878      	ldr	r0, [r7, #4]
 80140c4:	f7ff fe2e 	bl	8013d24 <pifRingBuffer_GetFillSize>
 80140c8:	4603      	mov	r3, r0
 80140ca:	81fb      	strh	r3, [r7, #14]

	if (size >= fill) {
 80140cc:	887a      	ldrh	r2, [r7, #2]
 80140ce:	89fb      	ldrh	r3, [r7, #14]
 80140d0:	429a      	cmp	r2, r3
 80140d2:	d304      	bcc.n	80140de <pifRingBuffer_Remove+0x28>
		p_owner->__tail = p_owner->__head;
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	8a9a      	ldrh	r2, [r3, #20]
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	82da      	strh	r2, [r3, #22]
	}
	else {
		p_owner->__tail = (p_owner->__tail + size) % p_owner->_size;
	}
}
 80140dc:	e00e      	b.n	80140fc <pifRingBuffer_Remove+0x46>
		p_owner->__tail = (p_owner->__tail + size) % p_owner->_size;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	8adb      	ldrh	r3, [r3, #22]
 80140e2:	461a      	mov	r2, r3
 80140e4:	887b      	ldrh	r3, [r7, #2]
 80140e6:	4413      	add	r3, r2
 80140e8:	687a      	ldr	r2, [r7, #4]
 80140ea:	8912      	ldrh	r2, [r2, #8]
 80140ec:	fb93 f1f2 	sdiv	r1, r3, r2
 80140f0:	fb01 f202 	mul.w	r2, r1, r2
 80140f4:	1a9b      	subs	r3, r3, r2
 80140f6:	b29a      	uxth	r2, r3
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	82da      	strh	r2, [r3, #22]
}
 80140fc:	bf00      	nop
 80140fe:	3710      	adds	r7, #16
 8014100:	46bd      	mov	sp, r7
 8014102:	bd80      	pop	{r7, pc}

08014104 <_setTable>:
static uint32_t s_table[PIF_TASK_TABLE_SIZE];
static uint8_t s_number = 0;


static int _setTable(uint16_t period, PifTaskMode* p_mode)
{
 8014104:	b480      	push	{r7}
 8014106:	b089      	sub	sp, #36	; 0x24
 8014108:	af00      	add	r7, sp, #0
 801410a:	4603      	mov	r3, r0
 801410c:	6039      	str	r1, [r7, #0]
 801410e:	80fb      	strh	r3, [r7, #6]
	uint32_t gap, index, bit;
	static int base = 0;
	int i, count, num = -1;
 8014110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014114:	617b      	str	r3, [r7, #20]

	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8014116:	2300      	movs	r3, #0
 8014118:	61bb      	str	r3, [r7, #24]
 801411a:	e00f      	b.n	801413c <_setTable+0x38>
		if (!(s_table_number & (1 << i))) {
 801411c:	2201      	movs	r2, #1
 801411e:	69bb      	ldr	r3, [r7, #24]
 8014120:	fa02 f303 	lsl.w	r3, r2, r3
 8014124:	461a      	mov	r2, r3
 8014126:	4b34      	ldr	r3, [pc, #208]	; (80141f8 <_setTable+0xf4>)
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	4013      	ands	r3, r2
 801412c:	2b00      	cmp	r3, #0
 801412e:	d102      	bne.n	8014136 <_setTable+0x32>
			num = i;
 8014130:	69bb      	ldr	r3, [r7, #24]
 8014132:	617b      	str	r3, [r7, #20]
			break;
 8014134:	e005      	b.n	8014142 <_setTable+0x3e>
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8014136:	69bb      	ldr	r3, [r7, #24]
 8014138:	3301      	adds	r3, #1
 801413a:	61bb      	str	r3, [r7, #24]
 801413c:	69bb      	ldr	r3, [r7, #24]
 801413e:	2b1f      	cmp	r3, #31
 8014140:	ddec      	ble.n	801411c <_setTable+0x18>
		}
	}
	if (num == -1) {
 8014142:	697b      	ldr	r3, [r7, #20]
 8014144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014148:	d105      	bne.n	8014156 <_setTable+0x52>
		pif_error = E_OVERFLOW_BUFFER;
 801414a:	4b2c      	ldr	r3, [pc, #176]	; (80141fc <_setTable+0xf8>)
 801414c:	2204      	movs	r2, #4
 801414e:	701a      	strb	r2, [r3, #0]
		return -1;
 8014150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014154:	e04a      	b.n	80141ec <_setTable+0xe8>
	}
	bit = 1 << num;
 8014156:	2201      	movs	r2, #1
 8014158:	697b      	ldr	r3, [r7, #20]
 801415a:	fa02 f303 	lsl.w	r3, r2, r3
 801415e:	613b      	str	r3, [r7, #16]
	s_table_number |= bit;
 8014160:	4b25      	ldr	r3, [pc, #148]	; (80141f8 <_setTable+0xf4>)
 8014162:	681a      	ldr	r2, [r3, #0]
 8014164:	693b      	ldr	r3, [r7, #16]
 8014166:	4313      	orrs	r3, r2
 8014168:	4a23      	ldr	r2, [pc, #140]	; (80141f8 <_setTable+0xf4>)
 801416a:	6013      	str	r3, [r2, #0]

	count = PIF_TASK_TABLE_SIZE * period;
 801416c:	88fb      	ldrh	r3, [r7, #6]
 801416e:	015b      	lsls	r3, r3, #5
 8014170:	60fb      	str	r3, [r7, #12]
	gap = 10000L * PIF_TASK_TABLE_SIZE / count;
 8014172:	4a23      	ldr	r2, [pc, #140]	; (8014200 <_setTable+0xfc>)
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	fb92 f3f3 	sdiv	r3, r2, r3
 801417a:	60bb      	str	r3, [r7, #8]
	if (gap > 100) {
 801417c:	68bb      	ldr	r3, [r7, #8]
 801417e:	2b64      	cmp	r3, #100	; 0x64
 8014180:	d930      	bls.n	80141e4 <_setTable+0xe0>
		index = 100 * base;
 8014182:	4b20      	ldr	r3, [pc, #128]	; (8014204 <_setTable+0x100>)
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	2264      	movs	r2, #100	; 0x64
 8014188:	fb02 f303 	mul.w	r3, r2, r3
 801418c:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < count / 100; i++) {
 801418e:	2300      	movs	r3, #0
 8014190:	61bb      	str	r3, [r7, #24]
 8014192:	e017      	b.n	80141c4 <_setTable+0xc0>
			s_table[(index / 100) & PIF_TASK_TABLE_MASK] |= bit;
 8014194:	69fb      	ldr	r3, [r7, #28]
 8014196:	4a1c      	ldr	r2, [pc, #112]	; (8014208 <_setTable+0x104>)
 8014198:	fba2 2303 	umull	r2, r3, r2, r3
 801419c:	095b      	lsrs	r3, r3, #5
 801419e:	f003 021f 	and.w	r2, r3, #31
 80141a2:	491a      	ldr	r1, [pc, #104]	; (801420c <_setTable+0x108>)
 80141a4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80141a8:	f003 031f 	and.w	r3, r3, #31
 80141ac:	693a      	ldr	r2, [r7, #16]
 80141ae:	430a      	orrs	r2, r1
 80141b0:	4916      	ldr	r1, [pc, #88]	; (801420c <_setTable+0x108>)
 80141b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			index += gap;
 80141b6:	69fa      	ldr	r2, [r7, #28]
 80141b8:	68bb      	ldr	r3, [r7, #8]
 80141ba:	4413      	add	r3, r2
 80141bc:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < count / 100; i++) {
 80141be:	69bb      	ldr	r3, [r7, #24]
 80141c0:	3301      	adds	r3, #1
 80141c2:	61bb      	str	r3, [r7, #24]
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	4a10      	ldr	r2, [pc, #64]	; (8014208 <_setTable+0x104>)
 80141c8:	fb82 1203 	smull	r1, r2, r2, r3
 80141cc:	1152      	asrs	r2, r2, #5
 80141ce:	17db      	asrs	r3, r3, #31
 80141d0:	1ad3      	subs	r3, r2, r3
 80141d2:	69ba      	ldr	r2, [r7, #24]
 80141d4:	429a      	cmp	r2, r3
 80141d6:	dbdd      	blt.n	8014194 <_setTable+0x90>
		}
		base++;
 80141d8:	4b0a      	ldr	r3, [pc, #40]	; (8014204 <_setTable+0x100>)
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	3301      	adds	r3, #1
 80141de:	4a09      	ldr	r2, [pc, #36]	; (8014204 <_setTable+0x100>)
 80141e0:	6013      	str	r3, [r2, #0]
 80141e2:	e002      	b.n	80141ea <_setTable+0xe6>
	}
	else {
		*p_mode = TM_ALWAYS;
 80141e4:	683b      	ldr	r3, [r7, #0]
 80141e6:	2201      	movs	r2, #1
 80141e8:	701a      	strb	r2, [r3, #0]
	}
	return num;
 80141ea:	697b      	ldr	r3, [r7, #20]
}
 80141ec:	4618      	mov	r0, r3
 80141ee:	3724      	adds	r7, #36	; 0x24
 80141f0:	46bd      	mov	sp, r7
 80141f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f6:	4770      	bx	lr
 80141f8:	200021a0 	.word	0x200021a0
 80141fc:	200020d1 	.word	0x200020d1
 8014200:	0004e200 	.word	0x0004e200
 8014204:	20002228 	.word	0x20002228
 8014208:	51eb851f 	.word	0x51eb851f
 801420c:	200021a4 	.word	0x200021a4

08014210 <_resetTable>:

static void _resetTable(int number)
{
 8014210:	b480      	push	{r7}
 8014212:	b085      	sub	sp, #20
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
	int i;
	uint32_t mask;

	mask = ~((uint32_t)1 << number);
 8014218:	2201      	movs	r2, #1
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	fa02 f303 	lsl.w	r3, r2, r3
 8014220:	43db      	mvns	r3, r3
 8014222:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8014224:	2300      	movs	r3, #0
 8014226:	60fb      	str	r3, [r7, #12]
 8014228:	e00c      	b.n	8014244 <_resetTable+0x34>
		s_table[i] &= mask;
 801422a:	4a0e      	ldr	r2, [pc, #56]	; (8014264 <_resetTable+0x54>)
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014232:	68bb      	ldr	r3, [r7, #8]
 8014234:	401a      	ands	r2, r3
 8014236:	490b      	ldr	r1, [pc, #44]	; (8014264 <_resetTable+0x54>)
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	3301      	adds	r3, #1
 8014242:	60fb      	str	r3, [r7, #12]
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	2b1f      	cmp	r3, #31
 8014248:	ddef      	ble.n	801422a <_resetTable+0x1a>
	}
	s_table_number &= mask;
 801424a:	4b07      	ldr	r3, [pc, #28]	; (8014268 <_resetTable+0x58>)
 801424c:	681a      	ldr	r2, [r3, #0]
 801424e:	68bb      	ldr	r3, [r7, #8]
 8014250:	4013      	ands	r3, r2
 8014252:	4a05      	ldr	r2, [pc, #20]	; (8014268 <_resetTable+0x58>)
 8014254:	6013      	str	r3, [r2, #0]
}
 8014256:	bf00      	nop
 8014258:	3714      	adds	r7, #20
 801425a:	46bd      	mov	sp, r7
 801425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014260:	4770      	bx	lr
 8014262:	bf00      	nop
 8014264:	200021a4 	.word	0x200021a4
 8014268:	200021a0 	.word	0x200021a0

0801426c <_processingAlways>:

static void _processingAlways(PifTask* p_owner)
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b084      	sub	sp, #16
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
	uint32_t gap;

	if (p_owner->__delay_ms) {
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	8c1b      	ldrh	r3, [r3, #32]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d00f      	beq.n	801429c <_processingAlways+0x30>
		gap = pif_cumulative_timer1ms - p_owner->__pretime;
 801427c:	4b0e      	ldr	r3, [pc, #56]	; (80142b8 <_processingAlways+0x4c>)
 801427e:	681a      	ldr	r2, [r3, #0]
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	69db      	ldr	r3, [r3, #28]
 8014284:	1ad3      	subs	r3, r2, r3
 8014286:	60fb      	str	r3, [r7, #12]
		if (gap >= p_owner->__delay_ms) {
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	8c1b      	ldrh	r3, [r3, #32]
 801428c:	461a      	mov	r2, r3
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	4293      	cmp	r3, r2
 8014292:	d30d      	bcc.n	80142b0 <_processingAlways+0x44>
			p_owner->__delay_ms = 0;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	2200      	movs	r2, #0
 8014298:	841a      	strh	r2, [r3, #32]
	else {
		p_owner->__running = TRUE;
		(*p_owner->__evt_loop)(p_owner);
		p_owner->__running = FALSE;
	}
}
 801429a:	e009      	b.n	80142b0 <_processingAlways+0x44>
		p_owner->__running = TRUE;
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	2201      	movs	r2, #1
 80142a0:	761a      	strb	r2, [r3, #24]
		(*p_owner->__evt_loop)(p_owner);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142a6:	6878      	ldr	r0, [r7, #4]
 80142a8:	4798      	blx	r3
		p_owner->__running = FALSE;
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	2200      	movs	r2, #0
 80142ae:	761a      	strb	r2, [r3, #24]
}
 80142b0:	bf00      	nop
 80142b2:	3710      	adds	r7, #16
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}
 80142b8:	200020e0 	.word	0x200020e0

080142bc <_processingPeriodUs>:

static void _processingPeriodUs(PifTask* p_owner)
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b084      	sub	sp, #16
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]
	uint32_t current, gap;

	current = (*pif_act_timer1us)();
 80142c4:	4b0f      	ldr	r3, [pc, #60]	; (8014304 <_processingPeriodUs+0x48>)
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	4798      	blx	r3
 80142ca:	60f8      	str	r0, [r7, #12]
	gap = current - p_owner->__pretime;
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	69db      	ldr	r3, [r3, #28]
 80142d0:	68fa      	ldr	r2, [r7, #12]
 80142d2:	1ad3      	subs	r3, r2, r3
 80142d4:	60bb      	str	r3, [r7, #8]
	if (gap >= p_owner->_period) {
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	891b      	ldrh	r3, [r3, #8]
 80142da:	461a      	mov	r2, r3
 80142dc:	68bb      	ldr	r3, [r7, #8]
 80142de:	4293      	cmp	r3, r2
 80142e0:	d30c      	bcc.n	80142fc <_processingPeriodUs+0x40>
		p_owner->__running = TRUE;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	2201      	movs	r2, #1
 80142e6:	761a      	strb	r2, [r3, #24]
		(*p_owner->__evt_loop)(p_owner);
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142ec:	6878      	ldr	r0, [r7, #4]
 80142ee:	4798      	blx	r3
		p_owner->__running = FALSE;
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	2200      	movs	r2, #0
 80142f4:	761a      	strb	r2, [r3, #24]
		p_owner->__pretime = current;
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	68fa      	ldr	r2, [r7, #12]
 80142fa:	61da      	str	r2, [r3, #28]
	}
}
 80142fc:	bf00      	nop
 80142fe:	3710      	adds	r7, #16
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}
 8014304:	200020f0 	.word	0x200020f0

08014308 <_processingPeriodMs>:

static void _processingPeriodMs(PifTask* p_owner)
{
 8014308:	b580      	push	{r7, lr}
 801430a:	b084      	sub	sp, #16
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
	uint32_t current, gap;

	current = pif_cumulative_timer1ms;
 8014310:	4b0f      	ldr	r3, [pc, #60]	; (8014350 <_processingPeriodMs+0x48>)
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	60fb      	str	r3, [r7, #12]
	gap = current - p_owner->__pretime;
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	69db      	ldr	r3, [r3, #28]
 801431a:	68fa      	ldr	r2, [r7, #12]
 801431c:	1ad3      	subs	r3, r2, r3
 801431e:	60bb      	str	r3, [r7, #8]
	if (gap >= p_owner->_period) {
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	891b      	ldrh	r3, [r3, #8]
 8014324:	461a      	mov	r2, r3
 8014326:	68bb      	ldr	r3, [r7, #8]
 8014328:	4293      	cmp	r3, r2
 801432a:	d30c      	bcc.n	8014346 <_processingPeriodMs+0x3e>
		p_owner->__running = TRUE;
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	2201      	movs	r2, #1
 8014330:	761a      	strb	r2, [r3, #24]
		(*p_owner->__evt_loop)(p_owner);
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014336:	6878      	ldr	r0, [r7, #4]
 8014338:	4798      	blx	r3
		p_owner->__running = FALSE;
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	2200      	movs	r2, #0
 801433e:	761a      	strb	r2, [r3, #24]
		p_owner->__pretime = current;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	68fa      	ldr	r2, [r7, #12]
 8014344:	61da      	str	r2, [r3, #28]
	}
}
 8014346:	bf00      	nop
 8014348:	3710      	adds	r7, #16
 801434a:	46bd      	mov	sp, r7
 801434c:	bd80      	pop	{r7, pc}
 801434e:	bf00      	nop
 8014350:	200020e0 	.word	0x200020e0

08014354 <_processingChangeUs>:

static void _processingChangeUs(PifTask* p_owner)
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b086      	sub	sp, #24
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
	uint16_t period;
	uint32_t current, gap;

	current = (*pif_act_timer1us)();
 801435c:	4b13      	ldr	r3, [pc, #76]	; (80143ac <_processingChangeUs+0x58>)
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	4798      	blx	r3
 8014362:	6178      	str	r0, [r7, #20]
	gap = current - p_owner->__pretime;
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	69db      	ldr	r3, [r3, #28]
 8014368:	697a      	ldr	r2, [r7, #20]
 801436a:	1ad3      	subs	r3, r2, r3
 801436c:	613b      	str	r3, [r7, #16]
	if (gap >= p_owner->_period) {
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	891b      	ldrh	r3, [r3, #8]
 8014372:	461a      	mov	r2, r3
 8014374:	693b      	ldr	r3, [r7, #16]
 8014376:	4293      	cmp	r3, r2
 8014378:	d314      	bcc.n	80143a4 <_processingChangeUs+0x50>
		p_owner->__running = TRUE;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	2201      	movs	r2, #1
 801437e:	761a      	strb	r2, [r3, #24]
		period = (*p_owner->__evt_loop)(p_owner);
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014384:	6878      	ldr	r0, [r7, #4]
 8014386:	4798      	blx	r3
 8014388:	4603      	mov	r3, r0
 801438a:	81fb      	strh	r3, [r7, #14]
		p_owner->__running = FALSE;
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	2200      	movs	r2, #0
 8014390:	761a      	strb	r2, [r3, #24]
		if (period > 0) p_owner->_period = period;
 8014392:	89fb      	ldrh	r3, [r7, #14]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d002      	beq.n	801439e <_processingChangeUs+0x4a>
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	89fa      	ldrh	r2, [r7, #14]
 801439c:	811a      	strh	r2, [r3, #8]
		p_owner->__pretime = current;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	697a      	ldr	r2, [r7, #20]
 80143a2:	61da      	str	r2, [r3, #28]
	}
}
 80143a4:	bf00      	nop
 80143a6:	3718      	adds	r7, #24
 80143a8:	46bd      	mov	sp, r7
 80143aa:	bd80      	pop	{r7, pc}
 80143ac:	200020f0 	.word	0x200020f0

080143b0 <_processingChangeMs>:

static void _processingChangeMs(PifTask* p_owner)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b086      	sub	sp, #24
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
	uint16_t period;
	uint32_t current, gap;

	current = pif_cumulative_timer1ms;
 80143b8:	4b13      	ldr	r3, [pc, #76]	; (8014408 <_processingChangeMs+0x58>)
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	617b      	str	r3, [r7, #20]
	gap = current - p_owner->__pretime;
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	69db      	ldr	r3, [r3, #28]
 80143c2:	697a      	ldr	r2, [r7, #20]
 80143c4:	1ad3      	subs	r3, r2, r3
 80143c6:	613b      	str	r3, [r7, #16]
	if (gap >= p_owner->_period) {
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	891b      	ldrh	r3, [r3, #8]
 80143cc:	461a      	mov	r2, r3
 80143ce:	693b      	ldr	r3, [r7, #16]
 80143d0:	4293      	cmp	r3, r2
 80143d2:	d314      	bcc.n	80143fe <_processingChangeMs+0x4e>
		p_owner->__running = TRUE;
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2201      	movs	r2, #1
 80143d8:	761a      	strb	r2, [r3, #24]
		period = (*p_owner->__evt_loop)(p_owner);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143de:	6878      	ldr	r0, [r7, #4]
 80143e0:	4798      	blx	r3
 80143e2:	4603      	mov	r3, r0
 80143e4:	81fb      	strh	r3, [r7, #14]
		p_owner->__running = FALSE;
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	2200      	movs	r2, #0
 80143ea:	761a      	strb	r2, [r3, #24]
		if (period > 0) p_owner->_period = period;
 80143ec:	89fb      	ldrh	r3, [r7, #14]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d002      	beq.n	80143f8 <_processingChangeMs+0x48>
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	89fa      	ldrh	r2, [r7, #14]
 80143f6:	811a      	strh	r2, [r3, #8]
		p_owner->__pretime = current;
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	697a      	ldr	r2, [r7, #20]
 80143fc:	61da      	str	r2, [r3, #28]
	}
}
 80143fe:	bf00      	nop
 8014400:	3718      	adds	r7, #24
 8014402:	46bd      	mov	sp, r7
 8014404:	bd80      	pop	{r7, pc}
 8014406:	bf00      	nop
 8014408:	200020e0 	.word	0x200020e0
 801440c:	00000000 	.word	0x00000000

08014410 <_processingRatio>:

static void _processingRatio(PifTask* p_owner)
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b084      	sub	sp, #16
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
#ifdef __PIF_DEBUG__
	uint32_t time;
	static uint32_t pretime;
#endif

	if (p_owner->__delay_ms) {
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	8c1b      	ldrh	r3, [r3, #32]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d00f      	beq.n	8014440 <_processingRatio+0x30>
		gap = pif_cumulative_timer1ms - p_owner->__pretime;
 8014420:	4b2b      	ldr	r3, [pc, #172]	; (80144d0 <_processingRatio+0xc0>)
 8014422:	681a      	ldr	r2, [r3, #0]
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	69db      	ldr	r3, [r3, #28]
 8014428:	1ad3      	subs	r3, r2, r3
 801442a:	60bb      	str	r3, [r7, #8]
		if (gap >= p_owner->__delay_ms) {
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	8c1b      	ldrh	r3, [r3, #32]
 8014430:	461a      	mov	r2, r3
 8014432:	68bb      	ldr	r3, [r7, #8]
 8014434:	4293      	cmp	r3, r2
 8014436:	d343      	bcc.n	80144c0 <_processingRatio+0xb0>
			p_owner->__delay_ms = 0;
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	2200      	movs	r2, #0
 801443c:	841a      	strh	r2, [r3, #32]
		p_owner->__running = FALSE;
#ifdef __PIF_DEBUG__
		p_owner->__count++;
#endif
	}
}
 801443e:	e03f      	b.n	80144c0 <_processingRatio+0xb0>
	else if (s_table[s_number] & (1 << p_owner->__table_number)) {
 8014440:	4b24      	ldr	r3, [pc, #144]	; (80144d4 <_processingRatio+0xc4>)
 8014442:	781b      	ldrb	r3, [r3, #0]
 8014444:	461a      	mov	r2, r3
 8014446:	4b24      	ldr	r3, [pc, #144]	; (80144d8 <_processingRatio+0xc8>)
 8014448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801444c:	687a      	ldr	r2, [r7, #4]
 801444e:	6952      	ldr	r2, [r2, #20]
 8014450:	2101      	movs	r1, #1
 8014452:	fa01 f202 	lsl.w	r2, r1, r2
 8014456:	4013      	ands	r3, r2
 8014458:	2b00      	cmp	r3, #0
 801445a:	d031      	beq.n	80144c0 <_processingRatio+0xb0>
		time = pif_timer1sec;
 801445c:	4b1f      	ldr	r3, [pc, #124]	; (80144dc <_processingRatio+0xcc>)
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	60fb      	str	r3, [r7, #12]
		if (time != pretime) {
 8014462:	4b1f      	ldr	r3, [pc, #124]	; (80144e0 <_processingRatio+0xd0>)
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	68fa      	ldr	r2, [r7, #12]
 8014468:	429a      	cmp	r2, r3
 801446a:	d01a      	beq.n	80144a2 <_processingRatio+0x92>
			p_owner->__period = 1000000.0 / p_owner->__count;
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014470:	4618      	mov	r0, r3
 8014472:	f7ec f805 	bl	8000480 <__aeabi_ui2d>
 8014476:	4602      	mov	r2, r0
 8014478:	460b      	mov	r3, r1
 801447a:	a113      	add	r1, pc, #76	; (adr r1, 80144c8 <_processingRatio+0xb8>)
 801447c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014480:	f7ec f9a2 	bl	80007c8 <__aeabi_ddiv>
 8014484:	4602      	mov	r2, r0
 8014486:	460b      	mov	r3, r1
 8014488:	4610      	mov	r0, r2
 801448a:	4619      	mov	r1, r3
 801448c:	f7ec fb54 	bl	8000b38 <__aeabi_d2f>
 8014490:	4602      	mov	r2, r0
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	629a      	str	r2, [r3, #40]	; 0x28
			p_owner->__count = 0;
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	2200      	movs	r2, #0
 801449a:	625a      	str	r2, [r3, #36]	; 0x24
			pretime = time;
 801449c:	4a10      	ldr	r2, [pc, #64]	; (80144e0 <_processingRatio+0xd0>)
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	6013      	str	r3, [r2, #0]
		p_owner->__running = TRUE;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2201      	movs	r2, #1
 80144a6:	761a      	strb	r2, [r3, #24]
		(*p_owner->__evt_loop)(p_owner);
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	4798      	blx	r3
		p_owner->__running = FALSE;
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2200      	movs	r2, #0
 80144b4:	761a      	strb	r2, [r3, #24]
		p_owner->__count++;
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144ba:	1c5a      	adds	r2, r3, #1
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	625a      	str	r2, [r3, #36]	; 0x24
}
 80144c0:	bf00      	nop
 80144c2:	3710      	adds	r7, #16
 80144c4:	46bd      	mov	sp, r7
 80144c6:	bd80      	pop	{r7, pc}
 80144c8:	00000000 	.word	0x00000000
 80144cc:	412e8480 	.word	0x412e8480
 80144d0:	200020e0 	.word	0x200020e0
 80144d4:	20002224 	.word	0x20002224
 80144d8:	200021a4 	.word	0x200021a4
 80144dc:	200020d4 	.word	0x200020d4
 80144e0:	2000222c 	.word	0x2000222c

080144e4 <_checkParam>:

static BOOL _checkParam(PifTaskMode* p_mode, uint16_t period)
{
 80144e4:	b480      	push	{r7}
 80144e6:	b083      	sub	sp, #12
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
 80144ec:	460b      	mov	r3, r1
 80144ee:	807b      	strh	r3, [r7, #2]
	switch (*p_mode) {
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	781b      	ldrb	r3, [r3, #0]
 80144f4:	2b05      	cmp	r3, #5
 80144f6:	d83f      	bhi.n	8014578 <_checkParam+0x94>
 80144f8:	a201      	add	r2, pc, #4	; (adr r2, 8014500 <_checkParam+0x1c>)
 80144fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144fe:	bf00      	nop
 8014500:	08014519 	.word	0x08014519
 8014504:	08014579 	.word	0x08014579
 8014508:	0801453d 	.word	0x0801453d
 801450c:	0801454d 	.word	0x0801454d
 8014510:	0801453d 	.word	0x0801453d
 8014514:	0801454d 	.word	0x0801454d
    case TM_RATIO:
    	if (!period || period > 100) {
 8014518:	887b      	ldrh	r3, [r7, #2]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d002      	beq.n	8014524 <_checkParam+0x40>
 801451e:	887b      	ldrh	r3, [r7, #2]
 8014520:	2b64      	cmp	r3, #100	; 0x64
 8014522:	d904      	bls.n	801452e <_checkParam+0x4a>
    		pif_error = E_INVALID_PARAM;
 8014524:	4b18      	ldr	r3, [pc, #96]	; (8014588 <_checkParam+0xa4>)
 8014526:	2201      	movs	r2, #1
 8014528:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 801452a:	2300      	movs	r3, #0
 801452c:	e025      	b.n	801457a <_checkParam+0x96>
    	}
    	else if (period == 100) {
 801452e:	887b      	ldrh	r3, [r7, #2]
 8014530:	2b64      	cmp	r3, #100	; 0x64
 8014532:	d11c      	bne.n	801456e <_checkParam+0x8a>
    		*p_mode = TM_ALWAYS;
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	2201      	movs	r2, #1
 8014538:	701a      	strb	r2, [r3, #0]
    	}
    	break;
 801453a:	e018      	b.n	801456e <_checkParam+0x8a>
    case TM_ALWAYS:
    	break;

    case TM_PERIOD_MS:
    case TM_CHANGE_MS:
    	if (!period) {
 801453c:	887b      	ldrh	r3, [r7, #2]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d117      	bne.n	8014572 <_checkParam+0x8e>
    		pif_error = E_INVALID_PARAM;
 8014542:	4b11      	ldr	r3, [pc, #68]	; (8014588 <_checkParam+0xa4>)
 8014544:	2201      	movs	r2, #1
 8014546:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8014548:	2300      	movs	r3, #0
 801454a:	e016      	b.n	801457a <_checkParam+0x96>
    	}
    	break;

    case TM_PERIOD_US:
    case TM_CHANGE_US:
    	if (!period) {
 801454c:	887b      	ldrh	r3, [r7, #2]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d104      	bne.n	801455c <_checkParam+0x78>
    		pif_error = E_INVALID_PARAM;
 8014552:	4b0d      	ldr	r3, [pc, #52]	; (8014588 <_checkParam+0xa4>)
 8014554:	2201      	movs	r2, #1
 8014556:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8014558:	2300      	movs	r3, #0
 801455a:	e00e      	b.n	801457a <_checkParam+0x96>
    	}

    	if (!pif_act_timer1us) {
 801455c:	4b0b      	ldr	r3, [pc, #44]	; (801458c <_checkParam+0xa8>)
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d108      	bne.n	8014576 <_checkParam+0x92>
    		pif_error = E_CANNOT_USE;
 8014564:	4b08      	ldr	r3, [pc, #32]	; (8014588 <_checkParam+0xa4>)
 8014566:	2209      	movs	r2, #9
 8014568:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 801456a:	2300      	movs	r3, #0
 801456c:	e005      	b.n	801457a <_checkParam+0x96>
    	break;
 801456e:	bf00      	nop
 8014570:	e002      	b.n	8014578 <_checkParam+0x94>
    	break;
 8014572:	bf00      	nop
 8014574:	e000      	b.n	8014578 <_checkParam+0x94>
        }
    	break;
 8014576:	bf00      	nop
    }
	return TRUE;
 8014578:	2301      	movs	r3, #1
}
 801457a:	4618      	mov	r0, r3
 801457c:	370c      	adds	r7, #12
 801457e:	46bd      	mov	sp, r7
 8014580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014584:	4770      	bx	lr
 8014586:	bf00      	nop
 8014588:	200020d1 	.word	0x200020d1
 801458c:	200020f0 	.word	0x200020f0

08014590 <_setParam>:

static BOOL _setParam(PifTask* p_owner, PifTaskMode mode, uint16_t period)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b084      	sub	sp, #16
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
 8014598:	460b      	mov	r3, r1
 801459a:	70fb      	strb	r3, [r7, #3]
 801459c:	4613      	mov	r3, r2
 801459e:	803b      	strh	r3, [r7, #0]
	int num = -1;
 80145a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80145a4:	60fb      	str	r3, [r7, #12]

    switch (mode) {
 80145a6:	78fb      	ldrb	r3, [r7, #3]
 80145a8:	2b05      	cmp	r3, #5
 80145aa:	d852      	bhi.n	8014652 <_setParam+0xc2>
 80145ac:	a201      	add	r2, pc, #4	; (adr r2, 80145b4 <_setParam+0x24>)
 80145ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145b2:	bf00      	nop
 80145b4:	080145cd 	.word	0x080145cd
 80145b8:	080145ff 	.word	0x080145ff
 80145bc:	0801460b 	.word	0x0801460b
 80145c0:	0801462b 	.word	0x0801462b
 80145c4:	0801461b 	.word	0x0801461b
 80145c8:	0801463f 	.word	0x0801463f
    case TM_RATIO:
    	num = _setTable(period, &mode);
 80145cc:	1cfa      	adds	r2, r7, #3
 80145ce:	883b      	ldrh	r3, [r7, #0]
 80145d0:	4611      	mov	r1, r2
 80145d2:	4618      	mov	r0, r3
 80145d4:	f7ff fd96 	bl	8014104 <_setTable>
 80145d8:	60f8      	str	r0, [r7, #12]
    	if (num == -1) return FALSE;
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145e0:	d101      	bne.n	80145e6 <_setParam+0x56>
 80145e2:	2300      	movs	r3, #0
 80145e4:	e03d      	b.n	8014662 <_setParam+0xd2>
    	if (mode == TM_ALWAYS) period = 100;
 80145e6:	78fb      	ldrb	r3, [r7, #3]
 80145e8:	2b01      	cmp	r3, #1
 80145ea:	d101      	bne.n	80145f0 <_setParam+0x60>
 80145ec:	2364      	movs	r3, #100	; 0x64
 80145ee:	803b      	strh	r3, [r7, #0]
    	p_owner->__table_number = num;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	68fa      	ldr	r2, [r7, #12]
 80145f4:	615a      	str	r2, [r3, #20]
    	p_owner->__processing = _processingRatio;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	4a1c      	ldr	r2, [pc, #112]	; (801466c <_setParam+0xdc>)
 80145fa:	611a      	str	r2, [r3, #16]
    	break;
 80145fc:	e02a      	b.n	8014654 <_setParam+0xc4>

    case TM_ALWAYS:
    	period = 100;
 80145fe:	2364      	movs	r3, #100	; 0x64
 8014600:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = _processingAlways;
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	4a1a      	ldr	r2, [pc, #104]	; (8014670 <_setParam+0xe0>)
 8014606:	611a      	str	r2, [r3, #16]
    	break;
 8014608:	e024      	b.n	8014654 <_setParam+0xc4>

    case TM_PERIOD_MS:
    	p_owner->__pretime = pif_cumulative_timer1ms;
 801460a:	4b1a      	ldr	r3, [pc, #104]	; (8014674 <_setParam+0xe4>)
 801460c:	681a      	ldr	r2, [r3, #0]
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	61da      	str	r2, [r3, #28]
    	p_owner->__processing = _processingPeriodMs;
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	4a18      	ldr	r2, [pc, #96]	; (8014678 <_setParam+0xe8>)
 8014616:	611a      	str	r2, [r3, #16]
    	break;
 8014618:	e01c      	b.n	8014654 <_setParam+0xc4>

    case TM_CHANGE_MS:
    	p_owner->__pretime = pif_cumulative_timer1ms;
 801461a:	4b16      	ldr	r3, [pc, #88]	; (8014674 <_setParam+0xe4>)
 801461c:	681a      	ldr	r2, [r3, #0]
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	61da      	str	r2, [r3, #28]
    	p_owner->__processing = _processingChangeMs;
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	4a15      	ldr	r2, [pc, #84]	; (801467c <_setParam+0xec>)
 8014626:	611a      	str	r2, [r3, #16]
    	break;
 8014628:	e014      	b.n	8014654 <_setParam+0xc4>

    case TM_PERIOD_US:
    	p_owner->__pretime = (*pif_act_timer1us)();
 801462a:	4b15      	ldr	r3, [pc, #84]	; (8014680 <_setParam+0xf0>)
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	4798      	blx	r3
 8014630:	4602      	mov	r2, r0
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	61da      	str	r2, [r3, #28]
    	p_owner->__processing = _processingPeriodUs;
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	4a12      	ldr	r2, [pc, #72]	; (8014684 <_setParam+0xf4>)
 801463a:	611a      	str	r2, [r3, #16]
    	break;
 801463c:	e00a      	b.n	8014654 <_setParam+0xc4>

    case TM_CHANGE_US:
    	p_owner->__pretime = (*pif_act_timer1us)();
 801463e:	4b10      	ldr	r3, [pc, #64]	; (8014680 <_setParam+0xf0>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	4798      	blx	r3
 8014644:	4602      	mov	r2, r0
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	61da      	str	r2, [r3, #28]
    	p_owner->__processing = _processingChangeUs;
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	4a0e      	ldr	r2, [pc, #56]	; (8014688 <_setParam+0xf8>)
 801464e:	611a      	str	r2, [r3, #16]
    	break;
 8014650:	e000      	b.n	8014654 <_setParam+0xc4>

    default:
    	break;
 8014652:	bf00      	nop
    }

    p_owner->_mode = mode;
 8014654:	78fa      	ldrb	r2, [r7, #3]
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	719a      	strb	r2, [r3, #6]
    p_owner->_period = period;
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	883a      	ldrh	r2, [r7, #0]
 801465e:	811a      	strh	r2, [r3, #8]
	return TRUE;
 8014660:	2301      	movs	r3, #1
}
 8014662:	4618      	mov	r0, r3
 8014664:	3710      	adds	r7, #16
 8014666:	46bd      	mov	sp, r7
 8014668:	bd80      	pop	{r7, pc}
 801466a:	bf00      	nop
 801466c:	08014411 	.word	0x08014411
 8014670:	0801426d 	.word	0x0801426d
 8014674:	200020e0 	.word	0x200020e0
 8014678:	08014309 	.word	0x08014309
 801467c:	080143b1 	.word	0x080143b1
 8014680:	200020f0 	.word	0x200020f0
 8014684:	080142bd 	.word	0x080142bd
 8014688:	08014355 	.word	0x08014355

0801468c <_checkLoopTime>:

#ifndef __PIF_NO_LOG__

static void _checkLoopTime(BOOL yield)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b084      	sub	sp, #16
 8014690:	af00      	add	r7, sp, #0
 8014692:	4603      	mov	r3, r0
 8014694:	71fb      	strb	r3, [r7, #7]
#ifdef __PIF_DEBUG__
	static int step = 0;
	static uint32_t pretime;
	uint32_t gap;

	if (pif_act_timer1us) {
 8014696:	4b29      	ldr	r3, [pc, #164]	; (801473c <_checkLoopTime+0xb0>)
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d027      	beq.n	80146ee <_checkLoopTime+0x62>
		if (!step) {
 801469e:	4b28      	ldr	r3, [pc, #160]	; (8014740 <_checkLoopTime+0xb4>)
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d106      	bne.n	80146b4 <_checkLoopTime+0x28>
			if (!yield) step = 1;
 80146a6:	79fb      	ldrb	r3, [r7, #7]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d11a      	bne.n	80146e2 <_checkLoopTime+0x56>
 80146ac:	4b24      	ldr	r3, [pc, #144]	; (8014740 <_checkLoopTime+0xb4>)
 80146ae:	2201      	movs	r2, #1
 80146b0:	601a      	str	r2, [r3, #0]
 80146b2:	e016      	b.n	80146e2 <_checkLoopTime+0x56>
		}
		else {
			gap = (*pif_act_timer1us)() - pretime;
 80146b4:	4b21      	ldr	r3, [pc, #132]	; (801473c <_checkLoopTime+0xb0>)
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	4798      	blx	r3
 80146ba:	4602      	mov	r2, r0
 80146bc:	4b21      	ldr	r3, [pc, #132]	; (8014744 <_checkLoopTime+0xb8>)
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	1ad3      	subs	r3, r2, r3
 80146c2:	60fb      	str	r3, [r7, #12]
			if (gap > pif_performance.__max_loop_time1us) {
 80146c4:	4b20      	ldr	r3, [pc, #128]	; (8014748 <_checkLoopTime+0xbc>)
 80146c6:	689b      	ldr	r3, [r3, #8]
 80146c8:	68fa      	ldr	r2, [r7, #12]
 80146ca:	429a      	cmp	r2, r3
 80146cc:	d909      	bls.n	80146e2 <_checkLoopTime+0x56>
				pif_performance.__max_loop_time1us = gap;
 80146ce:	4a1e      	ldr	r2, [pc, #120]	; (8014748 <_checkLoopTime+0xbc>)
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	6093      	str	r3, [r2, #8]
				pifLog_Printf(LT_NONE, "\nMLT: %luus", pif_performance.__max_loop_time1us);
 80146d4:	4b1c      	ldr	r3, [pc, #112]	; (8014748 <_checkLoopTime+0xbc>)
 80146d6:	689b      	ldr	r3, [r3, #8]
 80146d8:	461a      	mov	r2, r3
 80146da:	491c      	ldr	r1, [pc, #112]	; (801474c <_checkLoopTime+0xc0>)
 80146dc:	2000      	movs	r0, #0
 80146de:	f7fe ff59 	bl	8013594 <pifLog_Printf>
			}
		}
		pretime = (*pif_act_timer1us)();
 80146e2:	4b16      	ldr	r3, [pc, #88]	; (801473c <_checkLoopTime+0xb0>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	4798      	blx	r3
 80146e8:	4603      	mov	r3, r0
 80146ea:	4a16      	ldr	r2, [pc, #88]	; (8014744 <_checkLoopTime+0xb8>)
 80146ec:	6013      	str	r3, [r2, #0]
	}
#else
	(void)yield;
#endif

	if (pif_log_flag.bt.performance) {
 80146ee:	4b18      	ldr	r3, [pc, #96]	; (8014750 <_checkLoopTime+0xc4>)
 80146f0:	781b      	ldrb	r3, [r3, #0]
 80146f2:	f003 0301 	and.w	r3, r3, #1
 80146f6:	b2db      	uxtb	r3, r3
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d01b      	beq.n	8014734 <_checkLoopTime+0xa8>
		pif_performance._count++;
 80146fc:	4b12      	ldr	r3, [pc, #72]	; (8014748 <_checkLoopTime+0xbc>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	3301      	adds	r3, #1
 8014702:	4a11      	ldr	r2, [pc, #68]	; (8014748 <_checkLoopTime+0xbc>)
 8014704:	6013      	str	r3, [r2, #0]
		if (pif_performance.__state) {
 8014706:	4b10      	ldr	r3, [pc, #64]	; (8014748 <_checkLoopTime+0xbc>)
 8014708:	791b      	ldrb	r3, [r3, #4]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d012      	beq.n	8014734 <_checkLoopTime+0xa8>
        	uint32_t value = 1000000L / pif_performance._count;
 801470e:	4b0e      	ldr	r3, [pc, #56]	; (8014748 <_checkLoopTime+0xbc>)
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	4a10      	ldr	r2, [pc, #64]	; (8014754 <_checkLoopTime+0xc8>)
 8014714:	fbb2 f3f3 	udiv	r3, r2, r3
 8014718:	60bb      	str	r3, [r7, #8]
        	pifLog_Printf(LT_INFO, "Performance: %lur/s, %uns", pif_performance._count, value);
 801471a:	4b0b      	ldr	r3, [pc, #44]	; (8014748 <_checkLoopTime+0xbc>)
 801471c:	681a      	ldr	r2, [r3, #0]
 801471e:	68bb      	ldr	r3, [r7, #8]
 8014720:	490d      	ldr	r1, [pc, #52]	; (8014758 <_checkLoopTime+0xcc>)
 8014722:	2002      	movs	r0, #2
 8014724:	f7fe ff36 	bl	8013594 <pifLog_Printf>
        	pif_performance._count = 0;
 8014728:	4b07      	ldr	r3, [pc, #28]	; (8014748 <_checkLoopTime+0xbc>)
 801472a:	2200      	movs	r2, #0
 801472c:	601a      	str	r2, [r3, #0]
    		pif_performance.__state = FALSE;
 801472e:	4b06      	ldr	r3, [pc, #24]	; (8014748 <_checkLoopTime+0xbc>)
 8014730:	2200      	movs	r2, #0
 8014732:	711a      	strb	r2, [r3, #4]
        }
    }
}
 8014734:	bf00      	nop
 8014736:	3710      	adds	r7, #16
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}
 801473c:	200020f0 	.word	0x200020f0
 8014740:	20002230 	.word	0x20002230
 8014744:	20002234 	.word	0x20002234
 8014748:	200020e4 	.word	0x200020e4
 801474c:	080267b0 	.word	0x080267b0
 8014750:	200020f8 	.word	0x200020f8
 8014754:	000f4240 	.word	0x000f4240
 8014758:	080267bc 	.word	0x080267bc

0801475c <pifTask_ChangeMode>:
    pif_id++;
    p_owner->_id = pif_id;
}

BOOL pifTask_ChangeMode(PifTask* p_owner, PifTaskMode mode, uint16_t period)
{
 801475c:	b580      	push	{r7, lr}
 801475e:	b082      	sub	sp, #8
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
 8014764:	460b      	mov	r3, r1
 8014766:	70fb      	strb	r3, [r7, #3]
 8014768:	4613      	mov	r3, r2
 801476a:	803b      	strh	r3, [r7, #0]
	if (!_checkParam(&mode, period)) return FALSE;
 801476c:	883a      	ldrh	r2, [r7, #0]
 801476e:	1cfb      	adds	r3, r7, #3
 8014770:	4611      	mov	r1, r2
 8014772:	4618      	mov	r0, r3
 8014774:	f7ff feb6 	bl	80144e4 <_checkParam>
 8014778:	4603      	mov	r3, r0
 801477a:	2b00      	cmp	r3, #0
 801477c:	d101      	bne.n	8014782 <pifTask_ChangeMode+0x26>
 801477e:	2300      	movs	r3, #0
 8014780:	e016      	b.n	80147b0 <pifTask_ChangeMode+0x54>

	switch (p_owner->_mode) {
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	799b      	ldrb	r3, [r3, #6]
 8014786:	2b01      	cmp	r3, #1
 8014788:	d805      	bhi.n	8014796 <pifTask_ChangeMode+0x3a>
	case TM_RATIO:
	case TM_ALWAYS:
		_resetTable(p_owner->__table_number);
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	695b      	ldr	r3, [r3, #20]
 801478e:	4618      	mov	r0, r3
 8014790:	f7ff fd3e 	bl	8014210 <_resetTable>
		break;
 8014794:	e000      	b.n	8014798 <pifTask_ChangeMode+0x3c>

	default:
		break;
 8014796:	bf00      	nop
	}

	if (!_setParam(p_owner, mode, period)) return FALSE;
 8014798:	78fb      	ldrb	r3, [r7, #3]
 801479a:	883a      	ldrh	r2, [r7, #0]
 801479c:	4619      	mov	r1, r3
 801479e:	6878      	ldr	r0, [r7, #4]
 80147a0:	f7ff fef6 	bl	8014590 <_setParam>
 80147a4:	4603      	mov	r3, r0
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d101      	bne.n	80147ae <pifTask_ChangeMode+0x52>
 80147aa:	2300      	movs	r3, #0
 80147ac:	e000      	b.n	80147b0 <pifTask_ChangeMode+0x54>

    return TRUE;
 80147ae:	2301      	movs	r3, #1
}
 80147b0:	4618      	mov	r0, r3
 80147b2:	3708      	adds	r7, #8
 80147b4:	46bd      	mov	sp, r7
 80147b6:	bd80      	pop	{r7, pc}

080147b8 <pifTask_ChangePeriod>:

BOOL pifTask_ChangePeriod(PifTask* p_owner, uint16_t period)
{
 80147b8:	b480      	push	{r7}
 80147ba:	b083      	sub	sp, #12
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
 80147c0:	460b      	mov	r3, r1
 80147c2:	807b      	strh	r3, [r7, #2]
	switch (p_owner->_mode) {
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	799b      	ldrb	r3, [r3, #6]
 80147c8:	3b02      	subs	r3, #2
 80147ca:	2b01      	cmp	r3, #1
 80147cc:	d805      	bhi.n	80147da <pifTask_ChangePeriod+0x22>
	case TM_PERIOD_MS:
	case TM_PERIOD_US:
		p_owner->_period = period;
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	887a      	ldrh	r2, [r7, #2]
 80147d2:	811a      	strh	r2, [r3, #8]
		break;
 80147d4:	bf00      	nop

	default:
		pif_error = E_CANNOT_USE;
		return FALSE;
	}
	return TRUE;
 80147d6:	2301      	movs	r3, #1
 80147d8:	e003      	b.n	80147e2 <pifTask_ChangePeriod+0x2a>
		pif_error = E_CANNOT_USE;
 80147da:	4b05      	ldr	r3, [pc, #20]	; (80147f0 <pifTask_ChangePeriod+0x38>)
 80147dc:	2209      	movs	r2, #9
 80147de:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80147e0:	2300      	movs	r3, #0
}
 80147e2:	4618      	mov	r0, r3
 80147e4:	370c      	adds	r7, #12
 80147e6:	46bd      	mov	sp, r7
 80147e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ec:	4770      	bx	lr
 80147ee:	bf00      	nop
 80147f0:	200020d1 	.word	0x200020d1

080147f4 <pifTaskManager_Init>:
	}
}


BOOL pifTaskManager_Init(int max_count)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b082      	sub	sp, #8
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	6078      	str	r0, [r7, #4]
	if (!pifFixList_Init(&s_tasks, sizeof(PifTask), max_count)) return FALSE;
 80147fc:	687a      	ldr	r2, [r7, #4]
 80147fe:	2130      	movs	r1, #48	; 0x30
 8014800:	480b      	ldr	r0, [pc, #44]	; (8014830 <pifTaskManager_Init+0x3c>)
 8014802:	f7fe f8bb 	bl	801297c <pifFixList_Init>
 8014806:	4603      	mov	r3, r0
 8014808:	2b00      	cmp	r3, #0
 801480a:	d101      	bne.n	8014810 <pifTaskManager_Init+0x1c>
 801480c:	2300      	movs	r3, #0
 801480e:	e00b      	b.n	8014828 <pifTaskManager_Init+0x34>
	s_it_current = NULL;
 8014810:	4b08      	ldr	r3, [pc, #32]	; (8014834 <pifTaskManager_Init+0x40>)
 8014812:	2200      	movs	r2, #0
 8014814:	601a      	str	r2, [r3, #0]

	s_table_number = 0L;
 8014816:	4b08      	ldr	r3, [pc, #32]	; (8014838 <pifTaskManager_Init+0x44>)
 8014818:	2200      	movs	r2, #0
 801481a:	601a      	str	r2, [r3, #0]
	memset(s_table, 0, sizeof(s_table));
 801481c:	2280      	movs	r2, #128	; 0x80
 801481e:	2100      	movs	r1, #0
 8014820:	4806      	ldr	r0, [pc, #24]	; (801483c <pifTaskManager_Init+0x48>)
 8014822:	f00d fadf 	bl	8021de4 <memset>
	return TRUE;
 8014826:	2301      	movs	r3, #1
}
 8014828:	4618      	mov	r0, r3
 801482a:	3708      	adds	r7, #8
 801482c:	46bd      	mov	sp, r7
 801482e:	bd80      	pop	{r7, pc}
 8014830:	20002180 	.word	0x20002180
 8014834:	20002198 	.word	0x20002198
 8014838:	200021a0 	.word	0x200021a0
 801483c:	200021a4 	.word	0x200021a4

08014840 <pifTaskManager_Add>:
{
	pifFixList_Clear(&s_tasks, NULL);
}

PifTask* pifTaskManager_Add(PifTaskMode mode, uint16_t period, PifEvtTaskLoop evt_loop, void* p_client, BOOL start)
{
 8014840:	b580      	push	{r7, lr}
 8014842:	b086      	sub	sp, #24
 8014844:	af00      	add	r7, sp, #0
 8014846:	60ba      	str	r2, [r7, #8]
 8014848:	607b      	str	r3, [r7, #4]
 801484a:	4603      	mov	r3, r0
 801484c:	73fb      	strb	r3, [r7, #15]
 801484e:	460b      	mov	r3, r1
 8014850:	81bb      	strh	r3, [r7, #12]
	if (!evt_loop) {
 8014852:	68bb      	ldr	r3, [r7, #8]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d104      	bne.n	8014862 <pifTaskManager_Add+0x22>
        pif_error = E_INVALID_PARAM;
 8014858:	4b20      	ldr	r3, [pc, #128]	; (80148dc <pifTaskManager_Add+0x9c>)
 801485a:	2201      	movs	r2, #1
 801485c:	701a      	strb	r2, [r3, #0]
	    return NULL;
 801485e:	2300      	movs	r3, #0
 8014860:	e038      	b.n	80148d4 <pifTaskManager_Add+0x94>
	}

	if (!_checkParam(&mode, period)) return NULL;
 8014862:	89ba      	ldrh	r2, [r7, #12]
 8014864:	f107 030f 	add.w	r3, r7, #15
 8014868:	4611      	mov	r1, r2
 801486a:	4618      	mov	r0, r3
 801486c:	f7ff fe3a 	bl	80144e4 <_checkParam>
 8014870:	4603      	mov	r3, r0
 8014872:	2b00      	cmp	r3, #0
 8014874:	d101      	bne.n	801487a <pifTaskManager_Add+0x3a>
 8014876:	2300      	movs	r3, #0
 8014878:	e02c      	b.n	80148d4 <pifTaskManager_Add+0x94>

	PifTask* p_owner = (PifTask*)pifFixList_AddFirst(&s_tasks);
 801487a:	4819      	ldr	r0, [pc, #100]	; (80148e0 <pifTaskManager_Add+0xa0>)
 801487c:	f7fe f911 	bl	8012aa2 <pifFixList_AddFirst>
 8014880:	6178      	str	r0, [r7, #20]
	if (!p_owner) return NULL;
 8014882:	697b      	ldr	r3, [r7, #20]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d101      	bne.n	801488c <pifTaskManager_Add+0x4c>
 8014888:	2300      	movs	r3, #0
 801488a:	e023      	b.n	80148d4 <pifTaskManager_Add+0x94>

	if (!_setParam(p_owner, mode, period)) goto fail;
 801488c:	7bfb      	ldrb	r3, [r7, #15]
 801488e:	89ba      	ldrh	r2, [r7, #12]
 8014890:	4619      	mov	r1, r3
 8014892:	6978      	ldr	r0, [r7, #20]
 8014894:	f7ff fe7c 	bl	8014590 <_setParam>
 8014898:	4603      	mov	r3, r0
 801489a:	2b00      	cmp	r3, #0
 801489c:	d011      	beq.n	80148c2 <pifTaskManager_Add+0x82>

    p_owner->__evt_loop = evt_loop;
 801489e:	697b      	ldr	r3, [r7, #20]
 80148a0:	68ba      	ldr	r2, [r7, #8]
 80148a2:	62da      	str	r2, [r3, #44]	; 0x2c
    p_owner->_p_client = p_client;
 80148a4:	697b      	ldr	r3, [r7, #20]
 80148a6:	687a      	ldr	r2, [r7, #4]
 80148a8:	60da      	str	r2, [r3, #12]
    p_owner->pause = !start;
 80148aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	bf0c      	ite	eq
 80148b2:	2301      	moveq	r3, #1
 80148b4:	2300      	movne	r3, #0
 80148b6:	b2db      	uxtb	r3, r3
 80148b8:	461a      	mov	r2, r3
 80148ba:	697b      	ldr	r3, [r7, #20]
 80148bc:	701a      	strb	r2, [r3, #0]
    return p_owner;
 80148be:	697b      	ldr	r3, [r7, #20]
 80148c0:	e008      	b.n	80148d4 <pifTaskManager_Add+0x94>
	if (!_setParam(p_owner, mode, period)) goto fail;
 80148c2:	bf00      	nop

fail:
	if (p_owner) {
 80148c4:	697b      	ldr	r3, [r7, #20]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d003      	beq.n	80148d2 <pifTaskManager_Add+0x92>
		pifFixList_Remove(&s_tasks, p_owner);
 80148ca:	6979      	ldr	r1, [r7, #20]
 80148cc:	4804      	ldr	r0, [pc, #16]	; (80148e0 <pifTaskManager_Add+0xa0>)
 80148ce:	f7fe f91c 	bl	8012b0a <pifFixList_Remove>
	}
	return NULL;
 80148d2:	2300      	movs	r3, #0
}
 80148d4:	4618      	mov	r0, r3
 80148d6:	3718      	adds	r7, #24
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd80      	pop	{r7, pc}
 80148dc:	200020d1 	.word	0x200020d1
 80148e0:	20002180 	.word	0x20002180

080148e4 <pifTaskManager_Remove>:

void pifTaskManager_Remove(PifTask* p_task)
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b082      	sub	sp, #8
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
	switch (p_task->_mode) {
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	799b      	ldrb	r3, [r3, #6]
 80148f0:	2b01      	cmp	r3, #1
 80148f2:	d805      	bhi.n	8014900 <pifTaskManager_Remove+0x1c>
	case TM_RATIO:
	case TM_ALWAYS:
		_resetTable(p_task->__table_number);
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	695b      	ldr	r3, [r3, #20]
 80148f8:	4618      	mov	r0, r3
 80148fa:	f7ff fc89 	bl	8014210 <_resetTable>
		break;
 80148fe:	e000      	b.n	8014902 <pifTaskManager_Remove+0x1e>

	default:
		break;
 8014900:	bf00      	nop
	}
	pifFixList_Remove(&s_tasks, p_task);
 8014902:	6879      	ldr	r1, [r7, #4]
 8014904:	4803      	ldr	r0, [pc, #12]	; (8014914 <pifTaskManager_Remove+0x30>)
 8014906:	f7fe f900 	bl	8012b0a <pifFixList_Remove>
}
 801490a:	bf00      	nop
 801490c:	3708      	adds	r7, #8
 801490e:	46bd      	mov	sp, r7
 8014910:	bd80      	pop	{r7, pc}
 8014912:	bf00      	nop
 8014914:	20002180 	.word	0x20002180

08014918 <pifTaskManager_Count>:

int pifTaskManager_Count()
{
 8014918:	b580      	push	{r7, lr}
 801491a:	af00      	add	r7, sp, #0
	return pifFixList_Count(&s_tasks);
 801491c:	4802      	ldr	r0, [pc, #8]	; (8014928 <pifTaskManager_Count+0x10>)
 801491e:	f7fe f928 	bl	8012b72 <pifFixList_Count>
 8014922:	4603      	mov	r3, r0
}
 8014924:	4618      	mov	r0, r3
 8014926:	bd80      	pop	{r7, pc}
 8014928:	20002180 	.word	0x20002180

0801492c <pifTaskManager_Loop>:

void pifTaskManager_Loop()
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b082      	sub	sp, #8
 8014930:	af00      	add	r7, sp, #0
#if !defined(__PIF_NO_LOG__) && defined(__PIF_DEBUG__)
	static uint8_t sec = 0;
#endif

	PifFixListIterator it = s_it_current ? s_it_current : pifFixList_Begin(&s_tasks);
 8014932:	4b31      	ldr	r3, [pc, #196]	; (80149f8 <pifTaskManager_Loop+0xcc>)
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d104      	bne.n	8014944 <pifTaskManager_Loop+0x18>
 801493a:	4830      	ldr	r0, [pc, #192]	; (80149fc <pifTaskManager_Loop+0xd0>)
 801493c:	f7fe f925 	bl	8012b8a <pifFixList_Begin>
 8014940:	4603      	mov	r3, r0
 8014942:	e001      	b.n	8014948 <pifTaskManager_Loop+0x1c>
 8014944:	4b2c      	ldr	r3, [pc, #176]	; (80149f8 <pifTaskManager_Loop+0xcc>)
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	607b      	str	r3, [r7, #4]
	while (it) {
 801494a:	e030      	b.n	80149ae <pifTaskManager_Loop+0x82>
		s_it_current = it;
 801494c:	4a2a      	ldr	r2, [pc, #168]	; (80149f8 <pifTaskManager_Loop+0xcc>)
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	6013      	str	r3, [r2, #0]
		PifTask* p_owner = (PifTask*)it->data;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	3308      	adds	r3, #8
 8014956:	603b      	str	r3, [r7, #0]
		s_current_task = p_owner;
 8014958:	4a29      	ldr	r2, [pc, #164]	; (8014a00 <pifTaskManager_Loop+0xd4>)
 801495a:	683b      	ldr	r3, [r7, #0]
 801495c:	6013      	str	r3, [r2, #0]
		if (p_owner->immediate) {
 801495e:	683b      	ldr	r3, [r7, #0]
 8014960:	785b      	ldrb	r3, [r3, #1]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d00d      	beq.n	8014982 <pifTaskManager_Loop+0x56>
			p_owner->immediate = FALSE;
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	2200      	movs	r2, #0
 801496a:	705a      	strb	r2, [r3, #1]
			p_owner->__running = TRUE;
 801496c:	683b      	ldr	r3, [r7, #0]
 801496e:	2201      	movs	r2, #1
 8014970:	761a      	strb	r2, [r3, #24]
			(*p_owner->__evt_loop)(p_owner);
 8014972:	683b      	ldr	r3, [r7, #0]
 8014974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014976:	6838      	ldr	r0, [r7, #0]
 8014978:	4798      	blx	r3
			p_owner->__running = FALSE;
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	2200      	movs	r2, #0
 801497e:	761a      	strb	r2, [r3, #24]
 8014980:	e007      	b.n	8014992 <pifTaskManager_Loop+0x66>
		}
		else if (!p_owner->pause) (*p_owner->__processing)(p_owner);
 8014982:	683b      	ldr	r3, [r7, #0]
 8014984:	781b      	ldrb	r3, [r3, #0]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d103      	bne.n	8014992 <pifTaskManager_Loop+0x66>
 801498a:	683b      	ldr	r3, [r7, #0]
 801498c:	691b      	ldr	r3, [r3, #16]
 801498e:	6838      	ldr	r0, [r7, #0]
 8014990:	4798      	blx	r3
		s_current_task = NULL;
 8014992:	4b1b      	ldr	r3, [pc, #108]	; (8014a00 <pifTaskManager_Loop+0xd4>)
 8014994:	2200      	movs	r2, #0
 8014996:	601a      	str	r2, [r3, #0]
#ifdef __PIF_DEBUG__
	    if (pif_act_task_loop) (*pif_act_task_loop)();
 8014998:	4b1a      	ldr	r3, [pc, #104]	; (8014a04 <pifTaskManager_Loop+0xd8>)
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d002      	beq.n	80149a6 <pifTaskManager_Loop+0x7a>
 80149a0:	4b18      	ldr	r3, [pc, #96]	; (8014a04 <pifTaskManager_Loop+0xd8>)
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	4798      	blx	r3
#endif
		it = pifFixList_Next(it);
 80149a6:	6878      	ldr	r0, [r7, #4]
 80149a8:	f7fe f8fb 	bl	8012ba2 <pifFixList_Next>
 80149ac:	6078      	str	r0, [r7, #4]
	while (it) {
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d1cb      	bne.n	801494c <pifTaskManager_Loop+0x20>
	}

	s_number = (s_number + 1) & PIF_TASK_TABLE_MASK;
 80149b4:	4b14      	ldr	r3, [pc, #80]	; (8014a08 <pifTaskManager_Loop+0xdc>)
 80149b6:	781b      	ldrb	r3, [r3, #0]
 80149b8:	3301      	adds	r3, #1
 80149ba:	b2db      	uxtb	r3, r3
 80149bc:	f003 031f 	and.w	r3, r3, #31
 80149c0:	b2da      	uxtb	r2, r3
 80149c2:	4b11      	ldr	r3, [pc, #68]	; (8014a08 <pifTaskManager_Loop+0xdc>)
 80149c4:	701a      	strb	r2, [r3, #0]
	s_it_current = NULL;
 80149c6:	4b0c      	ldr	r3, [pc, #48]	; (80149f8 <pifTaskManager_Loop+0xcc>)
 80149c8:	2200      	movs	r2, #0
 80149ca:	601a      	str	r2, [r3, #0]

#if !defined(__PIF_NO_LOG__) && defined(__PIF_DEBUG__)
    if (sec != pif_datetime.second) {
 80149cc:	4b0f      	ldr	r3, [pc, #60]	; (8014a0c <pifTaskManager_Loop+0xe0>)
 80149ce:	795b      	ldrb	r3, [r3, #5]
 80149d0:	b2da      	uxtb	r2, r3
 80149d2:	4b0f      	ldr	r3, [pc, #60]	; (8014a10 <pifTaskManager_Loop+0xe4>)
 80149d4:	781b      	ldrb	r3, [r3, #0]
 80149d6:	429a      	cmp	r2, r3
 80149d8:	d006      	beq.n	80149e8 <pifTaskManager_Loop+0xbc>
    	pifTaskManager_Print();
 80149da:	f000 f8a3 	bl	8014b24 <pifTaskManager_Print>
    	sec = pif_datetime.second;
 80149de:	4b0b      	ldr	r3, [pc, #44]	; (8014a0c <pifTaskManager_Loop+0xe0>)
 80149e0:	795b      	ldrb	r3, [r3, #5]
 80149e2:	b2da      	uxtb	r2, r3
 80149e4:	4b0a      	ldr	r3, [pc, #40]	; (8014a10 <pifTaskManager_Loop+0xe4>)
 80149e6:	701a      	strb	r2, [r3, #0]
    }
#endif

#ifndef __PIF_NO_LOG__
    _checkLoopTime(FALSE);
 80149e8:	2000      	movs	r0, #0
 80149ea:	f7ff fe4f 	bl	801468c <_checkLoopTime>
#endif
}
 80149ee:	bf00      	nop
 80149f0:	3708      	adds	r7, #8
 80149f2:	46bd      	mov	sp, r7
 80149f4:	bd80      	pop	{r7, pc}
 80149f6:	bf00      	nop
 80149f8:	20002198 	.word	0x20002198
 80149fc:	20002180 	.word	0x20002180
 8014a00:	2000219c 	.word	0x2000219c
 8014a04:	20002178 	.word	0x20002178
 8014a08:	20002224 	.word	0x20002224
 8014a0c:	200020d8 	.word	0x200020d8
 8014a10:	20002238 	.word	0x20002238

08014a14 <pifTaskManager_Yield>:

void pifTaskManager_Yield()
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b082      	sub	sp, #8
 8014a18:	af00      	add	r7, sp, #0
	if (!pifFixList_Count(&s_tasks)) return;
 8014a1a:	4830      	ldr	r0, [pc, #192]	; (8014adc <pifTaskManager_Yield+0xc8>)
 8014a1c:	f7fe f8a9 	bl	8012b72 <pifFixList_Count>
 8014a20:	4603      	mov	r3, r0
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d053      	beq.n	8014ace <pifTaskManager_Yield+0xba>

	s_it_current = pifFixList_Next(s_it_current);
 8014a26:	4b2e      	ldr	r3, [pc, #184]	; (8014ae0 <pifTaskManager_Yield+0xcc>)
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	f7fe f8b9 	bl	8012ba2 <pifFixList_Next>
 8014a30:	4603      	mov	r3, r0
 8014a32:	4a2b      	ldr	r2, [pc, #172]	; (8014ae0 <pifTaskManager_Yield+0xcc>)
 8014a34:	6013      	str	r3, [r2, #0]
	if (!s_it_current) {
 8014a36:	4b2a      	ldr	r3, [pc, #168]	; (8014ae0 <pifTaskManager_Yield+0xcc>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d10e      	bne.n	8014a5c <pifTaskManager_Yield+0x48>
		s_number = (s_number + 1) & PIF_TASK_TABLE_MASK;
 8014a3e:	4b29      	ldr	r3, [pc, #164]	; (8014ae4 <pifTaskManager_Yield+0xd0>)
 8014a40:	781b      	ldrb	r3, [r3, #0]
 8014a42:	3301      	adds	r3, #1
 8014a44:	b2db      	uxtb	r3, r3
 8014a46:	f003 031f 	and.w	r3, r3, #31
 8014a4a:	b2da      	uxtb	r2, r3
 8014a4c:	4b25      	ldr	r3, [pc, #148]	; (8014ae4 <pifTaskManager_Yield+0xd0>)
 8014a4e:	701a      	strb	r2, [r3, #0]
		s_it_current = pifFixList_Begin(&s_tasks);
 8014a50:	4822      	ldr	r0, [pc, #136]	; (8014adc <pifTaskManager_Yield+0xc8>)
 8014a52:	f7fe f89a 	bl	8012b8a <pifFixList_Begin>
 8014a56:	4603      	mov	r3, r0
 8014a58:	4a21      	ldr	r2, [pc, #132]	; (8014ae0 <pifTaskManager_Yield+0xcc>)
 8014a5a:	6013      	str	r3, [r2, #0]
	}

	PifTask* p_owner = (PifTask*)s_it_current->data;
 8014a5c:	4b20      	ldr	r3, [pc, #128]	; (8014ae0 <pifTaskManager_Yield+0xcc>)
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	3308      	adds	r3, #8
 8014a62:	607b      	str	r3, [r7, #4]
	if (!p_owner->__running) {
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	7e1b      	ldrb	r3, [r3, #24]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d12c      	bne.n	8014ac6 <pifTaskManager_Yield+0xb2>
		if (s_current_task->disallow_yield_id && s_current_task->disallow_yield_id == p_owner->disallow_yield_id) return;
 8014a6c:	4b1e      	ldr	r3, [pc, #120]	; (8014ae8 <pifTaskManager_Yield+0xd4>)
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	789b      	ldrb	r3, [r3, #2]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d006      	beq.n	8014a84 <pifTaskManager_Yield+0x70>
 8014a76:	4b1c      	ldr	r3, [pc, #112]	; (8014ae8 <pifTaskManager_Yield+0xd4>)
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	789a      	ldrb	r2, [r3, #2]
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	789b      	ldrb	r3, [r3, #2]
 8014a80:	429a      	cmp	r2, r3
 8014a82:	d026      	beq.n	8014ad2 <pifTaskManager_Yield+0xbe>
		if (p_owner->immediate) {
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	785b      	ldrb	r3, [r3, #1]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d00d      	beq.n	8014aa8 <pifTaskManager_Yield+0x94>
			p_owner->immediate = FALSE;
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	2200      	movs	r2, #0
 8014a90:	705a      	strb	r2, [r3, #1]
			p_owner->__running = TRUE;
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	2201      	movs	r2, #1
 8014a96:	761a      	strb	r2, [r3, #24]
			(*p_owner->__evt_loop)(p_owner);
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a9c:	6878      	ldr	r0, [r7, #4]
 8014a9e:	4798      	blx	r3
			p_owner->__running = FALSE;
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	761a      	strb	r2, [r3, #24]
 8014aa6:	e007      	b.n	8014ab8 <pifTaskManager_Yield+0xa4>
		}
		else if (!p_owner->pause) (*p_owner->__processing)(p_owner);
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	781b      	ldrb	r3, [r3, #0]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d103      	bne.n	8014ab8 <pifTaskManager_Yield+0xa4>
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	691b      	ldr	r3, [r3, #16]
 8014ab4:	6878      	ldr	r0, [r7, #4]
 8014ab6:	4798      	blx	r3

#ifdef __PIF_DEBUG__
		if (pif_act_task_yield) (*pif_act_task_yield)();
 8014ab8:	4b0c      	ldr	r3, [pc, #48]	; (8014aec <pifTaskManager_Yield+0xd8>)
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d002      	beq.n	8014ac6 <pifTaskManager_Yield+0xb2>
 8014ac0:	4b0a      	ldr	r3, [pc, #40]	; (8014aec <pifTaskManager_Yield+0xd8>)
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	4798      	blx	r3
#endif
	}

#ifndef __PIF_NO_LOG__
    _checkLoopTime(TRUE);
 8014ac6:	2001      	movs	r0, #1
 8014ac8:	f7ff fde0 	bl	801468c <_checkLoopTime>
 8014acc:	e002      	b.n	8014ad4 <pifTaskManager_Yield+0xc0>
	if (!pifFixList_Count(&s_tasks)) return;
 8014ace:	bf00      	nop
 8014ad0:	e000      	b.n	8014ad4 <pifTaskManager_Yield+0xc0>
		if (s_current_task->disallow_yield_id && s_current_task->disallow_yield_id == p_owner->disallow_yield_id) return;
 8014ad2:	bf00      	nop
#endif
}
 8014ad4:	3708      	adds	r7, #8
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	bd80      	pop	{r7, pc}
 8014ada:	bf00      	nop
 8014adc:	20002180 	.word	0x20002180
 8014ae0:	20002198 	.word	0x20002198
 8014ae4:	20002224 	.word	0x20002224
 8014ae8:	2000219c 	.word	0x2000219c
 8014aec:	2000217c 	.word	0x2000217c

08014af0 <pifTaskManager_YieldMs>:

void pifTaskManager_YieldMs(uint32_t time)
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b084      	sub	sp, #16
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
    uint32_t start;

    if (!time) return;
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d00c      	beq.n	8014b18 <pifTaskManager_YieldMs+0x28>

    start = pif_cumulative_timer1ms;
 8014afe:	4b08      	ldr	r3, [pc, #32]	; (8014b20 <pifTaskManager_YieldMs+0x30>)
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	60fb      	str	r3, [r7, #12]
    do {
		pifTaskManager_Yield();
 8014b04:	f7ff ff86 	bl	8014a14 <pifTaskManager_Yield>
    } while (pif_cumulative_timer1ms - start <= time);
 8014b08:	4b05      	ldr	r3, [pc, #20]	; (8014b20 <pifTaskManager_YieldMs+0x30>)
 8014b0a:	681a      	ldr	r2, [r3, #0]
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	1ad3      	subs	r3, r2, r3
 8014b10:	687a      	ldr	r2, [r7, #4]
 8014b12:	429a      	cmp	r2, r3
 8014b14:	d2f6      	bcs.n	8014b04 <pifTaskManager_YieldMs+0x14>
 8014b16:	e000      	b.n	8014b1a <pifTaskManager_YieldMs+0x2a>
    if (!time) return;
 8014b18:	bf00      	nop
}
 8014b1a:	3710      	adds	r7, #16
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	bd80      	pop	{r7, pc}
 8014b20:	200020e0 	.word	0x200020e0

08014b24 <pifTaskManager_Print>:
}

#if !defined(__PIF_NO_LOG__) && defined(__PIF_DEBUG__)

void pifTaskManager_Print()
{
 8014b24:	b5b0      	push	{r4, r5, r7, lr}
 8014b26:	b084      	sub	sp, #16
 8014b28:	af02      	add	r7, sp, #8
	PifFixListIterator it;

	if (!pif_log_flag.bt.task) return;
 8014b2a:	4b1a      	ldr	r3, [pc, #104]	; (8014b94 <pifTaskManager_Print+0x70>)
 8014b2c:	781b      	ldrb	r3, [r3, #0]
 8014b2e:	f003 0302 	and.w	r3, r3, #2
 8014b32:	b2db      	uxtb	r3, r3
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d028      	beq.n	8014b8a <pifTaskManager_Print+0x66>

	it = pifFixList_Begin(&s_tasks);
 8014b38:	4817      	ldr	r0, [pc, #92]	; (8014b98 <pifTaskManager_Print+0x74>)
 8014b3a:	f7fe f826 	bl	8012b8a <pifFixList_Begin>
 8014b3e:	6078      	str	r0, [r7, #4]
	while (it) {
 8014b40:	e01f      	b.n	8014b82 <pifTaskManager_Print+0x5e>
		PifTask* p_owner = (PifTask*)it->data;
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	3308      	adds	r3, #8
 8014b46:	603b      	str	r3, [r7, #0]
		if (p_owner->_mode == TM_RATIO) {
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	799b      	ldrb	r3, [r3, #6]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d114      	bne.n	8014b7a <pifTaskManager_Print+0x56>
#ifndef __PIF_NO_LOG__
			pifLog_Printf(LT_INFO, "Task Id=%d Ratio=%d%% Period=%2fus",
					p_owner->_id, p_owner->_period, p_owner->__period);
 8014b50:	683b      	ldr	r3, [r7, #0]
 8014b52:	889b      	ldrh	r3, [r3, #4]
			pifLog_Printf(LT_INFO, "Task Id=%d Ratio=%d%% Period=%2fus",
 8014b54:	461c      	mov	r4, r3
					p_owner->_id, p_owner->_period, p_owner->__period);
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	891b      	ldrh	r3, [r3, #8]
			pifLog_Printf(LT_INFO, "Task Id=%d Ratio=%d%% Period=%2fus",
 8014b5a:	461d      	mov	r5, r3
					p_owner->_id, p_owner->_period, p_owner->__period);
 8014b5c:	683b      	ldr	r3, [r7, #0]
 8014b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			pifLog_Printf(LT_INFO, "Task Id=%d Ratio=%d%% Period=%2fus",
 8014b60:	4618      	mov	r0, r3
 8014b62:	f7eb fcaf 	bl	80004c4 <__aeabi_f2d>
 8014b66:	4602      	mov	r2, r0
 8014b68:	460b      	mov	r3, r1
 8014b6a:	e9cd 2300 	strd	r2, r3, [sp]
 8014b6e:	462b      	mov	r3, r5
 8014b70:	4622      	mov	r2, r4
 8014b72:	490a      	ldr	r1, [pc, #40]	; (8014b9c <pifTaskManager_Print+0x78>)
 8014b74:	2002      	movs	r0, #2
 8014b76:	f7fe fd0d 	bl	8013594 <pifLog_Printf>
#endif
		}
		it = pifFixList_Next(it);
 8014b7a:	6878      	ldr	r0, [r7, #4]
 8014b7c:	f7fe f811 	bl	8012ba2 <pifFixList_Next>
 8014b80:	6078      	str	r0, [r7, #4]
	while (it) {
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d1dc      	bne.n	8014b42 <pifTaskManager_Print+0x1e>
 8014b88:	e000      	b.n	8014b8c <pifTaskManager_Print+0x68>
	if (!pif_log_flag.bt.task) return;
 8014b8a:	bf00      	nop
	}
}
 8014b8c:	3708      	adds	r7, #8
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bdb0      	pop	{r4, r5, r7, pc}
 8014b92:	bf00      	nop
 8014b94:	200020f8 	.word	0x200020f8
 8014b98:	20002180 	.word	0x20002180
 8014b9c:	080267d8 	.word	0x080267d8

08014ba0 <_doTask>:
#include "core/pif_timer.h"


static uint16_t _doTask(PifTask* p_task)
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b086      	sub	sp, #24
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
	PifTimerManager* p_manager = p_task->_p_client;
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	68db      	ldr	r3, [r3, #12]
 8014bac:	613b      	str	r3, [r7, #16]

	PifFixListIterator it = pifFixList_Begin(&p_manager->__timers);
 8014bae:	693b      	ldr	r3, [r7, #16]
 8014bb0:	3308      	adds	r3, #8
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	f7fd ffe9 	bl	8012b8a <pifFixList_Begin>
 8014bb8:	6178      	str	r0, [r7, #20]
	while (it) {
 8014bba:	e017      	b.n	8014bec <_doTask+0x4c>
		PifTimer* p_timer = (PifTimer*)it->data;
 8014bbc:	697b      	ldr	r3, [r7, #20]
 8014bbe:	3308      	adds	r3, #8
 8014bc0:	60fb      	str	r3, [r7, #12]

		if (p_timer->__event) {
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	7f1b      	ldrb	r3, [r3, #28]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d00c      	beq.n	8014be4 <_doTask+0x44>
			p_timer->__event = FALSE;
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	2200      	movs	r2, #0
 8014bce:	771a      	strb	r2, [r3, #28]

			if (p_timer->__evt_finish) (*p_timer->__evt_finish)(p_timer->__p_finish_issuer);
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	6a1b      	ldr	r3, [r3, #32]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d005      	beq.n	8014be4 <_doTask+0x44>
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	6a1b      	ldr	r3, [r3, #32]
 8014bdc:	68fa      	ldr	r2, [r7, #12]
 8014bde:	6912      	ldr	r2, [r2, #16]
 8014be0:	4610      	mov	r0, r2
 8014be2:	4798      	blx	r3
		}

		it = pifFixList_Next(it);
 8014be4:	6978      	ldr	r0, [r7, #20]
 8014be6:	f7fd ffdc 	bl	8012ba2 <pifFixList_Next>
 8014bea:	6178      	str	r0, [r7, #20]
	while (it) {
 8014bec:	697b      	ldr	r3, [r7, #20]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d1e4      	bne.n	8014bbc <_doTask+0x1c>
	}
	return 0;
 8014bf2:	2300      	movs	r3, #0
}
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	3718      	adds	r7, #24
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	bd80      	pop	{r7, pc}

08014bfc <pifTimerManager_Init>:

BOOL pifTimerManager_Init(PifTimerManager* p_manager, PifId id, uint32_t period1us, int max_count)
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b086      	sub	sp, #24
 8014c00:	af02      	add	r7, sp, #8
 8014c02:	60f8      	str	r0, [r7, #12]
 8014c04:	607a      	str	r2, [r7, #4]
 8014c06:	603b      	str	r3, [r7, #0]
 8014c08:	460b      	mov	r3, r1
 8014c0a:	817b      	strh	r3, [r7, #10]
    if (!p_manager || !period1us) {
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d002      	beq.n	8014c18 <pifTimerManager_Init+0x1c>
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d104      	bne.n	8014c22 <pifTimerManager_Init+0x26>
        pif_error = E_INVALID_PARAM;
 8014c18:	4b1f      	ldr	r3, [pc, #124]	; (8014c98 <pifTimerManager_Init+0x9c>)
 8014c1a:	2201      	movs	r2, #1
 8014c1c:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8014c1e:	2300      	movs	r3, #0
 8014c20:	e036      	b.n	8014c90 <pifTimerManager_Init+0x94>
    }

	memset(p_manager, 0, sizeof(PifTimerManager));
 8014c22:	2224      	movs	r2, #36	; 0x24
 8014c24:	2100      	movs	r1, #0
 8014c26:	68f8      	ldr	r0, [r7, #12]
 8014c28:	f00d f8dc 	bl	8021de4 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8014c2c:	897b      	ldrh	r3, [r7, #10]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d106      	bne.n	8014c40 <pifTimerManager_Init+0x44>
 8014c32:	4b1a      	ldr	r3, [pc, #104]	; (8014c9c <pifTimerManager_Init+0xa0>)
 8014c34:	881b      	ldrh	r3, [r3, #0]
 8014c36:	1c5a      	adds	r2, r3, #1
 8014c38:	b291      	uxth	r1, r2
 8014c3a:	4a18      	ldr	r2, [pc, #96]	; (8014c9c <pifTimerManager_Init+0xa0>)
 8014c3c:	8011      	strh	r1, [r2, #0]
 8014c3e:	817b      	strh	r3, [r7, #10]
    p_manager->_id = id;
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	897a      	ldrh	r2, [r7, #10]
 8014c44:	801a      	strh	r2, [r3, #0]
    if (!pifFixList_Init(&p_manager->__timers, sizeof(PifTimer), max_count)) goto fail;
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	3308      	adds	r3, #8
 8014c4a:	683a      	ldr	r2, [r7, #0]
 8014c4c:	2128      	movs	r1, #40	; 0x28
 8014c4e:	4618      	mov	r0, r3
 8014c50:	f7fd fe94 	bl	801297c <pifFixList_Init>
 8014c54:	4603      	mov	r3, r0
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d013      	beq.n	8014c82 <pifTimerManager_Init+0x86>
    p_manager->_period1us = period1us;
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	687a      	ldr	r2, [r7, #4]
 8014c5e:	605a      	str	r2, [r3, #4]

    p_manager->__p_task = pifTaskManager_Add(TM_ALWAYS, 100, _doTask, p_manager, TRUE);
 8014c60:	2301      	movs	r3, #1
 8014c62:	9300      	str	r3, [sp, #0]
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	4a0e      	ldr	r2, [pc, #56]	; (8014ca0 <pifTimerManager_Init+0xa4>)
 8014c68:	2164      	movs	r1, #100	; 0x64
 8014c6a:	2001      	movs	r0, #1
 8014c6c:	f7ff fde8 	bl	8014840 <pifTaskManager_Add>
 8014c70:	4602      	mov	r2, r0
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	621a      	str	r2, [r3, #32]
    if (!p_manager->__p_task) goto fail;
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	6a1b      	ldr	r3, [r3, #32]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d003      	beq.n	8014c86 <pifTimerManager_Init+0x8a>
    return TRUE;
 8014c7e:	2301      	movs	r3, #1
 8014c80:	e006      	b.n	8014c90 <pifTimerManager_Init+0x94>
    if (!pifFixList_Init(&p_manager->__timers, sizeof(PifTimer), max_count)) goto fail;
 8014c82:	bf00      	nop
 8014c84:	e000      	b.n	8014c88 <pifTimerManager_Init+0x8c>
    if (!p_manager->__p_task) goto fail;
 8014c86:	bf00      	nop

fail:
	pifTimerManager_Clear(p_manager);
 8014c88:	68f8      	ldr	r0, [r7, #12]
 8014c8a:	f000 f80b 	bl	8014ca4 <pifTimerManager_Clear>
    return FALSE;
 8014c8e:	2300      	movs	r3, #0
}
 8014c90:	4618      	mov	r0, r3
 8014c92:	3710      	adds	r7, #16
 8014c94:	46bd      	mov	sp, r7
 8014c96:	bd80      	pop	{r7, pc}
 8014c98:	200020d1 	.word	0x200020d1
 8014c9c:	2000005c 	.word	0x2000005c
 8014ca0:	08014ba1 	.word	0x08014ba1

08014ca4 <pifTimerManager_Clear>:

void pifTimerManager_Clear(PifTimerManager* p_manager)
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b082      	sub	sp, #8
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
	if (p_manager->__p_task) {
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	6a1b      	ldr	r3, [r3, #32]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d007      	beq.n	8014cc4 <pifTimerManager_Clear+0x20>
		pifTaskManager_Remove(p_manager->__p_task);
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	6a1b      	ldr	r3, [r3, #32]
 8014cb8:	4618      	mov	r0, r3
 8014cba:	f7ff fe13 	bl	80148e4 <pifTaskManager_Remove>
		p_manager->__p_task = NULL;
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	621a      	str	r2, [r3, #32]
	}
	pifFixList_Clear(&p_manager->__timers, NULL);
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	3308      	adds	r3, #8
 8014cc8:	2100      	movs	r1, #0
 8014cca:	4618      	mov	r0, r3
 8014ccc:	f7fd feb6 	bl	8012a3c <pifFixList_Clear>
}
 8014cd0:	bf00      	nop
 8014cd2:	3708      	adds	r7, #8
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}

08014cd8 <pifTimerManager_Add>:

PifTimer* pifTimerManager_Add(PifTimerManager* p_manager, PifTimerType type)
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b084      	sub	sp, #16
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
 8014ce0:	460b      	mov	r3, r1
 8014ce2:	70fb      	strb	r3, [r7, #3]
	PifTimer* p_timer = (PifTimer*)pifFixList_AddFirst(&p_manager->__timers);
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	3308      	adds	r3, #8
 8014ce8:	4618      	mov	r0, r3
 8014cea:	f7fd feda 	bl	8012aa2 <pifFixList_AddFirst>
 8014cee:	60f8      	str	r0, [r7, #12]
    if (!p_timer) return NULL;
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d101      	bne.n	8014cfa <pifTimerManager_Add+0x22>
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	e006      	b.n	8014d08 <pifTimerManager_Add+0x30>

    p_timer->_type = type;
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	78fa      	ldrb	r2, [r7, #3]
 8014cfe:	721a      	strb	r2, [r3, #8]
    p_timer->_step = TS_STOP;
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	2200      	movs	r2, #0
 8014d04:	725a      	strb	r2, [r3, #9]
    return p_timer;
 8014d06:	68fb      	ldr	r3, [r7, #12]
}
 8014d08:	4618      	mov	r0, r3
 8014d0a:	3710      	adds	r7, #16
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	bd80      	pop	{r7, pc}

08014d10 <pifTimerManager_Remove>:

void pifTimerManager_Remove(PifTimer* p_timer)
{
 8014d10:	b480      	push	{r7}
 8014d12:	b083      	sub	sp, #12
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
	p_timer->_step = TS_REMOVE;
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	2202      	movs	r2, #2
 8014d1c:	725a      	strb	r2, [r3, #9]
}
 8014d1e:	bf00      	nop
 8014d20:	370c      	adds	r7, #12
 8014d22:	46bd      	mov	sp, r7
 8014d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d28:	4770      	bx	lr

08014d2a <pifTimerManager_Count>:

int pifTimerManager_Count(PifTimerManager* p_manager)
{
 8014d2a:	b580      	push	{r7, lr}
 8014d2c:	b082      	sub	sp, #8
 8014d2e:	af00      	add	r7, sp, #0
 8014d30:	6078      	str	r0, [r7, #4]
	return pifFixList_Count(&p_manager->__timers);
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	3308      	adds	r3, #8
 8014d36:	4618      	mov	r0, r3
 8014d38:	f7fd ff1b 	bl	8012b72 <pifFixList_Count>
 8014d3c:	4603      	mov	r3, r0
}
 8014d3e:	4618      	mov	r0, r3
 8014d40:	3708      	adds	r7, #8
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bd80      	pop	{r7, pc}
	...

08014d48 <pifTimer_Start>:

BOOL pifTimer_Start(PifTimer* p_owner, uint32_t target)
{
 8014d48:	b480      	push	{r7}
 8014d4a:	b083      	sub	sp, #12
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
 8014d50:	6039      	str	r1, [r7, #0]
	if (!target) {
 8014d52:	683b      	ldr	r3, [r7, #0]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d104      	bne.n	8014d62 <pifTimer_Start+0x1a>
		pif_error = E_INVALID_PARAM;
 8014d58:	4b11      	ldr	r3, [pc, #68]	; (8014da0 <pifTimer_Start+0x58>)
 8014d5a:	2201      	movs	r2, #1
 8014d5c:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8014d5e:	2300      	movs	r3, #0
 8014d60:	e017      	b.n	8014d92 <pifTimer_Start+0x4a>
    }

    if (p_owner->_step == TS_STOP) {
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	7a5b      	ldrb	r3, [r3, #9]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d105      	bne.n	8014d76 <pifTimer_Start+0x2e>
    	p_owner->_step = TS_RUNNING;
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	2201      	movs	r2, #1
 8014d6e:	725a      	strb	r2, [r3, #9]
    	p_owner->__event = FALSE;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	2200      	movs	r2, #0
 8014d74:	771a      	strb	r2, [r3, #28]
    }
    p_owner->target = target;
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	683a      	ldr	r2, [r7, #0]
 8014d7a:	601a      	str	r2, [r3, #0]
    p_owner->__current = target;
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	683a      	ldr	r2, [r7, #0]
 8014d80:	60da      	str	r2, [r3, #12]

    if (p_owner->_type == TT_PWM) {
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	7a1b      	ldrb	r3, [r3, #8]
 8014d86:	2b02      	cmp	r3, #2
 8014d88:	d102      	bne.n	8014d90 <pifTimer_Start+0x48>
    	p_owner->__pwm_duty = 0;
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	619a      	str	r2, [r3, #24]
    }
    return TRUE;
 8014d90:	2301      	movs	r3, #1
}
 8014d92:	4618      	mov	r0, r3
 8014d94:	370c      	adds	r7, #12
 8014d96:	46bd      	mov	sp, r7
 8014d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9c:	4770      	bx	lr
 8014d9e:	bf00      	nop
 8014da0:	200020d1 	.word	0x200020d1

08014da4 <pifTimer_Stop>:

void pifTimer_Stop(PifTimer* p_owner)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b082      	sub	sp, #8
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
	p_owner->__current = 0;
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	2200      	movs	r2, #0
 8014db0:	60da      	str	r2, [r3, #12]
	p_owner->_step = TS_STOP;
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	2200      	movs	r2, #0
 8014db6:	725a      	strb	r2, [r3, #9]
	if (p_owner->_type == TT_PWM) {
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	7a1b      	ldrb	r3, [r3, #8]
 8014dbc:	2b02      	cmp	r3, #2
 8014dbe:	d103      	bne.n	8014dc8 <pifTimer_Stop+0x24>
		(*p_owner->act_pwm)(OFF);
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	685b      	ldr	r3, [r3, #4]
 8014dc4:	2000      	movs	r0, #0
 8014dc6:	4798      	blx	r3
	}
}
 8014dc8:	bf00      	nop
 8014dca:	3708      	adds	r7, #8
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	bd80      	pop	{r7, pc}

08014dd0 <pifTimer_Reset>:

void pifTimer_Reset(PifTimer* p_owner)
{
 8014dd0:	b480      	push	{r7}
 8014dd2:	b083      	sub	sp, #12
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
	p_owner->__current = p_owner->target;
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	681a      	ldr	r2, [r3, #0]
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	60da      	str	r2, [r3, #12]
	p_owner->_step = TS_RUNNING;
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	2201      	movs	r2, #1
 8014de4:	725a      	strb	r2, [r3, #9]
}
 8014de6:	bf00      	nop
 8014de8:	370c      	adds	r7, #12
 8014dea:	46bd      	mov	sp, r7
 8014dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df0:	4770      	bx	lr

08014df2 <pifTimerManager_sigTick>:
	if (p_owner->_step != TS_RUNNING) return 0;
	else return p_owner->target - p_owner->__current;
}

void pifTimerManager_sigTick(PifTimerManager* p_manager)
{
 8014df2:	b580      	push	{r7, lr}
 8014df4:	b086      	sub	sp, #24
 8014df6:	af00      	add	r7, sp, #0
 8014df8:	6078      	str	r0, [r7, #4]
	PifTimer* p_remove = NULL;
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	617b      	str	r3, [r7, #20]

    if (!p_manager) return;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	f000 8092 	beq.w	8014f2a <pifTimerManager_sigTick+0x138>

    PifFixListIterator it = pifFixList_Begin(&p_manager->__timers);
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	3308      	adds	r3, #8
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f7fd febd 	bl	8012b8a <pifFixList_Begin>
 8014e10:	6138      	str	r0, [r7, #16]
	while (it) {
 8014e12:	e07c      	b.n	8014f0e <pifTimerManager_sigTick+0x11c>
		PifTimer* p_timer = (PifTimer*)it->data;
 8014e14:	693b      	ldr	r3, [r7, #16]
 8014e16:	3308      	adds	r3, #8
 8014e18:	60fb      	str	r3, [r7, #12]

		if (p_timer->_step == TS_REMOVE) {
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	7a5b      	ldrb	r3, [r3, #9]
 8014e1e:	2b02      	cmp	r3, #2
 8014e20:	d105      	bne.n	8014e2e <pifTimerManager_sigTick+0x3c>
			if (!p_remove) p_remove = p_timer;
 8014e22:	697b      	ldr	r3, [r7, #20]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d16e      	bne.n	8014f06 <pifTimerManager_sigTick+0x114>
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	617b      	str	r3, [r7, #20]
 8014e2c:	e06b      	b.n	8014f06 <pifTimerManager_sigTick+0x114>
		}
		else if (p_timer->__current) {
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	68db      	ldr	r3, [r3, #12]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d060      	beq.n	8014ef8 <pifTimerManager_sigTick+0x106>
			p_timer->__current--;
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	68db      	ldr	r3, [r3, #12]
 8014e3a:	1e5a      	subs	r2, r3, #1
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	60da      	str	r2, [r3, #12]
			switch (p_timer->_type) {
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	7a1b      	ldrb	r3, [r3, #8]
 8014e44:	2b02      	cmp	r3, #2
 8014e46:	d031      	beq.n	8014eac <pifTimerManager_sigTick+0xba>
 8014e48:	2b02      	cmp	r3, #2
 8014e4a:	dc5c      	bgt.n	8014f06 <pifTimerManager_sigTick+0x114>
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d002      	beq.n	8014e56 <pifTimerManager_sigTick+0x64>
 8014e50:	2b01      	cmp	r3, #1
 8014e52:	d015      	beq.n	8014e80 <pifTimerManager_sigTick+0x8e>
 8014e54:	e057      	b.n	8014f06 <pifTimerManager_sigTick+0x114>
			case TT_ONCE:
				if (!p_timer->__current) {
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	68db      	ldr	r3, [r3, #12]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d14e      	bne.n	8014efc <pifTimerManager_sigTick+0x10a>
					p_timer->_step = TS_STOP;
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	2200      	movs	r2, #0
 8014e62:	725a      	strb	r2, [r3, #9]
					p_timer->__event = TRUE;
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	2201      	movs	r2, #1
 8014e68:	771a      	strb	r2, [r3, #28]
					if (p_timer->__evt_int_finish) {
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d044      	beq.n	8014efc <pifTimerManager_sigTick+0x10a>
						(*p_timer->__evt_int_finish)(p_timer->__p_int_finish_issuer);
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e76:	68fa      	ldr	r2, [r7, #12]
 8014e78:	6952      	ldr	r2, [r2, #20]
 8014e7a:	4610      	mov	r0, r2
 8014e7c:	4798      	blx	r3
					}
				}
				break;
 8014e7e:	e03d      	b.n	8014efc <pifTimerManager_sigTick+0x10a>

			case TT_REPEAT:
				if (!p_timer->__current) {
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	68db      	ldr	r3, [r3, #12]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d13b      	bne.n	8014f00 <pifTimerManager_sigTick+0x10e>
					p_timer->__current = p_timer->target;
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	681a      	ldr	r2, [r3, #0]
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	60da      	str	r2, [r3, #12]
					p_timer->__event = TRUE;
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	2201      	movs	r2, #1
 8014e94:	771a      	strb	r2, [r3, #28]
					if (p_timer->__evt_int_finish) {
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d030      	beq.n	8014f00 <pifTimerManager_sigTick+0x10e>
						(*p_timer->__evt_int_finish)(p_timer->__p_int_finish_issuer);
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ea2:	68fa      	ldr	r2, [r7, #12]
 8014ea4:	6952      	ldr	r2, [r2, #20]
 8014ea6:	4610      	mov	r0, r2
 8014ea8:	4798      	blx	r3
					}
				}
				break;
 8014eaa:	e029      	b.n	8014f00 <pifTimerManager_sigTick+0x10e>

			case TT_PWM:
				if (p_timer->__pwm_duty != p_timer->target) {
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	699a      	ldr	r2, [r3, #24]
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	429a      	cmp	r2, r3
 8014eb6:	d016      	beq.n	8014ee6 <pifTimerManager_sigTick+0xf4>
					if (!p_timer->__current) {
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	68db      	ldr	r3, [r3, #12]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d107      	bne.n	8014ed0 <pifTimerManager_sigTick+0xde>
						(*p_timer->act_pwm)(OFF);
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	685b      	ldr	r3, [r3, #4]
 8014ec4:	2000      	movs	r0, #0
 8014ec6:	4798      	blx	r3
						p_timer->__current = p_timer->target;
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	681a      	ldr	r2, [r3, #0]
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	60da      	str	r2, [r3, #12]
					}
					if (p_timer->__current == p_timer->__pwm_duty) {
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	68da      	ldr	r2, [r3, #12]
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	699b      	ldr	r3, [r3, #24]
 8014ed8:	429a      	cmp	r2, r3
 8014eda:	d113      	bne.n	8014f04 <pifTimerManager_sigTick+0x112>
						(*p_timer->act_pwm)(ON);
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	685b      	ldr	r3, [r3, #4]
 8014ee0:	2001      	movs	r0, #1
 8014ee2:	4798      	blx	r3
				else {
					if (!p_timer->__current) {
						p_timer->__current = p_timer->target;
					}
				}
				break;
 8014ee4:	e00e      	b.n	8014f04 <pifTimerManager_sigTick+0x112>
					if (!p_timer->__current) {
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	68db      	ldr	r3, [r3, #12]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d10a      	bne.n	8014f04 <pifTimerManager_sigTick+0x112>
						p_timer->__current = p_timer->target;
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	681a      	ldr	r2, [r3, #0]
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	60da      	str	r2, [r3, #12]
				break;
 8014ef6:	e005      	b.n	8014f04 <pifTimerManager_sigTick+0x112>
			}
		}
 8014ef8:	bf00      	nop
 8014efa:	e004      	b.n	8014f06 <pifTimerManager_sigTick+0x114>
				break;
 8014efc:	bf00      	nop
 8014efe:	e002      	b.n	8014f06 <pifTimerManager_sigTick+0x114>
				break;
 8014f00:	bf00      	nop
 8014f02:	e000      	b.n	8014f06 <pifTimerManager_sigTick+0x114>
				break;
 8014f04:	bf00      	nop

		it = pifFixList_Next(it);
 8014f06:	6938      	ldr	r0, [r7, #16]
 8014f08:	f7fd fe4b 	bl	8012ba2 <pifFixList_Next>
 8014f0c:	6138      	str	r0, [r7, #16]
	while (it) {
 8014f0e:	693b      	ldr	r3, [r7, #16]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	f47f af7f 	bne.w	8014e14 <pifTimerManager_sigTick+0x22>
	}

	if (p_remove) pifFixList_Remove(&p_manager->__timers, p_remove);
 8014f16:	697b      	ldr	r3, [r7, #20]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d007      	beq.n	8014f2c <pifTimerManager_sigTick+0x13a>
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	3308      	adds	r3, #8
 8014f20:	6979      	ldr	r1, [r7, #20]
 8014f22:	4618      	mov	r0, r3
 8014f24:	f7fd fdf1 	bl	8012b0a <pifFixList_Remove>
 8014f28:	e000      	b.n	8014f2c <pifTimerManager_sigTick+0x13a>
    if (!p_manager) return;
 8014f2a:	bf00      	nop
}
 8014f2c:	3718      	adds	r7, #24
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	bd80      	pop	{r7, pc}

08014f32 <pifTimer_AttachEvtFinish>:

void pifTimer_AttachEvtFinish(PifTimer* p_owner, PifEvtTimerFinish evt_finish, PifIssuerP p_issuer)
{
 8014f32:	b480      	push	{r7}
 8014f34:	b085      	sub	sp, #20
 8014f36:	af00      	add	r7, sp, #0
 8014f38:	60f8      	str	r0, [r7, #12]
 8014f3a:	60b9      	str	r1, [r7, #8]
 8014f3c:	607a      	str	r2, [r7, #4]
	p_owner->__evt_finish = evt_finish;
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	68ba      	ldr	r2, [r7, #8]
 8014f42:	621a      	str	r2, [r3, #32]
	p_owner->__p_finish_issuer = p_issuer;
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	687a      	ldr	r2, [r7, #4]
 8014f48:	611a      	str	r2, [r3, #16]
}
 8014f4a:	bf00      	nop
 8014f4c:	3714      	adds	r7, #20
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f54:	4770      	bx	lr
	...

08014f58 <pifNoiseFilter_Init>:
#include "filter/pif_noise_filter.h"


BOOL pifNoiseFilter_Init(PifNoiseFilter* p_owner, PifNoiseFilterType type)
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b082      	sub	sp, #8
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
 8014f60:	460b      	mov	r3, r1
 8014f62:	70fb      	strb	r3, [r7, #3]
	if (!p_owner) {
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d104      	bne.n	8014f74 <pifNoiseFilter_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8014f6a:	4b09      	ldr	r3, [pc, #36]	; (8014f90 <pifNoiseFilter_Init+0x38>)
 8014f6c:	2201      	movs	r2, #1
 8014f6e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8014f70:	2300      	movs	r3, #0
 8014f72:	e008      	b.n	8014f86 <pifNoiseFilter_Init+0x2e>
	}

    memset(p_owner, 0, sizeof(PifNoiseFilter));
 8014f74:	2208      	movs	r2, #8
 8014f76:	2100      	movs	r1, #0
 8014f78:	6878      	ldr	r0, [r7, #4]
 8014f7a:	f00c ff33 	bl	8021de4 <memset>

    p_owner->_type = type;
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	78fa      	ldrb	r2, [r7, #3]
 8014f82:	701a      	strb	r2, [r3, #0]
    return TRUE;
 8014f84:	2301      	movs	r3, #1
}
 8014f86:	4618      	mov	r0, r3
 8014f88:	3708      	adds	r7, #8
 8014f8a:	46bd      	mov	sp, r7
 8014f8c:	bd80      	pop	{r7, pc}
 8014f8e:	bf00      	nop
 8014f90:	200020d1 	.word	0x200020d1

08014f94 <pifNoiseFilter_Process>:

#ifdef __PIF_NO_USE_INLINE__

PifNoiseFilterValueP pifNoiseFilter_Process(PifNoiseFilter* p_owner, PifNoiseFilterValueP p_value)
{
 8014f94:	b580      	push	{r7, lr}
 8014f96:	b082      	sub	sp, #8
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	6078      	str	r0, [r7, #4]
 8014f9c:	6039      	str	r1, [r7, #0]
	return (*p_owner->__fn_process)(p_owner, p_value);
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	685b      	ldr	r3, [r3, #4]
 8014fa2:	6839      	ldr	r1, [r7, #0]
 8014fa4:	6878      	ldr	r0, [r7, #4]
 8014fa6:	4798      	blx	r3
 8014fa8:	4603      	mov	r3, r0
}
 8014faa:	4618      	mov	r0, r3
 8014fac:	3708      	adds	r7, #8
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	bd80      	pop	{r7, pc}

08014fb2 <_clear>:
#include "filter/pif_noise_filter_int32.h"


static void _clear(PifNoiseFilterInt32* p_owner)
{
 8014fb2:	b580      	push	{r7, lr}
 8014fb4:	b082      	sub	sp, #8
 8014fb6:	af00      	add	r7, sp, #0
 8014fb8:	6078      	str	r0, [r7, #4]
	switch (p_owner->parent._type) {
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	781b      	ldrb	r3, [r3, #0]
 8014fbe:	2b01      	cmp	r3, #1
 8014fc0:	d002      	beq.n	8014fc8 <_clear+0x16>
 8014fc2:	2b02      	cmp	r3, #2
 8014fc4:	d00d      	beq.n	8014fe2 <_clear+0x30>
			p_owner->__nc.diff = NULL;
		}
		break;

	default:
		break;
 8014fc6:	e01c      	b.n	8015002 <_clear+0x50>
		if (p_owner->__wf.value) {
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	699b      	ldr	r3, [r3, #24]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d015      	beq.n	8014ffc <_clear+0x4a>
			free(p_owner->__wf.value);
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	699b      	ldr	r3, [r3, #24]
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	f00c feef 	bl	8021db8 <free>
			p_owner->__wf.value = NULL;
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	2200      	movs	r2, #0
 8014fde:	619a      	str	r2, [r3, #24]
		break;
 8014fe0:	e00c      	b.n	8014ffc <_clear+0x4a>
		if (p_owner->__nc.diff) {
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	69db      	ldr	r3, [r3, #28]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d00a      	beq.n	8015000 <_clear+0x4e>
			free(p_owner->__nc.diff);
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	69db      	ldr	r3, [r3, #28]
 8014fee:	4618      	mov	r0, r3
 8014ff0:	f00c fee2 	bl	8021db8 <free>
			p_owner->__nc.diff = NULL;
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	61da      	str	r2, [r3, #28]
		break;
 8014ffa:	e001      	b.n	8015000 <_clear+0x4e>
		break;
 8014ffc:	bf00      	nop
 8014ffe:	e000      	b.n	8015002 <_clear+0x50>
		break;
 8015000:	bf00      	nop
	}
}
 8015002:	bf00      	nop
 8015004:	3708      	adds	r7, #8
 8015006:	46bd      	mov	sp, r7
 8015008:	bd80      	pop	{r7, pc}

0801500a <_processAverage>:

static PifNoiseFilterValueP _processAverage(PifNoiseFilter* p_parent, PifNoiseFilterValueP p_value)
{
 801500a:	b480      	push	{r7}
 801500c:	b085      	sub	sp, #20
 801500e:	af00      	add	r7, sp, #0
 8015010:	6078      	str	r0, [r7, #4]
 8015012:	6039      	str	r1, [r7, #0]
	PifNoiseFilterInt32* p_owner = (PifNoiseFilterInt32*)p_parent;
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	60fb      	str	r3, [r7, #12]

	p_owner->__current = (p_owner->__current + 1) % p_owner->_size;
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801501e:	3301      	adds	r3, #1
 8015020:	68fa      	ldr	r2, [r7, #12]
 8015022:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8015026:	fb93 f1f2 	sdiv	r1, r3, r2
 801502a:	fb01 f202 	mul.w	r2, r1, r2
 801502e:	1a9b      	subs	r3, r3, r2
 8015030:	b25a      	sxtb	r2, r3
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	751a      	strb	r2, [r3, #20]
	p_owner->__avg.sum -= p_owner->__buffer[p_owner->__current];
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	699a      	ldr	r2, [r3, #24]
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	6919      	ldr	r1, [r3, #16]
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015044:	009b      	lsls	r3, r3, #2
 8015046:	440b      	add	r3, r1
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	1ad2      	subs	r2, r2, r3
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	619a      	str	r2, [r3, #24]
	p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	691a      	ldr	r2, [r3, #16]
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801505a:	009b      	lsls	r3, r3, #2
 801505c:	4413      	add	r3, r2
 801505e:	683a      	ldr	r2, [r7, #0]
 8015060:	6812      	ldr	r2, [r2, #0]
 8015062:	601a      	str	r2, [r3, #0]

	p_owner->__avg.sum += p_owner->__buffer[p_owner->__current];
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	699a      	ldr	r2, [r3, #24]
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	6919      	ldr	r1, [r3, #16]
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015072:	009b      	lsls	r3, r3, #2
 8015074:	440b      	add	r3, r1
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	441a      	add	r2, r3
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	619a      	str	r2, [r3, #24]
	p_owner->_result = p_owner->__avg.sum / p_owner->_size;
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	699b      	ldr	r3, [r3, #24]
 8015082:	68fa      	ldr	r2, [r7, #12]
 8015084:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8015088:	fb93 f2f2 	sdiv	r2, r3, r2
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	60da      	str	r2, [r3, #12]
	return &p_owner->_result;
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	330c      	adds	r3, #12
}
 8015094:	4618      	mov	r0, r3
 8015096:	3714      	adds	r7, #20
 8015098:	46bd      	mov	sp, r7
 801509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509e:	4770      	bx	lr

080150a0 <_processNoiseCancel>:
	p_owner->_result = sum / p_owner->__wf.total;
	return &p_owner->_result;
}

static PifNoiseFilterValueP _processNoiseCancel(PifNoiseFilter* p_parent, PifNoiseFilterValueP p_value)
{
 80150a0:	b480      	push	{r7}
 80150a2:	b08b      	sub	sp, #44	; 0x2c
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
 80150a8:	6039      	str	r1, [r7, #0]
	PifNoiseFilterInt32* p_owner = (PifNoiseFilterInt32*)p_parent;
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	61bb      	str	r3, [r7, #24]
	int32_t sum;
	int16_t* p_current;
	int16_t* p_before;
	int16_t current[3];

	p_before = p_owner->__nc.diff + p_owner->__current * 3;
 80150ae:	69bb      	ldr	r3, [r7, #24]
 80150b0:	69da      	ldr	r2, [r3, #28]
 80150b2:	69bb      	ldr	r3, [r7, #24]
 80150b4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80150b8:	4619      	mov	r1, r3
 80150ba:	460b      	mov	r3, r1
 80150bc:	005b      	lsls	r3, r3, #1
 80150be:	440b      	add	r3, r1
 80150c0:	005b      	lsls	r3, r3, #1
 80150c2:	4413      	add	r3, r2
 80150c4:	617b      	str	r3, [r7, #20]

	current[0] = *(int32_t*)p_value - p_owner->__buffer[p_owner->__current];
 80150c6:	683b      	ldr	r3, [r7, #0]
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	b29a      	uxth	r2, r3
 80150cc:	69bb      	ldr	r3, [r7, #24]
 80150ce:	6919      	ldr	r1, [r3, #16]
 80150d0:	69bb      	ldr	r3, [r7, #24]
 80150d2:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80150d6:	009b      	lsls	r3, r3, #2
 80150d8:	440b      	add	r3, r1
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	b29b      	uxth	r3, r3
 80150de:	1ad3      	subs	r3, r2, r3
 80150e0:	b29b      	uxth	r3, r3
 80150e2:	b21b      	sxth	r3, r3
 80150e4:	813b      	strh	r3, [r7, #8]

	current[1] = current[0] - p_before[0];
 80150e6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80150ea:	b29a      	uxth	r2, r3
 80150ec:	697b      	ldr	r3, [r7, #20]
 80150ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150f2:	b29b      	uxth	r3, r3
 80150f4:	1ad3      	subs	r3, r2, r3
 80150f6:	b29b      	uxth	r3, r3
 80150f8:	b21b      	sxth	r3, r3
 80150fa:	817b      	strh	r3, [r7, #10]
	if (current[1] < 0) current[1] = -current[1];
 80150fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015100:	2b00      	cmp	r3, #0
 8015102:	da06      	bge.n	8015112 <_processNoiseCancel+0x72>
 8015104:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015108:	b29b      	uxth	r3, r3
 801510a:	425b      	negs	r3, r3
 801510c:	b29b      	uxth	r3, r3
 801510e:	b21b      	sxth	r3, r3
 8015110:	817b      	strh	r3, [r7, #10]

	current[2] = current[0] + p_before[0];
 8015112:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015116:	b29a      	uxth	r2, r3
 8015118:	697b      	ldr	r3, [r7, #20]
 801511a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801511e:	b29b      	uxth	r3, r3
 8015120:	4413      	add	r3, r2
 8015122:	b29b      	uxth	r3, r3
 8015124:	b21b      	sxth	r3, r3
 8015126:	81bb      	strh	r3, [r7, #12]
	if (current[2] < 0) current[2] = -current[2];
 8015128:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801512c:	2b00      	cmp	r3, #0
 801512e:	da06      	bge.n	801513e <_processNoiseCancel+0x9e>
 8015130:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015134:	b29b      	uxth	r3, r3
 8015136:	425b      	negs	r3, r3
 8015138:	b29b      	uxth	r3, r3
 801513a:	b21b      	sxth	r3, r3
 801513c:	81bb      	strh	r3, [r7, #12]

	if (current[1] > current[2]) {
 801513e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8015142:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015146:	429a      	cmp	r2, r3
 8015148:	dd6d      	ble.n	8015226 <_processNoiseCancel+0x186>
		p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 801514a:	69bb      	ldr	r3, [r7, #24]
 801514c:	691a      	ldr	r2, [r3, #16]
 801514e:	69bb      	ldr	r3, [r7, #24]
 8015150:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015154:	009b      	lsls	r3, r3, #2
 8015156:	4413      	add	r3, r2
 8015158:	683a      	ldr	r2, [r7, #0]
 801515a:	6812      	ldr	r2, [r2, #0]
 801515c:	601a      	str	r2, [r3, #0]

		p_current = p_before;
 801515e:	697b      	ldr	r3, [r7, #20]
 8015160:	613b      	str	r3, [r7, #16]
		p_before = p_owner->__nc.diff + p_owner->__nc.before * 3;
 8015162:	69bb      	ldr	r3, [r7, #24]
 8015164:	69da      	ldr	r2, [r3, #28]
 8015166:	69bb      	ldr	r3, [r7, #24]
 8015168:	f993 3018 	ldrsb.w	r3, [r3, #24]
 801516c:	4619      	mov	r1, r3
 801516e:	460b      	mov	r3, r1
 8015170:	005b      	lsls	r3, r3, #1
 8015172:	440b      	add	r3, r1
 8015174:	005b      	lsls	r3, r3, #1
 8015176:	4413      	add	r3, r2
 8015178:	617b      	str	r3, [r7, #20]

		p_current[0] = p_owner->__buffer[p_owner->__current] - p_owner->__buffer[p_owner->__nc.before];
 801517a:	69bb      	ldr	r3, [r7, #24]
 801517c:	691a      	ldr	r2, [r3, #16]
 801517e:	69bb      	ldr	r3, [r7, #24]
 8015180:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015184:	009b      	lsls	r3, r3, #2
 8015186:	4413      	add	r3, r2
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	b29a      	uxth	r2, r3
 801518c:	69bb      	ldr	r3, [r7, #24]
 801518e:	6919      	ldr	r1, [r3, #16]
 8015190:	69bb      	ldr	r3, [r7, #24]
 8015192:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8015196:	009b      	lsls	r3, r3, #2
 8015198:	440b      	add	r3, r1
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	b29b      	uxth	r3, r3
 801519e:	1ad3      	subs	r3, r2, r3
 80151a0:	b29b      	uxth	r3, r3
 80151a2:	b21a      	sxth	r2, r3
 80151a4:	693b      	ldr	r3, [r7, #16]
 80151a6:	801a      	strh	r2, [r3, #0]

		p_current[1] = p_current[0] - p_before[0];
 80151a8:	693b      	ldr	r3, [r7, #16]
 80151aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151ae:	b29a      	uxth	r2, r3
 80151b0:	697b      	ldr	r3, [r7, #20]
 80151b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151b6:	b29b      	uxth	r3, r3
 80151b8:	1ad3      	subs	r3, r2, r3
 80151ba:	b29a      	uxth	r2, r3
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	3302      	adds	r3, #2
 80151c0:	b212      	sxth	r2, r2
 80151c2:	801a      	strh	r2, [r3, #0]
		if (p_current[1] < 0) p_current[1] = -p_current[1];
 80151c4:	693b      	ldr	r3, [r7, #16]
 80151c6:	3302      	adds	r3, #2
 80151c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	da0a      	bge.n	80151e6 <_processNoiseCancel+0x146>
 80151d0:	693b      	ldr	r3, [r7, #16]
 80151d2:	3302      	adds	r3, #2
 80151d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151d8:	b29b      	uxth	r3, r3
 80151da:	425b      	negs	r3, r3
 80151dc:	b29a      	uxth	r2, r3
 80151de:	693b      	ldr	r3, [r7, #16]
 80151e0:	3302      	adds	r3, #2
 80151e2:	b212      	sxth	r2, r2
 80151e4:	801a      	strh	r2, [r3, #0]

		p_current[2] = p_current[0] + p_before[0];
 80151e6:	693b      	ldr	r3, [r7, #16]
 80151e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151ec:	b29a      	uxth	r2, r3
 80151ee:	697b      	ldr	r3, [r7, #20]
 80151f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151f4:	b29b      	uxth	r3, r3
 80151f6:	4413      	add	r3, r2
 80151f8:	b29a      	uxth	r2, r3
 80151fa:	693b      	ldr	r3, [r7, #16]
 80151fc:	3304      	adds	r3, #4
 80151fe:	b212      	sxth	r2, r2
 8015200:	801a      	strh	r2, [r3, #0]
		if (p_current[2] < 0) p_current[2] = -p_current[2];
 8015202:	693b      	ldr	r3, [r7, #16]
 8015204:	3304      	adds	r3, #4
 8015206:	f9b3 3000 	ldrsh.w	r3, [r3]
 801520a:	2b00      	cmp	r3, #0
 801520c:	da43      	bge.n	8015296 <_processNoiseCancel+0x1f6>
 801520e:	693b      	ldr	r3, [r7, #16]
 8015210:	3304      	adds	r3, #4
 8015212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015216:	b29b      	uxth	r3, r3
 8015218:	425b      	negs	r3, r3
 801521a:	b29a      	uxth	r2, r3
 801521c:	693b      	ldr	r3, [r7, #16]
 801521e:	3304      	adds	r3, #4
 8015220:	b212      	sxth	r2, r2
 8015222:	801a      	strh	r2, [r3, #0]
 8015224:	e037      	b.n	8015296 <_processNoiseCancel+0x1f6>
	}
	else {
		p_owner->__nc.before = p_owner->__current;
 8015226:	69bb      	ldr	r3, [r7, #24]
 8015228:	f993 2014 	ldrsb.w	r2, [r3, #20]
 801522c:	69bb      	ldr	r3, [r7, #24]
 801522e:	761a      	strb	r2, [r3, #24]
		p_owner->__current = (p_owner->__current + 1) % p_owner->_size;
 8015230:	69bb      	ldr	r3, [r7, #24]
 8015232:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015236:	3301      	adds	r3, #1
 8015238:	69ba      	ldr	r2, [r7, #24]
 801523a:	f992 2008 	ldrsb.w	r2, [r2, #8]
 801523e:	fb93 f1f2 	sdiv	r1, r3, r2
 8015242:	fb01 f202 	mul.w	r2, r1, r2
 8015246:	1a9b      	subs	r3, r3, r2
 8015248:	b25a      	sxtb	r2, r3
 801524a:	69bb      	ldr	r3, [r7, #24]
 801524c:	751a      	strb	r2, [r3, #20]
		p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 801524e:	69bb      	ldr	r3, [r7, #24]
 8015250:	691a      	ldr	r2, [r3, #16]
 8015252:	69bb      	ldr	r3, [r7, #24]
 8015254:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015258:	009b      	lsls	r3, r3, #2
 801525a:	4413      	add	r3, r2
 801525c:	683a      	ldr	r2, [r7, #0]
 801525e:	6812      	ldr	r2, [r2, #0]
 8015260:	601a      	str	r2, [r3, #0]

		p_current = p_owner->__nc.diff + p_owner->__current * 3;
 8015262:	69bb      	ldr	r3, [r7, #24]
 8015264:	69da      	ldr	r2, [r3, #28]
 8015266:	69bb      	ldr	r3, [r7, #24]
 8015268:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801526c:	4619      	mov	r1, r3
 801526e:	460b      	mov	r3, r1
 8015270:	005b      	lsls	r3, r3, #1
 8015272:	440b      	add	r3, r1
 8015274:	005b      	lsls	r3, r3, #1
 8015276:	4413      	add	r3, r2
 8015278:	613b      	str	r3, [r7, #16]

		p_current[0] = current[0];
 801527a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801527e:	693b      	ldr	r3, [r7, #16]
 8015280:	801a      	strh	r2, [r3, #0]
		p_current[1] = current[1];
 8015282:	693b      	ldr	r3, [r7, #16]
 8015284:	3302      	adds	r3, #2
 8015286:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801528a:	801a      	strh	r2, [r3, #0]
		p_current[2] = current[2];
 801528c:	693b      	ldr	r3, [r7, #16]
 801528e:	3304      	adds	r3, #4
 8015290:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8015294:	801a      	strh	r2, [r3, #0]
	}

	sum = 0;
 8015296:	2300      	movs	r3, #0
 8015298:	61fb      	str	r3, [r7, #28]
	count = 0;
 801529a:	2300      	movs	r3, #0
 801529c:	623b      	str	r3, [r7, #32]
	for (i = 0; i < p_owner->_size; i++) {
 801529e:	2300      	movs	r3, #0
 80152a0:	627b      	str	r3, [r7, #36]	; 0x24
 80152a2:	e00e      	b.n	80152c2 <_processNoiseCancel+0x222>
		sum += p_owner->__buffer[i];
 80152a4:	69bb      	ldr	r3, [r7, #24]
 80152a6:	691a      	ldr	r2, [r3, #16]
 80152a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152aa:	009b      	lsls	r3, r3, #2
 80152ac:	4413      	add	r3, r2
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	69fa      	ldr	r2, [r7, #28]
 80152b2:	4413      	add	r3, r2
 80152b4:	61fb      	str	r3, [r7, #28]
		count++;
 80152b6:	6a3b      	ldr	r3, [r7, #32]
 80152b8:	3301      	adds	r3, #1
 80152ba:	623b      	str	r3, [r7, #32]
	for (i = 0; i < p_owner->_size; i++) {
 80152bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152be:	3301      	adds	r3, #1
 80152c0:	627b      	str	r3, [r7, #36]	; 0x24
 80152c2:	69bb      	ldr	r3, [r7, #24]
 80152c4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80152c8:	461a      	mov	r2, r3
 80152ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152cc:	4293      	cmp	r3, r2
 80152ce:	dbe9      	blt.n	80152a4 <_processNoiseCancel+0x204>
	}
	if (count > 0) {
 80152d0:	6a3b      	ldr	r3, [r7, #32]
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	dd05      	ble.n	80152e2 <_processNoiseCancel+0x242>
		p_owner->_result = sum / count;
 80152d6:	69fa      	ldr	r2, [r7, #28]
 80152d8:	6a3b      	ldr	r3, [r7, #32]
 80152da:	fb92 f2f3 	sdiv	r2, r2, r3
 80152de:	69bb      	ldr	r3, [r7, #24]
 80152e0:	60da      	str	r2, [r3, #12]
	}
	return &p_owner->_result;
 80152e2:	69bb      	ldr	r3, [r7, #24]
 80152e4:	330c      	adds	r3, #12
}
 80152e6:	4618      	mov	r0, r3
 80152e8:	372c      	adds	r7, #44	; 0x2c
 80152ea:	46bd      	mov	sp, r7
 80152ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f0:	4770      	bx	lr
	...

080152f4 <pifNoiseFilterInt32_Init>:

BOOL pifNoiseFilterInt32_Init(PifNoiseFilterInt32* p_owner, uint8_t size)
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b082      	sub	sp, #8
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
 80152fc:	460b      	mov	r3, r1
 80152fe:	70fb      	strb	r3, [r7, #3]
	if (!p_owner || !size) {
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d002      	beq.n	801530c <pifNoiseFilterInt32_Init+0x18>
 8015306:	78fb      	ldrb	r3, [r7, #3]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d104      	bne.n	8015316 <pifNoiseFilterInt32_Init+0x22>
		pif_error = E_INVALID_PARAM;
 801530c:	4b17      	ldr	r3, [pc, #92]	; (801536c <pifNoiseFilterInt32_Init+0x78>)
 801530e:	2201      	movs	r2, #1
 8015310:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8015312:	2300      	movs	r3, #0
 8015314:	e026      	b.n	8015364 <pifNoiseFilterInt32_Init+0x70>
	}

    memset(p_owner, 0, sizeof(PifNoiseFilterInt32));
 8015316:	2220      	movs	r2, #32
 8015318:	2100      	movs	r1, #0
 801531a:	6878      	ldr	r0, [r7, #4]
 801531c:	f00c fd62 	bl	8021de4 <memset>

	p_owner->__buffer = calloc(size, sizeof(int32_t));
 8015320:	78fb      	ldrb	r3, [r7, #3]
 8015322:	2104      	movs	r1, #4
 8015324:	4618      	mov	r0, r3
 8015326:	f00c fd0d 	bl	8021d44 <calloc>
 801532a:	4603      	mov	r3, r0
 801532c:	461a      	mov	r2, r3
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	611a      	str	r2, [r3, #16]
	if (!p_owner->__buffer) {
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	691b      	ldr	r3, [r3, #16]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d104      	bne.n	8015344 <pifNoiseFilterInt32_Init+0x50>
		pif_error = E_OUT_OF_HEAP;
 801533a:	4b0c      	ldr	r3, [pc, #48]	; (801536c <pifNoiseFilterInt32_Init+0x78>)
 801533c:	2203      	movs	r2, #3
 801533e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8015340:	2300      	movs	r3, #0
 8015342:	e00f      	b.n	8015364 <pifNoiseFilterInt32_Init+0x70>
	}

	pifNoiseFilter_Init(&p_owner->parent, NFT_AVERAGE);
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	2100      	movs	r1, #0
 8015348:	4618      	mov	r0, r3
 801534a:	f7ff fe05 	bl	8014f58 <pifNoiseFilter_Init>
    p_owner->_size = size;
 801534e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	721a      	strb	r2, [r3, #8]
	p_owner->__current = 0;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	2200      	movs	r2, #0
 801535a:	751a      	strb	r2, [r3, #20]

	p_owner->parent.__fn_process = _processAverage;
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	4a04      	ldr	r2, [pc, #16]	; (8015370 <pifNoiseFilterInt32_Init+0x7c>)
 8015360:	605a      	str	r2, [r3, #4]
    return TRUE;
 8015362:	2301      	movs	r3, #1
}
 8015364:	4618      	mov	r0, r3
 8015366:	3708      	adds	r7, #8
 8015368:	46bd      	mov	sp, r7
 801536a:	bd80      	pop	{r7, pc}
 801536c:	200020d1 	.word	0x200020d1
 8015370:	0801500b 	.word	0x0801500b

08015374 <pifNoiseFilterInt32_SetNoiseCancel>:
	p_owner->parent.__fn_process = _processWeightFactor;
	return TRUE;
}

BOOL pifNoiseFilterInt32_SetNoiseCancel(PifNoiseFilterInt32* p_owner)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b082      	sub	sp, #8
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]
	_clear(p_owner);
 801537c:	6878      	ldr	r0, [r7, #4]
 801537e:	f7ff fe18 	bl	8014fb2 <_clear>

	if (p_owner->_size < 3 || p_owner->_size > 32) {
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015388:	2b02      	cmp	r3, #2
 801538a:	dd04      	ble.n	8015396 <pifNoiseFilterInt32_SetNoiseCancel+0x22>
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015392:	2b20      	cmp	r3, #32
 8015394:	dd04      	ble.n	80153a0 <pifNoiseFilterInt32_SetNoiseCancel+0x2c>
		pif_error = E_INVALID_PARAM;
 8015396:	4b15      	ldr	r3, [pc, #84]	; (80153ec <pifNoiseFilterInt32_SetNoiseCancel+0x78>)
 8015398:	2201      	movs	r2, #1
 801539a:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801539c:	2300      	movs	r3, #0
 801539e:	e021      	b.n	80153e4 <pifNoiseFilterInt32_SetNoiseCancel+0x70>
	}

	p_owner->__nc.diff = calloc(p_owner->_size * 3, sizeof(int16_t));
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80153a6:	461a      	mov	r2, r3
 80153a8:	4613      	mov	r3, r2
 80153aa:	005b      	lsls	r3, r3, #1
 80153ac:	4413      	add	r3, r2
 80153ae:	2102      	movs	r1, #2
 80153b0:	4618      	mov	r0, r3
 80153b2:	f00c fcc7 	bl	8021d44 <calloc>
 80153b6:	4603      	mov	r3, r0
 80153b8:	461a      	mov	r2, r3
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	61da      	str	r2, [r3, #28]
	if (!p_owner->__nc.diff) {
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	69db      	ldr	r3, [r3, #28]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d104      	bne.n	80153d0 <pifNoiseFilterInt32_SetNoiseCancel+0x5c>
		pif_error = E_OUT_OF_HEAP;
 80153c6:	4b09      	ldr	r3, [pc, #36]	; (80153ec <pifNoiseFilterInt32_SetNoiseCancel+0x78>)
 80153c8:	2203      	movs	r2, #3
 80153ca:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80153cc:	2300      	movs	r3, #0
 80153ce:	e009      	b.n	80153e4 <pifNoiseFilterInt32_SetNoiseCancel+0x70>
	}

	p_owner->__nc.before = 0;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	2200      	movs	r2, #0
 80153d4:	761a      	strb	r2, [r3, #24]

	p_owner->parent._type = NFT_NOISE_CANCEL;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	2202      	movs	r2, #2
 80153da:	701a      	strb	r2, [r3, #0]
	p_owner->parent.__fn_process = _processNoiseCancel;
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	4a04      	ldr	r2, [pc, #16]	; (80153f0 <pifNoiseFilterInt32_SetNoiseCancel+0x7c>)
 80153e0:	605a      	str	r2, [r3, #4]
	return TRUE;
 80153e2:	2301      	movs	r3, #1
}
 80153e4:	4618      	mov	r0, r3
 80153e6:	3708      	adds	r7, #8
 80153e8:	46bd      	mov	sp, r7
 80153ea:	bd80      	pop	{r7, pc}
 80153ec:	200020d1 	.word	0x200020d1
 80153f0:	080150a1 	.word	0x080150a1

080153f4 <_convertString2Date>:

#define DIGIT_TO_VAL(_x)        (_x - '0')


static void _convertString2Date(char* str, PifDateTime* p_date_time)
{
 80153f4:	b480      	push	{r7}
 80153f6:	b083      	sub	sp, #12
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	6078      	str	r0, [r7, #4]
 80153fc:	6039      	str	r1, [r7, #0]
	p_date_time->day = DIGIT_TO_VAL(str[0]) * 10 + DIGIT_TO_VAL(str[1]);
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	781b      	ldrb	r3, [r3, #0]
 8015402:	3b30      	subs	r3, #48	; 0x30
 8015404:	b2db      	uxtb	r3, r3
 8015406:	461a      	mov	r2, r3
 8015408:	0092      	lsls	r2, r2, #2
 801540a:	4413      	add	r3, r2
 801540c:	005b      	lsls	r3, r3, #1
 801540e:	b2da      	uxtb	r2, r3
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	3301      	adds	r3, #1
 8015414:	781b      	ldrb	r3, [r3, #0]
 8015416:	4413      	add	r3, r2
 8015418:	b2db      	uxtb	r3, r3
 801541a:	3b30      	subs	r3, #48	; 0x30
 801541c:	b2da      	uxtb	r2, r3
 801541e:	683b      	ldr	r3, [r7, #0]
 8015420:	709a      	strb	r2, [r3, #2]
	p_date_time->month = DIGIT_TO_VAL(str[2]) * 10 + DIGIT_TO_VAL(str[3]);
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	3302      	adds	r3, #2
 8015426:	781b      	ldrb	r3, [r3, #0]
 8015428:	3b30      	subs	r3, #48	; 0x30
 801542a:	b2db      	uxtb	r3, r3
 801542c:	461a      	mov	r2, r3
 801542e:	0092      	lsls	r2, r2, #2
 8015430:	4413      	add	r3, r2
 8015432:	005b      	lsls	r3, r3, #1
 8015434:	b2da      	uxtb	r2, r3
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	3303      	adds	r3, #3
 801543a:	781b      	ldrb	r3, [r3, #0]
 801543c:	4413      	add	r3, r2
 801543e:	b2db      	uxtb	r3, r3
 8015440:	3b30      	subs	r3, #48	; 0x30
 8015442:	b2da      	uxtb	r2, r3
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	705a      	strb	r2, [r3, #1]
	p_date_time->year = DIGIT_TO_VAL(str[4]) * 10 + DIGIT_TO_VAL(str[5]);
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	3304      	adds	r3, #4
 801544c:	781b      	ldrb	r3, [r3, #0]
 801544e:	3b30      	subs	r3, #48	; 0x30
 8015450:	b2db      	uxtb	r3, r3
 8015452:	461a      	mov	r2, r3
 8015454:	0092      	lsls	r2, r2, #2
 8015456:	4413      	add	r3, r2
 8015458:	005b      	lsls	r3, r3, #1
 801545a:	b2da      	uxtb	r2, r3
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	3305      	adds	r3, #5
 8015460:	781b      	ldrb	r3, [r3, #0]
 8015462:	4413      	add	r3, r2
 8015464:	b2db      	uxtb	r3, r3
 8015466:	3b30      	subs	r3, #48	; 0x30
 8015468:	b2da      	uxtb	r2, r3
 801546a:	683b      	ldr	r3, [r7, #0]
 801546c:	701a      	strb	r2, [r3, #0]
}
 801546e:	bf00      	nop
 8015470:	370c      	adds	r7, #12
 8015472:	46bd      	mov	sp, r7
 8015474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015478:	4770      	bx	lr
	...

0801547c <_convertString2Time>:

static void _convertString2Time(char* str, PifDateTime* p_date_time)
{
 801547c:	b480      	push	{r7}
 801547e:	b085      	sub	sp, #20
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]
 8015484:	6039      	str	r1, [r7, #0]
	int i, digit;

	p_date_time->hour = DIGIT_TO_VAL(str[0]) * 10 + DIGIT_TO_VAL(str[1]);
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	781b      	ldrb	r3, [r3, #0]
 801548a:	3b30      	subs	r3, #48	; 0x30
 801548c:	b2db      	uxtb	r3, r3
 801548e:	461a      	mov	r2, r3
 8015490:	0092      	lsls	r2, r2, #2
 8015492:	4413      	add	r3, r2
 8015494:	005b      	lsls	r3, r3, #1
 8015496:	b2da      	uxtb	r2, r3
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	3301      	adds	r3, #1
 801549c:	781b      	ldrb	r3, [r3, #0]
 801549e:	4413      	add	r3, r2
 80154a0:	b2db      	uxtb	r3, r3
 80154a2:	3b30      	subs	r3, #48	; 0x30
 80154a4:	b2da      	uxtb	r2, r3
 80154a6:	683b      	ldr	r3, [r7, #0]
 80154a8:	70da      	strb	r2, [r3, #3]
	p_date_time->minute = DIGIT_TO_VAL(str[2]) * 10 + DIGIT_TO_VAL(str[3]);
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	3302      	adds	r3, #2
 80154ae:	781b      	ldrb	r3, [r3, #0]
 80154b0:	3b30      	subs	r3, #48	; 0x30
 80154b2:	b2db      	uxtb	r3, r3
 80154b4:	461a      	mov	r2, r3
 80154b6:	0092      	lsls	r2, r2, #2
 80154b8:	4413      	add	r3, r2
 80154ba:	005b      	lsls	r3, r3, #1
 80154bc:	b2da      	uxtb	r2, r3
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	3303      	adds	r3, #3
 80154c2:	781b      	ldrb	r3, [r3, #0]
 80154c4:	4413      	add	r3, r2
 80154c6:	b2db      	uxtb	r3, r3
 80154c8:	3b30      	subs	r3, #48	; 0x30
 80154ca:	b2da      	uxtb	r2, r3
 80154cc:	683b      	ldr	r3, [r7, #0]
 80154ce:	711a      	strb	r2, [r3, #4]
	p_date_time->second = DIGIT_TO_VAL(str[4]) * 10 + DIGIT_TO_VAL(str[5]);
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	3304      	adds	r3, #4
 80154d4:	781b      	ldrb	r3, [r3, #0]
 80154d6:	3b30      	subs	r3, #48	; 0x30
 80154d8:	b2db      	uxtb	r3, r3
 80154da:	461a      	mov	r2, r3
 80154dc:	0092      	lsls	r2, r2, #2
 80154de:	4413      	add	r3, r2
 80154e0:	005b      	lsls	r3, r3, #1
 80154e2:	b2da      	uxtb	r2, r3
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	3305      	adds	r3, #5
 80154e8:	781b      	ldrb	r3, [r3, #0]
 80154ea:	4413      	add	r3, r2
 80154ec:	b2db      	uxtb	r3, r3
 80154ee:	3b30      	subs	r3, #48	; 0x30
 80154f0:	b2da      	uxtb	r2, r3
 80154f2:	683b      	ldr	r3, [r7, #0]
 80154f4:	715a      	strb	r2, [r3, #5]
	if (str[6] == '.') {
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	3306      	adds	r3, #6
 80154fa:	781b      	ldrb	r3, [r3, #0]
 80154fc:	2b2e      	cmp	r3, #46	; 0x2e
 80154fe:	d134      	bne.n	801556a <_convertString2Time+0xee>
		p_date_time->millisecond = 0;
 8015500:	683b      	ldr	r3, [r7, #0]
 8015502:	2200      	movs	r2, #0
 8015504:	80da      	strh	r2, [r3, #6]
		digit = 100;
 8015506:	2364      	movs	r3, #100	; 0x64
 8015508:	60bb      	str	r3, [r7, #8]
		for (i = 7; i < 10; i++) {
 801550a:	2307      	movs	r3, #7
 801550c:	60fb      	str	r3, [r7, #12]
 801550e:	e027      	b.n	8015560 <_convertString2Time+0xe4>
			if (!isdigit((int)str[i])) break;
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	687a      	ldr	r2, [r7, #4]
 8015514:	4413      	add	r3, r2
 8015516:	781b      	ldrb	r3, [r3, #0]
 8015518:	3301      	adds	r3, #1
 801551a:	4a17      	ldr	r2, [pc, #92]	; (8015578 <_convertString2Time+0xfc>)
 801551c:	4413      	add	r3, r2
 801551e:	781b      	ldrb	r3, [r3, #0]
 8015520:	f003 0304 	and.w	r3, r3, #4
 8015524:	2b00      	cmp	r3, #0
 8015526:	d01f      	beq.n	8015568 <_convertString2Time+0xec>
			p_date_time->millisecond += DIGIT_TO_VAL(str[i]) * digit;
 8015528:	683b      	ldr	r3, [r7, #0]
 801552a:	88da      	ldrh	r2, [r3, #6]
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	6879      	ldr	r1, [r7, #4]
 8015530:	440b      	add	r3, r1
 8015532:	781b      	ldrb	r3, [r3, #0]
 8015534:	3b30      	subs	r3, #48	; 0x30
 8015536:	b299      	uxth	r1, r3
 8015538:	68bb      	ldr	r3, [r7, #8]
 801553a:	b29b      	uxth	r3, r3
 801553c:	fb11 f303 	smulbb	r3, r1, r3
 8015540:	b29b      	uxth	r3, r3
 8015542:	4413      	add	r3, r2
 8015544:	b29a      	uxth	r2, r3
 8015546:	683b      	ldr	r3, [r7, #0]
 8015548:	80da      	strh	r2, [r3, #6]
			digit /= 10;
 801554a:	68bb      	ldr	r3, [r7, #8]
 801554c:	4a0b      	ldr	r2, [pc, #44]	; (801557c <_convertString2Time+0x100>)
 801554e:	fb82 1203 	smull	r1, r2, r2, r3
 8015552:	1092      	asrs	r2, r2, #2
 8015554:	17db      	asrs	r3, r3, #31
 8015556:	1ad3      	subs	r3, r2, r3
 8015558:	60bb      	str	r3, [r7, #8]
		for (i = 7; i < 10; i++) {
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	3301      	adds	r3, #1
 801555e:	60fb      	str	r3, [r7, #12]
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	2b09      	cmp	r3, #9
 8015564:	ddd4      	ble.n	8015510 <_convertString2Time+0x94>
		}
	}
}
 8015566:	e000      	b.n	801556a <_convertString2Time+0xee>
			if (!isdigit((int)str[i])) break;
 8015568:	bf00      	nop
}
 801556a:	bf00      	nop
 801556c:	3714      	adds	r7, #20
 801556e:	46bd      	mov	sp, r7
 8015570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015574:	4770      	bx	lr
 8015576:	bf00      	nop
 8015578:	08028224 	.word	0x08028224
 801557c:	66666667 	.word	0x66666667

08015580 <_convertString2Float>:

static double _convertString2Float(char* str)
{
 8015580:	b5b0      	push	{r4, r5, r7, lr}
 8015582:	b088      	sub	sp, #32
 8015584:	af00      	add	r7, sp, #0
 8015586:	6078      	str	r0, [r7, #4]
	char* p;
	double value = 0.0, unit;
 8015588:	f04f 0200 	mov.w	r2, #0
 801558c:	f04f 0300 	mov.w	r3, #0
 8015590:	e9c7 2304 	strd	r2, r3, [r7, #16]

	p = str;
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	61fb      	str	r3, [r7, #28]
	if (*p == '-') p++;
 8015598:	69fb      	ldr	r3, [r7, #28]
 801559a:	781b      	ldrb	r3, [r3, #0]
 801559c:	2b2d      	cmp	r3, #45	; 0x2d
 801559e:	d120      	bne.n	80155e2 <_convertString2Float+0x62>
 80155a0:	69fb      	ldr	r3, [r7, #28]
 80155a2:	3301      	adds	r3, #1
 80155a4:	61fb      	str	r3, [r7, #28]
	while (isdigit((int)*p)) {
 80155a6:	e01c      	b.n	80155e2 <_convertString2Float+0x62>
		value *= 10;
 80155a8:	f04f 0200 	mov.w	r2, #0
 80155ac:	4b38      	ldr	r3, [pc, #224]	; (8015690 <_convertString2Float+0x110>)
 80155ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80155b2:	f7ea ffdf 	bl	8000574 <__aeabi_dmul>
 80155b6:	4602      	mov	r2, r0
 80155b8:	460b      	mov	r3, r1
 80155ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
		value += DIGIT_TO_VAL(*p++);
 80155be:	69fb      	ldr	r3, [r7, #28]
 80155c0:	1c5a      	adds	r2, r3, #1
 80155c2:	61fa      	str	r2, [r7, #28]
 80155c4:	781b      	ldrb	r3, [r3, #0]
 80155c6:	3b30      	subs	r3, #48	; 0x30
 80155c8:	4618      	mov	r0, r3
 80155ca:	f7ea ff69 	bl	80004a0 <__aeabi_i2d>
 80155ce:	4602      	mov	r2, r0
 80155d0:	460b      	mov	r3, r1
 80155d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80155d6:	f7ea fe17 	bl	8000208 <__adddf3>
 80155da:	4602      	mov	r2, r0
 80155dc:	460b      	mov	r3, r1
 80155de:	e9c7 2304 	strd	r2, r3, [r7, #16]
	while (isdigit((int)*p)) {
 80155e2:	69fb      	ldr	r3, [r7, #28]
 80155e4:	781b      	ldrb	r3, [r3, #0]
 80155e6:	3301      	adds	r3, #1
 80155e8:	4a2a      	ldr	r2, [pc, #168]	; (8015694 <_convertString2Float+0x114>)
 80155ea:	4413      	add	r3, r2
 80155ec:	781b      	ldrb	r3, [r3, #0]
 80155ee:	f003 0304 	and.w	r3, r3, #4
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d1d8      	bne.n	80155a8 <_convertString2Float+0x28>
	}
	if (*str == '-') value = -value;
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	781b      	ldrb	r3, [r3, #0]
 80155fa:	2b2d      	cmp	r3, #45	; 0x2d
 80155fc:	d105      	bne.n	801560a <_convertString2Float+0x8a>
 80155fe:	693c      	ldr	r4, [r7, #16]
 8015600:	697b      	ldr	r3, [r7, #20]
 8015602:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8015606:	e9c7 4504 	strd	r4, r5, [r7, #16]

	if (*p == '.') {
 801560a:	69fb      	ldr	r3, [r7, #28]
 801560c:	781b      	ldrb	r3, [r3, #0]
 801560e:	2b2e      	cmp	r3, #46	; 0x2e
 8015610:	d133      	bne.n	801567a <_convertString2Float+0xfa>
		p++;
 8015612:	69fb      	ldr	r3, [r7, #28]
 8015614:	3301      	adds	r3, #1
 8015616:	61fb      	str	r3, [r7, #28]
		unit = 10;
 8015618:	f04f 0200 	mov.w	r2, #0
 801561c:	4b1c      	ldr	r3, [pc, #112]	; (8015690 <_convertString2Float+0x110>)
 801561e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (isdigit((int)*p)) {
 8015622:	e020      	b.n	8015666 <_convertString2Float+0xe6>
			value += DIGIT_TO_VAL(*p++) / unit;
 8015624:	69fb      	ldr	r3, [r7, #28]
 8015626:	1c5a      	adds	r2, r3, #1
 8015628:	61fa      	str	r2, [r7, #28]
 801562a:	781b      	ldrb	r3, [r3, #0]
 801562c:	3b30      	subs	r3, #48	; 0x30
 801562e:	4618      	mov	r0, r3
 8015630:	f7ea ff36 	bl	80004a0 <__aeabi_i2d>
 8015634:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015638:	f7eb f8c6 	bl	80007c8 <__aeabi_ddiv>
 801563c:	4602      	mov	r2, r0
 801563e:	460b      	mov	r3, r1
 8015640:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015644:	f7ea fde0 	bl	8000208 <__adddf3>
 8015648:	4602      	mov	r2, r0
 801564a:	460b      	mov	r3, r1
 801564c:	e9c7 2304 	strd	r2, r3, [r7, #16]
			unit *= 10;
 8015650:	f04f 0200 	mov.w	r2, #0
 8015654:	4b0e      	ldr	r3, [pc, #56]	; (8015690 <_convertString2Float+0x110>)
 8015656:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801565a:	f7ea ff8b 	bl	8000574 <__aeabi_dmul>
 801565e:	4602      	mov	r2, r0
 8015660:	460b      	mov	r3, r1
 8015662:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (isdigit((int)*p)) {
 8015666:	69fb      	ldr	r3, [r7, #28]
 8015668:	781b      	ldrb	r3, [r3, #0]
 801566a:	3301      	adds	r3, #1
 801566c:	4a09      	ldr	r2, [pc, #36]	; (8015694 <_convertString2Float+0x114>)
 801566e:	4413      	add	r3, r2
 8015670:	781b      	ldrb	r3, [r3, #0]
 8015672:	f003 0304 	and.w	r3, r3, #4
 8015676:	2b00      	cmp	r3, #0
 8015678:	d1d4      	bne.n	8015624 <_convertString2Float+0xa4>
		}
	}
	return value;
 801567a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801567e:	ec43 2b17 	vmov	d7, r2, r3
}
 8015682:	eeb0 0a47 	vmov.f32	s0, s14
 8015686:	eef0 0a67 	vmov.f32	s1, s15
 801568a:	3720      	adds	r7, #32
 801568c:	46bd      	mov	sp, r7
 801568e:	bdb0      	pop	{r4, r5, r7, pc}
 8015690:	40240000 	.word	0x40240000
 8015694:	08028224 	.word	0x08028224

08015698 <_convertString2Interger>:

static int _convertString2Interger(char* str)
{
 8015698:	b480      	push	{r7}
 801569a:	b085      	sub	sp, #20
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
	char* p;
	int value = 0.0;
 80156a0:	2300      	movs	r3, #0
 80156a2:	60bb      	str	r3, [r7, #8]

	p = str;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	60fb      	str	r3, [r7, #12]
	if (*p == '-') p++;
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	781b      	ldrb	r3, [r3, #0]
 80156ac:	2b2d      	cmp	r3, #45	; 0x2d
 80156ae:	d111      	bne.n	80156d4 <_convertString2Interger+0x3c>
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	3301      	adds	r3, #1
 80156b4:	60fb      	str	r3, [r7, #12]
	while (isdigit((int)*p)) {
 80156b6:	e00d      	b.n	80156d4 <_convertString2Interger+0x3c>
		value *= 10;
 80156b8:	68ba      	ldr	r2, [r7, #8]
 80156ba:	4613      	mov	r3, r2
 80156bc:	009b      	lsls	r3, r3, #2
 80156be:	4413      	add	r3, r2
 80156c0:	005b      	lsls	r3, r3, #1
 80156c2:	60bb      	str	r3, [r7, #8]
		value += DIGIT_TO_VAL(*p++);
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	1c5a      	adds	r2, r3, #1
 80156c8:	60fa      	str	r2, [r7, #12]
 80156ca:	781b      	ldrb	r3, [r3, #0]
 80156cc:	3b30      	subs	r3, #48	; 0x30
 80156ce:	68ba      	ldr	r2, [r7, #8]
 80156d0:	4413      	add	r3, r2
 80156d2:	60bb      	str	r3, [r7, #8]
	while (isdigit((int)*p)) {
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	781b      	ldrb	r3, [r3, #0]
 80156d8:	3301      	adds	r3, #1
 80156da:	4a0a      	ldr	r2, [pc, #40]	; (8015704 <_convertString2Interger+0x6c>)
 80156dc:	4413      	add	r3, r2
 80156de:	781b      	ldrb	r3, [r3, #0]
 80156e0:	f003 0304 	and.w	r3, r3, #4
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d1e7      	bne.n	80156b8 <_convertString2Interger+0x20>
	}
	if (*str == '-') value = -value;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	781b      	ldrb	r3, [r3, #0]
 80156ec:	2b2d      	cmp	r3, #45	; 0x2d
 80156ee:	d102      	bne.n	80156f6 <_convertString2Interger+0x5e>
 80156f0:	68bb      	ldr	r3, [r7, #8]
 80156f2:	425b      	negs	r3, r3
 80156f4:	60bb      	str	r3, [r7, #8]
	return value;
 80156f6:	68bb      	ldr	r3, [r7, #8]
}
 80156f8:	4618      	mov	r0, r3
 80156fa:	3714      	adds	r7, #20
 80156fc:	46bd      	mov	sp, r7
 80156fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015702:	4770      	bx	lr
 8015704:	08028224 	.word	0x08028224

08015708 <_convertString2Degrees>:
 * with 10e7 it's around 1 cm now. Increasing it further is irrelevant, since even 1cm resolution is unrealistic, however increased
 * resolution also increased precision of nav calculations
*/

static double _convertString2Degrees(char* s)
{
 8015708:	b5b0      	push	{r4, r5, r7, lr}
 801570a:	b088      	sub	sp, #32
 801570c:	af00      	add	r7, sp, #0
 801570e:	6078      	str	r0, [r7, #4]
	char* p;
	char* q;
	uint8_t deg = 0, min = 0;
 8015710:	2300      	movs	r3, #0
 8015712:	75fb      	strb	r3, [r7, #23]
 8015714:	2300      	movs	r3, #0
 8015716:	75bb      	strb	r3, [r7, #22]
	unsigned int frac_min = 0;
 8015718:	2300      	movs	r3, #0
 801571a:	613b      	str	r3, [r7, #16]
	uint8_t i;

	// scan for decimal point or end of field
	for (p = s; isdigit((int)*p); p++);
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	61fb      	str	r3, [r7, #28]
 8015720:	e002      	b.n	8015728 <_convertString2Degrees+0x20>
 8015722:	69fb      	ldr	r3, [r7, #28]
 8015724:	3301      	adds	r3, #1
 8015726:	61fb      	str	r3, [r7, #28]
 8015728:	69fb      	ldr	r3, [r7, #28]
 801572a:	781b      	ldrb	r3, [r3, #0]
 801572c:	3301      	adds	r3, #1
 801572e:	4a46      	ldr	r2, [pc, #280]	; (8015848 <_convertString2Degrees+0x140>)
 8015730:	4413      	add	r3, r2
 8015732:	781b      	ldrb	r3, [r3, #0]
 8015734:	f003 0304 	and.w	r3, r3, #4
 8015738:	2b00      	cmp	r3, #0
 801573a:	d1f2      	bne.n	8015722 <_convertString2Degrees+0x1a>
	q = s;
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	61bb      	str	r3, [r7, #24]

	// convert degrees
	while ((p - q) > 2) {
 8015740:	e011      	b.n	8015766 <_convertString2Degrees+0x5e>
		if (deg) deg *= 10;
 8015742:	7dfb      	ldrb	r3, [r7, #23]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d005      	beq.n	8015754 <_convertString2Degrees+0x4c>
 8015748:	7dfb      	ldrb	r3, [r7, #23]
 801574a:	461a      	mov	r2, r3
 801574c:	0092      	lsls	r2, r2, #2
 801574e:	4413      	add	r3, r2
 8015750:	005b      	lsls	r3, r3, #1
 8015752:	75fb      	strb	r3, [r7, #23]
		deg += DIGIT_TO_VAL(*q++);
 8015754:	69bb      	ldr	r3, [r7, #24]
 8015756:	1c5a      	adds	r2, r3, #1
 8015758:	61ba      	str	r2, [r7, #24]
 801575a:	781b      	ldrb	r3, [r3, #0]
 801575c:	3b30      	subs	r3, #48	; 0x30
 801575e:	b2da      	uxtb	r2, r3
 8015760:	7dfb      	ldrb	r3, [r7, #23]
 8015762:	4413      	add	r3, r2
 8015764:	75fb      	strb	r3, [r7, #23]
	while ((p - q) > 2) {
 8015766:	69fa      	ldr	r2, [r7, #28]
 8015768:	69bb      	ldr	r3, [r7, #24]
 801576a:	1ad3      	subs	r3, r2, r3
 801576c:	2b02      	cmp	r3, #2
 801576e:	dce8      	bgt.n	8015742 <_convertString2Degrees+0x3a>
	}
	// convert minutes
	while (p > q) {
 8015770:	e011      	b.n	8015796 <_convertString2Degrees+0x8e>
		if (min) min *= 10;
 8015772:	7dbb      	ldrb	r3, [r7, #22]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d005      	beq.n	8015784 <_convertString2Degrees+0x7c>
 8015778:	7dbb      	ldrb	r3, [r7, #22]
 801577a:	461a      	mov	r2, r3
 801577c:	0092      	lsls	r2, r2, #2
 801577e:	4413      	add	r3, r2
 8015780:	005b      	lsls	r3, r3, #1
 8015782:	75bb      	strb	r3, [r7, #22]
		min += DIGIT_TO_VAL(*q++);
 8015784:	69bb      	ldr	r3, [r7, #24]
 8015786:	1c5a      	adds	r2, r3, #1
 8015788:	61ba      	str	r2, [r7, #24]
 801578a:	781b      	ldrb	r3, [r3, #0]
 801578c:	3b30      	subs	r3, #48	; 0x30
 801578e:	b2da      	uxtb	r2, r3
 8015790:	7dbb      	ldrb	r3, [r7, #22]
 8015792:	4413      	add	r3, r2
 8015794:	75bb      	strb	r3, [r7, #22]
	while (p > q) {
 8015796:	69fa      	ldr	r2, [r7, #28]
 8015798:	69bb      	ldr	r3, [r7, #24]
 801579a:	429a      	cmp	r2, r3
 801579c:	d8e9      	bhi.n	8015772 <_convertString2Degrees+0x6a>
	}
	// convert fractional minutes
	// expect up to four digits, result is in
	// ten-thousandths of a minute
	if (*p == '.') {
 801579e:	69fb      	ldr	r3, [r7, #28]
 80157a0:	781b      	ldrb	r3, [r3, #0]
 80157a2:	2b2e      	cmp	r3, #46	; 0x2e
 80157a4:	d124      	bne.n	80157f0 <_convertString2Degrees+0xe8>
		q = p + 1;
 80157a6:	69fb      	ldr	r3, [r7, #28]
 80157a8:	3301      	adds	r3, #1
 80157aa:	61bb      	str	r3, [r7, #24]
		for (i = 0; i < 4; i++) {
 80157ac:	2300      	movs	r3, #0
 80157ae:	73fb      	strb	r3, [r7, #15]
 80157b0:	e01b      	b.n	80157ea <_convertString2Degrees+0xe2>
			frac_min *= 10;
 80157b2:	693a      	ldr	r2, [r7, #16]
 80157b4:	4613      	mov	r3, r2
 80157b6:	009b      	lsls	r3, r3, #2
 80157b8:	4413      	add	r3, r2
 80157ba:	005b      	lsls	r3, r3, #1
 80157bc:	613b      	str	r3, [r7, #16]
			if (isdigit((int)*q)) frac_min += *q++ - '0';
 80157be:	69bb      	ldr	r3, [r7, #24]
 80157c0:	781b      	ldrb	r3, [r3, #0]
 80157c2:	3301      	adds	r3, #1
 80157c4:	4a20      	ldr	r2, [pc, #128]	; (8015848 <_convertString2Degrees+0x140>)
 80157c6:	4413      	add	r3, r2
 80157c8:	781b      	ldrb	r3, [r3, #0]
 80157ca:	f003 0304 	and.w	r3, r3, #4
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d008      	beq.n	80157e4 <_convertString2Degrees+0xdc>
 80157d2:	69bb      	ldr	r3, [r7, #24]
 80157d4:	1c5a      	adds	r2, r3, #1
 80157d6:	61ba      	str	r2, [r7, #24]
 80157d8:	781b      	ldrb	r3, [r3, #0]
 80157da:	3b30      	subs	r3, #48	; 0x30
 80157dc:	461a      	mov	r2, r3
 80157de:	693b      	ldr	r3, [r7, #16]
 80157e0:	4413      	add	r3, r2
 80157e2:	613b      	str	r3, [r7, #16]
		for (i = 0; i < 4; i++) {
 80157e4:	7bfb      	ldrb	r3, [r7, #15]
 80157e6:	3301      	adds	r3, #1
 80157e8:	73fb      	strb	r3, [r7, #15]
 80157ea:	7bfb      	ldrb	r3, [r7, #15]
 80157ec:	2b03      	cmp	r3, #3
 80157ee:	d9e0      	bls.n	80157b2 <_convertString2Degrees+0xaa>
		}
	}
	return deg + (min * 10000UL + frac_min) / 600000.0;
 80157f0:	7dfb      	ldrb	r3, [r7, #23]
 80157f2:	4618      	mov	r0, r3
 80157f4:	f7ea fe54 	bl	80004a0 <__aeabi_i2d>
 80157f8:	4604      	mov	r4, r0
 80157fa:	460d      	mov	r5, r1
 80157fc:	7dbb      	ldrb	r3, [r7, #22]
 80157fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8015802:	fb03 f202 	mul.w	r2, r3, r2
 8015806:	693b      	ldr	r3, [r7, #16]
 8015808:	4413      	add	r3, r2
 801580a:	4618      	mov	r0, r3
 801580c:	f7ea fe38 	bl	8000480 <__aeabi_ui2d>
 8015810:	a30b      	add	r3, pc, #44	; (adr r3, 8015840 <_convertString2Degrees+0x138>)
 8015812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015816:	f7ea ffd7 	bl	80007c8 <__aeabi_ddiv>
 801581a:	4602      	mov	r2, r0
 801581c:	460b      	mov	r3, r1
 801581e:	4620      	mov	r0, r4
 8015820:	4629      	mov	r1, r5
 8015822:	f7ea fcf1 	bl	8000208 <__adddf3>
 8015826:	4602      	mov	r2, r0
 8015828:	460b      	mov	r3, r1
 801582a:	ec43 2b17 	vmov	d7, r2, r3
}
 801582e:	eeb0 0a47 	vmov.f32	s0, s14
 8015832:	eef0 0a67 	vmov.f32	s1, s15
 8015836:	3720      	adds	r7, #32
 8015838:	46bd      	mov	sp, r7
 801583a:	bdb0      	pop	{r4, r5, r7, pc}
 801583c:	f3af 8000 	nop.w
 8015840:	00000000 	.word	0x00000000
 8015844:	41224f80 	.word	0x41224f80
 8015848:	08028224 	.word	0x08028224

0801584c <_convertAscii2Hex>:

static uint8_t _convertAscii2Hex(char n)    // convert '0'..'9','A'..'F' to 0..15
{
 801584c:	b480      	push	{r7}
 801584e:	b083      	sub	sp, #12
 8015850:	af00      	add	r7, sp, #0
 8015852:	4603      	mov	r3, r0
 8015854:	71fb      	strb	r3, [r7, #7]
	n -= '0';
 8015856:	79fb      	ldrb	r3, [r7, #7]
 8015858:	3b30      	subs	r3, #48	; 0x30
 801585a:	71fb      	strb	r3, [r7, #7]
	if (n > 9) n -= 7;
 801585c:	79fb      	ldrb	r3, [r7, #7]
 801585e:	2b09      	cmp	r3, #9
 8015860:	d902      	bls.n	8015868 <_convertAscii2Hex+0x1c>
 8015862:	79fb      	ldrb	r3, [r7, #7]
 8015864:	3b07      	subs	r3, #7
 8015866:	71fb      	strb	r3, [r7, #7]
	n &= 0x0F;
 8015868:	79fb      	ldrb	r3, [r7, #7]
 801586a:	f003 030f 	and.w	r3, r3, #15
 801586e:	71fb      	strb	r3, [r7, #7]
	return n;
 8015870:	79fb      	ldrb	r3, [r7, #7]
}
 8015872:	4618      	mov	r0, r3
 8015874:	370c      	adds	r7, #12
 8015876:	46bd      	mov	sp, r7
 8015878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801587c:	4770      	bx	lr

0801587e <_evtTimerFinish>:

static void _evtTimerFinish(PifIssuerP p_issuer)
{
 801587e:	b580      	push	{r7, lr}
 8015880:	b084      	sub	sp, #16
 8015882:	af00      	add	r7, sp, #0
 8015884:	6078      	str	r0, [r7, #4]
    PifGps* p_owner = (PifGps*)p_issuer;
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	60fb      	str	r3, [r7, #12]

	p_owner->_connect = FALSE;
 801588a:	68fa      	ldr	r2, [r7, #12]
 801588c:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015890:	f36f 0341 	bfc	r3, #1, #1
 8015894:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    p_owner->_fix = FALSE;
 8015898:	68fa      	ldr	r2, [r7, #12]
 801589a:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 801589e:	f36f 0300 	bfc	r3, #0, #1
 80158a2:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    p_owner->_num_sat = 0;
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	2200      	movs	r2, #0
 80158aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	if (p_owner->__evt_timeout) (*p_owner->__evt_timeout)(p_owner);
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d003      	beq.n	80158be <_evtTimerFinish+0x40>
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80158ba:	68f8      	ldr	r0, [r7, #12]
 80158bc:	4798      	blx	r3
}
 80158be:	bf00      	nop
 80158c0:	3710      	adds	r7, #16
 80158c2:	46bd      	mov	sp, r7
 80158c4:	bd80      	pop	{r7, pc}
	...

080158c8 <pifGps_Init>:

BOOL pifGps_Init(PifGps* p_owner, PifId id)
{
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b082      	sub	sp, #8
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	6078      	str	r0, [r7, #4]
 80158d0:	460b      	mov	r3, r1
 80158d2:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d104      	bne.n	80158e4 <pifGps_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 80158da:	4b0e      	ldr	r3, [pc, #56]	; (8015914 <pifGps_Init+0x4c>)
 80158dc:	2201      	movs	r2, #1
 80158de:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 80158e0:	2300      	movs	r3, #0
 80158e2:	e012      	b.n	801590a <pifGps_Init+0x42>
	}

    memset(p_owner, 0, sizeof(PifGps));
 80158e4:	2268      	movs	r2, #104	; 0x68
 80158e6:	2100      	movs	r1, #0
 80158e8:	6878      	ldr	r0, [r7, #4]
 80158ea:	f00c fa7b 	bl	8021de4 <memset>

	if (id == PIF_ID_AUTO) id = pif_id++;
 80158ee:	887b      	ldrh	r3, [r7, #2]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d106      	bne.n	8015902 <pifGps_Init+0x3a>
 80158f4:	4b08      	ldr	r3, [pc, #32]	; (8015918 <pifGps_Init+0x50>)
 80158f6:	881b      	ldrh	r3, [r3, #0]
 80158f8:	1c5a      	adds	r2, r3, #1
 80158fa:	b291      	uxth	r1, r2
 80158fc:	4a06      	ldr	r2, [pc, #24]	; (8015918 <pifGps_Init+0x50>)
 80158fe:	8011      	strh	r1, [r2, #0]
 8015900:	807b      	strh	r3, [r7, #2]
	p_owner->_id = id;
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	887a      	ldrh	r2, [r7, #2]
 8015906:	819a      	strh	r2, [r3, #12]
	return TRUE;
 8015908:	2301      	movs	r3, #1
}
 801590a:	4618      	mov	r0, r3
 801590c:	3708      	adds	r7, #8
 801590e:	46bd      	mov	sp, r7
 8015910:	bd80      	pop	{r7, pc}
 8015912:	bf00      	nop
 8015914:	200020d1 	.word	0x200020d1
 8015918:	2000005c 	.word	0x2000005c

0801591c <pifGps_Clear>:

void pifGps_Clear(PifGps* p_owner)
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b082      	sub	sp, #8
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
	if (p_owner->__p_txt) {
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015928:	2b00      	cmp	r3, #0
 801592a:	d007      	beq.n	801593c <pifGps_Clear+0x20>
		free(p_owner->__p_txt);
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015930:	4618      	mov	r0, r3
 8015932:	f00c fa41 	bl	8021db8 <free>
		p_owner->__p_txt = NULL;
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	2200      	movs	r2, #0
 801593a:	659a      	str	r2, [r3, #88]	; 0x58
	}
	p_owner->__evt_text = NULL;
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	2200      	movs	r2, #0
 8015940:	661a      	str	r2, [r3, #96]	; 0x60
}
 8015942:	bf00      	nop
 8015944:	3708      	adds	r7, #8
 8015946:	46bd      	mov	sp, r7
 8015948:	bd80      	pop	{r7, pc}
	...

0801594c <pifGps_SetTimeout>:

BOOL pifGps_SetTimeout(PifGps* p_owner, PifTimerManager* p_timer_manager, uint32_t timeout, PifEvtGpsTimeout evt_timeout)
{
 801594c:	b580      	push	{r7, lr}
 801594e:	b084      	sub	sp, #16
 8015950:	af00      	add	r7, sp, #0
 8015952:	60f8      	str	r0, [r7, #12]
 8015954:	60b9      	str	r1, [r7, #8]
 8015956:	607a      	str	r2, [r7, #4]
 8015958:	603b      	str	r3, [r7, #0]
	if (timeout > 0) {
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d025      	beq.n	80159ac <pifGps_SetTimeout+0x60>
		if (!p_owner->__p_timer) {
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015964:	2b00      	cmp	r3, #0
 8015966:	d116      	bne.n	8015996 <pifGps_SetTimeout+0x4a>
			p_owner->__p_timer = pifTimerManager_Add(p_timer_manager, TT_ONCE);
 8015968:	2100      	movs	r1, #0
 801596a:	68b8      	ldr	r0, [r7, #8]
 801596c:	f7ff f9b4 	bl	8014cd8 <pifTimerManager_Add>
 8015970:	4602      	mov	r2, r0
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	655a      	str	r2, [r3, #84]	; 0x54
			if (!p_owner->__p_timer) return FALSE;
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801597a:	2b00      	cmp	r3, #0
 801597c:	d101      	bne.n	8015982 <pifGps_SetTimeout+0x36>
 801597e:	2300      	movs	r3, #0
 8015980:	e01e      	b.n	80159c0 <pifGps_SetTimeout+0x74>
			pifTimer_AttachEvtFinish(p_owner->__p_timer, _evtTimerFinish, p_owner);
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015986:	68fa      	ldr	r2, [r7, #12]
 8015988:	490f      	ldr	r1, [pc, #60]	; (80159c8 <pifGps_SetTimeout+0x7c>)
 801598a:	4618      	mov	r0, r3
 801598c:	f7ff fad1 	bl	8014f32 <pifTimer_AttachEvtFinish>
		    p_owner->__evt_timeout = evt_timeout;
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	683a      	ldr	r2, [r7, #0]
 8015994:	65da      	str	r2, [r3, #92]	; 0x5c
		}
	    if (!pifTimer_Start(p_owner->__p_timer, timeout)) return FALSE;
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801599a:	6879      	ldr	r1, [r7, #4]
 801599c:	4618      	mov	r0, r3
 801599e:	f7ff f9d3 	bl	8014d48 <pifTimer_Start>
 80159a2:	4603      	mov	r3, r0
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d10a      	bne.n	80159be <pifGps_SetTimeout+0x72>
 80159a8:	2300      	movs	r3, #0
 80159aa:	e009      	b.n	80159c0 <pifGps_SetTimeout+0x74>
	}
	else {
		if (p_owner->__p_timer) pifTimer_Stop(p_owner->__p_timer);
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d004      	beq.n	80159be <pifGps_SetTimeout+0x72>
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80159b8:	4618      	mov	r0, r3
 80159ba:	f7ff f9f3 	bl	8014da4 <pifTimer_Stop>
	}
    return TRUE;
 80159be:	2301      	movs	r3, #1
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	3710      	adds	r7, #16
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd80      	pop	{r7, pc}
 80159c8:	0801587f 	.word	0x0801587f

080159cc <pifGps_SendEvent>:

void pifGps_SendEvent(PifGps* p_owner)
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b082      	sub	sp, #8
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
	p_owner->_connect = TRUE;
 80159d4:	687a      	ldr	r2, [r7, #4]
 80159d6:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 80159da:	f043 0302 	orr.w	r3, r3, #2
 80159de:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
	if (p_owner->evt_receive) (*p_owner->evt_receive)(p_owner);
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	685b      	ldr	r3, [r3, #4]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d003      	beq.n	80159f2 <pifGps_SendEvent+0x26>
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	685b      	ldr	r3, [r3, #4]
 80159ee:	6878      	ldr	r0, [r7, #4]
 80159f0:	4798      	blx	r3
	if (p_owner->__p_timer) pifTimer_Reset(p_owner->__p_timer);
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d004      	beq.n	8015a04 <pifGps_SendEvent+0x38>
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80159fe:	4618      	mov	r0, r3
 8015a00:	f7ff f9e6 	bl	8014dd0 <pifTimer_Reset>
}
 8015a04:	bf00      	nop
 8015a06:	3708      	adds	r7, #8
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bd80      	pop	{r7, pc}
 8015a0c:	0000      	movs	r0, r0
	...

08015a10 <pifGps_ParsingNmea>:
	p_owner->__evt_text = evt_text;
	return TRUE;
}

BOOL pifGps_ParsingNmea(PifGps* p_owner, uint8_t c)
{
 8015a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015a14:	b090      	sub	sp, #64	; 0x40
 8015a16:	af02      	add	r7, sp, #8
 8015a18:	62f8      	str	r0, [r7, #44]	; 0x2c
 8015a1a:	460b      	mov	r3, r1
 8015a1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	BOOL rtn = FALSE;
 8015a20:	2300      	movs	r3, #0
 8015a22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t frame_ok = 0;
 8015a26:	2300      	movs	r3, #0
 8015a28:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	static uint8_t param = 0, offset = 0, parity = 0;
	static char string[PIF_GPS_NMEA_VALUE_SIZE];
	static uint8_t checksum_param = 0;
	static uint16_t msg_id = PIF_GPS_NMEA_MSG_ID_NONE;

	if (c == '$') {
 8015a2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015a30:	2b24      	cmp	r3, #36	; 0x24
 8015a32:	d11a      	bne.n	8015a6a <pifGps_ParsingNmea+0x5a>
		param = 0;
 8015a34:	4b80      	ldr	r3, [pc, #512]	; (8015c38 <pifGps_ParsingNmea+0x228>)
 8015a36:	2200      	movs	r2, #0
 8015a38:	701a      	strb	r2, [r3, #0]
		offset = 0;
 8015a3a:	4b80      	ldr	r3, [pc, #512]	; (8015c3c <pifGps_ParsingNmea+0x22c>)
 8015a3c:	2200      	movs	r2, #0
 8015a3e:	701a      	strb	r2, [r3, #0]
		parity = 0;
 8015a40:	4b7f      	ldr	r3, [pc, #508]	; (8015c40 <pifGps_ParsingNmea+0x230>)
 8015a42:	2200      	movs	r2, #0
 8015a44:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 8015a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a48:	689b      	ldr	r3, [r3, #8]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d00a      	beq.n	8015a64 <pifGps_ParsingNmea+0x54>
			string[0] = c;
 8015a4e:	4a7d      	ldr	r2, [pc, #500]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015a50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015a54:	7013      	strb	r3, [r2, #0]
			string[1] = 0;
 8015a56:	4b7b      	ldr	r3, [pc, #492]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015a58:	2200      	movs	r2, #0
 8015a5a:	705a      	strb	r2, [r3, #1]
			(p_owner->evt_frame)(string);
 8015a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a5e:	689b      	ldr	r3, [r3, #8]
 8015a60:	4878      	ldr	r0, [pc, #480]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015a62:	4798      	blx	r3
		}
		return TRUE;
 8015a64:	2301      	movs	r3, #1
 8015a66:	f000 bc8f 	b.w	8016388 <pifGps_ParsingNmea+0x978>
	}
	else if (c == ',' || c == '*') {
 8015a6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015a6e:	2b2c      	cmp	r3, #44	; 0x2c
 8015a70:	d004      	beq.n	8015a7c <pifGps_ParsingNmea+0x6c>
 8015a72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015a76:	2b2a      	cmp	r3, #42	; 0x2a
 8015a78:	f040 83e2 	bne.w	8016240 <pifGps_ParsingNmea+0x830>
		string[offset] = 0;
 8015a7c:	4b6f      	ldr	r3, [pc, #444]	; (8015c3c <pifGps_ParsingNmea+0x22c>)
 8015a7e:	781b      	ldrb	r3, [r3, #0]
 8015a80:	4619      	mov	r1, r3
 8015a82:	4a70      	ldr	r2, [pc, #448]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015a84:	2300      	movs	r3, #0
 8015a86:	5453      	strb	r3, [r2, r1]
		if (param == 0) { //frame identification
 8015a88:	4b6b      	ldr	r3, [pc, #428]	; (8015c38 <pifGps_ParsingNmea+0x228>)
 8015a8a:	781b      	ldrb	r3, [r3, #0]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	f040 8100 	bne.w	8015c92 <pifGps_ParsingNmea+0x282>
			msg_id = PIF_GPS_NMEA_MSG_ID_NONE;
 8015a92:	4b6d      	ldr	r3, [pc, #436]	; (8015c48 <pifGps_ParsingNmea+0x238>)
 8015a94:	2200      	movs	r2, #0
 8015a96:	801a      	strh	r2, [r3, #0]
			if (string[2] == 'D' && string[3] == 'T' && string[4] == 'M') msg_id = PIF_GPS_NMEA_MSG_ID_DTM;
 8015a98:	4b6a      	ldr	r3, [pc, #424]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015a9a:	789b      	ldrb	r3, [r3, #2]
 8015a9c:	2b44      	cmp	r3, #68	; 0x44
 8015a9e:	d10b      	bne.n	8015ab8 <pifGps_ParsingNmea+0xa8>
 8015aa0:	4b68      	ldr	r3, [pc, #416]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015aa2:	78db      	ldrb	r3, [r3, #3]
 8015aa4:	2b54      	cmp	r3, #84	; 0x54
 8015aa6:	d107      	bne.n	8015ab8 <pifGps_ParsingNmea+0xa8>
 8015aa8:	4b66      	ldr	r3, [pc, #408]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015aaa:	791b      	ldrb	r3, [r3, #4]
 8015aac:	2b4d      	cmp	r3, #77	; 0x4d
 8015aae:	d103      	bne.n	8015ab8 <pifGps_ParsingNmea+0xa8>
 8015ab0:	4b65      	ldr	r3, [pc, #404]	; (8015c48 <pifGps_ParsingNmea+0x238>)
 8015ab2:	2201      	movs	r2, #1
 8015ab4:	801a      	strh	r2, [r3, #0]
 8015ab6:	e38c      	b.n	80161d2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'B' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GBS;
 8015ab8:	4b62      	ldr	r3, [pc, #392]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015aba:	789b      	ldrb	r3, [r3, #2]
 8015abc:	2b47      	cmp	r3, #71	; 0x47
 8015abe:	d10b      	bne.n	8015ad8 <pifGps_ParsingNmea+0xc8>
 8015ac0:	4b60      	ldr	r3, [pc, #384]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015ac2:	78db      	ldrb	r3, [r3, #3]
 8015ac4:	2b42      	cmp	r3, #66	; 0x42
 8015ac6:	d107      	bne.n	8015ad8 <pifGps_ParsingNmea+0xc8>
 8015ac8:	4b5e      	ldr	r3, [pc, #376]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015aca:	791b      	ldrb	r3, [r3, #4]
 8015acc:	2b53      	cmp	r3, #83	; 0x53
 8015ace:	d103      	bne.n	8015ad8 <pifGps_ParsingNmea+0xc8>
 8015ad0:	4b5d      	ldr	r3, [pc, #372]	; (8015c48 <pifGps_ParsingNmea+0x238>)
 8015ad2:	2202      	movs	r2, #2
 8015ad4:	801a      	strh	r2, [r3, #0]
 8015ad6:	e37c      	b.n	80161d2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'G' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_GGA;
 8015ad8:	4b5a      	ldr	r3, [pc, #360]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015ada:	789b      	ldrb	r3, [r3, #2]
 8015adc:	2b47      	cmp	r3, #71	; 0x47
 8015ade:	d10b      	bne.n	8015af8 <pifGps_ParsingNmea+0xe8>
 8015ae0:	4b58      	ldr	r3, [pc, #352]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015ae2:	78db      	ldrb	r3, [r3, #3]
 8015ae4:	2b47      	cmp	r3, #71	; 0x47
 8015ae6:	d107      	bne.n	8015af8 <pifGps_ParsingNmea+0xe8>
 8015ae8:	4b56      	ldr	r3, [pc, #344]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015aea:	791b      	ldrb	r3, [r3, #4]
 8015aec:	2b41      	cmp	r3, #65	; 0x41
 8015aee:	d103      	bne.n	8015af8 <pifGps_ParsingNmea+0xe8>
 8015af0:	4b55      	ldr	r3, [pc, #340]	; (8015c48 <pifGps_ParsingNmea+0x238>)
 8015af2:	2203      	movs	r2, #3
 8015af4:	801a      	strh	r2, [r3, #0]
 8015af6:	e36c      	b.n	80161d2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'L' && string[4] == 'L') msg_id = PIF_GPS_NMEA_MSG_ID_GLL;
 8015af8:	4b52      	ldr	r3, [pc, #328]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015afa:	789b      	ldrb	r3, [r3, #2]
 8015afc:	2b47      	cmp	r3, #71	; 0x47
 8015afe:	d10b      	bne.n	8015b18 <pifGps_ParsingNmea+0x108>
 8015b00:	4b50      	ldr	r3, [pc, #320]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015b02:	78db      	ldrb	r3, [r3, #3]
 8015b04:	2b4c      	cmp	r3, #76	; 0x4c
 8015b06:	d107      	bne.n	8015b18 <pifGps_ParsingNmea+0x108>
 8015b08:	4b4e      	ldr	r3, [pc, #312]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015b0a:	791b      	ldrb	r3, [r3, #4]
 8015b0c:	2b4c      	cmp	r3, #76	; 0x4c
 8015b0e:	d103      	bne.n	8015b18 <pifGps_ParsingNmea+0x108>
 8015b10:	4b4d      	ldr	r3, [pc, #308]	; (8015c48 <pifGps_ParsingNmea+0x238>)
 8015b12:	2204      	movs	r2, #4
 8015b14:	801a      	strh	r2, [r3, #0]
 8015b16:	e35c      	b.n	80161d2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'N' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GNS;
 8015b18:	4b4a      	ldr	r3, [pc, #296]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015b1a:	789b      	ldrb	r3, [r3, #2]
 8015b1c:	2b47      	cmp	r3, #71	; 0x47
 8015b1e:	d10b      	bne.n	8015b38 <pifGps_ParsingNmea+0x128>
 8015b20:	4b48      	ldr	r3, [pc, #288]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015b22:	78db      	ldrb	r3, [r3, #3]
 8015b24:	2b4e      	cmp	r3, #78	; 0x4e
 8015b26:	d107      	bne.n	8015b38 <pifGps_ParsingNmea+0x128>
 8015b28:	4b46      	ldr	r3, [pc, #280]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015b2a:	791b      	ldrb	r3, [r3, #4]
 8015b2c:	2b53      	cmp	r3, #83	; 0x53
 8015b2e:	d103      	bne.n	8015b38 <pifGps_ParsingNmea+0x128>
 8015b30:	4b45      	ldr	r3, [pc, #276]	; (8015c48 <pifGps_ParsingNmea+0x238>)
 8015b32:	2205      	movs	r2, #5
 8015b34:	801a      	strh	r2, [r3, #0]
 8015b36:	e34c      	b.n	80161d2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'R' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GRS;
 8015b38:	4b42      	ldr	r3, [pc, #264]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015b3a:	789b      	ldrb	r3, [r3, #2]
 8015b3c:	2b47      	cmp	r3, #71	; 0x47
 8015b3e:	d10b      	bne.n	8015b58 <pifGps_ParsingNmea+0x148>
 8015b40:	4b40      	ldr	r3, [pc, #256]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015b42:	78db      	ldrb	r3, [r3, #3]
 8015b44:	2b52      	cmp	r3, #82	; 0x52
 8015b46:	d107      	bne.n	8015b58 <pifGps_ParsingNmea+0x148>
 8015b48:	4b3e      	ldr	r3, [pc, #248]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015b4a:	791b      	ldrb	r3, [r3, #4]
 8015b4c:	2b53      	cmp	r3, #83	; 0x53
 8015b4e:	d103      	bne.n	8015b58 <pifGps_ParsingNmea+0x148>
 8015b50:	4b3d      	ldr	r3, [pc, #244]	; (8015c48 <pifGps_ParsingNmea+0x238>)
 8015b52:	2206      	movs	r2, #6
 8015b54:	801a      	strh	r2, [r3, #0]
 8015b56:	e33c      	b.n	80161d2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_GSA;
 8015b58:	4b3a      	ldr	r3, [pc, #232]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015b5a:	789b      	ldrb	r3, [r3, #2]
 8015b5c:	2b47      	cmp	r3, #71	; 0x47
 8015b5e:	d10b      	bne.n	8015b78 <pifGps_ParsingNmea+0x168>
 8015b60:	4b38      	ldr	r3, [pc, #224]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015b62:	78db      	ldrb	r3, [r3, #3]
 8015b64:	2b53      	cmp	r3, #83	; 0x53
 8015b66:	d107      	bne.n	8015b78 <pifGps_ParsingNmea+0x168>
 8015b68:	4b36      	ldr	r3, [pc, #216]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015b6a:	791b      	ldrb	r3, [r3, #4]
 8015b6c:	2b41      	cmp	r3, #65	; 0x41
 8015b6e:	d103      	bne.n	8015b78 <pifGps_ParsingNmea+0x168>
 8015b70:	4b35      	ldr	r3, [pc, #212]	; (8015c48 <pifGps_ParsingNmea+0x238>)
 8015b72:	2207      	movs	r2, #7
 8015b74:	801a      	strh	r2, [r3, #0]
 8015b76:	e32c      	b.n	80161d2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'T') msg_id = PIF_GPS_NMEA_MSG_ID_GST;
 8015b78:	4b32      	ldr	r3, [pc, #200]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015b7a:	789b      	ldrb	r3, [r3, #2]
 8015b7c:	2b47      	cmp	r3, #71	; 0x47
 8015b7e:	d10b      	bne.n	8015b98 <pifGps_ParsingNmea+0x188>
 8015b80:	4b30      	ldr	r3, [pc, #192]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015b82:	78db      	ldrb	r3, [r3, #3]
 8015b84:	2b53      	cmp	r3, #83	; 0x53
 8015b86:	d107      	bne.n	8015b98 <pifGps_ParsingNmea+0x188>
 8015b88:	4b2e      	ldr	r3, [pc, #184]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015b8a:	791b      	ldrb	r3, [r3, #4]
 8015b8c:	2b54      	cmp	r3, #84	; 0x54
 8015b8e:	d103      	bne.n	8015b98 <pifGps_ParsingNmea+0x188>
 8015b90:	4b2d      	ldr	r3, [pc, #180]	; (8015c48 <pifGps_ParsingNmea+0x238>)
 8015b92:	2208      	movs	r2, #8
 8015b94:	801a      	strh	r2, [r3, #0]
 8015b96:	e31c      	b.n	80161d2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'V') msg_id = PIF_GPS_NMEA_MSG_ID_GSV;
 8015b98:	4b2a      	ldr	r3, [pc, #168]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015b9a:	789b      	ldrb	r3, [r3, #2]
 8015b9c:	2b47      	cmp	r3, #71	; 0x47
 8015b9e:	d10b      	bne.n	8015bb8 <pifGps_ParsingNmea+0x1a8>
 8015ba0:	4b28      	ldr	r3, [pc, #160]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015ba2:	78db      	ldrb	r3, [r3, #3]
 8015ba4:	2b53      	cmp	r3, #83	; 0x53
 8015ba6:	d107      	bne.n	8015bb8 <pifGps_ParsingNmea+0x1a8>
 8015ba8:	4b26      	ldr	r3, [pc, #152]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015baa:	791b      	ldrb	r3, [r3, #4]
 8015bac:	2b56      	cmp	r3, #86	; 0x56
 8015bae:	d103      	bne.n	8015bb8 <pifGps_ParsingNmea+0x1a8>
 8015bb0:	4b25      	ldr	r3, [pc, #148]	; (8015c48 <pifGps_ParsingNmea+0x238>)
 8015bb2:	2209      	movs	r2, #9
 8015bb4:	801a      	strh	r2, [r3, #0]
 8015bb6:	e30c      	b.n	80161d2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'R' && string[3] == 'M' && string[4] == 'C') msg_id = PIF_GPS_NMEA_MSG_ID_RMC;
 8015bb8:	4b22      	ldr	r3, [pc, #136]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015bba:	789b      	ldrb	r3, [r3, #2]
 8015bbc:	2b52      	cmp	r3, #82	; 0x52
 8015bbe:	d10b      	bne.n	8015bd8 <pifGps_ParsingNmea+0x1c8>
 8015bc0:	4b20      	ldr	r3, [pc, #128]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015bc2:	78db      	ldrb	r3, [r3, #3]
 8015bc4:	2b4d      	cmp	r3, #77	; 0x4d
 8015bc6:	d107      	bne.n	8015bd8 <pifGps_ParsingNmea+0x1c8>
 8015bc8:	4b1e      	ldr	r3, [pc, #120]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015bca:	791b      	ldrb	r3, [r3, #4]
 8015bcc:	2b43      	cmp	r3, #67	; 0x43
 8015bce:	d103      	bne.n	8015bd8 <pifGps_ParsingNmea+0x1c8>
 8015bd0:	4b1d      	ldr	r3, [pc, #116]	; (8015c48 <pifGps_ParsingNmea+0x238>)
 8015bd2:	220a      	movs	r2, #10
 8015bd4:	801a      	strh	r2, [r3, #0]
 8015bd6:	e2fc      	b.n	80161d2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'T' && string[3] == 'H' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_THS;
 8015bd8:	4b1a      	ldr	r3, [pc, #104]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015bda:	789b      	ldrb	r3, [r3, #2]
 8015bdc:	2b54      	cmp	r3, #84	; 0x54
 8015bde:	d10b      	bne.n	8015bf8 <pifGps_ParsingNmea+0x1e8>
 8015be0:	4b18      	ldr	r3, [pc, #96]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015be2:	78db      	ldrb	r3, [r3, #3]
 8015be4:	2b48      	cmp	r3, #72	; 0x48
 8015be6:	d107      	bne.n	8015bf8 <pifGps_ParsingNmea+0x1e8>
 8015be8:	4b16      	ldr	r3, [pc, #88]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015bea:	791b      	ldrb	r3, [r3, #4]
 8015bec:	2b53      	cmp	r3, #83	; 0x53
 8015bee:	d103      	bne.n	8015bf8 <pifGps_ParsingNmea+0x1e8>
 8015bf0:	4b15      	ldr	r3, [pc, #84]	; (8015c48 <pifGps_ParsingNmea+0x238>)
 8015bf2:	220b      	movs	r2, #11
 8015bf4:	801a      	strh	r2, [r3, #0]
 8015bf6:	e2ec      	b.n	80161d2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'T' && string[3] == 'X' && string[4] == 'T') msg_id = PIF_GPS_NMEA_MSG_ID_TXT;
 8015bf8:	4b12      	ldr	r3, [pc, #72]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015bfa:	789b      	ldrb	r3, [r3, #2]
 8015bfc:	2b54      	cmp	r3, #84	; 0x54
 8015bfe:	d10b      	bne.n	8015c18 <pifGps_ParsingNmea+0x208>
 8015c00:	4b10      	ldr	r3, [pc, #64]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015c02:	78db      	ldrb	r3, [r3, #3]
 8015c04:	2b58      	cmp	r3, #88	; 0x58
 8015c06:	d107      	bne.n	8015c18 <pifGps_ParsingNmea+0x208>
 8015c08:	4b0e      	ldr	r3, [pc, #56]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015c0a:	791b      	ldrb	r3, [r3, #4]
 8015c0c:	2b54      	cmp	r3, #84	; 0x54
 8015c0e:	d103      	bne.n	8015c18 <pifGps_ParsingNmea+0x208>
 8015c10:	4b0d      	ldr	r3, [pc, #52]	; (8015c48 <pifGps_ParsingNmea+0x238>)
 8015c12:	220c      	movs	r2, #12
 8015c14:	801a      	strh	r2, [r3, #0]
 8015c16:	e2dc      	b.n	80161d2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'V' && string[3] == 'L' && string[4] == 'W') msg_id = PIF_GPS_NMEA_MSG_ID_VLW;
 8015c18:	4b0a      	ldr	r3, [pc, #40]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015c1a:	789b      	ldrb	r3, [r3, #2]
 8015c1c:	2b56      	cmp	r3, #86	; 0x56
 8015c1e:	d115      	bne.n	8015c4c <pifGps_ParsingNmea+0x23c>
 8015c20:	4b08      	ldr	r3, [pc, #32]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015c22:	78db      	ldrb	r3, [r3, #3]
 8015c24:	2b4c      	cmp	r3, #76	; 0x4c
 8015c26:	d111      	bne.n	8015c4c <pifGps_ParsingNmea+0x23c>
 8015c28:	4b06      	ldr	r3, [pc, #24]	; (8015c44 <pifGps_ParsingNmea+0x234>)
 8015c2a:	791b      	ldrb	r3, [r3, #4]
 8015c2c:	2b57      	cmp	r3, #87	; 0x57
 8015c2e:	d10d      	bne.n	8015c4c <pifGps_ParsingNmea+0x23c>
 8015c30:	4b05      	ldr	r3, [pc, #20]	; (8015c48 <pifGps_ParsingNmea+0x238>)
 8015c32:	220d      	movs	r2, #13
 8015c34:	801a      	strh	r2, [r3, #0]
 8015c36:	e2cc      	b.n	80161d2 <pifGps_ParsingNmea+0x7c2>
 8015c38:	20002239 	.word	0x20002239
 8015c3c:	2000223a 	.word	0x2000223a
 8015c40:	2000223b 	.word	0x2000223b
 8015c44:	2000223c 	.word	0x2000223c
 8015c48:	2000225c 	.word	0x2000225c
			else if (string[2] == 'V' && string[3] == 'T' && string[4] == 'G') msg_id = PIF_GPS_NMEA_MSG_ID_VTG;
 8015c4c:	4ba1      	ldr	r3, [pc, #644]	; (8015ed4 <pifGps_ParsingNmea+0x4c4>)
 8015c4e:	789b      	ldrb	r3, [r3, #2]
 8015c50:	2b56      	cmp	r3, #86	; 0x56
 8015c52:	d10b      	bne.n	8015c6c <pifGps_ParsingNmea+0x25c>
 8015c54:	4b9f      	ldr	r3, [pc, #636]	; (8015ed4 <pifGps_ParsingNmea+0x4c4>)
 8015c56:	78db      	ldrb	r3, [r3, #3]
 8015c58:	2b54      	cmp	r3, #84	; 0x54
 8015c5a:	d107      	bne.n	8015c6c <pifGps_ParsingNmea+0x25c>
 8015c5c:	4b9d      	ldr	r3, [pc, #628]	; (8015ed4 <pifGps_ParsingNmea+0x4c4>)
 8015c5e:	791b      	ldrb	r3, [r3, #4]
 8015c60:	2b47      	cmp	r3, #71	; 0x47
 8015c62:	d103      	bne.n	8015c6c <pifGps_ParsingNmea+0x25c>
 8015c64:	4b9c      	ldr	r3, [pc, #624]	; (8015ed8 <pifGps_ParsingNmea+0x4c8>)
 8015c66:	220e      	movs	r2, #14
 8015c68:	801a      	strh	r2, [r3, #0]
 8015c6a:	e2b2      	b.n	80161d2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'Z' && string[3] == 'D' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_ZDA;
 8015c6c:	4b99      	ldr	r3, [pc, #612]	; (8015ed4 <pifGps_ParsingNmea+0x4c4>)
 8015c6e:	789b      	ldrb	r3, [r3, #2]
 8015c70:	2b5a      	cmp	r3, #90	; 0x5a
 8015c72:	f040 82ae 	bne.w	80161d2 <pifGps_ParsingNmea+0x7c2>
 8015c76:	4b97      	ldr	r3, [pc, #604]	; (8015ed4 <pifGps_ParsingNmea+0x4c4>)
 8015c78:	78db      	ldrb	r3, [r3, #3]
 8015c7a:	2b44      	cmp	r3, #68	; 0x44
 8015c7c:	f040 82a9 	bne.w	80161d2 <pifGps_ParsingNmea+0x7c2>
 8015c80:	4b94      	ldr	r3, [pc, #592]	; (8015ed4 <pifGps_ParsingNmea+0x4c4>)
 8015c82:	791b      	ldrb	r3, [r3, #4]
 8015c84:	2b41      	cmp	r3, #65	; 0x41
 8015c86:	f040 82a4 	bne.w	80161d2 <pifGps_ParsingNmea+0x7c2>
 8015c8a:	4b93      	ldr	r3, [pc, #588]	; (8015ed8 <pifGps_ParsingNmea+0x4c8>)
 8015c8c:	220f      	movs	r2, #15
 8015c8e:	801a      	strh	r2, [r3, #0]
 8015c90:	e29f      	b.n	80161d2 <pifGps_ParsingNmea+0x7c2>
		}
		else if (offset) {
 8015c92:	4b92      	ldr	r3, [pc, #584]	; (8015edc <pifGps_ParsingNmea+0x4cc>)
 8015c94:	781b      	ldrb	r3, [r3, #0]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	f000 828c 	beq.w	80161b4 <pifGps_ParsingNmea+0x7a4>
			switch (msg_id) {
 8015c9c:	4b8e      	ldr	r3, [pc, #568]	; (8015ed8 <pifGps_ParsingNmea+0x4c8>)
 8015c9e:	881b      	ldrh	r3, [r3, #0]
 8015ca0:	3b01      	subs	r3, #1
 8015ca2:	2b0e      	cmp	r3, #14
 8015ca4:	f200 8295 	bhi.w	80161d2 <pifGps_ParsingNmea+0x7c2>
 8015ca8:	a201      	add	r2, pc, #4	; (adr r2, 8015cb0 <pifGps_ParsingNmea+0x2a0>)
 8015caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cae:	bf00      	nop
 8015cb0:	080161d3 	.word	0x080161d3
 8015cb4:	080161d3 	.word	0x080161d3
 8015cb8:	08015ced 	.word	0x08015ced
 8015cbc:	08015df5 	.word	0x08015df5
 8015cc0:	08015e9f 	.word	0x08015e9f
 8015cc4:	080161d3 	.word	0x080161d3
 8015cc8:	080161d3 	.word	0x080161d3
 8015ccc:	080161d3 	.word	0x080161d3
 8015cd0:	080161d3 	.word	0x080161d3
 8015cd4:	08015f8d 	.word	0x08015f8d
 8015cd8:	080161d3 	.word	0x080161d3
 8015cdc:	08016087 	.word	0x08016087
 8015ce0:	080161d3 	.word	0x080161d3
 8015ce4:	080160f9 	.word	0x080160f9
 8015ce8:	0801613f 	.word	0x0801613f

			case PIF_GPS_NMEA_MSG_ID_GBS:
				break;

			case PIF_GPS_NMEA_MSG_ID_GGA:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 8015cec:	4b7c      	ldr	r3, [pc, #496]	; (8015ee0 <pifGps_ParsingNmea+0x4d0>)
 8015cee:	781b      	ldrb	r3, [r3, #0]
 8015cf0:	2b01      	cmp	r3, #1
 8015cf2:	d106      	bne.n	8015d02 <pifGps_ParsingNmea+0x2f2>
 8015cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cf6:	330e      	adds	r3, #14
 8015cf8:	4619      	mov	r1, r3
 8015cfa:	4876      	ldr	r0, [pc, #472]	; (8015ed4 <pifGps_ParsingNmea+0x4c4>)
 8015cfc:	f7ff fbbe 	bl	801547c <_convertString2Time>
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 6) p_owner->_fix = (string[0]  > '0');
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
				break;
 8015d00:	e25a      	b.n	80161b8 <pifGps_ParsingNmea+0x7a8>
				else if (param == 2) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8015d02:	4b77      	ldr	r3, [pc, #476]	; (8015ee0 <pifGps_ParsingNmea+0x4d0>)
 8015d04:	781b      	ldrb	r3, [r3, #0]
 8015d06:	2b02      	cmp	r3, #2
 8015d08:	d10a      	bne.n	8015d20 <pifGps_ParsingNmea+0x310>
 8015d0a:	4872      	ldr	r0, [pc, #456]	; (8015ed4 <pifGps_ParsingNmea+0x4c4>)
 8015d0c:	f7ff fcfc 	bl	8015708 <_convertString2Degrees>
 8015d10:	eeb0 7a40 	vmov.f32	s14, s0
 8015d14:	eef0 7a60 	vmov.f32	s15, s1
 8015d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d1a:	ed83 7b06 	vstr	d7, [r3, #24]
				break;
 8015d1e:	e24b      	b.n	80161b8 <pifGps_ParsingNmea+0x7a8>
				else if (param == 3 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8015d20:	4b6f      	ldr	r3, [pc, #444]	; (8015ee0 <pifGps_ParsingNmea+0x4d0>)
 8015d22:	781b      	ldrb	r3, [r3, #0]
 8015d24:	2b03      	cmp	r3, #3
 8015d26:	d110      	bne.n	8015d4a <pifGps_ParsingNmea+0x33a>
 8015d28:	4b6a      	ldr	r3, [pc, #424]	; (8015ed4 <pifGps_ParsingNmea+0x4c4>)
 8015d2a:	781b      	ldrb	r3, [r3, #0]
 8015d2c:	2b53      	cmp	r3, #83	; 0x53
 8015d2e:	d10c      	bne.n	8015d4a <pifGps_ParsingNmea+0x33a>
 8015d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d32:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8015d36:	623a      	str	r2, [r7, #32]
 8015d38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8015d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d40:	ed97 7b08 	vldr	d7, [r7, #32]
 8015d44:	ed83 7b06 	vstr	d7, [r3, #24]
 8015d48:	e053      	b.n	8015df2 <pifGps_ParsingNmea+0x3e2>
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8015d4a:	4b65      	ldr	r3, [pc, #404]	; (8015ee0 <pifGps_ParsingNmea+0x4d0>)
 8015d4c:	781b      	ldrb	r3, [r3, #0]
 8015d4e:	2b04      	cmp	r3, #4
 8015d50:	d10a      	bne.n	8015d68 <pifGps_ParsingNmea+0x358>
 8015d52:	4860      	ldr	r0, [pc, #384]	; (8015ed4 <pifGps_ParsingNmea+0x4c4>)
 8015d54:	f7ff fcd8 	bl	8015708 <_convertString2Degrees>
 8015d58:	eeb0 7a40 	vmov.f32	s14, s0
 8015d5c:	eef0 7a60 	vmov.f32	s15, s1
 8015d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d62:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 8015d66:	e227      	b.n	80161b8 <pifGps_ParsingNmea+0x7a8>
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8015d68:	4b5d      	ldr	r3, [pc, #372]	; (8015ee0 <pifGps_ParsingNmea+0x4d0>)
 8015d6a:	781b      	ldrb	r3, [r3, #0]
 8015d6c:	2b05      	cmp	r3, #5
 8015d6e:	d110      	bne.n	8015d92 <pifGps_ParsingNmea+0x382>
 8015d70:	4b58      	ldr	r3, [pc, #352]	; (8015ed4 <pifGps_ParsingNmea+0x4c4>)
 8015d72:	781b      	ldrb	r3, [r3, #0]
 8015d74:	2b57      	cmp	r3, #87	; 0x57
 8015d76:	d10c      	bne.n	8015d92 <pifGps_ParsingNmea+0x382>
 8015d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015d7e:	61ba      	str	r2, [r7, #24]
 8015d80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015d84:	61fb      	str	r3, [r7, #28]
 8015d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d88:	ed97 7b06 	vldr	d7, [r7, #24]
 8015d8c:	ed83 7b08 	vstr	d7, [r3, #32]
 8015d90:	e02f      	b.n	8015df2 <pifGps_ParsingNmea+0x3e2>
				else if (param == 6) p_owner->_fix = (string[0]  > '0');
 8015d92:	4b53      	ldr	r3, [pc, #332]	; (8015ee0 <pifGps_ParsingNmea+0x4d0>)
 8015d94:	781b      	ldrb	r3, [r3, #0]
 8015d96:	2b06      	cmp	r3, #6
 8015d98:	d10e      	bne.n	8015db8 <pifGps_ParsingNmea+0x3a8>
 8015d9a:	4b4e      	ldr	r3, [pc, #312]	; (8015ed4 <pifGps_ParsingNmea+0x4c4>)
 8015d9c:	781b      	ldrb	r3, [r3, #0]
 8015d9e:	2b30      	cmp	r3, #48	; 0x30
 8015da0:	bf8c      	ite	hi
 8015da2:	2301      	movhi	r3, #1
 8015da4:	2300      	movls	r3, #0
 8015da6:	b2d9      	uxtb	r1, r3
 8015da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015daa:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015dae:	f361 0300 	bfi	r3, r1, #0, #1
 8015db2:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
				break;
 8015db6:	e1ff      	b.n	80161b8 <pifGps_ParsingNmea+0x7a8>
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
 8015db8:	4b49      	ldr	r3, [pc, #292]	; (8015ee0 <pifGps_ParsingNmea+0x4d0>)
 8015dba:	781b      	ldrb	r3, [r3, #0]
 8015dbc:	2b07      	cmp	r3, #7
 8015dbe:	d108      	bne.n	8015dd2 <pifGps_ParsingNmea+0x3c2>
 8015dc0:	4844      	ldr	r0, [pc, #272]	; (8015ed4 <pifGps_ParsingNmea+0x4c4>)
 8015dc2:	f7ff fc69 	bl	8015698 <_convertString2Interger>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	b2da      	uxtb	r2, r3
 8015dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				break;
 8015dd0:	e1f2      	b.n	80161b8 <pifGps_ParsingNmea+0x7a8>
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
 8015dd2:	4b43      	ldr	r3, [pc, #268]	; (8015ee0 <pifGps_ParsingNmea+0x4d0>)
 8015dd4:	781b      	ldrb	r3, [r3, #0]
 8015dd6:	2b09      	cmp	r3, #9
 8015dd8:	f040 81ee 	bne.w	80161b8 <pifGps_ParsingNmea+0x7a8>
 8015ddc:	483d      	ldr	r0, [pc, #244]	; (8015ed4 <pifGps_ParsingNmea+0x4c4>)
 8015dde:	f7ff fbcf 	bl	8015580 <_convertString2Float>
 8015de2:	eeb0 7a40 	vmov.f32	s14, s0
 8015de6:	eef0 7a60 	vmov.f32	s15, s1
 8015dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dec:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
				break;
 8015df0:	e1e2      	b.n	80161b8 <pifGps_ParsingNmea+0x7a8>
 8015df2:	e1e1      	b.n	80161b8 <pifGps_ParsingNmea+0x7a8>

			case PIF_GPS_NMEA_MSG_ID_GLL:
				if (param == 1) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8015df4:	4b3a      	ldr	r3, [pc, #232]	; (8015ee0 <pifGps_ParsingNmea+0x4d0>)
 8015df6:	781b      	ldrb	r3, [r3, #0]
 8015df8:	2b01      	cmp	r3, #1
 8015dfa:	d10a      	bne.n	8015e12 <pifGps_ParsingNmea+0x402>
 8015dfc:	4835      	ldr	r0, [pc, #212]	; (8015ed4 <pifGps_ParsingNmea+0x4c4>)
 8015dfe:	f7ff fc83 	bl	8015708 <_convertString2Degrees>
 8015e02:	eeb0 7a40 	vmov.f32	s14, s0
 8015e06:	eef0 7a60 	vmov.f32	s15, s1
 8015e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e0c:	ed83 7b06 	vstr	d7, [r3, #24]
				else if (param == 2 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
				else if (param == 3) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 4 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 5) _convertString2Time(string, &p_owner->_utc);
				break;
 8015e10:	e1d4      	b.n	80161bc <pifGps_ParsingNmea+0x7ac>
				else if (param == 2 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8015e12:	4b33      	ldr	r3, [pc, #204]	; (8015ee0 <pifGps_ParsingNmea+0x4d0>)
 8015e14:	781b      	ldrb	r3, [r3, #0]
 8015e16:	2b02      	cmp	r3, #2
 8015e18:	d110      	bne.n	8015e3c <pifGps_ParsingNmea+0x42c>
 8015e1a:	4b2e      	ldr	r3, [pc, #184]	; (8015ed4 <pifGps_ParsingNmea+0x4c4>)
 8015e1c:	781b      	ldrb	r3, [r3, #0]
 8015e1e:	2b53      	cmp	r3, #83	; 0x53
 8015e20:	d10c      	bne.n	8015e3c <pifGps_ParsingNmea+0x42c>
 8015e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e24:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8015e28:	613a      	str	r2, [r7, #16]
 8015e2a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015e2e:	617b      	str	r3, [r7, #20]
 8015e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e32:	ed97 7b04 	vldr	d7, [r7, #16]
 8015e36:	ed83 7b06 	vstr	d7, [r3, #24]
 8015e3a:	e02f      	b.n	8015e9c <pifGps_ParsingNmea+0x48c>
				else if (param == 3) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8015e3c:	4b28      	ldr	r3, [pc, #160]	; (8015ee0 <pifGps_ParsingNmea+0x4d0>)
 8015e3e:	781b      	ldrb	r3, [r3, #0]
 8015e40:	2b03      	cmp	r3, #3
 8015e42:	d10a      	bne.n	8015e5a <pifGps_ParsingNmea+0x44a>
 8015e44:	4823      	ldr	r0, [pc, #140]	; (8015ed4 <pifGps_ParsingNmea+0x4c4>)
 8015e46:	f7ff fc5f 	bl	8015708 <_convertString2Degrees>
 8015e4a:	eeb0 7a40 	vmov.f32	s14, s0
 8015e4e:	eef0 7a60 	vmov.f32	s15, s1
 8015e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e54:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 8015e58:	e1b0      	b.n	80161bc <pifGps_ParsingNmea+0x7ac>
				else if (param == 4 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8015e5a:	4b21      	ldr	r3, [pc, #132]	; (8015ee0 <pifGps_ParsingNmea+0x4d0>)
 8015e5c:	781b      	ldrb	r3, [r3, #0]
 8015e5e:	2b04      	cmp	r3, #4
 8015e60:	d110      	bne.n	8015e84 <pifGps_ParsingNmea+0x474>
 8015e62:	4b1c      	ldr	r3, [pc, #112]	; (8015ed4 <pifGps_ParsingNmea+0x4c4>)
 8015e64:	781b      	ldrb	r3, [r3, #0]
 8015e66:	2b57      	cmp	r3, #87	; 0x57
 8015e68:	d10c      	bne.n	8015e84 <pifGps_ParsingNmea+0x474>
 8015e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015e70:	60ba      	str	r2, [r7, #8]
 8015e72:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015e76:	60fb      	str	r3, [r7, #12]
 8015e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e7a:	ed97 7b02 	vldr	d7, [r7, #8]
 8015e7e:	ed83 7b08 	vstr	d7, [r3, #32]
 8015e82:	e00b      	b.n	8015e9c <pifGps_ParsingNmea+0x48c>
				else if (param == 5) _convertString2Time(string, &p_owner->_utc);
 8015e84:	4b16      	ldr	r3, [pc, #88]	; (8015ee0 <pifGps_ParsingNmea+0x4d0>)
 8015e86:	781b      	ldrb	r3, [r3, #0]
 8015e88:	2b05      	cmp	r3, #5
 8015e8a:	f040 8197 	bne.w	80161bc <pifGps_ParsingNmea+0x7ac>
 8015e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e90:	330e      	adds	r3, #14
 8015e92:	4619      	mov	r1, r3
 8015e94:	480f      	ldr	r0, [pc, #60]	; (8015ed4 <pifGps_ParsingNmea+0x4c4>)
 8015e96:	f7ff faf1 	bl	801547c <_convertString2Time>
				break;
 8015e9a:	e18f      	b.n	80161bc <pifGps_ParsingNmea+0x7ac>
 8015e9c:	e18e      	b.n	80161bc <pifGps_ParsingNmea+0x7ac>

			case PIF_GPS_NMEA_MSG_ID_GNS:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 8015e9e:	4b10      	ldr	r3, [pc, #64]	; (8015ee0 <pifGps_ParsingNmea+0x4d0>)
 8015ea0:	781b      	ldrb	r3, [r3, #0]
 8015ea2:	2b01      	cmp	r3, #1
 8015ea4:	d106      	bne.n	8015eb4 <pifGps_ParsingNmea+0x4a4>
 8015ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ea8:	330e      	adds	r3, #14
 8015eaa:	4619      	mov	r1, r3
 8015eac:	4809      	ldr	r0, [pc, #36]	; (8015ed4 <pifGps_ParsingNmea+0x4c4>)
 8015eae:	f7ff fae5 	bl	801547c <_convertString2Time>
				else if (param == 3 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
				break;
 8015eb2:	e185      	b.n	80161c0 <pifGps_ParsingNmea+0x7b0>
				else if (param == 2) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8015eb4:	4b0a      	ldr	r3, [pc, #40]	; (8015ee0 <pifGps_ParsingNmea+0x4d0>)
 8015eb6:	781b      	ldrb	r3, [r3, #0]
 8015eb8:	2b02      	cmp	r3, #2
 8015eba:	d113      	bne.n	8015ee4 <pifGps_ParsingNmea+0x4d4>
 8015ebc:	4805      	ldr	r0, [pc, #20]	; (8015ed4 <pifGps_ParsingNmea+0x4c4>)
 8015ebe:	f7ff fc23 	bl	8015708 <_convertString2Degrees>
 8015ec2:	eeb0 7a40 	vmov.f32	s14, s0
 8015ec6:	eef0 7a60 	vmov.f32	s15, s1
 8015eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ecc:	ed83 7b06 	vstr	d7, [r3, #24]
				break;
 8015ed0:	e176      	b.n	80161c0 <pifGps_ParsingNmea+0x7b0>
 8015ed2:	bf00      	nop
 8015ed4:	2000223c 	.word	0x2000223c
 8015ed8:	2000225c 	.word	0x2000225c
 8015edc:	2000223a 	.word	0x2000223a
 8015ee0:	20002239 	.word	0x20002239
				else if (param == 3 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8015ee4:	4b9e      	ldr	r3, [pc, #632]	; (8016160 <pifGps_ParsingNmea+0x750>)
 8015ee6:	781b      	ldrb	r3, [r3, #0]
 8015ee8:	2b03      	cmp	r3, #3
 8015eea:	d110      	bne.n	8015f0e <pifGps_ParsingNmea+0x4fe>
 8015eec:	4b9d      	ldr	r3, [pc, #628]	; (8016164 <pifGps_ParsingNmea+0x754>)
 8015eee:	781b      	ldrb	r3, [r3, #0]
 8015ef0:	2b53      	cmp	r3, #83	; 0x53
 8015ef2:	d10c      	bne.n	8015f0e <pifGps_ParsingNmea+0x4fe>
 8015ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ef6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8015efa:	603a      	str	r2, [r7, #0]
 8015efc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015f00:	607b      	str	r3, [r7, #4]
 8015f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f04:	ed97 7b00 	vldr	d7, [r7]
 8015f08:	ed83 7b06 	vstr	d7, [r3, #24]
 8015f0c:	e03d      	b.n	8015f8a <pifGps_ParsingNmea+0x57a>
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8015f0e:	4b94      	ldr	r3, [pc, #592]	; (8016160 <pifGps_ParsingNmea+0x750>)
 8015f10:	781b      	ldrb	r3, [r3, #0]
 8015f12:	2b04      	cmp	r3, #4
 8015f14:	d10a      	bne.n	8015f2c <pifGps_ParsingNmea+0x51c>
 8015f16:	4893      	ldr	r0, [pc, #588]	; (8016164 <pifGps_ParsingNmea+0x754>)
 8015f18:	f7ff fbf6 	bl	8015708 <_convertString2Degrees>
 8015f1c:	eeb0 7a40 	vmov.f32	s14, s0
 8015f20:	eef0 7a60 	vmov.f32	s15, s1
 8015f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f26:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 8015f2a:	e149      	b.n	80161c0 <pifGps_ParsingNmea+0x7b0>
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8015f2c:	4b8c      	ldr	r3, [pc, #560]	; (8016160 <pifGps_ParsingNmea+0x750>)
 8015f2e:	781b      	ldrb	r3, [r3, #0]
 8015f30:	2b05      	cmp	r3, #5
 8015f32:	d10d      	bne.n	8015f50 <pifGps_ParsingNmea+0x540>
 8015f34:	4b8b      	ldr	r3, [pc, #556]	; (8016164 <pifGps_ParsingNmea+0x754>)
 8015f36:	781b      	ldrb	r3, [r3, #0]
 8015f38:	2b57      	cmp	r3, #87	; 0x57
 8015f3a:	d109      	bne.n	8015f50 <pifGps_ParsingNmea+0x540>
 8015f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f3e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015f42:	4692      	mov	sl, r2
 8015f44:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8015f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f4a:	e9c3 ab08 	strd	sl, fp, [r3, #32]
 8015f4e:	e01c      	b.n	8015f8a <pifGps_ParsingNmea+0x57a>
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
 8015f50:	4b83      	ldr	r3, [pc, #524]	; (8016160 <pifGps_ParsingNmea+0x750>)
 8015f52:	781b      	ldrb	r3, [r3, #0]
 8015f54:	2b07      	cmp	r3, #7
 8015f56:	d108      	bne.n	8015f6a <pifGps_ParsingNmea+0x55a>
 8015f58:	4882      	ldr	r0, [pc, #520]	; (8016164 <pifGps_ParsingNmea+0x754>)
 8015f5a:	f7ff fb9d 	bl	8015698 <_convertString2Interger>
 8015f5e:	4603      	mov	r3, r0
 8015f60:	b2da      	uxtb	r2, r3
 8015f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				break;
 8015f68:	e12a      	b.n	80161c0 <pifGps_ParsingNmea+0x7b0>
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
 8015f6a:	4b7d      	ldr	r3, [pc, #500]	; (8016160 <pifGps_ParsingNmea+0x750>)
 8015f6c:	781b      	ldrb	r3, [r3, #0]
 8015f6e:	2b09      	cmp	r3, #9
 8015f70:	f040 8126 	bne.w	80161c0 <pifGps_ParsingNmea+0x7b0>
 8015f74:	487b      	ldr	r0, [pc, #492]	; (8016164 <pifGps_ParsingNmea+0x754>)
 8015f76:	f7ff fb03 	bl	8015580 <_convertString2Float>
 8015f7a:	eeb0 7a40 	vmov.f32	s14, s0
 8015f7e:	eef0 7a60 	vmov.f32	s15, s1
 8015f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f84:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
				break;
 8015f88:	e11a      	b.n	80161c0 <pifGps_ParsingNmea+0x7b0>
 8015f8a:	e119      	b.n	80161c0 <pifGps_ParsingNmea+0x7b0>

			case PIF_GPS_NMEA_MSG_ID_GSV:
				break;

			case PIF_GPS_NMEA_MSG_ID_RMC:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 8015f8c:	4b74      	ldr	r3, [pc, #464]	; (8016160 <pifGps_ParsingNmea+0x750>)
 8015f8e:	781b      	ldrb	r3, [r3, #0]
 8015f90:	2b01      	cmp	r3, #1
 8015f92:	d106      	bne.n	8015fa2 <pifGps_ParsingNmea+0x592>
 8015f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f96:	330e      	adds	r3, #14
 8015f98:	4619      	mov	r1, r3
 8015f9a:	4872      	ldr	r0, [pc, #456]	; (8016164 <pifGps_ParsingNmea+0x754>)
 8015f9c:	f7ff fa6e 	bl	801547c <_convertString2Time>
				else if (param == 5) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 6 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 7) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
				else if (param == 8) p_owner->_ground_course = _convertString2Float(string);
				else if (param == 9) _convertString2Date(string, &p_owner->_utc);
				break;
 8015fa0:	e110      	b.n	80161c4 <pifGps_ParsingNmea+0x7b4>
				else if (param == 3) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8015fa2:	4b6f      	ldr	r3, [pc, #444]	; (8016160 <pifGps_ParsingNmea+0x750>)
 8015fa4:	781b      	ldrb	r3, [r3, #0]
 8015fa6:	2b03      	cmp	r3, #3
 8015fa8:	d10a      	bne.n	8015fc0 <pifGps_ParsingNmea+0x5b0>
 8015faa:	486e      	ldr	r0, [pc, #440]	; (8016164 <pifGps_ParsingNmea+0x754>)
 8015fac:	f7ff fbac 	bl	8015708 <_convertString2Degrees>
 8015fb0:	eeb0 7a40 	vmov.f32	s14, s0
 8015fb4:	eef0 7a60 	vmov.f32	s15, s1
 8015fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fba:	ed83 7b06 	vstr	d7, [r3, #24]
				break;
 8015fbe:	e101      	b.n	80161c4 <pifGps_ParsingNmea+0x7b4>
				else if (param == 4 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8015fc0:	4b67      	ldr	r3, [pc, #412]	; (8016160 <pifGps_ParsingNmea+0x750>)
 8015fc2:	781b      	ldrb	r3, [r3, #0]
 8015fc4:	2b04      	cmp	r3, #4
 8015fc6:	d10d      	bne.n	8015fe4 <pifGps_ParsingNmea+0x5d4>
 8015fc8:	4b66      	ldr	r3, [pc, #408]	; (8016164 <pifGps_ParsingNmea+0x754>)
 8015fca:	781b      	ldrb	r3, [r3, #0]
 8015fcc:	2b53      	cmp	r3, #83	; 0x53
 8015fce:	d109      	bne.n	8015fe4 <pifGps_ParsingNmea+0x5d4>
 8015fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fd2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8015fd6:	4690      	mov	r8, r2
 8015fd8:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8015fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fde:	e9c3 8906 	strd	r8, r9, [r3, #24]
 8015fe2:	e04f      	b.n	8016084 <pifGps_ParsingNmea+0x674>
				else if (param == 5) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8015fe4:	4b5e      	ldr	r3, [pc, #376]	; (8016160 <pifGps_ParsingNmea+0x750>)
 8015fe6:	781b      	ldrb	r3, [r3, #0]
 8015fe8:	2b05      	cmp	r3, #5
 8015fea:	d10a      	bne.n	8016002 <pifGps_ParsingNmea+0x5f2>
 8015fec:	485d      	ldr	r0, [pc, #372]	; (8016164 <pifGps_ParsingNmea+0x754>)
 8015fee:	f7ff fb8b 	bl	8015708 <_convertString2Degrees>
 8015ff2:	eeb0 7a40 	vmov.f32	s14, s0
 8015ff6:	eef0 7a60 	vmov.f32	s15, s1
 8015ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ffc:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 8016000:	e0e0      	b.n	80161c4 <pifGps_ParsingNmea+0x7b4>
				else if (param == 6 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8016002:	4b57      	ldr	r3, [pc, #348]	; (8016160 <pifGps_ParsingNmea+0x750>)
 8016004:	781b      	ldrb	r3, [r3, #0]
 8016006:	2b06      	cmp	r3, #6
 8016008:	d10d      	bne.n	8016026 <pifGps_ParsingNmea+0x616>
 801600a:	4b56      	ldr	r3, [pc, #344]	; (8016164 <pifGps_ParsingNmea+0x754>)
 801600c:	781b      	ldrb	r3, [r3, #0]
 801600e:	2b57      	cmp	r3, #87	; 0x57
 8016010:	d109      	bne.n	8016026 <pifGps_ParsingNmea+0x616>
 8016012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016014:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016018:	4614      	mov	r4, r2
 801601a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 801601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016020:	e9c3 4508 	strd	r4, r5, [r3, #32]
 8016024:	e02e      	b.n	8016084 <pifGps_ParsingNmea+0x674>
				else if (param == 7) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
 8016026:	4b4e      	ldr	r3, [pc, #312]	; (8016160 <pifGps_ParsingNmea+0x750>)
 8016028:	781b      	ldrb	r3, [r3, #0]
 801602a:	2b07      	cmp	r3, #7
 801602c:	d10f      	bne.n	801604e <pifGps_ParsingNmea+0x63e>
 801602e:	484d      	ldr	r0, [pc, #308]	; (8016164 <pifGps_ParsingNmea+0x754>)
 8016030:	f7ff faa6 	bl	8015580 <_convertString2Float>
 8016034:	ec51 0b10 	vmov	r0, r1, d0
 8016038:	a347      	add	r3, pc, #284	; (adr r3, 8016158 <pifGps_ParsingNmea+0x748>)
 801603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801603e:	f7ea fa99 	bl	8000574 <__aeabi_dmul>
 8016042:	4602      	mov	r2, r0
 8016044:	460b      	mov	r3, r1
 8016046:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016048:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
				break;
 801604c:	e0ba      	b.n	80161c4 <pifGps_ParsingNmea+0x7b4>
				else if (param == 8) p_owner->_ground_course = _convertString2Float(string);
 801604e:	4b44      	ldr	r3, [pc, #272]	; (8016160 <pifGps_ParsingNmea+0x750>)
 8016050:	781b      	ldrb	r3, [r3, #0]
 8016052:	2b08      	cmp	r3, #8
 8016054:	d10a      	bne.n	801606c <pifGps_ParsingNmea+0x65c>
 8016056:	4843      	ldr	r0, [pc, #268]	; (8016164 <pifGps_ParsingNmea+0x754>)
 8016058:	f7ff fa92 	bl	8015580 <_convertString2Float>
 801605c:	eeb0 7a40 	vmov.f32	s14, s0
 8016060:	eef0 7a60 	vmov.f32	s15, s1
 8016064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016066:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
				break;
 801606a:	e0ab      	b.n	80161c4 <pifGps_ParsingNmea+0x7b4>
				else if (param == 9) _convertString2Date(string, &p_owner->_utc);
 801606c:	4b3c      	ldr	r3, [pc, #240]	; (8016160 <pifGps_ParsingNmea+0x750>)
 801606e:	781b      	ldrb	r3, [r3, #0]
 8016070:	2b09      	cmp	r3, #9
 8016072:	f040 80a7 	bne.w	80161c4 <pifGps_ParsingNmea+0x7b4>
 8016076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016078:	330e      	adds	r3, #14
 801607a:	4619      	mov	r1, r3
 801607c:	4839      	ldr	r0, [pc, #228]	; (8016164 <pifGps_ParsingNmea+0x754>)
 801607e:	f7ff f9b9 	bl	80153f4 <_convertString2Date>
				break;
 8016082:	e09f      	b.n	80161c4 <pifGps_ParsingNmea+0x7b4>
 8016084:	e09e      	b.n	80161c4 <pifGps_ParsingNmea+0x7b4>

			case PIF_GPS_NMEA_MSG_ID_THS:
				break;

			case PIF_GPS_NMEA_MSG_ID_TXT:
				if (p_owner->__evt_text) {
 8016086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801608a:	2b00      	cmp	r3, #0
 801608c:	f000 809c 	beq.w	80161c8 <pifGps_ParsingNmea+0x7b8>
					if (param == 1) p_owner->__p_txt->total = _convertString2Interger(string);
 8016090:	4b33      	ldr	r3, [pc, #204]	; (8016160 <pifGps_ParsingNmea+0x750>)
 8016092:	781b      	ldrb	r3, [r3, #0]
 8016094:	2b01      	cmp	r3, #1
 8016096:	d108      	bne.n	80160aa <pifGps_ParsingNmea+0x69a>
 8016098:	4832      	ldr	r0, [pc, #200]	; (8016164 <pifGps_ParsingNmea+0x754>)
 801609a:	f7ff fafd 	bl	8015698 <_convertString2Interger>
 801609e:	4602      	mov	r2, r0
 80160a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80160a4:	b2d2      	uxtb	r2, r2
 80160a6:	701a      	strb	r2, [r3, #0]
					else if (param == 2) p_owner->__p_txt->num = _convertString2Interger(string);
					else if (param == 3) p_owner->__p_txt->type = _convertString2Interger(string);
					else if (param == 4) strncpy(p_owner->__p_txt->text, string, PIF_GPS_NMEA_TEXT_SIZE - 1);
				}
				break;
 80160a8:	e08e      	b.n	80161c8 <pifGps_ParsingNmea+0x7b8>
					else if (param == 2) p_owner->__p_txt->num = _convertString2Interger(string);
 80160aa:	4b2d      	ldr	r3, [pc, #180]	; (8016160 <pifGps_ParsingNmea+0x750>)
 80160ac:	781b      	ldrb	r3, [r3, #0]
 80160ae:	2b02      	cmp	r3, #2
 80160b0:	d108      	bne.n	80160c4 <pifGps_ParsingNmea+0x6b4>
 80160b2:	482c      	ldr	r0, [pc, #176]	; (8016164 <pifGps_ParsingNmea+0x754>)
 80160b4:	f7ff faf0 	bl	8015698 <_convertString2Interger>
 80160b8:	4602      	mov	r2, r0
 80160ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80160be:	b2d2      	uxtb	r2, r2
 80160c0:	705a      	strb	r2, [r3, #1]
				break;
 80160c2:	e081      	b.n	80161c8 <pifGps_ParsingNmea+0x7b8>
					else if (param == 3) p_owner->__p_txt->type = _convertString2Interger(string);
 80160c4:	4b26      	ldr	r3, [pc, #152]	; (8016160 <pifGps_ParsingNmea+0x750>)
 80160c6:	781b      	ldrb	r3, [r3, #0]
 80160c8:	2b03      	cmp	r3, #3
 80160ca:	d108      	bne.n	80160de <pifGps_ParsingNmea+0x6ce>
 80160cc:	4825      	ldr	r0, [pc, #148]	; (8016164 <pifGps_ParsingNmea+0x754>)
 80160ce:	f7ff fae3 	bl	8015698 <_convertString2Interger>
 80160d2:	4602      	mov	r2, r0
 80160d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80160d8:	b2d2      	uxtb	r2, r2
 80160da:	709a      	strb	r2, [r3, #2]
				break;
 80160dc:	e074      	b.n	80161c8 <pifGps_ParsingNmea+0x7b8>
					else if (param == 4) strncpy(p_owner->__p_txt->text, string, PIF_GPS_NMEA_TEXT_SIZE - 1);
 80160de:	4b20      	ldr	r3, [pc, #128]	; (8016160 <pifGps_ParsingNmea+0x750>)
 80160e0:	781b      	ldrb	r3, [r3, #0]
 80160e2:	2b04      	cmp	r3, #4
 80160e4:	d170      	bne.n	80161c8 <pifGps_ParsingNmea+0x7b8>
 80160e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80160ea:	3303      	adds	r3, #3
 80160ec:	223f      	movs	r2, #63	; 0x3f
 80160ee:	491d      	ldr	r1, [pc, #116]	; (8016164 <pifGps_ParsingNmea+0x754>)
 80160f0:	4618      	mov	r0, r3
 80160f2:	f00b ffe5 	bl	80220c0 <strncpy>
				break;
 80160f6:	e067      	b.n	80161c8 <pifGps_ParsingNmea+0x7b8>

			case PIF_GPS_NMEA_MSG_ID_VLW:
				break;

			case PIF_GPS_NMEA_MSG_ID_VTG:
				if (param == 1) p_owner->_ground_course = _convertString2Float(string);
 80160f8:	4b19      	ldr	r3, [pc, #100]	; (8016160 <pifGps_ParsingNmea+0x750>)
 80160fa:	781b      	ldrb	r3, [r3, #0]
 80160fc:	2b01      	cmp	r3, #1
 80160fe:	d10a      	bne.n	8016116 <pifGps_ParsingNmea+0x706>
 8016100:	4818      	ldr	r0, [pc, #96]	; (8016164 <pifGps_ParsingNmea+0x754>)
 8016102:	f7ff fa3d 	bl	8015580 <_convertString2Float>
 8016106:	eeb0 7a40 	vmov.f32	s14, s0
 801610a:	eef0 7a60 	vmov.f32	s15, s1
 801610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016110:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
				else if (param == 5) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
				break;
 8016114:	e05a      	b.n	80161cc <pifGps_ParsingNmea+0x7bc>
				else if (param == 5) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
 8016116:	4b12      	ldr	r3, [pc, #72]	; (8016160 <pifGps_ParsingNmea+0x750>)
 8016118:	781b      	ldrb	r3, [r3, #0]
 801611a:	2b05      	cmp	r3, #5
 801611c:	d156      	bne.n	80161cc <pifGps_ParsingNmea+0x7bc>
 801611e:	4811      	ldr	r0, [pc, #68]	; (8016164 <pifGps_ParsingNmea+0x754>)
 8016120:	f7ff fa2e 	bl	8015580 <_convertString2Float>
 8016124:	ec51 0b10 	vmov	r0, r1, d0
 8016128:	a30b      	add	r3, pc, #44	; (adr r3, 8016158 <pifGps_ParsingNmea+0x748>)
 801612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801612e:	f7ea fa21 	bl	8000574 <__aeabi_dmul>
 8016132:	4602      	mov	r2, r0
 8016134:	460b      	mov	r3, r1
 8016136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016138:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
				break;
 801613c:	e046      	b.n	80161cc <pifGps_ParsingNmea+0x7bc>

			case PIF_GPS_NMEA_MSG_ID_ZDA:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 801613e:	4b08      	ldr	r3, [pc, #32]	; (8016160 <pifGps_ParsingNmea+0x750>)
 8016140:	781b      	ldrb	r3, [r3, #0]
 8016142:	2b01      	cmp	r3, #1
 8016144:	d110      	bne.n	8016168 <pifGps_ParsingNmea+0x758>
 8016146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016148:	330e      	adds	r3, #14
 801614a:	4619      	mov	r1, r3
 801614c:	4805      	ldr	r0, [pc, #20]	; (8016164 <pifGps_ParsingNmea+0x754>)
 801614e:	f7ff f995 	bl	801547c <_convertString2Time>
				else if (param == 2) p_owner->_utc.day = _convertString2Interger(string);
				else if (param == 3) p_owner->_utc.month = _convertString2Interger(string);
				else if (param == 4) p_owner->_utc.year = _convertString2Interger(string) - 2000;
				break;
 8016152:	e03d      	b.n	80161d0 <pifGps_ParsingNmea+0x7c0>
 8016154:	f3af 8000 	nop.w
 8016158:	00000000 	.word	0x00000000
 801615c:	40e91e80 	.word	0x40e91e80
 8016160:	20002239 	.word	0x20002239
 8016164:	2000223c 	.word	0x2000223c
				else if (param == 2) p_owner->_utc.day = _convertString2Interger(string);
 8016168:	4b8a      	ldr	r3, [pc, #552]	; (8016394 <pifGps_ParsingNmea+0x984>)
 801616a:	781b      	ldrb	r3, [r3, #0]
 801616c:	2b02      	cmp	r3, #2
 801616e:	d107      	bne.n	8016180 <pifGps_ParsingNmea+0x770>
 8016170:	4889      	ldr	r0, [pc, #548]	; (8016398 <pifGps_ParsingNmea+0x988>)
 8016172:	f7ff fa91 	bl	8015698 <_convertString2Interger>
 8016176:	4603      	mov	r3, r0
 8016178:	b2da      	uxtb	r2, r3
 801617a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801617c:	741a      	strb	r2, [r3, #16]
				break;
 801617e:	e027      	b.n	80161d0 <pifGps_ParsingNmea+0x7c0>
				else if (param == 3) p_owner->_utc.month = _convertString2Interger(string);
 8016180:	4b84      	ldr	r3, [pc, #528]	; (8016394 <pifGps_ParsingNmea+0x984>)
 8016182:	781b      	ldrb	r3, [r3, #0]
 8016184:	2b03      	cmp	r3, #3
 8016186:	d107      	bne.n	8016198 <pifGps_ParsingNmea+0x788>
 8016188:	4883      	ldr	r0, [pc, #524]	; (8016398 <pifGps_ParsingNmea+0x988>)
 801618a:	f7ff fa85 	bl	8015698 <_convertString2Interger>
 801618e:	4603      	mov	r3, r0
 8016190:	b2da      	uxtb	r2, r3
 8016192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016194:	73da      	strb	r2, [r3, #15]
				break;
 8016196:	e01b      	b.n	80161d0 <pifGps_ParsingNmea+0x7c0>
				else if (param == 4) p_owner->_utc.year = _convertString2Interger(string) - 2000;
 8016198:	4b7e      	ldr	r3, [pc, #504]	; (8016394 <pifGps_ParsingNmea+0x984>)
 801619a:	781b      	ldrb	r3, [r3, #0]
 801619c:	2b04      	cmp	r3, #4
 801619e:	d117      	bne.n	80161d0 <pifGps_ParsingNmea+0x7c0>
 80161a0:	487d      	ldr	r0, [pc, #500]	; (8016398 <pifGps_ParsingNmea+0x988>)
 80161a2:	f7ff fa79 	bl	8015698 <_convertString2Interger>
 80161a6:	4603      	mov	r3, r0
 80161a8:	b2db      	uxtb	r3, r3
 80161aa:	3330      	adds	r3, #48	; 0x30
 80161ac:	b2da      	uxtb	r2, r3
 80161ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161b0:	739a      	strb	r2, [r3, #14]
				break;
 80161b2:	e00d      	b.n	80161d0 <pifGps_ParsingNmea+0x7c0>
			}
		}
 80161b4:	bf00      	nop
 80161b6:	e00c      	b.n	80161d2 <pifGps_ParsingNmea+0x7c2>
				break;
 80161b8:	bf00      	nop
 80161ba:	e00a      	b.n	80161d2 <pifGps_ParsingNmea+0x7c2>
				break;
 80161bc:	bf00      	nop
 80161be:	e008      	b.n	80161d2 <pifGps_ParsingNmea+0x7c2>
				break;
 80161c0:	bf00      	nop
 80161c2:	e006      	b.n	80161d2 <pifGps_ParsingNmea+0x7c2>
				break;
 80161c4:	bf00      	nop
 80161c6:	e004      	b.n	80161d2 <pifGps_ParsingNmea+0x7c2>
				break;
 80161c8:	bf00      	nop
 80161ca:	e002      	b.n	80161d2 <pifGps_ParsingNmea+0x7c2>
				break;
 80161cc:	bf00      	nop
 80161ce:	e000      	b.n	80161d2 <pifGps_ParsingNmea+0x7c2>
				break;
 80161d0:	bf00      	nop
		param++;
 80161d2:	4b70      	ldr	r3, [pc, #448]	; (8016394 <pifGps_ParsingNmea+0x984>)
 80161d4:	781b      	ldrb	r3, [r3, #0]
 80161d6:	3301      	adds	r3, #1
 80161d8:	b2da      	uxtb	r2, r3
 80161da:	4b6e      	ldr	r3, [pc, #440]	; (8016394 <pifGps_ParsingNmea+0x984>)
 80161dc:	701a      	strb	r2, [r3, #0]
		if (c == '*') checksum_param = 1;
 80161de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80161e2:	2b2a      	cmp	r3, #42	; 0x2a
 80161e4:	d103      	bne.n	80161ee <pifGps_ParsingNmea+0x7de>
 80161e6:	4b6d      	ldr	r3, [pc, #436]	; (801639c <pifGps_ParsingNmea+0x98c>)
 80161e8:	2201      	movs	r2, #1
 80161ea:	701a      	strb	r2, [r3, #0]
 80161ec:	e007      	b.n	80161fe <pifGps_ParsingNmea+0x7ee>
		else parity ^= c;
 80161ee:	4b6c      	ldr	r3, [pc, #432]	; (80163a0 <pifGps_ParsingNmea+0x990>)
 80161f0:	781a      	ldrb	r2, [r3, #0]
 80161f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80161f6:	4053      	eors	r3, r2
 80161f8:	b2da      	uxtb	r2, r3
 80161fa:	4b69      	ldr	r3, [pc, #420]	; (80163a0 <pifGps_ParsingNmea+0x990>)
 80161fc:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 80161fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016200:	689b      	ldr	r3, [r3, #8]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d018      	beq.n	8016238 <pifGps_ParsingNmea+0x828>
			string[offset++] = c;
 8016206:	4b67      	ldr	r3, [pc, #412]	; (80163a4 <pifGps_ParsingNmea+0x994>)
 8016208:	781b      	ldrb	r3, [r3, #0]
 801620a:	1c5a      	adds	r2, r3, #1
 801620c:	b2d1      	uxtb	r1, r2
 801620e:	4a65      	ldr	r2, [pc, #404]	; (80163a4 <pifGps_ParsingNmea+0x994>)
 8016210:	7011      	strb	r1, [r2, #0]
 8016212:	4619      	mov	r1, r3
 8016214:	4a60      	ldr	r2, [pc, #384]	; (8016398 <pifGps_ParsingNmea+0x988>)
 8016216:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801621a:	5453      	strb	r3, [r2, r1]
			string[offset++] = 0;
 801621c:	4b61      	ldr	r3, [pc, #388]	; (80163a4 <pifGps_ParsingNmea+0x994>)
 801621e:	781b      	ldrb	r3, [r3, #0]
 8016220:	1c5a      	adds	r2, r3, #1
 8016222:	b2d1      	uxtb	r1, r2
 8016224:	4a5f      	ldr	r2, [pc, #380]	; (80163a4 <pifGps_ParsingNmea+0x994>)
 8016226:	7011      	strb	r1, [r2, #0]
 8016228:	461a      	mov	r2, r3
 801622a:	4b5b      	ldr	r3, [pc, #364]	; (8016398 <pifGps_ParsingNmea+0x988>)
 801622c:	2100      	movs	r1, #0
 801622e:	5499      	strb	r1, [r3, r2]
			(p_owner->evt_frame)(string);
 8016230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016232:	689b      	ldr	r3, [r3, #8]
 8016234:	4858      	ldr	r0, [pc, #352]	; (8016398 <pifGps_ParsingNmea+0x988>)
 8016236:	4798      	blx	r3
		}
		offset = 0;
 8016238:	4b5a      	ldr	r3, [pc, #360]	; (80163a4 <pifGps_ParsingNmea+0x994>)
 801623a:	2200      	movs	r2, #0
 801623c:	701a      	strb	r2, [r3, #0]
 801623e:	e0a2      	b.n	8016386 <pifGps_ParsingNmea+0x976>
	}
	else if (c == '\r' || c == '\n') {
 8016240:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016244:	2b0d      	cmp	r3, #13
 8016246:	d003      	beq.n	8016250 <pifGps_ParsingNmea+0x840>
 8016248:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801624c:	2b0a      	cmp	r3, #10
 801624e:	d17f      	bne.n	8016350 <pifGps_ParsingNmea+0x940>
		if (msg_id && checksum_param) { //parity checksum
 8016250:	4b55      	ldr	r3, [pc, #340]	; (80163a8 <pifGps_ParsingNmea+0x998>)
 8016252:	881b      	ldrh	r3, [r3, #0]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d04e      	beq.n	80162f6 <pifGps_ParsingNmea+0x8e6>
 8016258:	4b50      	ldr	r3, [pc, #320]	; (801639c <pifGps_ParsingNmea+0x98c>)
 801625a:	781b      	ldrb	r3, [r3, #0]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d04a      	beq.n	80162f6 <pifGps_ParsingNmea+0x8e6>
			uint8_t checksum = _convertAscii2Hex(string[0]);
 8016260:	4b4d      	ldr	r3, [pc, #308]	; (8016398 <pifGps_ParsingNmea+0x988>)
 8016262:	781b      	ldrb	r3, [r3, #0]
 8016264:	4618      	mov	r0, r3
 8016266:	f7ff faf1 	bl	801584c <_convertAscii2Hex>
 801626a:	4603      	mov	r3, r0
 801626c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			checksum <<= 4;
 8016270:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8016274:	011b      	lsls	r3, r3, #4
 8016276:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			checksum += _convertAscii2Hex(string[1]);
 801627a:	4b47      	ldr	r3, [pc, #284]	; (8016398 <pifGps_ParsingNmea+0x988>)
 801627c:	785b      	ldrb	r3, [r3, #1]
 801627e:	4618      	mov	r0, r3
 8016280:	f7ff fae4 	bl	801584c <_convertAscii2Hex>
 8016284:	4603      	mov	r3, r0
 8016286:	461a      	mov	r2, r3
 8016288:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801628c:	4413      	add	r3, r2
 801628e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			if (checksum == parity) {
 8016292:	4b43      	ldr	r3, [pc, #268]	; (80163a0 <pifGps_ParsingNmea+0x990>)
 8016294:	781b      	ldrb	r3, [r3, #0]
 8016296:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 801629a:	429a      	cmp	r2, r3
 801629c:	d118      	bne.n	80162d0 <pifGps_ParsingNmea+0x8c0>
				if (msg_id == p_owner->evt_nmea_msg_id) frame_ok = 1;
 801629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162a0:	781b      	ldrb	r3, [r3, #0]
 80162a2:	b29a      	uxth	r2, r3
 80162a4:	4b40      	ldr	r3, [pc, #256]	; (80163a8 <pifGps_ParsingNmea+0x998>)
 80162a6:	881b      	ldrh	r3, [r3, #0]
 80162a8:	429a      	cmp	r2, r3
 80162aa:	d102      	bne.n	80162b2 <pifGps_ParsingNmea+0x8a2>
 80162ac:	2301      	movs	r3, #1
 80162ae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				if (msg_id == PIF_GPS_NMEA_MSG_ID_TXT && p_owner->__evt_text) {
 80162b2:	4b3d      	ldr	r3, [pc, #244]	; (80163a8 <pifGps_ParsingNmea+0x998>)
 80162b4:	881b      	ldrh	r3, [r3, #0]
 80162b6:	2b0c      	cmp	r3, #12
 80162b8:	d11a      	bne.n	80162f0 <pifGps_ParsingNmea+0x8e0>
 80162ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d016      	beq.n	80162f0 <pifGps_ParsingNmea+0x8e0>
					(p_owner->__evt_text)(p_owner->__p_txt);
 80162c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80162c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80162c8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80162ca:	4610      	mov	r0, r2
 80162cc:	4798      	blx	r3
 80162ce:	e00f      	b.n	80162f0 <pifGps_ParsingNmea+0x8e0>
				}
			}
#ifndef __PIF_NO_LOG__
			else {
				pifLog_Printf(LT_ERROR, "GN(%u): MsgId=%u CS=%x:%x", __LINE__, msg_id, checksum, parity);
 80162d0:	4b35      	ldr	r3, [pc, #212]	; (80163a8 <pifGps_ParsingNmea+0x998>)
 80162d2:	881b      	ldrh	r3, [r3, #0]
 80162d4:	4619      	mov	r1, r3
 80162d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80162da:	4a31      	ldr	r2, [pc, #196]	; (80163a0 <pifGps_ParsingNmea+0x990>)
 80162dc:	7812      	ldrb	r2, [r2, #0]
 80162de:	9201      	str	r2, [sp, #4]
 80162e0:	9300      	str	r3, [sp, #0]
 80162e2:	460b      	mov	r3, r1
 80162e4:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 80162e8:	4930      	ldr	r1, [pc, #192]	; (80163ac <pifGps_ParsingNmea+0x99c>)
 80162ea:	2004      	movs	r0, #4
 80162ec:	f7fd f952 	bl	8013594 <pifLog_Printf>
			}
#endif
			rtn = TRUE;
 80162f0:	2301      	movs	r3, #1
 80162f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
		checksum_param = 0;
 80162f6:	4b29      	ldr	r3, [pc, #164]	; (801639c <pifGps_ParsingNmea+0x98c>)
 80162f8:	2200      	movs	r2, #0
 80162fa:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 80162fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162fe:	689b      	ldr	r3, [r3, #8]
 8016300:	2b00      	cmp	r3, #0
 8016302:	d018      	beq.n	8016336 <pifGps_ParsingNmea+0x926>
			string[offset++] = c;
 8016304:	4b27      	ldr	r3, [pc, #156]	; (80163a4 <pifGps_ParsingNmea+0x994>)
 8016306:	781b      	ldrb	r3, [r3, #0]
 8016308:	1c5a      	adds	r2, r3, #1
 801630a:	b2d1      	uxtb	r1, r2
 801630c:	4a25      	ldr	r2, [pc, #148]	; (80163a4 <pifGps_ParsingNmea+0x994>)
 801630e:	7011      	strb	r1, [r2, #0]
 8016310:	4619      	mov	r1, r3
 8016312:	4a21      	ldr	r2, [pc, #132]	; (8016398 <pifGps_ParsingNmea+0x988>)
 8016314:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016318:	5453      	strb	r3, [r2, r1]
			string[offset++] = 0;
 801631a:	4b22      	ldr	r3, [pc, #136]	; (80163a4 <pifGps_ParsingNmea+0x994>)
 801631c:	781b      	ldrb	r3, [r3, #0]
 801631e:	1c5a      	adds	r2, r3, #1
 8016320:	b2d1      	uxtb	r1, r2
 8016322:	4a20      	ldr	r2, [pc, #128]	; (80163a4 <pifGps_ParsingNmea+0x994>)
 8016324:	7011      	strb	r1, [r2, #0]
 8016326:	461a      	mov	r2, r3
 8016328:	4b1b      	ldr	r3, [pc, #108]	; (8016398 <pifGps_ParsingNmea+0x988>)
 801632a:	2100      	movs	r1, #0
 801632c:	5499      	strb	r1, [r3, r2]
			(p_owner->evt_frame)(string);
 801632e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016330:	689b      	ldr	r3, [r3, #8]
 8016332:	4819      	ldr	r0, [pc, #100]	; (8016398 <pifGps_ParsingNmea+0x988>)
 8016334:	4798      	blx	r3
		}
		offset = 0;
 8016336:	4b1b      	ldr	r3, [pc, #108]	; (80163a4 <pifGps_ParsingNmea+0x994>)
 8016338:	2200      	movs	r2, #0
 801633a:	701a      	strb	r2, [r3, #0]
		if (frame_ok) {
 801633c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8016340:	2b00      	cmp	r3, #0
 8016342:	d002      	beq.n	801634a <pifGps_ParsingNmea+0x93a>
			pifGps_SendEvent(p_owner);
 8016344:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016346:	f7ff fb41 	bl	80159cc <pifGps_SendEvent>
		}
		return rtn;
 801634a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801634e:	e01b      	b.n	8016388 <pifGps_ParsingNmea+0x978>
	}
	else {
		if (offset < PIF_GPS_NMEA_VALUE_SIZE) string[offset++] = c;
 8016350:	4b14      	ldr	r3, [pc, #80]	; (80163a4 <pifGps_ParsingNmea+0x994>)
 8016352:	781b      	ldrb	r3, [r3, #0]
 8016354:	2b1f      	cmp	r3, #31
 8016356:	d80a      	bhi.n	801636e <pifGps_ParsingNmea+0x95e>
 8016358:	4b12      	ldr	r3, [pc, #72]	; (80163a4 <pifGps_ParsingNmea+0x994>)
 801635a:	781b      	ldrb	r3, [r3, #0]
 801635c:	1c5a      	adds	r2, r3, #1
 801635e:	b2d1      	uxtb	r1, r2
 8016360:	4a10      	ldr	r2, [pc, #64]	; (80163a4 <pifGps_ParsingNmea+0x994>)
 8016362:	7011      	strb	r1, [r2, #0]
 8016364:	4619      	mov	r1, r3
 8016366:	4a0c      	ldr	r2, [pc, #48]	; (8016398 <pifGps_ParsingNmea+0x988>)
 8016368:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801636c:	5453      	strb	r3, [r2, r1]
		if (!checksum_param) parity ^= c;
 801636e:	4b0b      	ldr	r3, [pc, #44]	; (801639c <pifGps_ParsingNmea+0x98c>)
 8016370:	781b      	ldrb	r3, [r3, #0]
 8016372:	2b00      	cmp	r3, #0
 8016374:	d107      	bne.n	8016386 <pifGps_ParsingNmea+0x976>
 8016376:	4b0a      	ldr	r3, [pc, #40]	; (80163a0 <pifGps_ParsingNmea+0x990>)
 8016378:	781a      	ldrb	r2, [r3, #0]
 801637a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801637e:	4053      	eors	r3, r2
 8016380:	b2da      	uxtb	r2, r3
 8016382:	4b07      	ldr	r3, [pc, #28]	; (80163a0 <pifGps_ParsingNmea+0x990>)
 8016384:	701a      	strb	r2, [r3, #0]
	}
	return FALSE;
 8016386:	2300      	movs	r3, #0
}
 8016388:	4618      	mov	r0, r3
 801638a:	3738      	adds	r7, #56	; 0x38
 801638c:	46bd      	mov	sp, r7
 801638e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016392:	bf00      	nop
 8016394:	20002239 	.word	0x20002239
 8016398:	2000223c 	.word	0x2000223c
 801639c:	2000225e 	.word	0x2000225e
 80163a0:	2000223b 	.word	0x2000223b
 80163a4:	2000223a 	.word	0x2000223a
 80163a8:	2000225c 	.word	0x2000225c
 80163ac:	08026828 	.word	0x08026828

080163b0 <_evtParsing>:
#include "gps/pif_gps_nmea.h"

static void _evtParsing(void* p_client, PifActCommReceiveData act_receive_data)
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b084      	sub	sp, #16
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	6078      	str	r0, [r7, #4]
 80163b8:	6039      	str	r1, [r7, #0]
	PifGpsNmea *p_owner = (PifGpsNmea *)p_client;
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	60fb      	str	r3, [r7, #12]
	uint8_t c;

	while ((*act_receive_data)(p_owner->__p_comm, &c)) {
 80163be:	e005      	b.n	80163cc <_evtParsing+0x1c>
		pifGps_ParsingNmea(&p_owner->_gps, c);
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	7afa      	ldrb	r2, [r7, #11]
 80163c4:	4611      	mov	r1, r2
 80163c6:	4618      	mov	r0, r3
 80163c8:	f7ff fb22 	bl	8015a10 <pifGps_ParsingNmea>
	while ((*act_receive_data)(p_owner->__p_comm, &c)) {
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80163d0:	f107 010b 	add.w	r1, r7, #11
 80163d4:	683b      	ldr	r3, [r7, #0]
 80163d6:	4610      	mov	r0, r2
 80163d8:	4798      	blx	r3
 80163da:	4603      	mov	r3, r0
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d1ef      	bne.n	80163c0 <_evtParsing+0x10>
	}
}
 80163e0:	bf00      	nop
 80163e2:	bf00      	nop
 80163e4:	3710      	adds	r7, #16
 80163e6:	46bd      	mov	sp, r7
 80163e8:	bd80      	pop	{r7, pc}
	...

080163ec <pifGpsNmea_Init>:

BOOL pifGpsNmea_Init(PifGpsNmea* p_owner, PifId id)
{
 80163ec:	b580      	push	{r7, lr}
 80163ee:	b082      	sub	sp, #8
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	6078      	str	r0, [r7, #4]
 80163f4:	460b      	mov	r3, r1
 80163f6:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d104      	bne.n	8016408 <pifGpsNmea_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 80163fe:	4b0f      	ldr	r3, [pc, #60]	; (801643c <pifGpsNmea_Init+0x50>)
 8016400:	2201      	movs	r2, #1
 8016402:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8016404:	2300      	movs	r3, #0
 8016406:	e014      	b.n	8016432 <pifGpsNmea_Init+0x46>
	}

	memset(p_owner, 0, sizeof(PifGpsNmea));
 8016408:	2270      	movs	r2, #112	; 0x70
 801640a:	2100      	movs	r1, #0
 801640c:	6878      	ldr	r0, [r7, #4]
 801640e:	f00b fce9 	bl	8021de4 <memset>

    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	887a      	ldrh	r2, [r7, #2]
 8016416:	4611      	mov	r1, r2
 8016418:	4618      	mov	r0, r3
 801641a:	f7ff fa55 	bl	80158c8 <pifGps_Init>
 801641e:	4603      	mov	r3, r0
 8016420:	2b00      	cmp	r3, #0
 8016422:	d001      	beq.n	8016428 <pifGpsNmea_Init+0x3c>
    return TRUE;
 8016424:	2301      	movs	r3, #1
 8016426:	e004      	b.n	8016432 <pifGpsNmea_Init+0x46>
    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 8016428:	bf00      	nop

fail:
	pifGpsNmea_Clear(p_owner);
 801642a:	6878      	ldr	r0, [r7, #4]
 801642c:	f000 f808 	bl	8016440 <pifGpsNmea_Clear>
    return FALSE;
 8016430:	2300      	movs	r3, #0
}
 8016432:	4618      	mov	r0, r3
 8016434:	3708      	adds	r7, #8
 8016436:	46bd      	mov	sp, r7
 8016438:	bd80      	pop	{r7, pc}
 801643a:	bf00      	nop
 801643c:	200020d1 	.word	0x200020d1

08016440 <pifGpsNmea_Clear>:

void pifGpsNmea_Clear(PifGpsNmea* p_owner)
{
 8016440:	b580      	push	{r7, lr}
 8016442:	b082      	sub	sp, #8
 8016444:	af00      	add	r7, sp, #0
 8016446:	6078      	str	r0, [r7, #4]
	pifGps_Clear(&p_owner->_gps);
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	4618      	mov	r0, r3
 801644c:	f7ff fa66 	bl	801591c <pifGps_Clear>
}
 8016450:	bf00      	nop
 8016452:	3708      	adds	r7, #8
 8016454:	46bd      	mov	sp, r7
 8016456:	bd80      	pop	{r7, pc}

08016458 <pifGpsNmea_AttachComm>:

void pifGpsNmea_AttachComm(PifGpsNmea* p_owner, PifComm* p_comm)
{
 8016458:	b580      	push	{r7, lr}
 801645a:	b082      	sub	sp, #8
 801645c:	af00      	add	r7, sp, #0
 801645e:	6078      	str	r0, [r7, #4]
 8016460:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	683a      	ldr	r2, [r7, #0]
 8016466:	669a      	str	r2, [r3, #104]	; 0x68
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, NULL);
 8016468:	2300      	movs	r3, #0
 801646a:	4a04      	ldr	r2, [pc, #16]	; (801647c <pifGpsNmea_AttachComm+0x24>)
 801646c:	6879      	ldr	r1, [r7, #4]
 801646e:	6838      	ldr	r0, [r7, #0]
 8016470:	f7fb fe7e 	bl	8012170 <pifComm_AttachClient>
}
 8016474:	bf00      	nop
 8016476:	3708      	adds	r7, #8
 8016478:	46bd      	mov	sp, r7
 801647a:	bd80      	pop	{r7, pc}
 801647c:	080163b1 	.word	0x080163b1

08016480 <_checksumUbx>:

#endif


static uint16_t _checksumUbx(uint8_t* p_header, uint8_t* p_payload, uint16_t len)
{
 8016480:	b480      	push	{r7}
 8016482:	b087      	sub	sp, #28
 8016484:	af00      	add	r7, sp, #0
 8016486:	60f8      	str	r0, [r7, #12]
 8016488:	60b9      	str	r1, [r7, #8]
 801648a:	4613      	mov	r3, r2
 801648c:	80fb      	strh	r3, [r7, #6]
	uint8_t ck_a = 0, ck_b = 0;
 801648e:	2300      	movs	r3, #0
 8016490:	75fb      	strb	r3, [r7, #23]
 8016492:	2300      	movs	r3, #0
 8016494:	75bb      	strb	r3, [r7, #22]
	uint16_t i;

	for (i = 0; i < 4; i++) {
 8016496:	2300      	movs	r3, #0
 8016498:	82bb      	strh	r3, [r7, #20]
 801649a:	e00d      	b.n	80164b8 <_checksumUbx+0x38>
		ck_a += p_header[i];
 801649c:	8abb      	ldrh	r3, [r7, #20]
 801649e:	68fa      	ldr	r2, [r7, #12]
 80164a0:	4413      	add	r3, r2
 80164a2:	781a      	ldrb	r2, [r3, #0]
 80164a4:	7dfb      	ldrb	r3, [r7, #23]
 80164a6:	4413      	add	r3, r2
 80164a8:	75fb      	strb	r3, [r7, #23]
		ck_b += ck_a;
 80164aa:	7dba      	ldrb	r2, [r7, #22]
 80164ac:	7dfb      	ldrb	r3, [r7, #23]
 80164ae:	4413      	add	r3, r2
 80164b0:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < 4; i++) {
 80164b2:	8abb      	ldrh	r3, [r7, #20]
 80164b4:	3301      	adds	r3, #1
 80164b6:	82bb      	strh	r3, [r7, #20]
 80164b8:	8abb      	ldrh	r3, [r7, #20]
 80164ba:	2b03      	cmp	r3, #3
 80164bc:	d9ee      	bls.n	801649c <_checksumUbx+0x1c>
	}
	for (i = 0; i < len; i++) {
 80164be:	2300      	movs	r3, #0
 80164c0:	82bb      	strh	r3, [r7, #20]
 80164c2:	e00d      	b.n	80164e0 <_checksumUbx+0x60>
		ck_a += p_payload[i];
 80164c4:	8abb      	ldrh	r3, [r7, #20]
 80164c6:	68ba      	ldr	r2, [r7, #8]
 80164c8:	4413      	add	r3, r2
 80164ca:	781a      	ldrb	r2, [r3, #0]
 80164cc:	7dfb      	ldrb	r3, [r7, #23]
 80164ce:	4413      	add	r3, r2
 80164d0:	75fb      	strb	r3, [r7, #23]
		ck_b += ck_a;
 80164d2:	7dba      	ldrb	r2, [r7, #22]
 80164d4:	7dfb      	ldrb	r3, [r7, #23]
 80164d6:	4413      	add	r3, r2
 80164d8:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < len; i++) {
 80164da:	8abb      	ldrh	r3, [r7, #20]
 80164dc:	3301      	adds	r3, #1
 80164de:	82bb      	strh	r3, [r7, #20]
 80164e0:	8aba      	ldrh	r2, [r7, #20]
 80164e2:	88fb      	ldrh	r3, [r7, #6]
 80164e4:	429a      	cmp	r2, r3
 80164e6:	d3ed      	bcc.n	80164c4 <_checksumUbx+0x44>
	}
	return ck_a + (ck_b << 8);
 80164e8:	7dfb      	ldrb	r3, [r7, #23]
 80164ea:	b29a      	uxth	r2, r3
 80164ec:	7dbb      	ldrb	r3, [r7, #22]
 80164ee:	b29b      	uxth	r3, r3
 80164f0:	021b      	lsls	r3, r3, #8
 80164f2:	b29b      	uxth	r3, r3
 80164f4:	4413      	add	r3, r2
 80164f6:	b29b      	uxth	r3, r3
}
 80164f8:	4618      	mov	r0, r3
 80164fa:	371c      	adds	r7, #28
 80164fc:	46bd      	mov	sp, r7
 80164fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016502:	4770      	bx	lr

08016504 <_parsingPacket>:

static void _parsingPacket(PifGpsUblox *p_owner, PifActCommReceiveData act_receive_data)
{
 8016504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016506:	b08d      	sub	sp, #52	; 0x34
 8016508:	af06      	add	r7, sp, #24
 801650a:	6078      	str	r0, [r7, #4]
 801650c:	6039      	str	r1, [r7, #0]
	PifGpsUbxPacket* p_packet = &p_owner->__rx.packet;
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	33cc      	adds	r3, #204	; 0xcc
 8016512:	60fb      	str	r3, [r7, #12]
	uint8_t pkt_err;
	int line;
	static uint8_t pre_err = PKT_ERR_NONE;
#endif

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8016514:	e0da      	b.n	80166cc <_parsingPacket+0x1c8>
		switch (p_owner->__rx.state) {
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 801651c:	2b09      	cmp	r3, #9
 801651e:	f200 80d4 	bhi.w	80166ca <_parsingPacket+0x1c6>
 8016522:	a201      	add	r2, pc, #4	; (adr r2, 8016528 <_parsingPacket+0x24>)
 8016524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016528:	08016551 	.word	0x08016551
 801652c:	0801658d 	.word	0x0801658d
 8016530:	080165a7 	.word	0x080165a7
 8016534:	080165b7 	.word	0x080165b7
 8016538:	080165c7 	.word	0x080165c7
 801653c:	080165d9 	.word	0x080165d9
 8016540:	08016615 	.word	0x08016615
 8016544:	0801664f 	.word	0x0801664f
 8016548:	08016663 	.word	0x08016663
 801654c:	080166ad 	.word	0x080166ad
		case GURS_SYNC_CHAR_1:
			if (data == 0xB5) {
 8016550:	7afb      	ldrb	r3, [r7, #11]
 8016552:	2bb5      	cmp	r3, #181	; 0xb5
 8016554:	d107      	bne.n	8016566 <_parsingPacket+0x62>
				p_owner->__rx.state = GURS_SYNC_CHAR_2;
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	2201      	movs	r2, #1
 801655a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
#ifndef __PIF_NO_LOG__
				pre_err = PKT_ERR_NONE;
 801655e:	4b85      	ldr	r3, [pc, #532]	; (8016774 <_parsingPacket+0x270>)
 8016560:	2204      	movs	r2, #4
 8016562:	701a      	strb	r2, [r3, #0]
 8016564:	e0b2      	b.n	80166cc <_parsingPacket+0x1c8>
#endif
			}
			else if (pifGps_ParsingNmea(&p_owner->_gps, data)) {
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	3310      	adds	r3, #16
 801656a:	7afa      	ldrb	r2, [r7, #11]
 801656c:	4611      	mov	r1, r2
 801656e:	4618      	mov	r0, r3
 8016570:	f7ff fa4e 	bl	8015a10 <pifGps_ParsingNmea>
 8016574:	4603      	mov	r3, r0
 8016576:	2b00      	cmp	r3, #0
 8016578:	f000 80a8 	beq.w	80166cc <_parsingPacket+0x1c8>
				p_owner->__rx.state = GURS_NMEA;
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	2209      	movs	r2, #9
 8016580:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
#ifndef __PIF_NO_LOG__
				pre_err = PKT_ERR_NONE;
 8016584:	4b7b      	ldr	r3, [pc, #492]	; (8016774 <_parsingPacket+0x270>)
 8016586:	2204      	movs	r2, #4
 8016588:	701a      	strb	r2, [r3, #0]
#endif
			}
			break;
 801658a:	e09f      	b.n	80166cc <_parsingPacket+0x1c8>

		case GURS_SYNC_CHAR_2:
			if (data == 0x62) {
 801658c:	7afb      	ldrb	r3, [r7, #11]
 801658e:	2b62      	cmp	r3, #98	; 0x62
 8016590:	d104      	bne.n	801659c <_parsingPacket+0x98>
				p_owner->__rx.state = GURS_CLASS;
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	2202      	movs	r2, #2
 8016596:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				pkt_err = PKT_ERR_INVALID_DATA;
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 801659a:	e097      	b.n	80166cc <_parsingPacket+0x1c8>
				pkt_err = PKT_ERR_INVALID_DATA;
 801659c:	2301      	movs	r3, #1
 801659e:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 80165a0:	2361      	movs	r3, #97	; 0x61
 80165a2:	613b      	str	r3, [r7, #16]
				goto fail;
 80165a4:	e09f      	b.n	80166e6 <_parsingPacket+0x1e2>

		case GURS_CLASS:
			p_packet->class_id = data;
 80165a6:	7afa      	ldrb	r2, [r7, #11]
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.state = GURS_ID;
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	2203      	movs	r2, #3
 80165b0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 80165b4:	e08a      	b.n	80166cc <_parsingPacket+0x1c8>

		case GURS_ID:
			p_packet->msg_id = data;
 80165b6:	7afa      	ldrb	r2, [r7, #11]
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	705a      	strb	r2, [r3, #1]
			p_owner->__rx.state = GURS_LENGTH_LOW;
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	2204      	movs	r2, #4
 80165c0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 80165c4:	e082      	b.n	80166cc <_parsingPacket+0x1c8>

		case GURS_LENGTH_LOW:
			p_packet->length = data;
 80165c6:	7afb      	ldrb	r3, [r7, #11]
 80165c8:	b29a      	uxth	r2, r3
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	805a      	strh	r2, [r3, #2]
			p_owner->__rx.state = GURS_LENGTH_HIGH;
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	2205      	movs	r2, #5
 80165d2:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 80165d6:	e079      	b.n	80166cc <_parsingPacket+0x1c8>

		case GURS_LENGTH_HIGH:
			p_packet->length |= data << 8;
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	885b      	ldrh	r3, [r3, #2]
 80165dc:	b21a      	sxth	r2, r3
 80165de:	7afb      	ldrb	r3, [r7, #11]
 80165e0:	021b      	lsls	r3, r3, #8
 80165e2:	b21b      	sxth	r3, r3
 80165e4:	4313      	orrs	r3, r2
 80165e6:	b21b      	sxth	r3, r3
 80165e8:	b29a      	uxth	r2, r3
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	805a      	strh	r2, [r3, #2]
			if (p_packet->length < sizeof(PifGpsUbxPacket) - 4) {
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	885b      	ldrh	r3, [r3, #2]
 80165f2:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 80165f6:	d208      	bcs.n	801660a <_parsingPacket+0x106>
				p_owner->__rx.payload_count = 0;
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	2200      	movs	r2, #0
 80165fc:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				p_owner->__rx.state = GURS_PAYLOAD;
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	2206      	movs	r2, #6
 8016604:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				pkt_err = PKT_ERR_BIG_LENGHT;
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8016608:	e060      	b.n	80166cc <_parsingPacket+0x1c8>
				pkt_err = PKT_ERR_BIG_LENGHT;
 801660a:	2300      	movs	r3, #0
 801660c:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 801660e:	237f      	movs	r3, #127	; 0x7f
 8016610:	613b      	str	r3, [r7, #16]
				goto fail;
 8016612:	e068      	b.n	80166e6 <_parsingPacket+0x1e2>

		case GURS_PAYLOAD:
			p_packet->payload.bytes[p_owner->__rx.payload_count] = data;
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 801661a:	4619      	mov	r1, r3
 801661c:	7afa      	ldrb	r2, [r7, #11]
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	440b      	add	r3, r1
 8016622:	711a      	strb	r2, [r3, #4]
			p_owner->__rx.payload_count++;
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 801662a:	3301      	adds	r3, #1
 801662c:	b2da      	uxtb	r2, r3
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			if (p_owner->__rx.payload_count >= p_packet->length) {
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 801663a:	b29a      	uxth	r2, r3
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	885b      	ldrh	r3, [r3, #2]
 8016640:	429a      	cmp	r2, r3
 8016642:	d343      	bcc.n	80166cc <_parsingPacket+0x1c8>
				p_owner->__rx.state = GURS_CK_A;
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	2207      	movs	r2, #7
 8016648:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			}
			break;
 801664c:	e03e      	b.n	80166cc <_parsingPacket+0x1c8>

		case GURS_CK_A:
			p_owner->__rx.checksum = data;
 801664e:	7afb      	ldrb	r3, [r7, #11]
 8016650:	b29a      	uxth	r2, r3
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
			p_owner->__rx.state = GURS_CK_B;
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	2208      	movs	r2, #8
 801665c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 8016660:	e034      	b.n	80166cc <_parsingPacket+0x1c8>

		case GURS_CK_B:
			p_owner->__rx.checksum |= data << 8;
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	f8b3 3258 	ldrh.w	r3, [r3, #600]	; 0x258
 8016668:	b21a      	sxth	r2, r3
 801666a:	7afb      	ldrb	r3, [r7, #11]
 801666c:	021b      	lsls	r3, r3, #8
 801666e:	b21b      	sxth	r3, r3
 8016670:	4313      	orrs	r3, r2
 8016672:	b21b      	sxth	r3, r3
 8016674:	b29a      	uxth	r2, r3
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
			if (p_owner->__rx.checksum == _checksumUbx((uint8_t*)p_packet, p_packet->payload.bytes, p_packet->length)) {
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	f8b3 4258 	ldrh.w	r4, [r3, #600]	; 0x258
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	1d19      	adds	r1, r3, #4
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	885b      	ldrh	r3, [r3, #2]
 801668a:	461a      	mov	r2, r3
 801668c:	68f8      	ldr	r0, [r7, #12]
 801668e:	f7ff fef7 	bl	8016480 <_checksumUbx>
 8016692:	4603      	mov	r3, r0
 8016694:	429c      	cmp	r4, r3
 8016696:	d104      	bne.n	80166a2 <_parsingPacket+0x19e>
				p_owner->__rx.state = GURS_DONE;
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	220a      	movs	r2, #10
 801669c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				return;
 80166a0:	e064      	b.n	801676c <_parsingPacket+0x268>
			}
			else {
#ifndef __PIF_NO_LOG__
				pkt_err = PKT_ERR_WRONG_CRC;
 80166a2:	2302      	movs	r3, #2
 80166a4:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 80166a6:	239b      	movs	r3, #155	; 0x9b
 80166a8:	613b      	str	r3, [r7, #16]
#endif
				goto fail;
 80166aa:	e01c      	b.n	80166e6 <_parsingPacket+0x1e2>
			}
			break;

		case GURS_NMEA:
			if (pifGps_ParsingNmea(&p_owner->_gps, data))	{
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	3310      	adds	r3, #16
 80166b0:	7afa      	ldrb	r2, [r7, #11]
 80166b2:	4611      	mov	r1, r2
 80166b4:	4618      	mov	r0, r3
 80166b6:	f7ff f9ab 	bl	8015a10 <pifGps_ParsingNmea>
 80166ba:	4603      	mov	r3, r0
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d005      	beq.n	80166cc <_parsingPacket+0x1c8>
				p_owner->__rx.state = GURS_SYNC_CHAR_1;
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	2200      	movs	r2, #0
 80166c4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				return;
 80166c8:	e050      	b.n	801676c <_parsingPacket+0x268>
			}
			break;

		default:
			break;
 80166ca:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80166d2:	f107 010b 	add.w	r1, r7, #11
 80166d6:	683b      	ldr	r3, [r7, #0]
 80166d8:	4610      	mov	r0, r2
 80166da:	4798      	blx	r3
 80166dc:	4603      	mov	r3, r0
 80166de:	2b00      	cmp	r3, #0
 80166e0:	f47f af19 	bne.w	8016516 <_parsingPacket+0x12>
		}
	}
	return;
 80166e4:	e042      	b.n	801676c <_parsingPacket+0x268>

fail:
#ifndef __PIF_NO_LOG__
	if (pkt_err != pre_err) {
 80166e6:	4b23      	ldr	r3, [pc, #140]	; (8016774 <_parsingPacket+0x270>)
 80166e8:	781b      	ldrb	r3, [r3, #0]
 80166ea:	7dfa      	ldrb	r2, [r7, #23]
 80166ec:	429a      	cmp	r2, r3
 80166ee:	d039      	beq.n	8016764 <_parsingPacket+0x260>
		if (p_owner->__rx.state) {
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d021      	beq.n	801673e <_parsingPacket+0x23a>
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	8b9b      	ldrh	r3, [r3, #28]
 80166fe:	461e      	mov	r6, r3
 8016700:	7dfb      	ldrb	r3, [r7, #23]
 8016702:	4a1d      	ldr	r2, [pc, #116]	; (8016778 <_parsingPacket+0x274>)
 8016704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016708:	7afa      	ldrb	r2, [r7, #11]
 801670a:	4611      	mov	r1, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 801670c:	687a      	ldr	r2, [r7, #4]
 801670e:	f892 20c8 	ldrb.w	r2, [r2, #200]	; 0xc8
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8016712:	4610      	mov	r0, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 8016714:	68fa      	ldr	r2, [r7, #12]
 8016716:	7812      	ldrb	r2, [r2, #0]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8016718:	4614      	mov	r4, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 801671a:	68fa      	ldr	r2, [r7, #12]
 801671c:	7852      	ldrb	r2, [r2, #1]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 801671e:	4615      	mov	r5, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 8016720:	68fa      	ldr	r2, [r7, #12]
 8016722:	8852      	ldrh	r2, [r2, #2]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8016724:	9205      	str	r2, [sp, #20]
 8016726:	9504      	str	r5, [sp, #16]
 8016728:	9403      	str	r4, [sp, #12]
 801672a:	9002      	str	r0, [sp, #8]
 801672c:	9101      	str	r1, [sp, #4]
 801672e:	9300      	str	r3, [sp, #0]
 8016730:	4633      	mov	r3, r6
 8016732:	693a      	ldr	r2, [r7, #16]
 8016734:	4911      	ldr	r1, [pc, #68]	; (801677c <_parsingPacket+0x278>)
 8016736:	2004      	movs	r0, #4
 8016738:	f7fc ff2c 	bl	8013594 <pifLog_Printf>
 801673c:	e00f      	b.n	801675e <_parsingPacket+0x25a>
		}
		else {
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh", line, p_owner->_gps._id, kPktErr[pkt_err], data);
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	8b9b      	ldrh	r3, [r3, #28]
 8016742:	4619      	mov	r1, r3
 8016744:	7dfb      	ldrb	r3, [r7, #23]
 8016746:	4a0c      	ldr	r2, [pc, #48]	; (8016778 <_parsingPacket+0x274>)
 8016748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801674c:	7afa      	ldrb	r2, [r7, #11]
 801674e:	9201      	str	r2, [sp, #4]
 8016750:	9300      	str	r3, [sp, #0]
 8016752:	460b      	mov	r3, r1
 8016754:	693a      	ldr	r2, [r7, #16]
 8016756:	490a      	ldr	r1, [pc, #40]	; (8016780 <_parsingPacket+0x27c>)
 8016758:	2004      	movs	r0, #4
 801675a:	f7fc ff1b 	bl	8013594 <pifLog_Printf>
		}
		pre_err = pkt_err;
 801675e:	4a05      	ldr	r2, [pc, #20]	; (8016774 <_parsingPacket+0x270>)
 8016760:	7dfb      	ldrb	r3, [r7, #23]
 8016762:	7013      	strb	r3, [r2, #0]
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x %x %x %x", p_packet->payload.bytes[0], p_packet->payload.bytes[1],	p_packet->payload.bytes[2],
			p_packet->payload.bytes[3], p_packet->payload.bytes[4], p_packet->payload.bytes[5], p_packet->payload.bytes[6], p_packet->payload.bytes[7]);
#endif
#endif

	p_owner->__rx.state = GURS_SYNC_CHAR_1;
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	2200      	movs	r2, #0
 8016768:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 801676c:	371c      	adds	r7, #28
 801676e:	46bd      	mov	sp, r7
 8016770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016772:	bf00      	nop
 8016774:	2000007c 	.word	0x2000007c
 8016778:	2000006c 	.word	0x2000006c
 801677c:	08026878 	.word	0x08026878
 8016780:	080268a8 	.word	0x080268a8
 8016784:	00000000 	.word	0x00000000

08016788 <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 8016788:	b580      	push	{r7, lr}
 801678a:	b08c      	sub	sp, #48	; 0x30
 801678c:	af04      	add	r7, sp, #16
 801678e:	6078      	str	r0, [r7, #4]
 8016790:	6039      	str	r1, [r7, #0]
	PifGpsUblox *p_owner = (PifGpsUblox *)p_client;
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	617b      	str	r3, [r7, #20]
	PifGpsUbxPacket* p_packet = &p_owner->__rx.packet;
 8016796:	697b      	ldr	r3, [r7, #20]
 8016798:	33cc      	adds	r3, #204	; 0xcc
 801679a:	613b      	str	r3, [r7, #16]
	PifGps *p_parent = &p_owner->_gps;
 801679c:	697b      	ldr	r3, [r7, #20]
 801679e:	3310      	adds	r3, #16
 80167a0:	60fb      	str	r3, [r7, #12]
    int i;
    static BOOL _new_position = FALSE;
    static BOOL next_fix = FALSE;
    static BOOL _new_speed = FALSE;
    BOOL error = FALSE;
 80167a2:	2300      	movs	r3, #0
 80167a4:	76fb      	strb	r3, [r7, #27]

    if (!p_owner->_gps.evt_receive) return;
 80167a6:	697b      	ldr	r3, [r7, #20]
 80167a8:	695b      	ldr	r3, [r3, #20]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	f000 826b 	beq.w	8016c86 <_evtParsing+0x4fe>

    if (p_owner->__rx.state < GURS_DONE) {
 80167b0:	697b      	ldr	r3, [r7, #20]
 80167b2:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80167b6:	2b09      	cmp	r3, #9
 80167b8:	d803      	bhi.n	80167c2 <_evtParsing+0x3a>
    	_parsingPacket(p_owner, act_receive_data);
 80167ba:	6839      	ldr	r1, [r7, #0]
 80167bc:	6978      	ldr	r0, [r7, #20]
 80167be:	f7ff fea1 	bl	8016504 <_parsingPacket>
    }

    if (p_owner->__rx.state == GURS_DONE) {
 80167c2:	697b      	ldr	r3, [r7, #20]
 80167c4:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80167c8:	2b0a      	cmp	r3, #10
 80167ca:	f040 825d 	bne.w	8016c88 <_evtParsing+0x500>
    	pifLog_Printf(LT_NONE, "\n%u> %x %x %x %x %x %x %x %x", p_owner->_gps._id, p_packet->class_id, p_packet->msg_id, p_packet->length,
    			p_packet->payload.bytes[0], p_packet->payload.bytes[1], p_packet->payload.bytes[2], p_packet->payload.bytes[3], p_packet->payload.bytes[4]);
#endif
#endif

        switch (p_packet->class_id) {
 80167ce:	693b      	ldr	r3, [r7, #16]
 80167d0:	781b      	ldrb	r3, [r3, #0]
 80167d2:	2b01      	cmp	r3, #1
 80167d4:	d02a      	beq.n	801682c <_evtParsing+0xa4>
 80167d6:	2b05      	cmp	r3, #5
 80167d8:	f040 821e 	bne.w	8016c18 <_evtParsing+0x490>
        case GUCI_ACK:
        	switch (p_packet->msg_id) {
 80167dc:	693b      	ldr	r3, [r7, #16]
 80167de:	785b      	ldrb	r3, [r3, #1]
 80167e0:	2b01      	cmp	r3, #1
 80167e2:	d80b      	bhi.n	80167fc <_evtParsing+0x74>
        	case GUMI_ACK_ACK:
        	case GUMI_ACK_NAK:
        		if (p_owner->evt_ubx_cfg_result) (*p_owner->evt_ubx_cfg_result)(p_owner, p_packet->msg_id);
 80167e4:	697b      	ldr	r3, [r7, #20]
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d01d      	beq.n	8016828 <_evtParsing+0xa0>
 80167ec:	697b      	ldr	r3, [r7, #20]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	693a      	ldr	r2, [r7, #16]
 80167f2:	7852      	ldrb	r2, [r2, #1]
 80167f4:	4611      	mov	r1, r2
 80167f6:	6978      	ldr	r0, [r7, #20]
 80167f8:	4798      	blx	r3
        		break;
 80167fa:	e015      	b.n	8016828 <_evtParsing+0xa0>

            default:
            	error = TRUE;
 80167fc:	2301      	movs	r3, #1
 80167fe:	76fb      	strb	r3, [r7, #27]
#ifndef __PIF_NO_LOG__
        		pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x MID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id, p_packet->msg_id);
 8016800:	697b      	ldr	r3, [r7, #20]
 8016802:	8b9b      	ldrh	r3, [r3, #28]
 8016804:	4618      	mov	r0, r3
 8016806:	4ba2      	ldr	r3, [pc, #648]	; (8016a90 <_evtParsing+0x308>)
 8016808:	68db      	ldr	r3, [r3, #12]
 801680a:	693a      	ldr	r2, [r7, #16]
 801680c:	7812      	ldrb	r2, [r2, #0]
 801680e:	4611      	mov	r1, r2
 8016810:	693a      	ldr	r2, [r7, #16]
 8016812:	7852      	ldrb	r2, [r2, #1]
 8016814:	9202      	str	r2, [sp, #8]
 8016816:	9101      	str	r1, [sp, #4]
 8016818:	9300      	str	r3, [sp, #0]
 801681a:	4603      	mov	r3, r0
 801681c:	22e7      	movs	r2, #231	; 0xe7
 801681e:	499d      	ldr	r1, [pc, #628]	; (8016a94 <_evtParsing+0x30c>)
 8016820:	2004      	movs	r0, #4
 8016822:	f7fc feb7 	bl	8013594 <pifLog_Printf>
#endif
                break;
 8016826:	e000      	b.n	801682a <_evtParsing+0xa2>
        		break;
 8016828:	bf00      	nop
        	}
        	break;
 801682a:	e208      	b.n	8016c3e <_evtParsing+0x4b6>

        case GUCI_NAV:
            switch (p_packet->msg_id) {
 801682c:	693b      	ldr	r3, [r7, #16]
 801682e:	785b      	ldrb	r3, [r3, #1]
 8016830:	3b02      	subs	r3, #2
 8016832:	2b2e      	cmp	r3, #46	; 0x2e
 8016834:	f200 81d5 	bhi.w	8016be2 <_evtParsing+0x45a>
 8016838:	a201      	add	r2, pc, #4	; (adr r2, 8016840 <_evtParsing+0xb8>)
 801683a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801683e:	bf00      	nop
 8016840:	080168fd 	.word	0x080168fd
 8016844:	08016a27 	.word	0x08016a27
 8016848:	08016be3 	.word	0x08016be3
 801684c:	08016be3 	.word	0x08016be3
 8016850:	080169e3 	.word	0x080169e3
 8016854:	08016997 	.word	0x08016997
 8016858:	08016be3 	.word	0x08016be3
 801685c:	08016be3 	.word	0x08016be3
 8016860:	08016be3 	.word	0x08016be3
 8016864:	08016be3 	.word	0x08016be3
 8016868:	08016be3 	.word	0x08016be3
 801686c:	08016be3 	.word	0x08016be3
 8016870:	08016be3 	.word	0x08016be3
 8016874:	08016be3 	.word	0x08016be3
 8016878:	08016be3 	.word	0x08016be3
 801687c:	08016be3 	.word	0x08016be3
 8016880:	08016ba9 	.word	0x08016ba9
 8016884:	08016be3 	.word	0x08016be3
 8016888:	08016be3 	.word	0x08016be3
 801688c:	08016be3 	.word	0x08016be3
 8016890:	08016be3 	.word	0x08016be3
 8016894:	08016be3 	.word	0x08016be3
 8016898:	08016be3 	.word	0x08016be3
 801689c:	08016be3 	.word	0x08016be3
 80168a0:	08016be3 	.word	0x08016be3
 80168a4:	08016be3 	.word	0x08016be3
 80168a8:	08016be3 	.word	0x08016be3
 80168ac:	08016be3 	.word	0x08016be3
 80168b0:	08016be3 	.word	0x08016be3
 80168b4:	08016be3 	.word	0x08016be3
 80168b8:	08016be3 	.word	0x08016be3
 80168bc:	08016b51 	.word	0x08016b51
 80168c0:	08016be3 	.word	0x08016be3
 80168c4:	08016be3 	.word	0x08016be3
 80168c8:	08016be3 	.word	0x08016be3
 80168cc:	08016be3 	.word	0x08016be3
 80168d0:	08016be3 	.word	0x08016be3
 80168d4:	08016be3 	.word	0x08016be3
 80168d8:	08016be3 	.word	0x08016be3
 80168dc:	08016be3 	.word	0x08016be3
 80168e0:	08016be3 	.word	0x08016be3
 80168e4:	08016be3 	.word	0x08016be3
 80168e8:	08016be3 	.word	0x08016be3
 80168ec:	08016be3 	.word	0x08016be3
 80168f0:	08016be3 	.word	0x08016be3
 80168f4:	08016be3 	.word	0x08016be3
 80168f8:	08016a61 	.word	0x08016a61
                case GUMI_NAV_POSLLH:
                	p_parent->_coord_deg[PIF_GPS_LON] = p_packet->payload.posllh.lon / 10000000.0;
 80168fc:	693b      	ldr	r3, [r7, #16]
 80168fe:	689b      	ldr	r3, [r3, #8]
 8016900:	4618      	mov	r0, r3
 8016902:	f7e9 fdcd 	bl	80004a0 <__aeabi_i2d>
 8016906:	a360      	add	r3, pc, #384	; (adr r3, 8016a88 <_evtParsing+0x300>)
 8016908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801690c:	f7e9 ff5c 	bl	80007c8 <__aeabi_ddiv>
 8016910:	4602      	mov	r2, r0
 8016912:	460b      	mov	r3, r1
 8016914:	68f9      	ldr	r1, [r7, #12]
 8016916:	e9c1 2308 	strd	r2, r3, [r1, #32]
                	p_parent->_coord_deg[PIF_GPS_LAT] = p_packet->payload.posllh.lat / 10000000.0;
 801691a:	693b      	ldr	r3, [r7, #16]
 801691c:	68db      	ldr	r3, [r3, #12]
 801691e:	4618      	mov	r0, r3
 8016920:	f7e9 fdbe 	bl	80004a0 <__aeabi_i2d>
 8016924:	a358      	add	r3, pc, #352	; (adr r3, 8016a88 <_evtParsing+0x300>)
 8016926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801692a:	f7e9 ff4d 	bl	80007c8 <__aeabi_ddiv>
 801692e:	4602      	mov	r2, r0
 8016930:	460b      	mov	r3, r1
 8016932:	68f9      	ldr	r1, [r7, #12]
 8016934:	e9c1 2306 	strd	r2, r3, [r1, #24]
                	p_parent->_altitude = p_packet->payload.posllh.h_msl / 1000.0;
 8016938:	693b      	ldr	r3, [r7, #16]
 801693a:	695b      	ldr	r3, [r3, #20]
 801693c:	4618      	mov	r0, r3
 801693e:	f7e9 fdaf 	bl	80004a0 <__aeabi_i2d>
 8016942:	f04f 0200 	mov.w	r2, #0
 8016946:	4b54      	ldr	r3, [pc, #336]	; (8016a98 <_evtParsing+0x310>)
 8016948:	f7e9 ff3e 	bl	80007c8 <__aeabi_ddiv>
 801694c:	4602      	mov	r2, r0
 801694e:	460b      	mov	r3, r1
 8016950:	68f9      	ldr	r1, [r7, #12]
 8016952:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
                	p_parent->_horizontal_acc = p_packet->payload.posllh.h_acc;
 8016956:	693b      	ldr	r3, [r7, #16]
 8016958:	699a      	ldr	r2, [r3, #24]
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	641a      	str	r2, [r3, #64]	; 0x40
                	p_parent->_vertical_acc = p_packet->payload.posllh.v_acc;
 801695e:	693b      	ldr	r3, [r7, #16]
 8016960:	69da      	ldr	r2, [r3, #28]
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	645a      	str	r2, [r3, #68]	; 0x44
                    p_parent->_fix = next_fix;
 8016966:	4b4d      	ldr	r3, [pc, #308]	; (8016a9c <_evtParsing+0x314>)
 8016968:	781b      	ldrb	r3, [r3, #0]
 801696a:	f003 0301 	and.w	r3, r3, #1
 801696e:	b2d9      	uxtb	r1, r3
 8016970:	68fa      	ldr	r2, [r7, #12]
 8016972:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016976:	f361 0300 	bfi	r3, r1, #0, #1
 801697a:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    _new_position = TRUE;
 801697e:	4b48      	ldr	r3, [pc, #288]	; (8016aa0 <_evtParsing+0x318>)
 8016980:	2201      	movs	r2, #1
 8016982:	701a      	strb	r2, [r3, #0]
                    // Update GPS update rate table.
                    p_parent->_update_rate[0] = p_parent->_update_rate[1];
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	649a      	str	r2, [r3, #72]	; 0x48
                    p_parent->_update_rate[1] = pif_cumulative_timer1ms;
 801698c:	4b45      	ldr	r3, [pc, #276]	; (8016aa4 <_evtParsing+0x31c>)
 801698e:	681a      	ldr	r2, [r3, #0]
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	64da      	str	r2, [r3, #76]	; 0x4c
                    break;
 8016994:	e13f      	b.n	8016c16 <_evtParsing+0x48e>

                case GUMI_NAV_PVT:
                	p_parent->_utc.year = 20 + p_packet->payload.pvt.year - 2000;
 8016996:	693b      	ldr	r3, [r7, #16]
 8016998:	891b      	ldrh	r3, [r3, #8]
 801699a:	b2db      	uxtb	r3, r3
 801699c:	3344      	adds	r3, #68	; 0x44
 801699e:	b2da      	uxtb	r2, r3
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	739a      	strb	r2, [r3, #14]
                	p_parent->_utc.month = p_packet->payload.pvt.month;
 80169a4:	693b      	ldr	r3, [r7, #16]
 80169a6:	7a9a      	ldrb	r2, [r3, #10]
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	73da      	strb	r2, [r3, #15]
                	p_parent->_utc.day = p_packet->payload.pvt.day;
 80169ac:	693b      	ldr	r3, [r7, #16]
 80169ae:	7ada      	ldrb	r2, [r3, #11]
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	741a      	strb	r2, [r3, #16]
                	p_parent->_utc.hour = p_packet->payload.pvt.hour;
 80169b4:	693b      	ldr	r3, [r7, #16]
 80169b6:	7b1a      	ldrb	r2, [r3, #12]
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	745a      	strb	r2, [r3, #17]
                	p_parent->_utc.minute = p_packet->payload.pvt.min;
 80169bc:	693b      	ldr	r3, [r7, #16]
 80169be:	7b5a      	ldrb	r2, [r3, #13]
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	749a      	strb	r2, [r3, #18]
                	p_parent->_utc.second = p_packet->payload.pvt.sec;
 80169c4:	693b      	ldr	r3, [r7, #16]
 80169c6:	7b9a      	ldrb	r2, [r3, #14]
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	74da      	strb	r2, [r3, #19]
                	p_parent->_utc.millisecond = p_packet->payload.pvt.nano / 1000000UL;
 80169cc:	693b      	ldr	r3, [r7, #16]
 80169ce:	695b      	ldr	r3, [r3, #20]
 80169d0:	461a      	mov	r2, r3
 80169d2:	4b35      	ldr	r3, [pc, #212]	; (8016aa8 <_evtParsing+0x320>)
 80169d4:	fba3 2302 	umull	r2, r3, r3, r2
 80169d8:	0c9b      	lsrs	r3, r3, #18
 80169da:	b29a      	uxth	r2, r3
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	829a      	strh	r2, [r3, #20]
                    break;
 80169e0:	e119      	b.n	8016c16 <_evtParsing+0x48e>

                case GUMI_NAV_SOL:
                    next_fix = (p_packet->payload.sol.flags & NAV_STATUS_FIX_VALID) && (p_packet->payload.sol.gps_fix == FIX_3D);
 80169e2:	693b      	ldr	r3, [r7, #16]
 80169e4:	7bdb      	ldrb	r3, [r3, #15]
 80169e6:	f003 0301 	and.w	r3, r3, #1
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d005      	beq.n	80169fa <_evtParsing+0x272>
 80169ee:	693b      	ldr	r3, [r7, #16]
 80169f0:	7b9b      	ldrb	r3, [r3, #14]
 80169f2:	2b03      	cmp	r3, #3
 80169f4:	d101      	bne.n	80169fa <_evtParsing+0x272>
 80169f6:	2301      	movs	r3, #1
 80169f8:	e000      	b.n	80169fc <_evtParsing+0x274>
 80169fa:	2300      	movs	r3, #0
 80169fc:	b2da      	uxtb	r2, r3
 80169fe:	4b27      	ldr	r3, [pc, #156]	; (8016a9c <_evtParsing+0x314>)
 8016a00:	701a      	strb	r2, [r3, #0]
                    if (!next_fix)
 8016a02:	4b26      	ldr	r3, [pc, #152]	; (8016a9c <_evtParsing+0x314>)
 8016a04:	781b      	ldrb	r3, [r3, #0]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d106      	bne.n	8016a18 <_evtParsing+0x290>
                    	p_parent->_fix = FALSE;
 8016a0a:	68fa      	ldr	r2, [r7, #12]
 8016a0c:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016a10:	f36f 0300 	bfc	r3, #0, #1
 8016a14:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    p_parent->_num_sat = p_packet->payload.sol.num_sv;
 8016a18:	693b      	ldr	r3, [r7, #16]
 8016a1a:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    break;
 8016a24:	e0f7      	b.n	8016c16 <_evtParsing+0x48e>

                case GUMI_NAV_STATUS:
                    next_fix = (p_packet->payload.status.flags & NAV_STATUS_FIX_VALID) && (p_packet->payload.status.gps_fix == FIX_3D);
 8016a26:	693b      	ldr	r3, [r7, #16]
 8016a28:	7a5b      	ldrb	r3, [r3, #9]
 8016a2a:	f003 0301 	and.w	r3, r3, #1
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d005      	beq.n	8016a3e <_evtParsing+0x2b6>
 8016a32:	693b      	ldr	r3, [r7, #16]
 8016a34:	7a1b      	ldrb	r3, [r3, #8]
 8016a36:	2b03      	cmp	r3, #3
 8016a38:	d101      	bne.n	8016a3e <_evtParsing+0x2b6>
 8016a3a:	2301      	movs	r3, #1
 8016a3c:	e000      	b.n	8016a40 <_evtParsing+0x2b8>
 8016a3e:	2300      	movs	r3, #0
 8016a40:	b2da      	uxtb	r2, r3
 8016a42:	4b16      	ldr	r3, [pc, #88]	; (8016a9c <_evtParsing+0x314>)
 8016a44:	701a      	strb	r2, [r3, #0]
                    if (!next_fix)
 8016a46:	4b15      	ldr	r3, [pc, #84]	; (8016a9c <_evtParsing+0x314>)
 8016a48:	781b      	ldrb	r3, [r3, #0]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	f040 80e0 	bne.w	8016c10 <_evtParsing+0x488>
                    	p_parent->_fix = FALSE;
 8016a50:	68fa      	ldr	r2, [r7, #12]
 8016a52:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016a56:	f36f 0300 	bfc	r3, #0, #1
 8016a5a:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    break;
 8016a5e:	e0d7      	b.n	8016c10 <_evtParsing+0x488>

                case GUMI_NAV_SVINFO:
                	p_owner->_num_ch = p_packet->payload.sv_info.num_ch;
 8016a60:	693b      	ldr	r3, [r7, #16]
 8016a62:	7a1a      	ldrb	r2, [r3, #8]
 8016a64:	697b      	ldr	r3, [r7, #20]
 8016a66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    if (p_owner->_num_ch > 16)
 8016a6a:	697b      	ldr	r3, [r7, #20]
 8016a6c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8016a70:	2b10      	cmp	r3, #16
 8016a72:	d903      	bls.n	8016a7c <_evtParsing+0x2f4>
                    	p_owner->_num_ch = 16;
 8016a74:	697b      	ldr	r3, [r7, #20]
 8016a76:	2210      	movs	r2, #16
 8016a78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    for (i = 0; i < p_owner->_num_ch; i++) {
 8016a7c:	2300      	movs	r3, #0
 8016a7e:	61fb      	str	r3, [r7, #28]
 8016a80:	e053      	b.n	8016b2a <_evtParsing+0x3a2>
 8016a82:	bf00      	nop
 8016a84:	f3af 8000 	nop.w
 8016a88:	00000000 	.word	0x00000000
 8016a8c:	416312d0 	.word	0x416312d0
 8016a90:	2000006c 	.word	0x2000006c
 8016a94:	080268bc 	.word	0x080268bc
 8016a98:	408f4000 	.word	0x408f4000
 8016a9c:	2000225f 	.word	0x2000225f
 8016aa0:	20002260 	.word	0x20002260
 8016aa4:	200020e0 	.word	0x200020e0
 8016aa8:	431bde83 	.word	0x431bde83
                    	p_owner->_svinfo_chn[i] = p_packet->payload.sv_info.channel[i].chn;
 8016aac:	6939      	ldr	r1, [r7, #16]
 8016aae:	69fa      	ldr	r2, [r7, #28]
 8016ab0:	4613      	mov	r3, r2
 8016ab2:	005b      	lsls	r3, r3, #1
 8016ab4:	4413      	add	r3, r2
 8016ab6:	009b      	lsls	r3, r3, #2
 8016ab8:	440b      	add	r3, r1
 8016aba:	330c      	adds	r3, #12
 8016abc:	7819      	ldrb	r1, [r3, #0]
 8016abe:	697a      	ldr	r2, [r7, #20]
 8016ac0:	69fb      	ldr	r3, [r7, #28]
 8016ac2:	4413      	add	r3, r2
 8016ac4:	3379      	adds	r3, #121	; 0x79
 8016ac6:	460a      	mov	r2, r1
 8016ac8:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_svid[i] = p_packet->payload.sv_info.channel[i].svid;
 8016aca:	6939      	ldr	r1, [r7, #16]
 8016acc:	69fa      	ldr	r2, [r7, #28]
 8016ace:	4613      	mov	r3, r2
 8016ad0:	005b      	lsls	r3, r3, #1
 8016ad2:	4413      	add	r3, r2
 8016ad4:	009b      	lsls	r3, r3, #2
 8016ad6:	440b      	add	r3, r1
 8016ad8:	330d      	adds	r3, #13
 8016ada:	7819      	ldrb	r1, [r3, #0]
 8016adc:	697a      	ldr	r2, [r7, #20]
 8016ade:	69fb      	ldr	r3, [r7, #28]
 8016ae0:	4413      	add	r3, r2
 8016ae2:	3389      	adds	r3, #137	; 0x89
 8016ae4:	460a      	mov	r2, r1
 8016ae6:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_quality[i] = p_packet->payload.sv_info.channel[i].quality;
 8016ae8:	6939      	ldr	r1, [r7, #16]
 8016aea:	69fa      	ldr	r2, [r7, #28]
 8016aec:	4613      	mov	r3, r2
 8016aee:	005b      	lsls	r3, r3, #1
 8016af0:	4413      	add	r3, r2
 8016af2:	009b      	lsls	r3, r3, #2
 8016af4:	440b      	add	r3, r1
 8016af6:	330f      	adds	r3, #15
 8016af8:	7819      	ldrb	r1, [r3, #0]
 8016afa:	697a      	ldr	r2, [r7, #20]
 8016afc:	69fb      	ldr	r3, [r7, #28]
 8016afe:	4413      	add	r3, r2
 8016b00:	3399      	adds	r3, #153	; 0x99
 8016b02:	460a      	mov	r2, r1
 8016b04:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_cno[i] = p_packet->payload.sv_info.channel[i].cno;
 8016b06:	6939      	ldr	r1, [r7, #16]
 8016b08:	69fa      	ldr	r2, [r7, #28]
 8016b0a:	4613      	mov	r3, r2
 8016b0c:	005b      	lsls	r3, r3, #1
 8016b0e:	4413      	add	r3, r2
 8016b10:	009b      	lsls	r3, r3, #2
 8016b12:	440b      	add	r3, r1
 8016b14:	3310      	adds	r3, #16
 8016b16:	7819      	ldrb	r1, [r3, #0]
 8016b18:	697a      	ldr	r2, [r7, #20]
 8016b1a:	69fb      	ldr	r3, [r7, #28]
 8016b1c:	4413      	add	r3, r2
 8016b1e:	33a9      	adds	r3, #169	; 0xa9
 8016b20:	460a      	mov	r2, r1
 8016b22:	701a      	strb	r2, [r3, #0]
                    for (i = 0; i < p_owner->_num_ch; i++) {
 8016b24:	69fb      	ldr	r3, [r7, #28]
 8016b26:	3301      	adds	r3, #1
 8016b28:	61fb      	str	r3, [r7, #28]
 8016b2a:	697b      	ldr	r3, [r7, #20]
 8016b2c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8016b30:	461a      	mov	r2, r3
 8016b32:	69fb      	ldr	r3, [r7, #28]
 8016b34:	4293      	cmp	r3, r2
 8016b36:	dbb9      	blt.n	8016aac <_evtParsing+0x324>
                    }
                    // Update GPS SVIFO update rate table.
                    p_owner->_svinfo_rate[0] = p_owner->_svinfo_rate[1];
 8016b38:	697b      	ldr	r3, [r7, #20]
 8016b3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8016b3e:	697b      	ldr	r3, [r7, #20]
 8016b40:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                    p_owner->_svinfo_rate[1] = pif_cumulative_timer1ms;
 8016b44:	4b54      	ldr	r3, [pc, #336]	; (8016c98 <_evtParsing+0x510>)
 8016b46:	681a      	ldr	r2, [r3, #0]
 8016b48:	697b      	ldr	r3, [r7, #20]
 8016b4a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
                    break;
 8016b4e:	e062      	b.n	8016c16 <_evtParsing+0x48e>

                case GUMI_NAV_TIMEUTC:
                	if (p_packet->payload.time_utc.valid & 4) {
 8016b50:	693b      	ldr	r3, [r7, #16]
 8016b52:	7ddb      	ldrb	r3, [r3, #23]
 8016b54:	f003 0304 	and.w	r3, r3, #4
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d05b      	beq.n	8016c14 <_evtParsing+0x48c>
						p_parent->_utc.year = p_packet->payload.time_utc.year - 2000;
 8016b5c:	693b      	ldr	r3, [r7, #16]
 8016b5e:	8a1b      	ldrh	r3, [r3, #16]
 8016b60:	b2db      	uxtb	r3, r3
 8016b62:	3330      	adds	r3, #48	; 0x30
 8016b64:	b2da      	uxtb	r2, r3
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	739a      	strb	r2, [r3, #14]
						p_parent->_utc.month = p_packet->payload.time_utc.month;
 8016b6a:	693b      	ldr	r3, [r7, #16]
 8016b6c:	7c9a      	ldrb	r2, [r3, #18]
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	73da      	strb	r2, [r3, #15]
						p_parent->_utc.day = p_packet->payload.time_utc.day;
 8016b72:	693b      	ldr	r3, [r7, #16]
 8016b74:	7cda      	ldrb	r2, [r3, #19]
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	741a      	strb	r2, [r3, #16]
						p_parent->_utc.hour = p_packet->payload.time_utc.hour;
 8016b7a:	693b      	ldr	r3, [r7, #16]
 8016b7c:	7d1a      	ldrb	r2, [r3, #20]
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	745a      	strb	r2, [r3, #17]
						p_parent->_utc.minute = p_packet->payload.time_utc.min;
 8016b82:	693b      	ldr	r3, [r7, #16]
 8016b84:	7d5a      	ldrb	r2, [r3, #21]
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	749a      	strb	r2, [r3, #18]
						p_parent->_utc.second = p_packet->payload.time_utc.sec;
 8016b8a:	693b      	ldr	r3, [r7, #16]
 8016b8c:	7d9a      	ldrb	r2, [r3, #22]
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	74da      	strb	r2, [r3, #19]
						p_parent->_utc.millisecond = p_packet->payload.time_utc.nano / 1000000UL;
 8016b92:	693b      	ldr	r3, [r7, #16]
 8016b94:	68db      	ldr	r3, [r3, #12]
 8016b96:	461a      	mov	r2, r3
 8016b98:	4b40      	ldr	r3, [pc, #256]	; (8016c9c <_evtParsing+0x514>)
 8016b9a:	fba3 2302 	umull	r2, r3, r3, r2
 8016b9e:	0c9b      	lsrs	r3, r3, #18
 8016ba0:	b29a      	uxth	r2, r3
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	829a      	strh	r2, [r3, #20]
                	}
                	break;
 8016ba6:	e035      	b.n	8016c14 <_evtParsing+0x48c>

                case GUMI_NAV_VELNED:
                	p_parent->_ground_speed = p_packet->payload.velned.speed;
 8016ba8:	693b      	ldr	r3, [r7, #16]
 8016baa:	695b      	ldr	r3, [r3, #20]
 8016bac:	4618      	mov	r0, r3
 8016bae:	f7e9 fc67 	bl	8000480 <__aeabi_ui2d>
 8016bb2:	4602      	mov	r2, r0
 8016bb4:	460b      	mov	r3, r1
 8016bb6:	68f9      	ldr	r1, [r7, #12]
 8016bb8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
                	p_parent->_ground_course = p_packet->payload.velned.heading / 100000.0;
 8016bbc:	693b      	ldr	r3, [r7, #16]
 8016bbe:	69db      	ldr	r3, [r3, #28]
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	f7e9 fc6d 	bl	80004a0 <__aeabi_i2d>
 8016bc6:	a332      	add	r3, pc, #200	; (adr r3, 8016c90 <_evtParsing+0x508>)
 8016bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bcc:	f7e9 fdfc 	bl	80007c8 <__aeabi_ddiv>
 8016bd0:	4602      	mov	r2, r0
 8016bd2:	460b      	mov	r3, r1
 8016bd4:	68f9      	ldr	r1, [r7, #12]
 8016bd6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
                    _new_speed = TRUE;
 8016bda:	4b31      	ldr	r3, [pc, #196]	; (8016ca0 <_evtParsing+0x518>)
 8016bdc:	2201      	movs	r2, #1
 8016bde:	701a      	strb	r2, [r3, #0]
                    break;
 8016be0:	e019      	b.n	8016c16 <_evtParsing+0x48e>

                default:
                	error = TRUE;
 8016be2:	2301      	movs	r3, #1
 8016be4:	76fb      	strb	r3, [r7, #27]
#ifndef __PIF_NO_LOG__
            		pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x MID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id, p_packet->msg_id);
 8016be6:	697b      	ldr	r3, [r7, #20]
 8016be8:	8b9b      	ldrh	r3, [r3, #28]
 8016bea:	4618      	mov	r0, r3
 8016bec:	4b2d      	ldr	r3, [pc, #180]	; (8016ca4 <_evtParsing+0x51c>)
 8016bee:	68db      	ldr	r3, [r3, #12]
 8016bf0:	693a      	ldr	r2, [r7, #16]
 8016bf2:	7812      	ldrb	r2, [r2, #0]
 8016bf4:	4611      	mov	r1, r2
 8016bf6:	693a      	ldr	r2, [r7, #16]
 8016bf8:	7852      	ldrb	r2, [r2, #1]
 8016bfa:	9202      	str	r2, [sp, #8]
 8016bfc:	9101      	str	r1, [sp, #4]
 8016bfe:	9300      	str	r3, [sp, #0]
 8016c00:	4603      	mov	r3, r0
 8016c02:	f240 1237 	movw	r2, #311	; 0x137
 8016c06:	4928      	ldr	r1, [pc, #160]	; (8016ca8 <_evtParsing+0x520>)
 8016c08:	2004      	movs	r0, #4
 8016c0a:	f7fc fcc3 	bl	8013594 <pifLog_Printf>
#endif
                    break;
 8016c0e:	e002      	b.n	8016c16 <_evtParsing+0x48e>
                    break;
 8016c10:	bf00      	nop
 8016c12:	e014      	b.n	8016c3e <_evtParsing+0x4b6>
                	break;
 8016c14:	bf00      	nop
            }
        	break;
 8016c16:	e012      	b.n	8016c3e <_evtParsing+0x4b6>

		default:
        	error = TRUE;
 8016c18:	2301      	movs	r3, #1
 8016c1a:	76fb      	strb	r3, [r7, #27]
#ifndef __PIF_NO_LOG__
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id);
 8016c1c:	697b      	ldr	r3, [r7, #20]
 8016c1e:	8b9b      	ldrh	r3, [r3, #28]
 8016c20:	4619      	mov	r1, r3
 8016c22:	4b20      	ldr	r3, [pc, #128]	; (8016ca4 <_evtParsing+0x51c>)
 8016c24:	68db      	ldr	r3, [r3, #12]
 8016c26:	693a      	ldr	r2, [r7, #16]
 8016c28:	7812      	ldrb	r2, [r2, #0]
 8016c2a:	9201      	str	r2, [sp, #4]
 8016c2c:	9300      	str	r3, [sp, #0]
 8016c2e:	460b      	mov	r3, r1
 8016c30:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8016c34:	491d      	ldr	r1, [pc, #116]	; (8016cac <_evtParsing+0x524>)
 8016c36:	2004      	movs	r0, #4
 8016c38:	f7fc fcac 	bl	8013594 <pifLog_Printf>
#endif
			break;
 8016c3c:	bf00      	nop
        }

    	if (!error && p_owner->evt_ubx_receive) (*p_owner->evt_ubx_receive)(p_packet);
 8016c3e:	7efb      	ldrb	r3, [r7, #27]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d107      	bne.n	8016c54 <_evtParsing+0x4cc>
 8016c44:	697b      	ldr	r3, [r7, #20]
 8016c46:	685b      	ldr	r3, [r3, #4]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d003      	beq.n	8016c54 <_evtParsing+0x4cc>
 8016c4c:	697b      	ldr	r3, [r7, #20]
 8016c4e:	685b      	ldr	r3, [r3, #4]
 8016c50:	6938      	ldr	r0, [r7, #16]
 8016c52:	4798      	blx	r3

        if (_new_position && _new_speed) {
 8016c54:	4b16      	ldr	r3, [pc, #88]	; (8016cb0 <_evtParsing+0x528>)
 8016c56:	781b      	ldrb	r3, [r3, #0]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d00f      	beq.n	8016c7c <_evtParsing+0x4f4>
 8016c5c:	4b10      	ldr	r3, [pc, #64]	; (8016ca0 <_evtParsing+0x518>)
 8016c5e:	781b      	ldrb	r3, [r3, #0]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d00b      	beq.n	8016c7c <_evtParsing+0x4f4>
			pifGps_SendEvent(&p_owner->_gps);
 8016c64:	697b      	ldr	r3, [r7, #20]
 8016c66:	3310      	adds	r3, #16
 8016c68:	4618      	mov	r0, r3
 8016c6a:	f7fe feaf 	bl	80159cc <pifGps_SendEvent>
            _new_speed = _new_position = FALSE;
 8016c6e:	4b10      	ldr	r3, [pc, #64]	; (8016cb0 <_evtParsing+0x528>)
 8016c70:	2200      	movs	r2, #0
 8016c72:	701a      	strb	r2, [r3, #0]
 8016c74:	4b0e      	ldr	r3, [pc, #56]	; (8016cb0 <_evtParsing+0x528>)
 8016c76:	781a      	ldrb	r2, [r3, #0]
 8016c78:	4b09      	ldr	r3, [pc, #36]	; (8016ca0 <_evtParsing+0x518>)
 8016c7a:	701a      	strb	r2, [r3, #0]
        }
    	p_owner->__rx.state = GURS_SYNC_CHAR_1;
 8016c7c:	697b      	ldr	r3, [r7, #20]
 8016c7e:	2200      	movs	r2, #0
 8016c80:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8016c84:	e000      	b.n	8016c88 <_evtParsing+0x500>
    if (!p_owner->_gps.evt_receive) return;
 8016c86:	bf00      	nop
    }
}
 8016c88:	3720      	adds	r7, #32
 8016c8a:	46bd      	mov	sp, r7
 8016c8c:	bd80      	pop	{r7, pc}
 8016c8e:	bf00      	nop
 8016c90:	00000000 	.word	0x00000000
 8016c94:	40f86a00 	.word	0x40f86a00
 8016c98:	200020e0 	.word	0x200020e0
 8016c9c:	431bde83 	.word	0x431bde83
 8016ca0:	20002261 	.word	0x20002261
 8016ca4:	2000006c 	.word	0x2000006c
 8016ca8:	080268bc 	.word	0x080268bc
 8016cac:	080268d8 	.word	0x080268d8
 8016cb0:	20002260 	.word	0x20002260

08016cb4 <_makeNmeaPacket>:

static BOOL _makeNmeaPacket(PifGpsUblox* p_owner, char* p_data, BOOL blocking)
{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b088      	sub	sp, #32
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	60f8      	str	r0, [r7, #12]
 8016cbc:	60b9      	str	r1, [r7, #8]
 8016cbe:	4613      	mov	r3, r2
 8016cc0:	71fb      	strb	r3, [r7, #7]
	uint8_t header[4];
	uint8_t parity = 0;
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	77fb      	strb	r3, [r7, #31]
	int i;

	i = 1;
 8016cc6:	2301      	movs	r3, #1
 8016cc8:	61bb      	str	r3, [r7, #24]
	while (TRUE) {
		if (p_data[i] == '*') {
 8016cca:	69bb      	ldr	r3, [r7, #24]
 8016ccc:	68ba      	ldr	r2, [r7, #8]
 8016cce:	4413      	add	r3, r2
 8016cd0:	781b      	ldrb	r3, [r3, #0]
 8016cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8016cd4:	d13a      	bne.n	8016d4c <_makeNmeaPacket+0x98>
			i++;
 8016cd6:	69bb      	ldr	r3, [r7, #24]
 8016cd8:	3301      	adds	r3, #1
 8016cda:	61bb      	str	r3, [r7, #24]
			break;
 8016cdc:	bf00      	nop
		else {
			parity ^= p_data[i];
			i++;
		}
	}
	p_data[i] = kPifHexUpperChar[(parity >> 4) & 0x0F]; i++;
 8016cde:	4b45      	ldr	r3, [pc, #276]	; (8016df4 <_makeNmeaPacket+0x140>)
 8016ce0:	681a      	ldr	r2, [r3, #0]
 8016ce2:	7ffb      	ldrb	r3, [r7, #31]
 8016ce4:	091b      	lsrs	r3, r3, #4
 8016ce6:	b2db      	uxtb	r3, r3
 8016ce8:	f003 030f 	and.w	r3, r3, #15
 8016cec:	441a      	add	r2, r3
 8016cee:	69bb      	ldr	r3, [r7, #24]
 8016cf0:	68b9      	ldr	r1, [r7, #8]
 8016cf2:	440b      	add	r3, r1
 8016cf4:	7812      	ldrb	r2, [r2, #0]
 8016cf6:	701a      	strb	r2, [r3, #0]
 8016cf8:	69bb      	ldr	r3, [r7, #24]
 8016cfa:	3301      	adds	r3, #1
 8016cfc:	61bb      	str	r3, [r7, #24]
	p_data[i] = kPifHexUpperChar[parity & 0x0F]; i++;
 8016cfe:	4b3d      	ldr	r3, [pc, #244]	; (8016df4 <_makeNmeaPacket+0x140>)
 8016d00:	681a      	ldr	r2, [r3, #0]
 8016d02:	7ffb      	ldrb	r3, [r7, #31]
 8016d04:	f003 030f 	and.w	r3, r3, #15
 8016d08:	441a      	add	r2, r3
 8016d0a:	69bb      	ldr	r3, [r7, #24]
 8016d0c:	68b9      	ldr	r1, [r7, #8]
 8016d0e:	440b      	add	r3, r1
 8016d10:	7812      	ldrb	r2, [r2, #0]
 8016d12:	701a      	strb	r2, [r3, #0]
 8016d14:	69bb      	ldr	r3, [r7, #24]
 8016d16:	3301      	adds	r3, #1
 8016d18:	61bb      	str	r3, [r7, #24]
	p_data[i] = '\r'; i++;
 8016d1a:	69bb      	ldr	r3, [r7, #24]
 8016d1c:	68ba      	ldr	r2, [r7, #8]
 8016d1e:	4413      	add	r3, r2
 8016d20:	220d      	movs	r2, #13
 8016d22:	701a      	strb	r2, [r3, #0]
 8016d24:	69bb      	ldr	r3, [r7, #24]
 8016d26:	3301      	adds	r3, #1
 8016d28:	61bb      	str	r3, [r7, #24]
	p_data[i] = '\n'; i++;
 8016d2a:	69bb      	ldr	r3, [r7, #24]
 8016d2c:	68ba      	ldr	r2, [r7, #8]
 8016d2e:	4413      	add	r3, r2
 8016d30:	220a      	movs	r2, #10
 8016d32:	701a      	strb	r2, [r3, #0]
 8016d34:	69bb      	ldr	r3, [r7, #24]
 8016d36:	3301      	adds	r3, #1
 8016d38:	61bb      	str	r3, [r7, #24]
	p_data[i] = 0;
 8016d3a:	69bb      	ldr	r3, [r7, #24]
 8016d3c:	68ba      	ldr	r2, [r7, #8]
 8016d3e:	4413      	add	r3, r2
 8016d40:	2200      	movs	r2, #0
 8016d42:	701a      	strb	r2, [r3, #0]

	if (blocking) {
 8016d44:	79fb      	ldrb	r3, [r7, #7]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d016      	beq.n	8016d78 <_makeNmeaPacket+0xc4>
 8016d4a:	e00c      	b.n	8016d66 <_makeNmeaPacket+0xb2>
			parity ^= p_data[i];
 8016d4c:	69bb      	ldr	r3, [r7, #24]
 8016d4e:	68ba      	ldr	r2, [r7, #8]
 8016d50:	4413      	add	r3, r2
 8016d52:	781a      	ldrb	r2, [r3, #0]
 8016d54:	7ffb      	ldrb	r3, [r7, #31]
 8016d56:	4053      	eors	r3, r2
 8016d58:	77fb      	strb	r3, [r7, #31]
			i++;
 8016d5a:	69bb      	ldr	r3, [r7, #24]
 8016d5c:	3301      	adds	r3, #1
 8016d5e:	61bb      	str	r3, [r7, #24]
		if (p_data[i] == '*') {
 8016d60:	e7b3      	b.n	8016cca <_makeNmeaPacket+0x16>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
			pifTaskManager_Yield();
 8016d62:	f7fd fe57 	bl	8014a14 <pifTaskManager_Yield>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	f7fc ffc6 	bl	8013cfe <pifRingBuffer_IsEmpty>
 8016d72:	4603      	mov	r3, r0
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d0f4      	beq.n	8016d62 <_makeNmeaPacket+0xae>
		}
	}

	pifRingBuffer_BackupHead(&p_owner->__tx.buffer);
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016d7e:	4618      	mov	r0, r3
 8016d80:	f7fd f83f 	bl	8013e02 <pifRingBuffer_BackupHead>

	header[0] = i;
 8016d84:	69bb      	ldr	r3, [r7, #24]
 8016d86:	b2db      	uxtb	r3, r3
 8016d88:	753b      	strb	r3, [r7, #20]
	header[1] = 0;
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	757b      	strb	r3, [r7, #21]
	header[2] = 0;
 8016d8e:	2300      	movs	r3, #0
 8016d90:	75bb      	strb	r3, [r7, #22]
	header[3] = 0;
 8016d92:	2300      	movs	r3, #0
 8016d94:	75fb      	strb	r3, [r7, #23]
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, header, 4)) goto fail;
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016d9c:	f107 0114 	add.w	r1, r7, #20
 8016da0:	2204      	movs	r2, #4
 8016da2:	4618      	mov	r0, r3
 8016da4:	f7fd f87e 	bl	8013ea4 <pifRingBuffer_PutData>
 8016da8:	4603      	mov	r3, r0
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d013      	beq.n	8016dd6 <_makeNmeaPacket+0x122>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t *)p_data, header[0])) goto fail;
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016db4:	7d3a      	ldrb	r2, [r7, #20]
 8016db6:	b292      	uxth	r2, r2
 8016db8:	68b9      	ldr	r1, [r7, #8]
 8016dba:	4618      	mov	r0, r3
 8016dbc:	f7fd f872 	bl	8013ea4 <pifRingBuffer_PutData>
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d009      	beq.n	8016dda <_makeNmeaPacket+0x126>
	p_owner->__p_comm->_p_task->immediate = TRUE;
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8016dcc:	69db      	ldr	r3, [r3, #28]
 8016dce:	2201      	movs	r2, #1
 8016dd0:	705a      	strb	r2, [r3, #1]
	return TRUE;
 8016dd2:	2301      	movs	r3, #1
 8016dd4:	e009      	b.n	8016dea <_makeNmeaPacket+0x136>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, header, 4)) goto fail;
 8016dd6:	bf00      	nop
 8016dd8:	e000      	b.n	8016ddc <_makeNmeaPacket+0x128>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t *)p_data, header[0])) goto fail;
 8016dda:	bf00      	nop

fail:
	pifRingBuffer_RestoreHead(&p_owner->__tx.buffer);
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016de2:	4618      	mov	r0, r3
 8016de4:	f7fd f81b 	bl	8013e1e <pifRingBuffer_RestoreHead>
	return FALSE;
 8016de8:	2300      	movs	r3, #0
}
 8016dea:	4618      	mov	r0, r3
 8016dec:	3720      	adds	r7, #32
 8016dee:	46bd      	mov	sp, r7
 8016df0:	bd80      	pop	{r7, pc}
 8016df2:	bf00      	nop
 8016df4:	20000060 	.word	0x20000060

08016df8 <_makeUbxPacket>:

static BOOL _makeUbxPacket(PifGpsUblox* p_owner, uint8_t* p_header, uint16_t length, uint8_t* p_payload, BOOL blocking)
{
 8016df8:	b580      	push	{r7, lr}
 8016dfa:	b088      	sub	sp, #32
 8016dfc:	af00      	add	r7, sp, #0
 8016dfe:	60f8      	str	r0, [r7, #12]
 8016e00:	60b9      	str	r1, [r7, #8]
 8016e02:	603b      	str	r3, [r7, #0]
 8016e04:	4613      	mov	r3, r2
 8016e06:	80fb      	strh	r3, [r7, #6]
	uint8_t info[4];
	uint8_t tailer[2];
	uint16_t checksum;

	checksum = _checksumUbx(p_header + 2, p_payload, length);
 8016e08:	68bb      	ldr	r3, [r7, #8]
 8016e0a:	3302      	adds	r3, #2
 8016e0c:	88fa      	ldrh	r2, [r7, #6]
 8016e0e:	6839      	ldr	r1, [r7, #0]
 8016e10:	4618      	mov	r0, r3
 8016e12:	f7ff fb35 	bl	8016480 <_checksumUbx>
 8016e16:	4603      	mov	r3, r0
 8016e18:	83fb      	strh	r3, [r7, #30]
	tailer[0] = checksum & 0xFF;
 8016e1a:	8bfb      	ldrh	r3, [r7, #30]
 8016e1c:	b2db      	uxtb	r3, r3
 8016e1e:	753b      	strb	r3, [r7, #20]
	tailer[1] = checksum >> 8;
 8016e20:	8bfb      	ldrh	r3, [r7, #30]
 8016e22:	0a1b      	lsrs	r3, r3, #8
 8016e24:	b29b      	uxth	r3, r3
 8016e26:	b2db      	uxtb	r3, r3
 8016e28:	757b      	strb	r3, [r7, #21]

	if (blocking) {
 8016e2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d00b      	beq.n	8016e4a <_makeUbxPacket+0x52>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 8016e32:	e001      	b.n	8016e38 <_makeUbxPacket+0x40>
			pifTaskManager_Yield();
 8016e34:	f7fd fdee 	bl	8014a14 <pifTaskManager_Yield>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016e3e:	4618      	mov	r0, r3
 8016e40:	f7fc ff5d 	bl	8013cfe <pifRingBuffer_IsEmpty>
 8016e44:	4603      	mov	r3, r0
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d0f4      	beq.n	8016e34 <_makeUbxPacket+0x3c>
		}
	}

	pifRingBuffer_BackupHead(&p_owner->__tx.buffer);
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016e50:	4618      	mov	r0, r3
 8016e52:	f7fc ffd6 	bl	8013e02 <pifRingBuffer_BackupHead>

	info[0] = length + 8;
 8016e56:	88fb      	ldrh	r3, [r7, #6]
 8016e58:	b2db      	uxtb	r3, r3
 8016e5a:	3308      	adds	r3, #8
 8016e5c:	b2db      	uxtb	r3, r3
 8016e5e:	763b      	strb	r3, [r7, #24]
	info[1] = 0;
 8016e60:	2300      	movs	r3, #0
 8016e62:	767b      	strb	r3, [r7, #25]
	info[2] = 0;
 8016e64:	2300      	movs	r3, #0
 8016e66:	76bb      	strb	r3, [r7, #26]
	info[3] = 0;
 8016e68:	2300      	movs	r3, #0
 8016e6a:	76fb      	strb	r3, [r7, #27]
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, info, 4)) goto fail;
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016e72:	f107 0118 	add.w	r1, r7, #24
 8016e76:	2204      	movs	r2, #4
 8016e78:	4618      	mov	r0, r3
 8016e7a:	f7fd f813 	bl	8013ea4 <pifRingBuffer_PutData>
 8016e7e:	4603      	mov	r3, r0
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d026      	beq.n	8016ed2 <_makeUbxPacket+0xda>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_header, 6)) goto fail;
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016e8a:	2206      	movs	r2, #6
 8016e8c:	68b9      	ldr	r1, [r7, #8]
 8016e8e:	4618      	mov	r0, r3
 8016e90:	f7fd f808 	bl	8013ea4 <pifRingBuffer_PutData>
 8016e94:	4603      	mov	r3, r0
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d01d      	beq.n	8016ed6 <_makeUbxPacket+0xde>
	if (length > 0) {
 8016e9a:	88fb      	ldrh	r3, [r7, #6]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d00a      	beq.n	8016eb6 <_makeUbxPacket+0xbe>
		if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_payload, length)) goto fail;
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016ea6:	88fa      	ldrh	r2, [r7, #6]
 8016ea8:	6839      	ldr	r1, [r7, #0]
 8016eaa:	4618      	mov	r0, r3
 8016eac:	f7fc fffa 	bl	8013ea4 <pifRingBuffer_PutData>
 8016eb0:	4603      	mov	r3, r0
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d011      	beq.n	8016eda <_makeUbxPacket+0xe2>
	}
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, tailer, 2)) goto fail;
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016ebc:	f107 0114 	add.w	r1, r7, #20
 8016ec0:	2202      	movs	r2, #2
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f7fc ffee 	bl	8013ea4 <pifRingBuffer_PutData>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d007      	beq.n	8016ede <_makeUbxPacket+0xe6>
	return TRUE;
 8016ece:	2301      	movs	r3, #1
 8016ed0:	e00d      	b.n	8016eee <_makeUbxPacket+0xf6>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, info, 4)) goto fail;
 8016ed2:	bf00      	nop
 8016ed4:	e004      	b.n	8016ee0 <_makeUbxPacket+0xe8>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_header, 6)) goto fail;
 8016ed6:	bf00      	nop
 8016ed8:	e002      	b.n	8016ee0 <_makeUbxPacket+0xe8>
		if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_payload, length)) goto fail;
 8016eda:	bf00      	nop
 8016edc:	e000      	b.n	8016ee0 <_makeUbxPacket+0xe8>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, tailer, 2)) goto fail;
 8016ede:	bf00      	nop

fail:
	pifRingBuffer_RestoreHead(&p_owner->__tx.buffer);
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	f7fc ff99 	bl	8013e1e <pifRingBuffer_RestoreHead>
	return FALSE;
 8016eec:	2300      	movs	r3, #0
}
 8016eee:	4618      	mov	r0, r3
 8016ef0:	3720      	adds	r7, #32
 8016ef2:	46bd      	mov	sp, r7
 8016ef4:	bd80      	pop	{r7, pc}

08016ef6 <_evtSending>:

BOOL _evtSending(void* p_client, PifActCommSendData act_send_data)
{
 8016ef6:	b5b0      	push	{r4, r5, r7, lr}
 8016ef8:	b084      	sub	sp, #16
 8016efa:	af00      	add	r7, sp, #0
 8016efc:	6078      	str	r0, [r7, #4]
 8016efe:	6039      	str	r1, [r7, #0]
	PifGpsUblox *p_owner = (PifGpsUblox *)p_client;
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	switch (p_owner->__tx.state) {
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8016f0a:	2b02      	cmp	r3, #2
 8016f0c:	d05d      	beq.n	8016fca <_evtSending+0xd4>
 8016f0e:	2b02      	cmp	r3, #2
 8016f10:	dc72      	bgt.n	8016ff8 <_evtSending+0x102>
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d002      	beq.n	8016f1c <_evtSending+0x26>
 8016f16:	2b01      	cmp	r3, #1
 8016f18:	d01c      	beq.n	8016f54 <_evtSending+0x5e>
			p_owner->__tx.state = GUTS_IDLE;
		}
		break;

	default:
		break;
 8016f1a:	e06d      	b.n	8016ff8 <_evtSending+0x102>
		if (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 8016f1c:	68fb      	ldr	r3, [r7, #12]
 8016f1e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016f22:	4618      	mov	r0, r3
 8016f24:	f7fc feeb 	bl	8013cfe <pifRingBuffer_IsEmpty>
 8016f28:	4603      	mov	r3, r0
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d166      	bne.n	8016ffc <_evtSending+0x106>
			pifRingBuffer_CopyToArray(p_owner->__tx.ui.info, 4, &p_owner->__tx.buffer, 0);
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	f203 207a 	addw	r0, r3, #634	; 0x27a
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	f503 7217 	add.w	r2, r3, #604	; 0x25c
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	2104      	movs	r1, #4
 8016f3e:	f7fd f874 	bl	801402a <pifRingBuffer_CopyToArray>
			p_owner->__tx.pos = 4;
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	2204      	movs	r2, #4
 8016f46:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
			p_owner->__tx.state = GUTS_SENDING;
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	2201      	movs	r2, #1
 8016f4e:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
		break;
 8016f52:	e053      	b.n	8016ffc <_evtSending+0x106>
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, p_owner->__tx.pos),
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	f8d3 40c4 	ldr.w	r4, [r3, #196]	; 0xc4
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	f503 7217 	add.w	r2, r3, #604	; 0x25c
 8016f60:	68fb      	ldr	r3, [r7, #12]
 8016f62:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
 8016f66:	b29b      	uxth	r3, r3
 8016f68:	4619      	mov	r1, r3
 8016f6a:	4610      	mov	r0, r2
 8016f6c:	f7fc fe9b 	bl	8013ca6 <pifRingBuffer_GetTailPointer>
 8016f70:	4605      	mov	r5, r0
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	f503 7217 	add.w	r2, r3, #604	; 0x25c
				pifRingBuffer_GetLinerSize(&p_owner->__tx.buffer, p_owner->__tx.pos));
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, p_owner->__tx.pos),
 8016f7e:	b29b      	uxth	r3, r3
 8016f80:	4619      	mov	r1, r3
 8016f82:	4610      	mov	r0, r2
 8016f84:	f7fc fef0 	bl	8013d68 <pifRingBuffer_GetLinerSize>
 8016f88:	4603      	mov	r3, r0
 8016f8a:	461a      	mov	r2, r3
 8016f8c:	683b      	ldr	r3, [r7, #0]
 8016f8e:	4629      	mov	r1, r5
 8016f90:	4620      	mov	r0, r4
 8016f92:	4798      	blx	r3
 8016f94:	4603      	mov	r3, r0
 8016f96:	817b      	strh	r3, [r7, #10]
		p_owner->__tx.pos += length;
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	f893 227e 	ldrb.w	r2, [r3, #638]	; 0x27e
 8016f9e:	897b      	ldrh	r3, [r7, #10]
 8016fa0:	b2db      	uxtb	r3, r3
 8016fa2:	4413      	add	r3, r2
 8016fa4:	b2da      	uxtb	r2, r3
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
		if (p_owner->__tx.pos >= 4 + p_owner->__tx.ui.st.length) {
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 8016fb2:	3303      	adds	r3, #3
 8016fb4:	68fa      	ldr	r2, [r7, #12]
 8016fb6:	f892 227e 	ldrb.w	r2, [r2, #638]	; 0x27e
 8016fba:	4293      	cmp	r3, r2
 8016fbc:	da03      	bge.n	8016fc6 <_evtSending+0xd0>
			p_owner->__tx.state = GUTS_WAIT_SENDED;
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	2202      	movs	r2, #2
 8016fc2:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
		return TRUE;
 8016fc6:	2301      	movs	r3, #1
 8016fc8:	e01c      	b.n	8017004 <_evtSending+0x10e>
		if (!p_owner->__tx.ui.st.response) {
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d115      	bne.n	8017000 <_evtSending+0x10a>
			pifRingBuffer_Remove(&p_owner->__tx.buffer, 4 + p_owner->__tx.ui.st.length);
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	f503 7217 	add.w	r2, r3, #604	; 0x25c
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 8016fe0:	b29b      	uxth	r3, r3
 8016fe2:	3304      	adds	r3, #4
 8016fe4:	b29b      	uxth	r3, r3
 8016fe6:	4619      	mov	r1, r3
 8016fe8:	4610      	mov	r0, r2
 8016fea:	f7fd f864 	bl	80140b6 <pifRingBuffer_Remove>
			p_owner->__tx.state = GUTS_IDLE;
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	2200      	movs	r2, #0
 8016ff2:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
		break;
 8016ff6:	e003      	b.n	8017000 <_evtSending+0x10a>
		break;
 8016ff8:	bf00      	nop
 8016ffa:	e002      	b.n	8017002 <_evtSending+0x10c>
		break;
 8016ffc:	bf00      	nop
 8016ffe:	e000      	b.n	8017002 <_evtSending+0x10c>
		break;
 8017000:	bf00      	nop
	}
	return FALSE;
 8017002:	2300      	movs	r3, #0
}
 8017004:	4618      	mov	r0, r3
 8017006:	3710      	adds	r7, #16
 8017008:	46bd      	mov	sp, r7
 801700a:	bdb0      	pop	{r4, r5, r7, pc}

0801700c <pifGpsUblox_Init>:

BOOL pifGpsUblox_Init(PifGpsUblox* p_owner, PifId id)
{
 801700c:	b580      	push	{r7, lr}
 801700e:	b084      	sub	sp, #16
 8017010:	af02      	add	r7, sp, #8
 8017012:	6078      	str	r0, [r7, #4]
 8017014:	460b      	mov	r3, r1
 8017016:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d103      	bne.n	8017026 <pifGpsUblox_Init+0x1a>
		pif_error = E_INVALID_PARAM;
 801701e:	4b1e      	ldr	r3, [pc, #120]	; (8017098 <pifGpsUblox_Init+0x8c>)
 8017020:	2201      	movs	r2, #1
 8017022:	701a      	strb	r2, [r3, #0]
		goto fail;
 8017024:	e026      	b.n	8017074 <pifGpsUblox_Init+0x68>
	}

	memset(p_owner, 0, sizeof(PifGpsUblox));
 8017026:	f44f 7220 	mov.w	r2, #640	; 0x280
 801702a:	2100      	movs	r1, #0
 801702c:	6878      	ldr	r0, [r7, #4]
 801702e:	f00a fed9 	bl	8021de4 <memset>

    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	3310      	adds	r3, #16
 8017036:	887a      	ldrh	r2, [r7, #2]
 8017038:	4611      	mov	r1, r2
 801703a:	4618      	mov	r0, r3
 801703c:	f7fe fc44 	bl	80158c8 <pifGps_Init>
 8017040:	4603      	mov	r3, r0
 8017042:	2b00      	cmp	r3, #0
 8017044:	d013      	beq.n	801706e <pifGpsUblox_Init+0x62>

    if (!pifRingBuffer_InitHeap(&p_owner->__tx.buffer, PIF_ID_AUTO, PIF_GPS_UBLOX_TX_SIZE)) goto fail;
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 801704c:	2240      	movs	r2, #64	; 0x40
 801704e:	2100      	movs	r1, #0
 8017050:	4618      	mov	r0, r3
 8017052:	f7fc fdb7 	bl	8013bc4 <pifRingBuffer_InitHeap>
 8017056:	4603      	mov	r3, r0
 8017058:	2b00      	cmp	r3, #0
 801705a:	d00a      	beq.n	8017072 <pifGpsUblox_Init+0x66>
    pifRingBuffer_SetName(&p_owner->__tx.buffer, "TxB");
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8017062:	490e      	ldr	r1, [pc, #56]	; (801709c <pifGpsUblox_Init+0x90>)
 8017064:	4618      	mov	r0, r3
 8017066:	f7fc fe10 	bl	8013c8a <pifRingBuffer_SetName>
    return TRUE;
 801706a:	2301      	movs	r3, #1
 801706c:	e010      	b.n	8017090 <pifGpsUblox_Init+0x84>
    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 801706e:	bf00      	nop
 8017070:	e000      	b.n	8017074 <pifGpsUblox_Init+0x68>
    if (!pifRingBuffer_InitHeap(&p_owner->__tx.buffer, PIF_ID_AUTO, PIF_GPS_UBLOX_TX_SIZE)) goto fail;
 8017072:	bf00      	nop

fail:
	pifGpsUblox_Clear(p_owner);
 8017074:	6878      	ldr	r0, [r7, #4]
 8017076:	f000 f815 	bl	80170a4 <pifGpsUblox_Clear>
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, id, pif_error);
 801707a:	887b      	ldrh	r3, [r7, #2]
 801707c:	4a06      	ldr	r2, [pc, #24]	; (8017098 <pifGpsUblox_Init+0x8c>)
 801707e:	7812      	ldrb	r2, [r2, #0]
 8017080:	9200      	str	r2, [sp, #0]
 8017082:	f240 12d5 	movw	r2, #469	; 0x1d5
 8017086:	4906      	ldr	r1, [pc, #24]	; (80170a0 <pifGpsUblox_Init+0x94>)
 8017088:	2004      	movs	r0, #4
 801708a:	f7fc fa83 	bl	8013594 <pifLog_Printf>
#endif
    return FALSE;
 801708e:	2300      	movs	r3, #0
}
 8017090:	4618      	mov	r0, r3
 8017092:	3708      	adds	r7, #8
 8017094:	46bd      	mov	sp, r7
 8017096:	bd80      	pop	{r7, pc}
 8017098:	200020d1 	.word	0x200020d1
 801709c:	080268ec 	.word	0x080268ec
 80170a0:	080268f0 	.word	0x080268f0

080170a4 <pifGpsUblox_Clear>:

void pifGpsUblox_Clear(PifGpsUblox* p_owner)
{
 80170a4:	b580      	push	{r7, lr}
 80170a6:	b082      	sub	sp, #8
 80170a8:	af00      	add	r7, sp, #0
 80170aa:	6078      	str	r0, [r7, #4]
	pifRingBuffer_Clear(&p_owner->__tx.buffer);
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80170b2:	4618      	mov	r0, r3
 80170b4:	f7fc fdce 	bl	8013c54 <pifRingBuffer_Clear>
}
 80170b8:	bf00      	nop
 80170ba:	3708      	adds	r7, #8
 80170bc:	46bd      	mov	sp, r7
 80170be:	bd80      	pop	{r7, pc}

080170c0 <pifGpsUblox_AttachComm>:

void pifGpsUblox_AttachComm(PifGpsUblox* p_owner, PifComm *p_comm)
{
 80170c0:	b580      	push	{r7, lr}
 80170c2:	b082      	sub	sp, #8
 80170c4:	af00      	add	r7, sp, #0
 80170c6:	6078      	str	r0, [r7, #4]
 80170c8:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	683a      	ldr	r2, [r7, #0]
 80170ce:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, _evtSending);
 80170d2:	4b05      	ldr	r3, [pc, #20]	; (80170e8 <pifGpsUblox_AttachComm+0x28>)
 80170d4:	4a05      	ldr	r2, [pc, #20]	; (80170ec <pifGpsUblox_AttachComm+0x2c>)
 80170d6:	6879      	ldr	r1, [r7, #4]
 80170d8:	6838      	ldr	r0, [r7, #0]
 80170da:	f7fb f849 	bl	8012170 <pifComm_AttachClient>
}
 80170de:	bf00      	nop
 80170e0:	3708      	adds	r7, #8
 80170e2:	46bd      	mov	sp, r7
 80170e4:	bd80      	pop	{r7, pc}
 80170e6:	bf00      	nop
 80170e8:	08016ef7 	.word	0x08016ef7
 80170ec:	08016789 	.word	0x08016789

080170f0 <pifGpsUblox_SetPubxConfig>:

	return _makeNmeaPacket(p_owner, data, blocking);
}

BOOL pifGpsUblox_SetPubxConfig(PifGpsUblox* p_owner, uint8_t port_id, uint16_t in_proto, uint16_t out_proto, uint32_t baudrate, BOOL blocking)
{
 80170f0:	b590      	push	{r4, r7, lr}
 80170f2:	b091      	sub	sp, #68	; 0x44
 80170f4:	af02      	add	r7, sp, #8
 80170f6:	60f8      	str	r0, [r7, #12]
 80170f8:	4608      	mov	r0, r1
 80170fa:	4611      	mov	r1, r2
 80170fc:	461a      	mov	r2, r3
 80170fe:	4603      	mov	r3, r0
 8017100:	72fb      	strb	r3, [r7, #11]
 8017102:	460b      	mov	r3, r1
 8017104:	813b      	strh	r3, [r7, #8]
 8017106:	4613      	mov	r3, r2
 8017108:	80fb      	strh	r3, [r7, #6]
	char data[40];

	if (p_owner->__tx.state != GUTS_IDLE) {
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8017110:	2b00      	cmp	r3, #0
 8017112:	d004      	beq.n	801711e <pifGpsUblox_SetPubxConfig+0x2e>
		pif_error = E_INVALID_STATE;
 8017114:	4b0f      	ldr	r3, [pc, #60]	; (8017154 <pifGpsUblox_SetPubxConfig+0x64>)
 8017116:	2202      	movs	r2, #2
 8017118:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801711a:	2300      	movs	r3, #0
 801711c:	e015      	b.n	801714a <pifGpsUblox_SetPubxConfig+0x5a>
	}

	pif_Printf(data, "$PUBX,41,%u,%4X,%4X,%lu,0*", port_id, in_proto, out_proto, baudrate);
 801711e:	7af9      	ldrb	r1, [r7, #11]
 8017120:	893c      	ldrh	r4, [r7, #8]
 8017122:	88fb      	ldrh	r3, [r7, #6]
 8017124:	f107 0010 	add.w	r0, r7, #16
 8017128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801712a:	9201      	str	r2, [sp, #4]
 801712c:	9300      	str	r3, [sp, #0]
 801712e:	4623      	mov	r3, r4
 8017130:	460a      	mov	r2, r1
 8017132:	4909      	ldr	r1, [pc, #36]	; (8017158 <pifGpsUblox_SetPubxConfig+0x68>)
 8017134:	f7fa fe5a 	bl	8011dec <pif_Printf>

	return _makeNmeaPacket(p_owner, data, blocking);
 8017138:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 801713c:	f107 0310 	add.w	r3, r7, #16
 8017140:	4619      	mov	r1, r3
 8017142:	68f8      	ldr	r0, [r7, #12]
 8017144:	f7ff fdb6 	bl	8016cb4 <_makeNmeaPacket>
 8017148:	4603      	mov	r3, r0
}
 801714a:	4618      	mov	r0, r3
 801714c:	373c      	adds	r7, #60	; 0x3c
 801714e:	46bd      	mov	sp, r7
 8017150:	bd90      	pop	{r4, r7, pc}
 8017152:	bf00      	nop
 8017154:	200020d1 	.word	0x200020d1
 8017158:	08026944 	.word	0x08026944

0801715c <pifGpsUblox_SendUbxMsg>:

	return _makeNmeaPacket(p_owner, data, blocking);
}

BOOL pifGpsUblox_SendUbxMsg(PifGpsUblox* p_owner, uint8_t class_id, uint8_t msg_id, uint16_t length, uint8_t* payload, BOOL blocking)
{
 801715c:	b580      	push	{r7, lr}
 801715e:	b086      	sub	sp, #24
 8017160:	af02      	add	r7, sp, #8
 8017162:	6078      	str	r0, [r7, #4]
 8017164:	4608      	mov	r0, r1
 8017166:	4611      	mov	r1, r2
 8017168:	461a      	mov	r2, r3
 801716a:	4603      	mov	r3, r0
 801716c:	70fb      	strb	r3, [r7, #3]
 801716e:	460b      	mov	r3, r1
 8017170:	70bb      	strb	r3, [r7, #2]
 8017172:	4613      	mov	r3, r2
 8017174:	803b      	strh	r3, [r7, #0]
	uint8_t header[6] = { 0xB5, 0x62 };
 8017176:	f246 23b5 	movw	r3, #25269	; 0x62b5
 801717a:	60bb      	str	r3, [r7, #8]
 801717c:	2300      	movs	r3, #0
 801717e:	81bb      	strh	r3, [r7, #12]

	if (p_owner->__tx.state != GUTS_IDLE) {
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8017186:	2b00      	cmp	r3, #0
 8017188:	d004      	beq.n	8017194 <pifGpsUblox_SendUbxMsg+0x38>
		pif_error = E_INVALID_STATE;
 801718a:	4b0f      	ldr	r3, [pc, #60]	; (80171c8 <pifGpsUblox_SendUbxMsg+0x6c>)
 801718c:	2202      	movs	r2, #2
 801718e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8017190:	2300      	movs	r3, #0
 8017192:	e015      	b.n	80171c0 <pifGpsUblox_SendUbxMsg+0x64>
	}

	header[2] = class_id;
 8017194:	78fb      	ldrb	r3, [r7, #3]
 8017196:	72bb      	strb	r3, [r7, #10]
	header[3] = msg_id;
 8017198:	78bb      	ldrb	r3, [r7, #2]
 801719a:	72fb      	strb	r3, [r7, #11]
	header[4] = length & 0xFF;
 801719c:	883b      	ldrh	r3, [r7, #0]
 801719e:	b2db      	uxtb	r3, r3
 80171a0:	733b      	strb	r3, [r7, #12]
	header[5] = length >> 8;
 80171a2:	883b      	ldrh	r3, [r7, #0]
 80171a4:	0a1b      	lsrs	r3, r3, #8
 80171a6:	b29b      	uxth	r3, r3
 80171a8:	b2db      	uxtb	r3, r3
 80171aa:	737b      	strb	r3, [r7, #13]

	return _makeUbxPacket(p_owner, header, length, payload, blocking);
 80171ac:	883a      	ldrh	r2, [r7, #0]
 80171ae:	f107 0108 	add.w	r1, r7, #8
 80171b2:	7f3b      	ldrb	r3, [r7, #28]
 80171b4:	9300      	str	r3, [sp, #0]
 80171b6:	69bb      	ldr	r3, [r7, #24]
 80171b8:	6878      	ldr	r0, [r7, #4]
 80171ba:	f7ff fe1d 	bl	8016df8 <_makeUbxPacket>
 80171be:	4603      	mov	r3, r0
}
 80171c0:	4618      	mov	r0, r3
 80171c2:	3710      	adds	r7, #16
 80171c4:	46bd      	mov	sp, r7
 80171c6:	bd80      	pop	{r7, pc}
 80171c8:	200020d1 	.word	0x200020d1

080171cc <_evtTimerRxTimeout>:

#if PIF_MSP_RECEIVE_TIMEOUT


static void _evtTimerRxTimeout(PifIssuerP p_issuer)
{
 80171cc:	b580      	push	{r7, lr}
 80171ce:	b086      	sub	sp, #24
 80171d0:	af02      	add	r7, sp, #8
 80171d2:	6078      	str	r0, [r7, #4]
	if (!p_issuer) {
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d103      	bne.n	80171e2 <_evtTimerRxTimeout+0x16>
		pif_error = E_INVALID_PARAM;
 80171da:	4b11      	ldr	r3, [pc, #68]	; (8017220 <_evtTimerRxTimeout+0x54>)
 80171dc:	2201      	movs	r2, #1
 80171de:	701a      	strb	r2, [r3, #0]
		return;
 80171e0:	e01a      	b.n	8017218 <_evtTimerRxTimeout+0x4c>
	}

	PifMsp* p_owner = (PifMsp *)p_issuer;
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	60fb      	str	r3, [r7, #12]

#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	891b      	ldrh	r3, [r3, #8]
 80171ea:	4619      	mov	r1, r3
			p_owner->__rx.state, p_owner->__rx.packet.data_count);
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	7c1b      	ldrb	r3, [r3, #16]
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 80171f0:	461a      	mov	r2, r3
			p_owner->__rx.state, p_owner->__rx.packet.data_count);
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	7f5b      	ldrb	r3, [r3, #29]
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 80171f6:	9301      	str	r3, [sp, #4]
 80171f8:	9200      	str	r2, [sp, #0]
 80171fa:	460b      	mov	r3, r1
 80171fc:	2216      	movs	r2, #22
 80171fe:	4909      	ldr	r1, [pc, #36]	; (8017224 <_evtTimerRxTimeout+0x58>)
 8017200:	2004      	movs	r0, #4
 8017202:	f7fc f9c7 	bl	8013594 <pifLog_Printf>
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x %x %x %x", p_owner->__rx.p_packet[0], p_owner->__rx.p_packet[1],
			p_owner->__rx.p_packet[2], p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4], p_owner->__rx.p_packet[5],
			p_owner->__rx.p_packet[6], p_owner->__rx.p_packet[7]);
#endif
#endif
	pifRingBuffer_PutByte(&p_owner->__tx.answer_buffer, ASCII_NAK);
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	3328      	adds	r3, #40	; 0x28
 801720a:	2115      	movs	r1, #21
 801720c:	4618      	mov	r0, r3
 801720e:	f7fc fe15 	bl	8013e3c <pifRingBuffer_PutByte>
	p_owner->__rx.state = MRS_IDLE;
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	2200      	movs	r2, #0
 8017216:	741a      	strb	r2, [r3, #16]
}
 8017218:	3710      	adds	r7, #16
 801721a:	46bd      	mov	sp, r7
 801721c:	bd80      	pop	{r7, pc}
 801721e:	bf00      	nop
 8017220:	200020d1 	.word	0x200020d1
 8017224:	08026980 	.word	0x08026980

08017228 <_parsingPacket>:
};

#endif

static void _parsingPacket(PifMsp *p_owner, PifActCommReceiveData act_receive_data)
{
 8017228:	b590      	push	{r4, r7, lr}
 801722a:	b08b      	sub	sp, #44	; 0x2c
 801722c:	af04      	add	r7, sp, #16
 801722e:	6078      	str	r0, [r7, #4]
 8017230:	6039      	str	r1, [r7, #0]
	PifMspPacket* p_packet = &p_owner->__rx.packet;
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	331c      	adds	r3, #28
 8017236:	60fb      	str	r3, [r7, #12]
#ifndef __PIF_NO_LOG__
	int line;
#endif
	static uint8_t pre_error = PKT_ERR_NONE;

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8017238:	e0b0      	b.n	801739c <_parsingPacket+0x174>
		switch (p_owner->__rx.state) {
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	7c1b      	ldrb	r3, [r3, #16]
 801723e:	2b05      	cmp	r3, #5
 8017240:	f200 80ab 	bhi.w	801739a <_parsingPacket+0x172>
 8017244:	a201      	add	r2, pc, #4	; (adr r2, 801724c <_parsingPacket+0x24>)
 8017246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801724a:	bf00      	nop
 801724c:	08017265 	.word	0x08017265
 8017250:	080172a9 	.word	0x080172a9
 8017254:	080172c1 	.word	0x080172c1
 8017258:	080172d9 	.word	0x080172d9
 801725c:	08017305 	.word	0x08017305
 8017260:	0801732d 	.word	0x0801732d
		case MRS_IDLE:
			if (data == '$') {
 8017264:	7afb      	ldrb	r3, [r7, #11]
 8017266:	2b24      	cmp	r3, #36	; 0x24
 8017268:	d109      	bne.n	801727e <_parsingPacket+0x56>
				p_owner->__rx.state = MRS_HEADER_CHAR_1;
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	2201      	movs	r2, #1
 801726e:	741a      	strb	r2, [r3, #16]
#if PIF_MSP_RECEIVE_TIMEOUT
				pifTimer_Start(p_owner->__rx.p_timer, PIF_MSP_RECEIVE_TIMEOUT);
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017274:	21c8      	movs	r1, #200	; 0xc8
 8017276:	4618      	mov	r0, r3
 8017278:	f7fd fd66 	bl	8014d48 <pifTimer_Start>
 801727c:	e08e      	b.n	801739c <_parsingPacket+0x174>
#endif
			}
			else if (pre_error == PKT_ERR_NONE && p_owner->evt_other_packet) {
 801727e:	4b64      	ldr	r3, [pc, #400]	; (8017410 <_parsingPacket+0x1e8>)
 8017280:	781b      	ldrb	r3, [r3, #0]
 8017282:	2b03      	cmp	r3, #3
 8017284:	d10a      	bne.n	801729c <_parsingPacket+0x74>
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	685b      	ldr	r3, [r3, #4]
 801728a:	2b00      	cmp	r3, #0
 801728c:	d006      	beq.n	801729c <_parsingPacket+0x74>
				(*p_owner->evt_other_packet)(p_owner, data);
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	685b      	ldr	r3, [r3, #4]
 8017292:	7afa      	ldrb	r2, [r7, #11]
 8017294:	4611      	mov	r1, r2
 8017296:	6878      	ldr	r0, [r7, #4]
 8017298:	4798      	blx	r3
 801729a:	e004      	b.n	80172a6 <_parsingPacket+0x7e>
			}
			else {
				pkt_err = PKT_ERR_INVALID_DATA;
 801729c:	2301      	movs	r3, #1
 801729e:	75fb      	strb	r3, [r7, #23]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
 80172a0:	234c      	movs	r3, #76	; 0x4c
 80172a2:	613b      	str	r3, [r7, #16]
#endif
				goto fail;
 80172a4:	e089      	b.n	80173ba <_parsingPacket+0x192>
			}
			break;
 80172a6:	e079      	b.n	801739c <_parsingPacket+0x174>

		case MRS_HEADER_CHAR_1:
			if (data == 'M') {
 80172a8:	7afb      	ldrb	r3, [r7, #11]
 80172aa:	2b4d      	cmp	r3, #77	; 0x4d
 80172ac:	d103      	bne.n	80172b6 <_parsingPacket+0x8e>
				p_owner->__rx.state = MRS_HEADER_CHAR_2;
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	2202      	movs	r2, #2
 80172b2:	741a      	strb	r2, [r3, #16]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 80172b4:	e072      	b.n	801739c <_parsingPacket+0x174>
				pkt_err = PKT_ERR_INVALID_DATA;
 80172b6:	2301      	movs	r3, #1
 80172b8:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 80172ba:	2359      	movs	r3, #89	; 0x59
 80172bc:	613b      	str	r3, [r7, #16]
				goto fail;
 80172be:	e07c      	b.n	80173ba <_parsingPacket+0x192>

		case MRS_HEADER_CHAR_2:
			if (data == '<') {
 80172c0:	7afb      	ldrb	r3, [r7, #11]
 80172c2:	2b3c      	cmp	r3, #60	; 0x3c
 80172c4:	d103      	bne.n	80172ce <_parsingPacket+0xa6>
				p_owner->__rx.state = MRS_DIRECTION;
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	2203      	movs	r2, #3
 80172ca:	741a      	strb	r2, [r3, #16]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 80172cc:	e066      	b.n	801739c <_parsingPacket+0x174>
				pkt_err = PKT_ERR_INVALID_DATA;
 80172ce:	2301      	movs	r3, #1
 80172d0:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 80172d2:	2366      	movs	r3, #102	; 0x66
 80172d4:	613b      	str	r3, [r7, #16]
				goto fail;
 80172d6:	e070      	b.n	80173ba <_parsingPacket+0x192>

		case MRS_DIRECTION:
			if (data < PIF_MSP_RX_PACKET_SIZE - 3) {
 80172d8:	7afb      	ldrb	r3, [r7, #11]
 80172da:	2b7c      	cmp	r3, #124	; 0x7c
 80172dc:	d80d      	bhi.n	80172fa <_parsingPacket+0xd2>
				p_packet->data_count = data;
 80172de:	7afa      	ldrb	r2, [r7, #11]
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	705a      	strb	r2, [r3, #1]
				p_owner->__rx.p_packet[0] = data;
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	695b      	ldr	r3, [r3, #20]
 80172e8:	7afa      	ldrb	r2, [r7, #11]
 80172ea:	701a      	strb	r2, [r3, #0]
				p_owner->__rx.packet_count = 1;
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	2201      	movs	r2, #1
 80172f0:	761a      	strb	r2, [r3, #24]
				p_owner->__rx.state = MRS_LENGTH;
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	2204      	movs	r2, #4
 80172f6:	741a      	strb	r2, [r3, #16]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 80172f8:	e050      	b.n	801739c <_parsingPacket+0x174>
				pkt_err = PKT_ERR_BIG_LENGHT;
 80172fa:	2300      	movs	r3, #0
 80172fc:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 80172fe:	2376      	movs	r3, #118	; 0x76
 8017300:	613b      	str	r3, [r7, #16]
				goto fail;
 8017302:	e05a      	b.n	80173ba <_parsingPacket+0x192>

		case MRS_LENGTH:
			p_packet->command = data;
 8017304:	7afa      	ldrb	r2, [r7, #11]
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.p_packet[p_owner->__rx.packet_count] = data;
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	695b      	ldr	r3, [r3, #20]
 801730e:	687a      	ldr	r2, [r7, #4]
 8017310:	7e12      	ldrb	r2, [r2, #24]
 8017312:	4413      	add	r3, r2
 8017314:	7afa      	ldrb	r2, [r7, #11]
 8017316:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.packet_count++;
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	7e1b      	ldrb	r3, [r3, #24]
 801731c:	3301      	adds	r3, #1
 801731e:	b2da      	uxtb	r2, r3
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	761a      	strb	r2, [r3, #24]
			p_owner->__rx.state = MRS_MESSAGE_TYPE;
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	2205      	movs	r2, #5
 8017328:	741a      	strb	r2, [r3, #16]
			break;
 801732a:	e037      	b.n	801739c <_parsingPacket+0x174>

		case MRS_MESSAGE_TYPE:
			p_owner->__rx.p_packet[p_owner->__rx.packet_count] = data;
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	695b      	ldr	r3, [r3, #20]
 8017330:	687a      	ldr	r2, [r7, #4]
 8017332:	7e12      	ldrb	r2, [r2, #24]
 8017334:	4413      	add	r3, r2
 8017336:	7afa      	ldrb	r2, [r7, #11]
 8017338:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.packet_count++;
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	7e1b      	ldrb	r3, [r3, #24]
 801733e:	3301      	adds	r3, #1
 8017340:	b2da      	uxtb	r2, r3
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	761a      	strb	r2, [r3, #24]
			if (p_owner->__rx.packet_count >= 3 + p_packet->data_count) {
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	785b      	ldrb	r3, [r3, #1]
 801734a:	3302      	adds	r3, #2
 801734c:	687a      	ldr	r2, [r7, #4]
 801734e:	7e12      	ldrb	r2, [r2, #24]
 8017350:	4293      	cmp	r3, r2
 8017352:	da23      	bge.n	801739c <_parsingPacket+0x174>
				if (data == pifCheckXor(p_owner->__rx.p_packet, 2 + p_packet->data_count)) {
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	695a      	ldr	r2, [r3, #20]
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	785b      	ldrb	r3, [r3, #1]
 801735c:	b29b      	uxth	r3, r3
 801735e:	3302      	adds	r3, #2
 8017360:	b29b      	uxth	r3, r3
 8017362:	4619      	mov	r1, r3
 8017364:	4610      	mov	r0, r2
 8017366:	f7fa fdaa 	bl	8011ebe <pifCheckXor>
 801736a:	4603      	mov	r3, r0
 801736c:	461a      	mov	r2, r3
 801736e:	7afb      	ldrb	r3, [r7, #11]
 8017370:	429a      	cmp	r2, r3
 8017372:	d10d      	bne.n	8017390 <_parsingPacket+0x168>
#if PIF_MSP_RECEIVE_TIMEOUT
					pifTimer_Stop(p_owner->__rx.p_timer);
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017378:	4618      	mov	r0, r3
 801737a:	f7fd fd13 	bl	8014da4 <pifTimer_Stop>
#endif
					p_packet->p_data = p_owner->__rx.p_packet + 2;
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	695b      	ldr	r3, [r3, #20]
 8017382:	1c9a      	adds	r2, r3, #2
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	605a      	str	r2, [r3, #4]
					p_owner->__rx.state = MRS_DONE;
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	2206      	movs	r2, #6
 801738c:	741a      	strb	r2, [r3, #16]
					return;
 801738e:	e03c      	b.n	801740a <_parsingPacket+0x1e2>
				}
				else {
					pkt_err = PKT_ERR_WRONG_CRC;
 8017390:	2302      	movs	r3, #2
 8017392:	75fb      	strb	r3, [r7, #23]
#ifndef __PIF_NO_LOG__
					line = __LINE__;
 8017394:	2392      	movs	r3, #146	; 0x92
 8017396:	613b      	str	r3, [r7, #16]
#endif
					goto fail;
 8017398:	e00f      	b.n	80173ba <_parsingPacket+0x192>
				}
			}
			break;

		default:
			break;
 801739a:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	68da      	ldr	r2, [r3, #12]
 80173a0:	f107 010b 	add.w	r1, r7, #11
 80173a4:	683b      	ldr	r3, [r7, #0]
 80173a6:	4610      	mov	r0, r2
 80173a8:	4798      	blx	r3
 80173aa:	4603      	mov	r3, r0
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	f47f af44 	bne.w	801723a <_parsingPacket+0x12>
		}
	}
	pre_error = PKT_ERR_NONE;
 80173b2:	4b17      	ldr	r3, [pc, #92]	; (8017410 <_parsingPacket+0x1e8>)
 80173b4:	2203      	movs	r2, #3
 80173b6:	701a      	strb	r2, [r3, #0]
	return;
 80173b8:	e027      	b.n	801740a <_parsingPacket+0x1e2>

fail:
	if (pkt_err != pre_error) {
 80173ba:	4b15      	ldr	r3, [pc, #84]	; (8017410 <_parsingPacket+0x1e8>)
 80173bc:	781b      	ldrb	r3, [r3, #0]
 80173be:	7dfa      	ldrb	r2, [r7, #23]
 80173c0:	429a      	cmp	r2, r3
 80173c2:	d01a      	beq.n	80173fa <_parsingPacket+0x1d2>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	891b      	ldrh	r3, [r3, #8]
 80173c8:	461c      	mov	r4, r3
 80173ca:	7dfb      	ldrb	r3, [r7, #23]
 80173cc:	4a11      	ldr	r2, [pc, #68]	; (8017414 <_parsingPacket+0x1ec>)
 80173ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80173d2:	7afa      	ldrb	r2, [r7, #11]
 80173d4:	4611      	mov	r1, r2
				p_owner->__rx.state, p_packet->data_count);
 80173d6:	687a      	ldr	r2, [r7, #4]
 80173d8:	7c12      	ldrb	r2, [r2, #16]
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 80173da:	4610      	mov	r0, r2
				p_owner->__rx.state, p_packet->data_count);
 80173dc:	68fa      	ldr	r2, [r7, #12]
 80173de:	7852      	ldrb	r2, [r2, #1]
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 80173e0:	9203      	str	r2, [sp, #12]
 80173e2:	9002      	str	r0, [sp, #8]
 80173e4:	9101      	str	r1, [sp, #4]
 80173e6:	9300      	str	r3, [sp, #0]
 80173e8:	4623      	mov	r3, r4
 80173ea:	693a      	ldr	r2, [r7, #16]
 80173ec:	490a      	ldr	r1, [pc, #40]	; (8017418 <_parsingPacket+0x1f0>)
 80173ee:	2004      	movs	r0, #4
 80173f0:	f7fc f8d0 	bl	8013594 <pifLog_Printf>
#endif
		pre_error = pkt_err;
 80173f4:	4a06      	ldr	r2, [pc, #24]	; (8017410 <_parsingPacket+0x1e8>)
 80173f6:	7dfb      	ldrb	r3, [r7, #23]
 80173f8:	7013      	strb	r3, [r2, #0]
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x", p_owner->__rx.p_packet[0], p_owner->__rx.p_packet[1], p_owner->__rx.p_packet[2],
			p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4]);
#endif

#if PIF_MSP_RECEIVE_TIMEOUT
   	pifTimer_Stop(p_owner->__rx.p_timer);
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173fe:	4618      	mov	r0, r3
 8017400:	f7fd fcd0 	bl	8014da4 <pifTimer_Stop>
#endif
	p_owner->__rx.state = MRS_IDLE;
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	2200      	movs	r2, #0
 8017408:	741a      	strb	r2, [r3, #16]
}
 801740a:	371c      	adds	r7, #28
 801740c:	46bd      	mov	sp, r7
 801740e:	bd90      	pop	{r4, r7, pc}
 8017410:	2000008c 	.word	0x2000008c
 8017414:	20000080 	.word	0x20000080
 8017418:	080269dc 	.word	0x080269dc

0801741c <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 801741c:	b580      	push	{r7, lr}
 801741e:	b084      	sub	sp, #16
 8017420:	af00      	add	r7, sp, #0
 8017422:	6078      	str	r0, [r7, #4]
 8017424:	6039      	str	r1, [r7, #0]
	PifMsp *p_owner = (PifMsp *)p_client;
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	60fb      	str	r3, [r7, #12]

    if (p_owner->__rx.state < MRS_DONE) {
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	7c1b      	ldrb	r3, [r3, #16]
 801742e:	2b05      	cmp	r3, #5
 8017430:	d803      	bhi.n	801743a <_evtParsing+0x1e>
    	_parsingPacket(p_owner, act_receive_data);
 8017432:	6839      	ldr	r1, [r7, #0]
 8017434:	68f8      	ldr	r0, [r7, #12]
 8017436:	f7ff fef7 	bl	8017228 <_parsingPacket>
    }

    if (p_owner->__rx.state == MRS_DONE) {
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	7c1b      	ldrb	r3, [r3, #16]
 801743e:	2b06      	cmp	r3, #6
 8017440:	d117      	bne.n	8017472 <_evtParsing+0x56>
    	pifLog_Printf(LT_NONE, "\n%u> %x %x %x %x %x", p_owner->_id, p_owner->__rx.p_packet[0],	p_owner->__rx.p_packet[1],
    			p_owner->__rx.p_packet[2], p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4]);
#endif
#endif

    	if (p_owner->evt_receive) (*p_owner->evt_receive)(p_owner, &p_owner->__rx.packet);
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	681b      	ldr	r3, [r3, #0]
 8017446:	2b00      	cmp	r3, #0
 8017448:	d006      	beq.n	8017458 <_evtParsing+0x3c>
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	681b      	ldr	r3, [r3, #0]
 801744e:	68fa      	ldr	r2, [r7, #12]
 8017450:	321c      	adds	r2, #28
 8017452:	4611      	mov	r1, r2
 8017454:	68f8      	ldr	r0, [r7, #12]
 8017456:	4798      	blx	r3
    	if (p_owner->__p_comm->_p_task) p_owner->__p_comm->_p_task->immediate = TRUE;
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	68db      	ldr	r3, [r3, #12]
 801745c:	69db      	ldr	r3, [r3, #28]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d004      	beq.n	801746c <_evtParsing+0x50>
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	68db      	ldr	r3, [r3, #12]
 8017466:	69db      	ldr	r3, [r3, #28]
 8017468:	2201      	movs	r2, #1
 801746a:	705a      	strb	r2, [r3, #1]
    	p_owner->__rx.state = MRS_IDLE;
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	2200      	movs	r2, #0
 8017470:	741a      	strb	r2, [r3, #16]
    }
}
 8017472:	bf00      	nop
 8017474:	3710      	adds	r7, #16
 8017476:	46bd      	mov	sp, r7
 8017478:	bd80      	pop	{r7, pc}

0801747a <_evtSending>:

static BOOL _evtSending(void *p_client, PifActCommSendData act_send_data)
{
 801747a:	b5b0      	push	{r4, r5, r7, lr}
 801747c:	b084      	sub	sp, #16
 801747e:	af00      	add	r7, sp, #0
 8017480:	6078      	str	r0, [r7, #4]
 8017482:	6039      	str	r1, [r7, #0]
	PifMsp *p_owner = (PifMsp *)p_client;
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	if (p_owner->__rx.state != MRS_IDLE) return FALSE;
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	7c1b      	ldrb	r3, [r3, #16]
 801748c:	2b00      	cmp	r3, #0
 801748e:	d001      	beq.n	8017494 <_evtSending+0x1a>
 8017490:	2300      	movs	r3, #0
 8017492:	e073      	b.n	801757c <_evtSending+0x102>

	switch (p_owner->__tx.state) {
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801749a:	2b00      	cmp	r3, #0
 801749c:	d002      	beq.n	80174a4 <_evtSending+0x2a>
 801749e:	2b01      	cmp	r3, #1
 80174a0:	d025      	beq.n	80174ee <_evtSending+0x74>
			p_owner->__tx.state = MTS_IDLE;
		}
		return TRUE;

	default:
		break;
 80174a2:	e06a      	b.n	801757a <_evtSending+0x100>
		if (!pifRingBuffer_IsEmpty(&p_owner->__tx.answer_buffer)) {
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	3328      	adds	r3, #40	; 0x28
 80174a8:	4618      	mov	r0, r3
 80174aa:	f7fc fc28 	bl	8013cfe <pifRingBuffer_IsEmpty>
 80174ae:	4603      	mov	r3, r0
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d161      	bne.n	8017578 <_evtSending+0xfe>
			p_owner->__tx.length = pifRingBuffer_GetFillSize(&p_owner->__tx.answer_buffer);
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	3328      	adds	r3, #40	; 0x28
 80174b8:	4618      	mov	r0, r3
 80174ba:	f7fc fc33 	bl	8013d24 <pifRingBuffer_GetFillSize>
 80174be:	4603      	mov	r3, r0
 80174c0:	461a      	mov	r2, r3
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			p_owner->__tx.pos = 0;
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	2200      	movs	r2, #0
 80174cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			p_owner->__tx.state = MTS_SENDING;
 80174d0:	68fb      	ldr	r3, [r7, #12]
 80174d2:	2201      	movs	r2, #1
 80174d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			if (p_owner->__p_comm->_p_task) p_owner->__p_comm->_p_task->immediate = TRUE;
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	68db      	ldr	r3, [r3, #12]
 80174dc:	69db      	ldr	r3, [r3, #28]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d04a      	beq.n	8017578 <_evtSending+0xfe>
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	68db      	ldr	r3, [r3, #12]
 80174e6:	69db      	ldr	r3, [r3, #28]
 80174e8:	2201      	movs	r2, #1
 80174ea:	705a      	strb	r2, [r3, #1]
		break;
 80174ec:	e044      	b.n	8017578 <_evtSending+0xfe>
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.answer_buffer, p_owner->__tx.pos),
 80174ee:	68fb      	ldr	r3, [r7, #12]
 80174f0:	68dc      	ldr	r4, [r3, #12]
 80174f2:	68fb      	ldr	r3, [r7, #12]
 80174f4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80174fe:	4619      	mov	r1, r3
 8017500:	4610      	mov	r0, r2
 8017502:	f7fc fbd0 	bl	8013ca6 <pifRingBuffer_GetTailPointer>
 8017506:	4605      	mov	r5, r0
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017514:	4619      	mov	r1, r3
 8017516:	4610      	mov	r0, r2
 8017518:	f7fc fc26 	bl	8013d68 <pifRingBuffer_GetLinerSize>
 801751c:	4603      	mov	r3, r0
 801751e:	461a      	mov	r2, r3
 8017520:	683b      	ldr	r3, [r7, #0]
 8017522:	4629      	mov	r1, r5
 8017524:	4620      	mov	r0, r4
 8017526:	4798      	blx	r3
 8017528:	4603      	mov	r3, r0
 801752a:	817b      	strh	r3, [r7, #10]
		if (!length) return FALSE;
 801752c:	897b      	ldrh	r3, [r7, #10]
 801752e:	2b00      	cmp	r3, #0
 8017530:	d101      	bne.n	8017536 <_evtSending+0xbc>
 8017532:	2300      	movs	r3, #0
 8017534:	e022      	b.n	801757c <_evtSending+0x102>
		p_owner->__tx.pos += length;
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801753c:	897b      	ldrh	r3, [r7, #10]
 801753e:	4413      	add	r3, r2
 8017540:	b29a      	uxth	r2, r3
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		if (p_owner->__tx.pos >= p_owner->__tx.length) {
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8017554:	429a      	cmp	r2, r3
 8017556:	d30d      	bcc.n	8017574 <_evtSending+0xfa>
			pifRingBuffer_Remove(&p_owner->__tx.answer_buffer, p_owner->__tx.pos);
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017564:	4619      	mov	r1, r3
 8017566:	4610      	mov	r0, r2
 8017568:	f7fc fda5 	bl	80140b6 <pifRingBuffer_Remove>
			p_owner->__tx.state = MTS_IDLE;
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	2200      	movs	r2, #0
 8017570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		return TRUE;
 8017574:	2301      	movs	r3, #1
 8017576:	e001      	b.n	801757c <_evtSending+0x102>
		break;
 8017578:	bf00      	nop
	}
	return FALSE;
 801757a:	2300      	movs	r3, #0
}
 801757c:	4618      	mov	r0, r3
 801757e:	3710      	adds	r7, #16
 8017580:	46bd      	mov	sp, r7
 8017582:	bdb0      	pop	{r4, r5, r7, pc}

08017584 <pifMsp_Init>:

BOOL pifMsp_Init(PifMsp* p_owner, PifTimerManager* p_timer, PifId id)
{
 8017584:	b580      	push	{r7, lr}
 8017586:	b086      	sub	sp, #24
 8017588:	af02      	add	r7, sp, #8
 801758a:	60f8      	str	r0, [r7, #12]
 801758c:	60b9      	str	r1, [r7, #8]
 801758e:	4613      	mov	r3, r2
 8017590:	80fb      	strh	r3, [r7, #6]
    if (!p_timer) {
 8017592:	68bb      	ldr	r3, [r7, #8]
 8017594:	2b00      	cmp	r3, #0
 8017596:	d103      	bne.n	80175a0 <pifMsp_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8017598:	4b2c      	ldr	r3, [pc, #176]	; (801764c <pifMsp_Init+0xc8>)
 801759a:	2201      	movs	r2, #1
 801759c:	701a      	strb	r2, [r3, #0]
		goto fail;
 801759e:	e042      	b.n	8017626 <pifMsp_Init+0xa2>
	}

	memset(p_owner, 0, sizeof(PifMsp));
 80175a0:	224c      	movs	r2, #76	; 0x4c
 80175a2:	2100      	movs	r1, #0
 80175a4:	68f8      	ldr	r0, [r7, #12]
 80175a6:	f00a fc1d 	bl	8021de4 <memset>

    p_owner->__rx.p_packet = calloc(sizeof(uint8_t), PIF_MSP_RX_PACKET_SIZE);
 80175aa:	2180      	movs	r1, #128	; 0x80
 80175ac:	2001      	movs	r0, #1
 80175ae:	f00a fbc9 	bl	8021d44 <calloc>
 80175b2:	4603      	mov	r3, r0
 80175b4:	461a      	mov	r2, r3
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	615a      	str	r2, [r3, #20]
    if (!p_owner->__rx.p_packet) {
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	695b      	ldr	r3, [r3, #20]
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d103      	bne.n	80175ca <pifMsp_Init+0x46>
        pif_error = E_OUT_OF_HEAP;
 80175c2:	4b22      	ldr	r3, [pc, #136]	; (801764c <pifMsp_Init+0xc8>)
 80175c4:	2203      	movs	r2, #3
 80175c6:	701a      	strb	r2, [r3, #0]
        goto fail;
 80175c8:	e02d      	b.n	8017626 <pifMsp_Init+0xa2>
    }

    if (!pifRingBuffer_InitHeap(&p_owner->__tx.answer_buffer, PIF_ID_AUTO, PIF_MSP_TX_ANSWER_SIZE)) goto fail;
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	3328      	adds	r3, #40	; 0x28
 80175ce:	2280      	movs	r2, #128	; 0x80
 80175d0:	2100      	movs	r1, #0
 80175d2:	4618      	mov	r0, r3
 80175d4:	f7fc faf6 	bl	8013bc4 <pifRingBuffer_InitHeap>
 80175d8:	4603      	mov	r3, r0
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d020      	beq.n	8017620 <pifMsp_Init+0x9c>

#if PIF_MSP_RECEIVE_TIMEOUT
    p_owner->__rx.p_timer = pifTimerManager_Add(p_timer, TT_ONCE);
 80175de:	2100      	movs	r1, #0
 80175e0:	68b8      	ldr	r0, [r7, #8]
 80175e2:	f7fd fb79 	bl	8014cd8 <pifTimerManager_Add>
 80175e6:	4602      	mov	r2, r0
 80175e8:	68fb      	ldr	r3, [r7, #12]
 80175ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (!p_owner->__rx.p_timer) goto fail;
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d017      	beq.n	8017624 <pifMsp_Init+0xa0>
    pifTimer_AttachEvtFinish(p_owner->__rx.p_timer, _evtTimerRxTimeout, p_owner);
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175f8:	68fa      	ldr	r2, [r7, #12]
 80175fa:	4915      	ldr	r1, [pc, #84]	; (8017650 <pifMsp_Init+0xcc>)
 80175fc:	4618      	mov	r0, r3
 80175fe:	f7fd fc98 	bl	8014f32 <pifTimer_AttachEvtFinish>
#endif

    if (id == PIF_ID_AUTO) id = pif_id++;
 8017602:	88fb      	ldrh	r3, [r7, #6]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d106      	bne.n	8017616 <pifMsp_Init+0x92>
 8017608:	4b12      	ldr	r3, [pc, #72]	; (8017654 <pifMsp_Init+0xd0>)
 801760a:	881b      	ldrh	r3, [r3, #0]
 801760c:	1c5a      	adds	r2, r3, #1
 801760e:	b291      	uxth	r1, r2
 8017610:	4a10      	ldr	r2, [pc, #64]	; (8017654 <pifMsp_Init+0xd0>)
 8017612:	8011      	strh	r1, [r2, #0]
 8017614:	80fb      	strh	r3, [r7, #6]
    p_owner->_id = id;
 8017616:	68fb      	ldr	r3, [r7, #12]
 8017618:	88fa      	ldrh	r2, [r7, #6]
 801761a:	811a      	strh	r2, [r3, #8]
    return TRUE;
 801761c:	2301      	movs	r3, #1
 801761e:	e010      	b.n	8017642 <pifMsp_Init+0xbe>
    if (!pifRingBuffer_InitHeap(&p_owner->__tx.answer_buffer, PIF_ID_AUTO, PIF_MSP_TX_ANSWER_SIZE)) goto fail;
 8017620:	bf00      	nop
 8017622:	e000      	b.n	8017626 <pifMsp_Init+0xa2>
    if (!p_owner->__rx.p_timer) goto fail;
 8017624:	bf00      	nop

fail:
	pifMsp_Clear(p_owner);
 8017626:	68f8      	ldr	r0, [r7, #12]
 8017628:	f000 f818 	bl	801765c <pifMsp_Clear>
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, id, pif_error);
 801762c:	88fb      	ldrh	r3, [r7, #6]
 801762e:	4a07      	ldr	r2, [pc, #28]	; (801764c <pifMsp_Init+0xc8>)
 8017630:	7812      	ldrb	r2, [r2, #0]
 8017632:	9200      	str	r2, [sp, #0]
 8017634:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8017638:	4907      	ldr	r1, [pc, #28]	; (8017658 <pifMsp_Init+0xd4>)
 801763a:	2004      	movs	r0, #4
 801763c:	f7fb ffaa 	bl	8013594 <pifLog_Printf>
#endif
    return FALSE;
 8017640:	2300      	movs	r3, #0
}
 8017642:	4618      	mov	r0, r3
 8017644:	3710      	adds	r7, #16
 8017646:	46bd      	mov	sp, r7
 8017648:	bd80      	pop	{r7, pc}
 801764a:	bf00      	nop
 801764c:	200020d1 	.word	0x200020d1
 8017650:	080171cd 	.word	0x080171cd
 8017654:	2000005c 	.word	0x2000005c
 8017658:	08026a00 	.word	0x08026a00

0801765c <pifMsp_Clear>:

void pifMsp_Clear(PifMsp* p_owner)
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b082      	sub	sp, #8
 8017660:	af00      	add	r7, sp, #0
 8017662:	6078      	str	r0, [r7, #4]
	if (p_owner->__rx.p_packet) {
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	695b      	ldr	r3, [r3, #20]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d007      	beq.n	801767c <pifMsp_Clear+0x20>
		free(p_owner->__rx.p_packet);
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	695b      	ldr	r3, [r3, #20]
 8017670:	4618      	mov	r0, r3
 8017672:	f00a fba1 	bl	8021db8 <free>
		p_owner->__rx.p_packet = NULL;
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	2200      	movs	r2, #0
 801767a:	615a      	str	r2, [r3, #20]
	}
	pifRingBuffer_Clear(&p_owner->__tx.answer_buffer);
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	3328      	adds	r3, #40	; 0x28
 8017680:	4618      	mov	r0, r3
 8017682:	f7fc fae7 	bl	8013c54 <pifRingBuffer_Clear>
#if PIF_MSP_RECEIVE_TIMEOUT
	if (p_owner->__rx.p_timer) {
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801768a:	2b00      	cmp	r3, #0
 801768c:	d004      	beq.n	8017698 <pifMsp_Clear+0x3c>
		pifTimerManager_Remove(p_owner->__rx.p_timer);
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017692:	4618      	mov	r0, r3
 8017694:	f7fd fb3c 	bl	8014d10 <pifTimerManager_Remove>
	}
#endif
}
 8017698:	bf00      	nop
 801769a:	3708      	adds	r7, #8
 801769c:	46bd      	mov	sp, r7
 801769e:	bd80      	pop	{r7, pc}

080176a0 <pifMsp_AttachComm>:

void pifMsp_AttachComm(PifMsp* p_owner, PifComm *p_comm)
{
 80176a0:	b580      	push	{r7, lr}
 80176a2:	b082      	sub	sp, #8
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	6078      	str	r0, [r7, #4]
 80176a8:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	683a      	ldr	r2, [r7, #0]
 80176ae:	60da      	str	r2, [r3, #12]
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, _evtSending);
 80176b0:	4b04      	ldr	r3, [pc, #16]	; (80176c4 <pifMsp_AttachComm+0x24>)
 80176b2:	4a05      	ldr	r2, [pc, #20]	; (80176c8 <pifMsp_AttachComm+0x28>)
 80176b4:	6879      	ldr	r1, [r7, #4]
 80176b6:	6838      	ldr	r0, [r7, #0]
 80176b8:	f7fa fd5a 	bl	8012170 <pifComm_AttachClient>
}
 80176bc:	bf00      	nop
 80176be:	3708      	adds	r7, #8
 80176c0:	46bd      	mov	sp, r7
 80176c2:	bd80      	pop	{r7, pc}
 80176c4:	0801747b 	.word	0x0801747b
 80176c8:	0801741d 	.word	0x0801741d

080176cc <pifMsp_DetachComm>:

void pifMsp_DetachComm(PifMsp* p_owner)
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b082      	sub	sp, #8
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	6078      	str	r0, [r7, #4]
	pifComm_DetachClient(p_owner->__p_comm);
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	68db      	ldr	r3, [r3, #12]
 80176d8:	4618      	mov	r0, r3
 80176da:	f7fa fd5f 	bl	801219c <pifComm_DetachClient>
	p_owner->__p_comm = NULL;
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	2200      	movs	r2, #0
 80176e2:	60da      	str	r2, [r3, #12]
}
 80176e4:	bf00      	nop
 80176e6:	3708      	adds	r7, #8
 80176e8:	46bd      	mov	sp, r7
 80176ea:	bd80      	pop	{r7, pc}

080176ec <pifMsp_MakeAnswer>:

BOOL pifMsp_MakeAnswer(PifMsp* p_owner, PifMspPacket* p_question, uint8_t* p_data, uint16_t data_size)
{
 80176ec:	b580      	push	{r7, lr}
 80176ee:	b08a      	sub	sp, #40	; 0x28
 80176f0:	af04      	add	r7, sp, #16
 80176f2:	60f8      	str	r0, [r7, #12]
 80176f4:	60b9      	str	r1, [r7, #8]
 80176f6:	607a      	str	r2, [r7, #4]
 80176f8:	807b      	strh	r3, [r7, #2]
	uint8_t header[5], check_xor;

	pifRingBuffer_BackupHead(&p_owner->__tx.answer_buffer);
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	3328      	adds	r3, #40	; 0x28
 80176fe:	4618      	mov	r0, r3
 8017700:	f7fc fb7f 	bl	8013e02 <pifRingBuffer_BackupHead>

	header[0] = '$';
 8017704:	2324      	movs	r3, #36	; 0x24
 8017706:	743b      	strb	r3, [r7, #16]
	header[1] = 'M';
 8017708:	234d      	movs	r3, #77	; 0x4d
 801770a:	747b      	strb	r3, [r7, #17]
	header[2] = '>';
 801770c:	233e      	movs	r3, #62	; 0x3e
 801770e:	74bb      	strb	r3, [r7, #18]
	header[3] = data_size;
 8017710:	887b      	ldrh	r3, [r7, #2]
 8017712:	b2db      	uxtb	r3, r3
 8017714:	74fb      	strb	r3, [r7, #19]
	header[4] = p_question->command;
 8017716:	68bb      	ldr	r3, [r7, #8]
 8017718:	781b      	ldrb	r3, [r3, #0]
 801771a:	753b      	strb	r3, [r7, #20]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	3328      	adds	r3, #40	; 0x28
 8017720:	f107 0110 	add.w	r1, r7, #16
 8017724:	2205      	movs	r2, #5
 8017726:	4618      	mov	r0, r3
 8017728:	f7fc fbbc 	bl	8013ea4 <pifRingBuffer_PutData>
 801772c:	4603      	mov	r3, r0
 801772e:	2b00      	cmp	r3, #0
 8017730:	d02b      	beq.n	801778a <pifMsp_MakeAnswer+0x9e>
	check_xor = header[3] ^ header[4];
 8017732:	7cfa      	ldrb	r2, [r7, #19]
 8017734:	7d3b      	ldrb	r3, [r7, #20]
 8017736:	4053      	eors	r3, r2
 8017738:	75fb      	strb	r3, [r7, #23]
	if (data_size > 0) {
 801773a:	887b      	ldrh	r3, [r7, #2]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d013      	beq.n	8017768 <pifMsp_MakeAnswer+0x7c>
		if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, p_data, data_size)) goto fail;
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	3328      	adds	r3, #40	; 0x28
 8017744:	887a      	ldrh	r2, [r7, #2]
 8017746:	6879      	ldr	r1, [r7, #4]
 8017748:	4618      	mov	r0, r3
 801774a:	f7fc fbab 	bl	8013ea4 <pifRingBuffer_PutData>
 801774e:	4603      	mov	r3, r0
 8017750:	2b00      	cmp	r3, #0
 8017752:	d01c      	beq.n	801778e <pifMsp_MakeAnswer+0xa2>
		check_xor ^= pifCheckXor(p_data, data_size);
 8017754:	887b      	ldrh	r3, [r7, #2]
 8017756:	4619      	mov	r1, r3
 8017758:	6878      	ldr	r0, [r7, #4]
 801775a:	f7fa fbb0 	bl	8011ebe <pifCheckXor>
 801775e:	4603      	mov	r3, r0
 8017760:	461a      	mov	r2, r3
 8017762:	7dfb      	ldrb	r3, [r7, #23]
 8017764:	4053      	eors	r3, r2
 8017766:	75fb      	strb	r3, [r7, #23]
	}
	if (!pifRingBuffer_PutByte(&p_owner->__tx.answer_buffer, check_xor)) goto fail;
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	3328      	adds	r3, #40	; 0x28
 801776c:	7dfa      	ldrb	r2, [r7, #23]
 801776e:	4611      	mov	r1, r2
 8017770:	4618      	mov	r0, r3
 8017772:	f7fc fb63 	bl	8013e3c <pifRingBuffer_PutByte>
 8017776:	4603      	mov	r3, r0
 8017778:	2b00      	cmp	r3, #0
 801777a:	d00a      	beq.n	8017792 <pifMsp_MakeAnswer+0xa6>
	p_owner->__p_comm->_p_task->immediate = TRUE;
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	68db      	ldr	r3, [r3, #12]
 8017780:	69db      	ldr	r3, [r3, #28]
 8017782:	2201      	movs	r2, #1
 8017784:	705a      	strb	r2, [r3, #1]

#ifdef __DEBUG_PACKET__
	pifLog_Printf(LT_NONE, "\n%u< %x %x %x %x %x : %x", p_owner->_id,
			header[0], header[1], header[2], header[3], header[4], check_xor);
#endif
	return TRUE;
 8017786:	2301      	movs	r3, #1
 8017788:	e024      	b.n	80177d4 <pifMsp_MakeAnswer+0xe8>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 801778a:	bf00      	nop
 801778c:	e002      	b.n	8017794 <pifMsp_MakeAnswer+0xa8>
		if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, p_data, data_size)) goto fail;
 801778e:	bf00      	nop
 8017790:	e000      	b.n	8017794 <pifMsp_MakeAnswer+0xa8>
	if (!pifRingBuffer_PutByte(&p_owner->__tx.answer_buffer, check_xor)) goto fail;
 8017792:	bf00      	nop

fail:
	pifRingBuffer_RestoreHead(&p_owner->__tx.answer_buffer);
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	3328      	adds	r3, #40	; 0x28
 8017798:	4618      	mov	r0, r3
 801779a:	f7fc fb40 	bl	8013e1e <pifRingBuffer_RestoreHead>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 801779e:	4b0f      	ldr	r3, [pc, #60]	; (80177dc <pifMsp_MakeAnswer+0xf0>)
 80177a0:	781b      	ldrb	r3, [r3, #0]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d102      	bne.n	80177ac <pifMsp_MakeAnswer+0xc0>
 80177a6:	4b0d      	ldr	r3, [pc, #52]	; (80177dc <pifMsp_MakeAnswer+0xf0>)
 80177a8:	2204      	movs	r2, #4
 80177aa:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) C:%u D:%u EC:%d", __LINE__, p_owner->_id, p_question->command, data_size, pif_error);
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	891b      	ldrh	r3, [r3, #8]
 80177b0:	4618      	mov	r0, r3
 80177b2:	68bb      	ldr	r3, [r7, #8]
 80177b4:	781b      	ldrb	r3, [r3, #0]
 80177b6:	4619      	mov	r1, r3
 80177b8:	887b      	ldrh	r3, [r7, #2]
 80177ba:	4a08      	ldr	r2, [pc, #32]	; (80177dc <pifMsp_MakeAnswer+0xf0>)
 80177bc:	7812      	ldrb	r2, [r2, #0]
 80177be:	9202      	str	r2, [sp, #8]
 80177c0:	9301      	str	r3, [sp, #4]
 80177c2:	9100      	str	r1, [sp, #0]
 80177c4:	4603      	mov	r3, r0
 80177c6:	f240 1247 	movw	r2, #327	; 0x147
 80177ca:	4905      	ldr	r1, [pc, #20]	; (80177e0 <pifMsp_MakeAnswer+0xf4>)
 80177cc:	2004      	movs	r0, #4
 80177ce:	f7fb fee1 	bl	8013594 <pifLog_Printf>
#endif
	return FALSE;
 80177d2:	2300      	movs	r3, #0
}
 80177d4:	4618      	mov	r0, r3
 80177d6:	3718      	adds	r7, #24
 80177d8:	46bd      	mov	sp, r7
 80177da:	bd80      	pop	{r7, pc}
 80177dc:	200020d1 	.word	0x200020d1
 80177e0:	08026a14 	.word	0x08026a14

080177e4 <pifMsp_MakeError>:

BOOL pifMsp_MakeError(PifMsp* p_owner, PifMspPacket* p_question)
{
 80177e4:	b580      	push	{r7, lr}
 80177e6:	b086      	sub	sp, #24
 80177e8:	af02      	add	r7, sp, #8
 80177ea:	6078      	str	r0, [r7, #4]
 80177ec:	6039      	str	r1, [r7, #0]
	uint8_t header[6];

	pifRingBuffer_BackupHead(&p_owner->__tx.answer_buffer);
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	3328      	adds	r3, #40	; 0x28
 80177f2:	4618      	mov	r0, r3
 80177f4:	f7fc fb05 	bl	8013e02 <pifRingBuffer_BackupHead>

	header[0] = '$';
 80177f8:	2324      	movs	r3, #36	; 0x24
 80177fa:	723b      	strb	r3, [r7, #8]
	header[1] = 'M';
 80177fc:	234d      	movs	r3, #77	; 0x4d
 80177fe:	727b      	strb	r3, [r7, #9]
	header[2] = '!';
 8017800:	2321      	movs	r3, #33	; 0x21
 8017802:	72bb      	strb	r3, [r7, #10]
	header[3] = 0;
 8017804:	2300      	movs	r3, #0
 8017806:	72fb      	strb	r3, [r7, #11]
	header[4] = p_question->command;
 8017808:	683b      	ldr	r3, [r7, #0]
 801780a:	781b      	ldrb	r3, [r3, #0]
 801780c:	733b      	strb	r3, [r7, #12]
	header[5] = header[3] ^ header[4];
 801780e:	7afa      	ldrb	r2, [r7, #11]
 8017810:	7b3b      	ldrb	r3, [r7, #12]
 8017812:	4053      	eors	r3, r2
 8017814:	b2db      	uxtb	r3, r3
 8017816:	737b      	strb	r3, [r7, #13]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 6)) goto fail;
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	3328      	adds	r3, #40	; 0x28
 801781c:	f107 0108 	add.w	r1, r7, #8
 8017820:	2206      	movs	r2, #6
 8017822:	4618      	mov	r0, r3
 8017824:	f7fc fb3e 	bl	8013ea4 <pifRingBuffer_PutData>
 8017828:	4603      	mov	r3, r0
 801782a:	2b00      	cmp	r3, #0
 801782c:	d006      	beq.n	801783c <pifMsp_MakeError+0x58>
	p_owner->__p_comm->_p_task->immediate = TRUE;
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	68db      	ldr	r3, [r3, #12]
 8017832:	69db      	ldr	r3, [r3, #28]
 8017834:	2201      	movs	r2, #1
 8017836:	705a      	strb	r2, [r3, #1]
#ifdef __DEBUG_PACKET__
	pifLog_Printf(LT_NONE, "\n%u< %x %x %x %x %x : %x", p_owner->_id,
			header[0], header[1], header[2], header[3], header[4], header[5]);
#endif
#endif
	return TRUE;
 8017838:	2301      	movs	r3, #1
 801783a:	e01e      	b.n	801787a <pifMsp_MakeError+0x96>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 6)) goto fail;
 801783c:	bf00      	nop

fail:
	pifRingBuffer_RestoreHead(&p_owner->__tx.answer_buffer);
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	3328      	adds	r3, #40	; 0x28
 8017842:	4618      	mov	r0, r3
 8017844:	f7fc faeb 	bl	8013e1e <pifRingBuffer_RestoreHead>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017848:	4b0e      	ldr	r3, [pc, #56]	; (8017884 <pifMsp_MakeError+0xa0>)
 801784a:	781b      	ldrb	r3, [r3, #0]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d102      	bne.n	8017856 <pifMsp_MakeError+0x72>
 8017850:	4b0c      	ldr	r3, [pc, #48]	; (8017884 <pifMsp_MakeError+0xa0>)
 8017852:	2204      	movs	r2, #4
 8017854:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) C:%u EC:%d", __LINE__, p_owner->_id, p_question->command, pif_error);
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	891b      	ldrh	r3, [r3, #8]
 801785a:	4619      	mov	r1, r3
 801785c:	683b      	ldr	r3, [r7, #0]
 801785e:	781b      	ldrb	r3, [r3, #0]
 8017860:	461a      	mov	r2, r3
 8017862:	4b08      	ldr	r3, [pc, #32]	; (8017884 <pifMsp_MakeError+0xa0>)
 8017864:	781b      	ldrb	r3, [r3, #0]
 8017866:	9301      	str	r3, [sp, #4]
 8017868:	9200      	str	r2, [sp, #0]
 801786a:	460b      	mov	r3, r1
 801786c:	f240 1267 	movw	r2, #359	; 0x167
 8017870:	4905      	ldr	r1, [pc, #20]	; (8017888 <pifMsp_MakeError+0xa4>)
 8017872:	2004      	movs	r0, #4
 8017874:	f7fb fe8e 	bl	8013594 <pifLog_Printf>
#endif
	return FALSE;
 8017878:	2300      	movs	r3, #0
}
 801787a:	4618      	mov	r0, r3
 801787c:	3710      	adds	r7, #16
 801787e:	46bd      	mov	sp, r7
 8017880:	bd80      	pop	{r7, pc}
 8017882:	bf00      	nop
 8017884:	200020d1 	.word	0x200020d1
 8017888:	08026a30 	.word	0x08026a30

0801788c <pifGy86_Init>:
#include "core/pif_log.h"
#include "sensor/pif_gy86.h"


BOOL pifGy86_Init(PifGy86* p_owner, PifId id, PifI2cPort* p_i2c, PifImuSensor* p_imu_sensor, PifGy86Config* p_config)
{
 801788c:	b580      	push	{r7, lr}
 801788e:	b090      	sub	sp, #64	; 0x40
 8017890:	af02      	add	r7, sp, #8
 8017892:	60f8      	str	r0, [r7, #12]
 8017894:	607a      	str	r2, [r7, #4]
 8017896:	603b      	str	r3, [r7, #0]
 8017898:	460b      	mov	r3, r1
 801789a:	817b      	strh	r3, [r7, #10]
	PifMpu60x0IntEnable int_enable;
	PifMpu60x0IntPinCfg int_pin_cfg;
    PifMpu60x0PwrMgmt1 pwr_mgmt_1;
	PifHmc5883ConfigA config_a;

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d005      	beq.n	80178ae <pifGy86_Init+0x22>
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d002      	beq.n	80178ae <pifGy86_Init+0x22>
 80178a8:	683b      	ldr	r3, [r7, #0]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d104      	bne.n	80178b8 <pifGy86_Init+0x2c>
		pif_error = E_INVALID_PARAM;
 80178ae:	4b48      	ldr	r3, [pc, #288]	; (80179d0 <pifGy86_Init+0x144>)
 80178b0:	2201      	movs	r2, #1
 80178b2:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 80178b4:	2300      	movs	r3, #0
 80178b6:	e1dd      	b.n	8017c74 <pifGy86_Init+0x3e8>
	}

	memset(p_owner, 0, sizeof(PifGy86));
 80178b8:	2260      	movs	r2, #96	; 0x60
 80178ba:	2100      	movs	r1, #0
 80178bc:	68f8      	ldr	r0, [r7, #12]
 80178be:	f00a fa91 	bl	8021de4 <memset>

    if (!pifMpu60x0_Init(&p_owner->_mpu6050, PIF_ID_AUTO, p_i2c, MPU60X0_I2C_ADDR(0), p_imu_sensor)) goto fail;
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	1d18      	adds	r0, r3, #4
 80178c6:	683b      	ldr	r3, [r7, #0]
 80178c8:	9300      	str	r3, [sp, #0]
 80178ca:	2368      	movs	r3, #104	; 0x68
 80178cc:	687a      	ldr	r2, [r7, #4]
 80178ce:	2100      	movs	r1, #0
 80178d0:	f001 f92c 	bl	8018b2c <pifMpu60x0_Init>
 80178d4:	4603      	mov	r3, r0
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	f000 81a5 	beq.w	8017c26 <pifGy86_Init+0x39a>

    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_SMPLRT_DIV, 0)) goto fail;
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	68db      	ldr	r3, [r3, #12]
 80178e0:	2200      	movs	r2, #0
 80178e2:	2119      	movs	r1, #25
 80178e4:	4618      	mov	r0, r3
 80178e6:	f7fa ffb7 	bl	8012858 <pifI2cDevice_WriteRegByte>
 80178ea:	4603      	mov	r3, r0
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	f000 819c 	beq.w	8017c2a <pifGy86_Init+0x39e>

    pwr_mgmt_1.byte = 0;
 80178f2:	2300      	movs	r3, #0
 80178f4:	753b      	strb	r3, [r7, #20]
    pwr_mgmt_1.bit.clksel = p_config ? p_config->mpu60x0_clksel : MPU60X0_CLKSEL_PLL_ZGYRO;
 80178f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d005      	beq.n	8017908 <pifGy86_Init+0x7c>
 80178fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80178fe:	789b      	ldrb	r3, [r3, #2]
 8017900:	f003 0307 	and.w	r3, r3, #7
 8017904:	b2da      	uxtb	r2, r3
 8017906:	e000      	b.n	801790a <pifGy86_Init+0x7e>
 8017908:	2203      	movs	r2, #3
 801790a:	7d3b      	ldrb	r3, [r7, #20]
 801790c:	f362 0302 	bfi	r3, r2, #0, #3
 8017910:	753b      	strb	r3, [r7, #20]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	68db      	ldr	r3, [r3, #12]
 8017916:	7d3a      	ldrb	r2, [r7, #20]
 8017918:	216b      	movs	r1, #107	; 0x6b
 801791a:	4618      	mov	r0, r3
 801791c:	f7fa ff9c 	bl	8012858 <pifI2cDevice_WriteRegByte>
 8017920:	4603      	mov	r3, r0
 8017922:	2b00      	cmp	r3, #0
 8017924:	f000 8183 	beq.w	8017c2e <pifGy86_Init+0x3a2>

    if (p_config) {
 8017928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801792a:	2b00      	cmp	r3, #0
 801792c:	d043      	beq.n	80179b6 <pifGy86_Init+0x12a>
    	config.byte = 0;
 801792e:	2300      	movs	r3, #0
 8017930:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   		config.bit.dlpf_cfg = p_config->mpu60x0_dlpf_cfg;
 8017934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017936:	78db      	ldrb	r3, [r3, #3]
 8017938:	f003 0307 	and.w	r3, r3, #7
 801793c:	b2da      	uxtb	r2, r3
 801793e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8017942:	f362 0302 	bfi	r3, r2, #0, #3
 8017946:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    	if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_CONFIG, config.byte)) goto fail;
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	68db      	ldr	r3, [r3, #12]
 801794e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8017952:	211a      	movs	r1, #26
 8017954:	4618      	mov	r0, r3
 8017956:	f7fa ff7f 	bl	8012858 <pifI2cDevice_WriteRegByte>
 801795a:	4603      	mov	r3, r0
 801795c:	2b00      	cmp	r3, #0
 801795e:	f000 8168 	beq.w	8017c32 <pifGy86_Init+0x3a6>

        gyro_config.byte = 0;
 8017962:	2300      	movs	r3, #0
 8017964:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        gyro_config.bit.fs_sel = p_config->mpu60x0_fs_sel;
 8017968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801796a:	791b      	ldrb	r3, [r3, #4]
 801796c:	f003 0303 	and.w	r3, r3, #3
 8017970:	b2da      	uxtb	r2, r3
 8017972:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017976:	f362 03c4 	bfi	r3, r2, #3, #2
 801797a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        pifMpu60x0_SetGyroConfig(&p_owner->_mpu6050, gyro_config);
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	3304      	adds	r3, #4
 8017982:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8017986:	4618      	mov	r0, r3
 8017988:	f001 f9ec 	bl	8018d64 <pifMpu60x0_SetGyroConfig>

        accel_config.byte = 0;
 801798c:	2300      	movs	r3, #0
 801798e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        accel_config.bit.afs_sel = p_config->mpu60x0_afs_sel;
 8017992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017994:	785b      	ldrb	r3, [r3, #1]
 8017996:	f003 0303 	and.w	r3, r3, #3
 801799a:	b2da      	uxtb	r2, r3
 801799c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80179a0:	f362 03c4 	bfi	r3, r2, #3, #2
 80179a4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        pifMpu60x0_SetAccelConfig(&p_owner->_mpu6050, accel_config);
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	3304      	adds	r3, #4
 80179ac:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 80179b0:	4618      	mov	r0, r3
 80179b2:	f001 f9f7 	bl	8018da4 <pifMpu60x0_SetAccelConfig>
    }

    i2c_mst_ctrl.byte = 0;
 80179b6:	2300      	movs	r3, #0
 80179b8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    i2c_mst_ctrl.bit.i2c_mst_clk = p_config ? p_config->mpu60x0_i2c_mst_clk : MPU60X0_I2C_MST_CLK_400KHZ;
 80179bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d008      	beq.n	80179d4 <pifGy86_Init+0x148>
 80179c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179c4:	795b      	ldrb	r3, [r3, #5]
 80179c6:	f003 030f 	and.w	r3, r3, #15
 80179ca:	b2da      	uxtb	r2, r3
 80179cc:	e003      	b.n	80179d6 <pifGy86_Init+0x14a>
 80179ce:	bf00      	nop
 80179d0:	200020d1 	.word	0x200020d1
 80179d4:	220d      	movs	r2, #13
 80179d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80179da:	f362 0303 	bfi	r3, r2, #0, #4
 80179de:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_MST_CTRL, i2c_mst_ctrl.byte)) goto fail;
 80179e2:	68fb      	ldr	r3, [r7, #12]
 80179e4:	68db      	ldr	r3, [r3, #12]
 80179e6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80179ea:	2124      	movs	r1, #36	; 0x24
 80179ec:	4618      	mov	r0, r3
 80179ee:	f7fa ff33 	bl	8012858 <pifI2cDevice_WriteRegByte>
 80179f2:	4603      	mov	r3, r0
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	f000 811e 	beq.w	8017c36 <pifGy86_Init+0x3aa>

    int_pin_cfg.byte = 0;
 80179fa:	2300      	movs	r3, #0
 80179fc:	763b      	strb	r3, [r7, #24]
    int_pin_cfg.bit.int_rd_clear = TRUE;
 80179fe:	7e3b      	ldrb	r3, [r7, #24]
 8017a00:	f043 0310 	orr.w	r3, r3, #16
 8017a04:	763b      	strb	r3, [r7, #24]
    int_pin_cfg.bit.i2c_bypass_en = TRUE;
 8017a06:	7e3b      	ldrb	r3, [r7, #24]
 8017a08:	f043 0302 	orr.w	r3, r3, #2
 8017a0c:	763b      	strb	r3, [r7, #24]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, int_pin_cfg.byte)) goto fail;
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	68db      	ldr	r3, [r3, #12]
 8017a12:	7e3a      	ldrb	r2, [r7, #24]
 8017a14:	2137      	movs	r1, #55	; 0x37
 8017a16:	4618      	mov	r0, r3
 8017a18:	f7fa ff1e 	bl	8012858 <pifI2cDevice_WriteRegByte>
 8017a1c:	4603      	mov	r3, r0
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	f000 810b 	beq.w	8017c3a <pifGy86_Init+0x3ae>

    int_enable.byte = 0;
 8017a24:	2300      	movs	r3, #0
 8017a26:	773b      	strb	r3, [r7, #28]
    int_enable.bit.data_rdy_en = TRUE;
 8017a28:	7f3b      	ldrb	r3, [r7, #28]
 8017a2a:	f043 0301 	orr.w	r3, r3, #1
 8017a2e:	773b      	strb	r3, [r7, #28]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, int_enable.byte)) goto fail;
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	68db      	ldr	r3, [r3, #12]
 8017a34:	7f3a      	ldrb	r2, [r7, #28]
 8017a36:	2138      	movs	r1, #56	; 0x38
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f7fa ff0d 	bl	8012858 <pifI2cDevice_WriteRegByte>
 8017a3e:	4603      	mov	r3, r0
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	f000 80fc 	beq.w	8017c3e <pifGy86_Init+0x3b2>

    if (!pifHmc5883_Init(&p_owner->_hmc5883, PIF_ID_AUTO, p_i2c, p_imu_sensor)) goto fail;
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	f103 0014 	add.w	r0, r3, #20
 8017a4c:	683b      	ldr	r3, [r7, #0]
 8017a4e:	687a      	ldr	r2, [r7, #4]
 8017a50:	2100      	movs	r1, #0
 8017a52:	f000 fb4b 	bl	80180ec <pifHmc5883_Init>
 8017a56:	4603      	mov	r3, r0
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	f000 80f2 	beq.w	8017c42 <pifGy86_Init+0x3b6>

    if (p_config) {
 8017a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d039      	beq.n	8017ad8 <pifGy86_Init+0x24c>
        config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NORMAL;
 8017a64:	7c3b      	ldrb	r3, [r7, #16]
 8017a66:	f36f 0301 	bfc	r3, #0, #2
 8017a6a:	743b      	strb	r3, [r7, #16]
   		config_a.bit.samples = p_config->hmc5883_samples;
 8017a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a6e:	7a5b      	ldrb	r3, [r3, #9]
 8017a70:	f003 0303 	and.w	r3, r3, #3
 8017a74:	b2da      	uxtb	r2, r3
 8017a76:	7c3b      	ldrb	r3, [r7, #16]
 8017a78:	f362 1346 	bfi	r3, r2, #5, #2
 8017a7c:	743b      	strb	r3, [r7, #16]
   		config_a.bit.data_rate = p_config->hmc5883_data_rate;
 8017a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a80:	799b      	ldrb	r3, [r3, #6]
 8017a82:	f003 0307 	and.w	r3, r3, #7
 8017a86:	b2da      	uxtb	r2, r3
 8017a88:	7c3b      	ldrb	r3, [r7, #16]
 8017a8a:	f362 0384 	bfi	r3, r2, #2, #3
 8017a8e:	743b      	strb	r3, [r7, #16]
        if (!pifI2cDevice_WriteRegByte(p_owner->_hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) goto fail;
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a94:	7c3a      	ldrb	r2, [r7, #16]
 8017a96:	2100      	movs	r1, #0
 8017a98:	4618      	mov	r0, r3
 8017a9a:	f7fa fedd 	bl	8012858 <pifI2cDevice_WriteRegByte>
 8017a9e:	4603      	mov	r3, r0
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	f000 80d0 	beq.w	8017c46 <pifGy86_Init+0x3ba>

        if (!pifHmc5883_SetGain(&p_owner->_hmc5883, p_config->hmc5883_gain)) goto fail;
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	f103 0214 	add.w	r2, r3, #20
 8017aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017aae:	79db      	ldrb	r3, [r3, #7]
 8017ab0:	4619      	mov	r1, r3
 8017ab2:	4610      	mov	r0, r2
 8017ab4:	f000 fbf0 	bl	8018298 <pifHmc5883_SetGain>
 8017ab8:	4603      	mov	r3, r0
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	f000 80c5 	beq.w	8017c4a <pifGy86_Init+0x3be>

        if (!pifI2cDevice_WriteRegBit8(p_owner->_hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_MODE, p_config->hmc5883_mode)) goto fail;
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ac6:	7a1b      	ldrb	r3, [r3, #8]
 8017ac8:	2202      	movs	r2, #2
 8017aca:	2102      	movs	r1, #2
 8017acc:	f7fa feda 	bl	8012884 <pifI2cDevice_WriteRegBit8>
 8017ad0:	4603      	mov	r3, r0
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	f000 80bb 	beq.w	8017c4e <pifGy86_Init+0x3c2>
    }

    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) goto fail;
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	68d8      	ldr	r0, [r3, #12]
 8017adc:	2300      	movs	r3, #0
 8017ade:	f240 1201 	movw	r2, #257	; 0x101
 8017ae2:	2137      	movs	r1, #55	; 0x37
 8017ae4:	f7fa fece 	bl	8012884 <pifI2cDevice_WriteRegBit8>
 8017ae8:	4603      	mov	r3, r0
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	f000 80b1 	beq.w	8017c52 <pifGy86_Init+0x3c6>

    pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, 0x01); // DATA_RDY_EN interrupt enable
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	68db      	ldr	r3, [r3, #12]
 8017af4:	2201      	movs	r2, #1
 8017af6:	2138      	movs	r1, #56	; 0x38
 8017af8:	4618      	mov	r0, r3
 8017afa:	f7fa fead 	bl	8012858 <pifI2cDevice_WriteRegByte>

    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) goto fail;
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	68d8      	ldr	r0, [r3, #12]
 8017b02:	2301      	movs	r3, #1
 8017b04:	f240 5201 	movw	r2, #1281	; 0x501
 8017b08:	216a      	movs	r1, #106	; 0x6a
 8017b0a:	f7fa febb 	bl	8012884 <pifI2cDevice_WriteRegBit8>
 8017b0e:	4603      	mov	r3, r0
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	f000 80a0 	beq.w	8017c56 <pifGy86_Init+0x3ca>

    i2c_slv_addr.byte = 0;
 8017b16:	2300      	movs	r3, #0
 8017b18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    i2c_slv_addr.bit.i2c_slv_addr = HMC5883_I2C_ADDR;
 8017b1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017b20:	221e      	movs	r2, #30
 8017b22:	f362 0306 	bfi	r3, r2, #0, #7
 8017b26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    i2c_slv_addr.bit.i2c_slv_rw = TRUE;
 8017b2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_ADDR, i2c_slv_addr.byte)) goto fail;
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	68db      	ldr	r3, [r3, #12]
 8017b3a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8017b3e:	2125      	movs	r1, #37	; 0x25
 8017b40:	4618      	mov	r0, r3
 8017b42:	f7fa fe89 	bl	8012858 <pifI2cDevice_WriteRegByte>
 8017b46:	4603      	mov	r3, r0
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	f000 8086 	beq.w	8017c5a <pifGy86_Init+0x3ce>

    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_REG, HMC5883_REG_OUT_X_M)) goto fail;
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	68db      	ldr	r3, [r3, #12]
 8017b52:	2203      	movs	r2, #3
 8017b54:	2126      	movs	r1, #38	; 0x26
 8017b56:	4618      	mov	r0, r3
 8017b58:	f7fa fe7e 	bl	8012858 <pifI2cDevice_WriteRegByte>
 8017b5c:	4603      	mov	r3, r0
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d07d      	beq.n	8017c5e <pifGy86_Init+0x3d2>

    i2c_slv_ctrl.byte = 0;
 8017b62:	2300      	movs	r3, #0
 8017b64:	f887 3020 	strb.w	r3, [r7, #32]
    i2c_slv_ctrl.bit.i2c_slv_len = 6;
 8017b68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017b6c:	2206      	movs	r2, #6
 8017b6e:	f362 0303 	bfi	r3, r2, #0, #4
 8017b72:	f887 3020 	strb.w	r3, [r7, #32]
    i2c_slv_ctrl.bit.i2c_slv_en = TRUE;
 8017b76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b7e:	f887 3020 	strb.w	r3, [r7, #32]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_CTRL, i2c_slv_ctrl.byte)) goto fail;
 8017b82:	68fb      	ldr	r3, [r7, #12]
 8017b84:	68db      	ldr	r3, [r3, #12]
 8017b86:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017b8a:	2127      	movs	r1, #39	; 0x27
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	f7fa fe63 	bl	8012858 <pifI2cDevice_WriteRegByte>
 8017b92:	4603      	mov	r3, r0
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d064      	beq.n	8017c62 <pifGy86_Init+0x3d6>

    if (p_config && p_config->ms5611_evt_read) {
 8017b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d02a      	beq.n	8017bf4 <pifGy86_Init+0x368>
 8017b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ba0:	691b      	ldr	r3, [r3, #16]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d026      	beq.n	8017bf4 <pifGy86_Init+0x368>
    	if (!pifMs5611_Init(&p_owner->_ms5611, PIF_ID_AUTO, p_i2c, MS5611_I2C_ADDR(1))) goto fail;
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8017bac:	2377      	movs	r3, #119	; 0x77
 8017bae:	687a      	ldr	r2, [r7, #4]
 8017bb0:	2100      	movs	r1, #0
 8017bb2:	f001 fdcb 	bl	801974c <pifMs5611_Init>
 8017bb6:	4603      	mov	r3, r0
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d054      	beq.n	8017c66 <pifGy86_Init+0x3da>

        pifMs5611_SetOverSamplingRate(&p_owner->_ms5611, p_config->ms5611_osr);
 8017bbc:	68fb      	ldr	r3, [r7, #12]
 8017bbe:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8017bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017bc4:	7a9b      	ldrb	r3, [r3, #10]
 8017bc6:	b29b      	uxth	r3, r3
 8017bc8:	4619      	mov	r1, r3
 8017bca:	4610      	mov	r0, r2
 8017bcc:	f001 fe5e 	bl	801988c <pifMs5611_SetOverSamplingRate>

        if (!pifMs5611_AddTaskForReading(&p_owner->_ms5611, p_config->ms5611_read_period, p_config->ms5611_evt_read)) goto fail;
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8017bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017bd8:	8999      	ldrh	r1, [r3, #12]
 8017bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017bdc:	691b      	ldr	r3, [r3, #16]
 8017bde:	461a      	mov	r2, r3
 8017be0:	f001 fe90 	bl	8019904 <pifMs5611_AddTaskForReading>
 8017be4:	4603      	mov	r3, r0
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d03f      	beq.n	8017c6a <pifGy86_Init+0x3de>
        p_owner->_ms5611._p_task->disallow_yield_id = p_config->disallow_yield_id;
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017bee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017bf0:	7812      	ldrb	r2, [r2, #0]
 8017bf2:	709a      	strb	r2, [r3, #2]
    }

	if (id == PIF_ID_AUTO) id = pif_id++;
 8017bf4:	897b      	ldrh	r3, [r7, #10]
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d106      	bne.n	8017c08 <pifGy86_Init+0x37c>
 8017bfa:	4b20      	ldr	r3, [pc, #128]	; (8017c7c <pifGy86_Init+0x3f0>)
 8017bfc:	881b      	ldrh	r3, [r3, #0]
 8017bfe:	1c5a      	adds	r2, r3, #1
 8017c00:	b291      	uxth	r1, r2
 8017c02:	4a1e      	ldr	r2, [pc, #120]	; (8017c7c <pifGy86_Init+0x3f0>)
 8017c04:	8011      	strh	r1, [r2, #0]
 8017c06:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	897a      	ldrh	r2, [r7, #10]
 8017c0c:	801a      	strh	r2, [r3, #0]
    p_owner->__mag_start_reg = 0;
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	2200      	movs	r2, #0
 8017c12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	p_imu_sensor->__mag_info.read = (PifImuSensorRead)pifGy86_ReadMag;
 8017c16:	683b      	ldr	r3, [r7, #0]
 8017c18:	4a19      	ldr	r2, [pc, #100]	; (8017c80 <pifGy86_Init+0x3f4>)
 8017c1a:	631a      	str	r2, [r3, #48]	; 0x30
	p_imu_sensor->__mag_info.p_issuer = p_owner;
 8017c1c:	683b      	ldr	r3, [r7, #0]
 8017c1e:	68fa      	ldr	r2, [r7, #12]
 8017c20:	635a      	str	r2, [r3, #52]	; 0x34
    return TRUE;
 8017c22:	2301      	movs	r3, #1
 8017c24:	e026      	b.n	8017c74 <pifGy86_Init+0x3e8>
    if (!pifMpu60x0_Init(&p_owner->_mpu6050, PIF_ID_AUTO, p_i2c, MPU60X0_I2C_ADDR(0), p_imu_sensor)) goto fail;
 8017c26:	bf00      	nop
 8017c28:	e020      	b.n	8017c6c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_SMPLRT_DIV, 0)) goto fail;
 8017c2a:	bf00      	nop
 8017c2c:	e01e      	b.n	8017c6c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8017c2e:	bf00      	nop
 8017c30:	e01c      	b.n	8017c6c <pifGy86_Init+0x3e0>
    	if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_CONFIG, config.byte)) goto fail;
 8017c32:	bf00      	nop
 8017c34:	e01a      	b.n	8017c6c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_MST_CTRL, i2c_mst_ctrl.byte)) goto fail;
 8017c36:	bf00      	nop
 8017c38:	e018      	b.n	8017c6c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, int_pin_cfg.byte)) goto fail;
 8017c3a:	bf00      	nop
 8017c3c:	e016      	b.n	8017c6c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, int_enable.byte)) goto fail;
 8017c3e:	bf00      	nop
 8017c40:	e014      	b.n	8017c6c <pifGy86_Init+0x3e0>
    if (!pifHmc5883_Init(&p_owner->_hmc5883, PIF_ID_AUTO, p_i2c, p_imu_sensor)) goto fail;
 8017c42:	bf00      	nop
 8017c44:	e012      	b.n	8017c6c <pifGy86_Init+0x3e0>
        if (!pifI2cDevice_WriteRegByte(p_owner->_hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) goto fail;
 8017c46:	bf00      	nop
 8017c48:	e010      	b.n	8017c6c <pifGy86_Init+0x3e0>
        if (!pifHmc5883_SetGain(&p_owner->_hmc5883, p_config->hmc5883_gain)) goto fail;
 8017c4a:	bf00      	nop
 8017c4c:	e00e      	b.n	8017c6c <pifGy86_Init+0x3e0>
        if (!pifI2cDevice_WriteRegBit8(p_owner->_hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_MODE, p_config->hmc5883_mode)) goto fail;
 8017c4e:	bf00      	nop
 8017c50:	e00c      	b.n	8017c6c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) goto fail;
 8017c52:	bf00      	nop
 8017c54:	e00a      	b.n	8017c6c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) goto fail;
 8017c56:	bf00      	nop
 8017c58:	e008      	b.n	8017c6c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_ADDR, i2c_slv_addr.byte)) goto fail;
 8017c5a:	bf00      	nop
 8017c5c:	e006      	b.n	8017c6c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_REG, HMC5883_REG_OUT_X_M)) goto fail;
 8017c5e:	bf00      	nop
 8017c60:	e004      	b.n	8017c6c <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_CTRL, i2c_slv_ctrl.byte)) goto fail;
 8017c62:	bf00      	nop
 8017c64:	e002      	b.n	8017c6c <pifGy86_Init+0x3e0>
    	if (!pifMs5611_Init(&p_owner->_ms5611, PIF_ID_AUTO, p_i2c, MS5611_I2C_ADDR(1))) goto fail;
 8017c66:	bf00      	nop
 8017c68:	e000      	b.n	8017c6c <pifGy86_Init+0x3e0>
        if (!pifMs5611_AddTaskForReading(&p_owner->_ms5611, p_config->ms5611_read_period, p_config->ms5611_evt_read)) goto fail;
 8017c6a:	bf00      	nop

fail:
	pifGy86_Clear(p_owner);
 8017c6c:	68f8      	ldr	r0, [r7, #12]
 8017c6e:	f000 f809 	bl	8017c84 <pifGy86_Clear>
	return FALSE;
 8017c72:	2300      	movs	r3, #0
}
 8017c74:	4618      	mov	r0, r3
 8017c76:	3738      	adds	r7, #56	; 0x38
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	bd80      	pop	{r7, pc}
 8017c7c:	2000005c 	.word	0x2000005c
 8017c80:	08017cb3 	.word	0x08017cb3

08017c84 <pifGy86_Clear>:

void pifGy86_Clear(PifGy86* p_owner)
{
 8017c84:	b580      	push	{r7, lr}
 8017c86:	b082      	sub	sp, #8
 8017c88:	af00      	add	r7, sp, #0
 8017c8a:	6078      	str	r0, [r7, #4]
    pifMs5611_Clear(&p_owner->_ms5611);
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	332c      	adds	r3, #44	; 0x2c
 8017c90:	4618      	mov	r0, r3
 8017c92:	f001 fdd7 	bl	8019844 <pifMs5611_Clear>
    pifHmc5883_Clear(&p_owner->_hmc5883);
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	3314      	adds	r3, #20
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	f000 fae4 	bl	8018268 <pifHmc5883_Clear>
    pifMpu60x0_Clear(&p_owner->_mpu6050);
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	3304      	adds	r3, #4
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	f001 f845 	bl	8018d34 <pifMpu60x0_Clear>
}
 8017caa:	bf00      	nop
 8017cac:	3708      	adds	r7, #8
 8017cae:	46bd      	mov	sp, r7
 8017cb0:	bd80      	pop	{r7, pc}

08017cb2 <pifGy86_ReadMag>:

BOOL pifGy86_ReadMag(PifGy86* p_owner, int16_t* p_mag)
{
 8017cb2:	b580      	push	{r7, lr}
 8017cb4:	b084      	sub	sp, #16
 8017cb6:	af00      	add	r7, sp, #0
 8017cb8:	6078      	str	r0, [r7, #4]
 8017cba:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegBytes(p_owner->_mpu6050._p_i2c, MPU60X0_REG_EXT_SENS_DATA_00 + p_owner->__mag_start_reg, data, 6)) return FALSE;
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	68d8      	ldr	r0, [r3, #12]
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017cc6:	3349      	adds	r3, #73	; 0x49
 8017cc8:	b2d9      	uxtb	r1, r3
 8017cca:	f107 0208 	add.w	r2, r7, #8
 8017cce:	2306      	movs	r3, #6
 8017cd0:	f7fa fccc 	bl	801266c <pifI2cDevice_ReadRegBytes>
 8017cd4:	4603      	mov	r3, r0
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d101      	bne.n	8017cde <pifGy86_ReadMag+0x2c>
 8017cda:	2300      	movs	r3, #0
 8017cdc:	e04d      	b.n	8017d7a <pifGy86_ReadMag+0xc8>

	p_mag[AXIS_X] = (int16_t)((data[0] << 8) + data[1]) * p_owner->_hmc5883.scale[AXIS_X];
 8017cde:	7a3b      	ldrb	r3, [r7, #8]
 8017ce0:	b29b      	uxth	r3, r3
 8017ce2:	021b      	lsls	r3, r3, #8
 8017ce4:	b29a      	uxth	r2, r3
 8017ce6:	7a7b      	ldrb	r3, [r7, #9]
 8017ce8:	b29b      	uxth	r3, r3
 8017cea:	4413      	add	r3, r2
 8017cec:	b29b      	uxth	r3, r3
 8017cee:	b21b      	sxth	r3, r3
 8017cf0:	ee07 3a90 	vmov	s15, r3
 8017cf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	edd3 7a05 	vldr	s15, [r3, #20]
 8017cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017d02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d06:	ee17 3a90 	vmov	r3, s15
 8017d0a:	b21a      	sxth	r2, r3
 8017d0c:	683b      	ldr	r3, [r7, #0]
 8017d0e:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Z] = (int16_t)((data[2] << 8) + data[3]) * p_owner->_hmc5883.scale[AXIS_Z];
 8017d10:	7abb      	ldrb	r3, [r7, #10]
 8017d12:	b29b      	uxth	r3, r3
 8017d14:	021b      	lsls	r3, r3, #8
 8017d16:	b29a      	uxth	r2, r3
 8017d18:	7afb      	ldrb	r3, [r7, #11]
 8017d1a:	b29b      	uxth	r3, r3
 8017d1c:	4413      	add	r3, r2
 8017d1e:	b29b      	uxth	r3, r3
 8017d20:	b21b      	sxth	r3, r3
 8017d22:	ee07 3a90 	vmov	s15, r3
 8017d26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	edd3 7a07 	vldr	s15, [r3, #28]
 8017d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017d34:	683b      	ldr	r3, [r7, #0]
 8017d36:	3304      	adds	r3, #4
 8017d38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d3c:	ee17 2a90 	vmov	r2, s15
 8017d40:	b212      	sxth	r2, r2
 8017d42:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Y] = (int16_t)((data[4] << 8) + data[5]) * p_owner->_hmc5883.scale[AXIS_Y];
 8017d44:	7b3b      	ldrb	r3, [r7, #12]
 8017d46:	b29b      	uxth	r3, r3
 8017d48:	021b      	lsls	r3, r3, #8
 8017d4a:	b29a      	uxth	r2, r3
 8017d4c:	7b7b      	ldrb	r3, [r7, #13]
 8017d4e:	b29b      	uxth	r3, r3
 8017d50:	4413      	add	r3, r2
 8017d52:	b29b      	uxth	r3, r3
 8017d54:	b21b      	sxth	r3, r3
 8017d56:	ee07 3a90 	vmov	s15, r3
 8017d5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	edd3 7a06 	vldr	s15, [r3, #24]
 8017d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017d68:	683b      	ldr	r3, [r7, #0]
 8017d6a:	3302      	adds	r3, #2
 8017d6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d70:	ee17 2a90 	vmov	r2, s15
 8017d74:	b212      	sxth	r2, r2
 8017d76:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8017d78:	2301      	movs	r3, #1
}
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	3710      	adds	r7, #16
 8017d7e:	46bd      	mov	sp, r7
 8017d80:	bd80      	pop	{r7, pc}

08017d82 <_doTask>:
#include "core/pif_task.h"
#include "sensor/pif_hc_sr04.h"


static uint16_t _doTask(PifTask* p_task)
{
 8017d82:	b580      	push	{r7, lr}
 8017d84:	b084      	sub	sp, #16
 8017d86:	af00      	add	r7, sp, #0
 8017d88:	6078      	str	r0, [r7, #4]
	PifHcSr04* p_owner = (PifHcSr04*)p_task->_p_client;
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	68db      	ldr	r3, [r3, #12]
 8017d8e:	60fb      	str	r3, [r7, #12]

	if (p_owner->__timer) p_owner->__timer--; else p_owner->__timer = 0;
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d009      	beq.n	8017dae <_doTask+0x2c>
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8017da0:	b29b      	uxth	r3, r3
 8017da2:	3b01      	subs	r3, #1
 8017da4:	b29b      	uxth	r3, r3
 8017da6:	b21a      	sxth	r2, r3
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	831a      	strh	r2, [r3, #24]
 8017dac:	e002      	b.n	8017db4 <_doTask+0x32>
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	2200      	movs	r2, #0
 8017db2:	831a      	strh	r2, [r3, #24]
	if (p_owner->__period > -1 && !p_owner->__timer) {
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	db2c      	blt.n	8017e18 <_doTask+0x96>
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d127      	bne.n	8017e18 <_doTask+0x96>
		if (p_owner->__state == HSS_HIGH) {
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	7d1b      	ldrb	r3, [r3, #20]
 8017dcc:	2b02      	cmp	r3, #2
 8017dce:	d11b      	bne.n	8017e08 <_doTask+0x86>
			if (p_owner->evt_distance) (*p_owner->evt_distance)(p_owner->__period * 1000L / p_owner->_transform_const);
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	685b      	ldr	r3, [r3, #4]
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d017      	beq.n	8017e08 <_doTask+0x86>
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	685b      	ldr	r3, [r3, #4]
 8017ddc:	68fa      	ldr	r2, [r7, #12]
 8017dde:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8017de2:	4611      	mov	r1, r2
 8017de4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017de8:	fb01 f202 	mul.w	r2, r1, r2
 8017dec:	ee07 2a90 	vmov	s15, r2
 8017df0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017df4:	68fa      	ldr	r2, [r7, #12]
 8017df6:	ed92 7a04 	vldr	s14, [r2, #16]
 8017dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017e02:	ee17 0a90 	vmov	r0, s15
 8017e06:	4798      	blx	r3
	    }
		pifHcSr04_Trigger(p_owner);
 8017e08:	68f8      	ldr	r0, [r7, #12]
 8017e0a:	f000 f867 	bl	8017edc <pifHcSr04_Trigger>
		p_owner->__timer = p_owner->__period;
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	831a      	strh	r2, [r3, #24]
	}

	if (p_owner->__state == HSS_LOW) {
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	7d1b      	ldrb	r3, [r3, #20]
 8017e1c:	2b03      	cmp	r3, #3
 8017e1e:	d10c      	bne.n	8017e3a <_doTask+0xb8>
		if (p_owner->evt_distance) (*p_owner->evt_distance)(p_owner->__distance);
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	685b      	ldr	r3, [r3, #4]
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d005      	beq.n	8017e34 <_doTask+0xb2>
 8017e28:	68fb      	ldr	r3, [r7, #12]
 8017e2a:	685b      	ldr	r3, [r3, #4]
 8017e2c:	68fa      	ldr	r2, [r7, #12]
 8017e2e:	6a12      	ldr	r2, [r2, #32]
 8017e30:	4610      	mov	r0, r2
 8017e32:	4798      	blx	r3
		p_owner->__state = HSS_READY;
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	2200      	movs	r2, #0
 8017e38:	751a      	strb	r2, [r3, #20]
    }
	return 0;
 8017e3a:	2300      	movs	r3, #0
}
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	3710      	adds	r7, #16
 8017e40:	46bd      	mov	sp, r7
 8017e42:	bd80      	pop	{r7, pc}

08017e44 <pifHcSr04_Init>:

BOOL pifHcSr04_Init(PifHcSr04* p_owner, PifId id)
{
 8017e44:	b580      	push	{r7, lr}
 8017e46:	b084      	sub	sp, #16
 8017e48:	af02      	add	r7, sp, #8
 8017e4a:	6078      	str	r0, [r7, #4]
 8017e4c:	460b      	mov	r3, r1
 8017e4e:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d104      	bne.n	8017e60 <pifHcSr04_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8017e56:	4b1d      	ldr	r3, [pc, #116]	; (8017ecc <pifHcSr04_Init+0x88>)
 8017e58:	2201      	movs	r2, #1
 8017e5a:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	e031      	b.n	8017ec4 <pifHcSr04_Init+0x80>
	}

	if (!pif_act_timer1us) {
 8017e60:	4b1b      	ldr	r3, [pc, #108]	; (8017ed0 <pifHcSr04_Init+0x8c>)
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d104      	bne.n	8017e72 <pifHcSr04_Init+0x2e>
		pif_error = E_CANNOT_USE;
 8017e68:	4b18      	ldr	r3, [pc, #96]	; (8017ecc <pifHcSr04_Init+0x88>)
 8017e6a:	2209      	movs	r2, #9
 8017e6c:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8017e6e:	2300      	movs	r3, #0
 8017e70:	e028      	b.n	8017ec4 <pifHcSr04_Init+0x80>
	}

	memset(p_owner, 0, sizeof(PifHcSr04));
 8017e72:	2224      	movs	r2, #36	; 0x24
 8017e74:	2100      	movs	r1, #0
 8017e76:	6878      	ldr	r0, [r7, #4]
 8017e78:	f009 ffb4 	bl	8021de4 <memset>

	p_owner->_p_task = pifTaskManager_Add(TM_PERIOD_MS, 1, _doTask, p_owner, TRUE);
 8017e7c:	2301      	movs	r3, #1
 8017e7e:	9300      	str	r3, [sp, #0]
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	4a14      	ldr	r2, [pc, #80]	; (8017ed4 <pifHcSr04_Init+0x90>)
 8017e84:	2101      	movs	r1, #1
 8017e86:	2002      	movs	r0, #2
 8017e88:	f7fc fcda 	bl	8014840 <pifTaskManager_Add>
 8017e8c:	4602      	mov	r2, r0
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	60da      	str	r2, [r3, #12]
	if (!p_owner->_p_task) return FALSE;
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	68db      	ldr	r3, [r3, #12]
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d101      	bne.n	8017e9e <pifHcSr04_Init+0x5a>
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	e012      	b.n	8017ec4 <pifHcSr04_Init+0x80>

	if (id == PIF_ID_AUTO) id = pif_id++;
 8017e9e:	887b      	ldrh	r3, [r7, #2]
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d106      	bne.n	8017eb2 <pifHcSr04_Init+0x6e>
 8017ea4:	4b0c      	ldr	r3, [pc, #48]	; (8017ed8 <pifHcSr04_Init+0x94>)
 8017ea6:	881b      	ldrh	r3, [r3, #0]
 8017ea8:	1c5a      	adds	r2, r3, #1
 8017eaa:	b291      	uxth	r1, r2
 8017eac:	4a0a      	ldr	r2, [pc, #40]	; (8017ed8 <pifHcSr04_Init+0x94>)
 8017eae:	8011      	strh	r1, [r2, #0]
 8017eb0:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	887a      	ldrh	r2, [r7, #2]
 8017eb6:	811a      	strh	r2, [r3, #8]

    pifHcSr04_SetTemperature(p_owner, 20);
 8017eb8:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8017ebc:	6878      	ldr	r0, [r7, #4]
 8017ebe:	f000 f847 	bl	8017f50 <pifHcSr04_SetTemperature>

    return TRUE;
 8017ec2:	2301      	movs	r3, #1
}
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	3708      	adds	r7, #8
 8017ec8:	46bd      	mov	sp, r7
 8017eca:	bd80      	pop	{r7, pc}
 8017ecc:	200020d1 	.word	0x200020d1
 8017ed0:	200020f0 	.word	0x200020f0
 8017ed4:	08017d83 	.word	0x08017d83
 8017ed8:	2000005c 	.word	0x2000005c

08017edc <pifHcSr04_Trigger>:
		p_owner->_p_task = NULL;
	}
}

void pifHcSr04_Trigger(PifHcSr04* p_owner)
{
 8017edc:	b580      	push	{r7, lr}
 8017ede:	b082      	sub	sp, #8
 8017ee0:	af00      	add	r7, sp, #0
 8017ee2:	6078      	str	r0, [r7, #4]
	(*p_owner->act_trigger)(ON);
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	681b      	ldr	r3, [r3, #0]
 8017ee8:	2001      	movs	r0, #1
 8017eea:	4798      	blx	r3
	pif_Delay1us(10);
 8017eec:	200a      	movs	r0, #10
 8017eee:	f7f9 fb19 	bl	8011524 <pif_Delay1us>
	(*p_owner->act_trigger)(OFF);
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	681b      	ldr	r3, [r3, #0]
 8017ef6:	2000      	movs	r0, #0
 8017ef8:	4798      	blx	r3
	p_owner->__state = HSS_TRIGGER;
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	2201      	movs	r2, #1
 8017efe:	751a      	strb	r2, [r3, #20]
}
 8017f00:	bf00      	nop
 8017f02:	3708      	adds	r7, #8
 8017f04:	46bd      	mov	sp, r7
 8017f06:	bd80      	pop	{r7, pc}

08017f08 <pifHcSr04_StartTrigger>:

BOOL pifHcSr04_StartTrigger(PifHcSr04* p_owner, uint16_t period)
{
 8017f08:	b480      	push	{r7}
 8017f0a:	b083      	sub	sp, #12
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	6078      	str	r0, [r7, #4]
 8017f10:	460b      	mov	r3, r1
 8017f12:	807b      	strh	r3, [r7, #2]
	if (!p_owner || !period) {
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d002      	beq.n	8017f20 <pifHcSr04_StartTrigger+0x18>
 8017f1a:	887b      	ldrh	r3, [r7, #2]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d104      	bne.n	8017f2a <pifHcSr04_StartTrigger+0x22>
		pif_error = E_INVALID_PARAM;
 8017f20:	4b09      	ldr	r3, [pc, #36]	; (8017f48 <pifHcSr04_StartTrigger+0x40>)
 8017f22:	2201      	movs	r2, #1
 8017f24:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8017f26:	2300      	movs	r3, #0
 8017f28:	e007      	b.n	8017f3a <pifHcSr04_StartTrigger+0x32>
	}

	p_owner->__period = period;
 8017f2a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	82da      	strh	r2, [r3, #22]
	p_owner->__timer = 0;
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	2200      	movs	r2, #0
 8017f36:	831a      	strh	r2, [r3, #24]
	return TRUE;
 8017f38:	2301      	movs	r3, #1
}
 8017f3a:	4618      	mov	r0, r3
 8017f3c:	370c      	adds	r7, #12
 8017f3e:	46bd      	mov	sp, r7
 8017f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f44:	4770      	bx	lr
 8017f46:	bf00      	nop
 8017f48:	200020d1 	.word	0x200020d1
 8017f4c:	00000000 	.word	0x00000000

08017f50 <pifHcSr04_SetTemperature>:
{
	p_owner->__period = -1;
}

void pifHcSr04_SetTemperature(PifHcSr04* p_owner, float temperature)
{
 8017f50:	b580      	push	{r7, lr}
 8017f52:	b082      	sub	sp, #8
 8017f54:	af00      	add	r7, sp, #0
 8017f56:	6078      	str	r0, [r7, #4]
 8017f58:	ed87 0a00 	vstr	s0, [r7]
	p_owner->_transform_const = 2.0 / ((331.6 + 0.6 * temperature) / 10000.0);		// 2 : 왕복, 10000 : m/s -> cm/ms
 8017f5c:	6838      	ldr	r0, [r7, #0]
 8017f5e:	f7e8 fab1 	bl	80004c4 <__aeabi_f2d>
 8017f62:	a317      	add	r3, pc, #92	; (adr r3, 8017fc0 <pifHcSr04_SetTemperature+0x70>)
 8017f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f68:	f7e8 fb04 	bl	8000574 <__aeabi_dmul>
 8017f6c:	4602      	mov	r2, r0
 8017f6e:	460b      	mov	r3, r1
 8017f70:	4610      	mov	r0, r2
 8017f72:	4619      	mov	r1, r3
 8017f74:	a314      	add	r3, pc, #80	; (adr r3, 8017fc8 <pifHcSr04_SetTemperature+0x78>)
 8017f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f7a:	f7e8 f945 	bl	8000208 <__adddf3>
 8017f7e:	4602      	mov	r2, r0
 8017f80:	460b      	mov	r3, r1
 8017f82:	4610      	mov	r0, r2
 8017f84:	4619      	mov	r1, r3
 8017f86:	a312      	add	r3, pc, #72	; (adr r3, 8017fd0 <pifHcSr04_SetTemperature+0x80>)
 8017f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f8c:	f7e8 fc1c 	bl	80007c8 <__aeabi_ddiv>
 8017f90:	4602      	mov	r2, r0
 8017f92:	460b      	mov	r3, r1
 8017f94:	f04f 0000 	mov.w	r0, #0
 8017f98:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8017f9c:	f7e8 fc14 	bl	80007c8 <__aeabi_ddiv>
 8017fa0:	4602      	mov	r2, r0
 8017fa2:	460b      	mov	r3, r1
 8017fa4:	4610      	mov	r0, r2
 8017fa6:	4619      	mov	r1, r3
 8017fa8:	f7e8 fdc6 	bl	8000b38 <__aeabi_d2f>
 8017fac:	4602      	mov	r2, r0
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	611a      	str	r2, [r3, #16]
}
 8017fb2:	bf00      	nop
 8017fb4:	3708      	adds	r7, #8
 8017fb6:	46bd      	mov	sp, r7
 8017fb8:	bd80      	pop	{r7, pc}
 8017fba:	bf00      	nop
 8017fbc:	f3af 8000 	nop.w
 8017fc0:	33333333 	.word	0x33333333
 8017fc4:	3fe33333 	.word	0x3fe33333
 8017fc8:	9999999a 	.word	0x9999999a
 8017fcc:	4074b999 	.word	0x4074b999
 8017fd0:	00000000 	.word	0x00000000
 8017fd4:	40c38800 	.word	0x40c38800

08017fd8 <pifHcSr04_sigReceiveEcho>:

void pifHcSr04_sigReceiveEcho(PifHcSr04* p_owner, SWITCH state)
{
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b082      	sub	sp, #8
 8017fdc:	af00      	add	r7, sp, #0
 8017fde:	6078      	str	r0, [r7, #4]
 8017fe0:	460b      	mov	r3, r1
 8017fe2:	70fb      	strb	r3, [r7, #3]
	switch (p_owner->__state) {
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	7d1b      	ldrb	r3, [r3, #20]
 8017fe8:	2b01      	cmp	r3, #1
 8017fea:	d002      	beq.n	8017ff2 <pifHcSr04_sigReceiveEcho+0x1a>
 8017fec:	2b02      	cmp	r3, #2
 8017fee:	d00d      	beq.n	801800c <pifHcSr04_sigReceiveEcho+0x34>
			p_owner->__state = HSS_LOW;
		}
		break;

	default:
		break;
 8017ff0:	e02c      	b.n	801804c <pifHcSr04_sigReceiveEcho+0x74>
		if (state) {
 8017ff2:	78fb      	ldrb	r3, [r7, #3]
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d026      	beq.n	8018046 <pifHcSr04_sigReceiveEcho+0x6e>
			p_owner->__tigger_time_us = (*pif_act_timer1us)();
 8017ff8:	4b16      	ldr	r3, [pc, #88]	; (8018054 <pifHcSr04_sigReceiveEcho+0x7c>)
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	4798      	blx	r3
 8017ffe:	4602      	mov	r2, r0
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	61da      	str	r2, [r3, #28]
			p_owner->__state = HSS_HIGH;
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	2202      	movs	r2, #2
 8018008:	751a      	strb	r2, [r3, #20]
		break;
 801800a:	e01c      	b.n	8018046 <pifHcSr04_sigReceiveEcho+0x6e>
		if (!state) {
 801800c:	78fb      	ldrb	r3, [r7, #3]
 801800e:	2b00      	cmp	r3, #0
 8018010:	d11b      	bne.n	801804a <pifHcSr04_sigReceiveEcho+0x72>
			p_owner->__distance = ((*pif_act_timer1us)() - p_owner->__tigger_time_us) / p_owner->_transform_const;
 8018012:	4b10      	ldr	r3, [pc, #64]	; (8018054 <pifHcSr04_sigReceiveEcho+0x7c>)
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	4798      	blx	r3
 8018018:	4602      	mov	r2, r0
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	69db      	ldr	r3, [r3, #28]
 801801e:	1ad3      	subs	r3, r2, r3
 8018020:	ee07 3a90 	vmov	s15, r3
 8018024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	ed93 7a04 	vldr	s14, [r3, #16]
 801802e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018032:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018036:	ee17 2a90 	vmov	r2, s15
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	621a      	str	r2, [r3, #32]
			p_owner->__state = HSS_LOW;
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	2203      	movs	r2, #3
 8018042:	751a      	strb	r2, [r3, #20]
		break;
 8018044:	e001      	b.n	801804a <pifHcSr04_sigReceiveEcho+0x72>
		break;
 8018046:	bf00      	nop
 8018048:	e000      	b.n	801804c <pifHcSr04_sigReceiveEcho+0x74>
		break;
 801804a:	bf00      	nop
	}
}
 801804c:	bf00      	nop
 801804e:	3708      	adds	r7, #8
 8018050:	46bd      	mov	sp, r7
 8018052:	bd80      	pop	{r7, pc}
 8018054:	200020f0 	.word	0x200020f0

08018058 <_changeGain>:
#include "core/pif_log.h"
#include "sensor/pif_hmc5883.h"


static void _changeGain(PifImuSensor* p_imu_sensor, PifHmc5883Gain gain)
{
 8018058:	b480      	push	{r7}
 801805a:	b083      	sub	sp, #12
 801805c:	af00      	add	r7, sp, #0
 801805e:	6078      	str	r0, [r7, #4]
 8018060:	460b      	mov	r3, r1
 8018062:	70fb      	strb	r3, [r7, #3]
	switch (gain) {
 8018064:	78fb      	ldrb	r3, [r7, #3]
 8018066:	2b07      	cmp	r3, #7
 8018068:	d839      	bhi.n	80180de <_changeGain+0x86>
 801806a:	a201      	add	r2, pc, #4	; (adr r2, 8018070 <_changeGain+0x18>)
 801806c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018070:	08018091 	.word	0x08018091
 8018074:	0801809b 	.word	0x0801809b
 8018078:	080180a5 	.word	0x080180a5
 801807c:	080180af 	.word	0x080180af
 8018080:	080180b9 	.word	0x080180b9
 8018084:	080180c3 	.word	0x080180c3
 8018088:	080180cd 	.word	0x080180cd
 801808c:	080180d7 	.word	0x080180d7
	case HMC5883_GAIN_0_88GA:	p_imu_sensor->_mag_gain = 1370; break;
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	f240 525a 	movw	r2, #1370	; 0x55a
 8018096:	825a      	strh	r2, [r3, #18]
 8018098:	e021      	b.n	80180de <_changeGain+0x86>
	case HMC5883_GAIN_1_3GA:	p_imu_sensor->_mag_gain = 1090; break;
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	f240 4242 	movw	r2, #1090	; 0x442
 80180a0:	825a      	strh	r2, [r3, #18]
 80180a2:	e01c      	b.n	80180de <_changeGain+0x86>
	case HMC5883_GAIN_1_9GA:	p_imu_sensor->_mag_gain = 820; break;
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	f44f 724d 	mov.w	r2, #820	; 0x334
 80180aa:	825a      	strh	r2, [r3, #18]
 80180ac:	e017      	b.n	80180de <_changeGain+0x86>
	case HMC5883_GAIN_2_5GA:	p_imu_sensor->_mag_gain = 660; break;
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	f44f 7225 	mov.w	r2, #660	; 0x294
 80180b4:	825a      	strh	r2, [r3, #18]
 80180b6:	e012      	b.n	80180de <_changeGain+0x86>
	case HMC5883_GAIN_4GA:		p_imu_sensor->_mag_gain = 440; break;
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80180be:	825a      	strh	r2, [r3, #18]
 80180c0:	e00d      	b.n	80180de <_changeGain+0x86>
	case HMC5883_GAIN_4_7GA:	p_imu_sensor->_mag_gain = 390; break;
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	f44f 72c3 	mov.w	r2, #390	; 0x186
 80180c8:	825a      	strh	r2, [r3, #18]
 80180ca:	e008      	b.n	80180de <_changeGain+0x86>
	case HMC5883_GAIN_5_6GA:	p_imu_sensor->_mag_gain = 330; break;
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80180d2:	825a      	strh	r2, [r3, #18]
 80180d4:	e003      	b.n	80180de <_changeGain+0x86>
	case HMC5883_GAIN_8_1GA:	p_imu_sensor->_mag_gain = 230; break;
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	22e6      	movs	r2, #230	; 0xe6
 80180da:	825a      	strh	r2, [r3, #18]
 80180dc:	bf00      	nop
	}
}
 80180de:	bf00      	nop
 80180e0:	370c      	adds	r7, #12
 80180e2:	46bd      	mov	sp, r7
 80180e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180e8:	4770      	bx	lr
 80180ea:	bf00      	nop

080180ec <pifHmc5883_Init>:

BOOL pifHmc5883_Init(PifHmc5883* p_owner, PifId id, PifI2cPort* p_i2c, PifImuSensor* p_imu_sensor)
{
 80180ec:	b590      	push	{r4, r7, lr}
 80180ee:	b08d      	sub	sp, #52	; 0x34
 80180f0:	af02      	add	r7, sp, #8
 80180f2:	60f8      	str	r0, [r7, #12]
 80180f4:	607a      	str	r2, [r7, #4]
 80180f6:	603b      	str	r3, [r7, #0]
 80180f8:	460b      	mov	r3, r1
 80180fa:	817b      	strh	r3, [r7, #10]
#ifndef __PIF_NO_LOG__	
	const char ident[] = "HMC5883 Ident: ";
 80180fc:	4b54      	ldr	r3, [pc, #336]	; (8018250 <pifHmc5883_Init+0x164>)
 80180fe:	f107 0418 	add.w	r4, r7, #24
 8018102:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018104:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif	
	uint8_t data[4];

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	2b00      	cmp	r3, #0
 801810c:	d005      	beq.n	801811a <pifHmc5883_Init+0x2e>
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	2b00      	cmp	r3, #0
 8018112:	d002      	beq.n	801811a <pifHmc5883_Init+0x2e>
 8018114:	683b      	ldr	r3, [r7, #0]
 8018116:	2b00      	cmp	r3, #0
 8018118:	d104      	bne.n	8018124 <pifHmc5883_Init+0x38>
		pif_error = E_INVALID_PARAM;
 801811a:	4b4e      	ldr	r3, [pc, #312]	; (8018254 <pifHmc5883_Init+0x168>)
 801811c:	2201      	movs	r2, #1
 801811e:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8018120:	2300      	movs	r3, #0
 8018122:	e091      	b.n	8018248 <pifHmc5883_Init+0x15c>
	}

	memset(p_owner, 0, sizeof(PifHmc5883));
 8018124:	2218      	movs	r2, #24
 8018126:	2100      	movs	r1, #0
 8018128:	68f8      	ldr	r0, [r7, #12]
 801812a:	f009 fe5b 	bl	8021de4 <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 801812e:	6878      	ldr	r0, [r7, #4]
 8018130:	f7fa f980 	bl	8012434 <pifI2cPort_AddDevice>
 8018134:	4602      	mov	r2, r0
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	611a      	str	r2, [r3, #16]
    if (!p_owner->_p_i2c) return FALSE;
 801813a:	68fb      	ldr	r3, [r7, #12]
 801813c:	691b      	ldr	r3, [r3, #16]
 801813e:	2b00      	cmp	r3, #0
 8018140:	d101      	bne.n	8018146 <pifHmc5883_Init+0x5a>
 8018142:	2300      	movs	r3, #0
 8018144:	e080      	b.n	8018248 <pifHmc5883_Init+0x15c>

    p_owner->_p_i2c->addr = HMC5883_I2C_ADDR;
 8018146:	68fb      	ldr	r3, [r7, #12]
 8018148:	691b      	ldr	r3, [r3, #16]
 801814a:	221e      	movs	r2, #30
 801814c:	701a      	strb	r2, [r3, #0]

    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_IDENT_A, data, 3)) goto fail;
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	6918      	ldr	r0, [r3, #16]
 8018152:	f107 0214 	add.w	r2, r7, #20
 8018156:	2303      	movs	r3, #3
 8018158:	210a      	movs	r1, #10
 801815a:	f7fa fa87 	bl	801266c <pifI2cDevice_ReadRegBytes>
 801815e:	4603      	mov	r3, r0
 8018160:	2b00      	cmp	r3, #0
 8018162:	d06a      	beq.n	801823a <pifHmc5883_Init+0x14e>
	if (data[0] != 'H') {
 8018164:	7d3b      	ldrb	r3, [r7, #20]
 8018166:	2b48      	cmp	r3, #72	; 0x48
 8018168:	d003      	beq.n	8018172 <pifHmc5883_Init+0x86>
		pif_error = E_INVALID_ID;
 801816a:	4b3a      	ldr	r3, [pc, #232]	; (8018254 <pifHmc5883_Init+0x168>)
 801816c:	2211      	movs	r2, #17
 801816e:	701a      	strb	r2, [r3, #0]
		goto fail;
 8018170:	e066      	b.n	8018240 <pifHmc5883_Init+0x154>
	}
#ifndef __PIF_NO_LOG__	
    if (data[0] < 32 || data[1] < 32 || data[2] < 32) {
 8018172:	7d3b      	ldrb	r3, [r7, #20]
 8018174:	2b1f      	cmp	r3, #31
 8018176:	d905      	bls.n	8018184 <pifHmc5883_Init+0x98>
 8018178:	7d7b      	ldrb	r3, [r7, #21]
 801817a:	2b1f      	cmp	r3, #31
 801817c:	d902      	bls.n	8018184 <pifHmc5883_Init+0x98>
 801817e:	7dbb      	ldrb	r3, [r7, #22]
 8018180:	2b1f      	cmp	r3, #31
 8018182:	d80e      	bhi.n	80181a2 <pifHmc5883_Init+0xb6>
    	pifLog_Printf(LT_INFO, "%s%2Xh %2Xh %2Xh", ident, data[0], data[1], data[2]);
 8018184:	7d3b      	ldrb	r3, [r7, #20]
 8018186:	4618      	mov	r0, r3
 8018188:	7d7b      	ldrb	r3, [r7, #21]
 801818a:	7dba      	ldrb	r2, [r7, #22]
 801818c:	4611      	mov	r1, r2
 801818e:	f107 0218 	add.w	r2, r7, #24
 8018192:	9101      	str	r1, [sp, #4]
 8018194:	9300      	str	r3, [sp, #0]
 8018196:	4603      	mov	r3, r0
 8018198:	492f      	ldr	r1, [pc, #188]	; (8018258 <pifHmc5883_Init+0x16c>)
 801819a:	2002      	movs	r0, #2
 801819c:	f7fb f9fa 	bl	8013594 <pifLog_Printf>
 80181a0:	e00d      	b.n	80181be <pifHmc5883_Init+0xd2>
    }
    else {
    	pifLog_Printf(LT_INFO, "%s%c%c%c", ident, data[0], data[1], data[2]);
 80181a2:	7d3b      	ldrb	r3, [r7, #20]
 80181a4:	4618      	mov	r0, r3
 80181a6:	7d7b      	ldrb	r3, [r7, #21]
 80181a8:	7dba      	ldrb	r2, [r7, #22]
 80181aa:	4611      	mov	r1, r2
 80181ac:	f107 0218 	add.w	r2, r7, #24
 80181b0:	9101      	str	r1, [sp, #4]
 80181b2:	9300      	str	r3, [sp, #0]
 80181b4:	4603      	mov	r3, r0
 80181b6:	4929      	ldr	r1, [pc, #164]	; (801825c <pifHmc5883_Init+0x170>)
 80181b8:	2002      	movs	r0, #2
 80181ba:	f7fb f9eb 	bl	8013594 <pifLog_Printf>
    }
#endif

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, data)) goto fail;
 80181be:	68fb      	ldr	r3, [r7, #12]
 80181c0:	6918      	ldr	r0, [r3, #16]
 80181c2:	f107 0314 	add.w	r3, r7, #20
 80181c6:	f240 5203 	movw	r2, #1283	; 0x503
 80181ca:	2101      	movs	r1, #1
 80181cc:	f7fa fa63 	bl	8012696 <pifI2cDevice_ReadRegBit8>
 80181d0:	4603      	mov	r3, r0
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d033      	beq.n	801823e <pifHmc5883_Init+0x152>
    _changeGain(p_imu_sensor, (PifHmc5883Gain)data);
 80181d6:	f107 0314 	add.w	r3, r7, #20
 80181da:	b2db      	uxtb	r3, r3
 80181dc:	4619      	mov	r1, r3
 80181de:	6838      	ldr	r0, [r7, #0]
 80181e0:	f7ff ff3a 	bl	8018058 <_changeGain>

	if (id == PIF_ID_AUTO) id = pif_id++;
 80181e4:	897b      	ldrh	r3, [r7, #10]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d106      	bne.n	80181f8 <pifHmc5883_Init+0x10c>
 80181ea:	4b1d      	ldr	r3, [pc, #116]	; (8018260 <pifHmc5883_Init+0x174>)
 80181ec:	881b      	ldrh	r3, [r3, #0]
 80181ee:	1c5a      	adds	r2, r3, #1
 80181f0:	b291      	uxth	r1, r2
 80181f2:	4a1b      	ldr	r2, [pc, #108]	; (8018260 <pifHmc5883_Init+0x174>)
 80181f4:	8011      	strh	r1, [r2, #0]
 80181f6:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	897a      	ldrh	r2, [r7, #10]
 80181fc:	819a      	strh	r2, [r3, #12]
	p_owner->scale[AXIS_X] = 1.0f;
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8018204:	601a      	str	r2, [r3, #0]
	p_owner->scale[AXIS_Y] = 1.0f;
 8018206:	68fb      	ldr	r3, [r7, #12]
 8018208:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801820c:	605a      	str	r2, [r3, #4]
	p_owner->scale[AXIS_Z] = 1.0f;
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8018214:	609a      	str	r2, [r3, #8]
	p_owner->__p_imu_sensor = p_imu_sensor;
 8018216:	68fb      	ldr	r3, [r7, #12]
 8018218:	683a      	ldr	r2, [r7, #0]
 801821a:	615a      	str	r2, [r3, #20]

	p_imu_sensor->_measure |= IMU_MEASURE_MAGNETO;
 801821c:	683b      	ldr	r3, [r7, #0]
 801821e:	781b      	ldrb	r3, [r3, #0]
 8018220:	f043 0304 	orr.w	r3, r3, #4
 8018224:	b2da      	uxtb	r2, r3
 8018226:	683b      	ldr	r3, [r7, #0]
 8018228:	701a      	strb	r2, [r3, #0]

	p_imu_sensor->__mag_info.read = (PifImuSensorRead)pifHmc5883_ReadMag;
 801822a:	683b      	ldr	r3, [r7, #0]
 801822c:	4a0d      	ldr	r2, [pc, #52]	; (8018264 <pifHmc5883_Init+0x178>)
 801822e:	631a      	str	r2, [r3, #48]	; 0x30
	p_imu_sensor->__mag_info.p_issuer = p_owner;
 8018230:	683b      	ldr	r3, [r7, #0]
 8018232:	68fa      	ldr	r2, [r7, #12]
 8018234:	635a      	str	r2, [r3, #52]	; 0x34
    return TRUE;
 8018236:	2301      	movs	r3, #1
 8018238:	e006      	b.n	8018248 <pifHmc5883_Init+0x15c>
    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_IDENT_A, data, 3)) goto fail;
 801823a:	bf00      	nop
 801823c:	e000      	b.n	8018240 <pifHmc5883_Init+0x154>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, data)) goto fail;
 801823e:	bf00      	nop

fail:
	pifHmc5883_Clear(p_owner);
 8018240:	68f8      	ldr	r0, [r7, #12]
 8018242:	f000 f811 	bl	8018268 <pifHmc5883_Clear>
	return FALSE;
 8018246:	2300      	movs	r3, #0
}
 8018248:	4618      	mov	r0, r3
 801824a:	372c      	adds	r7, #44	; 0x2c
 801824c:	46bd      	mov	sp, r7
 801824e:	bd90      	pop	{r4, r7, pc}
 8018250:	08026a68 	.word	0x08026a68
 8018254:	200020d1 	.word	0x200020d1
 8018258:	08026a48 	.word	0x08026a48
 801825c:	08026a5c 	.word	0x08026a5c
 8018260:	2000005c 	.word	0x2000005c
 8018264:	080182d7 	.word	0x080182d7

08018268 <pifHmc5883_Clear>:

void pifHmc5883_Clear(PifHmc5883* p_owner)
{
 8018268:	b580      	push	{r7, lr}
 801826a:	b082      	sub	sp, #8
 801826c:	af00      	add	r7, sp, #0
 801826e:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_i2c) {
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	691b      	ldr	r3, [r3, #16]
 8018274:	2b00      	cmp	r3, #0
 8018276:	d00b      	beq.n	8018290 <pifHmc5883_Clear+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	691b      	ldr	r3, [r3, #16]
 801827c:	685a      	ldr	r2, [r3, #4]
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	691b      	ldr	r3, [r3, #16]
 8018282:	4619      	mov	r1, r3
 8018284:	4610      	mov	r0, r2
 8018286:	f7fa f8f9 	bl	801247c <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	2200      	movs	r2, #0
 801828e:	611a      	str	r2, [r3, #16]
	}
}
 8018290:	bf00      	nop
 8018292:	3708      	adds	r7, #8
 8018294:	46bd      	mov	sp, r7
 8018296:	bd80      	pop	{r7, pc}

08018298 <pifHmc5883_SetGain>:

BOOL pifHmc5883_SetGain(PifHmc5883* p_owner, PifHmc5883Gain gain)
{
 8018298:	b580      	push	{r7, lr}
 801829a:	b082      	sub	sp, #8
 801829c:	af00      	add	r7, sp, #0
 801829e:	6078      	str	r0, [r7, #4]
 80182a0:	460b      	mov	r3, r1
 80182a2:	70fb      	strb	r3, [r7, #3]
    if (!pifI2cDevice_WriteRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, gain)) return FALSE;
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	6918      	ldr	r0, [r3, #16]
 80182a8:	78fb      	ldrb	r3, [r7, #3]
 80182aa:	f240 5203 	movw	r2, #1283	; 0x503
 80182ae:	2101      	movs	r1, #1
 80182b0:	f7fa fae8 	bl	8012884 <pifI2cDevice_WriteRegBit8>
 80182b4:	4603      	mov	r3, r0
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d101      	bne.n	80182be <pifHmc5883_SetGain+0x26>
 80182ba:	2300      	movs	r3, #0
 80182bc:	e007      	b.n	80182ce <pifHmc5883_SetGain+0x36>
	_changeGain(p_owner->__p_imu_sensor, gain);
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	695b      	ldr	r3, [r3, #20]
 80182c2:	78fa      	ldrb	r2, [r7, #3]
 80182c4:	4611      	mov	r1, r2
 80182c6:	4618      	mov	r0, r3
 80182c8:	f7ff fec6 	bl	8018058 <_changeGain>
    return TRUE;
 80182cc:	2301      	movs	r3, #1
}
 80182ce:	4618      	mov	r0, r3
 80182d0:	3708      	adds	r7, #8
 80182d2:	46bd      	mov	sp, r7
 80182d4:	bd80      	pop	{r7, pc}

080182d6 <pifHmc5883_ReadMag>:

BOOL pifHmc5883_ReadMag(PifHmc5883* p_owner, int16_t* p_mag)
{
 80182d6:	b580      	push	{r7, lr}
 80182d8:	b084      	sub	sp, #16
 80182da:	af00      	add	r7, sp, #0
 80182dc:	6078      	str	r0, [r7, #4]
 80182de:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, HMC5883_REG_STATUS, data)) return FALSE;
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	691b      	ldr	r3, [r3, #16]
 80182e4:	f107 0208 	add.w	r2, r7, #8
 80182e8:	2109      	movs	r1, #9
 80182ea:	4618      	mov	r0, r3
 80182ec:	f7fa f986 	bl	80125fc <pifI2cDevice_ReadRegByte>
 80182f0:	4603      	mov	r3, r0
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d101      	bne.n	80182fa <pifHmc5883_ReadMag+0x24>
 80182f6:	2300      	movs	r3, #0
 80182f8:	e061      	b.n	80183be <pifHmc5883_ReadMag+0xe8>
	if (!(data[0] & 1)) return FALSE;
 80182fa:	7a3b      	ldrb	r3, [r7, #8]
 80182fc:	f003 0301 	and.w	r3, r3, #1
 8018300:	2b00      	cmp	r3, #0
 8018302:	d101      	bne.n	8018308 <pifHmc5883_ReadMag+0x32>
 8018304:	2300      	movs	r3, #0
 8018306:	e05a      	b.n	80183be <pifHmc5883_ReadMag+0xe8>

	if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_OUT_X_M, data, 6)) return FALSE;
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	6918      	ldr	r0, [r3, #16]
 801830c:	f107 0208 	add.w	r2, r7, #8
 8018310:	2306      	movs	r3, #6
 8018312:	2103      	movs	r1, #3
 8018314:	f7fa f9aa 	bl	801266c <pifI2cDevice_ReadRegBytes>
 8018318:	4603      	mov	r3, r0
 801831a:	2b00      	cmp	r3, #0
 801831c:	d101      	bne.n	8018322 <pifHmc5883_ReadMag+0x4c>
 801831e:	2300      	movs	r3, #0
 8018320:	e04d      	b.n	80183be <pifHmc5883_ReadMag+0xe8>

	p_mag[AXIS_X] = (int16_t)((data[0] << 8) + data[1]) * p_owner->scale[AXIS_X];
 8018322:	7a3b      	ldrb	r3, [r7, #8]
 8018324:	b29b      	uxth	r3, r3
 8018326:	021b      	lsls	r3, r3, #8
 8018328:	b29a      	uxth	r2, r3
 801832a:	7a7b      	ldrb	r3, [r7, #9]
 801832c:	b29b      	uxth	r3, r3
 801832e:	4413      	add	r3, r2
 8018330:	b29b      	uxth	r3, r3
 8018332:	b21b      	sxth	r3, r3
 8018334:	ee07 3a90 	vmov	s15, r3
 8018338:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	edd3 7a00 	vldr	s15, [r3]
 8018342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018346:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801834a:	ee17 3a90 	vmov	r3, s15
 801834e:	b21a      	sxth	r2, r3
 8018350:	683b      	ldr	r3, [r7, #0]
 8018352:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Z] = (int16_t)((data[2] << 8) + data[3]) * p_owner->scale[AXIS_Z];
 8018354:	7abb      	ldrb	r3, [r7, #10]
 8018356:	b29b      	uxth	r3, r3
 8018358:	021b      	lsls	r3, r3, #8
 801835a:	b29a      	uxth	r2, r3
 801835c:	7afb      	ldrb	r3, [r7, #11]
 801835e:	b29b      	uxth	r3, r3
 8018360:	4413      	add	r3, r2
 8018362:	b29b      	uxth	r3, r3
 8018364:	b21b      	sxth	r3, r3
 8018366:	ee07 3a90 	vmov	s15, r3
 801836a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	edd3 7a02 	vldr	s15, [r3, #8]
 8018374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018378:	683b      	ldr	r3, [r7, #0]
 801837a:	3304      	adds	r3, #4
 801837c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018380:	ee17 2a90 	vmov	r2, s15
 8018384:	b212      	sxth	r2, r2
 8018386:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Y] = (int16_t)((data[4] << 8) + data[5]) * p_owner->scale[AXIS_Y];
 8018388:	7b3b      	ldrb	r3, [r7, #12]
 801838a:	b29b      	uxth	r3, r3
 801838c:	021b      	lsls	r3, r3, #8
 801838e:	b29a      	uxth	r2, r3
 8018390:	7b7b      	ldrb	r3, [r7, #13]
 8018392:	b29b      	uxth	r3, r3
 8018394:	4413      	add	r3, r2
 8018396:	b29b      	uxth	r3, r3
 8018398:	b21b      	sxth	r3, r3
 801839a:	ee07 3a90 	vmov	s15, r3
 801839e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80183a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80183ac:	683b      	ldr	r3, [r7, #0]
 80183ae:	3302      	adds	r3, #2
 80183b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80183b4:	ee17 2a90 	vmov	r2, s15
 80183b8:	b212      	sxth	r2, r2
 80183ba:	801a      	strh	r2, [r3, #0]
	return TRUE;
 80183bc:	2301      	movs	r3, #1
}
 80183be:	4618      	mov	r0, r3
 80183c0:	3710      	adds	r7, #16
 80183c2:	46bd      	mov	sp, r7
 80183c4:	bd80      	pop	{r7, pc}

080183c6 <_alignBoard>:

#include <math.h>


static void _alignBoard(PifImuSensor* p_owner, int16_t *vec)
{
 80183c6:	b580      	push	{r7, lr}
 80183c8:	b084      	sub	sp, #16
 80183ca:	af00      	add	r7, sp, #0
 80183cc:	6078      	str	r0, [r7, #4]
 80183ce:	6039      	str	r1, [r7, #0]
    int16_t x = vec[AXIS_X];
 80183d0:	683b      	ldr	r3, [r7, #0]
 80183d2:	881b      	ldrh	r3, [r3, #0]
 80183d4:	81fb      	strh	r3, [r7, #14]
    int16_t y = vec[AXIS_Y];
 80183d6:	683b      	ldr	r3, [r7, #0]
 80183d8:	885b      	ldrh	r3, [r3, #2]
 80183da:	81bb      	strh	r3, [r7, #12]
    int16_t z = vec[AXIS_Z];
 80183dc:	683b      	ldr	r3, [r7, #0]
 80183de:	889b      	ldrh	r3, [r3, #4]
 80183e0:	817b      	strh	r3, [r7, #10]

    vec[AXIS_X] = lrintf(p_owner->__board_rotation[0][0] * x + p_owner->__board_rotation[1][0] * y + p_owner->__board_rotation[2][0] * z);
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80183e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80183ec:	ee07 3a90 	vmov	s15, r3
 80183f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80183f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 80183fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8018402:	ee07 3a90 	vmov	s15, r3
 8018406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801840a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801840e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8018418:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801841c:	ee07 3a90 	vmov	s15, r3
 8018420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018424:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018428:	ee77 7a27 	vadd.f32	s15, s14, s15
 801842c:	eeb0 0a67 	vmov.f32	s0, s15
 8018430:	f009 fffa 	bl	8022428 <lrintf>
 8018434:	4603      	mov	r3, r0
 8018436:	b21a      	sxth	r2, r3
 8018438:	683b      	ldr	r3, [r7, #0]
 801843a:	801a      	strh	r2, [r3, #0]
    vec[AXIS_Y] = lrintf(p_owner->__board_rotation[0][1] * x + p_owner->__board_rotation[1][1] * y + p_owner->__board_rotation[2][1] * z);
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8018442:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018446:	ee07 3a90 	vmov	s15, r3
 801844a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801844e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8018458:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801845c:	ee07 3a90 	vmov	s15, r3
 8018460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018464:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018468:	ee37 7a27 	vadd.f32	s14, s14, s15
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8018472:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018476:	ee07 3a90 	vmov	s15, r3
 801847a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801847e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018486:	eeb0 0a67 	vmov.f32	s0, s15
 801848a:	f009 ffcd 	bl	8022428 <lrintf>
 801848e:	4602      	mov	r2, r0
 8018490:	683b      	ldr	r3, [r7, #0]
 8018492:	3302      	adds	r3, #2
 8018494:	b212      	sxth	r2, r2
 8018496:	801a      	strh	r2, [r3, #0]
    vec[AXIS_Z] = lrintf(p_owner->__board_rotation[0][2] * x + p_owner->__board_rotation[1][2] * y + p_owner->__board_rotation[2][2] * z);
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 801849e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80184a2:	ee07 3a90 	vmov	s15, r3
 80184a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80184aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80184b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80184b8:	ee07 3a90 	vmov	s15, r3
 80184bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80184c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80184c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 80184ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80184d2:	ee07 3a90 	vmov	s15, r3
 80184d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80184da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80184de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80184e2:	eeb0 0a67 	vmov.f32	s0, s15
 80184e6:	f009 ff9f 	bl	8022428 <lrintf>
 80184ea:	4602      	mov	r2, r0
 80184ec:	683b      	ldr	r3, [r7, #0]
 80184ee:	3304      	adds	r3, #4
 80184f0:	b212      	sxth	r2, r2
 80184f2:	801a      	strh	r2, [r3, #0]
}
 80184f4:	bf00      	nop
 80184f6:	3710      	adds	r7, #16
 80184f8:	46bd      	mov	sp, r7
 80184fa:	bd80      	pop	{r7, pc}

080184fc <_alignSensors>:

static void _alignSensors(PifImuSensor* p_owner, int16_t* src, int16_t* dest, uint8_t rotation)
{
 80184fc:	b580      	push	{r7, lr}
 80184fe:	b084      	sub	sp, #16
 8018500:	af00      	add	r7, sp, #0
 8018502:	60f8      	str	r0, [r7, #12]
 8018504:	60b9      	str	r1, [r7, #8]
 8018506:	607a      	str	r2, [r7, #4]
 8018508:	70fb      	strb	r3, [r7, #3]
    switch (rotation) {
 801850a:	78fb      	ldrb	r3, [r7, #3]
 801850c:	3b02      	subs	r3, #2
 801850e:	2b06      	cmp	r3, #6
 8018510:	f200 80c8 	bhi.w	80186a4 <_alignSensors+0x1a8>
 8018514:	a201      	add	r2, pc, #4	; (adr r2, 801851c <_alignSensors+0x20>)
 8018516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801851a:	bf00      	nop
 801851c:	08018539 	.word	0x08018539
 8018520:	08018565 	.word	0x08018565
 8018524:	0801859b 	.word	0x0801859b
 8018528:	080185c9 	.word	0x080185c9
 801852c:	080185ff 	.word	0x080185ff
 8018530:	0801862d 	.word	0x0801862d
 8018534:	08018665 	.word	0x08018665
        case IMUS_ALIGN_CW90_DEG:
            dest[AXIS_X] = src[AXIS_Y];
 8018538:	68bb      	ldr	r3, [r7, #8]
 801853a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_X];
 8018542:	68bb      	ldr	r3, [r7, #8]
 8018544:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018548:	b29b      	uxth	r3, r3
 801854a:	425b      	negs	r3, r3
 801854c:	b29a      	uxth	r2, r3
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	3302      	adds	r3, #2
 8018552:	b212      	sxth	r2, r2
 8018554:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	3304      	adds	r3, #4
 801855a:	68ba      	ldr	r2, [r7, #8]
 801855c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8018560:	801a      	strh	r2, [r3, #0]
            break;
 8018562:	e0b1      	b.n	80186c8 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW180_DEG:
            dest[AXIS_X] = -src[AXIS_X];
 8018564:	68bb      	ldr	r3, [r7, #8]
 8018566:	f9b3 3000 	ldrsh.w	r3, [r3]
 801856a:	b29b      	uxth	r3, r3
 801856c:	425b      	negs	r3, r3
 801856e:	b29b      	uxth	r3, r3
 8018570:	b21a      	sxth	r2, r3
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_Y];
 8018576:	68bb      	ldr	r3, [r7, #8]
 8018578:	3302      	adds	r3, #2
 801857a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801857e:	b29b      	uxth	r3, r3
 8018580:	425b      	negs	r3, r3
 8018582:	b29a      	uxth	r2, r3
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	3302      	adds	r3, #2
 8018588:	b212      	sxth	r2, r2
 801858a:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	3304      	adds	r3, #4
 8018590:	68ba      	ldr	r2, [r7, #8]
 8018592:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8018596:	801a      	strh	r2, [r3, #0]
            break;
 8018598:	e096      	b.n	80186c8 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW270_DEG:
            dest[AXIS_X] = -src[AXIS_Y];
 801859a:	68bb      	ldr	r3, [r7, #8]
 801859c:	3302      	adds	r3, #2
 801859e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80185a2:	b29b      	uxth	r3, r3
 80185a4:	425b      	negs	r3, r3
 80185a6:	b29b      	uxth	r3, r3
 80185a8:	b21a      	sxth	r2, r3
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_X];
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	3302      	adds	r3, #2
 80185b2:	68ba      	ldr	r2, [r7, #8]
 80185b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80185b8:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	3304      	adds	r3, #4
 80185be:	68ba      	ldr	r2, [r7, #8]
 80185c0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80185c4:	801a      	strh	r2, [r3, #0]
            break;
 80185c6:	e07f      	b.n	80186c8 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW0_DEG_FLIP:
            dest[AXIS_X] = -src[AXIS_X];
 80185c8:	68bb      	ldr	r3, [r7, #8]
 80185ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80185ce:	b29b      	uxth	r3, r3
 80185d0:	425b      	negs	r3, r3
 80185d2:	b29b      	uxth	r3, r3
 80185d4:	b21a      	sxth	r2, r3
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_Y];
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	3302      	adds	r3, #2
 80185de:	68ba      	ldr	r2, [r7, #8]
 80185e0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80185e4:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 80185e6:	68bb      	ldr	r3, [r7, #8]
 80185e8:	3304      	adds	r3, #4
 80185ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80185ee:	b29b      	uxth	r3, r3
 80185f0:	425b      	negs	r3, r3
 80185f2:	b29a      	uxth	r2, r3
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	3304      	adds	r3, #4
 80185f8:	b212      	sxth	r2, r2
 80185fa:	801a      	strh	r2, [r3, #0]
            break;
 80185fc:	e064      	b.n	80186c8 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW90_DEG_FLIP:
            dest[AXIS_X] = src[AXIS_Y];
 80185fe:	68bb      	ldr	r3, [r7, #8]
 8018600:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_X];
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	3302      	adds	r3, #2
 801860c:	68ba      	ldr	r2, [r7, #8]
 801860e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018612:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 8018614:	68bb      	ldr	r3, [r7, #8]
 8018616:	3304      	adds	r3, #4
 8018618:	f9b3 3000 	ldrsh.w	r3, [r3]
 801861c:	b29b      	uxth	r3, r3
 801861e:	425b      	negs	r3, r3
 8018620:	b29a      	uxth	r2, r3
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	3304      	adds	r3, #4
 8018626:	b212      	sxth	r2, r2
 8018628:	801a      	strh	r2, [r3, #0]
            break;
 801862a:	e04d      	b.n	80186c8 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW180_DEG_FLIP:
            dest[AXIS_X] = src[AXIS_X];
 801862c:	68bb      	ldr	r3, [r7, #8]
 801862e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_Y];
 8018636:	68bb      	ldr	r3, [r7, #8]
 8018638:	3302      	adds	r3, #2
 801863a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801863e:	b29b      	uxth	r3, r3
 8018640:	425b      	negs	r3, r3
 8018642:	b29a      	uxth	r2, r3
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	3302      	adds	r3, #2
 8018648:	b212      	sxth	r2, r2
 801864a:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 801864c:	68bb      	ldr	r3, [r7, #8]
 801864e:	3304      	adds	r3, #4
 8018650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018654:	b29b      	uxth	r3, r3
 8018656:	425b      	negs	r3, r3
 8018658:	b29a      	uxth	r2, r3
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	3304      	adds	r3, #4
 801865e:	b212      	sxth	r2, r2
 8018660:	801a      	strh	r2, [r3, #0]
            break;
 8018662:	e031      	b.n	80186c8 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW270_DEG_FLIP:
            dest[AXIS_X] = -src[AXIS_Y];
 8018664:	68bb      	ldr	r3, [r7, #8]
 8018666:	3302      	adds	r3, #2
 8018668:	f9b3 3000 	ldrsh.w	r3, [r3]
 801866c:	b29b      	uxth	r3, r3
 801866e:	425b      	negs	r3, r3
 8018670:	b29b      	uxth	r3, r3
 8018672:	b21a      	sxth	r2, r3
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_X];
 8018678:	68bb      	ldr	r3, [r7, #8]
 801867a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801867e:	b29b      	uxth	r3, r3
 8018680:	425b      	negs	r3, r3
 8018682:	b29a      	uxth	r2, r3
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	3302      	adds	r3, #2
 8018688:	b212      	sxth	r2, r2
 801868a:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 801868c:	68bb      	ldr	r3, [r7, #8]
 801868e:	3304      	adds	r3, #4
 8018690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018694:	b29b      	uxth	r3, r3
 8018696:	425b      	negs	r3, r3
 8018698:	b29a      	uxth	r2, r3
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	3304      	adds	r3, #4
 801869e:	b212      	sxth	r2, r2
 80186a0:	801a      	strh	r2, [r3, #0]
            break;
 80186a2:	e011      	b.n	80186c8 <_alignSensors+0x1cc>
        default:	// IMUS_ALIGN_CW0_DEG:
            dest[AXIS_X] = src[AXIS_X];
 80186a4:	68bb      	ldr	r3, [r7, #8]
 80186a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_Y];
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	3302      	adds	r3, #2
 80186b2:	68ba      	ldr	r2, [r7, #8]
 80186b4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80186b8:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	3304      	adds	r3, #4
 80186be:	68ba      	ldr	r2, [r7, #8]
 80186c0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80186c4:	801a      	strh	r2, [r3, #0]
            break;
 80186c6:	bf00      	nop
    }

    if (p_owner->__board_alignment)
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d003      	beq.n	80186da <_alignSensors+0x1de>
        _alignBoard(p_owner, dest);
 80186d2:	6879      	ldr	r1, [r7, #4]
 80186d4:	68f8      	ldr	r0, [r7, #12]
 80186d6:	f7ff fe76 	bl	80183c6 <_alignBoard>
}
 80186da:	bf00      	nop
 80186dc:	3710      	adds	r7, #16
 80186de:	46bd      	mov	sp, r7
 80186e0:	bd80      	pop	{r7, pc}
 80186e2:	bf00      	nop

080186e4 <pifImuSensor_Init>:

void pifImuSensor_Init(PifImuSensor* p_owner)
{
 80186e4:	b580      	push	{r7, lr}
 80186e6:	b082      	sub	sp, #8
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	6078      	str	r0, [r7, #4]
	memset(p_owner, 0, sizeof(PifImuSensor));
 80186ec:	2278      	movs	r2, #120	; 0x78
 80186ee:	2100      	movs	r1, #0
 80186f0:	6878      	ldr	r0, [r7, #4]
 80186f2:	f009 fb77 	bl	8021de4 <memset>
}
 80186f6:	bf00      	nop
 80186f8:	3708      	adds	r7, #8
 80186fa:	46bd      	mov	sp, r7
 80186fc:	bd80      	pop	{r7, pc}
	...

08018700 <pifImuSensor_InitBoardAlignment>:

void pifImuSensor_InitBoardAlignment(PifImuSensor* p_owner, int16_t board_align_roll, int16_t board_align_pitch, int16_t board_align_yaw)
{
 8018700:	b580      	push	{r7, lr}
 8018702:	b092      	sub	sp, #72	; 0x48
 8018704:	af00      	add	r7, sp, #0
 8018706:	60f8      	str	r0, [r7, #12]
 8018708:	4608      	mov	r0, r1
 801870a:	4611      	mov	r1, r2
 801870c:	461a      	mov	r2, r3
 801870e:	4603      	mov	r3, r0
 8018710:	817b      	strh	r3, [r7, #10]
 8018712:	460b      	mov	r3, r1
 8018714:	813b      	strh	r3, [r7, #8]
 8018716:	4613      	mov	r3, r2
 8018718:	80fb      	strh	r3, [r7, #6]
    float roll, pitch, yaw;
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, coszcosy, sinzcosx, coszsinx, sinzsinx;

    // standard alignment, nothing to calculate
    if (!board_align_roll && !board_align_pitch && !board_align_yaw) return;
 801871a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801871e:	2b00      	cmp	r3, #0
 8018720:	d108      	bne.n	8018734 <pifImuSensor_InitBoardAlignment+0x34>
 8018722:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8018726:	2b00      	cmp	r3, #0
 8018728:	d104      	bne.n	8018734 <pifImuSensor_InitBoardAlignment+0x34>
 801872a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801872e:	2b00      	cmp	r3, #0
 8018730:	f000 80fb 	beq.w	801892a <pifImuSensor_InitBoardAlignment+0x22a>

    p_owner->__board_alignment = TRUE;
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	2201      	movs	r2, #1
 8018738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    // deg2rad
    roll = board_align_roll * M_PI / 180.0f;
 801873c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018740:	4618      	mov	r0, r3
 8018742:	f7e7 fead 	bl	80004a0 <__aeabi_i2d>
 8018746:	a37c      	add	r3, pc, #496	; (adr r3, 8018938 <pifImuSensor_InitBoardAlignment+0x238>)
 8018748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801874c:	f7e7 ff12 	bl	8000574 <__aeabi_dmul>
 8018750:	4602      	mov	r2, r0
 8018752:	460b      	mov	r3, r1
 8018754:	4610      	mov	r0, r2
 8018756:	4619      	mov	r1, r3
 8018758:	f04f 0200 	mov.w	r2, #0
 801875c:	4b78      	ldr	r3, [pc, #480]	; (8018940 <pifImuSensor_InitBoardAlignment+0x240>)
 801875e:	f7e8 f833 	bl	80007c8 <__aeabi_ddiv>
 8018762:	4602      	mov	r2, r0
 8018764:	460b      	mov	r3, r1
 8018766:	4610      	mov	r0, r2
 8018768:	4619      	mov	r1, r3
 801876a:	f7e8 f9e5 	bl	8000b38 <__aeabi_d2f>
 801876e:	4603      	mov	r3, r0
 8018770:	647b      	str	r3, [r7, #68]	; 0x44
    pitch = board_align_pitch * M_PI / 180.0f;
 8018772:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8018776:	4618      	mov	r0, r3
 8018778:	f7e7 fe92 	bl	80004a0 <__aeabi_i2d>
 801877c:	a36e      	add	r3, pc, #440	; (adr r3, 8018938 <pifImuSensor_InitBoardAlignment+0x238>)
 801877e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018782:	f7e7 fef7 	bl	8000574 <__aeabi_dmul>
 8018786:	4602      	mov	r2, r0
 8018788:	460b      	mov	r3, r1
 801878a:	4610      	mov	r0, r2
 801878c:	4619      	mov	r1, r3
 801878e:	f04f 0200 	mov.w	r2, #0
 8018792:	4b6b      	ldr	r3, [pc, #428]	; (8018940 <pifImuSensor_InitBoardAlignment+0x240>)
 8018794:	f7e8 f818 	bl	80007c8 <__aeabi_ddiv>
 8018798:	4602      	mov	r2, r0
 801879a:	460b      	mov	r3, r1
 801879c:	4610      	mov	r0, r2
 801879e:	4619      	mov	r1, r3
 80187a0:	f7e8 f9ca 	bl	8000b38 <__aeabi_d2f>
 80187a4:	4603      	mov	r3, r0
 80187a6:	643b      	str	r3, [r7, #64]	; 0x40
    yaw = board_align_yaw * M_PI / 180.0f;
 80187a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80187ac:	4618      	mov	r0, r3
 80187ae:	f7e7 fe77 	bl	80004a0 <__aeabi_i2d>
 80187b2:	a361      	add	r3, pc, #388	; (adr r3, 8018938 <pifImuSensor_InitBoardAlignment+0x238>)
 80187b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187b8:	f7e7 fedc 	bl	8000574 <__aeabi_dmul>
 80187bc:	4602      	mov	r2, r0
 80187be:	460b      	mov	r3, r1
 80187c0:	4610      	mov	r0, r2
 80187c2:	4619      	mov	r1, r3
 80187c4:	f04f 0200 	mov.w	r2, #0
 80187c8:	4b5d      	ldr	r3, [pc, #372]	; (8018940 <pifImuSensor_InitBoardAlignment+0x240>)
 80187ca:	f7e7 fffd 	bl	80007c8 <__aeabi_ddiv>
 80187ce:	4602      	mov	r2, r0
 80187d0:	460b      	mov	r3, r1
 80187d2:	4610      	mov	r0, r2
 80187d4:	4619      	mov	r1, r3
 80187d6:	f7e8 f9af 	bl	8000b38 <__aeabi_d2f>
 80187da:	4603      	mov	r3, r0
 80187dc:	63fb      	str	r3, [r7, #60]	; 0x3c

    cosx = cosf(roll);
 80187de:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 80187e2:	f009 fddd 	bl	80223a0 <cosf>
 80187e6:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    sinx = sinf(roll);
 80187ea:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 80187ee:	f009 fe5b 	bl	80224a8 <sinf>
 80187f2:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    cosy = cosf(pitch);
 80187f6:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 80187fa:	f009 fdd1 	bl	80223a0 <cosf>
 80187fe:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    siny = sinf(pitch);
 8018802:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8018806:	f009 fe4f 	bl	80224a8 <sinf>
 801880a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    cosz = cosf(yaw);
 801880e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8018812:	f009 fdc5 	bl	80223a0 <cosf>
 8018816:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    sinz = sinf(yaw);
 801881a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 801881e:	f009 fe43 	bl	80224a8 <sinf>
 8018822:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    coszcosx = cosz * cosx;
 8018826:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801882a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801882e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018832:	edc7 7a08 	vstr	s15, [r7, #32]
    coszcosy = cosz * cosy;
 8018836:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801883a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801883e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018842:	edc7 7a07 	vstr	s15, [r7, #28]
    sinzcosx = sinz * cosx;
 8018846:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801884a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801884e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018852:	edc7 7a06 	vstr	s15, [r7, #24]
    coszsinx = sinx * cosz;
 8018856:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801885a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801885e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018862:	edc7 7a05 	vstr	s15, [r7, #20]
    sinzsinx = sinx * sinz;
 8018866:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801886a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801886e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018872:	edc7 7a04 	vstr	s15, [r7, #16]

    // define rotation matrix
    p_owner->__board_rotation[0][0] = coszcosy;
 8018876:	68fb      	ldr	r3, [r7, #12]
 8018878:	69fa      	ldr	r2, [r7, #28]
 801887a:	655a      	str	r2, [r3, #84]	; 0x54
    p_owner->__board_rotation[0][1] = -cosy * sinz;
 801887c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018880:	eeb1 7a67 	vneg.f32	s14, s15
 8018884:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8018888:	ee67 7a27 	vmul.f32	s15, s14, s15
 801888c:	68fb      	ldr	r3, [r7, #12]
 801888e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    p_owner->__board_rotation[0][2] = siny;
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018896:	65da      	str	r2, [r3, #92]	; 0x5c

    p_owner->__board_rotation[1][0] = sinzcosx + (coszsinx * siny);
 8018898:	ed97 7a05 	vldr	s14, [r7, #20]
 801889c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80188a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80188a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80188a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80188ac:	68fb      	ldr	r3, [r7, #12]
 80188ae:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    p_owner->__board_rotation[1][1] = coszcosx - (sinzsinx * siny);
 80188b2:	ed97 7a04 	vldr	s14, [r7, #16]
 80188b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80188ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80188be:	ed97 7a08 	vldr	s14, [r7, #32]
 80188c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80188c6:	68fb      	ldr	r3, [r7, #12]
 80188c8:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
    p_owner->__board_rotation[1][2] = -sinx * cosy;
 80188cc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80188d0:	eeb1 7a67 	vneg.f32	s14, s15
 80188d4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80188d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

    p_owner->__board_rotation[2][0] = (sinzsinx) - (coszcosx * siny);
 80188e2:	ed97 7a08 	vldr	s14, [r7, #32]
 80188e6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80188ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80188ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80188f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
    p_owner->__board_rotation[2][1] = (coszsinx) + (sinzcosx * siny);
 80188fc:	ed97 7a06 	vldr	s14, [r7, #24]
 8018900:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018908:	edd7 7a05 	vldr	s15, [r7, #20]
 801890c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    p_owner->__board_rotation[2][2] = cosy * cosx;
 8018916:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801891a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801891e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
 8018928:	e000      	b.n	801892c <pifImuSensor_InitBoardAlignment+0x22c>
    if (!board_align_roll && !board_align_pitch && !board_align_yaw) return;
 801892a:	bf00      	nop
}
 801892c:	3748      	adds	r7, #72	; 0x48
 801892e:	46bd      	mov	sp, r7
 8018930:	bd80      	pop	{r7, pc}
 8018932:	bf00      	nop
 8018934:	f3af 8000 	nop.w
 8018938:	54442d18 	.word	0x54442d18
 801893c:	400921fb 	.word	0x400921fb
 8018940:	40668000 	.word	0x40668000

08018944 <pifImuSensor_SetGyroAlign>:

void pifImuSensor_SetGyroAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 8018944:	b480      	push	{r7}
 8018946:	b083      	sub	sp, #12
 8018948:	af00      	add	r7, sp, #0
 801894a:	6078      	str	r0, [r7, #4]
 801894c:	460b      	mov	r3, r1
 801894e:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 8018950:	78fb      	ldrb	r3, [r7, #3]
 8018952:	2b00      	cmp	r3, #0
 8018954:	d002      	beq.n	801895c <pifImuSensor_SetGyroAlign+0x18>
        p_owner->__gyro_info.align = align;
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	78fa      	ldrb	r2, [r7, #3]
 801895a:	751a      	strb	r2, [r3, #20]
}
 801895c:	bf00      	nop
 801895e:	370c      	adds	r7, #12
 8018960:	46bd      	mov	sp, r7
 8018962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018966:	4770      	bx	lr

08018968 <pifImuSensor_ReadGyro>:

BOOL pifImuSensor_ReadGyro(PifImuSensor* p_owner, int16_t* p_gyro)
{
 8018968:	b580      	push	{r7, lr}
 801896a:	b084      	sub	sp, #16
 801896c:	af00      	add	r7, sp, #0
 801896e:	6078      	str	r0, [r7, #4]
 8018970:	6039      	str	r1, [r7, #0]
	int16_t gyro[3];

	if (p_owner->_measure & IMU_MEASURE_GYROSCOPE) {
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	781b      	ldrb	r3, [r3, #0]
 8018976:	f003 0301 	and.w	r3, r3, #1
 801897a:	2b00      	cmp	r3, #0
 801897c:	d016      	beq.n	80189ac <pifImuSensor_ReadGyro+0x44>
		if (!(*p_owner->__gyro_info.read)(p_owner->__gyro_info.p_issuer, gyro)) return FALSE;
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	699b      	ldr	r3, [r3, #24]
 8018982:	687a      	ldr	r2, [r7, #4]
 8018984:	69d2      	ldr	r2, [r2, #28]
 8018986:	f107 0108 	add.w	r1, r7, #8
 801898a:	4610      	mov	r0, r2
 801898c:	4798      	blx	r3
 801898e:	4603      	mov	r3, r0
 8018990:	2b00      	cmp	r3, #0
 8018992:	d101      	bne.n	8018998 <pifImuSensor_ReadGyro+0x30>
 8018994:	2300      	movs	r3, #0
 8018996:	e00a      	b.n	80189ae <pifImuSensor_ReadGyro+0x46>

		_alignSensors(p_owner, gyro, p_gyro, p_owner->__gyro_info.align);
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	7d1b      	ldrb	r3, [r3, #20]
 801899c:	f107 0108 	add.w	r1, r7, #8
 80189a0:	683a      	ldr	r2, [r7, #0]
 80189a2:	6878      	ldr	r0, [r7, #4]
 80189a4:	f7ff fdaa 	bl	80184fc <_alignSensors>
		return TRUE;
 80189a8:	2301      	movs	r3, #1
 80189aa:	e000      	b.n	80189ae <pifImuSensor_ReadGyro+0x46>
	}
	return FALSE;
 80189ac:	2300      	movs	r3, #0
}
 80189ae:	4618      	mov	r0, r3
 80189b0:	3710      	adds	r7, #16
 80189b2:	46bd      	mov	sp, r7
 80189b4:	bd80      	pop	{r7, pc}

080189b6 <pifImuSensor_SetAccelAlign>:
	}
	return TRUE;
}

void pifImuSensor_SetAccelAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 80189b6:	b480      	push	{r7}
 80189b8:	b083      	sub	sp, #12
 80189ba:	af00      	add	r7, sp, #0
 80189bc:	6078      	str	r0, [r7, #4]
 80189be:	460b      	mov	r3, r1
 80189c0:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 80189c2:	78fb      	ldrb	r3, [r7, #3]
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d003      	beq.n	80189d0 <pifImuSensor_SetAccelAlign+0x1a>
        p_owner->__accel_info.align = align;
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	78fa      	ldrb	r2, [r7, #3]
 80189cc:	f883 2020 	strb.w	r2, [r3, #32]
}
 80189d0:	bf00      	nop
 80189d2:	370c      	adds	r7, #12
 80189d4:	46bd      	mov	sp, r7
 80189d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189da:	4770      	bx	lr

080189dc <pifImuSensor_ReadAccel>:

BOOL pifImuSensor_ReadAccel(PifImuSensor* p_owner, int16_t* p_accel)
{
 80189dc:	b580      	push	{r7, lr}
 80189de:	b084      	sub	sp, #16
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
 80189e4:	6039      	str	r1, [r7, #0]
	int16_t accel[3];

	if (p_owner->_measure & IMU_MEASURE_ACCELERO) {
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	781b      	ldrb	r3, [r3, #0]
 80189ea:	f003 0302 	and.w	r3, r3, #2
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d017      	beq.n	8018a22 <pifImuSensor_ReadAccel+0x46>
		if (!(*p_owner->__accel_info.read)(p_owner->__accel_info.p_issuer, accel)) return FALSE;
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189f6:	687a      	ldr	r2, [r7, #4]
 80189f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80189fa:	f107 0108 	add.w	r1, r7, #8
 80189fe:	4610      	mov	r0, r2
 8018a00:	4798      	blx	r3
 8018a02:	4603      	mov	r3, r0
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d101      	bne.n	8018a0c <pifImuSensor_ReadAccel+0x30>
 8018a08:	2300      	movs	r3, #0
 8018a0a:	e00b      	b.n	8018a24 <pifImuSensor_ReadAccel+0x48>

		_alignSensors(p_owner, accel, p_accel, p_owner->__accel_info.align);
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018a12:	f107 0108 	add.w	r1, r7, #8
 8018a16:	683a      	ldr	r2, [r7, #0]
 8018a18:	6878      	ldr	r0, [r7, #4]
 8018a1a:	f7ff fd6f 	bl	80184fc <_alignSensors>
		return TRUE;
 8018a1e:	2301      	movs	r3, #1
 8018a20:	e000      	b.n	8018a24 <pifImuSensor_ReadAccel+0x48>
	}
	return FALSE;
 8018a22:	2300      	movs	r3, #0
}
 8018a24:	4618      	mov	r0, r3
 8018a26:	3710      	adds	r7, #16
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	bd80      	pop	{r7, pc}

08018a2c <pifImuSensor_SetMagAlign>:
	p_accel[AXIS_Z] = 9.80665f * accel[AXIS_Z] / p_owner->_accel_gain;
	return TRUE;
}

void pifImuSensor_SetMagAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 8018a2c:	b480      	push	{r7}
 8018a2e:	b083      	sub	sp, #12
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	6078      	str	r0, [r7, #4]
 8018a34:	460b      	mov	r3, r1
 8018a36:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 8018a38:	78fb      	ldrb	r3, [r7, #3]
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d003      	beq.n	8018a46 <pifImuSensor_SetMagAlign+0x1a>
        p_owner->__mag_info.align = align;
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	78fa      	ldrb	r2, [r7, #3]
 8018a42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8018a46:	bf00      	nop
 8018a48:	370c      	adds	r7, #12
 8018a4a:	46bd      	mov	sp, r7
 8018a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a50:	4770      	bx	lr

08018a52 <pifImuSensor_ReadMag>:

BOOL pifImuSensor_ReadMag(PifImuSensor* p_owner, int16_t* p_mag)
{
 8018a52:	b580      	push	{r7, lr}
 8018a54:	b084      	sub	sp, #16
 8018a56:	af00      	add	r7, sp, #0
 8018a58:	6078      	str	r0, [r7, #4]
 8018a5a:	6039      	str	r1, [r7, #0]
	int16_t mag[3];

	if (p_owner->_measure & IMU_MEASURE_MAGNETO) {
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	781b      	ldrb	r3, [r3, #0]
 8018a60:	f003 0304 	and.w	r3, r3, #4
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d017      	beq.n	8018a98 <pifImuSensor_ReadMag+0x46>
		if (!(*p_owner->__mag_info.read)(p_owner->__mag_info.p_issuer, mag)) return FALSE;
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a6c:	687a      	ldr	r2, [r7, #4]
 8018a6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8018a70:	f107 0108 	add.w	r1, r7, #8
 8018a74:	4610      	mov	r0, r2
 8018a76:	4798      	blx	r3
 8018a78:	4603      	mov	r3, r0
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d101      	bne.n	8018a82 <pifImuSensor_ReadMag+0x30>
 8018a7e:	2300      	movs	r3, #0
 8018a80:	e00b      	b.n	8018a9a <pifImuSensor_ReadMag+0x48>

		_alignSensors(p_owner, mag, p_mag, p_owner->__mag_info.align);
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018a88:	f107 0108 	add.w	r1, r7, #8
 8018a8c:	683a      	ldr	r2, [r7, #0]
 8018a8e:	6878      	ldr	r0, [r7, #4]
 8018a90:	f7ff fd34 	bl	80184fc <_alignSensors>
		return TRUE;
 8018a94:	2301      	movs	r3, #1
 8018a96:	e000      	b.n	8018a9a <pifImuSensor_ReadMag+0x48>
	}
	return FALSE;
 8018a98:	2300      	movs	r3, #0
}
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	3710      	adds	r7, #16
 8018a9e:	46bd      	mov	sp, r7
 8018aa0:	bd80      	pop	{r7, pc}
 8018aa2:	0000      	movs	r0, r0
 8018aa4:	0000      	movs	r0, r0
	...

08018aa8 <_changeFsSel>:

#include <math.h>


static BOOL _changeFsSel(PifImuSensor* p_imu_sensor, PifMpu60x0FsSel fs_sel)
{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b082      	sub	sp, #8
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	6078      	str	r0, [r7, #4]
 8018ab0:	460b      	mov	r3, r1
 8018ab2:	70fb      	strb	r3, [r7, #3]
	if (!p_imu_sensor) return FALSE;
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d101      	bne.n	8018abe <_changeFsSel+0x16>
 8018aba:	2300      	movs	r3, #0
 8018abc:	e013      	b.n	8018ae6 <_changeFsSel+0x3e>
	p_imu_sensor->_gyro_gain = 131.0 / (1 << fs_sel);
 8018abe:	78fb      	ldrb	r3, [r7, #3]
 8018ac0:	2201      	movs	r2, #1
 8018ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	f7e7 fcea 	bl	80004a0 <__aeabi_i2d>
 8018acc:	4602      	mov	r2, r0
 8018ace:	460b      	mov	r3, r1
 8018ad0:	a107      	add	r1, pc, #28	; (adr r1, 8018af0 <_changeFsSel+0x48>)
 8018ad2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018ad6:	f7e7 fe77 	bl	80007c8 <__aeabi_ddiv>
 8018ada:	4602      	mov	r2, r0
 8018adc:	460b      	mov	r3, r1
 8018ade:	6879      	ldr	r1, [r7, #4]
 8018ae0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	return TRUE;
 8018ae4:	2301      	movs	r3, #1
}
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	3708      	adds	r7, #8
 8018aea:	46bd      	mov	sp, r7
 8018aec:	bd80      	pop	{r7, pc}
 8018aee:	bf00      	nop
 8018af0:	00000000 	.word	0x00000000
 8018af4:	40606000 	.word	0x40606000

08018af8 <_changeAfsSel>:

static BOOL _changeAfsSel(PifImuSensor* p_imu_sensor, PifMpu60x0AfsSel afs_sel)
{
 8018af8:	b480      	push	{r7}
 8018afa:	b083      	sub	sp, #12
 8018afc:	af00      	add	r7, sp, #0
 8018afe:	6078      	str	r0, [r7, #4]
 8018b00:	460b      	mov	r3, r1
 8018b02:	70fb      	strb	r3, [r7, #3]
	if (!p_imu_sensor) return FALSE;
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d101      	bne.n	8018b0e <_changeAfsSel+0x16>
 8018b0a:	2300      	movs	r3, #0
 8018b0c:	e008      	b.n	8018b20 <_changeAfsSel+0x28>
	p_imu_sensor->_accel_gain = 16384 >> afs_sel;
 8018b0e:	78fb      	ldrb	r3, [r7, #3]
 8018b10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8018b14:	fa42 f303 	asr.w	r3, r2, r3
 8018b18:	b29a      	uxth	r2, r3
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	821a      	strh	r2, [r3, #16]
	return TRUE;
 8018b1e:	2301      	movs	r3, #1
}
 8018b20:	4618      	mov	r0, r3
 8018b22:	370c      	adds	r7, #12
 8018b24:	46bd      	mov	sp, r7
 8018b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b2a:	4770      	bx	lr

08018b2c <pifMpu60x0_Init>:

BOOL pifMpu60x0_Init(PifMpu60x0* p_owner, PifId id, PifI2cPort* p_i2c, uint8_t addr, PifImuSensor* p_imu_sensor)
{
 8018b2c:	b590      	push	{r4, r7, lr}
 8018b2e:	b08b      	sub	sp, #44	; 0x2c
 8018b30:	af00      	add	r7, sp, #0
 8018b32:	60f8      	str	r0, [r7, #12]
 8018b34:	607a      	str	r2, [r7, #4]
 8018b36:	461a      	mov	r2, r3
 8018b38:	460b      	mov	r3, r1
 8018b3a:	817b      	strh	r3, [r7, #10]
 8018b3c:	4613      	mov	r3, r2
 8018b3e:	727b      	strb	r3, [r7, #9]
#ifndef __PIF_NO_LOG__	
	const char ident[] = "MPU60X0 Ident: ";
 8018b40:	4b75      	ldr	r3, [pc, #468]	; (8018d18 <pifMpu60x0_Init+0x1ec>)
 8018b42:	f107 0418 	add.w	r4, r7, #24
 8018b46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018b48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif	
	uint8_t data;
	PifMpu60x0PwrMgmt1 pwr_mgmt_1;

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d005      	beq.n	8018b5e <pifMpu60x0_Init+0x32>
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d002      	beq.n	8018b5e <pifMpu60x0_Init+0x32>
 8018b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d104      	bne.n	8018b68 <pifMpu60x0_Init+0x3c>
		pif_error = E_INVALID_PARAM;
 8018b5e:	4b6f      	ldr	r3, [pc, #444]	; (8018d1c <pifMpu60x0_Init+0x1f0>)
 8018b60:	2201      	movs	r2, #1
 8018b62:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8018b64:	2300      	movs	r3, #0
 8018b66:	e0d3      	b.n	8018d10 <pifMpu60x0_Init+0x1e4>
	}

	memset(p_owner, 0, sizeof(PifMpu60x0));
 8018b68:	2210      	movs	r2, #16
 8018b6a:	2100      	movs	r1, #0
 8018b6c:	68f8      	ldr	r0, [r7, #12]
 8018b6e:	f009 f939 	bl	8021de4 <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 8018b72:	6878      	ldr	r0, [r7, #4]
 8018b74:	f7f9 fc5e 	bl	8012434 <pifI2cPort_AddDevice>
 8018b78:	4602      	mov	r2, r0
 8018b7a:	68fb      	ldr	r3, [r7, #12]
 8018b7c:	609a      	str	r2, [r3, #8]
    if (!p_owner->_p_i2c) return FALSE;
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	689b      	ldr	r3, [r3, #8]
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d101      	bne.n	8018b8a <pifMpu60x0_Init+0x5e>
 8018b86:	2300      	movs	r3, #0
 8018b88:	e0c2      	b.n	8018d10 <pifMpu60x0_Init+0x1e4>

    p_owner->_p_i2c->addr = addr;
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	689b      	ldr	r3, [r3, #8]
 8018b8e:	7a7a      	ldrb	r2, [r7, #9]
 8018b90:	701a      	strb	r2, [r3, #0]

	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, MPU60X0_REG_WHO_AM_I, &data)) goto fail;
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	689b      	ldr	r3, [r3, #8]
 8018b96:	f107 0217 	add.w	r2, r7, #23
 8018b9a:	2175      	movs	r1, #117	; 0x75
 8018b9c:	4618      	mov	r0, r3
 8018b9e:	f7f9 fd2d 	bl	80125fc <pifI2cDevice_ReadRegByte>
 8018ba2:	4603      	mov	r3, r0
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	f000 80a4 	beq.w	8018cf2 <pifMpu60x0_Init+0x1c6>
	if (data != addr) {
 8018baa:	7dfb      	ldrb	r3, [r7, #23]
 8018bac:	7a7a      	ldrb	r2, [r7, #9]
 8018bae:	429a      	cmp	r2, r3
 8018bb0:	d003      	beq.n	8018bba <pifMpu60x0_Init+0x8e>
		pif_error = E_INVALID_ID;
 8018bb2:	4b5a      	ldr	r3, [pc, #360]	; (8018d1c <pifMpu60x0_Init+0x1f0>)
 8018bb4:	2211      	movs	r2, #17
 8018bb6:	701a      	strb	r2, [r3, #0]
		goto fail;
 8018bb8:	e0a6      	b.n	8018d08 <pifMpu60x0_Init+0x1dc>
	}
#ifndef __PIF_NO_LOG__	
	if (data < 32) {
 8018bba:	7dfb      	ldrb	r3, [r7, #23]
 8018bbc:	2b1f      	cmp	r3, #31
 8018bbe:	d809      	bhi.n	8018bd4 <pifMpu60x0_Init+0xa8>
		pifLog_Printf(LT_INFO, "%s%Xh", ident, data >> 1);
 8018bc0:	7dfb      	ldrb	r3, [r7, #23]
 8018bc2:	085b      	lsrs	r3, r3, #1
 8018bc4:	b2db      	uxtb	r3, r3
 8018bc6:	f107 0218 	add.w	r2, r7, #24
 8018bca:	4955      	ldr	r1, [pc, #340]	; (8018d20 <pifMpu60x0_Init+0x1f4>)
 8018bcc:	2002      	movs	r0, #2
 8018bce:	f7fa fce1 	bl	8013594 <pifLog_Printf>
 8018bd2:	e008      	b.n	8018be6 <pifMpu60x0_Init+0xba>
	}
	else {
		pifLog_Printf(LT_INFO, "%s%c", ident, data >> 1);
 8018bd4:	7dfb      	ldrb	r3, [r7, #23]
 8018bd6:	085b      	lsrs	r3, r3, #1
 8018bd8:	b2db      	uxtb	r3, r3
 8018bda:	f107 0218 	add.w	r2, r7, #24
 8018bde:	4951      	ldr	r1, [pc, #324]	; (8018d24 <pifMpu60x0_Init+0x1f8>)
 8018be0:	2002      	movs	r0, #2
 8018be2:	f7fa fcd7 	bl	8013594 <pifLog_Printf>
	}
#endif

   	pwr_mgmt_1.byte = 0;
 8018be6:	2300      	movs	r3, #0
 8018be8:	753b      	strb	r3, [r7, #20]
	pwr_mgmt_1.bit.device_reset = TRUE;
 8018bea:	7d3b      	ldrb	r3, [r7, #20]
 8018bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018bf0:	753b      	strb	r3, [r7, #20]
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	689b      	ldr	r3, [r3, #8]
 8018bf6:	7d3a      	ldrb	r2, [r7, #20]
 8018bf8:	216b      	movs	r1, #107	; 0x6b
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	f7f9 fe2c 	bl	8012858 <pifI2cDevice_WriteRegByte>
 8018c00:	4603      	mov	r3, r0
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d077      	beq.n	8018cf6 <pifMpu60x0_Init+0x1ca>
	pifTaskManager_YieldMs(100);
 8018c06:	2064      	movs	r0, #100	; 0x64
 8018c08:	f7fb ff72 	bl	8014af0 <pifTaskManager_YieldMs>

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, MPU60X0_GYRO_CONFIG_FS_SEL, &data)) goto fail;
 8018c0c:	68fb      	ldr	r3, [r7, #12]
 8018c0e:	6898      	ldr	r0, [r3, #8]
 8018c10:	f107 0317 	add.w	r3, r7, #23
 8018c14:	f240 3202 	movw	r2, #770	; 0x302
 8018c18:	211b      	movs	r1, #27
 8018c1a:	f7f9 fd3c 	bl	8012696 <pifI2cDevice_ReadRegBit8>
 8018c1e:	4603      	mov	r3, r0
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d06a      	beq.n	8018cfa <pifMpu60x0_Init+0x1ce>
    if (!_changeFsSel(p_imu_sensor, data)) goto fail;
 8018c24:	7dfb      	ldrb	r3, [r7, #23]
 8018c26:	4619      	mov	r1, r3
 8018c28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018c2a:	f7ff ff3d 	bl	8018aa8 <_changeFsSel>
 8018c2e:	4603      	mov	r3, r0
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d064      	beq.n	8018cfe <pifMpu60x0_Init+0x1d2>

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, MPU60X0_ACCEL_CONFIG_AFS_SEL, &data)) goto fail;
 8018c34:	68fb      	ldr	r3, [r7, #12]
 8018c36:	6898      	ldr	r0, [r3, #8]
 8018c38:	f107 0317 	add.w	r3, r7, #23
 8018c3c:	f240 3202 	movw	r2, #770	; 0x302
 8018c40:	211c      	movs	r1, #28
 8018c42:	f7f9 fd28 	bl	8012696 <pifI2cDevice_ReadRegBit8>
 8018c46:	4603      	mov	r3, r0
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d05a      	beq.n	8018d02 <pifMpu60x0_Init+0x1d6>
    if (!_changeAfsSel(p_imu_sensor, data)) goto fail;
 8018c4c:	7dfb      	ldrb	r3, [r7, #23]
 8018c4e:	4619      	mov	r1, r3
 8018c50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018c52:	f7ff ff51 	bl	8018af8 <_changeAfsSel>
 8018c56:	4603      	mov	r3, r0
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d054      	beq.n	8018d06 <pifMpu60x0_Init+0x1da>

	if (id == PIF_ID_AUTO) id = pif_id++;
 8018c5c:	897b      	ldrh	r3, [r7, #10]
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d106      	bne.n	8018c70 <pifMpu60x0_Init+0x144>
 8018c62:	4b31      	ldr	r3, [pc, #196]	; (8018d28 <pifMpu60x0_Init+0x1fc>)
 8018c64:	881b      	ldrh	r3, [r3, #0]
 8018c66:	1c5a      	adds	r2, r3, #1
 8018c68:	b291      	uxth	r1, r2
 8018c6a:	4a2f      	ldr	r2, [pc, #188]	; (8018d28 <pifMpu60x0_Init+0x1fc>)
 8018c6c:	8011      	strh	r1, [r2, #0]
 8018c6e:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8018c70:	68fb      	ldr	r3, [r7, #12]
 8018c72:	897a      	ldrh	r2, [r7, #10]
 8018c74:	809a      	strh	r2, [r3, #4]
	p_owner->temp_scale = 1;
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	2201      	movs	r2, #1
 8018c7a:	709a      	strb	r2, [r3, #2]
	p_owner->__p_imu_sensor = p_imu_sensor;
 8018c7c:	68fb      	ldr	r3, [r7, #12]
 8018c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018c80:	60da      	str	r2, [r3, #12]

	p_imu_sensor->_measure |= IMU_MEASURE_GYROSCOPE | IMU_MEASURE_ACCELERO;
 8018c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c84:	781b      	ldrb	r3, [r3, #0]
 8018c86:	f043 0303 	orr.w	r3, r3, #3
 8018c8a:	b2da      	uxtb	r2, r3
 8018c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c8e:	701a      	strb	r2, [r3, #0]

	p_imu_sensor->__gyro_info.align = IMUS_ALIGN_CW0_DEG;
 8018c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c92:	2201      	movs	r2, #1
 8018c94:	751a      	strb	r2, [r3, #20]
	p_imu_sensor->__gyro_info.read = (PifImuSensorRead)pifMpu60x0_ReadGyro;
 8018c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c98:	4a24      	ldr	r2, [pc, #144]	; (8018d2c <pifMpu60x0_Init+0x200>)
 8018c9a:	619a      	str	r2, [r3, #24]
	p_imu_sensor->__gyro_info.p_issuer = p_owner;
 8018c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c9e:	68fa      	ldr	r2, [r7, #12]
 8018ca0:	61da      	str	r2, [r3, #28]

	p_imu_sensor->__accel_info.align = IMUS_ALIGN_CW0_DEG;
 8018ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ca4:	2201      	movs	r2, #1
 8018ca6:	f883 2020 	strb.w	r2, [r3, #32]
	p_imu_sensor->__accel_info.read = (PifImuSensorRead)pifMpu60x0_ReadAccel;
 8018caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cac:	4a20      	ldr	r2, [pc, #128]	; (8018d30 <pifMpu60x0_Init+0x204>)
 8018cae:	625a      	str	r2, [r3, #36]	; 0x24
	p_imu_sensor->__accel_info.p_issuer = p_owner;
 8018cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cb2:	68fa      	ldr	r2, [r7, #12]
 8018cb4:	629a      	str	r2, [r3, #40]	; 0x28

    // Reset calibrate values
    p_imu_sensor->__delta_gyro[AXIS_X] = 0;
 8018cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cb8:	2200      	movs	r2, #0
 8018cba:	871a      	strh	r2, [r3, #56]	; 0x38
    p_imu_sensor->__delta_gyro[AXIS_Y] = 0;
 8018cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cbe:	2200      	movs	r2, #0
 8018cc0:	875a      	strh	r2, [r3, #58]	; 0x3a
    p_imu_sensor->__delta_gyro[AXIS_Z] = 0;
 8018cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cc4:	2200      	movs	r2, #0
 8018cc6:	879a      	strh	r2, [r3, #60]	; 0x3c
    p_imu_sensor->__use_calibrate = FALSE;
 8018cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cca:	2200      	movs	r2, #0
 8018ccc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

    // Reset threshold values
    p_imu_sensor->__threshold_gyro[AXIS_X] = 0;
 8018cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cd2:	2200      	movs	r2, #0
 8018cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
    p_imu_sensor->__threshold_gyro[AXIS_Y] = 0;
 8018cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cd8:	2200      	movs	r2, #0
 8018cda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    p_imu_sensor->__threshold_gyro[AXIS_Z] = 0;
 8018cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ce0:	2200      	movs	r2, #0
 8018ce2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    p_imu_sensor->__actual_threshold = 0;
 8018ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ce8:	f04f 0200 	mov.w	r2, #0
 8018cec:	64da      	str	r2, [r3, #76]	; 0x4c
    return TRUE;
 8018cee:	2301      	movs	r3, #1
 8018cf0:	e00e      	b.n	8018d10 <pifMpu60x0_Init+0x1e4>
	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, MPU60X0_REG_WHO_AM_I, &data)) goto fail;
 8018cf2:	bf00      	nop
 8018cf4:	e008      	b.n	8018d08 <pifMpu60x0_Init+0x1dc>
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8018cf6:	bf00      	nop
 8018cf8:	e006      	b.n	8018d08 <pifMpu60x0_Init+0x1dc>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, MPU60X0_GYRO_CONFIG_FS_SEL, &data)) goto fail;
 8018cfa:	bf00      	nop
 8018cfc:	e004      	b.n	8018d08 <pifMpu60x0_Init+0x1dc>
    if (!_changeFsSel(p_imu_sensor, data)) goto fail;
 8018cfe:	bf00      	nop
 8018d00:	e002      	b.n	8018d08 <pifMpu60x0_Init+0x1dc>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, MPU60X0_ACCEL_CONFIG_AFS_SEL, &data)) goto fail;
 8018d02:	bf00      	nop
 8018d04:	e000      	b.n	8018d08 <pifMpu60x0_Init+0x1dc>
    if (!_changeAfsSel(p_imu_sensor, data)) goto fail;
 8018d06:	bf00      	nop

fail:
	pifMpu60x0_Clear(p_owner);
 8018d08:	68f8      	ldr	r0, [r7, #12]
 8018d0a:	f000 f813 	bl	8018d34 <pifMpu60x0_Clear>
	return FALSE;
 8018d0e:	2300      	movs	r3, #0
}
 8018d10:	4618      	mov	r0, r3
 8018d12:	372c      	adds	r7, #44	; 0x2c
 8018d14:	46bd      	mov	sp, r7
 8018d16:	bd90      	pop	{r4, r7, pc}
 8018d18:	08026a88 	.word	0x08026a88
 8018d1c:	200020d1 	.word	0x200020d1
 8018d20:	08026a78 	.word	0x08026a78
 8018d24:	08026a80 	.word	0x08026a80
 8018d28:	2000005c 	.word	0x2000005c
 8018d2c:	08018de5 	.word	0x08018de5
 8018d30:	08018eab 	.word	0x08018eab

08018d34 <pifMpu60x0_Clear>:

void pifMpu60x0_Clear(PifMpu60x0* p_owner)
{
 8018d34:	b580      	push	{r7, lr}
 8018d36:	b082      	sub	sp, #8
 8018d38:	af00      	add	r7, sp, #0
 8018d3a:	6078      	str	r0, [r7, #4]
    if (p_owner->_p_i2c) {
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	689b      	ldr	r3, [r3, #8]
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d00b      	beq.n	8018d5c <pifMpu60x0_Clear+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	689b      	ldr	r3, [r3, #8]
 8018d48:	685a      	ldr	r2, [r3, #4]
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	689b      	ldr	r3, [r3, #8]
 8018d4e:	4619      	mov	r1, r3
 8018d50:	4610      	mov	r0, r2
 8018d52:	f7f9 fb93 	bl	801247c <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	2200      	movs	r2, #0
 8018d5a:	609a      	str	r2, [r3, #8]
    }
}
 8018d5c:	bf00      	nop
 8018d5e:	3708      	adds	r7, #8
 8018d60:	46bd      	mov	sp, r7
 8018d62:	bd80      	pop	{r7, pc}

08018d64 <pifMpu60x0_SetGyroConfig>:

BOOL pifMpu60x0_SetGyroConfig(PifMpu60x0* p_owner, PifMpu60x0GyroConfig gyro_config)
{
 8018d64:	b580      	push	{r7, lr}
 8018d66:	b082      	sub	sp, #8
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	6078      	str	r0, [r7, #4]
 8018d6c:	7039      	strb	r1, [r7, #0]
    if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, gyro_config.byte)) return FALSE;
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	689b      	ldr	r3, [r3, #8]
 8018d72:	783a      	ldrb	r2, [r7, #0]
 8018d74:	211b      	movs	r1, #27
 8018d76:	4618      	mov	r0, r3
 8018d78:	f7f9 fd6e 	bl	8012858 <pifI2cDevice_WriteRegByte>
 8018d7c:	4603      	mov	r3, r0
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d101      	bne.n	8018d86 <pifMpu60x0_SetGyroConfig+0x22>
 8018d82:	2300      	movs	r3, #0
 8018d84:	e00a      	b.n	8018d9c <pifMpu60x0_SetGyroConfig+0x38>
    _changeFsSel(p_owner->__p_imu_sensor, gyro_config.bit.fs_sel);
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	68da      	ldr	r2, [r3, #12]
 8018d8a:	783b      	ldrb	r3, [r7, #0]
 8018d8c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8018d90:	b2db      	uxtb	r3, r3
 8018d92:	4619      	mov	r1, r3
 8018d94:	4610      	mov	r0, r2
 8018d96:	f7ff fe87 	bl	8018aa8 <_changeFsSel>
	return TRUE;
 8018d9a:	2301      	movs	r3, #1
}
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	3708      	adds	r7, #8
 8018da0:	46bd      	mov	sp, r7
 8018da2:	bd80      	pop	{r7, pc}

08018da4 <pifMpu60x0_SetAccelConfig>:
    _changeFsSel(p_owner->__p_imu_sensor, fs_sel);
	return TRUE;
}

BOOL pifMpu60x0_SetAccelConfig(PifMpu60x0* p_owner, PifMpu60x0AccelConfig accel_config)
{
 8018da4:	b580      	push	{r7, lr}
 8018da6:	b082      	sub	sp, #8
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	6078      	str	r0, [r7, #4]
 8018dac:	7039      	strb	r1, [r7, #0]
    if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, accel_config.byte)) return FALSE;
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	689b      	ldr	r3, [r3, #8]
 8018db2:	783a      	ldrb	r2, [r7, #0]
 8018db4:	211c      	movs	r1, #28
 8018db6:	4618      	mov	r0, r3
 8018db8:	f7f9 fd4e 	bl	8012858 <pifI2cDevice_WriteRegByte>
 8018dbc:	4603      	mov	r3, r0
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d101      	bne.n	8018dc6 <pifMpu60x0_SetAccelConfig+0x22>
 8018dc2:	2300      	movs	r3, #0
 8018dc4:	e00a      	b.n	8018ddc <pifMpu60x0_SetAccelConfig+0x38>
    _changeAfsSel(p_owner->__p_imu_sensor, accel_config.bit.afs_sel);
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	68da      	ldr	r2, [r3, #12]
 8018dca:	783b      	ldrb	r3, [r7, #0]
 8018dcc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8018dd0:	b2db      	uxtb	r3, r3
 8018dd2:	4619      	mov	r1, r3
 8018dd4:	4610      	mov	r0, r2
 8018dd6:	f7ff fe8f 	bl	8018af8 <_changeAfsSel>
	return TRUE;
 8018dda:	2301      	movs	r3, #1
}
 8018ddc:	4618      	mov	r0, r3
 8018dde:	3708      	adds	r7, #8
 8018de0:	46bd      	mov	sp, r7
 8018de2:	bd80      	pop	{r7, pc}

08018de4 <pifMpu60x0_ReadGyro>:
    _changeAfsSel(p_owner->__p_imu_sensor, afs_sel);
	return TRUE;
}

BOOL pifMpu60x0_ReadGyro(PifMpu60x0* p_owner, int16_t* p_gyro)
{
 8018de4:	b580      	push	{r7, lr}
 8018de6:	b084      	sub	sp, #16
 8018de8:	af00      	add	r7, sp, #0
 8018dea:	6078      	str	r0, [r7, #4]
 8018dec:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MPU60X0_REG_GYRO_XOUT_H, data, 6)) return FALSE;
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	6898      	ldr	r0, [r3, #8]
 8018df2:	f107 0208 	add.w	r2, r7, #8
 8018df6:	2306      	movs	r3, #6
 8018df8:	2143      	movs	r1, #67	; 0x43
 8018dfa:	f7f9 fc37 	bl	801266c <pifI2cDevice_ReadRegBytes>
 8018dfe:	4603      	mov	r3, r0
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d101      	bne.n	8018e08 <pifMpu60x0_ReadGyro+0x24>
 8018e04:	2300      	movs	r3, #0
 8018e06:	e04c      	b.n	8018ea2 <pifMpu60x0_ReadGyro+0xbe>

	p_gyro[AXIS_X] = (data[0] << 8) + data[1];
 8018e08:	7a3b      	ldrb	r3, [r7, #8]
 8018e0a:	b29b      	uxth	r3, r3
 8018e0c:	021b      	lsls	r3, r3, #8
 8018e0e:	b29a      	uxth	r2, r3
 8018e10:	7a7b      	ldrb	r3, [r7, #9]
 8018e12:	b29b      	uxth	r3, r3
 8018e14:	4413      	add	r3, r2
 8018e16:	b29b      	uxth	r3, r3
 8018e18:	b21a      	sxth	r2, r3
 8018e1a:	683b      	ldr	r3, [r7, #0]
 8018e1c:	801a      	strh	r2, [r3, #0]
	p_gyro[AXIS_Y] = (data[2] << 8) + data[3];
 8018e1e:	7abb      	ldrb	r3, [r7, #10]
 8018e20:	b29b      	uxth	r3, r3
 8018e22:	021b      	lsls	r3, r3, #8
 8018e24:	b29a      	uxth	r2, r3
 8018e26:	7afb      	ldrb	r3, [r7, #11]
 8018e28:	b29b      	uxth	r3, r3
 8018e2a:	4413      	add	r3, r2
 8018e2c:	b29a      	uxth	r2, r3
 8018e2e:	683b      	ldr	r3, [r7, #0]
 8018e30:	3302      	adds	r3, #2
 8018e32:	b212      	sxth	r2, r2
 8018e34:	801a      	strh	r2, [r3, #0]
	p_gyro[AXIS_Z] = (data[4] << 8) + data[5];
 8018e36:	7b3b      	ldrb	r3, [r7, #12]
 8018e38:	b29b      	uxth	r3, r3
 8018e3a:	021b      	lsls	r3, r3, #8
 8018e3c:	b29a      	uxth	r2, r3
 8018e3e:	7b7b      	ldrb	r3, [r7, #13]
 8018e40:	b29b      	uxth	r3, r3
 8018e42:	4413      	add	r3, r2
 8018e44:	b29a      	uxth	r2, r3
 8018e46:	683b      	ldr	r3, [r7, #0]
 8018e48:	3304      	adds	r3, #4
 8018e4a:	b212      	sxth	r2, r2
 8018e4c:	801a      	strh	r2, [r3, #0]
	if (p_owner->gyro_scale > 0) {
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	781b      	ldrb	r3, [r3, #0]
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d024      	beq.n	8018ea0 <pifMpu60x0_ReadGyro+0xbc>
		p_gyro[AXIS_X] /= p_owner->gyro_scale;
 8018e56:	683b      	ldr	r3, [r7, #0]
 8018e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018e5c:	461a      	mov	r2, r3
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	781b      	ldrb	r3, [r3, #0]
 8018e62:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e66:	b21a      	sxth	r2, r3
 8018e68:	683b      	ldr	r3, [r7, #0]
 8018e6a:	801a      	strh	r2, [r3, #0]
		p_gyro[AXIS_Y] /= p_owner->gyro_scale;
 8018e6c:	683b      	ldr	r3, [r7, #0]
 8018e6e:	3302      	adds	r3, #2
 8018e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018e74:	461a      	mov	r2, r3
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	781b      	ldrb	r3, [r3, #0]
 8018e7a:	fb92 f2f3 	sdiv	r2, r2, r3
 8018e7e:	683b      	ldr	r3, [r7, #0]
 8018e80:	3302      	adds	r3, #2
 8018e82:	b212      	sxth	r2, r2
 8018e84:	801a      	strh	r2, [r3, #0]
		p_gyro[AXIS_Z] /= p_owner->gyro_scale;
 8018e86:	683b      	ldr	r3, [r7, #0]
 8018e88:	3304      	adds	r3, #4
 8018e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018e8e:	461a      	mov	r2, r3
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	781b      	ldrb	r3, [r3, #0]
 8018e94:	fb92 f2f3 	sdiv	r2, r2, r3
 8018e98:	683b      	ldr	r3, [r7, #0]
 8018e9a:	3304      	adds	r3, #4
 8018e9c:	b212      	sxth	r2, r2
 8018e9e:	801a      	strh	r2, [r3, #0]
	}
	return TRUE;
 8018ea0:	2301      	movs	r3, #1
}
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	3710      	adds	r7, #16
 8018ea6:	46bd      	mov	sp, r7
 8018ea8:	bd80      	pop	{r7, pc}

08018eaa <pifMpu60x0_ReadAccel>:

BOOL pifMpu60x0_ReadAccel(PifMpu60x0* p_owner, int16_t* p_accel)
{
 8018eaa:	b580      	push	{r7, lr}
 8018eac:	b084      	sub	sp, #16
 8018eae:	af00      	add	r7, sp, #0
 8018eb0:	6078      	str	r0, [r7, #4]
 8018eb2:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MPU60X0_REG_ACCEL_XOUT_H, data, 6)) return FALSE;
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	6898      	ldr	r0, [r3, #8]
 8018eb8:	f107 0208 	add.w	r2, r7, #8
 8018ebc:	2306      	movs	r3, #6
 8018ebe:	213b      	movs	r1, #59	; 0x3b
 8018ec0:	f7f9 fbd4 	bl	801266c <pifI2cDevice_ReadRegBytes>
 8018ec4:	4603      	mov	r3, r0
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d101      	bne.n	8018ece <pifMpu60x0_ReadAccel+0x24>
 8018eca:	2300      	movs	r3, #0
 8018ecc:	e04c      	b.n	8018f68 <pifMpu60x0_ReadAccel+0xbe>

	p_accel[AXIS_X] = (data[0] << 8) + data[1];
 8018ece:	7a3b      	ldrb	r3, [r7, #8]
 8018ed0:	b29b      	uxth	r3, r3
 8018ed2:	021b      	lsls	r3, r3, #8
 8018ed4:	b29a      	uxth	r2, r3
 8018ed6:	7a7b      	ldrb	r3, [r7, #9]
 8018ed8:	b29b      	uxth	r3, r3
 8018eda:	4413      	add	r3, r2
 8018edc:	b29b      	uxth	r3, r3
 8018ede:	b21a      	sxth	r2, r3
 8018ee0:	683b      	ldr	r3, [r7, #0]
 8018ee2:	801a      	strh	r2, [r3, #0]
	p_accel[AXIS_Y] = (data[2] << 8) + data[3];
 8018ee4:	7abb      	ldrb	r3, [r7, #10]
 8018ee6:	b29b      	uxth	r3, r3
 8018ee8:	021b      	lsls	r3, r3, #8
 8018eea:	b29a      	uxth	r2, r3
 8018eec:	7afb      	ldrb	r3, [r7, #11]
 8018eee:	b29b      	uxth	r3, r3
 8018ef0:	4413      	add	r3, r2
 8018ef2:	b29a      	uxth	r2, r3
 8018ef4:	683b      	ldr	r3, [r7, #0]
 8018ef6:	3302      	adds	r3, #2
 8018ef8:	b212      	sxth	r2, r2
 8018efa:	801a      	strh	r2, [r3, #0]
	p_accel[AXIS_Z] = (data[4] << 8) + data[5];
 8018efc:	7b3b      	ldrb	r3, [r7, #12]
 8018efe:	b29b      	uxth	r3, r3
 8018f00:	021b      	lsls	r3, r3, #8
 8018f02:	b29a      	uxth	r2, r3
 8018f04:	7b7b      	ldrb	r3, [r7, #13]
 8018f06:	b29b      	uxth	r3, r3
 8018f08:	4413      	add	r3, r2
 8018f0a:	b29a      	uxth	r2, r3
 8018f0c:	683b      	ldr	r3, [r7, #0]
 8018f0e:	3304      	adds	r3, #4
 8018f10:	b212      	sxth	r2, r2
 8018f12:	801a      	strh	r2, [r3, #0]
	if (p_owner->accel_scale > 0) {
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	785b      	ldrb	r3, [r3, #1]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d024      	beq.n	8018f66 <pifMpu60x0_ReadAccel+0xbc>
		p_accel[AXIS_X] /= p_owner->accel_scale;
 8018f1c:	683b      	ldr	r3, [r7, #0]
 8018f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f22:	461a      	mov	r2, r3
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	785b      	ldrb	r3, [r3, #1]
 8018f28:	fb92 f3f3 	sdiv	r3, r2, r3
 8018f2c:	b21a      	sxth	r2, r3
 8018f2e:	683b      	ldr	r3, [r7, #0]
 8018f30:	801a      	strh	r2, [r3, #0]
		p_accel[AXIS_Y] /= p_owner->accel_scale;
 8018f32:	683b      	ldr	r3, [r7, #0]
 8018f34:	3302      	adds	r3, #2
 8018f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f3a:	461a      	mov	r2, r3
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	785b      	ldrb	r3, [r3, #1]
 8018f40:	fb92 f2f3 	sdiv	r2, r2, r3
 8018f44:	683b      	ldr	r3, [r7, #0]
 8018f46:	3302      	adds	r3, #2
 8018f48:	b212      	sxth	r2, r2
 8018f4a:	801a      	strh	r2, [r3, #0]
		p_accel[AXIS_Z] /= p_owner->accel_scale;
 8018f4c:	683b      	ldr	r3, [r7, #0]
 8018f4e:	3304      	adds	r3, #4
 8018f50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f54:	461a      	mov	r2, r3
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	785b      	ldrb	r3, [r3, #1]
 8018f5a:	fb92 f2f3 	sdiv	r2, r2, r3
 8018f5e:	683b      	ldr	r3, [r7, #0]
 8018f60:	3304      	adds	r3, #4
 8018f62:	b212      	sxth	r2, r2
 8018f64:	801a      	strh	r2, [r3, #0]
	}
	return TRUE;
 8018f66:	2301      	movs	r3, #1
}
 8018f68:	4618      	mov	r0, r3
 8018f6a:	3710      	adds	r7, #16
 8018f6c:	46bd      	mov	sp, r7
 8018f6e:	bd80      	pop	{r7, pc}

08018f70 <_checkPromCrc>:

#include <math.h>


static BOOL _checkPromCrc(PifMs5611* p_owner)
{
 8018f70:	b480      	push	{r7}
 8018f72:	b087      	sub	sp, #28
 8018f74:	af00      	add	r7, sp, #0
 8018f76:	6078      	str	r0, [r7, #4]
    int32_t i, j;
    uint32_t res = 0;
 8018f78:	2300      	movs	r3, #0
 8018f7a:	60fb      	str	r3, [r7, #12]
    uint8_t zero = 1;
 8018f7c:	2301      	movs	r3, #1
 8018f7e:	72fb      	strb	r3, [r7, #11]
    uint8_t crc = p_owner->_prom[7] & 0xF;
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	8adb      	ldrh	r3, [r3, #22]
 8018f84:	b2db      	uxtb	r3, r3
 8018f86:	f003 030f 	and.w	r3, r3, #15
 8018f8a:	72bb      	strb	r3, [r7, #10]
    p_owner->_prom[7] &= 0xFF00;
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	8adb      	ldrh	r3, [r3, #22]
 8018f90:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8018f94:	b29a      	uxth	r2, r3
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	82da      	strh	r2, [r3, #22]

    for (i = 0; i < 8; i++) {
 8018f9a:	2300      	movs	r3, #0
 8018f9c:	617b      	str	r3, [r7, #20]
 8018f9e:	e00b      	b.n	8018fb8 <_checkPromCrc+0x48>
        if (p_owner->_prom[i] != 0)
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	697a      	ldr	r2, [r7, #20]
 8018fa4:	3204      	adds	r2, #4
 8018fa6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d001      	beq.n	8018fb2 <_checkPromCrc+0x42>
            zero = 0;
 8018fae:	2300      	movs	r3, #0
 8018fb0:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < 8; i++) {
 8018fb2:	697b      	ldr	r3, [r7, #20]
 8018fb4:	3301      	adds	r3, #1
 8018fb6:	617b      	str	r3, [r7, #20]
 8018fb8:	697b      	ldr	r3, [r7, #20]
 8018fba:	2b07      	cmp	r3, #7
 8018fbc:	ddf0      	ble.n	8018fa0 <_checkPromCrc+0x30>
    }
    if (zero)
 8018fbe:	7afb      	ldrb	r3, [r7, #11]
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d001      	beq.n	8018fc8 <_checkPromCrc+0x58>
        return FALSE;
 8018fc4:	2300      	movs	r3, #0
 8018fc6:	e04b      	b.n	8019060 <_checkPromCrc+0xf0>

    for (i = 0; i < 16; i++) {
 8018fc8:	2300      	movs	r3, #0
 8018fca:	617b      	str	r3, [r7, #20]
 8018fcc:	e033      	b.n	8019036 <_checkPromCrc+0xc6>
        if (i & 1)
 8018fce:	697b      	ldr	r3, [r7, #20]
 8018fd0:	f003 0301 	and.w	r3, r3, #1
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d00a      	beq.n	8018fee <_checkPromCrc+0x7e>
            res ^= ((p_owner->_prom[i >> 1]) & 0x00FF);
 8018fd8:	697b      	ldr	r3, [r7, #20]
 8018fda:	105a      	asrs	r2, r3, #1
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	3204      	adds	r2, #4
 8018fe0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8018fe4:	b2db      	uxtb	r3, r3
 8018fe6:	68fa      	ldr	r2, [r7, #12]
 8018fe8:	4053      	eors	r3, r2
 8018fea:	60fb      	str	r3, [r7, #12]
 8018fec:	e00b      	b.n	8019006 <_checkPromCrc+0x96>
        else
            res ^= (p_owner->_prom[i >> 1] >> 8);
 8018fee:	697b      	ldr	r3, [r7, #20]
 8018ff0:	105a      	asrs	r2, r3, #1
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	3204      	adds	r2, #4
 8018ff6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8018ffa:	0a1b      	lsrs	r3, r3, #8
 8018ffc:	b29b      	uxth	r3, r3
 8018ffe:	461a      	mov	r2, r3
 8019000:	68fb      	ldr	r3, [r7, #12]
 8019002:	4053      	eors	r3, r2
 8019004:	60fb      	str	r3, [r7, #12]
        for (j = 8; j > 0; j--) {
 8019006:	2308      	movs	r3, #8
 8019008:	613b      	str	r3, [r7, #16]
 801900a:	e00e      	b.n	801902a <_checkPromCrc+0xba>
            if (res & 0x8000)
 801900c:	68fb      	ldr	r3, [r7, #12]
 801900e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019012:	2b00      	cmp	r3, #0
 8019014:	d003      	beq.n	801901e <_checkPromCrc+0xae>
                res ^= 0x1800;
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	f483 53c0 	eor.w	r3, r3, #6144	; 0x1800
 801901c:	60fb      	str	r3, [r7, #12]
            res <<= 1;
 801901e:	68fb      	ldr	r3, [r7, #12]
 8019020:	005b      	lsls	r3, r3, #1
 8019022:	60fb      	str	r3, [r7, #12]
        for (j = 8; j > 0; j--) {
 8019024:	693b      	ldr	r3, [r7, #16]
 8019026:	3b01      	subs	r3, #1
 8019028:	613b      	str	r3, [r7, #16]
 801902a:	693b      	ldr	r3, [r7, #16]
 801902c:	2b00      	cmp	r3, #0
 801902e:	dced      	bgt.n	801900c <_checkPromCrc+0x9c>
    for (i = 0; i < 16; i++) {
 8019030:	697b      	ldr	r3, [r7, #20]
 8019032:	3301      	adds	r3, #1
 8019034:	617b      	str	r3, [r7, #20]
 8019036:	697b      	ldr	r3, [r7, #20]
 8019038:	2b0f      	cmp	r3, #15
 801903a:	ddc8      	ble.n	8018fce <_checkPromCrc+0x5e>
        }
    }
    p_owner->_prom[7] |= crc;
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	8ada      	ldrh	r2, [r3, #22]
 8019040:	7abb      	ldrb	r3, [r7, #10]
 8019042:	b29b      	uxth	r3, r3
 8019044:	4313      	orrs	r3, r2
 8019046:	b29a      	uxth	r2, r3
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	82da      	strh	r2, [r3, #22]
    if (crc == ((res >> 12) & 0xF))
 801904c:	7aba      	ldrb	r2, [r7, #10]
 801904e:	68fb      	ldr	r3, [r7, #12]
 8019050:	0b1b      	lsrs	r3, r3, #12
 8019052:	f003 030f 	and.w	r3, r3, #15
 8019056:	429a      	cmp	r2, r3
 8019058:	d101      	bne.n	801905e <_checkPromCrc+0xee>
        return TRUE;
 801905a:	2301      	movs	r3, #1
 801905c:	e000      	b.n	8019060 <_checkPromCrc+0xf0>

    return FALSE;
 801905e:	2300      	movs	r3, #0
}
 8019060:	4618      	mov	r0, r3
 8019062:	371c      	adds	r7, #28
 8019064:	46bd      	mov	sp, r7
 8019066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801906a:	4770      	bx	lr

0801906c <_calcurateBarometric>:

static void _calcurateBarometric(PifMs5611* p_owner, int32_t* p_pressure, float* p_temperature)
{
 801906c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019070:	b0d2      	sub	sp, #328	; 0x148
 8019072:	af00      	add	r7, sp, #0
 8019074:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 8019078:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 801907c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
	int32_t dT;
	int64_t temp;
	int64_t off, sens;
	int64_t delt;

	dT = (int64_t)p_owner->__D2 - ((int64_t)p_owner->_prom[5] * 256);
 8019080:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019086:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801908a:	8a5b      	ldrh	r3, [r3, #18]
 801908c:	021b      	lsls	r3, r3, #8
 801908e:	1ad3      	subs	r3, r2, r3
 8019090:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	temp = 2000 + ((dT * (int64_t)p_owner->_prom[6]) >> 23);
 8019094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019098:	17da      	asrs	r2, r3, #31
 801909a:	469a      	mov	sl, r3
 801909c:	4693      	mov	fp, r2
 801909e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80190a2:	8a9b      	ldrh	r3, [r3, #20]
 80190a4:	b29b      	uxth	r3, r3
 80190a6:	2200      	movs	r2, #0
 80190a8:	4698      	mov	r8, r3
 80190aa:	4691      	mov	r9, r2
 80190ac:	fb08 f20b 	mul.w	r2, r8, fp
 80190b0:	fb0a f309 	mul.w	r3, sl, r9
 80190b4:	4413      	add	r3, r2
 80190b6:	fbaa 4508 	umull	r4, r5, sl, r8
 80190ba:	442b      	add	r3, r5
 80190bc:	461d      	mov	r5, r3
 80190be:	f04f 0200 	mov.w	r2, #0
 80190c2:	f04f 0300 	mov.w	r3, #0
 80190c6:	0de2      	lsrs	r2, r4, #23
 80190c8:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 80190cc:	15eb      	asrs	r3, r5, #23
 80190ce:	f512 61fa 	adds.w	r1, r2, #2000	; 0x7d0
 80190d2:	6739      	str	r1, [r7, #112]	; 0x70
 80190d4:	f143 0300 	adc.w	r3, r3, #0
 80190d8:	677b      	str	r3, [r7, #116]	; 0x74
 80190da:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80190de:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140

	off = ((int64_t)p_owner->_prom[2] << 16) + (((int64_t)p_owner->_prom[4] * dT) >> 7);
 80190e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80190e6:	899b      	ldrh	r3, [r3, #12]
 80190e8:	b29b      	uxth	r3, r3
 80190ea:	2200      	movs	r2, #0
 80190ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80190f0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80190f4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80190f8:	460b      	mov	r3, r1
 80190fa:	0c1b      	lsrs	r3, r3, #16
 80190fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8019100:	460b      	mov	r3, r1
 8019102:	041b      	lsls	r3, r3, #16
 8019104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8019108:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801910c:	8a1b      	ldrh	r3, [r3, #16]
 801910e:	b29b      	uxth	r3, r3
 8019110:	2200      	movs	r2, #0
 8019112:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8019116:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 801911a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801911e:	17da      	asrs	r2, r3, #31
 8019120:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8019124:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8019128:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 801912c:	462b      	mov	r3, r5
 801912e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8019132:	4642      	mov	r2, r8
 8019134:	fb02 f203 	mul.w	r2, r2, r3
 8019138:	464b      	mov	r3, r9
 801913a:	4621      	mov	r1, r4
 801913c:	fb01 f303 	mul.w	r3, r1, r3
 8019140:	4413      	add	r3, r2
 8019142:	4622      	mov	r2, r4
 8019144:	4641      	mov	r1, r8
 8019146:	fba2 1201 	umull	r1, r2, r2, r1
 801914a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 801914e:	460a      	mov	r2, r1
 8019150:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8019154:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8019158:	4413      	add	r3, r2
 801915a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801915e:	f04f 0200 	mov.w	r2, #0
 8019162:	f04f 0300 	mov.w	r3, #0
 8019166:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 801916a:	4621      	mov	r1, r4
 801916c:	09ca      	lsrs	r2, r1, #7
 801916e:	4629      	mov	r1, r5
 8019170:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8019174:	4629      	mov	r1, r5
 8019176:	11cb      	asrs	r3, r1, #7
 8019178:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 801917c:	4621      	mov	r1, r4
 801917e:	1889      	adds	r1, r1, r2
 8019180:	66b9      	str	r1, [r7, #104]	; 0x68
 8019182:	4629      	mov	r1, r5
 8019184:	eb43 0101 	adc.w	r1, r3, r1
 8019188:	66f9      	str	r1, [r7, #108]	; 0x6c
 801918a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 801918e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
	sens = ((int64_t)p_owner->_prom[1] << 15) + (((int64_t)p_owner->_prom[3] * dT) >> 8);
 8019192:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019196:	895b      	ldrh	r3, [r3, #10]
 8019198:	b29b      	uxth	r3, r3
 801919a:	2200      	movs	r2, #0
 801919c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80191a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80191a4:	f04f 0000 	mov.w	r0, #0
 80191a8:	f04f 0100 	mov.w	r1, #0
 80191ac:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80191b0:	462b      	mov	r3, r5
 80191b2:	03d9      	lsls	r1, r3, #15
 80191b4:	4623      	mov	r3, r4
 80191b6:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
 80191ba:	4623      	mov	r3, r4
 80191bc:	03d8      	lsls	r0, r3, #15
 80191be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80191c2:	89db      	ldrh	r3, [r3, #14]
 80191c4:	b29b      	uxth	r3, r3
 80191c6:	2200      	movs	r2, #0
 80191c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80191cc:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80191d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80191d4:	17da      	asrs	r2, r3, #31
 80191d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80191da:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80191de:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 80191e2:	464b      	mov	r3, r9
 80191e4:	e9d7 ab2a 	ldrd	sl, fp, [r7, #168]	; 0xa8
 80191e8:	4652      	mov	r2, sl
 80191ea:	fb02 f203 	mul.w	r2, r2, r3
 80191ee:	465b      	mov	r3, fp
 80191f0:	4644      	mov	r4, r8
 80191f2:	fb04 f303 	mul.w	r3, r4, r3
 80191f6:	4413      	add	r3, r2
 80191f8:	4642      	mov	r2, r8
 80191fa:	4654      	mov	r4, sl
 80191fc:	fba2 4204 	umull	r4, r2, r2, r4
 8019200:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8019204:	4622      	mov	r2, r4
 8019206:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 801920a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801920e:	4413      	add	r3, r2
 8019210:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8019214:	f04f 0200 	mov.w	r2, #0
 8019218:	f04f 0300 	mov.w	r3, #0
 801921c:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8019220:	4644      	mov	r4, r8
 8019222:	0a22      	lsrs	r2, r4, #8
 8019224:	464c      	mov	r4, r9
 8019226:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 801922a:	464c      	mov	r4, r9
 801922c:	1223      	asrs	r3, r4, #8
 801922e:	1884      	adds	r4, r0, r2
 8019230:	663c      	str	r4, [r7, #96]	; 0x60
 8019232:	eb41 0303 	adc.w	r3, r1, r3
 8019236:	667b      	str	r3, [r7, #100]	; 0x64
 8019238:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 801923c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130

	if (temp < 2000) {
 8019240:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8019244:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8019248:	f173 0300 	sbcs.w	r3, r3, #0
 801924c:	f280 8150 	bge.w	80194f0 <_calcurateBarometric+0x484>
		temp -= ((int64_t)dT * dT) / 2147483648L;
 8019250:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019254:	17da      	asrs	r2, r3, #31
 8019256:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801925a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801925e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019262:	17da      	asrs	r2, r3, #31
 8019264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8019268:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 801926c:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8019270:	462b      	mov	r3, r5
 8019272:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8019276:	4642      	mov	r2, r8
 8019278:	fb02 f203 	mul.w	r2, r2, r3
 801927c:	464b      	mov	r3, r9
 801927e:	4621      	mov	r1, r4
 8019280:	fb01 f303 	mul.w	r3, r1, r3
 8019284:	4413      	add	r3, r2
 8019286:	4622      	mov	r2, r4
 8019288:	4641      	mov	r1, r8
 801928a:	fba2 1201 	umull	r1, r2, r2, r1
 801928e:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8019292:	460a      	mov	r2, r1
 8019294:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8019298:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801929c:	4413      	add	r3, r2
 801929e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80192a2:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	da08      	bge.n	80192bc <_calcurateBarometric+0x250>
 80192aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80192ae:	1851      	adds	r1, r2, r1
 80192b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80192b2:	f143 0300 	adc.w	r3, r3, #0
 80192b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80192b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80192bc:	f04f 0000 	mov.w	r0, #0
 80192c0:	f04f 0100 	mov.w	r1, #0
 80192c4:	0fd0      	lsrs	r0, r2, #31
 80192c6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80192ca:	17d9      	asrs	r1, r3, #31
 80192cc:	2300      	movs	r3, #0
 80192ce:	4242      	negs	r2, r0
 80192d0:	653a      	str	r2, [r7, #80]	; 0x50
 80192d2:	eb63 0301 	sbc.w	r3, r3, r1
 80192d6:	657b      	str	r3, [r7, #84]	; 0x54
 80192d8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80192dc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80192e0:	1814      	adds	r4, r2, r0
 80192e2:	64bc      	str	r4, [r7, #72]	; 0x48
 80192e4:	414b      	adcs	r3, r1
 80192e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80192e8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80192ec:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140

		delt = temp - 2000;
 80192f0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80192f4:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 80192f8:	6439      	str	r1, [r7, #64]	; 0x40
 80192fa:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 80192fe:	647b      	str	r3, [r7, #68]	; 0x44
 8019300:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8019304:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		delt = 5 * delt * delt;
 8019308:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801930c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8019310:	fb03 f102 	mul.w	r1, r3, r2
 8019314:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8019318:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801931c:	fb02 f303 	mul.w	r3, r2, r3
 8019320:	18ca      	adds	r2, r1, r3
 8019322:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8019326:	fba3 1303 	umull	r1, r3, r3, r3
 801932a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801932e:	460b      	mov	r3, r1
 8019330:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8019334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8019338:	18d3      	adds	r3, r2, r3
 801933a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801933e:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8019342:	4622      	mov	r2, r4
 8019344:	462b      	mov	r3, r5
 8019346:	f04f 0000 	mov.w	r0, #0
 801934a:	f04f 0100 	mov.w	r1, #0
 801934e:	0099      	lsls	r1, r3, #2
 8019350:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8019354:	0090      	lsls	r0, r2, #2
 8019356:	4602      	mov	r2, r0
 8019358:	460b      	mov	r3, r1
 801935a:	4621      	mov	r1, r4
 801935c:	1851      	adds	r1, r2, r1
 801935e:	63b9      	str	r1, [r7, #56]	; 0x38
 8019360:	4629      	mov	r1, r5
 8019362:	eb43 0101 	adc.w	r1, r3, r1
 8019366:	63f9      	str	r1, [r7, #60]	; 0x3c
 8019368:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 801936c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		off -= delt >> 1;
 8019370:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8019374:	f04f 0000 	mov.w	r0, #0
 8019378:	f04f 0100 	mov.w	r1, #0
 801937c:	0850      	lsrs	r0, r2, #1
 801937e:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8019382:	1059      	asrs	r1, r3, #1
 8019384:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8019388:	1a14      	subs	r4, r2, r0
 801938a:	633c      	str	r4, [r7, #48]	; 0x30
 801938c:	eb63 0301 	sbc.w	r3, r3, r1
 8019390:	637b      	str	r3, [r7, #52]	; 0x34
 8019392:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8019396:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		sens -= delt >> 2;
 801939a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801939e:	f04f 0000 	mov.w	r0, #0
 80193a2:	f04f 0100 	mov.w	r1, #0
 80193a6:	0890      	lsrs	r0, r2, #2
 80193a8:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80193ac:	1099      	asrs	r1, r3, #2
 80193ae:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80193b2:	1a14      	subs	r4, r2, r0
 80193b4:	62bc      	str	r4, [r7, #40]	; 0x28
 80193b6:	eb63 0301 	sbc.w	r3, r3, r1
 80193ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80193bc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80193c0:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130

		if (temp < -1500) {
 80193c4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80193c8:	4979      	ldr	r1, [pc, #484]	; (80195b0 <_calcurateBarometric+0x544>)
 80193ca:	428a      	cmp	r2, r1
 80193cc:	f173 33ff 	sbcs.w	r3, r3, #4294967295	; 0xffffffff
 80193d0:	f280 808e 	bge.w	80194f0 <_calcurateBarometric+0x484>
			delt = temp + 1500;
 80193d4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80193d8:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80193dc:	1851      	adds	r1, r2, r1
 80193de:	6239      	str	r1, [r7, #32]
 80193e0:	f143 0300 	adc.w	r3, r3, #0
 80193e4:	627b      	str	r3, [r7, #36]	; 0x24
 80193e6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80193ea:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			delt = delt * delt;
 80193ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80193f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80193f6:	fb03 f102 	mul.w	r1, r3, r2
 80193fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80193fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8019402:	fb02 f303 	mul.w	r3, r2, r3
 8019406:	18ca      	adds	r2, r1, r3
 8019408:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801940c:	fba3 1303 	umull	r1, r3, r3, r3
 8019410:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8019414:	460b      	mov	r3, r1
 8019416:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801941a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801941e:	18d3      	adds	r3, r2, r3
 8019420:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8019424:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8019428:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 801942c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			off -= 7 * delt;
 8019430:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8019434:	4614      	mov	r4, r2
 8019436:	461d      	mov	r5, r3
 8019438:	f04f 0000 	mov.w	r0, #0
 801943c:	f04f 0100 	mov.w	r1, #0
 8019440:	00d9      	lsls	r1, r3, #3
 8019442:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8019446:	00d0      	lsls	r0, r2, #3
 8019448:	1a23      	subs	r3, r4, r0
 801944a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801944e:	eb65 0301 	sbc.w	r3, r5, r1
 8019452:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8019456:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801945a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801945e:	4621      	mov	r1, r4
 8019460:	1851      	adds	r1, r2, r1
 8019462:	61b9      	str	r1, [r7, #24]
 8019464:	4629      	mov	r1, r5
 8019466:	eb43 0101 	adc.w	r1, r3, r1
 801946a:	61f9      	str	r1, [r7, #28]
 801946c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8019470:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			sens -= (11 * delt) >> 1;
 8019474:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8019478:	4602      	mov	r2, r0
 801947a:	460b      	mov	r3, r1
 801947c:	1894      	adds	r4, r2, r2
 801947e:	613c      	str	r4, [r7, #16]
 8019480:	415b      	adcs	r3, r3
 8019482:	617b      	str	r3, [r7, #20]
 8019484:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8019488:	1814      	adds	r4, r2, r0
 801948a:	60bc      	str	r4, [r7, #8]
 801948c:	414b      	adcs	r3, r1
 801948e:	60fb      	str	r3, [r7, #12]
 8019490:	f04f 0200 	mov.w	r2, #0
 8019494:	f04f 0300 	mov.w	r3, #0
 8019498:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 801949c:	464c      	mov	r4, r9
 801949e:	00a3      	lsls	r3, r4, #2
 80194a0:	4644      	mov	r4, r8
 80194a2:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80194a6:	4644      	mov	r4, r8
 80194a8:	00a2      	lsls	r2, r4, #2
 80194aa:	4614      	mov	r4, r2
 80194ac:	461d      	mov	r5, r3
 80194ae:	4623      	mov	r3, r4
 80194b0:	1a1b      	subs	r3, r3, r0
 80194b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80194b6:	462b      	mov	r3, r5
 80194b8:	eb63 0301 	sbc.w	r3, r3, r1
 80194bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80194c0:	f04f 0200 	mov.w	r2, #0
 80194c4:	f04f 0300 	mov.w	r3, #0
 80194c8:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80194cc:	4621      	mov	r1, r4
 80194ce:	084a      	lsrs	r2, r1, #1
 80194d0:	4629      	mov	r1, r5
 80194d2:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80194d6:	4629      	mov	r1, r5
 80194d8:	104b      	asrs	r3, r1, #1
 80194da:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80194de:	1a84      	subs	r4, r0, r2
 80194e0:	603c      	str	r4, [r7, #0]
 80194e2:	eb61 0303 	sbc.w	r3, r1, r3
 80194e6:	607b      	str	r3, [r7, #4]
 80194e8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80194ec:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
		}
	}

    *p_temperature = temp / 100;
 80194f0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80194f4:	f04f 0264 	mov.w	r2, #100	; 0x64
 80194f8:	f04f 0300 	mov.w	r3, #0
 80194fc:	f7e7 fc7a 	bl	8000df4 <__aeabi_ldivmod>
 8019500:	4602      	mov	r2, r0
 8019502:	460b      	mov	r3, r1
 8019504:	4610      	mov	r0, r2
 8019506:	4619      	mov	r1, r3
 8019508:	f7e7 fc36 	bl	8000d78 <__aeabi_l2f>
 801950c:	4602      	mov	r2, r0
 801950e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8019512:	601a      	str	r2, [r3, #0]
	*p_pressure = ((((int64_t)p_owner->__D1 * sens) >> 21) - off) >> 15;
 8019514:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801951a:	2200      	movs	r2, #0
 801951c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8019520:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8019524:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8019528:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 801952c:	462a      	mov	r2, r5
 801952e:	fb02 f203 	mul.w	r2, r2, r3
 8019532:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8019536:	4621      	mov	r1, r4
 8019538:	fb01 f303 	mul.w	r3, r1, r3
 801953c:	4413      	add	r3, r2
 801953e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8019542:	4621      	mov	r1, r4
 8019544:	fba2 1201 	umull	r1, r2, r2, r1
 8019548:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801954c:	460a      	mov	r2, r1
 801954e:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8019552:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8019556:	4413      	add	r3, r2
 8019558:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801955c:	f04f 0200 	mov.w	r2, #0
 8019560:	f04f 0300 	mov.w	r3, #0
 8019564:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8019568:	4621      	mov	r1, r4
 801956a:	0d4a      	lsrs	r2, r1, #21
 801956c:	4629      	mov	r1, r5
 801956e:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8019572:	4629      	mov	r1, r5
 8019574:	154b      	asrs	r3, r1, #21
 8019576:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 801957a:	1a14      	subs	r4, r2, r0
 801957c:	67bc      	str	r4, [r7, #120]	; 0x78
 801957e:	eb63 0301 	sbc.w	r3, r3, r1
 8019582:	67fb      	str	r3, [r7, #124]	; 0x7c
 8019584:	f04f 0200 	mov.w	r2, #0
 8019588:	f04f 0300 	mov.w	r3, #0
 801958c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8019590:	4621      	mov	r1, r4
 8019592:	0bca      	lsrs	r2, r1, #15
 8019594:	4629      	mov	r1, r5
 8019596:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 801959a:	4629      	mov	r1, r5
 801959c:	13cb      	asrs	r3, r1, #15
 801959e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80195a2:	601a      	str	r2, [r3, #0]
}
 80195a4:	bf00      	nop
 80195a6:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80195aa:	46bd      	mov	sp, r7
 80195ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80195b0:	fffffa24 	.word	0xfffffa24

080195b4 <_doTask>:

static uint16_t _doTask(PifTask* p_task)
{
 80195b4:	b580      	push	{r7, lr}
 80195b6:	b08a      	sub	sp, #40	; 0x28
 80195b8:	af02      	add	r7, sp, #8
 80195ba:	6078      	str	r0, [r7, #4]
	PifMs5611* p_owner = p_task->_p_client;
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	68db      	ldr	r3, [r3, #12]
 80195c0:	61bb      	str	r3, [r7, #24]
	uint8_t value[3];
	uint16_t delay = 1;
 80195c2:	2301      	movs	r3, #1
 80195c4:	83fb      	strh	r3, [r7, #30]
	static uint32_t start_time;
	int32_t pressure;
	float temperature;

	switch (p_owner->__state) {
 80195c6:	69bb      	ldr	r3, [r7, #24]
 80195c8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80195cc:	3b01      	subs	r3, #1
 80195ce:	2b04      	cmp	r3, #4
 80195d0:	f200 80b1 	bhi.w	8019736 <_doTask+0x182>
 80195d4:	a201      	add	r2, pc, #4	; (adr r2, 80195dc <_doTask+0x28>)
 80195d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80195da:	bf00      	nop
 80195dc:	080195f1 	.word	0x080195f1
 80195e0:	08019633 	.word	0x08019633
 80195e4:	08019669 	.word	0x08019669
 80195e8:	080196a3 	.word	0x080196a3
 80195ec:	080196d9 	.word	0x080196d9
	case MS5611_STATE_TEMPERATURE_START:
		start_time = pif_cumulative_timer1ms;
 80195f0:	4b54      	ldr	r3, [pc, #336]	; (8019744 <_doTask+0x190>)
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	4a54      	ldr	r2, [pc, #336]	; (8019748 <_doTask+0x194>)
 80195f6:	6013      	str	r3, [r2, #0]
		value[0] = MS5611_REG_CONV_D2 + p_owner->_over_sampling_rate;
 80195f8:	69bb      	ldr	r3, [r7, #24]
 80195fa:	8b1b      	ldrh	r3, [r3, #24]
 80195fc:	b2db      	uxtb	r3, r3
 80195fe:	3350      	adds	r3, #80	; 0x50
 8019600:	b2db      	uxtb	r3, r3
 8019602:	753b      	strb	r3, [r7, #20]
		if (!pifI2cDevice_Write(p_owner->_p_i2c, 0, 0, value, 1)) return 1;
 8019604:	69bb      	ldr	r3, [r7, #24]
 8019606:	6858      	ldr	r0, [r3, #4]
 8019608:	f107 0314 	add.w	r3, r7, #20
 801960c:	2201      	movs	r2, #1
 801960e:	9200      	str	r2, [sp, #0]
 8019610:	2200      	movs	r2, #0
 8019612:	2100      	movs	r1, #0
 8019614:	f7f9 f874 	bl	8012700 <pifI2cDevice_Write>
 8019618:	4603      	mov	r3, r0
 801961a:	2b00      	cmp	r3, #0
 801961c:	d101      	bne.n	8019622 <_doTask+0x6e>
 801961e:	2301      	movs	r3, #1
 8019620:	e08b      	b.n	801973a <_doTask+0x186>
		p_owner->__state = MS5611_STATE_TEMPERATURE_WAIT;
 8019622:	69bb      	ldr	r3, [r7, #24]
 8019624:	2202      	movs	r2, #2
 8019626:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		delay = p_owner->_conversion_time;
 801962a:	69bb      	ldr	r3, [r7, #24]
 801962c:	7e9b      	ldrb	r3, [r3, #26]
 801962e:	83fb      	strh	r3, [r7, #30]
		break;
 8019630:	e082      	b.n	8019738 <_doTask+0x184>

	case MS5611_STATE_TEMPERATURE_WAIT:
		if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MS5611_REG_ADC_READ, value, 3)) return 1;
 8019632:	69bb      	ldr	r3, [r7, #24]
 8019634:	6858      	ldr	r0, [r3, #4]
 8019636:	f107 0214 	add.w	r2, r7, #20
 801963a:	2303      	movs	r3, #3
 801963c:	2100      	movs	r1, #0
 801963e:	f7f9 f815 	bl	801266c <pifI2cDevice_ReadRegBytes>
 8019642:	4603      	mov	r3, r0
 8019644:	2b00      	cmp	r3, #0
 8019646:	d101      	bne.n	801964c <_doTask+0x98>
 8019648:	2301      	movs	r3, #1
 801964a:	e076      	b.n	801973a <_doTask+0x186>
		p_owner->__D2 = ((uint32_t)value[0] << 16) + (value[1] << 8) + value[2];
 801964c:	7d3b      	ldrb	r3, [r7, #20]
 801964e:	041b      	lsls	r3, r3, #16
 8019650:	7d7a      	ldrb	r2, [r7, #21]
 8019652:	0212      	lsls	r2, r2, #8
 8019654:	4413      	add	r3, r2
 8019656:	7dba      	ldrb	r2, [r7, #22]
 8019658:	441a      	add	r2, r3
 801965a:	69bb      	ldr	r3, [r7, #24]
 801965c:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__state = MS5611_STATE_PRESSURE_START;
 801965e:	69bb      	ldr	r3, [r7, #24]
 8019660:	2203      	movs	r2, #3
 8019662:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 8019666:	e067      	b.n	8019738 <_doTask+0x184>

	case MS5611_STATE_PRESSURE_START:
		value[0] = MS5611_REG_CONV_D1 + p_owner->_over_sampling_rate;
 8019668:	69bb      	ldr	r3, [r7, #24]
 801966a:	8b1b      	ldrh	r3, [r3, #24]
 801966c:	b2db      	uxtb	r3, r3
 801966e:	3340      	adds	r3, #64	; 0x40
 8019670:	b2db      	uxtb	r3, r3
 8019672:	753b      	strb	r3, [r7, #20]
		if (!pifI2cDevice_Write(p_owner->_p_i2c, 0, 0, value, 1)) return 1;
 8019674:	69bb      	ldr	r3, [r7, #24]
 8019676:	6858      	ldr	r0, [r3, #4]
 8019678:	f107 0314 	add.w	r3, r7, #20
 801967c:	2201      	movs	r2, #1
 801967e:	9200      	str	r2, [sp, #0]
 8019680:	2200      	movs	r2, #0
 8019682:	2100      	movs	r1, #0
 8019684:	f7f9 f83c 	bl	8012700 <pifI2cDevice_Write>
 8019688:	4603      	mov	r3, r0
 801968a:	2b00      	cmp	r3, #0
 801968c:	d101      	bne.n	8019692 <_doTask+0xde>
 801968e:	2301      	movs	r3, #1
 8019690:	e053      	b.n	801973a <_doTask+0x186>
		p_owner->__state = MS5611_STATE_PRESSURE_WAIT;
 8019692:	69bb      	ldr	r3, [r7, #24]
 8019694:	2204      	movs	r2, #4
 8019696:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		delay = p_owner->_conversion_time;
 801969a:	69bb      	ldr	r3, [r7, #24]
 801969c:	7e9b      	ldrb	r3, [r3, #26]
 801969e:	83fb      	strh	r3, [r7, #30]
		break;
 80196a0:	e04a      	b.n	8019738 <_doTask+0x184>

	case MS5611_STATE_PRESSURE_WAIT:
		if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MS5611_REG_ADC_READ, value, 3)) return 1;
 80196a2:	69bb      	ldr	r3, [r7, #24]
 80196a4:	6858      	ldr	r0, [r3, #4]
 80196a6:	f107 0214 	add.w	r2, r7, #20
 80196aa:	2303      	movs	r3, #3
 80196ac:	2100      	movs	r1, #0
 80196ae:	f7f8 ffdd 	bl	801266c <pifI2cDevice_ReadRegBytes>
 80196b2:	4603      	mov	r3, r0
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d101      	bne.n	80196bc <_doTask+0x108>
 80196b8:	2301      	movs	r3, #1
 80196ba:	e03e      	b.n	801973a <_doTask+0x186>
		p_owner->__D1 = ((uint32_t)value[0] << 16) + (value[1] << 8) + value[2];
 80196bc:	7d3b      	ldrb	r3, [r7, #20]
 80196be:	041b      	lsls	r3, r3, #16
 80196c0:	7d7a      	ldrb	r2, [r7, #21]
 80196c2:	0212      	lsls	r2, r2, #8
 80196c4:	4413      	add	r3, r2
 80196c6:	7dba      	ldrb	r2, [r7, #22]
 80196c8:	441a      	add	r2, r3
 80196ca:	69bb      	ldr	r3, [r7, #24]
 80196cc:	625a      	str	r2, [r3, #36]	; 0x24
		p_owner->__state = MS5611_STATE_CALCURATE;
 80196ce:	69bb      	ldr	r3, [r7, #24]
 80196d0:	2205      	movs	r2, #5
 80196d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 80196d6:	e02f      	b.n	8019738 <_doTask+0x184>

	case MS5611_STATE_CALCURATE:
		_calcurateBarometric(p_owner, &pressure, &temperature);
 80196d8:	f107 020c 	add.w	r2, r7, #12
 80196dc:	f107 0310 	add.w	r3, r7, #16
 80196e0:	4619      	mov	r1, r3
 80196e2:	69b8      	ldr	r0, [r7, #24]
 80196e4:	f7ff fcc2 	bl	801906c <_calcurateBarometric>
		if (p_owner->__evt_read) (*p_owner->__evt_read)(pressure, temperature);
 80196e8:	69bb      	ldr	r3, [r7, #24]
 80196ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d008      	beq.n	8019702 <_doTask+0x14e>
 80196f0:	69bb      	ldr	r3, [r7, #24]
 80196f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196f4:	693a      	ldr	r2, [r7, #16]
 80196f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80196fa:	eeb0 0a67 	vmov.f32	s0, s15
 80196fe:	4610      	mov	r0, r2
 8019700:	4798      	blx	r3
		if (pif_cumulative_timer1ms - start_time < p_owner->__read_period) {
 8019702:	4b10      	ldr	r3, [pc, #64]	; (8019744 <_doTask+0x190>)
 8019704:	681a      	ldr	r2, [r3, #0]
 8019706:	4b10      	ldr	r3, [pc, #64]	; (8019748 <_doTask+0x194>)
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	1ad3      	subs	r3, r2, r3
 801970c:	69ba      	ldr	r2, [r7, #24]
 801970e:	8c12      	ldrh	r2, [r2, #32]
 8019710:	4293      	cmp	r3, r2
 8019712:	d20b      	bcs.n	801972c <_doTask+0x178>
			delay = p_owner->__read_period - (pif_cumulative_timer1ms - start_time);
 8019714:	69bb      	ldr	r3, [r7, #24]
 8019716:	8c1a      	ldrh	r2, [r3, #32]
 8019718:	4b0b      	ldr	r3, [pc, #44]	; (8019748 <_doTask+0x194>)
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	b299      	uxth	r1, r3
 801971e:	4b09      	ldr	r3, [pc, #36]	; (8019744 <_doTask+0x190>)
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	b29b      	uxth	r3, r3
 8019724:	1acb      	subs	r3, r1, r3
 8019726:	b29b      	uxth	r3, r3
 8019728:	4413      	add	r3, r2
 801972a:	83fb      	strh	r3, [r7, #30]
		}
		p_owner->__state = MS5611_STATE_TEMPERATURE_START;
 801972c:	69bb      	ldr	r3, [r7, #24]
 801972e:	2201      	movs	r2, #1
 8019730:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 8019734:	e000      	b.n	8019738 <_doTask+0x184>

	default:
		break;
 8019736:	bf00      	nop
	}
	return delay;
 8019738:	8bfb      	ldrh	r3, [r7, #30]
}
 801973a:	4618      	mov	r0, r3
 801973c:	3720      	adds	r7, #32
 801973e:	46bd      	mov	sp, r7
 8019740:	bd80      	pop	{r7, pc}
 8019742:	bf00      	nop
 8019744:	200020e0 	.word	0x200020e0
 8019748:	20002264 	.word	0x20002264

0801974c <pifMs5611_Init>:

BOOL pifMs5611_Init(PifMs5611* p_owner, PifId id, PifI2cPort* p_i2c, uint8_t addr)
{
 801974c:	b580      	push	{r7, lr}
 801974e:	b086      	sub	sp, #24
 8019750:	af00      	add	r7, sp, #0
 8019752:	60f8      	str	r0, [r7, #12]
 8019754:	607a      	str	r2, [r7, #4]
 8019756:	461a      	mov	r2, r3
 8019758:	460b      	mov	r3, r1
 801975a:	817b      	strh	r3, [r7, #10]
 801975c:	4613      	mov	r3, r2
 801975e:	727b      	strb	r3, [r7, #9]
	int i;

	if (!p_owner || !p_i2c) {
 8019760:	68fb      	ldr	r3, [r7, #12]
 8019762:	2b00      	cmp	r3, #0
 8019764:	d002      	beq.n	801976c <pifMs5611_Init+0x20>
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	2b00      	cmp	r3, #0
 801976a:	d104      	bne.n	8019776 <pifMs5611_Init+0x2a>
		pif_error = E_INVALID_PARAM;
 801976c:	4b33      	ldr	r3, [pc, #204]	; (801983c <pifMs5611_Init+0xf0>)
 801976e:	2201      	movs	r2, #1
 8019770:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8019772:	2300      	movs	r3, #0
 8019774:	e05e      	b.n	8019834 <pifMs5611_Init+0xe8>
	}

	memset(p_owner, 0, sizeof(PifMs5611));
 8019776:	2230      	movs	r2, #48	; 0x30
 8019778:	2100      	movs	r1, #0
 801977a:	68f8      	ldr	r0, [r7, #12]
 801977c:	f008 fb32 	bl	8021de4 <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 8019780:	6878      	ldr	r0, [r7, #4]
 8019782:	f7f8 fe57 	bl	8012434 <pifI2cPort_AddDevice>
 8019786:	4602      	mov	r2, r0
 8019788:	68fb      	ldr	r3, [r7, #12]
 801978a:	605a      	str	r2, [r3, #4]
    if (!p_owner->_p_i2c) return FALSE;
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	685b      	ldr	r3, [r3, #4]
 8019790:	2b00      	cmp	r3, #0
 8019792:	d101      	bne.n	8019798 <pifMs5611_Init+0x4c>
 8019794:	2300      	movs	r3, #0
 8019796:	e04d      	b.n	8019834 <pifMs5611_Init+0xe8>

    p_owner->_p_i2c->addr = addr;
 8019798:	68fb      	ldr	r3, [r7, #12]
 801979a:	685b      	ldr	r3, [r3, #4]
 801979c:	7a7a      	ldrb	r2, [r7, #9]
 801979e:	701a      	strb	r2, [r3, #0]

	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MS5611_REG_RESET, 0)) goto fail;
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	685b      	ldr	r3, [r3, #4]
 80197a4:	2200      	movs	r2, #0
 80197a6:	211e      	movs	r1, #30
 80197a8:	4618      	mov	r0, r3
 80197aa:	f7f9 f855 	bl	8012858 <pifI2cDevice_WriteRegByte>
 80197ae:	4603      	mov	r3, r0
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d036      	beq.n	8019822 <pifMs5611_Init+0xd6>
	pifTaskManager_YieldMs(100);
 80197b4:	2064      	movs	r0, #100	; 0x64
 80197b6:	f7fb f99b 	bl	8014af0 <pifTaskManager_YieldMs>

	for (i = 0; i < 8; i++) {
 80197ba:	2300      	movs	r3, #0
 80197bc:	617b      	str	r3, [r7, #20]
 80197be:	e014      	b.n	80197ea <pifMs5611_Init+0x9e>
		if (!pifI2cDevice_ReadRegWord(p_owner->_p_i2c, MS5611_REG_READ_PROM + i * 2, (uint16_t*)&p_owner->_prom[i])) goto fail;
 80197c0:	68fb      	ldr	r3, [r7, #12]
 80197c2:	6858      	ldr	r0, [r3, #4]
 80197c4:	697b      	ldr	r3, [r7, #20]
 80197c6:	3350      	adds	r3, #80	; 0x50
 80197c8:	b2db      	uxtb	r3, r3
 80197ca:	005b      	lsls	r3, r3, #1
 80197cc:	b2d9      	uxtb	r1, r3
 80197ce:	697b      	ldr	r3, [r7, #20]
 80197d0:	3304      	adds	r3, #4
 80197d2:	005b      	lsls	r3, r3, #1
 80197d4:	68fa      	ldr	r2, [r7, #12]
 80197d6:	4413      	add	r3, r2
 80197d8:	461a      	mov	r2, r3
 80197da:	f7f8 ff23 	bl	8012624 <pifI2cDevice_ReadRegWord>
 80197de:	4603      	mov	r3, r0
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d020      	beq.n	8019826 <pifMs5611_Init+0xda>
	for (i = 0; i < 8; i++) {
 80197e4:	697b      	ldr	r3, [r7, #20]
 80197e6:	3301      	adds	r3, #1
 80197e8:	617b      	str	r3, [r7, #20]
 80197ea:	697b      	ldr	r3, [r7, #20]
 80197ec:	2b07      	cmp	r3, #7
 80197ee:	dde7      	ble.n	80197c0 <pifMs5611_Init+0x74>
	}
	if (!_checkPromCrc(p_owner)) goto fail;
 80197f0:	68f8      	ldr	r0, [r7, #12]
 80197f2:	f7ff fbbd 	bl	8018f70 <_checkPromCrc>
 80197f6:	4603      	mov	r3, r0
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d016      	beq.n	801982a <pifMs5611_Init+0xde>

    pifMs5611_SetOverSamplingRate(p_owner, MS5611_OSR_1024);
 80197fc:	2104      	movs	r1, #4
 80197fe:	68f8      	ldr	r0, [r7, #12]
 8019800:	f000 f844 	bl	801988c <pifMs5611_SetOverSamplingRate>

	if (id == PIF_ID_AUTO) id = pif_id++;
 8019804:	897b      	ldrh	r3, [r7, #10]
 8019806:	2b00      	cmp	r3, #0
 8019808:	d106      	bne.n	8019818 <pifMs5611_Init+0xcc>
 801980a:	4b0d      	ldr	r3, [pc, #52]	; (8019840 <pifMs5611_Init+0xf4>)
 801980c:	881b      	ldrh	r3, [r3, #0]
 801980e:	1c5a      	adds	r2, r3, #1
 8019810:	b291      	uxth	r1, r2
 8019812:	4a0b      	ldr	r2, [pc, #44]	; (8019840 <pifMs5611_Init+0xf4>)
 8019814:	8011      	strh	r1, [r2, #0]
 8019816:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8019818:	68fb      	ldr	r3, [r7, #12]
 801981a:	897a      	ldrh	r2, [r7, #10]
 801981c:	801a      	strh	r2, [r3, #0]
    return TRUE;
 801981e:	2301      	movs	r3, #1
 8019820:	e008      	b.n	8019834 <pifMs5611_Init+0xe8>
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MS5611_REG_RESET, 0)) goto fail;
 8019822:	bf00      	nop
 8019824:	e002      	b.n	801982c <pifMs5611_Init+0xe0>
		if (!pifI2cDevice_ReadRegWord(p_owner->_p_i2c, MS5611_REG_READ_PROM + i * 2, (uint16_t*)&p_owner->_prom[i])) goto fail;
 8019826:	bf00      	nop
 8019828:	e000      	b.n	801982c <pifMs5611_Init+0xe0>
	if (!_checkPromCrc(p_owner)) goto fail;
 801982a:	bf00      	nop

fail:
	pifMs5611_Clear(p_owner);
 801982c:	68f8      	ldr	r0, [r7, #12]
 801982e:	f000 f809 	bl	8019844 <pifMs5611_Clear>
	return FALSE;
 8019832:	2300      	movs	r3, #0
}
 8019834:	4618      	mov	r0, r3
 8019836:	3718      	adds	r7, #24
 8019838:	46bd      	mov	sp, r7
 801983a:	bd80      	pop	{r7, pc}
 801983c:	200020d1 	.word	0x200020d1
 8019840:	2000005c 	.word	0x2000005c

08019844 <pifMs5611_Clear>:

void pifMs5611_Clear(PifMs5611* p_owner)
{
 8019844:	b580      	push	{r7, lr}
 8019846:	b082      	sub	sp, #8
 8019848:	af00      	add	r7, sp, #0
 801984a:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_task) {
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	69db      	ldr	r3, [r3, #28]
 8019850:	2b00      	cmp	r3, #0
 8019852:	d007      	beq.n	8019864 <pifMs5611_Clear+0x20>
		pifTaskManager_Remove(p_owner->_p_task);
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	69db      	ldr	r3, [r3, #28]
 8019858:	4618      	mov	r0, r3
 801985a:	f7fb f843 	bl	80148e4 <pifTaskManager_Remove>
		p_owner->_p_task = NULL;
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	2200      	movs	r2, #0
 8019862:	61da      	str	r2, [r3, #28]
	}
	if (p_owner->_p_i2c) {
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	685b      	ldr	r3, [r3, #4]
 8019868:	2b00      	cmp	r3, #0
 801986a:	d00b      	beq.n	8019884 <pifMs5611_Clear+0x40>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	685b      	ldr	r3, [r3, #4]
 8019870:	685a      	ldr	r2, [r3, #4]
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	685b      	ldr	r3, [r3, #4]
 8019876:	4619      	mov	r1, r3
 8019878:	4610      	mov	r0, r2
 801987a:	f7f8 fdff 	bl	801247c <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	2200      	movs	r2, #0
 8019882:	605a      	str	r2, [r3, #4]
	}
}
 8019884:	bf00      	nop
 8019886:	3708      	adds	r7, #8
 8019888:	46bd      	mov	sp, r7
 801988a:	bd80      	pop	{r7, pc}

0801988c <pifMs5611_SetOverSamplingRate>:

void pifMs5611_SetOverSamplingRate(PifMs5611* p_owner, uint16_t osr)
{
 801988c:	b480      	push	{r7}
 801988e:	b083      	sub	sp, #12
 8019890:	af00      	add	r7, sp, #0
 8019892:	6078      	str	r0, [r7, #4]
 8019894:	460b      	mov	r3, r1
 8019896:	807b      	strh	r3, [r7, #2]
	p_owner->_over_sampling_rate = osr;
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	887a      	ldrh	r2, [r7, #2]
 801989c:	831a      	strh	r2, [r3, #24]
	switch (osr) {
 801989e:	887b      	ldrh	r3, [r7, #2]
 80198a0:	2b08      	cmp	r3, #8
 80198a2:	d829      	bhi.n	80198f8 <pifMs5611_SetOverSamplingRate+0x6c>
 80198a4:	a201      	add	r2, pc, #4	; (adr r2, 80198ac <pifMs5611_SetOverSamplingRate+0x20>)
 80198a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80198aa:	bf00      	nop
 80198ac:	080198d1 	.word	0x080198d1
 80198b0:	080198f9 	.word	0x080198f9
 80198b4:	080198d9 	.word	0x080198d9
 80198b8:	080198f9 	.word	0x080198f9
 80198bc:	080198e1 	.word	0x080198e1
 80198c0:	080198f9 	.word	0x080198f9
 80198c4:	080198e9 	.word	0x080198e9
 80198c8:	080198f9 	.word	0x080198f9
 80198cc:	080198f1 	.word	0x080198f1
	case MS5611_OSR_256: p_owner->_conversion_time = 1 + 1; break;
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	2202      	movs	r2, #2
 80198d4:	769a      	strb	r2, [r3, #26]
 80198d6:	e00f      	b.n	80198f8 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_512: p_owner->_conversion_time = 2 + 1; break;
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	2203      	movs	r2, #3
 80198dc:	769a      	strb	r2, [r3, #26]
 80198de:	e00b      	b.n	80198f8 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_1024: p_owner->_conversion_time = 3 + 1; break;
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	2204      	movs	r2, #4
 80198e4:	769a      	strb	r2, [r3, #26]
 80198e6:	e007      	b.n	80198f8 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_2048: p_owner->_conversion_time = 5 + 1; break;
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	2206      	movs	r2, #6
 80198ec:	769a      	strb	r2, [r3, #26]
 80198ee:	e003      	b.n	80198f8 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_4096: p_owner->_conversion_time = 10 + 1; break;
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	220b      	movs	r2, #11
 80198f4:	769a      	strb	r2, [r3, #26]
 80198f6:	bf00      	nop
	}
}
 80198f8:	bf00      	nop
 80198fa:	370c      	adds	r7, #12
 80198fc:	46bd      	mov	sp, r7
 80198fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019902:	4770      	bx	lr

08019904 <pifMs5611_AddTaskForReading>:
	_calcurateBarometric(p_owner, p_pressure, p_temperature);
	return TRUE;
}

BOOL pifMs5611_AddTaskForReading(PifMs5611* p_owner, uint16_t read_period, PifEvtMs5611Read evt_read)
{
 8019904:	b580      	push	{r7, lr}
 8019906:	b086      	sub	sp, #24
 8019908:	af02      	add	r7, sp, #8
 801990a:	60f8      	str	r0, [r7, #12]
 801990c:	460b      	mov	r3, r1
 801990e:	607a      	str	r2, [r7, #4]
 8019910:	817b      	strh	r3, [r7, #10]
	p_owner->_p_task = pifTaskManager_Add(TM_CHANGE_MS, 10, _doTask, p_owner, FALSE);
 8019912:	2300      	movs	r3, #0
 8019914:	9300      	str	r3, [sp, #0]
 8019916:	68fb      	ldr	r3, [r7, #12]
 8019918:	4a0e      	ldr	r2, [pc, #56]	; (8019954 <pifMs5611_AddTaskForReading+0x50>)
 801991a:	210a      	movs	r1, #10
 801991c:	2004      	movs	r0, #4
 801991e:	f7fa ff8f 	bl	8014840 <pifTaskManager_Add>
 8019922:	4602      	mov	r2, r0
 8019924:	68fb      	ldr	r3, [r7, #12]
 8019926:	61da      	str	r2, [r3, #28]
    if (!p_owner->_p_task) return FALSE;
 8019928:	68fb      	ldr	r3, [r7, #12]
 801992a:	69db      	ldr	r3, [r3, #28]
 801992c:	2b00      	cmp	r3, #0
 801992e:	d101      	bne.n	8019934 <pifMs5611_AddTaskForReading+0x30>
 8019930:	2300      	movs	r3, #0
 8019932:	e00a      	b.n	801994a <pifMs5611_AddTaskForReading+0x46>

    p_owner->__read_period = read_period;
 8019934:	68fb      	ldr	r3, [r7, #12]
 8019936:	897a      	ldrh	r2, [r7, #10]
 8019938:	841a      	strh	r2, [r3, #32]
    p_owner->__evt_read = evt_read;
 801993a:	68fb      	ldr	r3, [r7, #12]
 801993c:	687a      	ldr	r2, [r7, #4]
 801993e:	62da      	str	r2, [r3, #44]	; 0x2c
    p_owner->__state = MS5611_STATE_TEMPERATURE_START;
 8019940:	68fb      	ldr	r3, [r7, #12]
 8019942:	2201      	movs	r2, #1
 8019944:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    return TRUE;
 8019948:	2301      	movs	r3, #1
}
 801994a:	4618      	mov	r0, r3
 801994c:	3710      	adds	r7, #16
 801994e:	46bd      	mov	sp, r7
 8019950:	bd80      	pop	{r7, pc}
 8019952:	bf00      	nop
 8019954:	080195b5 	.word	0x080195b5

08019958 <_doTask>:
#include "sound/pif_buzzer.h"


static uint16_t _doTask(PifTask* p_task)
{
 8019958:	b580      	push	{r7, lr}
 801995a:	b086      	sub	sp, #24
 801995c:	af00      	add	r7, sp, #0
 801995e:	6078      	str	r0, [r7, #4]
	PifBuzzer* p_owner = (PifBuzzer*)p_task->_p_client;
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	68db      	ldr	r3, [r3, #12]
 8019964:	613b      	str	r3, [r7, #16]
	uint8_t repeat;
	uint16_t sound_10ms, delay = 0;
 8019966:	2300      	movs	r3, #0
 8019968:	82fb      	strh	r3, [r7, #22]

	sound_10ms = p_owner->__p_sound_10ms[p_owner->__pos];
 801996a:	693b      	ldr	r3, [r7, #16]
 801996c:	691b      	ldr	r3, [r3, #16]
 801996e:	693a      	ldr	r2, [r7, #16]
 8019970:	7d12      	ldrb	r2, [r2, #20]
 8019972:	4413      	add	r3, r2
 8019974:	781b      	ldrb	r3, [r3, #0]
 8019976:	81fb      	strh	r3, [r7, #14]
	switch (p_owner->_state) {
 8019978:	693b      	ldr	r3, [r7, #16]
 801997a:	7b1b      	ldrb	r3, [r3, #12]
 801997c:	3b01      	subs	r3, #1
 801997e:	2b03      	cmp	r3, #3
 8019980:	d87f      	bhi.n	8019a82 <_doTask+0x12a>
 8019982:	a201      	add	r2, pc, #4	; (adr r2, 8019988 <_doTask+0x30>)
 8019984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019988:	08019999 	.word	0x08019999
 801998c:	080199bb 	.word	0x080199bb
 8019990:	080199dd 	.word	0x080199dd
 8019994:	08019a4f 	.word	0x08019a4f
	case BS_START:
		(*p_owner->__act_action)(p_owner->_id, ON);
 8019998:	693b      	ldr	r3, [r7, #16]
 801999a:	699b      	ldr	r3, [r3, #24]
 801999c:	693a      	ldr	r2, [r7, #16]
 801999e:	8892      	ldrh	r2, [r2, #4]
 80199a0:	2101      	movs	r1, #1
 80199a2:	4610      	mov	r0, r2
 80199a4:	4798      	blx	r3
		p_owner->__pos++;
 80199a6:	693b      	ldr	r3, [r7, #16]
 80199a8:	7d1b      	ldrb	r3, [r3, #20]
 80199aa:	3301      	adds	r3, #1
 80199ac:	b2da      	uxtb	r2, r3
 80199ae:	693b      	ldr	r3, [r7, #16]
 80199b0:	751a      	strb	r2, [r3, #20]
		p_owner->_state = BS_ON;
 80199b2:	693b      	ldr	r3, [r7, #16]
 80199b4:	2202      	movs	r2, #2
 80199b6:	731a      	strb	r2, [r3, #12]
		break;
 80199b8:	e064      	b.n	8019a84 <_doTask+0x12c>

	case BS_ON:
		(*p_owner->__act_action)(p_owner->_id, OFF);
 80199ba:	693b      	ldr	r3, [r7, #16]
 80199bc:	699b      	ldr	r3, [r3, #24]
 80199be:	693a      	ldr	r2, [r7, #16]
 80199c0:	8892      	ldrh	r2, [r2, #4]
 80199c2:	2100      	movs	r1, #0
 80199c4:	4610      	mov	r0, r2
 80199c6:	4798      	blx	r3
		p_owner->__pos++;
 80199c8:	693b      	ldr	r3, [r7, #16]
 80199ca:	7d1b      	ldrb	r3, [r3, #20]
 80199cc:	3301      	adds	r3, #1
 80199ce:	b2da      	uxtb	r2, r3
 80199d0:	693b      	ldr	r3, [r7, #16]
 80199d2:	751a      	strb	r2, [r3, #20]
		p_owner->_state = BS_OFF;
 80199d4:	693b      	ldr	r3, [r7, #16]
 80199d6:	2203      	movs	r2, #3
 80199d8:	731a      	strb	r2, [r3, #12]
		break;
 80199da:	e053      	b.n	8019a84 <_doTask+0x12c>

	case BS_OFF:
		if (sound_10ms < 0xF0) {
 80199dc:	89fb      	ldrh	r3, [r7, #14]
 80199de:	2bef      	cmp	r3, #239	; 0xef
 80199e0:	d810      	bhi.n	8019a04 <_doTask+0xac>
			(*p_owner->__act_action)(p_owner->_id, ON);
 80199e2:	693b      	ldr	r3, [r7, #16]
 80199e4:	699b      	ldr	r3, [r3, #24]
 80199e6:	693a      	ldr	r2, [r7, #16]
 80199e8:	8892      	ldrh	r2, [r2, #4]
 80199ea:	2101      	movs	r1, #1
 80199ec:	4610      	mov	r0, r2
 80199ee:	4798      	blx	r3
			p_owner->__pos++;
 80199f0:	693b      	ldr	r3, [r7, #16]
 80199f2:	7d1b      	ldrb	r3, [r3, #20]
 80199f4:	3301      	adds	r3, #1
 80199f6:	b2da      	uxtb	r2, r3
 80199f8:	693b      	ldr	r3, [r7, #16]
 80199fa:	751a      	strb	r2, [r3, #20]
			p_owner->_state = BS_ON;
 80199fc:	693b      	ldr	r3, [r7, #16]
 80199fe:	2202      	movs	r2, #2
 8019a00:	731a      	strb	r2, [r3, #12]
			else {
				p_owner->_state = BS_STOP;
			}
			delay = 1;
		}
		break;
 8019a02:	e03f      	b.n	8019a84 <_doTask+0x12c>
		else if (sound_10ms == 0xF0) {
 8019a04:	89fb      	ldrh	r3, [r7, #14]
 8019a06:	2bf0      	cmp	r3, #240	; 0xf0
 8019a08:	d105      	bne.n	8019a16 <_doTask+0xbe>
			p_owner->_state = BS_STOP;
 8019a0a:	693b      	ldr	r3, [r7, #16]
 8019a0c:	2204      	movs	r2, #4
 8019a0e:	731a      	strb	r2, [r3, #12]
			delay = 1;
 8019a10:	2301      	movs	r3, #1
 8019a12:	82fb      	strh	r3, [r7, #22]
		break;
 8019a14:	e036      	b.n	8019a84 <_doTask+0x12c>
			repeat = sound_10ms - 0xF0;
 8019a16:	89fb      	ldrh	r3, [r7, #14]
 8019a18:	b2db      	uxtb	r3, r3
 8019a1a:	3310      	adds	r3, #16
 8019a1c:	737b      	strb	r3, [r7, #13]
			if (p_owner->__repeat < repeat) {
 8019a1e:	693b      	ldr	r3, [r7, #16]
 8019a20:	7d5b      	ldrb	r3, [r3, #21]
 8019a22:	7b7a      	ldrb	r2, [r7, #13]
 8019a24:	429a      	cmp	r2, r3
 8019a26:	d90c      	bls.n	8019a42 <_doTask+0xea>
				p_owner->__pos = 0;
 8019a28:	693b      	ldr	r3, [r7, #16]
 8019a2a:	2200      	movs	r2, #0
 8019a2c:	751a      	strb	r2, [r3, #20]
				p_owner->__repeat++;
 8019a2e:	693b      	ldr	r3, [r7, #16]
 8019a30:	7d5b      	ldrb	r3, [r3, #21]
 8019a32:	3301      	adds	r3, #1
 8019a34:	b2da      	uxtb	r2, r3
 8019a36:	693b      	ldr	r3, [r7, #16]
 8019a38:	755a      	strb	r2, [r3, #21]
				p_owner->_state = BS_START;
 8019a3a:	693b      	ldr	r3, [r7, #16]
 8019a3c:	2201      	movs	r2, #1
 8019a3e:	731a      	strb	r2, [r3, #12]
 8019a40:	e002      	b.n	8019a48 <_doTask+0xf0>
				p_owner->_state = BS_STOP;
 8019a42:	693b      	ldr	r3, [r7, #16]
 8019a44:	2204      	movs	r2, #4
 8019a46:	731a      	strb	r2, [r3, #12]
			delay = 1;
 8019a48:	2301      	movs	r3, #1
 8019a4a:	82fb      	strh	r3, [r7, #22]
		break;
 8019a4c:	e01a      	b.n	8019a84 <_doTask+0x12c>

	case BS_STOP:
		(*p_owner->__act_action)(p_owner->_id, OFF);
 8019a4e:	693b      	ldr	r3, [r7, #16]
 8019a50:	699b      	ldr	r3, [r3, #24]
 8019a52:	693a      	ldr	r2, [r7, #16]
 8019a54:	8892      	ldrh	r2, [r2, #4]
 8019a56:	2100      	movs	r1, #0
 8019a58:	4610      	mov	r0, r2
 8019a5a:	4798      	blx	r3
		p_owner->_state = BS_IDLE;
 8019a5c:	693b      	ldr	r3, [r7, #16]
 8019a5e:	2200      	movs	r2, #0
 8019a60:	731a      	strb	r2, [r3, #12]
		if (p_owner->evt_finish) (*p_owner->evt_finish)(p_owner->_id);
 8019a62:	693b      	ldr	r3, [r7, #16]
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	2b00      	cmp	r3, #0
 8019a68:	d005      	beq.n	8019a76 <_doTask+0x11e>
 8019a6a:	693b      	ldr	r3, [r7, #16]
 8019a6c:	681b      	ldr	r3, [r3, #0]
 8019a6e:	693a      	ldr	r2, [r7, #16]
 8019a70:	8892      	ldrh	r2, [r2, #4]
 8019a72:	4610      	mov	r0, r2
 8019a74:	4798      	blx	r3
		delay = 1;
 8019a76:	2301      	movs	r3, #1
 8019a78:	82fb      	strh	r3, [r7, #22]
		p_task->pause = TRUE;
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	2201      	movs	r2, #1
 8019a7e:	701a      	strb	r2, [r3, #0]
		break;
 8019a80:	e000      	b.n	8019a84 <_doTask+0x12c>

	default:
		break;
 8019a82:	bf00      	nop
	}
	return delay ? delay : sound_10ms * 10;
 8019a84:	8afb      	ldrh	r3, [r7, #22]
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d106      	bne.n	8019a98 <_doTask+0x140>
 8019a8a:	89fb      	ldrh	r3, [r7, #14]
 8019a8c:	461a      	mov	r2, r3
 8019a8e:	0092      	lsls	r2, r2, #2
 8019a90:	4413      	add	r3, r2
 8019a92:	005b      	lsls	r3, r3, #1
 8019a94:	b29b      	uxth	r3, r3
 8019a96:	e000      	b.n	8019a9a <_doTask+0x142>
 8019a98:	8afb      	ldrh	r3, [r7, #22]
}
 8019a9a:	4618      	mov	r0, r3
 8019a9c:	3718      	adds	r7, #24
 8019a9e:	46bd      	mov	sp, r7
 8019aa0:	bd80      	pop	{r7, pc}
 8019aa2:	bf00      	nop

08019aa4 <pifBuzzer_Init>:

BOOL pifBuzzer_Init(PifBuzzer* p_owner, PifId id, PifActBuzzerAction act_action)
{
 8019aa4:	b580      	push	{r7, lr}
 8019aa6:	b086      	sub	sp, #24
 8019aa8:	af02      	add	r7, sp, #8
 8019aaa:	60f8      	str	r0, [r7, #12]
 8019aac:	460b      	mov	r3, r1
 8019aae:	607a      	str	r2, [r7, #4]
 8019ab0:	817b      	strh	r3, [r7, #10]
	if (!p_owner || !act_action) {
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d002      	beq.n	8019abe <pifBuzzer_Init+0x1a>
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	d104      	bne.n	8019ac8 <pifBuzzer_Init+0x24>
		pif_error = E_INVALID_PARAM;
 8019abe:	4b18      	ldr	r3, [pc, #96]	; (8019b20 <pifBuzzer_Init+0x7c>)
 8019ac0:	2201      	movs	r2, #1
 8019ac2:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8019ac4:	2300      	movs	r3, #0
 8019ac6:	e026      	b.n	8019b16 <pifBuzzer_Init+0x72>
	}

	memset(p_owner, 0, sizeof(PifBuzzer));
 8019ac8:	221c      	movs	r2, #28
 8019aca:	2100      	movs	r1, #0
 8019acc:	68f8      	ldr	r0, [r7, #12]
 8019ace:	f008 f989 	bl	8021de4 <memset>

	p_owner->_p_task = pifTaskManager_Add(TM_CHANGE_MS, 1, _doTask, p_owner, FALSE);
 8019ad2:	2300      	movs	r3, #0
 8019ad4:	9300      	str	r3, [sp, #0]
 8019ad6:	68fb      	ldr	r3, [r7, #12]
 8019ad8:	4a12      	ldr	r2, [pc, #72]	; (8019b24 <pifBuzzer_Init+0x80>)
 8019ada:	2101      	movs	r1, #1
 8019adc:	2004      	movs	r0, #4
 8019ade:	f7fa feaf 	bl	8014840 <pifTaskManager_Add>
 8019ae2:	4602      	mov	r2, r0
 8019ae4:	68fb      	ldr	r3, [r7, #12]
 8019ae6:	609a      	str	r2, [r3, #8]
	if (!p_owner->_p_task) return FALSE;
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	689b      	ldr	r3, [r3, #8]
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d101      	bne.n	8019af4 <pifBuzzer_Init+0x50>
 8019af0:	2300      	movs	r3, #0
 8019af2:	e010      	b.n	8019b16 <pifBuzzer_Init+0x72>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8019af4:	897b      	ldrh	r3, [r7, #10]
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	d106      	bne.n	8019b08 <pifBuzzer_Init+0x64>
 8019afa:	4b0b      	ldr	r3, [pc, #44]	; (8019b28 <pifBuzzer_Init+0x84>)
 8019afc:	881b      	ldrh	r3, [r3, #0]
 8019afe:	1c5a      	adds	r2, r3, #1
 8019b00:	b291      	uxth	r1, r2
 8019b02:	4a09      	ldr	r2, [pc, #36]	; (8019b28 <pifBuzzer_Init+0x84>)
 8019b04:	8011      	strh	r1, [r2, #0]
 8019b06:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8019b08:	68fb      	ldr	r3, [r7, #12]
 8019b0a:	897a      	ldrh	r2, [r7, #10]
 8019b0c:	809a      	strh	r2, [r3, #4]
    p_owner->__act_action = act_action;
 8019b0e:	68fb      	ldr	r3, [r7, #12]
 8019b10:	687a      	ldr	r2, [r7, #4]
 8019b12:	619a      	str	r2, [r3, #24]
    return TRUE;
 8019b14:	2301      	movs	r3, #1
}
 8019b16:	4618      	mov	r0, r3
 8019b18:	3710      	adds	r7, #16
 8019b1a:	46bd      	mov	sp, r7
 8019b1c:	bd80      	pop	{r7, pc}
 8019b1e:	bf00      	nop
 8019b20:	200020d1 	.word	0x200020d1
 8019b24:	08019959 	.word	0x08019959
 8019b28:	2000005c 	.word	0x2000005c

08019b2c <pifBuzzer_Start>:
		p_owner->_p_task = NULL;
	}
}

BOOL pifBuzzer_Start(PifBuzzer* p_owner, const uint8_t* p_sound_10ms)
{
 8019b2c:	b480      	push	{r7}
 8019b2e:	b083      	sub	sp, #12
 8019b30:	af00      	add	r7, sp, #0
 8019b32:	6078      	str	r0, [r7, #4]
 8019b34:	6039      	str	r1, [r7, #0]
	if (!p_owner->_p_task) return FALSE;
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	689b      	ldr	r3, [r3, #8]
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d101      	bne.n	8019b42 <pifBuzzer_Start+0x16>
 8019b3e:	2300      	movs	r3, #0
 8019b40:	e010      	b.n	8019b64 <pifBuzzer_Start+0x38>

	p_owner->__p_sound_10ms = p_sound_10ms;
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	683a      	ldr	r2, [r7, #0]
 8019b46:	611a      	str	r2, [r3, #16]
	p_owner->__pos = 0;
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	2200      	movs	r2, #0
 8019b4c:	751a      	strb	r2, [r3, #20]
	p_owner->__repeat = 0;
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	2200      	movs	r2, #0
 8019b52:	755a      	strb	r2, [r3, #21]
	p_owner->_state = BS_START;
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	2201      	movs	r2, #1
 8019b58:	731a      	strb	r2, [r3, #12]
	p_owner->_p_task->pause = FALSE;
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	689b      	ldr	r3, [r3, #8]
 8019b5e:	2200      	movs	r2, #0
 8019b60:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8019b62:	2301      	movs	r3, #1
}
 8019b64:	4618      	mov	r0, r3
 8019b66:	370c      	adds	r7, #12
 8019b68:	46bd      	mov	sp, r7
 8019b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b6e:	4770      	bx	lr

08019b70 <pifBuzzer_Stop>:

void pifBuzzer_Stop(PifBuzzer* p_owner)
{
 8019b70:	b480      	push	{r7}
 8019b72:	b083      	sub	sp, #12
 8019b74:	af00      	add	r7, sp, #0
 8019b76:	6078      	str	r0, [r7, #4]
	p_owner->_state = BS_STOP;
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	2204      	movs	r2, #4
 8019b7c:	731a      	strb	r2, [r3, #12]
}
 8019b7e:	bf00      	nop
 8019b80:	370c      	adds	r7, #12
 8019b82:	46bd      	mov	sp, r7
 8019b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b88:	4770      	bx	lr

08019b8a <_actStorageI2c_Read_1>:
#include "core/pif_task.h"
#include "storage/pif_storage.h"


static BOOL _actStorageI2c_Read_1(PifStorage* p_owner, uint8_t* dst, uint32_t src, size_t size)
{
 8019b8a:	b580      	push	{r7, lr}
 8019b8c:	b086      	sub	sp, #24
 8019b8e:	af02      	add	r7, sp, #8
 8019b90:	60f8      	str	r0, [r7, #12]
 8019b92:	60b9      	str	r1, [r7, #8]
 8019b94:	607a      	str	r2, [r7, #4]
 8019b96:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (src >> 8);
 8019b98:	68fb      	ldr	r3, [r7, #12]
 8019b9a:	7a19      	ldrb	r1, [r3, #8]
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	0a1b      	lsrs	r3, r3, #8
 8019ba0:	b2da      	uxtb	r2, r3
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	685b      	ldr	r3, [r3, #4]
 8019ba6:	430a      	orrs	r2, r1
 8019ba8:	b2d2      	uxtb	r2, r2
 8019baa:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Read(p_owner->_p_i2c, src & 0xFF, 1, dst, size)) return FALSE;
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	6858      	ldr	r0, [r3, #4]
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	b2d9      	uxtb	r1, r3
 8019bb4:	683b      	ldr	r3, [r7, #0]
 8019bb6:	9300      	str	r3, [sp, #0]
 8019bb8:	68bb      	ldr	r3, [r7, #8]
 8019bba:	2201      	movs	r2, #1
 8019bbc:	f7f8 fc72 	bl	80124a4 <pifI2cDevice_Read>
 8019bc0:	4603      	mov	r3, r0
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d101      	bne.n	8019bca <_actStorageI2c_Read_1+0x40>
 8019bc6:	2300      	movs	r3, #0
 8019bc8:	e000      	b.n	8019bcc <_actStorageI2c_Read_1+0x42>
	return TRUE;
 8019bca:	2301      	movs	r3, #1
}
 8019bcc:	4618      	mov	r0, r3
 8019bce:	3710      	adds	r7, #16
 8019bd0:	46bd      	mov	sp, r7
 8019bd2:	bd80      	pop	{r7, pc}

08019bd4 <_actStorageI2c_Write_1>:

static BOOL _actStorageI2c_Write_1(PifStorage* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 8019bd4:	b580      	push	{r7, lr}
 8019bd6:	b086      	sub	sp, #24
 8019bd8:	af02      	add	r7, sp, #8
 8019bda:	60f8      	str	r0, [r7, #12]
 8019bdc:	60b9      	str	r1, [r7, #8]
 8019bde:	607a      	str	r2, [r7, #4]
 8019be0:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (dst >> 8);
 8019be2:	68fb      	ldr	r3, [r7, #12]
 8019be4:	7a19      	ldrb	r1, [r3, #8]
 8019be6:	68bb      	ldr	r3, [r7, #8]
 8019be8:	0a1b      	lsrs	r3, r3, #8
 8019bea:	b2da      	uxtb	r2, r3
 8019bec:	68fb      	ldr	r3, [r7, #12]
 8019bee:	685b      	ldr	r3, [r3, #4]
 8019bf0:	430a      	orrs	r2, r1
 8019bf2:	b2d2      	uxtb	r2, r2
 8019bf4:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Write(p_owner->_p_i2c, dst & 0xFF, 1, src, size)) return FALSE;
 8019bf6:	68fb      	ldr	r3, [r7, #12]
 8019bf8:	6858      	ldr	r0, [r3, #4]
 8019bfa:	68bb      	ldr	r3, [r7, #8]
 8019bfc:	b2d9      	uxtb	r1, r3
 8019bfe:	683b      	ldr	r3, [r7, #0]
 8019c00:	9300      	str	r3, [sp, #0]
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	2201      	movs	r2, #1
 8019c06:	f7f8 fd7b 	bl	8012700 <pifI2cDevice_Write>
 8019c0a:	4603      	mov	r3, r0
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d101      	bne.n	8019c14 <_actStorageI2c_Write_1+0x40>
 8019c10:	2300      	movs	r3, #0
 8019c12:	e009      	b.n	8019c28 <_actStorageI2c_Write_1+0x54>
	if (p_owner->__write_delay_ms) pifTaskManager_YieldMs(p_owner->__write_delay_ms);
 8019c14:	68fb      	ldr	r3, [r7, #12]
 8019c16:	7a5b      	ldrb	r3, [r3, #9]
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d004      	beq.n	8019c26 <_actStorageI2c_Write_1+0x52>
 8019c1c:	68fb      	ldr	r3, [r7, #12]
 8019c1e:	7a5b      	ldrb	r3, [r3, #9]
 8019c20:	4618      	mov	r0, r3
 8019c22:	f7fa ff65 	bl	8014af0 <pifTaskManager_YieldMs>
	return TRUE;
 8019c26:	2301      	movs	r3, #1
}
 8019c28:	4618      	mov	r0, r3
 8019c2a:	3710      	adds	r7, #16
 8019c2c:	46bd      	mov	sp, r7
 8019c2e:	bd80      	pop	{r7, pc}

08019c30 <_actStorageI2c_Read_2>:

static BOOL _actStorageI2c_Read_2(PifStorage* p_owner, uint8_t* dst, uint32_t src, size_t size)
{
 8019c30:	b580      	push	{r7, lr}
 8019c32:	b086      	sub	sp, #24
 8019c34:	af02      	add	r7, sp, #8
 8019c36:	60f8      	str	r0, [r7, #12]
 8019c38:	60b9      	str	r1, [r7, #8]
 8019c3a:	607a      	str	r2, [r7, #4]
 8019c3c:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (src >> 16);
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	7a19      	ldrb	r1, [r3, #8]
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	0c1b      	lsrs	r3, r3, #16
 8019c46:	b2da      	uxtb	r2, r3
 8019c48:	68fb      	ldr	r3, [r7, #12]
 8019c4a:	685b      	ldr	r3, [r3, #4]
 8019c4c:	430a      	orrs	r2, r1
 8019c4e:	b2d2      	uxtb	r2, r2
 8019c50:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Read(p_owner->_p_i2c, src & 0xFFFF, 2, dst, size)) return FALSE;
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	6858      	ldr	r0, [r3, #4]
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	b299      	uxth	r1, r3
 8019c5a:	683b      	ldr	r3, [r7, #0]
 8019c5c:	9300      	str	r3, [sp, #0]
 8019c5e:	68bb      	ldr	r3, [r7, #8]
 8019c60:	2202      	movs	r2, #2
 8019c62:	f7f8 fc1f 	bl	80124a4 <pifI2cDevice_Read>
 8019c66:	4603      	mov	r3, r0
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d101      	bne.n	8019c70 <_actStorageI2c_Read_2+0x40>
 8019c6c:	2300      	movs	r3, #0
 8019c6e:	e000      	b.n	8019c72 <_actStorageI2c_Read_2+0x42>
	return TRUE;
 8019c70:	2301      	movs	r3, #1
}
 8019c72:	4618      	mov	r0, r3
 8019c74:	3710      	adds	r7, #16
 8019c76:	46bd      	mov	sp, r7
 8019c78:	bd80      	pop	{r7, pc}

08019c7a <_actStorageI2c_Write_2>:

static BOOL _actStorageI2c_Write_2(PifStorage* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 8019c7a:	b580      	push	{r7, lr}
 8019c7c:	b086      	sub	sp, #24
 8019c7e:	af02      	add	r7, sp, #8
 8019c80:	60f8      	str	r0, [r7, #12]
 8019c82:	60b9      	str	r1, [r7, #8]
 8019c84:	607a      	str	r2, [r7, #4]
 8019c86:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (dst >> 16);
 8019c88:	68fb      	ldr	r3, [r7, #12]
 8019c8a:	7a19      	ldrb	r1, [r3, #8]
 8019c8c:	68bb      	ldr	r3, [r7, #8]
 8019c8e:	0c1b      	lsrs	r3, r3, #16
 8019c90:	b2da      	uxtb	r2, r3
 8019c92:	68fb      	ldr	r3, [r7, #12]
 8019c94:	685b      	ldr	r3, [r3, #4]
 8019c96:	430a      	orrs	r2, r1
 8019c98:	b2d2      	uxtb	r2, r2
 8019c9a:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Write(p_owner->_p_i2c, dst & 0xFFFF, 2, src, size)) return FALSE;
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	6858      	ldr	r0, [r3, #4]
 8019ca0:	68bb      	ldr	r3, [r7, #8]
 8019ca2:	b299      	uxth	r1, r3
 8019ca4:	683b      	ldr	r3, [r7, #0]
 8019ca6:	9300      	str	r3, [sp, #0]
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	2202      	movs	r2, #2
 8019cac:	f7f8 fd28 	bl	8012700 <pifI2cDevice_Write>
 8019cb0:	4603      	mov	r3, r0
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	d101      	bne.n	8019cba <_actStorageI2c_Write_2+0x40>
 8019cb6:	2300      	movs	r3, #0
 8019cb8:	e009      	b.n	8019cce <_actStorageI2c_Write_2+0x54>
	if (p_owner->__write_delay_ms) pifTaskManager_YieldMs(p_owner->__write_delay_ms);
 8019cba:	68fb      	ldr	r3, [r7, #12]
 8019cbc:	7a5b      	ldrb	r3, [r3, #9]
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d004      	beq.n	8019ccc <_actStorageI2c_Write_2+0x52>
 8019cc2:	68fb      	ldr	r3, [r7, #12]
 8019cc4:	7a5b      	ldrb	r3, [r3, #9]
 8019cc6:	4618      	mov	r0, r3
 8019cc8:	f7fa ff12 	bl	8014af0 <pifTaskManager_YieldMs>
	return TRUE;
 8019ccc:	2301      	movs	r3, #1
}
 8019cce:	4618      	mov	r0, r3
 8019cd0:	3710      	adds	r7, #16
 8019cd2:	46bd      	mov	sp, r7
 8019cd4:	bd80      	pop	{r7, pc}
	...

08019cd8 <pifStorage_AttachI2c>:
	p_owner->__act_write = act_write;
	return TRUE;
}

BOOL pifStorage_AttachI2c(PifStorage* p_owner, PifI2cPort* p_port, uint8_t addr, PifStorageI2cIAddrSize i_addr_size, uint8_t write_delay_ms)
{
 8019cd8:	b580      	push	{r7, lr}
 8019cda:	b084      	sub	sp, #16
 8019cdc:	af00      	add	r7, sp, #0
 8019cde:	60f8      	str	r0, [r7, #12]
 8019ce0:	60b9      	str	r1, [r7, #8]
 8019ce2:	4611      	mov	r1, r2
 8019ce4:	461a      	mov	r2, r3
 8019ce6:	460b      	mov	r3, r1
 8019ce8:	71fb      	strb	r3, [r7, #7]
 8019cea:	4613      	mov	r3, r2
 8019cec:	71bb      	strb	r3, [r7, #6]
    if (!p_owner || !p_port) {
 8019cee:	68fb      	ldr	r3, [r7, #12]
 8019cf0:	2b00      	cmp	r3, #0
 8019cf2:	d002      	beq.n	8019cfa <pifStorage_AttachI2c+0x22>
 8019cf4:	68bb      	ldr	r3, [r7, #8]
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d104      	bne.n	8019d04 <pifStorage_AttachI2c+0x2c>
    	pif_error = E_INVALID_PARAM;
 8019cfa:	4b1c      	ldr	r3, [pc, #112]	; (8019d6c <pifStorage_AttachI2c+0x94>)
 8019cfc:	2201      	movs	r2, #1
 8019cfe:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8019d00:	2300      	movs	r3, #0
 8019d02:	e02f      	b.n	8019d64 <pifStorage_AttachI2c+0x8c>
    }

	p_owner->_p_i2c = pifI2cPort_AddDevice(p_port);
 8019d04:	68b8      	ldr	r0, [r7, #8]
 8019d06:	f7f8 fb95 	bl	8012434 <pifI2cPort_AddDevice>
 8019d0a:	4602      	mov	r2, r0
 8019d0c:	68fb      	ldr	r3, [r7, #12]
 8019d0e:	605a      	str	r2, [r3, #4]
    if (!p_owner->_p_i2c) return FALSE;
 8019d10:	68fb      	ldr	r3, [r7, #12]
 8019d12:	685b      	ldr	r3, [r3, #4]
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d101      	bne.n	8019d1c <pifStorage_AttachI2c+0x44>
 8019d18:	2300      	movs	r3, #0
 8019d1a:	e023      	b.n	8019d64 <pifStorage_AttachI2c+0x8c>

    p_owner->__addr = addr;
 8019d1c:	68fb      	ldr	r3, [r7, #12]
 8019d1e:	79fa      	ldrb	r2, [r7, #7]
 8019d20:	721a      	strb	r2, [r3, #8]
    p_owner->_p_i2c->addr = addr;
 8019d22:	68fb      	ldr	r3, [r7, #12]
 8019d24:	685b      	ldr	r3, [r3, #4]
 8019d26:	79fa      	ldrb	r2, [r7, #7]
 8019d28:	701a      	strb	r2, [r3, #0]
    p_owner->__write_delay_ms = write_delay_ms;
 8019d2a:	68fb      	ldr	r3, [r7, #12]
 8019d2c:	7e3a      	ldrb	r2, [r7, #24]
 8019d2e:	725a      	strb	r2, [r3, #9]

    switch (i_addr_size) {
 8019d30:	79bb      	ldrb	r3, [r7, #6]
 8019d32:	2b01      	cmp	r3, #1
 8019d34:	d007      	beq.n	8019d46 <pifStorage_AttachI2c+0x6e>
 8019d36:	2b02      	cmp	r3, #2
 8019d38:	d00c      	beq.n	8019d54 <pifStorage_AttachI2c+0x7c>
		p_owner->__act_read = _actStorageI2c_Read_2;
		p_owner->__act_write = _actStorageI2c_Write_2;
    	break;

    default:
    	goto fail;
 8019d3a:	bf00      	nop
    }
	return TRUE;

fail:
	pifStorage_DetachI2c(p_owner);
 8019d3c:	68f8      	ldr	r0, [r7, #12]
 8019d3e:	f000 f81f 	bl	8019d80 <pifStorage_DetachI2c>
	return FALSE;
 8019d42:	2300      	movs	r3, #0
 8019d44:	e00e      	b.n	8019d64 <pifStorage_AttachI2c+0x8c>
		p_owner->__act_read = _actStorageI2c_Read_1;
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	4a09      	ldr	r2, [pc, #36]	; (8019d70 <pifStorage_AttachI2c+0x98>)
 8019d4a:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__act_write = _actStorageI2c_Write_1;
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	4a09      	ldr	r2, [pc, #36]	; (8019d74 <pifStorage_AttachI2c+0x9c>)
 8019d50:	62da      	str	r2, [r3, #44]	; 0x2c
    	break;
 8019d52:	e006      	b.n	8019d62 <pifStorage_AttachI2c+0x8a>
		p_owner->__act_read = _actStorageI2c_Read_2;
 8019d54:	68fb      	ldr	r3, [r7, #12]
 8019d56:	4a08      	ldr	r2, [pc, #32]	; (8019d78 <pifStorage_AttachI2c+0xa0>)
 8019d58:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__act_write = _actStorageI2c_Write_2;
 8019d5a:	68fb      	ldr	r3, [r7, #12]
 8019d5c:	4a07      	ldr	r2, [pc, #28]	; (8019d7c <pifStorage_AttachI2c+0xa4>)
 8019d5e:	62da      	str	r2, [r3, #44]	; 0x2c
    	break;
 8019d60:	bf00      	nop
	return TRUE;
 8019d62:	2301      	movs	r3, #1
}
 8019d64:	4618      	mov	r0, r3
 8019d66:	3710      	adds	r7, #16
 8019d68:	46bd      	mov	sp, r7
 8019d6a:	bd80      	pop	{r7, pc}
 8019d6c:	200020d1 	.word	0x200020d1
 8019d70:	08019b8b 	.word	0x08019b8b
 8019d74:	08019bd5 	.word	0x08019bd5
 8019d78:	08019c31 	.word	0x08019c31
 8019d7c:	08019c7b 	.word	0x08019c7b

08019d80 <pifStorage_DetachI2c>:

void pifStorage_DetachI2c(PifStorage* p_owner)
{
 8019d80:	b580      	push	{r7, lr}
 8019d82:	b082      	sub	sp, #8
 8019d84:	af00      	add	r7, sp, #0
 8019d86:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_i2c) {
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	685b      	ldr	r3, [r3, #4]
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d00b      	beq.n	8019da8 <pifStorage_DetachI2c+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	685b      	ldr	r3, [r3, #4]
 8019d94:	685a      	ldr	r2, [r3, #4]
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	685b      	ldr	r3, [r3, #4]
 8019d9a:	4619      	mov	r1, r3
 8019d9c:	4610      	mov	r0, r2
 8019d9e:	f7f8 fb6d 	bl	801247c <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	2200      	movs	r2, #0
 8019da6:	605a      	str	r2, [r3, #4]
	}
	p_owner->__act_read = NULL;
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	2200      	movs	r2, #0
 8019dac:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__act_write = NULL;
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	2200      	movs	r2, #0
 8019db2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8019db4:	bf00      	nop
 8019db6:	3708      	adds	r7, #8
 8019db8:	46bd      	mov	sp, r7
 8019dba:	bd80      	pop	{r7, pc}

08019dbc <pifStorage_IsFormat>:

#ifdef __PIF_NO_USE_INLINE__

BOOL pifStorage_IsFormat(PifStorage* p_owner)
{
 8019dbc:	b580      	push	{r7, lr}
 8019dbe:	b082      	sub	sp, #8
 8019dc0:	af00      	add	r7, sp, #0
 8019dc2:	6078      	str	r0, [r7, #4]
	return (*p_owner->__fn_is_format)(p_owner);
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	68db      	ldr	r3, [r3, #12]
 8019dc8:	6878      	ldr	r0, [r7, #4]
 8019dca:	4798      	blx	r3
 8019dcc:	4603      	mov	r3, r0
}
 8019dce:	4618      	mov	r0, r3
 8019dd0:	3708      	adds	r7, #8
 8019dd2:	46bd      	mov	sp, r7
 8019dd4:	bd80      	pop	{r7, pc}

08019dd6 <pifStorage_Format>:

BOOL pifStorage_Format(PifStorage* p_owner)
{
 8019dd6:	b580      	push	{r7, lr}
 8019dd8:	b082      	sub	sp, #8
 8019dda:	af00      	add	r7, sp, #0
 8019ddc:	6078      	str	r0, [r7, #4]
	return (*p_owner->__fn_format)(p_owner);
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	691b      	ldr	r3, [r3, #16]
 8019de2:	6878      	ldr	r0, [r7, #4]
 8019de4:	4798      	blx	r3
 8019de6:	4603      	mov	r3, r0
}
 8019de8:	4618      	mov	r0, r3
 8019dea:	3708      	adds	r7, #8
 8019dec:	46bd      	mov	sp, r7
 8019dee:	bd80      	pop	{r7, pc}

08019df0 <pifStorage_Create>:

PifStorageDataInfoP pifStorage_Create(PifStorage* p_owner, uint16_t id, uint16_t size)
{
 8019df0:	b580      	push	{r7, lr}
 8019df2:	b082      	sub	sp, #8
 8019df4:	af00      	add	r7, sp, #0
 8019df6:	6078      	str	r0, [r7, #4]
 8019df8:	460b      	mov	r3, r1
 8019dfa:	807b      	strh	r3, [r7, #2]
 8019dfc:	4613      	mov	r3, r2
 8019dfe:	803b      	strh	r3, [r7, #0]
	return (*p_owner->__fn_create)(p_owner, id, size);
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	695b      	ldr	r3, [r3, #20]
 8019e04:	883a      	ldrh	r2, [r7, #0]
 8019e06:	8879      	ldrh	r1, [r7, #2]
 8019e08:	6878      	ldr	r0, [r7, #4]
 8019e0a:	4798      	blx	r3
 8019e0c:	4603      	mov	r3, r0
}
 8019e0e:	4618      	mov	r0, r3
 8019e10:	3708      	adds	r7, #8
 8019e12:	46bd      	mov	sp, r7
 8019e14:	bd80      	pop	{r7, pc}

08019e16 <pifStorage_Open>:
{
	return (*p_owner->__fn_delete)(p_owner, id);
}

PifStorageDataInfoP pifStorage_Open(PifStorage* p_owner, uint16_t id)
{
 8019e16:	b580      	push	{r7, lr}
 8019e18:	b082      	sub	sp, #8
 8019e1a:	af00      	add	r7, sp, #0
 8019e1c:	6078      	str	r0, [r7, #4]
 8019e1e:	460b      	mov	r3, r1
 8019e20:	807b      	strh	r3, [r7, #2]
	return (*p_owner->__fn_open)(p_owner, id);
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	69db      	ldr	r3, [r3, #28]
 8019e26:	887a      	ldrh	r2, [r7, #2]
 8019e28:	4611      	mov	r1, r2
 8019e2a:	6878      	ldr	r0, [r7, #4]
 8019e2c:	4798      	blx	r3
 8019e2e:	4603      	mov	r3, r0
}
 8019e30:	4618      	mov	r0, r3
 8019e32:	3708      	adds	r7, #8
 8019e34:	46bd      	mov	sp, r7
 8019e36:	bd80      	pop	{r7, pc}

08019e38 <pifStorage_Read>:

BOOL pifStorage_Read(PifStorage* p_owner, uint8_t* p_dst, PifStorageDataInfoP p_src, size_t size)
{
 8019e38:	b590      	push	{r4, r7, lr}
 8019e3a:	b085      	sub	sp, #20
 8019e3c:	af00      	add	r7, sp, #0
 8019e3e:	60f8      	str	r0, [r7, #12]
 8019e40:	60b9      	str	r1, [r7, #8]
 8019e42:	607a      	str	r2, [r7, #4]
 8019e44:	603b      	str	r3, [r7, #0]
	return (*p_owner->__fn_read)(p_owner, p_dst, p_src, size);
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	6a1c      	ldr	r4, [r3, #32]
 8019e4a:	683b      	ldr	r3, [r7, #0]
 8019e4c:	687a      	ldr	r2, [r7, #4]
 8019e4e:	68b9      	ldr	r1, [r7, #8]
 8019e50:	68f8      	ldr	r0, [r7, #12]
 8019e52:	47a0      	blx	r4
 8019e54:	4603      	mov	r3, r0
}
 8019e56:	4618      	mov	r0, r3
 8019e58:	3714      	adds	r7, #20
 8019e5a:	46bd      	mov	sp, r7
 8019e5c:	bd90      	pop	{r4, r7, pc}

08019e5e <pifStorage_Write>:

BOOL pifStorage_Write(PifStorage* p_owner, PifStorageDataInfoP p_dst, uint8_t* p_src, size_t size)
{
 8019e5e:	b590      	push	{r4, r7, lr}
 8019e60:	b085      	sub	sp, #20
 8019e62:	af00      	add	r7, sp, #0
 8019e64:	60f8      	str	r0, [r7, #12]
 8019e66:	60b9      	str	r1, [r7, #8]
 8019e68:	607a      	str	r2, [r7, #4]
 8019e6a:	603b      	str	r3, [r7, #0]
	return (*p_owner->__fn_write)(p_owner, p_dst, p_src, size);
 8019e6c:	68fb      	ldr	r3, [r7, #12]
 8019e6e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8019e70:	683b      	ldr	r3, [r7, #0]
 8019e72:	687a      	ldr	r2, [r7, #4]
 8019e74:	68b9      	ldr	r1, [r7, #8]
 8019e76:	68f8      	ldr	r0, [r7, #12]
 8019e78:	47a0      	blx	r4
 8019e7a:	4603      	mov	r3, r0
}
 8019e7c:	4618      	mov	r0, r3
 8019e7e:	3714      	adds	r7, #20
 8019e80:	46bd      	mov	sp, r7
 8019e82:	bd90      	pop	{r4, r7, pc}

08019e84 <_getNewDataNode>:

#define DATA_NODE_NULL	0xFFFF


static uint16_t _getNewDataNode(PifStorageVar* p_owner)
{
 8019e84:	b480      	push	{r7}
 8019e86:	b085      	sub	sp, #20
 8019e88:	af00      	add	r7, sp, #0
 8019e8a:	6078      	str	r0, [r7, #4]
	uint16_t node;

	node = p_owner->_p_info->free_node;
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019e90:	899b      	ldrh	r3, [r3, #12]
 8019e92:	81fb      	strh	r3, [r7, #14]
	if (node == DATA_NODE_NULL) {
 8019e94:	89fb      	ldrh	r3, [r7, #14]
 8019e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019e9a:	4293      	cmp	r3, r2
 8019e9c:	d105      	bne.n	8019eaa <_getNewDataNode+0x26>
		pif_error = E_OVERFLOW_BUFFER;
 8019e9e:	4b0c      	ldr	r3, [pc, #48]	; (8019ed0 <_getNewDataNode+0x4c>)
 8019ea0:	2204      	movs	r2, #4
 8019ea2:	701a      	strb	r2, [r3, #0]
		return DATA_NODE_NULL;
 8019ea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019ea8:	e00c      	b.n	8019ec4 <_getNewDataNode+0x40>
	}

	p_owner->_p_info->free_node = p_owner->__p_data_info[node].next_node;
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8019eae:	89fa      	ldrh	r2, [r7, #14]
 8019eb0:	4613      	mov	r3, r2
 8019eb2:	005b      	lsls	r3, r3, #1
 8019eb4:	4413      	add	r3, r2
 8019eb6:	009b      	lsls	r3, r3, #2
 8019eb8:	18ca      	adds	r2, r1, r3
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019ebe:	88d2      	ldrh	r2, [r2, #6]
 8019ec0:	819a      	strh	r2, [r3, #12]
	return node;
 8019ec2:	89fb      	ldrh	r3, [r7, #14]
}
 8019ec4:	4618      	mov	r0, r3
 8019ec6:	3714      	adds	r7, #20
 8019ec8:	46bd      	mov	sp, r7
 8019eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ece:	4770      	bx	lr
 8019ed0:	200020d1 	.word	0x200020d1

08019ed4 <_readData>:

static BOOL _readData(PifStorageVar* p_owner, uint8_t* dst, uint32_t src, size_t size, uint16_t sector_size)
{
 8019ed4:	b590      	push	{r4, r7, lr}
 8019ed6:	b087      	sub	sp, #28
 8019ed8:	af00      	add	r7, sp, #0
 8019eda:	60f8      	str	r0, [r7, #12]
 8019edc:	60b9      	str	r1, [r7, #8]
 8019ede:	607a      	str	r2, [r7, #4]
 8019ee0:	603b      	str	r3, [r7, #0]
	uint32_t ptr, len;

	ptr = 0;
 8019ee2:	2300      	movs	r3, #0
 8019ee4:	617b      	str	r3, [r7, #20]
	while (size) {
 8019ee6:	e01d      	b.n	8019f24 <_readData+0x50>
		len = size > sector_size ? sector_size : size;
 8019ee8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019eea:	683a      	ldr	r2, [r7, #0]
 8019eec:	4293      	cmp	r3, r2
 8019eee:	bf28      	it	cs
 8019ef0:	4613      	movcs	r3, r2
 8019ef2:	613b      	str	r3, [r7, #16]
		if (!(*p_owner->parent.__act_read)(&p_owner->parent, dst + ptr, src + ptr, len)) return FALSE;
 8019ef4:	68fb      	ldr	r3, [r7, #12]
 8019ef6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8019ef8:	68f8      	ldr	r0, [r7, #12]
 8019efa:	68ba      	ldr	r2, [r7, #8]
 8019efc:	697b      	ldr	r3, [r7, #20]
 8019efe:	18d1      	adds	r1, r2, r3
 8019f00:	687a      	ldr	r2, [r7, #4]
 8019f02:	697b      	ldr	r3, [r7, #20]
 8019f04:	441a      	add	r2, r3
 8019f06:	693b      	ldr	r3, [r7, #16]
 8019f08:	47a0      	blx	r4
 8019f0a:	4603      	mov	r3, r0
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d101      	bne.n	8019f14 <_readData+0x40>
 8019f10:	2300      	movs	r3, #0
 8019f12:	e00b      	b.n	8019f2c <_readData+0x58>

		ptr += len;
 8019f14:	697a      	ldr	r2, [r7, #20]
 8019f16:	693b      	ldr	r3, [r7, #16]
 8019f18:	4413      	add	r3, r2
 8019f1a:	617b      	str	r3, [r7, #20]
		size -= len;
 8019f1c:	683a      	ldr	r2, [r7, #0]
 8019f1e:	693b      	ldr	r3, [r7, #16]
 8019f20:	1ad3      	subs	r3, r2, r3
 8019f22:	603b      	str	r3, [r7, #0]
	while (size) {
 8019f24:	683b      	ldr	r3, [r7, #0]
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d1de      	bne.n	8019ee8 <_readData+0x14>
	}
	return TRUE;
 8019f2a:	2301      	movs	r3, #1
}
 8019f2c:	4618      	mov	r0, r3
 8019f2e:	371c      	adds	r7, #28
 8019f30:	46bd      	mov	sp, r7
 8019f32:	bd90      	pop	{r4, r7, pc}

08019f34 <_writeData>:

static BOOL _writeData(PifStorageVar* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 8019f34:	b590      	push	{r4, r7, lr}
 8019f36:	b089      	sub	sp, #36	; 0x24
 8019f38:	af00      	add	r7, sp, #0
 8019f3a:	60f8      	str	r0, [r7, #12]
 8019f3c:	60b9      	str	r1, [r7, #8]
 8019f3e:	607a      	str	r2, [r7, #4]
 8019f40:	603b      	str	r3, [r7, #0]
	uint16_t sector_size = p_owner->_p_info->sector_size;
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019f46:	88db      	ldrh	r3, [r3, #6]
 8019f48:	837b      	strh	r3, [r7, #26]
	uint32_t ptr, len;

	ptr = 0;
 8019f4a:	2300      	movs	r3, #0
 8019f4c:	61fb      	str	r3, [r7, #28]
	while (size) {
 8019f4e:	e01d      	b.n	8019f8c <_writeData+0x58>
		len = size > sector_size ? sector_size : size;
 8019f50:	8b7b      	ldrh	r3, [r7, #26]
 8019f52:	683a      	ldr	r2, [r7, #0]
 8019f54:	4293      	cmp	r3, r2
 8019f56:	bf28      	it	cs
 8019f58:	4613      	movcs	r3, r2
 8019f5a:	617b      	str	r3, [r7, #20]
		if (!(*p_owner->parent.__act_write)(&p_owner->parent, dst + ptr, src + ptr, len)) return FALSE;
 8019f5c:	68fb      	ldr	r3, [r7, #12]
 8019f5e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8019f60:	68f8      	ldr	r0, [r7, #12]
 8019f62:	68ba      	ldr	r2, [r7, #8]
 8019f64:	69fb      	ldr	r3, [r7, #28]
 8019f66:	18d1      	adds	r1, r2, r3
 8019f68:	687a      	ldr	r2, [r7, #4]
 8019f6a:	69fb      	ldr	r3, [r7, #28]
 8019f6c:	441a      	add	r2, r3
 8019f6e:	697b      	ldr	r3, [r7, #20]
 8019f70:	47a0      	blx	r4
 8019f72:	4603      	mov	r3, r0
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	d101      	bne.n	8019f7c <_writeData+0x48>
 8019f78:	2300      	movs	r3, #0
 8019f7a:	e00b      	b.n	8019f94 <_writeData+0x60>

		ptr += len;
 8019f7c:	69fa      	ldr	r2, [r7, #28]
 8019f7e:	697b      	ldr	r3, [r7, #20]
 8019f80:	4413      	add	r3, r2
 8019f82:	61fb      	str	r3, [r7, #28]
		size -= len;
 8019f84:	683a      	ldr	r2, [r7, #0]
 8019f86:	697b      	ldr	r3, [r7, #20]
 8019f88:	1ad3      	subs	r3, r2, r3
 8019f8a:	603b      	str	r3, [r7, #0]
	while (size) {
 8019f8c:	683b      	ldr	r3, [r7, #0]
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d1de      	bne.n	8019f50 <_writeData+0x1c>
	}
	return TRUE;
 8019f92:	2301      	movs	r3, #1
}
 8019f94:	4618      	mov	r0, r3
 8019f96:	3724      	adds	r7, #36	; 0x24
 8019f98:	46bd      	mov	sp, r7
 8019f9a:	bd90      	pop	{r4, r7, pc}

08019f9c <pifStorageVar_Init>:

BOOL pifStorageVar_Init(PifStorageVar* p_owner, PifId id)
{
 8019f9c:	b580      	push	{r7, lr}
 8019f9e:	b082      	sub	sp, #8
 8019fa0:	af00      	add	r7, sp, #0
 8019fa2:	6078      	str	r0, [r7, #4]
 8019fa4:	460b      	mov	r3, r1
 8019fa6:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d104      	bne.n	8019fb8 <pifStorageVar_Init+0x1c>
    	pif_error = E_INVALID_PARAM;
 8019fae:	4b18      	ldr	r3, [pc, #96]	; (801a010 <pifStorageVar_Init+0x74>)
 8019fb0:	2201      	movs	r2, #1
 8019fb2:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8019fb4:	2300      	movs	r3, #0
 8019fb6:	e027      	b.n	801a008 <pifStorageVar_Init+0x6c>
    }

	memset(p_owner, 0, sizeof(PifStorageVar));
 8019fb8:	2248      	movs	r2, #72	; 0x48
 8019fba:	2100      	movs	r1, #0
 8019fbc:	6878      	ldr	r0, [r7, #4]
 8019fbe:	f007 ff11 	bl	8021de4 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8019fc2:	887b      	ldrh	r3, [r7, #2]
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d106      	bne.n	8019fd6 <pifStorageVar_Init+0x3a>
 8019fc8:	4b12      	ldr	r3, [pc, #72]	; (801a014 <pifStorageVar_Init+0x78>)
 8019fca:	881b      	ldrh	r3, [r3, #0]
 8019fcc:	1c5a      	adds	r2, r3, #1
 8019fce:	b291      	uxth	r1, r2
 8019fd0:	4a10      	ldr	r2, [pc, #64]	; (801a014 <pifStorageVar_Init+0x78>)
 8019fd2:	8011      	strh	r1, [r2, #0]
 8019fd4:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	887a      	ldrh	r2, [r7, #2]
 8019fda:	801a      	strh	r2, [r3, #0]

	p_owner->parent.__fn_is_format = pifStorageVar_IsFormat;
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	4a0e      	ldr	r2, [pc, #56]	; (801a018 <pifStorageVar_Init+0x7c>)
 8019fe0:	60da      	str	r2, [r3, #12]
	p_owner->parent.__fn_format = pifStorageVar_Format;
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	4a0d      	ldr	r2, [pc, #52]	; (801a01c <pifStorageVar_Init+0x80>)
 8019fe6:	611a      	str	r2, [r3, #16]
	p_owner->parent.__fn_create = pifStorageVar_Create;
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	4a0d      	ldr	r2, [pc, #52]	; (801a020 <pifStorageVar_Init+0x84>)
 8019fec:	615a      	str	r2, [r3, #20]
	p_owner->parent.__fn_delete = pifStorageVar_Delete;
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	4a0c      	ldr	r2, [pc, #48]	; (801a024 <pifStorageVar_Init+0x88>)
 8019ff2:	619a      	str	r2, [r3, #24]
	p_owner->parent.__fn_open = pifStorageVar_Open;
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	4a0c      	ldr	r2, [pc, #48]	; (801a028 <pifStorageVar_Init+0x8c>)
 8019ff8:	61da      	str	r2, [r3, #28]
	p_owner->parent.__fn_read = pifStorageVar_Read;
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	4a0b      	ldr	r2, [pc, #44]	; (801a02c <pifStorageVar_Init+0x90>)
 8019ffe:	621a      	str	r2, [r3, #32]
	p_owner->parent.__fn_write = pifStorageVar_Write;
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	4a0b      	ldr	r2, [pc, #44]	; (801a030 <pifStorageVar_Init+0x94>)
 801a004:	625a      	str	r2, [r3, #36]	; 0x24
	return TRUE;
 801a006:	2301      	movs	r3, #1
}
 801a008:	4618      	mov	r0, r3
 801a00a:	3708      	adds	r7, #8
 801a00c:	46bd      	mov	sp, r7
 801a00e:	bd80      	pop	{r7, pc}
 801a010:	200020d1 	.word	0x200020d1
 801a014:	2000005c 	.word	0x2000005c
 801a018:	0801a25f 	.word	0x0801a25f
 801a01c:	0801a279 	.word	0x0801a279
 801a020:	0801a419 	.word	0x0801a419
 801a024:	0801a6c5 	.word	0x0801a6c5
 801a028:	0801a7e1 	.word	0x0801a7e1
 801a02c:	0801a875 	.word	0x0801a875
 801a030:	0801a8cd 	.word	0x0801a8cd

0801a034 <pifStorageVar_Clear>:

void pifStorageVar_Clear(PifStorageVar* p_owner)
{
 801a034:	b580      	push	{r7, lr}
 801a036:	b082      	sub	sp, #8
 801a038:	af00      	add	r7, sp, #0
 801a03a:	6078      	str	r0, [r7, #4]
    if (p_owner->__p_info_buffer) {
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a040:	2b00      	cmp	r3, #0
 801a042:	d007      	beq.n	801a054 <pifStorageVar_Clear+0x20>
        free(p_owner->__p_info_buffer);
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a048:	4618      	mov	r0, r3
 801a04a:	f007 feb5 	bl	8021db8 <free>
        p_owner->__p_info_buffer = NULL;
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	2200      	movs	r2, #0
 801a052:	641a      	str	r2, [r3, #64]	; 0x40
    }
	p_owner->parent.__fn_is_format = NULL;
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	2200      	movs	r2, #0
 801a058:	60da      	str	r2, [r3, #12]
	p_owner->parent.__fn_format = NULL;
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	2200      	movs	r2, #0
 801a05e:	611a      	str	r2, [r3, #16]
	p_owner->parent.__fn_create = NULL;
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	2200      	movs	r2, #0
 801a064:	615a      	str	r2, [r3, #20]
	p_owner->parent.__fn_delete = NULL;
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	2200      	movs	r2, #0
 801a06a:	619a      	str	r2, [r3, #24]
	p_owner->parent.__fn_open = NULL;
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	2200      	movs	r2, #0
 801a070:	61da      	str	r2, [r3, #28]
	p_owner->parent.__fn_read = NULL;
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	2200      	movs	r2, #0
 801a076:	621a      	str	r2, [r3, #32]
	p_owner->parent.__fn_write = NULL;
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	2200      	movs	r2, #0
 801a07c:	625a      	str	r2, [r3, #36]	; 0x24
}
 801a07e:	bf00      	nop
 801a080:	3708      	adds	r7, #8
 801a082:	46bd      	mov	sp, r7
 801a084:	bd80      	pop	{r7, pc}
	...

0801a088 <pifStorageVar_SetMedia>:

BOOL pifStorageVar_SetMedia(PifStorageVar* p_owner, uint16_t sector_size, uint32_t storage_volume, uint8_t data_info_count)
{
 801a088:	b590      	push	{r4, r7, lr}
 801a08a:	b089      	sub	sp, #36	; 0x24
 801a08c:	af02      	add	r7, sp, #8
 801a08e:	60f8      	str	r0, [r7, #12]
 801a090:	607a      	str	r2, [r7, #4]
 801a092:	461a      	mov	r2, r3
 801a094:	460b      	mov	r3, r1
 801a096:	817b      	strh	r3, [r7, #10]
 801a098:	4613      	mov	r3, r2
 801a09a:	727b      	strb	r3, [r7, #9]
    PifStorageVarInfo* p_info;

    if (!p_owner || sector_size < 16 || !storage_volume || !data_info_count) {
 801a09c:	68fb      	ldr	r3, [r7, #12]
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d008      	beq.n	801a0b4 <pifStorageVar_SetMedia+0x2c>
 801a0a2:	897b      	ldrh	r3, [r7, #10]
 801a0a4:	2b0f      	cmp	r3, #15
 801a0a6:	d905      	bls.n	801a0b4 <pifStorageVar_SetMedia+0x2c>
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d002      	beq.n	801a0b4 <pifStorageVar_SetMedia+0x2c>
 801a0ae:	7a7b      	ldrb	r3, [r7, #9]
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	d104      	bne.n	801a0be <pifStorageVar_SetMedia+0x36>
    	pif_error = E_INVALID_PARAM;
 801a0b4:	4b5c      	ldr	r3, [pc, #368]	; (801a228 <pifStorageVar_SetMedia+0x1a0>)
 801a0b6:	2201      	movs	r2, #1
 801a0b8:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801a0ba:	2300      	movs	r3, #0
 801a0bc:	e0af      	b.n	801a21e <pifStorageVar_SetMedia+0x196>
    }

    uint32_t max_sector_count = storage_volume / sector_size;
 801a0be:	897b      	ldrh	r3, [r7, #10]
 801a0c0:	687a      	ldr	r2, [r7, #4]
 801a0c2:	fbb2 f3f3 	udiv	r3, r2, r3
 801a0c6:	617b      	str	r3, [r7, #20]
    if (!max_sector_count || max_sector_count > 65535) {
 801a0c8:	697b      	ldr	r3, [r7, #20]
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d003      	beq.n	801a0d6 <pifStorageVar_SetMedia+0x4e>
 801a0ce:	697b      	ldr	r3, [r7, #20]
 801a0d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a0d4:	d304      	bcc.n	801a0e0 <pifStorageVar_SetMedia+0x58>
    	pif_error = E_INVALID_PARAM;
 801a0d6:	4b54      	ldr	r3, [pc, #336]	; (801a228 <pifStorageVar_SetMedia+0x1a0>)
 801a0d8:	2201      	movs	r2, #1
 801a0da:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801a0dc:	2300      	movs	r3, #0
 801a0de:	e09e      	b.n	801a21e <pifStorageVar_SetMedia+0x196>
    }

	p_owner->__info_sectors = (sizeof(PifStorageVarInfo) + sizeof(PifStorageVarDataInfo) * data_info_count + sector_size - 1) / sector_size;
 801a0e0:	7a7a      	ldrb	r2, [r7, #9]
 801a0e2:	4613      	mov	r3, r2
 801a0e4:	005b      	lsls	r3, r3, #1
 801a0e6:	4413      	add	r3, r2
 801a0e8:	009b      	lsls	r3, r3, #2
 801a0ea:	461a      	mov	r2, r3
 801a0ec:	897b      	ldrh	r3, [r7, #10]
 801a0ee:	4413      	add	r3, r2
 801a0f0:	f103 020f 	add.w	r2, r3, #15
 801a0f4:	897b      	ldrh	r3, [r7, #10]
 801a0f6:	fbb2 f3f3 	udiv	r3, r2, r3
 801a0fa:	b29a      	uxth	r2, r3
 801a0fc:	68fb      	ldr	r3, [r7, #12]
 801a0fe:	879a      	strh	r2, [r3, #60]	; 0x3c
	p_owner->__info_bytes = p_owner->__info_sectors * sector_size;
 801a100:	68fb      	ldr	r3, [r7, #12]
 801a102:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801a104:	461a      	mov	r2, r3
 801a106:	897b      	ldrh	r3, [r7, #10]
 801a108:	fb02 f303 	mul.w	r3, r2, r3
 801a10c:	461a      	mov	r2, r3
 801a10e:	68fb      	ldr	r3, [r7, #12]
 801a110:	639a      	str	r2, [r3, #56]	; 0x38

    p_owner->__p_info_buffer = calloc(1, p_owner->__info_bytes);
 801a112:	68fb      	ldr	r3, [r7, #12]
 801a114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a116:	4619      	mov	r1, r3
 801a118:	2001      	movs	r0, #1
 801a11a:	f007 fe13 	bl	8021d44 <calloc>
 801a11e:	4603      	mov	r3, r0
 801a120:	461a      	mov	r2, r3
 801a122:	68fb      	ldr	r3, [r7, #12]
 801a124:	641a      	str	r2, [r3, #64]	; 0x40
    if (!p_owner->__p_info_buffer) {
 801a126:	68fb      	ldr	r3, [r7, #12]
 801a128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d104      	bne.n	801a138 <pifStorageVar_SetMedia+0xb0>
		pif_error = E_OUT_OF_HEAP;
 801a12e:	4b3e      	ldr	r3, [pc, #248]	; (801a228 <pifStorageVar_SetMedia+0x1a0>)
 801a130:	2203      	movs	r2, #3
 801a132:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801a134:	2300      	movs	r3, #0
 801a136:	e072      	b.n	801a21e <pifStorageVar_SetMedia+0x196>
	}

    if (!_readData(p_owner, p_owner->__p_info_buffer, 0, p_owner->__info_bytes, sector_size)) {
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801a13c:	68fb      	ldr	r3, [r7, #12]
 801a13e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a140:	897b      	ldrh	r3, [r7, #10]
 801a142:	9300      	str	r3, [sp, #0]
 801a144:	4613      	mov	r3, r2
 801a146:	2200      	movs	r2, #0
 801a148:	68f8      	ldr	r0, [r7, #12]
 801a14a:	f7ff fec3 	bl	8019ed4 <_readData>
 801a14e:	4603      	mov	r3, r0
 801a150:	2b00      	cmp	r3, #0
 801a152:	d108      	bne.n	801a166 <pifStorageVar_SetMedia+0xde>
    	pif_error = E_ACCESS_FAILED;
 801a154:	4b34      	ldr	r3, [pc, #208]	; (801a228 <pifStorageVar_SetMedia+0x1a0>)
 801a156:	220d      	movs	r2, #13
 801a158:	701a      	strb	r2, [r3, #0]
    	goto fail;
 801a15a:	bf00      	nop
	p_info->sector_size = sector_size;
	p_info->max_sector_count = max_sector_count;
	return TRUE;

fail:
	if (p_owner->__p_info_buffer) {
 801a15c:	68fb      	ldr	r3, [r7, #12]
 801a15e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a160:	2b00      	cmp	r3, #0
 801a162:	d05b      	beq.n	801a21c <pifStorageVar_SetMedia+0x194>
 801a164:	e052      	b.n	801a20c <pifStorageVar_SetMedia+0x184>
    p_owner->_p_info = (PifStorageVarInfo*)p_owner->__p_info_buffer;
 801a166:	68fb      	ldr	r3, [r7, #12]
 801a168:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a16a:	68fb      	ldr	r3, [r7, #12]
 801a16c:	631a      	str	r2, [r3, #48]	; 0x30
    p_owner->__p_data_info = (PifStorageVarDataInfo*)(p_owner->__p_info_buffer + sizeof(PifStorageVarInfo));
 801a16e:	68fb      	ldr	r3, [r7, #12]
 801a170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a172:	f103 0210 	add.w	r2, r3, #16
 801a176:	68fb      	ldr	r3, [r7, #12]
 801a178:	645a      	str	r2, [r3, #68]	; 0x44
    p_info = p_owner->_p_info;
 801a17a:	68fb      	ldr	r3, [r7, #12]
 801a17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a17e:	613b      	str	r3, [r7, #16]
    if (p_info->magin_code[0] != 'p' || p_info->magin_code[1] != 'i' ||
 801a180:	693b      	ldr	r3, [r7, #16]
 801a182:	781b      	ldrb	r3, [r3, #0]
 801a184:	2b70      	cmp	r3, #112	; 0x70
 801a186:	d121      	bne.n	801a1cc <pifStorageVar_SetMedia+0x144>
 801a188:	693b      	ldr	r3, [r7, #16]
 801a18a:	785b      	ldrb	r3, [r3, #1]
 801a18c:	2b69      	cmp	r3, #105	; 0x69
 801a18e:	d11d      	bne.n	801a1cc <pifStorageVar_SetMedia+0x144>
            p_info->magin_code[2] != 'f' || p_info->magin_code[3] != 's') {
 801a190:	693b      	ldr	r3, [r7, #16]
 801a192:	789b      	ldrb	r3, [r3, #2]
    if (p_info->magin_code[0] != 'p' || p_info->magin_code[1] != 'i' ||
 801a194:	2b66      	cmp	r3, #102	; 0x66
 801a196:	d119      	bne.n	801a1cc <pifStorageVar_SetMedia+0x144>
            p_info->magin_code[2] != 'f' || p_info->magin_code[3] != 's') {
 801a198:	693b      	ldr	r3, [r7, #16]
 801a19a:	78db      	ldrb	r3, [r3, #3]
 801a19c:	2b73      	cmp	r3, #115	; 0x73
 801a19e:	d115      	bne.n	801a1cc <pifStorageVar_SetMedia+0x144>
    if (p_info->data_info_count != data_info_count) {
 801a1a0:	693b      	ldr	r3, [r7, #16]
 801a1a2:	795b      	ldrb	r3, [r3, #5]
 801a1a4:	7a7a      	ldrb	r2, [r7, #9]
 801a1a6:	429a      	cmp	r2, r3
 801a1a8:	d112      	bne.n	801a1d0 <pifStorageVar_SetMedia+0x148>
    if (p_info->crc_16 != pifCrc16(p_owner->__p_info_buffer, sizeof(PifStorageVarInfo) - 6)) {
 801a1aa:	693b      	ldr	r3, [r7, #16]
 801a1ac:	89dc      	ldrh	r4, [r3, #14]
 801a1ae:	68fb      	ldr	r3, [r7, #12]
 801a1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a1b2:	210a      	movs	r1, #10
 801a1b4:	4618      	mov	r0, r3
 801a1b6:	f7f7 fe60 	bl	8011e7a <pifCrc16>
 801a1ba:	4603      	mov	r3, r0
 801a1bc:	429c      	cmp	r4, r3
 801a1be:	d109      	bne.n	801a1d4 <pifStorageVar_SetMedia+0x14c>
	p_owner->__is_format = TRUE;
 801a1c0:	68fb      	ldr	r3, [r7, #12]
 801a1c2:	2201      	movs	r2, #1
 801a1c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	return TRUE;
 801a1c8:	2301      	movs	r3, #1
 801a1ca:	e028      	b.n	801a21e <pifStorageVar_SetMedia+0x196>
        goto set;
 801a1cc:	bf00      	nop
 801a1ce:	e002      	b.n	801a1d6 <pifStorageVar_SetMedia+0x14e>
        goto set;
 801a1d0:	bf00      	nop
 801a1d2:	e000      	b.n	801a1d6 <pifStorageVar_SetMedia+0x14e>
        goto set;
 801a1d4:	bf00      	nop
	p_info->magin_code[0] = 'p';
 801a1d6:	693b      	ldr	r3, [r7, #16]
 801a1d8:	2270      	movs	r2, #112	; 0x70
 801a1da:	701a      	strb	r2, [r3, #0]
	p_info->magin_code[1] = 'i';
 801a1dc:	693b      	ldr	r3, [r7, #16]
 801a1de:	2269      	movs	r2, #105	; 0x69
 801a1e0:	705a      	strb	r2, [r3, #1]
	p_info->magin_code[2] = 'f';
 801a1e2:	693b      	ldr	r3, [r7, #16]
 801a1e4:	2266      	movs	r2, #102	; 0x66
 801a1e6:	709a      	strb	r2, [r3, #2]
	p_info->magin_code[3] = 's';
 801a1e8:	693b      	ldr	r3, [r7, #16]
 801a1ea:	2273      	movs	r2, #115	; 0x73
 801a1ec:	70da      	strb	r2, [r3, #3]
	p_info->verion = 1;
 801a1ee:	693b      	ldr	r3, [r7, #16]
 801a1f0:	2201      	movs	r2, #1
 801a1f2:	711a      	strb	r2, [r3, #4]
	p_info->data_info_count = data_info_count;
 801a1f4:	693b      	ldr	r3, [r7, #16]
 801a1f6:	7a7a      	ldrb	r2, [r7, #9]
 801a1f8:	715a      	strb	r2, [r3, #5]
	p_info->sector_size = sector_size;
 801a1fa:	693b      	ldr	r3, [r7, #16]
 801a1fc:	897a      	ldrh	r2, [r7, #10]
 801a1fe:	80da      	strh	r2, [r3, #6]
	p_info->max_sector_count = max_sector_count;
 801a200:	697b      	ldr	r3, [r7, #20]
 801a202:	b29a      	uxth	r2, r3
 801a204:	693b      	ldr	r3, [r7, #16]
 801a206:	811a      	strh	r2, [r3, #8]
	return TRUE;
 801a208:	2301      	movs	r3, #1
 801a20a:	e008      	b.n	801a21e <pifStorageVar_SetMedia+0x196>
		free(p_owner->__p_info_buffer);
 801a20c:	68fb      	ldr	r3, [r7, #12]
 801a20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a210:	4618      	mov	r0, r3
 801a212:	f007 fdd1 	bl	8021db8 <free>
		p_owner->__p_info_buffer = NULL;
 801a216:	68fb      	ldr	r3, [r7, #12]
 801a218:	2200      	movs	r2, #0
 801a21a:	641a      	str	r2, [r3, #64]	; 0x40
	}
    return FALSE;
 801a21c:	2300      	movs	r3, #0
}
 801a21e:	4618      	mov	r0, r3
 801a220:	371c      	adds	r7, #28
 801a222:	46bd      	mov	sp, r7
 801a224:	bd90      	pop	{r4, r7, pc}
 801a226:	bf00      	nop
 801a228:	200020d1 	.word	0x200020d1

0801a22c <pifStorageVar_AttachI2c>:
{
	return pifStorage_AttachActStorage(&p_owner->parent, act_read, act_write);
}

BOOL pifStorageVar_AttachI2c(PifStorageVar* p_owner, PifI2cPort* p_port, uint8_t addr, PifStorageI2cIAddrSize i_addr_size, uint8_t write_delay_ms)
{
 801a22c:	b580      	push	{r7, lr}
 801a22e:	b086      	sub	sp, #24
 801a230:	af02      	add	r7, sp, #8
 801a232:	60f8      	str	r0, [r7, #12]
 801a234:	60b9      	str	r1, [r7, #8]
 801a236:	4611      	mov	r1, r2
 801a238:	461a      	mov	r2, r3
 801a23a:	460b      	mov	r3, r1
 801a23c:	71fb      	strb	r3, [r7, #7]
 801a23e:	4613      	mov	r3, r2
 801a240:	71bb      	strb	r3, [r7, #6]
	return pifStorage_AttachI2c(&p_owner->parent, p_port, addr, i_addr_size, write_delay_ms);
 801a242:	68f8      	ldr	r0, [r7, #12]
 801a244:	79b9      	ldrb	r1, [r7, #6]
 801a246:	79fa      	ldrb	r2, [r7, #7]
 801a248:	7e3b      	ldrb	r3, [r7, #24]
 801a24a:	9300      	str	r3, [sp, #0]
 801a24c:	460b      	mov	r3, r1
 801a24e:	68b9      	ldr	r1, [r7, #8]
 801a250:	f7ff fd42 	bl	8019cd8 <pifStorage_AttachI2c>
 801a254:	4603      	mov	r3, r0
}
 801a256:	4618      	mov	r0, r3
 801a258:	3710      	adds	r7, #16
 801a25a:	46bd      	mov	sp, r7
 801a25c:	bd80      	pop	{r7, pc}

0801a25e <pifStorageVar_IsFormat>:

#endif

BOOL pifStorageVar_IsFormat(PifStorage* p_parent)
{
 801a25e:	b480      	push	{r7}
 801a260:	b083      	sub	sp, #12
 801a262:	af00      	add	r7, sp, #0
 801a264:	6078      	str	r0, [r7, #4]
	return ((PifStorageVar*)p_parent)->__is_format;
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801a26c:	4618      	mov	r0, r3
 801a26e:	370c      	adds	r7, #12
 801a270:	46bd      	mov	sp, r7
 801a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a276:	4770      	bx	lr

0801a278 <pifStorageVar_Format>:

BOOL pifStorageVar_Format(PifStorage* p_parent)
{
 801a278:	b590      	push	{r4, r7, lr}
 801a27a:	b08d      	sub	sp, #52	; 0x34
 801a27c:	af00      	add	r7, sp, #0
 801a27e:	6078      	str	r0, [r7, #4]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	627b      	str	r3, [r7, #36]	; 0x24
    PifStorageVarInfo* p_info = p_owner->_p_info;
 801a284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a288:	623b      	str	r3, [r7, #32]
    PifStorageVarDataInfo* p_data_info;
    uint8_t ptr, remain, k, len, data[16];

    if (!p_owner) {
 801a28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d104      	bne.n	801a29a <pifStorageVar_Format+0x22>
    	pif_error = E_INVALID_PARAM;
 801a290:	4b60      	ldr	r3, [pc, #384]	; (801a414 <pifStorageVar_Format+0x19c>)
 801a292:	2201      	movs	r2, #1
 801a294:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801a296:	2300      	movs	r3, #0
 801a298:	e0b8      	b.n	801a40c <pifStorageVar_Format+0x194>
    }

	p_info->first_node = DATA_NODE_NULL;
 801a29a:	6a3b      	ldr	r3, [r7, #32]
 801a29c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a2a0:	815a      	strh	r2, [r3, #10]
	p_info->free_node = 0;
 801a2a2:	6a3b      	ldr	r3, [r7, #32]
 801a2a4:	2200      	movs	r2, #0
 801a2a6:	819a      	strh	r2, [r3, #12]
    p_info->crc_16 = pifCrc16((uint8_t*)p_info, sizeof(PifStorageVarInfo) - 6);
 801a2a8:	210a      	movs	r1, #10
 801a2aa:	6a38      	ldr	r0, [r7, #32]
 801a2ac:	f7f7 fde5 	bl	8011e7a <pifCrc16>
 801a2b0:	4603      	mov	r3, r0
 801a2b2:	461a      	mov	r2, r3
 801a2b4:	6a3b      	ldr	r3, [r7, #32]
 801a2b6:	81da      	strh	r2, [r3, #14]

    memset(p_owner->__p_info_buffer + sizeof(PifStorageVarInfo), 0xFF, p_owner->__info_bytes - sizeof(PifStorageVarInfo));
 801a2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a2bc:	f103 0010 	add.w	r0, r3, #16
 801a2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a2c4:	3b10      	subs	r3, #16
 801a2c6:	461a      	mov	r2, r3
 801a2c8:	21ff      	movs	r1, #255	; 0xff
 801a2ca:	f007 fd8b 	bl	8021de4 <memset>

    for (int i = 0; i < p_info->data_info_count - 1; i++) {
 801a2ce:	2300      	movs	r3, #0
 801a2d0:	62bb      	str	r3, [r7, #40]	; 0x28
 801a2d2:	e019      	b.n	801a308 <pifStorageVar_Format+0x90>
    	p_data_info = &p_owner->__p_data_info[i];
 801a2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2d6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a2d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a2da:	4613      	mov	r3, r2
 801a2dc:	005b      	lsls	r3, r3, #1
 801a2de:	4413      	add	r3, r2
 801a2e0:	009b      	lsls	r3, r3, #2
 801a2e2:	440b      	add	r3, r1
 801a2e4:	61fb      	str	r3, [r7, #28]
    	p_data_info->next_node = i + 1;
 801a2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2e8:	b29b      	uxth	r3, r3
 801a2ea:	3301      	adds	r3, #1
 801a2ec:	b29a      	uxth	r2, r3
 801a2ee:	69fb      	ldr	r3, [r7, #28]
 801a2f0:	80da      	strh	r2, [r3, #6]
    	p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801a2f2:	2106      	movs	r1, #6
 801a2f4:	69f8      	ldr	r0, [r7, #28]
 801a2f6:	f7f7 fdc0 	bl	8011e7a <pifCrc16>
 801a2fa:	4603      	mov	r3, r0
 801a2fc:	461a      	mov	r2, r3
 801a2fe:	69fb      	ldr	r3, [r7, #28]
 801a300:	815a      	strh	r2, [r3, #10]
    for (int i = 0; i < p_info->data_info_count - 1; i++) {
 801a302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a304:	3301      	adds	r3, #1
 801a306:	62bb      	str	r3, [r7, #40]	; 0x28
 801a308:	6a3b      	ldr	r3, [r7, #32]
 801a30a:	795b      	ldrb	r3, [r3, #5]
 801a30c:	3b01      	subs	r3, #1
 801a30e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a310:	429a      	cmp	r2, r3
 801a312:	dbdf      	blt.n	801a2d4 <pifStorageVar_Format+0x5c>
	}
	p_data_info = &p_owner->__p_data_info[p_info->data_info_count - 1];
 801a314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a316:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a318:	6a3b      	ldr	r3, [r7, #32]
 801a31a:	795b      	ldrb	r3, [r3, #5]
 801a31c:	4619      	mov	r1, r3
 801a31e:	460b      	mov	r3, r1
 801a320:	005b      	lsls	r3, r3, #1
 801a322:	440b      	add	r3, r1
 801a324:	009b      	lsls	r3, r3, #2
 801a326:	3b0c      	subs	r3, #12
 801a328:	4413      	add	r3, r2
 801a32a:	61fb      	str	r3, [r7, #28]
	p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801a32c:	2106      	movs	r1, #6
 801a32e:	69f8      	ldr	r0, [r7, #28]
 801a330:	f7f7 fda3 	bl	8011e7a <pifCrc16>
 801a334:	4603      	mov	r3, r0
 801a336:	461a      	mov	r2, r3
 801a338:	69fb      	ldr	r3, [r7, #28]
 801a33a:	815a      	strh	r2, [r3, #10]

    if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801a33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a33e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a344:	2100      	movs	r1, #0
 801a346:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a348:	f7ff fdf4 	bl	8019f34 <_writeData>
 801a34c:	4603      	mov	r3, r0
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d104      	bne.n	801a35c <pifStorageVar_Format+0xe4>
    	pif_error = E_ACCESS_FAILED;
 801a352:	4b30      	ldr	r3, [pc, #192]	; (801a414 <pifStorageVar_Format+0x19c>)
 801a354:	220d      	movs	r2, #13
 801a356:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801a358:	2300      	movs	r3, #0
 801a35a:	e057      	b.n	801a40c <pifStorageVar_Format+0x194>
    }

    ptr = 0;
 801a35c:	2300      	movs	r3, #0
 801a35e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    remain = p_owner->__info_bytes;
 801a362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a366:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    while (remain) {
 801a36a:	e046      	b.n	801a3fa <pifStorageVar_Format+0x182>
    	len = remain > 16 ? 16 : remain;
 801a36c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801a370:	2b10      	cmp	r3, #16
 801a372:	bf28      	it	cs
 801a374:	2310      	movcs	r3, #16
 801a376:	76fb      	strb	r3, [r7, #27]
        if (!(*p_owner->parent.__act_read)(p_parent, data, ptr, len)) {
 801a378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a37a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801a37c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801a380:	7efb      	ldrb	r3, [r7, #27]
 801a382:	f107 0108 	add.w	r1, r7, #8
 801a386:	6878      	ldr	r0, [r7, #4]
 801a388:	47a0      	blx	r4
 801a38a:	4603      	mov	r3, r0
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	d104      	bne.n	801a39a <pifStorageVar_Format+0x122>
        	pif_error = E_ACCESS_FAILED;
 801a390:	4b20      	ldr	r3, [pc, #128]	; (801a414 <pifStorageVar_Format+0x19c>)
 801a392:	220d      	movs	r2, #13
 801a394:	701a      	strb	r2, [r3, #0]
            return FALSE;
 801a396:	2300      	movs	r3, #0
 801a398:	e038      	b.n	801a40c <pifStorageVar_Format+0x194>
        }
        for (k = 0; k < len; k++) {
 801a39a:	2300      	movs	r3, #0
 801a39c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801a3a0:	e01a      	b.n	801a3d8 <pifStorageVar_Format+0x160>
        	if (p_owner->__p_info_buffer[ptr + k] != data[k]) {
 801a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a3a6:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 801a3aa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801a3ae:	440a      	add	r2, r1
 801a3b0:	4413      	add	r3, r2
 801a3b2:	781a      	ldrb	r2, [r3, #0]
 801a3b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801a3b8:	3330      	adds	r3, #48	; 0x30
 801a3ba:	443b      	add	r3, r7
 801a3bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801a3c0:	429a      	cmp	r2, r3
 801a3c2:	d004      	beq.n	801a3ce <pifStorageVar_Format+0x156>
            	pif_error = E_IS_NOT_FORMATED;
 801a3c4:	4b13      	ldr	r3, [pc, #76]	; (801a414 <pifStorageVar_Format+0x19c>)
 801a3c6:	220f      	movs	r2, #15
 801a3c8:	701a      	strb	r2, [r3, #0]
        		return FALSE;
 801a3ca:	2300      	movs	r3, #0
 801a3cc:	e01e      	b.n	801a40c <pifStorageVar_Format+0x194>
        for (k = 0; k < len; k++) {
 801a3ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801a3d2:	3301      	adds	r3, #1
 801a3d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801a3d8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801a3dc:	7efb      	ldrb	r3, [r7, #27]
 801a3de:	429a      	cmp	r2, r3
 801a3e0:	d3df      	bcc.n	801a3a2 <pifStorageVar_Format+0x12a>
        	}
        }
        ptr += len;
 801a3e2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801a3e6:	7efb      	ldrb	r3, [r7, #27]
 801a3e8:	4413      	add	r3, r2
 801a3ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        remain -= len;
 801a3ee:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801a3f2:	7efb      	ldrb	r3, [r7, #27]
 801a3f4:	1ad3      	subs	r3, r2, r3
 801a3f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    while (remain) {
 801a3fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d1b4      	bne.n	801a36c <pifStorageVar_Format+0xf4>
    }

    p_owner->__is_format = TRUE;
 801a402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a404:	2201      	movs	r2, #1
 801a406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	return TRUE;
 801a40a:	2301      	movs	r3, #1
}
 801a40c:	4618      	mov	r0, r3
 801a40e:	3734      	adds	r7, #52	; 0x34
 801a410:	46bd      	mov	sp, r7
 801a412:	bd90      	pop	{r4, r7, pc}
 801a414:	200020d1 	.word	0x200020d1

0801a418 <pifStorageVar_Create>:

PifStorageDataInfoP pifStorageVar_Create(PifStorage* p_parent, uint16_t id, uint16_t size)
{
 801a418:	b580      	push	{r7, lr}
 801a41a:	b08a      	sub	sp, #40	; 0x28
 801a41c:	af00      	add	r7, sp, #0
 801a41e:	6078      	str	r0, [r7, #4]
 801a420:	460b      	mov	r3, r1
 801a422:	807b      	strh	r3, [r7, #2]
 801a424:	4613      	mov	r3, r2
 801a426:	803b      	strh	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	61fb      	str	r3, [r7, #28]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801a42c:	69fb      	ldr	r3, [r7, #28]
 801a42e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a430:	61bb      	str	r3, [r7, #24]
	PifStorageVarDataInfo* p_cur_data;
	PifStorageVarDataInfo* p_new_data;
	uint16_t cur_node, new_node, last, sector_size = p_info->sector_size;
 801a432:	69bb      	ldr	r3, [r7, #24]
 801a434:	88db      	ldrh	r3, [r3, #6]
 801a436:	82fb      	strh	r3, [r7, #22]
	uint16_t sectors = (size + sector_size - 1) / sector_size;
 801a438:	883a      	ldrh	r2, [r7, #0]
 801a43a:	8afb      	ldrh	r3, [r7, #22]
 801a43c:	4413      	add	r3, r2
 801a43e:	1e5a      	subs	r2, r3, #1
 801a440:	8afb      	ldrh	r3, [r7, #22]
 801a442:	fb92 f3f3 	sdiv	r3, r2, r3
 801a446:	82bb      	strh	r3, [r7, #20]

    if (!p_owner || id == 0xFF) {
 801a448:	69fb      	ldr	r3, [r7, #28]
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	d002      	beq.n	801a454 <pifStorageVar_Create+0x3c>
 801a44e:	887b      	ldrh	r3, [r7, #2]
 801a450:	2bff      	cmp	r3, #255	; 0xff
 801a452:	d104      	bne.n	801a45e <pifStorageVar_Create+0x46>
    	pif_error = E_INVALID_PARAM;
 801a454:	4b9a      	ldr	r3, [pc, #616]	; (801a6c0 <pifStorageVar_Create+0x2a8>)
 801a456:	2201      	movs	r2, #1
 801a458:	701a      	strb	r2, [r3, #0]
	    return NULL;
 801a45a:	2300      	movs	r3, #0
 801a45c:	e12b      	b.n	801a6b6 <pifStorageVar_Create+0x29e>
    }

	if (!p_owner->__is_format) {
 801a45e:	69fb      	ldr	r3, [r7, #28]
 801a460:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a464:	2b00      	cmp	r3, #0
 801a466:	d104      	bne.n	801a472 <pifStorageVar_Create+0x5a>
		pif_error = E_IS_NOT_FORMATED;
 801a468:	4b95      	ldr	r3, [pc, #596]	; (801a6c0 <pifStorageVar_Create+0x2a8>)
 801a46a:	220f      	movs	r2, #15
 801a46c:	701a      	strb	r2, [r3, #0]
		return NULL;
 801a46e:	2300      	movs	r3, #0
 801a470:	e121      	b.n	801a6b6 <pifStorageVar_Create+0x29e>
	}

	if (p_info->first_node == DATA_NODE_NULL) {
 801a472:	69bb      	ldr	r3, [r7, #24]
 801a474:	895b      	ldrh	r3, [r3, #10]
 801a476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a47a:	4293      	cmp	r3, r2
 801a47c:	d127      	bne.n	801a4ce <pifStorageVar_Create+0xb6>
		if (sectors > p_owner->_p_info->max_sector_count) {
 801a47e:	69fb      	ldr	r3, [r7, #28]
 801a480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a482:	891b      	ldrh	r3, [r3, #8]
 801a484:	8aba      	ldrh	r2, [r7, #20]
 801a486:	429a      	cmp	r2, r3
 801a488:	d904      	bls.n	801a494 <pifStorageVar_Create+0x7c>
			pif_error = E_OVERFLOW_BUFFER;
 801a48a:	4b8d      	ldr	r3, [pc, #564]	; (801a6c0 <pifStorageVar_Create+0x2a8>)
 801a48c:	2204      	movs	r2, #4
 801a48e:	701a      	strb	r2, [r3, #0]
			return NULL;
 801a490:	2300      	movs	r3, #0
 801a492:	e110      	b.n	801a6b6 <pifStorageVar_Create+0x29e>
		}

		last = p_owner->__info_sectors;
 801a494:	69fb      	ldr	r3, [r7, #28]
 801a496:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801a498:	843b      	strh	r3, [r7, #32]

		new_node = _getNewDataNode(p_owner);
 801a49a:	69f8      	ldr	r0, [r7, #28]
 801a49c:	f7ff fcf2 	bl	8019e84 <_getNewDataNode>
 801a4a0:	4603      	mov	r3, r0
 801a4a2:	81fb      	strh	r3, [r7, #14]

		p_new_data = &p_owner->__p_data_info[new_node];
 801a4a4:	69fb      	ldr	r3, [r7, #28]
 801a4a6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a4a8:	89fa      	ldrh	r2, [r7, #14]
 801a4aa:	4613      	mov	r3, r2
 801a4ac:	005b      	lsls	r3, r3, #1
 801a4ae:	4413      	add	r3, r2
 801a4b0:	009b      	lsls	r3, r3, #2
 801a4b2:	440b      	add	r3, r1
 801a4b4:	627b      	str	r3, [r7, #36]	; 0x24
		p_new_data->next_node = p_info->first_node;
 801a4b6:	69bb      	ldr	r3, [r7, #24]
 801a4b8:	895a      	ldrh	r2, [r3, #10]
 801a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4bc:	80da      	strh	r2, [r3, #6]
		p_new_data->prev_node = DATA_NODE_NULL;
 801a4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a4c4:	811a      	strh	r2, [r3, #8]

		p_info->first_node = new_node;
 801a4c6:	69bb      	ldr	r3, [r7, #24]
 801a4c8:	89fa      	ldrh	r2, [r7, #14]
 801a4ca:	815a      	strh	r2, [r3, #10]
		goto save;
 801a4cc:	e0d1      	b.n	801a672 <pifStorageVar_Create+0x25a>
	}
	else {
		cur_node = p_info->first_node;
 801a4ce:	69bb      	ldr	r3, [r7, #24]
 801a4d0:	895b      	ldrh	r3, [r3, #10]
 801a4d2:	847b      	strh	r3, [r7, #34]	; 0x22
		p_cur_data = &p_owner->__p_data_info[cur_node];
 801a4d4:	69fb      	ldr	r3, [r7, #28]
 801a4d6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a4d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a4da:	4613      	mov	r3, r2
 801a4dc:	005b      	lsls	r3, r3, #1
 801a4de:	4413      	add	r3, r2
 801a4e0:	009b      	lsls	r3, r3, #2
 801a4e2:	440b      	add	r3, r1
 801a4e4:	613b      	str	r3, [r7, #16]
		last = p_owner->__info_sectors;
 801a4e6:	69fb      	ldr	r3, [r7, #28]
 801a4e8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801a4ea:	843b      	strh	r3, [r7, #32]
		if (p_cur_data->first_sector != last) {
 801a4ec:	693b      	ldr	r3, [r7, #16]
 801a4ee:	889b      	ldrh	r3, [r3, #4]
 801a4f0:	8c3a      	ldrh	r2, [r7, #32]
 801a4f2:	429a      	cmp	r2, r3
 801a4f4:	f000 80b2 	beq.w	801a65c <pifStorageVar_Create+0x244>
			if (p_cur_data->first_sector - last >= sectors) {
 801a4f8:	693b      	ldr	r3, [r7, #16]
 801a4fa:	889b      	ldrh	r3, [r3, #4]
 801a4fc:	461a      	mov	r2, r3
 801a4fe:	8c3b      	ldrh	r3, [r7, #32]
 801a500:	1ad2      	subs	r2, r2, r3
 801a502:	8abb      	ldrh	r3, [r7, #20]
 801a504:	429a      	cmp	r2, r3
 801a506:	f2c0 80a9 	blt.w	801a65c <pifStorageVar_Create+0x244>
				new_node = _getNewDataNode(p_owner);
 801a50a:	69f8      	ldr	r0, [r7, #28]
 801a50c:	f7ff fcba 	bl	8019e84 <_getNewDataNode>
 801a510:	4603      	mov	r3, r0
 801a512:	81fb      	strh	r3, [r7, #14]
				if (new_node == DATA_NODE_NULL) return NULL;
 801a514:	89fb      	ldrh	r3, [r7, #14]
 801a516:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a51a:	4293      	cmp	r3, r2
 801a51c:	d101      	bne.n	801a522 <pifStorageVar_Create+0x10a>
 801a51e:	2300      	movs	r3, #0
 801a520:	e0c9      	b.n	801a6b6 <pifStorageVar_Create+0x29e>

				p_new_data = &p_owner->__p_data_info[new_node];
 801a522:	69fb      	ldr	r3, [r7, #28]
 801a524:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a526:	89fa      	ldrh	r2, [r7, #14]
 801a528:	4613      	mov	r3, r2
 801a52a:	005b      	lsls	r3, r3, #1
 801a52c:	4413      	add	r3, r2
 801a52e:	009b      	lsls	r3, r3, #2
 801a530:	440b      	add	r3, r1
 801a532:	627b      	str	r3, [r7, #36]	; 0x24
				p_new_data->next_node = p_info->first_node;
 801a534:	69bb      	ldr	r3, [r7, #24]
 801a536:	895a      	ldrh	r2, [r3, #10]
 801a538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a53a:	80da      	strh	r2, [r3, #6]
				p_new_data->prev_node = DATA_NODE_NULL;
 801a53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a53e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a542:	811a      	strh	r2, [r3, #8]

				p_info->first_node = new_node;
 801a544:	69bb      	ldr	r3, [r7, #24]
 801a546:	89fa      	ldrh	r2, [r7, #14]
 801a548:	815a      	strh	r2, [r3, #10]
				p_cur_data->prev_node = new_node;
 801a54a:	693b      	ldr	r3, [r7, #16]
 801a54c:	89fa      	ldrh	r2, [r7, #14]
 801a54e:	811a      	strh	r2, [r3, #8]
				goto save;
 801a550:	e08f      	b.n	801a672 <pifStorageVar_Create+0x25a>
			}
		}
		while (cur_node != DATA_NODE_NULL) {
			p_cur_data = &p_owner->__p_data_info[cur_node];
 801a552:	69fb      	ldr	r3, [r7, #28]
 801a554:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a556:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a558:	4613      	mov	r3, r2
 801a55a:	005b      	lsls	r3, r3, #1
 801a55c:	4413      	add	r3, r2
 801a55e:	009b      	lsls	r3, r3, #2
 801a560:	440b      	add	r3, r1
 801a562:	613b      	str	r3, [r7, #16]
			last = p_cur_data->first_sector + (p_cur_data->size + sector_size - 1) / sector_size;
 801a564:	693b      	ldr	r3, [r7, #16]
 801a566:	889a      	ldrh	r2, [r3, #4]
 801a568:	693b      	ldr	r3, [r7, #16]
 801a56a:	885b      	ldrh	r3, [r3, #2]
 801a56c:	4619      	mov	r1, r3
 801a56e:	8afb      	ldrh	r3, [r7, #22]
 801a570:	440b      	add	r3, r1
 801a572:	1e59      	subs	r1, r3, #1
 801a574:	8afb      	ldrh	r3, [r7, #22]
 801a576:	fb91 f3f3 	sdiv	r3, r1, r3
 801a57a:	b29b      	uxth	r3, r3
 801a57c:	4413      	add	r3, r2
 801a57e:	843b      	strh	r3, [r7, #32]
			if (p_cur_data->next_node == DATA_NODE_NULL) {
 801a580:	693b      	ldr	r3, [r7, #16]
 801a582:	88db      	ldrh	r3, [r3, #6]
 801a584:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a588:	4293      	cmp	r3, r2
 801a58a:	d127      	bne.n	801a5dc <pifStorageVar_Create+0x1c4>
				if (p_info->max_sector_count - last >= sectors) {
 801a58c:	69bb      	ldr	r3, [r7, #24]
 801a58e:	891b      	ldrh	r3, [r3, #8]
 801a590:	461a      	mov	r2, r3
 801a592:	8c3b      	ldrh	r3, [r7, #32]
 801a594:	1ad2      	subs	r2, r2, r3
 801a596:	8abb      	ldrh	r3, [r7, #20]
 801a598:	429a      	cmp	r2, r3
 801a59a:	db5c      	blt.n	801a656 <pifStorageVar_Create+0x23e>
					new_node = _getNewDataNode(p_owner);
 801a59c:	69f8      	ldr	r0, [r7, #28]
 801a59e:	f7ff fc71 	bl	8019e84 <_getNewDataNode>
 801a5a2:	4603      	mov	r3, r0
 801a5a4:	81fb      	strh	r3, [r7, #14]
					if (new_node == DATA_NODE_NULL) return NULL;
 801a5a6:	89fb      	ldrh	r3, [r7, #14]
 801a5a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5ac:	4293      	cmp	r3, r2
 801a5ae:	d101      	bne.n	801a5b4 <pifStorageVar_Create+0x19c>
 801a5b0:	2300      	movs	r3, #0
 801a5b2:	e080      	b.n	801a6b6 <pifStorageVar_Create+0x29e>

					p_new_data = &p_owner->__p_data_info[new_node];
 801a5b4:	69fb      	ldr	r3, [r7, #28]
 801a5b6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a5b8:	89fa      	ldrh	r2, [r7, #14]
 801a5ba:	4613      	mov	r3, r2
 801a5bc:	005b      	lsls	r3, r3, #1
 801a5be:	4413      	add	r3, r2
 801a5c0:	009b      	lsls	r3, r3, #2
 801a5c2:	440b      	add	r3, r1
 801a5c4:	627b      	str	r3, [r7, #36]	; 0x24
					p_new_data->next_node = p_cur_data->next_node;
 801a5c6:	693b      	ldr	r3, [r7, #16]
 801a5c8:	88da      	ldrh	r2, [r3, #6]
 801a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5cc:	80da      	strh	r2, [r3, #6]
					p_new_data->prev_node = cur_node;
 801a5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5d0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a5d2:	811a      	strh	r2, [r3, #8]

					p_cur_data->next_node = new_node;
 801a5d4:	693b      	ldr	r3, [r7, #16]
 801a5d6:	89fa      	ldrh	r2, [r7, #14]
 801a5d8:	80da      	strh	r2, [r3, #6]
					goto save;
 801a5da:	e04a      	b.n	801a672 <pifStorageVar_Create+0x25a>
				}
			}
			else {
				if (p_owner->__p_data_info[p_cur_data->next_node].first_sector - last >= sectors) {
 801a5dc:	69fb      	ldr	r3, [r7, #28]
 801a5de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a5e0:	693b      	ldr	r3, [r7, #16]
 801a5e2:	88db      	ldrh	r3, [r3, #6]
 801a5e4:	4619      	mov	r1, r3
 801a5e6:	460b      	mov	r3, r1
 801a5e8:	005b      	lsls	r3, r3, #1
 801a5ea:	440b      	add	r3, r1
 801a5ec:	009b      	lsls	r3, r3, #2
 801a5ee:	4413      	add	r3, r2
 801a5f0:	889b      	ldrh	r3, [r3, #4]
 801a5f2:	461a      	mov	r2, r3
 801a5f4:	8c3b      	ldrh	r3, [r7, #32]
 801a5f6:	1ad2      	subs	r2, r2, r3
 801a5f8:	8abb      	ldrh	r3, [r7, #20]
 801a5fa:	429a      	cmp	r2, r3
 801a5fc:	db2b      	blt.n	801a656 <pifStorageVar_Create+0x23e>
					new_node = _getNewDataNode(p_owner);
 801a5fe:	69f8      	ldr	r0, [r7, #28]
 801a600:	f7ff fc40 	bl	8019e84 <_getNewDataNode>
 801a604:	4603      	mov	r3, r0
 801a606:	81fb      	strh	r3, [r7, #14]
					if (new_node == DATA_NODE_NULL) return NULL;
 801a608:	89fb      	ldrh	r3, [r7, #14]
 801a60a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a60e:	4293      	cmp	r3, r2
 801a610:	d101      	bne.n	801a616 <pifStorageVar_Create+0x1fe>
 801a612:	2300      	movs	r3, #0
 801a614:	e04f      	b.n	801a6b6 <pifStorageVar_Create+0x29e>

					p_new_data = &p_owner->__p_data_info[new_node];
 801a616:	69fb      	ldr	r3, [r7, #28]
 801a618:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a61a:	89fa      	ldrh	r2, [r7, #14]
 801a61c:	4613      	mov	r3, r2
 801a61e:	005b      	lsls	r3, r3, #1
 801a620:	4413      	add	r3, r2
 801a622:	009b      	lsls	r3, r3, #2
 801a624:	440b      	add	r3, r1
 801a626:	627b      	str	r3, [r7, #36]	; 0x24
					p_new_data->next_node = p_cur_data->next_node;
 801a628:	693b      	ldr	r3, [r7, #16]
 801a62a:	88da      	ldrh	r2, [r3, #6]
 801a62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a62e:	80da      	strh	r2, [r3, #6]
					p_new_data->prev_node = cur_node;
 801a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a632:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a634:	811a      	strh	r2, [r3, #8]

					p_owner->__p_data_info[p_cur_data->next_node].prev_node = new_node;
 801a636:	69fb      	ldr	r3, [r7, #28]
 801a638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a63a:	693b      	ldr	r3, [r7, #16]
 801a63c:	88db      	ldrh	r3, [r3, #6]
 801a63e:	4619      	mov	r1, r3
 801a640:	460b      	mov	r3, r1
 801a642:	005b      	lsls	r3, r3, #1
 801a644:	440b      	add	r3, r1
 801a646:	009b      	lsls	r3, r3, #2
 801a648:	4413      	add	r3, r2
 801a64a:	89fa      	ldrh	r2, [r7, #14]
 801a64c:	811a      	strh	r2, [r3, #8]
					p_cur_data->next_node = new_node;
 801a64e:	693b      	ldr	r3, [r7, #16]
 801a650:	89fa      	ldrh	r2, [r7, #14]
 801a652:	80da      	strh	r2, [r3, #6]
					goto save;
 801a654:	e00d      	b.n	801a672 <pifStorageVar_Create+0x25a>
				}
			}
			cur_node = p_cur_data->next_node;
 801a656:	693b      	ldr	r3, [r7, #16]
 801a658:	88db      	ldrh	r3, [r3, #6]
 801a65a:	847b      	strh	r3, [r7, #34]	; 0x22
		while (cur_node != DATA_NODE_NULL) {
 801a65c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a65e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a662:	4293      	cmp	r3, r2
 801a664:	f47f af75 	bne.w	801a552 <pifStorageVar_Create+0x13a>
		}
	}
	pif_error = E_OVERFLOW_BUFFER;
 801a668:	4b15      	ldr	r3, [pc, #84]	; (801a6c0 <pifStorageVar_Create+0x2a8>)
 801a66a:	2204      	movs	r2, #4
 801a66c:	701a      	strb	r2, [r3, #0]
	return NULL;
 801a66e:	2300      	movs	r3, #0
 801a670:	e021      	b.n	801a6b6 <pifStorageVar_Create+0x29e>

save:
	p_new_data->id = id;
 801a672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a674:	887a      	ldrh	r2, [r7, #2]
 801a676:	801a      	strh	r2, [r3, #0]
	p_new_data->size = size;
 801a678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a67a:	883a      	ldrh	r2, [r7, #0]
 801a67c:	805a      	strh	r2, [r3, #2]
	p_new_data->first_sector = last;
 801a67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a680:	8c3a      	ldrh	r2, [r7, #32]
 801a682:	809a      	strh	r2, [r3, #4]
	p_new_data->crc_16 = pifCrc16((uint8_t*)p_new_data, sizeof(PifStorageVarDataInfo) - 6);
 801a684:	2106      	movs	r1, #6
 801a686:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a688:	f7f7 fbf7 	bl	8011e7a <pifCrc16>
 801a68c:	4603      	mov	r3, r0
 801a68e:	461a      	mov	r2, r3
 801a690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a692:	815a      	strh	r2, [r3, #10]

    if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801a694:	69fb      	ldr	r3, [r7, #28]
 801a696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a698:	69fb      	ldr	r3, [r7, #28]
 801a69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a69c:	2100      	movs	r1, #0
 801a69e:	69f8      	ldr	r0, [r7, #28]
 801a6a0:	f7ff fc48 	bl	8019f34 <_writeData>
 801a6a4:	4603      	mov	r3, r0
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	d104      	bne.n	801a6b4 <pifStorageVar_Create+0x29c>
    	pif_error = E_ACCESS_FAILED;
 801a6aa:	4b05      	ldr	r3, [pc, #20]	; (801a6c0 <pifStorageVar_Create+0x2a8>)
 801a6ac:	220d      	movs	r2, #13
 801a6ae:	701a      	strb	r2, [r3, #0]
        return NULL;
 801a6b0:	2300      	movs	r3, #0
 801a6b2:	e000      	b.n	801a6b6 <pifStorageVar_Create+0x29e>
    }
	return (PifStorageDataInfoP)p_new_data;
 801a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a6b6:	4618      	mov	r0, r3
 801a6b8:	3728      	adds	r7, #40	; 0x28
 801a6ba:	46bd      	mov	sp, r7
 801a6bc:	bd80      	pop	{r7, pc}
 801a6be:	bf00      	nop
 801a6c0:	200020d1 	.word	0x200020d1

0801a6c4 <pifStorageVar_Delete>:

BOOL pifStorageVar_Delete(PifStorage* p_parent, uint16_t id)
{
 801a6c4:	b580      	push	{r7, lr}
 801a6c6:	b086      	sub	sp, #24
 801a6c8:	af00      	add	r7, sp, #0
 801a6ca:	6078      	str	r0, [r7, #4]
 801a6cc:	460b      	mov	r3, r1
 801a6ce:	807b      	strh	r3, [r7, #2]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	613b      	str	r3, [r7, #16]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801a6d4:	693b      	ldr	r3, [r7, #16]
 801a6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a6d8:	60fb      	str	r3, [r7, #12]
	PifStorageVarDataInfo* p_data_info;
	uint16_t node;

	if (!p_owner->__is_format) {
 801a6da:	693b      	ldr	r3, [r7, #16]
 801a6dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	d104      	bne.n	801a6ee <pifStorageVar_Delete+0x2a>
		pif_error = E_IS_NOT_FORMATED;
 801a6e4:	4b3d      	ldr	r3, [pc, #244]	; (801a7dc <pifStorageVar_Delete+0x118>)
 801a6e6:	220f      	movs	r2, #15
 801a6e8:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801a6ea:	2300      	movs	r3, #0
 801a6ec:	e072      	b.n	801a7d4 <pifStorageVar_Delete+0x110>
	}

	node = p_info->first_node;
 801a6ee:	68fb      	ldr	r3, [r7, #12]
 801a6f0:	895b      	ldrh	r3, [r3, #10]
 801a6f2:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801a6f4:	e065      	b.n	801a7c2 <pifStorageVar_Delete+0xfe>
		p_data_info = &p_owner->__p_data_info[node];
 801a6f6:	693b      	ldr	r3, [r7, #16]
 801a6f8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a6fa:	8afa      	ldrh	r2, [r7, #22]
 801a6fc:	4613      	mov	r3, r2
 801a6fe:	005b      	lsls	r3, r3, #1
 801a700:	4413      	add	r3, r2
 801a702:	009b      	lsls	r3, r3, #2
 801a704:	440b      	add	r3, r1
 801a706:	60bb      	str	r3, [r7, #8]
		if (id == p_data_info->id) {
 801a708:	68bb      	ldr	r3, [r7, #8]
 801a70a:	881b      	ldrh	r3, [r3, #0]
 801a70c:	887a      	ldrh	r2, [r7, #2]
 801a70e:	429a      	cmp	r2, r3
 801a710:	d154      	bne.n	801a7bc <pifStorageVar_Delete+0xf8>
			memset(p_data_info, 0xFF, sizeof(PifStorageVarDataInfo) - 6);
 801a712:	2206      	movs	r2, #6
 801a714:	21ff      	movs	r1, #255	; 0xff
 801a716:	68b8      	ldr	r0, [r7, #8]
 801a718:	f007 fb64 	bl	8021de4 <memset>
			if (p_data_info->prev_node != DATA_NODE_NULL) {
 801a71c:	68bb      	ldr	r3, [r7, #8]
 801a71e:	891b      	ldrh	r3, [r3, #8]
 801a720:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a724:	4293      	cmp	r3, r2
 801a726:	d00d      	beq.n	801a744 <pifStorageVar_Delete+0x80>
				p_owner->__p_data_info[p_data_info->prev_node].next_node = p_data_info->next_node;
 801a728:	693b      	ldr	r3, [r7, #16]
 801a72a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a72c:	68bb      	ldr	r3, [r7, #8]
 801a72e:	891b      	ldrh	r3, [r3, #8]
 801a730:	4619      	mov	r1, r3
 801a732:	460b      	mov	r3, r1
 801a734:	005b      	lsls	r3, r3, #1
 801a736:	440b      	add	r3, r1
 801a738:	009b      	lsls	r3, r3, #2
 801a73a:	4413      	add	r3, r2
 801a73c:	68ba      	ldr	r2, [r7, #8]
 801a73e:	88d2      	ldrh	r2, [r2, #6]
 801a740:	80da      	strh	r2, [r3, #6]
 801a742:	e003      	b.n	801a74c <pifStorageVar_Delete+0x88>
			}
			else {
				p_info->first_node = p_data_info->next_node;
 801a744:	68bb      	ldr	r3, [r7, #8]
 801a746:	88da      	ldrh	r2, [r3, #6]
 801a748:	68fb      	ldr	r3, [r7, #12]
 801a74a:	815a      	strh	r2, [r3, #10]
			}
			if (p_data_info->next_node != DATA_NODE_NULL) {
 801a74c:	68bb      	ldr	r3, [r7, #8]
 801a74e:	88db      	ldrh	r3, [r3, #6]
 801a750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a754:	4293      	cmp	r3, r2
 801a756:	d00c      	beq.n	801a772 <pifStorageVar_Delete+0xae>
				p_owner->__p_data_info[p_data_info->next_node].prev_node = p_data_info->prev_node;
 801a758:	693b      	ldr	r3, [r7, #16]
 801a75a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a75c:	68bb      	ldr	r3, [r7, #8]
 801a75e:	88db      	ldrh	r3, [r3, #6]
 801a760:	4619      	mov	r1, r3
 801a762:	460b      	mov	r3, r1
 801a764:	005b      	lsls	r3, r3, #1
 801a766:	440b      	add	r3, r1
 801a768:	009b      	lsls	r3, r3, #2
 801a76a:	4413      	add	r3, r2
 801a76c:	68ba      	ldr	r2, [r7, #8]
 801a76e:	8912      	ldrh	r2, [r2, #8]
 801a770:	811a      	strh	r2, [r3, #8]
			}
			p_data_info->next_node = p_info->free_node;
 801a772:	68fb      	ldr	r3, [r7, #12]
 801a774:	899a      	ldrh	r2, [r3, #12]
 801a776:	68bb      	ldr	r3, [r7, #8]
 801a778:	80da      	strh	r2, [r3, #6]
			p_data_info->prev_node = DATA_NODE_NULL;
 801a77a:	68bb      	ldr	r3, [r7, #8]
 801a77c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a780:	811a      	strh	r2, [r3, #8]
			p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801a782:	2106      	movs	r1, #6
 801a784:	68b8      	ldr	r0, [r7, #8]
 801a786:	f7f7 fb78 	bl	8011e7a <pifCrc16>
 801a78a:	4603      	mov	r3, r0
 801a78c:	461a      	mov	r2, r3
 801a78e:	68bb      	ldr	r3, [r7, #8]
 801a790:	815a      	strh	r2, [r3, #10]
			p_info->free_node = node;
 801a792:	68fb      	ldr	r3, [r7, #12]
 801a794:	8afa      	ldrh	r2, [r7, #22]
 801a796:	819a      	strh	r2, [r3, #12]

			if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801a798:	693b      	ldr	r3, [r7, #16]
 801a79a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a79c:	693b      	ldr	r3, [r7, #16]
 801a79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a7a0:	2100      	movs	r1, #0
 801a7a2:	6938      	ldr	r0, [r7, #16]
 801a7a4:	f7ff fbc6 	bl	8019f34 <_writeData>
 801a7a8:	4603      	mov	r3, r0
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d104      	bne.n	801a7b8 <pifStorageVar_Delete+0xf4>
		    	pif_error = E_ACCESS_FAILED;
 801a7ae:	4b0b      	ldr	r3, [pc, #44]	; (801a7dc <pifStorageVar_Delete+0x118>)
 801a7b0:	220d      	movs	r2, #13
 801a7b2:	701a      	strb	r2, [r3, #0]
				return FALSE;
 801a7b4:	2300      	movs	r3, #0
 801a7b6:	e00d      	b.n	801a7d4 <pifStorageVar_Delete+0x110>
			}
			return TRUE;
 801a7b8:	2301      	movs	r3, #1
 801a7ba:	e00b      	b.n	801a7d4 <pifStorageVar_Delete+0x110>
		}
		node = p_data_info->next_node;
 801a7bc:	68bb      	ldr	r3, [r7, #8]
 801a7be:	88db      	ldrh	r3, [r3, #6]
 801a7c0:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801a7c2:	8afb      	ldrh	r3, [r7, #22]
 801a7c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a7c8:	4293      	cmp	r3, r2
 801a7ca:	d194      	bne.n	801a6f6 <pifStorageVar_Delete+0x32>
	}
	pif_error = E_CANNOT_FOUND;
 801a7cc:	4b03      	ldr	r3, [pc, #12]	; (801a7dc <pifStorageVar_Delete+0x118>)
 801a7ce:	220e      	movs	r2, #14
 801a7d0:	701a      	strb	r2, [r3, #0]
	return FALSE;
 801a7d2:	2300      	movs	r3, #0
}
 801a7d4:	4618      	mov	r0, r3
 801a7d6:	3718      	adds	r7, #24
 801a7d8:	46bd      	mov	sp, r7
 801a7da:	bd80      	pop	{r7, pc}
 801a7dc:	200020d1 	.word	0x200020d1

0801a7e0 <pifStorageVar_Open>:

PifStorageDataInfoP pifStorageVar_Open(PifStorage* p_parent, uint16_t id)
{
 801a7e0:	b590      	push	{r4, r7, lr}
 801a7e2:	b087      	sub	sp, #28
 801a7e4:	af00      	add	r7, sp, #0
 801a7e6:	6078      	str	r0, [r7, #4]
 801a7e8:	460b      	mov	r3, r1
 801a7ea:	807b      	strh	r3, [r7, #2]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	613b      	str	r3, [r7, #16]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801a7f0:	693b      	ldr	r3, [r7, #16]
 801a7f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a7f4:	60fb      	str	r3, [r7, #12]
	PifStorageVarDataInfo* p_data_info;
	uint16_t node;

	if (!p_owner->__is_format) {
 801a7f6:	693b      	ldr	r3, [r7, #16]
 801a7f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	d104      	bne.n	801a80a <pifStorageVar_Open+0x2a>
		pif_error = E_IS_NOT_FORMATED;
 801a800:	4b1b      	ldr	r3, [pc, #108]	; (801a870 <pifStorageVar_Open+0x90>)
 801a802:	220f      	movs	r2, #15
 801a804:	701a      	strb	r2, [r3, #0]
		return NULL;
 801a806:	2300      	movs	r3, #0
 801a808:	e02d      	b.n	801a866 <pifStorageVar_Open+0x86>
	}

	node = p_info->first_node;
 801a80a:	68fb      	ldr	r3, [r7, #12]
 801a80c:	895b      	ldrh	r3, [r3, #10]
 801a80e:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801a810:	e020      	b.n	801a854 <pifStorageVar_Open+0x74>
		p_data_info = &p_owner->__p_data_info[node];
 801a812:	693b      	ldr	r3, [r7, #16]
 801a814:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a816:	8afa      	ldrh	r2, [r7, #22]
 801a818:	4613      	mov	r3, r2
 801a81a:	005b      	lsls	r3, r3, #1
 801a81c:	4413      	add	r3, r2
 801a81e:	009b      	lsls	r3, r3, #2
 801a820:	440b      	add	r3, r1
 801a822:	60bb      	str	r3, [r7, #8]
		if (id == p_data_info->id) {
 801a824:	68bb      	ldr	r3, [r7, #8]
 801a826:	881b      	ldrh	r3, [r3, #0]
 801a828:	887a      	ldrh	r2, [r7, #2]
 801a82a:	429a      	cmp	r2, r3
 801a82c:	d10f      	bne.n	801a84e <pifStorageVar_Open+0x6e>
			if (p_data_info->crc_16 != pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6)) {
 801a82e:	68bb      	ldr	r3, [r7, #8]
 801a830:	895c      	ldrh	r4, [r3, #10]
 801a832:	2106      	movs	r1, #6
 801a834:	68b8      	ldr	r0, [r7, #8]
 801a836:	f7f7 fb20 	bl	8011e7a <pifCrc16>
 801a83a:	4603      	mov	r3, r0
 801a83c:	429c      	cmp	r4, r3
 801a83e:	d004      	beq.n	801a84a <pifStorageVar_Open+0x6a>
		        pif_error = E_MISMATCH_CRC;
 801a840:	4b0b      	ldr	r3, [pc, #44]	; (801a870 <pifStorageVar_Open+0x90>)
 801a842:	220c      	movs	r2, #12
 801a844:	701a      	strb	r2, [r3, #0]
				return NULL;
 801a846:	2300      	movs	r3, #0
 801a848:	e00d      	b.n	801a866 <pifStorageVar_Open+0x86>
			}
			return (PifStorageDataInfoP)p_data_info;
 801a84a:	68bb      	ldr	r3, [r7, #8]
 801a84c:	e00b      	b.n	801a866 <pifStorageVar_Open+0x86>
		}
		node = p_data_info->next_node;
 801a84e:	68bb      	ldr	r3, [r7, #8]
 801a850:	88db      	ldrh	r3, [r3, #6]
 801a852:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801a854:	8afb      	ldrh	r3, [r7, #22]
 801a856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a85a:	4293      	cmp	r3, r2
 801a85c:	d1d9      	bne.n	801a812 <pifStorageVar_Open+0x32>
	}
	pif_error = E_CANNOT_FOUND;
 801a85e:	4b04      	ldr	r3, [pc, #16]	; (801a870 <pifStorageVar_Open+0x90>)
 801a860:	220e      	movs	r2, #14
 801a862:	701a      	strb	r2, [r3, #0]
	return NULL;
 801a864:	2300      	movs	r3, #0
}
 801a866:	4618      	mov	r0, r3
 801a868:	371c      	adds	r7, #28
 801a86a:	46bd      	mov	sp, r7
 801a86c:	bd90      	pop	{r4, r7, pc}
 801a86e:	bf00      	nop
 801a870:	200020d1 	.word	0x200020d1

0801a874 <pifStorageVar_Read>:

BOOL pifStorageVar_Read(PifStorage* p_parent, uint8_t* p_dst, PifStorageDataInfoP p_src, size_t size)
{
 801a874:	b580      	push	{r7, lr}
 801a876:	b088      	sub	sp, #32
 801a878:	af02      	add	r7, sp, #8
 801a87a:	60f8      	str	r0, [r7, #12]
 801a87c:	60b9      	str	r1, [r7, #8]
 801a87e:	607a      	str	r2, [r7, #4]
 801a880:	603b      	str	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801a882:	68fb      	ldr	r3, [r7, #12]
 801a884:	617b      	str	r3, [r7, #20]

	if (!p_owner->__is_format) {
 801a886:	697b      	ldr	r3, [r7, #20]
 801a888:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	d104      	bne.n	801a89a <pifStorageVar_Read+0x26>
		pif_error = E_IS_NOT_FORMATED;
 801a890:	4b0d      	ldr	r3, [pc, #52]	; (801a8c8 <pifStorageVar_Read+0x54>)
 801a892:	220f      	movs	r2, #15
 801a894:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801a896:	2300      	movs	r3, #0
 801a898:	e012      	b.n	801a8c0 <pifStorageVar_Read+0x4c>
	}

	return _readData(p_owner, p_dst, ((PifStorageVarDataInfo*)p_src)->first_sector * p_owner->_p_info->sector_size, size, p_owner->_p_info->sector_size);
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	889b      	ldrh	r3, [r3, #4]
 801a89e:	461a      	mov	r2, r3
 801a8a0:	697b      	ldr	r3, [r7, #20]
 801a8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8a4:	88db      	ldrh	r3, [r3, #6]
 801a8a6:	fb02 f303 	mul.w	r3, r2, r3
 801a8aa:	461a      	mov	r2, r3
 801a8ac:	697b      	ldr	r3, [r7, #20]
 801a8ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8b0:	88db      	ldrh	r3, [r3, #6]
 801a8b2:	9300      	str	r3, [sp, #0]
 801a8b4:	683b      	ldr	r3, [r7, #0]
 801a8b6:	68b9      	ldr	r1, [r7, #8]
 801a8b8:	6978      	ldr	r0, [r7, #20]
 801a8ba:	f7ff fb0b 	bl	8019ed4 <_readData>
 801a8be:	4603      	mov	r3, r0
}
 801a8c0:	4618      	mov	r0, r3
 801a8c2:	3718      	adds	r7, #24
 801a8c4:	46bd      	mov	sp, r7
 801a8c6:	bd80      	pop	{r7, pc}
 801a8c8:	200020d1 	.word	0x200020d1

0801a8cc <pifStorageVar_Write>:

BOOL pifStorageVar_Write(PifStorage* p_parent, PifStorageDataInfoP p_dst, uint8_t* p_src, size_t size)
{
 801a8cc:	b580      	push	{r7, lr}
 801a8ce:	b086      	sub	sp, #24
 801a8d0:	af00      	add	r7, sp, #0
 801a8d2:	60f8      	str	r0, [r7, #12]
 801a8d4:	60b9      	str	r1, [r7, #8]
 801a8d6:	607a      	str	r2, [r7, #4]
 801a8d8:	603b      	str	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801a8da:	68fb      	ldr	r3, [r7, #12]
 801a8dc:	617b      	str	r3, [r7, #20]

	if (!p_owner->__is_format) {
 801a8de:	697b      	ldr	r3, [r7, #20]
 801a8e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a8e4:	2b00      	cmp	r3, #0
 801a8e6:	d104      	bne.n	801a8f2 <pifStorageVar_Write+0x26>
		pif_error = E_IS_NOT_FORMATED;
 801a8e8:	4b0b      	ldr	r3, [pc, #44]	; (801a918 <pifStorageVar_Write+0x4c>)
 801a8ea:	220f      	movs	r2, #15
 801a8ec:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801a8ee:	2300      	movs	r3, #0
 801a8f0:	e00e      	b.n	801a910 <pifStorageVar_Write+0x44>
	}

	return _writeData(p_owner, ((PifStorageVarDataInfo*)p_dst)->first_sector * p_owner->_p_info->sector_size, p_src, size);
 801a8f2:	68bb      	ldr	r3, [r7, #8]
 801a8f4:	889b      	ldrh	r3, [r3, #4]
 801a8f6:	461a      	mov	r2, r3
 801a8f8:	697b      	ldr	r3, [r7, #20]
 801a8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8fc:	88db      	ldrh	r3, [r3, #6]
 801a8fe:	fb02 f303 	mul.w	r3, r2, r3
 801a902:	4619      	mov	r1, r3
 801a904:	683b      	ldr	r3, [r7, #0]
 801a906:	687a      	ldr	r2, [r7, #4]
 801a908:	6978      	ldr	r0, [r7, #20]
 801a90a:	f7ff fb13 	bl	8019f34 <_writeData>
 801a90e:	4603      	mov	r3, r0
}
 801a910:	4618      	mov	r0, r3
 801a912:	3718      	adds	r7, #24
 801a914:	46bd      	mov	sp, r7
 801a916:	bd80      	pop	{r7, pc}
 801a918:	200020d1 	.word	0x200020d1

0801a91c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801a91c:	b580      	push	{r7, lr}
 801a91e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801a920:	4b0e      	ldr	r3, [pc, #56]	; (801a95c <HAL_Init+0x40>)
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	4a0d      	ldr	r2, [pc, #52]	; (801a95c <HAL_Init+0x40>)
 801a926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801a92a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801a92c:	4b0b      	ldr	r3, [pc, #44]	; (801a95c <HAL_Init+0x40>)
 801a92e:	681b      	ldr	r3, [r3, #0]
 801a930:	4a0a      	ldr	r2, [pc, #40]	; (801a95c <HAL_Init+0x40>)
 801a932:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801a936:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801a938:	4b08      	ldr	r3, [pc, #32]	; (801a95c <HAL_Init+0x40>)
 801a93a:	681b      	ldr	r3, [r3, #0]
 801a93c:	4a07      	ldr	r2, [pc, #28]	; (801a95c <HAL_Init+0x40>)
 801a93e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a942:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801a944:	2003      	movs	r0, #3
 801a946:	f000 fd51 	bl	801b3ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801a94a:	2000      	movs	r0, #0
 801a94c:	f000 f808 	bl	801a960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801a950:	f7e8 fda4 	bl	800349c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801a954:	2300      	movs	r3, #0
}
 801a956:	4618      	mov	r0, r3
 801a958:	bd80      	pop	{r7, pc}
 801a95a:	bf00      	nop
 801a95c:	40023c00 	.word	0x40023c00

0801a960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801a960:	b580      	push	{r7, lr}
 801a962:	b082      	sub	sp, #8
 801a964:	af00      	add	r7, sp, #0
 801a966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801a968:	4b12      	ldr	r3, [pc, #72]	; (801a9b4 <HAL_InitTick+0x54>)
 801a96a:	681a      	ldr	r2, [r3, #0]
 801a96c:	4b12      	ldr	r3, [pc, #72]	; (801a9b8 <HAL_InitTick+0x58>)
 801a96e:	781b      	ldrb	r3, [r3, #0]
 801a970:	4619      	mov	r1, r3
 801a972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a976:	fbb3 f3f1 	udiv	r3, r3, r1
 801a97a:	fbb2 f3f3 	udiv	r3, r2, r3
 801a97e:	4618      	mov	r0, r3
 801a980:	f000 fd77 	bl	801b472 <HAL_SYSTICK_Config>
 801a984:	4603      	mov	r3, r0
 801a986:	2b00      	cmp	r3, #0
 801a988:	d001      	beq.n	801a98e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801a98a:	2301      	movs	r3, #1
 801a98c:	e00e      	b.n	801a9ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	2b0f      	cmp	r3, #15
 801a992:	d80a      	bhi.n	801a9aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801a994:	2200      	movs	r2, #0
 801a996:	6879      	ldr	r1, [r7, #4]
 801a998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a99c:	f000 fd31 	bl	801b402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801a9a0:	4a06      	ldr	r2, [pc, #24]	; (801a9bc <HAL_InitTick+0x5c>)
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801a9a6:	2300      	movs	r3, #0
 801a9a8:	e000      	b.n	801a9ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801a9aa:	2301      	movs	r3, #1
}
 801a9ac:	4618      	mov	r0, r3
 801a9ae:	3708      	adds	r7, #8
 801a9b0:	46bd      	mov	sp, r7
 801a9b2:	bd80      	pop	{r7, pc}
 801a9b4:	20000020 	.word	0x20000020
 801a9b8:	20000094 	.word	0x20000094
 801a9bc:	20000090 	.word	0x20000090

0801a9c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801a9c0:	b480      	push	{r7}
 801a9c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801a9c4:	4b06      	ldr	r3, [pc, #24]	; (801a9e0 <HAL_IncTick+0x20>)
 801a9c6:	781b      	ldrb	r3, [r3, #0]
 801a9c8:	461a      	mov	r2, r3
 801a9ca:	4b06      	ldr	r3, [pc, #24]	; (801a9e4 <HAL_IncTick+0x24>)
 801a9cc:	681b      	ldr	r3, [r3, #0]
 801a9ce:	4413      	add	r3, r2
 801a9d0:	4a04      	ldr	r2, [pc, #16]	; (801a9e4 <HAL_IncTick+0x24>)
 801a9d2:	6013      	str	r3, [r2, #0]
}
 801a9d4:	bf00      	nop
 801a9d6:	46bd      	mov	sp, r7
 801a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9dc:	4770      	bx	lr
 801a9de:	bf00      	nop
 801a9e0:	20000094 	.word	0x20000094
 801a9e4:	20002268 	.word	0x20002268

0801a9e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801a9e8:	b480      	push	{r7}
 801a9ea:	af00      	add	r7, sp, #0
  return uwTick;
 801a9ec:	4b03      	ldr	r3, [pc, #12]	; (801a9fc <HAL_GetTick+0x14>)
 801a9ee:	681b      	ldr	r3, [r3, #0]
}
 801a9f0:	4618      	mov	r0, r3
 801a9f2:	46bd      	mov	sp, r7
 801a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9f8:	4770      	bx	lr
 801a9fa:	bf00      	nop
 801a9fc:	20002268 	.word	0x20002268

0801aa00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 801aa00:	b580      	push	{r7, lr}
 801aa02:	b084      	sub	sp, #16
 801aa04:	af00      	add	r7, sp, #0
 801aa06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801aa08:	2300      	movs	r3, #0
 801aa0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d101      	bne.n	801aa16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 801aa12:	2301      	movs	r3, #1
 801aa14:	e033      	b.n	801aa7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d109      	bne.n	801aa32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801aa1e:	6878      	ldr	r0, [r7, #4]
 801aa20:	f7e8 fd64 	bl	80034ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	2200      	movs	r2, #0
 801aa28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	2200      	movs	r2, #0
 801aa2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aa36:	f003 0310 	and.w	r3, r3, #16
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d118      	bne.n	801aa70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aa42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801aa46:	f023 0302 	bic.w	r3, r3, #2
 801aa4a:	f043 0202 	orr.w	r2, r3, #2
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 801aa52:	6878      	ldr	r0, [r7, #4]
 801aa54:	f000 fa58 	bl	801af08 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	2200      	movs	r2, #0
 801aa5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aa62:	f023 0303 	bic.w	r3, r3, #3
 801aa66:	f043 0201 	orr.w	r2, r3, #1
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	641a      	str	r2, [r3, #64]	; 0x40
 801aa6e:	e001      	b.n	801aa74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 801aa70:	2301      	movs	r3, #1
 801aa72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	2200      	movs	r2, #0
 801aa78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 801aa7c:	7bfb      	ldrb	r3, [r7, #15]
}
 801aa7e:	4618      	mov	r0, r3
 801aa80:	3710      	adds	r7, #16
 801aa82:	46bd      	mov	sp, r7
 801aa84:	bd80      	pop	{r7, pc}
	...

0801aa88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 801aa88:	b580      	push	{r7, lr}
 801aa8a:	b086      	sub	sp, #24
 801aa8c:	af00      	add	r7, sp, #0
 801aa8e:	60f8      	str	r0, [r7, #12]
 801aa90:	60b9      	str	r1, [r7, #8]
 801aa92:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 801aa94:	2300      	movs	r3, #0
 801aa96:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801aa98:	68fb      	ldr	r3, [r7, #12]
 801aa9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801aa9e:	2b01      	cmp	r3, #1
 801aaa0:	d101      	bne.n	801aaa6 <HAL_ADC_Start_DMA+0x1e>
 801aaa2:	2302      	movs	r3, #2
 801aaa4:	e0ce      	b.n	801ac44 <HAL_ADC_Start_DMA+0x1bc>
 801aaa6:	68fb      	ldr	r3, [r7, #12]
 801aaa8:	2201      	movs	r2, #1
 801aaaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 801aaae:	68fb      	ldr	r3, [r7, #12]
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	689b      	ldr	r3, [r3, #8]
 801aab4:	f003 0301 	and.w	r3, r3, #1
 801aab8:	2b01      	cmp	r3, #1
 801aaba:	d018      	beq.n	801aaee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 801aabc:	68fb      	ldr	r3, [r7, #12]
 801aabe:	681b      	ldr	r3, [r3, #0]
 801aac0:	689a      	ldr	r2, [r3, #8]
 801aac2:	68fb      	ldr	r3, [r7, #12]
 801aac4:	681b      	ldr	r3, [r3, #0]
 801aac6:	f042 0201 	orr.w	r2, r2, #1
 801aaca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 801aacc:	4b5f      	ldr	r3, [pc, #380]	; (801ac4c <HAL_ADC_Start_DMA+0x1c4>)
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	4a5f      	ldr	r2, [pc, #380]	; (801ac50 <HAL_ADC_Start_DMA+0x1c8>)
 801aad2:	fba2 2303 	umull	r2, r3, r2, r3
 801aad6:	0c9a      	lsrs	r2, r3, #18
 801aad8:	4613      	mov	r3, r2
 801aada:	005b      	lsls	r3, r3, #1
 801aadc:	4413      	add	r3, r2
 801aade:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801aae0:	e002      	b.n	801aae8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 801aae2:	693b      	ldr	r3, [r7, #16]
 801aae4:	3b01      	subs	r3, #1
 801aae6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801aae8:	693b      	ldr	r3, [r7, #16]
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d1f9      	bne.n	801aae2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 801aaee:	68fb      	ldr	r3, [r7, #12]
 801aaf0:	681b      	ldr	r3, [r3, #0]
 801aaf2:	689b      	ldr	r3, [r3, #8]
 801aaf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801aaf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801aafc:	d107      	bne.n	801ab0e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 801aafe:	68fb      	ldr	r3, [r7, #12]
 801ab00:	681b      	ldr	r3, [r3, #0]
 801ab02:	689a      	ldr	r2, [r3, #8]
 801ab04:	68fb      	ldr	r3, [r7, #12]
 801ab06:	681b      	ldr	r3, [r3, #0]
 801ab08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801ab0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 801ab0e:	68fb      	ldr	r3, [r7, #12]
 801ab10:	681b      	ldr	r3, [r3, #0]
 801ab12:	689b      	ldr	r3, [r3, #8]
 801ab14:	f003 0301 	and.w	r3, r3, #1
 801ab18:	2b01      	cmp	r3, #1
 801ab1a:	f040 8086 	bne.w	801ac2a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 801ab26:	f023 0301 	bic.w	r3, r3, #1
 801ab2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801ab2e:	68fb      	ldr	r3, [r7, #12]
 801ab30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801ab32:	68fb      	ldr	r3, [r7, #12]
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	685b      	ldr	r3, [r3, #4]
 801ab38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d007      	beq.n	801ab50 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 801ab40:	68fb      	ldr	r3, [r7, #12]
 801ab42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801ab48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801ab4c:	68fb      	ldr	r3, [r7, #12]
 801ab4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801ab50:	68fb      	ldr	r3, [r7, #12]
 801ab52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801ab58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ab5c:	d106      	bne.n	801ab6c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 801ab5e:	68fb      	ldr	r3, [r7, #12]
 801ab60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ab62:	f023 0206 	bic.w	r2, r3, #6
 801ab66:	68fb      	ldr	r3, [r7, #12]
 801ab68:	645a      	str	r2, [r3, #68]	; 0x44
 801ab6a:	e002      	b.n	801ab72 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 801ab6c:	68fb      	ldr	r3, [r7, #12]
 801ab6e:	2200      	movs	r2, #0
 801ab70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 801ab72:	68fb      	ldr	r3, [r7, #12]
 801ab74:	2200      	movs	r2, #0
 801ab76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801ab7a:	4b36      	ldr	r3, [pc, #216]	; (801ac54 <HAL_ADC_Start_DMA+0x1cc>)
 801ab7c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801ab7e:	68fb      	ldr	r3, [r7, #12]
 801ab80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ab82:	4a35      	ldr	r2, [pc, #212]	; (801ac58 <HAL_ADC_Start_DMA+0x1d0>)
 801ab84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 801ab86:	68fb      	ldr	r3, [r7, #12]
 801ab88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ab8a:	4a34      	ldr	r2, [pc, #208]	; (801ac5c <HAL_ADC_Start_DMA+0x1d4>)
 801ab8c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801ab8e:	68fb      	ldr	r3, [r7, #12]
 801ab90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ab92:	4a33      	ldr	r2, [pc, #204]	; (801ac60 <HAL_ADC_Start_DMA+0x1d8>)
 801ab94:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 801ab96:	68fb      	ldr	r3, [r7, #12]
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 801ab9e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801aba0:	68fb      	ldr	r3, [r7, #12]
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	685a      	ldr	r2, [r3, #4]
 801aba6:	68fb      	ldr	r3, [r7, #12]
 801aba8:	681b      	ldr	r3, [r3, #0]
 801abaa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801abae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	689a      	ldr	r2, [r3, #8]
 801abb6:	68fb      	ldr	r3, [r7, #12]
 801abb8:	681b      	ldr	r3, [r3, #0]
 801abba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801abbe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801abc0:	68fb      	ldr	r3, [r7, #12]
 801abc2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801abc4:	68fb      	ldr	r3, [r7, #12]
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	334c      	adds	r3, #76	; 0x4c
 801abca:	4619      	mov	r1, r3
 801abcc:	68ba      	ldr	r2, [r7, #8]
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	f000 fd0a 	bl	801b5e8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 801abd4:	697b      	ldr	r3, [r7, #20]
 801abd6:	685b      	ldr	r3, [r3, #4]
 801abd8:	f003 031f 	and.w	r3, r3, #31
 801abdc:	2b00      	cmp	r3, #0
 801abde:	d10f      	bne.n	801ac00 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 801abe0:	68fb      	ldr	r3, [r7, #12]
 801abe2:	681b      	ldr	r3, [r3, #0]
 801abe4:	689b      	ldr	r3, [r3, #8]
 801abe6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801abea:	2b00      	cmp	r3, #0
 801abec:	d129      	bne.n	801ac42 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801abee:	68fb      	ldr	r3, [r7, #12]
 801abf0:	681b      	ldr	r3, [r3, #0]
 801abf2:	689a      	ldr	r2, [r3, #8]
 801abf4:	68fb      	ldr	r3, [r7, #12]
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801abfc:	609a      	str	r2, [r3, #8]
 801abfe:	e020      	b.n	801ac42 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 801ac00:	68fb      	ldr	r3, [r7, #12]
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	4a17      	ldr	r2, [pc, #92]	; (801ac64 <HAL_ADC_Start_DMA+0x1dc>)
 801ac06:	4293      	cmp	r3, r2
 801ac08:	d11b      	bne.n	801ac42 <HAL_ADC_Start_DMA+0x1ba>
 801ac0a:	68fb      	ldr	r3, [r7, #12]
 801ac0c:	681b      	ldr	r3, [r3, #0]
 801ac0e:	689b      	ldr	r3, [r3, #8]
 801ac10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d114      	bne.n	801ac42 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801ac18:	68fb      	ldr	r3, [r7, #12]
 801ac1a:	681b      	ldr	r3, [r3, #0]
 801ac1c:	689a      	ldr	r2, [r3, #8]
 801ac1e:	68fb      	ldr	r3, [r7, #12]
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801ac26:	609a      	str	r2, [r3, #8]
 801ac28:	e00b      	b.n	801ac42 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801ac2a:	68fb      	ldr	r3, [r7, #12]
 801ac2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ac2e:	f043 0210 	orr.w	r2, r3, #16
 801ac32:	68fb      	ldr	r3, [r7, #12]
 801ac34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801ac36:	68fb      	ldr	r3, [r7, #12]
 801ac38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ac3a:	f043 0201 	orr.w	r2, r3, #1
 801ac3e:	68fb      	ldr	r3, [r7, #12]
 801ac40:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 801ac42:	2300      	movs	r3, #0
}
 801ac44:	4618      	mov	r0, r3
 801ac46:	3718      	adds	r7, #24
 801ac48:	46bd      	mov	sp, r7
 801ac4a:	bd80      	pop	{r7, pc}
 801ac4c:	20000020 	.word	0x20000020
 801ac50:	431bde83 	.word	0x431bde83
 801ac54:	40012300 	.word	0x40012300
 801ac58:	0801b101 	.word	0x0801b101
 801ac5c:	0801b1bb 	.word	0x0801b1bb
 801ac60:	0801b1d7 	.word	0x0801b1d7
 801ac64:	40012000 	.word	0x40012000

0801ac68 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801ac68:	b480      	push	{r7}
 801ac6a:	b083      	sub	sp, #12
 801ac6c:	af00      	add	r7, sp, #0
 801ac6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 801ac70:	bf00      	nop
 801ac72:	370c      	adds	r7, #12
 801ac74:	46bd      	mov	sp, r7
 801ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac7a:	4770      	bx	lr

0801ac7c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 801ac7c:	b480      	push	{r7}
 801ac7e:	b083      	sub	sp, #12
 801ac80:	af00      	add	r7, sp, #0
 801ac82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 801ac84:	bf00      	nop
 801ac86:	370c      	adds	r7, #12
 801ac88:	46bd      	mov	sp, r7
 801ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac8e:	4770      	bx	lr

0801ac90 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801ac90:	b480      	push	{r7}
 801ac92:	b083      	sub	sp, #12
 801ac94:	af00      	add	r7, sp, #0
 801ac96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 801ac98:	bf00      	nop
 801ac9a:	370c      	adds	r7, #12
 801ac9c:	46bd      	mov	sp, r7
 801ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aca2:	4770      	bx	lr

0801aca4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 801aca4:	b480      	push	{r7}
 801aca6:	b085      	sub	sp, #20
 801aca8:	af00      	add	r7, sp, #0
 801acaa:	6078      	str	r0, [r7, #4]
 801acac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 801acae:	2300      	movs	r3, #0
 801acb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801acb8:	2b01      	cmp	r3, #1
 801acba:	d101      	bne.n	801acc0 <HAL_ADC_ConfigChannel+0x1c>
 801acbc:	2302      	movs	r3, #2
 801acbe:	e113      	b.n	801aee8 <HAL_ADC_ConfigChannel+0x244>
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	2201      	movs	r2, #1
 801acc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 801acc8:	683b      	ldr	r3, [r7, #0]
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	2b09      	cmp	r3, #9
 801acce:	d925      	bls.n	801ad1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	681b      	ldr	r3, [r3, #0]
 801acd4:	68d9      	ldr	r1, [r3, #12]
 801acd6:	683b      	ldr	r3, [r7, #0]
 801acd8:	681b      	ldr	r3, [r3, #0]
 801acda:	b29b      	uxth	r3, r3
 801acdc:	461a      	mov	r2, r3
 801acde:	4613      	mov	r3, r2
 801ace0:	005b      	lsls	r3, r3, #1
 801ace2:	4413      	add	r3, r2
 801ace4:	3b1e      	subs	r3, #30
 801ace6:	2207      	movs	r2, #7
 801ace8:	fa02 f303 	lsl.w	r3, r2, r3
 801acec:	43da      	mvns	r2, r3
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	681b      	ldr	r3, [r3, #0]
 801acf2:	400a      	ands	r2, r1
 801acf4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 801acf6:	687b      	ldr	r3, [r7, #4]
 801acf8:	681b      	ldr	r3, [r3, #0]
 801acfa:	68d9      	ldr	r1, [r3, #12]
 801acfc:	683b      	ldr	r3, [r7, #0]
 801acfe:	689a      	ldr	r2, [r3, #8]
 801ad00:	683b      	ldr	r3, [r7, #0]
 801ad02:	681b      	ldr	r3, [r3, #0]
 801ad04:	b29b      	uxth	r3, r3
 801ad06:	4618      	mov	r0, r3
 801ad08:	4603      	mov	r3, r0
 801ad0a:	005b      	lsls	r3, r3, #1
 801ad0c:	4403      	add	r3, r0
 801ad0e:	3b1e      	subs	r3, #30
 801ad10:	409a      	lsls	r2, r3
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	681b      	ldr	r3, [r3, #0]
 801ad16:	430a      	orrs	r2, r1
 801ad18:	60da      	str	r2, [r3, #12]
 801ad1a:	e022      	b.n	801ad62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801ad1c:	687b      	ldr	r3, [r7, #4]
 801ad1e:	681b      	ldr	r3, [r3, #0]
 801ad20:	6919      	ldr	r1, [r3, #16]
 801ad22:	683b      	ldr	r3, [r7, #0]
 801ad24:	681b      	ldr	r3, [r3, #0]
 801ad26:	b29b      	uxth	r3, r3
 801ad28:	461a      	mov	r2, r3
 801ad2a:	4613      	mov	r3, r2
 801ad2c:	005b      	lsls	r3, r3, #1
 801ad2e:	4413      	add	r3, r2
 801ad30:	2207      	movs	r2, #7
 801ad32:	fa02 f303 	lsl.w	r3, r2, r3
 801ad36:	43da      	mvns	r2, r3
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	681b      	ldr	r3, [r3, #0]
 801ad3c:	400a      	ands	r2, r1
 801ad3e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	681b      	ldr	r3, [r3, #0]
 801ad44:	6919      	ldr	r1, [r3, #16]
 801ad46:	683b      	ldr	r3, [r7, #0]
 801ad48:	689a      	ldr	r2, [r3, #8]
 801ad4a:	683b      	ldr	r3, [r7, #0]
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	b29b      	uxth	r3, r3
 801ad50:	4618      	mov	r0, r3
 801ad52:	4603      	mov	r3, r0
 801ad54:	005b      	lsls	r3, r3, #1
 801ad56:	4403      	add	r3, r0
 801ad58:	409a      	lsls	r2, r3
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	430a      	orrs	r2, r1
 801ad60:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801ad62:	683b      	ldr	r3, [r7, #0]
 801ad64:	685b      	ldr	r3, [r3, #4]
 801ad66:	2b06      	cmp	r3, #6
 801ad68:	d824      	bhi.n	801adb4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801ad70:	683b      	ldr	r3, [r7, #0]
 801ad72:	685a      	ldr	r2, [r3, #4]
 801ad74:	4613      	mov	r3, r2
 801ad76:	009b      	lsls	r3, r3, #2
 801ad78:	4413      	add	r3, r2
 801ad7a:	3b05      	subs	r3, #5
 801ad7c:	221f      	movs	r2, #31
 801ad7e:	fa02 f303 	lsl.w	r3, r2, r3
 801ad82:	43da      	mvns	r2, r3
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	681b      	ldr	r3, [r3, #0]
 801ad88:	400a      	ands	r2, r1
 801ad8a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	681b      	ldr	r3, [r3, #0]
 801ad90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801ad92:	683b      	ldr	r3, [r7, #0]
 801ad94:	681b      	ldr	r3, [r3, #0]
 801ad96:	b29b      	uxth	r3, r3
 801ad98:	4618      	mov	r0, r3
 801ad9a:	683b      	ldr	r3, [r7, #0]
 801ad9c:	685a      	ldr	r2, [r3, #4]
 801ad9e:	4613      	mov	r3, r2
 801ada0:	009b      	lsls	r3, r3, #2
 801ada2:	4413      	add	r3, r2
 801ada4:	3b05      	subs	r3, #5
 801ada6:	fa00 f203 	lsl.w	r2, r0, r3
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	681b      	ldr	r3, [r3, #0]
 801adae:	430a      	orrs	r2, r1
 801adb0:	635a      	str	r2, [r3, #52]	; 0x34
 801adb2:	e04c      	b.n	801ae4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 801adb4:	683b      	ldr	r3, [r7, #0]
 801adb6:	685b      	ldr	r3, [r3, #4]
 801adb8:	2b0c      	cmp	r3, #12
 801adba:	d824      	bhi.n	801ae06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	681b      	ldr	r3, [r3, #0]
 801adc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801adc2:	683b      	ldr	r3, [r7, #0]
 801adc4:	685a      	ldr	r2, [r3, #4]
 801adc6:	4613      	mov	r3, r2
 801adc8:	009b      	lsls	r3, r3, #2
 801adca:	4413      	add	r3, r2
 801adcc:	3b23      	subs	r3, #35	; 0x23
 801adce:	221f      	movs	r2, #31
 801add0:	fa02 f303 	lsl.w	r3, r2, r3
 801add4:	43da      	mvns	r2, r3
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	681b      	ldr	r3, [r3, #0]
 801adda:	400a      	ands	r2, r1
 801addc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 801adde:	687b      	ldr	r3, [r7, #4]
 801ade0:	681b      	ldr	r3, [r3, #0]
 801ade2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801ade4:	683b      	ldr	r3, [r7, #0]
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	b29b      	uxth	r3, r3
 801adea:	4618      	mov	r0, r3
 801adec:	683b      	ldr	r3, [r7, #0]
 801adee:	685a      	ldr	r2, [r3, #4]
 801adf0:	4613      	mov	r3, r2
 801adf2:	009b      	lsls	r3, r3, #2
 801adf4:	4413      	add	r3, r2
 801adf6:	3b23      	subs	r3, #35	; 0x23
 801adf8:	fa00 f203 	lsl.w	r2, r0, r3
 801adfc:	687b      	ldr	r3, [r7, #4]
 801adfe:	681b      	ldr	r3, [r3, #0]
 801ae00:	430a      	orrs	r2, r1
 801ae02:	631a      	str	r2, [r3, #48]	; 0x30
 801ae04:	e023      	b.n	801ae4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	681b      	ldr	r3, [r3, #0]
 801ae0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801ae0c:	683b      	ldr	r3, [r7, #0]
 801ae0e:	685a      	ldr	r2, [r3, #4]
 801ae10:	4613      	mov	r3, r2
 801ae12:	009b      	lsls	r3, r3, #2
 801ae14:	4413      	add	r3, r2
 801ae16:	3b41      	subs	r3, #65	; 0x41
 801ae18:	221f      	movs	r2, #31
 801ae1a:	fa02 f303 	lsl.w	r3, r2, r3
 801ae1e:	43da      	mvns	r2, r3
 801ae20:	687b      	ldr	r3, [r7, #4]
 801ae22:	681b      	ldr	r3, [r3, #0]
 801ae24:	400a      	ands	r2, r1
 801ae26:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	681b      	ldr	r3, [r3, #0]
 801ae2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801ae2e:	683b      	ldr	r3, [r7, #0]
 801ae30:	681b      	ldr	r3, [r3, #0]
 801ae32:	b29b      	uxth	r3, r3
 801ae34:	4618      	mov	r0, r3
 801ae36:	683b      	ldr	r3, [r7, #0]
 801ae38:	685a      	ldr	r2, [r3, #4]
 801ae3a:	4613      	mov	r3, r2
 801ae3c:	009b      	lsls	r3, r3, #2
 801ae3e:	4413      	add	r3, r2
 801ae40:	3b41      	subs	r3, #65	; 0x41
 801ae42:	fa00 f203 	lsl.w	r2, r0, r3
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	430a      	orrs	r2, r1
 801ae4c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801ae4e:	4b29      	ldr	r3, [pc, #164]	; (801aef4 <HAL_ADC_ConfigChannel+0x250>)
 801ae50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801ae52:	687b      	ldr	r3, [r7, #4]
 801ae54:	681b      	ldr	r3, [r3, #0]
 801ae56:	4a28      	ldr	r2, [pc, #160]	; (801aef8 <HAL_ADC_ConfigChannel+0x254>)
 801ae58:	4293      	cmp	r3, r2
 801ae5a:	d10f      	bne.n	801ae7c <HAL_ADC_ConfigChannel+0x1d8>
 801ae5c:	683b      	ldr	r3, [r7, #0]
 801ae5e:	681b      	ldr	r3, [r3, #0]
 801ae60:	2b12      	cmp	r3, #18
 801ae62:	d10b      	bne.n	801ae7c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 801ae64:	68fb      	ldr	r3, [r7, #12]
 801ae66:	685b      	ldr	r3, [r3, #4]
 801ae68:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 801ae6c:	68fb      	ldr	r3, [r7, #12]
 801ae6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 801ae70:	68fb      	ldr	r3, [r7, #12]
 801ae72:	685b      	ldr	r3, [r3, #4]
 801ae74:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 801ae78:	68fb      	ldr	r3, [r7, #12]
 801ae7a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	681b      	ldr	r3, [r3, #0]
 801ae80:	4a1d      	ldr	r2, [pc, #116]	; (801aef8 <HAL_ADC_ConfigChannel+0x254>)
 801ae82:	4293      	cmp	r3, r2
 801ae84:	d12b      	bne.n	801aede <HAL_ADC_ConfigChannel+0x23a>
 801ae86:	683b      	ldr	r3, [r7, #0]
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	4a1c      	ldr	r2, [pc, #112]	; (801aefc <HAL_ADC_ConfigChannel+0x258>)
 801ae8c:	4293      	cmp	r3, r2
 801ae8e:	d003      	beq.n	801ae98 <HAL_ADC_ConfigChannel+0x1f4>
 801ae90:	683b      	ldr	r3, [r7, #0]
 801ae92:	681b      	ldr	r3, [r3, #0]
 801ae94:	2b11      	cmp	r3, #17
 801ae96:	d122      	bne.n	801aede <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 801ae98:	68fb      	ldr	r3, [r7, #12]
 801ae9a:	685b      	ldr	r3, [r3, #4]
 801ae9c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 801aea0:	68fb      	ldr	r3, [r7, #12]
 801aea2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801aea4:	68fb      	ldr	r3, [r7, #12]
 801aea6:	685b      	ldr	r3, [r3, #4]
 801aea8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801aeac:	68fb      	ldr	r3, [r7, #12]
 801aeae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 801aeb0:	683b      	ldr	r3, [r7, #0]
 801aeb2:	681b      	ldr	r3, [r3, #0]
 801aeb4:	4a11      	ldr	r2, [pc, #68]	; (801aefc <HAL_ADC_ConfigChannel+0x258>)
 801aeb6:	4293      	cmp	r3, r2
 801aeb8:	d111      	bne.n	801aede <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801aeba:	4b11      	ldr	r3, [pc, #68]	; (801af00 <HAL_ADC_ConfigChannel+0x25c>)
 801aebc:	681b      	ldr	r3, [r3, #0]
 801aebe:	4a11      	ldr	r2, [pc, #68]	; (801af04 <HAL_ADC_ConfigChannel+0x260>)
 801aec0:	fba2 2303 	umull	r2, r3, r2, r3
 801aec4:	0c9a      	lsrs	r2, r3, #18
 801aec6:	4613      	mov	r3, r2
 801aec8:	009b      	lsls	r3, r3, #2
 801aeca:	4413      	add	r3, r2
 801aecc:	005b      	lsls	r3, r3, #1
 801aece:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801aed0:	e002      	b.n	801aed8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 801aed2:	68bb      	ldr	r3, [r7, #8]
 801aed4:	3b01      	subs	r3, #1
 801aed6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801aed8:	68bb      	ldr	r3, [r7, #8]
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	d1f9      	bne.n	801aed2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	2200      	movs	r2, #0
 801aee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801aee6:	2300      	movs	r3, #0
}
 801aee8:	4618      	mov	r0, r3
 801aeea:	3714      	adds	r7, #20
 801aeec:	46bd      	mov	sp, r7
 801aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aef2:	4770      	bx	lr
 801aef4:	40012300 	.word	0x40012300
 801aef8:	40012000 	.word	0x40012000
 801aefc:	10000012 	.word	0x10000012
 801af00:	20000020 	.word	0x20000020
 801af04:	431bde83 	.word	0x431bde83

0801af08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 801af08:	b480      	push	{r7}
 801af0a:	b085      	sub	sp, #20
 801af0c:	af00      	add	r7, sp, #0
 801af0e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801af10:	4b79      	ldr	r3, [pc, #484]	; (801b0f8 <ADC_Init+0x1f0>)
 801af12:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 801af14:	68fb      	ldr	r3, [r7, #12]
 801af16:	685b      	ldr	r3, [r3, #4]
 801af18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801af1c:	68fb      	ldr	r3, [r7, #12]
 801af1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 801af20:	68fb      	ldr	r3, [r7, #12]
 801af22:	685a      	ldr	r2, [r3, #4]
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	685b      	ldr	r3, [r3, #4]
 801af28:	431a      	orrs	r2, r3
 801af2a:	68fb      	ldr	r3, [r7, #12]
 801af2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	685a      	ldr	r2, [r3, #4]
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	681b      	ldr	r3, [r3, #0]
 801af38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801af3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	681b      	ldr	r3, [r3, #0]
 801af42:	6859      	ldr	r1, [r3, #4]
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	691b      	ldr	r3, [r3, #16]
 801af48:	021a      	lsls	r2, r3, #8
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	681b      	ldr	r3, [r3, #0]
 801af4e:	430a      	orrs	r2, r1
 801af50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	685a      	ldr	r2, [r3, #4]
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	681b      	ldr	r3, [r3, #0]
 801af5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 801af60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801af62:	687b      	ldr	r3, [r7, #4]
 801af64:	681b      	ldr	r3, [r3, #0]
 801af66:	6859      	ldr	r1, [r3, #4]
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	689a      	ldr	r2, [r3, #8]
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	681b      	ldr	r3, [r3, #0]
 801af70:	430a      	orrs	r2, r1
 801af72:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	681b      	ldr	r3, [r3, #0]
 801af78:	689a      	ldr	r2, [r3, #8]
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801af82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	681b      	ldr	r3, [r3, #0]
 801af88:	6899      	ldr	r1, [r3, #8]
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	68da      	ldr	r2, [r3, #12]
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	430a      	orrs	r2, r1
 801af94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af9a:	4a58      	ldr	r2, [pc, #352]	; (801b0fc <ADC_Init+0x1f4>)
 801af9c:	4293      	cmp	r3, r2
 801af9e:	d022      	beq.n	801afe6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	689a      	ldr	r2, [r3, #8]
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	681b      	ldr	r3, [r3, #0]
 801afaa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801afae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	681b      	ldr	r3, [r3, #0]
 801afb4:	6899      	ldr	r1, [r3, #8]
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801afba:	687b      	ldr	r3, [r7, #4]
 801afbc:	681b      	ldr	r3, [r3, #0]
 801afbe:	430a      	orrs	r2, r1
 801afc0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	689a      	ldr	r2, [r3, #8]
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801afd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	6899      	ldr	r1, [r3, #8]
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	681b      	ldr	r3, [r3, #0]
 801afe0:	430a      	orrs	r2, r1
 801afe2:	609a      	str	r2, [r3, #8]
 801afe4:	e00f      	b.n	801b006 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	681b      	ldr	r3, [r3, #0]
 801afea:	689a      	ldr	r2, [r3, #8]
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801aff4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	689a      	ldr	r2, [r3, #8]
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801b004:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	689a      	ldr	r2, [r3, #8]
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	681b      	ldr	r3, [r3, #0]
 801b010:	f022 0202 	bic.w	r2, r2, #2
 801b014:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	681b      	ldr	r3, [r3, #0]
 801b01a:	6899      	ldr	r1, [r3, #8]
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	7e1b      	ldrb	r3, [r3, #24]
 801b020:	005a      	lsls	r2, r3, #1
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	430a      	orrs	r2, r1
 801b028:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	f893 3020 	ldrb.w	r3, [r3, #32]
 801b030:	2b00      	cmp	r3, #0
 801b032:	d01b      	beq.n	801b06c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	681b      	ldr	r3, [r3, #0]
 801b038:	685a      	ldr	r2, [r3, #4]
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	681b      	ldr	r3, [r3, #0]
 801b03e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b042:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	681b      	ldr	r3, [r3, #0]
 801b048:	685a      	ldr	r2, [r3, #4]
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	681b      	ldr	r3, [r3, #0]
 801b04e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801b052:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 801b054:	687b      	ldr	r3, [r7, #4]
 801b056:	681b      	ldr	r3, [r3, #0]
 801b058:	6859      	ldr	r1, [r3, #4]
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b05e:	3b01      	subs	r3, #1
 801b060:	035a      	lsls	r2, r3, #13
 801b062:	687b      	ldr	r3, [r7, #4]
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	430a      	orrs	r2, r1
 801b068:	605a      	str	r2, [r3, #4]
 801b06a:	e007      	b.n	801b07c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	681b      	ldr	r3, [r3, #0]
 801b070:	685a      	ldr	r2, [r3, #4]
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801b07a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	681b      	ldr	r3, [r3, #0]
 801b080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801b08a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	681b      	ldr	r3, [r3, #0]
 801b090:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	69db      	ldr	r3, [r3, #28]
 801b096:	3b01      	subs	r3, #1
 801b098:	051a      	lsls	r2, r3, #20
 801b09a:	687b      	ldr	r3, [r7, #4]
 801b09c:	681b      	ldr	r3, [r3, #0]
 801b09e:	430a      	orrs	r2, r1
 801b0a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	689a      	ldr	r2, [r3, #8]
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	681b      	ldr	r3, [r3, #0]
 801b0ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801b0b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	6899      	ldr	r1, [r3, #8]
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b0be:	025a      	lsls	r2, r3, #9
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	430a      	orrs	r2, r1
 801b0c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	689a      	ldr	r2, [r3, #8]
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	681b      	ldr	r3, [r3, #0]
 801b0d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b0d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	6899      	ldr	r1, [r3, #8]
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	695b      	ldr	r3, [r3, #20]
 801b0e2:	029a      	lsls	r2, r3, #10
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	681b      	ldr	r3, [r3, #0]
 801b0e8:	430a      	orrs	r2, r1
 801b0ea:	609a      	str	r2, [r3, #8]
}
 801b0ec:	bf00      	nop
 801b0ee:	3714      	adds	r7, #20
 801b0f0:	46bd      	mov	sp, r7
 801b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0f6:	4770      	bx	lr
 801b0f8:	40012300 	.word	0x40012300
 801b0fc:	0f000001 	.word	0x0f000001

0801b100 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 801b100:	b580      	push	{r7, lr}
 801b102:	b084      	sub	sp, #16
 801b104:	af00      	add	r7, sp, #0
 801b106:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801b108:	687b      	ldr	r3, [r7, #4]
 801b10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b10c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 801b10e:	68fb      	ldr	r3, [r7, #12]
 801b110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b112:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801b116:	2b00      	cmp	r3, #0
 801b118:	d13c      	bne.n	801b194 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801b11a:	68fb      	ldr	r3, [r7, #12]
 801b11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b11e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801b122:	68fb      	ldr	r3, [r7, #12]
 801b124:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801b126:	68fb      	ldr	r3, [r7, #12]
 801b128:	681b      	ldr	r3, [r3, #0]
 801b12a:	689b      	ldr	r3, [r3, #8]
 801b12c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801b130:	2b00      	cmp	r3, #0
 801b132:	d12b      	bne.n	801b18c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801b134:	68fb      	ldr	r3, [r7, #12]
 801b136:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801b138:	2b00      	cmp	r3, #0
 801b13a:	d127      	bne.n	801b18c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801b13c:	68fb      	ldr	r3, [r7, #12]
 801b13e:	681b      	ldr	r3, [r3, #0]
 801b140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b142:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801b146:	2b00      	cmp	r3, #0
 801b148:	d006      	beq.n	801b158 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801b14a:	68fb      	ldr	r3, [r7, #12]
 801b14c:	681b      	ldr	r3, [r3, #0]
 801b14e:	689b      	ldr	r3, [r3, #8]
 801b150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801b154:	2b00      	cmp	r3, #0
 801b156:	d119      	bne.n	801b18c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801b158:	68fb      	ldr	r3, [r7, #12]
 801b15a:	681b      	ldr	r3, [r3, #0]
 801b15c:	685a      	ldr	r2, [r3, #4]
 801b15e:	68fb      	ldr	r3, [r7, #12]
 801b160:	681b      	ldr	r3, [r3, #0]
 801b162:	f022 0220 	bic.w	r2, r2, #32
 801b166:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 801b168:	68fb      	ldr	r3, [r7, #12]
 801b16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b16c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b170:	68fb      	ldr	r3, [r7, #12]
 801b172:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801b174:	68fb      	ldr	r3, [r7, #12]
 801b176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801b17c:	2b00      	cmp	r3, #0
 801b17e:	d105      	bne.n	801b18c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801b180:	68fb      	ldr	r3, [r7, #12]
 801b182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b184:	f043 0201 	orr.w	r2, r3, #1
 801b188:	68fb      	ldr	r3, [r7, #12]
 801b18a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801b18c:	68f8      	ldr	r0, [r7, #12]
 801b18e:	f7ff fd6b 	bl	801ac68 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801b192:	e00e      	b.n	801b1b2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801b194:	68fb      	ldr	r3, [r7, #12]
 801b196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b198:	f003 0310 	and.w	r3, r3, #16
 801b19c:	2b00      	cmp	r3, #0
 801b19e:	d003      	beq.n	801b1a8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 801b1a0:	68f8      	ldr	r0, [r7, #12]
 801b1a2:	f7ff fd75 	bl	801ac90 <HAL_ADC_ErrorCallback>
}
 801b1a6:	e004      	b.n	801b1b2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801b1a8:	68fb      	ldr	r3, [r7, #12]
 801b1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b1ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b1ae:	6878      	ldr	r0, [r7, #4]
 801b1b0:	4798      	blx	r3
}
 801b1b2:	bf00      	nop
 801b1b4:	3710      	adds	r7, #16
 801b1b6:	46bd      	mov	sp, r7
 801b1b8:	bd80      	pop	{r7, pc}

0801b1ba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 801b1ba:	b580      	push	{r7, lr}
 801b1bc:	b084      	sub	sp, #16
 801b1be:	af00      	add	r7, sp, #0
 801b1c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801b1c2:	687b      	ldr	r3, [r7, #4]
 801b1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b1c6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801b1c8:	68f8      	ldr	r0, [r7, #12]
 801b1ca:	f7ff fd57 	bl	801ac7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801b1ce:	bf00      	nop
 801b1d0:	3710      	adds	r7, #16
 801b1d2:	46bd      	mov	sp, r7
 801b1d4:	bd80      	pop	{r7, pc}

0801b1d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 801b1d6:	b580      	push	{r7, lr}
 801b1d8:	b084      	sub	sp, #16
 801b1da:	af00      	add	r7, sp, #0
 801b1dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b1e2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 801b1e4:	68fb      	ldr	r3, [r7, #12]
 801b1e6:	2240      	movs	r2, #64	; 0x40
 801b1e8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 801b1ea:	68fb      	ldr	r3, [r7, #12]
 801b1ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b1ee:	f043 0204 	orr.w	r2, r3, #4
 801b1f2:	68fb      	ldr	r3, [r7, #12]
 801b1f4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801b1f6:	68f8      	ldr	r0, [r7, #12]
 801b1f8:	f7ff fd4a 	bl	801ac90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801b1fc:	bf00      	nop
 801b1fe:	3710      	adds	r7, #16
 801b200:	46bd      	mov	sp, r7
 801b202:	bd80      	pop	{r7, pc}

0801b204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b204:	b480      	push	{r7}
 801b206:	b085      	sub	sp, #20
 801b208:	af00      	add	r7, sp, #0
 801b20a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	f003 0307 	and.w	r3, r3, #7
 801b212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801b214:	4b0c      	ldr	r3, [pc, #48]	; (801b248 <__NVIC_SetPriorityGrouping+0x44>)
 801b216:	68db      	ldr	r3, [r3, #12]
 801b218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801b21a:	68ba      	ldr	r2, [r7, #8]
 801b21c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801b220:	4013      	ands	r3, r2
 801b222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801b224:	68fb      	ldr	r3, [r7, #12]
 801b226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801b228:	68bb      	ldr	r3, [r7, #8]
 801b22a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801b22c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801b230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801b236:	4a04      	ldr	r2, [pc, #16]	; (801b248 <__NVIC_SetPriorityGrouping+0x44>)
 801b238:	68bb      	ldr	r3, [r7, #8]
 801b23a:	60d3      	str	r3, [r2, #12]
}
 801b23c:	bf00      	nop
 801b23e:	3714      	adds	r7, #20
 801b240:	46bd      	mov	sp, r7
 801b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b246:	4770      	bx	lr
 801b248:	e000ed00 	.word	0xe000ed00

0801b24c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801b24c:	b480      	push	{r7}
 801b24e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801b250:	4b04      	ldr	r3, [pc, #16]	; (801b264 <__NVIC_GetPriorityGrouping+0x18>)
 801b252:	68db      	ldr	r3, [r3, #12]
 801b254:	0a1b      	lsrs	r3, r3, #8
 801b256:	f003 0307 	and.w	r3, r3, #7
}
 801b25a:	4618      	mov	r0, r3
 801b25c:	46bd      	mov	sp, r7
 801b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b262:	4770      	bx	lr
 801b264:	e000ed00 	.word	0xe000ed00

0801b268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b268:	b480      	push	{r7}
 801b26a:	b083      	sub	sp, #12
 801b26c:	af00      	add	r7, sp, #0
 801b26e:	4603      	mov	r3, r0
 801b270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b276:	2b00      	cmp	r3, #0
 801b278:	db0b      	blt.n	801b292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b27a:	79fb      	ldrb	r3, [r7, #7]
 801b27c:	f003 021f 	and.w	r2, r3, #31
 801b280:	4907      	ldr	r1, [pc, #28]	; (801b2a0 <__NVIC_EnableIRQ+0x38>)
 801b282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b286:	095b      	lsrs	r3, r3, #5
 801b288:	2001      	movs	r0, #1
 801b28a:	fa00 f202 	lsl.w	r2, r0, r2
 801b28e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801b292:	bf00      	nop
 801b294:	370c      	adds	r7, #12
 801b296:	46bd      	mov	sp, r7
 801b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b29c:	4770      	bx	lr
 801b29e:	bf00      	nop
 801b2a0:	e000e100 	.word	0xe000e100

0801b2a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801b2a4:	b480      	push	{r7}
 801b2a6:	b083      	sub	sp, #12
 801b2a8:	af00      	add	r7, sp, #0
 801b2aa:	4603      	mov	r3, r0
 801b2ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b2ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	db12      	blt.n	801b2dc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b2b6:	79fb      	ldrb	r3, [r7, #7]
 801b2b8:	f003 021f 	and.w	r2, r3, #31
 801b2bc:	490a      	ldr	r1, [pc, #40]	; (801b2e8 <__NVIC_DisableIRQ+0x44>)
 801b2be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b2c2:	095b      	lsrs	r3, r3, #5
 801b2c4:	2001      	movs	r0, #1
 801b2c6:	fa00 f202 	lsl.w	r2, r0, r2
 801b2ca:	3320      	adds	r3, #32
 801b2cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801b2d0:	f3bf 8f4f 	dsb	sy
}
 801b2d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801b2d6:	f3bf 8f6f 	isb	sy
}
 801b2da:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 801b2dc:	bf00      	nop
 801b2de:	370c      	adds	r7, #12
 801b2e0:	46bd      	mov	sp, r7
 801b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2e6:	4770      	bx	lr
 801b2e8:	e000e100 	.word	0xe000e100

0801b2ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801b2ec:	b480      	push	{r7}
 801b2ee:	b083      	sub	sp, #12
 801b2f0:	af00      	add	r7, sp, #0
 801b2f2:	4603      	mov	r3, r0
 801b2f4:	6039      	str	r1, [r7, #0]
 801b2f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b2f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	db0a      	blt.n	801b316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b300:	683b      	ldr	r3, [r7, #0]
 801b302:	b2da      	uxtb	r2, r3
 801b304:	490c      	ldr	r1, [pc, #48]	; (801b338 <__NVIC_SetPriority+0x4c>)
 801b306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b30a:	0112      	lsls	r2, r2, #4
 801b30c:	b2d2      	uxtb	r2, r2
 801b30e:	440b      	add	r3, r1
 801b310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801b314:	e00a      	b.n	801b32c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b316:	683b      	ldr	r3, [r7, #0]
 801b318:	b2da      	uxtb	r2, r3
 801b31a:	4908      	ldr	r1, [pc, #32]	; (801b33c <__NVIC_SetPriority+0x50>)
 801b31c:	79fb      	ldrb	r3, [r7, #7]
 801b31e:	f003 030f 	and.w	r3, r3, #15
 801b322:	3b04      	subs	r3, #4
 801b324:	0112      	lsls	r2, r2, #4
 801b326:	b2d2      	uxtb	r2, r2
 801b328:	440b      	add	r3, r1
 801b32a:	761a      	strb	r2, [r3, #24]
}
 801b32c:	bf00      	nop
 801b32e:	370c      	adds	r7, #12
 801b330:	46bd      	mov	sp, r7
 801b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b336:	4770      	bx	lr
 801b338:	e000e100 	.word	0xe000e100
 801b33c:	e000ed00 	.word	0xe000ed00

0801b340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b340:	b480      	push	{r7}
 801b342:	b089      	sub	sp, #36	; 0x24
 801b344:	af00      	add	r7, sp, #0
 801b346:	60f8      	str	r0, [r7, #12]
 801b348:	60b9      	str	r1, [r7, #8]
 801b34a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801b34c:	68fb      	ldr	r3, [r7, #12]
 801b34e:	f003 0307 	and.w	r3, r3, #7
 801b352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801b354:	69fb      	ldr	r3, [r7, #28]
 801b356:	f1c3 0307 	rsb	r3, r3, #7
 801b35a:	2b04      	cmp	r3, #4
 801b35c:	bf28      	it	cs
 801b35e:	2304      	movcs	r3, #4
 801b360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801b362:	69fb      	ldr	r3, [r7, #28]
 801b364:	3304      	adds	r3, #4
 801b366:	2b06      	cmp	r3, #6
 801b368:	d902      	bls.n	801b370 <NVIC_EncodePriority+0x30>
 801b36a:	69fb      	ldr	r3, [r7, #28]
 801b36c:	3b03      	subs	r3, #3
 801b36e:	e000      	b.n	801b372 <NVIC_EncodePriority+0x32>
 801b370:	2300      	movs	r3, #0
 801b372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b378:	69bb      	ldr	r3, [r7, #24]
 801b37a:	fa02 f303 	lsl.w	r3, r2, r3
 801b37e:	43da      	mvns	r2, r3
 801b380:	68bb      	ldr	r3, [r7, #8]
 801b382:	401a      	ands	r2, r3
 801b384:	697b      	ldr	r3, [r7, #20]
 801b386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801b388:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b38c:	697b      	ldr	r3, [r7, #20]
 801b38e:	fa01 f303 	lsl.w	r3, r1, r3
 801b392:	43d9      	mvns	r1, r3
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b398:	4313      	orrs	r3, r2
         );
}
 801b39a:	4618      	mov	r0, r3
 801b39c:	3724      	adds	r7, #36	; 0x24
 801b39e:	46bd      	mov	sp, r7
 801b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3a4:	4770      	bx	lr
	...

0801b3a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801b3a8:	b580      	push	{r7, lr}
 801b3aa:	b082      	sub	sp, #8
 801b3ac:	af00      	add	r7, sp, #0
 801b3ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	3b01      	subs	r3, #1
 801b3b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801b3b8:	d301      	bcc.n	801b3be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801b3ba:	2301      	movs	r3, #1
 801b3bc:	e00f      	b.n	801b3de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801b3be:	4a0a      	ldr	r2, [pc, #40]	; (801b3e8 <SysTick_Config+0x40>)
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	3b01      	subs	r3, #1
 801b3c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801b3c6:	210f      	movs	r1, #15
 801b3c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b3cc:	f7ff ff8e 	bl	801b2ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801b3d0:	4b05      	ldr	r3, [pc, #20]	; (801b3e8 <SysTick_Config+0x40>)
 801b3d2:	2200      	movs	r2, #0
 801b3d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801b3d6:	4b04      	ldr	r3, [pc, #16]	; (801b3e8 <SysTick_Config+0x40>)
 801b3d8:	2207      	movs	r2, #7
 801b3da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801b3dc:	2300      	movs	r3, #0
}
 801b3de:	4618      	mov	r0, r3
 801b3e0:	3708      	adds	r7, #8
 801b3e2:	46bd      	mov	sp, r7
 801b3e4:	bd80      	pop	{r7, pc}
 801b3e6:	bf00      	nop
 801b3e8:	e000e010 	.word	0xe000e010

0801b3ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b3ec:	b580      	push	{r7, lr}
 801b3ee:	b082      	sub	sp, #8
 801b3f0:	af00      	add	r7, sp, #0
 801b3f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801b3f4:	6878      	ldr	r0, [r7, #4]
 801b3f6:	f7ff ff05 	bl	801b204 <__NVIC_SetPriorityGrouping>
}
 801b3fa:	bf00      	nop
 801b3fc:	3708      	adds	r7, #8
 801b3fe:	46bd      	mov	sp, r7
 801b400:	bd80      	pop	{r7, pc}

0801b402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801b402:	b580      	push	{r7, lr}
 801b404:	b086      	sub	sp, #24
 801b406:	af00      	add	r7, sp, #0
 801b408:	4603      	mov	r3, r0
 801b40a:	60b9      	str	r1, [r7, #8]
 801b40c:	607a      	str	r2, [r7, #4]
 801b40e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801b410:	2300      	movs	r3, #0
 801b412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801b414:	f7ff ff1a 	bl	801b24c <__NVIC_GetPriorityGrouping>
 801b418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801b41a:	687a      	ldr	r2, [r7, #4]
 801b41c:	68b9      	ldr	r1, [r7, #8]
 801b41e:	6978      	ldr	r0, [r7, #20]
 801b420:	f7ff ff8e 	bl	801b340 <NVIC_EncodePriority>
 801b424:	4602      	mov	r2, r0
 801b426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b42a:	4611      	mov	r1, r2
 801b42c:	4618      	mov	r0, r3
 801b42e:	f7ff ff5d 	bl	801b2ec <__NVIC_SetPriority>
}
 801b432:	bf00      	nop
 801b434:	3718      	adds	r7, #24
 801b436:	46bd      	mov	sp, r7
 801b438:	bd80      	pop	{r7, pc}

0801b43a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b43a:	b580      	push	{r7, lr}
 801b43c:	b082      	sub	sp, #8
 801b43e:	af00      	add	r7, sp, #0
 801b440:	4603      	mov	r3, r0
 801b442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801b444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b448:	4618      	mov	r0, r3
 801b44a:	f7ff ff0d 	bl	801b268 <__NVIC_EnableIRQ>
}
 801b44e:	bf00      	nop
 801b450:	3708      	adds	r7, #8
 801b452:	46bd      	mov	sp, r7
 801b454:	bd80      	pop	{r7, pc}

0801b456 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801b456:	b580      	push	{r7, lr}
 801b458:	b082      	sub	sp, #8
 801b45a:	af00      	add	r7, sp, #0
 801b45c:	4603      	mov	r3, r0
 801b45e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801b460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b464:	4618      	mov	r0, r3
 801b466:	f7ff ff1d 	bl	801b2a4 <__NVIC_DisableIRQ>
}
 801b46a:	bf00      	nop
 801b46c:	3708      	adds	r7, #8
 801b46e:	46bd      	mov	sp, r7
 801b470:	bd80      	pop	{r7, pc}

0801b472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801b472:	b580      	push	{r7, lr}
 801b474:	b082      	sub	sp, #8
 801b476:	af00      	add	r7, sp, #0
 801b478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801b47a:	6878      	ldr	r0, [r7, #4]
 801b47c:	f7ff ff94 	bl	801b3a8 <SysTick_Config>
 801b480:	4603      	mov	r3, r0
}
 801b482:	4618      	mov	r0, r3
 801b484:	3708      	adds	r7, #8
 801b486:	46bd      	mov	sp, r7
 801b488:	bd80      	pop	{r7, pc}
	...

0801b48c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801b48c:	b580      	push	{r7, lr}
 801b48e:	b086      	sub	sp, #24
 801b490:	af00      	add	r7, sp, #0
 801b492:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801b494:	2300      	movs	r3, #0
 801b496:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801b498:	f7ff faa6 	bl	801a9e8 <HAL_GetTick>
 801b49c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	2b00      	cmp	r3, #0
 801b4a2:	d101      	bne.n	801b4a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801b4a4:	2301      	movs	r3, #1
 801b4a6:	e099      	b.n	801b5dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	2202      	movs	r2, #2
 801b4ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	2200      	movs	r2, #0
 801b4b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	681b      	ldr	r3, [r3, #0]
 801b4bc:	681a      	ldr	r2, [r3, #0]
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	681b      	ldr	r3, [r3, #0]
 801b4c2:	f022 0201 	bic.w	r2, r2, #1
 801b4c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801b4c8:	e00f      	b.n	801b4ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801b4ca:	f7ff fa8d 	bl	801a9e8 <HAL_GetTick>
 801b4ce:	4602      	mov	r2, r0
 801b4d0:	693b      	ldr	r3, [r7, #16]
 801b4d2:	1ad3      	subs	r3, r2, r3
 801b4d4:	2b05      	cmp	r3, #5
 801b4d6:	d908      	bls.n	801b4ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	2220      	movs	r2, #32
 801b4dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801b4de:	687b      	ldr	r3, [r7, #4]
 801b4e0:	2203      	movs	r2, #3
 801b4e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801b4e6:	2303      	movs	r3, #3
 801b4e8:	e078      	b.n	801b5dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	681b      	ldr	r3, [r3, #0]
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	f003 0301 	and.w	r3, r3, #1
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	d1e8      	bne.n	801b4ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	681b      	ldr	r3, [r3, #0]
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801b500:	697a      	ldr	r2, [r7, #20]
 801b502:	4b38      	ldr	r3, [pc, #224]	; (801b5e4 <HAL_DMA_Init+0x158>)
 801b504:	4013      	ands	r3, r2
 801b506:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	685a      	ldr	r2, [r3, #4]
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	689b      	ldr	r3, [r3, #8]
 801b510:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801b516:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	691b      	ldr	r3, [r3, #16]
 801b51c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b522:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	699b      	ldr	r3, [r3, #24]
 801b528:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b52e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	6a1b      	ldr	r3, [r3, #32]
 801b534:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801b536:	697a      	ldr	r2, [r7, #20]
 801b538:	4313      	orrs	r3, r2
 801b53a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b540:	2b04      	cmp	r3, #4
 801b542:	d107      	bne.n	801b554 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b54c:	4313      	orrs	r3, r2
 801b54e:	697a      	ldr	r2, [r7, #20]
 801b550:	4313      	orrs	r3, r2
 801b552:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	681b      	ldr	r3, [r3, #0]
 801b558:	697a      	ldr	r2, [r7, #20]
 801b55a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	681b      	ldr	r3, [r3, #0]
 801b560:	695b      	ldr	r3, [r3, #20]
 801b562:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801b564:	697b      	ldr	r3, [r7, #20]
 801b566:	f023 0307 	bic.w	r3, r3, #7
 801b56a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b570:	697a      	ldr	r2, [r7, #20]
 801b572:	4313      	orrs	r3, r2
 801b574:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b57a:	2b04      	cmp	r3, #4
 801b57c:	d117      	bne.n	801b5ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b582:	697a      	ldr	r2, [r7, #20]
 801b584:	4313      	orrs	r3, r2
 801b586:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d00e      	beq.n	801b5ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801b590:	6878      	ldr	r0, [r7, #4]
 801b592:	f000 fb1b 	bl	801bbcc <DMA_CheckFifoParam>
 801b596:	4603      	mov	r3, r0
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d008      	beq.n	801b5ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	2240      	movs	r2, #64	; 0x40
 801b5a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801b5a2:	687b      	ldr	r3, [r7, #4]
 801b5a4:	2201      	movs	r2, #1
 801b5a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801b5aa:	2301      	movs	r3, #1
 801b5ac:	e016      	b.n	801b5dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	681b      	ldr	r3, [r3, #0]
 801b5b2:	697a      	ldr	r2, [r7, #20]
 801b5b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801b5b6:	6878      	ldr	r0, [r7, #4]
 801b5b8:	f000 fad2 	bl	801bb60 <DMA_CalcBaseAndBitshift>
 801b5bc:	4603      	mov	r3, r0
 801b5be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b5c4:	223f      	movs	r2, #63	; 0x3f
 801b5c6:	409a      	lsls	r2, r3
 801b5c8:	68fb      	ldr	r3, [r7, #12]
 801b5ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b5cc:	687b      	ldr	r3, [r7, #4]
 801b5ce:	2200      	movs	r2, #0
 801b5d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	2201      	movs	r2, #1
 801b5d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801b5da:	2300      	movs	r3, #0
}
 801b5dc:	4618      	mov	r0, r3
 801b5de:	3718      	adds	r7, #24
 801b5e0:	46bd      	mov	sp, r7
 801b5e2:	bd80      	pop	{r7, pc}
 801b5e4:	f010803f 	.word	0xf010803f

0801b5e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801b5e8:	b580      	push	{r7, lr}
 801b5ea:	b086      	sub	sp, #24
 801b5ec:	af00      	add	r7, sp, #0
 801b5ee:	60f8      	str	r0, [r7, #12]
 801b5f0:	60b9      	str	r1, [r7, #8]
 801b5f2:	607a      	str	r2, [r7, #4]
 801b5f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801b5f6:	2300      	movs	r3, #0
 801b5f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801b5fa:	68fb      	ldr	r3, [r7, #12]
 801b5fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b5fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801b600:	68fb      	ldr	r3, [r7, #12]
 801b602:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b606:	2b01      	cmp	r3, #1
 801b608:	d101      	bne.n	801b60e <HAL_DMA_Start_IT+0x26>
 801b60a:	2302      	movs	r3, #2
 801b60c:	e040      	b.n	801b690 <HAL_DMA_Start_IT+0xa8>
 801b60e:	68fb      	ldr	r3, [r7, #12]
 801b610:	2201      	movs	r2, #1
 801b612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801b616:	68fb      	ldr	r3, [r7, #12]
 801b618:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801b61c:	b2db      	uxtb	r3, r3
 801b61e:	2b01      	cmp	r3, #1
 801b620:	d12f      	bne.n	801b682 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801b622:	68fb      	ldr	r3, [r7, #12]
 801b624:	2202      	movs	r2, #2
 801b626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b62a:	68fb      	ldr	r3, [r7, #12]
 801b62c:	2200      	movs	r2, #0
 801b62e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801b630:	683b      	ldr	r3, [r7, #0]
 801b632:	687a      	ldr	r2, [r7, #4]
 801b634:	68b9      	ldr	r1, [r7, #8]
 801b636:	68f8      	ldr	r0, [r7, #12]
 801b638:	f000 fa64 	bl	801bb04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801b63c:	68fb      	ldr	r3, [r7, #12]
 801b63e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b640:	223f      	movs	r2, #63	; 0x3f
 801b642:	409a      	lsls	r2, r3
 801b644:	693b      	ldr	r3, [r7, #16]
 801b646:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 801b648:	68fb      	ldr	r3, [r7, #12]
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	681a      	ldr	r2, [r3, #0]
 801b64e:	68fb      	ldr	r3, [r7, #12]
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	f042 0216 	orr.w	r2, r2, #22
 801b656:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 801b658:	68fb      	ldr	r3, [r7, #12]
 801b65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b65c:	2b00      	cmp	r3, #0
 801b65e:	d007      	beq.n	801b670 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801b660:	68fb      	ldr	r3, [r7, #12]
 801b662:	681b      	ldr	r3, [r3, #0]
 801b664:	681a      	ldr	r2, [r3, #0]
 801b666:	68fb      	ldr	r3, [r7, #12]
 801b668:	681b      	ldr	r3, [r3, #0]
 801b66a:	f042 0208 	orr.w	r2, r2, #8
 801b66e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801b670:	68fb      	ldr	r3, [r7, #12]
 801b672:	681b      	ldr	r3, [r3, #0]
 801b674:	681a      	ldr	r2, [r3, #0]
 801b676:	68fb      	ldr	r3, [r7, #12]
 801b678:	681b      	ldr	r3, [r3, #0]
 801b67a:	f042 0201 	orr.w	r2, r2, #1
 801b67e:	601a      	str	r2, [r3, #0]
 801b680:	e005      	b.n	801b68e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801b682:	68fb      	ldr	r3, [r7, #12]
 801b684:	2200      	movs	r2, #0
 801b686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801b68a:	2302      	movs	r3, #2
 801b68c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801b68e:	7dfb      	ldrb	r3, [r7, #23]
}
 801b690:	4618      	mov	r0, r3
 801b692:	3718      	adds	r7, #24
 801b694:	46bd      	mov	sp, r7
 801b696:	bd80      	pop	{r7, pc}

0801b698 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801b698:	b580      	push	{r7, lr}
 801b69a:	b084      	sub	sp, #16
 801b69c:	af00      	add	r7, sp, #0
 801b69e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b6a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801b6a6:	f7ff f99f 	bl	801a9e8 <HAL_GetTick>
 801b6aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801b6b2:	b2db      	uxtb	r3, r3
 801b6b4:	2b02      	cmp	r3, #2
 801b6b6:	d008      	beq.n	801b6ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	2280      	movs	r2, #128	; 0x80
 801b6bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	2200      	movs	r2, #0
 801b6c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801b6c6:	2301      	movs	r3, #1
 801b6c8:	e052      	b.n	801b770 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	681a      	ldr	r2, [r3, #0]
 801b6d0:	687b      	ldr	r3, [r7, #4]
 801b6d2:	681b      	ldr	r3, [r3, #0]
 801b6d4:	f022 0216 	bic.w	r2, r2, #22
 801b6d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	681b      	ldr	r3, [r3, #0]
 801b6de:	695a      	ldr	r2, [r3, #20]
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	681b      	ldr	r3, [r3, #0]
 801b6e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b6e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801b6ea:	687b      	ldr	r3, [r7, #4]
 801b6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	d103      	bne.n	801b6fa <HAL_DMA_Abort+0x62>
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d007      	beq.n	801b70a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	681a      	ldr	r2, [r3, #0]
 801b700:	687b      	ldr	r3, [r7, #4]
 801b702:	681b      	ldr	r3, [r3, #0]
 801b704:	f022 0208 	bic.w	r2, r2, #8
 801b708:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	681a      	ldr	r2, [r3, #0]
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	681b      	ldr	r3, [r3, #0]
 801b714:	f022 0201 	bic.w	r2, r2, #1
 801b718:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801b71a:	e013      	b.n	801b744 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801b71c:	f7ff f964 	bl	801a9e8 <HAL_GetTick>
 801b720:	4602      	mov	r2, r0
 801b722:	68bb      	ldr	r3, [r7, #8]
 801b724:	1ad3      	subs	r3, r2, r3
 801b726:	2b05      	cmp	r3, #5
 801b728:	d90c      	bls.n	801b744 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801b72a:	687b      	ldr	r3, [r7, #4]
 801b72c:	2220      	movs	r2, #32
 801b72e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	2203      	movs	r2, #3
 801b734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801b738:	687b      	ldr	r3, [r7, #4]
 801b73a:	2200      	movs	r2, #0
 801b73c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 801b740:	2303      	movs	r3, #3
 801b742:	e015      	b.n	801b770 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	681b      	ldr	r3, [r3, #0]
 801b748:	681b      	ldr	r3, [r3, #0]
 801b74a:	f003 0301 	and.w	r3, r3, #1
 801b74e:	2b00      	cmp	r3, #0
 801b750:	d1e4      	bne.n	801b71c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801b752:	687b      	ldr	r3, [r7, #4]
 801b754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b756:	223f      	movs	r2, #63	; 0x3f
 801b758:	409a      	lsls	r2, r3
 801b75a:	68fb      	ldr	r3, [r7, #12]
 801b75c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801b75e:	687b      	ldr	r3, [r7, #4]
 801b760:	2201      	movs	r2, #1
 801b762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b766:	687b      	ldr	r3, [r7, #4]
 801b768:	2200      	movs	r2, #0
 801b76a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 801b76e:	2300      	movs	r3, #0
}
 801b770:	4618      	mov	r0, r3
 801b772:	3710      	adds	r7, #16
 801b774:	46bd      	mov	sp, r7
 801b776:	bd80      	pop	{r7, pc}

0801b778 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801b778:	b480      	push	{r7}
 801b77a:	b083      	sub	sp, #12
 801b77c:	af00      	add	r7, sp, #0
 801b77e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801b786:	b2db      	uxtb	r3, r3
 801b788:	2b02      	cmp	r3, #2
 801b78a:	d004      	beq.n	801b796 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	2280      	movs	r2, #128	; 0x80
 801b790:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801b792:	2301      	movs	r3, #1
 801b794:	e00c      	b.n	801b7b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	2205      	movs	r2, #5
 801b79a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	681b      	ldr	r3, [r3, #0]
 801b7a2:	681a      	ldr	r2, [r3, #0]
 801b7a4:	687b      	ldr	r3, [r7, #4]
 801b7a6:	681b      	ldr	r3, [r3, #0]
 801b7a8:	f022 0201 	bic.w	r2, r2, #1
 801b7ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801b7ae:	2300      	movs	r3, #0
}
 801b7b0:	4618      	mov	r0, r3
 801b7b2:	370c      	adds	r7, #12
 801b7b4:	46bd      	mov	sp, r7
 801b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7ba:	4770      	bx	lr

0801b7bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801b7bc:	b580      	push	{r7, lr}
 801b7be:	b086      	sub	sp, #24
 801b7c0:	af00      	add	r7, sp, #0
 801b7c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801b7c4:	2300      	movs	r3, #0
 801b7c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801b7c8:	4b8e      	ldr	r3, [pc, #568]	; (801ba04 <HAL_DMA_IRQHandler+0x248>)
 801b7ca:	681b      	ldr	r3, [r3, #0]
 801b7cc:	4a8e      	ldr	r2, [pc, #568]	; (801ba08 <HAL_DMA_IRQHandler+0x24c>)
 801b7ce:	fba2 2303 	umull	r2, r3, r2, r3
 801b7d2:	0a9b      	lsrs	r3, r3, #10
 801b7d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b7da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801b7dc:	693b      	ldr	r3, [r7, #16]
 801b7de:	681b      	ldr	r3, [r3, #0]
 801b7e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801b7e2:	687b      	ldr	r3, [r7, #4]
 801b7e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b7e6:	2208      	movs	r2, #8
 801b7e8:	409a      	lsls	r2, r3
 801b7ea:	68fb      	ldr	r3, [r7, #12]
 801b7ec:	4013      	ands	r3, r2
 801b7ee:	2b00      	cmp	r3, #0
 801b7f0:	d01a      	beq.n	801b828 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	681b      	ldr	r3, [r3, #0]
 801b7f6:	681b      	ldr	r3, [r3, #0]
 801b7f8:	f003 0304 	and.w	r3, r3, #4
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	d013      	beq.n	801b828 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801b800:	687b      	ldr	r3, [r7, #4]
 801b802:	681b      	ldr	r3, [r3, #0]
 801b804:	681a      	ldr	r2, [r3, #0]
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	681b      	ldr	r3, [r3, #0]
 801b80a:	f022 0204 	bic.w	r2, r2, #4
 801b80e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b814:	2208      	movs	r2, #8
 801b816:	409a      	lsls	r2, r3
 801b818:	693b      	ldr	r3, [r7, #16]
 801b81a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801b81c:	687b      	ldr	r3, [r7, #4]
 801b81e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b820:	f043 0201 	orr.w	r2, r3, #1
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b82c:	2201      	movs	r2, #1
 801b82e:	409a      	lsls	r2, r3
 801b830:	68fb      	ldr	r3, [r7, #12]
 801b832:	4013      	ands	r3, r2
 801b834:	2b00      	cmp	r3, #0
 801b836:	d012      	beq.n	801b85e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	681b      	ldr	r3, [r3, #0]
 801b83c:	695b      	ldr	r3, [r3, #20]
 801b83e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b842:	2b00      	cmp	r3, #0
 801b844:	d00b      	beq.n	801b85e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b84a:	2201      	movs	r2, #1
 801b84c:	409a      	lsls	r2, r3
 801b84e:	693b      	ldr	r3, [r7, #16]
 801b850:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801b852:	687b      	ldr	r3, [r7, #4]
 801b854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b856:	f043 0202 	orr.w	r2, r3, #2
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b862:	2204      	movs	r2, #4
 801b864:	409a      	lsls	r2, r3
 801b866:	68fb      	ldr	r3, [r7, #12]
 801b868:	4013      	ands	r3, r2
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	d012      	beq.n	801b894 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	681b      	ldr	r3, [r3, #0]
 801b872:	681b      	ldr	r3, [r3, #0]
 801b874:	f003 0302 	and.w	r3, r3, #2
 801b878:	2b00      	cmp	r3, #0
 801b87a:	d00b      	beq.n	801b894 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b880:	2204      	movs	r2, #4
 801b882:	409a      	lsls	r2, r3
 801b884:	693b      	ldr	r3, [r7, #16]
 801b886:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b88c:	f043 0204 	orr.w	r2, r3, #4
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b898:	2210      	movs	r2, #16
 801b89a:	409a      	lsls	r2, r3
 801b89c:	68fb      	ldr	r3, [r7, #12]
 801b89e:	4013      	ands	r3, r2
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	d043      	beq.n	801b92c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	681b      	ldr	r3, [r3, #0]
 801b8a8:	681b      	ldr	r3, [r3, #0]
 801b8aa:	f003 0308 	and.w	r3, r3, #8
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d03c      	beq.n	801b92c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b8b6:	2210      	movs	r2, #16
 801b8b8:	409a      	lsls	r2, r3
 801b8ba:	693b      	ldr	r3, [r7, #16]
 801b8bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	681b      	ldr	r3, [r3, #0]
 801b8c2:	681b      	ldr	r3, [r3, #0]
 801b8c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	d018      	beq.n	801b8fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	681b      	ldr	r3, [r3, #0]
 801b8d0:	681b      	ldr	r3, [r3, #0]
 801b8d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d108      	bne.n	801b8ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b8de:	2b00      	cmp	r3, #0
 801b8e0:	d024      	beq.n	801b92c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b8e6:	6878      	ldr	r0, [r7, #4]
 801b8e8:	4798      	blx	r3
 801b8ea:	e01f      	b.n	801b92c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b8f0:	2b00      	cmp	r3, #0
 801b8f2:	d01b      	beq.n	801b92c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b8f8:	6878      	ldr	r0, [r7, #4]
 801b8fa:	4798      	blx	r3
 801b8fc:	e016      	b.n	801b92c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	681b      	ldr	r3, [r3, #0]
 801b902:	681b      	ldr	r3, [r3, #0]
 801b904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b908:	2b00      	cmp	r3, #0
 801b90a:	d107      	bne.n	801b91c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	681b      	ldr	r3, [r3, #0]
 801b910:	681a      	ldr	r2, [r3, #0]
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	681b      	ldr	r3, [r3, #0]
 801b916:	f022 0208 	bic.w	r2, r2, #8
 801b91a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b920:	2b00      	cmp	r3, #0
 801b922:	d003      	beq.n	801b92c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801b924:	687b      	ldr	r3, [r7, #4]
 801b926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b928:	6878      	ldr	r0, [r7, #4]
 801b92a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b930:	2220      	movs	r2, #32
 801b932:	409a      	lsls	r2, r3
 801b934:	68fb      	ldr	r3, [r7, #12]
 801b936:	4013      	ands	r3, r2
 801b938:	2b00      	cmp	r3, #0
 801b93a:	f000 808f 	beq.w	801ba5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	681b      	ldr	r3, [r3, #0]
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	f003 0310 	and.w	r3, r3, #16
 801b948:	2b00      	cmp	r3, #0
 801b94a:	f000 8087 	beq.w	801ba5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b952:	2220      	movs	r2, #32
 801b954:	409a      	lsls	r2, r3
 801b956:	693b      	ldr	r3, [r7, #16]
 801b958:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801b960:	b2db      	uxtb	r3, r3
 801b962:	2b05      	cmp	r3, #5
 801b964:	d136      	bne.n	801b9d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	681b      	ldr	r3, [r3, #0]
 801b96a:	681a      	ldr	r2, [r3, #0]
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	681b      	ldr	r3, [r3, #0]
 801b970:	f022 0216 	bic.w	r2, r2, #22
 801b974:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	695a      	ldr	r2, [r3, #20]
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	681b      	ldr	r3, [r3, #0]
 801b980:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b984:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	d103      	bne.n	801b996 <HAL_DMA_IRQHandler+0x1da>
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b992:	2b00      	cmp	r3, #0
 801b994:	d007      	beq.n	801b9a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	681b      	ldr	r3, [r3, #0]
 801b99a:	681a      	ldr	r2, [r3, #0]
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	f022 0208 	bic.w	r2, r2, #8
 801b9a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b9aa:	223f      	movs	r2, #63	; 0x3f
 801b9ac:	409a      	lsls	r2, r3
 801b9ae:	693b      	ldr	r3, [r7, #16]
 801b9b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	2201      	movs	r2, #1
 801b9b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	2200      	movs	r2, #0
 801b9be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	d07e      	beq.n	801bac8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 801b9ca:	687b      	ldr	r3, [r7, #4]
 801b9cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b9ce:	6878      	ldr	r0, [r7, #4]
 801b9d0:	4798      	blx	r3
        }
        return;
 801b9d2:	e079      	b.n	801bac8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	681b      	ldr	r3, [r3, #0]
 801b9d8:	681b      	ldr	r3, [r3, #0]
 801b9da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	d01d      	beq.n	801ba1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	681b      	ldr	r3, [r3, #0]
 801b9e6:	681b      	ldr	r3, [r3, #0]
 801b9e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d10d      	bne.n	801ba0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b9f4:	2b00      	cmp	r3, #0
 801b9f6:	d031      	beq.n	801ba5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b9fc:	6878      	ldr	r0, [r7, #4]
 801b9fe:	4798      	blx	r3
 801ba00:	e02c      	b.n	801ba5c <HAL_DMA_IRQHandler+0x2a0>
 801ba02:	bf00      	nop
 801ba04:	20000020 	.word	0x20000020
 801ba08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ba10:	2b00      	cmp	r3, #0
 801ba12:	d023      	beq.n	801ba5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ba18:	6878      	ldr	r0, [r7, #4]
 801ba1a:	4798      	blx	r3
 801ba1c:	e01e      	b.n	801ba5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	681b      	ldr	r3, [r3, #0]
 801ba22:	681b      	ldr	r3, [r3, #0]
 801ba24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ba28:	2b00      	cmp	r3, #0
 801ba2a:	d10f      	bne.n	801ba4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	681b      	ldr	r3, [r3, #0]
 801ba30:	681a      	ldr	r2, [r3, #0]
 801ba32:	687b      	ldr	r3, [r7, #4]
 801ba34:	681b      	ldr	r3, [r3, #0]
 801ba36:	f022 0210 	bic.w	r2, r2, #16
 801ba3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	2201      	movs	r2, #1
 801ba40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	2200      	movs	r2, #0
 801ba48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801ba4c:	687b      	ldr	r3, [r7, #4]
 801ba4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	d003      	beq.n	801ba5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ba58:	6878      	ldr	r0, [r7, #4]
 801ba5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	d032      	beq.n	801baca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801ba64:	687b      	ldr	r3, [r7, #4]
 801ba66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ba68:	f003 0301 	and.w	r3, r3, #1
 801ba6c:	2b00      	cmp	r3, #0
 801ba6e:	d022      	beq.n	801bab6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801ba70:	687b      	ldr	r3, [r7, #4]
 801ba72:	2205      	movs	r2, #5
 801ba74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	681b      	ldr	r3, [r3, #0]
 801ba7c:	681a      	ldr	r2, [r3, #0]
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	681b      	ldr	r3, [r3, #0]
 801ba82:	f022 0201 	bic.w	r2, r2, #1
 801ba86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801ba88:	68bb      	ldr	r3, [r7, #8]
 801ba8a:	3301      	adds	r3, #1
 801ba8c:	60bb      	str	r3, [r7, #8]
 801ba8e:	697a      	ldr	r2, [r7, #20]
 801ba90:	429a      	cmp	r2, r3
 801ba92:	d307      	bcc.n	801baa4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	681b      	ldr	r3, [r3, #0]
 801ba98:	681b      	ldr	r3, [r3, #0]
 801ba9a:	f003 0301 	and.w	r3, r3, #1
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	d1f2      	bne.n	801ba88 <HAL_DMA_IRQHandler+0x2cc>
 801baa2:	e000      	b.n	801baa6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 801baa4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	2201      	movs	r2, #1
 801baaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801baae:	687b      	ldr	r3, [r7, #4]
 801bab0:	2200      	movs	r2, #0
 801bab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 801bab6:	687b      	ldr	r3, [r7, #4]
 801bab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801baba:	2b00      	cmp	r3, #0
 801babc:	d005      	beq.n	801baca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801babe:	687b      	ldr	r3, [r7, #4]
 801bac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bac2:	6878      	ldr	r0, [r7, #4]
 801bac4:	4798      	blx	r3
 801bac6:	e000      	b.n	801baca <HAL_DMA_IRQHandler+0x30e>
        return;
 801bac8:	bf00      	nop
    }
  }
}
 801baca:	3718      	adds	r7, #24
 801bacc:	46bd      	mov	sp, r7
 801bace:	bd80      	pop	{r7, pc}

0801bad0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 801bad0:	b480      	push	{r7}
 801bad2:	b083      	sub	sp, #12
 801bad4:	af00      	add	r7, sp, #0
 801bad6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801bade:	b2db      	uxtb	r3, r3
}
 801bae0:	4618      	mov	r0, r3
 801bae2:	370c      	adds	r7, #12
 801bae4:	46bd      	mov	sp, r7
 801bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baea:	4770      	bx	lr

0801baec <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 801baec:	b480      	push	{r7}
 801baee:	b083      	sub	sp, #12
 801baf0:	af00      	add	r7, sp, #0
 801baf2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 801baf8:	4618      	mov	r0, r3
 801bafa:	370c      	adds	r7, #12
 801bafc:	46bd      	mov	sp, r7
 801bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb02:	4770      	bx	lr

0801bb04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801bb04:	b480      	push	{r7}
 801bb06:	b085      	sub	sp, #20
 801bb08:	af00      	add	r7, sp, #0
 801bb0a:	60f8      	str	r0, [r7, #12]
 801bb0c:	60b9      	str	r1, [r7, #8]
 801bb0e:	607a      	str	r2, [r7, #4]
 801bb10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801bb12:	68fb      	ldr	r3, [r7, #12]
 801bb14:	681b      	ldr	r3, [r3, #0]
 801bb16:	681a      	ldr	r2, [r3, #0]
 801bb18:	68fb      	ldr	r3, [r7, #12]
 801bb1a:	681b      	ldr	r3, [r3, #0]
 801bb1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801bb20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801bb22:	68fb      	ldr	r3, [r7, #12]
 801bb24:	681b      	ldr	r3, [r3, #0]
 801bb26:	683a      	ldr	r2, [r7, #0]
 801bb28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801bb2a:	68fb      	ldr	r3, [r7, #12]
 801bb2c:	689b      	ldr	r3, [r3, #8]
 801bb2e:	2b40      	cmp	r3, #64	; 0x40
 801bb30:	d108      	bne.n	801bb44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801bb32:	68fb      	ldr	r3, [r7, #12]
 801bb34:	681b      	ldr	r3, [r3, #0]
 801bb36:	687a      	ldr	r2, [r7, #4]
 801bb38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801bb3a:	68fb      	ldr	r3, [r7, #12]
 801bb3c:	681b      	ldr	r3, [r3, #0]
 801bb3e:	68ba      	ldr	r2, [r7, #8]
 801bb40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801bb42:	e007      	b.n	801bb54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801bb44:	68fb      	ldr	r3, [r7, #12]
 801bb46:	681b      	ldr	r3, [r3, #0]
 801bb48:	68ba      	ldr	r2, [r7, #8]
 801bb4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801bb4c:	68fb      	ldr	r3, [r7, #12]
 801bb4e:	681b      	ldr	r3, [r3, #0]
 801bb50:	687a      	ldr	r2, [r7, #4]
 801bb52:	60da      	str	r2, [r3, #12]
}
 801bb54:	bf00      	nop
 801bb56:	3714      	adds	r7, #20
 801bb58:	46bd      	mov	sp, r7
 801bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb5e:	4770      	bx	lr

0801bb60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801bb60:	b480      	push	{r7}
 801bb62:	b085      	sub	sp, #20
 801bb64:	af00      	add	r7, sp, #0
 801bb66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	b2db      	uxtb	r3, r3
 801bb6e:	3b10      	subs	r3, #16
 801bb70:	4a14      	ldr	r2, [pc, #80]	; (801bbc4 <DMA_CalcBaseAndBitshift+0x64>)
 801bb72:	fba2 2303 	umull	r2, r3, r2, r3
 801bb76:	091b      	lsrs	r3, r3, #4
 801bb78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801bb7a:	4a13      	ldr	r2, [pc, #76]	; (801bbc8 <DMA_CalcBaseAndBitshift+0x68>)
 801bb7c:	68fb      	ldr	r3, [r7, #12]
 801bb7e:	4413      	add	r3, r2
 801bb80:	781b      	ldrb	r3, [r3, #0]
 801bb82:	461a      	mov	r2, r3
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801bb88:	68fb      	ldr	r3, [r7, #12]
 801bb8a:	2b03      	cmp	r3, #3
 801bb8c:	d909      	bls.n	801bba2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	681b      	ldr	r3, [r3, #0]
 801bb92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801bb96:	f023 0303 	bic.w	r3, r3, #3
 801bb9a:	1d1a      	adds	r2, r3, #4
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	659a      	str	r2, [r3, #88]	; 0x58
 801bba0:	e007      	b.n	801bbb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	681b      	ldr	r3, [r3, #0]
 801bba6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801bbaa:	f023 0303 	bic.w	r3, r3, #3
 801bbae:	687a      	ldr	r2, [r7, #4]
 801bbb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801bbb6:	4618      	mov	r0, r3
 801bbb8:	3714      	adds	r7, #20
 801bbba:	46bd      	mov	sp, r7
 801bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbc0:	4770      	bx	lr
 801bbc2:	bf00      	nop
 801bbc4:	aaaaaaab 	.word	0xaaaaaaab
 801bbc8:	0802821c 	.word	0x0802821c

0801bbcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801bbcc:	b480      	push	{r7}
 801bbce:	b085      	sub	sp, #20
 801bbd0:	af00      	add	r7, sp, #0
 801bbd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801bbd4:	2300      	movs	r3, #0
 801bbd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bbdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	699b      	ldr	r3, [r3, #24]
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	d11f      	bne.n	801bc26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801bbe6:	68bb      	ldr	r3, [r7, #8]
 801bbe8:	2b03      	cmp	r3, #3
 801bbea:	d856      	bhi.n	801bc9a <DMA_CheckFifoParam+0xce>
 801bbec:	a201      	add	r2, pc, #4	; (adr r2, 801bbf4 <DMA_CheckFifoParam+0x28>)
 801bbee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bbf2:	bf00      	nop
 801bbf4:	0801bc05 	.word	0x0801bc05
 801bbf8:	0801bc17 	.word	0x0801bc17
 801bbfc:	0801bc05 	.word	0x0801bc05
 801bc00:	0801bc9b 	.word	0x0801bc9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801bc04:	687b      	ldr	r3, [r7, #4]
 801bc06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d046      	beq.n	801bc9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801bc10:	2301      	movs	r3, #1
 801bc12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801bc14:	e043      	b.n	801bc9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801bc1e:	d140      	bne.n	801bca2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 801bc20:	2301      	movs	r3, #1
 801bc22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801bc24:	e03d      	b.n	801bca2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	699b      	ldr	r3, [r3, #24]
 801bc2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801bc2e:	d121      	bne.n	801bc74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 801bc30:	68bb      	ldr	r3, [r7, #8]
 801bc32:	2b03      	cmp	r3, #3
 801bc34:	d837      	bhi.n	801bca6 <DMA_CheckFifoParam+0xda>
 801bc36:	a201      	add	r2, pc, #4	; (adr r2, 801bc3c <DMA_CheckFifoParam+0x70>)
 801bc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bc3c:	0801bc4d 	.word	0x0801bc4d
 801bc40:	0801bc53 	.word	0x0801bc53
 801bc44:	0801bc4d 	.word	0x0801bc4d
 801bc48:	0801bc65 	.word	0x0801bc65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801bc4c:	2301      	movs	r3, #1
 801bc4e:	73fb      	strb	r3, [r7, #15]
      break;
 801bc50:	e030      	b.n	801bcb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801bc52:	687b      	ldr	r3, [r7, #4]
 801bc54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801bc5a:	2b00      	cmp	r3, #0
 801bc5c:	d025      	beq.n	801bcaa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801bc5e:	2301      	movs	r3, #1
 801bc60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801bc62:	e022      	b.n	801bcaa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801bc6c:	d11f      	bne.n	801bcae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801bc6e:	2301      	movs	r3, #1
 801bc70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801bc72:	e01c      	b.n	801bcae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801bc74:	68bb      	ldr	r3, [r7, #8]
 801bc76:	2b02      	cmp	r3, #2
 801bc78:	d903      	bls.n	801bc82 <DMA_CheckFifoParam+0xb6>
 801bc7a:	68bb      	ldr	r3, [r7, #8]
 801bc7c:	2b03      	cmp	r3, #3
 801bc7e:	d003      	beq.n	801bc88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 801bc80:	e018      	b.n	801bcb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801bc82:	2301      	movs	r3, #1
 801bc84:	73fb      	strb	r3, [r7, #15]
      break;
 801bc86:	e015      	b.n	801bcb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d00e      	beq.n	801bcb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 801bc94:	2301      	movs	r3, #1
 801bc96:	73fb      	strb	r3, [r7, #15]
      break;
 801bc98:	e00b      	b.n	801bcb2 <DMA_CheckFifoParam+0xe6>
      break;
 801bc9a:	bf00      	nop
 801bc9c:	e00a      	b.n	801bcb4 <DMA_CheckFifoParam+0xe8>
      break;
 801bc9e:	bf00      	nop
 801bca0:	e008      	b.n	801bcb4 <DMA_CheckFifoParam+0xe8>
      break;
 801bca2:	bf00      	nop
 801bca4:	e006      	b.n	801bcb4 <DMA_CheckFifoParam+0xe8>
      break;
 801bca6:	bf00      	nop
 801bca8:	e004      	b.n	801bcb4 <DMA_CheckFifoParam+0xe8>
      break;
 801bcaa:	bf00      	nop
 801bcac:	e002      	b.n	801bcb4 <DMA_CheckFifoParam+0xe8>
      break;   
 801bcae:	bf00      	nop
 801bcb0:	e000      	b.n	801bcb4 <DMA_CheckFifoParam+0xe8>
      break;
 801bcb2:	bf00      	nop
    }
  } 
  
  return status; 
 801bcb4:	7bfb      	ldrb	r3, [r7, #15]
}
 801bcb6:	4618      	mov	r0, r3
 801bcb8:	3714      	adds	r7, #20
 801bcba:	46bd      	mov	sp, r7
 801bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcc0:	4770      	bx	lr
 801bcc2:	bf00      	nop

0801bcc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801bcc4:	b480      	push	{r7}
 801bcc6:	b089      	sub	sp, #36	; 0x24
 801bcc8:	af00      	add	r7, sp, #0
 801bcca:	6078      	str	r0, [r7, #4]
 801bccc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801bcce:	2300      	movs	r3, #0
 801bcd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801bcd2:	2300      	movs	r3, #0
 801bcd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801bcd6:	2300      	movs	r3, #0
 801bcd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801bcda:	2300      	movs	r3, #0
 801bcdc:	61fb      	str	r3, [r7, #28]
 801bcde:	e159      	b.n	801bf94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801bce0:	2201      	movs	r2, #1
 801bce2:	69fb      	ldr	r3, [r7, #28]
 801bce4:	fa02 f303 	lsl.w	r3, r2, r3
 801bce8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801bcea:	683b      	ldr	r3, [r7, #0]
 801bcec:	681b      	ldr	r3, [r3, #0]
 801bcee:	697a      	ldr	r2, [r7, #20]
 801bcf0:	4013      	ands	r3, r2
 801bcf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801bcf4:	693a      	ldr	r2, [r7, #16]
 801bcf6:	697b      	ldr	r3, [r7, #20]
 801bcf8:	429a      	cmp	r2, r3
 801bcfa:	f040 8148 	bne.w	801bf8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801bcfe:	683b      	ldr	r3, [r7, #0]
 801bd00:	685b      	ldr	r3, [r3, #4]
 801bd02:	f003 0303 	and.w	r3, r3, #3
 801bd06:	2b01      	cmp	r3, #1
 801bd08:	d005      	beq.n	801bd16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801bd0a:	683b      	ldr	r3, [r7, #0]
 801bd0c:	685b      	ldr	r3, [r3, #4]
 801bd0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801bd12:	2b02      	cmp	r3, #2
 801bd14:	d130      	bne.n	801bd78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801bd16:	687b      	ldr	r3, [r7, #4]
 801bd18:	689b      	ldr	r3, [r3, #8]
 801bd1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801bd1c:	69fb      	ldr	r3, [r7, #28]
 801bd1e:	005b      	lsls	r3, r3, #1
 801bd20:	2203      	movs	r2, #3
 801bd22:	fa02 f303 	lsl.w	r3, r2, r3
 801bd26:	43db      	mvns	r3, r3
 801bd28:	69ba      	ldr	r2, [r7, #24]
 801bd2a:	4013      	ands	r3, r2
 801bd2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801bd2e:	683b      	ldr	r3, [r7, #0]
 801bd30:	68da      	ldr	r2, [r3, #12]
 801bd32:	69fb      	ldr	r3, [r7, #28]
 801bd34:	005b      	lsls	r3, r3, #1
 801bd36:	fa02 f303 	lsl.w	r3, r2, r3
 801bd3a:	69ba      	ldr	r2, [r7, #24]
 801bd3c:	4313      	orrs	r3, r2
 801bd3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	69ba      	ldr	r2, [r7, #24]
 801bd44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	685b      	ldr	r3, [r3, #4]
 801bd4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801bd4c:	2201      	movs	r2, #1
 801bd4e:	69fb      	ldr	r3, [r7, #28]
 801bd50:	fa02 f303 	lsl.w	r3, r2, r3
 801bd54:	43db      	mvns	r3, r3
 801bd56:	69ba      	ldr	r2, [r7, #24]
 801bd58:	4013      	ands	r3, r2
 801bd5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801bd5c:	683b      	ldr	r3, [r7, #0]
 801bd5e:	685b      	ldr	r3, [r3, #4]
 801bd60:	091b      	lsrs	r3, r3, #4
 801bd62:	f003 0201 	and.w	r2, r3, #1
 801bd66:	69fb      	ldr	r3, [r7, #28]
 801bd68:	fa02 f303 	lsl.w	r3, r2, r3
 801bd6c:	69ba      	ldr	r2, [r7, #24]
 801bd6e:	4313      	orrs	r3, r2
 801bd70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801bd72:	687b      	ldr	r3, [r7, #4]
 801bd74:	69ba      	ldr	r2, [r7, #24]
 801bd76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801bd78:	683b      	ldr	r3, [r7, #0]
 801bd7a:	685b      	ldr	r3, [r3, #4]
 801bd7c:	f003 0303 	and.w	r3, r3, #3
 801bd80:	2b03      	cmp	r3, #3
 801bd82:	d017      	beq.n	801bdb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801bd84:	687b      	ldr	r3, [r7, #4]
 801bd86:	68db      	ldr	r3, [r3, #12]
 801bd88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801bd8a:	69fb      	ldr	r3, [r7, #28]
 801bd8c:	005b      	lsls	r3, r3, #1
 801bd8e:	2203      	movs	r2, #3
 801bd90:	fa02 f303 	lsl.w	r3, r2, r3
 801bd94:	43db      	mvns	r3, r3
 801bd96:	69ba      	ldr	r2, [r7, #24]
 801bd98:	4013      	ands	r3, r2
 801bd9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801bd9c:	683b      	ldr	r3, [r7, #0]
 801bd9e:	689a      	ldr	r2, [r3, #8]
 801bda0:	69fb      	ldr	r3, [r7, #28]
 801bda2:	005b      	lsls	r3, r3, #1
 801bda4:	fa02 f303 	lsl.w	r3, r2, r3
 801bda8:	69ba      	ldr	r2, [r7, #24]
 801bdaa:	4313      	orrs	r3, r2
 801bdac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	69ba      	ldr	r2, [r7, #24]
 801bdb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801bdb4:	683b      	ldr	r3, [r7, #0]
 801bdb6:	685b      	ldr	r3, [r3, #4]
 801bdb8:	f003 0303 	and.w	r3, r3, #3
 801bdbc:	2b02      	cmp	r3, #2
 801bdbe:	d123      	bne.n	801be08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801bdc0:	69fb      	ldr	r3, [r7, #28]
 801bdc2:	08da      	lsrs	r2, r3, #3
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	3208      	adds	r2, #8
 801bdc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bdcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801bdce:	69fb      	ldr	r3, [r7, #28]
 801bdd0:	f003 0307 	and.w	r3, r3, #7
 801bdd4:	009b      	lsls	r3, r3, #2
 801bdd6:	220f      	movs	r2, #15
 801bdd8:	fa02 f303 	lsl.w	r3, r2, r3
 801bddc:	43db      	mvns	r3, r3
 801bdde:	69ba      	ldr	r2, [r7, #24]
 801bde0:	4013      	ands	r3, r2
 801bde2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801bde4:	683b      	ldr	r3, [r7, #0]
 801bde6:	691a      	ldr	r2, [r3, #16]
 801bde8:	69fb      	ldr	r3, [r7, #28]
 801bdea:	f003 0307 	and.w	r3, r3, #7
 801bdee:	009b      	lsls	r3, r3, #2
 801bdf0:	fa02 f303 	lsl.w	r3, r2, r3
 801bdf4:	69ba      	ldr	r2, [r7, #24]
 801bdf6:	4313      	orrs	r3, r2
 801bdf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801bdfa:	69fb      	ldr	r3, [r7, #28]
 801bdfc:	08da      	lsrs	r2, r3, #3
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	3208      	adds	r2, #8
 801be02:	69b9      	ldr	r1, [r7, #24]
 801be04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	681b      	ldr	r3, [r3, #0]
 801be0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801be0e:	69fb      	ldr	r3, [r7, #28]
 801be10:	005b      	lsls	r3, r3, #1
 801be12:	2203      	movs	r2, #3
 801be14:	fa02 f303 	lsl.w	r3, r2, r3
 801be18:	43db      	mvns	r3, r3
 801be1a:	69ba      	ldr	r2, [r7, #24]
 801be1c:	4013      	ands	r3, r2
 801be1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801be20:	683b      	ldr	r3, [r7, #0]
 801be22:	685b      	ldr	r3, [r3, #4]
 801be24:	f003 0203 	and.w	r2, r3, #3
 801be28:	69fb      	ldr	r3, [r7, #28]
 801be2a:	005b      	lsls	r3, r3, #1
 801be2c:	fa02 f303 	lsl.w	r3, r2, r3
 801be30:	69ba      	ldr	r2, [r7, #24]
 801be32:	4313      	orrs	r3, r2
 801be34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	69ba      	ldr	r2, [r7, #24]
 801be3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801be3c:	683b      	ldr	r3, [r7, #0]
 801be3e:	685b      	ldr	r3, [r3, #4]
 801be40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801be44:	2b00      	cmp	r3, #0
 801be46:	f000 80a2 	beq.w	801bf8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801be4a:	2300      	movs	r3, #0
 801be4c:	60fb      	str	r3, [r7, #12]
 801be4e:	4b57      	ldr	r3, [pc, #348]	; (801bfac <HAL_GPIO_Init+0x2e8>)
 801be50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801be52:	4a56      	ldr	r2, [pc, #344]	; (801bfac <HAL_GPIO_Init+0x2e8>)
 801be54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801be58:	6453      	str	r3, [r2, #68]	; 0x44
 801be5a:	4b54      	ldr	r3, [pc, #336]	; (801bfac <HAL_GPIO_Init+0x2e8>)
 801be5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801be5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801be62:	60fb      	str	r3, [r7, #12]
 801be64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801be66:	4a52      	ldr	r2, [pc, #328]	; (801bfb0 <HAL_GPIO_Init+0x2ec>)
 801be68:	69fb      	ldr	r3, [r7, #28]
 801be6a:	089b      	lsrs	r3, r3, #2
 801be6c:	3302      	adds	r3, #2
 801be6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801be72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801be74:	69fb      	ldr	r3, [r7, #28]
 801be76:	f003 0303 	and.w	r3, r3, #3
 801be7a:	009b      	lsls	r3, r3, #2
 801be7c:	220f      	movs	r2, #15
 801be7e:	fa02 f303 	lsl.w	r3, r2, r3
 801be82:	43db      	mvns	r3, r3
 801be84:	69ba      	ldr	r2, [r7, #24]
 801be86:	4013      	ands	r3, r2
 801be88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801be8a:	687b      	ldr	r3, [r7, #4]
 801be8c:	4a49      	ldr	r2, [pc, #292]	; (801bfb4 <HAL_GPIO_Init+0x2f0>)
 801be8e:	4293      	cmp	r3, r2
 801be90:	d019      	beq.n	801bec6 <HAL_GPIO_Init+0x202>
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	4a48      	ldr	r2, [pc, #288]	; (801bfb8 <HAL_GPIO_Init+0x2f4>)
 801be96:	4293      	cmp	r3, r2
 801be98:	d013      	beq.n	801bec2 <HAL_GPIO_Init+0x1fe>
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	4a47      	ldr	r2, [pc, #284]	; (801bfbc <HAL_GPIO_Init+0x2f8>)
 801be9e:	4293      	cmp	r3, r2
 801bea0:	d00d      	beq.n	801bebe <HAL_GPIO_Init+0x1fa>
 801bea2:	687b      	ldr	r3, [r7, #4]
 801bea4:	4a46      	ldr	r2, [pc, #280]	; (801bfc0 <HAL_GPIO_Init+0x2fc>)
 801bea6:	4293      	cmp	r3, r2
 801bea8:	d007      	beq.n	801beba <HAL_GPIO_Init+0x1f6>
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	4a45      	ldr	r2, [pc, #276]	; (801bfc4 <HAL_GPIO_Init+0x300>)
 801beae:	4293      	cmp	r3, r2
 801beb0:	d101      	bne.n	801beb6 <HAL_GPIO_Init+0x1f2>
 801beb2:	2304      	movs	r3, #4
 801beb4:	e008      	b.n	801bec8 <HAL_GPIO_Init+0x204>
 801beb6:	2307      	movs	r3, #7
 801beb8:	e006      	b.n	801bec8 <HAL_GPIO_Init+0x204>
 801beba:	2303      	movs	r3, #3
 801bebc:	e004      	b.n	801bec8 <HAL_GPIO_Init+0x204>
 801bebe:	2302      	movs	r3, #2
 801bec0:	e002      	b.n	801bec8 <HAL_GPIO_Init+0x204>
 801bec2:	2301      	movs	r3, #1
 801bec4:	e000      	b.n	801bec8 <HAL_GPIO_Init+0x204>
 801bec6:	2300      	movs	r3, #0
 801bec8:	69fa      	ldr	r2, [r7, #28]
 801beca:	f002 0203 	and.w	r2, r2, #3
 801bece:	0092      	lsls	r2, r2, #2
 801bed0:	4093      	lsls	r3, r2
 801bed2:	69ba      	ldr	r2, [r7, #24]
 801bed4:	4313      	orrs	r3, r2
 801bed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801bed8:	4935      	ldr	r1, [pc, #212]	; (801bfb0 <HAL_GPIO_Init+0x2ec>)
 801beda:	69fb      	ldr	r3, [r7, #28]
 801bedc:	089b      	lsrs	r3, r3, #2
 801bede:	3302      	adds	r3, #2
 801bee0:	69ba      	ldr	r2, [r7, #24]
 801bee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801bee6:	4b38      	ldr	r3, [pc, #224]	; (801bfc8 <HAL_GPIO_Init+0x304>)
 801bee8:	689b      	ldr	r3, [r3, #8]
 801beea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801beec:	693b      	ldr	r3, [r7, #16]
 801beee:	43db      	mvns	r3, r3
 801bef0:	69ba      	ldr	r2, [r7, #24]
 801bef2:	4013      	ands	r3, r2
 801bef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801bef6:	683b      	ldr	r3, [r7, #0]
 801bef8:	685b      	ldr	r3, [r3, #4]
 801befa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801befe:	2b00      	cmp	r3, #0
 801bf00:	d003      	beq.n	801bf0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801bf02:	69ba      	ldr	r2, [r7, #24]
 801bf04:	693b      	ldr	r3, [r7, #16]
 801bf06:	4313      	orrs	r3, r2
 801bf08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801bf0a:	4a2f      	ldr	r2, [pc, #188]	; (801bfc8 <HAL_GPIO_Init+0x304>)
 801bf0c:	69bb      	ldr	r3, [r7, #24]
 801bf0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801bf10:	4b2d      	ldr	r3, [pc, #180]	; (801bfc8 <HAL_GPIO_Init+0x304>)
 801bf12:	68db      	ldr	r3, [r3, #12]
 801bf14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801bf16:	693b      	ldr	r3, [r7, #16]
 801bf18:	43db      	mvns	r3, r3
 801bf1a:	69ba      	ldr	r2, [r7, #24]
 801bf1c:	4013      	ands	r3, r2
 801bf1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801bf20:	683b      	ldr	r3, [r7, #0]
 801bf22:	685b      	ldr	r3, [r3, #4]
 801bf24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801bf28:	2b00      	cmp	r3, #0
 801bf2a:	d003      	beq.n	801bf34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801bf2c:	69ba      	ldr	r2, [r7, #24]
 801bf2e:	693b      	ldr	r3, [r7, #16]
 801bf30:	4313      	orrs	r3, r2
 801bf32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801bf34:	4a24      	ldr	r2, [pc, #144]	; (801bfc8 <HAL_GPIO_Init+0x304>)
 801bf36:	69bb      	ldr	r3, [r7, #24]
 801bf38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801bf3a:	4b23      	ldr	r3, [pc, #140]	; (801bfc8 <HAL_GPIO_Init+0x304>)
 801bf3c:	685b      	ldr	r3, [r3, #4]
 801bf3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801bf40:	693b      	ldr	r3, [r7, #16]
 801bf42:	43db      	mvns	r3, r3
 801bf44:	69ba      	ldr	r2, [r7, #24]
 801bf46:	4013      	ands	r3, r2
 801bf48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801bf4a:	683b      	ldr	r3, [r7, #0]
 801bf4c:	685b      	ldr	r3, [r3, #4]
 801bf4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	d003      	beq.n	801bf5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801bf56:	69ba      	ldr	r2, [r7, #24]
 801bf58:	693b      	ldr	r3, [r7, #16]
 801bf5a:	4313      	orrs	r3, r2
 801bf5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801bf5e:	4a1a      	ldr	r2, [pc, #104]	; (801bfc8 <HAL_GPIO_Init+0x304>)
 801bf60:	69bb      	ldr	r3, [r7, #24]
 801bf62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801bf64:	4b18      	ldr	r3, [pc, #96]	; (801bfc8 <HAL_GPIO_Init+0x304>)
 801bf66:	681b      	ldr	r3, [r3, #0]
 801bf68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801bf6a:	693b      	ldr	r3, [r7, #16]
 801bf6c:	43db      	mvns	r3, r3
 801bf6e:	69ba      	ldr	r2, [r7, #24]
 801bf70:	4013      	ands	r3, r2
 801bf72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801bf74:	683b      	ldr	r3, [r7, #0]
 801bf76:	685b      	ldr	r3, [r3, #4]
 801bf78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	d003      	beq.n	801bf88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 801bf80:	69ba      	ldr	r2, [r7, #24]
 801bf82:	693b      	ldr	r3, [r7, #16]
 801bf84:	4313      	orrs	r3, r2
 801bf86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801bf88:	4a0f      	ldr	r2, [pc, #60]	; (801bfc8 <HAL_GPIO_Init+0x304>)
 801bf8a:	69bb      	ldr	r3, [r7, #24]
 801bf8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801bf8e:	69fb      	ldr	r3, [r7, #28]
 801bf90:	3301      	adds	r3, #1
 801bf92:	61fb      	str	r3, [r7, #28]
 801bf94:	69fb      	ldr	r3, [r7, #28]
 801bf96:	2b0f      	cmp	r3, #15
 801bf98:	f67f aea2 	bls.w	801bce0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801bf9c:	bf00      	nop
 801bf9e:	bf00      	nop
 801bfa0:	3724      	adds	r7, #36	; 0x24
 801bfa2:	46bd      	mov	sp, r7
 801bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfa8:	4770      	bx	lr
 801bfaa:	bf00      	nop
 801bfac:	40023800 	.word	0x40023800
 801bfb0:	40013800 	.word	0x40013800
 801bfb4:	40020000 	.word	0x40020000
 801bfb8:	40020400 	.word	0x40020400
 801bfbc:	40020800 	.word	0x40020800
 801bfc0:	40020c00 	.word	0x40020c00
 801bfc4:	40021000 	.word	0x40021000
 801bfc8:	40013c00 	.word	0x40013c00

0801bfcc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801bfcc:	b480      	push	{r7}
 801bfce:	b087      	sub	sp, #28
 801bfd0:	af00      	add	r7, sp, #0
 801bfd2:	6078      	str	r0, [r7, #4]
 801bfd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801bfd6:	2300      	movs	r3, #0
 801bfd8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 801bfda:	2300      	movs	r3, #0
 801bfdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801bfde:	2300      	movs	r3, #0
 801bfe0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801bfe2:	2300      	movs	r3, #0
 801bfe4:	617b      	str	r3, [r7, #20]
 801bfe6:	e0bb      	b.n	801c160 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801bfe8:	2201      	movs	r2, #1
 801bfea:	697b      	ldr	r3, [r7, #20]
 801bfec:	fa02 f303 	lsl.w	r3, r2, r3
 801bff0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801bff2:	683a      	ldr	r2, [r7, #0]
 801bff4:	693b      	ldr	r3, [r7, #16]
 801bff6:	4013      	ands	r3, r2
 801bff8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801bffa:	68fa      	ldr	r2, [r7, #12]
 801bffc:	693b      	ldr	r3, [r7, #16]
 801bffe:	429a      	cmp	r2, r3
 801c000:	f040 80ab 	bne.w	801c15a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 801c004:	4a5c      	ldr	r2, [pc, #368]	; (801c178 <HAL_GPIO_DeInit+0x1ac>)
 801c006:	697b      	ldr	r3, [r7, #20]
 801c008:	089b      	lsrs	r3, r3, #2
 801c00a:	3302      	adds	r3, #2
 801c00c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c010:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 801c012:	697b      	ldr	r3, [r7, #20]
 801c014:	f003 0303 	and.w	r3, r3, #3
 801c018:	009b      	lsls	r3, r3, #2
 801c01a:	220f      	movs	r2, #15
 801c01c:	fa02 f303 	lsl.w	r3, r2, r3
 801c020:	68ba      	ldr	r2, [r7, #8]
 801c022:	4013      	ands	r3, r2
 801c024:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801c026:	687b      	ldr	r3, [r7, #4]
 801c028:	4a54      	ldr	r2, [pc, #336]	; (801c17c <HAL_GPIO_DeInit+0x1b0>)
 801c02a:	4293      	cmp	r3, r2
 801c02c:	d019      	beq.n	801c062 <HAL_GPIO_DeInit+0x96>
 801c02e:	687b      	ldr	r3, [r7, #4]
 801c030:	4a53      	ldr	r2, [pc, #332]	; (801c180 <HAL_GPIO_DeInit+0x1b4>)
 801c032:	4293      	cmp	r3, r2
 801c034:	d013      	beq.n	801c05e <HAL_GPIO_DeInit+0x92>
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	4a52      	ldr	r2, [pc, #328]	; (801c184 <HAL_GPIO_DeInit+0x1b8>)
 801c03a:	4293      	cmp	r3, r2
 801c03c:	d00d      	beq.n	801c05a <HAL_GPIO_DeInit+0x8e>
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	4a51      	ldr	r2, [pc, #324]	; (801c188 <HAL_GPIO_DeInit+0x1bc>)
 801c042:	4293      	cmp	r3, r2
 801c044:	d007      	beq.n	801c056 <HAL_GPIO_DeInit+0x8a>
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	4a50      	ldr	r2, [pc, #320]	; (801c18c <HAL_GPIO_DeInit+0x1c0>)
 801c04a:	4293      	cmp	r3, r2
 801c04c:	d101      	bne.n	801c052 <HAL_GPIO_DeInit+0x86>
 801c04e:	2304      	movs	r3, #4
 801c050:	e008      	b.n	801c064 <HAL_GPIO_DeInit+0x98>
 801c052:	2307      	movs	r3, #7
 801c054:	e006      	b.n	801c064 <HAL_GPIO_DeInit+0x98>
 801c056:	2303      	movs	r3, #3
 801c058:	e004      	b.n	801c064 <HAL_GPIO_DeInit+0x98>
 801c05a:	2302      	movs	r3, #2
 801c05c:	e002      	b.n	801c064 <HAL_GPIO_DeInit+0x98>
 801c05e:	2301      	movs	r3, #1
 801c060:	e000      	b.n	801c064 <HAL_GPIO_DeInit+0x98>
 801c062:	2300      	movs	r3, #0
 801c064:	697a      	ldr	r2, [r7, #20]
 801c066:	f002 0203 	and.w	r2, r2, #3
 801c06a:	0092      	lsls	r2, r2, #2
 801c06c:	4093      	lsls	r3, r2
 801c06e:	68ba      	ldr	r2, [r7, #8]
 801c070:	429a      	cmp	r2, r3
 801c072:	d132      	bne.n	801c0da <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 801c074:	4b46      	ldr	r3, [pc, #280]	; (801c190 <HAL_GPIO_DeInit+0x1c4>)
 801c076:	681a      	ldr	r2, [r3, #0]
 801c078:	68fb      	ldr	r3, [r7, #12]
 801c07a:	43db      	mvns	r3, r3
 801c07c:	4944      	ldr	r1, [pc, #272]	; (801c190 <HAL_GPIO_DeInit+0x1c4>)
 801c07e:	4013      	ands	r3, r2
 801c080:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801c082:	4b43      	ldr	r3, [pc, #268]	; (801c190 <HAL_GPIO_DeInit+0x1c4>)
 801c084:	685a      	ldr	r2, [r3, #4]
 801c086:	68fb      	ldr	r3, [r7, #12]
 801c088:	43db      	mvns	r3, r3
 801c08a:	4941      	ldr	r1, [pc, #260]	; (801c190 <HAL_GPIO_DeInit+0x1c4>)
 801c08c:	4013      	ands	r3, r2
 801c08e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801c090:	4b3f      	ldr	r3, [pc, #252]	; (801c190 <HAL_GPIO_DeInit+0x1c4>)
 801c092:	68da      	ldr	r2, [r3, #12]
 801c094:	68fb      	ldr	r3, [r7, #12]
 801c096:	43db      	mvns	r3, r3
 801c098:	493d      	ldr	r1, [pc, #244]	; (801c190 <HAL_GPIO_DeInit+0x1c4>)
 801c09a:	4013      	ands	r3, r2
 801c09c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801c09e:	4b3c      	ldr	r3, [pc, #240]	; (801c190 <HAL_GPIO_DeInit+0x1c4>)
 801c0a0:	689a      	ldr	r2, [r3, #8]
 801c0a2:	68fb      	ldr	r3, [r7, #12]
 801c0a4:	43db      	mvns	r3, r3
 801c0a6:	493a      	ldr	r1, [pc, #232]	; (801c190 <HAL_GPIO_DeInit+0x1c4>)
 801c0a8:	4013      	ands	r3, r2
 801c0aa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 801c0ac:	697b      	ldr	r3, [r7, #20]
 801c0ae:	f003 0303 	and.w	r3, r3, #3
 801c0b2:	009b      	lsls	r3, r3, #2
 801c0b4:	220f      	movs	r2, #15
 801c0b6:	fa02 f303 	lsl.w	r3, r2, r3
 801c0ba:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801c0bc:	4a2e      	ldr	r2, [pc, #184]	; (801c178 <HAL_GPIO_DeInit+0x1ac>)
 801c0be:	697b      	ldr	r3, [r7, #20]
 801c0c0:	089b      	lsrs	r3, r3, #2
 801c0c2:	3302      	adds	r3, #2
 801c0c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801c0c8:	68bb      	ldr	r3, [r7, #8]
 801c0ca:	43da      	mvns	r2, r3
 801c0cc:	482a      	ldr	r0, [pc, #168]	; (801c178 <HAL_GPIO_DeInit+0x1ac>)
 801c0ce:	697b      	ldr	r3, [r7, #20]
 801c0d0:	089b      	lsrs	r3, r3, #2
 801c0d2:	400a      	ands	r2, r1
 801c0d4:	3302      	adds	r3, #2
 801c0d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801c0da:	687b      	ldr	r3, [r7, #4]
 801c0dc:	681a      	ldr	r2, [r3, #0]
 801c0de:	697b      	ldr	r3, [r7, #20]
 801c0e0:	005b      	lsls	r3, r3, #1
 801c0e2:	2103      	movs	r1, #3
 801c0e4:	fa01 f303 	lsl.w	r3, r1, r3
 801c0e8:	43db      	mvns	r3, r3
 801c0ea:	401a      	ands	r2, r3
 801c0ec:	687b      	ldr	r3, [r7, #4]
 801c0ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801c0f0:	697b      	ldr	r3, [r7, #20]
 801c0f2:	08da      	lsrs	r2, r3, #3
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	3208      	adds	r2, #8
 801c0f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c0fc:	697b      	ldr	r3, [r7, #20]
 801c0fe:	f003 0307 	and.w	r3, r3, #7
 801c102:	009b      	lsls	r3, r3, #2
 801c104:	220f      	movs	r2, #15
 801c106:	fa02 f303 	lsl.w	r3, r2, r3
 801c10a:	43db      	mvns	r3, r3
 801c10c:	697a      	ldr	r2, [r7, #20]
 801c10e:	08d2      	lsrs	r2, r2, #3
 801c110:	4019      	ands	r1, r3
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	3208      	adds	r2, #8
 801c116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801c11a:	687b      	ldr	r3, [r7, #4]
 801c11c:	68da      	ldr	r2, [r3, #12]
 801c11e:	697b      	ldr	r3, [r7, #20]
 801c120:	005b      	lsls	r3, r3, #1
 801c122:	2103      	movs	r1, #3
 801c124:	fa01 f303 	lsl.w	r3, r1, r3
 801c128:	43db      	mvns	r3, r3
 801c12a:	401a      	ands	r2, r3
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	685a      	ldr	r2, [r3, #4]
 801c134:	2101      	movs	r1, #1
 801c136:	697b      	ldr	r3, [r7, #20]
 801c138:	fa01 f303 	lsl.w	r3, r1, r3
 801c13c:	43db      	mvns	r3, r3
 801c13e:	401a      	ands	r2, r3
 801c140:	687b      	ldr	r3, [r7, #4]
 801c142:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	689a      	ldr	r2, [r3, #8]
 801c148:	697b      	ldr	r3, [r7, #20]
 801c14a:	005b      	lsls	r3, r3, #1
 801c14c:	2103      	movs	r1, #3
 801c14e:	fa01 f303 	lsl.w	r3, r1, r3
 801c152:	43db      	mvns	r3, r3
 801c154:	401a      	ands	r2, r3
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801c15a:	697b      	ldr	r3, [r7, #20]
 801c15c:	3301      	adds	r3, #1
 801c15e:	617b      	str	r3, [r7, #20]
 801c160:	697b      	ldr	r3, [r7, #20]
 801c162:	2b0f      	cmp	r3, #15
 801c164:	f67f af40 	bls.w	801bfe8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 801c168:	bf00      	nop
 801c16a:	bf00      	nop
 801c16c:	371c      	adds	r7, #28
 801c16e:	46bd      	mov	sp, r7
 801c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c174:	4770      	bx	lr
 801c176:	bf00      	nop
 801c178:	40013800 	.word	0x40013800
 801c17c:	40020000 	.word	0x40020000
 801c180:	40020400 	.word	0x40020400
 801c184:	40020800 	.word	0x40020800
 801c188:	40020c00 	.word	0x40020c00
 801c18c:	40021000 	.word	0x40021000
 801c190:	40013c00 	.word	0x40013c00

0801c194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801c194:	b480      	push	{r7}
 801c196:	b083      	sub	sp, #12
 801c198:	af00      	add	r7, sp, #0
 801c19a:	6078      	str	r0, [r7, #4]
 801c19c:	460b      	mov	r3, r1
 801c19e:	807b      	strh	r3, [r7, #2]
 801c1a0:	4613      	mov	r3, r2
 801c1a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801c1a4:	787b      	ldrb	r3, [r7, #1]
 801c1a6:	2b00      	cmp	r3, #0
 801c1a8:	d003      	beq.n	801c1b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801c1aa:	887a      	ldrh	r2, [r7, #2]
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801c1b0:	e003      	b.n	801c1ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801c1b2:	887b      	ldrh	r3, [r7, #2]
 801c1b4:	041a      	lsls	r2, r3, #16
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	619a      	str	r2, [r3, #24]
}
 801c1ba:	bf00      	nop
 801c1bc:	370c      	adds	r7, #12
 801c1be:	46bd      	mov	sp, r7
 801c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1c4:	4770      	bx	lr
	...

0801c1c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801c1c8:	b580      	push	{r7, lr}
 801c1ca:	b082      	sub	sp, #8
 801c1cc:	af00      	add	r7, sp, #0
 801c1ce:	4603      	mov	r3, r0
 801c1d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801c1d2:	4b08      	ldr	r3, [pc, #32]	; (801c1f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801c1d4:	695a      	ldr	r2, [r3, #20]
 801c1d6:	88fb      	ldrh	r3, [r7, #6]
 801c1d8:	4013      	ands	r3, r2
 801c1da:	2b00      	cmp	r3, #0
 801c1dc:	d006      	beq.n	801c1ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801c1de:	4a05      	ldr	r2, [pc, #20]	; (801c1f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801c1e0:	88fb      	ldrh	r3, [r7, #6]
 801c1e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801c1e4:	88fb      	ldrh	r3, [r7, #6]
 801c1e6:	4618      	mov	r0, r3
 801c1e8:	f7e5 ff84 	bl	80020f4 <HAL_GPIO_EXTI_Callback>
  }
}
 801c1ec:	bf00      	nop
 801c1ee:	3708      	adds	r7, #8
 801c1f0:	46bd      	mov	sp, r7
 801c1f2:	bd80      	pop	{r7, pc}
 801c1f4:	40013c00 	.word	0x40013c00

0801c1f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801c1f8:	b580      	push	{r7, lr}
 801c1fa:	b084      	sub	sp, #16
 801c1fc:	af00      	add	r7, sp, #0
 801c1fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	2b00      	cmp	r3, #0
 801c204:	d101      	bne.n	801c20a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801c206:	2301      	movs	r3, #1
 801c208:	e12b      	b.n	801c462 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801c20a:	687b      	ldr	r3, [r7, #4]
 801c20c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c210:	b2db      	uxtb	r3, r3
 801c212:	2b00      	cmp	r3, #0
 801c214:	d106      	bne.n	801c224 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801c216:	687b      	ldr	r3, [r7, #4]
 801c218:	2200      	movs	r2, #0
 801c21a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801c21e:	6878      	ldr	r0, [r7, #4]
 801c220:	f7e7 fa14 	bl	800364c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801c224:	687b      	ldr	r3, [r7, #4]
 801c226:	2224      	movs	r2, #36	; 0x24
 801c228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	681b      	ldr	r3, [r3, #0]
 801c230:	681a      	ldr	r2, [r3, #0]
 801c232:	687b      	ldr	r3, [r7, #4]
 801c234:	681b      	ldr	r3, [r3, #0]
 801c236:	f022 0201 	bic.w	r2, r2, #1
 801c23a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	681b      	ldr	r3, [r3, #0]
 801c240:	681a      	ldr	r2, [r3, #0]
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801c24a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801c24c:	687b      	ldr	r3, [r7, #4]
 801c24e:	681b      	ldr	r3, [r3, #0]
 801c250:	681a      	ldr	r2, [r3, #0]
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	681b      	ldr	r3, [r3, #0]
 801c256:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801c25a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801c25c:	f003 fb62 	bl	801f924 <HAL_RCC_GetPCLK1Freq>
 801c260:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801c262:	687b      	ldr	r3, [r7, #4]
 801c264:	685b      	ldr	r3, [r3, #4]
 801c266:	4a81      	ldr	r2, [pc, #516]	; (801c46c <HAL_I2C_Init+0x274>)
 801c268:	4293      	cmp	r3, r2
 801c26a:	d807      	bhi.n	801c27c <HAL_I2C_Init+0x84>
 801c26c:	68fb      	ldr	r3, [r7, #12]
 801c26e:	4a80      	ldr	r2, [pc, #512]	; (801c470 <HAL_I2C_Init+0x278>)
 801c270:	4293      	cmp	r3, r2
 801c272:	bf94      	ite	ls
 801c274:	2301      	movls	r3, #1
 801c276:	2300      	movhi	r3, #0
 801c278:	b2db      	uxtb	r3, r3
 801c27a:	e006      	b.n	801c28a <HAL_I2C_Init+0x92>
 801c27c:	68fb      	ldr	r3, [r7, #12]
 801c27e:	4a7d      	ldr	r2, [pc, #500]	; (801c474 <HAL_I2C_Init+0x27c>)
 801c280:	4293      	cmp	r3, r2
 801c282:	bf94      	ite	ls
 801c284:	2301      	movls	r3, #1
 801c286:	2300      	movhi	r3, #0
 801c288:	b2db      	uxtb	r3, r3
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	d001      	beq.n	801c292 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801c28e:	2301      	movs	r3, #1
 801c290:	e0e7      	b.n	801c462 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801c292:	68fb      	ldr	r3, [r7, #12]
 801c294:	4a78      	ldr	r2, [pc, #480]	; (801c478 <HAL_I2C_Init+0x280>)
 801c296:	fba2 2303 	umull	r2, r3, r2, r3
 801c29a:	0c9b      	lsrs	r3, r3, #18
 801c29c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	685b      	ldr	r3, [r3, #4]
 801c2a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801c2a8:	687b      	ldr	r3, [r7, #4]
 801c2aa:	681b      	ldr	r3, [r3, #0]
 801c2ac:	68ba      	ldr	r2, [r7, #8]
 801c2ae:	430a      	orrs	r2, r1
 801c2b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	681b      	ldr	r3, [r3, #0]
 801c2b6:	6a1b      	ldr	r3, [r3, #32]
 801c2b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801c2bc:	687b      	ldr	r3, [r7, #4]
 801c2be:	685b      	ldr	r3, [r3, #4]
 801c2c0:	4a6a      	ldr	r2, [pc, #424]	; (801c46c <HAL_I2C_Init+0x274>)
 801c2c2:	4293      	cmp	r3, r2
 801c2c4:	d802      	bhi.n	801c2cc <HAL_I2C_Init+0xd4>
 801c2c6:	68bb      	ldr	r3, [r7, #8]
 801c2c8:	3301      	adds	r3, #1
 801c2ca:	e009      	b.n	801c2e0 <HAL_I2C_Init+0xe8>
 801c2cc:	68bb      	ldr	r3, [r7, #8]
 801c2ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801c2d2:	fb02 f303 	mul.w	r3, r2, r3
 801c2d6:	4a69      	ldr	r2, [pc, #420]	; (801c47c <HAL_I2C_Init+0x284>)
 801c2d8:	fba2 2303 	umull	r2, r3, r2, r3
 801c2dc:	099b      	lsrs	r3, r3, #6
 801c2de:	3301      	adds	r3, #1
 801c2e0:	687a      	ldr	r2, [r7, #4]
 801c2e2:	6812      	ldr	r2, [r2, #0]
 801c2e4:	430b      	orrs	r3, r1
 801c2e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801c2e8:	687b      	ldr	r3, [r7, #4]
 801c2ea:	681b      	ldr	r3, [r3, #0]
 801c2ec:	69db      	ldr	r3, [r3, #28]
 801c2ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801c2f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801c2f6:	687b      	ldr	r3, [r7, #4]
 801c2f8:	685b      	ldr	r3, [r3, #4]
 801c2fa:	495c      	ldr	r1, [pc, #368]	; (801c46c <HAL_I2C_Init+0x274>)
 801c2fc:	428b      	cmp	r3, r1
 801c2fe:	d819      	bhi.n	801c334 <HAL_I2C_Init+0x13c>
 801c300:	68fb      	ldr	r3, [r7, #12]
 801c302:	1e59      	subs	r1, r3, #1
 801c304:	687b      	ldr	r3, [r7, #4]
 801c306:	685b      	ldr	r3, [r3, #4]
 801c308:	005b      	lsls	r3, r3, #1
 801c30a:	fbb1 f3f3 	udiv	r3, r1, r3
 801c30e:	1c59      	adds	r1, r3, #1
 801c310:	f640 73fc 	movw	r3, #4092	; 0xffc
 801c314:	400b      	ands	r3, r1
 801c316:	2b00      	cmp	r3, #0
 801c318:	d00a      	beq.n	801c330 <HAL_I2C_Init+0x138>
 801c31a:	68fb      	ldr	r3, [r7, #12]
 801c31c:	1e59      	subs	r1, r3, #1
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	685b      	ldr	r3, [r3, #4]
 801c322:	005b      	lsls	r3, r3, #1
 801c324:	fbb1 f3f3 	udiv	r3, r1, r3
 801c328:	3301      	adds	r3, #1
 801c32a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c32e:	e051      	b.n	801c3d4 <HAL_I2C_Init+0x1dc>
 801c330:	2304      	movs	r3, #4
 801c332:	e04f      	b.n	801c3d4 <HAL_I2C_Init+0x1dc>
 801c334:	687b      	ldr	r3, [r7, #4]
 801c336:	689b      	ldr	r3, [r3, #8]
 801c338:	2b00      	cmp	r3, #0
 801c33a:	d111      	bne.n	801c360 <HAL_I2C_Init+0x168>
 801c33c:	68fb      	ldr	r3, [r7, #12]
 801c33e:	1e58      	subs	r0, r3, #1
 801c340:	687b      	ldr	r3, [r7, #4]
 801c342:	6859      	ldr	r1, [r3, #4]
 801c344:	460b      	mov	r3, r1
 801c346:	005b      	lsls	r3, r3, #1
 801c348:	440b      	add	r3, r1
 801c34a:	fbb0 f3f3 	udiv	r3, r0, r3
 801c34e:	3301      	adds	r3, #1
 801c350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c354:	2b00      	cmp	r3, #0
 801c356:	bf0c      	ite	eq
 801c358:	2301      	moveq	r3, #1
 801c35a:	2300      	movne	r3, #0
 801c35c:	b2db      	uxtb	r3, r3
 801c35e:	e012      	b.n	801c386 <HAL_I2C_Init+0x18e>
 801c360:	68fb      	ldr	r3, [r7, #12]
 801c362:	1e58      	subs	r0, r3, #1
 801c364:	687b      	ldr	r3, [r7, #4]
 801c366:	6859      	ldr	r1, [r3, #4]
 801c368:	460b      	mov	r3, r1
 801c36a:	009b      	lsls	r3, r3, #2
 801c36c:	440b      	add	r3, r1
 801c36e:	0099      	lsls	r1, r3, #2
 801c370:	440b      	add	r3, r1
 801c372:	fbb0 f3f3 	udiv	r3, r0, r3
 801c376:	3301      	adds	r3, #1
 801c378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c37c:	2b00      	cmp	r3, #0
 801c37e:	bf0c      	ite	eq
 801c380:	2301      	moveq	r3, #1
 801c382:	2300      	movne	r3, #0
 801c384:	b2db      	uxtb	r3, r3
 801c386:	2b00      	cmp	r3, #0
 801c388:	d001      	beq.n	801c38e <HAL_I2C_Init+0x196>
 801c38a:	2301      	movs	r3, #1
 801c38c:	e022      	b.n	801c3d4 <HAL_I2C_Init+0x1dc>
 801c38e:	687b      	ldr	r3, [r7, #4]
 801c390:	689b      	ldr	r3, [r3, #8]
 801c392:	2b00      	cmp	r3, #0
 801c394:	d10e      	bne.n	801c3b4 <HAL_I2C_Init+0x1bc>
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	1e58      	subs	r0, r3, #1
 801c39a:	687b      	ldr	r3, [r7, #4]
 801c39c:	6859      	ldr	r1, [r3, #4]
 801c39e:	460b      	mov	r3, r1
 801c3a0:	005b      	lsls	r3, r3, #1
 801c3a2:	440b      	add	r3, r1
 801c3a4:	fbb0 f3f3 	udiv	r3, r0, r3
 801c3a8:	3301      	adds	r3, #1
 801c3aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c3ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c3b2:	e00f      	b.n	801c3d4 <HAL_I2C_Init+0x1dc>
 801c3b4:	68fb      	ldr	r3, [r7, #12]
 801c3b6:	1e58      	subs	r0, r3, #1
 801c3b8:	687b      	ldr	r3, [r7, #4]
 801c3ba:	6859      	ldr	r1, [r3, #4]
 801c3bc:	460b      	mov	r3, r1
 801c3be:	009b      	lsls	r3, r3, #2
 801c3c0:	440b      	add	r3, r1
 801c3c2:	0099      	lsls	r1, r3, #2
 801c3c4:	440b      	add	r3, r1
 801c3c6:	fbb0 f3f3 	udiv	r3, r0, r3
 801c3ca:	3301      	adds	r3, #1
 801c3cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c3d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801c3d4:	6879      	ldr	r1, [r7, #4]
 801c3d6:	6809      	ldr	r1, [r1, #0]
 801c3d8:	4313      	orrs	r3, r2
 801c3da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801c3dc:	687b      	ldr	r3, [r7, #4]
 801c3de:	681b      	ldr	r3, [r3, #0]
 801c3e0:	681b      	ldr	r3, [r3, #0]
 801c3e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	69da      	ldr	r2, [r3, #28]
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	6a1b      	ldr	r3, [r3, #32]
 801c3ee:	431a      	orrs	r2, r3
 801c3f0:	687b      	ldr	r3, [r7, #4]
 801c3f2:	681b      	ldr	r3, [r3, #0]
 801c3f4:	430a      	orrs	r2, r1
 801c3f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	689b      	ldr	r3, [r3, #8]
 801c3fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801c402:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801c406:	687a      	ldr	r2, [r7, #4]
 801c408:	6911      	ldr	r1, [r2, #16]
 801c40a:	687a      	ldr	r2, [r7, #4]
 801c40c:	68d2      	ldr	r2, [r2, #12]
 801c40e:	4311      	orrs	r1, r2
 801c410:	687a      	ldr	r2, [r7, #4]
 801c412:	6812      	ldr	r2, [r2, #0]
 801c414:	430b      	orrs	r3, r1
 801c416:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	681b      	ldr	r3, [r3, #0]
 801c41c:	68db      	ldr	r3, [r3, #12]
 801c41e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	695a      	ldr	r2, [r3, #20]
 801c426:	687b      	ldr	r3, [r7, #4]
 801c428:	699b      	ldr	r3, [r3, #24]
 801c42a:	431a      	orrs	r2, r3
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	681b      	ldr	r3, [r3, #0]
 801c430:	430a      	orrs	r2, r1
 801c432:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	681b      	ldr	r3, [r3, #0]
 801c438:	681a      	ldr	r2, [r3, #0]
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	681b      	ldr	r3, [r3, #0]
 801c43e:	f042 0201 	orr.w	r2, r2, #1
 801c442:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	2200      	movs	r2, #0
 801c448:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	2220      	movs	r2, #32
 801c44e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801c452:	687b      	ldr	r3, [r7, #4]
 801c454:	2200      	movs	r2, #0
 801c456:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	2200      	movs	r2, #0
 801c45c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801c460:	2300      	movs	r3, #0
}
 801c462:	4618      	mov	r0, r3
 801c464:	3710      	adds	r7, #16
 801c466:	46bd      	mov	sp, r7
 801c468:	bd80      	pop	{r7, pc}
 801c46a:	bf00      	nop
 801c46c:	000186a0 	.word	0x000186a0
 801c470:	001e847f 	.word	0x001e847f
 801c474:	003d08ff 	.word	0x003d08ff
 801c478:	431bde83 	.word	0x431bde83
 801c47c:	10624dd3 	.word	0x10624dd3

0801c480 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 801c480:	b580      	push	{r7, lr}
 801c482:	b086      	sub	sp, #24
 801c484:	af00      	add	r7, sp, #0
 801c486:	60f8      	str	r0, [r7, #12]
 801c488:	607a      	str	r2, [r7, #4]
 801c48a:	461a      	mov	r2, r3
 801c48c:	460b      	mov	r3, r1
 801c48e:	817b      	strh	r3, [r7, #10]
 801c490:	4613      	mov	r3, r2
 801c492:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 801c494:	2300      	movs	r3, #0
 801c496:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c498:	68fb      	ldr	r3, [r7, #12]
 801c49a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c49e:	b2db      	uxtb	r3, r3
 801c4a0:	2b20      	cmp	r3, #32
 801c4a2:	f040 810d 	bne.w	801c6c0 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801c4a6:	4b89      	ldr	r3, [pc, #548]	; (801c6cc <HAL_I2C_Master_Transmit_DMA+0x24c>)
 801c4a8:	681b      	ldr	r3, [r3, #0]
 801c4aa:	08db      	lsrs	r3, r3, #3
 801c4ac:	4a88      	ldr	r2, [pc, #544]	; (801c6d0 <HAL_I2C_Master_Transmit_DMA+0x250>)
 801c4ae:	fba2 2303 	umull	r2, r3, r2, r3
 801c4b2:	0a1a      	lsrs	r2, r3, #8
 801c4b4:	4613      	mov	r3, r2
 801c4b6:	009b      	lsls	r3, r3, #2
 801c4b8:	4413      	add	r3, r2
 801c4ba:	009a      	lsls	r2, r3, #2
 801c4bc:	4413      	add	r3, r2
 801c4be:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 801c4c0:	693b      	ldr	r3, [r7, #16]
 801c4c2:	3b01      	subs	r3, #1
 801c4c4:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 801c4c6:	693b      	ldr	r3, [r7, #16]
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	d116      	bne.n	801c4fa <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801c4cc:	68fb      	ldr	r3, [r7, #12]
 801c4ce:	2200      	movs	r2, #0
 801c4d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	2220      	movs	r2, #32
 801c4d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801c4da:	68fb      	ldr	r3, [r7, #12]
 801c4dc:	2200      	movs	r2, #0
 801c4de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801c4e2:	68fb      	ldr	r3, [r7, #12]
 801c4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c4e6:	f043 0220 	orr.w	r2, r3, #32
 801c4ea:	68fb      	ldr	r3, [r7, #12]
 801c4ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c4ee:	68fb      	ldr	r3, [r7, #12]
 801c4f0:	2200      	movs	r2, #0
 801c4f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801c4f6:	2301      	movs	r3, #1
 801c4f8:	e0e3      	b.n	801c6c2 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801c4fa:	68fb      	ldr	r3, [r7, #12]
 801c4fc:	681b      	ldr	r3, [r3, #0]
 801c4fe:	699b      	ldr	r3, [r3, #24]
 801c500:	f003 0302 	and.w	r3, r3, #2
 801c504:	2b02      	cmp	r3, #2
 801c506:	d0db      	beq.n	801c4c0 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c508:	68fb      	ldr	r3, [r7, #12]
 801c50a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801c50e:	2b01      	cmp	r3, #1
 801c510:	d101      	bne.n	801c516 <HAL_I2C_Master_Transmit_DMA+0x96>
 801c512:	2302      	movs	r3, #2
 801c514:	e0d5      	b.n	801c6c2 <HAL_I2C_Master_Transmit_DMA+0x242>
 801c516:	68fb      	ldr	r3, [r7, #12]
 801c518:	2201      	movs	r2, #1
 801c51a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801c51e:	68fb      	ldr	r3, [r7, #12]
 801c520:	681b      	ldr	r3, [r3, #0]
 801c522:	681b      	ldr	r3, [r3, #0]
 801c524:	f003 0301 	and.w	r3, r3, #1
 801c528:	2b01      	cmp	r3, #1
 801c52a:	d007      	beq.n	801c53c <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801c52c:	68fb      	ldr	r3, [r7, #12]
 801c52e:	681b      	ldr	r3, [r3, #0]
 801c530:	681a      	ldr	r2, [r3, #0]
 801c532:	68fb      	ldr	r3, [r7, #12]
 801c534:	681b      	ldr	r3, [r3, #0]
 801c536:	f042 0201 	orr.w	r2, r2, #1
 801c53a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801c53c:	68fb      	ldr	r3, [r7, #12]
 801c53e:	681b      	ldr	r3, [r3, #0]
 801c540:	681a      	ldr	r2, [r3, #0]
 801c542:	68fb      	ldr	r3, [r7, #12]
 801c544:	681b      	ldr	r3, [r3, #0]
 801c546:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c54a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801c54c:	68fb      	ldr	r3, [r7, #12]
 801c54e:	2221      	movs	r2, #33	; 0x21
 801c550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801c554:	68fb      	ldr	r3, [r7, #12]
 801c556:	2210      	movs	r2, #16
 801c558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c55c:	68fb      	ldr	r3, [r7, #12]
 801c55e:	2200      	movs	r2, #0
 801c560:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801c562:	68fb      	ldr	r3, [r7, #12]
 801c564:	687a      	ldr	r2, [r7, #4]
 801c566:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801c568:	68fb      	ldr	r3, [r7, #12]
 801c56a:	893a      	ldrh	r2, [r7, #8]
 801c56c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801c56e:	68fb      	ldr	r3, [r7, #12]
 801c570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c572:	b29a      	uxth	r2, r3
 801c574:	68fb      	ldr	r3, [r7, #12]
 801c576:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801c578:	68fb      	ldr	r3, [r7, #12]
 801c57a:	4a56      	ldr	r2, [pc, #344]	; (801c6d4 <HAL_I2C_Master_Transmit_DMA+0x254>)
 801c57c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801c57e:	897a      	ldrh	r2, [r7, #10]
 801c580:	68fb      	ldr	r3, [r7, #12]
 801c582:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 801c584:	68fb      	ldr	r3, [r7, #12]
 801c586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c588:	2b00      	cmp	r3, #0
 801c58a:	d07b      	beq.n	801c684 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 801c58c:	68fb      	ldr	r3, [r7, #12]
 801c58e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c590:	2b00      	cmp	r3, #0
 801c592:	d02a      	beq.n	801c5ea <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 801c594:	68fb      	ldr	r3, [r7, #12]
 801c596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c598:	4a4f      	ldr	r2, [pc, #316]	; (801c6d8 <HAL_I2C_Master_Transmit_DMA+0x258>)
 801c59a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801c59c:	68fb      	ldr	r3, [r7, #12]
 801c59e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c5a0:	4a4e      	ldr	r2, [pc, #312]	; (801c6dc <HAL_I2C_Master_Transmit_DMA+0x25c>)
 801c5a2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801c5a4:	68fb      	ldr	r3, [r7, #12]
 801c5a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c5a8:	2200      	movs	r2, #0
 801c5aa:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 801c5ac:	68fb      	ldr	r3, [r7, #12]
 801c5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c5b0:	2200      	movs	r2, #0
 801c5b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 801c5b4:	68fb      	ldr	r3, [r7, #12]
 801c5b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c5b8:	2200      	movs	r2, #0
 801c5ba:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 801c5bc:	68fb      	ldr	r3, [r7, #12]
 801c5be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c5c0:	2200      	movs	r2, #0
 801c5c2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 801c5c4:	68fb      	ldr	r3, [r7, #12]
 801c5c6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801c5c8:	68fb      	ldr	r3, [r7, #12]
 801c5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c5cc:	4619      	mov	r1, r3
 801c5ce:	68fb      	ldr	r3, [r7, #12]
 801c5d0:	681b      	ldr	r3, [r3, #0]
 801c5d2:	3310      	adds	r3, #16
 801c5d4:	461a      	mov	r2, r3
 801c5d6:	68fb      	ldr	r3, [r7, #12]
 801c5d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c5da:	f7ff f805 	bl	801b5e8 <HAL_DMA_Start_IT>
 801c5de:	4603      	mov	r3, r0
 801c5e0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801c5e2:	7dfb      	ldrb	r3, [r7, #23]
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d139      	bne.n	801c65c <HAL_I2C_Master_Transmit_DMA+0x1dc>
 801c5e8:	e013      	b.n	801c612 <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 801c5ea:	68fb      	ldr	r3, [r7, #12]
 801c5ec:	2220      	movs	r2, #32
 801c5ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801c5f2:	68fb      	ldr	r3, [r7, #12]
 801c5f4:	2200      	movs	r2, #0
 801c5f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801c5fa:	68fb      	ldr	r3, [r7, #12]
 801c5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c5fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801c602:	68fb      	ldr	r3, [r7, #12]
 801c604:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801c606:	68fb      	ldr	r3, [r7, #12]
 801c608:	2200      	movs	r2, #0
 801c60a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801c60e:	2301      	movs	r3, #1
 801c610:	e057      	b.n	801c6c2 <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c612:	68fb      	ldr	r3, [r7, #12]
 801c614:	2200      	movs	r2, #0
 801c616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801c61a:	68fb      	ldr	r3, [r7, #12]
 801c61c:	681b      	ldr	r3, [r3, #0]
 801c61e:	685a      	ldr	r2, [r3, #4]
 801c620:	68fb      	ldr	r3, [r7, #12]
 801c622:	681b      	ldr	r3, [r3, #0]
 801c624:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801c628:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801c62a:	68fb      	ldr	r3, [r7, #12]
 801c62c:	681b      	ldr	r3, [r3, #0]
 801c62e:	685a      	ldr	r2, [r3, #4]
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	681b      	ldr	r3, [r3, #0]
 801c634:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801c638:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801c63a:	68fb      	ldr	r3, [r7, #12]
 801c63c:	681b      	ldr	r3, [r3, #0]
 801c63e:	681a      	ldr	r2, [r3, #0]
 801c640:	68fb      	ldr	r3, [r7, #12]
 801c642:	681b      	ldr	r3, [r3, #0]
 801c644:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801c648:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801c64a:	68fb      	ldr	r3, [r7, #12]
 801c64c:	681b      	ldr	r3, [r3, #0]
 801c64e:	681a      	ldr	r2, [r3, #0]
 801c650:	68fb      	ldr	r3, [r7, #12]
 801c652:	681b      	ldr	r3, [r3, #0]
 801c654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801c658:	601a      	str	r2, [r3, #0]
 801c65a:	e02f      	b.n	801c6bc <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801c65c:	68fb      	ldr	r3, [r7, #12]
 801c65e:	2220      	movs	r2, #32
 801c660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801c664:	68fb      	ldr	r3, [r7, #12]
 801c666:	2200      	movs	r2, #0
 801c668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801c66c:	68fb      	ldr	r3, [r7, #12]
 801c66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c670:	f043 0210 	orr.w	r2, r3, #16
 801c674:	68fb      	ldr	r3, [r7, #12]
 801c676:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c678:	68fb      	ldr	r3, [r7, #12]
 801c67a:	2200      	movs	r2, #0
 801c67c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801c680:	2301      	movs	r3, #1
 801c682:	e01e      	b.n	801c6c2 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801c684:	68fb      	ldr	r3, [r7, #12]
 801c686:	681b      	ldr	r3, [r3, #0]
 801c688:	681a      	ldr	r2, [r3, #0]
 801c68a:	68fb      	ldr	r3, [r7, #12]
 801c68c:	681b      	ldr	r3, [r3, #0]
 801c68e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801c692:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801c694:	68fb      	ldr	r3, [r7, #12]
 801c696:	681b      	ldr	r3, [r3, #0]
 801c698:	681a      	ldr	r2, [r3, #0]
 801c69a:	68fb      	ldr	r3, [r7, #12]
 801c69c:	681b      	ldr	r3, [r3, #0]
 801c69e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801c6a2:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801c6a4:	68fb      	ldr	r3, [r7, #12]
 801c6a6:	2200      	movs	r2, #0
 801c6a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801c6ac:	68fb      	ldr	r3, [r7, #12]
 801c6ae:	681b      	ldr	r3, [r3, #0]
 801c6b0:	685a      	ldr	r2, [r3, #4]
 801c6b2:	68fb      	ldr	r3, [r7, #12]
 801c6b4:	681b      	ldr	r3, [r3, #0]
 801c6b6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801c6ba:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 801c6bc:	2300      	movs	r3, #0
 801c6be:	e000      	b.n	801c6c2 <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 801c6c0:	2302      	movs	r3, #2
  }
}
 801c6c2:	4618      	mov	r0, r3
 801c6c4:	3718      	adds	r7, #24
 801c6c6:	46bd      	mov	sp, r7
 801c6c8:	bd80      	pop	{r7, pc}
 801c6ca:	bf00      	nop
 801c6cc:	20000020 	.word	0x20000020
 801c6d0:	14f8b589 	.word	0x14f8b589
 801c6d4:	ffff0000 	.word	0xffff0000
 801c6d8:	0801e9a9 	.word	0x0801e9a9
 801c6dc:	0801eb53 	.word	0x0801eb53

0801c6e0 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 801c6e0:	b580      	push	{r7, lr}
 801c6e2:	b086      	sub	sp, #24
 801c6e4:	af00      	add	r7, sp, #0
 801c6e6:	60f8      	str	r0, [r7, #12]
 801c6e8:	607a      	str	r2, [r7, #4]
 801c6ea:	461a      	mov	r2, r3
 801c6ec:	460b      	mov	r3, r1
 801c6ee:	817b      	strh	r3, [r7, #10]
 801c6f0:	4613      	mov	r3, r2
 801c6f2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 801c6f4:	2300      	movs	r3, #0
 801c6f6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c6f8:	68fb      	ldr	r3, [r7, #12]
 801c6fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c6fe:	b2db      	uxtb	r3, r3
 801c700:	2b20      	cmp	r3, #32
 801c702:	f040 810d 	bne.w	801c920 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801c706:	4b89      	ldr	r3, [pc, #548]	; (801c92c <HAL_I2C_Master_Receive_DMA+0x24c>)
 801c708:	681b      	ldr	r3, [r3, #0]
 801c70a:	08db      	lsrs	r3, r3, #3
 801c70c:	4a88      	ldr	r2, [pc, #544]	; (801c930 <HAL_I2C_Master_Receive_DMA+0x250>)
 801c70e:	fba2 2303 	umull	r2, r3, r2, r3
 801c712:	0a1a      	lsrs	r2, r3, #8
 801c714:	4613      	mov	r3, r2
 801c716:	009b      	lsls	r3, r3, #2
 801c718:	4413      	add	r3, r2
 801c71a:	009a      	lsls	r2, r3, #2
 801c71c:	4413      	add	r3, r2
 801c71e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 801c720:	693b      	ldr	r3, [r7, #16]
 801c722:	3b01      	subs	r3, #1
 801c724:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 801c726:	693b      	ldr	r3, [r7, #16]
 801c728:	2b00      	cmp	r3, #0
 801c72a:	d116      	bne.n	801c75a <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801c72c:	68fb      	ldr	r3, [r7, #12]
 801c72e:	2200      	movs	r2, #0
 801c730:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801c732:	68fb      	ldr	r3, [r7, #12]
 801c734:	2220      	movs	r2, #32
 801c736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801c73a:	68fb      	ldr	r3, [r7, #12]
 801c73c:	2200      	movs	r2, #0
 801c73e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801c742:	68fb      	ldr	r3, [r7, #12]
 801c744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c746:	f043 0220 	orr.w	r2, r3, #32
 801c74a:	68fb      	ldr	r3, [r7, #12]
 801c74c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c74e:	68fb      	ldr	r3, [r7, #12]
 801c750:	2200      	movs	r2, #0
 801c752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801c756:	2301      	movs	r3, #1
 801c758:	e0e3      	b.n	801c922 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801c75a:	68fb      	ldr	r3, [r7, #12]
 801c75c:	681b      	ldr	r3, [r3, #0]
 801c75e:	699b      	ldr	r3, [r3, #24]
 801c760:	f003 0302 	and.w	r3, r3, #2
 801c764:	2b02      	cmp	r3, #2
 801c766:	d0db      	beq.n	801c720 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c768:	68fb      	ldr	r3, [r7, #12]
 801c76a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801c76e:	2b01      	cmp	r3, #1
 801c770:	d101      	bne.n	801c776 <HAL_I2C_Master_Receive_DMA+0x96>
 801c772:	2302      	movs	r3, #2
 801c774:	e0d5      	b.n	801c922 <HAL_I2C_Master_Receive_DMA+0x242>
 801c776:	68fb      	ldr	r3, [r7, #12]
 801c778:	2201      	movs	r2, #1
 801c77a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801c77e:	68fb      	ldr	r3, [r7, #12]
 801c780:	681b      	ldr	r3, [r3, #0]
 801c782:	681b      	ldr	r3, [r3, #0]
 801c784:	f003 0301 	and.w	r3, r3, #1
 801c788:	2b01      	cmp	r3, #1
 801c78a:	d007      	beq.n	801c79c <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801c78c:	68fb      	ldr	r3, [r7, #12]
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	681a      	ldr	r2, [r3, #0]
 801c792:	68fb      	ldr	r3, [r7, #12]
 801c794:	681b      	ldr	r3, [r3, #0]
 801c796:	f042 0201 	orr.w	r2, r2, #1
 801c79a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	681b      	ldr	r3, [r3, #0]
 801c7a0:	681a      	ldr	r2, [r3, #0]
 801c7a2:	68fb      	ldr	r3, [r7, #12]
 801c7a4:	681b      	ldr	r3, [r3, #0]
 801c7a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c7aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801c7ac:	68fb      	ldr	r3, [r7, #12]
 801c7ae:	2222      	movs	r2, #34	; 0x22
 801c7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801c7b4:	68fb      	ldr	r3, [r7, #12]
 801c7b6:	2210      	movs	r2, #16
 801c7b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c7bc:	68fb      	ldr	r3, [r7, #12]
 801c7be:	2200      	movs	r2, #0
 801c7c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801c7c2:	68fb      	ldr	r3, [r7, #12]
 801c7c4:	687a      	ldr	r2, [r7, #4]
 801c7c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801c7c8:	68fb      	ldr	r3, [r7, #12]
 801c7ca:	893a      	ldrh	r2, [r7, #8]
 801c7cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801c7ce:	68fb      	ldr	r3, [r7, #12]
 801c7d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c7d2:	b29a      	uxth	r2, r3
 801c7d4:	68fb      	ldr	r3, [r7, #12]
 801c7d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801c7d8:	68fb      	ldr	r3, [r7, #12]
 801c7da:	4a56      	ldr	r2, [pc, #344]	; (801c934 <HAL_I2C_Master_Receive_DMA+0x254>)
 801c7dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801c7de:	897a      	ldrh	r2, [r7, #10]
 801c7e0:	68fb      	ldr	r3, [r7, #12]
 801c7e2:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 801c7e4:	68fb      	ldr	r3, [r7, #12]
 801c7e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d07b      	beq.n	801c8e4 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 801c7ec:	68fb      	ldr	r3, [r7, #12]
 801c7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7f0:	2b00      	cmp	r3, #0
 801c7f2:	d02a      	beq.n	801c84a <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 801c7f4:	68fb      	ldr	r3, [r7, #12]
 801c7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7f8:	4a4f      	ldr	r2, [pc, #316]	; (801c938 <HAL_I2C_Master_Receive_DMA+0x258>)
 801c7fa:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801c7fc:	68fb      	ldr	r3, [r7, #12]
 801c7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c800:	4a4e      	ldr	r2, [pc, #312]	; (801c93c <HAL_I2C_Master_Receive_DMA+0x25c>)
 801c802:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801c804:	68fb      	ldr	r3, [r7, #12]
 801c806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c808:	2200      	movs	r2, #0
 801c80a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 801c80c:	68fb      	ldr	r3, [r7, #12]
 801c80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c810:	2200      	movs	r2, #0
 801c812:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 801c814:	68fb      	ldr	r3, [r7, #12]
 801c816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c818:	2200      	movs	r2, #0
 801c81a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 801c81c:	68fb      	ldr	r3, [r7, #12]
 801c81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c820:	2200      	movs	r2, #0
 801c822:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 801c824:	68fb      	ldr	r3, [r7, #12]
 801c826:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c828:	68fb      	ldr	r3, [r7, #12]
 801c82a:	681b      	ldr	r3, [r3, #0]
 801c82c:	3310      	adds	r3, #16
 801c82e:	4619      	mov	r1, r3
 801c830:	68fb      	ldr	r3, [r7, #12]
 801c832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c834:	461a      	mov	r2, r3
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c83a:	f7fe fed5 	bl	801b5e8 <HAL_DMA_Start_IT>
 801c83e:	4603      	mov	r3, r0
 801c840:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801c842:	7dfb      	ldrb	r3, [r7, #23]
 801c844:	2b00      	cmp	r3, #0
 801c846:	d139      	bne.n	801c8bc <HAL_I2C_Master_Receive_DMA+0x1dc>
 801c848:	e013      	b.n	801c872 <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 801c84a:	68fb      	ldr	r3, [r7, #12]
 801c84c:	2220      	movs	r2, #32
 801c84e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801c852:	68fb      	ldr	r3, [r7, #12]
 801c854:	2200      	movs	r2, #0
 801c856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801c85a:	68fb      	ldr	r3, [r7, #12]
 801c85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c85e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801c862:	68fb      	ldr	r3, [r7, #12]
 801c864:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801c866:	68fb      	ldr	r3, [r7, #12]
 801c868:	2200      	movs	r2, #0
 801c86a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801c86e:	2301      	movs	r3, #1
 801c870:	e057      	b.n	801c922 <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801c872:	68fb      	ldr	r3, [r7, #12]
 801c874:	681b      	ldr	r3, [r3, #0]
 801c876:	681a      	ldr	r2, [r3, #0]
 801c878:	68fb      	ldr	r3, [r7, #12]
 801c87a:	681b      	ldr	r3, [r3, #0]
 801c87c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801c880:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	681b      	ldr	r3, [r3, #0]
 801c886:	681a      	ldr	r2, [r3, #0]
 801c888:	68fb      	ldr	r3, [r7, #12]
 801c88a:	681b      	ldr	r3, [r3, #0]
 801c88c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801c890:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c892:	68fb      	ldr	r3, [r7, #12]
 801c894:	2200      	movs	r2, #0
 801c896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801c89a:	68fb      	ldr	r3, [r7, #12]
 801c89c:	681b      	ldr	r3, [r3, #0]
 801c89e:	685a      	ldr	r2, [r3, #4]
 801c8a0:	68fb      	ldr	r3, [r7, #12]
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801c8a8:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801c8aa:	68fb      	ldr	r3, [r7, #12]
 801c8ac:	681b      	ldr	r3, [r3, #0]
 801c8ae:	685a      	ldr	r2, [r3, #4]
 801c8b0:	68fb      	ldr	r3, [r7, #12]
 801c8b2:	681b      	ldr	r3, [r3, #0]
 801c8b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801c8b8:	605a      	str	r2, [r3, #4]
 801c8ba:	e02f      	b.n	801c91c <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801c8bc:	68fb      	ldr	r3, [r7, #12]
 801c8be:	2220      	movs	r2, #32
 801c8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801c8c4:	68fb      	ldr	r3, [r7, #12]
 801c8c6:	2200      	movs	r2, #0
 801c8c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801c8cc:	68fb      	ldr	r3, [r7, #12]
 801c8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c8d0:	f043 0210 	orr.w	r2, r3, #16
 801c8d4:	68fb      	ldr	r3, [r7, #12]
 801c8d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c8d8:	68fb      	ldr	r3, [r7, #12]
 801c8da:	2200      	movs	r2, #0
 801c8dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801c8e0:	2301      	movs	r3, #1
 801c8e2:	e01e      	b.n	801c922 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801c8e4:	68fb      	ldr	r3, [r7, #12]
 801c8e6:	2200      	movs	r2, #0
 801c8e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801c8ec:	68fb      	ldr	r3, [r7, #12]
 801c8ee:	681b      	ldr	r3, [r3, #0]
 801c8f0:	685a      	ldr	r2, [r3, #4]
 801c8f2:	68fb      	ldr	r3, [r7, #12]
 801c8f4:	681b      	ldr	r3, [r3, #0]
 801c8f6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801c8fa:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801c8fc:	68fb      	ldr	r3, [r7, #12]
 801c8fe:	681b      	ldr	r3, [r3, #0]
 801c900:	681a      	ldr	r2, [r3, #0]
 801c902:	68fb      	ldr	r3, [r7, #12]
 801c904:	681b      	ldr	r3, [r3, #0]
 801c906:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801c90a:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801c90c:	68fb      	ldr	r3, [r7, #12]
 801c90e:	681b      	ldr	r3, [r3, #0]
 801c910:	681a      	ldr	r2, [r3, #0]
 801c912:	68fb      	ldr	r3, [r7, #12]
 801c914:	681b      	ldr	r3, [r3, #0]
 801c916:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801c91a:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 801c91c:	2300      	movs	r3, #0
 801c91e:	e000      	b.n	801c922 <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 801c920:	2302      	movs	r3, #2
  }
}
 801c922:	4618      	mov	r0, r3
 801c924:	3718      	adds	r7, #24
 801c926:	46bd      	mov	sp, r7
 801c928:	bd80      	pop	{r7, pc}
 801c92a:	bf00      	nop
 801c92c:	20000020 	.word	0x20000020
 801c930:	14f8b589 	.word	0x14f8b589
 801c934:	ffff0000 	.word	0xffff0000
 801c938:	0801e9a9 	.word	0x0801e9a9
 801c93c:	0801eb53 	.word	0x0801eb53

0801c940 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801c940:	b580      	push	{r7, lr}
 801c942:	b08a      	sub	sp, #40	; 0x28
 801c944:	af02      	add	r7, sp, #8
 801c946:	60f8      	str	r0, [r7, #12]
 801c948:	4608      	mov	r0, r1
 801c94a:	4611      	mov	r1, r2
 801c94c:	461a      	mov	r2, r3
 801c94e:	4603      	mov	r3, r0
 801c950:	817b      	strh	r3, [r7, #10]
 801c952:	460b      	mov	r3, r1
 801c954:	813b      	strh	r3, [r7, #8]
 801c956:	4613      	mov	r3, r2
 801c958:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 801c95a:	2300      	movs	r3, #0
 801c95c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801c95e:	f7fe f843 	bl	801a9e8 <HAL_GetTick>
 801c962:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c964:	68fb      	ldr	r3, [r7, #12]
 801c966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c96a:	b2db      	uxtb	r3, r3
 801c96c:	2b20      	cmp	r3, #32
 801c96e:	f040 8145 	bne.w	801cbfc <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801c972:	4b9d      	ldr	r3, [pc, #628]	; (801cbe8 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 801c974:	681b      	ldr	r3, [r3, #0]
 801c976:	08db      	lsrs	r3, r3, #3
 801c978:	4a9c      	ldr	r2, [pc, #624]	; (801cbec <HAL_I2C_Mem_Write_DMA+0x2ac>)
 801c97a:	fba2 2303 	umull	r2, r3, r2, r3
 801c97e:	0a1a      	lsrs	r2, r3, #8
 801c980:	4613      	mov	r3, r2
 801c982:	009b      	lsls	r3, r3, #2
 801c984:	4413      	add	r3, r2
 801c986:	009a      	lsls	r2, r3, #2
 801c988:	4413      	add	r3, r2
 801c98a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 801c98c:	697b      	ldr	r3, [r7, #20]
 801c98e:	3b01      	subs	r3, #1
 801c990:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801c992:	697b      	ldr	r3, [r7, #20]
 801c994:	2b00      	cmp	r3, #0
 801c996:	d116      	bne.n	801c9c6 <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801c998:	68fb      	ldr	r3, [r7, #12]
 801c99a:	2200      	movs	r2, #0
 801c99c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801c99e:	68fb      	ldr	r3, [r7, #12]
 801c9a0:	2220      	movs	r2, #32
 801c9a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801c9a6:	68fb      	ldr	r3, [r7, #12]
 801c9a8:	2200      	movs	r2, #0
 801c9aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801c9ae:	68fb      	ldr	r3, [r7, #12]
 801c9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c9b2:	f043 0220 	orr.w	r2, r3, #32
 801c9b6:	68fb      	ldr	r3, [r7, #12]
 801c9b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c9ba:	68fb      	ldr	r3, [r7, #12]
 801c9bc:	2200      	movs	r2, #0
 801c9be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801c9c2:	2301      	movs	r3, #1
 801c9c4:	e11b      	b.n	801cbfe <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801c9c6:	68fb      	ldr	r3, [r7, #12]
 801c9c8:	681b      	ldr	r3, [r3, #0]
 801c9ca:	699b      	ldr	r3, [r3, #24]
 801c9cc:	f003 0302 	and.w	r3, r3, #2
 801c9d0:	2b02      	cmp	r3, #2
 801c9d2:	d0db      	beq.n	801c98c <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c9d4:	68fb      	ldr	r3, [r7, #12]
 801c9d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801c9da:	2b01      	cmp	r3, #1
 801c9dc:	d101      	bne.n	801c9e2 <HAL_I2C_Mem_Write_DMA+0xa2>
 801c9de:	2302      	movs	r3, #2
 801c9e0:	e10d      	b.n	801cbfe <HAL_I2C_Mem_Write_DMA+0x2be>
 801c9e2:	68fb      	ldr	r3, [r7, #12]
 801c9e4:	2201      	movs	r2, #1
 801c9e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801c9ea:	68fb      	ldr	r3, [r7, #12]
 801c9ec:	681b      	ldr	r3, [r3, #0]
 801c9ee:	681b      	ldr	r3, [r3, #0]
 801c9f0:	f003 0301 	and.w	r3, r3, #1
 801c9f4:	2b01      	cmp	r3, #1
 801c9f6:	d007      	beq.n	801ca08 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801c9f8:	68fb      	ldr	r3, [r7, #12]
 801c9fa:	681b      	ldr	r3, [r3, #0]
 801c9fc:	681a      	ldr	r2, [r3, #0]
 801c9fe:	68fb      	ldr	r3, [r7, #12]
 801ca00:	681b      	ldr	r3, [r3, #0]
 801ca02:	f042 0201 	orr.w	r2, r2, #1
 801ca06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801ca08:	68fb      	ldr	r3, [r7, #12]
 801ca0a:	681b      	ldr	r3, [r3, #0]
 801ca0c:	681a      	ldr	r2, [r3, #0]
 801ca0e:	68fb      	ldr	r3, [r7, #12]
 801ca10:	681b      	ldr	r3, [r3, #0]
 801ca12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801ca16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801ca18:	68fb      	ldr	r3, [r7, #12]
 801ca1a:	2221      	movs	r2, #33	; 0x21
 801ca1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801ca20:	68fb      	ldr	r3, [r7, #12]
 801ca22:	2240      	movs	r2, #64	; 0x40
 801ca24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801ca28:	68fb      	ldr	r3, [r7, #12]
 801ca2a:	2200      	movs	r2, #0
 801ca2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801ca2e:	68fb      	ldr	r3, [r7, #12]
 801ca30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ca32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801ca34:	68fb      	ldr	r3, [r7, #12]
 801ca36:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801ca38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801ca3a:	68fb      	ldr	r3, [r7, #12]
 801ca3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ca3e:	b29a      	uxth	r2, r3
 801ca40:	68fb      	ldr	r3, [r7, #12]
 801ca42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801ca44:	68fb      	ldr	r3, [r7, #12]
 801ca46:	4a6a      	ldr	r2, [pc, #424]	; (801cbf0 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 801ca48:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801ca4a:	897a      	ldrh	r2, [r7, #10]
 801ca4c:	68fb      	ldr	r3, [r7, #12]
 801ca4e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 801ca50:	893a      	ldrh	r2, [r7, #8]
 801ca52:	68fb      	ldr	r3, [r7, #12]
 801ca54:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 801ca56:	88fa      	ldrh	r2, [r7, #6]
 801ca58:	68fb      	ldr	r3, [r7, #12]
 801ca5a:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 801ca5c:	68fb      	ldr	r3, [r7, #12]
 801ca5e:	2200      	movs	r2, #0
 801ca60:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 801ca62:	68fb      	ldr	r3, [r7, #12]
 801ca64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	f000 80a9 	beq.w	801cbbe <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 801ca6c:	68fb      	ldr	r3, [r7, #12]
 801ca6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ca70:	2b00      	cmp	r3, #0
 801ca72:	d02a      	beq.n	801caca <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 801ca74:	68fb      	ldr	r3, [r7, #12]
 801ca76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ca78:	4a5e      	ldr	r2, [pc, #376]	; (801cbf4 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 801ca7a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801ca7c:	68fb      	ldr	r3, [r7, #12]
 801ca7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ca80:	4a5d      	ldr	r2, [pc, #372]	; (801cbf8 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 801ca82:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801ca84:	68fb      	ldr	r3, [r7, #12]
 801ca86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ca88:	2200      	movs	r2, #0
 801ca8a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 801ca8c:	68fb      	ldr	r3, [r7, #12]
 801ca8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ca90:	2200      	movs	r2, #0
 801ca92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 801ca94:	68fb      	ldr	r3, [r7, #12]
 801ca96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ca98:	2200      	movs	r2, #0
 801ca9a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 801ca9c:	68fb      	ldr	r3, [r7, #12]
 801ca9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801caa0:	2200      	movs	r2, #0
 801caa2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 801caa4:	68fb      	ldr	r3, [r7, #12]
 801caa6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801caa8:	68fb      	ldr	r3, [r7, #12]
 801caaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801caac:	4619      	mov	r1, r3
 801caae:	68fb      	ldr	r3, [r7, #12]
 801cab0:	681b      	ldr	r3, [r3, #0]
 801cab2:	3310      	adds	r3, #16
 801cab4:	461a      	mov	r2, r3
 801cab6:	68fb      	ldr	r3, [r7, #12]
 801cab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801caba:	f7fe fd95 	bl	801b5e8 <HAL_DMA_Start_IT>
 801cabe:	4603      	mov	r3, r0
 801cac0:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801cac2:	7efb      	ldrb	r3, [r7, #27]
 801cac4:	2b00      	cmp	r3, #0
 801cac6:	d166      	bne.n	801cb96 <HAL_I2C_Mem_Write_DMA+0x256>
 801cac8:	e013      	b.n	801caf2 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 801caca:	68fb      	ldr	r3, [r7, #12]
 801cacc:	2220      	movs	r2, #32
 801cace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801cad2:	68fb      	ldr	r3, [r7, #12]
 801cad4:	2200      	movs	r2, #0
 801cad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801cada:	68fb      	ldr	r3, [r7, #12]
 801cadc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cade:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801cae2:	68fb      	ldr	r3, [r7, #12]
 801cae4:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801cae6:	68fb      	ldr	r3, [r7, #12]
 801cae8:	2200      	movs	r2, #0
 801caea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801caee:	2301      	movs	r3, #1
 801caf0:	e085      	b.n	801cbfe <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801caf2:	88f8      	ldrh	r0, [r7, #6]
 801caf4:	893a      	ldrh	r2, [r7, #8]
 801caf6:	8979      	ldrh	r1, [r7, #10]
 801caf8:	69fb      	ldr	r3, [r7, #28]
 801cafa:	9301      	str	r3, [sp, #4]
 801cafc:	2323      	movs	r3, #35	; 0x23
 801cafe:	9300      	str	r3, [sp, #0]
 801cb00:	4603      	mov	r3, r0
 801cb02:	68f8      	ldr	r0, [r7, #12]
 801cb04:	f001 fdd2 	bl	801e6ac <I2C_RequestMemoryWrite>
 801cb08:	4603      	mov	r3, r0
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	d022      	beq.n	801cb54 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 801cb0e:	68fb      	ldr	r3, [r7, #12]
 801cb10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cb12:	4618      	mov	r0, r3
 801cb14:	f7fe fe30 	bl	801b778 <HAL_DMA_Abort_IT>
 801cb18:	4603      	mov	r3, r0
 801cb1a:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 801cb1c:	68fb      	ldr	r3, [r7, #12]
 801cb1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cb20:	2200      	movs	r2, #0
 801cb22:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801cb24:	68fb      	ldr	r3, [r7, #12]
 801cb26:	681b      	ldr	r3, [r3, #0]
 801cb28:	681a      	ldr	r2, [r3, #0]
 801cb2a:	68fb      	ldr	r3, [r7, #12]
 801cb2c:	681b      	ldr	r3, [r3, #0]
 801cb2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801cb32:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 801cb34:	68fb      	ldr	r3, [r7, #12]
 801cb36:	2200      	movs	r2, #0
 801cb38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 801cb3a:	68fb      	ldr	r3, [r7, #12]
 801cb3c:	2200      	movs	r2, #0
 801cb3e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 801cb40:	68fb      	ldr	r3, [r7, #12]
 801cb42:	681b      	ldr	r3, [r3, #0]
 801cb44:	681a      	ldr	r2, [r3, #0]
 801cb46:	68fb      	ldr	r3, [r7, #12]
 801cb48:	681b      	ldr	r3, [r3, #0]
 801cb4a:	f022 0201 	bic.w	r2, r2, #1
 801cb4e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 801cb50:	2301      	movs	r3, #1
 801cb52:	e054      	b.n	801cbfe <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801cb54:	2300      	movs	r3, #0
 801cb56:	613b      	str	r3, [r7, #16]
 801cb58:	68fb      	ldr	r3, [r7, #12]
 801cb5a:	681b      	ldr	r3, [r3, #0]
 801cb5c:	695b      	ldr	r3, [r3, #20]
 801cb5e:	613b      	str	r3, [r7, #16]
 801cb60:	68fb      	ldr	r3, [r7, #12]
 801cb62:	681b      	ldr	r3, [r3, #0]
 801cb64:	699b      	ldr	r3, [r3, #24]
 801cb66:	613b      	str	r3, [r7, #16]
 801cb68:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801cb6a:	68fb      	ldr	r3, [r7, #12]
 801cb6c:	2200      	movs	r2, #0
 801cb6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 801cb72:	68fb      	ldr	r3, [r7, #12]
 801cb74:	681b      	ldr	r3, [r3, #0]
 801cb76:	685a      	ldr	r2, [r3, #4]
 801cb78:	68fb      	ldr	r3, [r7, #12]
 801cb7a:	681b      	ldr	r3, [r3, #0]
 801cb7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801cb80:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801cb82:	68fb      	ldr	r3, [r7, #12]
 801cb84:	681b      	ldr	r3, [r3, #0]
 801cb86:	685a      	ldr	r2, [r3, #4]
 801cb88:	68fb      	ldr	r3, [r7, #12]
 801cb8a:	681b      	ldr	r3, [r3, #0]
 801cb8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801cb90:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 801cb92:	2300      	movs	r3, #0
 801cb94:	e033      	b.n	801cbfe <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801cb96:	68fb      	ldr	r3, [r7, #12]
 801cb98:	2220      	movs	r2, #32
 801cb9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801cb9e:	68fb      	ldr	r3, [r7, #12]
 801cba0:	2200      	movs	r2, #0
 801cba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801cba6:	68fb      	ldr	r3, [r7, #12]
 801cba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cbaa:	f043 0210 	orr.w	r2, r3, #16
 801cbae:	68fb      	ldr	r3, [r7, #12]
 801cbb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801cbb2:	68fb      	ldr	r3, [r7, #12]
 801cbb4:	2200      	movs	r2, #0
 801cbb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801cbba:	2301      	movs	r3, #1
 801cbbc:	e01f      	b.n	801cbfe <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 801cbbe:	68fb      	ldr	r3, [r7, #12]
 801cbc0:	2220      	movs	r2, #32
 801cbc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 801cbc6:	68fb      	ldr	r3, [r7, #12]
 801cbc8:	2200      	movs	r2, #0
 801cbca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 801cbce:	68fb      	ldr	r3, [r7, #12]
 801cbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cbd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801cbd6:	68fb      	ldr	r3, [r7, #12]
 801cbd8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801cbda:	68fb      	ldr	r3, [r7, #12]
 801cbdc:	2200      	movs	r2, #0
 801cbde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801cbe2:	2301      	movs	r3, #1
 801cbe4:	e00b      	b.n	801cbfe <HAL_I2C_Mem_Write_DMA+0x2be>
 801cbe6:	bf00      	nop
 801cbe8:	20000020 	.word	0x20000020
 801cbec:	14f8b589 	.word	0x14f8b589
 801cbf0:	ffff0000 	.word	0xffff0000
 801cbf4:	0801e9a9 	.word	0x0801e9a9
 801cbf8:	0801eb53 	.word	0x0801eb53
    }
  }
  else
  {
    return HAL_BUSY;
 801cbfc:	2302      	movs	r3, #2
  }
}
 801cbfe:	4618      	mov	r0, r3
 801cc00:	3720      	adds	r7, #32
 801cc02:	46bd      	mov	sp, r7
 801cc04:	bd80      	pop	{r7, pc}
 801cc06:	bf00      	nop

0801cc08 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801cc08:	b580      	push	{r7, lr}
 801cc0a:	b08c      	sub	sp, #48	; 0x30
 801cc0c:	af02      	add	r7, sp, #8
 801cc0e:	60f8      	str	r0, [r7, #12]
 801cc10:	4608      	mov	r0, r1
 801cc12:	4611      	mov	r1, r2
 801cc14:	461a      	mov	r2, r3
 801cc16:	4603      	mov	r3, r0
 801cc18:	817b      	strh	r3, [r7, #10]
 801cc1a:	460b      	mov	r3, r1
 801cc1c:	813b      	strh	r3, [r7, #8]
 801cc1e:	4613      	mov	r3, r2
 801cc20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801cc22:	f7fd fee1 	bl	801a9e8 <HAL_GetTick>
 801cc26:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 801cc28:	2300      	movs	r3, #0
 801cc2a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801cc2c:	68fb      	ldr	r3, [r7, #12]
 801cc2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cc32:	b2db      	uxtb	r3, r3
 801cc34:	2b20      	cmp	r3, #32
 801cc36:	f040 8176 	bne.w	801cf26 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801cc3a:	4b95      	ldr	r3, [pc, #596]	; (801ce90 <HAL_I2C_Mem_Read_DMA+0x288>)
 801cc3c:	681b      	ldr	r3, [r3, #0]
 801cc3e:	08db      	lsrs	r3, r3, #3
 801cc40:	4a94      	ldr	r2, [pc, #592]	; (801ce94 <HAL_I2C_Mem_Read_DMA+0x28c>)
 801cc42:	fba2 2303 	umull	r2, r3, r2, r3
 801cc46:	0a1a      	lsrs	r2, r3, #8
 801cc48:	4613      	mov	r3, r2
 801cc4a:	009b      	lsls	r3, r3, #2
 801cc4c:	4413      	add	r3, r2
 801cc4e:	009a      	lsls	r2, r3, #2
 801cc50:	4413      	add	r3, r2
 801cc52:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 801cc54:	69fb      	ldr	r3, [r7, #28]
 801cc56:	3b01      	subs	r3, #1
 801cc58:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 801cc5a:	69fb      	ldr	r3, [r7, #28]
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	d116      	bne.n	801cc8e <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801cc60:	68fb      	ldr	r3, [r7, #12]
 801cc62:	2200      	movs	r2, #0
 801cc64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801cc66:	68fb      	ldr	r3, [r7, #12]
 801cc68:	2220      	movs	r2, #32
 801cc6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801cc6e:	68fb      	ldr	r3, [r7, #12]
 801cc70:	2200      	movs	r2, #0
 801cc72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801cc76:	68fb      	ldr	r3, [r7, #12]
 801cc78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cc7a:	f043 0220 	orr.w	r2, r3, #32
 801cc7e:	68fb      	ldr	r3, [r7, #12]
 801cc80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801cc82:	68fb      	ldr	r3, [r7, #12]
 801cc84:	2200      	movs	r2, #0
 801cc86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801cc8a:	2301      	movs	r3, #1
 801cc8c:	e14c      	b.n	801cf28 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801cc8e:	68fb      	ldr	r3, [r7, #12]
 801cc90:	681b      	ldr	r3, [r3, #0]
 801cc92:	699b      	ldr	r3, [r3, #24]
 801cc94:	f003 0302 	and.w	r3, r3, #2
 801cc98:	2b02      	cmp	r3, #2
 801cc9a:	d0db      	beq.n	801cc54 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801cc9c:	68fb      	ldr	r3, [r7, #12]
 801cc9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801cca2:	2b01      	cmp	r3, #1
 801cca4:	d101      	bne.n	801ccaa <HAL_I2C_Mem_Read_DMA+0xa2>
 801cca6:	2302      	movs	r3, #2
 801cca8:	e13e      	b.n	801cf28 <HAL_I2C_Mem_Read_DMA+0x320>
 801ccaa:	68fb      	ldr	r3, [r7, #12]
 801ccac:	2201      	movs	r2, #1
 801ccae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801ccb2:	68fb      	ldr	r3, [r7, #12]
 801ccb4:	681b      	ldr	r3, [r3, #0]
 801ccb6:	681b      	ldr	r3, [r3, #0]
 801ccb8:	f003 0301 	and.w	r3, r3, #1
 801ccbc:	2b01      	cmp	r3, #1
 801ccbe:	d007      	beq.n	801ccd0 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801ccc0:	68fb      	ldr	r3, [r7, #12]
 801ccc2:	681b      	ldr	r3, [r3, #0]
 801ccc4:	681a      	ldr	r2, [r3, #0]
 801ccc6:	68fb      	ldr	r3, [r7, #12]
 801ccc8:	681b      	ldr	r3, [r3, #0]
 801ccca:	f042 0201 	orr.w	r2, r2, #1
 801ccce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801ccd0:	68fb      	ldr	r3, [r7, #12]
 801ccd2:	681b      	ldr	r3, [r3, #0]
 801ccd4:	681a      	ldr	r2, [r3, #0]
 801ccd6:	68fb      	ldr	r3, [r7, #12]
 801ccd8:	681b      	ldr	r3, [r3, #0]
 801ccda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801ccde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801cce0:	68fb      	ldr	r3, [r7, #12]
 801cce2:	2222      	movs	r2, #34	; 0x22
 801cce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801cce8:	68fb      	ldr	r3, [r7, #12]
 801ccea:	2240      	movs	r2, #64	; 0x40
 801ccec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801ccf0:	68fb      	ldr	r3, [r7, #12]
 801ccf2:	2200      	movs	r2, #0
 801ccf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801ccf6:	68fb      	ldr	r3, [r7, #12]
 801ccf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ccfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801ccfc:	68fb      	ldr	r3, [r7, #12]
 801ccfe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801cd00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801cd02:	68fb      	ldr	r3, [r7, #12]
 801cd04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801cd06:	b29a      	uxth	r2, r3
 801cd08:	68fb      	ldr	r3, [r7, #12]
 801cd0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801cd0c:	68fb      	ldr	r3, [r7, #12]
 801cd0e:	4a62      	ldr	r2, [pc, #392]	; (801ce98 <HAL_I2C_Mem_Read_DMA+0x290>)
 801cd10:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801cd12:	897a      	ldrh	r2, [r7, #10]
 801cd14:	68fb      	ldr	r3, [r7, #12]
 801cd16:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 801cd18:	893a      	ldrh	r2, [r7, #8]
 801cd1a:	68fb      	ldr	r3, [r7, #12]
 801cd1c:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 801cd1e:	88fa      	ldrh	r2, [r7, #6]
 801cd20:	68fb      	ldr	r3, [r7, #12]
 801cd22:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 801cd24:	68fb      	ldr	r3, [r7, #12]
 801cd26:	2200      	movs	r2, #0
 801cd28:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 801cd2a:	68fb      	ldr	r3, [r7, #12]
 801cd2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	f000 80cc 	beq.w	801cecc <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 801cd34:	68fb      	ldr	r3, [r7, #12]
 801cd36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cd38:	2b00      	cmp	r3, #0
 801cd3a:	d02d      	beq.n	801cd98 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 801cd3c:	68fb      	ldr	r3, [r7, #12]
 801cd3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cd40:	4a56      	ldr	r2, [pc, #344]	; (801ce9c <HAL_I2C_Mem_Read_DMA+0x294>)
 801cd42:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801cd44:	68fb      	ldr	r3, [r7, #12]
 801cd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cd48:	4a55      	ldr	r2, [pc, #340]	; (801cea0 <HAL_I2C_Mem_Read_DMA+0x298>)
 801cd4a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801cd4c:	68fb      	ldr	r3, [r7, #12]
 801cd4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cd50:	2200      	movs	r2, #0
 801cd52:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 801cd54:	68fb      	ldr	r3, [r7, #12]
 801cd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cd58:	2200      	movs	r2, #0
 801cd5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 801cd5c:	68fb      	ldr	r3, [r7, #12]
 801cd5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cd60:	2200      	movs	r2, #0
 801cd62:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 801cd64:	68fb      	ldr	r3, [r7, #12]
 801cd66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cd68:	2200      	movs	r2, #0
 801cd6a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 801cd6c:	68fb      	ldr	r3, [r7, #12]
 801cd6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801cd70:	68fb      	ldr	r3, [r7, #12]
 801cd72:	681b      	ldr	r3, [r3, #0]
 801cd74:	3310      	adds	r3, #16
 801cd76:	4619      	mov	r1, r3
 801cd78:	68fb      	ldr	r3, [r7, #12]
 801cd7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd7c:	461a      	mov	r2, r3
 801cd7e:	68fb      	ldr	r3, [r7, #12]
 801cd80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cd82:	f7fe fc31 	bl	801b5e8 <HAL_DMA_Start_IT>
 801cd86:	4603      	mov	r3, r0
 801cd88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801cd8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801cd90:	2b00      	cmp	r3, #0
 801cd92:	f040 8087 	bne.w	801cea4 <HAL_I2C_Mem_Read_DMA+0x29c>
 801cd96:	e013      	b.n	801cdc0 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 801cd98:	68fb      	ldr	r3, [r7, #12]
 801cd9a:	2220      	movs	r2, #32
 801cd9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801cda0:	68fb      	ldr	r3, [r7, #12]
 801cda2:	2200      	movs	r2, #0
 801cda4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801cda8:	68fb      	ldr	r3, [r7, #12]
 801cdaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cdac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801cdb0:	68fb      	ldr	r3, [r7, #12]
 801cdb2:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801cdb4:	68fb      	ldr	r3, [r7, #12]
 801cdb6:	2200      	movs	r2, #0
 801cdb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801cdbc:	2301      	movs	r3, #1
 801cdbe:	e0b3      	b.n	801cf28 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801cdc0:	88f8      	ldrh	r0, [r7, #6]
 801cdc2:	893a      	ldrh	r2, [r7, #8]
 801cdc4:	8979      	ldrh	r1, [r7, #10]
 801cdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdc8:	9301      	str	r3, [sp, #4]
 801cdca:	2323      	movs	r3, #35	; 0x23
 801cdcc:	9300      	str	r3, [sp, #0]
 801cdce:	4603      	mov	r3, r0
 801cdd0:	68f8      	ldr	r0, [r7, #12]
 801cdd2:	f001 fd01 	bl	801e7d8 <I2C_RequestMemoryRead>
 801cdd6:	4603      	mov	r3, r0
 801cdd8:	2b00      	cmp	r3, #0
 801cdda:	d023      	beq.n	801ce24 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 801cddc:	68fb      	ldr	r3, [r7, #12]
 801cdde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cde0:	4618      	mov	r0, r3
 801cde2:	f7fe fcc9 	bl	801b778 <HAL_DMA_Abort_IT>
 801cde6:	4603      	mov	r3, r0
 801cde8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 801cdec:	68fb      	ldr	r3, [r7, #12]
 801cdee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cdf0:	2200      	movs	r2, #0
 801cdf2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801cdf4:	68fb      	ldr	r3, [r7, #12]
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	681a      	ldr	r2, [r3, #0]
 801cdfa:	68fb      	ldr	r3, [r7, #12]
 801cdfc:	681b      	ldr	r3, [r3, #0]
 801cdfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ce02:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 801ce04:	68fb      	ldr	r3, [r7, #12]
 801ce06:	2200      	movs	r2, #0
 801ce08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 801ce0a:	68fb      	ldr	r3, [r7, #12]
 801ce0c:	2200      	movs	r2, #0
 801ce0e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 801ce10:	68fb      	ldr	r3, [r7, #12]
 801ce12:	681b      	ldr	r3, [r3, #0]
 801ce14:	681a      	ldr	r2, [r3, #0]
 801ce16:	68fb      	ldr	r3, [r7, #12]
 801ce18:	681b      	ldr	r3, [r3, #0]
 801ce1a:	f022 0201 	bic.w	r2, r2, #1
 801ce1e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 801ce20:	2301      	movs	r3, #1
 801ce22:	e081      	b.n	801cf28 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 801ce24:	68fb      	ldr	r3, [r7, #12]
 801ce26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ce28:	2b01      	cmp	r3, #1
 801ce2a:	d108      	bne.n	801ce3e <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ce2c:	68fb      	ldr	r3, [r7, #12]
 801ce2e:	681b      	ldr	r3, [r3, #0]
 801ce30:	681a      	ldr	r2, [r3, #0]
 801ce32:	68fb      	ldr	r3, [r7, #12]
 801ce34:	681b      	ldr	r3, [r3, #0]
 801ce36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ce3a:	601a      	str	r2, [r3, #0]
 801ce3c:	e007      	b.n	801ce4e <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801ce3e:	68fb      	ldr	r3, [r7, #12]
 801ce40:	681b      	ldr	r3, [r3, #0]
 801ce42:	685a      	ldr	r2, [r3, #4]
 801ce44:	68fb      	ldr	r3, [r7, #12]
 801ce46:	681b      	ldr	r3, [r3, #0]
 801ce48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801ce4c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ce4e:	2300      	movs	r3, #0
 801ce50:	61bb      	str	r3, [r7, #24]
 801ce52:	68fb      	ldr	r3, [r7, #12]
 801ce54:	681b      	ldr	r3, [r3, #0]
 801ce56:	695b      	ldr	r3, [r3, #20]
 801ce58:	61bb      	str	r3, [r7, #24]
 801ce5a:	68fb      	ldr	r3, [r7, #12]
 801ce5c:	681b      	ldr	r3, [r3, #0]
 801ce5e:	699b      	ldr	r3, [r3, #24]
 801ce60:	61bb      	str	r3, [r7, #24]
 801ce62:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ce64:	68fb      	ldr	r3, [r7, #12]
 801ce66:	2200      	movs	r2, #0
 801ce68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 801ce6c:	68fb      	ldr	r3, [r7, #12]
 801ce6e:	681b      	ldr	r3, [r3, #0]
 801ce70:	685a      	ldr	r2, [r3, #4]
 801ce72:	68fb      	ldr	r3, [r7, #12]
 801ce74:	681b      	ldr	r3, [r3, #0]
 801ce76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ce7a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 801ce7c:	68fb      	ldr	r3, [r7, #12]
 801ce7e:	681b      	ldr	r3, [r3, #0]
 801ce80:	685a      	ldr	r2, [r3, #4]
 801ce82:	68fb      	ldr	r3, [r7, #12]
 801ce84:	681b      	ldr	r3, [r3, #0]
 801ce86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801ce8a:	605a      	str	r2, [r3, #4]
 801ce8c:	e049      	b.n	801cf22 <HAL_I2C_Mem_Read_DMA+0x31a>
 801ce8e:	bf00      	nop
 801ce90:	20000020 	.word	0x20000020
 801ce94:	14f8b589 	.word	0x14f8b589
 801ce98:	ffff0000 	.word	0xffff0000
 801ce9c:	0801e9a9 	.word	0x0801e9a9
 801cea0:	0801eb53 	.word	0x0801eb53
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801cea4:	68fb      	ldr	r3, [r7, #12]
 801cea6:	2220      	movs	r2, #32
 801cea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801ceac:	68fb      	ldr	r3, [r7, #12]
 801ceae:	2200      	movs	r2, #0
 801ceb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801ceb4:	68fb      	ldr	r3, [r7, #12]
 801ceb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ceb8:	f043 0210 	orr.w	r2, r3, #16
 801cebc:	68fb      	ldr	r3, [r7, #12]
 801cebe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801cec0:	68fb      	ldr	r3, [r7, #12]
 801cec2:	2200      	movs	r2, #0
 801cec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801cec8:	2301      	movs	r3, #1
 801ceca:	e02d      	b.n	801cf28 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801cecc:	88f8      	ldrh	r0, [r7, #6]
 801cece:	893a      	ldrh	r2, [r7, #8]
 801ced0:	8979      	ldrh	r1, [r7, #10]
 801ced2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ced4:	9301      	str	r3, [sp, #4]
 801ced6:	2323      	movs	r3, #35	; 0x23
 801ced8:	9300      	str	r3, [sp, #0]
 801ceda:	4603      	mov	r3, r0
 801cedc:	68f8      	ldr	r0, [r7, #12]
 801cede:	f001 fc7b 	bl	801e7d8 <I2C_RequestMemoryRead>
 801cee2:	4603      	mov	r3, r0
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d001      	beq.n	801ceec <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 801cee8:	2301      	movs	r3, #1
 801ceea:	e01d      	b.n	801cf28 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ceec:	2300      	movs	r3, #0
 801ceee:	617b      	str	r3, [r7, #20]
 801cef0:	68fb      	ldr	r3, [r7, #12]
 801cef2:	681b      	ldr	r3, [r3, #0]
 801cef4:	695b      	ldr	r3, [r3, #20]
 801cef6:	617b      	str	r3, [r7, #20]
 801cef8:	68fb      	ldr	r3, [r7, #12]
 801cefa:	681b      	ldr	r3, [r3, #0]
 801cefc:	699b      	ldr	r3, [r3, #24]
 801cefe:	617b      	str	r3, [r7, #20]
 801cf00:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801cf02:	68fb      	ldr	r3, [r7, #12]
 801cf04:	681b      	ldr	r3, [r3, #0]
 801cf06:	681a      	ldr	r2, [r3, #0]
 801cf08:	68fb      	ldr	r3, [r7, #12]
 801cf0a:	681b      	ldr	r3, [r3, #0]
 801cf0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801cf10:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 801cf12:	68fb      	ldr	r3, [r7, #12]
 801cf14:	2220      	movs	r2, #32
 801cf16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801cf1a:	68fb      	ldr	r3, [r7, #12]
 801cf1c:	2200      	movs	r2, #0
 801cf1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 801cf22:	2300      	movs	r3, #0
 801cf24:	e000      	b.n	801cf28 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 801cf26:	2302      	movs	r3, #2
  }
}
 801cf28:	4618      	mov	r0, r3
 801cf2a:	3728      	adds	r7, #40	; 0x28
 801cf2c:	46bd      	mov	sp, r7
 801cf2e:	bd80      	pop	{r7, pc}

0801cf30 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801cf30:	b580      	push	{r7, lr}
 801cf32:	b088      	sub	sp, #32
 801cf34:	af00      	add	r7, sp, #0
 801cf36:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 801cf38:	2300      	movs	r3, #0
 801cf3a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	681b      	ldr	r3, [r3, #0]
 801cf40:	685b      	ldr	r3, [r3, #4]
 801cf42:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf48:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801cf4a:	687b      	ldr	r3, [r7, #4]
 801cf4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801cf50:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cf58:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801cf5a:	7bfb      	ldrb	r3, [r7, #15]
 801cf5c:	2b10      	cmp	r3, #16
 801cf5e:	d003      	beq.n	801cf68 <HAL_I2C_EV_IRQHandler+0x38>
 801cf60:	7bfb      	ldrb	r3, [r7, #15]
 801cf62:	2b40      	cmp	r3, #64	; 0x40
 801cf64:	f040 80c1 	bne.w	801d0ea <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	681b      	ldr	r3, [r3, #0]
 801cf6c:	699b      	ldr	r3, [r3, #24]
 801cf6e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801cf70:	687b      	ldr	r3, [r7, #4]
 801cf72:	681b      	ldr	r3, [r3, #0]
 801cf74:	695b      	ldr	r3, [r3, #20]
 801cf76:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 801cf78:	69fb      	ldr	r3, [r7, #28]
 801cf7a:	f003 0301 	and.w	r3, r3, #1
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	d10d      	bne.n	801cf9e <HAL_I2C_EV_IRQHandler+0x6e>
 801cf82:	693b      	ldr	r3, [r7, #16]
 801cf84:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801cf88:	d003      	beq.n	801cf92 <HAL_I2C_EV_IRQHandler+0x62>
 801cf8a:	693b      	ldr	r3, [r7, #16]
 801cf8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801cf90:	d101      	bne.n	801cf96 <HAL_I2C_EV_IRQHandler+0x66>
 801cf92:	2301      	movs	r3, #1
 801cf94:	e000      	b.n	801cf98 <HAL_I2C_EV_IRQHandler+0x68>
 801cf96:	2300      	movs	r3, #0
 801cf98:	2b01      	cmp	r3, #1
 801cf9a:	f000 8132 	beq.w	801d202 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801cf9e:	69fb      	ldr	r3, [r7, #28]
 801cfa0:	f003 0301 	and.w	r3, r3, #1
 801cfa4:	2b00      	cmp	r3, #0
 801cfa6:	d00c      	beq.n	801cfc2 <HAL_I2C_EV_IRQHandler+0x92>
 801cfa8:	697b      	ldr	r3, [r7, #20]
 801cfaa:	0a5b      	lsrs	r3, r3, #9
 801cfac:	f003 0301 	and.w	r3, r3, #1
 801cfb0:	2b00      	cmp	r3, #0
 801cfb2:	d006      	beq.n	801cfc2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 801cfb4:	6878      	ldr	r0, [r7, #4]
 801cfb6:	f002 f82a 	bl	801f00e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 801cfba:	6878      	ldr	r0, [r7, #4]
 801cfbc:	f000 fd5b 	bl	801da76 <I2C_Master_SB>
 801cfc0:	e092      	b.n	801d0e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801cfc2:	69fb      	ldr	r3, [r7, #28]
 801cfc4:	08db      	lsrs	r3, r3, #3
 801cfc6:	f003 0301 	and.w	r3, r3, #1
 801cfca:	2b00      	cmp	r3, #0
 801cfcc:	d009      	beq.n	801cfe2 <HAL_I2C_EV_IRQHandler+0xb2>
 801cfce:	697b      	ldr	r3, [r7, #20]
 801cfd0:	0a5b      	lsrs	r3, r3, #9
 801cfd2:	f003 0301 	and.w	r3, r3, #1
 801cfd6:	2b00      	cmp	r3, #0
 801cfd8:	d003      	beq.n	801cfe2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 801cfda:	6878      	ldr	r0, [r7, #4]
 801cfdc:	f000 fdd1 	bl	801db82 <I2C_Master_ADD10>
 801cfe0:	e082      	b.n	801d0e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801cfe2:	69fb      	ldr	r3, [r7, #28]
 801cfe4:	085b      	lsrs	r3, r3, #1
 801cfe6:	f003 0301 	and.w	r3, r3, #1
 801cfea:	2b00      	cmp	r3, #0
 801cfec:	d009      	beq.n	801d002 <HAL_I2C_EV_IRQHandler+0xd2>
 801cfee:	697b      	ldr	r3, [r7, #20]
 801cff0:	0a5b      	lsrs	r3, r3, #9
 801cff2:	f003 0301 	and.w	r3, r3, #1
 801cff6:	2b00      	cmp	r3, #0
 801cff8:	d003      	beq.n	801d002 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 801cffa:	6878      	ldr	r0, [r7, #4]
 801cffc:	f000 fdeb 	bl	801dbd6 <I2C_Master_ADDR>
 801d000:	e072      	b.n	801d0e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 801d002:	69bb      	ldr	r3, [r7, #24]
 801d004:	089b      	lsrs	r3, r3, #2
 801d006:	f003 0301 	and.w	r3, r3, #1
 801d00a:	2b00      	cmp	r3, #0
 801d00c:	d03b      	beq.n	801d086 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801d00e:	687b      	ldr	r3, [r7, #4]
 801d010:	681b      	ldr	r3, [r3, #0]
 801d012:	685b      	ldr	r3, [r3, #4]
 801d014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801d01c:	f000 80f3 	beq.w	801d206 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801d020:	69fb      	ldr	r3, [r7, #28]
 801d022:	09db      	lsrs	r3, r3, #7
 801d024:	f003 0301 	and.w	r3, r3, #1
 801d028:	2b00      	cmp	r3, #0
 801d02a:	d00f      	beq.n	801d04c <HAL_I2C_EV_IRQHandler+0x11c>
 801d02c:	697b      	ldr	r3, [r7, #20]
 801d02e:	0a9b      	lsrs	r3, r3, #10
 801d030:	f003 0301 	and.w	r3, r3, #1
 801d034:	2b00      	cmp	r3, #0
 801d036:	d009      	beq.n	801d04c <HAL_I2C_EV_IRQHandler+0x11c>
 801d038:	69fb      	ldr	r3, [r7, #28]
 801d03a:	089b      	lsrs	r3, r3, #2
 801d03c:	f003 0301 	and.w	r3, r3, #1
 801d040:	2b00      	cmp	r3, #0
 801d042:	d103      	bne.n	801d04c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 801d044:	6878      	ldr	r0, [r7, #4]
 801d046:	f000 f9cb 	bl	801d3e0 <I2C_MasterTransmit_TXE>
 801d04a:	e04d      	b.n	801d0e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d04c:	69fb      	ldr	r3, [r7, #28]
 801d04e:	089b      	lsrs	r3, r3, #2
 801d050:	f003 0301 	and.w	r3, r3, #1
 801d054:	2b00      	cmp	r3, #0
 801d056:	f000 80d6 	beq.w	801d206 <HAL_I2C_EV_IRQHandler+0x2d6>
 801d05a:	697b      	ldr	r3, [r7, #20]
 801d05c:	0a5b      	lsrs	r3, r3, #9
 801d05e:	f003 0301 	and.w	r3, r3, #1
 801d062:	2b00      	cmp	r3, #0
 801d064:	f000 80cf 	beq.w	801d206 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801d068:	7bbb      	ldrb	r3, [r7, #14]
 801d06a:	2b21      	cmp	r3, #33	; 0x21
 801d06c:	d103      	bne.n	801d076 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 801d06e:	6878      	ldr	r0, [r7, #4]
 801d070:	f000 fa52 	bl	801d518 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d074:	e0c7      	b.n	801d206 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 801d076:	7bfb      	ldrb	r3, [r7, #15]
 801d078:	2b40      	cmp	r3, #64	; 0x40
 801d07a:	f040 80c4 	bne.w	801d206 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 801d07e:	6878      	ldr	r0, [r7, #4]
 801d080:	f000 fac0 	bl	801d604 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d084:	e0bf      	b.n	801d206 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801d086:	687b      	ldr	r3, [r7, #4]
 801d088:	681b      	ldr	r3, [r3, #0]
 801d08a:	685b      	ldr	r3, [r3, #4]
 801d08c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d090:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801d094:	f000 80b7 	beq.w	801d206 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801d098:	69fb      	ldr	r3, [r7, #28]
 801d09a:	099b      	lsrs	r3, r3, #6
 801d09c:	f003 0301 	and.w	r3, r3, #1
 801d0a0:	2b00      	cmp	r3, #0
 801d0a2:	d00f      	beq.n	801d0c4 <HAL_I2C_EV_IRQHandler+0x194>
 801d0a4:	697b      	ldr	r3, [r7, #20]
 801d0a6:	0a9b      	lsrs	r3, r3, #10
 801d0a8:	f003 0301 	and.w	r3, r3, #1
 801d0ac:	2b00      	cmp	r3, #0
 801d0ae:	d009      	beq.n	801d0c4 <HAL_I2C_EV_IRQHandler+0x194>
 801d0b0:	69fb      	ldr	r3, [r7, #28]
 801d0b2:	089b      	lsrs	r3, r3, #2
 801d0b4:	f003 0301 	and.w	r3, r3, #1
 801d0b8:	2b00      	cmp	r3, #0
 801d0ba:	d103      	bne.n	801d0c4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 801d0bc:	6878      	ldr	r0, [r7, #4]
 801d0be:	f000 fb35 	bl	801d72c <I2C_MasterReceive_RXNE>
 801d0c2:	e011      	b.n	801d0e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d0c4:	69fb      	ldr	r3, [r7, #28]
 801d0c6:	089b      	lsrs	r3, r3, #2
 801d0c8:	f003 0301 	and.w	r3, r3, #1
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	f000 809a 	beq.w	801d206 <HAL_I2C_EV_IRQHandler+0x2d6>
 801d0d2:	697b      	ldr	r3, [r7, #20]
 801d0d4:	0a5b      	lsrs	r3, r3, #9
 801d0d6:	f003 0301 	and.w	r3, r3, #1
 801d0da:	2b00      	cmp	r3, #0
 801d0dc:	f000 8093 	beq.w	801d206 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 801d0e0:	6878      	ldr	r0, [r7, #4]
 801d0e2:	f000 fbde 	bl	801d8a2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d0e6:	e08e      	b.n	801d206 <HAL_I2C_EV_IRQHandler+0x2d6>
 801d0e8:	e08d      	b.n	801d206 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d0ee:	2b00      	cmp	r3, #0
 801d0f0:	d004      	beq.n	801d0fc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	681b      	ldr	r3, [r3, #0]
 801d0f6:	695b      	ldr	r3, [r3, #20]
 801d0f8:	61fb      	str	r3, [r7, #28]
 801d0fa:	e007      	b.n	801d10c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801d0fc:	687b      	ldr	r3, [r7, #4]
 801d0fe:	681b      	ldr	r3, [r3, #0]
 801d100:	699b      	ldr	r3, [r3, #24]
 801d102:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	681b      	ldr	r3, [r3, #0]
 801d108:	695b      	ldr	r3, [r3, #20]
 801d10a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d10c:	69fb      	ldr	r3, [r7, #28]
 801d10e:	085b      	lsrs	r3, r3, #1
 801d110:	f003 0301 	and.w	r3, r3, #1
 801d114:	2b00      	cmp	r3, #0
 801d116:	d012      	beq.n	801d13e <HAL_I2C_EV_IRQHandler+0x20e>
 801d118:	697b      	ldr	r3, [r7, #20]
 801d11a:	0a5b      	lsrs	r3, r3, #9
 801d11c:	f003 0301 	and.w	r3, r3, #1
 801d120:	2b00      	cmp	r3, #0
 801d122:	d00c      	beq.n	801d13e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d128:	2b00      	cmp	r3, #0
 801d12a:	d003      	beq.n	801d134 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801d12c:	687b      	ldr	r3, [r7, #4]
 801d12e:	681b      	ldr	r3, [r3, #0]
 801d130:	699b      	ldr	r3, [r3, #24]
 801d132:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 801d134:	69b9      	ldr	r1, [r7, #24]
 801d136:	6878      	ldr	r0, [r7, #4]
 801d138:	f000 ff9c 	bl	801e074 <I2C_Slave_ADDR>
 801d13c:	e066      	b.n	801d20c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d13e:	69fb      	ldr	r3, [r7, #28]
 801d140:	091b      	lsrs	r3, r3, #4
 801d142:	f003 0301 	and.w	r3, r3, #1
 801d146:	2b00      	cmp	r3, #0
 801d148:	d009      	beq.n	801d15e <HAL_I2C_EV_IRQHandler+0x22e>
 801d14a:	697b      	ldr	r3, [r7, #20]
 801d14c:	0a5b      	lsrs	r3, r3, #9
 801d14e:	f003 0301 	and.w	r3, r3, #1
 801d152:	2b00      	cmp	r3, #0
 801d154:	d003      	beq.n	801d15e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 801d156:	6878      	ldr	r0, [r7, #4]
 801d158:	f000 ffd6 	bl	801e108 <I2C_Slave_STOPF>
 801d15c:	e056      	b.n	801d20c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801d15e:	7bbb      	ldrb	r3, [r7, #14]
 801d160:	2b21      	cmp	r3, #33	; 0x21
 801d162:	d002      	beq.n	801d16a <HAL_I2C_EV_IRQHandler+0x23a>
 801d164:	7bbb      	ldrb	r3, [r7, #14]
 801d166:	2b29      	cmp	r3, #41	; 0x29
 801d168:	d125      	bne.n	801d1b6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801d16a:	69fb      	ldr	r3, [r7, #28]
 801d16c:	09db      	lsrs	r3, r3, #7
 801d16e:	f003 0301 	and.w	r3, r3, #1
 801d172:	2b00      	cmp	r3, #0
 801d174:	d00f      	beq.n	801d196 <HAL_I2C_EV_IRQHandler+0x266>
 801d176:	697b      	ldr	r3, [r7, #20]
 801d178:	0a9b      	lsrs	r3, r3, #10
 801d17a:	f003 0301 	and.w	r3, r3, #1
 801d17e:	2b00      	cmp	r3, #0
 801d180:	d009      	beq.n	801d196 <HAL_I2C_EV_IRQHandler+0x266>
 801d182:	69fb      	ldr	r3, [r7, #28]
 801d184:	089b      	lsrs	r3, r3, #2
 801d186:	f003 0301 	and.w	r3, r3, #1
 801d18a:	2b00      	cmp	r3, #0
 801d18c:	d103      	bne.n	801d196 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 801d18e:	6878      	ldr	r0, [r7, #4]
 801d190:	f000 feb2 	bl	801def8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801d194:	e039      	b.n	801d20a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d196:	69fb      	ldr	r3, [r7, #28]
 801d198:	089b      	lsrs	r3, r3, #2
 801d19a:	f003 0301 	and.w	r3, r3, #1
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	d033      	beq.n	801d20a <HAL_I2C_EV_IRQHandler+0x2da>
 801d1a2:	697b      	ldr	r3, [r7, #20]
 801d1a4:	0a5b      	lsrs	r3, r3, #9
 801d1a6:	f003 0301 	and.w	r3, r3, #1
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	d02d      	beq.n	801d20a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 801d1ae:	6878      	ldr	r0, [r7, #4]
 801d1b0:	f000 fedf 	bl	801df72 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801d1b4:	e029      	b.n	801d20a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801d1b6:	69fb      	ldr	r3, [r7, #28]
 801d1b8:	099b      	lsrs	r3, r3, #6
 801d1ba:	f003 0301 	and.w	r3, r3, #1
 801d1be:	2b00      	cmp	r3, #0
 801d1c0:	d00f      	beq.n	801d1e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 801d1c2:	697b      	ldr	r3, [r7, #20]
 801d1c4:	0a9b      	lsrs	r3, r3, #10
 801d1c6:	f003 0301 	and.w	r3, r3, #1
 801d1ca:	2b00      	cmp	r3, #0
 801d1cc:	d009      	beq.n	801d1e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 801d1ce:	69fb      	ldr	r3, [r7, #28]
 801d1d0:	089b      	lsrs	r3, r3, #2
 801d1d2:	f003 0301 	and.w	r3, r3, #1
 801d1d6:	2b00      	cmp	r3, #0
 801d1d8:	d103      	bne.n	801d1e2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 801d1da:	6878      	ldr	r0, [r7, #4]
 801d1dc:	f000 feea 	bl	801dfb4 <I2C_SlaveReceive_RXNE>
 801d1e0:	e014      	b.n	801d20c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d1e2:	69fb      	ldr	r3, [r7, #28]
 801d1e4:	089b      	lsrs	r3, r3, #2
 801d1e6:	f003 0301 	and.w	r3, r3, #1
 801d1ea:	2b00      	cmp	r3, #0
 801d1ec:	d00e      	beq.n	801d20c <HAL_I2C_EV_IRQHandler+0x2dc>
 801d1ee:	697b      	ldr	r3, [r7, #20]
 801d1f0:	0a5b      	lsrs	r3, r3, #9
 801d1f2:	f003 0301 	and.w	r3, r3, #1
 801d1f6:	2b00      	cmp	r3, #0
 801d1f8:	d008      	beq.n	801d20c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 801d1fa:	6878      	ldr	r0, [r7, #4]
 801d1fc:	f000 ff18 	bl	801e030 <I2C_SlaveReceive_BTF>
 801d200:	e004      	b.n	801d20c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 801d202:	bf00      	nop
 801d204:	e002      	b.n	801d20c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d206:	bf00      	nop
 801d208:	e000      	b.n	801d20c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801d20a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 801d20c:	3720      	adds	r7, #32
 801d20e:	46bd      	mov	sp, r7
 801d210:	bd80      	pop	{r7, pc}

0801d212 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801d212:	b580      	push	{r7, lr}
 801d214:	b08a      	sub	sp, #40	; 0x28
 801d216:	af00      	add	r7, sp, #0
 801d218:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 801d21a:	687b      	ldr	r3, [r7, #4]
 801d21c:	681b      	ldr	r3, [r3, #0]
 801d21e:	695b      	ldr	r3, [r3, #20]
 801d220:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 801d222:	687b      	ldr	r3, [r7, #4]
 801d224:	681b      	ldr	r3, [r3, #0]
 801d226:	685b      	ldr	r3, [r3, #4]
 801d228:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 801d22a:	2300      	movs	r3, #0
 801d22c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801d234:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801d236:	6a3b      	ldr	r3, [r7, #32]
 801d238:	0a1b      	lsrs	r3, r3, #8
 801d23a:	f003 0301 	and.w	r3, r3, #1
 801d23e:	2b00      	cmp	r3, #0
 801d240:	d00e      	beq.n	801d260 <HAL_I2C_ER_IRQHandler+0x4e>
 801d242:	69fb      	ldr	r3, [r7, #28]
 801d244:	0a1b      	lsrs	r3, r3, #8
 801d246:	f003 0301 	and.w	r3, r3, #1
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	d008      	beq.n	801d260 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 801d24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d250:	f043 0301 	orr.w	r3, r3, #1
 801d254:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	681b      	ldr	r3, [r3, #0]
 801d25a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801d25e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801d260:	6a3b      	ldr	r3, [r7, #32]
 801d262:	0a5b      	lsrs	r3, r3, #9
 801d264:	f003 0301 	and.w	r3, r3, #1
 801d268:	2b00      	cmp	r3, #0
 801d26a:	d00e      	beq.n	801d28a <HAL_I2C_ER_IRQHandler+0x78>
 801d26c:	69fb      	ldr	r3, [r7, #28]
 801d26e:	0a1b      	lsrs	r3, r3, #8
 801d270:	f003 0301 	and.w	r3, r3, #1
 801d274:	2b00      	cmp	r3, #0
 801d276:	d008      	beq.n	801d28a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 801d278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d27a:	f043 0302 	orr.w	r3, r3, #2
 801d27e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801d280:	687b      	ldr	r3, [r7, #4]
 801d282:	681b      	ldr	r3, [r3, #0]
 801d284:	f46f 7200 	mvn.w	r2, #512	; 0x200
 801d288:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801d28a:	6a3b      	ldr	r3, [r7, #32]
 801d28c:	0a9b      	lsrs	r3, r3, #10
 801d28e:	f003 0301 	and.w	r3, r3, #1
 801d292:	2b00      	cmp	r3, #0
 801d294:	d03f      	beq.n	801d316 <HAL_I2C_ER_IRQHandler+0x104>
 801d296:	69fb      	ldr	r3, [r7, #28]
 801d298:	0a1b      	lsrs	r3, r3, #8
 801d29a:	f003 0301 	and.w	r3, r3, #1
 801d29e:	2b00      	cmp	r3, #0
 801d2a0:	d039      	beq.n	801d316 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 801d2a2:	7efb      	ldrb	r3, [r7, #27]
 801d2a4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 801d2a6:	687b      	ldr	r3, [r7, #4]
 801d2a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d2aa:	b29b      	uxth	r3, r3
 801d2ac:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 801d2ae:	687b      	ldr	r3, [r7, #4]
 801d2b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d2b4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 801d2b6:	687b      	ldr	r3, [r7, #4]
 801d2b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d2ba:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 801d2bc:	7ebb      	ldrb	r3, [r7, #26]
 801d2be:	2b20      	cmp	r3, #32
 801d2c0:	d112      	bne.n	801d2e8 <HAL_I2C_ER_IRQHandler+0xd6>
 801d2c2:	697b      	ldr	r3, [r7, #20]
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	d10f      	bne.n	801d2e8 <HAL_I2C_ER_IRQHandler+0xd6>
 801d2c8:	7cfb      	ldrb	r3, [r7, #19]
 801d2ca:	2b21      	cmp	r3, #33	; 0x21
 801d2cc:	d008      	beq.n	801d2e0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 801d2ce:	7cfb      	ldrb	r3, [r7, #19]
 801d2d0:	2b29      	cmp	r3, #41	; 0x29
 801d2d2:	d005      	beq.n	801d2e0 <HAL_I2C_ER_IRQHandler+0xce>
 801d2d4:	7cfb      	ldrb	r3, [r7, #19]
 801d2d6:	2b28      	cmp	r3, #40	; 0x28
 801d2d8:	d106      	bne.n	801d2e8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 801d2da:	68fb      	ldr	r3, [r7, #12]
 801d2dc:	2b21      	cmp	r3, #33	; 0x21
 801d2de:	d103      	bne.n	801d2e8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 801d2e0:	6878      	ldr	r0, [r7, #4]
 801d2e2:	f001 f841 	bl	801e368 <I2C_Slave_AF>
 801d2e6:	e016      	b.n	801d316 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801d2e8:	687b      	ldr	r3, [r7, #4]
 801d2ea:	681b      	ldr	r3, [r3, #0]
 801d2ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801d2f0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 801d2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d2f4:	f043 0304 	orr.w	r3, r3, #4
 801d2f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801d2fa:	7efb      	ldrb	r3, [r7, #27]
 801d2fc:	2b10      	cmp	r3, #16
 801d2fe:	d002      	beq.n	801d306 <HAL_I2C_ER_IRQHandler+0xf4>
 801d300:	7efb      	ldrb	r3, [r7, #27]
 801d302:	2b40      	cmp	r3, #64	; 0x40
 801d304:	d107      	bne.n	801d316 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801d306:	687b      	ldr	r3, [r7, #4]
 801d308:	681b      	ldr	r3, [r3, #0]
 801d30a:	681a      	ldr	r2, [r3, #0]
 801d30c:	687b      	ldr	r3, [r7, #4]
 801d30e:	681b      	ldr	r3, [r3, #0]
 801d310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d314:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801d316:	6a3b      	ldr	r3, [r7, #32]
 801d318:	0adb      	lsrs	r3, r3, #11
 801d31a:	f003 0301 	and.w	r3, r3, #1
 801d31e:	2b00      	cmp	r3, #0
 801d320:	d00e      	beq.n	801d340 <HAL_I2C_ER_IRQHandler+0x12e>
 801d322:	69fb      	ldr	r3, [r7, #28]
 801d324:	0a1b      	lsrs	r3, r3, #8
 801d326:	f003 0301 	and.w	r3, r3, #1
 801d32a:	2b00      	cmp	r3, #0
 801d32c:	d008      	beq.n	801d340 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 801d32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d330:	f043 0308 	orr.w	r3, r3, #8
 801d334:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801d336:	687b      	ldr	r3, [r7, #4]
 801d338:	681b      	ldr	r3, [r3, #0]
 801d33a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 801d33e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 801d340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d342:	2b00      	cmp	r3, #0
 801d344:	d008      	beq.n	801d358 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 801d346:	687b      	ldr	r3, [r7, #4]
 801d348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801d34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d34c:	431a      	orrs	r2, r3
 801d34e:	687b      	ldr	r3, [r7, #4]
 801d350:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 801d352:	6878      	ldr	r0, [r7, #4]
 801d354:	f001 f878 	bl	801e448 <I2C_ITError>
  }
}
 801d358:	bf00      	nop
 801d35a:	3728      	adds	r7, #40	; 0x28
 801d35c:	46bd      	mov	sp, r7
 801d35e:	bd80      	pop	{r7, pc}

0801d360 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801d360:	b480      	push	{r7}
 801d362:	b083      	sub	sp, #12
 801d364:	af00      	add	r7, sp, #0
 801d366:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801d368:	bf00      	nop
 801d36a:	370c      	adds	r7, #12
 801d36c:	46bd      	mov	sp, r7
 801d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d372:	4770      	bx	lr

0801d374 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801d374:	b480      	push	{r7}
 801d376:	b083      	sub	sp, #12
 801d378:	af00      	add	r7, sp, #0
 801d37a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801d37c:	bf00      	nop
 801d37e:	370c      	adds	r7, #12
 801d380:	46bd      	mov	sp, r7
 801d382:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d386:	4770      	bx	lr

0801d388 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801d388:	b480      	push	{r7}
 801d38a:	b083      	sub	sp, #12
 801d38c:	af00      	add	r7, sp, #0
 801d38e:	6078      	str	r0, [r7, #4]
 801d390:	460b      	mov	r3, r1
 801d392:	70fb      	strb	r3, [r7, #3]
 801d394:	4613      	mov	r3, r2
 801d396:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801d398:	bf00      	nop
 801d39a:	370c      	adds	r7, #12
 801d39c:	46bd      	mov	sp, r7
 801d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3a2:	4770      	bx	lr

0801d3a4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801d3a4:	b480      	push	{r7}
 801d3a6:	b083      	sub	sp, #12
 801d3a8:	af00      	add	r7, sp, #0
 801d3aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 801d3ac:	bf00      	nop
 801d3ae:	370c      	adds	r7, #12
 801d3b0:	46bd      	mov	sp, r7
 801d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3b6:	4770      	bx	lr

0801d3b8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801d3b8:	b480      	push	{r7}
 801d3ba:	b083      	sub	sp, #12
 801d3bc:	af00      	add	r7, sp, #0
 801d3be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 801d3c0:	bf00      	nop
 801d3c2:	370c      	adds	r7, #12
 801d3c4:	46bd      	mov	sp, r7
 801d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3ca:	4770      	bx	lr

0801d3cc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801d3cc:	b480      	push	{r7}
 801d3ce:	b083      	sub	sp, #12
 801d3d0:	af00      	add	r7, sp, #0
 801d3d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 801d3d4:	bf00      	nop
 801d3d6:	370c      	adds	r7, #12
 801d3d8:	46bd      	mov	sp, r7
 801d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3de:	4770      	bx	lr

0801d3e0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801d3e0:	b580      	push	{r7, lr}
 801d3e2:	b084      	sub	sp, #16
 801d3e4:	af00      	add	r7, sp, #0
 801d3e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d3ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801d3f6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d3fc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801d3fe:	687b      	ldr	r3, [r7, #4]
 801d400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d402:	2b00      	cmp	r3, #0
 801d404:	d150      	bne.n	801d4a8 <I2C_MasterTransmit_TXE+0xc8>
 801d406:	7bfb      	ldrb	r3, [r7, #15]
 801d408:	2b21      	cmp	r3, #33	; 0x21
 801d40a:	d14d      	bne.n	801d4a8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801d40c:	68bb      	ldr	r3, [r7, #8]
 801d40e:	2b08      	cmp	r3, #8
 801d410:	d01d      	beq.n	801d44e <I2C_MasterTransmit_TXE+0x6e>
 801d412:	68bb      	ldr	r3, [r7, #8]
 801d414:	2b20      	cmp	r3, #32
 801d416:	d01a      	beq.n	801d44e <I2C_MasterTransmit_TXE+0x6e>
 801d418:	68bb      	ldr	r3, [r7, #8]
 801d41a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801d41e:	d016      	beq.n	801d44e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d420:	687b      	ldr	r3, [r7, #4]
 801d422:	681b      	ldr	r3, [r3, #0]
 801d424:	685a      	ldr	r2, [r3, #4]
 801d426:	687b      	ldr	r3, [r7, #4]
 801d428:	681b      	ldr	r3, [r3, #0]
 801d42a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801d42e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	2211      	movs	r2, #17
 801d434:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	2200      	movs	r2, #0
 801d43a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 801d43e:	687b      	ldr	r3, [r7, #4]
 801d440:	2220      	movs	r2, #32
 801d442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801d446:	6878      	ldr	r0, [r7, #4]
 801d448:	f7e4 fb46 	bl	8001ad8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801d44c:	e060      	b.n	801d510 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d44e:	687b      	ldr	r3, [r7, #4]
 801d450:	681b      	ldr	r3, [r3, #0]
 801d452:	685a      	ldr	r2, [r3, #4]
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	681b      	ldr	r3, [r3, #0]
 801d458:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801d45c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801d45e:	687b      	ldr	r3, [r7, #4]
 801d460:	681b      	ldr	r3, [r3, #0]
 801d462:	681a      	ldr	r2, [r3, #0]
 801d464:	687b      	ldr	r3, [r7, #4]
 801d466:	681b      	ldr	r3, [r3, #0]
 801d468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d46c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 801d46e:	687b      	ldr	r3, [r7, #4]
 801d470:	2200      	movs	r2, #0
 801d472:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	2220      	movs	r2, #32
 801d478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801d47c:	687b      	ldr	r3, [r7, #4]
 801d47e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801d482:	b2db      	uxtb	r3, r3
 801d484:	2b40      	cmp	r3, #64	; 0x40
 801d486:	d107      	bne.n	801d498 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801d488:	687b      	ldr	r3, [r7, #4]
 801d48a:	2200      	movs	r2, #0
 801d48c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 801d490:	6878      	ldr	r0, [r7, #4]
 801d492:	f7e4 fb0b 	bl	8001aac <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801d496:	e03b      	b.n	801d510 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	2200      	movs	r2, #0
 801d49c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801d4a0:	6878      	ldr	r0, [r7, #4]
 801d4a2:	f7e4 fb19 	bl	8001ad8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801d4a6:	e033      	b.n	801d510 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 801d4a8:	7bfb      	ldrb	r3, [r7, #15]
 801d4aa:	2b21      	cmp	r3, #33	; 0x21
 801d4ac:	d005      	beq.n	801d4ba <I2C_MasterTransmit_TXE+0xda>
 801d4ae:	7bbb      	ldrb	r3, [r7, #14]
 801d4b0:	2b40      	cmp	r3, #64	; 0x40
 801d4b2:	d12d      	bne.n	801d510 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 801d4b4:	7bfb      	ldrb	r3, [r7, #15]
 801d4b6:	2b22      	cmp	r3, #34	; 0x22
 801d4b8:	d12a      	bne.n	801d510 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d4be:	b29b      	uxth	r3, r3
 801d4c0:	2b00      	cmp	r3, #0
 801d4c2:	d108      	bne.n	801d4d6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801d4c4:	687b      	ldr	r3, [r7, #4]
 801d4c6:	681b      	ldr	r3, [r3, #0]
 801d4c8:	685a      	ldr	r2, [r3, #4]
 801d4ca:	687b      	ldr	r3, [r7, #4]
 801d4cc:	681b      	ldr	r3, [r3, #0]
 801d4ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d4d2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801d4d4:	e01c      	b.n	801d510 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801d4d6:	687b      	ldr	r3, [r7, #4]
 801d4d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801d4dc:	b2db      	uxtb	r3, r3
 801d4de:	2b40      	cmp	r3, #64	; 0x40
 801d4e0:	d103      	bne.n	801d4ea <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 801d4e2:	6878      	ldr	r0, [r7, #4]
 801d4e4:	f000 f88e 	bl	801d604 <I2C_MemoryTransmit_TXE_BTF>
}
 801d4e8:	e012      	b.n	801d510 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801d4ea:	687b      	ldr	r3, [r7, #4]
 801d4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d4ee:	781a      	ldrb	r2, [r3, #0]
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	681b      	ldr	r3, [r3, #0]
 801d4f4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 801d4f6:	687b      	ldr	r3, [r7, #4]
 801d4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d4fa:	1c5a      	adds	r2, r3, #1
 801d4fc:	687b      	ldr	r3, [r7, #4]
 801d4fe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801d500:	687b      	ldr	r3, [r7, #4]
 801d502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d504:	b29b      	uxth	r3, r3
 801d506:	3b01      	subs	r3, #1
 801d508:	b29a      	uxth	r2, r3
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801d50e:	e7ff      	b.n	801d510 <I2C_MasterTransmit_TXE+0x130>
 801d510:	bf00      	nop
 801d512:	3710      	adds	r7, #16
 801d514:	46bd      	mov	sp, r7
 801d516:	bd80      	pop	{r7, pc}

0801d518 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801d518:	b580      	push	{r7, lr}
 801d51a:	b084      	sub	sp, #16
 801d51c:	af00      	add	r7, sp, #0
 801d51e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801d520:	687b      	ldr	r3, [r7, #4]
 801d522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d524:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801d526:	687b      	ldr	r3, [r7, #4]
 801d528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d52c:	b2db      	uxtb	r3, r3
 801d52e:	2b21      	cmp	r3, #33	; 0x21
 801d530:	d164      	bne.n	801d5fc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 801d532:	687b      	ldr	r3, [r7, #4]
 801d534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d536:	b29b      	uxth	r3, r3
 801d538:	2b00      	cmp	r3, #0
 801d53a:	d012      	beq.n	801d562 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801d53c:	687b      	ldr	r3, [r7, #4]
 801d53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d540:	781a      	ldrb	r2, [r3, #0]
 801d542:	687b      	ldr	r3, [r7, #4]
 801d544:	681b      	ldr	r3, [r3, #0]
 801d546:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801d548:	687b      	ldr	r3, [r7, #4]
 801d54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d54c:	1c5a      	adds	r2, r3, #1
 801d54e:	687b      	ldr	r3, [r7, #4]
 801d550:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801d552:	687b      	ldr	r3, [r7, #4]
 801d554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d556:	b29b      	uxth	r3, r3
 801d558:	3b01      	subs	r3, #1
 801d55a:	b29a      	uxth	r2, r3
 801d55c:	687b      	ldr	r3, [r7, #4]
 801d55e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 801d560:	e04c      	b.n	801d5fc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801d562:	68fb      	ldr	r3, [r7, #12]
 801d564:	2b08      	cmp	r3, #8
 801d566:	d01d      	beq.n	801d5a4 <I2C_MasterTransmit_BTF+0x8c>
 801d568:	68fb      	ldr	r3, [r7, #12]
 801d56a:	2b20      	cmp	r3, #32
 801d56c:	d01a      	beq.n	801d5a4 <I2C_MasterTransmit_BTF+0x8c>
 801d56e:	68fb      	ldr	r3, [r7, #12]
 801d570:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801d574:	d016      	beq.n	801d5a4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d576:	687b      	ldr	r3, [r7, #4]
 801d578:	681b      	ldr	r3, [r3, #0]
 801d57a:	685a      	ldr	r2, [r3, #4]
 801d57c:	687b      	ldr	r3, [r7, #4]
 801d57e:	681b      	ldr	r3, [r3, #0]
 801d580:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801d584:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801d586:	687b      	ldr	r3, [r7, #4]
 801d588:	2211      	movs	r2, #17
 801d58a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801d58c:	687b      	ldr	r3, [r7, #4]
 801d58e:	2200      	movs	r2, #0
 801d590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 801d594:	687b      	ldr	r3, [r7, #4]
 801d596:	2220      	movs	r2, #32
 801d598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801d59c:	6878      	ldr	r0, [r7, #4]
 801d59e:	f7e4 fa9b 	bl	8001ad8 <HAL_I2C_MasterTxCpltCallback>
}
 801d5a2:	e02b      	b.n	801d5fc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d5a4:	687b      	ldr	r3, [r7, #4]
 801d5a6:	681b      	ldr	r3, [r3, #0]
 801d5a8:	685a      	ldr	r2, [r3, #4]
 801d5aa:	687b      	ldr	r3, [r7, #4]
 801d5ac:	681b      	ldr	r3, [r3, #0]
 801d5ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801d5b2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801d5b4:	687b      	ldr	r3, [r7, #4]
 801d5b6:	681b      	ldr	r3, [r3, #0]
 801d5b8:	681a      	ldr	r2, [r3, #0]
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	681b      	ldr	r3, [r3, #0]
 801d5be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d5c2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 801d5c4:	687b      	ldr	r3, [r7, #4]
 801d5c6:	2200      	movs	r2, #0
 801d5c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	2220      	movs	r2, #32
 801d5ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801d5d2:	687b      	ldr	r3, [r7, #4]
 801d5d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801d5d8:	b2db      	uxtb	r3, r3
 801d5da:	2b40      	cmp	r3, #64	; 0x40
 801d5dc:	d107      	bne.n	801d5ee <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801d5de:	687b      	ldr	r3, [r7, #4]
 801d5e0:	2200      	movs	r2, #0
 801d5e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 801d5e6:	6878      	ldr	r0, [r7, #4]
 801d5e8:	f7e4 fa60 	bl	8001aac <HAL_I2C_MemTxCpltCallback>
}
 801d5ec:	e006      	b.n	801d5fc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801d5ee:	687b      	ldr	r3, [r7, #4]
 801d5f0:	2200      	movs	r2, #0
 801d5f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 801d5f6:	6878      	ldr	r0, [r7, #4]
 801d5f8:	f7e4 fa6e 	bl	8001ad8 <HAL_I2C_MasterTxCpltCallback>
}
 801d5fc:	bf00      	nop
 801d5fe:	3710      	adds	r7, #16
 801d600:	46bd      	mov	sp, r7
 801d602:	bd80      	pop	{r7, pc}

0801d604 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 801d604:	b580      	push	{r7, lr}
 801d606:	b084      	sub	sp, #16
 801d608:	af00      	add	r7, sp, #0
 801d60a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801d60c:	687b      	ldr	r3, [r7, #4]
 801d60e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d612:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d618:	2b00      	cmp	r3, #0
 801d61a:	d11d      	bne.n	801d658 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 801d61c:	687b      	ldr	r3, [r7, #4]
 801d61e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d620:	2b01      	cmp	r3, #1
 801d622:	d10b      	bne.n	801d63c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d628:	b2da      	uxtb	r2, r3
 801d62a:	687b      	ldr	r3, [r7, #4]
 801d62c:	681b      	ldr	r3, [r3, #0]
 801d62e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d634:	1c9a      	adds	r2, r3, #2
 801d636:	687b      	ldr	r3, [r7, #4]
 801d638:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 801d63a:	e073      	b.n	801d724 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 801d63c:	687b      	ldr	r3, [r7, #4]
 801d63e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d640:	b29b      	uxth	r3, r3
 801d642:	121b      	asrs	r3, r3, #8
 801d644:	b2da      	uxtb	r2, r3
 801d646:	687b      	ldr	r3, [r7, #4]
 801d648:	681b      	ldr	r3, [r3, #0]
 801d64a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 801d64c:	687b      	ldr	r3, [r7, #4]
 801d64e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d650:	1c5a      	adds	r2, r3, #1
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	651a      	str	r2, [r3, #80]	; 0x50
}
 801d656:	e065      	b.n	801d724 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 801d658:	687b      	ldr	r3, [r7, #4]
 801d65a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d65c:	2b01      	cmp	r3, #1
 801d65e:	d10b      	bne.n	801d678 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801d660:	687b      	ldr	r3, [r7, #4]
 801d662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d664:	b2da      	uxtb	r2, r3
 801d666:	687b      	ldr	r3, [r7, #4]
 801d668:	681b      	ldr	r3, [r3, #0]
 801d66a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 801d66c:	687b      	ldr	r3, [r7, #4]
 801d66e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d670:	1c5a      	adds	r2, r3, #1
 801d672:	687b      	ldr	r3, [r7, #4]
 801d674:	651a      	str	r2, [r3, #80]	; 0x50
}
 801d676:	e055      	b.n	801d724 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d67c:	2b02      	cmp	r3, #2
 801d67e:	d151      	bne.n	801d724 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 801d680:	7bfb      	ldrb	r3, [r7, #15]
 801d682:	2b22      	cmp	r3, #34	; 0x22
 801d684:	d10d      	bne.n	801d6a2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 801d686:	687b      	ldr	r3, [r7, #4]
 801d688:	681b      	ldr	r3, [r3, #0]
 801d68a:	681a      	ldr	r2, [r3, #0]
 801d68c:	687b      	ldr	r3, [r7, #4]
 801d68e:	681b      	ldr	r3, [r3, #0]
 801d690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d694:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d69a:	1c5a      	adds	r2, r3, #1
 801d69c:	687b      	ldr	r3, [r7, #4]
 801d69e:	651a      	str	r2, [r3, #80]	; 0x50
}
 801d6a0:	e040      	b.n	801d724 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801d6a2:	687b      	ldr	r3, [r7, #4]
 801d6a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d6a6:	b29b      	uxth	r3, r3
 801d6a8:	2b00      	cmp	r3, #0
 801d6aa:	d015      	beq.n	801d6d8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 801d6ac:	7bfb      	ldrb	r3, [r7, #15]
 801d6ae:	2b21      	cmp	r3, #33	; 0x21
 801d6b0:	d112      	bne.n	801d6d8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801d6b2:	687b      	ldr	r3, [r7, #4]
 801d6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d6b6:	781a      	ldrb	r2, [r3, #0]
 801d6b8:	687b      	ldr	r3, [r7, #4]
 801d6ba:	681b      	ldr	r3, [r3, #0]
 801d6bc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d6c2:	1c5a      	adds	r2, r3, #1
 801d6c4:	687b      	ldr	r3, [r7, #4]
 801d6c6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 801d6c8:	687b      	ldr	r3, [r7, #4]
 801d6ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d6cc:	b29b      	uxth	r3, r3
 801d6ce:	3b01      	subs	r3, #1
 801d6d0:	b29a      	uxth	r2, r3
 801d6d2:	687b      	ldr	r3, [r7, #4]
 801d6d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801d6d6:	e025      	b.n	801d724 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801d6d8:	687b      	ldr	r3, [r7, #4]
 801d6da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d6dc:	b29b      	uxth	r3, r3
 801d6de:	2b00      	cmp	r3, #0
 801d6e0:	d120      	bne.n	801d724 <I2C_MemoryTransmit_TXE_BTF+0x120>
 801d6e2:	7bfb      	ldrb	r3, [r7, #15]
 801d6e4:	2b21      	cmp	r3, #33	; 0x21
 801d6e6:	d11d      	bne.n	801d724 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d6e8:	687b      	ldr	r3, [r7, #4]
 801d6ea:	681b      	ldr	r3, [r3, #0]
 801d6ec:	685a      	ldr	r2, [r3, #4]
 801d6ee:	687b      	ldr	r3, [r7, #4]
 801d6f0:	681b      	ldr	r3, [r3, #0]
 801d6f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801d6f6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801d6f8:	687b      	ldr	r3, [r7, #4]
 801d6fa:	681b      	ldr	r3, [r3, #0]
 801d6fc:	681a      	ldr	r2, [r3, #0]
 801d6fe:	687b      	ldr	r3, [r7, #4]
 801d700:	681b      	ldr	r3, [r3, #0]
 801d702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d706:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801d708:	687b      	ldr	r3, [r7, #4]
 801d70a:	2200      	movs	r2, #0
 801d70c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	2220      	movs	r2, #32
 801d712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	2200      	movs	r2, #0
 801d71a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 801d71e:	6878      	ldr	r0, [r7, #4]
 801d720:	f7e4 f9c4 	bl	8001aac <HAL_I2C_MemTxCpltCallback>
}
 801d724:	bf00      	nop
 801d726:	3710      	adds	r7, #16
 801d728:	46bd      	mov	sp, r7
 801d72a:	bd80      	pop	{r7, pc}

0801d72c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801d72c:	b580      	push	{r7, lr}
 801d72e:	b084      	sub	sp, #16
 801d730:	af00      	add	r7, sp, #0
 801d732:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801d734:	687b      	ldr	r3, [r7, #4]
 801d736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d73a:	b2db      	uxtb	r3, r3
 801d73c:	2b22      	cmp	r3, #34	; 0x22
 801d73e:	f040 80ac 	bne.w	801d89a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 801d742:	687b      	ldr	r3, [r7, #4]
 801d744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d746:	b29b      	uxth	r3, r3
 801d748:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	2b03      	cmp	r3, #3
 801d74e:	d921      	bls.n	801d794 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801d750:	687b      	ldr	r3, [r7, #4]
 801d752:	681b      	ldr	r3, [r3, #0]
 801d754:	691a      	ldr	r2, [r3, #16]
 801d756:	687b      	ldr	r3, [r7, #4]
 801d758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d75a:	b2d2      	uxtb	r2, r2
 801d75c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d762:	1c5a      	adds	r2, r3, #1
 801d764:	687b      	ldr	r3, [r7, #4]
 801d766:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d76c:	b29b      	uxth	r3, r3
 801d76e:	3b01      	subs	r3, #1
 801d770:	b29a      	uxth	r2, r3
 801d772:	687b      	ldr	r3, [r7, #4]
 801d774:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 801d776:	687b      	ldr	r3, [r7, #4]
 801d778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d77a:	b29b      	uxth	r3, r3
 801d77c:	2b03      	cmp	r3, #3
 801d77e:	f040 808c 	bne.w	801d89a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801d782:	687b      	ldr	r3, [r7, #4]
 801d784:	681b      	ldr	r3, [r3, #0]
 801d786:	685a      	ldr	r2, [r3, #4]
 801d788:	687b      	ldr	r3, [r7, #4]
 801d78a:	681b      	ldr	r3, [r3, #0]
 801d78c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d790:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 801d792:	e082      	b.n	801d89a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 801d794:	687b      	ldr	r3, [r7, #4]
 801d796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d798:	2b02      	cmp	r3, #2
 801d79a:	d075      	beq.n	801d888 <I2C_MasterReceive_RXNE+0x15c>
 801d79c:	68fb      	ldr	r3, [r7, #12]
 801d79e:	2b01      	cmp	r3, #1
 801d7a0:	d002      	beq.n	801d7a8 <I2C_MasterReceive_RXNE+0x7c>
 801d7a2:	68fb      	ldr	r3, [r7, #12]
 801d7a4:	2b00      	cmp	r3, #0
 801d7a6:	d16f      	bne.n	801d888 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801d7a8:	6878      	ldr	r0, [r7, #4]
 801d7aa:	f001 fbcf 	bl	801ef4c <I2C_WaitOnSTOPRequestThroughIT>
 801d7ae:	4603      	mov	r3, r0
 801d7b0:	2b00      	cmp	r3, #0
 801d7b2:	d142      	bne.n	801d83a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d7b4:	687b      	ldr	r3, [r7, #4]
 801d7b6:	681b      	ldr	r3, [r3, #0]
 801d7b8:	681a      	ldr	r2, [r3, #0]
 801d7ba:	687b      	ldr	r3, [r7, #4]
 801d7bc:	681b      	ldr	r3, [r3, #0]
 801d7be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d7c2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d7c4:	687b      	ldr	r3, [r7, #4]
 801d7c6:	681b      	ldr	r3, [r3, #0]
 801d7c8:	685a      	ldr	r2, [r3, #4]
 801d7ca:	687b      	ldr	r3, [r7, #4]
 801d7cc:	681b      	ldr	r3, [r3, #0]
 801d7ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801d7d2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801d7d4:	687b      	ldr	r3, [r7, #4]
 801d7d6:	681b      	ldr	r3, [r3, #0]
 801d7d8:	691a      	ldr	r2, [r3, #16]
 801d7da:	687b      	ldr	r3, [r7, #4]
 801d7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d7de:	b2d2      	uxtb	r2, r2
 801d7e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801d7e2:	687b      	ldr	r3, [r7, #4]
 801d7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d7e6:	1c5a      	adds	r2, r3, #1
 801d7e8:	687b      	ldr	r3, [r7, #4]
 801d7ea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801d7ec:	687b      	ldr	r3, [r7, #4]
 801d7ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d7f0:	b29b      	uxth	r3, r3
 801d7f2:	3b01      	subs	r3, #1
 801d7f4:	b29a      	uxth	r2, r3
 801d7f6:	687b      	ldr	r3, [r7, #4]
 801d7f8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	2220      	movs	r2, #32
 801d7fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801d802:	687b      	ldr	r3, [r7, #4]
 801d804:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801d808:	b2db      	uxtb	r3, r3
 801d80a:	2b40      	cmp	r3, #64	; 0x40
 801d80c:	d10a      	bne.n	801d824 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801d80e:	687b      	ldr	r3, [r7, #4]
 801d810:	2200      	movs	r2, #0
 801d812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 801d816:	687b      	ldr	r3, [r7, #4]
 801d818:	2200      	movs	r2, #0
 801d81a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 801d81c:	6878      	ldr	r0, [r7, #4]
 801d81e:	f7e4 f919 	bl	8001a54 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801d822:	e03a      	b.n	801d89a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801d824:	687b      	ldr	r3, [r7, #4]
 801d826:	2200      	movs	r2, #0
 801d828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801d82c:	687b      	ldr	r3, [r7, #4]
 801d82e:	2212      	movs	r2, #18
 801d830:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 801d832:	6878      	ldr	r0, [r7, #4]
 801d834:	f7e4 f924 	bl	8001a80 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801d838:	e02f      	b.n	801d89a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d83a:	687b      	ldr	r3, [r7, #4]
 801d83c:	681b      	ldr	r3, [r3, #0]
 801d83e:	685a      	ldr	r2, [r3, #4]
 801d840:	687b      	ldr	r3, [r7, #4]
 801d842:	681b      	ldr	r3, [r3, #0]
 801d844:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801d848:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801d84a:	687b      	ldr	r3, [r7, #4]
 801d84c:	681b      	ldr	r3, [r3, #0]
 801d84e:	691a      	ldr	r2, [r3, #16]
 801d850:	687b      	ldr	r3, [r7, #4]
 801d852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d854:	b2d2      	uxtb	r2, r2
 801d856:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801d858:	687b      	ldr	r3, [r7, #4]
 801d85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d85c:	1c5a      	adds	r2, r3, #1
 801d85e:	687b      	ldr	r3, [r7, #4]
 801d860:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801d862:	687b      	ldr	r3, [r7, #4]
 801d864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d866:	b29b      	uxth	r3, r3
 801d868:	3b01      	subs	r3, #1
 801d86a:	b29a      	uxth	r2, r3
 801d86c:	687b      	ldr	r3, [r7, #4]
 801d86e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801d870:	687b      	ldr	r3, [r7, #4]
 801d872:	2220      	movs	r2, #32
 801d874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801d878:	687b      	ldr	r3, [r7, #4]
 801d87a:	2200      	movs	r2, #0
 801d87c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 801d880:	6878      	ldr	r0, [r7, #4]
 801d882:	f7ff fd99 	bl	801d3b8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801d886:	e008      	b.n	801d89a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801d888:	687b      	ldr	r3, [r7, #4]
 801d88a:	681b      	ldr	r3, [r3, #0]
 801d88c:	685a      	ldr	r2, [r3, #4]
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	681b      	ldr	r3, [r3, #0]
 801d892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d896:	605a      	str	r2, [r3, #4]
}
 801d898:	e7ff      	b.n	801d89a <I2C_MasterReceive_RXNE+0x16e>
 801d89a:	bf00      	nop
 801d89c:	3710      	adds	r7, #16
 801d89e:	46bd      	mov	sp, r7
 801d8a0:	bd80      	pop	{r7, pc}

0801d8a2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801d8a2:	b580      	push	{r7, lr}
 801d8a4:	b084      	sub	sp, #16
 801d8a6:	af00      	add	r7, sp, #0
 801d8a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801d8aa:	687b      	ldr	r3, [r7, #4]
 801d8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d8ae:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 801d8b0:	687b      	ldr	r3, [r7, #4]
 801d8b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d8b4:	b29b      	uxth	r3, r3
 801d8b6:	2b04      	cmp	r3, #4
 801d8b8:	d11b      	bne.n	801d8f2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	685a      	ldr	r2, [r3, #4]
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	681b      	ldr	r3, [r3, #0]
 801d8c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d8c8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801d8ca:	687b      	ldr	r3, [r7, #4]
 801d8cc:	681b      	ldr	r3, [r3, #0]
 801d8ce:	691a      	ldr	r2, [r3, #16]
 801d8d0:	687b      	ldr	r3, [r7, #4]
 801d8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d8d4:	b2d2      	uxtb	r2, r2
 801d8d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d8dc:	1c5a      	adds	r2, r3, #1
 801d8de:	687b      	ldr	r3, [r7, #4]
 801d8e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801d8e2:	687b      	ldr	r3, [r7, #4]
 801d8e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d8e6:	b29b      	uxth	r3, r3
 801d8e8:	3b01      	subs	r3, #1
 801d8ea:	b29a      	uxth	r2, r3
 801d8ec:	687b      	ldr	r3, [r7, #4]
 801d8ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 801d8f0:	e0bd      	b.n	801da6e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d8f6:	b29b      	uxth	r3, r3
 801d8f8:	2b03      	cmp	r3, #3
 801d8fa:	d129      	bne.n	801d950 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801d8fc:	687b      	ldr	r3, [r7, #4]
 801d8fe:	681b      	ldr	r3, [r3, #0]
 801d900:	685a      	ldr	r2, [r3, #4]
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	681b      	ldr	r3, [r3, #0]
 801d906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d90a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 801d90c:	68fb      	ldr	r3, [r7, #12]
 801d90e:	2b04      	cmp	r3, #4
 801d910:	d00a      	beq.n	801d928 <I2C_MasterReceive_BTF+0x86>
 801d912:	68fb      	ldr	r3, [r7, #12]
 801d914:	2b02      	cmp	r3, #2
 801d916:	d007      	beq.n	801d928 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d918:	687b      	ldr	r3, [r7, #4]
 801d91a:	681b      	ldr	r3, [r3, #0]
 801d91c:	681a      	ldr	r2, [r3, #0]
 801d91e:	687b      	ldr	r3, [r7, #4]
 801d920:	681b      	ldr	r3, [r3, #0]
 801d922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d926:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801d928:	687b      	ldr	r3, [r7, #4]
 801d92a:	681b      	ldr	r3, [r3, #0]
 801d92c:	691a      	ldr	r2, [r3, #16]
 801d92e:	687b      	ldr	r3, [r7, #4]
 801d930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d932:	b2d2      	uxtb	r2, r2
 801d934:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801d936:	687b      	ldr	r3, [r7, #4]
 801d938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d93a:	1c5a      	adds	r2, r3, #1
 801d93c:	687b      	ldr	r3, [r7, #4]
 801d93e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d944:	b29b      	uxth	r3, r3
 801d946:	3b01      	subs	r3, #1
 801d948:	b29a      	uxth	r2, r3
 801d94a:	687b      	ldr	r3, [r7, #4]
 801d94c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801d94e:	e08e      	b.n	801da6e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 801d950:	687b      	ldr	r3, [r7, #4]
 801d952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d954:	b29b      	uxth	r3, r3
 801d956:	2b02      	cmp	r3, #2
 801d958:	d176      	bne.n	801da48 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 801d95a:	68fb      	ldr	r3, [r7, #12]
 801d95c:	2b01      	cmp	r3, #1
 801d95e:	d002      	beq.n	801d966 <I2C_MasterReceive_BTF+0xc4>
 801d960:	68fb      	ldr	r3, [r7, #12]
 801d962:	2b10      	cmp	r3, #16
 801d964:	d108      	bne.n	801d978 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d966:	687b      	ldr	r3, [r7, #4]
 801d968:	681b      	ldr	r3, [r3, #0]
 801d96a:	681a      	ldr	r2, [r3, #0]
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	681b      	ldr	r3, [r3, #0]
 801d970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d974:	601a      	str	r2, [r3, #0]
 801d976:	e019      	b.n	801d9ac <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 801d978:	68fb      	ldr	r3, [r7, #12]
 801d97a:	2b04      	cmp	r3, #4
 801d97c:	d002      	beq.n	801d984 <I2C_MasterReceive_BTF+0xe2>
 801d97e:	68fb      	ldr	r3, [r7, #12]
 801d980:	2b02      	cmp	r3, #2
 801d982:	d108      	bne.n	801d996 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d984:	687b      	ldr	r3, [r7, #4]
 801d986:	681b      	ldr	r3, [r3, #0]
 801d988:	681a      	ldr	r2, [r3, #0]
 801d98a:	687b      	ldr	r3, [r7, #4]
 801d98c:	681b      	ldr	r3, [r3, #0]
 801d98e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801d992:	601a      	str	r2, [r3, #0]
 801d994:	e00a      	b.n	801d9ac <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 801d996:	68fb      	ldr	r3, [r7, #12]
 801d998:	2b10      	cmp	r3, #16
 801d99a:	d007      	beq.n	801d9ac <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801d99c:	687b      	ldr	r3, [r7, #4]
 801d99e:	681b      	ldr	r3, [r3, #0]
 801d9a0:	681a      	ldr	r2, [r3, #0]
 801d9a2:	687b      	ldr	r3, [r7, #4]
 801d9a4:	681b      	ldr	r3, [r3, #0]
 801d9a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d9aa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	681b      	ldr	r3, [r3, #0]
 801d9b0:	691a      	ldr	r2, [r3, #16]
 801d9b2:	687b      	ldr	r3, [r7, #4]
 801d9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d9b6:	b2d2      	uxtb	r2, r2
 801d9b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801d9ba:	687b      	ldr	r3, [r7, #4]
 801d9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d9be:	1c5a      	adds	r2, r3, #1
 801d9c0:	687b      	ldr	r3, [r7, #4]
 801d9c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801d9c4:	687b      	ldr	r3, [r7, #4]
 801d9c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d9c8:	b29b      	uxth	r3, r3
 801d9ca:	3b01      	subs	r3, #1
 801d9cc:	b29a      	uxth	r2, r3
 801d9ce:	687b      	ldr	r3, [r7, #4]
 801d9d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801d9d2:	687b      	ldr	r3, [r7, #4]
 801d9d4:	681b      	ldr	r3, [r3, #0]
 801d9d6:	691a      	ldr	r2, [r3, #16]
 801d9d8:	687b      	ldr	r3, [r7, #4]
 801d9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d9dc:	b2d2      	uxtb	r2, r2
 801d9de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d9e4:	1c5a      	adds	r2, r3, #1
 801d9e6:	687b      	ldr	r3, [r7, #4]
 801d9e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801d9ea:	687b      	ldr	r3, [r7, #4]
 801d9ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d9ee:	b29b      	uxth	r3, r3
 801d9f0:	3b01      	subs	r3, #1
 801d9f2:	b29a      	uxth	r2, r3
 801d9f4:	687b      	ldr	r3, [r7, #4]
 801d9f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801d9f8:	687b      	ldr	r3, [r7, #4]
 801d9fa:	681b      	ldr	r3, [r3, #0]
 801d9fc:	685a      	ldr	r2, [r3, #4]
 801d9fe:	687b      	ldr	r3, [r7, #4]
 801da00:	681b      	ldr	r3, [r3, #0]
 801da02:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801da06:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801da08:	687b      	ldr	r3, [r7, #4]
 801da0a:	2220      	movs	r2, #32
 801da0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801da10:	687b      	ldr	r3, [r7, #4]
 801da12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801da16:	b2db      	uxtb	r3, r3
 801da18:	2b40      	cmp	r3, #64	; 0x40
 801da1a:	d10a      	bne.n	801da32 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801da1c:	687b      	ldr	r3, [r7, #4]
 801da1e:	2200      	movs	r2, #0
 801da20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 801da24:	687b      	ldr	r3, [r7, #4]
 801da26:	2200      	movs	r2, #0
 801da28:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 801da2a:	6878      	ldr	r0, [r7, #4]
 801da2c:	f7e4 f812 	bl	8001a54 <HAL_I2C_MemRxCpltCallback>
}
 801da30:	e01d      	b.n	801da6e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801da32:	687b      	ldr	r3, [r7, #4]
 801da34:	2200      	movs	r2, #0
 801da36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801da3a:	687b      	ldr	r3, [r7, #4]
 801da3c:	2212      	movs	r2, #18
 801da3e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801da40:	6878      	ldr	r0, [r7, #4]
 801da42:	f7e4 f81d 	bl	8001a80 <HAL_I2C_MasterRxCpltCallback>
}
 801da46:	e012      	b.n	801da6e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801da48:	687b      	ldr	r3, [r7, #4]
 801da4a:	681b      	ldr	r3, [r3, #0]
 801da4c:	691a      	ldr	r2, [r3, #16]
 801da4e:	687b      	ldr	r3, [r7, #4]
 801da50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da52:	b2d2      	uxtb	r2, r2
 801da54:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801da56:	687b      	ldr	r3, [r7, #4]
 801da58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da5a:	1c5a      	adds	r2, r3, #1
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801da60:	687b      	ldr	r3, [r7, #4]
 801da62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801da64:	b29b      	uxth	r3, r3
 801da66:	3b01      	subs	r3, #1
 801da68:	b29a      	uxth	r2, r3
 801da6a:	687b      	ldr	r3, [r7, #4]
 801da6c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801da6e:	bf00      	nop
 801da70:	3710      	adds	r7, #16
 801da72:	46bd      	mov	sp, r7
 801da74:	bd80      	pop	{r7, pc}

0801da76 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 801da76:	b480      	push	{r7}
 801da78:	b083      	sub	sp, #12
 801da7a:	af00      	add	r7, sp, #0
 801da7c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801da7e:	687b      	ldr	r3, [r7, #4]
 801da80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801da84:	b2db      	uxtb	r3, r3
 801da86:	2b40      	cmp	r3, #64	; 0x40
 801da88:	d117      	bne.n	801daba <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 801da8a:	687b      	ldr	r3, [r7, #4]
 801da8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801da8e:	2b00      	cmp	r3, #0
 801da90:	d109      	bne.n	801daa6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801da92:	687b      	ldr	r3, [r7, #4]
 801da94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801da96:	b2db      	uxtb	r3, r3
 801da98:	461a      	mov	r2, r3
 801da9a:	687b      	ldr	r3, [r7, #4]
 801da9c:	681b      	ldr	r3, [r3, #0]
 801da9e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801daa2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 801daa4:	e067      	b.n	801db76 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801daa6:	687b      	ldr	r3, [r7, #4]
 801daa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801daaa:	b2db      	uxtb	r3, r3
 801daac:	f043 0301 	orr.w	r3, r3, #1
 801dab0:	b2da      	uxtb	r2, r3
 801dab2:	687b      	ldr	r3, [r7, #4]
 801dab4:	681b      	ldr	r3, [r3, #0]
 801dab6:	611a      	str	r2, [r3, #16]
}
 801dab8:	e05d      	b.n	801db76 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801daba:	687b      	ldr	r3, [r7, #4]
 801dabc:	691b      	ldr	r3, [r3, #16]
 801dabe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801dac2:	d133      	bne.n	801db2c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801daca:	b2db      	uxtb	r3, r3
 801dacc:	2b21      	cmp	r3, #33	; 0x21
 801dace:	d109      	bne.n	801dae4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801dad0:	687b      	ldr	r3, [r7, #4]
 801dad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dad4:	b2db      	uxtb	r3, r3
 801dad6:	461a      	mov	r2, r3
 801dad8:	687b      	ldr	r3, [r7, #4]
 801dada:	681b      	ldr	r3, [r3, #0]
 801dadc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801dae0:	611a      	str	r2, [r3, #16]
 801dae2:	e008      	b.n	801daf6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801dae4:	687b      	ldr	r3, [r7, #4]
 801dae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dae8:	b2db      	uxtb	r3, r3
 801daea:	f043 0301 	orr.w	r3, r3, #1
 801daee:	b2da      	uxtb	r2, r3
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	681b      	ldr	r3, [r3, #0]
 801daf4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801daf6:	687b      	ldr	r3, [r7, #4]
 801daf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dafa:	2b00      	cmp	r3, #0
 801dafc:	d004      	beq.n	801db08 <I2C_Master_SB+0x92>
 801dafe:	687b      	ldr	r3, [r7, #4]
 801db00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801db02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801db04:	2b00      	cmp	r3, #0
 801db06:	d108      	bne.n	801db1a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801db08:	687b      	ldr	r3, [r7, #4]
 801db0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db0c:	2b00      	cmp	r3, #0
 801db0e:	d032      	beq.n	801db76 <I2C_Master_SB+0x100>
 801db10:	687b      	ldr	r3, [r7, #4]
 801db12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801db16:	2b00      	cmp	r3, #0
 801db18:	d02d      	beq.n	801db76 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801db1a:	687b      	ldr	r3, [r7, #4]
 801db1c:	681b      	ldr	r3, [r3, #0]
 801db1e:	685a      	ldr	r2, [r3, #4]
 801db20:	687b      	ldr	r3, [r7, #4]
 801db22:	681b      	ldr	r3, [r3, #0]
 801db24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801db28:	605a      	str	r2, [r3, #4]
}
 801db2a:	e024      	b.n	801db76 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801db30:	2b00      	cmp	r3, #0
 801db32:	d10e      	bne.n	801db52 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801db38:	b29b      	uxth	r3, r3
 801db3a:	11db      	asrs	r3, r3, #7
 801db3c:	b2db      	uxtb	r3, r3
 801db3e:	f003 0306 	and.w	r3, r3, #6
 801db42:	b2db      	uxtb	r3, r3
 801db44:	f063 030f 	orn	r3, r3, #15
 801db48:	b2da      	uxtb	r2, r3
 801db4a:	687b      	ldr	r3, [r7, #4]
 801db4c:	681b      	ldr	r3, [r3, #0]
 801db4e:	611a      	str	r2, [r3, #16]
}
 801db50:	e011      	b.n	801db76 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 801db52:	687b      	ldr	r3, [r7, #4]
 801db54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801db56:	2b01      	cmp	r3, #1
 801db58:	d10d      	bne.n	801db76 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 801db5a:	687b      	ldr	r3, [r7, #4]
 801db5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801db5e:	b29b      	uxth	r3, r3
 801db60:	11db      	asrs	r3, r3, #7
 801db62:	b2db      	uxtb	r3, r3
 801db64:	f003 0306 	and.w	r3, r3, #6
 801db68:	b2db      	uxtb	r3, r3
 801db6a:	f063 030e 	orn	r3, r3, #14
 801db6e:	b2da      	uxtb	r2, r3
 801db70:	687b      	ldr	r3, [r7, #4]
 801db72:	681b      	ldr	r3, [r3, #0]
 801db74:	611a      	str	r2, [r3, #16]
}
 801db76:	bf00      	nop
 801db78:	370c      	adds	r7, #12
 801db7a:	46bd      	mov	sp, r7
 801db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db80:	4770      	bx	lr

0801db82 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 801db82:	b480      	push	{r7}
 801db84:	b083      	sub	sp, #12
 801db86:	af00      	add	r7, sp, #0
 801db88:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 801db8a:	687b      	ldr	r3, [r7, #4]
 801db8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801db8e:	b2da      	uxtb	r2, r3
 801db90:	687b      	ldr	r3, [r7, #4]
 801db92:	681b      	ldr	r3, [r3, #0]
 801db94:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801db9a:	2b00      	cmp	r3, #0
 801db9c:	d004      	beq.n	801dba8 <I2C_Master_ADD10+0x26>
 801db9e:	687b      	ldr	r3, [r7, #4]
 801dba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dba4:	2b00      	cmp	r3, #0
 801dba6:	d108      	bne.n	801dbba <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801dba8:	687b      	ldr	r3, [r7, #4]
 801dbaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbac:	2b00      	cmp	r3, #0
 801dbae:	d00c      	beq.n	801dbca <I2C_Master_ADD10+0x48>
 801dbb0:	687b      	ldr	r3, [r7, #4]
 801dbb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dbb6:	2b00      	cmp	r3, #0
 801dbb8:	d007      	beq.n	801dbca <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801dbba:	687b      	ldr	r3, [r7, #4]
 801dbbc:	681b      	ldr	r3, [r3, #0]
 801dbbe:	685a      	ldr	r2, [r3, #4]
 801dbc0:	687b      	ldr	r3, [r7, #4]
 801dbc2:	681b      	ldr	r3, [r3, #0]
 801dbc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801dbc8:	605a      	str	r2, [r3, #4]
  }
}
 801dbca:	bf00      	nop
 801dbcc:	370c      	adds	r7, #12
 801dbce:	46bd      	mov	sp, r7
 801dbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbd4:	4770      	bx	lr

0801dbd6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 801dbd6:	b480      	push	{r7}
 801dbd8:	b091      	sub	sp, #68	; 0x44
 801dbda:	af00      	add	r7, sp, #0
 801dbdc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 801dbde:	687b      	ldr	r3, [r7, #4]
 801dbe0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801dbe4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 801dbe8:	687b      	ldr	r3, [r7, #4]
 801dbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dbec:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 801dbee:	687b      	ldr	r3, [r7, #4]
 801dbf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dbf2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801dbf4:	687b      	ldr	r3, [r7, #4]
 801dbf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801dbfa:	b2db      	uxtb	r3, r3
 801dbfc:	2b22      	cmp	r3, #34	; 0x22
 801dbfe:	f040 8169 	bne.w	801ded4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dc06:	2b00      	cmp	r3, #0
 801dc08:	d10f      	bne.n	801dc2a <I2C_Master_ADDR+0x54>
 801dc0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801dc0e:	2b40      	cmp	r3, #64	; 0x40
 801dc10:	d10b      	bne.n	801dc2a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801dc12:	2300      	movs	r3, #0
 801dc14:	633b      	str	r3, [r7, #48]	; 0x30
 801dc16:	687b      	ldr	r3, [r7, #4]
 801dc18:	681b      	ldr	r3, [r3, #0]
 801dc1a:	695b      	ldr	r3, [r3, #20]
 801dc1c:	633b      	str	r3, [r7, #48]	; 0x30
 801dc1e:	687b      	ldr	r3, [r7, #4]
 801dc20:	681b      	ldr	r3, [r3, #0]
 801dc22:	699b      	ldr	r3, [r3, #24]
 801dc24:	633b      	str	r3, [r7, #48]	; 0x30
 801dc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc28:	e160      	b.n	801deec <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dc2e:	2b00      	cmp	r3, #0
 801dc30:	d11d      	bne.n	801dc6e <I2C_Master_ADDR+0x98>
 801dc32:	687b      	ldr	r3, [r7, #4]
 801dc34:	691b      	ldr	r3, [r3, #16]
 801dc36:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801dc3a:	d118      	bne.n	801dc6e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801dc3c:	2300      	movs	r3, #0
 801dc3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dc40:	687b      	ldr	r3, [r7, #4]
 801dc42:	681b      	ldr	r3, [r3, #0]
 801dc44:	695b      	ldr	r3, [r3, #20]
 801dc46:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dc48:	687b      	ldr	r3, [r7, #4]
 801dc4a:	681b      	ldr	r3, [r3, #0]
 801dc4c:	699b      	ldr	r3, [r3, #24]
 801dc4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801dc52:	687b      	ldr	r3, [r7, #4]
 801dc54:	681b      	ldr	r3, [r3, #0]
 801dc56:	681a      	ldr	r2, [r3, #0]
 801dc58:	687b      	ldr	r3, [r7, #4]
 801dc5a:	681b      	ldr	r3, [r3, #0]
 801dc5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801dc60:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 801dc62:	687b      	ldr	r3, [r7, #4]
 801dc64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dc66:	1c5a      	adds	r2, r3, #1
 801dc68:	687b      	ldr	r3, [r7, #4]
 801dc6a:	651a      	str	r2, [r3, #80]	; 0x50
 801dc6c:	e13e      	b.n	801deec <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 801dc6e:	687b      	ldr	r3, [r7, #4]
 801dc70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801dc72:	b29b      	uxth	r3, r3
 801dc74:	2b00      	cmp	r3, #0
 801dc76:	d113      	bne.n	801dca0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801dc78:	2300      	movs	r3, #0
 801dc7a:	62bb      	str	r3, [r7, #40]	; 0x28
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	681b      	ldr	r3, [r3, #0]
 801dc80:	695b      	ldr	r3, [r3, #20]
 801dc82:	62bb      	str	r3, [r7, #40]	; 0x28
 801dc84:	687b      	ldr	r3, [r7, #4]
 801dc86:	681b      	ldr	r3, [r3, #0]
 801dc88:	699b      	ldr	r3, [r3, #24]
 801dc8a:	62bb      	str	r3, [r7, #40]	; 0x28
 801dc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801dc8e:	687b      	ldr	r3, [r7, #4]
 801dc90:	681b      	ldr	r3, [r3, #0]
 801dc92:	681a      	ldr	r2, [r3, #0]
 801dc94:	687b      	ldr	r3, [r7, #4]
 801dc96:	681b      	ldr	r3, [r3, #0]
 801dc98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801dc9c:	601a      	str	r2, [r3, #0]
 801dc9e:	e115      	b.n	801decc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 801dca0:	687b      	ldr	r3, [r7, #4]
 801dca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801dca4:	b29b      	uxth	r3, r3
 801dca6:	2b01      	cmp	r3, #1
 801dca8:	f040 808a 	bne.w	801ddc0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 801dcac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dcae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801dcb2:	d137      	bne.n	801dd24 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dcb4:	687b      	ldr	r3, [r7, #4]
 801dcb6:	681b      	ldr	r3, [r3, #0]
 801dcb8:	681a      	ldr	r2, [r3, #0]
 801dcba:	687b      	ldr	r3, [r7, #4]
 801dcbc:	681b      	ldr	r3, [r3, #0]
 801dcbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801dcc2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801dcc4:	687b      	ldr	r3, [r7, #4]
 801dcc6:	681b      	ldr	r3, [r3, #0]
 801dcc8:	685b      	ldr	r3, [r3, #4]
 801dcca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801dcce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801dcd2:	d113      	bne.n	801dcfc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dcd4:	687b      	ldr	r3, [r7, #4]
 801dcd6:	681b      	ldr	r3, [r3, #0]
 801dcd8:	681a      	ldr	r2, [r3, #0]
 801dcda:	687b      	ldr	r3, [r7, #4]
 801dcdc:	681b      	ldr	r3, [r3, #0]
 801dcde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801dce2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801dce4:	2300      	movs	r3, #0
 801dce6:	627b      	str	r3, [r7, #36]	; 0x24
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	681b      	ldr	r3, [r3, #0]
 801dcec:	695b      	ldr	r3, [r3, #20]
 801dcee:	627b      	str	r3, [r7, #36]	; 0x24
 801dcf0:	687b      	ldr	r3, [r7, #4]
 801dcf2:	681b      	ldr	r3, [r3, #0]
 801dcf4:	699b      	ldr	r3, [r3, #24]
 801dcf6:	627b      	str	r3, [r7, #36]	; 0x24
 801dcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcfa:	e0e7      	b.n	801decc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801dcfc:	2300      	movs	r3, #0
 801dcfe:	623b      	str	r3, [r7, #32]
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	681b      	ldr	r3, [r3, #0]
 801dd04:	695b      	ldr	r3, [r3, #20]
 801dd06:	623b      	str	r3, [r7, #32]
 801dd08:	687b      	ldr	r3, [r7, #4]
 801dd0a:	681b      	ldr	r3, [r3, #0]
 801dd0c:	699b      	ldr	r3, [r3, #24]
 801dd0e:	623b      	str	r3, [r7, #32]
 801dd10:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801dd12:	687b      	ldr	r3, [r7, #4]
 801dd14:	681b      	ldr	r3, [r3, #0]
 801dd16:	681a      	ldr	r2, [r3, #0]
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	681b      	ldr	r3, [r3, #0]
 801dd1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801dd20:	601a      	str	r2, [r3, #0]
 801dd22:	e0d3      	b.n	801decc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 801dd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dd26:	2b08      	cmp	r3, #8
 801dd28:	d02e      	beq.n	801dd88 <I2C_Master_ADDR+0x1b2>
 801dd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dd2c:	2b20      	cmp	r3, #32
 801dd2e:	d02b      	beq.n	801dd88 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 801dd30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dd32:	2b12      	cmp	r3, #18
 801dd34:	d102      	bne.n	801dd3c <I2C_Master_ADDR+0x166>
 801dd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dd38:	2b01      	cmp	r3, #1
 801dd3a:	d125      	bne.n	801dd88 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801dd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dd3e:	2b04      	cmp	r3, #4
 801dd40:	d00e      	beq.n	801dd60 <I2C_Master_ADDR+0x18a>
 801dd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dd44:	2b02      	cmp	r3, #2
 801dd46:	d00b      	beq.n	801dd60 <I2C_Master_ADDR+0x18a>
 801dd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dd4a:	2b10      	cmp	r3, #16
 801dd4c:	d008      	beq.n	801dd60 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dd4e:	687b      	ldr	r3, [r7, #4]
 801dd50:	681b      	ldr	r3, [r3, #0]
 801dd52:	681a      	ldr	r2, [r3, #0]
 801dd54:	687b      	ldr	r3, [r7, #4]
 801dd56:	681b      	ldr	r3, [r3, #0]
 801dd58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801dd5c:	601a      	str	r2, [r3, #0]
 801dd5e:	e007      	b.n	801dd70 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dd60:	687b      	ldr	r3, [r7, #4]
 801dd62:	681b      	ldr	r3, [r3, #0]
 801dd64:	681a      	ldr	r2, [r3, #0]
 801dd66:	687b      	ldr	r3, [r7, #4]
 801dd68:	681b      	ldr	r3, [r3, #0]
 801dd6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801dd6e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801dd70:	2300      	movs	r3, #0
 801dd72:	61fb      	str	r3, [r7, #28]
 801dd74:	687b      	ldr	r3, [r7, #4]
 801dd76:	681b      	ldr	r3, [r3, #0]
 801dd78:	695b      	ldr	r3, [r3, #20]
 801dd7a:	61fb      	str	r3, [r7, #28]
 801dd7c:	687b      	ldr	r3, [r7, #4]
 801dd7e:	681b      	ldr	r3, [r3, #0]
 801dd80:	699b      	ldr	r3, [r3, #24]
 801dd82:	61fb      	str	r3, [r7, #28]
 801dd84:	69fb      	ldr	r3, [r7, #28]
 801dd86:	e0a1      	b.n	801decc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dd88:	687b      	ldr	r3, [r7, #4]
 801dd8a:	681b      	ldr	r3, [r3, #0]
 801dd8c:	681a      	ldr	r2, [r3, #0]
 801dd8e:	687b      	ldr	r3, [r7, #4]
 801dd90:	681b      	ldr	r3, [r3, #0]
 801dd92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801dd96:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801dd98:	2300      	movs	r3, #0
 801dd9a:	61bb      	str	r3, [r7, #24]
 801dd9c:	687b      	ldr	r3, [r7, #4]
 801dd9e:	681b      	ldr	r3, [r3, #0]
 801dda0:	695b      	ldr	r3, [r3, #20]
 801dda2:	61bb      	str	r3, [r7, #24]
 801dda4:	687b      	ldr	r3, [r7, #4]
 801dda6:	681b      	ldr	r3, [r3, #0]
 801dda8:	699b      	ldr	r3, [r3, #24]
 801ddaa:	61bb      	str	r3, [r7, #24]
 801ddac:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ddae:	687b      	ldr	r3, [r7, #4]
 801ddb0:	681b      	ldr	r3, [r3, #0]
 801ddb2:	681a      	ldr	r2, [r3, #0]
 801ddb4:	687b      	ldr	r3, [r7, #4]
 801ddb6:	681b      	ldr	r3, [r3, #0]
 801ddb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ddbc:	601a      	str	r2, [r3, #0]
 801ddbe:	e085      	b.n	801decc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 801ddc0:	687b      	ldr	r3, [r7, #4]
 801ddc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ddc4:	b29b      	uxth	r3, r3
 801ddc6:	2b02      	cmp	r3, #2
 801ddc8:	d14d      	bne.n	801de66 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801ddca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ddcc:	2b04      	cmp	r3, #4
 801ddce:	d016      	beq.n	801ddfe <I2C_Master_ADDR+0x228>
 801ddd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ddd2:	2b02      	cmp	r3, #2
 801ddd4:	d013      	beq.n	801ddfe <I2C_Master_ADDR+0x228>
 801ddd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ddd8:	2b10      	cmp	r3, #16
 801ddda:	d010      	beq.n	801ddfe <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dddc:	687b      	ldr	r3, [r7, #4]
 801ddde:	681b      	ldr	r3, [r3, #0]
 801dde0:	681a      	ldr	r2, [r3, #0]
 801dde2:	687b      	ldr	r3, [r7, #4]
 801dde4:	681b      	ldr	r3, [r3, #0]
 801dde6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ddea:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801ddec:	687b      	ldr	r3, [r7, #4]
 801ddee:	681b      	ldr	r3, [r3, #0]
 801ddf0:	681a      	ldr	r2, [r3, #0]
 801ddf2:	687b      	ldr	r3, [r7, #4]
 801ddf4:	681b      	ldr	r3, [r3, #0]
 801ddf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801ddfa:	601a      	str	r2, [r3, #0]
 801ddfc:	e007      	b.n	801de0e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ddfe:	687b      	ldr	r3, [r7, #4]
 801de00:	681b      	ldr	r3, [r3, #0]
 801de02:	681a      	ldr	r2, [r3, #0]
 801de04:	687b      	ldr	r3, [r7, #4]
 801de06:	681b      	ldr	r3, [r3, #0]
 801de08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801de0c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801de0e:	687b      	ldr	r3, [r7, #4]
 801de10:	681b      	ldr	r3, [r3, #0]
 801de12:	685b      	ldr	r3, [r3, #4]
 801de14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801de18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801de1c:	d117      	bne.n	801de4e <I2C_Master_ADDR+0x278>
 801de1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801de24:	d00b      	beq.n	801de3e <I2C_Master_ADDR+0x268>
 801de26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de28:	2b01      	cmp	r3, #1
 801de2a:	d008      	beq.n	801de3e <I2C_Master_ADDR+0x268>
 801de2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de2e:	2b08      	cmp	r3, #8
 801de30:	d005      	beq.n	801de3e <I2C_Master_ADDR+0x268>
 801de32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de34:	2b10      	cmp	r3, #16
 801de36:	d002      	beq.n	801de3e <I2C_Master_ADDR+0x268>
 801de38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de3a:	2b20      	cmp	r3, #32
 801de3c:	d107      	bne.n	801de4e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801de3e:	687b      	ldr	r3, [r7, #4]
 801de40:	681b      	ldr	r3, [r3, #0]
 801de42:	685a      	ldr	r2, [r3, #4]
 801de44:	687b      	ldr	r3, [r7, #4]
 801de46:	681b      	ldr	r3, [r3, #0]
 801de48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801de4c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801de4e:	2300      	movs	r3, #0
 801de50:	617b      	str	r3, [r7, #20]
 801de52:	687b      	ldr	r3, [r7, #4]
 801de54:	681b      	ldr	r3, [r3, #0]
 801de56:	695b      	ldr	r3, [r3, #20]
 801de58:	617b      	str	r3, [r7, #20]
 801de5a:	687b      	ldr	r3, [r7, #4]
 801de5c:	681b      	ldr	r3, [r3, #0]
 801de5e:	699b      	ldr	r3, [r3, #24]
 801de60:	617b      	str	r3, [r7, #20]
 801de62:	697b      	ldr	r3, [r7, #20]
 801de64:	e032      	b.n	801decc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801de66:	687b      	ldr	r3, [r7, #4]
 801de68:	681b      	ldr	r3, [r3, #0]
 801de6a:	681a      	ldr	r2, [r3, #0]
 801de6c:	687b      	ldr	r3, [r7, #4]
 801de6e:	681b      	ldr	r3, [r3, #0]
 801de70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801de74:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801de76:	687b      	ldr	r3, [r7, #4]
 801de78:	681b      	ldr	r3, [r3, #0]
 801de7a:	685b      	ldr	r3, [r3, #4]
 801de7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801de80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801de84:	d117      	bne.n	801deb6 <I2C_Master_ADDR+0x2e0>
 801de86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801de8c:	d00b      	beq.n	801dea6 <I2C_Master_ADDR+0x2d0>
 801de8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de90:	2b01      	cmp	r3, #1
 801de92:	d008      	beq.n	801dea6 <I2C_Master_ADDR+0x2d0>
 801de94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de96:	2b08      	cmp	r3, #8
 801de98:	d005      	beq.n	801dea6 <I2C_Master_ADDR+0x2d0>
 801de9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de9c:	2b10      	cmp	r3, #16
 801de9e:	d002      	beq.n	801dea6 <I2C_Master_ADDR+0x2d0>
 801dea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dea2:	2b20      	cmp	r3, #32
 801dea4:	d107      	bne.n	801deb6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801dea6:	687b      	ldr	r3, [r7, #4]
 801dea8:	681b      	ldr	r3, [r3, #0]
 801deaa:	685a      	ldr	r2, [r3, #4]
 801deac:	687b      	ldr	r3, [r7, #4]
 801deae:	681b      	ldr	r3, [r3, #0]
 801deb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801deb4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801deb6:	2300      	movs	r3, #0
 801deb8:	613b      	str	r3, [r7, #16]
 801deba:	687b      	ldr	r3, [r7, #4]
 801debc:	681b      	ldr	r3, [r3, #0]
 801debe:	695b      	ldr	r3, [r3, #20]
 801dec0:	613b      	str	r3, [r7, #16]
 801dec2:	687b      	ldr	r3, [r7, #4]
 801dec4:	681b      	ldr	r3, [r3, #0]
 801dec6:	699b      	ldr	r3, [r3, #24]
 801dec8:	613b      	str	r3, [r7, #16]
 801deca:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 801decc:	687b      	ldr	r3, [r7, #4]
 801dece:	2200      	movs	r2, #0
 801ded0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 801ded2:	e00b      	b.n	801deec <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ded4:	2300      	movs	r3, #0
 801ded6:	60fb      	str	r3, [r7, #12]
 801ded8:	687b      	ldr	r3, [r7, #4]
 801deda:	681b      	ldr	r3, [r3, #0]
 801dedc:	695b      	ldr	r3, [r3, #20]
 801dede:	60fb      	str	r3, [r7, #12]
 801dee0:	687b      	ldr	r3, [r7, #4]
 801dee2:	681b      	ldr	r3, [r3, #0]
 801dee4:	699b      	ldr	r3, [r3, #24]
 801dee6:	60fb      	str	r3, [r7, #12]
 801dee8:	68fb      	ldr	r3, [r7, #12]
}
 801deea:	e7ff      	b.n	801deec <I2C_Master_ADDR+0x316>
 801deec:	bf00      	nop
 801deee:	3744      	adds	r7, #68	; 0x44
 801def0:	46bd      	mov	sp, r7
 801def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801def6:	4770      	bx	lr

0801def8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801def8:	b580      	push	{r7, lr}
 801defa:	b084      	sub	sp, #16
 801defc:	af00      	add	r7, sp, #0
 801defe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801df00:	687b      	ldr	r3, [r7, #4]
 801df02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801df06:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801df08:	687b      	ldr	r3, [r7, #4]
 801df0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801df0c:	b29b      	uxth	r3, r3
 801df0e:	2b00      	cmp	r3, #0
 801df10:	d02b      	beq.n	801df6a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801df12:	687b      	ldr	r3, [r7, #4]
 801df14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df16:	781a      	ldrb	r2, [r3, #0]
 801df18:	687b      	ldr	r3, [r7, #4]
 801df1a:	681b      	ldr	r3, [r3, #0]
 801df1c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801df1e:	687b      	ldr	r3, [r7, #4]
 801df20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df22:	1c5a      	adds	r2, r3, #1
 801df24:	687b      	ldr	r3, [r7, #4]
 801df26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801df28:	687b      	ldr	r3, [r7, #4]
 801df2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801df2c:	b29b      	uxth	r3, r3
 801df2e:	3b01      	subs	r3, #1
 801df30:	b29a      	uxth	r2, r3
 801df32:	687b      	ldr	r3, [r7, #4]
 801df34:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801df36:	687b      	ldr	r3, [r7, #4]
 801df38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801df3a:	b29b      	uxth	r3, r3
 801df3c:	2b00      	cmp	r3, #0
 801df3e:	d114      	bne.n	801df6a <I2C_SlaveTransmit_TXE+0x72>
 801df40:	7bfb      	ldrb	r3, [r7, #15]
 801df42:	2b29      	cmp	r3, #41	; 0x29
 801df44:	d111      	bne.n	801df6a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801df46:	687b      	ldr	r3, [r7, #4]
 801df48:	681b      	ldr	r3, [r3, #0]
 801df4a:	685a      	ldr	r2, [r3, #4]
 801df4c:	687b      	ldr	r3, [r7, #4]
 801df4e:	681b      	ldr	r3, [r3, #0]
 801df50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801df54:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801df56:	687b      	ldr	r3, [r7, #4]
 801df58:	2221      	movs	r2, #33	; 0x21
 801df5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801df5c:	687b      	ldr	r3, [r7, #4]
 801df5e:	2228      	movs	r2, #40	; 0x28
 801df60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801df64:	6878      	ldr	r0, [r7, #4]
 801df66:	f7ff f9fb 	bl	801d360 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801df6a:	bf00      	nop
 801df6c:	3710      	adds	r7, #16
 801df6e:	46bd      	mov	sp, r7
 801df70:	bd80      	pop	{r7, pc}

0801df72 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801df72:	b480      	push	{r7}
 801df74:	b083      	sub	sp, #12
 801df76:	af00      	add	r7, sp, #0
 801df78:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801df7e:	b29b      	uxth	r3, r3
 801df80:	2b00      	cmp	r3, #0
 801df82:	d011      	beq.n	801dfa8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801df84:	687b      	ldr	r3, [r7, #4]
 801df86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df88:	781a      	ldrb	r2, [r3, #0]
 801df8a:	687b      	ldr	r3, [r7, #4]
 801df8c:	681b      	ldr	r3, [r3, #0]
 801df8e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801df90:	687b      	ldr	r3, [r7, #4]
 801df92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df94:	1c5a      	adds	r2, r3, #1
 801df96:	687b      	ldr	r3, [r7, #4]
 801df98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801df9a:	687b      	ldr	r3, [r7, #4]
 801df9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801df9e:	b29b      	uxth	r3, r3
 801dfa0:	3b01      	subs	r3, #1
 801dfa2:	b29a      	uxth	r2, r3
 801dfa4:	687b      	ldr	r3, [r7, #4]
 801dfa6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801dfa8:	bf00      	nop
 801dfaa:	370c      	adds	r7, #12
 801dfac:	46bd      	mov	sp, r7
 801dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfb2:	4770      	bx	lr

0801dfb4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801dfb4:	b580      	push	{r7, lr}
 801dfb6:	b084      	sub	sp, #16
 801dfb8:	af00      	add	r7, sp, #0
 801dfba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801dfbc:	687b      	ldr	r3, [r7, #4]
 801dfbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801dfc2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801dfc4:	687b      	ldr	r3, [r7, #4]
 801dfc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801dfc8:	b29b      	uxth	r3, r3
 801dfca:	2b00      	cmp	r3, #0
 801dfcc:	d02c      	beq.n	801e028 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801dfce:	687b      	ldr	r3, [r7, #4]
 801dfd0:	681b      	ldr	r3, [r3, #0]
 801dfd2:	691a      	ldr	r2, [r3, #16]
 801dfd4:	687b      	ldr	r3, [r7, #4]
 801dfd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dfd8:	b2d2      	uxtb	r2, r2
 801dfda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801dfdc:	687b      	ldr	r3, [r7, #4]
 801dfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dfe0:	1c5a      	adds	r2, r3, #1
 801dfe2:	687b      	ldr	r3, [r7, #4]
 801dfe4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801dfe6:	687b      	ldr	r3, [r7, #4]
 801dfe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801dfea:	b29b      	uxth	r3, r3
 801dfec:	3b01      	subs	r3, #1
 801dfee:	b29a      	uxth	r2, r3
 801dff0:	687b      	ldr	r3, [r7, #4]
 801dff2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801dff4:	687b      	ldr	r3, [r7, #4]
 801dff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801dff8:	b29b      	uxth	r3, r3
 801dffa:	2b00      	cmp	r3, #0
 801dffc:	d114      	bne.n	801e028 <I2C_SlaveReceive_RXNE+0x74>
 801dffe:	7bfb      	ldrb	r3, [r7, #15]
 801e000:	2b2a      	cmp	r3, #42	; 0x2a
 801e002:	d111      	bne.n	801e028 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801e004:	687b      	ldr	r3, [r7, #4]
 801e006:	681b      	ldr	r3, [r3, #0]
 801e008:	685a      	ldr	r2, [r3, #4]
 801e00a:	687b      	ldr	r3, [r7, #4]
 801e00c:	681b      	ldr	r3, [r3, #0]
 801e00e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e012:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801e014:	687b      	ldr	r3, [r7, #4]
 801e016:	2222      	movs	r2, #34	; 0x22
 801e018:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801e01a:	687b      	ldr	r3, [r7, #4]
 801e01c:	2228      	movs	r2, #40	; 0x28
 801e01e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801e022:	6878      	ldr	r0, [r7, #4]
 801e024:	f7ff f9a6 	bl	801d374 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801e028:	bf00      	nop
 801e02a:	3710      	adds	r7, #16
 801e02c:	46bd      	mov	sp, r7
 801e02e:	bd80      	pop	{r7, pc}

0801e030 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801e030:	b480      	push	{r7}
 801e032:	b083      	sub	sp, #12
 801e034:	af00      	add	r7, sp, #0
 801e036:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e03c:	b29b      	uxth	r3, r3
 801e03e:	2b00      	cmp	r3, #0
 801e040:	d012      	beq.n	801e068 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e042:	687b      	ldr	r3, [r7, #4]
 801e044:	681b      	ldr	r3, [r3, #0]
 801e046:	691a      	ldr	r2, [r3, #16]
 801e048:	687b      	ldr	r3, [r7, #4]
 801e04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e04c:	b2d2      	uxtb	r2, r2
 801e04e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801e050:	687b      	ldr	r3, [r7, #4]
 801e052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e054:	1c5a      	adds	r2, r3, #1
 801e056:	687b      	ldr	r3, [r7, #4]
 801e058:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801e05a:	687b      	ldr	r3, [r7, #4]
 801e05c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e05e:	b29b      	uxth	r3, r3
 801e060:	3b01      	subs	r3, #1
 801e062:	b29a      	uxth	r2, r3
 801e064:	687b      	ldr	r3, [r7, #4]
 801e066:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801e068:	bf00      	nop
 801e06a:	370c      	adds	r7, #12
 801e06c:	46bd      	mov	sp, r7
 801e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e072:	4770      	bx	lr

0801e074 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 801e074:	b580      	push	{r7, lr}
 801e076:	b084      	sub	sp, #16
 801e078:	af00      	add	r7, sp, #0
 801e07a:	6078      	str	r0, [r7, #4]
 801e07c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 801e07e:	2300      	movs	r3, #0
 801e080:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801e082:	687b      	ldr	r3, [r7, #4]
 801e084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e088:	b2db      	uxtb	r3, r3
 801e08a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801e08e:	2b28      	cmp	r3, #40	; 0x28
 801e090:	d127      	bne.n	801e0e2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 801e092:	687b      	ldr	r3, [r7, #4]
 801e094:	681b      	ldr	r3, [r3, #0]
 801e096:	685a      	ldr	r2, [r3, #4]
 801e098:	687b      	ldr	r3, [r7, #4]
 801e09a:	681b      	ldr	r3, [r3, #0]
 801e09c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e0a0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 801e0a2:	683b      	ldr	r3, [r7, #0]
 801e0a4:	089b      	lsrs	r3, r3, #2
 801e0a6:	f003 0301 	and.w	r3, r3, #1
 801e0aa:	2b00      	cmp	r3, #0
 801e0ac:	d101      	bne.n	801e0b2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 801e0ae:	2301      	movs	r3, #1
 801e0b0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 801e0b2:	683b      	ldr	r3, [r7, #0]
 801e0b4:	09db      	lsrs	r3, r3, #7
 801e0b6:	f003 0301 	and.w	r3, r3, #1
 801e0ba:	2b00      	cmp	r3, #0
 801e0bc:	d103      	bne.n	801e0c6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 801e0be:	687b      	ldr	r3, [r7, #4]
 801e0c0:	68db      	ldr	r3, [r3, #12]
 801e0c2:	81bb      	strh	r3, [r7, #12]
 801e0c4:	e002      	b.n	801e0cc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 801e0c6:	687b      	ldr	r3, [r7, #4]
 801e0c8:	699b      	ldr	r3, [r3, #24]
 801e0ca:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	2200      	movs	r2, #0
 801e0d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 801e0d4:	89ba      	ldrh	r2, [r7, #12]
 801e0d6:	7bfb      	ldrb	r3, [r7, #15]
 801e0d8:	4619      	mov	r1, r3
 801e0da:	6878      	ldr	r0, [r7, #4]
 801e0dc:	f7ff f954 	bl	801d388 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801e0e0:	e00e      	b.n	801e100 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e0e2:	2300      	movs	r3, #0
 801e0e4:	60bb      	str	r3, [r7, #8]
 801e0e6:	687b      	ldr	r3, [r7, #4]
 801e0e8:	681b      	ldr	r3, [r3, #0]
 801e0ea:	695b      	ldr	r3, [r3, #20]
 801e0ec:	60bb      	str	r3, [r7, #8]
 801e0ee:	687b      	ldr	r3, [r7, #4]
 801e0f0:	681b      	ldr	r3, [r3, #0]
 801e0f2:	699b      	ldr	r3, [r3, #24]
 801e0f4:	60bb      	str	r3, [r7, #8]
 801e0f6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 801e0f8:	687b      	ldr	r3, [r7, #4]
 801e0fa:	2200      	movs	r2, #0
 801e0fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 801e100:	bf00      	nop
 801e102:	3710      	adds	r7, #16
 801e104:	46bd      	mov	sp, r7
 801e106:	bd80      	pop	{r7, pc}

0801e108 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 801e108:	b580      	push	{r7, lr}
 801e10a:	b084      	sub	sp, #16
 801e10c:	af00      	add	r7, sp, #0
 801e10e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e110:	687b      	ldr	r3, [r7, #4]
 801e112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e116:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e118:	687b      	ldr	r3, [r7, #4]
 801e11a:	681b      	ldr	r3, [r3, #0]
 801e11c:	685a      	ldr	r2, [r3, #4]
 801e11e:	687b      	ldr	r3, [r7, #4]
 801e120:	681b      	ldr	r3, [r3, #0]
 801e122:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e126:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 801e128:	2300      	movs	r3, #0
 801e12a:	60bb      	str	r3, [r7, #8]
 801e12c:	687b      	ldr	r3, [r7, #4]
 801e12e:	681b      	ldr	r3, [r3, #0]
 801e130:	695b      	ldr	r3, [r3, #20]
 801e132:	60bb      	str	r3, [r7, #8]
 801e134:	687b      	ldr	r3, [r7, #4]
 801e136:	681b      	ldr	r3, [r3, #0]
 801e138:	681a      	ldr	r2, [r3, #0]
 801e13a:	687b      	ldr	r3, [r7, #4]
 801e13c:	681b      	ldr	r3, [r3, #0]
 801e13e:	f042 0201 	orr.w	r2, r2, #1
 801e142:	601a      	str	r2, [r3, #0]
 801e144:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e146:	687b      	ldr	r3, [r7, #4]
 801e148:	681b      	ldr	r3, [r3, #0]
 801e14a:	681a      	ldr	r2, [r3, #0]
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	681b      	ldr	r3, [r3, #0]
 801e150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e154:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801e156:	687b      	ldr	r3, [r7, #4]
 801e158:	681b      	ldr	r3, [r3, #0]
 801e15a:	685b      	ldr	r3, [r3, #4]
 801e15c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e164:	d172      	bne.n	801e24c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801e166:	7bfb      	ldrb	r3, [r7, #15]
 801e168:	2b22      	cmp	r3, #34	; 0x22
 801e16a:	d002      	beq.n	801e172 <I2C_Slave_STOPF+0x6a>
 801e16c:	7bfb      	ldrb	r3, [r7, #15]
 801e16e:	2b2a      	cmp	r3, #42	; 0x2a
 801e170:	d135      	bne.n	801e1de <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 801e172:	687b      	ldr	r3, [r7, #4]
 801e174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e176:	681b      	ldr	r3, [r3, #0]
 801e178:	685b      	ldr	r3, [r3, #4]
 801e17a:	b29a      	uxth	r2, r3
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801e180:	687b      	ldr	r3, [r7, #4]
 801e182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e184:	b29b      	uxth	r3, r3
 801e186:	2b00      	cmp	r3, #0
 801e188:	d005      	beq.n	801e196 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801e18a:	687b      	ldr	r3, [r7, #4]
 801e18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e18e:	f043 0204 	orr.w	r2, r3, #4
 801e192:	687b      	ldr	r3, [r7, #4]
 801e194:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801e196:	687b      	ldr	r3, [r7, #4]
 801e198:	681b      	ldr	r3, [r3, #0]
 801e19a:	685a      	ldr	r2, [r3, #4]
 801e19c:	687b      	ldr	r3, [r7, #4]
 801e19e:	681b      	ldr	r3, [r3, #0]
 801e1a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e1a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801e1a6:	687b      	ldr	r3, [r7, #4]
 801e1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e1aa:	4618      	mov	r0, r3
 801e1ac:	f7fd fc90 	bl	801bad0 <HAL_DMA_GetState>
 801e1b0:	4603      	mov	r3, r0
 801e1b2:	2b01      	cmp	r3, #1
 801e1b4:	d049      	beq.n	801e24a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801e1b6:	687b      	ldr	r3, [r7, #4]
 801e1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e1ba:	4a69      	ldr	r2, [pc, #420]	; (801e360 <I2C_Slave_STOPF+0x258>)
 801e1bc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801e1be:	687b      	ldr	r3, [r7, #4]
 801e1c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e1c2:	4618      	mov	r0, r3
 801e1c4:	f7fd fad8 	bl	801b778 <HAL_DMA_Abort_IT>
 801e1c8:	4603      	mov	r3, r0
 801e1ca:	2b00      	cmp	r3, #0
 801e1cc:	d03d      	beq.n	801e24a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801e1ce:	687b      	ldr	r3, [r7, #4]
 801e1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e1d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e1d4:	687a      	ldr	r2, [r7, #4]
 801e1d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801e1d8:	4610      	mov	r0, r2
 801e1da:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801e1dc:	e035      	b.n	801e24a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 801e1de:	687b      	ldr	r3, [r7, #4]
 801e1e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e1e2:	681b      	ldr	r3, [r3, #0]
 801e1e4:	685b      	ldr	r3, [r3, #4]
 801e1e6:	b29a      	uxth	r2, r3
 801e1e8:	687b      	ldr	r3, [r7, #4]
 801e1ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801e1ec:	687b      	ldr	r3, [r7, #4]
 801e1ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e1f0:	b29b      	uxth	r3, r3
 801e1f2:	2b00      	cmp	r3, #0
 801e1f4:	d005      	beq.n	801e202 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801e1f6:	687b      	ldr	r3, [r7, #4]
 801e1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e1fa:	f043 0204 	orr.w	r2, r3, #4
 801e1fe:	687b      	ldr	r3, [r7, #4]
 801e200:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801e202:	687b      	ldr	r3, [r7, #4]
 801e204:	681b      	ldr	r3, [r3, #0]
 801e206:	685a      	ldr	r2, [r3, #4]
 801e208:	687b      	ldr	r3, [r7, #4]
 801e20a:	681b      	ldr	r3, [r3, #0]
 801e20c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e210:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801e212:	687b      	ldr	r3, [r7, #4]
 801e214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e216:	4618      	mov	r0, r3
 801e218:	f7fd fc5a 	bl	801bad0 <HAL_DMA_GetState>
 801e21c:	4603      	mov	r3, r0
 801e21e:	2b01      	cmp	r3, #1
 801e220:	d014      	beq.n	801e24c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801e222:	687b      	ldr	r3, [r7, #4]
 801e224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e226:	4a4e      	ldr	r2, [pc, #312]	; (801e360 <I2C_Slave_STOPF+0x258>)
 801e228:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801e22a:	687b      	ldr	r3, [r7, #4]
 801e22c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e22e:	4618      	mov	r0, r3
 801e230:	f7fd faa2 	bl	801b778 <HAL_DMA_Abort_IT>
 801e234:	4603      	mov	r3, r0
 801e236:	2b00      	cmp	r3, #0
 801e238:	d008      	beq.n	801e24c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801e23a:	687b      	ldr	r3, [r7, #4]
 801e23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e23e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e240:	687a      	ldr	r2, [r7, #4]
 801e242:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801e244:	4610      	mov	r0, r2
 801e246:	4798      	blx	r3
 801e248:	e000      	b.n	801e24c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801e24a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801e24c:	687b      	ldr	r3, [r7, #4]
 801e24e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e250:	b29b      	uxth	r3, r3
 801e252:	2b00      	cmp	r3, #0
 801e254:	d03e      	beq.n	801e2d4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801e256:	687b      	ldr	r3, [r7, #4]
 801e258:	681b      	ldr	r3, [r3, #0]
 801e25a:	695b      	ldr	r3, [r3, #20]
 801e25c:	f003 0304 	and.w	r3, r3, #4
 801e260:	2b04      	cmp	r3, #4
 801e262:	d112      	bne.n	801e28a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e264:	687b      	ldr	r3, [r7, #4]
 801e266:	681b      	ldr	r3, [r3, #0]
 801e268:	691a      	ldr	r2, [r3, #16]
 801e26a:	687b      	ldr	r3, [r7, #4]
 801e26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e26e:	b2d2      	uxtb	r2, r2
 801e270:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801e272:	687b      	ldr	r3, [r7, #4]
 801e274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e276:	1c5a      	adds	r2, r3, #1
 801e278:	687b      	ldr	r3, [r7, #4]
 801e27a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801e27c:	687b      	ldr	r3, [r7, #4]
 801e27e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e280:	b29b      	uxth	r3, r3
 801e282:	3b01      	subs	r3, #1
 801e284:	b29a      	uxth	r2, r3
 801e286:	687b      	ldr	r3, [r7, #4]
 801e288:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801e28a:	687b      	ldr	r3, [r7, #4]
 801e28c:	681b      	ldr	r3, [r3, #0]
 801e28e:	695b      	ldr	r3, [r3, #20]
 801e290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e294:	2b40      	cmp	r3, #64	; 0x40
 801e296:	d112      	bne.n	801e2be <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e298:	687b      	ldr	r3, [r7, #4]
 801e29a:	681b      	ldr	r3, [r3, #0]
 801e29c:	691a      	ldr	r2, [r3, #16]
 801e29e:	687b      	ldr	r3, [r7, #4]
 801e2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e2a2:	b2d2      	uxtb	r2, r2
 801e2a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801e2a6:	687b      	ldr	r3, [r7, #4]
 801e2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e2aa:	1c5a      	adds	r2, r3, #1
 801e2ac:	687b      	ldr	r3, [r7, #4]
 801e2ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801e2b0:	687b      	ldr	r3, [r7, #4]
 801e2b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e2b4:	b29b      	uxth	r3, r3
 801e2b6:	3b01      	subs	r3, #1
 801e2b8:	b29a      	uxth	r2, r3
 801e2ba:	687b      	ldr	r3, [r7, #4]
 801e2bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 801e2be:	687b      	ldr	r3, [r7, #4]
 801e2c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e2c2:	b29b      	uxth	r3, r3
 801e2c4:	2b00      	cmp	r3, #0
 801e2c6:	d005      	beq.n	801e2d4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801e2c8:	687b      	ldr	r3, [r7, #4]
 801e2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e2cc:	f043 0204 	orr.w	r2, r3, #4
 801e2d0:	687b      	ldr	r3, [r7, #4]
 801e2d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801e2d4:	687b      	ldr	r3, [r7, #4]
 801e2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e2d8:	2b00      	cmp	r3, #0
 801e2da:	d003      	beq.n	801e2e4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 801e2dc:	6878      	ldr	r0, [r7, #4]
 801e2de:	f000 f8b3 	bl	801e448 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 801e2e2:	e039      	b.n	801e358 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801e2e4:	7bfb      	ldrb	r3, [r7, #15]
 801e2e6:	2b2a      	cmp	r3, #42	; 0x2a
 801e2e8:	d109      	bne.n	801e2fe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 801e2ea:	687b      	ldr	r3, [r7, #4]
 801e2ec:	2200      	movs	r2, #0
 801e2ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801e2f0:	687b      	ldr	r3, [r7, #4]
 801e2f2:	2228      	movs	r2, #40	; 0x28
 801e2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801e2f8:	6878      	ldr	r0, [r7, #4]
 801e2fa:	f7ff f83b 	bl	801d374 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801e2fe:	687b      	ldr	r3, [r7, #4]
 801e300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e304:	b2db      	uxtb	r3, r3
 801e306:	2b28      	cmp	r3, #40	; 0x28
 801e308:	d111      	bne.n	801e32e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801e30a:	687b      	ldr	r3, [r7, #4]
 801e30c:	4a15      	ldr	r2, [pc, #84]	; (801e364 <I2C_Slave_STOPF+0x25c>)
 801e30e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 801e310:	687b      	ldr	r3, [r7, #4]
 801e312:	2200      	movs	r2, #0
 801e314:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801e316:	687b      	ldr	r3, [r7, #4]
 801e318:	2220      	movs	r2, #32
 801e31a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801e31e:	687b      	ldr	r3, [r7, #4]
 801e320:	2200      	movs	r2, #0
 801e322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 801e326:	6878      	ldr	r0, [r7, #4]
 801e328:	f7ff f83c 	bl	801d3a4 <HAL_I2C_ListenCpltCallback>
}
 801e32c:	e014      	b.n	801e358 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801e32e:	687b      	ldr	r3, [r7, #4]
 801e330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e332:	2b22      	cmp	r3, #34	; 0x22
 801e334:	d002      	beq.n	801e33c <I2C_Slave_STOPF+0x234>
 801e336:	7bfb      	ldrb	r3, [r7, #15]
 801e338:	2b22      	cmp	r3, #34	; 0x22
 801e33a:	d10d      	bne.n	801e358 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 801e33c:	687b      	ldr	r3, [r7, #4]
 801e33e:	2200      	movs	r2, #0
 801e340:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801e342:	687b      	ldr	r3, [r7, #4]
 801e344:	2220      	movs	r2, #32
 801e346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801e34a:	687b      	ldr	r3, [r7, #4]
 801e34c:	2200      	movs	r2, #0
 801e34e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 801e352:	6878      	ldr	r0, [r7, #4]
 801e354:	f7ff f80e 	bl	801d374 <HAL_I2C_SlaveRxCpltCallback>
}
 801e358:	bf00      	nop
 801e35a:	3710      	adds	r7, #16
 801e35c:	46bd      	mov	sp, r7
 801e35e:	bd80      	pop	{r7, pc}
 801e360:	0801ebcd 	.word	0x0801ebcd
 801e364:	ffff0000 	.word	0xffff0000

0801e368 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 801e368:	b580      	push	{r7, lr}
 801e36a:	b084      	sub	sp, #16
 801e36c:	af00      	add	r7, sp, #0
 801e36e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e370:	687b      	ldr	r3, [r7, #4]
 801e372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e376:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801e378:	687b      	ldr	r3, [r7, #4]
 801e37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e37c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 801e37e:	68bb      	ldr	r3, [r7, #8]
 801e380:	2b08      	cmp	r3, #8
 801e382:	d002      	beq.n	801e38a <I2C_Slave_AF+0x22>
 801e384:	68bb      	ldr	r3, [r7, #8]
 801e386:	2b20      	cmp	r3, #32
 801e388:	d129      	bne.n	801e3de <I2C_Slave_AF+0x76>
 801e38a:	7bfb      	ldrb	r3, [r7, #15]
 801e38c:	2b28      	cmp	r3, #40	; 0x28
 801e38e:	d126      	bne.n	801e3de <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801e390:	687b      	ldr	r3, [r7, #4]
 801e392:	4a2c      	ldr	r2, [pc, #176]	; (801e444 <I2C_Slave_AF+0xdc>)
 801e394:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e396:	687b      	ldr	r3, [r7, #4]
 801e398:	681b      	ldr	r3, [r3, #0]
 801e39a:	685a      	ldr	r2, [r3, #4]
 801e39c:	687b      	ldr	r3, [r7, #4]
 801e39e:	681b      	ldr	r3, [r3, #0]
 801e3a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e3a4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801e3a6:	687b      	ldr	r3, [r7, #4]
 801e3a8:	681b      	ldr	r3, [r3, #0]
 801e3aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801e3ae:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e3b0:	687b      	ldr	r3, [r7, #4]
 801e3b2:	681b      	ldr	r3, [r3, #0]
 801e3b4:	681a      	ldr	r2, [r3, #0]
 801e3b6:	687b      	ldr	r3, [r7, #4]
 801e3b8:	681b      	ldr	r3, [r3, #0]
 801e3ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e3be:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 801e3c0:	687b      	ldr	r3, [r7, #4]
 801e3c2:	2200      	movs	r2, #0
 801e3c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801e3c6:	687b      	ldr	r3, [r7, #4]
 801e3c8:	2220      	movs	r2, #32
 801e3ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801e3ce:	687b      	ldr	r3, [r7, #4]
 801e3d0:	2200      	movs	r2, #0
 801e3d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801e3d6:	6878      	ldr	r0, [r7, #4]
 801e3d8:	f7fe ffe4 	bl	801d3a4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 801e3dc:	e02e      	b.n	801e43c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801e3de:	7bfb      	ldrb	r3, [r7, #15]
 801e3e0:	2b21      	cmp	r3, #33	; 0x21
 801e3e2:	d126      	bne.n	801e432 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801e3e4:	687b      	ldr	r3, [r7, #4]
 801e3e6:	4a17      	ldr	r2, [pc, #92]	; (801e444 <I2C_Slave_AF+0xdc>)
 801e3e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801e3ea:	687b      	ldr	r3, [r7, #4]
 801e3ec:	2221      	movs	r2, #33	; 0x21
 801e3ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801e3f0:	687b      	ldr	r3, [r7, #4]
 801e3f2:	2220      	movs	r2, #32
 801e3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801e3f8:	687b      	ldr	r3, [r7, #4]
 801e3fa:	2200      	movs	r2, #0
 801e3fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e400:	687b      	ldr	r3, [r7, #4]
 801e402:	681b      	ldr	r3, [r3, #0]
 801e404:	685a      	ldr	r2, [r3, #4]
 801e406:	687b      	ldr	r3, [r7, #4]
 801e408:	681b      	ldr	r3, [r3, #0]
 801e40a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e40e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801e410:	687b      	ldr	r3, [r7, #4]
 801e412:	681b      	ldr	r3, [r3, #0]
 801e414:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801e418:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e41a:	687b      	ldr	r3, [r7, #4]
 801e41c:	681b      	ldr	r3, [r3, #0]
 801e41e:	681a      	ldr	r2, [r3, #0]
 801e420:	687b      	ldr	r3, [r7, #4]
 801e422:	681b      	ldr	r3, [r3, #0]
 801e424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e428:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801e42a:	6878      	ldr	r0, [r7, #4]
 801e42c:	f7fe ff98 	bl	801d360 <HAL_I2C_SlaveTxCpltCallback>
}
 801e430:	e004      	b.n	801e43c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801e432:	687b      	ldr	r3, [r7, #4]
 801e434:	681b      	ldr	r3, [r3, #0]
 801e436:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801e43a:	615a      	str	r2, [r3, #20]
}
 801e43c:	bf00      	nop
 801e43e:	3710      	adds	r7, #16
 801e440:	46bd      	mov	sp, r7
 801e442:	bd80      	pop	{r7, pc}
 801e444:	ffff0000 	.word	0xffff0000

0801e448 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 801e448:	b580      	push	{r7, lr}
 801e44a:	b084      	sub	sp, #16
 801e44c:	af00      	add	r7, sp, #0
 801e44e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e456:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 801e458:	687b      	ldr	r3, [r7, #4]
 801e45a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e45e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801e460:	7bbb      	ldrb	r3, [r7, #14]
 801e462:	2b10      	cmp	r3, #16
 801e464:	d002      	beq.n	801e46c <I2C_ITError+0x24>
 801e466:	7bbb      	ldrb	r3, [r7, #14]
 801e468:	2b40      	cmp	r3, #64	; 0x40
 801e46a:	d10a      	bne.n	801e482 <I2C_ITError+0x3a>
 801e46c:	7bfb      	ldrb	r3, [r7, #15]
 801e46e:	2b22      	cmp	r3, #34	; 0x22
 801e470:	d107      	bne.n	801e482 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 801e472:	687b      	ldr	r3, [r7, #4]
 801e474:	681b      	ldr	r3, [r3, #0]
 801e476:	681a      	ldr	r2, [r3, #0]
 801e478:	687b      	ldr	r3, [r7, #4]
 801e47a:	681b      	ldr	r3, [r3, #0]
 801e47c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e480:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801e482:	7bfb      	ldrb	r3, [r7, #15]
 801e484:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801e488:	2b28      	cmp	r3, #40	; 0x28
 801e48a:	d107      	bne.n	801e49c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 801e48c:	687b      	ldr	r3, [r7, #4]
 801e48e:	2200      	movs	r2, #0
 801e490:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 801e492:	687b      	ldr	r3, [r7, #4]
 801e494:	2228      	movs	r2, #40	; 0x28
 801e496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801e49a:	e015      	b.n	801e4c8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 801e49c:	687b      	ldr	r3, [r7, #4]
 801e49e:	681b      	ldr	r3, [r3, #0]
 801e4a0:	685b      	ldr	r3, [r3, #4]
 801e4a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e4a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e4aa:	d00a      	beq.n	801e4c2 <I2C_ITError+0x7a>
 801e4ac:	7bfb      	ldrb	r3, [r7, #15]
 801e4ae:	2b60      	cmp	r3, #96	; 0x60
 801e4b0:	d007      	beq.n	801e4c2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 801e4b2:	687b      	ldr	r3, [r7, #4]
 801e4b4:	2220      	movs	r2, #32
 801e4b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801e4ba:	687b      	ldr	r3, [r7, #4]
 801e4bc:	2200      	movs	r2, #0
 801e4be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 801e4c2:	687b      	ldr	r3, [r7, #4]
 801e4c4:	2200      	movs	r2, #0
 801e4c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801e4c8:	687b      	ldr	r3, [r7, #4]
 801e4ca:	681b      	ldr	r3, [r3, #0]
 801e4cc:	685b      	ldr	r3, [r3, #4]
 801e4ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e4d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e4d6:	d162      	bne.n	801e59e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 801e4d8:	687b      	ldr	r3, [r7, #4]
 801e4da:	681b      	ldr	r3, [r3, #0]
 801e4dc:	685a      	ldr	r2, [r3, #4]
 801e4de:	687b      	ldr	r3, [r7, #4]
 801e4e0:	681b      	ldr	r3, [r3, #0]
 801e4e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e4e6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 801e4e8:	687b      	ldr	r3, [r7, #4]
 801e4ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e4ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e4f0:	b2db      	uxtb	r3, r3
 801e4f2:	2b01      	cmp	r3, #1
 801e4f4:	d020      	beq.n	801e538 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801e4f6:	687b      	ldr	r3, [r7, #4]
 801e4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e4fa:	4a6a      	ldr	r2, [pc, #424]	; (801e6a4 <I2C_ITError+0x25c>)
 801e4fc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801e4fe:	687b      	ldr	r3, [r7, #4]
 801e500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e502:	4618      	mov	r0, r3
 801e504:	f7fd f938 	bl	801b778 <HAL_DMA_Abort_IT>
 801e508:	4603      	mov	r3, r0
 801e50a:	2b00      	cmp	r3, #0
 801e50c:	f000 8089 	beq.w	801e622 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801e510:	687b      	ldr	r3, [r7, #4]
 801e512:	681b      	ldr	r3, [r3, #0]
 801e514:	681a      	ldr	r2, [r3, #0]
 801e516:	687b      	ldr	r3, [r7, #4]
 801e518:	681b      	ldr	r3, [r3, #0]
 801e51a:	f022 0201 	bic.w	r2, r2, #1
 801e51e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801e520:	687b      	ldr	r3, [r7, #4]
 801e522:	2220      	movs	r2, #32
 801e524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801e528:	687b      	ldr	r3, [r7, #4]
 801e52a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e52c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e52e:	687a      	ldr	r2, [r7, #4]
 801e530:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801e532:	4610      	mov	r0, r2
 801e534:	4798      	blx	r3
 801e536:	e074      	b.n	801e622 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801e538:	687b      	ldr	r3, [r7, #4]
 801e53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e53c:	4a59      	ldr	r2, [pc, #356]	; (801e6a4 <I2C_ITError+0x25c>)
 801e53e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801e540:	687b      	ldr	r3, [r7, #4]
 801e542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e544:	4618      	mov	r0, r3
 801e546:	f7fd f917 	bl	801b778 <HAL_DMA_Abort_IT>
 801e54a:	4603      	mov	r3, r0
 801e54c:	2b00      	cmp	r3, #0
 801e54e:	d068      	beq.n	801e622 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801e550:	687b      	ldr	r3, [r7, #4]
 801e552:	681b      	ldr	r3, [r3, #0]
 801e554:	695b      	ldr	r3, [r3, #20]
 801e556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e55a:	2b40      	cmp	r3, #64	; 0x40
 801e55c:	d10b      	bne.n	801e576 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e55e:	687b      	ldr	r3, [r7, #4]
 801e560:	681b      	ldr	r3, [r3, #0]
 801e562:	691a      	ldr	r2, [r3, #16]
 801e564:	687b      	ldr	r3, [r7, #4]
 801e566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e568:	b2d2      	uxtb	r2, r2
 801e56a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801e56c:	687b      	ldr	r3, [r7, #4]
 801e56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e570:	1c5a      	adds	r2, r3, #1
 801e572:	687b      	ldr	r3, [r7, #4]
 801e574:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801e576:	687b      	ldr	r3, [r7, #4]
 801e578:	681b      	ldr	r3, [r3, #0]
 801e57a:	681a      	ldr	r2, [r3, #0]
 801e57c:	687b      	ldr	r3, [r7, #4]
 801e57e:	681b      	ldr	r3, [r3, #0]
 801e580:	f022 0201 	bic.w	r2, r2, #1
 801e584:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801e586:	687b      	ldr	r3, [r7, #4]
 801e588:	2220      	movs	r2, #32
 801e58a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801e58e:	687b      	ldr	r3, [r7, #4]
 801e590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e594:	687a      	ldr	r2, [r7, #4]
 801e596:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801e598:	4610      	mov	r0, r2
 801e59a:	4798      	blx	r3
 801e59c:	e041      	b.n	801e622 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 801e59e:	687b      	ldr	r3, [r7, #4]
 801e5a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e5a4:	b2db      	uxtb	r3, r3
 801e5a6:	2b60      	cmp	r3, #96	; 0x60
 801e5a8:	d125      	bne.n	801e5f6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801e5aa:	687b      	ldr	r3, [r7, #4]
 801e5ac:	2220      	movs	r2, #32
 801e5ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801e5b2:	687b      	ldr	r3, [r7, #4]
 801e5b4:	2200      	movs	r2, #0
 801e5b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801e5b8:	687b      	ldr	r3, [r7, #4]
 801e5ba:	681b      	ldr	r3, [r3, #0]
 801e5bc:	695b      	ldr	r3, [r3, #20]
 801e5be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e5c2:	2b40      	cmp	r3, #64	; 0x40
 801e5c4:	d10b      	bne.n	801e5de <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e5c6:	687b      	ldr	r3, [r7, #4]
 801e5c8:	681b      	ldr	r3, [r3, #0]
 801e5ca:	691a      	ldr	r2, [r3, #16]
 801e5cc:	687b      	ldr	r3, [r7, #4]
 801e5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e5d0:	b2d2      	uxtb	r2, r2
 801e5d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801e5d4:	687b      	ldr	r3, [r7, #4]
 801e5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e5d8:	1c5a      	adds	r2, r3, #1
 801e5da:	687b      	ldr	r3, [r7, #4]
 801e5dc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 801e5de:	687b      	ldr	r3, [r7, #4]
 801e5e0:	681b      	ldr	r3, [r3, #0]
 801e5e2:	681a      	ldr	r2, [r3, #0]
 801e5e4:	687b      	ldr	r3, [r7, #4]
 801e5e6:	681b      	ldr	r3, [r3, #0]
 801e5e8:	f022 0201 	bic.w	r2, r2, #1
 801e5ec:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801e5ee:	6878      	ldr	r0, [r7, #4]
 801e5f0:	f7fe feec 	bl	801d3cc <HAL_I2C_AbortCpltCallback>
 801e5f4:	e015      	b.n	801e622 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801e5f6:	687b      	ldr	r3, [r7, #4]
 801e5f8:	681b      	ldr	r3, [r3, #0]
 801e5fa:	695b      	ldr	r3, [r3, #20]
 801e5fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e600:	2b40      	cmp	r3, #64	; 0x40
 801e602:	d10b      	bne.n	801e61c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e604:	687b      	ldr	r3, [r7, #4]
 801e606:	681b      	ldr	r3, [r3, #0]
 801e608:	691a      	ldr	r2, [r3, #16]
 801e60a:	687b      	ldr	r3, [r7, #4]
 801e60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e60e:	b2d2      	uxtb	r2, r2
 801e610:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801e612:	687b      	ldr	r3, [r7, #4]
 801e614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e616:	1c5a      	adds	r2, r3, #1
 801e618:	687b      	ldr	r3, [r7, #4]
 801e61a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801e61c:	6878      	ldr	r0, [r7, #4]
 801e61e:	f7fe fecb 	bl	801d3b8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 801e622:	687b      	ldr	r3, [r7, #4]
 801e624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e626:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801e628:	68bb      	ldr	r3, [r7, #8]
 801e62a:	f003 0301 	and.w	r3, r3, #1
 801e62e:	2b00      	cmp	r3, #0
 801e630:	d10e      	bne.n	801e650 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801e632:	68bb      	ldr	r3, [r7, #8]
 801e634:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801e638:	2b00      	cmp	r3, #0
 801e63a:	d109      	bne.n	801e650 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801e63c:	68bb      	ldr	r3, [r7, #8]
 801e63e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801e642:	2b00      	cmp	r3, #0
 801e644:	d104      	bne.n	801e650 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 801e646:	68bb      	ldr	r3, [r7, #8]
 801e648:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801e64c:	2b00      	cmp	r3, #0
 801e64e:	d007      	beq.n	801e660 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e650:	687b      	ldr	r3, [r7, #4]
 801e652:	681b      	ldr	r3, [r3, #0]
 801e654:	685a      	ldr	r2, [r3, #4]
 801e656:	687b      	ldr	r3, [r7, #4]
 801e658:	681b      	ldr	r3, [r3, #0]
 801e65a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e65e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 801e660:	687b      	ldr	r3, [r7, #4]
 801e662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e666:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 801e668:	687b      	ldr	r3, [r7, #4]
 801e66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e66c:	f003 0304 	and.w	r3, r3, #4
 801e670:	2b04      	cmp	r3, #4
 801e672:	d113      	bne.n	801e69c <I2C_ITError+0x254>
 801e674:	7bfb      	ldrb	r3, [r7, #15]
 801e676:	2b28      	cmp	r3, #40	; 0x28
 801e678:	d110      	bne.n	801e69c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801e67a:	687b      	ldr	r3, [r7, #4]
 801e67c:	4a0a      	ldr	r2, [pc, #40]	; (801e6a8 <I2C_ITError+0x260>)
 801e67e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 801e680:	687b      	ldr	r3, [r7, #4]
 801e682:	2200      	movs	r2, #0
 801e684:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801e686:	687b      	ldr	r3, [r7, #4]
 801e688:	2220      	movs	r2, #32
 801e68a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801e68e:	687b      	ldr	r3, [r7, #4]
 801e690:	2200      	movs	r2, #0
 801e692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801e696:	6878      	ldr	r0, [r7, #4]
 801e698:	f7fe fe84 	bl	801d3a4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801e69c:	bf00      	nop
 801e69e:	3710      	adds	r7, #16
 801e6a0:	46bd      	mov	sp, r7
 801e6a2:	bd80      	pop	{r7, pc}
 801e6a4:	0801ebcd 	.word	0x0801ebcd
 801e6a8:	ffff0000 	.word	0xffff0000

0801e6ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801e6ac:	b580      	push	{r7, lr}
 801e6ae:	b088      	sub	sp, #32
 801e6b0:	af02      	add	r7, sp, #8
 801e6b2:	60f8      	str	r0, [r7, #12]
 801e6b4:	4608      	mov	r0, r1
 801e6b6:	4611      	mov	r1, r2
 801e6b8:	461a      	mov	r2, r3
 801e6ba:	4603      	mov	r3, r0
 801e6bc:	817b      	strh	r3, [r7, #10]
 801e6be:	460b      	mov	r3, r1
 801e6c0:	813b      	strh	r3, [r7, #8]
 801e6c2:	4613      	mov	r3, r2
 801e6c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801e6c6:	68fb      	ldr	r3, [r7, #12]
 801e6c8:	681b      	ldr	r3, [r3, #0]
 801e6ca:	681a      	ldr	r2, [r3, #0]
 801e6cc:	68fb      	ldr	r3, [r7, #12]
 801e6ce:	681b      	ldr	r3, [r3, #0]
 801e6d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e6d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801e6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6d8:	9300      	str	r3, [sp, #0]
 801e6da:	6a3b      	ldr	r3, [r7, #32]
 801e6dc:	2200      	movs	r2, #0
 801e6de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801e6e2:	68f8      	ldr	r0, [r7, #12]
 801e6e4:	f000 fb1a 	bl	801ed1c <I2C_WaitOnFlagUntilTimeout>
 801e6e8:	4603      	mov	r3, r0
 801e6ea:	2b00      	cmp	r3, #0
 801e6ec:	d00d      	beq.n	801e70a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801e6ee:	68fb      	ldr	r3, [r7, #12]
 801e6f0:	681b      	ldr	r3, [r3, #0]
 801e6f2:	681b      	ldr	r3, [r3, #0]
 801e6f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e6f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e6fc:	d103      	bne.n	801e706 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801e6fe:	68fb      	ldr	r3, [r7, #12]
 801e700:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e704:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801e706:	2303      	movs	r3, #3
 801e708:	e05f      	b.n	801e7ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801e70a:	897b      	ldrh	r3, [r7, #10]
 801e70c:	b2db      	uxtb	r3, r3
 801e70e:	461a      	mov	r2, r3
 801e710:	68fb      	ldr	r3, [r7, #12]
 801e712:	681b      	ldr	r3, [r3, #0]
 801e714:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801e718:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801e71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e71c:	6a3a      	ldr	r2, [r7, #32]
 801e71e:	492d      	ldr	r1, [pc, #180]	; (801e7d4 <I2C_RequestMemoryWrite+0x128>)
 801e720:	68f8      	ldr	r0, [r7, #12]
 801e722:	f000 fb52 	bl	801edca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801e726:	4603      	mov	r3, r0
 801e728:	2b00      	cmp	r3, #0
 801e72a:	d001      	beq.n	801e730 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 801e72c:	2301      	movs	r3, #1
 801e72e:	e04c      	b.n	801e7ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e730:	2300      	movs	r3, #0
 801e732:	617b      	str	r3, [r7, #20]
 801e734:	68fb      	ldr	r3, [r7, #12]
 801e736:	681b      	ldr	r3, [r3, #0]
 801e738:	695b      	ldr	r3, [r3, #20]
 801e73a:	617b      	str	r3, [r7, #20]
 801e73c:	68fb      	ldr	r3, [r7, #12]
 801e73e:	681b      	ldr	r3, [r3, #0]
 801e740:	699b      	ldr	r3, [r3, #24]
 801e742:	617b      	str	r3, [r7, #20]
 801e744:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801e746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e748:	6a39      	ldr	r1, [r7, #32]
 801e74a:	68f8      	ldr	r0, [r7, #12]
 801e74c:	f000 fbbc 	bl	801eec8 <I2C_WaitOnTXEFlagUntilTimeout>
 801e750:	4603      	mov	r3, r0
 801e752:	2b00      	cmp	r3, #0
 801e754:	d00d      	beq.n	801e772 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801e756:	68fb      	ldr	r3, [r7, #12]
 801e758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e75a:	2b04      	cmp	r3, #4
 801e75c:	d107      	bne.n	801e76e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e75e:	68fb      	ldr	r3, [r7, #12]
 801e760:	681b      	ldr	r3, [r3, #0]
 801e762:	681a      	ldr	r2, [r3, #0]
 801e764:	68fb      	ldr	r3, [r7, #12]
 801e766:	681b      	ldr	r3, [r3, #0]
 801e768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e76c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801e76e:	2301      	movs	r3, #1
 801e770:	e02b      	b.n	801e7ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801e772:	88fb      	ldrh	r3, [r7, #6]
 801e774:	2b01      	cmp	r3, #1
 801e776:	d105      	bne.n	801e784 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801e778:	893b      	ldrh	r3, [r7, #8]
 801e77a:	b2da      	uxtb	r2, r3
 801e77c:	68fb      	ldr	r3, [r7, #12]
 801e77e:	681b      	ldr	r3, [r3, #0]
 801e780:	611a      	str	r2, [r3, #16]
 801e782:	e021      	b.n	801e7c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801e784:	893b      	ldrh	r3, [r7, #8]
 801e786:	0a1b      	lsrs	r3, r3, #8
 801e788:	b29b      	uxth	r3, r3
 801e78a:	b2da      	uxtb	r2, r3
 801e78c:	68fb      	ldr	r3, [r7, #12]
 801e78e:	681b      	ldr	r3, [r3, #0]
 801e790:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801e792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e794:	6a39      	ldr	r1, [r7, #32]
 801e796:	68f8      	ldr	r0, [r7, #12]
 801e798:	f000 fb96 	bl	801eec8 <I2C_WaitOnTXEFlagUntilTimeout>
 801e79c:	4603      	mov	r3, r0
 801e79e:	2b00      	cmp	r3, #0
 801e7a0:	d00d      	beq.n	801e7be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801e7a2:	68fb      	ldr	r3, [r7, #12]
 801e7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e7a6:	2b04      	cmp	r3, #4
 801e7a8:	d107      	bne.n	801e7ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e7aa:	68fb      	ldr	r3, [r7, #12]
 801e7ac:	681b      	ldr	r3, [r3, #0]
 801e7ae:	681a      	ldr	r2, [r3, #0]
 801e7b0:	68fb      	ldr	r3, [r7, #12]
 801e7b2:	681b      	ldr	r3, [r3, #0]
 801e7b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e7b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801e7ba:	2301      	movs	r3, #1
 801e7bc:	e005      	b.n	801e7ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801e7be:	893b      	ldrh	r3, [r7, #8]
 801e7c0:	b2da      	uxtb	r2, r3
 801e7c2:	68fb      	ldr	r3, [r7, #12]
 801e7c4:	681b      	ldr	r3, [r3, #0]
 801e7c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 801e7c8:	2300      	movs	r3, #0
}
 801e7ca:	4618      	mov	r0, r3
 801e7cc:	3718      	adds	r7, #24
 801e7ce:	46bd      	mov	sp, r7
 801e7d0:	bd80      	pop	{r7, pc}
 801e7d2:	bf00      	nop
 801e7d4:	00010002 	.word	0x00010002

0801e7d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801e7d8:	b580      	push	{r7, lr}
 801e7da:	b088      	sub	sp, #32
 801e7dc:	af02      	add	r7, sp, #8
 801e7de:	60f8      	str	r0, [r7, #12]
 801e7e0:	4608      	mov	r0, r1
 801e7e2:	4611      	mov	r1, r2
 801e7e4:	461a      	mov	r2, r3
 801e7e6:	4603      	mov	r3, r0
 801e7e8:	817b      	strh	r3, [r7, #10]
 801e7ea:	460b      	mov	r3, r1
 801e7ec:	813b      	strh	r3, [r7, #8]
 801e7ee:	4613      	mov	r3, r2
 801e7f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e7f2:	68fb      	ldr	r3, [r7, #12]
 801e7f4:	681b      	ldr	r3, [r3, #0]
 801e7f6:	681a      	ldr	r2, [r3, #0]
 801e7f8:	68fb      	ldr	r3, [r7, #12]
 801e7fa:	681b      	ldr	r3, [r3, #0]
 801e7fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801e800:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801e802:	68fb      	ldr	r3, [r7, #12]
 801e804:	681b      	ldr	r3, [r3, #0]
 801e806:	681a      	ldr	r2, [r3, #0]
 801e808:	68fb      	ldr	r3, [r7, #12]
 801e80a:	681b      	ldr	r3, [r3, #0]
 801e80c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e810:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801e812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e814:	9300      	str	r3, [sp, #0]
 801e816:	6a3b      	ldr	r3, [r7, #32]
 801e818:	2200      	movs	r2, #0
 801e81a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801e81e:	68f8      	ldr	r0, [r7, #12]
 801e820:	f000 fa7c 	bl	801ed1c <I2C_WaitOnFlagUntilTimeout>
 801e824:	4603      	mov	r3, r0
 801e826:	2b00      	cmp	r3, #0
 801e828:	d00d      	beq.n	801e846 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801e82a:	68fb      	ldr	r3, [r7, #12]
 801e82c:	681b      	ldr	r3, [r3, #0]
 801e82e:	681b      	ldr	r3, [r3, #0]
 801e830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e838:	d103      	bne.n	801e842 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801e83a:	68fb      	ldr	r3, [r7, #12]
 801e83c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e840:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801e842:	2303      	movs	r3, #3
 801e844:	e0aa      	b.n	801e99c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801e846:	897b      	ldrh	r3, [r7, #10]
 801e848:	b2db      	uxtb	r3, r3
 801e84a:	461a      	mov	r2, r3
 801e84c:	68fb      	ldr	r3, [r7, #12]
 801e84e:	681b      	ldr	r3, [r3, #0]
 801e850:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801e854:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801e856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e858:	6a3a      	ldr	r2, [r7, #32]
 801e85a:	4952      	ldr	r1, [pc, #328]	; (801e9a4 <I2C_RequestMemoryRead+0x1cc>)
 801e85c:	68f8      	ldr	r0, [r7, #12]
 801e85e:	f000 fab4 	bl	801edca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801e862:	4603      	mov	r3, r0
 801e864:	2b00      	cmp	r3, #0
 801e866:	d001      	beq.n	801e86c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 801e868:	2301      	movs	r3, #1
 801e86a:	e097      	b.n	801e99c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e86c:	2300      	movs	r3, #0
 801e86e:	617b      	str	r3, [r7, #20]
 801e870:	68fb      	ldr	r3, [r7, #12]
 801e872:	681b      	ldr	r3, [r3, #0]
 801e874:	695b      	ldr	r3, [r3, #20]
 801e876:	617b      	str	r3, [r7, #20]
 801e878:	68fb      	ldr	r3, [r7, #12]
 801e87a:	681b      	ldr	r3, [r3, #0]
 801e87c:	699b      	ldr	r3, [r3, #24]
 801e87e:	617b      	str	r3, [r7, #20]
 801e880:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801e882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e884:	6a39      	ldr	r1, [r7, #32]
 801e886:	68f8      	ldr	r0, [r7, #12]
 801e888:	f000 fb1e 	bl	801eec8 <I2C_WaitOnTXEFlagUntilTimeout>
 801e88c:	4603      	mov	r3, r0
 801e88e:	2b00      	cmp	r3, #0
 801e890:	d00d      	beq.n	801e8ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801e892:	68fb      	ldr	r3, [r7, #12]
 801e894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e896:	2b04      	cmp	r3, #4
 801e898:	d107      	bne.n	801e8aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e89a:	68fb      	ldr	r3, [r7, #12]
 801e89c:	681b      	ldr	r3, [r3, #0]
 801e89e:	681a      	ldr	r2, [r3, #0]
 801e8a0:	68fb      	ldr	r3, [r7, #12]
 801e8a2:	681b      	ldr	r3, [r3, #0]
 801e8a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e8a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801e8aa:	2301      	movs	r3, #1
 801e8ac:	e076      	b.n	801e99c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801e8ae:	88fb      	ldrh	r3, [r7, #6]
 801e8b0:	2b01      	cmp	r3, #1
 801e8b2:	d105      	bne.n	801e8c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801e8b4:	893b      	ldrh	r3, [r7, #8]
 801e8b6:	b2da      	uxtb	r2, r3
 801e8b8:	68fb      	ldr	r3, [r7, #12]
 801e8ba:	681b      	ldr	r3, [r3, #0]
 801e8bc:	611a      	str	r2, [r3, #16]
 801e8be:	e021      	b.n	801e904 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801e8c0:	893b      	ldrh	r3, [r7, #8]
 801e8c2:	0a1b      	lsrs	r3, r3, #8
 801e8c4:	b29b      	uxth	r3, r3
 801e8c6:	b2da      	uxtb	r2, r3
 801e8c8:	68fb      	ldr	r3, [r7, #12]
 801e8ca:	681b      	ldr	r3, [r3, #0]
 801e8cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801e8ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e8d0:	6a39      	ldr	r1, [r7, #32]
 801e8d2:	68f8      	ldr	r0, [r7, #12]
 801e8d4:	f000 faf8 	bl	801eec8 <I2C_WaitOnTXEFlagUntilTimeout>
 801e8d8:	4603      	mov	r3, r0
 801e8da:	2b00      	cmp	r3, #0
 801e8dc:	d00d      	beq.n	801e8fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801e8de:	68fb      	ldr	r3, [r7, #12]
 801e8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e8e2:	2b04      	cmp	r3, #4
 801e8e4:	d107      	bne.n	801e8f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e8e6:	68fb      	ldr	r3, [r7, #12]
 801e8e8:	681b      	ldr	r3, [r3, #0]
 801e8ea:	681a      	ldr	r2, [r3, #0]
 801e8ec:	68fb      	ldr	r3, [r7, #12]
 801e8ee:	681b      	ldr	r3, [r3, #0]
 801e8f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e8f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801e8f6:	2301      	movs	r3, #1
 801e8f8:	e050      	b.n	801e99c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801e8fa:	893b      	ldrh	r3, [r7, #8]
 801e8fc:	b2da      	uxtb	r2, r3
 801e8fe:	68fb      	ldr	r3, [r7, #12]
 801e900:	681b      	ldr	r3, [r3, #0]
 801e902:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801e904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e906:	6a39      	ldr	r1, [r7, #32]
 801e908:	68f8      	ldr	r0, [r7, #12]
 801e90a:	f000 fadd 	bl	801eec8 <I2C_WaitOnTXEFlagUntilTimeout>
 801e90e:	4603      	mov	r3, r0
 801e910:	2b00      	cmp	r3, #0
 801e912:	d00d      	beq.n	801e930 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801e914:	68fb      	ldr	r3, [r7, #12]
 801e916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e918:	2b04      	cmp	r3, #4
 801e91a:	d107      	bne.n	801e92c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e91c:	68fb      	ldr	r3, [r7, #12]
 801e91e:	681b      	ldr	r3, [r3, #0]
 801e920:	681a      	ldr	r2, [r3, #0]
 801e922:	68fb      	ldr	r3, [r7, #12]
 801e924:	681b      	ldr	r3, [r3, #0]
 801e926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e92a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801e92c:	2301      	movs	r3, #1
 801e92e:	e035      	b.n	801e99c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801e930:	68fb      	ldr	r3, [r7, #12]
 801e932:	681b      	ldr	r3, [r3, #0]
 801e934:	681a      	ldr	r2, [r3, #0]
 801e936:	68fb      	ldr	r3, [r7, #12]
 801e938:	681b      	ldr	r3, [r3, #0]
 801e93a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e93e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801e940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e942:	9300      	str	r3, [sp, #0]
 801e944:	6a3b      	ldr	r3, [r7, #32]
 801e946:	2200      	movs	r2, #0
 801e948:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801e94c:	68f8      	ldr	r0, [r7, #12]
 801e94e:	f000 f9e5 	bl	801ed1c <I2C_WaitOnFlagUntilTimeout>
 801e952:	4603      	mov	r3, r0
 801e954:	2b00      	cmp	r3, #0
 801e956:	d00d      	beq.n	801e974 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801e958:	68fb      	ldr	r3, [r7, #12]
 801e95a:	681b      	ldr	r3, [r3, #0]
 801e95c:	681b      	ldr	r3, [r3, #0]
 801e95e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e966:	d103      	bne.n	801e970 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801e968:	68fb      	ldr	r3, [r7, #12]
 801e96a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e96e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801e970:	2303      	movs	r3, #3
 801e972:	e013      	b.n	801e99c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 801e974:	897b      	ldrh	r3, [r7, #10]
 801e976:	b2db      	uxtb	r3, r3
 801e978:	f043 0301 	orr.w	r3, r3, #1
 801e97c:	b2da      	uxtb	r2, r3
 801e97e:	68fb      	ldr	r3, [r7, #12]
 801e980:	681b      	ldr	r3, [r3, #0]
 801e982:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801e984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e986:	6a3a      	ldr	r2, [r7, #32]
 801e988:	4906      	ldr	r1, [pc, #24]	; (801e9a4 <I2C_RequestMemoryRead+0x1cc>)
 801e98a:	68f8      	ldr	r0, [r7, #12]
 801e98c:	f000 fa1d 	bl	801edca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801e990:	4603      	mov	r3, r0
 801e992:	2b00      	cmp	r3, #0
 801e994:	d001      	beq.n	801e99a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 801e996:	2301      	movs	r3, #1
 801e998:	e000      	b.n	801e99c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 801e99a:	2300      	movs	r3, #0
}
 801e99c:	4618      	mov	r0, r3
 801e99e:	3718      	adds	r7, #24
 801e9a0:	46bd      	mov	sp, r7
 801e9a2:	bd80      	pop	{r7, pc}
 801e9a4:	00010002 	.word	0x00010002

0801e9a8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 801e9a8:	b580      	push	{r7, lr}
 801e9aa:	b086      	sub	sp, #24
 801e9ac:	af00      	add	r7, sp, #0
 801e9ae:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801e9b0:	687b      	ldr	r3, [r7, #4]
 801e9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e9b4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e9b6:	697b      	ldr	r3, [r7, #20]
 801e9b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e9bc:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801e9be:	697b      	ldr	r3, [r7, #20]
 801e9c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e9c4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801e9c6:	697b      	ldr	r3, [r7, #20]
 801e9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e9ca:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801e9cc:	697b      	ldr	r3, [r7, #20]
 801e9ce:	681b      	ldr	r3, [r3, #0]
 801e9d0:	685a      	ldr	r2, [r3, #4]
 801e9d2:	697b      	ldr	r3, [r7, #20]
 801e9d4:	681b      	ldr	r3, [r3, #0]
 801e9d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801e9da:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801e9dc:	697b      	ldr	r3, [r7, #20]
 801e9de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e9e0:	2b00      	cmp	r3, #0
 801e9e2:	d003      	beq.n	801e9ec <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801e9e4:	697b      	ldr	r3, [r7, #20]
 801e9e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e9e8:	2200      	movs	r2, #0
 801e9ea:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801e9ec:	697b      	ldr	r3, [r7, #20]
 801e9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e9f0:	2b00      	cmp	r3, #0
 801e9f2:	d003      	beq.n	801e9fc <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801e9f4:	697b      	ldr	r3, [r7, #20]
 801e9f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e9f8:	2200      	movs	r2, #0
 801e9fa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 801e9fc:	7cfb      	ldrb	r3, [r7, #19]
 801e9fe:	f003 0321 	and.w	r3, r3, #33	; 0x21
 801ea02:	2b21      	cmp	r3, #33	; 0x21
 801ea04:	d007      	beq.n	801ea16 <I2C_DMAXferCplt+0x6e>
 801ea06:	7cfb      	ldrb	r3, [r7, #19]
 801ea08:	f003 0322 	and.w	r3, r3, #34	; 0x22
 801ea0c:	2b22      	cmp	r3, #34	; 0x22
 801ea0e:	d131      	bne.n	801ea74 <I2C_DMAXferCplt+0xcc>
 801ea10:	7cbb      	ldrb	r3, [r7, #18]
 801ea12:	2b20      	cmp	r3, #32
 801ea14:	d12e      	bne.n	801ea74 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801ea16:	697b      	ldr	r3, [r7, #20]
 801ea18:	681b      	ldr	r3, [r3, #0]
 801ea1a:	685a      	ldr	r2, [r3, #4]
 801ea1c:	697b      	ldr	r3, [r7, #20]
 801ea1e:	681b      	ldr	r3, [r3, #0]
 801ea20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801ea24:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 801ea26:	697b      	ldr	r3, [r7, #20]
 801ea28:	2200      	movs	r2, #0
 801ea2a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801ea2c:	7cfb      	ldrb	r3, [r7, #19]
 801ea2e:	2b29      	cmp	r3, #41	; 0x29
 801ea30:	d10a      	bne.n	801ea48 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801ea32:	697b      	ldr	r3, [r7, #20]
 801ea34:	2221      	movs	r2, #33	; 0x21
 801ea36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801ea38:	697b      	ldr	r3, [r7, #20]
 801ea3a:	2228      	movs	r2, #40	; 0x28
 801ea3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801ea40:	6978      	ldr	r0, [r7, #20]
 801ea42:	f7fe fc8d 	bl	801d360 <HAL_I2C_SlaveTxCpltCallback>
 801ea46:	e00c      	b.n	801ea62 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801ea48:	7cfb      	ldrb	r3, [r7, #19]
 801ea4a:	2b2a      	cmp	r3, #42	; 0x2a
 801ea4c:	d109      	bne.n	801ea62 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801ea4e:	697b      	ldr	r3, [r7, #20]
 801ea50:	2222      	movs	r2, #34	; 0x22
 801ea52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801ea54:	697b      	ldr	r3, [r7, #20]
 801ea56:	2228      	movs	r2, #40	; 0x28
 801ea58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801ea5c:	6978      	ldr	r0, [r7, #20]
 801ea5e:	f7fe fc89 	bl	801d374 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801ea62:	697b      	ldr	r3, [r7, #20]
 801ea64:	681b      	ldr	r3, [r3, #0]
 801ea66:	685a      	ldr	r2, [r3, #4]
 801ea68:	697b      	ldr	r3, [r7, #20]
 801ea6a:	681b      	ldr	r3, [r3, #0]
 801ea6c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801ea70:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801ea72:	e06a      	b.n	801eb4a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 801ea74:	697b      	ldr	r3, [r7, #20]
 801ea76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ea7a:	b2db      	uxtb	r3, r3
 801ea7c:	2b00      	cmp	r3, #0
 801ea7e:	d064      	beq.n	801eb4a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 801ea80:	697b      	ldr	r3, [r7, #20]
 801ea82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ea84:	b29b      	uxth	r3, r3
 801ea86:	2b01      	cmp	r3, #1
 801ea88:	d107      	bne.n	801ea9a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ea8a:	697b      	ldr	r3, [r7, #20]
 801ea8c:	681b      	ldr	r3, [r3, #0]
 801ea8e:	681a      	ldr	r2, [r3, #0]
 801ea90:	697b      	ldr	r3, [r7, #20]
 801ea92:	681b      	ldr	r3, [r3, #0]
 801ea94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ea98:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801ea9a:	697b      	ldr	r3, [r7, #20]
 801ea9c:	681b      	ldr	r3, [r3, #0]
 801ea9e:	685a      	ldr	r2, [r3, #4]
 801eaa0:	697b      	ldr	r3, [r7, #20]
 801eaa2:	681b      	ldr	r3, [r3, #0]
 801eaa4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801eaa8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 801eaaa:	68fb      	ldr	r3, [r7, #12]
 801eaac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801eab0:	d009      	beq.n	801eac6 <I2C_DMAXferCplt+0x11e>
 801eab2:	68fb      	ldr	r3, [r7, #12]
 801eab4:	2b08      	cmp	r3, #8
 801eab6:	d006      	beq.n	801eac6 <I2C_DMAXferCplt+0x11e>
 801eab8:	68fb      	ldr	r3, [r7, #12]
 801eaba:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801eabe:	d002      	beq.n	801eac6 <I2C_DMAXferCplt+0x11e>
 801eac0:	68fb      	ldr	r3, [r7, #12]
 801eac2:	2b20      	cmp	r3, #32
 801eac4:	d107      	bne.n	801ead6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801eac6:	697b      	ldr	r3, [r7, #20]
 801eac8:	681b      	ldr	r3, [r3, #0]
 801eaca:	681a      	ldr	r2, [r3, #0]
 801eacc:	697b      	ldr	r3, [r7, #20]
 801eace:	681b      	ldr	r3, [r3, #0]
 801ead0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ead4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801ead6:	697b      	ldr	r3, [r7, #20]
 801ead8:	681b      	ldr	r3, [r3, #0]
 801eada:	685a      	ldr	r2, [r3, #4]
 801eadc:	697b      	ldr	r3, [r7, #20]
 801eade:	681b      	ldr	r3, [r3, #0]
 801eae0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801eae4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801eae6:	697b      	ldr	r3, [r7, #20]
 801eae8:	681b      	ldr	r3, [r3, #0]
 801eaea:	685a      	ldr	r2, [r3, #4]
 801eaec:	697b      	ldr	r3, [r7, #20]
 801eaee:	681b      	ldr	r3, [r3, #0]
 801eaf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801eaf4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 801eaf6:	697b      	ldr	r3, [r7, #20]
 801eaf8:	2200      	movs	r2, #0
 801eafa:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801eafc:	697b      	ldr	r3, [r7, #20]
 801eafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801eb00:	2b00      	cmp	r3, #0
 801eb02:	d003      	beq.n	801eb0c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 801eb04:	6978      	ldr	r0, [r7, #20]
 801eb06:	f7fe fc57 	bl	801d3b8 <HAL_I2C_ErrorCallback>
}
 801eb0a:	e01e      	b.n	801eb4a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 801eb0c:	697b      	ldr	r3, [r7, #20]
 801eb0e:	2220      	movs	r2, #32
 801eb10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801eb14:	697b      	ldr	r3, [r7, #20]
 801eb16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801eb1a:	b2db      	uxtb	r3, r3
 801eb1c:	2b40      	cmp	r3, #64	; 0x40
 801eb1e:	d10a      	bne.n	801eb36 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801eb20:	697b      	ldr	r3, [r7, #20]
 801eb22:	2200      	movs	r2, #0
 801eb24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 801eb28:	697b      	ldr	r3, [r7, #20]
 801eb2a:	2200      	movs	r2, #0
 801eb2c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 801eb2e:	6978      	ldr	r0, [r7, #20]
 801eb30:	f7e2 ff90 	bl	8001a54 <HAL_I2C_MemRxCpltCallback>
}
 801eb34:	e009      	b.n	801eb4a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801eb36:	697b      	ldr	r3, [r7, #20]
 801eb38:	2200      	movs	r2, #0
 801eb3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801eb3e:	697b      	ldr	r3, [r7, #20]
 801eb40:	2212      	movs	r2, #18
 801eb42:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 801eb44:	6978      	ldr	r0, [r7, #20]
 801eb46:	f7e2 ff9b 	bl	8001a80 <HAL_I2C_MasterRxCpltCallback>
}
 801eb4a:	bf00      	nop
 801eb4c:	3718      	adds	r7, #24
 801eb4e:	46bd      	mov	sp, r7
 801eb50:	bd80      	pop	{r7, pc}

0801eb52 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 801eb52:	b580      	push	{r7, lr}
 801eb54:	b084      	sub	sp, #16
 801eb56:	af00      	add	r7, sp, #0
 801eb58:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801eb5a:	687b      	ldr	r3, [r7, #4]
 801eb5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eb5e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801eb60:	68fb      	ldr	r3, [r7, #12]
 801eb62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eb64:	2b00      	cmp	r3, #0
 801eb66:	d003      	beq.n	801eb70 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801eb68:	68fb      	ldr	r3, [r7, #12]
 801eb6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eb6c:	2200      	movs	r2, #0
 801eb6e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801eb70:	68fb      	ldr	r3, [r7, #12]
 801eb72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eb74:	2b00      	cmp	r3, #0
 801eb76:	d003      	beq.n	801eb80 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801eb78:	68fb      	ldr	r3, [r7, #12]
 801eb7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eb7c:	2200      	movs	r2, #0
 801eb7e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801eb80:	6878      	ldr	r0, [r7, #4]
 801eb82:	f7fc ffb3 	bl	801baec <HAL_DMA_GetError>
 801eb86:	4603      	mov	r3, r0
 801eb88:	2b02      	cmp	r3, #2
 801eb8a:	d01b      	beq.n	801ebc4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 801eb8c:	68fb      	ldr	r3, [r7, #12]
 801eb8e:	681b      	ldr	r3, [r3, #0]
 801eb90:	681a      	ldr	r2, [r3, #0]
 801eb92:	68fb      	ldr	r3, [r7, #12]
 801eb94:	681b      	ldr	r3, [r3, #0]
 801eb96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801eb9a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 801eb9c:	68fb      	ldr	r3, [r7, #12]
 801eb9e:	2200      	movs	r2, #0
 801eba0:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 801eba2:	68fb      	ldr	r3, [r7, #12]
 801eba4:	2220      	movs	r2, #32
 801eba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801ebaa:	68fb      	ldr	r3, [r7, #12]
 801ebac:	2200      	movs	r2, #0
 801ebae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801ebb2:	68fb      	ldr	r3, [r7, #12]
 801ebb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ebb6:	f043 0210 	orr.w	r2, r3, #16
 801ebba:	68fb      	ldr	r3, [r7, #12]
 801ebbc:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801ebbe:	68f8      	ldr	r0, [r7, #12]
 801ebc0:	f7fe fbfa 	bl	801d3b8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801ebc4:	bf00      	nop
 801ebc6:	3710      	adds	r7, #16
 801ebc8:	46bd      	mov	sp, r7
 801ebca:	bd80      	pop	{r7, pc}

0801ebcc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801ebcc:	b580      	push	{r7, lr}
 801ebce:	b086      	sub	sp, #24
 801ebd0:	af00      	add	r7, sp, #0
 801ebd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801ebd4:	2300      	movs	r3, #0
 801ebd6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801ebd8:	687b      	ldr	r3, [r7, #4]
 801ebda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ebdc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801ebde:	697b      	ldr	r3, [r7, #20]
 801ebe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ebe4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 801ebe6:	4b4b      	ldr	r3, [pc, #300]	; (801ed14 <I2C_DMAAbort+0x148>)
 801ebe8:	681b      	ldr	r3, [r3, #0]
 801ebea:	08db      	lsrs	r3, r3, #3
 801ebec:	4a4a      	ldr	r2, [pc, #296]	; (801ed18 <I2C_DMAAbort+0x14c>)
 801ebee:	fba2 2303 	umull	r2, r3, r2, r3
 801ebf2:	0a1a      	lsrs	r2, r3, #8
 801ebf4:	4613      	mov	r3, r2
 801ebf6:	009b      	lsls	r3, r3, #2
 801ebf8:	4413      	add	r3, r2
 801ebfa:	00da      	lsls	r2, r3, #3
 801ebfc:	1ad3      	subs	r3, r2, r3
 801ebfe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 801ec00:	68fb      	ldr	r3, [r7, #12]
 801ec02:	2b00      	cmp	r3, #0
 801ec04:	d106      	bne.n	801ec14 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801ec06:	697b      	ldr	r3, [r7, #20]
 801ec08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ec0a:	f043 0220 	orr.w	r2, r3, #32
 801ec0e:	697b      	ldr	r3, [r7, #20]
 801ec10:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 801ec12:	e00a      	b.n	801ec2a <I2C_DMAAbort+0x5e>
    }
    count--;
 801ec14:	68fb      	ldr	r3, [r7, #12]
 801ec16:	3b01      	subs	r3, #1
 801ec18:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801ec1a:	697b      	ldr	r3, [r7, #20]
 801ec1c:	681b      	ldr	r3, [r3, #0]
 801ec1e:	681b      	ldr	r3, [r3, #0]
 801ec20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ec24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ec28:	d0ea      	beq.n	801ec00 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801ec2a:	697b      	ldr	r3, [r7, #20]
 801ec2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ec2e:	2b00      	cmp	r3, #0
 801ec30:	d003      	beq.n	801ec3a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801ec32:	697b      	ldr	r3, [r7, #20]
 801ec34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ec36:	2200      	movs	r2, #0
 801ec38:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801ec3a:	697b      	ldr	r3, [r7, #20]
 801ec3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ec3e:	2b00      	cmp	r3, #0
 801ec40:	d003      	beq.n	801ec4a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801ec42:	697b      	ldr	r3, [r7, #20]
 801ec44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ec46:	2200      	movs	r2, #0
 801ec48:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ec4a:	697b      	ldr	r3, [r7, #20]
 801ec4c:	681b      	ldr	r3, [r3, #0]
 801ec4e:	681a      	ldr	r2, [r3, #0]
 801ec50:	697b      	ldr	r3, [r7, #20]
 801ec52:	681b      	ldr	r3, [r3, #0]
 801ec54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ec58:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 801ec5a:	697b      	ldr	r3, [r7, #20]
 801ec5c:	2200      	movs	r2, #0
 801ec5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 801ec60:	697b      	ldr	r3, [r7, #20]
 801ec62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ec64:	2b00      	cmp	r3, #0
 801ec66:	d003      	beq.n	801ec70 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801ec68:	697b      	ldr	r3, [r7, #20]
 801ec6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ec6c:	2200      	movs	r2, #0
 801ec6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 801ec70:	697b      	ldr	r3, [r7, #20]
 801ec72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ec74:	2b00      	cmp	r3, #0
 801ec76:	d003      	beq.n	801ec80 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801ec78:	697b      	ldr	r3, [r7, #20]
 801ec7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ec7c:	2200      	movs	r2, #0
 801ec7e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 801ec80:	697b      	ldr	r3, [r7, #20]
 801ec82:	681b      	ldr	r3, [r3, #0]
 801ec84:	681a      	ldr	r2, [r3, #0]
 801ec86:	697b      	ldr	r3, [r7, #20]
 801ec88:	681b      	ldr	r3, [r3, #0]
 801ec8a:	f022 0201 	bic.w	r2, r2, #1
 801ec8e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801ec90:	697b      	ldr	r3, [r7, #20]
 801ec92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ec96:	b2db      	uxtb	r3, r3
 801ec98:	2b60      	cmp	r3, #96	; 0x60
 801ec9a:	d10e      	bne.n	801ecba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 801ec9c:	697b      	ldr	r3, [r7, #20]
 801ec9e:	2220      	movs	r2, #32
 801eca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801eca4:	697b      	ldr	r3, [r7, #20]
 801eca6:	2200      	movs	r2, #0
 801eca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 801ecac:	697b      	ldr	r3, [r7, #20]
 801ecae:	2200      	movs	r2, #0
 801ecb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801ecb2:	6978      	ldr	r0, [r7, #20]
 801ecb4:	f7fe fb8a 	bl	801d3cc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801ecb8:	e027      	b.n	801ed0a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801ecba:	7cfb      	ldrb	r3, [r7, #19]
 801ecbc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801ecc0:	2b28      	cmp	r3, #40	; 0x28
 801ecc2:	d117      	bne.n	801ecf4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 801ecc4:	697b      	ldr	r3, [r7, #20]
 801ecc6:	681b      	ldr	r3, [r3, #0]
 801ecc8:	681a      	ldr	r2, [r3, #0]
 801ecca:	697b      	ldr	r3, [r7, #20]
 801eccc:	681b      	ldr	r3, [r3, #0]
 801ecce:	f042 0201 	orr.w	r2, r2, #1
 801ecd2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ecd4:	697b      	ldr	r3, [r7, #20]
 801ecd6:	681b      	ldr	r3, [r3, #0]
 801ecd8:	681a      	ldr	r2, [r3, #0]
 801ecda:	697b      	ldr	r3, [r7, #20]
 801ecdc:	681b      	ldr	r3, [r3, #0]
 801ecde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801ece2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801ece4:	697b      	ldr	r3, [r7, #20]
 801ece6:	2200      	movs	r2, #0
 801ece8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801ecea:	697b      	ldr	r3, [r7, #20]
 801ecec:	2228      	movs	r2, #40	; 0x28
 801ecee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801ecf2:	e007      	b.n	801ed04 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 801ecf4:	697b      	ldr	r3, [r7, #20]
 801ecf6:	2220      	movs	r2, #32
 801ecf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801ecfc:	697b      	ldr	r3, [r7, #20]
 801ecfe:	2200      	movs	r2, #0
 801ed00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 801ed04:	6978      	ldr	r0, [r7, #20]
 801ed06:	f7fe fb57 	bl	801d3b8 <HAL_I2C_ErrorCallback>
}
 801ed0a:	bf00      	nop
 801ed0c:	3718      	adds	r7, #24
 801ed0e:	46bd      	mov	sp, r7
 801ed10:	bd80      	pop	{r7, pc}
 801ed12:	bf00      	nop
 801ed14:	20000020 	.word	0x20000020
 801ed18:	14f8b589 	.word	0x14f8b589

0801ed1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801ed1c:	b580      	push	{r7, lr}
 801ed1e:	b084      	sub	sp, #16
 801ed20:	af00      	add	r7, sp, #0
 801ed22:	60f8      	str	r0, [r7, #12]
 801ed24:	60b9      	str	r1, [r7, #8]
 801ed26:	603b      	str	r3, [r7, #0]
 801ed28:	4613      	mov	r3, r2
 801ed2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801ed2c:	e025      	b.n	801ed7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ed2e:	683b      	ldr	r3, [r7, #0]
 801ed30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ed34:	d021      	beq.n	801ed7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ed36:	f7fb fe57 	bl	801a9e8 <HAL_GetTick>
 801ed3a:	4602      	mov	r2, r0
 801ed3c:	69bb      	ldr	r3, [r7, #24]
 801ed3e:	1ad3      	subs	r3, r2, r3
 801ed40:	683a      	ldr	r2, [r7, #0]
 801ed42:	429a      	cmp	r2, r3
 801ed44:	d302      	bcc.n	801ed4c <I2C_WaitOnFlagUntilTimeout+0x30>
 801ed46:	683b      	ldr	r3, [r7, #0]
 801ed48:	2b00      	cmp	r3, #0
 801ed4a:	d116      	bne.n	801ed7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 801ed4c:	68fb      	ldr	r3, [r7, #12]
 801ed4e:	2200      	movs	r2, #0
 801ed50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801ed52:	68fb      	ldr	r3, [r7, #12]
 801ed54:	2220      	movs	r2, #32
 801ed56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 801ed5a:	68fb      	ldr	r3, [r7, #12]
 801ed5c:	2200      	movs	r2, #0
 801ed5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801ed62:	68fb      	ldr	r3, [r7, #12]
 801ed64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ed66:	f043 0220 	orr.w	r2, r3, #32
 801ed6a:	68fb      	ldr	r3, [r7, #12]
 801ed6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ed6e:	68fb      	ldr	r3, [r7, #12]
 801ed70:	2200      	movs	r2, #0
 801ed72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801ed76:	2301      	movs	r3, #1
 801ed78:	e023      	b.n	801edc2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801ed7a:	68bb      	ldr	r3, [r7, #8]
 801ed7c:	0c1b      	lsrs	r3, r3, #16
 801ed7e:	b2db      	uxtb	r3, r3
 801ed80:	2b01      	cmp	r3, #1
 801ed82:	d10d      	bne.n	801eda0 <I2C_WaitOnFlagUntilTimeout+0x84>
 801ed84:	68fb      	ldr	r3, [r7, #12]
 801ed86:	681b      	ldr	r3, [r3, #0]
 801ed88:	695b      	ldr	r3, [r3, #20]
 801ed8a:	43da      	mvns	r2, r3
 801ed8c:	68bb      	ldr	r3, [r7, #8]
 801ed8e:	4013      	ands	r3, r2
 801ed90:	b29b      	uxth	r3, r3
 801ed92:	2b00      	cmp	r3, #0
 801ed94:	bf0c      	ite	eq
 801ed96:	2301      	moveq	r3, #1
 801ed98:	2300      	movne	r3, #0
 801ed9a:	b2db      	uxtb	r3, r3
 801ed9c:	461a      	mov	r2, r3
 801ed9e:	e00c      	b.n	801edba <I2C_WaitOnFlagUntilTimeout+0x9e>
 801eda0:	68fb      	ldr	r3, [r7, #12]
 801eda2:	681b      	ldr	r3, [r3, #0]
 801eda4:	699b      	ldr	r3, [r3, #24]
 801eda6:	43da      	mvns	r2, r3
 801eda8:	68bb      	ldr	r3, [r7, #8]
 801edaa:	4013      	ands	r3, r2
 801edac:	b29b      	uxth	r3, r3
 801edae:	2b00      	cmp	r3, #0
 801edb0:	bf0c      	ite	eq
 801edb2:	2301      	moveq	r3, #1
 801edb4:	2300      	movne	r3, #0
 801edb6:	b2db      	uxtb	r3, r3
 801edb8:	461a      	mov	r2, r3
 801edba:	79fb      	ldrb	r3, [r7, #7]
 801edbc:	429a      	cmp	r2, r3
 801edbe:	d0b6      	beq.n	801ed2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801edc0:	2300      	movs	r3, #0
}
 801edc2:	4618      	mov	r0, r3
 801edc4:	3710      	adds	r7, #16
 801edc6:	46bd      	mov	sp, r7
 801edc8:	bd80      	pop	{r7, pc}

0801edca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 801edca:	b580      	push	{r7, lr}
 801edcc:	b084      	sub	sp, #16
 801edce:	af00      	add	r7, sp, #0
 801edd0:	60f8      	str	r0, [r7, #12]
 801edd2:	60b9      	str	r1, [r7, #8]
 801edd4:	607a      	str	r2, [r7, #4]
 801edd6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801edd8:	e051      	b.n	801ee7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801edda:	68fb      	ldr	r3, [r7, #12]
 801eddc:	681b      	ldr	r3, [r3, #0]
 801edde:	695b      	ldr	r3, [r3, #20]
 801ede0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ede4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ede8:	d123      	bne.n	801ee32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801edea:	68fb      	ldr	r3, [r7, #12]
 801edec:	681b      	ldr	r3, [r3, #0]
 801edee:	681a      	ldr	r2, [r3, #0]
 801edf0:	68fb      	ldr	r3, [r7, #12]
 801edf2:	681b      	ldr	r3, [r3, #0]
 801edf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801edf8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801edfa:	68fb      	ldr	r3, [r7, #12]
 801edfc:	681b      	ldr	r3, [r3, #0]
 801edfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801ee02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801ee04:	68fb      	ldr	r3, [r7, #12]
 801ee06:	2200      	movs	r2, #0
 801ee08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801ee0a:	68fb      	ldr	r3, [r7, #12]
 801ee0c:	2220      	movs	r2, #32
 801ee0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801ee12:	68fb      	ldr	r3, [r7, #12]
 801ee14:	2200      	movs	r2, #0
 801ee16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801ee1a:	68fb      	ldr	r3, [r7, #12]
 801ee1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ee1e:	f043 0204 	orr.w	r2, r3, #4
 801ee22:	68fb      	ldr	r3, [r7, #12]
 801ee24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801ee26:	68fb      	ldr	r3, [r7, #12]
 801ee28:	2200      	movs	r2, #0
 801ee2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801ee2e:	2301      	movs	r3, #1
 801ee30:	e046      	b.n	801eec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ee32:	687b      	ldr	r3, [r7, #4]
 801ee34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ee38:	d021      	beq.n	801ee7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ee3a:	f7fb fdd5 	bl	801a9e8 <HAL_GetTick>
 801ee3e:	4602      	mov	r2, r0
 801ee40:	683b      	ldr	r3, [r7, #0]
 801ee42:	1ad3      	subs	r3, r2, r3
 801ee44:	687a      	ldr	r2, [r7, #4]
 801ee46:	429a      	cmp	r2, r3
 801ee48:	d302      	bcc.n	801ee50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 801ee4a:	687b      	ldr	r3, [r7, #4]
 801ee4c:	2b00      	cmp	r3, #0
 801ee4e:	d116      	bne.n	801ee7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801ee50:	68fb      	ldr	r3, [r7, #12]
 801ee52:	2200      	movs	r2, #0
 801ee54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801ee56:	68fb      	ldr	r3, [r7, #12]
 801ee58:	2220      	movs	r2, #32
 801ee5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801ee5e:	68fb      	ldr	r3, [r7, #12]
 801ee60:	2200      	movs	r2, #0
 801ee62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801ee66:	68fb      	ldr	r3, [r7, #12]
 801ee68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ee6a:	f043 0220 	orr.w	r2, r3, #32
 801ee6e:	68fb      	ldr	r3, [r7, #12]
 801ee70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ee72:	68fb      	ldr	r3, [r7, #12]
 801ee74:	2200      	movs	r2, #0
 801ee76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801ee7a:	2301      	movs	r3, #1
 801ee7c:	e020      	b.n	801eec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801ee7e:	68bb      	ldr	r3, [r7, #8]
 801ee80:	0c1b      	lsrs	r3, r3, #16
 801ee82:	b2db      	uxtb	r3, r3
 801ee84:	2b01      	cmp	r3, #1
 801ee86:	d10c      	bne.n	801eea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 801ee88:	68fb      	ldr	r3, [r7, #12]
 801ee8a:	681b      	ldr	r3, [r3, #0]
 801ee8c:	695b      	ldr	r3, [r3, #20]
 801ee8e:	43da      	mvns	r2, r3
 801ee90:	68bb      	ldr	r3, [r7, #8]
 801ee92:	4013      	ands	r3, r2
 801ee94:	b29b      	uxth	r3, r3
 801ee96:	2b00      	cmp	r3, #0
 801ee98:	bf14      	ite	ne
 801ee9a:	2301      	movne	r3, #1
 801ee9c:	2300      	moveq	r3, #0
 801ee9e:	b2db      	uxtb	r3, r3
 801eea0:	e00b      	b.n	801eeba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801eea2:	68fb      	ldr	r3, [r7, #12]
 801eea4:	681b      	ldr	r3, [r3, #0]
 801eea6:	699b      	ldr	r3, [r3, #24]
 801eea8:	43da      	mvns	r2, r3
 801eeaa:	68bb      	ldr	r3, [r7, #8]
 801eeac:	4013      	ands	r3, r2
 801eeae:	b29b      	uxth	r3, r3
 801eeb0:	2b00      	cmp	r3, #0
 801eeb2:	bf14      	ite	ne
 801eeb4:	2301      	movne	r3, #1
 801eeb6:	2300      	moveq	r3, #0
 801eeb8:	b2db      	uxtb	r3, r3
 801eeba:	2b00      	cmp	r3, #0
 801eebc:	d18d      	bne.n	801edda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801eebe:	2300      	movs	r3, #0
}
 801eec0:	4618      	mov	r0, r3
 801eec2:	3710      	adds	r7, #16
 801eec4:	46bd      	mov	sp, r7
 801eec6:	bd80      	pop	{r7, pc}

0801eec8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801eec8:	b580      	push	{r7, lr}
 801eeca:	b084      	sub	sp, #16
 801eecc:	af00      	add	r7, sp, #0
 801eece:	60f8      	str	r0, [r7, #12]
 801eed0:	60b9      	str	r1, [r7, #8]
 801eed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801eed4:	e02d      	b.n	801ef32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801eed6:	68f8      	ldr	r0, [r7, #12]
 801eed8:	f000 f86a 	bl	801efb0 <I2C_IsAcknowledgeFailed>
 801eedc:	4603      	mov	r3, r0
 801eede:	2b00      	cmp	r3, #0
 801eee0:	d001      	beq.n	801eee6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801eee2:	2301      	movs	r3, #1
 801eee4:	e02d      	b.n	801ef42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801eee6:	68bb      	ldr	r3, [r7, #8]
 801eee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801eeec:	d021      	beq.n	801ef32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801eeee:	f7fb fd7b 	bl	801a9e8 <HAL_GetTick>
 801eef2:	4602      	mov	r2, r0
 801eef4:	687b      	ldr	r3, [r7, #4]
 801eef6:	1ad3      	subs	r3, r2, r3
 801eef8:	68ba      	ldr	r2, [r7, #8]
 801eefa:	429a      	cmp	r2, r3
 801eefc:	d302      	bcc.n	801ef04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801eefe:	68bb      	ldr	r3, [r7, #8]
 801ef00:	2b00      	cmp	r3, #0
 801ef02:	d116      	bne.n	801ef32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801ef04:	68fb      	ldr	r3, [r7, #12]
 801ef06:	2200      	movs	r2, #0
 801ef08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801ef0a:	68fb      	ldr	r3, [r7, #12]
 801ef0c:	2220      	movs	r2, #32
 801ef0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801ef12:	68fb      	ldr	r3, [r7, #12]
 801ef14:	2200      	movs	r2, #0
 801ef16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801ef1a:	68fb      	ldr	r3, [r7, #12]
 801ef1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ef1e:	f043 0220 	orr.w	r2, r3, #32
 801ef22:	68fb      	ldr	r3, [r7, #12]
 801ef24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ef26:	68fb      	ldr	r3, [r7, #12]
 801ef28:	2200      	movs	r2, #0
 801ef2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801ef2e:	2301      	movs	r3, #1
 801ef30:	e007      	b.n	801ef42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801ef32:	68fb      	ldr	r3, [r7, #12]
 801ef34:	681b      	ldr	r3, [r3, #0]
 801ef36:	695b      	ldr	r3, [r3, #20]
 801ef38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ef3c:	2b80      	cmp	r3, #128	; 0x80
 801ef3e:	d1ca      	bne.n	801eed6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801ef40:	2300      	movs	r3, #0
}
 801ef42:	4618      	mov	r0, r3
 801ef44:	3710      	adds	r7, #16
 801ef46:	46bd      	mov	sp, r7
 801ef48:	bd80      	pop	{r7, pc}
	...

0801ef4c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 801ef4c:	b480      	push	{r7}
 801ef4e:	b085      	sub	sp, #20
 801ef50:	af00      	add	r7, sp, #0
 801ef52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801ef54:	2300      	movs	r3, #0
 801ef56:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 801ef58:	4b13      	ldr	r3, [pc, #76]	; (801efa8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 801ef5a:	681b      	ldr	r3, [r3, #0]
 801ef5c:	08db      	lsrs	r3, r3, #3
 801ef5e:	4a13      	ldr	r2, [pc, #76]	; (801efac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 801ef60:	fba2 2303 	umull	r2, r3, r2, r3
 801ef64:	0a1a      	lsrs	r2, r3, #8
 801ef66:	4613      	mov	r3, r2
 801ef68:	009b      	lsls	r3, r3, #2
 801ef6a:	4413      	add	r3, r2
 801ef6c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 801ef6e:	68fb      	ldr	r3, [r7, #12]
 801ef70:	3b01      	subs	r3, #1
 801ef72:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 801ef74:	68fb      	ldr	r3, [r7, #12]
 801ef76:	2b00      	cmp	r3, #0
 801ef78:	d107      	bne.n	801ef8a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801ef7a:	687b      	ldr	r3, [r7, #4]
 801ef7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ef7e:	f043 0220 	orr.w	r2, r3, #32
 801ef82:	687b      	ldr	r3, [r7, #4]
 801ef84:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801ef86:	2301      	movs	r3, #1
 801ef88:	e008      	b.n	801ef9c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801ef8a:	687b      	ldr	r3, [r7, #4]
 801ef8c:	681b      	ldr	r3, [r3, #0]
 801ef8e:	681b      	ldr	r3, [r3, #0]
 801ef90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ef94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ef98:	d0e9      	beq.n	801ef6e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 801ef9a:	2300      	movs	r3, #0
}
 801ef9c:	4618      	mov	r0, r3
 801ef9e:	3714      	adds	r7, #20
 801efa0:	46bd      	mov	sp, r7
 801efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efa6:	4770      	bx	lr
 801efa8:	20000020 	.word	0x20000020
 801efac:	14f8b589 	.word	0x14f8b589

0801efb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 801efb0:	b480      	push	{r7}
 801efb2:	b083      	sub	sp, #12
 801efb4:	af00      	add	r7, sp, #0
 801efb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801efb8:	687b      	ldr	r3, [r7, #4]
 801efba:	681b      	ldr	r3, [r3, #0]
 801efbc:	695b      	ldr	r3, [r3, #20]
 801efbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801efc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801efc6:	d11b      	bne.n	801f000 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801efc8:	687b      	ldr	r3, [r7, #4]
 801efca:	681b      	ldr	r3, [r3, #0]
 801efcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801efd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801efd2:	687b      	ldr	r3, [r7, #4]
 801efd4:	2200      	movs	r2, #0
 801efd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801efd8:	687b      	ldr	r3, [r7, #4]
 801efda:	2220      	movs	r2, #32
 801efdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 801efe0:	687b      	ldr	r3, [r7, #4]
 801efe2:	2200      	movs	r2, #0
 801efe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801efe8:	687b      	ldr	r3, [r7, #4]
 801efea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801efec:	f043 0204 	orr.w	r2, r3, #4
 801eff0:	687b      	ldr	r3, [r7, #4]
 801eff2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	2200      	movs	r2, #0
 801eff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801effc:	2301      	movs	r3, #1
 801effe:	e000      	b.n	801f002 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 801f000:	2300      	movs	r3, #0
}
 801f002:	4618      	mov	r0, r3
 801f004:	370c      	adds	r7, #12
 801f006:	46bd      	mov	sp, r7
 801f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f00c:	4770      	bx	lr

0801f00e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 801f00e:	b480      	push	{r7}
 801f010:	b083      	sub	sp, #12
 801f012:	af00      	add	r7, sp, #0
 801f014:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 801f016:	687b      	ldr	r3, [r7, #4]
 801f018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f01a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801f01e:	d103      	bne.n	801f028 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 801f020:	687b      	ldr	r3, [r7, #4]
 801f022:	2201      	movs	r2, #1
 801f024:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 801f026:	e007      	b.n	801f038 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 801f028:	687b      	ldr	r3, [r7, #4]
 801f02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f02c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801f030:	d102      	bne.n	801f038 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 801f032:	687b      	ldr	r3, [r7, #4]
 801f034:	2208      	movs	r2, #8
 801f036:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801f038:	bf00      	nop
 801f03a:	370c      	adds	r7, #12
 801f03c:	46bd      	mov	sp, r7
 801f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f042:	4770      	bx	lr

0801f044 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801f044:	b580      	push	{r7, lr}
 801f046:	b086      	sub	sp, #24
 801f048:	af00      	add	r7, sp, #0
 801f04a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801f04c:	687b      	ldr	r3, [r7, #4]
 801f04e:	2b00      	cmp	r3, #0
 801f050:	d101      	bne.n	801f056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801f052:	2301      	movs	r3, #1
 801f054:	e267      	b.n	801f526 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801f056:	687b      	ldr	r3, [r7, #4]
 801f058:	681b      	ldr	r3, [r3, #0]
 801f05a:	f003 0301 	and.w	r3, r3, #1
 801f05e:	2b00      	cmp	r3, #0
 801f060:	d075      	beq.n	801f14e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801f062:	4b88      	ldr	r3, [pc, #544]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f064:	689b      	ldr	r3, [r3, #8]
 801f066:	f003 030c 	and.w	r3, r3, #12
 801f06a:	2b04      	cmp	r3, #4
 801f06c:	d00c      	beq.n	801f088 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801f06e:	4b85      	ldr	r3, [pc, #532]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f070:	689b      	ldr	r3, [r3, #8]
 801f072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801f076:	2b08      	cmp	r3, #8
 801f078:	d112      	bne.n	801f0a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801f07a:	4b82      	ldr	r3, [pc, #520]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f07c:	685b      	ldr	r3, [r3, #4]
 801f07e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801f086:	d10b      	bne.n	801f0a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801f088:	4b7e      	ldr	r3, [pc, #504]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f08a:	681b      	ldr	r3, [r3, #0]
 801f08c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f090:	2b00      	cmp	r3, #0
 801f092:	d05b      	beq.n	801f14c <HAL_RCC_OscConfig+0x108>
 801f094:	687b      	ldr	r3, [r7, #4]
 801f096:	685b      	ldr	r3, [r3, #4]
 801f098:	2b00      	cmp	r3, #0
 801f09a:	d157      	bne.n	801f14c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801f09c:	2301      	movs	r3, #1
 801f09e:	e242      	b.n	801f526 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801f0a0:	687b      	ldr	r3, [r7, #4]
 801f0a2:	685b      	ldr	r3, [r3, #4]
 801f0a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f0a8:	d106      	bne.n	801f0b8 <HAL_RCC_OscConfig+0x74>
 801f0aa:	4b76      	ldr	r3, [pc, #472]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f0ac:	681b      	ldr	r3, [r3, #0]
 801f0ae:	4a75      	ldr	r2, [pc, #468]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f0b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f0b4:	6013      	str	r3, [r2, #0]
 801f0b6:	e01d      	b.n	801f0f4 <HAL_RCC_OscConfig+0xb0>
 801f0b8:	687b      	ldr	r3, [r7, #4]
 801f0ba:	685b      	ldr	r3, [r3, #4]
 801f0bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801f0c0:	d10c      	bne.n	801f0dc <HAL_RCC_OscConfig+0x98>
 801f0c2:	4b70      	ldr	r3, [pc, #448]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f0c4:	681b      	ldr	r3, [r3, #0]
 801f0c6:	4a6f      	ldr	r2, [pc, #444]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f0c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801f0cc:	6013      	str	r3, [r2, #0]
 801f0ce:	4b6d      	ldr	r3, [pc, #436]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f0d0:	681b      	ldr	r3, [r3, #0]
 801f0d2:	4a6c      	ldr	r2, [pc, #432]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f0d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f0d8:	6013      	str	r3, [r2, #0]
 801f0da:	e00b      	b.n	801f0f4 <HAL_RCC_OscConfig+0xb0>
 801f0dc:	4b69      	ldr	r3, [pc, #420]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f0de:	681b      	ldr	r3, [r3, #0]
 801f0e0:	4a68      	ldr	r2, [pc, #416]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f0e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f0e6:	6013      	str	r3, [r2, #0]
 801f0e8:	4b66      	ldr	r3, [pc, #408]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f0ea:	681b      	ldr	r3, [r3, #0]
 801f0ec:	4a65      	ldr	r2, [pc, #404]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f0ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801f0f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801f0f4:	687b      	ldr	r3, [r7, #4]
 801f0f6:	685b      	ldr	r3, [r3, #4]
 801f0f8:	2b00      	cmp	r3, #0
 801f0fa:	d013      	beq.n	801f124 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f0fc:	f7fb fc74 	bl	801a9e8 <HAL_GetTick>
 801f100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801f102:	e008      	b.n	801f116 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801f104:	f7fb fc70 	bl	801a9e8 <HAL_GetTick>
 801f108:	4602      	mov	r2, r0
 801f10a:	693b      	ldr	r3, [r7, #16]
 801f10c:	1ad3      	subs	r3, r2, r3
 801f10e:	2b64      	cmp	r3, #100	; 0x64
 801f110:	d901      	bls.n	801f116 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801f112:	2303      	movs	r3, #3
 801f114:	e207      	b.n	801f526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801f116:	4b5b      	ldr	r3, [pc, #364]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f118:	681b      	ldr	r3, [r3, #0]
 801f11a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f11e:	2b00      	cmp	r3, #0
 801f120:	d0f0      	beq.n	801f104 <HAL_RCC_OscConfig+0xc0>
 801f122:	e014      	b.n	801f14e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f124:	f7fb fc60 	bl	801a9e8 <HAL_GetTick>
 801f128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801f12a:	e008      	b.n	801f13e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801f12c:	f7fb fc5c 	bl	801a9e8 <HAL_GetTick>
 801f130:	4602      	mov	r2, r0
 801f132:	693b      	ldr	r3, [r7, #16]
 801f134:	1ad3      	subs	r3, r2, r3
 801f136:	2b64      	cmp	r3, #100	; 0x64
 801f138:	d901      	bls.n	801f13e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801f13a:	2303      	movs	r3, #3
 801f13c:	e1f3      	b.n	801f526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801f13e:	4b51      	ldr	r3, [pc, #324]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f140:	681b      	ldr	r3, [r3, #0]
 801f142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f146:	2b00      	cmp	r3, #0
 801f148:	d1f0      	bne.n	801f12c <HAL_RCC_OscConfig+0xe8>
 801f14a:	e000      	b.n	801f14e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801f14c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801f14e:	687b      	ldr	r3, [r7, #4]
 801f150:	681b      	ldr	r3, [r3, #0]
 801f152:	f003 0302 	and.w	r3, r3, #2
 801f156:	2b00      	cmp	r3, #0
 801f158:	d063      	beq.n	801f222 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801f15a:	4b4a      	ldr	r3, [pc, #296]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f15c:	689b      	ldr	r3, [r3, #8]
 801f15e:	f003 030c 	and.w	r3, r3, #12
 801f162:	2b00      	cmp	r3, #0
 801f164:	d00b      	beq.n	801f17e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801f166:	4b47      	ldr	r3, [pc, #284]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f168:	689b      	ldr	r3, [r3, #8]
 801f16a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801f16e:	2b08      	cmp	r3, #8
 801f170:	d11c      	bne.n	801f1ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801f172:	4b44      	ldr	r3, [pc, #272]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f174:	685b      	ldr	r3, [r3, #4]
 801f176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f17a:	2b00      	cmp	r3, #0
 801f17c:	d116      	bne.n	801f1ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801f17e:	4b41      	ldr	r3, [pc, #260]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f180:	681b      	ldr	r3, [r3, #0]
 801f182:	f003 0302 	and.w	r3, r3, #2
 801f186:	2b00      	cmp	r3, #0
 801f188:	d005      	beq.n	801f196 <HAL_RCC_OscConfig+0x152>
 801f18a:	687b      	ldr	r3, [r7, #4]
 801f18c:	68db      	ldr	r3, [r3, #12]
 801f18e:	2b01      	cmp	r3, #1
 801f190:	d001      	beq.n	801f196 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801f192:	2301      	movs	r3, #1
 801f194:	e1c7      	b.n	801f526 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801f196:	4b3b      	ldr	r3, [pc, #236]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f198:	681b      	ldr	r3, [r3, #0]
 801f19a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801f19e:	687b      	ldr	r3, [r7, #4]
 801f1a0:	691b      	ldr	r3, [r3, #16]
 801f1a2:	00db      	lsls	r3, r3, #3
 801f1a4:	4937      	ldr	r1, [pc, #220]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f1a6:	4313      	orrs	r3, r2
 801f1a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801f1aa:	e03a      	b.n	801f222 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801f1ac:	687b      	ldr	r3, [r7, #4]
 801f1ae:	68db      	ldr	r3, [r3, #12]
 801f1b0:	2b00      	cmp	r3, #0
 801f1b2:	d020      	beq.n	801f1f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801f1b4:	4b34      	ldr	r3, [pc, #208]	; (801f288 <HAL_RCC_OscConfig+0x244>)
 801f1b6:	2201      	movs	r2, #1
 801f1b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f1ba:	f7fb fc15 	bl	801a9e8 <HAL_GetTick>
 801f1be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f1c0:	e008      	b.n	801f1d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801f1c2:	f7fb fc11 	bl	801a9e8 <HAL_GetTick>
 801f1c6:	4602      	mov	r2, r0
 801f1c8:	693b      	ldr	r3, [r7, #16]
 801f1ca:	1ad3      	subs	r3, r2, r3
 801f1cc:	2b02      	cmp	r3, #2
 801f1ce:	d901      	bls.n	801f1d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801f1d0:	2303      	movs	r3, #3
 801f1d2:	e1a8      	b.n	801f526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f1d4:	4b2b      	ldr	r3, [pc, #172]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f1d6:	681b      	ldr	r3, [r3, #0]
 801f1d8:	f003 0302 	and.w	r3, r3, #2
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	d0f0      	beq.n	801f1c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801f1e0:	4b28      	ldr	r3, [pc, #160]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f1e2:	681b      	ldr	r3, [r3, #0]
 801f1e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801f1e8:	687b      	ldr	r3, [r7, #4]
 801f1ea:	691b      	ldr	r3, [r3, #16]
 801f1ec:	00db      	lsls	r3, r3, #3
 801f1ee:	4925      	ldr	r1, [pc, #148]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f1f0:	4313      	orrs	r3, r2
 801f1f2:	600b      	str	r3, [r1, #0]
 801f1f4:	e015      	b.n	801f222 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801f1f6:	4b24      	ldr	r3, [pc, #144]	; (801f288 <HAL_RCC_OscConfig+0x244>)
 801f1f8:	2200      	movs	r2, #0
 801f1fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f1fc:	f7fb fbf4 	bl	801a9e8 <HAL_GetTick>
 801f200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801f202:	e008      	b.n	801f216 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801f204:	f7fb fbf0 	bl	801a9e8 <HAL_GetTick>
 801f208:	4602      	mov	r2, r0
 801f20a:	693b      	ldr	r3, [r7, #16]
 801f20c:	1ad3      	subs	r3, r2, r3
 801f20e:	2b02      	cmp	r3, #2
 801f210:	d901      	bls.n	801f216 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801f212:	2303      	movs	r3, #3
 801f214:	e187      	b.n	801f526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801f216:	4b1b      	ldr	r3, [pc, #108]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f218:	681b      	ldr	r3, [r3, #0]
 801f21a:	f003 0302 	and.w	r3, r3, #2
 801f21e:	2b00      	cmp	r3, #0
 801f220:	d1f0      	bne.n	801f204 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801f222:	687b      	ldr	r3, [r7, #4]
 801f224:	681b      	ldr	r3, [r3, #0]
 801f226:	f003 0308 	and.w	r3, r3, #8
 801f22a:	2b00      	cmp	r3, #0
 801f22c:	d036      	beq.n	801f29c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801f22e:	687b      	ldr	r3, [r7, #4]
 801f230:	695b      	ldr	r3, [r3, #20]
 801f232:	2b00      	cmp	r3, #0
 801f234:	d016      	beq.n	801f264 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801f236:	4b15      	ldr	r3, [pc, #84]	; (801f28c <HAL_RCC_OscConfig+0x248>)
 801f238:	2201      	movs	r2, #1
 801f23a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801f23c:	f7fb fbd4 	bl	801a9e8 <HAL_GetTick>
 801f240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801f242:	e008      	b.n	801f256 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801f244:	f7fb fbd0 	bl	801a9e8 <HAL_GetTick>
 801f248:	4602      	mov	r2, r0
 801f24a:	693b      	ldr	r3, [r7, #16]
 801f24c:	1ad3      	subs	r3, r2, r3
 801f24e:	2b02      	cmp	r3, #2
 801f250:	d901      	bls.n	801f256 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801f252:	2303      	movs	r3, #3
 801f254:	e167      	b.n	801f526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801f256:	4b0b      	ldr	r3, [pc, #44]	; (801f284 <HAL_RCC_OscConfig+0x240>)
 801f258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f25a:	f003 0302 	and.w	r3, r3, #2
 801f25e:	2b00      	cmp	r3, #0
 801f260:	d0f0      	beq.n	801f244 <HAL_RCC_OscConfig+0x200>
 801f262:	e01b      	b.n	801f29c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801f264:	4b09      	ldr	r3, [pc, #36]	; (801f28c <HAL_RCC_OscConfig+0x248>)
 801f266:	2200      	movs	r2, #0
 801f268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801f26a:	f7fb fbbd 	bl	801a9e8 <HAL_GetTick>
 801f26e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801f270:	e00e      	b.n	801f290 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801f272:	f7fb fbb9 	bl	801a9e8 <HAL_GetTick>
 801f276:	4602      	mov	r2, r0
 801f278:	693b      	ldr	r3, [r7, #16]
 801f27a:	1ad3      	subs	r3, r2, r3
 801f27c:	2b02      	cmp	r3, #2
 801f27e:	d907      	bls.n	801f290 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801f280:	2303      	movs	r3, #3
 801f282:	e150      	b.n	801f526 <HAL_RCC_OscConfig+0x4e2>
 801f284:	40023800 	.word	0x40023800
 801f288:	42470000 	.word	0x42470000
 801f28c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801f290:	4b88      	ldr	r3, [pc, #544]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f294:	f003 0302 	and.w	r3, r3, #2
 801f298:	2b00      	cmp	r3, #0
 801f29a:	d1ea      	bne.n	801f272 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801f29c:	687b      	ldr	r3, [r7, #4]
 801f29e:	681b      	ldr	r3, [r3, #0]
 801f2a0:	f003 0304 	and.w	r3, r3, #4
 801f2a4:	2b00      	cmp	r3, #0
 801f2a6:	f000 8097 	beq.w	801f3d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801f2aa:	2300      	movs	r3, #0
 801f2ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801f2ae:	4b81      	ldr	r3, [pc, #516]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f2b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f2b6:	2b00      	cmp	r3, #0
 801f2b8:	d10f      	bne.n	801f2da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801f2ba:	2300      	movs	r3, #0
 801f2bc:	60bb      	str	r3, [r7, #8]
 801f2be:	4b7d      	ldr	r3, [pc, #500]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f2c2:	4a7c      	ldr	r2, [pc, #496]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f2c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801f2c8:	6413      	str	r3, [r2, #64]	; 0x40
 801f2ca:	4b7a      	ldr	r3, [pc, #488]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f2ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f2d2:	60bb      	str	r3, [r7, #8]
 801f2d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801f2d6:	2301      	movs	r3, #1
 801f2d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f2da:	4b77      	ldr	r3, [pc, #476]	; (801f4b8 <HAL_RCC_OscConfig+0x474>)
 801f2dc:	681b      	ldr	r3, [r3, #0]
 801f2de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f2e2:	2b00      	cmp	r3, #0
 801f2e4:	d118      	bne.n	801f318 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801f2e6:	4b74      	ldr	r3, [pc, #464]	; (801f4b8 <HAL_RCC_OscConfig+0x474>)
 801f2e8:	681b      	ldr	r3, [r3, #0]
 801f2ea:	4a73      	ldr	r2, [pc, #460]	; (801f4b8 <HAL_RCC_OscConfig+0x474>)
 801f2ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f2f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801f2f2:	f7fb fb79 	bl	801a9e8 <HAL_GetTick>
 801f2f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f2f8:	e008      	b.n	801f30c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801f2fa:	f7fb fb75 	bl	801a9e8 <HAL_GetTick>
 801f2fe:	4602      	mov	r2, r0
 801f300:	693b      	ldr	r3, [r7, #16]
 801f302:	1ad3      	subs	r3, r2, r3
 801f304:	2b02      	cmp	r3, #2
 801f306:	d901      	bls.n	801f30c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 801f308:	2303      	movs	r3, #3
 801f30a:	e10c      	b.n	801f526 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f30c:	4b6a      	ldr	r3, [pc, #424]	; (801f4b8 <HAL_RCC_OscConfig+0x474>)
 801f30e:	681b      	ldr	r3, [r3, #0]
 801f310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f314:	2b00      	cmp	r3, #0
 801f316:	d0f0      	beq.n	801f2fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801f318:	687b      	ldr	r3, [r7, #4]
 801f31a:	689b      	ldr	r3, [r3, #8]
 801f31c:	2b01      	cmp	r3, #1
 801f31e:	d106      	bne.n	801f32e <HAL_RCC_OscConfig+0x2ea>
 801f320:	4b64      	ldr	r3, [pc, #400]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f324:	4a63      	ldr	r2, [pc, #396]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f326:	f043 0301 	orr.w	r3, r3, #1
 801f32a:	6713      	str	r3, [r2, #112]	; 0x70
 801f32c:	e01c      	b.n	801f368 <HAL_RCC_OscConfig+0x324>
 801f32e:	687b      	ldr	r3, [r7, #4]
 801f330:	689b      	ldr	r3, [r3, #8]
 801f332:	2b05      	cmp	r3, #5
 801f334:	d10c      	bne.n	801f350 <HAL_RCC_OscConfig+0x30c>
 801f336:	4b5f      	ldr	r3, [pc, #380]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f33a:	4a5e      	ldr	r2, [pc, #376]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f33c:	f043 0304 	orr.w	r3, r3, #4
 801f340:	6713      	str	r3, [r2, #112]	; 0x70
 801f342:	4b5c      	ldr	r3, [pc, #368]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f346:	4a5b      	ldr	r2, [pc, #364]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f348:	f043 0301 	orr.w	r3, r3, #1
 801f34c:	6713      	str	r3, [r2, #112]	; 0x70
 801f34e:	e00b      	b.n	801f368 <HAL_RCC_OscConfig+0x324>
 801f350:	4b58      	ldr	r3, [pc, #352]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f354:	4a57      	ldr	r2, [pc, #348]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f356:	f023 0301 	bic.w	r3, r3, #1
 801f35a:	6713      	str	r3, [r2, #112]	; 0x70
 801f35c:	4b55      	ldr	r3, [pc, #340]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f35e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f360:	4a54      	ldr	r2, [pc, #336]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f362:	f023 0304 	bic.w	r3, r3, #4
 801f366:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801f368:	687b      	ldr	r3, [r7, #4]
 801f36a:	689b      	ldr	r3, [r3, #8]
 801f36c:	2b00      	cmp	r3, #0
 801f36e:	d015      	beq.n	801f39c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801f370:	f7fb fb3a 	bl	801a9e8 <HAL_GetTick>
 801f374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801f376:	e00a      	b.n	801f38e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801f378:	f7fb fb36 	bl	801a9e8 <HAL_GetTick>
 801f37c:	4602      	mov	r2, r0
 801f37e:	693b      	ldr	r3, [r7, #16]
 801f380:	1ad3      	subs	r3, r2, r3
 801f382:	f241 3288 	movw	r2, #5000	; 0x1388
 801f386:	4293      	cmp	r3, r2
 801f388:	d901      	bls.n	801f38e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 801f38a:	2303      	movs	r3, #3
 801f38c:	e0cb      	b.n	801f526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801f38e:	4b49      	ldr	r3, [pc, #292]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f392:	f003 0302 	and.w	r3, r3, #2
 801f396:	2b00      	cmp	r3, #0
 801f398:	d0ee      	beq.n	801f378 <HAL_RCC_OscConfig+0x334>
 801f39a:	e014      	b.n	801f3c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801f39c:	f7fb fb24 	bl	801a9e8 <HAL_GetTick>
 801f3a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801f3a2:	e00a      	b.n	801f3ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801f3a4:	f7fb fb20 	bl	801a9e8 <HAL_GetTick>
 801f3a8:	4602      	mov	r2, r0
 801f3aa:	693b      	ldr	r3, [r7, #16]
 801f3ac:	1ad3      	subs	r3, r2, r3
 801f3ae:	f241 3288 	movw	r2, #5000	; 0x1388
 801f3b2:	4293      	cmp	r3, r2
 801f3b4:	d901      	bls.n	801f3ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801f3b6:	2303      	movs	r3, #3
 801f3b8:	e0b5      	b.n	801f526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801f3ba:	4b3e      	ldr	r3, [pc, #248]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f3bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f3be:	f003 0302 	and.w	r3, r3, #2
 801f3c2:	2b00      	cmp	r3, #0
 801f3c4:	d1ee      	bne.n	801f3a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801f3c6:	7dfb      	ldrb	r3, [r7, #23]
 801f3c8:	2b01      	cmp	r3, #1
 801f3ca:	d105      	bne.n	801f3d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801f3cc:	4b39      	ldr	r3, [pc, #228]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f3d0:	4a38      	ldr	r2, [pc, #224]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f3d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801f3d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801f3d8:	687b      	ldr	r3, [r7, #4]
 801f3da:	699b      	ldr	r3, [r3, #24]
 801f3dc:	2b00      	cmp	r3, #0
 801f3de:	f000 80a1 	beq.w	801f524 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801f3e2:	4b34      	ldr	r3, [pc, #208]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f3e4:	689b      	ldr	r3, [r3, #8]
 801f3e6:	f003 030c 	and.w	r3, r3, #12
 801f3ea:	2b08      	cmp	r3, #8
 801f3ec:	d05c      	beq.n	801f4a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801f3ee:	687b      	ldr	r3, [r7, #4]
 801f3f0:	699b      	ldr	r3, [r3, #24]
 801f3f2:	2b02      	cmp	r3, #2
 801f3f4:	d141      	bne.n	801f47a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801f3f6:	4b31      	ldr	r3, [pc, #196]	; (801f4bc <HAL_RCC_OscConfig+0x478>)
 801f3f8:	2200      	movs	r2, #0
 801f3fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f3fc:	f7fb faf4 	bl	801a9e8 <HAL_GetTick>
 801f400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f402:	e008      	b.n	801f416 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801f404:	f7fb faf0 	bl	801a9e8 <HAL_GetTick>
 801f408:	4602      	mov	r2, r0
 801f40a:	693b      	ldr	r3, [r7, #16]
 801f40c:	1ad3      	subs	r3, r2, r3
 801f40e:	2b02      	cmp	r3, #2
 801f410:	d901      	bls.n	801f416 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801f412:	2303      	movs	r3, #3
 801f414:	e087      	b.n	801f526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f416:	4b27      	ldr	r3, [pc, #156]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f418:	681b      	ldr	r3, [r3, #0]
 801f41a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f41e:	2b00      	cmp	r3, #0
 801f420:	d1f0      	bne.n	801f404 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801f422:	687b      	ldr	r3, [r7, #4]
 801f424:	69da      	ldr	r2, [r3, #28]
 801f426:	687b      	ldr	r3, [r7, #4]
 801f428:	6a1b      	ldr	r3, [r3, #32]
 801f42a:	431a      	orrs	r2, r3
 801f42c:	687b      	ldr	r3, [r7, #4]
 801f42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f430:	019b      	lsls	r3, r3, #6
 801f432:	431a      	orrs	r2, r3
 801f434:	687b      	ldr	r3, [r7, #4]
 801f436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f438:	085b      	lsrs	r3, r3, #1
 801f43a:	3b01      	subs	r3, #1
 801f43c:	041b      	lsls	r3, r3, #16
 801f43e:	431a      	orrs	r2, r3
 801f440:	687b      	ldr	r3, [r7, #4]
 801f442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f444:	061b      	lsls	r3, r3, #24
 801f446:	491b      	ldr	r1, [pc, #108]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f448:	4313      	orrs	r3, r2
 801f44a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801f44c:	4b1b      	ldr	r3, [pc, #108]	; (801f4bc <HAL_RCC_OscConfig+0x478>)
 801f44e:	2201      	movs	r2, #1
 801f450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f452:	f7fb fac9 	bl	801a9e8 <HAL_GetTick>
 801f456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801f458:	e008      	b.n	801f46c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801f45a:	f7fb fac5 	bl	801a9e8 <HAL_GetTick>
 801f45e:	4602      	mov	r2, r0
 801f460:	693b      	ldr	r3, [r7, #16]
 801f462:	1ad3      	subs	r3, r2, r3
 801f464:	2b02      	cmp	r3, #2
 801f466:	d901      	bls.n	801f46c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801f468:	2303      	movs	r3, #3
 801f46a:	e05c      	b.n	801f526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801f46c:	4b11      	ldr	r3, [pc, #68]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f46e:	681b      	ldr	r3, [r3, #0]
 801f470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f474:	2b00      	cmp	r3, #0
 801f476:	d0f0      	beq.n	801f45a <HAL_RCC_OscConfig+0x416>
 801f478:	e054      	b.n	801f524 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801f47a:	4b10      	ldr	r3, [pc, #64]	; (801f4bc <HAL_RCC_OscConfig+0x478>)
 801f47c:	2200      	movs	r2, #0
 801f47e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f480:	f7fb fab2 	bl	801a9e8 <HAL_GetTick>
 801f484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f486:	e008      	b.n	801f49a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801f488:	f7fb faae 	bl	801a9e8 <HAL_GetTick>
 801f48c:	4602      	mov	r2, r0
 801f48e:	693b      	ldr	r3, [r7, #16]
 801f490:	1ad3      	subs	r3, r2, r3
 801f492:	2b02      	cmp	r3, #2
 801f494:	d901      	bls.n	801f49a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801f496:	2303      	movs	r3, #3
 801f498:	e045      	b.n	801f526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f49a:	4b06      	ldr	r3, [pc, #24]	; (801f4b4 <HAL_RCC_OscConfig+0x470>)
 801f49c:	681b      	ldr	r3, [r3, #0]
 801f49e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f4a2:	2b00      	cmp	r3, #0
 801f4a4:	d1f0      	bne.n	801f488 <HAL_RCC_OscConfig+0x444>
 801f4a6:	e03d      	b.n	801f524 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801f4a8:	687b      	ldr	r3, [r7, #4]
 801f4aa:	699b      	ldr	r3, [r3, #24]
 801f4ac:	2b01      	cmp	r3, #1
 801f4ae:	d107      	bne.n	801f4c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 801f4b0:	2301      	movs	r3, #1
 801f4b2:	e038      	b.n	801f526 <HAL_RCC_OscConfig+0x4e2>
 801f4b4:	40023800 	.word	0x40023800
 801f4b8:	40007000 	.word	0x40007000
 801f4bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801f4c0:	4b1b      	ldr	r3, [pc, #108]	; (801f530 <HAL_RCC_OscConfig+0x4ec>)
 801f4c2:	685b      	ldr	r3, [r3, #4]
 801f4c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801f4c6:	687b      	ldr	r3, [r7, #4]
 801f4c8:	699b      	ldr	r3, [r3, #24]
 801f4ca:	2b01      	cmp	r3, #1
 801f4cc:	d028      	beq.n	801f520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801f4ce:	68fb      	ldr	r3, [r7, #12]
 801f4d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801f4d4:	687b      	ldr	r3, [r7, #4]
 801f4d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801f4d8:	429a      	cmp	r2, r3
 801f4da:	d121      	bne.n	801f520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801f4dc:	68fb      	ldr	r3, [r7, #12]
 801f4de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801f4e2:	687b      	ldr	r3, [r7, #4]
 801f4e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801f4e6:	429a      	cmp	r2, r3
 801f4e8:	d11a      	bne.n	801f520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801f4ea:	68fa      	ldr	r2, [r7, #12]
 801f4ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801f4f0:	4013      	ands	r3, r2
 801f4f2:	687a      	ldr	r2, [r7, #4]
 801f4f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801f4f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801f4f8:	4293      	cmp	r3, r2
 801f4fa:	d111      	bne.n	801f520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801f4fc:	68fb      	ldr	r3, [r7, #12]
 801f4fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801f502:	687b      	ldr	r3, [r7, #4]
 801f504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f506:	085b      	lsrs	r3, r3, #1
 801f508:	3b01      	subs	r3, #1
 801f50a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801f50c:	429a      	cmp	r2, r3
 801f50e:	d107      	bne.n	801f520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801f510:	68fb      	ldr	r3, [r7, #12]
 801f512:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801f516:	687b      	ldr	r3, [r7, #4]
 801f518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f51a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801f51c:	429a      	cmp	r2, r3
 801f51e:	d001      	beq.n	801f524 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 801f520:	2301      	movs	r3, #1
 801f522:	e000      	b.n	801f526 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 801f524:	2300      	movs	r3, #0
}
 801f526:	4618      	mov	r0, r3
 801f528:	3718      	adds	r7, #24
 801f52a:	46bd      	mov	sp, r7
 801f52c:	bd80      	pop	{r7, pc}
 801f52e:	bf00      	nop
 801f530:	40023800 	.word	0x40023800

0801f534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801f534:	b580      	push	{r7, lr}
 801f536:	b084      	sub	sp, #16
 801f538:	af00      	add	r7, sp, #0
 801f53a:	6078      	str	r0, [r7, #4]
 801f53c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801f53e:	687b      	ldr	r3, [r7, #4]
 801f540:	2b00      	cmp	r3, #0
 801f542:	d101      	bne.n	801f548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801f544:	2301      	movs	r3, #1
 801f546:	e0cc      	b.n	801f6e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801f548:	4b68      	ldr	r3, [pc, #416]	; (801f6ec <HAL_RCC_ClockConfig+0x1b8>)
 801f54a:	681b      	ldr	r3, [r3, #0]
 801f54c:	f003 0307 	and.w	r3, r3, #7
 801f550:	683a      	ldr	r2, [r7, #0]
 801f552:	429a      	cmp	r2, r3
 801f554:	d90c      	bls.n	801f570 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801f556:	4b65      	ldr	r3, [pc, #404]	; (801f6ec <HAL_RCC_ClockConfig+0x1b8>)
 801f558:	683a      	ldr	r2, [r7, #0]
 801f55a:	b2d2      	uxtb	r2, r2
 801f55c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801f55e:	4b63      	ldr	r3, [pc, #396]	; (801f6ec <HAL_RCC_ClockConfig+0x1b8>)
 801f560:	681b      	ldr	r3, [r3, #0]
 801f562:	f003 0307 	and.w	r3, r3, #7
 801f566:	683a      	ldr	r2, [r7, #0]
 801f568:	429a      	cmp	r2, r3
 801f56a:	d001      	beq.n	801f570 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801f56c:	2301      	movs	r3, #1
 801f56e:	e0b8      	b.n	801f6e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801f570:	687b      	ldr	r3, [r7, #4]
 801f572:	681b      	ldr	r3, [r3, #0]
 801f574:	f003 0302 	and.w	r3, r3, #2
 801f578:	2b00      	cmp	r3, #0
 801f57a:	d020      	beq.n	801f5be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801f57c:	687b      	ldr	r3, [r7, #4]
 801f57e:	681b      	ldr	r3, [r3, #0]
 801f580:	f003 0304 	and.w	r3, r3, #4
 801f584:	2b00      	cmp	r3, #0
 801f586:	d005      	beq.n	801f594 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801f588:	4b59      	ldr	r3, [pc, #356]	; (801f6f0 <HAL_RCC_ClockConfig+0x1bc>)
 801f58a:	689b      	ldr	r3, [r3, #8]
 801f58c:	4a58      	ldr	r2, [pc, #352]	; (801f6f0 <HAL_RCC_ClockConfig+0x1bc>)
 801f58e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801f592:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801f594:	687b      	ldr	r3, [r7, #4]
 801f596:	681b      	ldr	r3, [r3, #0]
 801f598:	f003 0308 	and.w	r3, r3, #8
 801f59c:	2b00      	cmp	r3, #0
 801f59e:	d005      	beq.n	801f5ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801f5a0:	4b53      	ldr	r3, [pc, #332]	; (801f6f0 <HAL_RCC_ClockConfig+0x1bc>)
 801f5a2:	689b      	ldr	r3, [r3, #8]
 801f5a4:	4a52      	ldr	r2, [pc, #328]	; (801f6f0 <HAL_RCC_ClockConfig+0x1bc>)
 801f5a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801f5aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801f5ac:	4b50      	ldr	r3, [pc, #320]	; (801f6f0 <HAL_RCC_ClockConfig+0x1bc>)
 801f5ae:	689b      	ldr	r3, [r3, #8]
 801f5b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801f5b4:	687b      	ldr	r3, [r7, #4]
 801f5b6:	689b      	ldr	r3, [r3, #8]
 801f5b8:	494d      	ldr	r1, [pc, #308]	; (801f6f0 <HAL_RCC_ClockConfig+0x1bc>)
 801f5ba:	4313      	orrs	r3, r2
 801f5bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801f5be:	687b      	ldr	r3, [r7, #4]
 801f5c0:	681b      	ldr	r3, [r3, #0]
 801f5c2:	f003 0301 	and.w	r3, r3, #1
 801f5c6:	2b00      	cmp	r3, #0
 801f5c8:	d044      	beq.n	801f654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801f5ca:	687b      	ldr	r3, [r7, #4]
 801f5cc:	685b      	ldr	r3, [r3, #4]
 801f5ce:	2b01      	cmp	r3, #1
 801f5d0:	d107      	bne.n	801f5e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801f5d2:	4b47      	ldr	r3, [pc, #284]	; (801f6f0 <HAL_RCC_ClockConfig+0x1bc>)
 801f5d4:	681b      	ldr	r3, [r3, #0]
 801f5d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f5da:	2b00      	cmp	r3, #0
 801f5dc:	d119      	bne.n	801f612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801f5de:	2301      	movs	r3, #1
 801f5e0:	e07f      	b.n	801f6e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801f5e2:	687b      	ldr	r3, [r7, #4]
 801f5e4:	685b      	ldr	r3, [r3, #4]
 801f5e6:	2b02      	cmp	r3, #2
 801f5e8:	d003      	beq.n	801f5f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801f5ea:	687b      	ldr	r3, [r7, #4]
 801f5ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801f5ee:	2b03      	cmp	r3, #3
 801f5f0:	d107      	bne.n	801f602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801f5f2:	4b3f      	ldr	r3, [pc, #252]	; (801f6f0 <HAL_RCC_ClockConfig+0x1bc>)
 801f5f4:	681b      	ldr	r3, [r3, #0]
 801f5f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f5fa:	2b00      	cmp	r3, #0
 801f5fc:	d109      	bne.n	801f612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801f5fe:	2301      	movs	r3, #1
 801f600:	e06f      	b.n	801f6e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f602:	4b3b      	ldr	r3, [pc, #236]	; (801f6f0 <HAL_RCC_ClockConfig+0x1bc>)
 801f604:	681b      	ldr	r3, [r3, #0]
 801f606:	f003 0302 	and.w	r3, r3, #2
 801f60a:	2b00      	cmp	r3, #0
 801f60c:	d101      	bne.n	801f612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801f60e:	2301      	movs	r3, #1
 801f610:	e067      	b.n	801f6e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801f612:	4b37      	ldr	r3, [pc, #220]	; (801f6f0 <HAL_RCC_ClockConfig+0x1bc>)
 801f614:	689b      	ldr	r3, [r3, #8]
 801f616:	f023 0203 	bic.w	r2, r3, #3
 801f61a:	687b      	ldr	r3, [r7, #4]
 801f61c:	685b      	ldr	r3, [r3, #4]
 801f61e:	4934      	ldr	r1, [pc, #208]	; (801f6f0 <HAL_RCC_ClockConfig+0x1bc>)
 801f620:	4313      	orrs	r3, r2
 801f622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801f624:	f7fb f9e0 	bl	801a9e8 <HAL_GetTick>
 801f628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801f62a:	e00a      	b.n	801f642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801f62c:	f7fb f9dc 	bl	801a9e8 <HAL_GetTick>
 801f630:	4602      	mov	r2, r0
 801f632:	68fb      	ldr	r3, [r7, #12]
 801f634:	1ad3      	subs	r3, r2, r3
 801f636:	f241 3288 	movw	r2, #5000	; 0x1388
 801f63a:	4293      	cmp	r3, r2
 801f63c:	d901      	bls.n	801f642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801f63e:	2303      	movs	r3, #3
 801f640:	e04f      	b.n	801f6e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801f642:	4b2b      	ldr	r3, [pc, #172]	; (801f6f0 <HAL_RCC_ClockConfig+0x1bc>)
 801f644:	689b      	ldr	r3, [r3, #8]
 801f646:	f003 020c 	and.w	r2, r3, #12
 801f64a:	687b      	ldr	r3, [r7, #4]
 801f64c:	685b      	ldr	r3, [r3, #4]
 801f64e:	009b      	lsls	r3, r3, #2
 801f650:	429a      	cmp	r2, r3
 801f652:	d1eb      	bne.n	801f62c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801f654:	4b25      	ldr	r3, [pc, #148]	; (801f6ec <HAL_RCC_ClockConfig+0x1b8>)
 801f656:	681b      	ldr	r3, [r3, #0]
 801f658:	f003 0307 	and.w	r3, r3, #7
 801f65c:	683a      	ldr	r2, [r7, #0]
 801f65e:	429a      	cmp	r2, r3
 801f660:	d20c      	bcs.n	801f67c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801f662:	4b22      	ldr	r3, [pc, #136]	; (801f6ec <HAL_RCC_ClockConfig+0x1b8>)
 801f664:	683a      	ldr	r2, [r7, #0]
 801f666:	b2d2      	uxtb	r2, r2
 801f668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801f66a:	4b20      	ldr	r3, [pc, #128]	; (801f6ec <HAL_RCC_ClockConfig+0x1b8>)
 801f66c:	681b      	ldr	r3, [r3, #0]
 801f66e:	f003 0307 	and.w	r3, r3, #7
 801f672:	683a      	ldr	r2, [r7, #0]
 801f674:	429a      	cmp	r2, r3
 801f676:	d001      	beq.n	801f67c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801f678:	2301      	movs	r3, #1
 801f67a:	e032      	b.n	801f6e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801f67c:	687b      	ldr	r3, [r7, #4]
 801f67e:	681b      	ldr	r3, [r3, #0]
 801f680:	f003 0304 	and.w	r3, r3, #4
 801f684:	2b00      	cmp	r3, #0
 801f686:	d008      	beq.n	801f69a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801f688:	4b19      	ldr	r3, [pc, #100]	; (801f6f0 <HAL_RCC_ClockConfig+0x1bc>)
 801f68a:	689b      	ldr	r3, [r3, #8]
 801f68c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801f690:	687b      	ldr	r3, [r7, #4]
 801f692:	68db      	ldr	r3, [r3, #12]
 801f694:	4916      	ldr	r1, [pc, #88]	; (801f6f0 <HAL_RCC_ClockConfig+0x1bc>)
 801f696:	4313      	orrs	r3, r2
 801f698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801f69a:	687b      	ldr	r3, [r7, #4]
 801f69c:	681b      	ldr	r3, [r3, #0]
 801f69e:	f003 0308 	and.w	r3, r3, #8
 801f6a2:	2b00      	cmp	r3, #0
 801f6a4:	d009      	beq.n	801f6ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801f6a6:	4b12      	ldr	r3, [pc, #72]	; (801f6f0 <HAL_RCC_ClockConfig+0x1bc>)
 801f6a8:	689b      	ldr	r3, [r3, #8]
 801f6aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801f6ae:	687b      	ldr	r3, [r7, #4]
 801f6b0:	691b      	ldr	r3, [r3, #16]
 801f6b2:	00db      	lsls	r3, r3, #3
 801f6b4:	490e      	ldr	r1, [pc, #56]	; (801f6f0 <HAL_RCC_ClockConfig+0x1bc>)
 801f6b6:	4313      	orrs	r3, r2
 801f6b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801f6ba:	f000 f821 	bl	801f700 <HAL_RCC_GetSysClockFreq>
 801f6be:	4602      	mov	r2, r0
 801f6c0:	4b0b      	ldr	r3, [pc, #44]	; (801f6f0 <HAL_RCC_ClockConfig+0x1bc>)
 801f6c2:	689b      	ldr	r3, [r3, #8]
 801f6c4:	091b      	lsrs	r3, r3, #4
 801f6c6:	f003 030f 	and.w	r3, r3, #15
 801f6ca:	490a      	ldr	r1, [pc, #40]	; (801f6f4 <HAL_RCC_ClockConfig+0x1c0>)
 801f6cc:	5ccb      	ldrb	r3, [r1, r3]
 801f6ce:	fa22 f303 	lsr.w	r3, r2, r3
 801f6d2:	4a09      	ldr	r2, [pc, #36]	; (801f6f8 <HAL_RCC_ClockConfig+0x1c4>)
 801f6d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801f6d6:	4b09      	ldr	r3, [pc, #36]	; (801f6fc <HAL_RCC_ClockConfig+0x1c8>)
 801f6d8:	681b      	ldr	r3, [r3, #0]
 801f6da:	4618      	mov	r0, r3
 801f6dc:	f7fb f940 	bl	801a960 <HAL_InitTick>

  return HAL_OK;
 801f6e0:	2300      	movs	r3, #0
}
 801f6e2:	4618      	mov	r0, r3
 801f6e4:	3710      	adds	r7, #16
 801f6e6:	46bd      	mov	sp, r7
 801f6e8:	bd80      	pop	{r7, pc}
 801f6ea:	bf00      	nop
 801f6ec:	40023c00 	.word	0x40023c00
 801f6f0:	40023800 	.word	0x40023800
 801f6f4:	08026b48 	.word	0x08026b48
 801f6f8:	20000020 	.word	0x20000020
 801f6fc:	20000090 	.word	0x20000090

0801f700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801f700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f704:	b094      	sub	sp, #80	; 0x50
 801f706:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801f708:	2300      	movs	r3, #0
 801f70a:	647b      	str	r3, [r7, #68]	; 0x44
 801f70c:	2300      	movs	r3, #0
 801f70e:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f710:	2300      	movs	r3, #0
 801f712:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 801f714:	2300      	movs	r3, #0
 801f716:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801f718:	4b79      	ldr	r3, [pc, #484]	; (801f900 <HAL_RCC_GetSysClockFreq+0x200>)
 801f71a:	689b      	ldr	r3, [r3, #8]
 801f71c:	f003 030c 	and.w	r3, r3, #12
 801f720:	2b08      	cmp	r3, #8
 801f722:	d00d      	beq.n	801f740 <HAL_RCC_GetSysClockFreq+0x40>
 801f724:	2b08      	cmp	r3, #8
 801f726:	f200 80e1 	bhi.w	801f8ec <HAL_RCC_GetSysClockFreq+0x1ec>
 801f72a:	2b00      	cmp	r3, #0
 801f72c:	d002      	beq.n	801f734 <HAL_RCC_GetSysClockFreq+0x34>
 801f72e:	2b04      	cmp	r3, #4
 801f730:	d003      	beq.n	801f73a <HAL_RCC_GetSysClockFreq+0x3a>
 801f732:	e0db      	b.n	801f8ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801f734:	4b73      	ldr	r3, [pc, #460]	; (801f904 <HAL_RCC_GetSysClockFreq+0x204>)
 801f736:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 801f738:	e0db      	b.n	801f8f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801f73a:	4b73      	ldr	r3, [pc, #460]	; (801f908 <HAL_RCC_GetSysClockFreq+0x208>)
 801f73c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801f73e:	e0d8      	b.n	801f8f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801f740:	4b6f      	ldr	r3, [pc, #444]	; (801f900 <HAL_RCC_GetSysClockFreq+0x200>)
 801f742:	685b      	ldr	r3, [r3, #4]
 801f744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f748:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801f74a:	4b6d      	ldr	r3, [pc, #436]	; (801f900 <HAL_RCC_GetSysClockFreq+0x200>)
 801f74c:	685b      	ldr	r3, [r3, #4]
 801f74e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f752:	2b00      	cmp	r3, #0
 801f754:	d063      	beq.n	801f81e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801f756:	4b6a      	ldr	r3, [pc, #424]	; (801f900 <HAL_RCC_GetSysClockFreq+0x200>)
 801f758:	685b      	ldr	r3, [r3, #4]
 801f75a:	099b      	lsrs	r3, r3, #6
 801f75c:	2200      	movs	r2, #0
 801f75e:	63bb      	str	r3, [r7, #56]	; 0x38
 801f760:	63fa      	str	r2, [r7, #60]	; 0x3c
 801f762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f768:	633b      	str	r3, [r7, #48]	; 0x30
 801f76a:	2300      	movs	r3, #0
 801f76c:	637b      	str	r3, [r7, #52]	; 0x34
 801f76e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801f772:	4622      	mov	r2, r4
 801f774:	462b      	mov	r3, r5
 801f776:	f04f 0000 	mov.w	r0, #0
 801f77a:	f04f 0100 	mov.w	r1, #0
 801f77e:	0159      	lsls	r1, r3, #5
 801f780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801f784:	0150      	lsls	r0, r2, #5
 801f786:	4602      	mov	r2, r0
 801f788:	460b      	mov	r3, r1
 801f78a:	4621      	mov	r1, r4
 801f78c:	1a51      	subs	r1, r2, r1
 801f78e:	6139      	str	r1, [r7, #16]
 801f790:	4629      	mov	r1, r5
 801f792:	eb63 0301 	sbc.w	r3, r3, r1
 801f796:	617b      	str	r3, [r7, #20]
 801f798:	f04f 0200 	mov.w	r2, #0
 801f79c:	f04f 0300 	mov.w	r3, #0
 801f7a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801f7a4:	4659      	mov	r1, fp
 801f7a6:	018b      	lsls	r3, r1, #6
 801f7a8:	4651      	mov	r1, sl
 801f7aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801f7ae:	4651      	mov	r1, sl
 801f7b0:	018a      	lsls	r2, r1, #6
 801f7b2:	4651      	mov	r1, sl
 801f7b4:	ebb2 0801 	subs.w	r8, r2, r1
 801f7b8:	4659      	mov	r1, fp
 801f7ba:	eb63 0901 	sbc.w	r9, r3, r1
 801f7be:	f04f 0200 	mov.w	r2, #0
 801f7c2:	f04f 0300 	mov.w	r3, #0
 801f7c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801f7ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801f7ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801f7d2:	4690      	mov	r8, r2
 801f7d4:	4699      	mov	r9, r3
 801f7d6:	4623      	mov	r3, r4
 801f7d8:	eb18 0303 	adds.w	r3, r8, r3
 801f7dc:	60bb      	str	r3, [r7, #8]
 801f7de:	462b      	mov	r3, r5
 801f7e0:	eb49 0303 	adc.w	r3, r9, r3
 801f7e4:	60fb      	str	r3, [r7, #12]
 801f7e6:	f04f 0200 	mov.w	r2, #0
 801f7ea:	f04f 0300 	mov.w	r3, #0
 801f7ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801f7f2:	4629      	mov	r1, r5
 801f7f4:	024b      	lsls	r3, r1, #9
 801f7f6:	4621      	mov	r1, r4
 801f7f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801f7fc:	4621      	mov	r1, r4
 801f7fe:	024a      	lsls	r2, r1, #9
 801f800:	4610      	mov	r0, r2
 801f802:	4619      	mov	r1, r3
 801f804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f806:	2200      	movs	r2, #0
 801f808:	62bb      	str	r3, [r7, #40]	; 0x28
 801f80a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f80c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801f810:	f7e1 fb40 	bl	8000e94 <__aeabi_uldivmod>
 801f814:	4602      	mov	r2, r0
 801f816:	460b      	mov	r3, r1
 801f818:	4613      	mov	r3, r2
 801f81a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f81c:	e058      	b.n	801f8d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801f81e:	4b38      	ldr	r3, [pc, #224]	; (801f900 <HAL_RCC_GetSysClockFreq+0x200>)
 801f820:	685b      	ldr	r3, [r3, #4]
 801f822:	099b      	lsrs	r3, r3, #6
 801f824:	2200      	movs	r2, #0
 801f826:	4618      	mov	r0, r3
 801f828:	4611      	mov	r1, r2
 801f82a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801f82e:	623b      	str	r3, [r7, #32]
 801f830:	2300      	movs	r3, #0
 801f832:	627b      	str	r3, [r7, #36]	; 0x24
 801f834:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801f838:	4642      	mov	r2, r8
 801f83a:	464b      	mov	r3, r9
 801f83c:	f04f 0000 	mov.w	r0, #0
 801f840:	f04f 0100 	mov.w	r1, #0
 801f844:	0159      	lsls	r1, r3, #5
 801f846:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801f84a:	0150      	lsls	r0, r2, #5
 801f84c:	4602      	mov	r2, r0
 801f84e:	460b      	mov	r3, r1
 801f850:	4641      	mov	r1, r8
 801f852:	ebb2 0a01 	subs.w	sl, r2, r1
 801f856:	4649      	mov	r1, r9
 801f858:	eb63 0b01 	sbc.w	fp, r3, r1
 801f85c:	f04f 0200 	mov.w	r2, #0
 801f860:	f04f 0300 	mov.w	r3, #0
 801f864:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801f868:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801f86c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801f870:	ebb2 040a 	subs.w	r4, r2, sl
 801f874:	eb63 050b 	sbc.w	r5, r3, fp
 801f878:	f04f 0200 	mov.w	r2, #0
 801f87c:	f04f 0300 	mov.w	r3, #0
 801f880:	00eb      	lsls	r3, r5, #3
 801f882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801f886:	00e2      	lsls	r2, r4, #3
 801f888:	4614      	mov	r4, r2
 801f88a:	461d      	mov	r5, r3
 801f88c:	4643      	mov	r3, r8
 801f88e:	18e3      	adds	r3, r4, r3
 801f890:	603b      	str	r3, [r7, #0]
 801f892:	464b      	mov	r3, r9
 801f894:	eb45 0303 	adc.w	r3, r5, r3
 801f898:	607b      	str	r3, [r7, #4]
 801f89a:	f04f 0200 	mov.w	r2, #0
 801f89e:	f04f 0300 	mov.w	r3, #0
 801f8a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 801f8a6:	4629      	mov	r1, r5
 801f8a8:	028b      	lsls	r3, r1, #10
 801f8aa:	4621      	mov	r1, r4
 801f8ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801f8b0:	4621      	mov	r1, r4
 801f8b2:	028a      	lsls	r2, r1, #10
 801f8b4:	4610      	mov	r0, r2
 801f8b6:	4619      	mov	r1, r3
 801f8b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f8ba:	2200      	movs	r2, #0
 801f8bc:	61bb      	str	r3, [r7, #24]
 801f8be:	61fa      	str	r2, [r7, #28]
 801f8c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801f8c4:	f7e1 fae6 	bl	8000e94 <__aeabi_uldivmod>
 801f8c8:	4602      	mov	r2, r0
 801f8ca:	460b      	mov	r3, r1
 801f8cc:	4613      	mov	r3, r2
 801f8ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801f8d0:	4b0b      	ldr	r3, [pc, #44]	; (801f900 <HAL_RCC_GetSysClockFreq+0x200>)
 801f8d2:	685b      	ldr	r3, [r3, #4]
 801f8d4:	0c1b      	lsrs	r3, r3, #16
 801f8d6:	f003 0303 	and.w	r3, r3, #3
 801f8da:	3301      	adds	r3, #1
 801f8dc:	005b      	lsls	r3, r3, #1
 801f8de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 801f8e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f8e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f8e4:	fbb2 f3f3 	udiv	r3, r2, r3
 801f8e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801f8ea:	e002      	b.n	801f8f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801f8ec:	4b05      	ldr	r3, [pc, #20]	; (801f904 <HAL_RCC_GetSysClockFreq+0x204>)
 801f8ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801f8f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 801f8f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801f8f4:	4618      	mov	r0, r3
 801f8f6:	3750      	adds	r7, #80	; 0x50
 801f8f8:	46bd      	mov	sp, r7
 801f8fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801f8fe:	bf00      	nop
 801f900:	40023800 	.word	0x40023800
 801f904:	00f42400 	.word	0x00f42400
 801f908:	007a1200 	.word	0x007a1200

0801f90c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801f90c:	b480      	push	{r7}
 801f90e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801f910:	4b03      	ldr	r3, [pc, #12]	; (801f920 <HAL_RCC_GetHCLKFreq+0x14>)
 801f912:	681b      	ldr	r3, [r3, #0]
}
 801f914:	4618      	mov	r0, r3
 801f916:	46bd      	mov	sp, r7
 801f918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f91c:	4770      	bx	lr
 801f91e:	bf00      	nop
 801f920:	20000020 	.word	0x20000020

0801f924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801f924:	b580      	push	{r7, lr}
 801f926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801f928:	f7ff fff0 	bl	801f90c <HAL_RCC_GetHCLKFreq>
 801f92c:	4602      	mov	r2, r0
 801f92e:	4b05      	ldr	r3, [pc, #20]	; (801f944 <HAL_RCC_GetPCLK1Freq+0x20>)
 801f930:	689b      	ldr	r3, [r3, #8]
 801f932:	0a9b      	lsrs	r3, r3, #10
 801f934:	f003 0307 	and.w	r3, r3, #7
 801f938:	4903      	ldr	r1, [pc, #12]	; (801f948 <HAL_RCC_GetPCLK1Freq+0x24>)
 801f93a:	5ccb      	ldrb	r3, [r1, r3]
 801f93c:	fa22 f303 	lsr.w	r3, r2, r3
}
 801f940:	4618      	mov	r0, r3
 801f942:	bd80      	pop	{r7, pc}
 801f944:	40023800 	.word	0x40023800
 801f948:	08026b58 	.word	0x08026b58

0801f94c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801f94c:	b580      	push	{r7, lr}
 801f94e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801f950:	f7ff ffdc 	bl	801f90c <HAL_RCC_GetHCLKFreq>
 801f954:	4602      	mov	r2, r0
 801f956:	4b05      	ldr	r3, [pc, #20]	; (801f96c <HAL_RCC_GetPCLK2Freq+0x20>)
 801f958:	689b      	ldr	r3, [r3, #8]
 801f95a:	0b5b      	lsrs	r3, r3, #13
 801f95c:	f003 0307 	and.w	r3, r3, #7
 801f960:	4903      	ldr	r1, [pc, #12]	; (801f970 <HAL_RCC_GetPCLK2Freq+0x24>)
 801f962:	5ccb      	ldrb	r3, [r1, r3]
 801f964:	fa22 f303 	lsr.w	r3, r2, r3
}
 801f968:	4618      	mov	r0, r3
 801f96a:	bd80      	pop	{r7, pc}
 801f96c:	40023800 	.word	0x40023800
 801f970:	08026b58 	.word	0x08026b58

0801f974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801f974:	b580      	push	{r7, lr}
 801f976:	b082      	sub	sp, #8
 801f978:	af00      	add	r7, sp, #0
 801f97a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f97c:	687b      	ldr	r3, [r7, #4]
 801f97e:	2b00      	cmp	r3, #0
 801f980:	d101      	bne.n	801f986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801f982:	2301      	movs	r3, #1
 801f984:	e041      	b.n	801fa0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f986:	687b      	ldr	r3, [r7, #4]
 801f988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f98c:	b2db      	uxtb	r3, r3
 801f98e:	2b00      	cmp	r3, #0
 801f990:	d106      	bne.n	801f9a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f992:	687b      	ldr	r3, [r7, #4]
 801f994:	2200      	movs	r2, #0
 801f996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801f99a:	6878      	ldr	r0, [r7, #4]
 801f99c:	f7e3 ff12 	bl	80037c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f9a0:	687b      	ldr	r3, [r7, #4]
 801f9a2:	2202      	movs	r2, #2
 801f9a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f9a8:	687b      	ldr	r3, [r7, #4]
 801f9aa:	681a      	ldr	r2, [r3, #0]
 801f9ac:	687b      	ldr	r3, [r7, #4]
 801f9ae:	3304      	adds	r3, #4
 801f9b0:	4619      	mov	r1, r3
 801f9b2:	4610      	mov	r0, r2
 801f9b4:	f000 fd14 	bl	80203e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f9b8:	687b      	ldr	r3, [r7, #4]
 801f9ba:	2201      	movs	r2, #1
 801f9bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f9c0:	687b      	ldr	r3, [r7, #4]
 801f9c2:	2201      	movs	r2, #1
 801f9c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801f9c8:	687b      	ldr	r3, [r7, #4]
 801f9ca:	2201      	movs	r2, #1
 801f9cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801f9d0:	687b      	ldr	r3, [r7, #4]
 801f9d2:	2201      	movs	r2, #1
 801f9d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801f9d8:	687b      	ldr	r3, [r7, #4]
 801f9da:	2201      	movs	r2, #1
 801f9dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f9e0:	687b      	ldr	r3, [r7, #4]
 801f9e2:	2201      	movs	r2, #1
 801f9e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801f9e8:	687b      	ldr	r3, [r7, #4]
 801f9ea:	2201      	movs	r2, #1
 801f9ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801f9f0:	687b      	ldr	r3, [r7, #4]
 801f9f2:	2201      	movs	r2, #1
 801f9f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f9f8:	687b      	ldr	r3, [r7, #4]
 801f9fa:	2201      	movs	r2, #1
 801f9fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801fa00:	687b      	ldr	r3, [r7, #4]
 801fa02:	2201      	movs	r2, #1
 801fa04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801fa08:	2300      	movs	r3, #0
}
 801fa0a:	4618      	mov	r0, r3
 801fa0c:	3708      	adds	r7, #8
 801fa0e:	46bd      	mov	sp, r7
 801fa10:	bd80      	pop	{r7, pc}

0801fa12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801fa12:	b580      	push	{r7, lr}
 801fa14:	b082      	sub	sp, #8
 801fa16:	af00      	add	r7, sp, #0
 801fa18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801fa1a:	687b      	ldr	r3, [r7, #4]
 801fa1c:	2b00      	cmp	r3, #0
 801fa1e:	d101      	bne.n	801fa24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801fa20:	2301      	movs	r3, #1
 801fa22:	e041      	b.n	801faa8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801fa24:	687b      	ldr	r3, [r7, #4]
 801fa26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fa2a:	b2db      	uxtb	r3, r3
 801fa2c:	2b00      	cmp	r3, #0
 801fa2e:	d106      	bne.n	801fa3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801fa30:	687b      	ldr	r3, [r7, #4]
 801fa32:	2200      	movs	r2, #0
 801fa34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801fa38:	6878      	ldr	r0, [r7, #4]
 801fa3a:	f000 f839 	bl	801fab0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fa3e:	687b      	ldr	r3, [r7, #4]
 801fa40:	2202      	movs	r2, #2
 801fa42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801fa46:	687b      	ldr	r3, [r7, #4]
 801fa48:	681a      	ldr	r2, [r3, #0]
 801fa4a:	687b      	ldr	r3, [r7, #4]
 801fa4c:	3304      	adds	r3, #4
 801fa4e:	4619      	mov	r1, r3
 801fa50:	4610      	mov	r0, r2
 801fa52:	f000 fcc5 	bl	80203e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801fa56:	687b      	ldr	r3, [r7, #4]
 801fa58:	2201      	movs	r2, #1
 801fa5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fa5e:	687b      	ldr	r3, [r7, #4]
 801fa60:	2201      	movs	r2, #1
 801fa62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801fa66:	687b      	ldr	r3, [r7, #4]
 801fa68:	2201      	movs	r2, #1
 801fa6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801fa6e:	687b      	ldr	r3, [r7, #4]
 801fa70:	2201      	movs	r2, #1
 801fa72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801fa76:	687b      	ldr	r3, [r7, #4]
 801fa78:	2201      	movs	r2, #1
 801fa7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fa7e:	687b      	ldr	r3, [r7, #4]
 801fa80:	2201      	movs	r2, #1
 801fa82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801fa86:	687b      	ldr	r3, [r7, #4]
 801fa88:	2201      	movs	r2, #1
 801fa8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801fa8e:	687b      	ldr	r3, [r7, #4]
 801fa90:	2201      	movs	r2, #1
 801fa92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801fa96:	687b      	ldr	r3, [r7, #4]
 801fa98:	2201      	movs	r2, #1
 801fa9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801fa9e:	687b      	ldr	r3, [r7, #4]
 801faa0:	2201      	movs	r2, #1
 801faa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801faa6:	2300      	movs	r3, #0
}
 801faa8:	4618      	mov	r0, r3
 801faaa:	3708      	adds	r7, #8
 801faac:	46bd      	mov	sp, r7
 801faae:	bd80      	pop	{r7, pc}

0801fab0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801fab0:	b480      	push	{r7}
 801fab2:	b083      	sub	sp, #12
 801fab4:	af00      	add	r7, sp, #0
 801fab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801fab8:	bf00      	nop
 801faba:	370c      	adds	r7, #12
 801fabc:	46bd      	mov	sp, r7
 801fabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fac2:	4770      	bx	lr

0801fac4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801fac4:	b580      	push	{r7, lr}
 801fac6:	b084      	sub	sp, #16
 801fac8:	af00      	add	r7, sp, #0
 801faca:	6078      	str	r0, [r7, #4]
 801facc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801face:	683b      	ldr	r3, [r7, #0]
 801fad0:	2b00      	cmp	r3, #0
 801fad2:	d109      	bne.n	801fae8 <HAL_TIM_PWM_Start+0x24>
 801fad4:	687b      	ldr	r3, [r7, #4]
 801fad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801fada:	b2db      	uxtb	r3, r3
 801fadc:	2b01      	cmp	r3, #1
 801fade:	bf14      	ite	ne
 801fae0:	2301      	movne	r3, #1
 801fae2:	2300      	moveq	r3, #0
 801fae4:	b2db      	uxtb	r3, r3
 801fae6:	e022      	b.n	801fb2e <HAL_TIM_PWM_Start+0x6a>
 801fae8:	683b      	ldr	r3, [r7, #0]
 801faea:	2b04      	cmp	r3, #4
 801faec:	d109      	bne.n	801fb02 <HAL_TIM_PWM_Start+0x3e>
 801faee:	687b      	ldr	r3, [r7, #4]
 801faf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801faf4:	b2db      	uxtb	r3, r3
 801faf6:	2b01      	cmp	r3, #1
 801faf8:	bf14      	ite	ne
 801fafa:	2301      	movne	r3, #1
 801fafc:	2300      	moveq	r3, #0
 801fafe:	b2db      	uxtb	r3, r3
 801fb00:	e015      	b.n	801fb2e <HAL_TIM_PWM_Start+0x6a>
 801fb02:	683b      	ldr	r3, [r7, #0]
 801fb04:	2b08      	cmp	r3, #8
 801fb06:	d109      	bne.n	801fb1c <HAL_TIM_PWM_Start+0x58>
 801fb08:	687b      	ldr	r3, [r7, #4]
 801fb0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801fb0e:	b2db      	uxtb	r3, r3
 801fb10:	2b01      	cmp	r3, #1
 801fb12:	bf14      	ite	ne
 801fb14:	2301      	movne	r3, #1
 801fb16:	2300      	moveq	r3, #0
 801fb18:	b2db      	uxtb	r3, r3
 801fb1a:	e008      	b.n	801fb2e <HAL_TIM_PWM_Start+0x6a>
 801fb1c:	687b      	ldr	r3, [r7, #4]
 801fb1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801fb22:	b2db      	uxtb	r3, r3
 801fb24:	2b01      	cmp	r3, #1
 801fb26:	bf14      	ite	ne
 801fb28:	2301      	movne	r3, #1
 801fb2a:	2300      	moveq	r3, #0
 801fb2c:	b2db      	uxtb	r3, r3
 801fb2e:	2b00      	cmp	r3, #0
 801fb30:	d001      	beq.n	801fb36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 801fb32:	2301      	movs	r3, #1
 801fb34:	e068      	b.n	801fc08 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801fb36:	683b      	ldr	r3, [r7, #0]
 801fb38:	2b00      	cmp	r3, #0
 801fb3a:	d104      	bne.n	801fb46 <HAL_TIM_PWM_Start+0x82>
 801fb3c:	687b      	ldr	r3, [r7, #4]
 801fb3e:	2202      	movs	r2, #2
 801fb40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801fb44:	e013      	b.n	801fb6e <HAL_TIM_PWM_Start+0xaa>
 801fb46:	683b      	ldr	r3, [r7, #0]
 801fb48:	2b04      	cmp	r3, #4
 801fb4a:	d104      	bne.n	801fb56 <HAL_TIM_PWM_Start+0x92>
 801fb4c:	687b      	ldr	r3, [r7, #4]
 801fb4e:	2202      	movs	r2, #2
 801fb50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801fb54:	e00b      	b.n	801fb6e <HAL_TIM_PWM_Start+0xaa>
 801fb56:	683b      	ldr	r3, [r7, #0]
 801fb58:	2b08      	cmp	r3, #8
 801fb5a:	d104      	bne.n	801fb66 <HAL_TIM_PWM_Start+0xa2>
 801fb5c:	687b      	ldr	r3, [r7, #4]
 801fb5e:	2202      	movs	r2, #2
 801fb60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801fb64:	e003      	b.n	801fb6e <HAL_TIM_PWM_Start+0xaa>
 801fb66:	687b      	ldr	r3, [r7, #4]
 801fb68:	2202      	movs	r2, #2
 801fb6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801fb6e:	687b      	ldr	r3, [r7, #4]
 801fb70:	681b      	ldr	r3, [r3, #0]
 801fb72:	2201      	movs	r2, #1
 801fb74:	6839      	ldr	r1, [r7, #0]
 801fb76:	4618      	mov	r0, r3
 801fb78:	f000 fed8 	bl	802092c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801fb7c:	687b      	ldr	r3, [r7, #4]
 801fb7e:	681b      	ldr	r3, [r3, #0]
 801fb80:	4a23      	ldr	r2, [pc, #140]	; (801fc10 <HAL_TIM_PWM_Start+0x14c>)
 801fb82:	4293      	cmp	r3, r2
 801fb84:	d107      	bne.n	801fb96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801fb86:	687b      	ldr	r3, [r7, #4]
 801fb88:	681b      	ldr	r3, [r3, #0]
 801fb8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801fb8c:	687b      	ldr	r3, [r7, #4]
 801fb8e:	681b      	ldr	r3, [r3, #0]
 801fb90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801fb94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801fb96:	687b      	ldr	r3, [r7, #4]
 801fb98:	681b      	ldr	r3, [r3, #0]
 801fb9a:	4a1d      	ldr	r2, [pc, #116]	; (801fc10 <HAL_TIM_PWM_Start+0x14c>)
 801fb9c:	4293      	cmp	r3, r2
 801fb9e:	d018      	beq.n	801fbd2 <HAL_TIM_PWM_Start+0x10e>
 801fba0:	687b      	ldr	r3, [r7, #4]
 801fba2:	681b      	ldr	r3, [r3, #0]
 801fba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801fba8:	d013      	beq.n	801fbd2 <HAL_TIM_PWM_Start+0x10e>
 801fbaa:	687b      	ldr	r3, [r7, #4]
 801fbac:	681b      	ldr	r3, [r3, #0]
 801fbae:	4a19      	ldr	r2, [pc, #100]	; (801fc14 <HAL_TIM_PWM_Start+0x150>)
 801fbb0:	4293      	cmp	r3, r2
 801fbb2:	d00e      	beq.n	801fbd2 <HAL_TIM_PWM_Start+0x10e>
 801fbb4:	687b      	ldr	r3, [r7, #4]
 801fbb6:	681b      	ldr	r3, [r3, #0]
 801fbb8:	4a17      	ldr	r2, [pc, #92]	; (801fc18 <HAL_TIM_PWM_Start+0x154>)
 801fbba:	4293      	cmp	r3, r2
 801fbbc:	d009      	beq.n	801fbd2 <HAL_TIM_PWM_Start+0x10e>
 801fbbe:	687b      	ldr	r3, [r7, #4]
 801fbc0:	681b      	ldr	r3, [r3, #0]
 801fbc2:	4a16      	ldr	r2, [pc, #88]	; (801fc1c <HAL_TIM_PWM_Start+0x158>)
 801fbc4:	4293      	cmp	r3, r2
 801fbc6:	d004      	beq.n	801fbd2 <HAL_TIM_PWM_Start+0x10e>
 801fbc8:	687b      	ldr	r3, [r7, #4]
 801fbca:	681b      	ldr	r3, [r3, #0]
 801fbcc:	4a14      	ldr	r2, [pc, #80]	; (801fc20 <HAL_TIM_PWM_Start+0x15c>)
 801fbce:	4293      	cmp	r3, r2
 801fbd0:	d111      	bne.n	801fbf6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801fbd2:	687b      	ldr	r3, [r7, #4]
 801fbd4:	681b      	ldr	r3, [r3, #0]
 801fbd6:	689b      	ldr	r3, [r3, #8]
 801fbd8:	f003 0307 	and.w	r3, r3, #7
 801fbdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fbde:	68fb      	ldr	r3, [r7, #12]
 801fbe0:	2b06      	cmp	r3, #6
 801fbe2:	d010      	beq.n	801fc06 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 801fbe4:	687b      	ldr	r3, [r7, #4]
 801fbe6:	681b      	ldr	r3, [r3, #0]
 801fbe8:	681a      	ldr	r2, [r3, #0]
 801fbea:	687b      	ldr	r3, [r7, #4]
 801fbec:	681b      	ldr	r3, [r3, #0]
 801fbee:	f042 0201 	orr.w	r2, r2, #1
 801fbf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fbf4:	e007      	b.n	801fc06 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801fbf6:	687b      	ldr	r3, [r7, #4]
 801fbf8:	681b      	ldr	r3, [r3, #0]
 801fbfa:	681a      	ldr	r2, [r3, #0]
 801fbfc:	687b      	ldr	r3, [r7, #4]
 801fbfe:	681b      	ldr	r3, [r3, #0]
 801fc00:	f042 0201 	orr.w	r2, r2, #1
 801fc04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801fc06:	2300      	movs	r3, #0
}
 801fc08:	4618      	mov	r0, r3
 801fc0a:	3710      	adds	r7, #16
 801fc0c:	46bd      	mov	sp, r7
 801fc0e:	bd80      	pop	{r7, pc}
 801fc10:	40010000 	.word	0x40010000
 801fc14:	40000400 	.word	0x40000400
 801fc18:	40000800 	.word	0x40000800
 801fc1c:	40000c00 	.word	0x40000c00
 801fc20:	40014000 	.word	0x40014000

0801fc24 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801fc24:	b580      	push	{r7, lr}
 801fc26:	b084      	sub	sp, #16
 801fc28:	af00      	add	r7, sp, #0
 801fc2a:	6078      	str	r0, [r7, #4]
 801fc2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801fc2e:	2300      	movs	r3, #0
 801fc30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801fc32:	683b      	ldr	r3, [r7, #0]
 801fc34:	2b00      	cmp	r3, #0
 801fc36:	d104      	bne.n	801fc42 <HAL_TIM_IC_Start_IT+0x1e>
 801fc38:	687b      	ldr	r3, [r7, #4]
 801fc3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801fc3e:	b2db      	uxtb	r3, r3
 801fc40:	e013      	b.n	801fc6a <HAL_TIM_IC_Start_IT+0x46>
 801fc42:	683b      	ldr	r3, [r7, #0]
 801fc44:	2b04      	cmp	r3, #4
 801fc46:	d104      	bne.n	801fc52 <HAL_TIM_IC_Start_IT+0x2e>
 801fc48:	687b      	ldr	r3, [r7, #4]
 801fc4a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801fc4e:	b2db      	uxtb	r3, r3
 801fc50:	e00b      	b.n	801fc6a <HAL_TIM_IC_Start_IT+0x46>
 801fc52:	683b      	ldr	r3, [r7, #0]
 801fc54:	2b08      	cmp	r3, #8
 801fc56:	d104      	bne.n	801fc62 <HAL_TIM_IC_Start_IT+0x3e>
 801fc58:	687b      	ldr	r3, [r7, #4]
 801fc5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801fc5e:	b2db      	uxtb	r3, r3
 801fc60:	e003      	b.n	801fc6a <HAL_TIM_IC_Start_IT+0x46>
 801fc62:	687b      	ldr	r3, [r7, #4]
 801fc64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801fc68:	b2db      	uxtb	r3, r3
 801fc6a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801fc6c:	683b      	ldr	r3, [r7, #0]
 801fc6e:	2b00      	cmp	r3, #0
 801fc70:	d104      	bne.n	801fc7c <HAL_TIM_IC_Start_IT+0x58>
 801fc72:	687b      	ldr	r3, [r7, #4]
 801fc74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801fc78:	b2db      	uxtb	r3, r3
 801fc7a:	e013      	b.n	801fca4 <HAL_TIM_IC_Start_IT+0x80>
 801fc7c:	683b      	ldr	r3, [r7, #0]
 801fc7e:	2b04      	cmp	r3, #4
 801fc80:	d104      	bne.n	801fc8c <HAL_TIM_IC_Start_IT+0x68>
 801fc82:	687b      	ldr	r3, [r7, #4]
 801fc84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801fc88:	b2db      	uxtb	r3, r3
 801fc8a:	e00b      	b.n	801fca4 <HAL_TIM_IC_Start_IT+0x80>
 801fc8c:	683b      	ldr	r3, [r7, #0]
 801fc8e:	2b08      	cmp	r3, #8
 801fc90:	d104      	bne.n	801fc9c <HAL_TIM_IC_Start_IT+0x78>
 801fc92:	687b      	ldr	r3, [r7, #4]
 801fc94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801fc98:	b2db      	uxtb	r3, r3
 801fc9a:	e003      	b.n	801fca4 <HAL_TIM_IC_Start_IT+0x80>
 801fc9c:	687b      	ldr	r3, [r7, #4]
 801fc9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801fca2:	b2db      	uxtb	r3, r3
 801fca4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801fca6:	7bbb      	ldrb	r3, [r7, #14]
 801fca8:	2b01      	cmp	r3, #1
 801fcaa:	d102      	bne.n	801fcb2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 801fcac:	7b7b      	ldrb	r3, [r7, #13]
 801fcae:	2b01      	cmp	r3, #1
 801fcb0:	d001      	beq.n	801fcb6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 801fcb2:	2301      	movs	r3, #1
 801fcb4:	e0c2      	b.n	801fe3c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801fcb6:	683b      	ldr	r3, [r7, #0]
 801fcb8:	2b00      	cmp	r3, #0
 801fcba:	d104      	bne.n	801fcc6 <HAL_TIM_IC_Start_IT+0xa2>
 801fcbc:	687b      	ldr	r3, [r7, #4]
 801fcbe:	2202      	movs	r2, #2
 801fcc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801fcc4:	e013      	b.n	801fcee <HAL_TIM_IC_Start_IT+0xca>
 801fcc6:	683b      	ldr	r3, [r7, #0]
 801fcc8:	2b04      	cmp	r3, #4
 801fcca:	d104      	bne.n	801fcd6 <HAL_TIM_IC_Start_IT+0xb2>
 801fccc:	687b      	ldr	r3, [r7, #4]
 801fcce:	2202      	movs	r2, #2
 801fcd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801fcd4:	e00b      	b.n	801fcee <HAL_TIM_IC_Start_IT+0xca>
 801fcd6:	683b      	ldr	r3, [r7, #0]
 801fcd8:	2b08      	cmp	r3, #8
 801fcda:	d104      	bne.n	801fce6 <HAL_TIM_IC_Start_IT+0xc2>
 801fcdc:	687b      	ldr	r3, [r7, #4]
 801fcde:	2202      	movs	r2, #2
 801fce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801fce4:	e003      	b.n	801fcee <HAL_TIM_IC_Start_IT+0xca>
 801fce6:	687b      	ldr	r3, [r7, #4]
 801fce8:	2202      	movs	r2, #2
 801fcea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801fcee:	683b      	ldr	r3, [r7, #0]
 801fcf0:	2b00      	cmp	r3, #0
 801fcf2:	d104      	bne.n	801fcfe <HAL_TIM_IC_Start_IT+0xda>
 801fcf4:	687b      	ldr	r3, [r7, #4]
 801fcf6:	2202      	movs	r2, #2
 801fcf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801fcfc:	e013      	b.n	801fd26 <HAL_TIM_IC_Start_IT+0x102>
 801fcfe:	683b      	ldr	r3, [r7, #0]
 801fd00:	2b04      	cmp	r3, #4
 801fd02:	d104      	bne.n	801fd0e <HAL_TIM_IC_Start_IT+0xea>
 801fd04:	687b      	ldr	r3, [r7, #4]
 801fd06:	2202      	movs	r2, #2
 801fd08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801fd0c:	e00b      	b.n	801fd26 <HAL_TIM_IC_Start_IT+0x102>
 801fd0e:	683b      	ldr	r3, [r7, #0]
 801fd10:	2b08      	cmp	r3, #8
 801fd12:	d104      	bne.n	801fd1e <HAL_TIM_IC_Start_IT+0xfa>
 801fd14:	687b      	ldr	r3, [r7, #4]
 801fd16:	2202      	movs	r2, #2
 801fd18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801fd1c:	e003      	b.n	801fd26 <HAL_TIM_IC_Start_IT+0x102>
 801fd1e:	687b      	ldr	r3, [r7, #4]
 801fd20:	2202      	movs	r2, #2
 801fd22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 801fd26:	683b      	ldr	r3, [r7, #0]
 801fd28:	2b0c      	cmp	r3, #12
 801fd2a:	d841      	bhi.n	801fdb0 <HAL_TIM_IC_Start_IT+0x18c>
 801fd2c:	a201      	add	r2, pc, #4	; (adr r2, 801fd34 <HAL_TIM_IC_Start_IT+0x110>)
 801fd2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fd32:	bf00      	nop
 801fd34:	0801fd69 	.word	0x0801fd69
 801fd38:	0801fdb1 	.word	0x0801fdb1
 801fd3c:	0801fdb1 	.word	0x0801fdb1
 801fd40:	0801fdb1 	.word	0x0801fdb1
 801fd44:	0801fd7b 	.word	0x0801fd7b
 801fd48:	0801fdb1 	.word	0x0801fdb1
 801fd4c:	0801fdb1 	.word	0x0801fdb1
 801fd50:	0801fdb1 	.word	0x0801fdb1
 801fd54:	0801fd8d 	.word	0x0801fd8d
 801fd58:	0801fdb1 	.word	0x0801fdb1
 801fd5c:	0801fdb1 	.word	0x0801fdb1
 801fd60:	0801fdb1 	.word	0x0801fdb1
 801fd64:	0801fd9f 	.word	0x0801fd9f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801fd68:	687b      	ldr	r3, [r7, #4]
 801fd6a:	681b      	ldr	r3, [r3, #0]
 801fd6c:	68da      	ldr	r2, [r3, #12]
 801fd6e:	687b      	ldr	r3, [r7, #4]
 801fd70:	681b      	ldr	r3, [r3, #0]
 801fd72:	f042 0202 	orr.w	r2, r2, #2
 801fd76:	60da      	str	r2, [r3, #12]
      break;
 801fd78:	e01d      	b.n	801fdb6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801fd7a:	687b      	ldr	r3, [r7, #4]
 801fd7c:	681b      	ldr	r3, [r3, #0]
 801fd7e:	68da      	ldr	r2, [r3, #12]
 801fd80:	687b      	ldr	r3, [r7, #4]
 801fd82:	681b      	ldr	r3, [r3, #0]
 801fd84:	f042 0204 	orr.w	r2, r2, #4
 801fd88:	60da      	str	r2, [r3, #12]
      break;
 801fd8a:	e014      	b.n	801fdb6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801fd8c:	687b      	ldr	r3, [r7, #4]
 801fd8e:	681b      	ldr	r3, [r3, #0]
 801fd90:	68da      	ldr	r2, [r3, #12]
 801fd92:	687b      	ldr	r3, [r7, #4]
 801fd94:	681b      	ldr	r3, [r3, #0]
 801fd96:	f042 0208 	orr.w	r2, r2, #8
 801fd9a:	60da      	str	r2, [r3, #12]
      break;
 801fd9c:	e00b      	b.n	801fdb6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801fd9e:	687b      	ldr	r3, [r7, #4]
 801fda0:	681b      	ldr	r3, [r3, #0]
 801fda2:	68da      	ldr	r2, [r3, #12]
 801fda4:	687b      	ldr	r3, [r7, #4]
 801fda6:	681b      	ldr	r3, [r3, #0]
 801fda8:	f042 0210 	orr.w	r2, r2, #16
 801fdac:	60da      	str	r2, [r3, #12]
      break;
 801fdae:	e002      	b.n	801fdb6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 801fdb0:	2301      	movs	r3, #1
 801fdb2:	73fb      	strb	r3, [r7, #15]
      break;
 801fdb4:	bf00      	nop
  }

  if (status == HAL_OK)
 801fdb6:	7bfb      	ldrb	r3, [r7, #15]
 801fdb8:	2b00      	cmp	r3, #0
 801fdba:	d13e      	bne.n	801fe3a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801fdbc:	687b      	ldr	r3, [r7, #4]
 801fdbe:	681b      	ldr	r3, [r3, #0]
 801fdc0:	2201      	movs	r2, #1
 801fdc2:	6839      	ldr	r1, [r7, #0]
 801fdc4:	4618      	mov	r0, r3
 801fdc6:	f000 fdb1 	bl	802092c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801fdca:	687b      	ldr	r3, [r7, #4]
 801fdcc:	681b      	ldr	r3, [r3, #0]
 801fdce:	4a1d      	ldr	r2, [pc, #116]	; (801fe44 <HAL_TIM_IC_Start_IT+0x220>)
 801fdd0:	4293      	cmp	r3, r2
 801fdd2:	d018      	beq.n	801fe06 <HAL_TIM_IC_Start_IT+0x1e2>
 801fdd4:	687b      	ldr	r3, [r7, #4]
 801fdd6:	681b      	ldr	r3, [r3, #0]
 801fdd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801fddc:	d013      	beq.n	801fe06 <HAL_TIM_IC_Start_IT+0x1e2>
 801fdde:	687b      	ldr	r3, [r7, #4]
 801fde0:	681b      	ldr	r3, [r3, #0]
 801fde2:	4a19      	ldr	r2, [pc, #100]	; (801fe48 <HAL_TIM_IC_Start_IT+0x224>)
 801fde4:	4293      	cmp	r3, r2
 801fde6:	d00e      	beq.n	801fe06 <HAL_TIM_IC_Start_IT+0x1e2>
 801fde8:	687b      	ldr	r3, [r7, #4]
 801fdea:	681b      	ldr	r3, [r3, #0]
 801fdec:	4a17      	ldr	r2, [pc, #92]	; (801fe4c <HAL_TIM_IC_Start_IT+0x228>)
 801fdee:	4293      	cmp	r3, r2
 801fdf0:	d009      	beq.n	801fe06 <HAL_TIM_IC_Start_IT+0x1e2>
 801fdf2:	687b      	ldr	r3, [r7, #4]
 801fdf4:	681b      	ldr	r3, [r3, #0]
 801fdf6:	4a16      	ldr	r2, [pc, #88]	; (801fe50 <HAL_TIM_IC_Start_IT+0x22c>)
 801fdf8:	4293      	cmp	r3, r2
 801fdfa:	d004      	beq.n	801fe06 <HAL_TIM_IC_Start_IT+0x1e2>
 801fdfc:	687b      	ldr	r3, [r7, #4]
 801fdfe:	681b      	ldr	r3, [r3, #0]
 801fe00:	4a14      	ldr	r2, [pc, #80]	; (801fe54 <HAL_TIM_IC_Start_IT+0x230>)
 801fe02:	4293      	cmp	r3, r2
 801fe04:	d111      	bne.n	801fe2a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801fe06:	687b      	ldr	r3, [r7, #4]
 801fe08:	681b      	ldr	r3, [r3, #0]
 801fe0a:	689b      	ldr	r3, [r3, #8]
 801fe0c:	f003 0307 	and.w	r3, r3, #7
 801fe10:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fe12:	68bb      	ldr	r3, [r7, #8]
 801fe14:	2b06      	cmp	r3, #6
 801fe16:	d010      	beq.n	801fe3a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 801fe18:	687b      	ldr	r3, [r7, #4]
 801fe1a:	681b      	ldr	r3, [r3, #0]
 801fe1c:	681a      	ldr	r2, [r3, #0]
 801fe1e:	687b      	ldr	r3, [r7, #4]
 801fe20:	681b      	ldr	r3, [r3, #0]
 801fe22:	f042 0201 	orr.w	r2, r2, #1
 801fe26:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fe28:	e007      	b.n	801fe3a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801fe2a:	687b      	ldr	r3, [r7, #4]
 801fe2c:	681b      	ldr	r3, [r3, #0]
 801fe2e:	681a      	ldr	r2, [r3, #0]
 801fe30:	687b      	ldr	r3, [r7, #4]
 801fe32:	681b      	ldr	r3, [r3, #0]
 801fe34:	f042 0201 	orr.w	r2, r2, #1
 801fe38:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 801fe3a:	7bfb      	ldrb	r3, [r7, #15]
}
 801fe3c:	4618      	mov	r0, r3
 801fe3e:	3710      	adds	r7, #16
 801fe40:	46bd      	mov	sp, r7
 801fe42:	bd80      	pop	{r7, pc}
 801fe44:	40010000 	.word	0x40010000
 801fe48:	40000400 	.word	0x40000400
 801fe4c:	40000800 	.word	0x40000800
 801fe50:	40000c00 	.word	0x40000c00
 801fe54:	40014000 	.word	0x40014000

0801fe58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801fe58:	b580      	push	{r7, lr}
 801fe5a:	b082      	sub	sp, #8
 801fe5c:	af00      	add	r7, sp, #0
 801fe5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801fe60:	687b      	ldr	r3, [r7, #4]
 801fe62:	681b      	ldr	r3, [r3, #0]
 801fe64:	691b      	ldr	r3, [r3, #16]
 801fe66:	f003 0302 	and.w	r3, r3, #2
 801fe6a:	2b02      	cmp	r3, #2
 801fe6c:	d122      	bne.n	801feb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801fe6e:	687b      	ldr	r3, [r7, #4]
 801fe70:	681b      	ldr	r3, [r3, #0]
 801fe72:	68db      	ldr	r3, [r3, #12]
 801fe74:	f003 0302 	and.w	r3, r3, #2
 801fe78:	2b02      	cmp	r3, #2
 801fe7a:	d11b      	bne.n	801feb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801fe7c:	687b      	ldr	r3, [r7, #4]
 801fe7e:	681b      	ldr	r3, [r3, #0]
 801fe80:	f06f 0202 	mvn.w	r2, #2
 801fe84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801fe86:	687b      	ldr	r3, [r7, #4]
 801fe88:	2201      	movs	r2, #1
 801fe8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801fe8c:	687b      	ldr	r3, [r7, #4]
 801fe8e:	681b      	ldr	r3, [r3, #0]
 801fe90:	699b      	ldr	r3, [r3, #24]
 801fe92:	f003 0303 	and.w	r3, r3, #3
 801fe96:	2b00      	cmp	r3, #0
 801fe98:	d003      	beq.n	801fea2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801fe9a:	6878      	ldr	r0, [r7, #4]
 801fe9c:	f000 fa81 	bl	80203a2 <HAL_TIM_IC_CaptureCallback>
 801fea0:	e005      	b.n	801feae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801fea2:	6878      	ldr	r0, [r7, #4]
 801fea4:	f000 fa73 	bl	802038e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801fea8:	6878      	ldr	r0, [r7, #4]
 801feaa:	f000 fa84 	bl	80203b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801feae:	687b      	ldr	r3, [r7, #4]
 801feb0:	2200      	movs	r2, #0
 801feb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801feb4:	687b      	ldr	r3, [r7, #4]
 801feb6:	681b      	ldr	r3, [r3, #0]
 801feb8:	691b      	ldr	r3, [r3, #16]
 801feba:	f003 0304 	and.w	r3, r3, #4
 801febe:	2b04      	cmp	r3, #4
 801fec0:	d122      	bne.n	801ff08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801fec2:	687b      	ldr	r3, [r7, #4]
 801fec4:	681b      	ldr	r3, [r3, #0]
 801fec6:	68db      	ldr	r3, [r3, #12]
 801fec8:	f003 0304 	and.w	r3, r3, #4
 801fecc:	2b04      	cmp	r3, #4
 801fece:	d11b      	bne.n	801ff08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801fed0:	687b      	ldr	r3, [r7, #4]
 801fed2:	681b      	ldr	r3, [r3, #0]
 801fed4:	f06f 0204 	mvn.w	r2, #4
 801fed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801feda:	687b      	ldr	r3, [r7, #4]
 801fedc:	2202      	movs	r2, #2
 801fede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801fee0:	687b      	ldr	r3, [r7, #4]
 801fee2:	681b      	ldr	r3, [r3, #0]
 801fee4:	699b      	ldr	r3, [r3, #24]
 801fee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801feea:	2b00      	cmp	r3, #0
 801feec:	d003      	beq.n	801fef6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801feee:	6878      	ldr	r0, [r7, #4]
 801fef0:	f000 fa57 	bl	80203a2 <HAL_TIM_IC_CaptureCallback>
 801fef4:	e005      	b.n	801ff02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801fef6:	6878      	ldr	r0, [r7, #4]
 801fef8:	f000 fa49 	bl	802038e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801fefc:	6878      	ldr	r0, [r7, #4]
 801fefe:	f000 fa5a 	bl	80203b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ff02:	687b      	ldr	r3, [r7, #4]
 801ff04:	2200      	movs	r2, #0
 801ff06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801ff08:	687b      	ldr	r3, [r7, #4]
 801ff0a:	681b      	ldr	r3, [r3, #0]
 801ff0c:	691b      	ldr	r3, [r3, #16]
 801ff0e:	f003 0308 	and.w	r3, r3, #8
 801ff12:	2b08      	cmp	r3, #8
 801ff14:	d122      	bne.n	801ff5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801ff16:	687b      	ldr	r3, [r7, #4]
 801ff18:	681b      	ldr	r3, [r3, #0]
 801ff1a:	68db      	ldr	r3, [r3, #12]
 801ff1c:	f003 0308 	and.w	r3, r3, #8
 801ff20:	2b08      	cmp	r3, #8
 801ff22:	d11b      	bne.n	801ff5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801ff24:	687b      	ldr	r3, [r7, #4]
 801ff26:	681b      	ldr	r3, [r3, #0]
 801ff28:	f06f 0208 	mvn.w	r2, #8
 801ff2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801ff2e:	687b      	ldr	r3, [r7, #4]
 801ff30:	2204      	movs	r2, #4
 801ff32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801ff34:	687b      	ldr	r3, [r7, #4]
 801ff36:	681b      	ldr	r3, [r3, #0]
 801ff38:	69db      	ldr	r3, [r3, #28]
 801ff3a:	f003 0303 	and.w	r3, r3, #3
 801ff3e:	2b00      	cmp	r3, #0
 801ff40:	d003      	beq.n	801ff4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ff42:	6878      	ldr	r0, [r7, #4]
 801ff44:	f000 fa2d 	bl	80203a2 <HAL_TIM_IC_CaptureCallback>
 801ff48:	e005      	b.n	801ff56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ff4a:	6878      	ldr	r0, [r7, #4]
 801ff4c:	f000 fa1f 	bl	802038e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ff50:	6878      	ldr	r0, [r7, #4]
 801ff52:	f000 fa30 	bl	80203b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ff56:	687b      	ldr	r3, [r7, #4]
 801ff58:	2200      	movs	r2, #0
 801ff5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801ff5c:	687b      	ldr	r3, [r7, #4]
 801ff5e:	681b      	ldr	r3, [r3, #0]
 801ff60:	691b      	ldr	r3, [r3, #16]
 801ff62:	f003 0310 	and.w	r3, r3, #16
 801ff66:	2b10      	cmp	r3, #16
 801ff68:	d122      	bne.n	801ffb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801ff6a:	687b      	ldr	r3, [r7, #4]
 801ff6c:	681b      	ldr	r3, [r3, #0]
 801ff6e:	68db      	ldr	r3, [r3, #12]
 801ff70:	f003 0310 	and.w	r3, r3, #16
 801ff74:	2b10      	cmp	r3, #16
 801ff76:	d11b      	bne.n	801ffb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801ff78:	687b      	ldr	r3, [r7, #4]
 801ff7a:	681b      	ldr	r3, [r3, #0]
 801ff7c:	f06f 0210 	mvn.w	r2, #16
 801ff80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801ff82:	687b      	ldr	r3, [r7, #4]
 801ff84:	2208      	movs	r2, #8
 801ff86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801ff88:	687b      	ldr	r3, [r7, #4]
 801ff8a:	681b      	ldr	r3, [r3, #0]
 801ff8c:	69db      	ldr	r3, [r3, #28]
 801ff8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ff92:	2b00      	cmp	r3, #0
 801ff94:	d003      	beq.n	801ff9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ff96:	6878      	ldr	r0, [r7, #4]
 801ff98:	f000 fa03 	bl	80203a2 <HAL_TIM_IC_CaptureCallback>
 801ff9c:	e005      	b.n	801ffaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ff9e:	6878      	ldr	r0, [r7, #4]
 801ffa0:	f000 f9f5 	bl	802038e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ffa4:	6878      	ldr	r0, [r7, #4]
 801ffa6:	f000 fa06 	bl	80203b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ffaa:	687b      	ldr	r3, [r7, #4]
 801ffac:	2200      	movs	r2, #0
 801ffae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801ffb0:	687b      	ldr	r3, [r7, #4]
 801ffb2:	681b      	ldr	r3, [r3, #0]
 801ffb4:	691b      	ldr	r3, [r3, #16]
 801ffb6:	f003 0301 	and.w	r3, r3, #1
 801ffba:	2b01      	cmp	r3, #1
 801ffbc:	d10e      	bne.n	801ffdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801ffbe:	687b      	ldr	r3, [r7, #4]
 801ffc0:	681b      	ldr	r3, [r3, #0]
 801ffc2:	68db      	ldr	r3, [r3, #12]
 801ffc4:	f003 0301 	and.w	r3, r3, #1
 801ffc8:	2b01      	cmp	r3, #1
 801ffca:	d107      	bne.n	801ffdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801ffcc:	687b      	ldr	r3, [r7, #4]
 801ffce:	681b      	ldr	r3, [r3, #0]
 801ffd0:	f06f 0201 	mvn.w	r2, #1
 801ffd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801ffd6:	6878      	ldr	r0, [r7, #4]
 801ffd8:	f000 f9cf 	bl	802037a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801ffdc:	687b      	ldr	r3, [r7, #4]
 801ffde:	681b      	ldr	r3, [r3, #0]
 801ffe0:	691b      	ldr	r3, [r3, #16]
 801ffe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ffe6:	2b80      	cmp	r3, #128	; 0x80
 801ffe8:	d10e      	bne.n	8020008 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801ffea:	687b      	ldr	r3, [r7, #4]
 801ffec:	681b      	ldr	r3, [r3, #0]
 801ffee:	68db      	ldr	r3, [r3, #12]
 801fff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fff4:	2b80      	cmp	r3, #128	; 0x80
 801fff6:	d107      	bne.n	8020008 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801fff8:	687b      	ldr	r3, [r7, #4]
 801fffa:	681b      	ldr	r3, [r3, #0]
 801fffc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8020000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8020002:	6878      	ldr	r0, [r7, #4]
 8020004:	f000 fd30 	bl	8020a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8020008:	687b      	ldr	r3, [r7, #4]
 802000a:	681b      	ldr	r3, [r3, #0]
 802000c:	691b      	ldr	r3, [r3, #16]
 802000e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020012:	2b40      	cmp	r3, #64	; 0x40
 8020014:	d10e      	bne.n	8020034 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8020016:	687b      	ldr	r3, [r7, #4]
 8020018:	681b      	ldr	r3, [r3, #0]
 802001a:	68db      	ldr	r3, [r3, #12]
 802001c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020020:	2b40      	cmp	r3, #64	; 0x40
 8020022:	d107      	bne.n	8020034 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8020024:	687b      	ldr	r3, [r7, #4]
 8020026:	681b      	ldr	r3, [r3, #0]
 8020028:	f06f 0240 	mvn.w	r2, #64	; 0x40
 802002c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 802002e:	6878      	ldr	r0, [r7, #4]
 8020030:	f000 f9cb 	bl	80203ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8020034:	687b      	ldr	r3, [r7, #4]
 8020036:	681b      	ldr	r3, [r3, #0]
 8020038:	691b      	ldr	r3, [r3, #16]
 802003a:	f003 0320 	and.w	r3, r3, #32
 802003e:	2b20      	cmp	r3, #32
 8020040:	d10e      	bne.n	8020060 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8020042:	687b      	ldr	r3, [r7, #4]
 8020044:	681b      	ldr	r3, [r3, #0]
 8020046:	68db      	ldr	r3, [r3, #12]
 8020048:	f003 0320 	and.w	r3, r3, #32
 802004c:	2b20      	cmp	r3, #32
 802004e:	d107      	bne.n	8020060 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8020050:	687b      	ldr	r3, [r7, #4]
 8020052:	681b      	ldr	r3, [r3, #0]
 8020054:	f06f 0220 	mvn.w	r2, #32
 8020058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802005a:	6878      	ldr	r0, [r7, #4]
 802005c:	f000 fcfa 	bl	8020a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8020060:	bf00      	nop
 8020062:	3708      	adds	r7, #8
 8020064:	46bd      	mov	sp, r7
 8020066:	bd80      	pop	{r7, pc}

08020068 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8020068:	b580      	push	{r7, lr}
 802006a:	b086      	sub	sp, #24
 802006c:	af00      	add	r7, sp, #0
 802006e:	60f8      	str	r0, [r7, #12]
 8020070:	60b9      	str	r1, [r7, #8]
 8020072:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8020074:	2300      	movs	r3, #0
 8020076:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8020078:	68fb      	ldr	r3, [r7, #12]
 802007a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802007e:	2b01      	cmp	r3, #1
 8020080:	d101      	bne.n	8020086 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8020082:	2302      	movs	r3, #2
 8020084:	e0ae      	b.n	80201e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8020086:	68fb      	ldr	r3, [r7, #12]
 8020088:	2201      	movs	r2, #1
 802008a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 802008e:	687b      	ldr	r3, [r7, #4]
 8020090:	2b0c      	cmp	r3, #12
 8020092:	f200 809f 	bhi.w	80201d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8020096:	a201      	add	r2, pc, #4	; (adr r2, 802009c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8020098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802009c:	080200d1 	.word	0x080200d1
 80200a0:	080201d5 	.word	0x080201d5
 80200a4:	080201d5 	.word	0x080201d5
 80200a8:	080201d5 	.word	0x080201d5
 80200ac:	08020111 	.word	0x08020111
 80200b0:	080201d5 	.word	0x080201d5
 80200b4:	080201d5 	.word	0x080201d5
 80200b8:	080201d5 	.word	0x080201d5
 80200bc:	08020153 	.word	0x08020153
 80200c0:	080201d5 	.word	0x080201d5
 80200c4:	080201d5 	.word	0x080201d5
 80200c8:	080201d5 	.word	0x080201d5
 80200cc:	08020193 	.word	0x08020193
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80200d0:	68fb      	ldr	r3, [r7, #12]
 80200d2:	681b      	ldr	r3, [r3, #0]
 80200d4:	68b9      	ldr	r1, [r7, #8]
 80200d6:	4618      	mov	r0, r3
 80200d8:	f000 fa02 	bl	80204e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80200dc:	68fb      	ldr	r3, [r7, #12]
 80200de:	681b      	ldr	r3, [r3, #0]
 80200e0:	699a      	ldr	r2, [r3, #24]
 80200e2:	68fb      	ldr	r3, [r7, #12]
 80200e4:	681b      	ldr	r3, [r3, #0]
 80200e6:	f042 0208 	orr.w	r2, r2, #8
 80200ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80200ec:	68fb      	ldr	r3, [r7, #12]
 80200ee:	681b      	ldr	r3, [r3, #0]
 80200f0:	699a      	ldr	r2, [r3, #24]
 80200f2:	68fb      	ldr	r3, [r7, #12]
 80200f4:	681b      	ldr	r3, [r3, #0]
 80200f6:	f022 0204 	bic.w	r2, r2, #4
 80200fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80200fc:	68fb      	ldr	r3, [r7, #12]
 80200fe:	681b      	ldr	r3, [r3, #0]
 8020100:	6999      	ldr	r1, [r3, #24]
 8020102:	68bb      	ldr	r3, [r7, #8]
 8020104:	691a      	ldr	r2, [r3, #16]
 8020106:	68fb      	ldr	r3, [r7, #12]
 8020108:	681b      	ldr	r3, [r3, #0]
 802010a:	430a      	orrs	r2, r1
 802010c:	619a      	str	r2, [r3, #24]
      break;
 802010e:	e064      	b.n	80201da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8020110:	68fb      	ldr	r3, [r7, #12]
 8020112:	681b      	ldr	r3, [r3, #0]
 8020114:	68b9      	ldr	r1, [r7, #8]
 8020116:	4618      	mov	r0, r3
 8020118:	f000 fa48 	bl	80205ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 802011c:	68fb      	ldr	r3, [r7, #12]
 802011e:	681b      	ldr	r3, [r3, #0]
 8020120:	699a      	ldr	r2, [r3, #24]
 8020122:	68fb      	ldr	r3, [r7, #12]
 8020124:	681b      	ldr	r3, [r3, #0]
 8020126:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802012a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 802012c:	68fb      	ldr	r3, [r7, #12]
 802012e:	681b      	ldr	r3, [r3, #0]
 8020130:	699a      	ldr	r2, [r3, #24]
 8020132:	68fb      	ldr	r3, [r7, #12]
 8020134:	681b      	ldr	r3, [r3, #0]
 8020136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802013a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 802013c:	68fb      	ldr	r3, [r7, #12]
 802013e:	681b      	ldr	r3, [r3, #0]
 8020140:	6999      	ldr	r1, [r3, #24]
 8020142:	68bb      	ldr	r3, [r7, #8]
 8020144:	691b      	ldr	r3, [r3, #16]
 8020146:	021a      	lsls	r2, r3, #8
 8020148:	68fb      	ldr	r3, [r7, #12]
 802014a:	681b      	ldr	r3, [r3, #0]
 802014c:	430a      	orrs	r2, r1
 802014e:	619a      	str	r2, [r3, #24]
      break;
 8020150:	e043      	b.n	80201da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8020152:	68fb      	ldr	r3, [r7, #12]
 8020154:	681b      	ldr	r3, [r3, #0]
 8020156:	68b9      	ldr	r1, [r7, #8]
 8020158:	4618      	mov	r0, r3
 802015a:	f000 fa93 	bl	8020684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 802015e:	68fb      	ldr	r3, [r7, #12]
 8020160:	681b      	ldr	r3, [r3, #0]
 8020162:	69da      	ldr	r2, [r3, #28]
 8020164:	68fb      	ldr	r3, [r7, #12]
 8020166:	681b      	ldr	r3, [r3, #0]
 8020168:	f042 0208 	orr.w	r2, r2, #8
 802016c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 802016e:	68fb      	ldr	r3, [r7, #12]
 8020170:	681b      	ldr	r3, [r3, #0]
 8020172:	69da      	ldr	r2, [r3, #28]
 8020174:	68fb      	ldr	r3, [r7, #12]
 8020176:	681b      	ldr	r3, [r3, #0]
 8020178:	f022 0204 	bic.w	r2, r2, #4
 802017c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 802017e:	68fb      	ldr	r3, [r7, #12]
 8020180:	681b      	ldr	r3, [r3, #0]
 8020182:	69d9      	ldr	r1, [r3, #28]
 8020184:	68bb      	ldr	r3, [r7, #8]
 8020186:	691a      	ldr	r2, [r3, #16]
 8020188:	68fb      	ldr	r3, [r7, #12]
 802018a:	681b      	ldr	r3, [r3, #0]
 802018c:	430a      	orrs	r2, r1
 802018e:	61da      	str	r2, [r3, #28]
      break;
 8020190:	e023      	b.n	80201da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8020192:	68fb      	ldr	r3, [r7, #12]
 8020194:	681b      	ldr	r3, [r3, #0]
 8020196:	68b9      	ldr	r1, [r7, #8]
 8020198:	4618      	mov	r0, r3
 802019a:	f000 fadd 	bl	8020758 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 802019e:	68fb      	ldr	r3, [r7, #12]
 80201a0:	681b      	ldr	r3, [r3, #0]
 80201a2:	69da      	ldr	r2, [r3, #28]
 80201a4:	68fb      	ldr	r3, [r7, #12]
 80201a6:	681b      	ldr	r3, [r3, #0]
 80201a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80201ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80201ae:	68fb      	ldr	r3, [r7, #12]
 80201b0:	681b      	ldr	r3, [r3, #0]
 80201b2:	69da      	ldr	r2, [r3, #28]
 80201b4:	68fb      	ldr	r3, [r7, #12]
 80201b6:	681b      	ldr	r3, [r3, #0]
 80201b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80201bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80201be:	68fb      	ldr	r3, [r7, #12]
 80201c0:	681b      	ldr	r3, [r3, #0]
 80201c2:	69d9      	ldr	r1, [r3, #28]
 80201c4:	68bb      	ldr	r3, [r7, #8]
 80201c6:	691b      	ldr	r3, [r3, #16]
 80201c8:	021a      	lsls	r2, r3, #8
 80201ca:	68fb      	ldr	r3, [r7, #12]
 80201cc:	681b      	ldr	r3, [r3, #0]
 80201ce:	430a      	orrs	r2, r1
 80201d0:	61da      	str	r2, [r3, #28]
      break;
 80201d2:	e002      	b.n	80201da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80201d4:	2301      	movs	r3, #1
 80201d6:	75fb      	strb	r3, [r7, #23]
      break;
 80201d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80201da:	68fb      	ldr	r3, [r7, #12]
 80201dc:	2200      	movs	r2, #0
 80201de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80201e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80201e4:	4618      	mov	r0, r3
 80201e6:	3718      	adds	r7, #24
 80201e8:	46bd      	mov	sp, r7
 80201ea:	bd80      	pop	{r7, pc}

080201ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80201ec:	b580      	push	{r7, lr}
 80201ee:	b084      	sub	sp, #16
 80201f0:	af00      	add	r7, sp, #0
 80201f2:	6078      	str	r0, [r7, #4]
 80201f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80201f6:	2300      	movs	r3, #0
 80201f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80201fa:	687b      	ldr	r3, [r7, #4]
 80201fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020200:	2b01      	cmp	r3, #1
 8020202:	d101      	bne.n	8020208 <HAL_TIM_ConfigClockSource+0x1c>
 8020204:	2302      	movs	r3, #2
 8020206:	e0b4      	b.n	8020372 <HAL_TIM_ConfigClockSource+0x186>
 8020208:	687b      	ldr	r3, [r7, #4]
 802020a:	2201      	movs	r2, #1
 802020c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8020210:	687b      	ldr	r3, [r7, #4]
 8020212:	2202      	movs	r2, #2
 8020214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8020218:	687b      	ldr	r3, [r7, #4]
 802021a:	681b      	ldr	r3, [r3, #0]
 802021c:	689b      	ldr	r3, [r3, #8]
 802021e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8020220:	68bb      	ldr	r3, [r7, #8]
 8020222:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8020226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020228:	68bb      	ldr	r3, [r7, #8]
 802022a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802022e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8020230:	687b      	ldr	r3, [r7, #4]
 8020232:	681b      	ldr	r3, [r3, #0]
 8020234:	68ba      	ldr	r2, [r7, #8]
 8020236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8020238:	683b      	ldr	r3, [r7, #0]
 802023a:	681b      	ldr	r3, [r3, #0]
 802023c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020240:	d03e      	beq.n	80202c0 <HAL_TIM_ConfigClockSource+0xd4>
 8020242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020246:	f200 8087 	bhi.w	8020358 <HAL_TIM_ConfigClockSource+0x16c>
 802024a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802024e:	f000 8086 	beq.w	802035e <HAL_TIM_ConfigClockSource+0x172>
 8020252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020256:	d87f      	bhi.n	8020358 <HAL_TIM_ConfigClockSource+0x16c>
 8020258:	2b70      	cmp	r3, #112	; 0x70
 802025a:	d01a      	beq.n	8020292 <HAL_TIM_ConfigClockSource+0xa6>
 802025c:	2b70      	cmp	r3, #112	; 0x70
 802025e:	d87b      	bhi.n	8020358 <HAL_TIM_ConfigClockSource+0x16c>
 8020260:	2b60      	cmp	r3, #96	; 0x60
 8020262:	d050      	beq.n	8020306 <HAL_TIM_ConfigClockSource+0x11a>
 8020264:	2b60      	cmp	r3, #96	; 0x60
 8020266:	d877      	bhi.n	8020358 <HAL_TIM_ConfigClockSource+0x16c>
 8020268:	2b50      	cmp	r3, #80	; 0x50
 802026a:	d03c      	beq.n	80202e6 <HAL_TIM_ConfigClockSource+0xfa>
 802026c:	2b50      	cmp	r3, #80	; 0x50
 802026e:	d873      	bhi.n	8020358 <HAL_TIM_ConfigClockSource+0x16c>
 8020270:	2b40      	cmp	r3, #64	; 0x40
 8020272:	d058      	beq.n	8020326 <HAL_TIM_ConfigClockSource+0x13a>
 8020274:	2b40      	cmp	r3, #64	; 0x40
 8020276:	d86f      	bhi.n	8020358 <HAL_TIM_ConfigClockSource+0x16c>
 8020278:	2b30      	cmp	r3, #48	; 0x30
 802027a:	d064      	beq.n	8020346 <HAL_TIM_ConfigClockSource+0x15a>
 802027c:	2b30      	cmp	r3, #48	; 0x30
 802027e:	d86b      	bhi.n	8020358 <HAL_TIM_ConfigClockSource+0x16c>
 8020280:	2b20      	cmp	r3, #32
 8020282:	d060      	beq.n	8020346 <HAL_TIM_ConfigClockSource+0x15a>
 8020284:	2b20      	cmp	r3, #32
 8020286:	d867      	bhi.n	8020358 <HAL_TIM_ConfigClockSource+0x16c>
 8020288:	2b00      	cmp	r3, #0
 802028a:	d05c      	beq.n	8020346 <HAL_TIM_ConfigClockSource+0x15a>
 802028c:	2b10      	cmp	r3, #16
 802028e:	d05a      	beq.n	8020346 <HAL_TIM_ConfigClockSource+0x15a>
 8020290:	e062      	b.n	8020358 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8020292:	687b      	ldr	r3, [r7, #4]
 8020294:	6818      	ldr	r0, [r3, #0]
 8020296:	683b      	ldr	r3, [r7, #0]
 8020298:	6899      	ldr	r1, [r3, #8]
 802029a:	683b      	ldr	r3, [r7, #0]
 802029c:	685a      	ldr	r2, [r3, #4]
 802029e:	683b      	ldr	r3, [r7, #0]
 80202a0:	68db      	ldr	r3, [r3, #12]
 80202a2:	f000 fb23 	bl	80208ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80202a6:	687b      	ldr	r3, [r7, #4]
 80202a8:	681b      	ldr	r3, [r3, #0]
 80202aa:	689b      	ldr	r3, [r3, #8]
 80202ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80202ae:	68bb      	ldr	r3, [r7, #8]
 80202b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80202b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80202b6:	687b      	ldr	r3, [r7, #4]
 80202b8:	681b      	ldr	r3, [r3, #0]
 80202ba:	68ba      	ldr	r2, [r7, #8]
 80202bc:	609a      	str	r2, [r3, #8]
      break;
 80202be:	e04f      	b.n	8020360 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80202c0:	687b      	ldr	r3, [r7, #4]
 80202c2:	6818      	ldr	r0, [r3, #0]
 80202c4:	683b      	ldr	r3, [r7, #0]
 80202c6:	6899      	ldr	r1, [r3, #8]
 80202c8:	683b      	ldr	r3, [r7, #0]
 80202ca:	685a      	ldr	r2, [r3, #4]
 80202cc:	683b      	ldr	r3, [r7, #0]
 80202ce:	68db      	ldr	r3, [r3, #12]
 80202d0:	f000 fb0c 	bl	80208ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80202d4:	687b      	ldr	r3, [r7, #4]
 80202d6:	681b      	ldr	r3, [r3, #0]
 80202d8:	689a      	ldr	r2, [r3, #8]
 80202da:	687b      	ldr	r3, [r7, #4]
 80202dc:	681b      	ldr	r3, [r3, #0]
 80202de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80202e2:	609a      	str	r2, [r3, #8]
      break;
 80202e4:	e03c      	b.n	8020360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80202e6:	687b      	ldr	r3, [r7, #4]
 80202e8:	6818      	ldr	r0, [r3, #0]
 80202ea:	683b      	ldr	r3, [r7, #0]
 80202ec:	6859      	ldr	r1, [r3, #4]
 80202ee:	683b      	ldr	r3, [r7, #0]
 80202f0:	68db      	ldr	r3, [r3, #12]
 80202f2:	461a      	mov	r2, r3
 80202f4:	f000 fa80 	bl	80207f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80202f8:	687b      	ldr	r3, [r7, #4]
 80202fa:	681b      	ldr	r3, [r3, #0]
 80202fc:	2150      	movs	r1, #80	; 0x50
 80202fe:	4618      	mov	r0, r3
 8020300:	f000 fad9 	bl	80208b6 <TIM_ITRx_SetConfig>
      break;
 8020304:	e02c      	b.n	8020360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8020306:	687b      	ldr	r3, [r7, #4]
 8020308:	6818      	ldr	r0, [r3, #0]
 802030a:	683b      	ldr	r3, [r7, #0]
 802030c:	6859      	ldr	r1, [r3, #4]
 802030e:	683b      	ldr	r3, [r7, #0]
 8020310:	68db      	ldr	r3, [r3, #12]
 8020312:	461a      	mov	r2, r3
 8020314:	f000 fa9f 	bl	8020856 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8020318:	687b      	ldr	r3, [r7, #4]
 802031a:	681b      	ldr	r3, [r3, #0]
 802031c:	2160      	movs	r1, #96	; 0x60
 802031e:	4618      	mov	r0, r3
 8020320:	f000 fac9 	bl	80208b6 <TIM_ITRx_SetConfig>
      break;
 8020324:	e01c      	b.n	8020360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8020326:	687b      	ldr	r3, [r7, #4]
 8020328:	6818      	ldr	r0, [r3, #0]
 802032a:	683b      	ldr	r3, [r7, #0]
 802032c:	6859      	ldr	r1, [r3, #4]
 802032e:	683b      	ldr	r3, [r7, #0]
 8020330:	68db      	ldr	r3, [r3, #12]
 8020332:	461a      	mov	r2, r3
 8020334:	f000 fa60 	bl	80207f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8020338:	687b      	ldr	r3, [r7, #4]
 802033a:	681b      	ldr	r3, [r3, #0]
 802033c:	2140      	movs	r1, #64	; 0x40
 802033e:	4618      	mov	r0, r3
 8020340:	f000 fab9 	bl	80208b6 <TIM_ITRx_SetConfig>
      break;
 8020344:	e00c      	b.n	8020360 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8020346:	687b      	ldr	r3, [r7, #4]
 8020348:	681a      	ldr	r2, [r3, #0]
 802034a:	683b      	ldr	r3, [r7, #0]
 802034c:	681b      	ldr	r3, [r3, #0]
 802034e:	4619      	mov	r1, r3
 8020350:	4610      	mov	r0, r2
 8020352:	f000 fab0 	bl	80208b6 <TIM_ITRx_SetConfig>
      break;
 8020356:	e003      	b.n	8020360 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8020358:	2301      	movs	r3, #1
 802035a:	73fb      	strb	r3, [r7, #15]
      break;
 802035c:	e000      	b.n	8020360 <HAL_TIM_ConfigClockSource+0x174>
      break;
 802035e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8020360:	687b      	ldr	r3, [r7, #4]
 8020362:	2201      	movs	r2, #1
 8020364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8020368:	687b      	ldr	r3, [r7, #4]
 802036a:	2200      	movs	r2, #0
 802036c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8020370:	7bfb      	ldrb	r3, [r7, #15]
}
 8020372:	4618      	mov	r0, r3
 8020374:	3710      	adds	r7, #16
 8020376:	46bd      	mov	sp, r7
 8020378:	bd80      	pop	{r7, pc}

0802037a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 802037a:	b480      	push	{r7}
 802037c:	b083      	sub	sp, #12
 802037e:	af00      	add	r7, sp, #0
 8020380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8020382:	bf00      	nop
 8020384:	370c      	adds	r7, #12
 8020386:	46bd      	mov	sp, r7
 8020388:	f85d 7b04 	ldr.w	r7, [sp], #4
 802038c:	4770      	bx	lr

0802038e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 802038e:	b480      	push	{r7}
 8020390:	b083      	sub	sp, #12
 8020392:	af00      	add	r7, sp, #0
 8020394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8020396:	bf00      	nop
 8020398:	370c      	adds	r7, #12
 802039a:	46bd      	mov	sp, r7
 802039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203a0:	4770      	bx	lr

080203a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80203a2:	b480      	push	{r7}
 80203a4:	b083      	sub	sp, #12
 80203a6:	af00      	add	r7, sp, #0
 80203a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80203aa:	bf00      	nop
 80203ac:	370c      	adds	r7, #12
 80203ae:	46bd      	mov	sp, r7
 80203b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203b4:	4770      	bx	lr

080203b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80203b6:	b480      	push	{r7}
 80203b8:	b083      	sub	sp, #12
 80203ba:	af00      	add	r7, sp, #0
 80203bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80203be:	bf00      	nop
 80203c0:	370c      	adds	r7, #12
 80203c2:	46bd      	mov	sp, r7
 80203c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203c8:	4770      	bx	lr

080203ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80203ca:	b480      	push	{r7}
 80203cc:	b083      	sub	sp, #12
 80203ce:	af00      	add	r7, sp, #0
 80203d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80203d2:	bf00      	nop
 80203d4:	370c      	adds	r7, #12
 80203d6:	46bd      	mov	sp, r7
 80203d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203dc:	4770      	bx	lr
	...

080203e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80203e0:	b480      	push	{r7}
 80203e2:	b085      	sub	sp, #20
 80203e4:	af00      	add	r7, sp, #0
 80203e6:	6078      	str	r0, [r7, #4]
 80203e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80203ea:	687b      	ldr	r3, [r7, #4]
 80203ec:	681b      	ldr	r3, [r3, #0]
 80203ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80203f0:	687b      	ldr	r3, [r7, #4]
 80203f2:	4a34      	ldr	r2, [pc, #208]	; (80204c4 <TIM_Base_SetConfig+0xe4>)
 80203f4:	4293      	cmp	r3, r2
 80203f6:	d00f      	beq.n	8020418 <TIM_Base_SetConfig+0x38>
 80203f8:	687b      	ldr	r3, [r7, #4]
 80203fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80203fe:	d00b      	beq.n	8020418 <TIM_Base_SetConfig+0x38>
 8020400:	687b      	ldr	r3, [r7, #4]
 8020402:	4a31      	ldr	r2, [pc, #196]	; (80204c8 <TIM_Base_SetConfig+0xe8>)
 8020404:	4293      	cmp	r3, r2
 8020406:	d007      	beq.n	8020418 <TIM_Base_SetConfig+0x38>
 8020408:	687b      	ldr	r3, [r7, #4]
 802040a:	4a30      	ldr	r2, [pc, #192]	; (80204cc <TIM_Base_SetConfig+0xec>)
 802040c:	4293      	cmp	r3, r2
 802040e:	d003      	beq.n	8020418 <TIM_Base_SetConfig+0x38>
 8020410:	687b      	ldr	r3, [r7, #4]
 8020412:	4a2f      	ldr	r2, [pc, #188]	; (80204d0 <TIM_Base_SetConfig+0xf0>)
 8020414:	4293      	cmp	r3, r2
 8020416:	d108      	bne.n	802042a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8020418:	68fb      	ldr	r3, [r7, #12]
 802041a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802041e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8020420:	683b      	ldr	r3, [r7, #0]
 8020422:	685b      	ldr	r3, [r3, #4]
 8020424:	68fa      	ldr	r2, [r7, #12]
 8020426:	4313      	orrs	r3, r2
 8020428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802042a:	687b      	ldr	r3, [r7, #4]
 802042c:	4a25      	ldr	r2, [pc, #148]	; (80204c4 <TIM_Base_SetConfig+0xe4>)
 802042e:	4293      	cmp	r3, r2
 8020430:	d01b      	beq.n	802046a <TIM_Base_SetConfig+0x8a>
 8020432:	687b      	ldr	r3, [r7, #4]
 8020434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020438:	d017      	beq.n	802046a <TIM_Base_SetConfig+0x8a>
 802043a:	687b      	ldr	r3, [r7, #4]
 802043c:	4a22      	ldr	r2, [pc, #136]	; (80204c8 <TIM_Base_SetConfig+0xe8>)
 802043e:	4293      	cmp	r3, r2
 8020440:	d013      	beq.n	802046a <TIM_Base_SetConfig+0x8a>
 8020442:	687b      	ldr	r3, [r7, #4]
 8020444:	4a21      	ldr	r2, [pc, #132]	; (80204cc <TIM_Base_SetConfig+0xec>)
 8020446:	4293      	cmp	r3, r2
 8020448:	d00f      	beq.n	802046a <TIM_Base_SetConfig+0x8a>
 802044a:	687b      	ldr	r3, [r7, #4]
 802044c:	4a20      	ldr	r2, [pc, #128]	; (80204d0 <TIM_Base_SetConfig+0xf0>)
 802044e:	4293      	cmp	r3, r2
 8020450:	d00b      	beq.n	802046a <TIM_Base_SetConfig+0x8a>
 8020452:	687b      	ldr	r3, [r7, #4]
 8020454:	4a1f      	ldr	r2, [pc, #124]	; (80204d4 <TIM_Base_SetConfig+0xf4>)
 8020456:	4293      	cmp	r3, r2
 8020458:	d007      	beq.n	802046a <TIM_Base_SetConfig+0x8a>
 802045a:	687b      	ldr	r3, [r7, #4]
 802045c:	4a1e      	ldr	r2, [pc, #120]	; (80204d8 <TIM_Base_SetConfig+0xf8>)
 802045e:	4293      	cmp	r3, r2
 8020460:	d003      	beq.n	802046a <TIM_Base_SetConfig+0x8a>
 8020462:	687b      	ldr	r3, [r7, #4]
 8020464:	4a1d      	ldr	r2, [pc, #116]	; (80204dc <TIM_Base_SetConfig+0xfc>)
 8020466:	4293      	cmp	r3, r2
 8020468:	d108      	bne.n	802047c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802046a:	68fb      	ldr	r3, [r7, #12]
 802046c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8020472:	683b      	ldr	r3, [r7, #0]
 8020474:	68db      	ldr	r3, [r3, #12]
 8020476:	68fa      	ldr	r2, [r7, #12]
 8020478:	4313      	orrs	r3, r2
 802047a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802047c:	68fb      	ldr	r3, [r7, #12]
 802047e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8020482:	683b      	ldr	r3, [r7, #0]
 8020484:	695b      	ldr	r3, [r3, #20]
 8020486:	4313      	orrs	r3, r2
 8020488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802048a:	687b      	ldr	r3, [r7, #4]
 802048c:	68fa      	ldr	r2, [r7, #12]
 802048e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8020490:	683b      	ldr	r3, [r7, #0]
 8020492:	689a      	ldr	r2, [r3, #8]
 8020494:	687b      	ldr	r3, [r7, #4]
 8020496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8020498:	683b      	ldr	r3, [r7, #0]
 802049a:	681a      	ldr	r2, [r3, #0]
 802049c:	687b      	ldr	r3, [r7, #4]
 802049e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80204a0:	687b      	ldr	r3, [r7, #4]
 80204a2:	4a08      	ldr	r2, [pc, #32]	; (80204c4 <TIM_Base_SetConfig+0xe4>)
 80204a4:	4293      	cmp	r3, r2
 80204a6:	d103      	bne.n	80204b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80204a8:	683b      	ldr	r3, [r7, #0]
 80204aa:	691a      	ldr	r2, [r3, #16]
 80204ac:	687b      	ldr	r3, [r7, #4]
 80204ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80204b0:	687b      	ldr	r3, [r7, #4]
 80204b2:	2201      	movs	r2, #1
 80204b4:	615a      	str	r2, [r3, #20]
}
 80204b6:	bf00      	nop
 80204b8:	3714      	adds	r7, #20
 80204ba:	46bd      	mov	sp, r7
 80204bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204c0:	4770      	bx	lr
 80204c2:	bf00      	nop
 80204c4:	40010000 	.word	0x40010000
 80204c8:	40000400 	.word	0x40000400
 80204cc:	40000800 	.word	0x40000800
 80204d0:	40000c00 	.word	0x40000c00
 80204d4:	40014000 	.word	0x40014000
 80204d8:	40014400 	.word	0x40014400
 80204dc:	40014800 	.word	0x40014800

080204e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80204e0:	b480      	push	{r7}
 80204e2:	b087      	sub	sp, #28
 80204e4:	af00      	add	r7, sp, #0
 80204e6:	6078      	str	r0, [r7, #4]
 80204e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80204ea:	687b      	ldr	r3, [r7, #4]
 80204ec:	6a1b      	ldr	r3, [r3, #32]
 80204ee:	f023 0201 	bic.w	r2, r3, #1
 80204f2:	687b      	ldr	r3, [r7, #4]
 80204f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80204f6:	687b      	ldr	r3, [r7, #4]
 80204f8:	6a1b      	ldr	r3, [r3, #32]
 80204fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80204fc:	687b      	ldr	r3, [r7, #4]
 80204fe:	685b      	ldr	r3, [r3, #4]
 8020500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020502:	687b      	ldr	r3, [r7, #4]
 8020504:	699b      	ldr	r3, [r3, #24]
 8020506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8020508:	68fb      	ldr	r3, [r7, #12]
 802050a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802050e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8020510:	68fb      	ldr	r3, [r7, #12]
 8020512:	f023 0303 	bic.w	r3, r3, #3
 8020516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020518:	683b      	ldr	r3, [r7, #0]
 802051a:	681b      	ldr	r3, [r3, #0]
 802051c:	68fa      	ldr	r2, [r7, #12]
 802051e:	4313      	orrs	r3, r2
 8020520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8020522:	697b      	ldr	r3, [r7, #20]
 8020524:	f023 0302 	bic.w	r3, r3, #2
 8020528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 802052a:	683b      	ldr	r3, [r7, #0]
 802052c:	689b      	ldr	r3, [r3, #8]
 802052e:	697a      	ldr	r2, [r7, #20]
 8020530:	4313      	orrs	r3, r2
 8020532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8020534:	687b      	ldr	r3, [r7, #4]
 8020536:	4a1c      	ldr	r2, [pc, #112]	; (80205a8 <TIM_OC1_SetConfig+0xc8>)
 8020538:	4293      	cmp	r3, r2
 802053a:	d10c      	bne.n	8020556 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 802053c:	697b      	ldr	r3, [r7, #20]
 802053e:	f023 0308 	bic.w	r3, r3, #8
 8020542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8020544:	683b      	ldr	r3, [r7, #0]
 8020546:	68db      	ldr	r3, [r3, #12]
 8020548:	697a      	ldr	r2, [r7, #20]
 802054a:	4313      	orrs	r3, r2
 802054c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 802054e:	697b      	ldr	r3, [r7, #20]
 8020550:	f023 0304 	bic.w	r3, r3, #4
 8020554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020556:	687b      	ldr	r3, [r7, #4]
 8020558:	4a13      	ldr	r2, [pc, #76]	; (80205a8 <TIM_OC1_SetConfig+0xc8>)
 802055a:	4293      	cmp	r3, r2
 802055c:	d111      	bne.n	8020582 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 802055e:	693b      	ldr	r3, [r7, #16]
 8020560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8020564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8020566:	693b      	ldr	r3, [r7, #16]
 8020568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802056c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 802056e:	683b      	ldr	r3, [r7, #0]
 8020570:	695b      	ldr	r3, [r3, #20]
 8020572:	693a      	ldr	r2, [r7, #16]
 8020574:	4313      	orrs	r3, r2
 8020576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8020578:	683b      	ldr	r3, [r7, #0]
 802057a:	699b      	ldr	r3, [r3, #24]
 802057c:	693a      	ldr	r2, [r7, #16]
 802057e:	4313      	orrs	r3, r2
 8020580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020582:	687b      	ldr	r3, [r7, #4]
 8020584:	693a      	ldr	r2, [r7, #16]
 8020586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020588:	687b      	ldr	r3, [r7, #4]
 802058a:	68fa      	ldr	r2, [r7, #12]
 802058c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 802058e:	683b      	ldr	r3, [r7, #0]
 8020590:	685a      	ldr	r2, [r3, #4]
 8020592:	687b      	ldr	r3, [r7, #4]
 8020594:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020596:	687b      	ldr	r3, [r7, #4]
 8020598:	697a      	ldr	r2, [r7, #20]
 802059a:	621a      	str	r2, [r3, #32]
}
 802059c:	bf00      	nop
 802059e:	371c      	adds	r7, #28
 80205a0:	46bd      	mov	sp, r7
 80205a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205a6:	4770      	bx	lr
 80205a8:	40010000 	.word	0x40010000

080205ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80205ac:	b480      	push	{r7}
 80205ae:	b087      	sub	sp, #28
 80205b0:	af00      	add	r7, sp, #0
 80205b2:	6078      	str	r0, [r7, #4]
 80205b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80205b6:	687b      	ldr	r3, [r7, #4]
 80205b8:	6a1b      	ldr	r3, [r3, #32]
 80205ba:	f023 0210 	bic.w	r2, r3, #16
 80205be:	687b      	ldr	r3, [r7, #4]
 80205c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80205c2:	687b      	ldr	r3, [r7, #4]
 80205c4:	6a1b      	ldr	r3, [r3, #32]
 80205c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80205c8:	687b      	ldr	r3, [r7, #4]
 80205ca:	685b      	ldr	r3, [r3, #4]
 80205cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80205ce:	687b      	ldr	r3, [r7, #4]
 80205d0:	699b      	ldr	r3, [r3, #24]
 80205d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80205d4:	68fb      	ldr	r3, [r7, #12]
 80205d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80205da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80205dc:	68fb      	ldr	r3, [r7, #12]
 80205de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80205e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80205e4:	683b      	ldr	r3, [r7, #0]
 80205e6:	681b      	ldr	r3, [r3, #0]
 80205e8:	021b      	lsls	r3, r3, #8
 80205ea:	68fa      	ldr	r2, [r7, #12]
 80205ec:	4313      	orrs	r3, r2
 80205ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80205f0:	697b      	ldr	r3, [r7, #20]
 80205f2:	f023 0320 	bic.w	r3, r3, #32
 80205f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80205f8:	683b      	ldr	r3, [r7, #0]
 80205fa:	689b      	ldr	r3, [r3, #8]
 80205fc:	011b      	lsls	r3, r3, #4
 80205fe:	697a      	ldr	r2, [r7, #20]
 8020600:	4313      	orrs	r3, r2
 8020602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8020604:	687b      	ldr	r3, [r7, #4]
 8020606:	4a1e      	ldr	r2, [pc, #120]	; (8020680 <TIM_OC2_SetConfig+0xd4>)
 8020608:	4293      	cmp	r3, r2
 802060a:	d10d      	bne.n	8020628 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 802060c:	697b      	ldr	r3, [r7, #20]
 802060e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8020612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8020614:	683b      	ldr	r3, [r7, #0]
 8020616:	68db      	ldr	r3, [r3, #12]
 8020618:	011b      	lsls	r3, r3, #4
 802061a:	697a      	ldr	r2, [r7, #20]
 802061c:	4313      	orrs	r3, r2
 802061e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8020620:	697b      	ldr	r3, [r7, #20]
 8020622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8020626:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020628:	687b      	ldr	r3, [r7, #4]
 802062a:	4a15      	ldr	r2, [pc, #84]	; (8020680 <TIM_OC2_SetConfig+0xd4>)
 802062c:	4293      	cmp	r3, r2
 802062e:	d113      	bne.n	8020658 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8020630:	693b      	ldr	r3, [r7, #16]
 8020632:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8020636:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8020638:	693b      	ldr	r3, [r7, #16]
 802063a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802063e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8020640:	683b      	ldr	r3, [r7, #0]
 8020642:	695b      	ldr	r3, [r3, #20]
 8020644:	009b      	lsls	r3, r3, #2
 8020646:	693a      	ldr	r2, [r7, #16]
 8020648:	4313      	orrs	r3, r2
 802064a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 802064c:	683b      	ldr	r3, [r7, #0]
 802064e:	699b      	ldr	r3, [r3, #24]
 8020650:	009b      	lsls	r3, r3, #2
 8020652:	693a      	ldr	r2, [r7, #16]
 8020654:	4313      	orrs	r3, r2
 8020656:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020658:	687b      	ldr	r3, [r7, #4]
 802065a:	693a      	ldr	r2, [r7, #16]
 802065c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802065e:	687b      	ldr	r3, [r7, #4]
 8020660:	68fa      	ldr	r2, [r7, #12]
 8020662:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8020664:	683b      	ldr	r3, [r7, #0]
 8020666:	685a      	ldr	r2, [r3, #4]
 8020668:	687b      	ldr	r3, [r7, #4]
 802066a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802066c:	687b      	ldr	r3, [r7, #4]
 802066e:	697a      	ldr	r2, [r7, #20]
 8020670:	621a      	str	r2, [r3, #32]
}
 8020672:	bf00      	nop
 8020674:	371c      	adds	r7, #28
 8020676:	46bd      	mov	sp, r7
 8020678:	f85d 7b04 	ldr.w	r7, [sp], #4
 802067c:	4770      	bx	lr
 802067e:	bf00      	nop
 8020680:	40010000 	.word	0x40010000

08020684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020684:	b480      	push	{r7}
 8020686:	b087      	sub	sp, #28
 8020688:	af00      	add	r7, sp, #0
 802068a:	6078      	str	r0, [r7, #4]
 802068c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 802068e:	687b      	ldr	r3, [r7, #4]
 8020690:	6a1b      	ldr	r3, [r3, #32]
 8020692:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8020696:	687b      	ldr	r3, [r7, #4]
 8020698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802069a:	687b      	ldr	r3, [r7, #4]
 802069c:	6a1b      	ldr	r3, [r3, #32]
 802069e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80206a0:	687b      	ldr	r3, [r7, #4]
 80206a2:	685b      	ldr	r3, [r3, #4]
 80206a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80206a6:	687b      	ldr	r3, [r7, #4]
 80206a8:	69db      	ldr	r3, [r3, #28]
 80206aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80206ac:	68fb      	ldr	r3, [r7, #12]
 80206ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80206b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80206b4:	68fb      	ldr	r3, [r7, #12]
 80206b6:	f023 0303 	bic.w	r3, r3, #3
 80206ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80206bc:	683b      	ldr	r3, [r7, #0]
 80206be:	681b      	ldr	r3, [r3, #0]
 80206c0:	68fa      	ldr	r2, [r7, #12]
 80206c2:	4313      	orrs	r3, r2
 80206c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80206c6:	697b      	ldr	r3, [r7, #20]
 80206c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80206cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80206ce:	683b      	ldr	r3, [r7, #0]
 80206d0:	689b      	ldr	r3, [r3, #8]
 80206d2:	021b      	lsls	r3, r3, #8
 80206d4:	697a      	ldr	r2, [r7, #20]
 80206d6:	4313      	orrs	r3, r2
 80206d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80206da:	687b      	ldr	r3, [r7, #4]
 80206dc:	4a1d      	ldr	r2, [pc, #116]	; (8020754 <TIM_OC3_SetConfig+0xd0>)
 80206de:	4293      	cmp	r3, r2
 80206e0:	d10d      	bne.n	80206fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80206e2:	697b      	ldr	r3, [r7, #20]
 80206e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80206e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80206ea:	683b      	ldr	r3, [r7, #0]
 80206ec:	68db      	ldr	r3, [r3, #12]
 80206ee:	021b      	lsls	r3, r3, #8
 80206f0:	697a      	ldr	r2, [r7, #20]
 80206f2:	4313      	orrs	r3, r2
 80206f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80206f6:	697b      	ldr	r3, [r7, #20]
 80206f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80206fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80206fe:	687b      	ldr	r3, [r7, #4]
 8020700:	4a14      	ldr	r2, [pc, #80]	; (8020754 <TIM_OC3_SetConfig+0xd0>)
 8020702:	4293      	cmp	r3, r2
 8020704:	d113      	bne.n	802072e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8020706:	693b      	ldr	r3, [r7, #16]
 8020708:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802070c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 802070e:	693b      	ldr	r3, [r7, #16]
 8020710:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8020714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8020716:	683b      	ldr	r3, [r7, #0]
 8020718:	695b      	ldr	r3, [r3, #20]
 802071a:	011b      	lsls	r3, r3, #4
 802071c:	693a      	ldr	r2, [r7, #16]
 802071e:	4313      	orrs	r3, r2
 8020720:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8020722:	683b      	ldr	r3, [r7, #0]
 8020724:	699b      	ldr	r3, [r3, #24]
 8020726:	011b      	lsls	r3, r3, #4
 8020728:	693a      	ldr	r2, [r7, #16]
 802072a:	4313      	orrs	r3, r2
 802072c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802072e:	687b      	ldr	r3, [r7, #4]
 8020730:	693a      	ldr	r2, [r7, #16]
 8020732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020734:	687b      	ldr	r3, [r7, #4]
 8020736:	68fa      	ldr	r2, [r7, #12]
 8020738:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 802073a:	683b      	ldr	r3, [r7, #0]
 802073c:	685a      	ldr	r2, [r3, #4]
 802073e:	687b      	ldr	r3, [r7, #4]
 8020740:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020742:	687b      	ldr	r3, [r7, #4]
 8020744:	697a      	ldr	r2, [r7, #20]
 8020746:	621a      	str	r2, [r3, #32]
}
 8020748:	bf00      	nop
 802074a:	371c      	adds	r7, #28
 802074c:	46bd      	mov	sp, r7
 802074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020752:	4770      	bx	lr
 8020754:	40010000 	.word	0x40010000

08020758 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020758:	b480      	push	{r7}
 802075a:	b087      	sub	sp, #28
 802075c:	af00      	add	r7, sp, #0
 802075e:	6078      	str	r0, [r7, #4]
 8020760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8020762:	687b      	ldr	r3, [r7, #4]
 8020764:	6a1b      	ldr	r3, [r3, #32]
 8020766:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802076a:	687b      	ldr	r3, [r7, #4]
 802076c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802076e:	687b      	ldr	r3, [r7, #4]
 8020770:	6a1b      	ldr	r3, [r3, #32]
 8020772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020774:	687b      	ldr	r3, [r7, #4]
 8020776:	685b      	ldr	r3, [r3, #4]
 8020778:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802077a:	687b      	ldr	r3, [r7, #4]
 802077c:	69db      	ldr	r3, [r3, #28]
 802077e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8020780:	68fb      	ldr	r3, [r7, #12]
 8020782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8020786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8020788:	68fb      	ldr	r3, [r7, #12]
 802078a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802078e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020790:	683b      	ldr	r3, [r7, #0]
 8020792:	681b      	ldr	r3, [r3, #0]
 8020794:	021b      	lsls	r3, r3, #8
 8020796:	68fa      	ldr	r2, [r7, #12]
 8020798:	4313      	orrs	r3, r2
 802079a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 802079c:	693b      	ldr	r3, [r7, #16]
 802079e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80207a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80207a4:	683b      	ldr	r3, [r7, #0]
 80207a6:	689b      	ldr	r3, [r3, #8]
 80207a8:	031b      	lsls	r3, r3, #12
 80207aa:	693a      	ldr	r2, [r7, #16]
 80207ac:	4313      	orrs	r3, r2
 80207ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80207b0:	687b      	ldr	r3, [r7, #4]
 80207b2:	4a10      	ldr	r2, [pc, #64]	; (80207f4 <TIM_OC4_SetConfig+0x9c>)
 80207b4:	4293      	cmp	r3, r2
 80207b6:	d109      	bne.n	80207cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80207b8:	697b      	ldr	r3, [r7, #20]
 80207ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80207be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80207c0:	683b      	ldr	r3, [r7, #0]
 80207c2:	695b      	ldr	r3, [r3, #20]
 80207c4:	019b      	lsls	r3, r3, #6
 80207c6:	697a      	ldr	r2, [r7, #20]
 80207c8:	4313      	orrs	r3, r2
 80207ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80207cc:	687b      	ldr	r3, [r7, #4]
 80207ce:	697a      	ldr	r2, [r7, #20]
 80207d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80207d2:	687b      	ldr	r3, [r7, #4]
 80207d4:	68fa      	ldr	r2, [r7, #12]
 80207d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80207d8:	683b      	ldr	r3, [r7, #0]
 80207da:	685a      	ldr	r2, [r3, #4]
 80207dc:	687b      	ldr	r3, [r7, #4]
 80207de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80207e0:	687b      	ldr	r3, [r7, #4]
 80207e2:	693a      	ldr	r2, [r7, #16]
 80207e4:	621a      	str	r2, [r3, #32]
}
 80207e6:	bf00      	nop
 80207e8:	371c      	adds	r7, #28
 80207ea:	46bd      	mov	sp, r7
 80207ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207f0:	4770      	bx	lr
 80207f2:	bf00      	nop
 80207f4:	40010000 	.word	0x40010000

080207f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80207f8:	b480      	push	{r7}
 80207fa:	b087      	sub	sp, #28
 80207fc:	af00      	add	r7, sp, #0
 80207fe:	60f8      	str	r0, [r7, #12]
 8020800:	60b9      	str	r1, [r7, #8]
 8020802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8020804:	68fb      	ldr	r3, [r7, #12]
 8020806:	6a1b      	ldr	r3, [r3, #32]
 8020808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802080a:	68fb      	ldr	r3, [r7, #12]
 802080c:	6a1b      	ldr	r3, [r3, #32]
 802080e:	f023 0201 	bic.w	r2, r3, #1
 8020812:	68fb      	ldr	r3, [r7, #12]
 8020814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020816:	68fb      	ldr	r3, [r7, #12]
 8020818:	699b      	ldr	r3, [r3, #24]
 802081a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802081c:	693b      	ldr	r3, [r7, #16]
 802081e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8020822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8020824:	687b      	ldr	r3, [r7, #4]
 8020826:	011b      	lsls	r3, r3, #4
 8020828:	693a      	ldr	r2, [r7, #16]
 802082a:	4313      	orrs	r3, r2
 802082c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802082e:	697b      	ldr	r3, [r7, #20]
 8020830:	f023 030a 	bic.w	r3, r3, #10
 8020834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8020836:	697a      	ldr	r2, [r7, #20]
 8020838:	68bb      	ldr	r3, [r7, #8]
 802083a:	4313      	orrs	r3, r2
 802083c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802083e:	68fb      	ldr	r3, [r7, #12]
 8020840:	693a      	ldr	r2, [r7, #16]
 8020842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020844:	68fb      	ldr	r3, [r7, #12]
 8020846:	697a      	ldr	r2, [r7, #20]
 8020848:	621a      	str	r2, [r3, #32]
}
 802084a:	bf00      	nop
 802084c:	371c      	adds	r7, #28
 802084e:	46bd      	mov	sp, r7
 8020850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020854:	4770      	bx	lr

08020856 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020856:	b480      	push	{r7}
 8020858:	b087      	sub	sp, #28
 802085a:	af00      	add	r7, sp, #0
 802085c:	60f8      	str	r0, [r7, #12]
 802085e:	60b9      	str	r1, [r7, #8]
 8020860:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020862:	68fb      	ldr	r3, [r7, #12]
 8020864:	6a1b      	ldr	r3, [r3, #32]
 8020866:	f023 0210 	bic.w	r2, r3, #16
 802086a:	68fb      	ldr	r3, [r7, #12]
 802086c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802086e:	68fb      	ldr	r3, [r7, #12]
 8020870:	699b      	ldr	r3, [r3, #24]
 8020872:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8020874:	68fb      	ldr	r3, [r7, #12]
 8020876:	6a1b      	ldr	r3, [r3, #32]
 8020878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802087a:	697b      	ldr	r3, [r7, #20]
 802087c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8020880:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8020882:	687b      	ldr	r3, [r7, #4]
 8020884:	031b      	lsls	r3, r3, #12
 8020886:	697a      	ldr	r2, [r7, #20]
 8020888:	4313      	orrs	r3, r2
 802088a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 802088c:	693b      	ldr	r3, [r7, #16]
 802088e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8020892:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8020894:	68bb      	ldr	r3, [r7, #8]
 8020896:	011b      	lsls	r3, r3, #4
 8020898:	693a      	ldr	r2, [r7, #16]
 802089a:	4313      	orrs	r3, r2
 802089c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802089e:	68fb      	ldr	r3, [r7, #12]
 80208a0:	697a      	ldr	r2, [r7, #20]
 80208a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80208a4:	68fb      	ldr	r3, [r7, #12]
 80208a6:	693a      	ldr	r2, [r7, #16]
 80208a8:	621a      	str	r2, [r3, #32]
}
 80208aa:	bf00      	nop
 80208ac:	371c      	adds	r7, #28
 80208ae:	46bd      	mov	sp, r7
 80208b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208b4:	4770      	bx	lr

080208b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80208b6:	b480      	push	{r7}
 80208b8:	b085      	sub	sp, #20
 80208ba:	af00      	add	r7, sp, #0
 80208bc:	6078      	str	r0, [r7, #4]
 80208be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80208c0:	687b      	ldr	r3, [r7, #4]
 80208c2:	689b      	ldr	r3, [r3, #8]
 80208c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80208c6:	68fb      	ldr	r3, [r7, #12]
 80208c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80208cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80208ce:	683a      	ldr	r2, [r7, #0]
 80208d0:	68fb      	ldr	r3, [r7, #12]
 80208d2:	4313      	orrs	r3, r2
 80208d4:	f043 0307 	orr.w	r3, r3, #7
 80208d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80208da:	687b      	ldr	r3, [r7, #4]
 80208dc:	68fa      	ldr	r2, [r7, #12]
 80208de:	609a      	str	r2, [r3, #8]
}
 80208e0:	bf00      	nop
 80208e2:	3714      	adds	r7, #20
 80208e4:	46bd      	mov	sp, r7
 80208e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208ea:	4770      	bx	lr

080208ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80208ec:	b480      	push	{r7}
 80208ee:	b087      	sub	sp, #28
 80208f0:	af00      	add	r7, sp, #0
 80208f2:	60f8      	str	r0, [r7, #12]
 80208f4:	60b9      	str	r1, [r7, #8]
 80208f6:	607a      	str	r2, [r7, #4]
 80208f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80208fa:	68fb      	ldr	r3, [r7, #12]
 80208fc:	689b      	ldr	r3, [r3, #8]
 80208fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020900:	697b      	ldr	r3, [r7, #20]
 8020902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8020906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8020908:	683b      	ldr	r3, [r7, #0]
 802090a:	021a      	lsls	r2, r3, #8
 802090c:	687b      	ldr	r3, [r7, #4]
 802090e:	431a      	orrs	r2, r3
 8020910:	68bb      	ldr	r3, [r7, #8]
 8020912:	4313      	orrs	r3, r2
 8020914:	697a      	ldr	r2, [r7, #20]
 8020916:	4313      	orrs	r3, r2
 8020918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802091a:	68fb      	ldr	r3, [r7, #12]
 802091c:	697a      	ldr	r2, [r7, #20]
 802091e:	609a      	str	r2, [r3, #8]
}
 8020920:	bf00      	nop
 8020922:	371c      	adds	r7, #28
 8020924:	46bd      	mov	sp, r7
 8020926:	f85d 7b04 	ldr.w	r7, [sp], #4
 802092a:	4770      	bx	lr

0802092c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 802092c:	b480      	push	{r7}
 802092e:	b087      	sub	sp, #28
 8020930:	af00      	add	r7, sp, #0
 8020932:	60f8      	str	r0, [r7, #12]
 8020934:	60b9      	str	r1, [r7, #8]
 8020936:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8020938:	68bb      	ldr	r3, [r7, #8]
 802093a:	f003 031f 	and.w	r3, r3, #31
 802093e:	2201      	movs	r2, #1
 8020940:	fa02 f303 	lsl.w	r3, r2, r3
 8020944:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8020946:	68fb      	ldr	r3, [r7, #12]
 8020948:	6a1a      	ldr	r2, [r3, #32]
 802094a:	697b      	ldr	r3, [r7, #20]
 802094c:	43db      	mvns	r3, r3
 802094e:	401a      	ands	r2, r3
 8020950:	68fb      	ldr	r3, [r7, #12]
 8020952:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8020954:	68fb      	ldr	r3, [r7, #12]
 8020956:	6a1a      	ldr	r2, [r3, #32]
 8020958:	68bb      	ldr	r3, [r7, #8]
 802095a:	f003 031f 	and.w	r3, r3, #31
 802095e:	6879      	ldr	r1, [r7, #4]
 8020960:	fa01 f303 	lsl.w	r3, r1, r3
 8020964:	431a      	orrs	r2, r3
 8020966:	68fb      	ldr	r3, [r7, #12]
 8020968:	621a      	str	r2, [r3, #32]
}
 802096a:	bf00      	nop
 802096c:	371c      	adds	r7, #28
 802096e:	46bd      	mov	sp, r7
 8020970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020974:	4770      	bx	lr
	...

08020978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8020978:	b480      	push	{r7}
 802097a:	b085      	sub	sp, #20
 802097c:	af00      	add	r7, sp, #0
 802097e:	6078      	str	r0, [r7, #4]
 8020980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8020982:	687b      	ldr	r3, [r7, #4]
 8020984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020988:	2b01      	cmp	r3, #1
 802098a:	d101      	bne.n	8020990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802098c:	2302      	movs	r3, #2
 802098e:	e050      	b.n	8020a32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8020990:	687b      	ldr	r3, [r7, #4]
 8020992:	2201      	movs	r2, #1
 8020994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020998:	687b      	ldr	r3, [r7, #4]
 802099a:	2202      	movs	r2, #2
 802099c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80209a0:	687b      	ldr	r3, [r7, #4]
 80209a2:	681b      	ldr	r3, [r3, #0]
 80209a4:	685b      	ldr	r3, [r3, #4]
 80209a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80209a8:	687b      	ldr	r3, [r7, #4]
 80209aa:	681b      	ldr	r3, [r3, #0]
 80209ac:	689b      	ldr	r3, [r3, #8]
 80209ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80209b0:	68fb      	ldr	r3, [r7, #12]
 80209b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80209b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80209b8:	683b      	ldr	r3, [r7, #0]
 80209ba:	681b      	ldr	r3, [r3, #0]
 80209bc:	68fa      	ldr	r2, [r7, #12]
 80209be:	4313      	orrs	r3, r2
 80209c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80209c2:	687b      	ldr	r3, [r7, #4]
 80209c4:	681b      	ldr	r3, [r3, #0]
 80209c6:	68fa      	ldr	r2, [r7, #12]
 80209c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80209ca:	687b      	ldr	r3, [r7, #4]
 80209cc:	681b      	ldr	r3, [r3, #0]
 80209ce:	4a1c      	ldr	r2, [pc, #112]	; (8020a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80209d0:	4293      	cmp	r3, r2
 80209d2:	d018      	beq.n	8020a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80209d4:	687b      	ldr	r3, [r7, #4]
 80209d6:	681b      	ldr	r3, [r3, #0]
 80209d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80209dc:	d013      	beq.n	8020a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80209de:	687b      	ldr	r3, [r7, #4]
 80209e0:	681b      	ldr	r3, [r3, #0]
 80209e2:	4a18      	ldr	r2, [pc, #96]	; (8020a44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80209e4:	4293      	cmp	r3, r2
 80209e6:	d00e      	beq.n	8020a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80209e8:	687b      	ldr	r3, [r7, #4]
 80209ea:	681b      	ldr	r3, [r3, #0]
 80209ec:	4a16      	ldr	r2, [pc, #88]	; (8020a48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80209ee:	4293      	cmp	r3, r2
 80209f0:	d009      	beq.n	8020a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80209f2:	687b      	ldr	r3, [r7, #4]
 80209f4:	681b      	ldr	r3, [r3, #0]
 80209f6:	4a15      	ldr	r2, [pc, #84]	; (8020a4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80209f8:	4293      	cmp	r3, r2
 80209fa:	d004      	beq.n	8020a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80209fc:	687b      	ldr	r3, [r7, #4]
 80209fe:	681b      	ldr	r3, [r3, #0]
 8020a00:	4a13      	ldr	r2, [pc, #76]	; (8020a50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8020a02:	4293      	cmp	r3, r2
 8020a04:	d10c      	bne.n	8020a20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8020a06:	68bb      	ldr	r3, [r7, #8]
 8020a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8020a0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8020a0e:	683b      	ldr	r3, [r7, #0]
 8020a10:	685b      	ldr	r3, [r3, #4]
 8020a12:	68ba      	ldr	r2, [r7, #8]
 8020a14:	4313      	orrs	r3, r2
 8020a16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8020a18:	687b      	ldr	r3, [r7, #4]
 8020a1a:	681b      	ldr	r3, [r3, #0]
 8020a1c:	68ba      	ldr	r2, [r7, #8]
 8020a1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8020a20:	687b      	ldr	r3, [r7, #4]
 8020a22:	2201      	movs	r2, #1
 8020a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8020a28:	687b      	ldr	r3, [r7, #4]
 8020a2a:	2200      	movs	r2, #0
 8020a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8020a30:	2300      	movs	r3, #0
}
 8020a32:	4618      	mov	r0, r3
 8020a34:	3714      	adds	r7, #20
 8020a36:	46bd      	mov	sp, r7
 8020a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a3c:	4770      	bx	lr
 8020a3e:	bf00      	nop
 8020a40:	40010000 	.word	0x40010000
 8020a44:	40000400 	.word	0x40000400
 8020a48:	40000800 	.word	0x40000800
 8020a4c:	40000c00 	.word	0x40000c00
 8020a50:	40014000 	.word	0x40014000

08020a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8020a54:	b480      	push	{r7}
 8020a56:	b083      	sub	sp, #12
 8020a58:	af00      	add	r7, sp, #0
 8020a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8020a5c:	bf00      	nop
 8020a5e:	370c      	adds	r7, #12
 8020a60:	46bd      	mov	sp, r7
 8020a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a66:	4770      	bx	lr

08020a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8020a68:	b480      	push	{r7}
 8020a6a:	b083      	sub	sp, #12
 8020a6c:	af00      	add	r7, sp, #0
 8020a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8020a70:	bf00      	nop
 8020a72:	370c      	adds	r7, #12
 8020a74:	46bd      	mov	sp, r7
 8020a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a7a:	4770      	bx	lr

08020a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8020a7c:	b580      	push	{r7, lr}
 8020a7e:	b082      	sub	sp, #8
 8020a80:	af00      	add	r7, sp, #0
 8020a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8020a84:	687b      	ldr	r3, [r7, #4]
 8020a86:	2b00      	cmp	r3, #0
 8020a88:	d101      	bne.n	8020a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8020a8a:	2301      	movs	r3, #1
 8020a8c:	e03f      	b.n	8020b0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8020a8e:	687b      	ldr	r3, [r7, #4]
 8020a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8020a94:	b2db      	uxtb	r3, r3
 8020a96:	2b00      	cmp	r3, #0
 8020a98:	d106      	bne.n	8020aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8020a9a:	687b      	ldr	r3, [r7, #4]
 8020a9c:	2200      	movs	r2, #0
 8020a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8020aa2:	6878      	ldr	r0, [r7, #4]
 8020aa4:	f7e2 ff24 	bl	80038f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8020aa8:	687b      	ldr	r3, [r7, #4]
 8020aaa:	2224      	movs	r2, #36	; 0x24
 8020aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8020ab0:	687b      	ldr	r3, [r7, #4]
 8020ab2:	681b      	ldr	r3, [r3, #0]
 8020ab4:	68da      	ldr	r2, [r3, #12]
 8020ab6:	687b      	ldr	r3, [r7, #4]
 8020ab8:	681b      	ldr	r3, [r3, #0]
 8020aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8020abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8020ac0:	6878      	ldr	r0, [r7, #4]
 8020ac2:	f000 fec7 	bl	8021854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8020ac6:	687b      	ldr	r3, [r7, #4]
 8020ac8:	681b      	ldr	r3, [r3, #0]
 8020aca:	691a      	ldr	r2, [r3, #16]
 8020acc:	687b      	ldr	r3, [r7, #4]
 8020ace:	681b      	ldr	r3, [r3, #0]
 8020ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8020ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8020ad6:	687b      	ldr	r3, [r7, #4]
 8020ad8:	681b      	ldr	r3, [r3, #0]
 8020ada:	695a      	ldr	r2, [r3, #20]
 8020adc:	687b      	ldr	r3, [r7, #4]
 8020ade:	681b      	ldr	r3, [r3, #0]
 8020ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8020ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8020ae6:	687b      	ldr	r3, [r7, #4]
 8020ae8:	681b      	ldr	r3, [r3, #0]
 8020aea:	68da      	ldr	r2, [r3, #12]
 8020aec:	687b      	ldr	r3, [r7, #4]
 8020aee:	681b      	ldr	r3, [r3, #0]
 8020af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8020af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020af6:	687b      	ldr	r3, [r7, #4]
 8020af8:	2200      	movs	r2, #0
 8020afa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8020afc:	687b      	ldr	r3, [r7, #4]
 8020afe:	2220      	movs	r2, #32
 8020b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8020b04:	687b      	ldr	r3, [r7, #4]
 8020b06:	2220      	movs	r2, #32
 8020b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8020b0c:	2300      	movs	r3, #0
}
 8020b0e:	4618      	mov	r0, r3
 8020b10:	3708      	adds	r7, #8
 8020b12:	46bd      	mov	sp, r7
 8020b14:	bd80      	pop	{r7, pc}

08020b16 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8020b16:	b580      	push	{r7, lr}
 8020b18:	b082      	sub	sp, #8
 8020b1a:	af00      	add	r7, sp, #0
 8020b1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8020b1e:	687b      	ldr	r3, [r7, #4]
 8020b20:	2b00      	cmp	r3, #0
 8020b22:	d101      	bne.n	8020b28 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8020b24:	2301      	movs	r3, #1
 8020b26:	e021      	b.n	8020b6c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8020b28:	687b      	ldr	r3, [r7, #4]
 8020b2a:	2224      	movs	r2, #36	; 0x24
 8020b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8020b30:	687b      	ldr	r3, [r7, #4]
 8020b32:	681b      	ldr	r3, [r3, #0]
 8020b34:	68da      	ldr	r2, [r3, #12]
 8020b36:	687b      	ldr	r3, [r7, #4]
 8020b38:	681b      	ldr	r3, [r3, #0]
 8020b3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8020b3e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8020b40:	6878      	ldr	r0, [r7, #4]
 8020b42:	f7e2 ff9f 	bl	8003a84 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020b46:	687b      	ldr	r3, [r7, #4]
 8020b48:	2200      	movs	r2, #0
 8020b4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8020b4c:	687b      	ldr	r3, [r7, #4]
 8020b4e:	2200      	movs	r2, #0
 8020b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8020b54:	687b      	ldr	r3, [r7, #4]
 8020b56:	2200      	movs	r2, #0
 8020b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020b5c:	687b      	ldr	r3, [r7, #4]
 8020b5e:	2200      	movs	r2, #0
 8020b60:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8020b62:	687b      	ldr	r3, [r7, #4]
 8020b64:	2200      	movs	r2, #0
 8020b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8020b6a:	2300      	movs	r3, #0
}
 8020b6c:	4618      	mov	r0, r3
 8020b6e:	3708      	adds	r7, #8
 8020b70:	46bd      	mov	sp, r7
 8020b72:	bd80      	pop	{r7, pc}

08020b74 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8020b74:	b480      	push	{r7}
 8020b76:	b085      	sub	sp, #20
 8020b78:	af00      	add	r7, sp, #0
 8020b7a:	60f8      	str	r0, [r7, #12]
 8020b7c:	60b9      	str	r1, [r7, #8]
 8020b7e:	4613      	mov	r3, r2
 8020b80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8020b82:	68fb      	ldr	r3, [r7, #12]
 8020b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8020b88:	b2db      	uxtb	r3, r3
 8020b8a:	2b20      	cmp	r3, #32
 8020b8c:	d130      	bne.n	8020bf0 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8020b8e:	68bb      	ldr	r3, [r7, #8]
 8020b90:	2b00      	cmp	r3, #0
 8020b92:	d002      	beq.n	8020b9a <HAL_UART_Transmit_IT+0x26>
 8020b94:	88fb      	ldrh	r3, [r7, #6]
 8020b96:	2b00      	cmp	r3, #0
 8020b98:	d101      	bne.n	8020b9e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8020b9a:	2301      	movs	r3, #1
 8020b9c:	e029      	b.n	8020bf2 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8020b9e:	68fb      	ldr	r3, [r7, #12]
 8020ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020ba4:	2b01      	cmp	r3, #1
 8020ba6:	d101      	bne.n	8020bac <HAL_UART_Transmit_IT+0x38>
 8020ba8:	2302      	movs	r3, #2
 8020baa:	e022      	b.n	8020bf2 <HAL_UART_Transmit_IT+0x7e>
 8020bac:	68fb      	ldr	r3, [r7, #12]
 8020bae:	2201      	movs	r2, #1
 8020bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8020bb4:	68fb      	ldr	r3, [r7, #12]
 8020bb6:	68ba      	ldr	r2, [r7, #8]
 8020bb8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8020bba:	68fb      	ldr	r3, [r7, #12]
 8020bbc:	88fa      	ldrh	r2, [r7, #6]
 8020bbe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8020bc0:	68fb      	ldr	r3, [r7, #12]
 8020bc2:	88fa      	ldrh	r2, [r7, #6]
 8020bc4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020bc6:	68fb      	ldr	r3, [r7, #12]
 8020bc8:	2200      	movs	r2, #0
 8020bca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8020bcc:	68fb      	ldr	r3, [r7, #12]
 8020bce:	2221      	movs	r2, #33	; 0x21
 8020bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8020bd4:	68fb      	ldr	r3, [r7, #12]
 8020bd6:	2200      	movs	r2, #0
 8020bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8020bdc:	68fb      	ldr	r3, [r7, #12]
 8020bde:	681b      	ldr	r3, [r3, #0]
 8020be0:	68da      	ldr	r2, [r3, #12]
 8020be2:	68fb      	ldr	r3, [r7, #12]
 8020be4:	681b      	ldr	r3, [r3, #0]
 8020be6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8020bea:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8020bec:	2300      	movs	r3, #0
 8020bee:	e000      	b.n	8020bf2 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8020bf0:	2302      	movs	r3, #2
  }
}
 8020bf2:	4618      	mov	r0, r3
 8020bf4:	3714      	adds	r7, #20
 8020bf6:	46bd      	mov	sp, r7
 8020bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bfc:	4770      	bx	lr

08020bfe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8020bfe:	b580      	push	{r7, lr}
 8020c00:	b084      	sub	sp, #16
 8020c02:	af00      	add	r7, sp, #0
 8020c04:	60f8      	str	r0, [r7, #12]
 8020c06:	60b9      	str	r1, [r7, #8]
 8020c08:	4613      	mov	r3, r2
 8020c0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8020c0c:	68fb      	ldr	r3, [r7, #12]
 8020c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8020c12:	b2db      	uxtb	r3, r3
 8020c14:	2b20      	cmp	r3, #32
 8020c16:	d11d      	bne.n	8020c54 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8020c18:	68bb      	ldr	r3, [r7, #8]
 8020c1a:	2b00      	cmp	r3, #0
 8020c1c:	d002      	beq.n	8020c24 <HAL_UART_Receive_IT+0x26>
 8020c1e:	88fb      	ldrh	r3, [r7, #6]
 8020c20:	2b00      	cmp	r3, #0
 8020c22:	d101      	bne.n	8020c28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8020c24:	2301      	movs	r3, #1
 8020c26:	e016      	b.n	8020c56 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8020c28:	68fb      	ldr	r3, [r7, #12]
 8020c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020c2e:	2b01      	cmp	r3, #1
 8020c30:	d101      	bne.n	8020c36 <HAL_UART_Receive_IT+0x38>
 8020c32:	2302      	movs	r3, #2
 8020c34:	e00f      	b.n	8020c56 <HAL_UART_Receive_IT+0x58>
 8020c36:	68fb      	ldr	r3, [r7, #12]
 8020c38:	2201      	movs	r2, #1
 8020c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020c3e:	68fb      	ldr	r3, [r7, #12]
 8020c40:	2200      	movs	r2, #0
 8020c42:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8020c44:	88fb      	ldrh	r3, [r7, #6]
 8020c46:	461a      	mov	r2, r3
 8020c48:	68b9      	ldr	r1, [r7, #8]
 8020c4a:	68f8      	ldr	r0, [r7, #12]
 8020c4c:	f000 fbca 	bl	80213e4 <UART_Start_Receive_IT>
 8020c50:	4603      	mov	r3, r0
 8020c52:	e000      	b.n	8020c56 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8020c54:	2302      	movs	r3, #2
  }
}
 8020c56:	4618      	mov	r0, r3
 8020c58:	3710      	adds	r7, #16
 8020c5a:	46bd      	mov	sp, r7
 8020c5c:	bd80      	pop	{r7, pc}
	...

08020c60 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8020c60:	b580      	push	{r7, lr}
 8020c62:	b0a2      	sub	sp, #136	; 0x88
 8020c64:	af00      	add	r7, sp, #0
 8020c66:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8020c68:	2301      	movs	r3, #1
 8020c6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8020c6e:	687b      	ldr	r3, [r7, #4]
 8020c70:	681b      	ldr	r3, [r3, #0]
 8020c72:	330c      	adds	r3, #12
 8020c74:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020c76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8020c78:	e853 3f00 	ldrex	r3, [r3]
 8020c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8020c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020c80:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8020c84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8020c88:	687b      	ldr	r3, [r7, #4]
 8020c8a:	681b      	ldr	r3, [r3, #0]
 8020c8c:	330c      	adds	r3, #12
 8020c8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8020c92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8020c94:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020c96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8020c98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8020c9a:	e841 2300 	strex	r3, r2, [r1]
 8020c9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8020ca0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8020ca2:	2b00      	cmp	r3, #0
 8020ca4:	d1e3      	bne.n	8020c6e <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020ca6:	687b      	ldr	r3, [r7, #4]
 8020ca8:	681b      	ldr	r3, [r3, #0]
 8020caa:	3314      	adds	r3, #20
 8020cac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020cb0:	e853 3f00 	ldrex	r3, [r3]
 8020cb4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8020cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020cb8:	f023 0301 	bic.w	r3, r3, #1
 8020cbc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8020cbe:	687b      	ldr	r3, [r7, #4]
 8020cc0:	681b      	ldr	r3, [r3, #0]
 8020cc2:	3314      	adds	r3, #20
 8020cc4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8020cc6:	65ba      	str	r2, [r7, #88]	; 0x58
 8020cc8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020cca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8020ccc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8020cce:	e841 2300 	strex	r3, r2, [r1]
 8020cd2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8020cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020cd6:	2b00      	cmp	r3, #0
 8020cd8:	d1e5      	bne.n	8020ca6 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8020cda:	687b      	ldr	r3, [r7, #4]
 8020cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cde:	2b01      	cmp	r3, #1
 8020ce0:	d119      	bne.n	8020d16 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8020ce2:	687b      	ldr	r3, [r7, #4]
 8020ce4:	681b      	ldr	r3, [r3, #0]
 8020ce6:	330c      	adds	r3, #12
 8020ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020cec:	e853 3f00 	ldrex	r3, [r3]
 8020cf0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8020cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020cf4:	f023 0310 	bic.w	r3, r3, #16
 8020cf8:	67bb      	str	r3, [r7, #120]	; 0x78
 8020cfa:	687b      	ldr	r3, [r7, #4]
 8020cfc:	681b      	ldr	r3, [r3, #0]
 8020cfe:	330c      	adds	r3, #12
 8020d00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8020d02:	647a      	str	r2, [r7, #68]	; 0x44
 8020d04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020d06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8020d08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8020d0a:	e841 2300 	strex	r3, r2, [r1]
 8020d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8020d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020d12:	2b00      	cmp	r3, #0
 8020d14:	d1e5      	bne.n	8020ce2 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8020d16:	687b      	ldr	r3, [r7, #4]
 8020d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020d1a:	2b00      	cmp	r3, #0
 8020d1c:	d00f      	beq.n	8020d3e <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8020d1e:	687b      	ldr	r3, [r7, #4]
 8020d20:	681b      	ldr	r3, [r3, #0]
 8020d22:	695b      	ldr	r3, [r3, #20]
 8020d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020d28:	2b80      	cmp	r3, #128	; 0x80
 8020d2a:	d104      	bne.n	8020d36 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8020d2c:	687b      	ldr	r3, [r7, #4]
 8020d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020d30:	4a53      	ldr	r2, [pc, #332]	; (8020e80 <HAL_UART_Abort_IT+0x220>)
 8020d32:	651a      	str	r2, [r3, #80]	; 0x50
 8020d34:	e003      	b.n	8020d3e <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8020d36:	687b      	ldr	r3, [r7, #4]
 8020d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020d3a:	2200      	movs	r2, #0
 8020d3c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8020d3e:	687b      	ldr	r3, [r7, #4]
 8020d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020d42:	2b00      	cmp	r3, #0
 8020d44:	d00f      	beq.n	8020d66 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8020d46:	687b      	ldr	r3, [r7, #4]
 8020d48:	681b      	ldr	r3, [r3, #0]
 8020d4a:	695b      	ldr	r3, [r3, #20]
 8020d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020d50:	2b40      	cmp	r3, #64	; 0x40
 8020d52:	d104      	bne.n	8020d5e <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8020d54:	687b      	ldr	r3, [r7, #4]
 8020d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020d58:	4a4a      	ldr	r2, [pc, #296]	; (8020e84 <HAL_UART_Abort_IT+0x224>)
 8020d5a:	651a      	str	r2, [r3, #80]	; 0x50
 8020d5c:	e003      	b.n	8020d66 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8020d5e:	687b      	ldr	r3, [r7, #4]
 8020d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020d62:	2200      	movs	r2, #0
 8020d64:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8020d66:	687b      	ldr	r3, [r7, #4]
 8020d68:	681b      	ldr	r3, [r3, #0]
 8020d6a:	695b      	ldr	r3, [r3, #20]
 8020d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020d70:	2b80      	cmp	r3, #128	; 0x80
 8020d72:	d12d      	bne.n	8020dd0 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8020d74:	687b      	ldr	r3, [r7, #4]
 8020d76:	681b      	ldr	r3, [r3, #0]
 8020d78:	3314      	adds	r3, #20
 8020d7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d7e:	e853 3f00 	ldrex	r3, [r3]
 8020d82:	623b      	str	r3, [r7, #32]
   return(result);
 8020d84:	6a3b      	ldr	r3, [r7, #32]
 8020d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8020d8a:	677b      	str	r3, [r7, #116]	; 0x74
 8020d8c:	687b      	ldr	r3, [r7, #4]
 8020d8e:	681b      	ldr	r3, [r3, #0]
 8020d90:	3314      	adds	r3, #20
 8020d92:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8020d94:	633a      	str	r2, [r7, #48]	; 0x30
 8020d96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020d98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020d9c:	e841 2300 	strex	r3, r2, [r1]
 8020da0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8020da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020da4:	2b00      	cmp	r3, #0
 8020da6:	d1e5      	bne.n	8020d74 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8020da8:	687b      	ldr	r3, [r7, #4]
 8020daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020dac:	2b00      	cmp	r3, #0
 8020dae:	d00f      	beq.n	8020dd0 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8020db0:	687b      	ldr	r3, [r7, #4]
 8020db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020db4:	4618      	mov	r0, r3
 8020db6:	f7fa fcdf 	bl	801b778 <HAL_DMA_Abort_IT>
 8020dba:	4603      	mov	r3, r0
 8020dbc:	2b00      	cmp	r3, #0
 8020dbe:	d004      	beq.n	8020dca <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8020dc0:	687b      	ldr	r3, [r7, #4]
 8020dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020dc4:	2200      	movs	r2, #0
 8020dc6:	651a      	str	r2, [r3, #80]	; 0x50
 8020dc8:	e002      	b.n	8020dd0 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8020dca:	2300      	movs	r3, #0
 8020dcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8020dd0:	687b      	ldr	r3, [r7, #4]
 8020dd2:	681b      	ldr	r3, [r3, #0]
 8020dd4:	695b      	ldr	r3, [r3, #20]
 8020dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020dda:	2b40      	cmp	r3, #64	; 0x40
 8020ddc:	d130      	bne.n	8020e40 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8020dde:	687b      	ldr	r3, [r7, #4]
 8020de0:	681b      	ldr	r3, [r3, #0]
 8020de2:	3314      	adds	r3, #20
 8020de4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020de6:	693b      	ldr	r3, [r7, #16]
 8020de8:	e853 3f00 	ldrex	r3, [r3]
 8020dec:	60fb      	str	r3, [r7, #12]
   return(result);
 8020dee:	68fb      	ldr	r3, [r7, #12]
 8020df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8020df4:	673b      	str	r3, [r7, #112]	; 0x70
 8020df6:	687b      	ldr	r3, [r7, #4]
 8020df8:	681b      	ldr	r3, [r3, #0]
 8020dfa:	3314      	adds	r3, #20
 8020dfc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8020dfe:	61fa      	str	r2, [r7, #28]
 8020e00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020e02:	69b9      	ldr	r1, [r7, #24]
 8020e04:	69fa      	ldr	r2, [r7, #28]
 8020e06:	e841 2300 	strex	r3, r2, [r1]
 8020e0a:	617b      	str	r3, [r7, #20]
   return(result);
 8020e0c:	697b      	ldr	r3, [r7, #20]
 8020e0e:	2b00      	cmp	r3, #0
 8020e10:	d1e5      	bne.n	8020dde <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8020e12:	687b      	ldr	r3, [r7, #4]
 8020e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020e16:	2b00      	cmp	r3, #0
 8020e18:	d012      	beq.n	8020e40 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8020e1a:	687b      	ldr	r3, [r7, #4]
 8020e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020e1e:	4618      	mov	r0, r3
 8020e20:	f7fa fcaa 	bl	801b778 <HAL_DMA_Abort_IT>
 8020e24:	4603      	mov	r3, r0
 8020e26:	2b00      	cmp	r3, #0
 8020e28:	d007      	beq.n	8020e3a <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8020e2a:	687b      	ldr	r3, [r7, #4]
 8020e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020e2e:	2200      	movs	r2, #0
 8020e30:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8020e32:	2301      	movs	r3, #1
 8020e34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8020e38:	e002      	b.n	8020e40 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8020e3a:	2300      	movs	r3, #0
 8020e3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8020e40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8020e44:	2b01      	cmp	r3, #1
 8020e46:	d116      	bne.n	8020e76 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8020e48:	687b      	ldr	r3, [r7, #4]
 8020e4a:	2200      	movs	r2, #0
 8020e4c:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8020e4e:	687b      	ldr	r3, [r7, #4]
 8020e50:	2200      	movs	r2, #0
 8020e52:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020e54:	687b      	ldr	r3, [r7, #4]
 8020e56:	2200      	movs	r2, #0
 8020e58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8020e5a:	687b      	ldr	r3, [r7, #4]
 8020e5c:	2220      	movs	r2, #32
 8020e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8020e62:	687b      	ldr	r3, [r7, #4]
 8020e64:	2220      	movs	r2, #32
 8020e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020e6a:	687b      	ldr	r3, [r7, #4]
 8020e6c:	2200      	movs	r2, #0
 8020e6e:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8020e70:	6878      	ldr	r0, [r7, #4]
 8020e72:	f000 faa1 	bl	80213b8 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8020e76:	2300      	movs	r3, #0
}
 8020e78:	4618      	mov	r0, r3
 8020e7a:	3788      	adds	r7, #136	; 0x88
 8020e7c:	46bd      	mov	sp, r7
 8020e7e:	bd80      	pop	{r7, pc}
 8020e80:	0802154f 	.word	0x0802154f
 8020e84:	080215af 	.word	0x080215af

08020e88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8020e88:	b580      	push	{r7, lr}
 8020e8a:	b0ba      	sub	sp, #232	; 0xe8
 8020e8c:	af00      	add	r7, sp, #0
 8020e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8020e90:	687b      	ldr	r3, [r7, #4]
 8020e92:	681b      	ldr	r3, [r3, #0]
 8020e94:	681b      	ldr	r3, [r3, #0]
 8020e96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8020e9a:	687b      	ldr	r3, [r7, #4]
 8020e9c:	681b      	ldr	r3, [r3, #0]
 8020e9e:	68db      	ldr	r3, [r3, #12]
 8020ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8020ea4:	687b      	ldr	r3, [r7, #4]
 8020ea6:	681b      	ldr	r3, [r3, #0]
 8020ea8:	695b      	ldr	r3, [r3, #20]
 8020eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8020eae:	2300      	movs	r3, #0
 8020eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8020eb4:	2300      	movs	r3, #0
 8020eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8020eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020ebe:	f003 030f 	and.w	r3, r3, #15
 8020ec2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8020ec6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8020eca:	2b00      	cmp	r3, #0
 8020ecc:	d10f      	bne.n	8020eee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8020ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020ed2:	f003 0320 	and.w	r3, r3, #32
 8020ed6:	2b00      	cmp	r3, #0
 8020ed8:	d009      	beq.n	8020eee <HAL_UART_IRQHandler+0x66>
 8020eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8020ede:	f003 0320 	and.w	r3, r3, #32
 8020ee2:	2b00      	cmp	r3, #0
 8020ee4:	d003      	beq.n	8020eee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8020ee6:	6878      	ldr	r0, [r7, #4]
 8020ee8:	f000 fbf9 	bl	80216de <UART_Receive_IT>
      return;
 8020eec:	e256      	b.n	802139c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8020eee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8020ef2:	2b00      	cmp	r3, #0
 8020ef4:	f000 80de 	beq.w	80210b4 <HAL_UART_IRQHandler+0x22c>
 8020ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8020efc:	f003 0301 	and.w	r3, r3, #1
 8020f00:	2b00      	cmp	r3, #0
 8020f02:	d106      	bne.n	8020f12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8020f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8020f08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8020f0c:	2b00      	cmp	r3, #0
 8020f0e:	f000 80d1 	beq.w	80210b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8020f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020f16:	f003 0301 	and.w	r3, r3, #1
 8020f1a:	2b00      	cmp	r3, #0
 8020f1c:	d00b      	beq.n	8020f36 <HAL_UART_IRQHandler+0xae>
 8020f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8020f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020f26:	2b00      	cmp	r3, #0
 8020f28:	d005      	beq.n	8020f36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8020f2a:	687b      	ldr	r3, [r7, #4]
 8020f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020f2e:	f043 0201 	orr.w	r2, r3, #1
 8020f32:	687b      	ldr	r3, [r7, #4]
 8020f34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8020f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020f3a:	f003 0304 	and.w	r3, r3, #4
 8020f3e:	2b00      	cmp	r3, #0
 8020f40:	d00b      	beq.n	8020f5a <HAL_UART_IRQHandler+0xd2>
 8020f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8020f46:	f003 0301 	and.w	r3, r3, #1
 8020f4a:	2b00      	cmp	r3, #0
 8020f4c:	d005      	beq.n	8020f5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8020f4e:	687b      	ldr	r3, [r7, #4]
 8020f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020f52:	f043 0202 	orr.w	r2, r3, #2
 8020f56:	687b      	ldr	r3, [r7, #4]
 8020f58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8020f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020f5e:	f003 0302 	and.w	r3, r3, #2
 8020f62:	2b00      	cmp	r3, #0
 8020f64:	d00b      	beq.n	8020f7e <HAL_UART_IRQHandler+0xf6>
 8020f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8020f6a:	f003 0301 	and.w	r3, r3, #1
 8020f6e:	2b00      	cmp	r3, #0
 8020f70:	d005      	beq.n	8020f7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8020f72:	687b      	ldr	r3, [r7, #4]
 8020f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020f76:	f043 0204 	orr.w	r2, r3, #4
 8020f7a:	687b      	ldr	r3, [r7, #4]
 8020f7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8020f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020f82:	f003 0308 	and.w	r3, r3, #8
 8020f86:	2b00      	cmp	r3, #0
 8020f88:	d011      	beq.n	8020fae <HAL_UART_IRQHandler+0x126>
 8020f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8020f8e:	f003 0320 	and.w	r3, r3, #32
 8020f92:	2b00      	cmp	r3, #0
 8020f94:	d105      	bne.n	8020fa2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8020f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8020f9a:	f003 0301 	and.w	r3, r3, #1
 8020f9e:	2b00      	cmp	r3, #0
 8020fa0:	d005      	beq.n	8020fae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8020fa2:	687b      	ldr	r3, [r7, #4]
 8020fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020fa6:	f043 0208 	orr.w	r2, r3, #8
 8020faa:	687b      	ldr	r3, [r7, #4]
 8020fac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8020fae:	687b      	ldr	r3, [r7, #4]
 8020fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020fb2:	2b00      	cmp	r3, #0
 8020fb4:	f000 81ed 	beq.w	8021392 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8020fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020fbc:	f003 0320 	and.w	r3, r3, #32
 8020fc0:	2b00      	cmp	r3, #0
 8020fc2:	d008      	beq.n	8020fd6 <HAL_UART_IRQHandler+0x14e>
 8020fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8020fc8:	f003 0320 	and.w	r3, r3, #32
 8020fcc:	2b00      	cmp	r3, #0
 8020fce:	d002      	beq.n	8020fd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8020fd0:	6878      	ldr	r0, [r7, #4]
 8020fd2:	f000 fb84 	bl	80216de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8020fd6:	687b      	ldr	r3, [r7, #4]
 8020fd8:	681b      	ldr	r3, [r3, #0]
 8020fda:	695b      	ldr	r3, [r3, #20]
 8020fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020fe0:	2b40      	cmp	r3, #64	; 0x40
 8020fe2:	bf0c      	ite	eq
 8020fe4:	2301      	moveq	r3, #1
 8020fe6:	2300      	movne	r3, #0
 8020fe8:	b2db      	uxtb	r3, r3
 8020fea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8020fee:	687b      	ldr	r3, [r7, #4]
 8020ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020ff2:	f003 0308 	and.w	r3, r3, #8
 8020ff6:	2b00      	cmp	r3, #0
 8020ff8:	d103      	bne.n	8021002 <HAL_UART_IRQHandler+0x17a>
 8020ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8020ffe:	2b00      	cmp	r3, #0
 8021000:	d04f      	beq.n	80210a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8021002:	6878      	ldr	r0, [r7, #4]
 8021004:	f000 fa2c 	bl	8021460 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021008:	687b      	ldr	r3, [r7, #4]
 802100a:	681b      	ldr	r3, [r3, #0]
 802100c:	695b      	ldr	r3, [r3, #20]
 802100e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021012:	2b40      	cmp	r3, #64	; 0x40
 8021014:	d141      	bne.n	802109a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8021016:	687b      	ldr	r3, [r7, #4]
 8021018:	681b      	ldr	r3, [r3, #0]
 802101a:	3314      	adds	r3, #20
 802101c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021020:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8021024:	e853 3f00 	ldrex	r3, [r3]
 8021028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 802102c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8021030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8021034:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8021038:	687b      	ldr	r3, [r7, #4]
 802103a:	681b      	ldr	r3, [r3, #0]
 802103c:	3314      	adds	r3, #20
 802103e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8021042:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8021046:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802104a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 802104e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8021052:	e841 2300 	strex	r3, r2, [r1]
 8021056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 802105a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802105e:	2b00      	cmp	r3, #0
 8021060:	d1d9      	bne.n	8021016 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8021062:	687b      	ldr	r3, [r7, #4]
 8021064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021066:	2b00      	cmp	r3, #0
 8021068:	d013      	beq.n	8021092 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 802106a:	687b      	ldr	r3, [r7, #4]
 802106c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802106e:	4a7d      	ldr	r2, [pc, #500]	; (8021264 <HAL_UART_IRQHandler+0x3dc>)
 8021070:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8021072:	687b      	ldr	r3, [r7, #4]
 8021074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021076:	4618      	mov	r0, r3
 8021078:	f7fa fb7e 	bl	801b778 <HAL_DMA_Abort_IT>
 802107c:	4603      	mov	r3, r0
 802107e:	2b00      	cmp	r3, #0
 8021080:	d016      	beq.n	80210b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8021082:	687b      	ldr	r3, [r7, #4]
 8021084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021088:	687a      	ldr	r2, [r7, #4]
 802108a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 802108c:	4610      	mov	r0, r2
 802108e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021090:	e00e      	b.n	80210b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8021092:	6878      	ldr	r0, [r7, #4]
 8021094:	f000 f986 	bl	80213a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021098:	e00a      	b.n	80210b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802109a:	6878      	ldr	r0, [r7, #4]
 802109c:	f000 f982 	bl	80213a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80210a0:	e006      	b.n	80210b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80210a2:	6878      	ldr	r0, [r7, #4]
 80210a4:	f000 f97e 	bl	80213a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80210a8:	687b      	ldr	r3, [r7, #4]
 80210aa:	2200      	movs	r2, #0
 80210ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80210ae:	e170      	b.n	8021392 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80210b0:	bf00      	nop
    return;
 80210b2:	e16e      	b.n	8021392 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80210b4:	687b      	ldr	r3, [r7, #4]
 80210b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80210b8:	2b01      	cmp	r3, #1
 80210ba:	f040 814a 	bne.w	8021352 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80210be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80210c2:	f003 0310 	and.w	r3, r3, #16
 80210c6:	2b00      	cmp	r3, #0
 80210c8:	f000 8143 	beq.w	8021352 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80210cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80210d0:	f003 0310 	and.w	r3, r3, #16
 80210d4:	2b00      	cmp	r3, #0
 80210d6:	f000 813c 	beq.w	8021352 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80210da:	2300      	movs	r3, #0
 80210dc:	60bb      	str	r3, [r7, #8]
 80210de:	687b      	ldr	r3, [r7, #4]
 80210e0:	681b      	ldr	r3, [r3, #0]
 80210e2:	681b      	ldr	r3, [r3, #0]
 80210e4:	60bb      	str	r3, [r7, #8]
 80210e6:	687b      	ldr	r3, [r7, #4]
 80210e8:	681b      	ldr	r3, [r3, #0]
 80210ea:	685b      	ldr	r3, [r3, #4]
 80210ec:	60bb      	str	r3, [r7, #8]
 80210ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80210f0:	687b      	ldr	r3, [r7, #4]
 80210f2:	681b      	ldr	r3, [r3, #0]
 80210f4:	695b      	ldr	r3, [r3, #20]
 80210f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80210fa:	2b40      	cmp	r3, #64	; 0x40
 80210fc:	f040 80b4 	bne.w	8021268 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8021100:	687b      	ldr	r3, [r7, #4]
 8021102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021104:	681b      	ldr	r3, [r3, #0]
 8021106:	685b      	ldr	r3, [r3, #4]
 8021108:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 802110c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8021110:	2b00      	cmp	r3, #0
 8021112:	f000 8140 	beq.w	8021396 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8021116:	687b      	ldr	r3, [r7, #4]
 8021118:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802111a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802111e:	429a      	cmp	r2, r3
 8021120:	f080 8139 	bcs.w	8021396 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8021124:	687b      	ldr	r3, [r7, #4]
 8021126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802112a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 802112c:	687b      	ldr	r3, [r7, #4]
 802112e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021130:	69db      	ldr	r3, [r3, #28]
 8021132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021136:	f000 8088 	beq.w	802124a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802113a:	687b      	ldr	r3, [r7, #4]
 802113c:	681b      	ldr	r3, [r3, #0]
 802113e:	330c      	adds	r3, #12
 8021140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021144:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021148:	e853 3f00 	ldrex	r3, [r3]
 802114c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8021150:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8021154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8021158:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802115c:	687b      	ldr	r3, [r7, #4]
 802115e:	681b      	ldr	r3, [r3, #0]
 8021160:	330c      	adds	r3, #12
 8021162:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8021166:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802116a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802116e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8021172:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8021176:	e841 2300 	strex	r3, r2, [r1]
 802117a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 802117e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021182:	2b00      	cmp	r3, #0
 8021184:	d1d9      	bne.n	802113a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021186:	687b      	ldr	r3, [r7, #4]
 8021188:	681b      	ldr	r3, [r3, #0]
 802118a:	3314      	adds	r3, #20
 802118c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802118e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021190:	e853 3f00 	ldrex	r3, [r3]
 8021194:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8021196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021198:	f023 0301 	bic.w	r3, r3, #1
 802119c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80211a0:	687b      	ldr	r3, [r7, #4]
 80211a2:	681b      	ldr	r3, [r3, #0]
 80211a4:	3314      	adds	r3, #20
 80211a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80211aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80211ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80211b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80211b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80211b6:	e841 2300 	strex	r3, r2, [r1]
 80211ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80211bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80211be:	2b00      	cmp	r3, #0
 80211c0:	d1e1      	bne.n	8021186 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80211c2:	687b      	ldr	r3, [r7, #4]
 80211c4:	681b      	ldr	r3, [r3, #0]
 80211c6:	3314      	adds	r3, #20
 80211c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80211ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80211cc:	e853 3f00 	ldrex	r3, [r3]
 80211d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80211d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80211d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80211d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80211dc:	687b      	ldr	r3, [r7, #4]
 80211de:	681b      	ldr	r3, [r3, #0]
 80211e0:	3314      	adds	r3, #20
 80211e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80211e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80211e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80211ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80211ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80211ee:	e841 2300 	strex	r3, r2, [r1]
 80211f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80211f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80211f6:	2b00      	cmp	r3, #0
 80211f8:	d1e3      	bne.n	80211c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80211fa:	687b      	ldr	r3, [r7, #4]
 80211fc:	2220      	movs	r2, #32
 80211fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021202:	687b      	ldr	r3, [r7, #4]
 8021204:	2200      	movs	r2, #0
 8021206:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021208:	687b      	ldr	r3, [r7, #4]
 802120a:	681b      	ldr	r3, [r3, #0]
 802120c:	330c      	adds	r3, #12
 802120e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021212:	e853 3f00 	ldrex	r3, [r3]
 8021216:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8021218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802121a:	f023 0310 	bic.w	r3, r3, #16
 802121e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8021222:	687b      	ldr	r3, [r7, #4]
 8021224:	681b      	ldr	r3, [r3, #0]
 8021226:	330c      	adds	r3, #12
 8021228:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 802122c:	65ba      	str	r2, [r7, #88]	; 0x58
 802122e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021230:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8021232:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8021234:	e841 2300 	strex	r3, r2, [r1]
 8021238:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 802123a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802123c:	2b00      	cmp	r3, #0
 802123e:	d1e3      	bne.n	8021208 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8021240:	687b      	ldr	r3, [r7, #4]
 8021242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021244:	4618      	mov	r0, r3
 8021246:	f7fa fa27 	bl	801b698 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 802124a:	687b      	ldr	r3, [r7, #4]
 802124c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 802124e:	687b      	ldr	r3, [r7, #4]
 8021250:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8021252:	b29b      	uxth	r3, r3
 8021254:	1ad3      	subs	r3, r2, r3
 8021256:	b29b      	uxth	r3, r3
 8021258:	4619      	mov	r1, r3
 802125a:	6878      	ldr	r0, [r7, #4]
 802125c:	f000 f8b6 	bl	80213cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8021260:	e099      	b.n	8021396 <HAL_UART_IRQHandler+0x50e>
 8021262:	bf00      	nop
 8021264:	08021527 	.word	0x08021527
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8021268:	687b      	ldr	r3, [r7, #4]
 802126a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 802126c:	687b      	ldr	r3, [r7, #4]
 802126e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8021270:	b29b      	uxth	r3, r3
 8021272:	1ad3      	subs	r3, r2, r3
 8021274:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8021278:	687b      	ldr	r3, [r7, #4]
 802127a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802127c:	b29b      	uxth	r3, r3
 802127e:	2b00      	cmp	r3, #0
 8021280:	f000 808b 	beq.w	802139a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8021284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8021288:	2b00      	cmp	r3, #0
 802128a:	f000 8086 	beq.w	802139a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802128e:	687b      	ldr	r3, [r7, #4]
 8021290:	681b      	ldr	r3, [r3, #0]
 8021292:	330c      	adds	r3, #12
 8021294:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021298:	e853 3f00 	ldrex	r3, [r3]
 802129c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 802129e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80212a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80212a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80212a8:	687b      	ldr	r3, [r7, #4]
 80212aa:	681b      	ldr	r3, [r3, #0]
 80212ac:	330c      	adds	r3, #12
 80212ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80212b2:	647a      	str	r2, [r7, #68]	; 0x44
 80212b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80212b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80212b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80212ba:	e841 2300 	strex	r3, r2, [r1]
 80212be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80212c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80212c2:	2b00      	cmp	r3, #0
 80212c4:	d1e3      	bne.n	802128e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80212c6:	687b      	ldr	r3, [r7, #4]
 80212c8:	681b      	ldr	r3, [r3, #0]
 80212ca:	3314      	adds	r3, #20
 80212cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80212ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80212d0:	e853 3f00 	ldrex	r3, [r3]
 80212d4:	623b      	str	r3, [r7, #32]
   return(result);
 80212d6:	6a3b      	ldr	r3, [r7, #32]
 80212d8:	f023 0301 	bic.w	r3, r3, #1
 80212dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80212e0:	687b      	ldr	r3, [r7, #4]
 80212e2:	681b      	ldr	r3, [r3, #0]
 80212e4:	3314      	adds	r3, #20
 80212e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80212ea:	633a      	str	r2, [r7, #48]	; 0x30
 80212ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80212ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80212f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80212f2:	e841 2300 	strex	r3, r2, [r1]
 80212f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80212f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80212fa:	2b00      	cmp	r3, #0
 80212fc:	d1e3      	bne.n	80212c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80212fe:	687b      	ldr	r3, [r7, #4]
 8021300:	2220      	movs	r2, #32
 8021302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021306:	687b      	ldr	r3, [r7, #4]
 8021308:	2200      	movs	r2, #0
 802130a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802130c:	687b      	ldr	r3, [r7, #4]
 802130e:	681b      	ldr	r3, [r3, #0]
 8021310:	330c      	adds	r3, #12
 8021312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021314:	693b      	ldr	r3, [r7, #16]
 8021316:	e853 3f00 	ldrex	r3, [r3]
 802131a:	60fb      	str	r3, [r7, #12]
   return(result);
 802131c:	68fb      	ldr	r3, [r7, #12]
 802131e:	f023 0310 	bic.w	r3, r3, #16
 8021322:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8021326:	687b      	ldr	r3, [r7, #4]
 8021328:	681b      	ldr	r3, [r3, #0]
 802132a:	330c      	adds	r3, #12
 802132c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8021330:	61fa      	str	r2, [r7, #28]
 8021332:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021334:	69b9      	ldr	r1, [r7, #24]
 8021336:	69fa      	ldr	r2, [r7, #28]
 8021338:	e841 2300 	strex	r3, r2, [r1]
 802133c:	617b      	str	r3, [r7, #20]
   return(result);
 802133e:	697b      	ldr	r3, [r7, #20]
 8021340:	2b00      	cmp	r3, #0
 8021342:	d1e3      	bne.n	802130c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8021344:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8021348:	4619      	mov	r1, r3
 802134a:	6878      	ldr	r0, [r7, #4]
 802134c:	f000 f83e 	bl	80213cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8021350:	e023      	b.n	802139a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8021352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802135a:	2b00      	cmp	r3, #0
 802135c:	d009      	beq.n	8021372 <HAL_UART_IRQHandler+0x4ea>
 802135e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8021362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021366:	2b00      	cmp	r3, #0
 8021368:	d003      	beq.n	8021372 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 802136a:	6878      	ldr	r0, [r7, #4]
 802136c:	f000 f94f 	bl	802160e <UART_Transmit_IT>
    return;
 8021370:	e014      	b.n	802139c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8021372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802137a:	2b00      	cmp	r3, #0
 802137c:	d00e      	beq.n	802139c <HAL_UART_IRQHandler+0x514>
 802137e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8021382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021386:	2b00      	cmp	r3, #0
 8021388:	d008      	beq.n	802139c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 802138a:	6878      	ldr	r0, [r7, #4]
 802138c:	f000 f98f 	bl	80216ae <UART_EndTransmit_IT>
    return;
 8021390:	e004      	b.n	802139c <HAL_UART_IRQHandler+0x514>
    return;
 8021392:	bf00      	nop
 8021394:	e002      	b.n	802139c <HAL_UART_IRQHandler+0x514>
      return;
 8021396:	bf00      	nop
 8021398:	e000      	b.n	802139c <HAL_UART_IRQHandler+0x514>
      return;
 802139a:	bf00      	nop
  }
}
 802139c:	37e8      	adds	r7, #232	; 0xe8
 802139e:	46bd      	mov	sp, r7
 80213a0:	bd80      	pop	{r7, pc}
 80213a2:	bf00      	nop

080213a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80213a4:	b480      	push	{r7}
 80213a6:	b083      	sub	sp, #12
 80213a8:	af00      	add	r7, sp, #0
 80213aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80213ac:	bf00      	nop
 80213ae:	370c      	adds	r7, #12
 80213b0:	46bd      	mov	sp, r7
 80213b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213b6:	4770      	bx	lr

080213b8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80213b8:	b480      	push	{r7}
 80213ba:	b083      	sub	sp, #12
 80213bc:	af00      	add	r7, sp, #0
 80213be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80213c0:	bf00      	nop
 80213c2:	370c      	adds	r7, #12
 80213c4:	46bd      	mov	sp, r7
 80213c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213ca:	4770      	bx	lr

080213cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80213cc:	b480      	push	{r7}
 80213ce:	b083      	sub	sp, #12
 80213d0:	af00      	add	r7, sp, #0
 80213d2:	6078      	str	r0, [r7, #4]
 80213d4:	460b      	mov	r3, r1
 80213d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80213d8:	bf00      	nop
 80213da:	370c      	adds	r7, #12
 80213dc:	46bd      	mov	sp, r7
 80213de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213e2:	4770      	bx	lr

080213e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80213e4:	b480      	push	{r7}
 80213e6:	b085      	sub	sp, #20
 80213e8:	af00      	add	r7, sp, #0
 80213ea:	60f8      	str	r0, [r7, #12]
 80213ec:	60b9      	str	r1, [r7, #8]
 80213ee:	4613      	mov	r3, r2
 80213f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80213f2:	68fb      	ldr	r3, [r7, #12]
 80213f4:	68ba      	ldr	r2, [r7, #8]
 80213f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80213f8:	68fb      	ldr	r3, [r7, #12]
 80213fa:	88fa      	ldrh	r2, [r7, #6]
 80213fc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80213fe:	68fb      	ldr	r3, [r7, #12]
 8021400:	88fa      	ldrh	r2, [r7, #6]
 8021402:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021404:	68fb      	ldr	r3, [r7, #12]
 8021406:	2200      	movs	r2, #0
 8021408:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 802140a:	68fb      	ldr	r3, [r7, #12]
 802140c:	2222      	movs	r2, #34	; 0x22
 802140e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8021412:	68fb      	ldr	r3, [r7, #12]
 8021414:	2200      	movs	r2, #0
 8021416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 802141a:	68fb      	ldr	r3, [r7, #12]
 802141c:	691b      	ldr	r3, [r3, #16]
 802141e:	2b00      	cmp	r3, #0
 8021420:	d007      	beq.n	8021432 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8021422:	68fb      	ldr	r3, [r7, #12]
 8021424:	681b      	ldr	r3, [r3, #0]
 8021426:	68da      	ldr	r2, [r3, #12]
 8021428:	68fb      	ldr	r3, [r7, #12]
 802142a:	681b      	ldr	r3, [r3, #0]
 802142c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8021430:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8021432:	68fb      	ldr	r3, [r7, #12]
 8021434:	681b      	ldr	r3, [r3, #0]
 8021436:	695a      	ldr	r2, [r3, #20]
 8021438:	68fb      	ldr	r3, [r7, #12]
 802143a:	681b      	ldr	r3, [r3, #0]
 802143c:	f042 0201 	orr.w	r2, r2, #1
 8021440:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8021442:	68fb      	ldr	r3, [r7, #12]
 8021444:	681b      	ldr	r3, [r3, #0]
 8021446:	68da      	ldr	r2, [r3, #12]
 8021448:	68fb      	ldr	r3, [r7, #12]
 802144a:	681b      	ldr	r3, [r3, #0]
 802144c:	f042 0220 	orr.w	r2, r2, #32
 8021450:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8021452:	2300      	movs	r3, #0
}
 8021454:	4618      	mov	r0, r3
 8021456:	3714      	adds	r7, #20
 8021458:	46bd      	mov	sp, r7
 802145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802145e:	4770      	bx	lr

08021460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8021460:	b480      	push	{r7}
 8021462:	b095      	sub	sp, #84	; 0x54
 8021464:	af00      	add	r7, sp, #0
 8021466:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8021468:	687b      	ldr	r3, [r7, #4]
 802146a:	681b      	ldr	r3, [r3, #0]
 802146c:	330c      	adds	r3, #12
 802146e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021472:	e853 3f00 	ldrex	r3, [r3]
 8021476:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8021478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802147a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802147e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8021480:	687b      	ldr	r3, [r7, #4]
 8021482:	681b      	ldr	r3, [r3, #0]
 8021484:	330c      	adds	r3, #12
 8021486:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8021488:	643a      	str	r2, [r7, #64]	; 0x40
 802148a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802148c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802148e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021490:	e841 2300 	strex	r3, r2, [r1]
 8021494:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8021496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021498:	2b00      	cmp	r3, #0
 802149a:	d1e5      	bne.n	8021468 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802149c:	687b      	ldr	r3, [r7, #4]
 802149e:	681b      	ldr	r3, [r3, #0]
 80214a0:	3314      	adds	r3, #20
 80214a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80214a4:	6a3b      	ldr	r3, [r7, #32]
 80214a6:	e853 3f00 	ldrex	r3, [r3]
 80214aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80214ac:	69fb      	ldr	r3, [r7, #28]
 80214ae:	f023 0301 	bic.w	r3, r3, #1
 80214b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80214b4:	687b      	ldr	r3, [r7, #4]
 80214b6:	681b      	ldr	r3, [r3, #0]
 80214b8:	3314      	adds	r3, #20
 80214ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80214bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80214be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80214c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80214c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80214c4:	e841 2300 	strex	r3, r2, [r1]
 80214c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80214ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80214cc:	2b00      	cmp	r3, #0
 80214ce:	d1e5      	bne.n	802149c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80214d0:	687b      	ldr	r3, [r7, #4]
 80214d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214d4:	2b01      	cmp	r3, #1
 80214d6:	d119      	bne.n	802150c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80214d8:	687b      	ldr	r3, [r7, #4]
 80214da:	681b      	ldr	r3, [r3, #0]
 80214dc:	330c      	adds	r3, #12
 80214de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80214e0:	68fb      	ldr	r3, [r7, #12]
 80214e2:	e853 3f00 	ldrex	r3, [r3]
 80214e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80214e8:	68bb      	ldr	r3, [r7, #8]
 80214ea:	f023 0310 	bic.w	r3, r3, #16
 80214ee:	647b      	str	r3, [r7, #68]	; 0x44
 80214f0:	687b      	ldr	r3, [r7, #4]
 80214f2:	681b      	ldr	r3, [r3, #0]
 80214f4:	330c      	adds	r3, #12
 80214f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80214f8:	61ba      	str	r2, [r7, #24]
 80214fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80214fc:	6979      	ldr	r1, [r7, #20]
 80214fe:	69ba      	ldr	r2, [r7, #24]
 8021500:	e841 2300 	strex	r3, r2, [r1]
 8021504:	613b      	str	r3, [r7, #16]
   return(result);
 8021506:	693b      	ldr	r3, [r7, #16]
 8021508:	2b00      	cmp	r3, #0
 802150a:	d1e5      	bne.n	80214d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802150c:	687b      	ldr	r3, [r7, #4]
 802150e:	2220      	movs	r2, #32
 8021510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021514:	687b      	ldr	r3, [r7, #4]
 8021516:	2200      	movs	r2, #0
 8021518:	631a      	str	r2, [r3, #48]	; 0x30
}
 802151a:	bf00      	nop
 802151c:	3754      	adds	r7, #84	; 0x54
 802151e:	46bd      	mov	sp, r7
 8021520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021524:	4770      	bx	lr

08021526 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8021526:	b580      	push	{r7, lr}
 8021528:	b084      	sub	sp, #16
 802152a:	af00      	add	r7, sp, #0
 802152c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802152e:	687b      	ldr	r3, [r7, #4]
 8021530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021532:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8021534:	68fb      	ldr	r3, [r7, #12]
 8021536:	2200      	movs	r2, #0
 8021538:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 802153a:	68fb      	ldr	r3, [r7, #12]
 802153c:	2200      	movs	r2, #0
 802153e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8021540:	68f8      	ldr	r0, [r7, #12]
 8021542:	f7ff ff2f 	bl	80213a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8021546:	bf00      	nop
 8021548:	3710      	adds	r7, #16
 802154a:	46bd      	mov	sp, r7
 802154c:	bd80      	pop	{r7, pc}

0802154e <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 802154e:	b580      	push	{r7, lr}
 8021550:	b084      	sub	sp, #16
 8021552:	af00      	add	r7, sp, #0
 8021554:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8021556:	687b      	ldr	r3, [r7, #4]
 8021558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802155a:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 802155c:	68fb      	ldr	r3, [r7, #12]
 802155e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021560:	2200      	movs	r2, #0
 8021562:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8021564:	68fb      	ldr	r3, [r7, #12]
 8021566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021568:	2b00      	cmp	r3, #0
 802156a:	d004      	beq.n	8021576 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 802156c:	68fb      	ldr	r3, [r7, #12]
 802156e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021572:	2b00      	cmp	r3, #0
 8021574:	d117      	bne.n	80215a6 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8021576:	68fb      	ldr	r3, [r7, #12]
 8021578:	2200      	movs	r2, #0
 802157a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 802157c:	68fb      	ldr	r3, [r7, #12]
 802157e:	2200      	movs	r2, #0
 8021580:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021582:	68fb      	ldr	r3, [r7, #12]
 8021584:	2200      	movs	r2, #0
 8021586:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8021588:	68fb      	ldr	r3, [r7, #12]
 802158a:	2220      	movs	r2, #32
 802158c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8021590:	68fb      	ldr	r3, [r7, #12]
 8021592:	2220      	movs	r2, #32
 8021594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021598:	68fb      	ldr	r3, [r7, #12]
 802159a:	2200      	movs	r2, #0
 802159c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 802159e:	68f8      	ldr	r0, [r7, #12]
 80215a0:	f7ff ff0a 	bl	80213b8 <HAL_UART_AbortCpltCallback>
 80215a4:	e000      	b.n	80215a8 <UART_DMATxAbortCallback+0x5a>
      return;
 80215a6:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80215a8:	3710      	adds	r7, #16
 80215aa:	46bd      	mov	sp, r7
 80215ac:	bd80      	pop	{r7, pc}

080215ae <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80215ae:	b580      	push	{r7, lr}
 80215b0:	b084      	sub	sp, #16
 80215b2:	af00      	add	r7, sp, #0
 80215b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80215b6:	687b      	ldr	r3, [r7, #4]
 80215b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80215ba:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80215bc:	68fb      	ldr	r3, [r7, #12]
 80215be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80215c0:	2200      	movs	r2, #0
 80215c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80215c4:	68fb      	ldr	r3, [r7, #12]
 80215c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80215c8:	2b00      	cmp	r3, #0
 80215ca:	d004      	beq.n	80215d6 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80215cc:	68fb      	ldr	r3, [r7, #12]
 80215ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80215d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80215d2:	2b00      	cmp	r3, #0
 80215d4:	d117      	bne.n	8021606 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80215d6:	68fb      	ldr	r3, [r7, #12]
 80215d8:	2200      	movs	r2, #0
 80215da:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80215dc:	68fb      	ldr	r3, [r7, #12]
 80215de:	2200      	movs	r2, #0
 80215e0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80215e2:	68fb      	ldr	r3, [r7, #12]
 80215e4:	2200      	movs	r2, #0
 80215e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80215e8:	68fb      	ldr	r3, [r7, #12]
 80215ea:	2220      	movs	r2, #32
 80215ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80215f0:	68fb      	ldr	r3, [r7, #12]
 80215f2:	2220      	movs	r2, #32
 80215f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80215f8:	68fb      	ldr	r3, [r7, #12]
 80215fa:	2200      	movs	r2, #0
 80215fc:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80215fe:	68f8      	ldr	r0, [r7, #12]
 8021600:	f7ff feda 	bl	80213b8 <HAL_UART_AbortCpltCallback>
 8021604:	e000      	b.n	8021608 <UART_DMARxAbortCallback+0x5a>
      return;
 8021606:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8021608:	3710      	adds	r7, #16
 802160a:	46bd      	mov	sp, r7
 802160c:	bd80      	pop	{r7, pc}

0802160e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 802160e:	b480      	push	{r7}
 8021610:	b085      	sub	sp, #20
 8021612:	af00      	add	r7, sp, #0
 8021614:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8021616:	687b      	ldr	r3, [r7, #4]
 8021618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802161c:	b2db      	uxtb	r3, r3
 802161e:	2b21      	cmp	r3, #33	; 0x21
 8021620:	d13e      	bne.n	80216a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8021622:	687b      	ldr	r3, [r7, #4]
 8021624:	689b      	ldr	r3, [r3, #8]
 8021626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802162a:	d114      	bne.n	8021656 <UART_Transmit_IT+0x48>
 802162c:	687b      	ldr	r3, [r7, #4]
 802162e:	691b      	ldr	r3, [r3, #16]
 8021630:	2b00      	cmp	r3, #0
 8021632:	d110      	bne.n	8021656 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8021634:	687b      	ldr	r3, [r7, #4]
 8021636:	6a1b      	ldr	r3, [r3, #32]
 8021638:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 802163a:	68fb      	ldr	r3, [r7, #12]
 802163c:	881b      	ldrh	r3, [r3, #0]
 802163e:	461a      	mov	r2, r3
 8021640:	687b      	ldr	r3, [r7, #4]
 8021642:	681b      	ldr	r3, [r3, #0]
 8021644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8021648:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 802164a:	687b      	ldr	r3, [r7, #4]
 802164c:	6a1b      	ldr	r3, [r3, #32]
 802164e:	1c9a      	adds	r2, r3, #2
 8021650:	687b      	ldr	r3, [r7, #4]
 8021652:	621a      	str	r2, [r3, #32]
 8021654:	e008      	b.n	8021668 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8021656:	687b      	ldr	r3, [r7, #4]
 8021658:	6a1b      	ldr	r3, [r3, #32]
 802165a:	1c59      	adds	r1, r3, #1
 802165c:	687a      	ldr	r2, [r7, #4]
 802165e:	6211      	str	r1, [r2, #32]
 8021660:	781a      	ldrb	r2, [r3, #0]
 8021662:	687b      	ldr	r3, [r7, #4]
 8021664:	681b      	ldr	r3, [r3, #0]
 8021666:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8021668:	687b      	ldr	r3, [r7, #4]
 802166a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802166c:	b29b      	uxth	r3, r3
 802166e:	3b01      	subs	r3, #1
 8021670:	b29b      	uxth	r3, r3
 8021672:	687a      	ldr	r2, [r7, #4]
 8021674:	4619      	mov	r1, r3
 8021676:	84d1      	strh	r1, [r2, #38]	; 0x26
 8021678:	2b00      	cmp	r3, #0
 802167a:	d10f      	bne.n	802169c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 802167c:	687b      	ldr	r3, [r7, #4]
 802167e:	681b      	ldr	r3, [r3, #0]
 8021680:	68da      	ldr	r2, [r3, #12]
 8021682:	687b      	ldr	r3, [r7, #4]
 8021684:	681b      	ldr	r3, [r3, #0]
 8021686:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802168a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 802168c:	687b      	ldr	r3, [r7, #4]
 802168e:	681b      	ldr	r3, [r3, #0]
 8021690:	68da      	ldr	r2, [r3, #12]
 8021692:	687b      	ldr	r3, [r7, #4]
 8021694:	681b      	ldr	r3, [r3, #0]
 8021696:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802169a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 802169c:	2300      	movs	r3, #0
 802169e:	e000      	b.n	80216a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80216a0:	2302      	movs	r3, #2
  }
}
 80216a2:	4618      	mov	r0, r3
 80216a4:	3714      	adds	r7, #20
 80216a6:	46bd      	mov	sp, r7
 80216a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216ac:	4770      	bx	lr

080216ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80216ae:	b580      	push	{r7, lr}
 80216b0:	b082      	sub	sp, #8
 80216b2:	af00      	add	r7, sp, #0
 80216b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80216b6:	687b      	ldr	r3, [r7, #4]
 80216b8:	681b      	ldr	r3, [r3, #0]
 80216ba:	68da      	ldr	r2, [r3, #12]
 80216bc:	687b      	ldr	r3, [r7, #4]
 80216be:	681b      	ldr	r3, [r3, #0]
 80216c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80216c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80216c6:	687b      	ldr	r3, [r7, #4]
 80216c8:	2220      	movs	r2, #32
 80216ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80216ce:	6878      	ldr	r0, [r7, #4]
 80216d0:	f7e0 fede 	bl	8002490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80216d4:	2300      	movs	r3, #0
}
 80216d6:	4618      	mov	r0, r3
 80216d8:	3708      	adds	r7, #8
 80216da:	46bd      	mov	sp, r7
 80216dc:	bd80      	pop	{r7, pc}

080216de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80216de:	b580      	push	{r7, lr}
 80216e0:	b08c      	sub	sp, #48	; 0x30
 80216e2:	af00      	add	r7, sp, #0
 80216e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80216e6:	687b      	ldr	r3, [r7, #4]
 80216e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80216ec:	b2db      	uxtb	r3, r3
 80216ee:	2b22      	cmp	r3, #34	; 0x22
 80216f0:	f040 80ab 	bne.w	802184a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80216f4:	687b      	ldr	r3, [r7, #4]
 80216f6:	689b      	ldr	r3, [r3, #8]
 80216f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80216fc:	d117      	bne.n	802172e <UART_Receive_IT+0x50>
 80216fe:	687b      	ldr	r3, [r7, #4]
 8021700:	691b      	ldr	r3, [r3, #16]
 8021702:	2b00      	cmp	r3, #0
 8021704:	d113      	bne.n	802172e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8021706:	2300      	movs	r3, #0
 8021708:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 802170a:	687b      	ldr	r3, [r7, #4]
 802170c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802170e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8021710:	687b      	ldr	r3, [r7, #4]
 8021712:	681b      	ldr	r3, [r3, #0]
 8021714:	685b      	ldr	r3, [r3, #4]
 8021716:	b29b      	uxth	r3, r3
 8021718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802171c:	b29a      	uxth	r2, r3
 802171e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021720:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8021722:	687b      	ldr	r3, [r7, #4]
 8021724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021726:	1c9a      	adds	r2, r3, #2
 8021728:	687b      	ldr	r3, [r7, #4]
 802172a:	629a      	str	r2, [r3, #40]	; 0x28
 802172c:	e026      	b.n	802177c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 802172e:	687b      	ldr	r3, [r7, #4]
 8021730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021732:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8021734:	2300      	movs	r3, #0
 8021736:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8021738:	687b      	ldr	r3, [r7, #4]
 802173a:	689b      	ldr	r3, [r3, #8]
 802173c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021740:	d007      	beq.n	8021752 <UART_Receive_IT+0x74>
 8021742:	687b      	ldr	r3, [r7, #4]
 8021744:	689b      	ldr	r3, [r3, #8]
 8021746:	2b00      	cmp	r3, #0
 8021748:	d10a      	bne.n	8021760 <UART_Receive_IT+0x82>
 802174a:	687b      	ldr	r3, [r7, #4]
 802174c:	691b      	ldr	r3, [r3, #16]
 802174e:	2b00      	cmp	r3, #0
 8021750:	d106      	bne.n	8021760 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8021752:	687b      	ldr	r3, [r7, #4]
 8021754:	681b      	ldr	r3, [r3, #0]
 8021756:	685b      	ldr	r3, [r3, #4]
 8021758:	b2da      	uxtb	r2, r3
 802175a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802175c:	701a      	strb	r2, [r3, #0]
 802175e:	e008      	b.n	8021772 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8021760:	687b      	ldr	r3, [r7, #4]
 8021762:	681b      	ldr	r3, [r3, #0]
 8021764:	685b      	ldr	r3, [r3, #4]
 8021766:	b2db      	uxtb	r3, r3
 8021768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802176c:	b2da      	uxtb	r2, r3
 802176e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021770:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8021772:	687b      	ldr	r3, [r7, #4]
 8021774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021776:	1c5a      	adds	r2, r3, #1
 8021778:	687b      	ldr	r3, [r7, #4]
 802177a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 802177c:	687b      	ldr	r3, [r7, #4]
 802177e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8021780:	b29b      	uxth	r3, r3
 8021782:	3b01      	subs	r3, #1
 8021784:	b29b      	uxth	r3, r3
 8021786:	687a      	ldr	r2, [r7, #4]
 8021788:	4619      	mov	r1, r3
 802178a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 802178c:	2b00      	cmp	r3, #0
 802178e:	d15a      	bne.n	8021846 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8021790:	687b      	ldr	r3, [r7, #4]
 8021792:	681b      	ldr	r3, [r3, #0]
 8021794:	68da      	ldr	r2, [r3, #12]
 8021796:	687b      	ldr	r3, [r7, #4]
 8021798:	681b      	ldr	r3, [r3, #0]
 802179a:	f022 0220 	bic.w	r2, r2, #32
 802179e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80217a0:	687b      	ldr	r3, [r7, #4]
 80217a2:	681b      	ldr	r3, [r3, #0]
 80217a4:	68da      	ldr	r2, [r3, #12]
 80217a6:	687b      	ldr	r3, [r7, #4]
 80217a8:	681b      	ldr	r3, [r3, #0]
 80217aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80217ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80217b0:	687b      	ldr	r3, [r7, #4]
 80217b2:	681b      	ldr	r3, [r3, #0]
 80217b4:	695a      	ldr	r2, [r3, #20]
 80217b6:	687b      	ldr	r3, [r7, #4]
 80217b8:	681b      	ldr	r3, [r3, #0]
 80217ba:	f022 0201 	bic.w	r2, r2, #1
 80217be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80217c0:	687b      	ldr	r3, [r7, #4]
 80217c2:	2220      	movs	r2, #32
 80217c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80217c8:	687b      	ldr	r3, [r7, #4]
 80217ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80217cc:	2b01      	cmp	r3, #1
 80217ce:	d135      	bne.n	802183c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80217d0:	687b      	ldr	r3, [r7, #4]
 80217d2:	2200      	movs	r2, #0
 80217d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80217d6:	687b      	ldr	r3, [r7, #4]
 80217d8:	681b      	ldr	r3, [r3, #0]
 80217da:	330c      	adds	r3, #12
 80217dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80217de:	697b      	ldr	r3, [r7, #20]
 80217e0:	e853 3f00 	ldrex	r3, [r3]
 80217e4:	613b      	str	r3, [r7, #16]
   return(result);
 80217e6:	693b      	ldr	r3, [r7, #16]
 80217e8:	f023 0310 	bic.w	r3, r3, #16
 80217ec:	627b      	str	r3, [r7, #36]	; 0x24
 80217ee:	687b      	ldr	r3, [r7, #4]
 80217f0:	681b      	ldr	r3, [r3, #0]
 80217f2:	330c      	adds	r3, #12
 80217f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80217f6:	623a      	str	r2, [r7, #32]
 80217f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80217fa:	69f9      	ldr	r1, [r7, #28]
 80217fc:	6a3a      	ldr	r2, [r7, #32]
 80217fe:	e841 2300 	strex	r3, r2, [r1]
 8021802:	61bb      	str	r3, [r7, #24]
   return(result);
 8021804:	69bb      	ldr	r3, [r7, #24]
 8021806:	2b00      	cmp	r3, #0
 8021808:	d1e5      	bne.n	80217d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 802180a:	687b      	ldr	r3, [r7, #4]
 802180c:	681b      	ldr	r3, [r3, #0]
 802180e:	681b      	ldr	r3, [r3, #0]
 8021810:	f003 0310 	and.w	r3, r3, #16
 8021814:	2b10      	cmp	r3, #16
 8021816:	d10a      	bne.n	802182e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8021818:	2300      	movs	r3, #0
 802181a:	60fb      	str	r3, [r7, #12]
 802181c:	687b      	ldr	r3, [r7, #4]
 802181e:	681b      	ldr	r3, [r3, #0]
 8021820:	681b      	ldr	r3, [r3, #0]
 8021822:	60fb      	str	r3, [r7, #12]
 8021824:	687b      	ldr	r3, [r7, #4]
 8021826:	681b      	ldr	r3, [r3, #0]
 8021828:	685b      	ldr	r3, [r3, #4]
 802182a:	60fb      	str	r3, [r7, #12]
 802182c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802182e:	687b      	ldr	r3, [r7, #4]
 8021830:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8021832:	4619      	mov	r1, r3
 8021834:	6878      	ldr	r0, [r7, #4]
 8021836:	f7ff fdc9 	bl	80213cc <HAL_UARTEx_RxEventCallback>
 802183a:	e002      	b.n	8021842 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 802183c:	6878      	ldr	r0, [r7, #4]
 802183e:	f7e0 feaf 	bl	80025a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8021842:	2300      	movs	r3, #0
 8021844:	e002      	b.n	802184c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8021846:	2300      	movs	r3, #0
 8021848:	e000      	b.n	802184c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 802184a:	2302      	movs	r3, #2
  }
}
 802184c:	4618      	mov	r0, r3
 802184e:	3730      	adds	r7, #48	; 0x30
 8021850:	46bd      	mov	sp, r7
 8021852:	bd80      	pop	{r7, pc}

08021854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8021854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8021858:	b0c0      	sub	sp, #256	; 0x100
 802185a:	af00      	add	r7, sp, #0
 802185c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8021860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021864:	681b      	ldr	r3, [r3, #0]
 8021866:	691b      	ldr	r3, [r3, #16]
 8021868:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 802186c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021870:	68d9      	ldr	r1, [r3, #12]
 8021872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021876:	681a      	ldr	r2, [r3, #0]
 8021878:	ea40 0301 	orr.w	r3, r0, r1
 802187c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802187e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021882:	689a      	ldr	r2, [r3, #8]
 8021884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021888:	691b      	ldr	r3, [r3, #16]
 802188a:	431a      	orrs	r2, r3
 802188c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021890:	695b      	ldr	r3, [r3, #20]
 8021892:	431a      	orrs	r2, r3
 8021894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021898:	69db      	ldr	r3, [r3, #28]
 802189a:	4313      	orrs	r3, r2
 802189c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80218a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80218a4:	681b      	ldr	r3, [r3, #0]
 80218a6:	68db      	ldr	r3, [r3, #12]
 80218a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80218ac:	f021 010c 	bic.w	r1, r1, #12
 80218b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80218b4:	681a      	ldr	r2, [r3, #0]
 80218b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80218ba:	430b      	orrs	r3, r1
 80218bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80218be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80218c2:	681b      	ldr	r3, [r3, #0]
 80218c4:	695b      	ldr	r3, [r3, #20]
 80218c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80218ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80218ce:	6999      	ldr	r1, [r3, #24]
 80218d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80218d4:	681a      	ldr	r2, [r3, #0]
 80218d6:	ea40 0301 	orr.w	r3, r0, r1
 80218da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80218dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80218e0:	681a      	ldr	r2, [r3, #0]
 80218e2:	4b8f      	ldr	r3, [pc, #572]	; (8021b20 <UART_SetConfig+0x2cc>)
 80218e4:	429a      	cmp	r2, r3
 80218e6:	d005      	beq.n	80218f4 <UART_SetConfig+0xa0>
 80218e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80218ec:	681a      	ldr	r2, [r3, #0]
 80218ee:	4b8d      	ldr	r3, [pc, #564]	; (8021b24 <UART_SetConfig+0x2d0>)
 80218f0:	429a      	cmp	r2, r3
 80218f2:	d104      	bne.n	80218fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80218f4:	f7fe f82a 	bl	801f94c <HAL_RCC_GetPCLK2Freq>
 80218f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80218fc:	e003      	b.n	8021906 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80218fe:	f7fe f811 	bl	801f924 <HAL_RCC_GetPCLK1Freq>
 8021902:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8021906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802190a:	69db      	ldr	r3, [r3, #28]
 802190c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8021910:	f040 810c 	bne.w	8021b2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8021914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8021918:	2200      	movs	r2, #0
 802191a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 802191e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8021922:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8021926:	4622      	mov	r2, r4
 8021928:	462b      	mov	r3, r5
 802192a:	1891      	adds	r1, r2, r2
 802192c:	65b9      	str	r1, [r7, #88]	; 0x58
 802192e:	415b      	adcs	r3, r3
 8021930:	65fb      	str	r3, [r7, #92]	; 0x5c
 8021932:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8021936:	4621      	mov	r1, r4
 8021938:	eb12 0801 	adds.w	r8, r2, r1
 802193c:	4629      	mov	r1, r5
 802193e:	eb43 0901 	adc.w	r9, r3, r1
 8021942:	f04f 0200 	mov.w	r2, #0
 8021946:	f04f 0300 	mov.w	r3, #0
 802194a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802194e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8021952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8021956:	4690      	mov	r8, r2
 8021958:	4699      	mov	r9, r3
 802195a:	4623      	mov	r3, r4
 802195c:	eb18 0303 	adds.w	r3, r8, r3
 8021960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8021964:	462b      	mov	r3, r5
 8021966:	eb49 0303 	adc.w	r3, r9, r3
 802196a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 802196e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021972:	685b      	ldr	r3, [r3, #4]
 8021974:	2200      	movs	r2, #0
 8021976:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 802197a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 802197e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8021982:	460b      	mov	r3, r1
 8021984:	18db      	adds	r3, r3, r3
 8021986:	653b      	str	r3, [r7, #80]	; 0x50
 8021988:	4613      	mov	r3, r2
 802198a:	eb42 0303 	adc.w	r3, r2, r3
 802198e:	657b      	str	r3, [r7, #84]	; 0x54
 8021990:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8021994:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8021998:	f7df fa7c 	bl	8000e94 <__aeabi_uldivmod>
 802199c:	4602      	mov	r2, r0
 802199e:	460b      	mov	r3, r1
 80219a0:	4b61      	ldr	r3, [pc, #388]	; (8021b28 <UART_SetConfig+0x2d4>)
 80219a2:	fba3 2302 	umull	r2, r3, r3, r2
 80219a6:	095b      	lsrs	r3, r3, #5
 80219a8:	011c      	lsls	r4, r3, #4
 80219aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80219ae:	2200      	movs	r2, #0
 80219b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80219b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80219b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80219bc:	4642      	mov	r2, r8
 80219be:	464b      	mov	r3, r9
 80219c0:	1891      	adds	r1, r2, r2
 80219c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80219c4:	415b      	adcs	r3, r3
 80219c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80219c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80219cc:	4641      	mov	r1, r8
 80219ce:	eb12 0a01 	adds.w	sl, r2, r1
 80219d2:	4649      	mov	r1, r9
 80219d4:	eb43 0b01 	adc.w	fp, r3, r1
 80219d8:	f04f 0200 	mov.w	r2, #0
 80219dc:	f04f 0300 	mov.w	r3, #0
 80219e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80219e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80219e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80219ec:	4692      	mov	sl, r2
 80219ee:	469b      	mov	fp, r3
 80219f0:	4643      	mov	r3, r8
 80219f2:	eb1a 0303 	adds.w	r3, sl, r3
 80219f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80219fa:	464b      	mov	r3, r9
 80219fc:	eb4b 0303 	adc.w	r3, fp, r3
 8021a00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8021a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021a08:	685b      	ldr	r3, [r3, #4]
 8021a0a:	2200      	movs	r2, #0
 8021a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8021a10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8021a14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8021a18:	460b      	mov	r3, r1
 8021a1a:	18db      	adds	r3, r3, r3
 8021a1c:	643b      	str	r3, [r7, #64]	; 0x40
 8021a1e:	4613      	mov	r3, r2
 8021a20:	eb42 0303 	adc.w	r3, r2, r3
 8021a24:	647b      	str	r3, [r7, #68]	; 0x44
 8021a26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8021a2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8021a2e:	f7df fa31 	bl	8000e94 <__aeabi_uldivmod>
 8021a32:	4602      	mov	r2, r0
 8021a34:	460b      	mov	r3, r1
 8021a36:	4611      	mov	r1, r2
 8021a38:	4b3b      	ldr	r3, [pc, #236]	; (8021b28 <UART_SetConfig+0x2d4>)
 8021a3a:	fba3 2301 	umull	r2, r3, r3, r1
 8021a3e:	095b      	lsrs	r3, r3, #5
 8021a40:	2264      	movs	r2, #100	; 0x64
 8021a42:	fb02 f303 	mul.w	r3, r2, r3
 8021a46:	1acb      	subs	r3, r1, r3
 8021a48:	00db      	lsls	r3, r3, #3
 8021a4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8021a4e:	4b36      	ldr	r3, [pc, #216]	; (8021b28 <UART_SetConfig+0x2d4>)
 8021a50:	fba3 2302 	umull	r2, r3, r3, r2
 8021a54:	095b      	lsrs	r3, r3, #5
 8021a56:	005b      	lsls	r3, r3, #1
 8021a58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8021a5c:	441c      	add	r4, r3
 8021a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8021a62:	2200      	movs	r2, #0
 8021a64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8021a68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8021a6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8021a70:	4642      	mov	r2, r8
 8021a72:	464b      	mov	r3, r9
 8021a74:	1891      	adds	r1, r2, r2
 8021a76:	63b9      	str	r1, [r7, #56]	; 0x38
 8021a78:	415b      	adcs	r3, r3
 8021a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8021a7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8021a80:	4641      	mov	r1, r8
 8021a82:	1851      	adds	r1, r2, r1
 8021a84:	6339      	str	r1, [r7, #48]	; 0x30
 8021a86:	4649      	mov	r1, r9
 8021a88:	414b      	adcs	r3, r1
 8021a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8021a8c:	f04f 0200 	mov.w	r2, #0
 8021a90:	f04f 0300 	mov.w	r3, #0
 8021a94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8021a98:	4659      	mov	r1, fp
 8021a9a:	00cb      	lsls	r3, r1, #3
 8021a9c:	4651      	mov	r1, sl
 8021a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8021aa2:	4651      	mov	r1, sl
 8021aa4:	00ca      	lsls	r2, r1, #3
 8021aa6:	4610      	mov	r0, r2
 8021aa8:	4619      	mov	r1, r3
 8021aaa:	4603      	mov	r3, r0
 8021aac:	4642      	mov	r2, r8
 8021aae:	189b      	adds	r3, r3, r2
 8021ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8021ab4:	464b      	mov	r3, r9
 8021ab6:	460a      	mov	r2, r1
 8021ab8:	eb42 0303 	adc.w	r3, r2, r3
 8021abc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8021ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021ac4:	685b      	ldr	r3, [r3, #4]
 8021ac6:	2200      	movs	r2, #0
 8021ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8021acc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8021ad0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8021ad4:	460b      	mov	r3, r1
 8021ad6:	18db      	adds	r3, r3, r3
 8021ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8021ada:	4613      	mov	r3, r2
 8021adc:	eb42 0303 	adc.w	r3, r2, r3
 8021ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021ae2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8021ae6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8021aea:	f7df f9d3 	bl	8000e94 <__aeabi_uldivmod>
 8021aee:	4602      	mov	r2, r0
 8021af0:	460b      	mov	r3, r1
 8021af2:	4b0d      	ldr	r3, [pc, #52]	; (8021b28 <UART_SetConfig+0x2d4>)
 8021af4:	fba3 1302 	umull	r1, r3, r3, r2
 8021af8:	095b      	lsrs	r3, r3, #5
 8021afa:	2164      	movs	r1, #100	; 0x64
 8021afc:	fb01 f303 	mul.w	r3, r1, r3
 8021b00:	1ad3      	subs	r3, r2, r3
 8021b02:	00db      	lsls	r3, r3, #3
 8021b04:	3332      	adds	r3, #50	; 0x32
 8021b06:	4a08      	ldr	r2, [pc, #32]	; (8021b28 <UART_SetConfig+0x2d4>)
 8021b08:	fba2 2303 	umull	r2, r3, r2, r3
 8021b0c:	095b      	lsrs	r3, r3, #5
 8021b0e:	f003 0207 	and.w	r2, r3, #7
 8021b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021b16:	681b      	ldr	r3, [r3, #0]
 8021b18:	4422      	add	r2, r4
 8021b1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8021b1c:	e105      	b.n	8021d2a <UART_SetConfig+0x4d6>
 8021b1e:	bf00      	nop
 8021b20:	40011000 	.word	0x40011000
 8021b24:	40011400 	.word	0x40011400
 8021b28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8021b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8021b30:	2200      	movs	r2, #0
 8021b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8021b36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8021b3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8021b3e:	4642      	mov	r2, r8
 8021b40:	464b      	mov	r3, r9
 8021b42:	1891      	adds	r1, r2, r2
 8021b44:	6239      	str	r1, [r7, #32]
 8021b46:	415b      	adcs	r3, r3
 8021b48:	627b      	str	r3, [r7, #36]	; 0x24
 8021b4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8021b4e:	4641      	mov	r1, r8
 8021b50:	1854      	adds	r4, r2, r1
 8021b52:	4649      	mov	r1, r9
 8021b54:	eb43 0501 	adc.w	r5, r3, r1
 8021b58:	f04f 0200 	mov.w	r2, #0
 8021b5c:	f04f 0300 	mov.w	r3, #0
 8021b60:	00eb      	lsls	r3, r5, #3
 8021b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8021b66:	00e2      	lsls	r2, r4, #3
 8021b68:	4614      	mov	r4, r2
 8021b6a:	461d      	mov	r5, r3
 8021b6c:	4643      	mov	r3, r8
 8021b6e:	18e3      	adds	r3, r4, r3
 8021b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8021b74:	464b      	mov	r3, r9
 8021b76:	eb45 0303 	adc.w	r3, r5, r3
 8021b7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8021b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021b82:	685b      	ldr	r3, [r3, #4]
 8021b84:	2200      	movs	r2, #0
 8021b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8021b8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8021b8e:	f04f 0200 	mov.w	r2, #0
 8021b92:	f04f 0300 	mov.w	r3, #0
 8021b96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8021b9a:	4629      	mov	r1, r5
 8021b9c:	008b      	lsls	r3, r1, #2
 8021b9e:	4621      	mov	r1, r4
 8021ba0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8021ba4:	4621      	mov	r1, r4
 8021ba6:	008a      	lsls	r2, r1, #2
 8021ba8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8021bac:	f7df f972 	bl	8000e94 <__aeabi_uldivmod>
 8021bb0:	4602      	mov	r2, r0
 8021bb2:	460b      	mov	r3, r1
 8021bb4:	4b60      	ldr	r3, [pc, #384]	; (8021d38 <UART_SetConfig+0x4e4>)
 8021bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8021bba:	095b      	lsrs	r3, r3, #5
 8021bbc:	011c      	lsls	r4, r3, #4
 8021bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8021bc2:	2200      	movs	r2, #0
 8021bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8021bc8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8021bcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8021bd0:	4642      	mov	r2, r8
 8021bd2:	464b      	mov	r3, r9
 8021bd4:	1891      	adds	r1, r2, r2
 8021bd6:	61b9      	str	r1, [r7, #24]
 8021bd8:	415b      	adcs	r3, r3
 8021bda:	61fb      	str	r3, [r7, #28]
 8021bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8021be0:	4641      	mov	r1, r8
 8021be2:	1851      	adds	r1, r2, r1
 8021be4:	6139      	str	r1, [r7, #16]
 8021be6:	4649      	mov	r1, r9
 8021be8:	414b      	adcs	r3, r1
 8021bea:	617b      	str	r3, [r7, #20]
 8021bec:	f04f 0200 	mov.w	r2, #0
 8021bf0:	f04f 0300 	mov.w	r3, #0
 8021bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8021bf8:	4659      	mov	r1, fp
 8021bfa:	00cb      	lsls	r3, r1, #3
 8021bfc:	4651      	mov	r1, sl
 8021bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8021c02:	4651      	mov	r1, sl
 8021c04:	00ca      	lsls	r2, r1, #3
 8021c06:	4610      	mov	r0, r2
 8021c08:	4619      	mov	r1, r3
 8021c0a:	4603      	mov	r3, r0
 8021c0c:	4642      	mov	r2, r8
 8021c0e:	189b      	adds	r3, r3, r2
 8021c10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8021c14:	464b      	mov	r3, r9
 8021c16:	460a      	mov	r2, r1
 8021c18:	eb42 0303 	adc.w	r3, r2, r3
 8021c1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8021c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021c24:	685b      	ldr	r3, [r3, #4]
 8021c26:	2200      	movs	r2, #0
 8021c28:	67bb      	str	r3, [r7, #120]	; 0x78
 8021c2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8021c2c:	f04f 0200 	mov.w	r2, #0
 8021c30:	f04f 0300 	mov.w	r3, #0
 8021c34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8021c38:	4649      	mov	r1, r9
 8021c3a:	008b      	lsls	r3, r1, #2
 8021c3c:	4641      	mov	r1, r8
 8021c3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8021c42:	4641      	mov	r1, r8
 8021c44:	008a      	lsls	r2, r1, #2
 8021c46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8021c4a:	f7df f923 	bl	8000e94 <__aeabi_uldivmod>
 8021c4e:	4602      	mov	r2, r0
 8021c50:	460b      	mov	r3, r1
 8021c52:	4b39      	ldr	r3, [pc, #228]	; (8021d38 <UART_SetConfig+0x4e4>)
 8021c54:	fba3 1302 	umull	r1, r3, r3, r2
 8021c58:	095b      	lsrs	r3, r3, #5
 8021c5a:	2164      	movs	r1, #100	; 0x64
 8021c5c:	fb01 f303 	mul.w	r3, r1, r3
 8021c60:	1ad3      	subs	r3, r2, r3
 8021c62:	011b      	lsls	r3, r3, #4
 8021c64:	3332      	adds	r3, #50	; 0x32
 8021c66:	4a34      	ldr	r2, [pc, #208]	; (8021d38 <UART_SetConfig+0x4e4>)
 8021c68:	fba2 2303 	umull	r2, r3, r2, r3
 8021c6c:	095b      	lsrs	r3, r3, #5
 8021c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021c72:	441c      	add	r4, r3
 8021c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8021c78:	2200      	movs	r2, #0
 8021c7a:	673b      	str	r3, [r7, #112]	; 0x70
 8021c7c:	677a      	str	r2, [r7, #116]	; 0x74
 8021c7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8021c82:	4642      	mov	r2, r8
 8021c84:	464b      	mov	r3, r9
 8021c86:	1891      	adds	r1, r2, r2
 8021c88:	60b9      	str	r1, [r7, #8]
 8021c8a:	415b      	adcs	r3, r3
 8021c8c:	60fb      	str	r3, [r7, #12]
 8021c8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021c92:	4641      	mov	r1, r8
 8021c94:	1851      	adds	r1, r2, r1
 8021c96:	6039      	str	r1, [r7, #0]
 8021c98:	4649      	mov	r1, r9
 8021c9a:	414b      	adcs	r3, r1
 8021c9c:	607b      	str	r3, [r7, #4]
 8021c9e:	f04f 0200 	mov.w	r2, #0
 8021ca2:	f04f 0300 	mov.w	r3, #0
 8021ca6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8021caa:	4659      	mov	r1, fp
 8021cac:	00cb      	lsls	r3, r1, #3
 8021cae:	4651      	mov	r1, sl
 8021cb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8021cb4:	4651      	mov	r1, sl
 8021cb6:	00ca      	lsls	r2, r1, #3
 8021cb8:	4610      	mov	r0, r2
 8021cba:	4619      	mov	r1, r3
 8021cbc:	4603      	mov	r3, r0
 8021cbe:	4642      	mov	r2, r8
 8021cc0:	189b      	adds	r3, r3, r2
 8021cc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8021cc4:	464b      	mov	r3, r9
 8021cc6:	460a      	mov	r2, r1
 8021cc8:	eb42 0303 	adc.w	r3, r2, r3
 8021ccc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8021cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021cd2:	685b      	ldr	r3, [r3, #4]
 8021cd4:	2200      	movs	r2, #0
 8021cd6:	663b      	str	r3, [r7, #96]	; 0x60
 8021cd8:	667a      	str	r2, [r7, #100]	; 0x64
 8021cda:	f04f 0200 	mov.w	r2, #0
 8021cde:	f04f 0300 	mov.w	r3, #0
 8021ce2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8021ce6:	4649      	mov	r1, r9
 8021ce8:	008b      	lsls	r3, r1, #2
 8021cea:	4641      	mov	r1, r8
 8021cec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8021cf0:	4641      	mov	r1, r8
 8021cf2:	008a      	lsls	r2, r1, #2
 8021cf4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8021cf8:	f7df f8cc 	bl	8000e94 <__aeabi_uldivmod>
 8021cfc:	4602      	mov	r2, r0
 8021cfe:	460b      	mov	r3, r1
 8021d00:	4b0d      	ldr	r3, [pc, #52]	; (8021d38 <UART_SetConfig+0x4e4>)
 8021d02:	fba3 1302 	umull	r1, r3, r3, r2
 8021d06:	095b      	lsrs	r3, r3, #5
 8021d08:	2164      	movs	r1, #100	; 0x64
 8021d0a:	fb01 f303 	mul.w	r3, r1, r3
 8021d0e:	1ad3      	subs	r3, r2, r3
 8021d10:	011b      	lsls	r3, r3, #4
 8021d12:	3332      	adds	r3, #50	; 0x32
 8021d14:	4a08      	ldr	r2, [pc, #32]	; (8021d38 <UART_SetConfig+0x4e4>)
 8021d16:	fba2 2303 	umull	r2, r3, r2, r3
 8021d1a:	095b      	lsrs	r3, r3, #5
 8021d1c:	f003 020f 	and.w	r2, r3, #15
 8021d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021d24:	681b      	ldr	r3, [r3, #0]
 8021d26:	4422      	add	r2, r4
 8021d28:	609a      	str	r2, [r3, #8]
}
 8021d2a:	bf00      	nop
 8021d2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8021d30:	46bd      	mov	sp, r7
 8021d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8021d36:	bf00      	nop
 8021d38:	51eb851f 	.word	0x51eb851f

08021d3c <atoi>:
 8021d3c:	220a      	movs	r2, #10
 8021d3e:	2100      	movs	r1, #0
 8021d40:	f000 ba6a 	b.w	8022218 <strtol>

08021d44 <calloc>:
 8021d44:	4b02      	ldr	r3, [pc, #8]	; (8021d50 <calloc+0xc>)
 8021d46:	460a      	mov	r2, r1
 8021d48:	4601      	mov	r1, r0
 8021d4a:	6818      	ldr	r0, [r3, #0]
 8021d4c:	f000 b852 	b.w	8021df4 <_calloc_r>
 8021d50:	20000098 	.word	0x20000098

08021d54 <__errno>:
 8021d54:	4b01      	ldr	r3, [pc, #4]	; (8021d5c <__errno+0x8>)
 8021d56:	6818      	ldr	r0, [r3, #0]
 8021d58:	4770      	bx	lr
 8021d5a:	bf00      	nop
 8021d5c:	20000098 	.word	0x20000098

08021d60 <__libc_init_array>:
 8021d60:	b570      	push	{r4, r5, r6, lr}
 8021d62:	4d0d      	ldr	r5, [pc, #52]	; (8021d98 <__libc_init_array+0x38>)
 8021d64:	4c0d      	ldr	r4, [pc, #52]	; (8021d9c <__libc_init_array+0x3c>)
 8021d66:	1b64      	subs	r4, r4, r5
 8021d68:	10a4      	asrs	r4, r4, #2
 8021d6a:	2600      	movs	r6, #0
 8021d6c:	42a6      	cmp	r6, r4
 8021d6e:	d109      	bne.n	8021d84 <__libc_init_array+0x24>
 8021d70:	4d0b      	ldr	r5, [pc, #44]	; (8021da0 <__libc_init_array+0x40>)
 8021d72:	4c0c      	ldr	r4, [pc, #48]	; (8021da4 <__libc_init_array+0x44>)
 8021d74:	f002 ff00 	bl	8024b78 <_init>
 8021d78:	1b64      	subs	r4, r4, r5
 8021d7a:	10a4      	asrs	r4, r4, #2
 8021d7c:	2600      	movs	r6, #0
 8021d7e:	42a6      	cmp	r6, r4
 8021d80:	d105      	bne.n	8021d8e <__libc_init_array+0x2e>
 8021d82:	bd70      	pop	{r4, r5, r6, pc}
 8021d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8021d88:	4798      	blx	r3
 8021d8a:	3601      	adds	r6, #1
 8021d8c:	e7ee      	b.n	8021d6c <__libc_init_array+0xc>
 8021d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8021d92:	4798      	blx	r3
 8021d94:	3601      	adds	r6, #1
 8021d96:	e7f2      	b.n	8021d7e <__libc_init_array+0x1e>
 8021d98:	08028938 	.word	0x08028938
 8021d9c:	08028938 	.word	0x08028938
 8021da0:	08028938 	.word	0x08028938
 8021da4:	0802893c 	.word	0x0802893c

08021da8 <malloc>:
 8021da8:	4b02      	ldr	r3, [pc, #8]	; (8021db4 <malloc+0xc>)
 8021daa:	4601      	mov	r1, r0
 8021dac:	6818      	ldr	r0, [r3, #0]
 8021dae:	f000 b8a3 	b.w	8021ef8 <_malloc_r>
 8021db2:	bf00      	nop
 8021db4:	20000098 	.word	0x20000098

08021db8 <free>:
 8021db8:	4b02      	ldr	r3, [pc, #8]	; (8021dc4 <free+0xc>)
 8021dba:	4601      	mov	r1, r0
 8021dbc:	6818      	ldr	r0, [r3, #0]
 8021dbe:	f000 b82f 	b.w	8021e20 <_free_r>
 8021dc2:	bf00      	nop
 8021dc4:	20000098 	.word	0x20000098

08021dc8 <memcpy>:
 8021dc8:	440a      	add	r2, r1
 8021dca:	4291      	cmp	r1, r2
 8021dcc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8021dd0:	d100      	bne.n	8021dd4 <memcpy+0xc>
 8021dd2:	4770      	bx	lr
 8021dd4:	b510      	push	{r4, lr}
 8021dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021dda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021dde:	4291      	cmp	r1, r2
 8021de0:	d1f9      	bne.n	8021dd6 <memcpy+0xe>
 8021de2:	bd10      	pop	{r4, pc}

08021de4 <memset>:
 8021de4:	4402      	add	r2, r0
 8021de6:	4603      	mov	r3, r0
 8021de8:	4293      	cmp	r3, r2
 8021dea:	d100      	bne.n	8021dee <memset+0xa>
 8021dec:	4770      	bx	lr
 8021dee:	f803 1b01 	strb.w	r1, [r3], #1
 8021df2:	e7f9      	b.n	8021de8 <memset+0x4>

08021df4 <_calloc_r>:
 8021df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021df6:	fba1 2402 	umull	r2, r4, r1, r2
 8021dfa:	b94c      	cbnz	r4, 8021e10 <_calloc_r+0x1c>
 8021dfc:	4611      	mov	r1, r2
 8021dfe:	9201      	str	r2, [sp, #4]
 8021e00:	f000 f87a 	bl	8021ef8 <_malloc_r>
 8021e04:	9a01      	ldr	r2, [sp, #4]
 8021e06:	4605      	mov	r5, r0
 8021e08:	b930      	cbnz	r0, 8021e18 <_calloc_r+0x24>
 8021e0a:	4628      	mov	r0, r5
 8021e0c:	b003      	add	sp, #12
 8021e0e:	bd30      	pop	{r4, r5, pc}
 8021e10:	220c      	movs	r2, #12
 8021e12:	6002      	str	r2, [r0, #0]
 8021e14:	2500      	movs	r5, #0
 8021e16:	e7f8      	b.n	8021e0a <_calloc_r+0x16>
 8021e18:	4621      	mov	r1, r4
 8021e1a:	f7ff ffe3 	bl	8021de4 <memset>
 8021e1e:	e7f4      	b.n	8021e0a <_calloc_r+0x16>

08021e20 <_free_r>:
 8021e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021e22:	2900      	cmp	r1, #0
 8021e24:	d044      	beq.n	8021eb0 <_free_r+0x90>
 8021e26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021e2a:	9001      	str	r0, [sp, #4]
 8021e2c:	2b00      	cmp	r3, #0
 8021e2e:	f1a1 0404 	sub.w	r4, r1, #4
 8021e32:	bfb8      	it	lt
 8021e34:	18e4      	addlt	r4, r4, r3
 8021e36:	f000 f9f9 	bl	802222c <__malloc_lock>
 8021e3a:	4a1e      	ldr	r2, [pc, #120]	; (8021eb4 <_free_r+0x94>)
 8021e3c:	9801      	ldr	r0, [sp, #4]
 8021e3e:	6813      	ldr	r3, [r2, #0]
 8021e40:	b933      	cbnz	r3, 8021e50 <_free_r+0x30>
 8021e42:	6063      	str	r3, [r4, #4]
 8021e44:	6014      	str	r4, [r2, #0]
 8021e46:	b003      	add	sp, #12
 8021e48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021e4c:	f000 b9f4 	b.w	8022238 <__malloc_unlock>
 8021e50:	42a3      	cmp	r3, r4
 8021e52:	d908      	bls.n	8021e66 <_free_r+0x46>
 8021e54:	6825      	ldr	r5, [r4, #0]
 8021e56:	1961      	adds	r1, r4, r5
 8021e58:	428b      	cmp	r3, r1
 8021e5a:	bf01      	itttt	eq
 8021e5c:	6819      	ldreq	r1, [r3, #0]
 8021e5e:	685b      	ldreq	r3, [r3, #4]
 8021e60:	1949      	addeq	r1, r1, r5
 8021e62:	6021      	streq	r1, [r4, #0]
 8021e64:	e7ed      	b.n	8021e42 <_free_r+0x22>
 8021e66:	461a      	mov	r2, r3
 8021e68:	685b      	ldr	r3, [r3, #4]
 8021e6a:	b10b      	cbz	r3, 8021e70 <_free_r+0x50>
 8021e6c:	42a3      	cmp	r3, r4
 8021e6e:	d9fa      	bls.n	8021e66 <_free_r+0x46>
 8021e70:	6811      	ldr	r1, [r2, #0]
 8021e72:	1855      	adds	r5, r2, r1
 8021e74:	42a5      	cmp	r5, r4
 8021e76:	d10b      	bne.n	8021e90 <_free_r+0x70>
 8021e78:	6824      	ldr	r4, [r4, #0]
 8021e7a:	4421      	add	r1, r4
 8021e7c:	1854      	adds	r4, r2, r1
 8021e7e:	42a3      	cmp	r3, r4
 8021e80:	6011      	str	r1, [r2, #0]
 8021e82:	d1e0      	bne.n	8021e46 <_free_r+0x26>
 8021e84:	681c      	ldr	r4, [r3, #0]
 8021e86:	685b      	ldr	r3, [r3, #4]
 8021e88:	6053      	str	r3, [r2, #4]
 8021e8a:	4421      	add	r1, r4
 8021e8c:	6011      	str	r1, [r2, #0]
 8021e8e:	e7da      	b.n	8021e46 <_free_r+0x26>
 8021e90:	d902      	bls.n	8021e98 <_free_r+0x78>
 8021e92:	230c      	movs	r3, #12
 8021e94:	6003      	str	r3, [r0, #0]
 8021e96:	e7d6      	b.n	8021e46 <_free_r+0x26>
 8021e98:	6825      	ldr	r5, [r4, #0]
 8021e9a:	1961      	adds	r1, r4, r5
 8021e9c:	428b      	cmp	r3, r1
 8021e9e:	bf04      	itt	eq
 8021ea0:	6819      	ldreq	r1, [r3, #0]
 8021ea2:	685b      	ldreq	r3, [r3, #4]
 8021ea4:	6063      	str	r3, [r4, #4]
 8021ea6:	bf04      	itt	eq
 8021ea8:	1949      	addeq	r1, r1, r5
 8021eaa:	6021      	streq	r1, [r4, #0]
 8021eac:	6054      	str	r4, [r2, #4]
 8021eae:	e7ca      	b.n	8021e46 <_free_r+0x26>
 8021eb0:	b003      	add	sp, #12
 8021eb2:	bd30      	pop	{r4, r5, pc}
 8021eb4:	2000226c 	.word	0x2000226c

08021eb8 <sbrk_aligned>:
 8021eb8:	b570      	push	{r4, r5, r6, lr}
 8021eba:	4e0e      	ldr	r6, [pc, #56]	; (8021ef4 <sbrk_aligned+0x3c>)
 8021ebc:	460c      	mov	r4, r1
 8021ebe:	6831      	ldr	r1, [r6, #0]
 8021ec0:	4605      	mov	r5, r0
 8021ec2:	b911      	cbnz	r1, 8021eca <sbrk_aligned+0x12>
 8021ec4:	f000 f88c 	bl	8021fe0 <_sbrk_r>
 8021ec8:	6030      	str	r0, [r6, #0]
 8021eca:	4621      	mov	r1, r4
 8021ecc:	4628      	mov	r0, r5
 8021ece:	f000 f887 	bl	8021fe0 <_sbrk_r>
 8021ed2:	1c43      	adds	r3, r0, #1
 8021ed4:	d00a      	beq.n	8021eec <sbrk_aligned+0x34>
 8021ed6:	1cc4      	adds	r4, r0, #3
 8021ed8:	f024 0403 	bic.w	r4, r4, #3
 8021edc:	42a0      	cmp	r0, r4
 8021ede:	d007      	beq.n	8021ef0 <sbrk_aligned+0x38>
 8021ee0:	1a21      	subs	r1, r4, r0
 8021ee2:	4628      	mov	r0, r5
 8021ee4:	f000 f87c 	bl	8021fe0 <_sbrk_r>
 8021ee8:	3001      	adds	r0, #1
 8021eea:	d101      	bne.n	8021ef0 <sbrk_aligned+0x38>
 8021eec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8021ef0:	4620      	mov	r0, r4
 8021ef2:	bd70      	pop	{r4, r5, r6, pc}
 8021ef4:	20002270 	.word	0x20002270

08021ef8 <_malloc_r>:
 8021ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021efc:	1ccd      	adds	r5, r1, #3
 8021efe:	f025 0503 	bic.w	r5, r5, #3
 8021f02:	3508      	adds	r5, #8
 8021f04:	2d0c      	cmp	r5, #12
 8021f06:	bf38      	it	cc
 8021f08:	250c      	movcc	r5, #12
 8021f0a:	2d00      	cmp	r5, #0
 8021f0c:	4607      	mov	r7, r0
 8021f0e:	db01      	blt.n	8021f14 <_malloc_r+0x1c>
 8021f10:	42a9      	cmp	r1, r5
 8021f12:	d905      	bls.n	8021f20 <_malloc_r+0x28>
 8021f14:	230c      	movs	r3, #12
 8021f16:	603b      	str	r3, [r7, #0]
 8021f18:	2600      	movs	r6, #0
 8021f1a:	4630      	mov	r0, r6
 8021f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021f20:	4e2e      	ldr	r6, [pc, #184]	; (8021fdc <_malloc_r+0xe4>)
 8021f22:	f000 f983 	bl	802222c <__malloc_lock>
 8021f26:	6833      	ldr	r3, [r6, #0]
 8021f28:	461c      	mov	r4, r3
 8021f2a:	bb34      	cbnz	r4, 8021f7a <_malloc_r+0x82>
 8021f2c:	4629      	mov	r1, r5
 8021f2e:	4638      	mov	r0, r7
 8021f30:	f7ff ffc2 	bl	8021eb8 <sbrk_aligned>
 8021f34:	1c43      	adds	r3, r0, #1
 8021f36:	4604      	mov	r4, r0
 8021f38:	d14d      	bne.n	8021fd6 <_malloc_r+0xde>
 8021f3a:	6834      	ldr	r4, [r6, #0]
 8021f3c:	4626      	mov	r6, r4
 8021f3e:	2e00      	cmp	r6, #0
 8021f40:	d140      	bne.n	8021fc4 <_malloc_r+0xcc>
 8021f42:	6823      	ldr	r3, [r4, #0]
 8021f44:	4631      	mov	r1, r6
 8021f46:	4638      	mov	r0, r7
 8021f48:	eb04 0803 	add.w	r8, r4, r3
 8021f4c:	f000 f848 	bl	8021fe0 <_sbrk_r>
 8021f50:	4580      	cmp	r8, r0
 8021f52:	d13a      	bne.n	8021fca <_malloc_r+0xd2>
 8021f54:	6821      	ldr	r1, [r4, #0]
 8021f56:	3503      	adds	r5, #3
 8021f58:	1a6d      	subs	r5, r5, r1
 8021f5a:	f025 0503 	bic.w	r5, r5, #3
 8021f5e:	3508      	adds	r5, #8
 8021f60:	2d0c      	cmp	r5, #12
 8021f62:	bf38      	it	cc
 8021f64:	250c      	movcc	r5, #12
 8021f66:	4629      	mov	r1, r5
 8021f68:	4638      	mov	r0, r7
 8021f6a:	f7ff ffa5 	bl	8021eb8 <sbrk_aligned>
 8021f6e:	3001      	adds	r0, #1
 8021f70:	d02b      	beq.n	8021fca <_malloc_r+0xd2>
 8021f72:	6823      	ldr	r3, [r4, #0]
 8021f74:	442b      	add	r3, r5
 8021f76:	6023      	str	r3, [r4, #0]
 8021f78:	e00e      	b.n	8021f98 <_malloc_r+0xa0>
 8021f7a:	6822      	ldr	r2, [r4, #0]
 8021f7c:	1b52      	subs	r2, r2, r5
 8021f7e:	d41e      	bmi.n	8021fbe <_malloc_r+0xc6>
 8021f80:	2a0b      	cmp	r2, #11
 8021f82:	d916      	bls.n	8021fb2 <_malloc_r+0xba>
 8021f84:	1961      	adds	r1, r4, r5
 8021f86:	42a3      	cmp	r3, r4
 8021f88:	6025      	str	r5, [r4, #0]
 8021f8a:	bf18      	it	ne
 8021f8c:	6059      	strne	r1, [r3, #4]
 8021f8e:	6863      	ldr	r3, [r4, #4]
 8021f90:	bf08      	it	eq
 8021f92:	6031      	streq	r1, [r6, #0]
 8021f94:	5162      	str	r2, [r4, r5]
 8021f96:	604b      	str	r3, [r1, #4]
 8021f98:	4638      	mov	r0, r7
 8021f9a:	f104 060b 	add.w	r6, r4, #11
 8021f9e:	f000 f94b 	bl	8022238 <__malloc_unlock>
 8021fa2:	f026 0607 	bic.w	r6, r6, #7
 8021fa6:	1d23      	adds	r3, r4, #4
 8021fa8:	1af2      	subs	r2, r6, r3
 8021faa:	d0b6      	beq.n	8021f1a <_malloc_r+0x22>
 8021fac:	1b9b      	subs	r3, r3, r6
 8021fae:	50a3      	str	r3, [r4, r2]
 8021fb0:	e7b3      	b.n	8021f1a <_malloc_r+0x22>
 8021fb2:	6862      	ldr	r2, [r4, #4]
 8021fb4:	42a3      	cmp	r3, r4
 8021fb6:	bf0c      	ite	eq
 8021fb8:	6032      	streq	r2, [r6, #0]
 8021fba:	605a      	strne	r2, [r3, #4]
 8021fbc:	e7ec      	b.n	8021f98 <_malloc_r+0xa0>
 8021fbe:	4623      	mov	r3, r4
 8021fc0:	6864      	ldr	r4, [r4, #4]
 8021fc2:	e7b2      	b.n	8021f2a <_malloc_r+0x32>
 8021fc4:	4634      	mov	r4, r6
 8021fc6:	6876      	ldr	r6, [r6, #4]
 8021fc8:	e7b9      	b.n	8021f3e <_malloc_r+0x46>
 8021fca:	230c      	movs	r3, #12
 8021fcc:	603b      	str	r3, [r7, #0]
 8021fce:	4638      	mov	r0, r7
 8021fd0:	f000 f932 	bl	8022238 <__malloc_unlock>
 8021fd4:	e7a1      	b.n	8021f1a <_malloc_r+0x22>
 8021fd6:	6025      	str	r5, [r4, #0]
 8021fd8:	e7de      	b.n	8021f98 <_malloc_r+0xa0>
 8021fda:	bf00      	nop
 8021fdc:	2000226c 	.word	0x2000226c

08021fe0 <_sbrk_r>:
 8021fe0:	b538      	push	{r3, r4, r5, lr}
 8021fe2:	4d06      	ldr	r5, [pc, #24]	; (8021ffc <_sbrk_r+0x1c>)
 8021fe4:	2300      	movs	r3, #0
 8021fe6:	4604      	mov	r4, r0
 8021fe8:	4608      	mov	r0, r1
 8021fea:	602b      	str	r3, [r5, #0]
 8021fec:	f7e1 fe36 	bl	8003c5c <_sbrk>
 8021ff0:	1c43      	adds	r3, r0, #1
 8021ff2:	d102      	bne.n	8021ffa <_sbrk_r+0x1a>
 8021ff4:	682b      	ldr	r3, [r5, #0]
 8021ff6:	b103      	cbz	r3, 8021ffa <_sbrk_r+0x1a>
 8021ff8:	6023      	str	r3, [r4, #0]
 8021ffa:	bd38      	pop	{r3, r4, r5, pc}
 8021ffc:	20002274 	.word	0x20002274

08022000 <strcasecmp>:
 8022000:	b530      	push	{r4, r5, lr}
 8022002:	4d0b      	ldr	r5, [pc, #44]	; (8022030 <strcasecmp+0x30>)
 8022004:	4604      	mov	r4, r0
 8022006:	f814 3b01 	ldrb.w	r3, [r4], #1
 802200a:	5d5a      	ldrb	r2, [r3, r5]
 802200c:	f002 0203 	and.w	r2, r2, #3
 8022010:	2a01      	cmp	r2, #1
 8022012:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022016:	5ca8      	ldrb	r0, [r5, r2]
 8022018:	f000 0003 	and.w	r0, r0, #3
 802201c:	bf08      	it	eq
 802201e:	3320      	addeq	r3, #32
 8022020:	2801      	cmp	r0, #1
 8022022:	bf08      	it	eq
 8022024:	3220      	addeq	r2, #32
 8022026:	1a98      	subs	r0, r3, r2
 8022028:	d101      	bne.n	802202e <strcasecmp+0x2e>
 802202a:	2a00      	cmp	r2, #0
 802202c:	d1eb      	bne.n	8022006 <strcasecmp+0x6>
 802202e:	bd30      	pop	{r4, r5, pc}
 8022030:	08028225 	.word	0x08028225

08022034 <strcat>:
 8022034:	b510      	push	{r4, lr}
 8022036:	4602      	mov	r2, r0
 8022038:	7814      	ldrb	r4, [r2, #0]
 802203a:	4613      	mov	r3, r2
 802203c:	3201      	adds	r2, #1
 802203e:	2c00      	cmp	r4, #0
 8022040:	d1fa      	bne.n	8022038 <strcat+0x4>
 8022042:	3b01      	subs	r3, #1
 8022044:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022048:	f803 2f01 	strb.w	r2, [r3, #1]!
 802204c:	2a00      	cmp	r2, #0
 802204e:	d1f9      	bne.n	8022044 <strcat+0x10>
 8022050:	bd10      	pop	{r4, pc}

08022052 <strchr>:
 8022052:	b2c9      	uxtb	r1, r1
 8022054:	4603      	mov	r3, r0
 8022056:	f810 2b01 	ldrb.w	r2, [r0], #1
 802205a:	b11a      	cbz	r2, 8022064 <strchr+0x12>
 802205c:	428a      	cmp	r2, r1
 802205e:	d1f9      	bne.n	8022054 <strchr+0x2>
 8022060:	4618      	mov	r0, r3
 8022062:	4770      	bx	lr
 8022064:	2900      	cmp	r1, #0
 8022066:	bf18      	it	ne
 8022068:	2300      	movne	r3, #0
 802206a:	e7f9      	b.n	8022060 <strchr+0xe>

0802206c <strcpy>:
 802206c:	4603      	mov	r3, r0
 802206e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022072:	f803 2b01 	strb.w	r2, [r3], #1
 8022076:	2a00      	cmp	r2, #0
 8022078:	d1f9      	bne.n	802206e <strcpy+0x2>
 802207a:	4770      	bx	lr

0802207c <strncasecmp>:
 802207c:	b570      	push	{r4, r5, r6, lr}
 802207e:	4e0f      	ldr	r6, [pc, #60]	; (80220bc <strncasecmp+0x40>)
 8022080:	4604      	mov	r4, r0
 8022082:	440a      	add	r2, r1
 8022084:	428a      	cmp	r2, r1
 8022086:	d101      	bne.n	802208c <strncasecmp+0x10>
 8022088:	2000      	movs	r0, #0
 802208a:	e013      	b.n	80220b4 <strncasecmp+0x38>
 802208c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022090:	5d98      	ldrb	r0, [r3, r6]
 8022092:	f000 0003 	and.w	r0, r0, #3
 8022096:	2801      	cmp	r0, #1
 8022098:	f811 0b01 	ldrb.w	r0, [r1], #1
 802209c:	5c35      	ldrb	r5, [r6, r0]
 802209e:	f005 0503 	and.w	r5, r5, #3
 80220a2:	bf08      	it	eq
 80220a4:	3320      	addeq	r3, #32
 80220a6:	2d01      	cmp	r5, #1
 80220a8:	bf08      	it	eq
 80220aa:	3020      	addeq	r0, #32
 80220ac:	1a1b      	subs	r3, r3, r0
 80220ae:	d102      	bne.n	80220b6 <strncasecmp+0x3a>
 80220b0:	2800      	cmp	r0, #0
 80220b2:	d1e7      	bne.n	8022084 <strncasecmp+0x8>
 80220b4:	bd70      	pop	{r4, r5, r6, pc}
 80220b6:	4618      	mov	r0, r3
 80220b8:	e7fc      	b.n	80220b4 <strncasecmp+0x38>
 80220ba:	bf00      	nop
 80220bc:	08028225 	.word	0x08028225

080220c0 <strncpy>:
 80220c0:	b510      	push	{r4, lr}
 80220c2:	3901      	subs	r1, #1
 80220c4:	4603      	mov	r3, r0
 80220c6:	b132      	cbz	r2, 80220d6 <strncpy+0x16>
 80220c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80220cc:	f803 4b01 	strb.w	r4, [r3], #1
 80220d0:	3a01      	subs	r2, #1
 80220d2:	2c00      	cmp	r4, #0
 80220d4:	d1f7      	bne.n	80220c6 <strncpy+0x6>
 80220d6:	441a      	add	r2, r3
 80220d8:	2100      	movs	r1, #0
 80220da:	4293      	cmp	r3, r2
 80220dc:	d100      	bne.n	80220e0 <strncpy+0x20>
 80220de:	bd10      	pop	{r4, pc}
 80220e0:	f803 1b01 	strb.w	r1, [r3], #1
 80220e4:	e7f9      	b.n	80220da <strncpy+0x1a>

080220e6 <strstr>:
 80220e6:	780a      	ldrb	r2, [r1, #0]
 80220e8:	b570      	push	{r4, r5, r6, lr}
 80220ea:	b96a      	cbnz	r2, 8022108 <strstr+0x22>
 80220ec:	bd70      	pop	{r4, r5, r6, pc}
 80220ee:	429a      	cmp	r2, r3
 80220f0:	d109      	bne.n	8022106 <strstr+0x20>
 80220f2:	460c      	mov	r4, r1
 80220f4:	4605      	mov	r5, r0
 80220f6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80220fa:	2b00      	cmp	r3, #0
 80220fc:	d0f6      	beq.n	80220ec <strstr+0x6>
 80220fe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8022102:	429e      	cmp	r6, r3
 8022104:	d0f7      	beq.n	80220f6 <strstr+0x10>
 8022106:	3001      	adds	r0, #1
 8022108:	7803      	ldrb	r3, [r0, #0]
 802210a:	2b00      	cmp	r3, #0
 802210c:	d1ef      	bne.n	80220ee <strstr+0x8>
 802210e:	4618      	mov	r0, r3
 8022110:	e7ec      	b.n	80220ec <strstr+0x6>
	...

08022114 <_strtol_l.constprop.0>:
 8022114:	2b01      	cmp	r3, #1
 8022116:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802211a:	d001      	beq.n	8022120 <_strtol_l.constprop.0+0xc>
 802211c:	2b24      	cmp	r3, #36	; 0x24
 802211e:	d906      	bls.n	802212e <_strtol_l.constprop.0+0x1a>
 8022120:	f7ff fe18 	bl	8021d54 <__errno>
 8022124:	2316      	movs	r3, #22
 8022126:	6003      	str	r3, [r0, #0]
 8022128:	2000      	movs	r0, #0
 802212a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802212e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8022214 <_strtol_l.constprop.0+0x100>
 8022132:	460d      	mov	r5, r1
 8022134:	462e      	mov	r6, r5
 8022136:	f815 4b01 	ldrb.w	r4, [r5], #1
 802213a:	f814 700c 	ldrb.w	r7, [r4, ip]
 802213e:	f017 0708 	ands.w	r7, r7, #8
 8022142:	d1f7      	bne.n	8022134 <_strtol_l.constprop.0+0x20>
 8022144:	2c2d      	cmp	r4, #45	; 0x2d
 8022146:	d132      	bne.n	80221ae <_strtol_l.constprop.0+0x9a>
 8022148:	782c      	ldrb	r4, [r5, #0]
 802214a:	2701      	movs	r7, #1
 802214c:	1cb5      	adds	r5, r6, #2
 802214e:	2b00      	cmp	r3, #0
 8022150:	d05b      	beq.n	802220a <_strtol_l.constprop.0+0xf6>
 8022152:	2b10      	cmp	r3, #16
 8022154:	d109      	bne.n	802216a <_strtol_l.constprop.0+0x56>
 8022156:	2c30      	cmp	r4, #48	; 0x30
 8022158:	d107      	bne.n	802216a <_strtol_l.constprop.0+0x56>
 802215a:	782c      	ldrb	r4, [r5, #0]
 802215c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8022160:	2c58      	cmp	r4, #88	; 0x58
 8022162:	d14d      	bne.n	8022200 <_strtol_l.constprop.0+0xec>
 8022164:	786c      	ldrb	r4, [r5, #1]
 8022166:	2310      	movs	r3, #16
 8022168:	3502      	adds	r5, #2
 802216a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802216e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8022172:	f04f 0c00 	mov.w	ip, #0
 8022176:	fbb8 f9f3 	udiv	r9, r8, r3
 802217a:	4666      	mov	r6, ip
 802217c:	fb03 8a19 	mls	sl, r3, r9, r8
 8022180:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8022184:	f1be 0f09 	cmp.w	lr, #9
 8022188:	d816      	bhi.n	80221b8 <_strtol_l.constprop.0+0xa4>
 802218a:	4674      	mov	r4, lr
 802218c:	42a3      	cmp	r3, r4
 802218e:	dd24      	ble.n	80221da <_strtol_l.constprop.0+0xc6>
 8022190:	f1bc 0f00 	cmp.w	ip, #0
 8022194:	db1e      	blt.n	80221d4 <_strtol_l.constprop.0+0xc0>
 8022196:	45b1      	cmp	r9, r6
 8022198:	d31c      	bcc.n	80221d4 <_strtol_l.constprop.0+0xc0>
 802219a:	d101      	bne.n	80221a0 <_strtol_l.constprop.0+0x8c>
 802219c:	45a2      	cmp	sl, r4
 802219e:	db19      	blt.n	80221d4 <_strtol_l.constprop.0+0xc0>
 80221a0:	fb06 4603 	mla	r6, r6, r3, r4
 80221a4:	f04f 0c01 	mov.w	ip, #1
 80221a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80221ac:	e7e8      	b.n	8022180 <_strtol_l.constprop.0+0x6c>
 80221ae:	2c2b      	cmp	r4, #43	; 0x2b
 80221b0:	bf04      	itt	eq
 80221b2:	782c      	ldrbeq	r4, [r5, #0]
 80221b4:	1cb5      	addeq	r5, r6, #2
 80221b6:	e7ca      	b.n	802214e <_strtol_l.constprop.0+0x3a>
 80221b8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80221bc:	f1be 0f19 	cmp.w	lr, #25
 80221c0:	d801      	bhi.n	80221c6 <_strtol_l.constprop.0+0xb2>
 80221c2:	3c37      	subs	r4, #55	; 0x37
 80221c4:	e7e2      	b.n	802218c <_strtol_l.constprop.0+0x78>
 80221c6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80221ca:	f1be 0f19 	cmp.w	lr, #25
 80221ce:	d804      	bhi.n	80221da <_strtol_l.constprop.0+0xc6>
 80221d0:	3c57      	subs	r4, #87	; 0x57
 80221d2:	e7db      	b.n	802218c <_strtol_l.constprop.0+0x78>
 80221d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80221d8:	e7e6      	b.n	80221a8 <_strtol_l.constprop.0+0x94>
 80221da:	f1bc 0f00 	cmp.w	ip, #0
 80221de:	da05      	bge.n	80221ec <_strtol_l.constprop.0+0xd8>
 80221e0:	2322      	movs	r3, #34	; 0x22
 80221e2:	6003      	str	r3, [r0, #0]
 80221e4:	4646      	mov	r6, r8
 80221e6:	b942      	cbnz	r2, 80221fa <_strtol_l.constprop.0+0xe6>
 80221e8:	4630      	mov	r0, r6
 80221ea:	e79e      	b.n	802212a <_strtol_l.constprop.0+0x16>
 80221ec:	b107      	cbz	r7, 80221f0 <_strtol_l.constprop.0+0xdc>
 80221ee:	4276      	negs	r6, r6
 80221f0:	2a00      	cmp	r2, #0
 80221f2:	d0f9      	beq.n	80221e8 <_strtol_l.constprop.0+0xd4>
 80221f4:	f1bc 0f00 	cmp.w	ip, #0
 80221f8:	d000      	beq.n	80221fc <_strtol_l.constprop.0+0xe8>
 80221fa:	1e69      	subs	r1, r5, #1
 80221fc:	6011      	str	r1, [r2, #0]
 80221fe:	e7f3      	b.n	80221e8 <_strtol_l.constprop.0+0xd4>
 8022200:	2430      	movs	r4, #48	; 0x30
 8022202:	2b00      	cmp	r3, #0
 8022204:	d1b1      	bne.n	802216a <_strtol_l.constprop.0+0x56>
 8022206:	2308      	movs	r3, #8
 8022208:	e7af      	b.n	802216a <_strtol_l.constprop.0+0x56>
 802220a:	2c30      	cmp	r4, #48	; 0x30
 802220c:	d0a5      	beq.n	802215a <_strtol_l.constprop.0+0x46>
 802220e:	230a      	movs	r3, #10
 8022210:	e7ab      	b.n	802216a <_strtol_l.constprop.0+0x56>
 8022212:	bf00      	nop
 8022214:	08028225 	.word	0x08028225

08022218 <strtol>:
 8022218:	4613      	mov	r3, r2
 802221a:	460a      	mov	r2, r1
 802221c:	4601      	mov	r1, r0
 802221e:	4802      	ldr	r0, [pc, #8]	; (8022228 <strtol+0x10>)
 8022220:	6800      	ldr	r0, [r0, #0]
 8022222:	f7ff bf77 	b.w	8022114 <_strtol_l.constprop.0>
 8022226:	bf00      	nop
 8022228:	20000098 	.word	0x20000098

0802222c <__malloc_lock>:
 802222c:	4801      	ldr	r0, [pc, #4]	; (8022234 <__malloc_lock+0x8>)
 802222e:	f000 b809 	b.w	8022244 <__retarget_lock_acquire_recursive>
 8022232:	bf00      	nop
 8022234:	20002278 	.word	0x20002278

08022238 <__malloc_unlock>:
 8022238:	4801      	ldr	r0, [pc, #4]	; (8022240 <__malloc_unlock+0x8>)
 802223a:	f000 b804 	b.w	8022246 <__retarget_lock_release_recursive>
 802223e:	bf00      	nop
 8022240:	20002278 	.word	0x20002278

08022244 <__retarget_lock_acquire_recursive>:
 8022244:	4770      	bx	lr

08022246 <__retarget_lock_release_recursive>:
 8022246:	4770      	bx	lr

08022248 <cos>:
 8022248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802224a:	ec53 2b10 	vmov	r2, r3, d0
 802224e:	4826      	ldr	r0, [pc, #152]	; (80222e8 <cos+0xa0>)
 8022250:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8022254:	4281      	cmp	r1, r0
 8022256:	dc06      	bgt.n	8022266 <cos+0x1e>
 8022258:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80222e0 <cos+0x98>
 802225c:	b005      	add	sp, #20
 802225e:	f85d eb04 	ldr.w	lr, [sp], #4
 8022262:	f001 b9c1 	b.w	80235e8 <__kernel_cos>
 8022266:	4821      	ldr	r0, [pc, #132]	; (80222ec <cos+0xa4>)
 8022268:	4281      	cmp	r1, r0
 802226a:	dd09      	ble.n	8022280 <cos+0x38>
 802226c:	ee10 0a10 	vmov	r0, s0
 8022270:	4619      	mov	r1, r3
 8022272:	f7dd ffc7 	bl	8000204 <__aeabi_dsub>
 8022276:	ec41 0b10 	vmov	d0, r0, r1
 802227a:	b005      	add	sp, #20
 802227c:	f85d fb04 	ldr.w	pc, [sp], #4
 8022280:	4668      	mov	r0, sp
 8022282:	f000 f9fd 	bl	8022680 <__ieee754_rem_pio2>
 8022286:	f000 0003 	and.w	r0, r0, #3
 802228a:	2801      	cmp	r0, #1
 802228c:	d00b      	beq.n	80222a6 <cos+0x5e>
 802228e:	2802      	cmp	r0, #2
 8022290:	d016      	beq.n	80222c0 <cos+0x78>
 8022292:	b9e0      	cbnz	r0, 80222ce <cos+0x86>
 8022294:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022298:	ed9d 0b00 	vldr	d0, [sp]
 802229c:	f001 f9a4 	bl	80235e8 <__kernel_cos>
 80222a0:	ec51 0b10 	vmov	r0, r1, d0
 80222a4:	e7e7      	b.n	8022276 <cos+0x2e>
 80222a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80222aa:	ed9d 0b00 	vldr	d0, [sp]
 80222ae:	f001 fdb3 	bl	8023e18 <__kernel_sin>
 80222b2:	ec53 2b10 	vmov	r2, r3, d0
 80222b6:	ee10 0a10 	vmov	r0, s0
 80222ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80222be:	e7da      	b.n	8022276 <cos+0x2e>
 80222c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80222c4:	ed9d 0b00 	vldr	d0, [sp]
 80222c8:	f001 f98e 	bl	80235e8 <__kernel_cos>
 80222cc:	e7f1      	b.n	80222b2 <cos+0x6a>
 80222ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80222d2:	ed9d 0b00 	vldr	d0, [sp]
 80222d6:	2001      	movs	r0, #1
 80222d8:	f001 fd9e 	bl	8023e18 <__kernel_sin>
 80222dc:	e7e0      	b.n	80222a0 <cos+0x58>
 80222de:	bf00      	nop
	...
 80222e8:	3fe921fb 	.word	0x3fe921fb
 80222ec:	7fefffff 	.word	0x7fefffff

080222f0 <sin>:
 80222f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80222f2:	ec53 2b10 	vmov	r2, r3, d0
 80222f6:	4828      	ldr	r0, [pc, #160]	; (8022398 <sin+0xa8>)
 80222f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80222fc:	4281      	cmp	r1, r0
 80222fe:	dc07      	bgt.n	8022310 <sin+0x20>
 8022300:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8022390 <sin+0xa0>
 8022304:	2000      	movs	r0, #0
 8022306:	b005      	add	sp, #20
 8022308:	f85d eb04 	ldr.w	lr, [sp], #4
 802230c:	f001 bd84 	b.w	8023e18 <__kernel_sin>
 8022310:	4822      	ldr	r0, [pc, #136]	; (802239c <sin+0xac>)
 8022312:	4281      	cmp	r1, r0
 8022314:	dd09      	ble.n	802232a <sin+0x3a>
 8022316:	ee10 0a10 	vmov	r0, s0
 802231a:	4619      	mov	r1, r3
 802231c:	f7dd ff72 	bl	8000204 <__aeabi_dsub>
 8022320:	ec41 0b10 	vmov	d0, r0, r1
 8022324:	b005      	add	sp, #20
 8022326:	f85d fb04 	ldr.w	pc, [sp], #4
 802232a:	4668      	mov	r0, sp
 802232c:	f000 f9a8 	bl	8022680 <__ieee754_rem_pio2>
 8022330:	f000 0003 	and.w	r0, r0, #3
 8022334:	2801      	cmp	r0, #1
 8022336:	d00c      	beq.n	8022352 <sin+0x62>
 8022338:	2802      	cmp	r0, #2
 802233a:	d011      	beq.n	8022360 <sin+0x70>
 802233c:	b9f0      	cbnz	r0, 802237c <sin+0x8c>
 802233e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022342:	ed9d 0b00 	vldr	d0, [sp]
 8022346:	2001      	movs	r0, #1
 8022348:	f001 fd66 	bl	8023e18 <__kernel_sin>
 802234c:	ec51 0b10 	vmov	r0, r1, d0
 8022350:	e7e6      	b.n	8022320 <sin+0x30>
 8022352:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022356:	ed9d 0b00 	vldr	d0, [sp]
 802235a:	f001 f945 	bl	80235e8 <__kernel_cos>
 802235e:	e7f5      	b.n	802234c <sin+0x5c>
 8022360:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022364:	ed9d 0b00 	vldr	d0, [sp]
 8022368:	2001      	movs	r0, #1
 802236a:	f001 fd55 	bl	8023e18 <__kernel_sin>
 802236e:	ec53 2b10 	vmov	r2, r3, d0
 8022372:	ee10 0a10 	vmov	r0, s0
 8022376:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802237a:	e7d1      	b.n	8022320 <sin+0x30>
 802237c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022380:	ed9d 0b00 	vldr	d0, [sp]
 8022384:	f001 f930 	bl	80235e8 <__kernel_cos>
 8022388:	e7f1      	b.n	802236e <sin+0x7e>
 802238a:	bf00      	nop
 802238c:	f3af 8000 	nop.w
	...
 8022398:	3fe921fb 	.word	0x3fe921fb
 802239c:	7fefffff 	.word	0x7fefffff

080223a0 <cosf>:
 80223a0:	ee10 3a10 	vmov	r3, s0
 80223a4:	b507      	push	{r0, r1, r2, lr}
 80223a6:	4a1e      	ldr	r2, [pc, #120]	; (8022420 <cosf+0x80>)
 80223a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80223ac:	4293      	cmp	r3, r2
 80223ae:	dc06      	bgt.n	80223be <cosf+0x1e>
 80223b0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8022424 <cosf+0x84>
 80223b4:	b003      	add	sp, #12
 80223b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80223ba:	f001 bdeb 	b.w	8023f94 <__kernel_cosf>
 80223be:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80223c2:	db04      	blt.n	80223ce <cosf+0x2e>
 80223c4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80223c8:	b003      	add	sp, #12
 80223ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80223ce:	4668      	mov	r0, sp
 80223d0:	f000 ffc8 	bl	8023364 <__ieee754_rem_pio2f>
 80223d4:	f000 0003 	and.w	r0, r0, #3
 80223d8:	2801      	cmp	r0, #1
 80223da:	d009      	beq.n	80223f0 <cosf+0x50>
 80223dc:	2802      	cmp	r0, #2
 80223de:	d010      	beq.n	8022402 <cosf+0x62>
 80223e0:	b9b0      	cbnz	r0, 8022410 <cosf+0x70>
 80223e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80223e6:	ed9d 0a00 	vldr	s0, [sp]
 80223ea:	f001 fdd3 	bl	8023f94 <__kernel_cosf>
 80223ee:	e7eb      	b.n	80223c8 <cosf+0x28>
 80223f0:	eddd 0a01 	vldr	s1, [sp, #4]
 80223f4:	ed9d 0a00 	vldr	s0, [sp]
 80223f8:	f002 f8a2 	bl	8024540 <__kernel_sinf>
 80223fc:	eeb1 0a40 	vneg.f32	s0, s0
 8022400:	e7e2      	b.n	80223c8 <cosf+0x28>
 8022402:	eddd 0a01 	vldr	s1, [sp, #4]
 8022406:	ed9d 0a00 	vldr	s0, [sp]
 802240a:	f001 fdc3 	bl	8023f94 <__kernel_cosf>
 802240e:	e7f5      	b.n	80223fc <cosf+0x5c>
 8022410:	eddd 0a01 	vldr	s1, [sp, #4]
 8022414:	ed9d 0a00 	vldr	s0, [sp]
 8022418:	2001      	movs	r0, #1
 802241a:	f002 f891 	bl	8024540 <__kernel_sinf>
 802241e:	e7d3      	b.n	80223c8 <cosf+0x28>
 8022420:	3f490fd8 	.word	0x3f490fd8
 8022424:	00000000 	.word	0x00000000

08022428 <lrintf>:
 8022428:	ee10 3a10 	vmov	r3, s0
 802242c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8022430:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8022434:	281e      	cmp	r0, #30
 8022436:	b082      	sub	sp, #8
 8022438:	dc2e      	bgt.n	8022498 <lrintf+0x70>
 802243a:	1c41      	adds	r1, r0, #1
 802243c:	da02      	bge.n	8022444 <lrintf+0x1c>
 802243e:	2000      	movs	r0, #0
 8022440:	b002      	add	sp, #8
 8022442:	4770      	bx	lr
 8022444:	2816      	cmp	r0, #22
 8022446:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 802244a:	dd09      	ble.n	8022460 <lrintf+0x38>
 802244c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8022450:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8022454:	3a96      	subs	r2, #150	; 0x96
 8022456:	4090      	lsls	r0, r2
 8022458:	2900      	cmp	r1, #0
 802245a:	d0f1      	beq.n	8022440 <lrintf+0x18>
 802245c:	4240      	negs	r0, r0
 802245e:	e7ef      	b.n	8022440 <lrintf+0x18>
 8022460:	4b10      	ldr	r3, [pc, #64]	; (80224a4 <lrintf+0x7c>)
 8022462:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8022466:	ed93 7a00 	vldr	s14, [r3]
 802246a:	ee37 0a00 	vadd.f32	s0, s14, s0
 802246e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8022472:	eddd 7a01 	vldr	s15, [sp, #4]
 8022476:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802247a:	ee17 3a90 	vmov	r3, s15
 802247e:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8022482:	d0dc      	beq.n	802243e <lrintf+0x16>
 8022484:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8022488:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 802248c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8022490:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8022494:	40d8      	lsrs	r0, r3
 8022496:	e7df      	b.n	8022458 <lrintf+0x30>
 8022498:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802249c:	ee17 0a90 	vmov	r0, s15
 80224a0:	e7ce      	b.n	8022440 <lrintf+0x18>
 80224a2:	bf00      	nop
 80224a4:	08028328 	.word	0x08028328

080224a8 <sinf>:
 80224a8:	ee10 3a10 	vmov	r3, s0
 80224ac:	b507      	push	{r0, r1, r2, lr}
 80224ae:	4a1f      	ldr	r2, [pc, #124]	; (802252c <sinf+0x84>)
 80224b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80224b4:	4293      	cmp	r3, r2
 80224b6:	dc07      	bgt.n	80224c8 <sinf+0x20>
 80224b8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8022530 <sinf+0x88>
 80224bc:	2000      	movs	r0, #0
 80224be:	b003      	add	sp, #12
 80224c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80224c4:	f002 b83c 	b.w	8024540 <__kernel_sinf>
 80224c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80224cc:	db04      	blt.n	80224d8 <sinf+0x30>
 80224ce:	ee30 0a40 	vsub.f32	s0, s0, s0
 80224d2:	b003      	add	sp, #12
 80224d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80224d8:	4668      	mov	r0, sp
 80224da:	f000 ff43 	bl	8023364 <__ieee754_rem_pio2f>
 80224de:	f000 0003 	and.w	r0, r0, #3
 80224e2:	2801      	cmp	r0, #1
 80224e4:	d00a      	beq.n	80224fc <sinf+0x54>
 80224e6:	2802      	cmp	r0, #2
 80224e8:	d00f      	beq.n	802250a <sinf+0x62>
 80224ea:	b9c0      	cbnz	r0, 802251e <sinf+0x76>
 80224ec:	eddd 0a01 	vldr	s1, [sp, #4]
 80224f0:	ed9d 0a00 	vldr	s0, [sp]
 80224f4:	2001      	movs	r0, #1
 80224f6:	f002 f823 	bl	8024540 <__kernel_sinf>
 80224fa:	e7ea      	b.n	80224d2 <sinf+0x2a>
 80224fc:	eddd 0a01 	vldr	s1, [sp, #4]
 8022500:	ed9d 0a00 	vldr	s0, [sp]
 8022504:	f001 fd46 	bl	8023f94 <__kernel_cosf>
 8022508:	e7e3      	b.n	80224d2 <sinf+0x2a>
 802250a:	eddd 0a01 	vldr	s1, [sp, #4]
 802250e:	ed9d 0a00 	vldr	s0, [sp]
 8022512:	2001      	movs	r0, #1
 8022514:	f002 f814 	bl	8024540 <__kernel_sinf>
 8022518:	eeb1 0a40 	vneg.f32	s0, s0
 802251c:	e7d9      	b.n	80224d2 <sinf+0x2a>
 802251e:	eddd 0a01 	vldr	s1, [sp, #4]
 8022522:	ed9d 0a00 	vldr	s0, [sp]
 8022526:	f001 fd35 	bl	8023f94 <__kernel_cosf>
 802252a:	e7f5      	b.n	8022518 <sinf+0x70>
 802252c:	3f490fd8 	.word	0x3f490fd8
 8022530:	00000000 	.word	0x00000000

08022534 <acosf>:
 8022534:	b508      	push	{r3, lr}
 8022536:	ed2d 8b02 	vpush	{d8}
 802253a:	eeb0 8a40 	vmov.f32	s16, s0
 802253e:	f000 faab 	bl	8022a98 <__ieee754_acosf>
 8022542:	eeb4 8a48 	vcmp.f32	s16, s16
 8022546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802254a:	eef0 8a40 	vmov.f32	s17, s0
 802254e:	d615      	bvs.n	802257c <acosf+0x48>
 8022550:	eeb0 0a48 	vmov.f32	s0, s16
 8022554:	f002 fa42 	bl	80249dc <fabsf>
 8022558:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802255c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8022560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022564:	dd0a      	ble.n	802257c <acosf+0x48>
 8022566:	f7ff fbf5 	bl	8021d54 <__errno>
 802256a:	ecbd 8b02 	vpop	{d8}
 802256e:	2321      	movs	r3, #33	; 0x21
 8022570:	6003      	str	r3, [r0, #0]
 8022572:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8022576:	4804      	ldr	r0, [pc, #16]	; (8022588 <acosf+0x54>)
 8022578:	f002 ba86 	b.w	8024a88 <nanf>
 802257c:	eeb0 0a68 	vmov.f32	s0, s17
 8022580:	ecbd 8b02 	vpop	{d8}
 8022584:	bd08      	pop	{r3, pc}
 8022586:	bf00      	nop
 8022588:	08028330 	.word	0x08028330

0802258c <atan2f>:
 802258c:	f000 bb7c 	b.w	8022c88 <__ieee754_atan2f>

08022590 <powf>:
 8022590:	b508      	push	{r3, lr}
 8022592:	ed2d 8b04 	vpush	{d8-d9}
 8022596:	eeb0 8a60 	vmov.f32	s16, s1
 802259a:	eeb0 9a40 	vmov.f32	s18, s0
 802259e:	f000 fc13 	bl	8022dc8 <__ieee754_powf>
 80225a2:	eeb4 8a48 	vcmp.f32	s16, s16
 80225a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225aa:	eef0 8a40 	vmov.f32	s17, s0
 80225ae:	d63e      	bvs.n	802262e <powf+0x9e>
 80225b0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80225b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225b8:	d112      	bne.n	80225e0 <powf+0x50>
 80225ba:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80225be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225c2:	d039      	beq.n	8022638 <powf+0xa8>
 80225c4:	eeb0 0a48 	vmov.f32	s0, s16
 80225c8:	f002 fa0f 	bl	80249ea <finitef>
 80225cc:	b378      	cbz	r0, 802262e <powf+0x9e>
 80225ce:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80225d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225d6:	d52a      	bpl.n	802262e <powf+0x9e>
 80225d8:	f7ff fbbc 	bl	8021d54 <__errno>
 80225dc:	2322      	movs	r3, #34	; 0x22
 80225de:	e014      	b.n	802260a <powf+0x7a>
 80225e0:	f002 fa03 	bl	80249ea <finitef>
 80225e4:	b998      	cbnz	r0, 802260e <powf+0x7e>
 80225e6:	eeb0 0a49 	vmov.f32	s0, s18
 80225ea:	f002 f9fe 	bl	80249ea <finitef>
 80225ee:	b170      	cbz	r0, 802260e <powf+0x7e>
 80225f0:	eeb0 0a48 	vmov.f32	s0, s16
 80225f4:	f002 f9f9 	bl	80249ea <finitef>
 80225f8:	b148      	cbz	r0, 802260e <powf+0x7e>
 80225fa:	eef4 8a68 	vcmp.f32	s17, s17
 80225fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022602:	d7e9      	bvc.n	80225d8 <powf+0x48>
 8022604:	f7ff fba6 	bl	8021d54 <__errno>
 8022608:	2321      	movs	r3, #33	; 0x21
 802260a:	6003      	str	r3, [r0, #0]
 802260c:	e00f      	b.n	802262e <powf+0x9e>
 802260e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8022612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022616:	d10a      	bne.n	802262e <powf+0x9e>
 8022618:	eeb0 0a49 	vmov.f32	s0, s18
 802261c:	f002 f9e5 	bl	80249ea <finitef>
 8022620:	b128      	cbz	r0, 802262e <powf+0x9e>
 8022622:	eeb0 0a48 	vmov.f32	s0, s16
 8022626:	f002 f9e0 	bl	80249ea <finitef>
 802262a:	2800      	cmp	r0, #0
 802262c:	d1d4      	bne.n	80225d8 <powf+0x48>
 802262e:	eeb0 0a68 	vmov.f32	s0, s17
 8022632:	ecbd 8b04 	vpop	{d8-d9}
 8022636:	bd08      	pop	{r3, pc}
 8022638:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 802263c:	e7f7      	b.n	802262e <powf+0x9e>
	...

08022640 <sqrtf>:
 8022640:	b508      	push	{r3, lr}
 8022642:	ed2d 8b02 	vpush	{d8}
 8022646:	eeb0 8a40 	vmov.f32	s16, s0
 802264a:	f000 ffc7 	bl	80235dc <__ieee754_sqrtf>
 802264e:	eeb4 8a48 	vcmp.f32	s16, s16
 8022652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022656:	d60c      	bvs.n	8022672 <sqrtf+0x32>
 8022658:	eddf 8a07 	vldr	s17, [pc, #28]	; 8022678 <sqrtf+0x38>
 802265c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8022660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022664:	d505      	bpl.n	8022672 <sqrtf+0x32>
 8022666:	f7ff fb75 	bl	8021d54 <__errno>
 802266a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802266e:	2321      	movs	r3, #33	; 0x21
 8022670:	6003      	str	r3, [r0, #0]
 8022672:	ecbd 8b02 	vpop	{d8}
 8022676:	bd08      	pop	{r3, pc}
	...

08022680 <__ieee754_rem_pio2>:
 8022680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022684:	ed2d 8b02 	vpush	{d8}
 8022688:	ec55 4b10 	vmov	r4, r5, d0
 802268c:	4bca      	ldr	r3, [pc, #808]	; (80229b8 <__ieee754_rem_pio2+0x338>)
 802268e:	b08b      	sub	sp, #44	; 0x2c
 8022690:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8022694:	4598      	cmp	r8, r3
 8022696:	4682      	mov	sl, r0
 8022698:	9502      	str	r5, [sp, #8]
 802269a:	dc08      	bgt.n	80226ae <__ieee754_rem_pio2+0x2e>
 802269c:	2200      	movs	r2, #0
 802269e:	2300      	movs	r3, #0
 80226a0:	ed80 0b00 	vstr	d0, [r0]
 80226a4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80226a8:	f04f 0b00 	mov.w	fp, #0
 80226ac:	e028      	b.n	8022700 <__ieee754_rem_pio2+0x80>
 80226ae:	4bc3      	ldr	r3, [pc, #780]	; (80229bc <__ieee754_rem_pio2+0x33c>)
 80226b0:	4598      	cmp	r8, r3
 80226b2:	dc78      	bgt.n	80227a6 <__ieee754_rem_pio2+0x126>
 80226b4:	9b02      	ldr	r3, [sp, #8]
 80226b6:	4ec2      	ldr	r6, [pc, #776]	; (80229c0 <__ieee754_rem_pio2+0x340>)
 80226b8:	2b00      	cmp	r3, #0
 80226ba:	ee10 0a10 	vmov	r0, s0
 80226be:	a3b0      	add	r3, pc, #704	; (adr r3, 8022980 <__ieee754_rem_pio2+0x300>)
 80226c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226c4:	4629      	mov	r1, r5
 80226c6:	dd39      	ble.n	802273c <__ieee754_rem_pio2+0xbc>
 80226c8:	f7dd fd9c 	bl	8000204 <__aeabi_dsub>
 80226cc:	45b0      	cmp	r8, r6
 80226ce:	4604      	mov	r4, r0
 80226d0:	460d      	mov	r5, r1
 80226d2:	d01b      	beq.n	802270c <__ieee754_rem_pio2+0x8c>
 80226d4:	a3ac      	add	r3, pc, #688	; (adr r3, 8022988 <__ieee754_rem_pio2+0x308>)
 80226d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226da:	f7dd fd93 	bl	8000204 <__aeabi_dsub>
 80226de:	4602      	mov	r2, r0
 80226e0:	460b      	mov	r3, r1
 80226e2:	e9ca 2300 	strd	r2, r3, [sl]
 80226e6:	4620      	mov	r0, r4
 80226e8:	4629      	mov	r1, r5
 80226ea:	f7dd fd8b 	bl	8000204 <__aeabi_dsub>
 80226ee:	a3a6      	add	r3, pc, #664	; (adr r3, 8022988 <__ieee754_rem_pio2+0x308>)
 80226f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226f4:	f7dd fd86 	bl	8000204 <__aeabi_dsub>
 80226f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80226fc:	f04f 0b01 	mov.w	fp, #1
 8022700:	4658      	mov	r0, fp
 8022702:	b00b      	add	sp, #44	; 0x2c
 8022704:	ecbd 8b02 	vpop	{d8}
 8022708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802270c:	a3a0      	add	r3, pc, #640	; (adr r3, 8022990 <__ieee754_rem_pio2+0x310>)
 802270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022712:	f7dd fd77 	bl	8000204 <__aeabi_dsub>
 8022716:	a3a0      	add	r3, pc, #640	; (adr r3, 8022998 <__ieee754_rem_pio2+0x318>)
 8022718:	e9d3 2300 	ldrd	r2, r3, [r3]
 802271c:	4604      	mov	r4, r0
 802271e:	460d      	mov	r5, r1
 8022720:	f7dd fd70 	bl	8000204 <__aeabi_dsub>
 8022724:	4602      	mov	r2, r0
 8022726:	460b      	mov	r3, r1
 8022728:	e9ca 2300 	strd	r2, r3, [sl]
 802272c:	4620      	mov	r0, r4
 802272e:	4629      	mov	r1, r5
 8022730:	f7dd fd68 	bl	8000204 <__aeabi_dsub>
 8022734:	a398      	add	r3, pc, #608	; (adr r3, 8022998 <__ieee754_rem_pio2+0x318>)
 8022736:	e9d3 2300 	ldrd	r2, r3, [r3]
 802273a:	e7db      	b.n	80226f4 <__ieee754_rem_pio2+0x74>
 802273c:	f7dd fd64 	bl	8000208 <__adddf3>
 8022740:	45b0      	cmp	r8, r6
 8022742:	4604      	mov	r4, r0
 8022744:	460d      	mov	r5, r1
 8022746:	d016      	beq.n	8022776 <__ieee754_rem_pio2+0xf6>
 8022748:	a38f      	add	r3, pc, #572	; (adr r3, 8022988 <__ieee754_rem_pio2+0x308>)
 802274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802274e:	f7dd fd5b 	bl	8000208 <__adddf3>
 8022752:	4602      	mov	r2, r0
 8022754:	460b      	mov	r3, r1
 8022756:	e9ca 2300 	strd	r2, r3, [sl]
 802275a:	4620      	mov	r0, r4
 802275c:	4629      	mov	r1, r5
 802275e:	f7dd fd51 	bl	8000204 <__aeabi_dsub>
 8022762:	a389      	add	r3, pc, #548	; (adr r3, 8022988 <__ieee754_rem_pio2+0x308>)
 8022764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022768:	f7dd fd4e 	bl	8000208 <__adddf3>
 802276c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8022770:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8022774:	e7c4      	b.n	8022700 <__ieee754_rem_pio2+0x80>
 8022776:	a386      	add	r3, pc, #536	; (adr r3, 8022990 <__ieee754_rem_pio2+0x310>)
 8022778:	e9d3 2300 	ldrd	r2, r3, [r3]
 802277c:	f7dd fd44 	bl	8000208 <__adddf3>
 8022780:	a385      	add	r3, pc, #532	; (adr r3, 8022998 <__ieee754_rem_pio2+0x318>)
 8022782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022786:	4604      	mov	r4, r0
 8022788:	460d      	mov	r5, r1
 802278a:	f7dd fd3d 	bl	8000208 <__adddf3>
 802278e:	4602      	mov	r2, r0
 8022790:	460b      	mov	r3, r1
 8022792:	e9ca 2300 	strd	r2, r3, [sl]
 8022796:	4620      	mov	r0, r4
 8022798:	4629      	mov	r1, r5
 802279a:	f7dd fd33 	bl	8000204 <__aeabi_dsub>
 802279e:	a37e      	add	r3, pc, #504	; (adr r3, 8022998 <__ieee754_rem_pio2+0x318>)
 80227a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227a4:	e7e0      	b.n	8022768 <__ieee754_rem_pio2+0xe8>
 80227a6:	4b87      	ldr	r3, [pc, #540]	; (80229c4 <__ieee754_rem_pio2+0x344>)
 80227a8:	4598      	cmp	r8, r3
 80227aa:	f300 80d9 	bgt.w	8022960 <__ieee754_rem_pio2+0x2e0>
 80227ae:	f001 ff31 	bl	8024614 <fabs>
 80227b2:	ec55 4b10 	vmov	r4, r5, d0
 80227b6:	ee10 0a10 	vmov	r0, s0
 80227ba:	a379      	add	r3, pc, #484	; (adr r3, 80229a0 <__ieee754_rem_pio2+0x320>)
 80227bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227c0:	4629      	mov	r1, r5
 80227c2:	f7dd fed7 	bl	8000574 <__aeabi_dmul>
 80227c6:	4b80      	ldr	r3, [pc, #512]	; (80229c8 <__ieee754_rem_pio2+0x348>)
 80227c8:	2200      	movs	r2, #0
 80227ca:	f7dd fd1d 	bl	8000208 <__adddf3>
 80227ce:	f7de f96b 	bl	8000aa8 <__aeabi_d2iz>
 80227d2:	4683      	mov	fp, r0
 80227d4:	f7dd fe64 	bl	80004a0 <__aeabi_i2d>
 80227d8:	4602      	mov	r2, r0
 80227da:	460b      	mov	r3, r1
 80227dc:	ec43 2b18 	vmov	d8, r2, r3
 80227e0:	a367      	add	r3, pc, #412	; (adr r3, 8022980 <__ieee754_rem_pio2+0x300>)
 80227e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227e6:	f7dd fec5 	bl	8000574 <__aeabi_dmul>
 80227ea:	4602      	mov	r2, r0
 80227ec:	460b      	mov	r3, r1
 80227ee:	4620      	mov	r0, r4
 80227f0:	4629      	mov	r1, r5
 80227f2:	f7dd fd07 	bl	8000204 <__aeabi_dsub>
 80227f6:	a364      	add	r3, pc, #400	; (adr r3, 8022988 <__ieee754_rem_pio2+0x308>)
 80227f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227fc:	4606      	mov	r6, r0
 80227fe:	460f      	mov	r7, r1
 8022800:	ec51 0b18 	vmov	r0, r1, d8
 8022804:	f7dd feb6 	bl	8000574 <__aeabi_dmul>
 8022808:	f1bb 0f1f 	cmp.w	fp, #31
 802280c:	4604      	mov	r4, r0
 802280e:	460d      	mov	r5, r1
 8022810:	dc0d      	bgt.n	802282e <__ieee754_rem_pio2+0x1ae>
 8022812:	4b6e      	ldr	r3, [pc, #440]	; (80229cc <__ieee754_rem_pio2+0x34c>)
 8022814:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8022818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802281c:	4543      	cmp	r3, r8
 802281e:	d006      	beq.n	802282e <__ieee754_rem_pio2+0x1ae>
 8022820:	4622      	mov	r2, r4
 8022822:	462b      	mov	r3, r5
 8022824:	4630      	mov	r0, r6
 8022826:	4639      	mov	r1, r7
 8022828:	f7dd fcec 	bl	8000204 <__aeabi_dsub>
 802282c:	e00f      	b.n	802284e <__ieee754_rem_pio2+0x1ce>
 802282e:	462b      	mov	r3, r5
 8022830:	4622      	mov	r2, r4
 8022832:	4630      	mov	r0, r6
 8022834:	4639      	mov	r1, r7
 8022836:	f7dd fce5 	bl	8000204 <__aeabi_dsub>
 802283a:	ea4f 5328 	mov.w	r3, r8, asr #20
 802283e:	9303      	str	r3, [sp, #12]
 8022840:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8022844:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8022848:	f1b8 0f10 	cmp.w	r8, #16
 802284c:	dc02      	bgt.n	8022854 <__ieee754_rem_pio2+0x1d4>
 802284e:	e9ca 0100 	strd	r0, r1, [sl]
 8022852:	e039      	b.n	80228c8 <__ieee754_rem_pio2+0x248>
 8022854:	a34e      	add	r3, pc, #312	; (adr r3, 8022990 <__ieee754_rem_pio2+0x310>)
 8022856:	e9d3 2300 	ldrd	r2, r3, [r3]
 802285a:	ec51 0b18 	vmov	r0, r1, d8
 802285e:	f7dd fe89 	bl	8000574 <__aeabi_dmul>
 8022862:	4604      	mov	r4, r0
 8022864:	460d      	mov	r5, r1
 8022866:	4602      	mov	r2, r0
 8022868:	460b      	mov	r3, r1
 802286a:	4630      	mov	r0, r6
 802286c:	4639      	mov	r1, r7
 802286e:	f7dd fcc9 	bl	8000204 <__aeabi_dsub>
 8022872:	4602      	mov	r2, r0
 8022874:	460b      	mov	r3, r1
 8022876:	4680      	mov	r8, r0
 8022878:	4689      	mov	r9, r1
 802287a:	4630      	mov	r0, r6
 802287c:	4639      	mov	r1, r7
 802287e:	f7dd fcc1 	bl	8000204 <__aeabi_dsub>
 8022882:	4622      	mov	r2, r4
 8022884:	462b      	mov	r3, r5
 8022886:	f7dd fcbd 	bl	8000204 <__aeabi_dsub>
 802288a:	a343      	add	r3, pc, #268	; (adr r3, 8022998 <__ieee754_rem_pio2+0x318>)
 802288c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022890:	4604      	mov	r4, r0
 8022892:	460d      	mov	r5, r1
 8022894:	ec51 0b18 	vmov	r0, r1, d8
 8022898:	f7dd fe6c 	bl	8000574 <__aeabi_dmul>
 802289c:	4622      	mov	r2, r4
 802289e:	462b      	mov	r3, r5
 80228a0:	f7dd fcb0 	bl	8000204 <__aeabi_dsub>
 80228a4:	4602      	mov	r2, r0
 80228a6:	460b      	mov	r3, r1
 80228a8:	4604      	mov	r4, r0
 80228aa:	460d      	mov	r5, r1
 80228ac:	4640      	mov	r0, r8
 80228ae:	4649      	mov	r1, r9
 80228b0:	f7dd fca8 	bl	8000204 <__aeabi_dsub>
 80228b4:	9a03      	ldr	r2, [sp, #12]
 80228b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80228ba:	1ad3      	subs	r3, r2, r3
 80228bc:	2b31      	cmp	r3, #49	; 0x31
 80228be:	dc24      	bgt.n	802290a <__ieee754_rem_pio2+0x28a>
 80228c0:	e9ca 0100 	strd	r0, r1, [sl]
 80228c4:	4646      	mov	r6, r8
 80228c6:	464f      	mov	r7, r9
 80228c8:	e9da 8900 	ldrd	r8, r9, [sl]
 80228cc:	4630      	mov	r0, r6
 80228ce:	4642      	mov	r2, r8
 80228d0:	464b      	mov	r3, r9
 80228d2:	4639      	mov	r1, r7
 80228d4:	f7dd fc96 	bl	8000204 <__aeabi_dsub>
 80228d8:	462b      	mov	r3, r5
 80228da:	4622      	mov	r2, r4
 80228dc:	f7dd fc92 	bl	8000204 <__aeabi_dsub>
 80228e0:	9b02      	ldr	r3, [sp, #8]
 80228e2:	2b00      	cmp	r3, #0
 80228e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80228e8:	f6bf af0a 	bge.w	8022700 <__ieee754_rem_pio2+0x80>
 80228ec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80228f0:	f8ca 3004 	str.w	r3, [sl, #4]
 80228f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80228f8:	f8ca 8000 	str.w	r8, [sl]
 80228fc:	f8ca 0008 	str.w	r0, [sl, #8]
 8022900:	f8ca 300c 	str.w	r3, [sl, #12]
 8022904:	f1cb 0b00 	rsb	fp, fp, #0
 8022908:	e6fa      	b.n	8022700 <__ieee754_rem_pio2+0x80>
 802290a:	a327      	add	r3, pc, #156	; (adr r3, 80229a8 <__ieee754_rem_pio2+0x328>)
 802290c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022910:	ec51 0b18 	vmov	r0, r1, d8
 8022914:	f7dd fe2e 	bl	8000574 <__aeabi_dmul>
 8022918:	4604      	mov	r4, r0
 802291a:	460d      	mov	r5, r1
 802291c:	4602      	mov	r2, r0
 802291e:	460b      	mov	r3, r1
 8022920:	4640      	mov	r0, r8
 8022922:	4649      	mov	r1, r9
 8022924:	f7dd fc6e 	bl	8000204 <__aeabi_dsub>
 8022928:	4602      	mov	r2, r0
 802292a:	460b      	mov	r3, r1
 802292c:	4606      	mov	r6, r0
 802292e:	460f      	mov	r7, r1
 8022930:	4640      	mov	r0, r8
 8022932:	4649      	mov	r1, r9
 8022934:	f7dd fc66 	bl	8000204 <__aeabi_dsub>
 8022938:	4622      	mov	r2, r4
 802293a:	462b      	mov	r3, r5
 802293c:	f7dd fc62 	bl	8000204 <__aeabi_dsub>
 8022940:	a31b      	add	r3, pc, #108	; (adr r3, 80229b0 <__ieee754_rem_pio2+0x330>)
 8022942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022946:	4604      	mov	r4, r0
 8022948:	460d      	mov	r5, r1
 802294a:	ec51 0b18 	vmov	r0, r1, d8
 802294e:	f7dd fe11 	bl	8000574 <__aeabi_dmul>
 8022952:	4622      	mov	r2, r4
 8022954:	462b      	mov	r3, r5
 8022956:	f7dd fc55 	bl	8000204 <__aeabi_dsub>
 802295a:	4604      	mov	r4, r0
 802295c:	460d      	mov	r5, r1
 802295e:	e75f      	b.n	8022820 <__ieee754_rem_pio2+0x1a0>
 8022960:	4b1b      	ldr	r3, [pc, #108]	; (80229d0 <__ieee754_rem_pio2+0x350>)
 8022962:	4598      	cmp	r8, r3
 8022964:	dd36      	ble.n	80229d4 <__ieee754_rem_pio2+0x354>
 8022966:	ee10 2a10 	vmov	r2, s0
 802296a:	462b      	mov	r3, r5
 802296c:	4620      	mov	r0, r4
 802296e:	4629      	mov	r1, r5
 8022970:	f7dd fc48 	bl	8000204 <__aeabi_dsub>
 8022974:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8022978:	e9ca 0100 	strd	r0, r1, [sl]
 802297c:	e694      	b.n	80226a8 <__ieee754_rem_pio2+0x28>
 802297e:	bf00      	nop
 8022980:	54400000 	.word	0x54400000
 8022984:	3ff921fb 	.word	0x3ff921fb
 8022988:	1a626331 	.word	0x1a626331
 802298c:	3dd0b461 	.word	0x3dd0b461
 8022990:	1a600000 	.word	0x1a600000
 8022994:	3dd0b461 	.word	0x3dd0b461
 8022998:	2e037073 	.word	0x2e037073
 802299c:	3ba3198a 	.word	0x3ba3198a
 80229a0:	6dc9c883 	.word	0x6dc9c883
 80229a4:	3fe45f30 	.word	0x3fe45f30
 80229a8:	2e000000 	.word	0x2e000000
 80229ac:	3ba3198a 	.word	0x3ba3198a
 80229b0:	252049c1 	.word	0x252049c1
 80229b4:	397b839a 	.word	0x397b839a
 80229b8:	3fe921fb 	.word	0x3fe921fb
 80229bc:	4002d97b 	.word	0x4002d97b
 80229c0:	3ff921fb 	.word	0x3ff921fb
 80229c4:	413921fb 	.word	0x413921fb
 80229c8:	3fe00000 	.word	0x3fe00000
 80229cc:	08028334 	.word	0x08028334
 80229d0:	7fefffff 	.word	0x7fefffff
 80229d4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80229d8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80229dc:	ee10 0a10 	vmov	r0, s0
 80229e0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80229e4:	ee10 6a10 	vmov	r6, s0
 80229e8:	460f      	mov	r7, r1
 80229ea:	f7de f85d 	bl	8000aa8 <__aeabi_d2iz>
 80229ee:	f7dd fd57 	bl	80004a0 <__aeabi_i2d>
 80229f2:	4602      	mov	r2, r0
 80229f4:	460b      	mov	r3, r1
 80229f6:	4630      	mov	r0, r6
 80229f8:	4639      	mov	r1, r7
 80229fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80229fe:	f7dd fc01 	bl	8000204 <__aeabi_dsub>
 8022a02:	4b23      	ldr	r3, [pc, #140]	; (8022a90 <__ieee754_rem_pio2+0x410>)
 8022a04:	2200      	movs	r2, #0
 8022a06:	f7dd fdb5 	bl	8000574 <__aeabi_dmul>
 8022a0a:	460f      	mov	r7, r1
 8022a0c:	4606      	mov	r6, r0
 8022a0e:	f7de f84b 	bl	8000aa8 <__aeabi_d2iz>
 8022a12:	f7dd fd45 	bl	80004a0 <__aeabi_i2d>
 8022a16:	4602      	mov	r2, r0
 8022a18:	460b      	mov	r3, r1
 8022a1a:	4630      	mov	r0, r6
 8022a1c:	4639      	mov	r1, r7
 8022a1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022a22:	f7dd fbef 	bl	8000204 <__aeabi_dsub>
 8022a26:	4b1a      	ldr	r3, [pc, #104]	; (8022a90 <__ieee754_rem_pio2+0x410>)
 8022a28:	2200      	movs	r2, #0
 8022a2a:	f7dd fda3 	bl	8000574 <__aeabi_dmul>
 8022a2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8022a32:	ad04      	add	r5, sp, #16
 8022a34:	f04f 0803 	mov.w	r8, #3
 8022a38:	46a9      	mov	r9, r5
 8022a3a:	2600      	movs	r6, #0
 8022a3c:	2700      	movs	r7, #0
 8022a3e:	4632      	mov	r2, r6
 8022a40:	463b      	mov	r3, r7
 8022a42:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8022a46:	46c3      	mov	fp, r8
 8022a48:	3d08      	subs	r5, #8
 8022a4a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8022a4e:	f7dd fff9 	bl	8000a44 <__aeabi_dcmpeq>
 8022a52:	2800      	cmp	r0, #0
 8022a54:	d1f3      	bne.n	8022a3e <__ieee754_rem_pio2+0x3be>
 8022a56:	4b0f      	ldr	r3, [pc, #60]	; (8022a94 <__ieee754_rem_pio2+0x414>)
 8022a58:	9301      	str	r3, [sp, #4]
 8022a5a:	2302      	movs	r3, #2
 8022a5c:	9300      	str	r3, [sp, #0]
 8022a5e:	4622      	mov	r2, r4
 8022a60:	465b      	mov	r3, fp
 8022a62:	4651      	mov	r1, sl
 8022a64:	4648      	mov	r0, r9
 8022a66:	f000 fe87 	bl	8023778 <__kernel_rem_pio2>
 8022a6a:	9b02      	ldr	r3, [sp, #8]
 8022a6c:	2b00      	cmp	r3, #0
 8022a6e:	4683      	mov	fp, r0
 8022a70:	f6bf ae46 	bge.w	8022700 <__ieee754_rem_pio2+0x80>
 8022a74:	e9da 2100 	ldrd	r2, r1, [sl]
 8022a78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022a7c:	e9ca 2300 	strd	r2, r3, [sl]
 8022a80:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8022a84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022a88:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8022a8c:	e73a      	b.n	8022904 <__ieee754_rem_pio2+0x284>
 8022a8e:	bf00      	nop
 8022a90:	41700000 	.word	0x41700000
 8022a94:	080283b4 	.word	0x080283b4

08022a98 <__ieee754_acosf>:
 8022a98:	b508      	push	{r3, lr}
 8022a9a:	ee10 3a10 	vmov	r3, s0
 8022a9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8022aa2:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8022aa6:	ed2d 8b0c 	vpush	{d8-d13}
 8022aaa:	d10a      	bne.n	8022ac2 <__ieee754_acosf+0x2a>
 8022aac:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8022c44 <__ieee754_acosf+0x1ac>
 8022ab0:	ed9f 8a65 	vldr	s16, [pc, #404]	; 8022c48 <__ieee754_acosf+0x1b0>
 8022ab4:	2b00      	cmp	r3, #0
 8022ab6:	bfd8      	it	le
 8022ab8:	eeb0 0a48 	vmovle.f32	s0, s16
 8022abc:	ecbd 8b0c 	vpop	{d8-d13}
 8022ac0:	bd08      	pop	{r3, pc}
 8022ac2:	dd04      	ble.n	8022ace <__ieee754_acosf+0x36>
 8022ac4:	ee30 8a40 	vsub.f32	s16, s0, s0
 8022ac8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8022acc:	e7f6      	b.n	8022abc <__ieee754_acosf+0x24>
 8022ace:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8022ad2:	da3c      	bge.n	8022b4e <__ieee754_acosf+0xb6>
 8022ad4:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8022ad8:	f340 80b1 	ble.w	8022c3e <__ieee754_acosf+0x1a6>
 8022adc:	ee60 7a00 	vmul.f32	s15, s0, s0
 8022ae0:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8022c4c <__ieee754_acosf+0x1b4>
 8022ae4:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8022c50 <__ieee754_acosf+0x1b8>
 8022ae8:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8022c54 <__ieee754_acosf+0x1bc>
 8022aec:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 8022c58 <__ieee754_acosf+0x1c0>
 8022af0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8022af4:	eddf 6a59 	vldr	s13, [pc, #356]	; 8022c5c <__ieee754_acosf+0x1c4>
 8022af8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8022afc:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8022c60 <__ieee754_acosf+0x1c8>
 8022b00:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8022b04:	eddf 6a57 	vldr	s13, [pc, #348]	; 8022c64 <__ieee754_acosf+0x1cc>
 8022b08:	eee7 6a27 	vfma.f32	s13, s14, s15
 8022b0c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8022c68 <__ieee754_acosf+0x1d0>
 8022b10:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8022b14:	eddf 6a55 	vldr	s13, [pc, #340]	; 8022c6c <__ieee754_acosf+0x1d4>
 8022b18:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8022b1c:	eddf 6a54 	vldr	s13, [pc, #336]	; 8022c70 <__ieee754_acosf+0x1d8>
 8022b20:	eee6 6a27 	vfma.f32	s13, s12, s15
 8022b24:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8022c74 <__ieee754_acosf+0x1dc>
 8022b28:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8022b2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022b30:	eee6 6a27 	vfma.f32	s13, s12, s15
 8022b34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8022b38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8022b3c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8022b40:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8022c78 <__ieee754_acosf+0x1e0>
 8022b44:	ee30 0a48 	vsub.f32	s0, s0, s16
 8022b48:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8022b4c:	e7b6      	b.n	8022abc <__ieee754_acosf+0x24>
 8022b4e:	2b00      	cmp	r3, #0
 8022b50:	eddf da3e 	vldr	s27, [pc, #248]	; 8022c4c <__ieee754_acosf+0x1b4>
 8022b54:	eddf ca3e 	vldr	s25, [pc, #248]	; 8022c50 <__ieee754_acosf+0x1b8>
 8022b58:	ed9f ca40 	vldr	s24, [pc, #256]	; 8022c5c <__ieee754_acosf+0x1c4>
 8022b5c:	eddf ba40 	vldr	s23, [pc, #256]	; 8022c60 <__ieee754_acosf+0x1c8>
 8022b60:	ed9f ba40 	vldr	s22, [pc, #256]	; 8022c64 <__ieee754_acosf+0x1cc>
 8022b64:	eddf 8a40 	vldr	s17, [pc, #256]	; 8022c68 <__ieee754_acosf+0x1d0>
 8022b68:	ed9f da40 	vldr	s26, [pc, #256]	; 8022c6c <__ieee754_acosf+0x1d4>
 8022b6c:	eddf aa39 	vldr	s21, [pc, #228]	; 8022c54 <__ieee754_acosf+0x1bc>
 8022b70:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8022c70 <__ieee754_acosf+0x1d8>
 8022b74:	eddf 9a3f 	vldr	s19, [pc, #252]	; 8022c74 <__ieee754_acosf+0x1dc>
 8022b78:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8022b7c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8022b80:	da28      	bge.n	8022bd4 <__ieee754_acosf+0x13c>
 8022b82:	ee30 0a09 	vadd.f32	s0, s0, s18
 8022b86:	ee20 0a27 	vmul.f32	s0, s0, s15
 8022b8a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8022b8e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8022b92:	eeac ca80 	vfma.f32	s24, s25, s0
 8022b96:	eeaa aa80 	vfma.f32	s20, s21, s0
 8022b9a:	eeec ba00 	vfma.f32	s23, s24, s0
 8022b9e:	eeea 9a00 	vfma.f32	s19, s20, s0
 8022ba2:	eeab ba80 	vfma.f32	s22, s23, s0
 8022ba6:	eea9 9a80 	vfma.f32	s18, s19, s0
 8022baa:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8022bae:	ee68 8a80 	vmul.f32	s17, s17, s0
 8022bb2:	f000 fd13 	bl	80235dc <__ieee754_sqrtf>
 8022bb6:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8022bba:	eddf 7a30 	vldr	s15, [pc, #192]	; 8022c7c <__ieee754_acosf+0x1e4>
 8022bbe:	eee0 7a07 	vfma.f32	s15, s0, s14
 8022bc2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8022bc6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8022bca:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8022c80 <__ieee754_acosf+0x1e8>
 8022bce:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8022bd2:	e773      	b.n	8022abc <__ieee754_acosf+0x24>
 8022bd4:	ee39 8a40 	vsub.f32	s16, s18, s0
 8022bd8:	ee28 8a27 	vmul.f32	s16, s16, s15
 8022bdc:	eeb0 0a48 	vmov.f32	s0, s16
 8022be0:	f000 fcfc 	bl	80235dc <__ieee754_sqrtf>
 8022be4:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8022be8:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8022bec:	eeac ca88 	vfma.f32	s24, s25, s16
 8022bf0:	eeaa aa88 	vfma.f32	s20, s21, s16
 8022bf4:	eeec ba08 	vfma.f32	s23, s24, s16
 8022bf8:	ee10 3a10 	vmov	r3, s0
 8022bfc:	eeab ba88 	vfma.f32	s22, s23, s16
 8022c00:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8022c04:	f023 030f 	bic.w	r3, r3, #15
 8022c08:	eeea 9a08 	vfma.f32	s19, s20, s16
 8022c0c:	ee07 3a90 	vmov	s15, r3
 8022c10:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8022c14:	eeb0 6a48 	vmov.f32	s12, s16
 8022c18:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8022c1c:	eea9 9a88 	vfma.f32	s18, s19, s16
 8022c20:	ee70 6a27 	vadd.f32	s13, s0, s15
 8022c24:	ee68 8a88 	vmul.f32	s17, s17, s16
 8022c28:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8022c2c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8022c30:	eea0 7a26 	vfma.f32	s14, s0, s13
 8022c34:	ee37 0a87 	vadd.f32	s0, s15, s14
 8022c38:	ee30 0a00 	vadd.f32	s0, s0, s0
 8022c3c:	e73e      	b.n	8022abc <__ieee754_acosf+0x24>
 8022c3e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8022c84 <__ieee754_acosf+0x1ec>
 8022c42:	e73b      	b.n	8022abc <__ieee754_acosf+0x24>
 8022c44:	00000000 	.word	0x00000000
 8022c48:	40490fdb 	.word	0x40490fdb
 8022c4c:	3811ef08 	.word	0x3811ef08
 8022c50:	3a4f7f04 	.word	0x3a4f7f04
 8022c54:	bf303361 	.word	0xbf303361
 8022c58:	33a22168 	.word	0x33a22168
 8022c5c:	bd241146 	.word	0xbd241146
 8022c60:	3e4e0aa8 	.word	0x3e4e0aa8
 8022c64:	bea6b090 	.word	0xbea6b090
 8022c68:	3e2aaaab 	.word	0x3e2aaaab
 8022c6c:	3d9dc62e 	.word	0x3d9dc62e
 8022c70:	4001572d 	.word	0x4001572d
 8022c74:	c019d139 	.word	0xc019d139
 8022c78:	3fc90fda 	.word	0x3fc90fda
 8022c7c:	b3a22168 	.word	0xb3a22168
 8022c80:	40490fda 	.word	0x40490fda
 8022c84:	3fc90fdb 	.word	0x3fc90fdb

08022c88 <__ieee754_atan2f>:
 8022c88:	ee10 2a90 	vmov	r2, s1
 8022c8c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8022c90:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8022c94:	b510      	push	{r4, lr}
 8022c96:	eef0 7a40 	vmov.f32	s15, s0
 8022c9a:	dc06      	bgt.n	8022caa <__ieee754_atan2f+0x22>
 8022c9c:	ee10 0a10 	vmov	r0, s0
 8022ca0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8022ca4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022ca8:	dd04      	ble.n	8022cb4 <__ieee754_atan2f+0x2c>
 8022caa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8022cae:	eeb0 0a67 	vmov.f32	s0, s15
 8022cb2:	bd10      	pop	{r4, pc}
 8022cb4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8022cb8:	d103      	bne.n	8022cc2 <__ieee754_atan2f+0x3a>
 8022cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022cbe:	f001 bdb9 	b.w	8024834 <atanf>
 8022cc2:	1794      	asrs	r4, r2, #30
 8022cc4:	f004 0402 	and.w	r4, r4, #2
 8022cc8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8022ccc:	b943      	cbnz	r3, 8022ce0 <__ieee754_atan2f+0x58>
 8022cce:	2c02      	cmp	r4, #2
 8022cd0:	d05e      	beq.n	8022d90 <__ieee754_atan2f+0x108>
 8022cd2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8022da4 <__ieee754_atan2f+0x11c>
 8022cd6:	2c03      	cmp	r4, #3
 8022cd8:	bf08      	it	eq
 8022cda:	eef0 7a47 	vmoveq.f32	s15, s14
 8022cde:	e7e6      	b.n	8022cae <__ieee754_atan2f+0x26>
 8022ce0:	b941      	cbnz	r1, 8022cf4 <__ieee754_atan2f+0x6c>
 8022ce2:	eddf 7a31 	vldr	s15, [pc, #196]	; 8022da8 <__ieee754_atan2f+0x120>
 8022ce6:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8022dac <__ieee754_atan2f+0x124>
 8022cea:	2800      	cmp	r0, #0
 8022cec:	bfb8      	it	lt
 8022cee:	eef0 7a40 	vmovlt.f32	s15, s0
 8022cf2:	e7dc      	b.n	8022cae <__ieee754_atan2f+0x26>
 8022cf4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8022cf8:	d110      	bne.n	8022d1c <__ieee754_atan2f+0x94>
 8022cfa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022cfe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8022d02:	d107      	bne.n	8022d14 <__ieee754_atan2f+0x8c>
 8022d04:	2c02      	cmp	r4, #2
 8022d06:	d846      	bhi.n	8022d96 <__ieee754_atan2f+0x10e>
 8022d08:	4b29      	ldr	r3, [pc, #164]	; (8022db0 <__ieee754_atan2f+0x128>)
 8022d0a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8022d0e:	edd4 7a00 	vldr	s15, [r4]
 8022d12:	e7cc      	b.n	8022cae <__ieee754_atan2f+0x26>
 8022d14:	2c02      	cmp	r4, #2
 8022d16:	d841      	bhi.n	8022d9c <__ieee754_atan2f+0x114>
 8022d18:	4b26      	ldr	r3, [pc, #152]	; (8022db4 <__ieee754_atan2f+0x12c>)
 8022d1a:	e7f6      	b.n	8022d0a <__ieee754_atan2f+0x82>
 8022d1c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022d20:	d0df      	beq.n	8022ce2 <__ieee754_atan2f+0x5a>
 8022d22:	1a5b      	subs	r3, r3, r1
 8022d24:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8022d28:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8022d2c:	da1a      	bge.n	8022d64 <__ieee754_atan2f+0xdc>
 8022d2e:	2a00      	cmp	r2, #0
 8022d30:	da01      	bge.n	8022d36 <__ieee754_atan2f+0xae>
 8022d32:	313c      	adds	r1, #60	; 0x3c
 8022d34:	db19      	blt.n	8022d6a <__ieee754_atan2f+0xe2>
 8022d36:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8022d3a:	f001 fe4f 	bl	80249dc <fabsf>
 8022d3e:	f001 fd79 	bl	8024834 <atanf>
 8022d42:	eef0 7a40 	vmov.f32	s15, s0
 8022d46:	2c01      	cmp	r4, #1
 8022d48:	d012      	beq.n	8022d70 <__ieee754_atan2f+0xe8>
 8022d4a:	2c02      	cmp	r4, #2
 8022d4c:	d017      	beq.n	8022d7e <__ieee754_atan2f+0xf6>
 8022d4e:	2c00      	cmp	r4, #0
 8022d50:	d0ad      	beq.n	8022cae <__ieee754_atan2f+0x26>
 8022d52:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8022db8 <__ieee754_atan2f+0x130>
 8022d56:	ee77 7a80 	vadd.f32	s15, s15, s0
 8022d5a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8022dbc <__ieee754_atan2f+0x134>
 8022d5e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8022d62:	e7a4      	b.n	8022cae <__ieee754_atan2f+0x26>
 8022d64:	eddf 7a10 	vldr	s15, [pc, #64]	; 8022da8 <__ieee754_atan2f+0x120>
 8022d68:	e7ed      	b.n	8022d46 <__ieee754_atan2f+0xbe>
 8022d6a:	eddf 7a15 	vldr	s15, [pc, #84]	; 8022dc0 <__ieee754_atan2f+0x138>
 8022d6e:	e7ea      	b.n	8022d46 <__ieee754_atan2f+0xbe>
 8022d70:	ee17 3a90 	vmov	r3, s15
 8022d74:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8022d78:	ee07 3a90 	vmov	s15, r3
 8022d7c:	e797      	b.n	8022cae <__ieee754_atan2f+0x26>
 8022d7e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8022db8 <__ieee754_atan2f+0x130>
 8022d82:	ee77 7a80 	vadd.f32	s15, s15, s0
 8022d86:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8022dbc <__ieee754_atan2f+0x134>
 8022d8a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8022d8e:	e78e      	b.n	8022cae <__ieee754_atan2f+0x26>
 8022d90:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8022dbc <__ieee754_atan2f+0x134>
 8022d94:	e78b      	b.n	8022cae <__ieee754_atan2f+0x26>
 8022d96:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8022dc4 <__ieee754_atan2f+0x13c>
 8022d9a:	e788      	b.n	8022cae <__ieee754_atan2f+0x26>
 8022d9c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8022dc0 <__ieee754_atan2f+0x138>
 8022da0:	e785      	b.n	8022cae <__ieee754_atan2f+0x26>
 8022da2:	bf00      	nop
 8022da4:	c0490fdb 	.word	0xc0490fdb
 8022da8:	3fc90fdb 	.word	0x3fc90fdb
 8022dac:	bfc90fdb 	.word	0xbfc90fdb
 8022db0:	080284bc 	.word	0x080284bc
 8022db4:	080284c8 	.word	0x080284c8
 8022db8:	33bbbd2e 	.word	0x33bbbd2e
 8022dbc:	40490fdb 	.word	0x40490fdb
 8022dc0:	00000000 	.word	0x00000000
 8022dc4:	3f490fdb 	.word	0x3f490fdb

08022dc8 <__ieee754_powf>:
 8022dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022dcc:	ee10 4a90 	vmov	r4, s1
 8022dd0:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8022dd4:	ed2d 8b02 	vpush	{d8}
 8022dd8:	ee10 6a10 	vmov	r6, s0
 8022ddc:	eeb0 8a40 	vmov.f32	s16, s0
 8022de0:	eef0 8a60 	vmov.f32	s17, s1
 8022de4:	d10c      	bne.n	8022e00 <__ieee754_powf+0x38>
 8022de6:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8022dea:	0076      	lsls	r6, r6, #1
 8022dec:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8022df0:	f240 8296 	bls.w	8023320 <__ieee754_powf+0x558>
 8022df4:	ee38 0a28 	vadd.f32	s0, s16, s17
 8022df8:	ecbd 8b02 	vpop	{d8}
 8022dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022e00:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8022e04:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8022e08:	dcf4      	bgt.n	8022df4 <__ieee754_powf+0x2c>
 8022e0a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8022e0e:	dd08      	ble.n	8022e22 <__ieee754_powf+0x5a>
 8022e10:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8022e14:	d1ee      	bne.n	8022df4 <__ieee754_powf+0x2c>
 8022e16:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8022e1a:	0064      	lsls	r4, r4, #1
 8022e1c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8022e20:	e7e6      	b.n	8022df0 <__ieee754_powf+0x28>
 8022e22:	2e00      	cmp	r6, #0
 8022e24:	da20      	bge.n	8022e68 <__ieee754_powf+0xa0>
 8022e26:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8022e2a:	da2d      	bge.n	8022e88 <__ieee754_powf+0xc0>
 8022e2c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8022e30:	f2c0 827f 	blt.w	8023332 <__ieee754_powf+0x56a>
 8022e34:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8022e38:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8022e3c:	fa48 f703 	asr.w	r7, r8, r3
 8022e40:	fa07 f303 	lsl.w	r3, r7, r3
 8022e44:	4543      	cmp	r3, r8
 8022e46:	f040 8274 	bne.w	8023332 <__ieee754_powf+0x56a>
 8022e4a:	f007 0701 	and.w	r7, r7, #1
 8022e4e:	f1c7 0702 	rsb	r7, r7, #2
 8022e52:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8022e56:	d11f      	bne.n	8022e98 <__ieee754_powf+0xd0>
 8022e58:	2c00      	cmp	r4, #0
 8022e5a:	f280 8267 	bge.w	802332c <__ieee754_powf+0x564>
 8022e5e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8022e62:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8022e66:	e7c7      	b.n	8022df8 <__ieee754_powf+0x30>
 8022e68:	2700      	movs	r7, #0
 8022e6a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8022e6e:	d1f0      	bne.n	8022e52 <__ieee754_powf+0x8a>
 8022e70:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8022e74:	f000 8254 	beq.w	8023320 <__ieee754_powf+0x558>
 8022e78:	dd08      	ble.n	8022e8c <__ieee754_powf+0xc4>
 8022e7a:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8023184 <__ieee754_powf+0x3bc>
 8022e7e:	2c00      	cmp	r4, #0
 8022e80:	bfa8      	it	ge
 8022e82:	eeb0 0a68 	vmovge.f32	s0, s17
 8022e86:	e7b7      	b.n	8022df8 <__ieee754_powf+0x30>
 8022e88:	2702      	movs	r7, #2
 8022e8a:	e7ee      	b.n	8022e6a <__ieee754_powf+0xa2>
 8022e8c:	2c00      	cmp	r4, #0
 8022e8e:	f280 824a 	bge.w	8023326 <__ieee754_powf+0x55e>
 8022e92:	eeb1 0a68 	vneg.f32	s0, s17
 8022e96:	e7af      	b.n	8022df8 <__ieee754_powf+0x30>
 8022e98:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8022e9c:	d102      	bne.n	8022ea4 <__ieee754_powf+0xdc>
 8022e9e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8022ea2:	e7a9      	b.n	8022df8 <__ieee754_powf+0x30>
 8022ea4:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8022ea8:	eeb0 0a48 	vmov.f32	s0, s16
 8022eac:	d107      	bne.n	8022ebe <__ieee754_powf+0xf6>
 8022eae:	2e00      	cmp	r6, #0
 8022eb0:	db05      	blt.n	8022ebe <__ieee754_powf+0xf6>
 8022eb2:	ecbd 8b02 	vpop	{d8}
 8022eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022eba:	f000 bb8f 	b.w	80235dc <__ieee754_sqrtf>
 8022ebe:	f001 fd8d 	bl	80249dc <fabsf>
 8022ec2:	b125      	cbz	r5, 8022ece <__ieee754_powf+0x106>
 8022ec4:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8022ec8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8022ecc:	d116      	bne.n	8022efc <__ieee754_powf+0x134>
 8022ece:	2c00      	cmp	r4, #0
 8022ed0:	bfbc      	itt	lt
 8022ed2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8022ed6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8022eda:	2e00      	cmp	r6, #0
 8022edc:	da8c      	bge.n	8022df8 <__ieee754_powf+0x30>
 8022ede:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8022ee2:	ea55 0307 	orrs.w	r3, r5, r7
 8022ee6:	d104      	bne.n	8022ef2 <__ieee754_powf+0x12a>
 8022ee8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8022eec:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8022ef0:	e782      	b.n	8022df8 <__ieee754_powf+0x30>
 8022ef2:	2f01      	cmp	r7, #1
 8022ef4:	d180      	bne.n	8022df8 <__ieee754_powf+0x30>
 8022ef6:	eeb1 0a40 	vneg.f32	s0, s0
 8022efa:	e77d      	b.n	8022df8 <__ieee754_powf+0x30>
 8022efc:	0ff0      	lsrs	r0, r6, #31
 8022efe:	3801      	subs	r0, #1
 8022f00:	ea57 0300 	orrs.w	r3, r7, r0
 8022f04:	d104      	bne.n	8022f10 <__ieee754_powf+0x148>
 8022f06:	ee38 8a48 	vsub.f32	s16, s16, s16
 8022f0a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8022f0e:	e773      	b.n	8022df8 <__ieee754_powf+0x30>
 8022f10:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8022f14:	dd74      	ble.n	8023000 <__ieee754_powf+0x238>
 8022f16:	4b9c      	ldr	r3, [pc, #624]	; (8023188 <__ieee754_powf+0x3c0>)
 8022f18:	429d      	cmp	r5, r3
 8022f1a:	dc08      	bgt.n	8022f2e <__ieee754_powf+0x166>
 8022f1c:	2c00      	cmp	r4, #0
 8022f1e:	da0b      	bge.n	8022f38 <__ieee754_powf+0x170>
 8022f20:	2000      	movs	r0, #0
 8022f22:	ecbd 8b02 	vpop	{d8}
 8022f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022f2a:	f001 bb6d 	b.w	8024608 <__math_oflowf>
 8022f2e:	4b97      	ldr	r3, [pc, #604]	; (802318c <__ieee754_powf+0x3c4>)
 8022f30:	429d      	cmp	r5, r3
 8022f32:	dd08      	ble.n	8022f46 <__ieee754_powf+0x17e>
 8022f34:	2c00      	cmp	r4, #0
 8022f36:	dcf3      	bgt.n	8022f20 <__ieee754_powf+0x158>
 8022f38:	2000      	movs	r0, #0
 8022f3a:	ecbd 8b02 	vpop	{d8}
 8022f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022f42:	f001 bb5b 	b.w	80245fc <__math_uflowf>
 8022f46:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8022f4a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8022f4e:	eddf 6a90 	vldr	s13, [pc, #576]	; 8023190 <__ieee754_powf+0x3c8>
 8022f52:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8022f56:	eee0 6a67 	vfms.f32	s13, s0, s15
 8022f5a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8022f5e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8022f62:	ee20 7a00 	vmul.f32	s14, s0, s0
 8022f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022f6a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8023194 <__ieee754_powf+0x3cc>
 8022f6e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8022f72:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8023198 <__ieee754_powf+0x3d0>
 8022f76:	eee0 7a07 	vfma.f32	s15, s0, s14
 8022f7a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 802319c <__ieee754_powf+0x3d4>
 8022f7e:	eef0 6a67 	vmov.f32	s13, s15
 8022f82:	eee0 6a07 	vfma.f32	s13, s0, s14
 8022f86:	ee16 3a90 	vmov	r3, s13
 8022f8a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8022f8e:	f023 030f 	bic.w	r3, r3, #15
 8022f92:	ee00 3a90 	vmov	s1, r3
 8022f96:	eee0 0a47 	vfms.f32	s1, s0, s14
 8022f9a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8022f9e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8022fa2:	f024 040f 	bic.w	r4, r4, #15
 8022fa6:	ee07 4a10 	vmov	s14, r4
 8022faa:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8022fae:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8022fb2:	ee07 3a90 	vmov	s15, r3
 8022fb6:	eee7 0a27 	vfma.f32	s1, s14, s15
 8022fba:	3f01      	subs	r7, #1
 8022fbc:	ea57 0200 	orrs.w	r2, r7, r0
 8022fc0:	ee07 4a10 	vmov	s14, r4
 8022fc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022fc8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8022fcc:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8022fd0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8022fd4:	ee17 4a10 	vmov	r4, s14
 8022fd8:	bf08      	it	eq
 8022fda:	eeb0 8a40 	vmoveq.f32	s16, s0
 8022fde:	2c00      	cmp	r4, #0
 8022fe0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8022fe4:	f340 817e 	ble.w	80232e4 <__ieee754_powf+0x51c>
 8022fe8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8022fec:	f340 80f8 	ble.w	80231e0 <__ieee754_powf+0x418>
 8022ff0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8022ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022ff8:	bf4c      	ite	mi
 8022ffa:	2001      	movmi	r0, #1
 8022ffc:	2000      	movpl	r0, #0
 8022ffe:	e790      	b.n	8022f22 <__ieee754_powf+0x15a>
 8023000:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8023004:	bf01      	itttt	eq
 8023006:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80231a0 <__ieee754_powf+0x3d8>
 802300a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 802300e:	f06f 0217 	mvneq.w	r2, #23
 8023012:	ee17 5a90 	vmoveq	r5, s15
 8023016:	ea4f 53e5 	mov.w	r3, r5, asr #23
 802301a:	bf18      	it	ne
 802301c:	2200      	movne	r2, #0
 802301e:	3b7f      	subs	r3, #127	; 0x7f
 8023020:	4413      	add	r3, r2
 8023022:	4a60      	ldr	r2, [pc, #384]	; (80231a4 <__ieee754_powf+0x3dc>)
 8023024:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8023028:	4295      	cmp	r5, r2
 802302a:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 802302e:	dd06      	ble.n	802303e <__ieee754_powf+0x276>
 8023030:	4a5d      	ldr	r2, [pc, #372]	; (80231a8 <__ieee754_powf+0x3e0>)
 8023032:	4295      	cmp	r5, r2
 8023034:	f340 80a4 	ble.w	8023180 <__ieee754_powf+0x3b8>
 8023038:	3301      	adds	r3, #1
 802303a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 802303e:	2500      	movs	r5, #0
 8023040:	4a5a      	ldr	r2, [pc, #360]	; (80231ac <__ieee754_powf+0x3e4>)
 8023042:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8023046:	ee07 1a90 	vmov	s15, r1
 802304a:	ed92 7a00 	vldr	s14, [r2]
 802304e:	4a58      	ldr	r2, [pc, #352]	; (80231b0 <__ieee754_powf+0x3e8>)
 8023050:	ee37 6a27 	vadd.f32	s12, s14, s15
 8023054:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8023058:	eec5 6a86 	vdiv.f32	s13, s11, s12
 802305c:	1049      	asrs	r1, r1, #1
 802305e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8023062:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8023066:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 802306a:	ee37 5ac7 	vsub.f32	s10, s15, s14
 802306e:	ee06 1a10 	vmov	s12, r1
 8023072:	ee65 4a26 	vmul.f32	s9, s10, s13
 8023076:	ee36 7a47 	vsub.f32	s14, s12, s14
 802307a:	ee14 6a90 	vmov	r6, s9
 802307e:	4016      	ands	r6, r2
 8023080:	ee05 6a90 	vmov	s11, r6
 8023084:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8023088:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802308c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80231b4 <__ieee754_powf+0x3ec>
 8023090:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8023094:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8023098:	ee25 6a26 	vmul.f32	s12, s10, s13
 802309c:	eddf 6a46 	vldr	s13, [pc, #280]	; 80231b8 <__ieee754_powf+0x3f0>
 80230a0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80230a4:	eddf 6a45 	vldr	s13, [pc, #276]	; 80231bc <__ieee754_powf+0x3f4>
 80230a8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80230ac:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8023190 <__ieee754_powf+0x3c8>
 80230b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80230b4:	eddf 6a42 	vldr	s13, [pc, #264]	; 80231c0 <__ieee754_powf+0x3f8>
 80230b8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80230bc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80231c4 <__ieee754_powf+0x3fc>
 80230c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80230c4:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80230c8:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80230cc:	ee66 6a86 	vmul.f32	s13, s13, s12
 80230d0:	eee5 6a07 	vfma.f32	s13, s10, s14
 80230d4:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80230d8:	eef0 7a45 	vmov.f32	s15, s10
 80230dc:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80230e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80230e4:	ee17 1a90 	vmov	r1, s15
 80230e8:	4011      	ands	r1, r2
 80230ea:	ee07 1a90 	vmov	s15, r1
 80230ee:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80230f2:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80230f6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80230fa:	ee27 7a24 	vmul.f32	s14, s14, s9
 80230fe:	eea6 7a27 	vfma.f32	s14, s12, s15
 8023102:	eeb0 6a47 	vmov.f32	s12, s14
 8023106:	eea5 6aa7 	vfma.f32	s12, s11, s15
 802310a:	ee16 1a10 	vmov	r1, s12
 802310e:	4011      	ands	r1, r2
 8023110:	ee06 1a90 	vmov	s13, r1
 8023114:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8023118:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80231c8 <__ieee754_powf+0x400>
 802311c:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80231cc <__ieee754_powf+0x404>
 8023120:	ee37 7a66 	vsub.f32	s14, s14, s13
 8023124:	ee06 1a10 	vmov	s12, r1
 8023128:	ee27 7a27 	vmul.f32	s14, s14, s15
 802312c:	eddf 7a28 	vldr	s15, [pc, #160]	; 80231d0 <__ieee754_powf+0x408>
 8023130:	4928      	ldr	r1, [pc, #160]	; (80231d4 <__ieee754_powf+0x40c>)
 8023132:	eea6 7a27 	vfma.f32	s14, s12, s15
 8023136:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 802313a:	edd1 7a00 	vldr	s15, [r1]
 802313e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8023142:	ee07 3a90 	vmov	s15, r3
 8023146:	4b24      	ldr	r3, [pc, #144]	; (80231d8 <__ieee754_powf+0x410>)
 8023148:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 802314c:	eef0 7a47 	vmov.f32	s15, s14
 8023150:	eee6 7a25 	vfma.f32	s15, s12, s11
 8023154:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8023158:	edd5 0a00 	vldr	s1, [r5]
 802315c:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8023160:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8023164:	ee17 3a90 	vmov	r3, s15
 8023168:	4013      	ands	r3, r2
 802316a:	ee07 3a90 	vmov	s15, r3
 802316e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8023172:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8023176:	eee6 6a65 	vfms.f32	s13, s12, s11
 802317a:	ee77 7a66 	vsub.f32	s15, s14, s13
 802317e:	e70e      	b.n	8022f9e <__ieee754_powf+0x1d6>
 8023180:	2501      	movs	r5, #1
 8023182:	e75d      	b.n	8023040 <__ieee754_powf+0x278>
 8023184:	00000000 	.word	0x00000000
 8023188:	3f7ffff3 	.word	0x3f7ffff3
 802318c:	3f800007 	.word	0x3f800007
 8023190:	3eaaaaab 	.word	0x3eaaaaab
 8023194:	3fb8aa3b 	.word	0x3fb8aa3b
 8023198:	36eca570 	.word	0x36eca570
 802319c:	3fb8aa00 	.word	0x3fb8aa00
 80231a0:	4b800000 	.word	0x4b800000
 80231a4:	001cc471 	.word	0x001cc471
 80231a8:	005db3d6 	.word	0x005db3d6
 80231ac:	080284d4 	.word	0x080284d4
 80231b0:	fffff000 	.word	0xfffff000
 80231b4:	3e6c3255 	.word	0x3e6c3255
 80231b8:	3e53f142 	.word	0x3e53f142
 80231bc:	3e8ba305 	.word	0x3e8ba305
 80231c0:	3edb6db7 	.word	0x3edb6db7
 80231c4:	3f19999a 	.word	0x3f19999a
 80231c8:	3f76384f 	.word	0x3f76384f
 80231cc:	3f763800 	.word	0x3f763800
 80231d0:	369dc3a0 	.word	0x369dc3a0
 80231d4:	080284e4 	.word	0x080284e4
 80231d8:	080284dc 	.word	0x080284dc
 80231dc:	3338aa3c 	.word	0x3338aa3c
 80231e0:	f040 8095 	bne.w	802330e <__ieee754_powf+0x546>
 80231e4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80231dc <__ieee754_powf+0x414>
 80231e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80231ec:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80231f0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80231f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80231f8:	f73f aefa 	bgt.w	8022ff0 <__ieee754_powf+0x228>
 80231fc:	15db      	asrs	r3, r3, #23
 80231fe:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8023202:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8023206:	4103      	asrs	r3, r0
 8023208:	4423      	add	r3, r4
 802320a:	494b      	ldr	r1, [pc, #300]	; (8023338 <__ieee754_powf+0x570>)
 802320c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8023210:	3a7f      	subs	r2, #127	; 0x7f
 8023212:	4111      	asrs	r1, r2
 8023214:	ea23 0101 	bic.w	r1, r3, r1
 8023218:	ee07 1a10 	vmov	s14, r1
 802321c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8023220:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8023224:	f1c2 0217 	rsb	r2, r2, #23
 8023228:	4110      	asrs	r0, r2
 802322a:	2c00      	cmp	r4, #0
 802322c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023230:	bfb8      	it	lt
 8023232:	4240      	neglt	r0, r0
 8023234:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8023238:	ed9f 0a40 	vldr	s0, [pc, #256]	; 802333c <__ieee754_powf+0x574>
 802323c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8023340 <__ieee754_powf+0x578>
 8023240:	ee17 3a10 	vmov	r3, s14
 8023244:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8023248:	f023 030f 	bic.w	r3, r3, #15
 802324c:	ee07 3a10 	vmov	s14, r3
 8023250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023254:	ee27 0a00 	vmul.f32	s0, s14, s0
 8023258:	ee70 0ae7 	vsub.f32	s1, s1, s15
 802325c:	eddf 7a39 	vldr	s15, [pc, #228]	; 8023344 <__ieee754_powf+0x57c>
 8023260:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8023264:	eef0 7a40 	vmov.f32	s15, s0
 8023268:	eee7 7a26 	vfma.f32	s15, s14, s13
 802326c:	eeb0 6a67 	vmov.f32	s12, s15
 8023270:	eea7 6a66 	vfms.f32	s12, s14, s13
 8023274:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8023278:	ee30 0a46 	vsub.f32	s0, s0, s12
 802327c:	eddf 6a32 	vldr	s13, [pc, #200]	; 8023348 <__ieee754_powf+0x580>
 8023280:	ed9f 6a32 	vldr	s12, [pc, #200]	; 802334c <__ieee754_powf+0x584>
 8023284:	eee7 6a06 	vfma.f32	s13, s14, s12
 8023288:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8023350 <__ieee754_powf+0x588>
 802328c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8023290:	eddf 6a30 	vldr	s13, [pc, #192]	; 8023354 <__ieee754_powf+0x58c>
 8023294:	eee6 6a07 	vfma.f32	s13, s12, s14
 8023298:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8023358 <__ieee754_powf+0x590>
 802329c:	eea6 6a87 	vfma.f32	s12, s13, s14
 80232a0:	eef0 6a67 	vmov.f32	s13, s15
 80232a4:	eee6 6a47 	vfms.f32	s13, s12, s14
 80232a8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80232ac:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80232b0:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80232b4:	eea7 0a80 	vfma.f32	s0, s15, s0
 80232b8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80232bc:	ee37 0a40 	vsub.f32	s0, s14, s0
 80232c0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80232c4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80232c8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80232cc:	ee10 3a10 	vmov	r3, s0
 80232d0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80232d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80232d8:	da1f      	bge.n	802331a <__ieee754_powf+0x552>
 80232da:	f001 fbdb 	bl	8024a94 <scalbnf>
 80232de:	ee20 0a08 	vmul.f32	s0, s0, s16
 80232e2:	e589      	b.n	8022df8 <__ieee754_powf+0x30>
 80232e4:	4a1d      	ldr	r2, [pc, #116]	; (802335c <__ieee754_powf+0x594>)
 80232e6:	4293      	cmp	r3, r2
 80232e8:	dd07      	ble.n	80232fa <__ieee754_powf+0x532>
 80232ea:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80232ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80232f2:	bf4c      	ite	mi
 80232f4:	2001      	movmi	r0, #1
 80232f6:	2000      	movpl	r0, #0
 80232f8:	e61f      	b.n	8022f3a <__ieee754_powf+0x172>
 80232fa:	d108      	bne.n	802330e <__ieee754_powf+0x546>
 80232fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8023300:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8023304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023308:	f6ff af78 	blt.w	80231fc <__ieee754_powf+0x434>
 802330c:	e7ed      	b.n	80232ea <__ieee754_powf+0x522>
 802330e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8023312:	f73f af73 	bgt.w	80231fc <__ieee754_powf+0x434>
 8023316:	2000      	movs	r0, #0
 8023318:	e78c      	b.n	8023234 <__ieee754_powf+0x46c>
 802331a:	ee00 3a10 	vmov	s0, r3
 802331e:	e7de      	b.n	80232de <__ieee754_powf+0x516>
 8023320:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8023324:	e568      	b.n	8022df8 <__ieee754_powf+0x30>
 8023326:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8023360 <__ieee754_powf+0x598>
 802332a:	e565      	b.n	8022df8 <__ieee754_powf+0x30>
 802332c:	eeb0 0a48 	vmov.f32	s0, s16
 8023330:	e562      	b.n	8022df8 <__ieee754_powf+0x30>
 8023332:	2700      	movs	r7, #0
 8023334:	e58d      	b.n	8022e52 <__ieee754_powf+0x8a>
 8023336:	bf00      	nop
 8023338:	007fffff 	.word	0x007fffff
 802333c:	35bfbe8c 	.word	0x35bfbe8c
 8023340:	3f317200 	.word	0x3f317200
 8023344:	3f317218 	.word	0x3f317218
 8023348:	b5ddea0e 	.word	0xb5ddea0e
 802334c:	3331bb4c 	.word	0x3331bb4c
 8023350:	388ab355 	.word	0x388ab355
 8023354:	bb360b61 	.word	0xbb360b61
 8023358:	3e2aaaab 	.word	0x3e2aaaab
 802335c:	43160000 	.word	0x43160000
 8023360:	00000000 	.word	0x00000000

08023364 <__ieee754_rem_pio2f>:
 8023364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023366:	ee10 6a10 	vmov	r6, s0
 802336a:	4b8e      	ldr	r3, [pc, #568]	; (80235a4 <__ieee754_rem_pio2f+0x240>)
 802336c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8023370:	429d      	cmp	r5, r3
 8023372:	b087      	sub	sp, #28
 8023374:	eef0 7a40 	vmov.f32	s15, s0
 8023378:	4604      	mov	r4, r0
 802337a:	dc05      	bgt.n	8023388 <__ieee754_rem_pio2f+0x24>
 802337c:	2300      	movs	r3, #0
 802337e:	ed80 0a00 	vstr	s0, [r0]
 8023382:	6043      	str	r3, [r0, #4]
 8023384:	2000      	movs	r0, #0
 8023386:	e01a      	b.n	80233be <__ieee754_rem_pio2f+0x5a>
 8023388:	4b87      	ldr	r3, [pc, #540]	; (80235a8 <__ieee754_rem_pio2f+0x244>)
 802338a:	429d      	cmp	r5, r3
 802338c:	dc46      	bgt.n	802341c <__ieee754_rem_pio2f+0xb8>
 802338e:	2e00      	cmp	r6, #0
 8023390:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80235ac <__ieee754_rem_pio2f+0x248>
 8023394:	4b86      	ldr	r3, [pc, #536]	; (80235b0 <__ieee754_rem_pio2f+0x24c>)
 8023396:	f025 050f 	bic.w	r5, r5, #15
 802339a:	dd1f      	ble.n	80233dc <__ieee754_rem_pio2f+0x78>
 802339c:	429d      	cmp	r5, r3
 802339e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80233a2:	d00e      	beq.n	80233c2 <__ieee754_rem_pio2f+0x5e>
 80233a4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80235b4 <__ieee754_rem_pio2f+0x250>
 80233a8:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80233ac:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80233b0:	ed80 0a00 	vstr	s0, [r0]
 80233b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80233b8:	2001      	movs	r0, #1
 80233ba:	edc4 7a01 	vstr	s15, [r4, #4]
 80233be:	b007      	add	sp, #28
 80233c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80233c2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80235b8 <__ieee754_rem_pio2f+0x254>
 80233c6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80235bc <__ieee754_rem_pio2f+0x258>
 80233ca:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80233ce:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80233d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80233d6:	edc0 6a00 	vstr	s13, [r0]
 80233da:	e7eb      	b.n	80233b4 <__ieee754_rem_pio2f+0x50>
 80233dc:	429d      	cmp	r5, r3
 80233de:	ee77 7a80 	vadd.f32	s15, s15, s0
 80233e2:	d00e      	beq.n	8023402 <__ieee754_rem_pio2f+0x9e>
 80233e4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80235b4 <__ieee754_rem_pio2f+0x250>
 80233e8:	ee37 0a87 	vadd.f32	s0, s15, s14
 80233ec:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80233f0:	ed80 0a00 	vstr	s0, [r0]
 80233f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80233f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80233fc:	edc4 7a01 	vstr	s15, [r4, #4]
 8023400:	e7dd      	b.n	80233be <__ieee754_rem_pio2f+0x5a>
 8023402:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80235b8 <__ieee754_rem_pio2f+0x254>
 8023406:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80235bc <__ieee754_rem_pio2f+0x258>
 802340a:	ee77 7a80 	vadd.f32	s15, s15, s0
 802340e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8023412:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8023416:	edc0 6a00 	vstr	s13, [r0]
 802341a:	e7eb      	b.n	80233f4 <__ieee754_rem_pio2f+0x90>
 802341c:	4b68      	ldr	r3, [pc, #416]	; (80235c0 <__ieee754_rem_pio2f+0x25c>)
 802341e:	429d      	cmp	r5, r3
 8023420:	dc72      	bgt.n	8023508 <__ieee754_rem_pio2f+0x1a4>
 8023422:	f001 fadb 	bl	80249dc <fabsf>
 8023426:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80235c4 <__ieee754_rem_pio2f+0x260>
 802342a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802342e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8023432:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802343a:	ee17 0a90 	vmov	r0, s15
 802343e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80235ac <__ieee754_rem_pio2f+0x248>
 8023442:	eea7 0a67 	vfms.f32	s0, s14, s15
 8023446:	281f      	cmp	r0, #31
 8023448:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80235b4 <__ieee754_rem_pio2f+0x250>
 802344c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8023450:	eeb1 6a47 	vneg.f32	s12, s14
 8023454:	ee70 6a67 	vsub.f32	s13, s0, s15
 8023458:	ee16 2a90 	vmov	r2, s13
 802345c:	dc1c      	bgt.n	8023498 <__ieee754_rem_pio2f+0x134>
 802345e:	495a      	ldr	r1, [pc, #360]	; (80235c8 <__ieee754_rem_pio2f+0x264>)
 8023460:	1e47      	subs	r7, r0, #1
 8023462:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8023466:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802346a:	428b      	cmp	r3, r1
 802346c:	d014      	beq.n	8023498 <__ieee754_rem_pio2f+0x134>
 802346e:	6022      	str	r2, [r4, #0]
 8023470:	ed94 7a00 	vldr	s14, [r4]
 8023474:	ee30 0a47 	vsub.f32	s0, s0, s14
 8023478:	2e00      	cmp	r6, #0
 802347a:	ee30 0a67 	vsub.f32	s0, s0, s15
 802347e:	ed84 0a01 	vstr	s0, [r4, #4]
 8023482:	da9c      	bge.n	80233be <__ieee754_rem_pio2f+0x5a>
 8023484:	eeb1 7a47 	vneg.f32	s14, s14
 8023488:	eeb1 0a40 	vneg.f32	s0, s0
 802348c:	ed84 7a00 	vstr	s14, [r4]
 8023490:	ed84 0a01 	vstr	s0, [r4, #4]
 8023494:	4240      	negs	r0, r0
 8023496:	e792      	b.n	80233be <__ieee754_rem_pio2f+0x5a>
 8023498:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802349c:	15eb      	asrs	r3, r5, #23
 802349e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80234a2:	2d08      	cmp	r5, #8
 80234a4:	dde3      	ble.n	802346e <__ieee754_rem_pio2f+0x10a>
 80234a6:	eddf 7a44 	vldr	s15, [pc, #272]	; 80235b8 <__ieee754_rem_pio2f+0x254>
 80234aa:	eddf 5a44 	vldr	s11, [pc, #272]	; 80235bc <__ieee754_rem_pio2f+0x258>
 80234ae:	eef0 6a40 	vmov.f32	s13, s0
 80234b2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80234b6:	ee30 0a66 	vsub.f32	s0, s0, s13
 80234ba:	eea6 0a27 	vfma.f32	s0, s12, s15
 80234be:	eef0 7a40 	vmov.f32	s15, s0
 80234c2:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80234c6:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80234ca:	ee15 2a90 	vmov	r2, s11
 80234ce:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80234d2:	1a5b      	subs	r3, r3, r1
 80234d4:	2b19      	cmp	r3, #25
 80234d6:	dc04      	bgt.n	80234e2 <__ieee754_rem_pio2f+0x17e>
 80234d8:	edc4 5a00 	vstr	s11, [r4]
 80234dc:	eeb0 0a66 	vmov.f32	s0, s13
 80234e0:	e7c6      	b.n	8023470 <__ieee754_rem_pio2f+0x10c>
 80234e2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80235cc <__ieee754_rem_pio2f+0x268>
 80234e6:	eeb0 0a66 	vmov.f32	s0, s13
 80234ea:	eea6 0a25 	vfma.f32	s0, s12, s11
 80234ee:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80234f2:	eddf 6a37 	vldr	s13, [pc, #220]	; 80235d0 <__ieee754_rem_pio2f+0x26c>
 80234f6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80234fa:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80234fe:	ee30 7a67 	vsub.f32	s14, s0, s15
 8023502:	ed84 7a00 	vstr	s14, [r4]
 8023506:	e7b3      	b.n	8023470 <__ieee754_rem_pio2f+0x10c>
 8023508:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 802350c:	db06      	blt.n	802351c <__ieee754_rem_pio2f+0x1b8>
 802350e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8023512:	edc0 7a01 	vstr	s15, [r0, #4]
 8023516:	edc0 7a00 	vstr	s15, [r0]
 802351a:	e733      	b.n	8023384 <__ieee754_rem_pio2f+0x20>
 802351c:	15ea      	asrs	r2, r5, #23
 802351e:	3a86      	subs	r2, #134	; 0x86
 8023520:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8023524:	ee07 3a90 	vmov	s15, r3
 8023528:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802352c:	eddf 6a29 	vldr	s13, [pc, #164]	; 80235d4 <__ieee754_rem_pio2f+0x270>
 8023530:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8023534:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023538:	ed8d 7a03 	vstr	s14, [sp, #12]
 802353c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8023540:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8023544:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8023548:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802354c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8023550:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8023554:	eef5 7a40 	vcmp.f32	s15, #0.0
 8023558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802355c:	edcd 7a05 	vstr	s15, [sp, #20]
 8023560:	d11e      	bne.n	80235a0 <__ieee754_rem_pio2f+0x23c>
 8023562:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8023566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802356a:	bf14      	ite	ne
 802356c:	2302      	movne	r3, #2
 802356e:	2301      	moveq	r3, #1
 8023570:	4919      	ldr	r1, [pc, #100]	; (80235d8 <__ieee754_rem_pio2f+0x274>)
 8023572:	9101      	str	r1, [sp, #4]
 8023574:	2102      	movs	r1, #2
 8023576:	9100      	str	r1, [sp, #0]
 8023578:	a803      	add	r0, sp, #12
 802357a:	4621      	mov	r1, r4
 802357c:	f000 fd6a 	bl	8024054 <__kernel_rem_pio2f>
 8023580:	2e00      	cmp	r6, #0
 8023582:	f6bf af1c 	bge.w	80233be <__ieee754_rem_pio2f+0x5a>
 8023586:	edd4 7a00 	vldr	s15, [r4]
 802358a:	eef1 7a67 	vneg.f32	s15, s15
 802358e:	edc4 7a00 	vstr	s15, [r4]
 8023592:	edd4 7a01 	vldr	s15, [r4, #4]
 8023596:	eef1 7a67 	vneg.f32	s15, s15
 802359a:	edc4 7a01 	vstr	s15, [r4, #4]
 802359e:	e779      	b.n	8023494 <__ieee754_rem_pio2f+0x130>
 80235a0:	2303      	movs	r3, #3
 80235a2:	e7e5      	b.n	8023570 <__ieee754_rem_pio2f+0x20c>
 80235a4:	3f490fd8 	.word	0x3f490fd8
 80235a8:	4016cbe3 	.word	0x4016cbe3
 80235ac:	3fc90f80 	.word	0x3fc90f80
 80235b0:	3fc90fd0 	.word	0x3fc90fd0
 80235b4:	37354443 	.word	0x37354443
 80235b8:	37354400 	.word	0x37354400
 80235bc:	2e85a308 	.word	0x2e85a308
 80235c0:	43490f80 	.word	0x43490f80
 80235c4:	3f22f984 	.word	0x3f22f984
 80235c8:	080284ec 	.word	0x080284ec
 80235cc:	2e85a300 	.word	0x2e85a300
 80235d0:	248d3132 	.word	0x248d3132
 80235d4:	43800000 	.word	0x43800000
 80235d8:	0802856c 	.word	0x0802856c

080235dc <__ieee754_sqrtf>:
 80235dc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80235e0:	4770      	bx	lr
 80235e2:	0000      	movs	r0, r0
 80235e4:	0000      	movs	r0, r0
	...

080235e8 <__kernel_cos>:
 80235e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235ec:	ec57 6b10 	vmov	r6, r7, d0
 80235f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80235f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80235f8:	ed8d 1b00 	vstr	d1, [sp]
 80235fc:	da07      	bge.n	802360e <__kernel_cos+0x26>
 80235fe:	ee10 0a10 	vmov	r0, s0
 8023602:	4639      	mov	r1, r7
 8023604:	f7dd fa50 	bl	8000aa8 <__aeabi_d2iz>
 8023608:	2800      	cmp	r0, #0
 802360a:	f000 8088 	beq.w	802371e <__kernel_cos+0x136>
 802360e:	4632      	mov	r2, r6
 8023610:	463b      	mov	r3, r7
 8023612:	4630      	mov	r0, r6
 8023614:	4639      	mov	r1, r7
 8023616:	f7dc ffad 	bl	8000574 <__aeabi_dmul>
 802361a:	4b51      	ldr	r3, [pc, #324]	; (8023760 <__kernel_cos+0x178>)
 802361c:	2200      	movs	r2, #0
 802361e:	4604      	mov	r4, r0
 8023620:	460d      	mov	r5, r1
 8023622:	f7dc ffa7 	bl	8000574 <__aeabi_dmul>
 8023626:	a340      	add	r3, pc, #256	; (adr r3, 8023728 <__kernel_cos+0x140>)
 8023628:	e9d3 2300 	ldrd	r2, r3, [r3]
 802362c:	4682      	mov	sl, r0
 802362e:	468b      	mov	fp, r1
 8023630:	4620      	mov	r0, r4
 8023632:	4629      	mov	r1, r5
 8023634:	f7dc ff9e 	bl	8000574 <__aeabi_dmul>
 8023638:	a33d      	add	r3, pc, #244	; (adr r3, 8023730 <__kernel_cos+0x148>)
 802363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802363e:	f7dc fde3 	bl	8000208 <__adddf3>
 8023642:	4622      	mov	r2, r4
 8023644:	462b      	mov	r3, r5
 8023646:	f7dc ff95 	bl	8000574 <__aeabi_dmul>
 802364a:	a33b      	add	r3, pc, #236	; (adr r3, 8023738 <__kernel_cos+0x150>)
 802364c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023650:	f7dc fdd8 	bl	8000204 <__aeabi_dsub>
 8023654:	4622      	mov	r2, r4
 8023656:	462b      	mov	r3, r5
 8023658:	f7dc ff8c 	bl	8000574 <__aeabi_dmul>
 802365c:	a338      	add	r3, pc, #224	; (adr r3, 8023740 <__kernel_cos+0x158>)
 802365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023662:	f7dc fdd1 	bl	8000208 <__adddf3>
 8023666:	4622      	mov	r2, r4
 8023668:	462b      	mov	r3, r5
 802366a:	f7dc ff83 	bl	8000574 <__aeabi_dmul>
 802366e:	a336      	add	r3, pc, #216	; (adr r3, 8023748 <__kernel_cos+0x160>)
 8023670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023674:	f7dc fdc6 	bl	8000204 <__aeabi_dsub>
 8023678:	4622      	mov	r2, r4
 802367a:	462b      	mov	r3, r5
 802367c:	f7dc ff7a 	bl	8000574 <__aeabi_dmul>
 8023680:	a333      	add	r3, pc, #204	; (adr r3, 8023750 <__kernel_cos+0x168>)
 8023682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023686:	f7dc fdbf 	bl	8000208 <__adddf3>
 802368a:	4622      	mov	r2, r4
 802368c:	462b      	mov	r3, r5
 802368e:	f7dc ff71 	bl	8000574 <__aeabi_dmul>
 8023692:	4622      	mov	r2, r4
 8023694:	462b      	mov	r3, r5
 8023696:	f7dc ff6d 	bl	8000574 <__aeabi_dmul>
 802369a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802369e:	4604      	mov	r4, r0
 80236a0:	460d      	mov	r5, r1
 80236a2:	4630      	mov	r0, r6
 80236a4:	4639      	mov	r1, r7
 80236a6:	f7dc ff65 	bl	8000574 <__aeabi_dmul>
 80236aa:	460b      	mov	r3, r1
 80236ac:	4602      	mov	r2, r0
 80236ae:	4629      	mov	r1, r5
 80236b0:	4620      	mov	r0, r4
 80236b2:	f7dc fda7 	bl	8000204 <__aeabi_dsub>
 80236b6:	4b2b      	ldr	r3, [pc, #172]	; (8023764 <__kernel_cos+0x17c>)
 80236b8:	4598      	cmp	r8, r3
 80236ba:	4606      	mov	r6, r0
 80236bc:	460f      	mov	r7, r1
 80236be:	dc10      	bgt.n	80236e2 <__kernel_cos+0xfa>
 80236c0:	4602      	mov	r2, r0
 80236c2:	460b      	mov	r3, r1
 80236c4:	4650      	mov	r0, sl
 80236c6:	4659      	mov	r1, fp
 80236c8:	f7dc fd9c 	bl	8000204 <__aeabi_dsub>
 80236cc:	460b      	mov	r3, r1
 80236ce:	4926      	ldr	r1, [pc, #152]	; (8023768 <__kernel_cos+0x180>)
 80236d0:	4602      	mov	r2, r0
 80236d2:	2000      	movs	r0, #0
 80236d4:	f7dc fd96 	bl	8000204 <__aeabi_dsub>
 80236d8:	ec41 0b10 	vmov	d0, r0, r1
 80236dc:	b003      	add	sp, #12
 80236de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80236e2:	4b22      	ldr	r3, [pc, #136]	; (802376c <__kernel_cos+0x184>)
 80236e4:	4920      	ldr	r1, [pc, #128]	; (8023768 <__kernel_cos+0x180>)
 80236e6:	4598      	cmp	r8, r3
 80236e8:	bfcc      	ite	gt
 80236ea:	4d21      	ldrgt	r5, [pc, #132]	; (8023770 <__kernel_cos+0x188>)
 80236ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80236f0:	2400      	movs	r4, #0
 80236f2:	4622      	mov	r2, r4
 80236f4:	462b      	mov	r3, r5
 80236f6:	2000      	movs	r0, #0
 80236f8:	f7dc fd84 	bl	8000204 <__aeabi_dsub>
 80236fc:	4622      	mov	r2, r4
 80236fe:	4680      	mov	r8, r0
 8023700:	4689      	mov	r9, r1
 8023702:	462b      	mov	r3, r5
 8023704:	4650      	mov	r0, sl
 8023706:	4659      	mov	r1, fp
 8023708:	f7dc fd7c 	bl	8000204 <__aeabi_dsub>
 802370c:	4632      	mov	r2, r6
 802370e:	463b      	mov	r3, r7
 8023710:	f7dc fd78 	bl	8000204 <__aeabi_dsub>
 8023714:	4602      	mov	r2, r0
 8023716:	460b      	mov	r3, r1
 8023718:	4640      	mov	r0, r8
 802371a:	4649      	mov	r1, r9
 802371c:	e7da      	b.n	80236d4 <__kernel_cos+0xec>
 802371e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8023758 <__kernel_cos+0x170>
 8023722:	e7db      	b.n	80236dc <__kernel_cos+0xf4>
 8023724:	f3af 8000 	nop.w
 8023728:	be8838d4 	.word	0xbe8838d4
 802372c:	bda8fae9 	.word	0xbda8fae9
 8023730:	bdb4b1c4 	.word	0xbdb4b1c4
 8023734:	3e21ee9e 	.word	0x3e21ee9e
 8023738:	809c52ad 	.word	0x809c52ad
 802373c:	3e927e4f 	.word	0x3e927e4f
 8023740:	19cb1590 	.word	0x19cb1590
 8023744:	3efa01a0 	.word	0x3efa01a0
 8023748:	16c15177 	.word	0x16c15177
 802374c:	3f56c16c 	.word	0x3f56c16c
 8023750:	5555554c 	.word	0x5555554c
 8023754:	3fa55555 	.word	0x3fa55555
 8023758:	00000000 	.word	0x00000000
 802375c:	3ff00000 	.word	0x3ff00000
 8023760:	3fe00000 	.word	0x3fe00000
 8023764:	3fd33332 	.word	0x3fd33332
 8023768:	3ff00000 	.word	0x3ff00000
 802376c:	3fe90000 	.word	0x3fe90000
 8023770:	3fd20000 	.word	0x3fd20000
 8023774:	00000000 	.word	0x00000000

08023778 <__kernel_rem_pio2>:
 8023778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802377c:	ed2d 8b02 	vpush	{d8}
 8023780:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8023784:	f112 0f14 	cmn.w	r2, #20
 8023788:	9308      	str	r3, [sp, #32]
 802378a:	9101      	str	r1, [sp, #4]
 802378c:	4bc4      	ldr	r3, [pc, #784]	; (8023aa0 <__kernel_rem_pio2+0x328>)
 802378e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8023790:	900b      	str	r0, [sp, #44]	; 0x2c
 8023792:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8023796:	9302      	str	r3, [sp, #8]
 8023798:	9b08      	ldr	r3, [sp, #32]
 802379a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 802379e:	bfa8      	it	ge
 80237a0:	1ed4      	subge	r4, r2, #3
 80237a2:	9306      	str	r3, [sp, #24]
 80237a4:	bfb2      	itee	lt
 80237a6:	2400      	movlt	r4, #0
 80237a8:	2318      	movge	r3, #24
 80237aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80237ae:	f06f 0317 	mvn.w	r3, #23
 80237b2:	fb04 3303 	mla	r3, r4, r3, r3
 80237b6:	eb03 0a02 	add.w	sl, r3, r2
 80237ba:	9b02      	ldr	r3, [sp, #8]
 80237bc:	9a06      	ldr	r2, [sp, #24]
 80237be:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8023a90 <__kernel_rem_pio2+0x318>
 80237c2:	eb03 0802 	add.w	r8, r3, r2
 80237c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80237c8:	1aa7      	subs	r7, r4, r2
 80237ca:	ae22      	add	r6, sp, #136	; 0x88
 80237cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80237d0:	2500      	movs	r5, #0
 80237d2:	4545      	cmp	r5, r8
 80237d4:	dd13      	ble.n	80237fe <__kernel_rem_pio2+0x86>
 80237d6:	9b08      	ldr	r3, [sp, #32]
 80237d8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8023a90 <__kernel_rem_pio2+0x318>
 80237dc:	aa22      	add	r2, sp, #136	; 0x88
 80237de:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80237e2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80237e6:	f04f 0800 	mov.w	r8, #0
 80237ea:	9b02      	ldr	r3, [sp, #8]
 80237ec:	4598      	cmp	r8, r3
 80237ee:	dc2f      	bgt.n	8023850 <__kernel_rem_pio2+0xd8>
 80237f0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80237f4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80237f8:	462f      	mov	r7, r5
 80237fa:	2600      	movs	r6, #0
 80237fc:	e01b      	b.n	8023836 <__kernel_rem_pio2+0xbe>
 80237fe:	42ef      	cmn	r7, r5
 8023800:	d407      	bmi.n	8023812 <__kernel_rem_pio2+0x9a>
 8023802:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8023806:	f7dc fe4b 	bl	80004a0 <__aeabi_i2d>
 802380a:	e8e6 0102 	strd	r0, r1, [r6], #8
 802380e:	3501      	adds	r5, #1
 8023810:	e7df      	b.n	80237d2 <__kernel_rem_pio2+0x5a>
 8023812:	ec51 0b18 	vmov	r0, r1, d8
 8023816:	e7f8      	b.n	802380a <__kernel_rem_pio2+0x92>
 8023818:	e9d7 2300 	ldrd	r2, r3, [r7]
 802381c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8023820:	f7dc fea8 	bl	8000574 <__aeabi_dmul>
 8023824:	4602      	mov	r2, r0
 8023826:	460b      	mov	r3, r1
 8023828:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802382c:	f7dc fcec 	bl	8000208 <__adddf3>
 8023830:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023834:	3601      	adds	r6, #1
 8023836:	9b06      	ldr	r3, [sp, #24]
 8023838:	429e      	cmp	r6, r3
 802383a:	f1a7 0708 	sub.w	r7, r7, #8
 802383e:	ddeb      	ble.n	8023818 <__kernel_rem_pio2+0xa0>
 8023840:	ed9d 7b04 	vldr	d7, [sp, #16]
 8023844:	f108 0801 	add.w	r8, r8, #1
 8023848:	ecab 7b02 	vstmia	fp!, {d7}
 802384c:	3508      	adds	r5, #8
 802384e:	e7cc      	b.n	80237ea <__kernel_rem_pio2+0x72>
 8023850:	9b02      	ldr	r3, [sp, #8]
 8023852:	aa0e      	add	r2, sp, #56	; 0x38
 8023854:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8023858:	930d      	str	r3, [sp, #52]	; 0x34
 802385a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 802385c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8023860:	9c02      	ldr	r4, [sp, #8]
 8023862:	930c      	str	r3, [sp, #48]	; 0x30
 8023864:	00e3      	lsls	r3, r4, #3
 8023866:	930a      	str	r3, [sp, #40]	; 0x28
 8023868:	ab9a      	add	r3, sp, #616	; 0x268
 802386a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802386e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8023872:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8023876:	ab72      	add	r3, sp, #456	; 0x1c8
 8023878:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 802387c:	46c3      	mov	fp, r8
 802387e:	46a1      	mov	r9, r4
 8023880:	f1b9 0f00 	cmp.w	r9, #0
 8023884:	f1a5 0508 	sub.w	r5, r5, #8
 8023888:	dc77      	bgt.n	802397a <__kernel_rem_pio2+0x202>
 802388a:	ec47 6b10 	vmov	d0, r6, r7
 802388e:	4650      	mov	r0, sl
 8023890:	f000 ff4a 	bl	8024728 <scalbn>
 8023894:	ec57 6b10 	vmov	r6, r7, d0
 8023898:	2200      	movs	r2, #0
 802389a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 802389e:	ee10 0a10 	vmov	r0, s0
 80238a2:	4639      	mov	r1, r7
 80238a4:	f7dc fe66 	bl	8000574 <__aeabi_dmul>
 80238a8:	ec41 0b10 	vmov	d0, r0, r1
 80238ac:	f000 febc 	bl	8024628 <floor>
 80238b0:	4b7c      	ldr	r3, [pc, #496]	; (8023aa4 <__kernel_rem_pio2+0x32c>)
 80238b2:	ec51 0b10 	vmov	r0, r1, d0
 80238b6:	2200      	movs	r2, #0
 80238b8:	f7dc fe5c 	bl	8000574 <__aeabi_dmul>
 80238bc:	4602      	mov	r2, r0
 80238be:	460b      	mov	r3, r1
 80238c0:	4630      	mov	r0, r6
 80238c2:	4639      	mov	r1, r7
 80238c4:	f7dc fc9e 	bl	8000204 <__aeabi_dsub>
 80238c8:	460f      	mov	r7, r1
 80238ca:	4606      	mov	r6, r0
 80238cc:	f7dd f8ec 	bl	8000aa8 <__aeabi_d2iz>
 80238d0:	9004      	str	r0, [sp, #16]
 80238d2:	f7dc fde5 	bl	80004a0 <__aeabi_i2d>
 80238d6:	4602      	mov	r2, r0
 80238d8:	460b      	mov	r3, r1
 80238da:	4630      	mov	r0, r6
 80238dc:	4639      	mov	r1, r7
 80238de:	f7dc fc91 	bl	8000204 <__aeabi_dsub>
 80238e2:	f1ba 0f00 	cmp.w	sl, #0
 80238e6:	4606      	mov	r6, r0
 80238e8:	460f      	mov	r7, r1
 80238ea:	dd6d      	ble.n	80239c8 <__kernel_rem_pio2+0x250>
 80238ec:	1e62      	subs	r2, r4, #1
 80238ee:	ab0e      	add	r3, sp, #56	; 0x38
 80238f0:	9d04      	ldr	r5, [sp, #16]
 80238f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80238f6:	f1ca 0118 	rsb	r1, sl, #24
 80238fa:	fa40 f301 	asr.w	r3, r0, r1
 80238fe:	441d      	add	r5, r3
 8023900:	408b      	lsls	r3, r1
 8023902:	1ac0      	subs	r0, r0, r3
 8023904:	ab0e      	add	r3, sp, #56	; 0x38
 8023906:	9504      	str	r5, [sp, #16]
 8023908:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 802390c:	f1ca 0317 	rsb	r3, sl, #23
 8023910:	fa40 fb03 	asr.w	fp, r0, r3
 8023914:	f1bb 0f00 	cmp.w	fp, #0
 8023918:	dd65      	ble.n	80239e6 <__kernel_rem_pio2+0x26e>
 802391a:	9b04      	ldr	r3, [sp, #16]
 802391c:	2200      	movs	r2, #0
 802391e:	3301      	adds	r3, #1
 8023920:	9304      	str	r3, [sp, #16]
 8023922:	4615      	mov	r5, r2
 8023924:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8023928:	4294      	cmp	r4, r2
 802392a:	f300 809c 	bgt.w	8023a66 <__kernel_rem_pio2+0x2ee>
 802392e:	f1ba 0f00 	cmp.w	sl, #0
 8023932:	dd07      	ble.n	8023944 <__kernel_rem_pio2+0x1cc>
 8023934:	f1ba 0f01 	cmp.w	sl, #1
 8023938:	f000 80c0 	beq.w	8023abc <__kernel_rem_pio2+0x344>
 802393c:	f1ba 0f02 	cmp.w	sl, #2
 8023940:	f000 80c6 	beq.w	8023ad0 <__kernel_rem_pio2+0x358>
 8023944:	f1bb 0f02 	cmp.w	fp, #2
 8023948:	d14d      	bne.n	80239e6 <__kernel_rem_pio2+0x26e>
 802394a:	4632      	mov	r2, r6
 802394c:	463b      	mov	r3, r7
 802394e:	4956      	ldr	r1, [pc, #344]	; (8023aa8 <__kernel_rem_pio2+0x330>)
 8023950:	2000      	movs	r0, #0
 8023952:	f7dc fc57 	bl	8000204 <__aeabi_dsub>
 8023956:	4606      	mov	r6, r0
 8023958:	460f      	mov	r7, r1
 802395a:	2d00      	cmp	r5, #0
 802395c:	d043      	beq.n	80239e6 <__kernel_rem_pio2+0x26e>
 802395e:	4650      	mov	r0, sl
 8023960:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8023a98 <__kernel_rem_pio2+0x320>
 8023964:	f000 fee0 	bl	8024728 <scalbn>
 8023968:	4630      	mov	r0, r6
 802396a:	4639      	mov	r1, r7
 802396c:	ec53 2b10 	vmov	r2, r3, d0
 8023970:	f7dc fc48 	bl	8000204 <__aeabi_dsub>
 8023974:	4606      	mov	r6, r0
 8023976:	460f      	mov	r7, r1
 8023978:	e035      	b.n	80239e6 <__kernel_rem_pio2+0x26e>
 802397a:	4b4c      	ldr	r3, [pc, #304]	; (8023aac <__kernel_rem_pio2+0x334>)
 802397c:	2200      	movs	r2, #0
 802397e:	4630      	mov	r0, r6
 8023980:	4639      	mov	r1, r7
 8023982:	f7dc fdf7 	bl	8000574 <__aeabi_dmul>
 8023986:	f7dd f88f 	bl	8000aa8 <__aeabi_d2iz>
 802398a:	f7dc fd89 	bl	80004a0 <__aeabi_i2d>
 802398e:	4602      	mov	r2, r0
 8023990:	460b      	mov	r3, r1
 8023992:	ec43 2b18 	vmov	d8, r2, r3
 8023996:	4b46      	ldr	r3, [pc, #280]	; (8023ab0 <__kernel_rem_pio2+0x338>)
 8023998:	2200      	movs	r2, #0
 802399a:	f7dc fdeb 	bl	8000574 <__aeabi_dmul>
 802399e:	4602      	mov	r2, r0
 80239a0:	460b      	mov	r3, r1
 80239a2:	4630      	mov	r0, r6
 80239a4:	4639      	mov	r1, r7
 80239a6:	f7dc fc2d 	bl	8000204 <__aeabi_dsub>
 80239aa:	f7dd f87d 	bl	8000aa8 <__aeabi_d2iz>
 80239ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 80239b2:	f84b 0b04 	str.w	r0, [fp], #4
 80239b6:	ec51 0b18 	vmov	r0, r1, d8
 80239ba:	f7dc fc25 	bl	8000208 <__adddf3>
 80239be:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80239c2:	4606      	mov	r6, r0
 80239c4:	460f      	mov	r7, r1
 80239c6:	e75b      	b.n	8023880 <__kernel_rem_pio2+0x108>
 80239c8:	d106      	bne.n	80239d8 <__kernel_rem_pio2+0x260>
 80239ca:	1e63      	subs	r3, r4, #1
 80239cc:	aa0e      	add	r2, sp, #56	; 0x38
 80239ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80239d2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80239d6:	e79d      	b.n	8023914 <__kernel_rem_pio2+0x19c>
 80239d8:	4b36      	ldr	r3, [pc, #216]	; (8023ab4 <__kernel_rem_pio2+0x33c>)
 80239da:	2200      	movs	r2, #0
 80239dc:	f7dd f850 	bl	8000a80 <__aeabi_dcmpge>
 80239e0:	2800      	cmp	r0, #0
 80239e2:	d13d      	bne.n	8023a60 <__kernel_rem_pio2+0x2e8>
 80239e4:	4683      	mov	fp, r0
 80239e6:	2200      	movs	r2, #0
 80239e8:	2300      	movs	r3, #0
 80239ea:	4630      	mov	r0, r6
 80239ec:	4639      	mov	r1, r7
 80239ee:	f7dd f829 	bl	8000a44 <__aeabi_dcmpeq>
 80239f2:	2800      	cmp	r0, #0
 80239f4:	f000 80c0 	beq.w	8023b78 <__kernel_rem_pio2+0x400>
 80239f8:	1e65      	subs	r5, r4, #1
 80239fa:	462b      	mov	r3, r5
 80239fc:	2200      	movs	r2, #0
 80239fe:	9902      	ldr	r1, [sp, #8]
 8023a00:	428b      	cmp	r3, r1
 8023a02:	da6c      	bge.n	8023ade <__kernel_rem_pio2+0x366>
 8023a04:	2a00      	cmp	r2, #0
 8023a06:	f000 8089 	beq.w	8023b1c <__kernel_rem_pio2+0x3a4>
 8023a0a:	ab0e      	add	r3, sp, #56	; 0x38
 8023a0c:	f1aa 0a18 	sub.w	sl, sl, #24
 8023a10:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8023a14:	2b00      	cmp	r3, #0
 8023a16:	f000 80ad 	beq.w	8023b74 <__kernel_rem_pio2+0x3fc>
 8023a1a:	4650      	mov	r0, sl
 8023a1c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8023a98 <__kernel_rem_pio2+0x320>
 8023a20:	f000 fe82 	bl	8024728 <scalbn>
 8023a24:	ab9a      	add	r3, sp, #616	; 0x268
 8023a26:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8023a2a:	ec57 6b10 	vmov	r6, r7, d0
 8023a2e:	00ec      	lsls	r4, r5, #3
 8023a30:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8023a34:	46aa      	mov	sl, r5
 8023a36:	f1ba 0f00 	cmp.w	sl, #0
 8023a3a:	f280 80d6 	bge.w	8023bea <__kernel_rem_pio2+0x472>
 8023a3e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8023a90 <__kernel_rem_pio2+0x318>
 8023a42:	462e      	mov	r6, r5
 8023a44:	2e00      	cmp	r6, #0
 8023a46:	f2c0 8104 	blt.w	8023c52 <__kernel_rem_pio2+0x4da>
 8023a4a:	ab72      	add	r3, sp, #456	; 0x1c8
 8023a4c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8023a50:	f8df a064 	ldr.w	sl, [pc, #100]	; 8023ab8 <__kernel_rem_pio2+0x340>
 8023a54:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8023a58:	f04f 0800 	mov.w	r8, #0
 8023a5c:	1baf      	subs	r7, r5, r6
 8023a5e:	e0ea      	b.n	8023c36 <__kernel_rem_pio2+0x4be>
 8023a60:	f04f 0b02 	mov.w	fp, #2
 8023a64:	e759      	b.n	802391a <__kernel_rem_pio2+0x1a2>
 8023a66:	f8d8 3000 	ldr.w	r3, [r8]
 8023a6a:	b955      	cbnz	r5, 8023a82 <__kernel_rem_pio2+0x30a>
 8023a6c:	b123      	cbz	r3, 8023a78 <__kernel_rem_pio2+0x300>
 8023a6e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8023a72:	f8c8 3000 	str.w	r3, [r8]
 8023a76:	2301      	movs	r3, #1
 8023a78:	3201      	adds	r2, #1
 8023a7a:	f108 0804 	add.w	r8, r8, #4
 8023a7e:	461d      	mov	r5, r3
 8023a80:	e752      	b.n	8023928 <__kernel_rem_pio2+0x1b0>
 8023a82:	1acb      	subs	r3, r1, r3
 8023a84:	f8c8 3000 	str.w	r3, [r8]
 8023a88:	462b      	mov	r3, r5
 8023a8a:	e7f5      	b.n	8023a78 <__kernel_rem_pio2+0x300>
 8023a8c:	f3af 8000 	nop.w
	...
 8023a9c:	3ff00000 	.word	0x3ff00000
 8023aa0:	080288c8 	.word	0x080288c8
 8023aa4:	40200000 	.word	0x40200000
 8023aa8:	3ff00000 	.word	0x3ff00000
 8023aac:	3e700000 	.word	0x3e700000
 8023ab0:	41700000 	.word	0x41700000
 8023ab4:	3fe00000 	.word	0x3fe00000
 8023ab8:	08028888 	.word	0x08028888
 8023abc:	1e62      	subs	r2, r4, #1
 8023abe:	ab0e      	add	r3, sp, #56	; 0x38
 8023ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023ac4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8023ac8:	a90e      	add	r1, sp, #56	; 0x38
 8023aca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8023ace:	e739      	b.n	8023944 <__kernel_rem_pio2+0x1cc>
 8023ad0:	1e62      	subs	r2, r4, #1
 8023ad2:	ab0e      	add	r3, sp, #56	; 0x38
 8023ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023ad8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8023adc:	e7f4      	b.n	8023ac8 <__kernel_rem_pio2+0x350>
 8023ade:	a90e      	add	r1, sp, #56	; 0x38
 8023ae0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8023ae4:	3b01      	subs	r3, #1
 8023ae6:	430a      	orrs	r2, r1
 8023ae8:	e789      	b.n	80239fe <__kernel_rem_pio2+0x286>
 8023aea:	3301      	adds	r3, #1
 8023aec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8023af0:	2900      	cmp	r1, #0
 8023af2:	d0fa      	beq.n	8023aea <__kernel_rem_pio2+0x372>
 8023af4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023af6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8023afa:	446a      	add	r2, sp
 8023afc:	3a98      	subs	r2, #152	; 0x98
 8023afe:	920a      	str	r2, [sp, #40]	; 0x28
 8023b00:	9a08      	ldr	r2, [sp, #32]
 8023b02:	18e3      	adds	r3, r4, r3
 8023b04:	18a5      	adds	r5, r4, r2
 8023b06:	aa22      	add	r2, sp, #136	; 0x88
 8023b08:	f104 0801 	add.w	r8, r4, #1
 8023b0c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8023b10:	9304      	str	r3, [sp, #16]
 8023b12:	9b04      	ldr	r3, [sp, #16]
 8023b14:	4543      	cmp	r3, r8
 8023b16:	da04      	bge.n	8023b22 <__kernel_rem_pio2+0x3aa>
 8023b18:	461c      	mov	r4, r3
 8023b1a:	e6a3      	b.n	8023864 <__kernel_rem_pio2+0xec>
 8023b1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023b1e:	2301      	movs	r3, #1
 8023b20:	e7e4      	b.n	8023aec <__kernel_rem_pio2+0x374>
 8023b22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023b24:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8023b28:	f7dc fcba 	bl	80004a0 <__aeabi_i2d>
 8023b2c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8023b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023b32:	46ab      	mov	fp, r5
 8023b34:	461c      	mov	r4, r3
 8023b36:	f04f 0900 	mov.w	r9, #0
 8023b3a:	2600      	movs	r6, #0
 8023b3c:	2700      	movs	r7, #0
 8023b3e:	9b06      	ldr	r3, [sp, #24]
 8023b40:	4599      	cmp	r9, r3
 8023b42:	dd06      	ble.n	8023b52 <__kernel_rem_pio2+0x3da>
 8023b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023b46:	e8e3 6702 	strd	r6, r7, [r3], #8
 8023b4a:	f108 0801 	add.w	r8, r8, #1
 8023b4e:	930a      	str	r3, [sp, #40]	; 0x28
 8023b50:	e7df      	b.n	8023b12 <__kernel_rem_pio2+0x39a>
 8023b52:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8023b56:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8023b5a:	f7dc fd0b 	bl	8000574 <__aeabi_dmul>
 8023b5e:	4602      	mov	r2, r0
 8023b60:	460b      	mov	r3, r1
 8023b62:	4630      	mov	r0, r6
 8023b64:	4639      	mov	r1, r7
 8023b66:	f7dc fb4f 	bl	8000208 <__adddf3>
 8023b6a:	f109 0901 	add.w	r9, r9, #1
 8023b6e:	4606      	mov	r6, r0
 8023b70:	460f      	mov	r7, r1
 8023b72:	e7e4      	b.n	8023b3e <__kernel_rem_pio2+0x3c6>
 8023b74:	3d01      	subs	r5, #1
 8023b76:	e748      	b.n	8023a0a <__kernel_rem_pio2+0x292>
 8023b78:	ec47 6b10 	vmov	d0, r6, r7
 8023b7c:	f1ca 0000 	rsb	r0, sl, #0
 8023b80:	f000 fdd2 	bl	8024728 <scalbn>
 8023b84:	ec57 6b10 	vmov	r6, r7, d0
 8023b88:	4ba0      	ldr	r3, [pc, #640]	; (8023e0c <__kernel_rem_pio2+0x694>)
 8023b8a:	ee10 0a10 	vmov	r0, s0
 8023b8e:	2200      	movs	r2, #0
 8023b90:	4639      	mov	r1, r7
 8023b92:	f7dc ff75 	bl	8000a80 <__aeabi_dcmpge>
 8023b96:	b1f8      	cbz	r0, 8023bd8 <__kernel_rem_pio2+0x460>
 8023b98:	4b9d      	ldr	r3, [pc, #628]	; (8023e10 <__kernel_rem_pio2+0x698>)
 8023b9a:	2200      	movs	r2, #0
 8023b9c:	4630      	mov	r0, r6
 8023b9e:	4639      	mov	r1, r7
 8023ba0:	f7dc fce8 	bl	8000574 <__aeabi_dmul>
 8023ba4:	f7dc ff80 	bl	8000aa8 <__aeabi_d2iz>
 8023ba8:	4680      	mov	r8, r0
 8023baa:	f7dc fc79 	bl	80004a0 <__aeabi_i2d>
 8023bae:	4b97      	ldr	r3, [pc, #604]	; (8023e0c <__kernel_rem_pio2+0x694>)
 8023bb0:	2200      	movs	r2, #0
 8023bb2:	f7dc fcdf 	bl	8000574 <__aeabi_dmul>
 8023bb6:	460b      	mov	r3, r1
 8023bb8:	4602      	mov	r2, r0
 8023bba:	4639      	mov	r1, r7
 8023bbc:	4630      	mov	r0, r6
 8023bbe:	f7dc fb21 	bl	8000204 <__aeabi_dsub>
 8023bc2:	f7dc ff71 	bl	8000aa8 <__aeabi_d2iz>
 8023bc6:	1c65      	adds	r5, r4, #1
 8023bc8:	ab0e      	add	r3, sp, #56	; 0x38
 8023bca:	f10a 0a18 	add.w	sl, sl, #24
 8023bce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8023bd2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8023bd6:	e720      	b.n	8023a1a <__kernel_rem_pio2+0x2a2>
 8023bd8:	4630      	mov	r0, r6
 8023bda:	4639      	mov	r1, r7
 8023bdc:	f7dc ff64 	bl	8000aa8 <__aeabi_d2iz>
 8023be0:	ab0e      	add	r3, sp, #56	; 0x38
 8023be2:	4625      	mov	r5, r4
 8023be4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8023be8:	e717      	b.n	8023a1a <__kernel_rem_pio2+0x2a2>
 8023bea:	ab0e      	add	r3, sp, #56	; 0x38
 8023bec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8023bf0:	f7dc fc56 	bl	80004a0 <__aeabi_i2d>
 8023bf4:	4632      	mov	r2, r6
 8023bf6:	463b      	mov	r3, r7
 8023bf8:	f7dc fcbc 	bl	8000574 <__aeabi_dmul>
 8023bfc:	4b84      	ldr	r3, [pc, #528]	; (8023e10 <__kernel_rem_pio2+0x698>)
 8023bfe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8023c02:	2200      	movs	r2, #0
 8023c04:	4630      	mov	r0, r6
 8023c06:	4639      	mov	r1, r7
 8023c08:	f7dc fcb4 	bl	8000574 <__aeabi_dmul>
 8023c0c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8023c10:	4606      	mov	r6, r0
 8023c12:	460f      	mov	r7, r1
 8023c14:	e70f      	b.n	8023a36 <__kernel_rem_pio2+0x2be>
 8023c16:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8023c1a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8023c1e:	f7dc fca9 	bl	8000574 <__aeabi_dmul>
 8023c22:	4602      	mov	r2, r0
 8023c24:	460b      	mov	r3, r1
 8023c26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023c2a:	f7dc faed 	bl	8000208 <__adddf3>
 8023c2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023c32:	f108 0801 	add.w	r8, r8, #1
 8023c36:	9b02      	ldr	r3, [sp, #8]
 8023c38:	4598      	cmp	r8, r3
 8023c3a:	dc01      	bgt.n	8023c40 <__kernel_rem_pio2+0x4c8>
 8023c3c:	45b8      	cmp	r8, r7
 8023c3e:	ddea      	ble.n	8023c16 <__kernel_rem_pio2+0x49e>
 8023c40:	ed9d 7b06 	vldr	d7, [sp, #24]
 8023c44:	ab4a      	add	r3, sp, #296	; 0x128
 8023c46:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8023c4a:	ed87 7b00 	vstr	d7, [r7]
 8023c4e:	3e01      	subs	r6, #1
 8023c50:	e6f8      	b.n	8023a44 <__kernel_rem_pio2+0x2cc>
 8023c52:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8023c54:	2b02      	cmp	r3, #2
 8023c56:	dc0b      	bgt.n	8023c70 <__kernel_rem_pio2+0x4f8>
 8023c58:	2b00      	cmp	r3, #0
 8023c5a:	dc35      	bgt.n	8023cc8 <__kernel_rem_pio2+0x550>
 8023c5c:	d059      	beq.n	8023d12 <__kernel_rem_pio2+0x59a>
 8023c5e:	9b04      	ldr	r3, [sp, #16]
 8023c60:	f003 0007 	and.w	r0, r3, #7
 8023c64:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8023c68:	ecbd 8b02 	vpop	{d8}
 8023c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c70:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8023c72:	2b03      	cmp	r3, #3
 8023c74:	d1f3      	bne.n	8023c5e <__kernel_rem_pio2+0x4e6>
 8023c76:	ab4a      	add	r3, sp, #296	; 0x128
 8023c78:	4423      	add	r3, r4
 8023c7a:	9306      	str	r3, [sp, #24]
 8023c7c:	461c      	mov	r4, r3
 8023c7e:	469a      	mov	sl, r3
 8023c80:	9502      	str	r5, [sp, #8]
 8023c82:	9b02      	ldr	r3, [sp, #8]
 8023c84:	2b00      	cmp	r3, #0
 8023c86:	f1aa 0a08 	sub.w	sl, sl, #8
 8023c8a:	dc6b      	bgt.n	8023d64 <__kernel_rem_pio2+0x5ec>
 8023c8c:	46aa      	mov	sl, r5
 8023c8e:	f1ba 0f01 	cmp.w	sl, #1
 8023c92:	f1a4 0408 	sub.w	r4, r4, #8
 8023c96:	f300 8085 	bgt.w	8023da4 <__kernel_rem_pio2+0x62c>
 8023c9a:	9c06      	ldr	r4, [sp, #24]
 8023c9c:	2000      	movs	r0, #0
 8023c9e:	3408      	adds	r4, #8
 8023ca0:	2100      	movs	r1, #0
 8023ca2:	2d01      	cmp	r5, #1
 8023ca4:	f300 809d 	bgt.w	8023de2 <__kernel_rem_pio2+0x66a>
 8023ca8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8023cac:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8023cb0:	f1bb 0f00 	cmp.w	fp, #0
 8023cb4:	f040 809b 	bne.w	8023dee <__kernel_rem_pio2+0x676>
 8023cb8:	9b01      	ldr	r3, [sp, #4]
 8023cba:	e9c3 5600 	strd	r5, r6, [r3]
 8023cbe:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8023cc2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8023cc6:	e7ca      	b.n	8023c5e <__kernel_rem_pio2+0x4e6>
 8023cc8:	3408      	adds	r4, #8
 8023cca:	ab4a      	add	r3, sp, #296	; 0x128
 8023ccc:	441c      	add	r4, r3
 8023cce:	462e      	mov	r6, r5
 8023cd0:	2000      	movs	r0, #0
 8023cd2:	2100      	movs	r1, #0
 8023cd4:	2e00      	cmp	r6, #0
 8023cd6:	da36      	bge.n	8023d46 <__kernel_rem_pio2+0x5ce>
 8023cd8:	f1bb 0f00 	cmp.w	fp, #0
 8023cdc:	d039      	beq.n	8023d52 <__kernel_rem_pio2+0x5da>
 8023cde:	4602      	mov	r2, r0
 8023ce0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023ce4:	9c01      	ldr	r4, [sp, #4]
 8023ce6:	e9c4 2300 	strd	r2, r3, [r4]
 8023cea:	4602      	mov	r2, r0
 8023cec:	460b      	mov	r3, r1
 8023cee:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8023cf2:	f7dc fa87 	bl	8000204 <__aeabi_dsub>
 8023cf6:	ae4c      	add	r6, sp, #304	; 0x130
 8023cf8:	2401      	movs	r4, #1
 8023cfa:	42a5      	cmp	r5, r4
 8023cfc:	da2c      	bge.n	8023d58 <__kernel_rem_pio2+0x5e0>
 8023cfe:	f1bb 0f00 	cmp.w	fp, #0
 8023d02:	d002      	beq.n	8023d0a <__kernel_rem_pio2+0x592>
 8023d04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023d08:	4619      	mov	r1, r3
 8023d0a:	9b01      	ldr	r3, [sp, #4]
 8023d0c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8023d10:	e7a5      	b.n	8023c5e <__kernel_rem_pio2+0x4e6>
 8023d12:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8023d16:	eb0d 0403 	add.w	r4, sp, r3
 8023d1a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8023d1e:	2000      	movs	r0, #0
 8023d20:	2100      	movs	r1, #0
 8023d22:	2d00      	cmp	r5, #0
 8023d24:	da09      	bge.n	8023d3a <__kernel_rem_pio2+0x5c2>
 8023d26:	f1bb 0f00 	cmp.w	fp, #0
 8023d2a:	d002      	beq.n	8023d32 <__kernel_rem_pio2+0x5ba>
 8023d2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023d30:	4619      	mov	r1, r3
 8023d32:	9b01      	ldr	r3, [sp, #4]
 8023d34:	e9c3 0100 	strd	r0, r1, [r3]
 8023d38:	e791      	b.n	8023c5e <__kernel_rem_pio2+0x4e6>
 8023d3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8023d3e:	f7dc fa63 	bl	8000208 <__adddf3>
 8023d42:	3d01      	subs	r5, #1
 8023d44:	e7ed      	b.n	8023d22 <__kernel_rem_pio2+0x5aa>
 8023d46:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8023d4a:	f7dc fa5d 	bl	8000208 <__adddf3>
 8023d4e:	3e01      	subs	r6, #1
 8023d50:	e7c0      	b.n	8023cd4 <__kernel_rem_pio2+0x55c>
 8023d52:	4602      	mov	r2, r0
 8023d54:	460b      	mov	r3, r1
 8023d56:	e7c5      	b.n	8023ce4 <__kernel_rem_pio2+0x56c>
 8023d58:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8023d5c:	f7dc fa54 	bl	8000208 <__adddf3>
 8023d60:	3401      	adds	r4, #1
 8023d62:	e7ca      	b.n	8023cfa <__kernel_rem_pio2+0x582>
 8023d64:	e9da 8900 	ldrd	r8, r9, [sl]
 8023d68:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8023d6c:	9b02      	ldr	r3, [sp, #8]
 8023d6e:	3b01      	subs	r3, #1
 8023d70:	9302      	str	r3, [sp, #8]
 8023d72:	4632      	mov	r2, r6
 8023d74:	463b      	mov	r3, r7
 8023d76:	4640      	mov	r0, r8
 8023d78:	4649      	mov	r1, r9
 8023d7a:	f7dc fa45 	bl	8000208 <__adddf3>
 8023d7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023d82:	4602      	mov	r2, r0
 8023d84:	460b      	mov	r3, r1
 8023d86:	4640      	mov	r0, r8
 8023d88:	4649      	mov	r1, r9
 8023d8a:	f7dc fa3b 	bl	8000204 <__aeabi_dsub>
 8023d8e:	4632      	mov	r2, r6
 8023d90:	463b      	mov	r3, r7
 8023d92:	f7dc fa39 	bl	8000208 <__adddf3>
 8023d96:	ed9d 7b08 	vldr	d7, [sp, #32]
 8023d9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023d9e:	ed8a 7b00 	vstr	d7, [sl]
 8023da2:	e76e      	b.n	8023c82 <__kernel_rem_pio2+0x50a>
 8023da4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8023da8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8023dac:	4640      	mov	r0, r8
 8023dae:	4632      	mov	r2, r6
 8023db0:	463b      	mov	r3, r7
 8023db2:	4649      	mov	r1, r9
 8023db4:	f7dc fa28 	bl	8000208 <__adddf3>
 8023db8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023dbc:	4602      	mov	r2, r0
 8023dbe:	460b      	mov	r3, r1
 8023dc0:	4640      	mov	r0, r8
 8023dc2:	4649      	mov	r1, r9
 8023dc4:	f7dc fa1e 	bl	8000204 <__aeabi_dsub>
 8023dc8:	4632      	mov	r2, r6
 8023dca:	463b      	mov	r3, r7
 8023dcc:	f7dc fa1c 	bl	8000208 <__adddf3>
 8023dd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023dd4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8023dd8:	ed84 7b00 	vstr	d7, [r4]
 8023ddc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8023de0:	e755      	b.n	8023c8e <__kernel_rem_pio2+0x516>
 8023de2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8023de6:	f7dc fa0f 	bl	8000208 <__adddf3>
 8023dea:	3d01      	subs	r5, #1
 8023dec:	e759      	b.n	8023ca2 <__kernel_rem_pio2+0x52a>
 8023dee:	9b01      	ldr	r3, [sp, #4]
 8023df0:	9a01      	ldr	r2, [sp, #4]
 8023df2:	601d      	str	r5, [r3, #0]
 8023df4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8023df8:	605c      	str	r4, [r3, #4]
 8023dfa:	609f      	str	r7, [r3, #8]
 8023dfc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8023e00:	60d3      	str	r3, [r2, #12]
 8023e02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023e06:	6110      	str	r0, [r2, #16]
 8023e08:	6153      	str	r3, [r2, #20]
 8023e0a:	e728      	b.n	8023c5e <__kernel_rem_pio2+0x4e6>
 8023e0c:	41700000 	.word	0x41700000
 8023e10:	3e700000 	.word	0x3e700000
 8023e14:	00000000 	.word	0x00000000

08023e18 <__kernel_sin>:
 8023e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e1c:	ed2d 8b04 	vpush	{d8-d9}
 8023e20:	eeb0 8a41 	vmov.f32	s16, s2
 8023e24:	eef0 8a61 	vmov.f32	s17, s3
 8023e28:	ec55 4b10 	vmov	r4, r5, d0
 8023e2c:	b083      	sub	sp, #12
 8023e2e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8023e32:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8023e36:	9001      	str	r0, [sp, #4]
 8023e38:	da06      	bge.n	8023e48 <__kernel_sin+0x30>
 8023e3a:	ee10 0a10 	vmov	r0, s0
 8023e3e:	4629      	mov	r1, r5
 8023e40:	f7dc fe32 	bl	8000aa8 <__aeabi_d2iz>
 8023e44:	2800      	cmp	r0, #0
 8023e46:	d051      	beq.n	8023eec <__kernel_sin+0xd4>
 8023e48:	4622      	mov	r2, r4
 8023e4a:	462b      	mov	r3, r5
 8023e4c:	4620      	mov	r0, r4
 8023e4e:	4629      	mov	r1, r5
 8023e50:	f7dc fb90 	bl	8000574 <__aeabi_dmul>
 8023e54:	4682      	mov	sl, r0
 8023e56:	468b      	mov	fp, r1
 8023e58:	4602      	mov	r2, r0
 8023e5a:	460b      	mov	r3, r1
 8023e5c:	4620      	mov	r0, r4
 8023e5e:	4629      	mov	r1, r5
 8023e60:	f7dc fb88 	bl	8000574 <__aeabi_dmul>
 8023e64:	a341      	add	r3, pc, #260	; (adr r3, 8023f6c <__kernel_sin+0x154>)
 8023e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e6a:	4680      	mov	r8, r0
 8023e6c:	4689      	mov	r9, r1
 8023e6e:	4650      	mov	r0, sl
 8023e70:	4659      	mov	r1, fp
 8023e72:	f7dc fb7f 	bl	8000574 <__aeabi_dmul>
 8023e76:	a33f      	add	r3, pc, #252	; (adr r3, 8023f74 <__kernel_sin+0x15c>)
 8023e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e7c:	f7dc f9c2 	bl	8000204 <__aeabi_dsub>
 8023e80:	4652      	mov	r2, sl
 8023e82:	465b      	mov	r3, fp
 8023e84:	f7dc fb76 	bl	8000574 <__aeabi_dmul>
 8023e88:	a33c      	add	r3, pc, #240	; (adr r3, 8023f7c <__kernel_sin+0x164>)
 8023e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e8e:	f7dc f9bb 	bl	8000208 <__adddf3>
 8023e92:	4652      	mov	r2, sl
 8023e94:	465b      	mov	r3, fp
 8023e96:	f7dc fb6d 	bl	8000574 <__aeabi_dmul>
 8023e9a:	a33a      	add	r3, pc, #232	; (adr r3, 8023f84 <__kernel_sin+0x16c>)
 8023e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ea0:	f7dc f9b0 	bl	8000204 <__aeabi_dsub>
 8023ea4:	4652      	mov	r2, sl
 8023ea6:	465b      	mov	r3, fp
 8023ea8:	f7dc fb64 	bl	8000574 <__aeabi_dmul>
 8023eac:	a337      	add	r3, pc, #220	; (adr r3, 8023f8c <__kernel_sin+0x174>)
 8023eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023eb2:	f7dc f9a9 	bl	8000208 <__adddf3>
 8023eb6:	9b01      	ldr	r3, [sp, #4]
 8023eb8:	4606      	mov	r6, r0
 8023eba:	460f      	mov	r7, r1
 8023ebc:	b9eb      	cbnz	r3, 8023efa <__kernel_sin+0xe2>
 8023ebe:	4602      	mov	r2, r0
 8023ec0:	460b      	mov	r3, r1
 8023ec2:	4650      	mov	r0, sl
 8023ec4:	4659      	mov	r1, fp
 8023ec6:	f7dc fb55 	bl	8000574 <__aeabi_dmul>
 8023eca:	a325      	add	r3, pc, #148	; (adr r3, 8023f60 <__kernel_sin+0x148>)
 8023ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ed0:	f7dc f998 	bl	8000204 <__aeabi_dsub>
 8023ed4:	4642      	mov	r2, r8
 8023ed6:	464b      	mov	r3, r9
 8023ed8:	f7dc fb4c 	bl	8000574 <__aeabi_dmul>
 8023edc:	4602      	mov	r2, r0
 8023ede:	460b      	mov	r3, r1
 8023ee0:	4620      	mov	r0, r4
 8023ee2:	4629      	mov	r1, r5
 8023ee4:	f7dc f990 	bl	8000208 <__adddf3>
 8023ee8:	4604      	mov	r4, r0
 8023eea:	460d      	mov	r5, r1
 8023eec:	ec45 4b10 	vmov	d0, r4, r5
 8023ef0:	b003      	add	sp, #12
 8023ef2:	ecbd 8b04 	vpop	{d8-d9}
 8023ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023efa:	4b1b      	ldr	r3, [pc, #108]	; (8023f68 <__kernel_sin+0x150>)
 8023efc:	ec51 0b18 	vmov	r0, r1, d8
 8023f00:	2200      	movs	r2, #0
 8023f02:	f7dc fb37 	bl	8000574 <__aeabi_dmul>
 8023f06:	4632      	mov	r2, r6
 8023f08:	ec41 0b19 	vmov	d9, r0, r1
 8023f0c:	463b      	mov	r3, r7
 8023f0e:	4640      	mov	r0, r8
 8023f10:	4649      	mov	r1, r9
 8023f12:	f7dc fb2f 	bl	8000574 <__aeabi_dmul>
 8023f16:	4602      	mov	r2, r0
 8023f18:	460b      	mov	r3, r1
 8023f1a:	ec51 0b19 	vmov	r0, r1, d9
 8023f1e:	f7dc f971 	bl	8000204 <__aeabi_dsub>
 8023f22:	4652      	mov	r2, sl
 8023f24:	465b      	mov	r3, fp
 8023f26:	f7dc fb25 	bl	8000574 <__aeabi_dmul>
 8023f2a:	ec53 2b18 	vmov	r2, r3, d8
 8023f2e:	f7dc f969 	bl	8000204 <__aeabi_dsub>
 8023f32:	a30b      	add	r3, pc, #44	; (adr r3, 8023f60 <__kernel_sin+0x148>)
 8023f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f38:	4606      	mov	r6, r0
 8023f3a:	460f      	mov	r7, r1
 8023f3c:	4640      	mov	r0, r8
 8023f3e:	4649      	mov	r1, r9
 8023f40:	f7dc fb18 	bl	8000574 <__aeabi_dmul>
 8023f44:	4602      	mov	r2, r0
 8023f46:	460b      	mov	r3, r1
 8023f48:	4630      	mov	r0, r6
 8023f4a:	4639      	mov	r1, r7
 8023f4c:	f7dc f95c 	bl	8000208 <__adddf3>
 8023f50:	4602      	mov	r2, r0
 8023f52:	460b      	mov	r3, r1
 8023f54:	4620      	mov	r0, r4
 8023f56:	4629      	mov	r1, r5
 8023f58:	f7dc f954 	bl	8000204 <__aeabi_dsub>
 8023f5c:	e7c4      	b.n	8023ee8 <__kernel_sin+0xd0>
 8023f5e:	bf00      	nop
 8023f60:	55555549 	.word	0x55555549
 8023f64:	3fc55555 	.word	0x3fc55555
 8023f68:	3fe00000 	.word	0x3fe00000
 8023f6c:	5acfd57c 	.word	0x5acfd57c
 8023f70:	3de5d93a 	.word	0x3de5d93a
 8023f74:	8a2b9ceb 	.word	0x8a2b9ceb
 8023f78:	3e5ae5e6 	.word	0x3e5ae5e6
 8023f7c:	57b1fe7d 	.word	0x57b1fe7d
 8023f80:	3ec71de3 	.word	0x3ec71de3
 8023f84:	19c161d5 	.word	0x19c161d5
 8023f88:	3f2a01a0 	.word	0x3f2a01a0
 8023f8c:	1110f8a6 	.word	0x1110f8a6
 8023f90:	3f811111 	.word	0x3f811111

08023f94 <__kernel_cosf>:
 8023f94:	ee10 3a10 	vmov	r3, s0
 8023f98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8023f9c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8023fa0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8023fa4:	da05      	bge.n	8023fb2 <__kernel_cosf+0x1e>
 8023fa6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8023faa:	ee17 2a90 	vmov	r2, s15
 8023fae:	2a00      	cmp	r2, #0
 8023fb0:	d03d      	beq.n	802402e <__kernel_cosf+0x9a>
 8023fb2:	ee60 5a00 	vmul.f32	s11, s0, s0
 8023fb6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8024034 <__kernel_cosf+0xa0>
 8023fba:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8024038 <__kernel_cosf+0xa4>
 8023fbe:	eddf 6a1f 	vldr	s13, [pc, #124]	; 802403c <__kernel_cosf+0xa8>
 8023fc2:	4a1f      	ldr	r2, [pc, #124]	; (8024040 <__kernel_cosf+0xac>)
 8023fc4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8023fc8:	4293      	cmp	r3, r2
 8023fca:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8024044 <__kernel_cosf+0xb0>
 8023fce:	eee7 7a25 	vfma.f32	s15, s14, s11
 8023fd2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8024048 <__kernel_cosf+0xb4>
 8023fd6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8023fda:	eddf 7a1c 	vldr	s15, [pc, #112]	; 802404c <__kernel_cosf+0xb8>
 8023fde:	eee7 7a25 	vfma.f32	s15, s14, s11
 8023fe2:	eeb0 7a66 	vmov.f32	s14, s13
 8023fe6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8023fea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8023fee:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8023ff2:	ee67 6a25 	vmul.f32	s13, s14, s11
 8023ff6:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8023ffa:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8023ffe:	dc04      	bgt.n	802400a <__kernel_cosf+0x76>
 8024000:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8024004:	ee36 0a47 	vsub.f32	s0, s12, s14
 8024008:	4770      	bx	lr
 802400a:	4a11      	ldr	r2, [pc, #68]	; (8024050 <__kernel_cosf+0xbc>)
 802400c:	4293      	cmp	r3, r2
 802400e:	bfda      	itte	le
 8024010:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8024014:	ee06 3a90 	vmovle	s13, r3
 8024018:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 802401c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8024020:	ee36 0a66 	vsub.f32	s0, s12, s13
 8024024:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024028:	ee30 0a67 	vsub.f32	s0, s0, s15
 802402c:	4770      	bx	lr
 802402e:	eeb0 0a46 	vmov.f32	s0, s12
 8024032:	4770      	bx	lr
 8024034:	ad47d74e 	.word	0xad47d74e
 8024038:	310f74f6 	.word	0x310f74f6
 802403c:	3d2aaaab 	.word	0x3d2aaaab
 8024040:	3e999999 	.word	0x3e999999
 8024044:	b493f27c 	.word	0xb493f27c
 8024048:	37d00d01 	.word	0x37d00d01
 802404c:	bab60b61 	.word	0xbab60b61
 8024050:	3f480000 	.word	0x3f480000

08024054 <__kernel_rem_pio2f>:
 8024054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024058:	ed2d 8b04 	vpush	{d8-d9}
 802405c:	b0d9      	sub	sp, #356	; 0x164
 802405e:	4688      	mov	r8, r1
 8024060:	9002      	str	r0, [sp, #8]
 8024062:	49bb      	ldr	r1, [pc, #748]	; (8024350 <__kernel_rem_pio2f+0x2fc>)
 8024064:	9866      	ldr	r0, [sp, #408]	; 0x198
 8024066:	9301      	str	r3, [sp, #4]
 8024068:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 802406c:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8024070:	1e59      	subs	r1, r3, #1
 8024072:	1d13      	adds	r3, r2, #4
 8024074:	db27      	blt.n	80240c6 <__kernel_rem_pio2f+0x72>
 8024076:	f1b2 0b03 	subs.w	fp, r2, #3
 802407a:	bf48      	it	mi
 802407c:	f102 0b04 	addmi.w	fp, r2, #4
 8024080:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8024084:	1c45      	adds	r5, r0, #1
 8024086:	00ec      	lsls	r4, r5, #3
 8024088:	1a47      	subs	r7, r0, r1
 802408a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8024360 <__kernel_rem_pio2f+0x30c>
 802408e:	9403      	str	r4, [sp, #12]
 8024090:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8024094:	eb0a 0c01 	add.w	ip, sl, r1
 8024098:	ae1c      	add	r6, sp, #112	; 0x70
 802409a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 802409e:	2400      	movs	r4, #0
 80240a0:	4564      	cmp	r4, ip
 80240a2:	dd12      	ble.n	80240ca <__kernel_rem_pio2f+0x76>
 80240a4:	9b01      	ldr	r3, [sp, #4]
 80240a6:	ac1c      	add	r4, sp, #112	; 0x70
 80240a8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80240ac:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80240b0:	f04f 0c00 	mov.w	ip, #0
 80240b4:	45d4      	cmp	ip, sl
 80240b6:	dc27      	bgt.n	8024108 <__kernel_rem_pio2f+0xb4>
 80240b8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80240bc:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8024360 <__kernel_rem_pio2f+0x30c>
 80240c0:	4627      	mov	r7, r4
 80240c2:	2600      	movs	r6, #0
 80240c4:	e016      	b.n	80240f4 <__kernel_rem_pio2f+0xa0>
 80240c6:	2000      	movs	r0, #0
 80240c8:	e7dc      	b.n	8024084 <__kernel_rem_pio2f+0x30>
 80240ca:	42e7      	cmn	r7, r4
 80240cc:	bf5d      	ittte	pl
 80240ce:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80240d2:	ee07 3a90 	vmovpl	s15, r3
 80240d6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80240da:	eef0 7a47 	vmovmi.f32	s15, s14
 80240de:	ece6 7a01 	vstmia	r6!, {s15}
 80240e2:	3401      	adds	r4, #1
 80240e4:	e7dc      	b.n	80240a0 <__kernel_rem_pio2f+0x4c>
 80240e6:	ecf9 6a01 	vldmia	r9!, {s13}
 80240ea:	ed97 7a00 	vldr	s14, [r7]
 80240ee:	eee6 7a87 	vfma.f32	s15, s13, s14
 80240f2:	3601      	adds	r6, #1
 80240f4:	428e      	cmp	r6, r1
 80240f6:	f1a7 0704 	sub.w	r7, r7, #4
 80240fa:	ddf4      	ble.n	80240e6 <__kernel_rem_pio2f+0x92>
 80240fc:	eceb 7a01 	vstmia	fp!, {s15}
 8024100:	f10c 0c01 	add.w	ip, ip, #1
 8024104:	3404      	adds	r4, #4
 8024106:	e7d5      	b.n	80240b4 <__kernel_rem_pio2f+0x60>
 8024108:	ab08      	add	r3, sp, #32
 802410a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 802410e:	eddf 8a93 	vldr	s17, [pc, #588]	; 802435c <__kernel_rem_pio2f+0x308>
 8024112:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8024358 <__kernel_rem_pio2f+0x304>
 8024116:	9304      	str	r3, [sp, #16]
 8024118:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 802411c:	4656      	mov	r6, sl
 802411e:	00b3      	lsls	r3, r6, #2
 8024120:	9305      	str	r3, [sp, #20]
 8024122:	ab58      	add	r3, sp, #352	; 0x160
 8024124:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8024128:	ac08      	add	r4, sp, #32
 802412a:	ab44      	add	r3, sp, #272	; 0x110
 802412c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8024130:	46a4      	mov	ip, r4
 8024132:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8024136:	4637      	mov	r7, r6
 8024138:	2f00      	cmp	r7, #0
 802413a:	f1a0 0004 	sub.w	r0, r0, #4
 802413e:	dc4f      	bgt.n	80241e0 <__kernel_rem_pio2f+0x18c>
 8024140:	4628      	mov	r0, r5
 8024142:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8024146:	f000 fca5 	bl	8024a94 <scalbnf>
 802414a:	eeb0 8a40 	vmov.f32	s16, s0
 802414e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8024152:	ee28 0a00 	vmul.f32	s0, s16, s0
 8024156:	f000 fc55 	bl	8024a04 <floorf>
 802415a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 802415e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8024162:	2d00      	cmp	r5, #0
 8024164:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8024168:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802416c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8024170:	ee17 9a90 	vmov	r9, s15
 8024174:	ee38 8a40 	vsub.f32	s16, s16, s0
 8024178:	dd44      	ble.n	8024204 <__kernel_rem_pio2f+0x1b0>
 802417a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 802417e:	ab08      	add	r3, sp, #32
 8024180:	f1c5 0e08 	rsb	lr, r5, #8
 8024184:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8024188:	fa47 f00e 	asr.w	r0, r7, lr
 802418c:	4481      	add	r9, r0
 802418e:	fa00 f00e 	lsl.w	r0, r0, lr
 8024192:	1a3f      	subs	r7, r7, r0
 8024194:	f1c5 0007 	rsb	r0, r5, #7
 8024198:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 802419c:	4107      	asrs	r7, r0
 802419e:	2f00      	cmp	r7, #0
 80241a0:	dd3f      	ble.n	8024222 <__kernel_rem_pio2f+0x1ce>
 80241a2:	f04f 0e00 	mov.w	lr, #0
 80241a6:	f109 0901 	add.w	r9, r9, #1
 80241aa:	4673      	mov	r3, lr
 80241ac:	4576      	cmp	r6, lr
 80241ae:	dc6b      	bgt.n	8024288 <__kernel_rem_pio2f+0x234>
 80241b0:	2d00      	cmp	r5, #0
 80241b2:	dd04      	ble.n	80241be <__kernel_rem_pio2f+0x16a>
 80241b4:	2d01      	cmp	r5, #1
 80241b6:	d078      	beq.n	80242aa <__kernel_rem_pio2f+0x256>
 80241b8:	2d02      	cmp	r5, #2
 80241ba:	f000 8081 	beq.w	80242c0 <__kernel_rem_pio2f+0x26c>
 80241be:	2f02      	cmp	r7, #2
 80241c0:	d12f      	bne.n	8024222 <__kernel_rem_pio2f+0x1ce>
 80241c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80241c6:	ee30 8a48 	vsub.f32	s16, s0, s16
 80241ca:	b353      	cbz	r3, 8024222 <__kernel_rem_pio2f+0x1ce>
 80241cc:	4628      	mov	r0, r5
 80241ce:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80241d2:	f000 fc5f 	bl	8024a94 <scalbnf>
 80241d6:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80241da:	ee38 8a40 	vsub.f32	s16, s16, s0
 80241de:	e020      	b.n	8024222 <__kernel_rem_pio2f+0x1ce>
 80241e0:	ee60 7a28 	vmul.f32	s15, s0, s17
 80241e4:	3f01      	subs	r7, #1
 80241e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80241ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80241ee:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80241f2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80241f6:	ecac 0a01 	vstmia	ip!, {s0}
 80241fa:	ed90 0a00 	vldr	s0, [r0]
 80241fe:	ee37 0a80 	vadd.f32	s0, s15, s0
 8024202:	e799      	b.n	8024138 <__kernel_rem_pio2f+0xe4>
 8024204:	d105      	bne.n	8024212 <__kernel_rem_pio2f+0x1be>
 8024206:	1e70      	subs	r0, r6, #1
 8024208:	ab08      	add	r3, sp, #32
 802420a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 802420e:	11ff      	asrs	r7, r7, #7
 8024210:	e7c5      	b.n	802419e <__kernel_rem_pio2f+0x14a>
 8024212:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8024216:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802421a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802421e:	da31      	bge.n	8024284 <__kernel_rem_pio2f+0x230>
 8024220:	2700      	movs	r7, #0
 8024222:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8024226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802422a:	f040 809b 	bne.w	8024364 <__kernel_rem_pio2f+0x310>
 802422e:	1e74      	subs	r4, r6, #1
 8024230:	46a4      	mov	ip, r4
 8024232:	2000      	movs	r0, #0
 8024234:	45d4      	cmp	ip, sl
 8024236:	da4a      	bge.n	80242ce <__kernel_rem_pio2f+0x27a>
 8024238:	2800      	cmp	r0, #0
 802423a:	d07a      	beq.n	8024332 <__kernel_rem_pio2f+0x2de>
 802423c:	ab08      	add	r3, sp, #32
 802423e:	3d08      	subs	r5, #8
 8024240:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8024244:	2b00      	cmp	r3, #0
 8024246:	f000 8081 	beq.w	802434c <__kernel_rem_pio2f+0x2f8>
 802424a:	4628      	mov	r0, r5
 802424c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8024250:	00a5      	lsls	r5, r4, #2
 8024252:	f000 fc1f 	bl	8024a94 <scalbnf>
 8024256:	aa44      	add	r2, sp, #272	; 0x110
 8024258:	1d2b      	adds	r3, r5, #4
 802425a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 802435c <__kernel_rem_pio2f+0x308>
 802425e:	18d1      	adds	r1, r2, r3
 8024260:	4622      	mov	r2, r4
 8024262:	2a00      	cmp	r2, #0
 8024264:	f280 80ae 	bge.w	80243c4 <__kernel_rem_pio2f+0x370>
 8024268:	4622      	mov	r2, r4
 802426a:	2a00      	cmp	r2, #0
 802426c:	f2c0 80cc 	blt.w	8024408 <__kernel_rem_pio2f+0x3b4>
 8024270:	a944      	add	r1, sp, #272	; 0x110
 8024272:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8024276:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8024354 <__kernel_rem_pio2f+0x300>
 802427a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8024360 <__kernel_rem_pio2f+0x30c>
 802427e:	2000      	movs	r0, #0
 8024280:	1aa1      	subs	r1, r4, r2
 8024282:	e0b6      	b.n	80243f2 <__kernel_rem_pio2f+0x39e>
 8024284:	2702      	movs	r7, #2
 8024286:	e78c      	b.n	80241a2 <__kernel_rem_pio2f+0x14e>
 8024288:	6820      	ldr	r0, [r4, #0]
 802428a:	b94b      	cbnz	r3, 80242a0 <__kernel_rem_pio2f+0x24c>
 802428c:	b118      	cbz	r0, 8024296 <__kernel_rem_pio2f+0x242>
 802428e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8024292:	6020      	str	r0, [r4, #0]
 8024294:	2001      	movs	r0, #1
 8024296:	f10e 0e01 	add.w	lr, lr, #1
 802429a:	3404      	adds	r4, #4
 802429c:	4603      	mov	r3, r0
 802429e:	e785      	b.n	80241ac <__kernel_rem_pio2f+0x158>
 80242a0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80242a4:	6020      	str	r0, [r4, #0]
 80242a6:	4618      	mov	r0, r3
 80242a8:	e7f5      	b.n	8024296 <__kernel_rem_pio2f+0x242>
 80242aa:	1e74      	subs	r4, r6, #1
 80242ac:	a808      	add	r0, sp, #32
 80242ae:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80242b2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80242b6:	f10d 0c20 	add.w	ip, sp, #32
 80242ba:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80242be:	e77e      	b.n	80241be <__kernel_rem_pio2f+0x16a>
 80242c0:	1e74      	subs	r4, r6, #1
 80242c2:	a808      	add	r0, sp, #32
 80242c4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80242c8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80242cc:	e7f3      	b.n	80242b6 <__kernel_rem_pio2f+0x262>
 80242ce:	ab08      	add	r3, sp, #32
 80242d0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80242d4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80242d8:	4318      	orrs	r0, r3
 80242da:	e7ab      	b.n	8024234 <__kernel_rem_pio2f+0x1e0>
 80242dc:	f10c 0c01 	add.w	ip, ip, #1
 80242e0:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80242e4:	2c00      	cmp	r4, #0
 80242e6:	d0f9      	beq.n	80242dc <__kernel_rem_pio2f+0x288>
 80242e8:	9b05      	ldr	r3, [sp, #20]
 80242ea:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80242ee:	eb0d 0003 	add.w	r0, sp, r3
 80242f2:	9b01      	ldr	r3, [sp, #4]
 80242f4:	18f4      	adds	r4, r6, r3
 80242f6:	ab1c      	add	r3, sp, #112	; 0x70
 80242f8:	1c77      	adds	r7, r6, #1
 80242fa:	384c      	subs	r0, #76	; 0x4c
 80242fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8024300:	4466      	add	r6, ip
 8024302:	42be      	cmp	r6, r7
 8024304:	f6ff af0b 	blt.w	802411e <__kernel_rem_pio2f+0xca>
 8024308:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 802430c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8024310:	ee07 3a90 	vmov	s15, r3
 8024314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024318:	f04f 0c00 	mov.w	ip, #0
 802431c:	ece4 7a01 	vstmia	r4!, {s15}
 8024320:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8024360 <__kernel_rem_pio2f+0x30c>
 8024324:	46a1      	mov	r9, r4
 8024326:	458c      	cmp	ip, r1
 8024328:	dd07      	ble.n	802433a <__kernel_rem_pio2f+0x2e6>
 802432a:	ece0 7a01 	vstmia	r0!, {s15}
 802432e:	3701      	adds	r7, #1
 8024330:	e7e7      	b.n	8024302 <__kernel_rem_pio2f+0x2ae>
 8024332:	9804      	ldr	r0, [sp, #16]
 8024334:	f04f 0c01 	mov.w	ip, #1
 8024338:	e7d2      	b.n	80242e0 <__kernel_rem_pio2f+0x28c>
 802433a:	ecfe 6a01 	vldmia	lr!, {s13}
 802433e:	ed39 7a01 	vldmdb	r9!, {s14}
 8024342:	f10c 0c01 	add.w	ip, ip, #1
 8024346:	eee6 7a87 	vfma.f32	s15, s13, s14
 802434a:	e7ec      	b.n	8024326 <__kernel_rem_pio2f+0x2d2>
 802434c:	3c01      	subs	r4, #1
 802434e:	e775      	b.n	802423c <__kernel_rem_pio2f+0x1e8>
 8024350:	08028904 	.word	0x08028904
 8024354:	080288d8 	.word	0x080288d8
 8024358:	43800000 	.word	0x43800000
 802435c:	3b800000 	.word	0x3b800000
 8024360:	00000000 	.word	0x00000000
 8024364:	9b03      	ldr	r3, [sp, #12]
 8024366:	eeb0 0a48 	vmov.f32	s0, s16
 802436a:	1a98      	subs	r0, r3, r2
 802436c:	f000 fb92 	bl	8024a94 <scalbnf>
 8024370:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8024358 <__kernel_rem_pio2f+0x304>
 8024374:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8024378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802437c:	db19      	blt.n	80243b2 <__kernel_rem_pio2f+0x35e>
 802437e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 802435c <__kernel_rem_pio2f+0x308>
 8024382:	ee60 7a27 	vmul.f32	s15, s0, s15
 8024386:	aa08      	add	r2, sp, #32
 8024388:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802438c:	1c74      	adds	r4, r6, #1
 802438e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024392:	3508      	adds	r5, #8
 8024394:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8024398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802439c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80243a0:	ee10 3a10 	vmov	r3, s0
 80243a4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80243a8:	ee17 3a90 	vmov	r3, s15
 80243ac:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80243b0:	e74b      	b.n	802424a <__kernel_rem_pio2f+0x1f6>
 80243b2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80243b6:	aa08      	add	r2, sp, #32
 80243b8:	ee10 3a10 	vmov	r3, s0
 80243bc:	4634      	mov	r4, r6
 80243be:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80243c2:	e742      	b.n	802424a <__kernel_rem_pio2f+0x1f6>
 80243c4:	a808      	add	r0, sp, #32
 80243c6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80243ca:	9001      	str	r0, [sp, #4]
 80243cc:	ee07 0a90 	vmov	s15, r0
 80243d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80243d4:	3a01      	subs	r2, #1
 80243d6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80243da:	ee20 0a07 	vmul.f32	s0, s0, s14
 80243de:	ed61 7a01 	vstmdb	r1!, {s15}
 80243e2:	e73e      	b.n	8024262 <__kernel_rem_pio2f+0x20e>
 80243e4:	ecfc 6a01 	vldmia	ip!, {s13}
 80243e8:	ecb6 7a01 	vldmia	r6!, {s14}
 80243ec:	eee6 7a87 	vfma.f32	s15, s13, s14
 80243f0:	3001      	adds	r0, #1
 80243f2:	4550      	cmp	r0, sl
 80243f4:	dc01      	bgt.n	80243fa <__kernel_rem_pio2f+0x3a6>
 80243f6:	4288      	cmp	r0, r1
 80243f8:	ddf4      	ble.n	80243e4 <__kernel_rem_pio2f+0x390>
 80243fa:	a858      	add	r0, sp, #352	; 0x160
 80243fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8024400:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8024404:	3a01      	subs	r2, #1
 8024406:	e730      	b.n	802426a <__kernel_rem_pio2f+0x216>
 8024408:	9a66      	ldr	r2, [sp, #408]	; 0x198
 802440a:	2a02      	cmp	r2, #2
 802440c:	dc09      	bgt.n	8024422 <__kernel_rem_pio2f+0x3ce>
 802440e:	2a00      	cmp	r2, #0
 8024410:	dc2a      	bgt.n	8024468 <__kernel_rem_pio2f+0x414>
 8024412:	d043      	beq.n	802449c <__kernel_rem_pio2f+0x448>
 8024414:	f009 0007 	and.w	r0, r9, #7
 8024418:	b059      	add	sp, #356	; 0x164
 802441a:	ecbd 8b04 	vpop	{d8-d9}
 802441e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024422:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8024424:	2b03      	cmp	r3, #3
 8024426:	d1f5      	bne.n	8024414 <__kernel_rem_pio2f+0x3c0>
 8024428:	ab30      	add	r3, sp, #192	; 0xc0
 802442a:	442b      	add	r3, r5
 802442c:	461a      	mov	r2, r3
 802442e:	4619      	mov	r1, r3
 8024430:	4620      	mov	r0, r4
 8024432:	2800      	cmp	r0, #0
 8024434:	f1a1 0104 	sub.w	r1, r1, #4
 8024438:	dc51      	bgt.n	80244de <__kernel_rem_pio2f+0x48a>
 802443a:	4621      	mov	r1, r4
 802443c:	2901      	cmp	r1, #1
 802443e:	f1a2 0204 	sub.w	r2, r2, #4
 8024442:	dc5c      	bgt.n	80244fe <__kernel_rem_pio2f+0x4aa>
 8024444:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8024360 <__kernel_rem_pio2f+0x30c>
 8024448:	3304      	adds	r3, #4
 802444a:	2c01      	cmp	r4, #1
 802444c:	dc67      	bgt.n	802451e <__kernel_rem_pio2f+0x4ca>
 802444e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8024452:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8024456:	2f00      	cmp	r7, #0
 8024458:	d167      	bne.n	802452a <__kernel_rem_pio2f+0x4d6>
 802445a:	edc8 6a00 	vstr	s13, [r8]
 802445e:	ed88 7a01 	vstr	s14, [r8, #4]
 8024462:	edc8 7a02 	vstr	s15, [r8, #8]
 8024466:	e7d5      	b.n	8024414 <__kernel_rem_pio2f+0x3c0>
 8024468:	aa30      	add	r2, sp, #192	; 0xc0
 802446a:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8024360 <__kernel_rem_pio2f+0x30c>
 802446e:	4413      	add	r3, r2
 8024470:	4622      	mov	r2, r4
 8024472:	2a00      	cmp	r2, #0
 8024474:	da24      	bge.n	80244c0 <__kernel_rem_pio2f+0x46c>
 8024476:	b34f      	cbz	r7, 80244cc <__kernel_rem_pio2f+0x478>
 8024478:	eef1 7a47 	vneg.f32	s15, s14
 802447c:	edc8 7a00 	vstr	s15, [r8]
 8024480:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8024484:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024488:	aa31      	add	r2, sp, #196	; 0xc4
 802448a:	2301      	movs	r3, #1
 802448c:	429c      	cmp	r4, r3
 802448e:	da20      	bge.n	80244d2 <__kernel_rem_pio2f+0x47e>
 8024490:	b10f      	cbz	r7, 8024496 <__kernel_rem_pio2f+0x442>
 8024492:	eef1 7a67 	vneg.f32	s15, s15
 8024496:	edc8 7a01 	vstr	s15, [r8, #4]
 802449a:	e7bb      	b.n	8024414 <__kernel_rem_pio2f+0x3c0>
 802449c:	aa30      	add	r2, sp, #192	; 0xc0
 802449e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8024360 <__kernel_rem_pio2f+0x30c>
 80244a2:	4413      	add	r3, r2
 80244a4:	2c00      	cmp	r4, #0
 80244a6:	da05      	bge.n	80244b4 <__kernel_rem_pio2f+0x460>
 80244a8:	b10f      	cbz	r7, 80244ae <__kernel_rem_pio2f+0x45a>
 80244aa:	eef1 7a67 	vneg.f32	s15, s15
 80244ae:	edc8 7a00 	vstr	s15, [r8]
 80244b2:	e7af      	b.n	8024414 <__kernel_rem_pio2f+0x3c0>
 80244b4:	ed33 7a01 	vldmdb	r3!, {s14}
 80244b8:	3c01      	subs	r4, #1
 80244ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80244be:	e7f1      	b.n	80244a4 <__kernel_rem_pio2f+0x450>
 80244c0:	ed73 7a01 	vldmdb	r3!, {s15}
 80244c4:	3a01      	subs	r2, #1
 80244c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80244ca:	e7d2      	b.n	8024472 <__kernel_rem_pio2f+0x41e>
 80244cc:	eef0 7a47 	vmov.f32	s15, s14
 80244d0:	e7d4      	b.n	802447c <__kernel_rem_pio2f+0x428>
 80244d2:	ecb2 7a01 	vldmia	r2!, {s14}
 80244d6:	3301      	adds	r3, #1
 80244d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80244dc:	e7d6      	b.n	802448c <__kernel_rem_pio2f+0x438>
 80244de:	edd1 7a00 	vldr	s15, [r1]
 80244e2:	edd1 6a01 	vldr	s13, [r1, #4]
 80244e6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80244ea:	3801      	subs	r0, #1
 80244ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80244f0:	ed81 7a00 	vstr	s14, [r1]
 80244f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80244f8:	edc1 7a01 	vstr	s15, [r1, #4]
 80244fc:	e799      	b.n	8024432 <__kernel_rem_pio2f+0x3de>
 80244fe:	edd2 7a00 	vldr	s15, [r2]
 8024502:	edd2 6a01 	vldr	s13, [r2, #4]
 8024506:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802450a:	3901      	subs	r1, #1
 802450c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024510:	ed82 7a00 	vstr	s14, [r2]
 8024514:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8024518:	edc2 7a01 	vstr	s15, [r2, #4]
 802451c:	e78e      	b.n	802443c <__kernel_rem_pio2f+0x3e8>
 802451e:	ed33 7a01 	vldmdb	r3!, {s14}
 8024522:	3c01      	subs	r4, #1
 8024524:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024528:	e78f      	b.n	802444a <__kernel_rem_pio2f+0x3f6>
 802452a:	eef1 6a66 	vneg.f32	s13, s13
 802452e:	eeb1 7a47 	vneg.f32	s14, s14
 8024532:	edc8 6a00 	vstr	s13, [r8]
 8024536:	ed88 7a01 	vstr	s14, [r8, #4]
 802453a:	eef1 7a67 	vneg.f32	s15, s15
 802453e:	e790      	b.n	8024462 <__kernel_rem_pio2f+0x40e>

08024540 <__kernel_sinf>:
 8024540:	ee10 3a10 	vmov	r3, s0
 8024544:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024548:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802454c:	da04      	bge.n	8024558 <__kernel_sinf+0x18>
 802454e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8024552:	ee17 3a90 	vmov	r3, s15
 8024556:	b35b      	cbz	r3, 80245b0 <__kernel_sinf+0x70>
 8024558:	ee20 7a00 	vmul.f32	s14, s0, s0
 802455c:	eddf 7a15 	vldr	s15, [pc, #84]	; 80245b4 <__kernel_sinf+0x74>
 8024560:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80245b8 <__kernel_sinf+0x78>
 8024564:	eea7 6a27 	vfma.f32	s12, s14, s15
 8024568:	eddf 7a14 	vldr	s15, [pc, #80]	; 80245bc <__kernel_sinf+0x7c>
 802456c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8024570:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80245c0 <__kernel_sinf+0x80>
 8024574:	eea7 6a87 	vfma.f32	s12, s15, s14
 8024578:	eddf 7a12 	vldr	s15, [pc, #72]	; 80245c4 <__kernel_sinf+0x84>
 802457c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8024580:	eee6 7a07 	vfma.f32	s15, s12, s14
 8024584:	b930      	cbnz	r0, 8024594 <__kernel_sinf+0x54>
 8024586:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80245c8 <__kernel_sinf+0x88>
 802458a:	eea7 6a27 	vfma.f32	s12, s14, s15
 802458e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8024592:	4770      	bx	lr
 8024594:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8024598:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 802459c:	eee0 7a86 	vfma.f32	s15, s1, s12
 80245a0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80245a4:	eddf 7a09 	vldr	s15, [pc, #36]	; 80245cc <__kernel_sinf+0x8c>
 80245a8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80245ac:	ee30 0a60 	vsub.f32	s0, s0, s1
 80245b0:	4770      	bx	lr
 80245b2:	bf00      	nop
 80245b4:	2f2ec9d3 	.word	0x2f2ec9d3
 80245b8:	b2d72f34 	.word	0xb2d72f34
 80245bc:	3638ef1b 	.word	0x3638ef1b
 80245c0:	b9500d01 	.word	0xb9500d01
 80245c4:	3c088889 	.word	0x3c088889
 80245c8:	be2aaaab 	.word	0xbe2aaaab
 80245cc:	3e2aaaab 	.word	0x3e2aaaab

080245d0 <with_errnof>:
 80245d0:	b513      	push	{r0, r1, r4, lr}
 80245d2:	4604      	mov	r4, r0
 80245d4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80245d8:	f7fd fbbc 	bl	8021d54 <__errno>
 80245dc:	ed9d 0a01 	vldr	s0, [sp, #4]
 80245e0:	6004      	str	r4, [r0, #0]
 80245e2:	b002      	add	sp, #8
 80245e4:	bd10      	pop	{r4, pc}

080245e6 <xflowf>:
 80245e6:	b130      	cbz	r0, 80245f6 <xflowf+0x10>
 80245e8:	eef1 7a40 	vneg.f32	s15, s0
 80245ec:	ee27 0a80 	vmul.f32	s0, s15, s0
 80245f0:	2022      	movs	r0, #34	; 0x22
 80245f2:	f7ff bfed 	b.w	80245d0 <with_errnof>
 80245f6:	eef0 7a40 	vmov.f32	s15, s0
 80245fa:	e7f7      	b.n	80245ec <xflowf+0x6>

080245fc <__math_uflowf>:
 80245fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8024604 <__math_uflowf+0x8>
 8024600:	f7ff bff1 	b.w	80245e6 <xflowf>
 8024604:	10000000 	.word	0x10000000

08024608 <__math_oflowf>:
 8024608:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8024610 <__math_oflowf+0x8>
 802460c:	f7ff bfeb 	b.w	80245e6 <xflowf>
 8024610:	70000000 	.word	0x70000000

08024614 <fabs>:
 8024614:	ec51 0b10 	vmov	r0, r1, d0
 8024618:	ee10 2a10 	vmov	r2, s0
 802461c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8024620:	ec43 2b10 	vmov	d0, r2, r3
 8024624:	4770      	bx	lr
	...

08024628 <floor>:
 8024628:	ec51 0b10 	vmov	r0, r1, d0
 802462c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024630:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8024634:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8024638:	2e13      	cmp	r6, #19
 802463a:	ee10 5a10 	vmov	r5, s0
 802463e:	ee10 8a10 	vmov	r8, s0
 8024642:	460c      	mov	r4, r1
 8024644:	dc32      	bgt.n	80246ac <floor+0x84>
 8024646:	2e00      	cmp	r6, #0
 8024648:	da14      	bge.n	8024674 <floor+0x4c>
 802464a:	a333      	add	r3, pc, #204	; (adr r3, 8024718 <floor+0xf0>)
 802464c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024650:	f7db fdda 	bl	8000208 <__adddf3>
 8024654:	2200      	movs	r2, #0
 8024656:	2300      	movs	r3, #0
 8024658:	f7dc fa1c 	bl	8000a94 <__aeabi_dcmpgt>
 802465c:	b138      	cbz	r0, 802466e <floor+0x46>
 802465e:	2c00      	cmp	r4, #0
 8024660:	da57      	bge.n	8024712 <floor+0xea>
 8024662:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8024666:	431d      	orrs	r5, r3
 8024668:	d001      	beq.n	802466e <floor+0x46>
 802466a:	4c2d      	ldr	r4, [pc, #180]	; (8024720 <floor+0xf8>)
 802466c:	2500      	movs	r5, #0
 802466e:	4621      	mov	r1, r4
 8024670:	4628      	mov	r0, r5
 8024672:	e025      	b.n	80246c0 <floor+0x98>
 8024674:	4f2b      	ldr	r7, [pc, #172]	; (8024724 <floor+0xfc>)
 8024676:	4137      	asrs	r7, r6
 8024678:	ea01 0307 	and.w	r3, r1, r7
 802467c:	4303      	orrs	r3, r0
 802467e:	d01f      	beq.n	80246c0 <floor+0x98>
 8024680:	a325      	add	r3, pc, #148	; (adr r3, 8024718 <floor+0xf0>)
 8024682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024686:	f7db fdbf 	bl	8000208 <__adddf3>
 802468a:	2200      	movs	r2, #0
 802468c:	2300      	movs	r3, #0
 802468e:	f7dc fa01 	bl	8000a94 <__aeabi_dcmpgt>
 8024692:	2800      	cmp	r0, #0
 8024694:	d0eb      	beq.n	802466e <floor+0x46>
 8024696:	2c00      	cmp	r4, #0
 8024698:	bfbe      	ittt	lt
 802469a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 802469e:	fa43 f606 	asrlt.w	r6, r3, r6
 80246a2:	19a4      	addlt	r4, r4, r6
 80246a4:	ea24 0407 	bic.w	r4, r4, r7
 80246a8:	2500      	movs	r5, #0
 80246aa:	e7e0      	b.n	802466e <floor+0x46>
 80246ac:	2e33      	cmp	r6, #51	; 0x33
 80246ae:	dd0b      	ble.n	80246c8 <floor+0xa0>
 80246b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80246b4:	d104      	bne.n	80246c0 <floor+0x98>
 80246b6:	ee10 2a10 	vmov	r2, s0
 80246ba:	460b      	mov	r3, r1
 80246bc:	f7db fda4 	bl	8000208 <__adddf3>
 80246c0:	ec41 0b10 	vmov	d0, r0, r1
 80246c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80246c8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80246cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80246d0:	fa23 f707 	lsr.w	r7, r3, r7
 80246d4:	4207      	tst	r7, r0
 80246d6:	d0f3      	beq.n	80246c0 <floor+0x98>
 80246d8:	a30f      	add	r3, pc, #60	; (adr r3, 8024718 <floor+0xf0>)
 80246da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80246de:	f7db fd93 	bl	8000208 <__adddf3>
 80246e2:	2200      	movs	r2, #0
 80246e4:	2300      	movs	r3, #0
 80246e6:	f7dc f9d5 	bl	8000a94 <__aeabi_dcmpgt>
 80246ea:	2800      	cmp	r0, #0
 80246ec:	d0bf      	beq.n	802466e <floor+0x46>
 80246ee:	2c00      	cmp	r4, #0
 80246f0:	da02      	bge.n	80246f8 <floor+0xd0>
 80246f2:	2e14      	cmp	r6, #20
 80246f4:	d103      	bne.n	80246fe <floor+0xd6>
 80246f6:	3401      	adds	r4, #1
 80246f8:	ea25 0507 	bic.w	r5, r5, r7
 80246fc:	e7b7      	b.n	802466e <floor+0x46>
 80246fe:	2301      	movs	r3, #1
 8024700:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8024704:	fa03 f606 	lsl.w	r6, r3, r6
 8024708:	4435      	add	r5, r6
 802470a:	4545      	cmp	r5, r8
 802470c:	bf38      	it	cc
 802470e:	18e4      	addcc	r4, r4, r3
 8024710:	e7f2      	b.n	80246f8 <floor+0xd0>
 8024712:	2500      	movs	r5, #0
 8024714:	462c      	mov	r4, r5
 8024716:	e7aa      	b.n	802466e <floor+0x46>
 8024718:	8800759c 	.word	0x8800759c
 802471c:	7e37e43c 	.word	0x7e37e43c
 8024720:	bff00000 	.word	0xbff00000
 8024724:	000fffff 	.word	0x000fffff

08024728 <scalbn>:
 8024728:	b570      	push	{r4, r5, r6, lr}
 802472a:	ec55 4b10 	vmov	r4, r5, d0
 802472e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8024732:	4606      	mov	r6, r0
 8024734:	462b      	mov	r3, r5
 8024736:	b99a      	cbnz	r2, 8024760 <scalbn+0x38>
 8024738:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802473c:	4323      	orrs	r3, r4
 802473e:	d036      	beq.n	80247ae <scalbn+0x86>
 8024740:	4b39      	ldr	r3, [pc, #228]	; (8024828 <scalbn+0x100>)
 8024742:	4629      	mov	r1, r5
 8024744:	ee10 0a10 	vmov	r0, s0
 8024748:	2200      	movs	r2, #0
 802474a:	f7db ff13 	bl	8000574 <__aeabi_dmul>
 802474e:	4b37      	ldr	r3, [pc, #220]	; (802482c <scalbn+0x104>)
 8024750:	429e      	cmp	r6, r3
 8024752:	4604      	mov	r4, r0
 8024754:	460d      	mov	r5, r1
 8024756:	da10      	bge.n	802477a <scalbn+0x52>
 8024758:	a32b      	add	r3, pc, #172	; (adr r3, 8024808 <scalbn+0xe0>)
 802475a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802475e:	e03a      	b.n	80247d6 <scalbn+0xae>
 8024760:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8024764:	428a      	cmp	r2, r1
 8024766:	d10c      	bne.n	8024782 <scalbn+0x5a>
 8024768:	ee10 2a10 	vmov	r2, s0
 802476c:	4620      	mov	r0, r4
 802476e:	4629      	mov	r1, r5
 8024770:	f7db fd4a 	bl	8000208 <__adddf3>
 8024774:	4604      	mov	r4, r0
 8024776:	460d      	mov	r5, r1
 8024778:	e019      	b.n	80247ae <scalbn+0x86>
 802477a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802477e:	460b      	mov	r3, r1
 8024780:	3a36      	subs	r2, #54	; 0x36
 8024782:	4432      	add	r2, r6
 8024784:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8024788:	428a      	cmp	r2, r1
 802478a:	dd08      	ble.n	802479e <scalbn+0x76>
 802478c:	2d00      	cmp	r5, #0
 802478e:	a120      	add	r1, pc, #128	; (adr r1, 8024810 <scalbn+0xe8>)
 8024790:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024794:	da1c      	bge.n	80247d0 <scalbn+0xa8>
 8024796:	a120      	add	r1, pc, #128	; (adr r1, 8024818 <scalbn+0xf0>)
 8024798:	e9d1 0100 	ldrd	r0, r1, [r1]
 802479c:	e018      	b.n	80247d0 <scalbn+0xa8>
 802479e:	2a00      	cmp	r2, #0
 80247a0:	dd08      	ble.n	80247b4 <scalbn+0x8c>
 80247a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80247a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80247aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80247ae:	ec45 4b10 	vmov	d0, r4, r5
 80247b2:	bd70      	pop	{r4, r5, r6, pc}
 80247b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80247b8:	da19      	bge.n	80247ee <scalbn+0xc6>
 80247ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80247be:	429e      	cmp	r6, r3
 80247c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80247c4:	dd0a      	ble.n	80247dc <scalbn+0xb4>
 80247c6:	a112      	add	r1, pc, #72	; (adr r1, 8024810 <scalbn+0xe8>)
 80247c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80247cc:	2b00      	cmp	r3, #0
 80247ce:	d1e2      	bne.n	8024796 <scalbn+0x6e>
 80247d0:	a30f      	add	r3, pc, #60	; (adr r3, 8024810 <scalbn+0xe8>)
 80247d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247d6:	f7db fecd 	bl	8000574 <__aeabi_dmul>
 80247da:	e7cb      	b.n	8024774 <scalbn+0x4c>
 80247dc:	a10a      	add	r1, pc, #40	; (adr r1, 8024808 <scalbn+0xe0>)
 80247de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80247e2:	2b00      	cmp	r3, #0
 80247e4:	d0b8      	beq.n	8024758 <scalbn+0x30>
 80247e6:	a10e      	add	r1, pc, #56	; (adr r1, 8024820 <scalbn+0xf8>)
 80247e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80247ec:	e7b4      	b.n	8024758 <scalbn+0x30>
 80247ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80247f2:	3236      	adds	r2, #54	; 0x36
 80247f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80247f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80247fc:	4620      	mov	r0, r4
 80247fe:	4b0c      	ldr	r3, [pc, #48]	; (8024830 <scalbn+0x108>)
 8024800:	2200      	movs	r2, #0
 8024802:	e7e8      	b.n	80247d6 <scalbn+0xae>
 8024804:	f3af 8000 	nop.w
 8024808:	c2f8f359 	.word	0xc2f8f359
 802480c:	01a56e1f 	.word	0x01a56e1f
 8024810:	8800759c 	.word	0x8800759c
 8024814:	7e37e43c 	.word	0x7e37e43c
 8024818:	8800759c 	.word	0x8800759c
 802481c:	fe37e43c 	.word	0xfe37e43c
 8024820:	c2f8f359 	.word	0xc2f8f359
 8024824:	81a56e1f 	.word	0x81a56e1f
 8024828:	43500000 	.word	0x43500000
 802482c:	ffff3cb0 	.word	0xffff3cb0
 8024830:	3c900000 	.word	0x3c900000

08024834 <atanf>:
 8024834:	b538      	push	{r3, r4, r5, lr}
 8024836:	ee10 5a10 	vmov	r5, s0
 802483a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 802483e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8024842:	eef0 7a40 	vmov.f32	s15, s0
 8024846:	db10      	blt.n	802486a <atanf+0x36>
 8024848:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 802484c:	dd04      	ble.n	8024858 <atanf+0x24>
 802484e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8024852:	eeb0 0a67 	vmov.f32	s0, s15
 8024856:	bd38      	pop	{r3, r4, r5, pc}
 8024858:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8024990 <atanf+0x15c>
 802485c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8024994 <atanf+0x160>
 8024860:	2d00      	cmp	r5, #0
 8024862:	bfd8      	it	le
 8024864:	eef0 7a40 	vmovle.f32	s15, s0
 8024868:	e7f3      	b.n	8024852 <atanf+0x1e>
 802486a:	4b4b      	ldr	r3, [pc, #300]	; (8024998 <atanf+0x164>)
 802486c:	429c      	cmp	r4, r3
 802486e:	dc10      	bgt.n	8024892 <atanf+0x5e>
 8024870:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8024874:	da0a      	bge.n	802488c <atanf+0x58>
 8024876:	ed9f 7a49 	vldr	s14, [pc, #292]	; 802499c <atanf+0x168>
 802487a:	ee30 7a07 	vadd.f32	s14, s0, s14
 802487e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8024882:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8024886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802488a:	dce2      	bgt.n	8024852 <atanf+0x1e>
 802488c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8024890:	e013      	b.n	80248ba <atanf+0x86>
 8024892:	f000 f8a3 	bl	80249dc <fabsf>
 8024896:	4b42      	ldr	r3, [pc, #264]	; (80249a0 <atanf+0x16c>)
 8024898:	429c      	cmp	r4, r3
 802489a:	dc4f      	bgt.n	802493c <atanf+0x108>
 802489c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80248a0:	429c      	cmp	r4, r3
 80248a2:	dc41      	bgt.n	8024928 <atanf+0xf4>
 80248a4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80248a8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80248ac:	eea0 7a27 	vfma.f32	s14, s0, s15
 80248b0:	2300      	movs	r3, #0
 80248b2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80248b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80248ba:	1c5a      	adds	r2, r3, #1
 80248bc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80248c0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80249a4 <atanf+0x170>
 80248c4:	eddf 5a38 	vldr	s11, [pc, #224]	; 80249a8 <atanf+0x174>
 80248c8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80249ac <atanf+0x178>
 80248cc:	ee66 6a06 	vmul.f32	s13, s12, s12
 80248d0:	eee6 5a87 	vfma.f32	s11, s13, s14
 80248d4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80249b0 <atanf+0x17c>
 80248d8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80248dc:	eddf 5a35 	vldr	s11, [pc, #212]	; 80249b4 <atanf+0x180>
 80248e0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80248e4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80249b8 <atanf+0x184>
 80248e8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80248ec:	eddf 5a33 	vldr	s11, [pc, #204]	; 80249bc <atanf+0x188>
 80248f0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80248f4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80249c0 <atanf+0x18c>
 80248f8:	eea6 5a87 	vfma.f32	s10, s13, s14
 80248fc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80249c4 <atanf+0x190>
 8024900:	eea5 7a26 	vfma.f32	s14, s10, s13
 8024904:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80249c8 <atanf+0x194>
 8024908:	eea7 5a26 	vfma.f32	s10, s14, s13
 802490c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80249cc <atanf+0x198>
 8024910:	eea5 7a26 	vfma.f32	s14, s10, s13
 8024914:	ee27 7a26 	vmul.f32	s14, s14, s13
 8024918:	eea5 7a86 	vfma.f32	s14, s11, s12
 802491c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8024920:	d121      	bne.n	8024966 <atanf+0x132>
 8024922:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024926:	e794      	b.n	8024852 <atanf+0x1e>
 8024928:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802492c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8024930:	ee30 0a27 	vadd.f32	s0, s0, s15
 8024934:	2301      	movs	r3, #1
 8024936:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802493a:	e7be      	b.n	80248ba <atanf+0x86>
 802493c:	4b24      	ldr	r3, [pc, #144]	; (80249d0 <atanf+0x19c>)
 802493e:	429c      	cmp	r4, r3
 8024940:	dc0b      	bgt.n	802495a <atanf+0x126>
 8024942:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8024946:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802494a:	eea0 7a27 	vfma.f32	s14, s0, s15
 802494e:	2302      	movs	r3, #2
 8024950:	ee70 6a67 	vsub.f32	s13, s0, s15
 8024954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8024958:	e7af      	b.n	80248ba <atanf+0x86>
 802495a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802495e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024962:	2303      	movs	r3, #3
 8024964:	e7a9      	b.n	80248ba <atanf+0x86>
 8024966:	4a1b      	ldr	r2, [pc, #108]	; (80249d4 <atanf+0x1a0>)
 8024968:	491b      	ldr	r1, [pc, #108]	; (80249d8 <atanf+0x1a4>)
 802496a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802496e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8024972:	ed93 0a00 	vldr	s0, [r3]
 8024976:	ee37 7a40 	vsub.f32	s14, s14, s0
 802497a:	ed92 0a00 	vldr	s0, [r2]
 802497e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024982:	2d00      	cmp	r5, #0
 8024984:	ee70 7a67 	vsub.f32	s15, s0, s15
 8024988:	bfb8      	it	lt
 802498a:	eef1 7a67 	vneglt.f32	s15, s15
 802498e:	e760      	b.n	8024852 <atanf+0x1e>
 8024990:	3fc90fdb 	.word	0x3fc90fdb
 8024994:	bfc90fdb 	.word	0xbfc90fdb
 8024998:	3edfffff 	.word	0x3edfffff
 802499c:	7149f2ca 	.word	0x7149f2ca
 80249a0:	3f97ffff 	.word	0x3f97ffff
 80249a4:	3c8569d7 	.word	0x3c8569d7
 80249a8:	3d4bda59 	.word	0x3d4bda59
 80249ac:	bd6ef16b 	.word	0xbd6ef16b
 80249b0:	3d886b35 	.word	0x3d886b35
 80249b4:	3dba2e6e 	.word	0x3dba2e6e
 80249b8:	3e124925 	.word	0x3e124925
 80249bc:	3eaaaaab 	.word	0x3eaaaaab
 80249c0:	bd15a221 	.word	0xbd15a221
 80249c4:	bd9d8795 	.word	0xbd9d8795
 80249c8:	bde38e38 	.word	0xbde38e38
 80249cc:	be4ccccd 	.word	0xbe4ccccd
 80249d0:	401bffff 	.word	0x401bffff
 80249d4:	08028910 	.word	0x08028910
 80249d8:	08028920 	.word	0x08028920

080249dc <fabsf>:
 80249dc:	ee10 3a10 	vmov	r3, s0
 80249e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80249e4:	ee00 3a10 	vmov	s0, r3
 80249e8:	4770      	bx	lr

080249ea <finitef>:
 80249ea:	b082      	sub	sp, #8
 80249ec:	ed8d 0a01 	vstr	s0, [sp, #4]
 80249f0:	9801      	ldr	r0, [sp, #4]
 80249f2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80249f6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80249fa:	bfac      	ite	ge
 80249fc:	2000      	movge	r0, #0
 80249fe:	2001      	movlt	r0, #1
 8024a00:	b002      	add	sp, #8
 8024a02:	4770      	bx	lr

08024a04 <floorf>:
 8024a04:	ee10 3a10 	vmov	r3, s0
 8024a08:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8024a0c:	3a7f      	subs	r2, #127	; 0x7f
 8024a0e:	2a16      	cmp	r2, #22
 8024a10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8024a14:	dc2a      	bgt.n	8024a6c <floorf+0x68>
 8024a16:	2a00      	cmp	r2, #0
 8024a18:	da11      	bge.n	8024a3e <floorf+0x3a>
 8024a1a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8024a7c <floorf+0x78>
 8024a1e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8024a22:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8024a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024a2a:	dd05      	ble.n	8024a38 <floorf+0x34>
 8024a2c:	2b00      	cmp	r3, #0
 8024a2e:	da23      	bge.n	8024a78 <floorf+0x74>
 8024a30:	4a13      	ldr	r2, [pc, #76]	; (8024a80 <floorf+0x7c>)
 8024a32:	2900      	cmp	r1, #0
 8024a34:	bf18      	it	ne
 8024a36:	4613      	movne	r3, r2
 8024a38:	ee00 3a10 	vmov	s0, r3
 8024a3c:	4770      	bx	lr
 8024a3e:	4911      	ldr	r1, [pc, #68]	; (8024a84 <floorf+0x80>)
 8024a40:	4111      	asrs	r1, r2
 8024a42:	420b      	tst	r3, r1
 8024a44:	d0fa      	beq.n	8024a3c <floorf+0x38>
 8024a46:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8024a7c <floorf+0x78>
 8024a4a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8024a4e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8024a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024a56:	ddef      	ble.n	8024a38 <floorf+0x34>
 8024a58:	2b00      	cmp	r3, #0
 8024a5a:	bfbe      	ittt	lt
 8024a5c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8024a60:	fa40 f202 	asrlt.w	r2, r0, r2
 8024a64:	189b      	addlt	r3, r3, r2
 8024a66:	ea23 0301 	bic.w	r3, r3, r1
 8024a6a:	e7e5      	b.n	8024a38 <floorf+0x34>
 8024a6c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8024a70:	d3e4      	bcc.n	8024a3c <floorf+0x38>
 8024a72:	ee30 0a00 	vadd.f32	s0, s0, s0
 8024a76:	4770      	bx	lr
 8024a78:	2300      	movs	r3, #0
 8024a7a:	e7dd      	b.n	8024a38 <floorf+0x34>
 8024a7c:	7149f2ca 	.word	0x7149f2ca
 8024a80:	bf800000 	.word	0xbf800000
 8024a84:	007fffff 	.word	0x007fffff

08024a88 <nanf>:
 8024a88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8024a90 <nanf+0x8>
 8024a8c:	4770      	bx	lr
 8024a8e:	bf00      	nop
 8024a90:	7fc00000 	.word	0x7fc00000

08024a94 <scalbnf>:
 8024a94:	ee10 3a10 	vmov	r3, s0
 8024a98:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8024a9c:	d025      	beq.n	8024aea <scalbnf+0x56>
 8024a9e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8024aa2:	d302      	bcc.n	8024aaa <scalbnf+0x16>
 8024aa4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8024aa8:	4770      	bx	lr
 8024aaa:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8024aae:	d122      	bne.n	8024af6 <scalbnf+0x62>
 8024ab0:	4b2a      	ldr	r3, [pc, #168]	; (8024b5c <scalbnf+0xc8>)
 8024ab2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8024b60 <scalbnf+0xcc>
 8024ab6:	4298      	cmp	r0, r3
 8024ab8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8024abc:	db16      	blt.n	8024aec <scalbnf+0x58>
 8024abe:	ee10 3a10 	vmov	r3, s0
 8024ac2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8024ac6:	3a19      	subs	r2, #25
 8024ac8:	4402      	add	r2, r0
 8024aca:	2afe      	cmp	r2, #254	; 0xfe
 8024acc:	dd15      	ble.n	8024afa <scalbnf+0x66>
 8024ace:	ee10 3a10 	vmov	r3, s0
 8024ad2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8024b64 <scalbnf+0xd0>
 8024ad6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8024b68 <scalbnf+0xd4>
 8024ada:	2b00      	cmp	r3, #0
 8024adc:	eeb0 7a67 	vmov.f32	s14, s15
 8024ae0:	bfb8      	it	lt
 8024ae2:	eef0 7a66 	vmovlt.f32	s15, s13
 8024ae6:	ee27 0a27 	vmul.f32	s0, s14, s15
 8024aea:	4770      	bx	lr
 8024aec:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8024b6c <scalbnf+0xd8>
 8024af0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8024af4:	4770      	bx	lr
 8024af6:	0dd2      	lsrs	r2, r2, #23
 8024af8:	e7e6      	b.n	8024ac8 <scalbnf+0x34>
 8024afa:	2a00      	cmp	r2, #0
 8024afc:	dd06      	ble.n	8024b0c <scalbnf+0x78>
 8024afe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024b02:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8024b06:	ee00 3a10 	vmov	s0, r3
 8024b0a:	4770      	bx	lr
 8024b0c:	f112 0f16 	cmn.w	r2, #22
 8024b10:	da1a      	bge.n	8024b48 <scalbnf+0xb4>
 8024b12:	f24c 3350 	movw	r3, #50000	; 0xc350
 8024b16:	4298      	cmp	r0, r3
 8024b18:	ee10 3a10 	vmov	r3, s0
 8024b1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8024b20:	dd0a      	ble.n	8024b38 <scalbnf+0xa4>
 8024b22:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8024b64 <scalbnf+0xd0>
 8024b26:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8024b68 <scalbnf+0xd4>
 8024b2a:	eef0 7a40 	vmov.f32	s15, s0
 8024b2e:	2b00      	cmp	r3, #0
 8024b30:	bf18      	it	ne
 8024b32:	eeb0 0a47 	vmovne.f32	s0, s14
 8024b36:	e7db      	b.n	8024af0 <scalbnf+0x5c>
 8024b38:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8024b6c <scalbnf+0xd8>
 8024b3c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8024b70 <scalbnf+0xdc>
 8024b40:	eef0 7a40 	vmov.f32	s15, s0
 8024b44:	2b00      	cmp	r3, #0
 8024b46:	e7f3      	b.n	8024b30 <scalbnf+0x9c>
 8024b48:	3219      	adds	r2, #25
 8024b4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024b4e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8024b52:	eddf 7a08 	vldr	s15, [pc, #32]	; 8024b74 <scalbnf+0xe0>
 8024b56:	ee07 3a10 	vmov	s14, r3
 8024b5a:	e7c4      	b.n	8024ae6 <scalbnf+0x52>
 8024b5c:	ffff3cb0 	.word	0xffff3cb0
 8024b60:	4c000000 	.word	0x4c000000
 8024b64:	7149f2ca 	.word	0x7149f2ca
 8024b68:	f149f2ca 	.word	0xf149f2ca
 8024b6c:	0da24260 	.word	0x0da24260
 8024b70:	8da24260 	.word	0x8da24260
 8024b74:	33000000 	.word	0x33000000

08024b78 <_init>:
 8024b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024b7a:	bf00      	nop
 8024b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024b7e:	bc08      	pop	{r3}
 8024b80:	469e      	mov	lr, r3
 8024b82:	4770      	bx	lr

08024b84 <_fini>:
 8024b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024b86:	bf00      	nop
 8024b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024b8a:	bc08      	pop	{r3}
 8024b8c:	469e      	mov	lr, r3
 8024b8e:	4770      	bx	lr
