
baseflight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026ad0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f78  08026c68  08026c68  00036c68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802abe0  0802abe0  000401c8  2**0
                  CONTENTS
  4 .ARM          00000008  0802abe0  0802abe0  0003abe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802abe8  0802abe8  000401c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802abe8  0802abe8  0003abe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802abec  0802abec  0003abec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  0802abf0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001de4  200001c8  0802adb8  000401c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001fac  0802adb8  00041fac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004d336  00000000  00000000  000401f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ad4f  00000000  00000000  0008d52e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000028d8  00000000  00000000  00098280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002528  00000000  00000000  0009ab58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021f1a  00000000  00000000  0009d080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a59b  00000000  00000000  000bef9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa545  00000000  00000000  000f9535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a3a7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b2cc  00000000  00000000  001a3acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001c8 	.word	0x200001c8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08026c50 	.word	0x08026c50

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001cc 	.word	0x200001cc
 80001d4:	08026c50 	.word	0x08026c50

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2iz>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a9c:	d215      	bcs.n	8000aca <__aeabi_d2iz+0x36>
 8000a9e:	d511      	bpl.n	8000ac4 <__aeabi_d2iz+0x30>
 8000aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa8:	d912      	bls.n	8000ad0 <__aeabi_d2iz+0x3c>
 8000aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	bf18      	it	ne
 8000ac0:	4240      	negne	r0, r0
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d105      	bne.n	8000adc <__aeabi_d2iz+0x48>
 8000ad0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	bf08      	it	eq
 8000ad6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2uiz>:
 8000ae4:	004a      	lsls	r2, r1, #1
 8000ae6:	d211      	bcs.n	8000b0c <__aeabi_d2uiz+0x28>
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aec:	d211      	bcs.n	8000b12 <__aeabi_d2uiz+0x2e>
 8000aee:	d50d      	bpl.n	8000b0c <__aeabi_d2uiz+0x28>
 8000af0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d40e      	bmi.n	8000b18 <__aeabi_d2uiz+0x34>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b16:	d102      	bne.n	8000b1e <__aeabi_d2uiz+0x3a>
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0000 	mov.w	r0, #0
 8000b22:	4770      	bx	lr

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_frsub>:
 8000bc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bc8:	e002      	b.n	8000bd0 <__addsf3>
 8000bca:	bf00      	nop

08000bcc <__aeabi_fsub>:
 8000bcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bd0 <__addsf3>:
 8000bd0:	0042      	lsls	r2, r0, #1
 8000bd2:	bf1f      	itttt	ne
 8000bd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bd8:	ea92 0f03 	teqne	r2, r3
 8000bdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be4:	d06a      	beq.n	8000cbc <__addsf3+0xec>
 8000be6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bee:	bfc1      	itttt	gt
 8000bf0:	18d2      	addgt	r2, r2, r3
 8000bf2:	4041      	eorgt	r1, r0
 8000bf4:	4048      	eorgt	r0, r1
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	bfb8      	it	lt
 8000bfa:	425b      	neglt	r3, r3
 8000bfc:	2b19      	cmp	r3, #25
 8000bfe:	bf88      	it	hi
 8000c00:	4770      	bxhi	lr
 8000c02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4240      	negne	r0, r0
 8000c12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4249      	negne	r1, r1
 8000c22:	ea92 0f03 	teq	r2, r3
 8000c26:	d03f      	beq.n	8000ca8 <__addsf3+0xd8>
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c30:	eb10 000c 	adds.w	r0, r0, ip
 8000c34:	f1c3 0320 	rsb	r3, r3, #32
 8000c38:	fa01 f103 	lsl.w	r1, r1, r3
 8000c3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__addsf3+0x78>
 8000c42:	4249      	negs	r1, r1
 8000c44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c4c:	d313      	bcc.n	8000c76 <__addsf3+0xa6>
 8000c4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c52:	d306      	bcc.n	8000c62 <__addsf3+0x92>
 8000c54:	0840      	lsrs	r0, r0, #1
 8000c56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5a:	f102 0201 	add.w	r2, r2, #1
 8000c5e:	2afe      	cmp	r2, #254	; 0xfe
 8000c60:	d251      	bcs.n	8000d06 <__addsf3+0x136>
 8000c62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6a:	bf08      	it	eq
 8000c6c:	f020 0001 	biceq.w	r0, r0, #1
 8000c70:	ea40 0003 	orr.w	r0, r0, r3
 8000c74:	4770      	bx	lr
 8000c76:	0049      	lsls	r1, r1, #1
 8000c78:	eb40 0000 	adc.w	r0, r0, r0
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	bf28      	it	cs
 8000c80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c84:	d2ed      	bcs.n	8000c62 <__addsf3+0x92>
 8000c86:	fab0 fc80 	clz	ip, r0
 8000c8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c96:	bfaa      	itet	ge
 8000c98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c9c:	4252      	neglt	r2, r2
 8000c9e:	4318      	orrge	r0, r3
 8000ca0:	bfbc      	itt	lt
 8000ca2:	40d0      	lsrlt	r0, r2
 8000ca4:	4318      	orrlt	r0, r3
 8000ca6:	4770      	bx	lr
 8000ca8:	f092 0f00 	teq	r2, #0
 8000cac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cb0:	bf06      	itte	eq
 8000cb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cb6:	3201      	addeq	r2, #1
 8000cb8:	3b01      	subne	r3, #1
 8000cba:	e7b5      	b.n	8000c28 <__addsf3+0x58>
 8000cbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc4:	bf18      	it	ne
 8000cc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cca:	d021      	beq.n	8000d10 <__addsf3+0x140>
 8000ccc:	ea92 0f03 	teq	r2, r3
 8000cd0:	d004      	beq.n	8000cdc <__addsf3+0x10c>
 8000cd2:	f092 0f00 	teq	r2, #0
 8000cd6:	bf08      	it	eq
 8000cd8:	4608      	moveq	r0, r1
 8000cda:	4770      	bx	lr
 8000cdc:	ea90 0f01 	teq	r0, r1
 8000ce0:	bf1c      	itt	ne
 8000ce2:	2000      	movne	r0, #0
 8000ce4:	4770      	bxne	lr
 8000ce6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cea:	d104      	bne.n	8000cf6 <__addsf3+0x126>
 8000cec:	0040      	lsls	r0, r0, #1
 8000cee:	bf28      	it	cs
 8000cf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cfa:	bf3c      	itt	cc
 8000cfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bxcc	lr
 8000d02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	4770      	bx	lr
 8000d10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d14:	bf16      	itet	ne
 8000d16:	4608      	movne	r0, r1
 8000d18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d1c:	4601      	movne	r1, r0
 8000d1e:	0242      	lsls	r2, r0, #9
 8000d20:	bf06      	itte	eq
 8000d22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d26:	ea90 0f01 	teqeq	r0, r1
 8000d2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_ui2f>:
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e004      	b.n	8000d40 <__aeabi_i2f+0x8>
 8000d36:	bf00      	nop

08000d38 <__aeabi_i2f>:
 8000d38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d3c:	bf48      	it	mi
 8000d3e:	4240      	negmi	r0, r0
 8000d40:	ea5f 0c00 	movs.w	ip, r0
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	e01c      	b.n	8000d8e <__aeabi_l2f+0x2a>

08000d54 <__aeabi_ul2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e00a      	b.n	8000d78 <__aeabi_l2f+0x14>
 8000d62:	bf00      	nop

08000d64 <__aeabi_l2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d70:	d502      	bpl.n	8000d78 <__aeabi_l2f+0x14>
 8000d72:	4240      	negs	r0, r0
 8000d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d78:	ea5f 0c01 	movs.w	ip, r1
 8000d7c:	bf02      	ittt	eq
 8000d7e:	4684      	moveq	ip, r0
 8000d80:	4601      	moveq	r1, r0
 8000d82:	2000      	moveq	r0, #0
 8000d84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d88:	bf08      	it	eq
 8000d8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d92:	fabc f28c 	clz	r2, ip
 8000d96:	3a08      	subs	r2, #8
 8000d98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d9c:	db10      	blt.n	8000dc0 <__aeabi_l2f+0x5c>
 8000d9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da2:	4463      	add	r3, ip
 8000da4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	f020 0001 	biceq.w	r0, r0, #1
 8000dbe:	4770      	bx	lr
 8000dc0:	f102 0220 	add.w	r2, r2, #32
 8000dc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc8:	f1c2 0220 	rsb	r2, r2, #32
 8000dcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd4:	eb43 0002 	adc.w	r0, r3, r2
 8000dd8:	bf08      	it	eq
 8000dda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_ldivmod>:
 8000de0:	b97b      	cbnz	r3, 8000e02 <__aeabi_ldivmod+0x22>
 8000de2:	b972      	cbnz	r2, 8000e02 <__aeabi_ldivmod+0x22>
 8000de4:	2900      	cmp	r1, #0
 8000de6:	bfbe      	ittt	lt
 8000de8:	2000      	movlt	r0, #0
 8000dea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000dee:	e006      	blt.n	8000dfe <__aeabi_ldivmod+0x1e>
 8000df0:	bf08      	it	eq
 8000df2:	2800      	cmpeq	r0, #0
 8000df4:	bf1c      	itt	ne
 8000df6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000dfa:	f04f 30ff 	movne.w	r0, #4294967295
 8000dfe:	f000 b9bf 	b.w	8001180 <__aeabi_idiv0>
 8000e02:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e06:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0a:	2900      	cmp	r1, #0
 8000e0c:	db09      	blt.n	8000e22 <__aeabi_ldivmod+0x42>
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	db1a      	blt.n	8000e48 <__aeabi_ldivmod+0x68>
 8000e12:	f000 f84d 	bl	8000eb0 <__udivmoddi4>
 8000e16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e1e:	b004      	add	sp, #16
 8000e20:	4770      	bx	lr
 8000e22:	4240      	negs	r0, r0
 8000e24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db1b      	blt.n	8000e64 <__aeabi_ldivmod+0x84>
 8000e2c:	f000 f840 	bl	8000eb0 <__udivmoddi4>
 8000e30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e38:	b004      	add	sp, #16
 8000e3a:	4240      	negs	r0, r0
 8000e3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e40:	4252      	negs	r2, r2
 8000e42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e46:	4770      	bx	lr
 8000e48:	4252      	negs	r2, r2
 8000e4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e4e:	f000 f82f 	bl	8000eb0 <__udivmoddi4>
 8000e52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e5a:	b004      	add	sp, #16
 8000e5c:	4240      	negs	r0, r0
 8000e5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e62:	4770      	bx	lr
 8000e64:	4252      	negs	r2, r2
 8000e66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e6a:	f000 f821 	bl	8000eb0 <__udivmoddi4>
 8000e6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e76:	b004      	add	sp, #16
 8000e78:	4252      	negs	r2, r2
 8000e7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e7e:	4770      	bx	lr

08000e80 <__aeabi_uldivmod>:
 8000e80:	b953      	cbnz	r3, 8000e98 <__aeabi_uldivmod+0x18>
 8000e82:	b94a      	cbnz	r2, 8000e98 <__aeabi_uldivmod+0x18>
 8000e84:	2900      	cmp	r1, #0
 8000e86:	bf08      	it	eq
 8000e88:	2800      	cmpeq	r0, #0
 8000e8a:	bf1c      	itt	ne
 8000e8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000e90:	f04f 30ff 	movne.w	r0, #4294967295
 8000e94:	f000 b974 	b.w	8001180 <__aeabi_idiv0>
 8000e98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ea0:	f000 f806 	bl	8000eb0 <__udivmoddi4>
 8000ea4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ea8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eac:	b004      	add	sp, #16
 8000eae:	4770      	bx	lr

08000eb0 <__udivmoddi4>:
 8000eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb4:	9d08      	ldr	r5, [sp, #32]
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	468e      	mov	lr, r1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d14d      	bne.n	8000f5a <__udivmoddi4+0xaa>
 8000ebe:	428a      	cmp	r2, r1
 8000ec0:	4694      	mov	ip, r2
 8000ec2:	d969      	bls.n	8000f98 <__udivmoddi4+0xe8>
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	b152      	cbz	r2, 8000ee0 <__udivmoddi4+0x30>
 8000eca:	fa01 f302 	lsl.w	r3, r1, r2
 8000ece:	f1c2 0120 	rsb	r1, r2, #32
 8000ed2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ed6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eda:	ea41 0e03 	orr.w	lr, r1, r3
 8000ede:	4094      	lsls	r4, r2
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	0c21      	lsrs	r1, r4, #16
 8000ee6:	fbbe f6f8 	udiv	r6, lr, r8
 8000eea:	fa1f f78c 	uxth.w	r7, ip
 8000eee:	fb08 e316 	mls	r3, r8, r6, lr
 8000ef2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ef6:	fb06 f107 	mul.w	r1, r6, r7
 8000efa:	4299      	cmp	r1, r3
 8000efc:	d90a      	bls.n	8000f14 <__udivmoddi4+0x64>
 8000efe:	eb1c 0303 	adds.w	r3, ip, r3
 8000f02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f06:	f080 811f 	bcs.w	8001148 <__udivmoddi4+0x298>
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	f240 811c 	bls.w	8001148 <__udivmoddi4+0x298>
 8000f10:	3e02      	subs	r6, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb00 f707 	mul.w	r7, r0, r7
 8000f28:	42a7      	cmp	r7, r4
 8000f2a:	d90a      	bls.n	8000f42 <__udivmoddi4+0x92>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f34:	f080 810a 	bcs.w	800114c <__udivmoddi4+0x29c>
 8000f38:	42a7      	cmp	r7, r4
 8000f3a:	f240 8107 	bls.w	800114c <__udivmoddi4+0x29c>
 8000f3e:	4464      	add	r4, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f46:	1be4      	subs	r4, r4, r7
 8000f48:	2600      	movs	r6, #0
 8000f4a:	b11d      	cbz	r5, 8000f54 <__udivmoddi4+0xa4>
 8000f4c:	40d4      	lsrs	r4, r2
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e9c5 4300 	strd	r4, r3, [r5]
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d909      	bls.n	8000f72 <__udivmoddi4+0xc2>
 8000f5e:	2d00      	cmp	r5, #0
 8000f60:	f000 80ef 	beq.w	8001142 <__udivmoddi4+0x292>
 8000f64:	2600      	movs	r6, #0
 8000f66:	e9c5 0100 	strd	r0, r1, [r5]
 8000f6a:	4630      	mov	r0, r6
 8000f6c:	4631      	mov	r1, r6
 8000f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f72:	fab3 f683 	clz	r6, r3
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d14a      	bne.n	8001010 <__udivmoddi4+0x160>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d302      	bcc.n	8000f84 <__udivmoddi4+0xd4>
 8000f7e:	4282      	cmp	r2, r0
 8000f80:	f200 80f9 	bhi.w	8001176 <__udivmoddi4+0x2c6>
 8000f84:	1a84      	subs	r4, r0, r2
 8000f86:	eb61 0303 	sbc.w	r3, r1, r3
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	469e      	mov	lr, r3
 8000f8e:	2d00      	cmp	r5, #0
 8000f90:	d0e0      	beq.n	8000f54 <__udivmoddi4+0xa4>
 8000f92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f96:	e7dd      	b.n	8000f54 <__udivmoddi4+0xa4>
 8000f98:	b902      	cbnz	r2, 8000f9c <__udivmoddi4+0xec>
 8000f9a:	deff      	udf	#255	; 0xff
 8000f9c:	fab2 f282 	clz	r2, r2
 8000fa0:	2a00      	cmp	r2, #0
 8000fa2:	f040 8092 	bne.w	80010ca <__udivmoddi4+0x21a>
 8000fa6:	eba1 010c 	sub.w	r1, r1, ip
 8000faa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fae:	fa1f fe8c 	uxth.w	lr, ip
 8000fb2:	2601      	movs	r6, #1
 8000fb4:	0c20      	lsrs	r0, r4, #16
 8000fb6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000fba:	fb07 1113 	mls	r1, r7, r3, r1
 8000fbe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fc2:	fb0e f003 	mul.w	r0, lr, r3
 8000fc6:	4288      	cmp	r0, r1
 8000fc8:	d908      	bls.n	8000fdc <__udivmoddi4+0x12c>
 8000fca:	eb1c 0101 	adds.w	r1, ip, r1
 8000fce:	f103 38ff 	add.w	r8, r3, #4294967295
 8000fd2:	d202      	bcs.n	8000fda <__udivmoddi4+0x12a>
 8000fd4:	4288      	cmp	r0, r1
 8000fd6:	f200 80cb 	bhi.w	8001170 <__udivmoddi4+0x2c0>
 8000fda:	4643      	mov	r3, r8
 8000fdc:	1a09      	subs	r1, r1, r0
 8000fde:	b2a4      	uxth	r4, r4
 8000fe0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fe4:	fb07 1110 	mls	r1, r7, r0, r1
 8000fe8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000fec:	fb0e fe00 	mul.w	lr, lr, r0
 8000ff0:	45a6      	cmp	lr, r4
 8000ff2:	d908      	bls.n	8001006 <__udivmoddi4+0x156>
 8000ff4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ffc:	d202      	bcs.n	8001004 <__udivmoddi4+0x154>
 8000ffe:	45a6      	cmp	lr, r4
 8001000:	f200 80bb 	bhi.w	800117a <__udivmoddi4+0x2ca>
 8001004:	4608      	mov	r0, r1
 8001006:	eba4 040e 	sub.w	r4, r4, lr
 800100a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800100e:	e79c      	b.n	8000f4a <__udivmoddi4+0x9a>
 8001010:	f1c6 0720 	rsb	r7, r6, #32
 8001014:	40b3      	lsls	r3, r6
 8001016:	fa22 fc07 	lsr.w	ip, r2, r7
 800101a:	ea4c 0c03 	orr.w	ip, ip, r3
 800101e:	fa20 f407 	lsr.w	r4, r0, r7
 8001022:	fa01 f306 	lsl.w	r3, r1, r6
 8001026:	431c      	orrs	r4, r3
 8001028:	40f9      	lsrs	r1, r7
 800102a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800102e:	fa00 f306 	lsl.w	r3, r0, r6
 8001032:	fbb1 f8f9 	udiv	r8, r1, r9
 8001036:	0c20      	lsrs	r0, r4, #16
 8001038:	fa1f fe8c 	uxth.w	lr, ip
 800103c:	fb09 1118 	mls	r1, r9, r8, r1
 8001040:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001044:	fb08 f00e 	mul.w	r0, r8, lr
 8001048:	4288      	cmp	r0, r1
 800104a:	fa02 f206 	lsl.w	r2, r2, r6
 800104e:	d90b      	bls.n	8001068 <__udivmoddi4+0x1b8>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f108 3aff 	add.w	sl, r8, #4294967295
 8001058:	f080 8088 	bcs.w	800116c <__udivmoddi4+0x2bc>
 800105c:	4288      	cmp	r0, r1
 800105e:	f240 8085 	bls.w	800116c <__udivmoddi4+0x2bc>
 8001062:	f1a8 0802 	sub.w	r8, r8, #2
 8001066:	4461      	add	r1, ip
 8001068:	1a09      	subs	r1, r1, r0
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb1 f0f9 	udiv	r0, r1, r9
 8001070:	fb09 1110 	mls	r1, r9, r0, r1
 8001074:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001078:	fb00 fe0e 	mul.w	lr, r0, lr
 800107c:	458e      	cmp	lr, r1
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x1e2>
 8001080:	eb1c 0101 	adds.w	r1, ip, r1
 8001084:	f100 34ff 	add.w	r4, r0, #4294967295
 8001088:	d26c      	bcs.n	8001164 <__udivmoddi4+0x2b4>
 800108a:	458e      	cmp	lr, r1
 800108c:	d96a      	bls.n	8001164 <__udivmoddi4+0x2b4>
 800108e:	3802      	subs	r0, #2
 8001090:	4461      	add	r1, ip
 8001092:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001096:	fba0 9402 	umull	r9, r4, r0, r2
 800109a:	eba1 010e 	sub.w	r1, r1, lr
 800109e:	42a1      	cmp	r1, r4
 80010a0:	46c8      	mov	r8, r9
 80010a2:	46a6      	mov	lr, r4
 80010a4:	d356      	bcc.n	8001154 <__udivmoddi4+0x2a4>
 80010a6:	d053      	beq.n	8001150 <__udivmoddi4+0x2a0>
 80010a8:	b15d      	cbz	r5, 80010c2 <__udivmoddi4+0x212>
 80010aa:	ebb3 0208 	subs.w	r2, r3, r8
 80010ae:	eb61 010e 	sbc.w	r1, r1, lr
 80010b2:	fa01 f707 	lsl.w	r7, r1, r7
 80010b6:	fa22 f306 	lsr.w	r3, r2, r6
 80010ba:	40f1      	lsrs	r1, r6
 80010bc:	431f      	orrs	r7, r3
 80010be:	e9c5 7100 	strd	r7, r1, [r5]
 80010c2:	2600      	movs	r6, #0
 80010c4:	4631      	mov	r1, r6
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	f1c2 0320 	rsb	r3, r2, #32
 80010ce:	40d8      	lsrs	r0, r3
 80010d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80010d4:	fa21 f303 	lsr.w	r3, r1, r3
 80010d8:	4091      	lsls	r1, r2
 80010da:	4301      	orrs	r1, r0
 80010dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010e0:	fa1f fe8c 	uxth.w	lr, ip
 80010e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80010e8:	fb07 3610 	mls	r6, r7, r0, r3
 80010ec:	0c0b      	lsrs	r3, r1, #16
 80010ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010f2:	fb00 f60e 	mul.w	r6, r0, lr
 80010f6:	429e      	cmp	r6, r3
 80010f8:	fa04 f402 	lsl.w	r4, r4, r2
 80010fc:	d908      	bls.n	8001110 <__udivmoddi4+0x260>
 80010fe:	eb1c 0303 	adds.w	r3, ip, r3
 8001102:	f100 38ff 	add.w	r8, r0, #4294967295
 8001106:	d22f      	bcs.n	8001168 <__udivmoddi4+0x2b8>
 8001108:	429e      	cmp	r6, r3
 800110a:	d92d      	bls.n	8001168 <__udivmoddi4+0x2b8>
 800110c:	3802      	subs	r0, #2
 800110e:	4463      	add	r3, ip
 8001110:	1b9b      	subs	r3, r3, r6
 8001112:	b289      	uxth	r1, r1
 8001114:	fbb3 f6f7 	udiv	r6, r3, r7
 8001118:	fb07 3316 	mls	r3, r7, r6, r3
 800111c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001120:	fb06 f30e 	mul.w	r3, r6, lr
 8001124:	428b      	cmp	r3, r1
 8001126:	d908      	bls.n	800113a <__udivmoddi4+0x28a>
 8001128:	eb1c 0101 	adds.w	r1, ip, r1
 800112c:	f106 38ff 	add.w	r8, r6, #4294967295
 8001130:	d216      	bcs.n	8001160 <__udivmoddi4+0x2b0>
 8001132:	428b      	cmp	r3, r1
 8001134:	d914      	bls.n	8001160 <__udivmoddi4+0x2b0>
 8001136:	3e02      	subs	r6, #2
 8001138:	4461      	add	r1, ip
 800113a:	1ac9      	subs	r1, r1, r3
 800113c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001140:	e738      	b.n	8000fb4 <__udivmoddi4+0x104>
 8001142:	462e      	mov	r6, r5
 8001144:	4628      	mov	r0, r5
 8001146:	e705      	b.n	8000f54 <__udivmoddi4+0xa4>
 8001148:	4606      	mov	r6, r0
 800114a:	e6e3      	b.n	8000f14 <__udivmoddi4+0x64>
 800114c:	4618      	mov	r0, r3
 800114e:	e6f8      	b.n	8000f42 <__udivmoddi4+0x92>
 8001150:	454b      	cmp	r3, r9
 8001152:	d2a9      	bcs.n	80010a8 <__udivmoddi4+0x1f8>
 8001154:	ebb9 0802 	subs.w	r8, r9, r2
 8001158:	eb64 0e0c 	sbc.w	lr, r4, ip
 800115c:	3801      	subs	r0, #1
 800115e:	e7a3      	b.n	80010a8 <__udivmoddi4+0x1f8>
 8001160:	4646      	mov	r6, r8
 8001162:	e7ea      	b.n	800113a <__udivmoddi4+0x28a>
 8001164:	4620      	mov	r0, r4
 8001166:	e794      	b.n	8001092 <__udivmoddi4+0x1e2>
 8001168:	4640      	mov	r0, r8
 800116a:	e7d1      	b.n	8001110 <__udivmoddi4+0x260>
 800116c:	46d0      	mov	r8, sl
 800116e:	e77b      	b.n	8001068 <__udivmoddi4+0x1b8>
 8001170:	3b02      	subs	r3, #2
 8001172:	4461      	add	r1, ip
 8001174:	e732      	b.n	8000fdc <__udivmoddi4+0x12c>
 8001176:	4630      	mov	r0, r6
 8001178:	e709      	b.n	8000f8e <__udivmoddi4+0xde>
 800117a:	4464      	add	r4, ip
 800117c:	3802      	subs	r0, #2
 800117e:	e742      	b.n	8001006 <__udivmoddi4+0x156>

08001180 <__aeabi_idiv0>:
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <adcInit>:

static uint32_t adcValues[ADC_CHANNEL_MAX];


void adcInit(drv_adc_config_t *init)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
    extern ADC_HandleTypeDef hadc1;

    // Start ADC
    HAL_ADC_Start_DMA(&hadc1, adcValues, ADC_CHANNEL_MAX);
 800118c:	2204      	movs	r2, #4
 800118e:	4904      	ldr	r1, [pc, #16]	; (80011a0 <adcInit+0x1c>)
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <adcInit+0x20>)
 8001192:	f01b fce5 	bl	801cb60 <HAL_ADC_Start_DMA>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200001e4 	.word	0x200001e4
 80011a4:	200004cc 	.word	0x200004cc

080011a8 <actGetAdcChannel>:

uint16_t actGetAdcChannel(uint8_t channel)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
    return adcValues[channel];
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <actGetAdcChannel+0x20>)
 80011b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ba:	b29b      	uxth	r3, r3
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	200001e4 	.word	0x200001e4

080011cc <actGetBatteryVoltage>:

float actGetBatteryVoltage()
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
	return (adcValues[ADC_BATTERY] * 3.3f) / 4095;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <actGetBatteryVoltage+0x30>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011dc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001200 <actGetBatteryVoltage+0x34>
 80011e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001204 <actGetBatteryVoltage+0x38>
 80011e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011ec:	eef0 7a66 	vmov.f32	s15, s13
}
 80011f0:	eeb0 0a67 	vmov.f32	s0, s15
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	200001e4 	.word	0x200001e4
 8001200:	40533333 	.word	0x40533333
 8001204:	457ff000 	.word	0x457ff000

08001208 <actGetBatteryCurrent>:

uint32_t actGetBatteryCurrent()
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
	return 5000 * adcValues[ADC_EXTERNAL_CURRENT] / 4095;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <actGetBatteryCurrent+0x28>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f241 3288 	movw	r2, #5000	; 0x1388
 8001214:	fb03 f202 	mul.w	r2, r3, r2
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <actGetBatteryCurrent+0x2c>)
 800121a:	fba3 1302 	umull	r1, r3, r3, r2
 800121e:	1ad2      	subs	r2, r2, r3
 8001220:	0852      	lsrs	r2, r2, #1
 8001222:	4413      	add	r3, r2
 8001224:	0adb      	lsrs	r3, r3, #11
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	200001e4 	.word	0x200001e4
 8001234:	00100101 	.word	0x00100101

08001238 <gy86Detect>:
// sync this with AccelSensors enum from board.h
static const char* hw_Names[] = { "MPU9250", "AK8963", "BMP280" };


bool gy86Detect(sensorSet_t *p_sensor_set, void* p_param)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
	PifGy86Config config;

    (void)p_param;

    // Set acc_1G. Modified once by mpu6050CheckRevision for old (hopefully nonexistent outside of clones) parts
    p_sensor_set->acc.acc_1G = 512 * 8;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001248:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

    // 16.4 dps/lsb scalefactor for all Invensense devices
    p_sensor_set->gyro.scale = (4.0f / 16.4f) * (M_PI / 180.0f) * 0.000001f;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a3c      	ldr	r2, [pc, #240]	; (8001340 <gy86Detect+0x108>)
 8001250:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    memset(&config, 0, sizeof(PifGy86Config));
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	2214      	movs	r2, #20
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f022 fe2d 	bl	8023ebc <memset>

    config.disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8001262:	2301      	movs	r3, #1
 8001264:	733b      	strb	r3, [r7, #12]

    config.mpu60x0_clksel = MPU60X0_CLKSEL_PLL_ZGYRO;
 8001266:	2303      	movs	r3, #3
 8001268:	73bb      	strb	r3, [r7, #14]
    // default lpf is 42Hz, 255 is special case of nolpf
    if (p_sensor_set->gyro.lpf == 255)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001270:	2bff      	cmp	r3, #255	; 0xff
 8001272:	d102      	bne.n	800127a <gy86Detect+0x42>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A260HZ_G256HZ;
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	e029      	b.n	80012ce <gy86Detect+0x96>
    else if (p_sensor_set->gyro.lpf >= 188)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001280:	2bbb      	cmp	r3, #187	; 0xbb
 8001282:	d902      	bls.n	800128a <gy86Detect+0x52>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A184HZ_G188HZ;
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	e021      	b.n	80012ce <gy86Detect+0x96>
    else if (p_sensor_set->gyro.lpf >= 98)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001290:	2b61      	cmp	r3, #97	; 0x61
 8001292:	d902      	bls.n	800129a <gy86Detect+0x62>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A94HZ_G98HZ;
 8001294:	2302      	movs	r3, #2
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	e019      	b.n	80012ce <gy86Detect+0x96>
    else if (p_sensor_set->gyro.lpf >= 42)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80012a0:	2b29      	cmp	r3, #41	; 0x29
 80012a2:	d902      	bls.n	80012aa <gy86Detect+0x72>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A44HZ_G42HZ;
 80012a4:	2303      	movs	r3, #3
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e011      	b.n	80012ce <gy86Detect+0x96>
    else if (p_sensor_set->gyro.lpf >= 20)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80012b0:	2b13      	cmp	r3, #19
 80012b2:	d902      	bls.n	80012ba <gy86Detect+0x82>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A21HZ_G20HZ;
 80012b4:	2304      	movs	r3, #4
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e009      	b.n	80012ce <gy86Detect+0x96>
    else if (p_sensor_set->gyro.lpf >= 10)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80012c0:	2b09      	cmp	r3, #9
 80012c2:	d902      	bls.n	80012ca <gy86Detect+0x92>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A10HZ_G10HZ;
 80012c4:	2305      	movs	r3, #5
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e001      	b.n	80012ce <gy86Detect+0x96>
    else
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A5HZ_G5HZ;
 80012ca:	2306      	movs	r3, #6
 80012cc:	73fb      	strb	r3, [r7, #15]
    config.mpu60x0_fs_sel = MPU60X0_FS_SEL_2000DPS;
 80012ce:	2303      	movs	r3, #3
 80012d0:	743b      	strb	r3, [r7, #16]
    config.mpu60x0_afs_sel = MPU60X0_AFS_SEL_8G;
 80012d2:	2302      	movs	r3, #2
 80012d4:	737b      	strb	r3, [r7, #13]
    config.mpu60x0_i2c_mst_clk = MPU60X0_I2C_MST_CLK_400KHZ;
 80012d6:	230d      	movs	r3, #13
 80012d8:	747b      	strb	r3, [r7, #17]

    config.hmc5883_gain = HMC5883_GAIN_1_3GA;
 80012da:	2301      	movs	r3, #1
 80012dc:	74fb      	strb	r3, [r7, #19]
    config.hmc5883_samples = HMC5883_SAMPLES_8;
 80012de:	2303      	movs	r3, #3
 80012e0:	757b      	strb	r3, [r7, #21]
    config.hmc5883_data_rate = HMC5883_DATARATE_75HZ;
 80012e2:	2306      	movs	r3, #6
 80012e4:	74bb      	strb	r3, [r7, #18]
    config.hmc5883_mode = HMC5883_MODE_CONTINOUS;
 80012e6:	2300      	movs	r3, #0
 80012e8:	753b      	strb	r3, [r7, #20]

#ifdef BARO
    config.ms5611_osr = MS5611_OSR_4096;
 80012ea:	2308      	movs	r3, #8
 80012ec:	75bb      	strb	r3, [r7, #22]
    config.ms5611_read_period = 25;												// 25ms
 80012ee:	2319      	movs	r3, #25
 80012f0:	833b      	strh	r3, [r7, #24]
    config.ms5611_evt_read = p_sensor_set->baro.evt_read;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80012f8:	61fb      	str	r3, [r7, #28]
#endif

    // initialize the device
    if (!mpu6050Init(p_sensor_set, &config)) return false;
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	4619      	mov	r1, r3
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f821 	bl	8001348 <mpu6050Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <gy86Detect+0xd8>
 800130c:	2300      	movs	r3, #0
 800130e:	e013      	b.n	8001338 <gy86Detect+0x100>

    p_sensor_set->gyro.hardware = hw_Names[0];
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <gy86Detect+0x10c>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	679a      	str	r2, [r3, #120]	; 0x78
    p_sensor_set->acc.hardware = hw_Names[0];
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <gy86Detect+0x10c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    p_sensor_set->mag.hardware = hw_Names[1];
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <gy86Detect+0x10c>)
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    p_sensor_set->baro.hardware = hw_Names[2];
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <gy86Detect+0x10c>)
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    return true;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	31924418 	.word	0x31924418
 8001344:	20000000 	.word	0x20000000

08001348 <mpu6050Init>:

static BOOL mpu6050Init(sensorSet_t *p_sensor_set, PifGy86Config* p_config)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
    if (!pifGy86_Init(&s_gy86, PIF_ID_AUTO, &g_i2c_port, &p_sensor_set->imu_sensor, p_config)) return FALSE;
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	4613      	mov	r3, r2
 800135a:	4a16      	ldr	r2, [pc, #88]	; (80013b4 <mpu6050Init+0x6c>)
 800135c:	2100      	movs	r1, #0
 800135e:	4816      	ldr	r0, [pc, #88]	; (80013b8 <mpu6050Init+0x70>)
 8001360:	f018 fb60 	bl	8019a24 <pifGy86_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <mpu6050Init+0x26>
 800136a:	2300      	movs	r3, #0
 800136c:	e01d      	b.n	80013aa <mpu6050Init+0x62>
    s_gy86._mpu6050.gyro_scale = 4;
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <mpu6050Init+0x70>)
 8001370:	2204      	movs	r2, #4
 8001372:	711a      	strb	r2, [r3, #4]
    s_gy86._mpu6050.temp_scale = 100;
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <mpu6050Init+0x70>)
 8001376:	2264      	movs	r2, #100	; 0x64
 8001378:	719a      	strb	r2, [r3, #6]

    p_sensor_set->acc.init = mpuAccInit;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <mpu6050Init+0x74>)
 800137e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    p_sensor_set->acc.read = mpuAccRead;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <mpu6050Init+0x78>)
 8001386:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    p_sensor_set->gyro.init = mpuGyroInit;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <mpu6050Init+0x7c>)
 800138e:	67da      	str	r2, [r3, #124]	; 0x7c
    p_sensor_set->gyro.read = mpuGyroRead;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <mpu6050Init+0x80>)
 8001394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    p_sensor_set->mag.init = hmc5883lInit;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <mpu6050Init+0x84>)
 800139c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    p_sensor_set->mag.read = hmc5883lRead;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <mpu6050Init+0x88>)
 80013a4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    return TRUE;
 80013a8:	2301      	movs	r3, #1
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20001550 	.word	0x20001550
 80013b8:	200001f4 	.word	0x200001f4
 80013bc:	080013d5 	.word	0x080013d5
 80013c0:	080013f7 	.word	0x080013f7
 80013c4:	0800143f 	.word	0x0800143f
 80013c8:	08001461 	.word	0x08001461
 80013cc:	080014a9 	.word	0x080014a9
 80013d0:	080017f9 	.word	0x080017f9

080013d4 <mpuAccInit>:

static BOOL mpuAccInit(sensorSet_t *p_sensor_set, PifImuSensorAlign align)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
    pifImuSensor_SetAccelAlign(&p_sensor_set->imu_sensor, align);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	78fa      	ldrb	r2, [r7, #3]
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f019 fb3f 	bl	801aa6a <pifImuSensor_SetAccelAlign>
    return TRUE;
 80013ec:	2301      	movs	r3, #1
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <mpuAccRead>:

static BOOL mpuAccRead(sensorSet_t *p_sensor_set, int16_t *accData)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b084      	sub	sp, #16
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	6039      	str	r1, [r7, #0]
	int16_t data[3];

    if (!pifImuSensor_ReadAccel2(&p_sensor_set->imu_sensor, data)) return FALSE;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f107 0208 	add.w	r2, r7, #8
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f019 fb41 	bl	801aa90 <pifImuSensor_ReadAccel2>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <mpuAccRead+0x22>
 8001414:	2300      	movs	r3, #0
 8001416:	e00e      	b.n	8001436 <mpuAccRead+0x40>
    accData[0] = data[0];
 8001418:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	801a      	strh	r2, [r3, #0]
    accData[1] = data[1];
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	3302      	adds	r3, #2
 8001424:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001428:	801a      	strh	r2, [r3, #0]
    accData[2] = data[2];
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	3304      	adds	r3, #4
 800142e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001432:	801a      	strh	r2, [r3, #0]
    return TRUE;
 8001434:	2301      	movs	r3, #1
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <mpuGyroInit>:

static BOOL mpuGyroInit(sensorSet_t *p_sensor_set, PifImuSensorAlign align)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	460b      	mov	r3, r1
 8001448:	70fb      	strb	r3, [r7, #3]
    pifImuSensor_SetGyroAlign(&p_sensor_set->imu_sensor, align);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	78fa      	ldrb	r2, [r7, #3]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f019 fad1 	bl	801a9f8 <pifImuSensor_SetGyroAlign>
    return TRUE;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <mpuGyroRead>:

static BOOL mpuGyroRead(sensorSet_t *p_sensor_set, int16_t *gyroData)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
	int16_t data[3];

	if (!pifImuSensor_ReadGyro2(&p_sensor_set->imu_sensor, data)) return FALSE;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f107 0208 	add.w	r2, r7, #8
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f019 fad2 	bl	801aa1c <pifImuSensor_ReadGyro2>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <mpuGyroRead+0x22>
 800147e:	2300      	movs	r3, #0
 8001480:	e00e      	b.n	80014a0 <mpuGyroRead+0x40>
	gyroData[0] = data[0];
 8001482:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	801a      	strh	r2, [r3, #0]
	gyroData[1] = data[1];
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	3302      	adds	r3, #2
 800148e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001492:	801a      	strh	r2, [r3, #0]
	gyroData[2] = data[2];
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	3304      	adds	r3, #4
 8001498:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800149c:	801a      	strh	r2, [r3, #0]
	return TRUE;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <hmc5883lInit>:

static BOOL hmc5883lInit(sensorSet_t *p_sensor_set, PifImuSensorAlign align)
{
 80014a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014ac:	b08e      	sub	sp, #56	; 0x38
 80014ae:	af04      	add	r7, sp, #16
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	460b      	mov	r3, r1
 80014b4:	70fb      	strb	r3, [r7, #3]
    int16_t magADC[3];
    int i;
    int32_t xyz_total[3] = { 0, 0, 0 }; // 32 bit totals so they won't overflow.
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
    bool bret = true;           // Error indicator
 80014c2:	2301      	movs	r3, #1
 80014c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    PifHmc5883ConfigA config_a;

    pifImuSensor_SetMagAlign(&p_sensor_set->imu_sensor, align);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	78fa      	ldrb	r2, [r7, #3]
 80014cc:	4611      	mov	r1, r2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f019 fb06 	bl	801aae0 <pifImuSensor_SetMagAlign>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, FALSE)) return FALSE;
 80014d4:	4ba4      	ldr	r3, [pc, #656]	; (8001768 <hmc5883lInit+0x2c0>)
 80014d6:	68d8      	ldr	r0, [r3, #12]
 80014d8:	2300      	movs	r3, #0
 80014da:	f240 5201 	movw	r2, #1281	; 0x501
 80014de:	216a      	movs	r1, #106	; 0x6a
 80014e0:	f011 fbde 	bl	8012ca0 <pifI2cDevice_WriteRegBit8>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <hmc5883lInit+0x46>
 80014ea:	2300      	movs	r3, #0
 80014ec:	e17b      	b.n	80017e6 <hmc5883lInit+0x33e>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, TRUE)) return FALSE;
 80014ee:	4b9e      	ldr	r3, [pc, #632]	; (8001768 <hmc5883lInit+0x2c0>)
 80014f0:	68d8      	ldr	r0, [r3, #12]
 80014f2:	2301      	movs	r3, #1
 80014f4:	f240 1201 	movw	r2, #257	; 0x101
 80014f8:	2137      	movs	r1, #55	; 0x37
 80014fa:	f011 fbd1 	bl	8012ca0 <pifI2cDevice_WriteRegBit8>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <hmc5883lInit+0x60>
 8001504:	2300      	movs	r3, #0
 8001506:	e16e      	b.n	80017e6 <hmc5883lInit+0x33e>

    config_a.byte = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	733b      	strb	r3, [r7, #12]
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_POS_BIAS;
 800150c:	7b3b      	ldrb	r3, [r7, #12]
 800150e:	2201      	movs	r2, #1
 8001510:	f362 0301 	bfi	r3, r2, #0, #2
 8001514:	733b      	strb	r3, [r7, #12]
    config_a.bit.data_rate = HMC5883_DATARATE_15HZ;
 8001516:	7b3b      	ldrb	r3, [r7, #12]
 8001518:	2204      	movs	r2, #4
 800151a:	f362 0384 	bfi	r3, r2, #2, #3
 800151e:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;   // Reg A DOR = 0x010 + MS1, MS0 set to pos bias
 8001520:	4b91      	ldr	r3, [pc, #580]	; (8001768 <hmc5883lInit+0x2c0>)
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	7b3a      	ldrb	r2, [r7, #12]
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f011 fba3 	bl	8012c74 <pifI2cDevice_WriteRegByte>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <hmc5883lInit+0x90>
 8001534:	2300      	movs	r3, #0
 8001536:	e156      	b.n	80017e6 <hmc5883lInit+0x33e>
    // Note that the  very first measurement after a gain change maintains the same gain as the previous setting.
    // The new gain setting is effective from the second measurement and on.
    if (!pifHmc5883_SetGain(&s_gy86._hmc5883, HMC5883_GAIN_2_5GA)) return FALSE; // Set the Gain to 2.5Ga (7:5->011)
 8001538:	2103      	movs	r1, #3
 800153a:	488c      	ldr	r0, [pc, #560]	; (800176c <hmc5883lInit+0x2c4>)
 800153c:	f018 ff2c 	bl	801a398 <pifHmc5883_SetGain>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <hmc5883lInit+0xa2>
 8001546:	2300      	movs	r3, #0
 8001548:	e14d      	b.n	80017e6 <hmc5883lInit+0x33e>
    pifTaskManager_YieldMs(100);
 800154a:	2064      	movs	r0, #100	; 0x64
 800154c:	f013 ff9e 	bl	801548c <pifTaskManager_YieldMs>
    pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	4885      	ldr	r0, [pc, #532]	; (800176c <hmc5883lInit+0x2c4>)
 8001558:	f018 ff3d 	bl	801a3d6 <pifHmc5883_ReadMag>

    for (i = 0; i < 10; i++) {  // Collect 10 samples
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
 8001560:	e03d      	b.n	80015de <hmc5883lInit+0x136>
        if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_SINGLE)) return FALSE;
 8001562:	4b81      	ldr	r3, [pc, #516]	; (8001768 <hmc5883lInit+0x2c0>)
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	2201      	movs	r2, #1
 8001568:	2102      	movs	r1, #2
 800156a:	4618      	mov	r0, r3
 800156c:	f011 fb82 	bl	8012c74 <pifI2cDevice_WriteRegByte>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <hmc5883lInit+0xd2>
 8001576:	2300      	movs	r3, #0
 8001578:	e135      	b.n	80017e6 <hmc5883lInit+0x33e>
        pifTaskManager_YieldMs(50);
 800157a:	2032      	movs	r0, #50	; 0x32
 800157c:	f013 ff86 	bl	801548c <pifTaskManager_YieldMs>
        pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);       // Get the raw values in case the scales have already been changed.
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	4619      	mov	r1, r3
 8001586:	4879      	ldr	r0, [pc, #484]	; (800176c <hmc5883lInit+0x2c4>)
 8001588:	f018 ff25 	bl	801a3d6 <pifHmc5883_ReadMag>

        // Since the measurements are noisy, they should be averaged rather than taking the max.
        xyz_total[X] += magADC[X];
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001592:	4413      	add	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        xyz_total[Y] += magADC[Y];
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800159c:	4413      	add	r3, r2
 800159e:	617b      	str	r3, [r7, #20]
        xyz_total[Z] += magADC[Z];
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80015a6:	4413      	add	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]

        // Detect saturation.
        if (-4096 >= min(magADC[X], min(magADC[Y], magADC[Z]))) {
 80015aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80015ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015b2:	4293      	cmp	r3, r2
 80015b4:	bfa8      	it	ge
 80015b6:	4613      	movge	r3, r2
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80015be:	4293      	cmp	r3, r2
 80015c0:	bfa8      	it	ge
 80015c2:	4613      	movge	r3, r2
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80015ca:	dc03      	bgt.n	80015d4 <hmc5883lInit+0x12c>
            bret = false;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;              // Breaks out of the for loop.  No sense in continuing if we saturated.
 80015d2:	e007      	b.n	80015e4 <hmc5883lInit+0x13c>
        }
        actLed1Toggle();
 80015d4:	f000 fd94 	bl	8002100 <actLed1Toggle>
    for (i = 0; i < 10; i++) {  // Collect 10 samples
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	3301      	adds	r3, #1
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	2b09      	cmp	r3, #9
 80015e2:	ddbe      	ble.n	8001562 <hmc5883lInit+0xba>
    }

    // Apply the negative bias. (Same gain)
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NEG_BIAS;
 80015e4:	7b3b      	ldrb	r3, [r7, #12]
 80015e6:	2202      	movs	r2, #2
 80015e8:	f362 0301 	bfi	r3, r2, #0, #2
 80015ec:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;   // Reg A DOR = 0x010 + MS1, MS0 set to negative bias.
 80015ee:	4b5e      	ldr	r3, [pc, #376]	; (8001768 <hmc5883lInit+0x2c0>)
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	7b3a      	ldrb	r2, [r7, #12]
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f011 fb3c 	bl	8012c74 <pifI2cDevice_WriteRegByte>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <hmc5883lInit+0x15e>
 8001602:	2300      	movs	r3, #0
 8001604:	e0ef      	b.n	80017e6 <hmc5883lInit+0x33e>
    for (i = 0; i < 10; i++) {
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
 800160a:	e03d      	b.n	8001688 <hmc5883lInit+0x1e0>
        if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_SINGLE)) return FALSE;
 800160c:	4b56      	ldr	r3, [pc, #344]	; (8001768 <hmc5883lInit+0x2c0>)
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	2201      	movs	r2, #1
 8001612:	2102      	movs	r1, #2
 8001614:	4618      	mov	r0, r3
 8001616:	f011 fb2d 	bl	8012c74 <pifI2cDevice_WriteRegByte>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <hmc5883lInit+0x17c>
 8001620:	2300      	movs	r3, #0
 8001622:	e0e0      	b.n	80017e6 <hmc5883lInit+0x33e>
        pifTaskManager_YieldMs(50);
 8001624:	2032      	movs	r0, #50	; 0x32
 8001626:	f013 ff31 	bl	801548c <pifTaskManager_YieldMs>
        pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);               // Get the raw values in case the scales have already been changed.
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	4619      	mov	r1, r3
 8001630:	484e      	ldr	r0, [pc, #312]	; (800176c <hmc5883lInit+0x2c4>)
 8001632:	f018 fed0 	bl	801a3d6 <pifHmc5883_ReadMag>

        // Since the measurements are noisy, they should be averaged.
        xyz_total[X] -= magADC[X];
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        xyz_total[Y] -= magADC[Y];
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001646:	1a9b      	subs	r3, r3, r2
 8001648:	617b      	str	r3, [r7, #20]
        xyz_total[Z] -= magADC[Z];
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	61bb      	str	r3, [r7, #24]

        // Detect saturation.
        if (-4096 >= min(magADC[X], min(magADC[Y], magADC[Z]))) {
 8001654:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001658:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800165c:	4293      	cmp	r3, r2
 800165e:	bfa8      	it	ge
 8001660:	4613      	movge	r3, r2
 8001662:	b21a      	sxth	r2, r3
 8001664:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001668:	4293      	cmp	r3, r2
 800166a:	bfa8      	it	ge
 800166c:	4613      	movge	r3, r2
 800166e:	b21b      	sxth	r3, r3
 8001670:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8001674:	dc03      	bgt.n	800167e <hmc5883lInit+0x1d6>
            bret = false;
 8001676:	2300      	movs	r3, #0
 8001678:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;              // Breaks out of the for loop.  No sense in continuing if we saturated.
 800167c:	e007      	b.n	800168e <hmc5883lInit+0x1e6>
        }
        actLed1Toggle();
 800167e:	f000 fd3f 	bl	8002100 <actLed1Toggle>
    for (i = 0; i < 10; i++) {
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	3301      	adds	r3, #1
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	2b09      	cmp	r3, #9
 800168c:	ddbe      	ble.n	800160c <hmc5883lInit+0x164>
    }

    s_gy86._hmc5883.scale[X] = fabsf(660.0f * HMC58X3_X_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[X]);
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001698:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001770 <hmc5883lInit+0x2c8>
 800169c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016a0:	eef0 7ae7 	vabs.f32	s15, s15
 80016a4:	4b30      	ldr	r3, [pc, #192]	; (8001768 <hmc5883lInit+0x2c0>)
 80016a6:	edc3 7a05 	vstr	s15, [r3, #20]
    s_gy86._hmc5883.scale[Y] = fabsf(660.0f * HMC58X3_Y_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[Y]);
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	ee07 3a90 	vmov	s15, r3
 80016b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001770 <hmc5883lInit+0x2c8>
 80016b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016bc:	eef0 7ae7 	vabs.f32	s15, s15
 80016c0:	4b29      	ldr	r3, [pc, #164]	; (8001768 <hmc5883lInit+0x2c0>)
 80016c2:	edc3 7a06 	vstr	s15, [r3, #24]
    s_gy86._hmc5883.scale[Z] = fabsf(660.0f * HMC58X3_Z_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[Z]);
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	ee07 3a90 	vmov	s15, r3
 80016cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d0:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001774 <hmc5883lInit+0x2cc>
 80016d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d8:	eef0 7ae7 	vabs.f32	s15, s15
 80016dc:	4b22      	ldr	r3, [pc, #136]	; (8001768 <hmc5883lInit+0x2c0>)
 80016de:	edc3 7a07 	vstr	s15, [r3, #28]

    // leave test mode
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NORMAL;
 80016e2:	7b3b      	ldrb	r3, [r7, #12]
 80016e4:	f36f 0301 	bfc	r3, #0, #2
 80016e8:	733b      	strb	r3, [r7, #12]
    config_a.bit.samples = HMC5883_SAMPLES_8;
 80016ea:	7b3b      	ldrb	r3, [r7, #12]
 80016ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016f0:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;		// Configuration Register A  -- 0 11 100 00  num samples: 8 ; output rate: 15Hz ; normal measurement mode
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <hmc5883lInit+0x2c0>)
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	7b3a      	ldrb	r2, [r7, #12]
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f011 faba 	bl	8012c74 <pifI2cDevice_WriteRegByte>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <hmc5883lInit+0x262>
 8001706:	2300      	movs	r3, #0
 8001708:	e06d      	b.n	80017e6 <hmc5883lInit+0x33e>
    if (!pifHmc5883_SetGain(&s_gy86._hmc5883, HMC5883_GAIN_1_3GA)) return FALSE;                               		// Configuration Register B  -- 001 00000    configuration gain 1.3Ga
 800170a:	2101      	movs	r1, #1
 800170c:	4817      	ldr	r0, [pc, #92]	; (800176c <hmc5883lInit+0x2c4>)
 800170e:	f018 fe43 	bl	801a398 <pifHmc5883_SetGain>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <hmc5883lInit+0x274>
 8001718:	2300      	movs	r3, #0
 800171a:	e064      	b.n	80017e6 <hmc5883lInit+0x33e>
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_CONTINOUS)) return FALSE;	// Mode register             -- 000000 00    continuous Conversion Mode
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <hmc5883lInit+0x2c0>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	2200      	movs	r2, #0
 8001722:	2102      	movs	r1, #2
 8001724:	4618      	mov	r0, r3
 8001726:	f011 faa5 	bl	8012c74 <pifI2cDevice_WriteRegByte>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <hmc5883lInit+0x28c>
 8001730:	2300      	movs	r3, #0
 8001732:	e058      	b.n	80017e6 <hmc5883lInit+0x33e>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) return FALSE;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <hmc5883lInit+0x2c0>)
 8001736:	68d8      	ldr	r0, [r3, #12]
 8001738:	2300      	movs	r3, #0
 800173a:	f240 1201 	movw	r2, #257	; 0x101
 800173e:	2137      	movs	r1, #55	; 0x37
 8001740:	f011 faae 	bl	8012ca0 <pifI2cDevice_WriteRegBit8>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <hmc5883lInit+0x2a6>
 800174a:	2300      	movs	r3, #0
 800174c:	e04b      	b.n	80017e6 <hmc5883lInit+0x33e>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) return FALSE;
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <hmc5883lInit+0x2c0>)
 8001750:	68d8      	ldr	r0, [r3, #12]
 8001752:	2301      	movs	r3, #1
 8001754:	f240 5201 	movw	r2, #1281	; 0x501
 8001758:	216a      	movs	r1, #106	; 0x6a
 800175a:	f011 faa1 	bl	8012ca0 <pifI2cDevice_WriteRegBit8>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d109      	bne.n	8001778 <hmc5883lInit+0x2d0>
 8001764:	2300      	movs	r3, #0
 8001766:	e03e      	b.n	80017e6 <hmc5883lInit+0x33e>
 8001768:	200001f4 	.word	0x200001f4
 800176c:	20000208 	.word	0x20000208
 8001770:	466f4000 	.word	0x466f4000
 8001774:	465ec001 	.word	0x465ec001

    if (!bret) {                // Something went wrong so get a best guess
 8001778:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800177c:	f083 0301 	eor.w	r3, r3, #1
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00b      	beq.n	800179e <hmc5883lInit+0x2f6>
    	s_gy86._hmc5883.scale[X] = 1.0f;
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <hmc5883lInit+0x348>)
 8001788:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800178c:	615a      	str	r2, [r3, #20]
    	s_gy86._hmc5883.scale[Y] = 1.0f;
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <hmc5883lInit+0x348>)
 8001790:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001794:	619a      	str	r2, [r3, #24]
    	s_gy86._hmc5883.scale[Z] = 1.0f;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <hmc5883lInit+0x348>)
 8001798:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800179c:	61da      	str	r2, [r3, #28]
    }

    s_gy86._ms5611._p_task->pause = FALSE;
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <hmc5883lInit+0x348>)
 80017a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a2:	2200      	movs	r2, #0
 80017a4:	711a      	strb	r2, [r3, #4]

    pifLog_Printf(LT_INFO, "Mag scale: %f %f %f", (double)s_gy86._hmc5883.scale[X], (double)s_gy86._hmc5883.scale[Y], (double)s_gy86._hmc5883.scale[Z]);
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <hmc5883lInit+0x348>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fe80 	bl	80004b0 <__aeabi_f2d>
 80017b0:	4680      	mov	r8, r0
 80017b2:	4689      	mov	r9, r1
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <hmc5883lInit+0x348>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fe79 	bl	80004b0 <__aeabi_f2d>
 80017be:	4604      	mov	r4, r0
 80017c0:	460d      	mov	r5, r1
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <hmc5883lInit+0x348>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fe72 	bl	80004b0 <__aeabi_f2d>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017d4:	e9cd 4500 	strd	r4, r5, [sp]
 80017d8:	4642      	mov	r2, r8
 80017da:	464b      	mov	r3, r9
 80017dc:	4905      	ldr	r1, [pc, #20]	; (80017f4 <hmc5883lInit+0x34c>)
 80017de:	2002      	movs	r0, #2
 80017e0:	f012 fa0a 	bl	8013bf8 <pifLog_Printf>
    return TRUE;
 80017e4:	2301      	movs	r3, #1
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3728      	adds	r7, #40	; 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017f0:	200001f4 	.word	0x200001f4
 80017f4:	08026c80 	.word	0x08026c80

080017f8 <hmc5883lRead>:

static BOOL hmc5883lRead(sensorSet_t *p_sensor_set, int16_t *magData)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
	int16_t data[3];

	// During calibration, magGain is 1.0, so the read returns normal non-calibrated values.
    // After calibration is done, magGain is set to calculated gain values.
	if (!pifImuSensor_ReadMag2(&p_sensor_set->imu_sensor, data)) return FALSE;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f107 0208 	add.w	r2, r7, #8
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f019 f97b 	bl	801ab06 <pifImuSensor_ReadMag2>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <hmc5883lRead+0x22>
 8001816:	2300      	movs	r3, #0
 8001818:	e00e      	b.n	8001838 <hmc5883lRead+0x40>
	magData[0] = data[0];
 800181a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	801a      	strh	r2, [r3, #0]
	magData[1] = data[1];
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	3302      	adds	r3, #2
 8001826:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800182a:	801a      	strh	r2, [r3, #0]
	magData[2] = data[2];
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	3304      	adds	r3, #4
 8001830:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001834:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_actHcSr04Trigger>:

static sonarDistanceFuncPtr funcSonarDistance;


static void _actHcSr04Trigger(SWITCH state)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SONAR_TRIGGER_GPIO_Port, SONAR_TRIGGER_Pin, state);
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	461a      	mov	r2, r3
 800184e:	2101      	movs	r1, #1
 8001850:	4804      	ldr	r0, [pc, #16]	; (8001864 <_actHcSr04Trigger+0x24>)
 8001852:	f01c fd0b 	bl	801e26c <HAL_GPIO_WritePin>
    s_echo_state = 0;
 8001856:	4b04      	ldr	r3, [pc, #16]	; (8001868 <_actHcSr04Trigger+0x28>)
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40020800 	.word	0x40020800
 8001868:	20000278 	.word	0x20000278

0800186c <hcsr04Echo>:

void hcsr04Echo()
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	s_echo_state ^= 1;
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <hcsr04Echo+0x24>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	f083 0301 	eor.w	r3, r3, #1
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <hcsr04Echo+0x24>)
 800187c:	701a      	strb	r2, [r3, #0]
	pifHcSr04_sigReceiveEcho(&s_hcsr04, s_echo_state);
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <hcsr04Echo+0x24>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	4619      	mov	r1, r3
 8001884:	4803      	ldr	r0, [pc, #12]	; (8001894 <hcsr04Echo+0x28>)
 8001886:	f018 fc21 	bl	801a0cc <pifHcSr04_sigReceiveEcho>
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000278 	.word	0x20000278
 8001894:	20000258 	.word	0x20000258

08001898 <_evtHcSr04Distance>:

static void _evtHcSr04Distance(int32_t distance)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
    float temp = (*funcSonarDistance)(distance);
 80018a0:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <_evtHcSr04Distance+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	4798      	blx	r3
 80018a8:	ed87 0a03 	vstr	s0, [r7, #12]
    static float pretemp = 0;

    if (temp != pretemp) {
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <_evtHcSr04Distance+0x44>)
 80018ae:	edd3 7a00 	vldr	s15, [r3]
 80018b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80018b6:	eeb4 7a67 	vcmp.f32	s14, s15
 80018ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018be:	d007      	beq.n	80018d0 <_evtHcSr04Distance+0x38>
        pifHcSr04_SetTemperature(&s_hcsr04, temp);
 80018c0:	ed97 0a03 	vldr	s0, [r7, #12]
 80018c4:	4806      	ldr	r0, [pc, #24]	; (80018e0 <_evtHcSr04Distance+0x48>)
 80018c6:	f018 fbd9 	bl	801a07c <pifHcSr04_SetTemperature>
        pretemp = temp;
 80018ca:	4a04      	ldr	r2, [pc, #16]	; (80018dc <_evtHcSr04Distance+0x44>)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6013      	str	r3, [r2, #0]
    }
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	2000027c 	.word	0x2000027c
 80018dc:	20000280 	.word	0x20000280
 80018e0:	20000258 	.word	0x20000258

080018e4 <hcsr04Init>:

BOOL hcsr04Init(uint16_t period, sonarDistanceFuncPtr func)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	80fb      	strh	r3, [r7, #6]
	if (!pifHcSr04_Init(&s_hcsr04, PIF_ID_AUTO)) return FALSE;
 80018f0:	2100      	movs	r1, #0
 80018f2:	4810      	ldr	r0, [pc, #64]	; (8001934 <hcsr04Init+0x50>)
 80018f4:	f018 fb36 	bl	8019f64 <pifHcSr04_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <hcsr04Init+0x1e>
 80018fe:	2300      	movs	r3, #0
 8001900:	e013      	b.n	800192a <hcsr04Init+0x46>
	s_hcsr04.act_trigger = _actHcSr04Trigger;
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <hcsr04Init+0x50>)
 8001904:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <hcsr04Init+0x54>)
 8001906:	601a      	str	r2, [r3, #0]
	s_hcsr04.evt_read = _evtHcSr04Distance;
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <hcsr04Init+0x50>)
 800190a:	4a0c      	ldr	r2, [pc, #48]	; (800193c <hcsr04Init+0x58>)
 800190c:	605a      	str	r2, [r3, #4]
	if (!pifHcSr04_StartTrigger(&s_hcsr04, period)) return FALSE;
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	4619      	mov	r1, r3
 8001912:	4808      	ldr	r0, [pc, #32]	; (8001934 <hcsr04Init+0x50>)
 8001914:	f018 fb8e 	bl	801a034 <pifHcSr04_StartTrigger>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <hcsr04Init+0x3e>
 800191e:	2300      	movs	r3, #0
 8001920:	e003      	b.n	800192a <hcsr04Init+0x46>

	funcSonarDistance = func;
 8001922:	4a07      	ldr	r2, [pc, #28]	; (8001940 <hcsr04Init+0x5c>)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	6013      	str	r3, [r2, #0]
    return TRUE;
 8001928:	2301      	movs	r3, #1
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000258 	.word	0x20000258
 8001938:	08001841 	.word	0x08001841
 800193c:	08001899 	.word	0x08001899
 8001940:	2000027c 	.word	0x2000027c

08001944 <actI2cRead>:
#endif

#ifdef USE_I2C_DMA

PifI2cReturn actI2cRead(uint8_t addr, uint32_t iaddr, uint8_t isize, uint8_t* p_data, uint16_t size)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af02      	add	r7, sp, #8
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	4603      	mov	r3, r0
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	4613      	mov	r3, r2
 8001954:	73bb      	strb	r3, [r7, #14]
	if (isize) {
 8001956:	7bbb      	ldrb	r3, [r7, #14]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d019      	beq.n	8001990 <actI2cRead+0x4c>
		return (HAL_I2C_Mem_Read_DMA(&hi2c1, (addr << 1) | 1, iaddr, isize, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	b21b      	sxth	r3, r3
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	b21b      	sxth	r3, r3
 8001968:	b299      	uxth	r1, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	b29a      	uxth	r2, r3
 800196e:	7bbb      	ldrb	r3, [r7, #14]
 8001970:	b298      	uxth	r0, r3
 8001972:	8b3b      	ldrh	r3, [r7, #24]
 8001974:	9301      	str	r3, [sp, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	4603      	mov	r3, r0
 800197c:	480f      	ldr	r0, [pc, #60]	; (80019bc <actI2cRead+0x78>)
 800197e:	f01d f9af 	bl	801ece0 <HAL_I2C_Mem_Read_DMA>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <actI2cRead+0x48>
 8001988:	2300      	movs	r3, #0
 800198a:	e013      	b.n	80019b4 <actI2cRead+0x70>
 800198c:	2302      	movs	r3, #2
 800198e:	e011      	b.n	80019b4 <actI2cRead+0x70>
	}
	else {
		return (HAL_I2C_Master_Receive_DMA(&hi2c1, (addr << 1) | 1, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	b21b      	sxth	r3, r3
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	b21b      	sxth	r3, r3
 800199c:	b299      	uxth	r1, r3
 800199e:	8b3b      	ldrh	r3, [r7, #24]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4806      	ldr	r0, [pc, #24]	; (80019bc <actI2cRead+0x78>)
 80019a4:	f01c ff08 	bl	801e7b8 <HAL_I2C_Master_Receive_DMA>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <actI2cRead+0x6e>
 80019ae:	2300      	movs	r3, #0
 80019b0:	e000      	b.n	80019b4 <actI2cRead+0x70>
 80019b2:	2302      	movs	r3, #2
	}
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000574 	.word	0x20000574

080019c0 <actI2cWrite>:

PifI2cReturn actI2cWrite(uint8_t addr, uint32_t iaddr, uint8_t isize, uint8_t* p_data, uint16_t size)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	4603      	mov	r3, r0
 80019cc:	73fb      	strb	r3, [r7, #15]
 80019ce:	4613      	mov	r3, r2
 80019d0:	73bb      	strb	r3, [r7, #14]
	if (isize) {
 80019d2:	7bbb      	ldrb	r3, [r7, #14]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d016      	beq.n	8001a06 <actI2cWrite+0x46>
		return (HAL_I2C_Mem_Write_DMA(&hi2c1, addr << 1, iaddr, isize, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	b299      	uxth	r1, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	7bbb      	ldrb	r3, [r7, #14]
 80019e6:	b298      	uxth	r0, r3
 80019e8:	8b3b      	ldrh	r3, [r7, #24]
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	4603      	mov	r3, r0
 80019f2:	480e      	ldr	r0, [pc, #56]	; (8001a2c <actI2cWrite+0x6c>)
 80019f4:	f01d f810 	bl	801ea18 <HAL_I2C_Mem_Write_DMA>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <actI2cWrite+0x42>
 80019fe:	2300      	movs	r3, #0
 8001a00:	e010      	b.n	8001a24 <actI2cWrite+0x64>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e00e      	b.n	8001a24 <actI2cWrite+0x64>
	}
	else {
		return (HAL_I2C_Master_Transmit_DMA(&hi2c1, addr << 1, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	b299      	uxth	r1, r3
 8001a0e:	8b3b      	ldrh	r3, [r7, #24]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4806      	ldr	r0, [pc, #24]	; (8001a2c <actI2cWrite+0x6c>)
 8001a14:	f01c fda0 	bl	801e558 <HAL_I2C_Master_Transmit_DMA>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <actI2cWrite+0x62>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e000      	b.n	8001a24 <actI2cWrite+0x64>
 8001a22:	2302      	movs	r3, #2
	}
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000574 	.word	0x20000574

08001a30 <HAL_I2C_MemRxCpltCallback>:
#endif

#if defined(USE_I2C_INTERRUPT) || defined(USE_I2C_DMA)

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <HAL_I2C_MemRxCpltCallback+0x24>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d103      	bne.n	8001a4a <HAL_I2C_MemRxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001a42:	2101      	movs	r1, #1
 8001a44:	4804      	ldr	r0, [pc, #16]	; (8001a58 <HAL_I2C_MemRxCpltCallback+0x28>)
 8001a46:	f011 f98d 	bl	8012d64 <pifI2cPort_sigEndTransfer>
	}
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40005400 	.word	0x40005400
 8001a58:	20001550 	.word	0x20001550

08001a5c <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d103      	bne.n	8001a76 <HAL_I2C_MasterRxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001a6e:	2101      	movs	r1, #1
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8001a72:	f011 f977 	bl	8012d64 <pifI2cPort_sigEndTransfer>
	}
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40005400 	.word	0x40005400
 8001a84:	20001550 	.word	0x20001550

08001a88 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a05      	ldr	r2, [pc, #20]	; (8001aac <HAL_I2C_MemTxCpltCallback+0x24>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d103      	bne.n	8001aa2 <HAL_I2C_MemTxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	4804      	ldr	r0, [pc, #16]	; (8001ab0 <HAL_I2C_MemTxCpltCallback+0x28>)
 8001a9e:	f011 f961 	bl	8012d64 <pifI2cPort_sigEndTransfer>
	}
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40005400 	.word	0x40005400
 8001ab0:	20001550 	.word	0x20001550

08001ab4 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d103      	bne.n	8001ace <HAL_I2C_MasterTxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	4804      	ldr	r0, [pc, #16]	; (8001adc <HAL_I2C_MasterTxCpltCallback+0x28>)
 8001aca:	f011 f94b 	bl	8012d64 <pifI2cPort_sigEndTransfer>
	}
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40005400 	.word	0x40005400
 8001adc:	20001550 	.word	0x20001550

08001ae0 <i2cInit>:

#endif

BOOL i2cInit()
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
    if (!pifI2cPort_Init(&g_i2c_port, PIF_ID_AUTO, 5, EEPROM_PAGE_SIZE)) return FALSE;
 8001ae4:	2340      	movs	r3, #64	; 0x40
 8001ae6:	2205      	movs	r2, #5
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4808      	ldr	r0, [pc, #32]	; (8001b0c <i2cInit+0x2c>)
 8001aec:	f010 fe58 	bl	80127a0 <pifI2cPort_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <i2cInit+0x1a>
 8001af6:	2300      	movs	r3, #0
 8001af8:	e006      	b.n	8001b08 <i2cInit+0x28>
    g_i2c_port.act_read = actI2cRead;
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <i2cInit+0x2c>)
 8001afc:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <i2cInit+0x30>)
 8001afe:	605a      	str	r2, [r3, #4]
    g_i2c_port.act_write = actI2cWrite;
 8001b00:	4b02      	ldr	r3, [pc, #8]	; (8001b0c <i2cInit+0x2c>)
 8001b02:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <i2cInit+0x34>)
 8001b04:	609a      	str	r2, [r3, #8]
    return TRUE;
 8001b06:	2301      	movs	r3, #1
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20001550 	.word	0x20001550
 8001b10:	08001945 	.word	0x08001945
 8001b14:	080019c1 	.word	0x080019c1

08001b18 <failsafeCheck>:

#define PWM_TIMER_MHZ 1
#define PWM_TIMER_8_MHZ 8

static void failsafeCheck(uint8_t channel, uint16_t pulse)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	460a      	mov	r2, r1
 8001b22:	71fb      	strb	r3, [r7, #7]
 8001b24:	4613      	mov	r3, r2
 8001b26:	80bb      	strh	r3, [r7, #4]
    static uint8_t goodPulses;

    if (channel < 4 && pulse > failsafeThreshold)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d811      	bhi.n	8001b52 <failsafeCheck+0x3a>
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <failsafeCheck+0x78>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	88ba      	ldrh	r2, [r7, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d90c      	bls.n	8001b52 <failsafeCheck+0x3a>
        goodPulses |= (1 << channel);       // if signal is valid - mark channel as OK
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	b25a      	sxtb	r2, r3
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <failsafeCheck+0x7c>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b25b      	sxtb	r3, r3
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	b25b      	sxtb	r3, r3
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <failsafeCheck+0x7c>)
 8001b50:	701a      	strb	r2, [r3, #0]
    if (goodPulses == 0x0F) {               // If first four chanells have good pulses, clear FailSafe counter
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <failsafeCheck+0x7c>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	d114      	bne.n	8001b84 <failsafeCheck+0x6c>
        goodPulses = 0;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <failsafeCheck+0x7c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
        if (failsafeCnt > 20)
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <failsafeCheck+0x80>)
 8001b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b66:	2b14      	cmp	r3, #20
 8001b68:	dd09      	ble.n	8001b7e <failsafeCheck+0x66>
            failsafeCnt -= 20;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <failsafeCheck+0x80>)
 8001b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3b14      	subs	r3, #20
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <failsafeCheck+0x80>)
 8001b7a:	801a      	strh	r2, [r3, #0]
        else
            failsafeCnt = 0;
    }
}
 8001b7c:	e002      	b.n	8001b84 <failsafeCheck+0x6c>
            failsafeCnt = 0;
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <failsafeCheck+0x80>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	801a      	strh	r2, [r3, #0]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	2000000c 	.word	0x2000000c
 8001b94:	20000389 	.word	0x20000389
 8001b98:	2000177e 	.word	0x2000177e

08001b9c <pwmReadRc>:

void pwmReadRc()
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
	uint16_t value = pifRcPpm_sigTick(&s_rc.ppm, (*pif_act_timer1us)());
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <pwmReadRc+0x3c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4798      	blx	r3
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4619      	mov	r1, r3
 8001bac:	480b      	ldr	r0, [pc, #44]	; (8001bdc <pwmReadRc+0x40>)
 8001bae:	f017 f940 	bl	8018e32 <pifRcPpm_sigTick>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	80fb      	strh	r3, [r7, #6]
    if (value) {
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <pwmReadRc+0x32>
        failsafeCheck(s_rc.ppm._channel, value);
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <pwmReadRc+0x40>)
 8001bbe:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	88fa      	ldrh	r2, [r7, #6]
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ffa5 	bl	8001b18 <failsafeCheck>
    }
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20001e08 	.word	0x20001e08
 8001bdc:	20000284 	.word	0x20000284

08001be0 <_evtRcReceive>:

static void _evtRcReceive(PifRc* p_owner, uint16_t* p_channel, PifIssuerP p_issuer)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
    PifTask* p_task = (PifTask*)p_issuer;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	613b      	str	r3, [r7, #16]
    int i;

	for (i = 0; i < p_owner->_channel_count; i++) {
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	e00b      	b.n	8001c0e <_evtRcReceive+0x2e>
		captures[i] = p_channel[i];
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	8819      	ldrh	r1, [r3, #0]
 8001c00:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <_evtRcReceive+0x48>)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < p_owner->_channel_count; i++) {
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	789b      	ldrb	r3, [r3, #2]
 8001c12:	461a      	mov	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	4293      	cmp	r3, r2
 8001c18:	dbed      	blt.n	8001bf6 <_evtRcReceive+0x16>
	}
    pifTask_SetTrigger(p_task);
 8001c1a:	6938      	ldr	r0, [r7, #16]
 8001c1c:	f013 f888 	bl	8014d30 <pifTask_SetTrigger>
}
 8001c20:	bf00      	nop
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000310 	.word	0x20000310

08001c2c <pwmWriteStandard>:

static void pwmWriteStandard(uint8_t index, uint16_t value)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	460a      	mov	r2, r1
 8001c36:	71fb      	strb	r3, [r7, #7]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	80bb      	strh	r3, [r7, #4]
	switch (motors[index]->port) {
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4a1e      	ldr	r2, [pc, #120]	; (8001cb8 <pwmWriteStandard+0x8c>)
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	78db      	ldrb	r3, [r3, #3]
 8001c46:	2b0c      	cmp	r3, #12
 8001c48:	d830      	bhi.n	8001cac <pwmWriteStandard+0x80>
 8001c4a:	a201      	add	r2, pc, #4	; (adr r2, 8001c50 <pwmWriteStandard+0x24>)
 8001c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c50:	08001c85 	.word	0x08001c85
 8001c54:	08001cad 	.word	0x08001cad
 8001c58:	08001cad 	.word	0x08001cad
 8001c5c:	08001cad 	.word	0x08001cad
 8001c60:	08001c8f 	.word	0x08001c8f
 8001c64:	08001cad 	.word	0x08001cad
 8001c68:	08001cad 	.word	0x08001cad
 8001c6c:	08001cad 	.word	0x08001cad
 8001c70:	08001c99 	.word	0x08001c99
 8001c74:	08001cad 	.word	0x08001cad
 8001c78:	08001cad 	.word	0x08001cad
 8001c7c:	08001cad 	.word	0x08001cad
 8001c80:	08001ca3 	.word	0x08001ca3
	case TIM_CHANNEL_1:	htim3.Instance->CCR1 = value; break;
 8001c84:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <pwmWriteStandard+0x90>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	88ba      	ldrh	r2, [r7, #4]
 8001c8a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c8c:	e00e      	b.n	8001cac <pwmWriteStandard+0x80>
	case TIM_CHANNEL_2:	htim3.Instance->CCR2 = value; break;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <pwmWriteStandard+0x90>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	88ba      	ldrh	r2, [r7, #4]
 8001c94:	639a      	str	r2, [r3, #56]	; 0x38
 8001c96:	e009      	b.n	8001cac <pwmWriteStandard+0x80>
	case TIM_CHANNEL_3:	htim3.Instance->CCR3 = value; break;
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <pwmWriteStandard+0x90>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	88ba      	ldrh	r2, [r7, #4]
 8001c9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ca0:	e004      	b.n	8001cac <pwmWriteStandard+0x80>
	case TIM_CHANNEL_4:	htim3.Instance->CCR4 = value; break;
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <pwmWriteStandard+0x90>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	88ba      	ldrh	r2, [r7, #4]
 8001ca8:	641a      	str	r2, [r3, #64]	; 0x40
 8001caa:	bf00      	nop
	}
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	20000330 	.word	0x20000330
 8001cbc:	200006d0 	.word	0x200006d0

08001cc0 <pwmInit>:

bool pwmInit(drv_pwm_config_t *init)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    const hardwareMaps_t *setup;
    uint16_t period;
    pwmPortData_t *p;

    // to avoid importing cfg/mcfg
    failsafeThreshold = init->failsafeThreshold;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	8a5a      	ldrh	r2, [r3, #18]
 8001cd0:	4b8c      	ldr	r3, [pc, #560]	; (8001f04 <pwmInit+0x244>)
 8001cd2:	801a      	strh	r2, [r3, #0]
    // pwm filtering on input
    pwmFilter = init->pwmFilter;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	79da      	ldrb	r2, [r3, #7]
 8001cd8:	4b8b      	ldr	r3, [pc, #556]	; (8001f08 <pwmInit+0x248>)
 8001cda:	701a      	strb	r2, [r3, #0]

    syncPWM = init->syncPWM;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	7d1a      	ldrb	r2, [r3, #20]
 8001ce0:	4b8a      	ldr	r3, [pc, #552]	; (8001f0c <pwmInit+0x24c>)
 8001ce2:	701a      	strb	r2, [r3, #0]

    // this is pretty hacky shit, but it will do for now. array of 4 config maps, [ multiPWM multiPPM airPWM airPPM ]
    if (init->airplane)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	799b      	ldrb	r3, [r3, #6]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <pwmInit+0x30>
        i = 2; // switch to air hardware config
 8001cec:	2302      	movs	r3, #2
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
    if (init->usePPM)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	785b      	ldrb	r3, [r3, #1]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <pwmInit+0x3e>
        i++; // next index is for PPM
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24

    setup = hardwareMaps[i];
 8001cfe:	4a84      	ldr	r2, [pc, #528]	; (8001f10 <pwmInit+0x250>)
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d06:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < MAX_PORTS; i++) {
 8001d08:	2300      	movs	r3, #0
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0c:	e0ae      	b.n	8001e6c <pwmInit+0x1ac>
        uint8_t pwm = setup[i].pwm;
 8001d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4413      	add	r3, r2
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	75fb      	strb	r3, [r7, #23]
        uint8_t type = setup[i].type;
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4413      	add	r3, r2
 8001d2a:	785b      	ldrb	r3, [r3, #1]
 8001d2c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if (pwm == 0xFF) // terminator
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	2bff      	cmp	r3, #255	; 0xff
 8001d34:	f000 809f 	beq.w	8001e76 <pwmInit+0x1b6>
            break;

        // hacks to allow current functionality
        if ((type & (TYPE_IP | TYPE_IW)) && !init->enableInput)
 8001d38:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d009      	beq.n	8001d58 <pwmInit+0x98>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	f083 0301 	eor.w	r3, r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <pwmInit+0x98>
        	type = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if (type & TYPE_IP) {
 8001d58:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <pwmInit+0xb6>
            p = &pwmPorts[pwm];
 8001d64:	7dfb      	ldrb	r3, [r7, #23]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4a6a      	ldr	r2, [pc, #424]	; (8001f14 <pwmInit+0x254>)
 8001d6a:	4413      	add	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
            numInputs = 8;
 8001d6e:	4b6a      	ldr	r3, [pc, #424]	; (8001f18 <pwmInit+0x258>)
 8001d70:	2208      	movs	r2, #8
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	e077      	b.n	8001e66 <pwmInit+0x1a6>
        } else if (type & TYPE_IW) {
 8001d76:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d171      	bne.n	8001e66 <pwmInit+0x1a6>
				attachInterrupt(setup[i].port, _isrPulseWidth8, CHANGE);
				break;
			}
			numInputs++;
*/
        } else if (type & TYPE_M) {
 8001d82:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d04e      	beq.n	8001e2c <pwmInit+0x16c>
            uint32_t hz, mhz;

            if (init->motorPwmRate > 500 || init->fastPWM)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	895b      	ldrh	r3, [r3, #10]
 8001d92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d96:	d803      	bhi.n	8001da0 <pwmInit+0xe0>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	7d5b      	ldrb	r3, [r3, #21]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <pwmInit+0xe6>
                mhz = PWM_TIMER_8_MHZ;
 8001da0:	2308      	movs	r3, #8
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	e001      	b.n	8001daa <pwmInit+0xea>
            else
                mhz = PWM_TIMER_MHZ;
 8001da6:	2301      	movs	r3, #1
 8001da8:	61fb      	str	r3, [r7, #28]

            hz = mhz * 1000000;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	4a5b      	ldr	r2, [pc, #364]	; (8001f1c <pwmInit+0x25c>)
 8001dae:	fb02 f303 	mul.w	r3, r2, r3
 8001db2:	613b      	str	r3, [r7, #16]

            if (init->fastPWM)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	7d5b      	ldrb	r3, [r3, #21]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d006      	beq.n	8001dca <pwmInit+0x10a>
                period = hz / 4000;
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4a58      	ldr	r2, [pc, #352]	; (8001f20 <pwmInit+0x260>)
 8001dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc4:	0a1b      	lsrs	r3, r3, #8
 8001dc6:	847b      	strh	r3, [r7, #34]	; 0x22
 8001dc8:	e006      	b.n	8001dd8 <pwmInit+0x118>
            else
                period = hz / init->motorPwmRate;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	895b      	ldrh	r3, [r3, #10]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dd6:	847b      	strh	r3, [r7, #34]	; 0x22

            pwmPorts[pwm].period = period;
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	494e      	ldr	r1, [pc, #312]	; (8001f14 <pwmInit+0x254>)
 8001ddc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001dde:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
            pwmPorts[pwm].port = setup[i].port;
 8001de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	441a      	add	r2, r3
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
 8001df0:	7891      	ldrb	r1, [r2, #2]
 8001df2:	4a48      	ldr	r2, [pc, #288]	; (8001f14 <pwmInit+0x254>)
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	460a      	mov	r2, r1
 8001dfa:	70da      	strb	r2, [r3, #3]
            HAL_TIM_PWM_Start(&htim3, pwmPorts[pwm].port);
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
 8001dfe:	4a45      	ldr	r2, [pc, #276]	; (8001f14 <pwmInit+0x254>)
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	78db      	ldrb	r3, [r3, #3]
 8001e06:	4619      	mov	r1, r3
 8001e08:	4846      	ldr	r0, [pc, #280]	; (8001f24 <pwmInit+0x264>)
 8001e0a:	f01f fec7 	bl	8021b9c <HAL_TIM_PWM_Start>
            motors[numMotors++] = &pwmPorts[pwm];
 8001e0e:	7dfa      	ldrb	r2, [r7, #23]
 8001e10:	4b45      	ldr	r3, [pc, #276]	; (8001f28 <pwmInit+0x268>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	1c59      	adds	r1, r3, #1
 8001e16:	b2c8      	uxtb	r0, r1
 8001e18:	4943      	ldr	r1, [pc, #268]	; (8001f28 <pwmInit+0x268>)
 8001e1a:	7008      	strb	r0, [r1, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	0093      	lsls	r3, r2, #2
 8001e20:	4a3c      	ldr	r2, [pc, #240]	; (8001f14 <pwmInit+0x254>)
 8001e22:	4413      	add	r3, r2
 8001e24:	4a41      	ldr	r2, [pc, #260]	; (8001f2c <pwmInit+0x26c>)
 8001e26:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001e2a:	e01c      	b.n	8001e66 <pwmInit+0x1a6>
        } else if (type & TYPE_S) {
 8001e2c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	da18      	bge.n	8001e66 <pwmInit+0x1a6>
        	pwmPorts[pwm].period = 1000000 / init->servoPwmRate;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	899b      	ldrh	r3, [r3, #12]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b38      	ldr	r3, [pc, #224]	; (8001f1c <pwmInit+0x25c>)
 8001e3c:	fb93 f2f2 	sdiv	r2, r3, r2
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
 8001e42:	b291      	uxth	r1, r2
 8001e44:	4a33      	ldr	r2, [pc, #204]	; (8001f14 <pwmInit+0x254>)
 8001e46:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
            servos[numServos++] = &pwmPorts[pwm];
 8001e4a:	7dfa      	ldrb	r2, [r7, #23]
 8001e4c:	4b38      	ldr	r3, [pc, #224]	; (8001f30 <pwmInit+0x270>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	1c59      	adds	r1, r3, #1
 8001e52:	b2c8      	uxtb	r0, r1
 8001e54:	4936      	ldr	r1, [pc, #216]	; (8001f30 <pwmInit+0x270>)
 8001e56:	7008      	strb	r0, [r1, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	0093      	lsls	r3, r2, #2
 8001e5c:	4a2d      	ldr	r2, [pc, #180]	; (8001f14 <pwmInit+0x254>)
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a34      	ldr	r2, [pc, #208]	; (8001f34 <pwmInit+0x274>)
 8001e62:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    for (i = 0; i < MAX_PORTS; i++) {
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	3301      	adds	r3, #1
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	2b0d      	cmp	r3, #13
 8001e70:	f77f af4d 	ble.w	8001d0e <pwmInit+0x4e>
 8001e74:	e000      	b.n	8001e78 <pwmInit+0x1b8>
            break;
 8001e76:	bf00      	nop
        }
    }

    if (init->enableInput) {
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d035      	beq.n	8001eec <pwmInit+0x22c>
		if (init->usePPM) {
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	785b      	ldrb	r3, [r3, #1]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d019      	beq.n	8001ebc <pwmInit+0x1fc>
			if (pifRcPpm_Init(&s_rc.ppm, PIF_ID_AUTO, numInputs, 2700)) {
 8001e88:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <pwmInit+0x258>)
 8001e8a:	781a      	ldrb	r2, [r3, #0]
 8001e8c:	f640 238c 	movw	r3, #2700	; 0xa8c
 8001e90:	2100      	movs	r1, #0
 8001e92:	4829      	ldr	r0, [pc, #164]	; (8001f38 <pwmInit+0x278>)
 8001e94:	f016 ff5a 	bl	8018d4c <pifRcPpm_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d026      	beq.n	8001eec <pwmInit+0x22c>
				pifRcPpm_SetValidRange(&s_rc.ppm, PULSE_MIN, PULSE_MAX);
 8001e9e:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001ea2:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001ea6:	4824      	ldr	r0, [pc, #144]	; (8001f38 <pwmInit+0x278>)
 8001ea8:	f016 ffa2 	bl	8018df0 <pifRcPpm_SetValidRange>
				pifRc_AttachEvtReceive(&s_rc.ppm.parent, _evtRcReceive, g_task_compute_rc);
 8001eac:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <pwmInit+0x27c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4923      	ldr	r1, [pc, #140]	; (8001f40 <pwmInit+0x280>)
 8001eb4:	4820      	ldr	r0, [pc, #128]	; (8001f38 <pwmInit+0x278>)
 8001eb6:	f016 fc0d 	bl	80186d4 <pifRc_AttachEvtReceive>
 8001eba:	e017      	b.n	8001eec <pwmInit+0x22c>
			}
		}
		else {
			if (pifRcPwm_Init(&s_rc.pwm, PIF_ID_AUTO, numInputs)) {
 8001ebc:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <pwmInit+0x258>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	481c      	ldr	r0, [pc, #112]	; (8001f38 <pwmInit+0x278>)
 8001ec6:	f017 f801 	bl	8018ecc <pifRcPwm_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00d      	beq.n	8001eec <pwmInit+0x22c>
				pifRcPwm_SetValidRange(&s_rc.pwm, PULSE_MIN, PULSE_MAX);
 8001ed0:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001ed4:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001ed8:	4817      	ldr	r0, [pc, #92]	; (8001f38 <pwmInit+0x278>)
 8001eda:	f017 f871 	bl	8018fc0 <pifRcPwm_SetValidRange>
				pifRc_AttachEvtReceive(&s_rc.pwm.parent, _evtRcReceive, g_task_compute_rc);
 8001ede:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <pwmInit+0x27c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4916      	ldr	r1, [pc, #88]	; (8001f40 <pwmInit+0x280>)
 8001ee6:	4814      	ldr	r0, [pc, #80]	; (8001f38 <pwmInit+0x278>)
 8001ee8:	f016 fbf4 	bl	80186d4 <pifRc_AttachEvtReceive>
			}
		}
    }

    // determine motor writer function
    pwmWritePtr = pwmWriteStandard;
 8001eec:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <pwmInit+0x284>)
 8001eee:	4a16      	ldr	r2, [pc, #88]	; (8001f48 <pwmInit+0x288>)
 8001ef0:	601a      	str	r2, [r3, #0]

    // set return values in init struct
    init->numServos = numServos;
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <pwmInit+0x270>)
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	759a      	strb	r2, [r3, #22]

    return false;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3728      	adds	r7, #40	; 0x28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	2000000c 	.word	0x2000000c
 8001f08:	20000387 	.word	0x20000387
 8001f0c:	20000388 	.word	0x20000388
 8001f10:	08028d80 	.word	0x08028d80
 8001f14:	200002d8 	.word	0x200002d8
 8001f18:	20000386 	.word	0x20000386
 8001f1c:	000f4240 	.word	0x000f4240
 8001f20:	10624dd3 	.word	0x10624dd3
 8001f24:	200006d0 	.word	0x200006d0
 8001f28:	20000384 	.word	0x20000384
 8001f2c:	20000330 	.word	0x20000330
 8001f30:	20000385 	.word	0x20000385
 8001f34:	20000360 	.word	0x20000360
 8001f38:	20000284 	.word	0x20000284
 8001f3c:	200015a8 	.word	0x200015a8
 8001f40:	08001be1 	.word	0x08001be1
 8001f44:	20000380 	.word	0x20000380
 8001f48:	08001c2d 	.word	0x08001c2d

08001f4c <actPwmWriteMotor>:

void actPwmWriteMotor(uint8_t index, uint16_t value)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	460a      	mov	r2, r1
 8001f56:	71fb      	strb	r3, [r7, #7]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	80bb      	strh	r3, [r7, #4]
    if (index < numMotors)
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <actPwmWriteMotor+0x30>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	79fa      	ldrb	r2, [r7, #7]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d205      	bcs.n	8001f72 <actPwmWriteMotor+0x26>
        pwmWritePtr(index, value);
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <actPwmWriteMotor+0x34>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	88b9      	ldrh	r1, [r7, #4]
 8001f6c:	79fa      	ldrb	r2, [r7, #7]
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4798      	blx	r3
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000384 	.word	0x20000384
 8001f80:	20000380 	.word	0x20000380

08001f84 <actPwmWriteServo>:

void actPwmWriteServo(uint8_t index, uint16_t value)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	71fb      	strb	r3, [r7, #7]
 8001f90:	4613      	mov	r3, r2
 8001f92:	80bb      	strh	r3, [r7, #4]
//    if (index < numServos)
//    	analogWrite(servos[index]->port, value);
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <actPwmRead>:

uint16_t actPwmRead(uint8_t channel)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
    return captures[channel];
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <actPwmRead+0x20>)
 8001fae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000310 	.word	0x20000310

08001fc4 <systemInit>:
	PifStorageVar s_storage;
#endif


void systemInit(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
#ifdef BUZZER
    actBuzzerAction(PIF_ID_BUZZER, OFF);
 8001fc8:	2100      	movs	r1, #0
 8001fca:	f44f 7098 	mov.w	r0, #304	; 0x130
 8001fce:	f000 f8ad 	bl	800212c <actBuzzerAction>
#endif
    actLed0State(OFF);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f000 f852 	bl	800207c <actLed0State>
    actLed1State(OFF);
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f000 f87b 	bl	80020d4 <actLed1State>
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <failureMode>:

void failureMode(uint8_t mode)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	71fb      	strb	r3, [r7, #7]
#ifdef __PIF_DEBUG__
    pifLog_SendAndExit();
 8001fec:	f011 fecc 	bl	8013d88 <pifLog_SendAndExit>
#endif
    actLed1State(OFF);
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f000 f86f 	bl	80020d4 <actLed1State>
    actLed0State(ON);
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f000 f840 	bl	800207c <actLed0State>
    while (1) {
        actLed1Toggle();
 8001ffc:	f000 f880 	bl	8002100 <actLed1Toggle>
        actLed0Toggle();
 8002000:	f000 f852 	bl	80020a8 <actLed0Toggle>
        pif_Delay1ms(475 * mode - 2);
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	b29b      	uxth	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	0052      	lsls	r2, r2, #1
 800200c:	441a      	add	r2, r3
 800200e:	0152      	lsls	r2, r2, #5
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	461a      	mov	r2, r3
 8002014:	0091      	lsls	r1, r2, #2
 8002016:	461a      	mov	r2, r3
 8002018:	460b      	mov	r3, r1
 800201a:	4413      	add	r3, r2
 800201c:	b29b      	uxth	r3, r3
 800201e:	3b02      	subs	r3, #2
 8002020:	b29b      	uxth	r3, r3
 8002022:	4618      	mov	r0, r3
 8002024:	f00f fc3e 	bl	80118a4 <pif_Delay1ms>
        actBuzzerAction(PIF_ID_BUZZER, ON);
 8002028:	2101      	movs	r1, #1
 800202a:	f44f 7098 	mov.w	r0, #304	; 0x130
 800202e:	f000 f87d 	bl	800212c <actBuzzerAction>
        pif_Delay1ms(25);
 8002032:	2019      	movs	r0, #25
 8002034:	f00f fc36 	bl	80118a4 <pif_Delay1ms>
        actBuzzerAction(PIF_ID_BUZZER, OFF);
 8002038:	2100      	movs	r1, #0
 800203a:	f44f 7098 	mov.w	r0, #304	; 0x130
 800203e:	f000 f875 	bl	800212c <actBuzzerAction>
        actLed1Toggle();
 8002042:	e7db      	b.n	8001ffc <failureMode+0x1a>

08002044 <systemReset>:
    }
}

void systemReset(bool toBootloader)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
	pifLog_Printf(LT_INFO, "System Rebooting %d...", toBootloader);
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	461a      	mov	r2, r3
 8002052:	4907      	ldr	r1, [pc, #28]	; (8002070 <systemReset+0x2c>)
 8002054:	2002      	movs	r0, #2
 8002056:	f011 fdcf 	bl	8013bf8 <pifLog_Printf>
	pif_Delay1ms(2000);
 800205a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800205e:	f00f fc21 	bl	80118a4 <pif_Delay1ms>
//	__DSB;
	SCB->AIRCR = ((0x5FA << SCB_AIRCR_VECTKEY_Pos) | SCB_AIRCR_SYSRESETREQ_Msk);//software reset
 8002062:	4b04      	ldr	r3, [pc, #16]	; (8002074 <systemReset+0x30>)
 8002064:	4a04      	ldr	r2, [pc, #16]	; (8002078 <systemReset+0x34>)
 8002066:	60da      	str	r2, [r3, #12]
	//RSTC->RSTC_CR = RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
	//NVIC_SystemReset();
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	08026c94 	.word	0x08026c94
 8002074:	e000ed00 	.word	0xe000ed00
 8002078:	05fa0004 	.word	0x05fa0004

0800207c <actLed0State>:

static BOOL len0_state = OFF;

void actLed0State(BOOL state)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
#ifdef LED0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, state);
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	461a      	mov	r2, r3
 800208a:	2110      	movs	r1, #16
 800208c:	4804      	ldr	r0, [pc, #16]	; (80020a0 <actLed0State+0x24>)
 800208e:	f01c f8ed 	bl	801e26c <HAL_GPIO_WritePin>
    len0_state = state;
 8002092:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <actLed0State+0x28>)
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	7013      	strb	r3, [r2, #0]
#else
    (void)state;
#endif
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40020800 	.word	0x40020800
 80020a4:	200003d4 	.word	0x200003d4

080020a8 <actLed0Toggle>:

void actLed0Toggle()
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
#ifdef LED0
	len0_state ^= 1;
 80020ac:	4b07      	ldr	r3, [pc, #28]	; (80020cc <actLed0Toggle+0x24>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	f083 0301 	eor.w	r3, r3, #1
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <actLed0Toggle+0x24>)
 80020b8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, len0_state);
 80020ba:	4b04      	ldr	r3, [pc, #16]	; (80020cc <actLed0Toggle+0x24>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	2110      	movs	r1, #16
 80020c2:	4803      	ldr	r0, [pc, #12]	; (80020d0 <actLed0Toggle+0x28>)
 80020c4:	f01c f8d2 	bl	801e26c <HAL_GPIO_WritePin>
#endif
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	200003d4 	.word	0x200003d4
 80020d0:	40020800 	.word	0x40020800

080020d4 <actLed1State>:

static BOOL len1_state = OFF;

void actLed1State(BOOL state)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
#ifdef LED1
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, state);
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	461a      	mov	r2, r3
 80020e2:	2104      	movs	r1, #4
 80020e4:	4804      	ldr	r0, [pc, #16]	; (80020f8 <actLed1State+0x24>)
 80020e6:	f01c f8c1 	bl	801e26c <HAL_GPIO_WritePin>
    len1_state = state;
 80020ea:	4a04      	ldr	r2, [pc, #16]	; (80020fc <actLed1State+0x28>)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	7013      	strb	r3, [r2, #0]
#else
    (void)state;
#endif
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40020400 	.word	0x40020400
 80020fc:	200003d5 	.word	0x200003d5

08002100 <actLed1Toggle>:

void actLed1Toggle()
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
#ifdef LED1
	len1_state ^= 1;
 8002104:	4b07      	ldr	r3, [pc, #28]	; (8002124 <actLed1Toggle+0x24>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	f083 0301 	eor.w	r3, r3, #1
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4b05      	ldr	r3, [pc, #20]	; (8002124 <actLed1Toggle+0x24>)
 8002110:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, len1_state);
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <actLed1Toggle+0x24>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	2104      	movs	r1, #4
 800211a:	4803      	ldr	r0, [pc, #12]	; (8002128 <actLed1Toggle+0x28>)
 800211c:	f01c f8a6 	bl	801e26c <HAL_GPIO_WritePin>
#endif
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}
 8002124:	200003d5 	.word	0x200003d5
 8002128:	40020400 	.word	0x40020400

0800212c <actBuzzerAction>:

void actBuzzerAction(PifId id, BOOL action)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	460a      	mov	r2, r1
 8002136:	80fb      	strh	r3, [r7, #6]
 8002138:	4613      	mov	r3, r2
 800213a:	717b      	strb	r3, [r7, #5]
	(void)id;

#ifdef BUZZER
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, action);
 800213c:	797b      	ldrb	r3, [r7, #5]
 800213e:	461a      	mov	r2, r3
 8002140:	2120      	movs	r1, #32
 8002142:	4803      	ldr	r0, [pc, #12]	; (8002150 <actBuzzerAction+0x24>)
 8002144:	f01c f892 	bl	801e26c <HAL_GPIO_WritePin>
#else
    (void)action;
#endif
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40020800 	.word	0x40020800

08002154 <actInvState>:

void actInvState(BOOL state)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
#ifdef INVERTER
	HAL_GPIO_WritePin(INVERTER_GPIO_Port, INVERTER_Pin, state);
#else
    (void)state;
#endif
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	4603      	mov	r3, r0
 8002172:	80fb      	strh	r3, [r7, #6]
	extern void hcsr04Echo();

    switch (GPIO_Pin) {
 8002174:	88fb      	ldrh	r3, [r7, #6]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d005      	beq.n	8002186 <HAL_GPIO_EXTI_Callback+0x1c>
 800217a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800217e:	d105      	bne.n	800218c <HAL_GPIO_EXTI_Callback+0x22>
    case RC_PPM_Pin:
    	pwmReadRc();
 8002180:	f7ff fd0c 	bl	8001b9c <pwmReadRc>
		break;
 8002184:	e002      	b.n	800218c <HAL_GPIO_EXTI_Callback+0x22>

    case SONAR_ECHO_Pin:
    	hcsr04Echo();
 8002186:	f7ff fb71 	bl	800186c <hcsr04Echo>
    	break;
 800218a:	bf00      	nop
    }
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <storageInit>:
}

#endif

PifStorage* storageInit()
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af02      	add	r7, sp, #8
	if (!pifStorageFix_Init(&s_storage, PIF_ID_AUTO)) return NULL;
	if (!pifStorageFix_AttachActStorage(&s_storage, actStorageRead, actStorageWrite)) goto fail;
	if (!pifStorageFix_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME)) goto fail;
#endif
#ifdef STORAGE_EEPROM
	if (!pifStorageVar_Init(&s_storage, PIF_ID_AUTO)) return NULL;
 800219a:	2100      	movs	r1, #0
 800219c:	4822      	ldr	r0, [pc, #136]	; (8002228 <storageInit+0x94>)
 800219e:	f019 ff69 	bl	801c074 <pifStorageVar_Init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <storageInit+0x18>
 80021a8:	2300      	movs	r3, #0
 80021aa:	e039      	b.n	8002220 <storageInit+0x8c>
	if (!pifStorageVar_AttachI2c(&s_storage, &g_i2c_port, ATMEL_I2C_ADDRESS, EEPROM_I_ADDR_SIZE, 10)) goto fail;	// 10ms
 80021ac:	230a      	movs	r3, #10
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2302      	movs	r3, #2
 80021b2:	2250      	movs	r2, #80	; 0x50
 80021b4:	491d      	ldr	r1, [pc, #116]	; (800222c <storageInit+0x98>)
 80021b6:	481c      	ldr	r0, [pc, #112]	; (8002228 <storageInit+0x94>)
 80021b8:	f01a f8a4 	bl	801c304 <pifStorageVar_AttachI2c>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d027      	beq.n	8002212 <storageInit+0x7e>
	if (!pifStorageVar_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME, 8)) goto fail;
 80021c2:	2308      	movs	r3, #8
 80021c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021c8:	2140      	movs	r1, #64	; 0x40
 80021ca:	4817      	ldr	r0, [pc, #92]	; (8002228 <storageInit+0x94>)
 80021cc:	f019 ffc8 	bl	801c160 <pifStorageVar_SetMedia>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d01f      	beq.n	8002216 <storageInit+0x82>
	if (!pifStorageVar_IsFormat(&s_storage.parent)) {
 80021d6:	4814      	ldr	r0, [pc, #80]	; (8002228 <storageInit+0x94>)
 80021d8:	f01a f8ad 	bl	801c336 <pifStorageVar_IsFormat>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d115      	bne.n	800220e <storageInit+0x7a>
		pifLog_Printf(LT_INFO, "Storage Init : EC=%d", pif_error);
 80021e2:	4b13      	ldr	r3, [pc, #76]	; (8002230 <storageInit+0x9c>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	4912      	ldr	r1, [pc, #72]	; (8002234 <storageInit+0xa0>)
 80021ea:	2002      	movs	r0, #2
 80021ec:	f011 fd04 	bl	8013bf8 <pifLog_Printf>
		if (!pifStorage_Format(&s_storage.parent)) {
 80021f0:	480d      	ldr	r0, [pc, #52]	; (8002228 <storageInit+0x94>)
 80021f2:	f019 fe5c 	bl	801beae <pifStorage_Format>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d104      	bne.n	8002206 <storageInit+0x72>
			pifLog_Printf(LT_INFO, "Storage format failed");
 80021fc:	490e      	ldr	r1, [pc, #56]	; (8002238 <storageInit+0xa4>)
 80021fe:	2002      	movs	r0, #2
 8002200:	f011 fcfa 	bl	8013bf8 <pifLog_Printf>
			goto fail;
 8002204:	e008      	b.n	8002218 <storageInit+0x84>
		}
		else {
			pifLog_Printf(LT_INFO, "Storage format");
 8002206:	490d      	ldr	r1, [pc, #52]	; (800223c <storageInit+0xa8>)
 8002208:	2002      	movs	r0, #2
 800220a:	f011 fcf5 	bl	8013bf8 <pifLog_Printf>
		}
	}
#endif
	return &s_storage.parent;
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <storageInit+0x94>)
 8002210:	e006      	b.n	8002220 <storageInit+0x8c>
	if (!pifStorageVar_AttachI2c(&s_storage, &g_i2c_port, ATMEL_I2C_ADDRESS, EEPROM_I_ADDR_SIZE, 10)) goto fail;	// 10ms
 8002212:	bf00      	nop
 8002214:	e000      	b.n	8002218 <storageInit+0x84>
	if (!pifStorageVar_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME, 8)) goto fail;
 8002216:	bf00      	nop
fail:
#ifdef STORAGE_FLASH
	pifStorageFix_Clear(&s_storage);
#endif
#ifdef STORAGE_EEPROM
	pifStorageVar_Clear(&s_storage);
 8002218:	4803      	ldr	r0, [pc, #12]	; (8002228 <storageInit+0x94>)
 800221a:	f019 ff77 	bl	801c10c <pifStorageVar_Clear>
#endif
	return NULL;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	2000038c 	.word	0x2000038c
 800222c:	20001550 	.word	0x20001550
 8002230:	20001de0 	.word	0x20001de0
 8002234:	08026cac 	.word	0x08026cac
 8002238:	08026cc4 	.word	0x08026cc4
 800223c:	08026cdc 	.word	0x08026cdc

08002240 <actUartSetBaudRate>:
#endif
static uartPort_t uartPort[3];


static BOOL actUartSetBaudRate(PifComm* p_comm, uint32_t baudrate)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	8a1b      	ldrh	r3, [r3, #16]
 800224e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002252:	019b      	lsls	r3, r3, #6
 8002254:	4a11      	ldr	r2, [pc, #68]	; (800229c <actUartSetBaudRate+0x5c>)
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]

	if (p_uart->p_huart->Init.BaudRate == baudrate) return TRUE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d101      	bne.n	800226a <actUartSetBaudRate+0x2a>
 8002266:	2301      	movs	r3, #1
 8002268:	e013      	b.n	8002292 <actUartSetBaudRate+0x52>

	HAL_UART_DeInit(p_uart->p_huart);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226e:	4618      	mov	r0, r3
 8002270:	f020 fcbd 	bl	8022bee <HAL_UART_DeInit>
	p_uart->p_huart->Init.BaudRate = baudrate;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(p_uart->p_huart) != HAL_OK) {
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002280:	4618      	mov	r0, r3
 8002282:	f020 fc67 	bl	8022b54 <HAL_UART_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <actUartSetBaudRate+0x50>
		return FALSE;
 800228c:	2300      	movs	r3, #0
 800228e:	e000      	b.n	8002292 <actUartSetBaudRate+0x52>
	}
	return TRUE;
 8002290:	2301      	movs	r3, #1
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2000040c 	.word	0x2000040c

080022a0 <actUartStartTransfer>:

static BOOL actUartStartTransfer(PifComm* p_comm)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
	uint8_t* p_data;
	uint8_t state;
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	8a1b      	ldrh	r3, [r3, #16]
 80022ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022b0:	019b      	lsls	r3, r3, #6
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <actUartStartTransfer+0x5c>)
 80022b4:	4413      	add	r3, r2
 80022b6:	617b      	str	r3, [r7, #20]

	p_uart->tx_frame_size = UART_TX_FRAME_SIZE;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2208      	movs	r2, #8
 80022bc:	879a      	strh	r2, [r3, #60]	; 0x3c
	state = pifComm_StartGetTxData(p_comm, &p_data, &p_uart->tx_frame_size);
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80022c4:	f107 030c 	add.w	r3, r7, #12
 80022c8:	4619      	mov	r1, r3
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f010 f9a2 	bl	8012614 <pifComm_StartGetTxData>
 80022d0:	4603      	mov	r3, r0
 80022d2:	74fb      	strb	r3, [r7, #19]
	if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 80022d4:	7cfb      	ldrb	r3, [r7, #19]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d009      	beq.n	80022f2 <actUartStartTransfer+0x52>
		HAL_UART_Transmit_IT(p_uart->p_huart, p_data, p_uart->tx_frame_size);
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80022e2:	68f9      	ldr	r1, [r7, #12]
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80022e8:	461a      	mov	r2, r3
 80022ea:	f020 fcaf 	bl	8022c4c <HAL_UART_Transmit_IT>
		return TRUE;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <actUartStartTransfer+0x54>
	}
	return FALSE;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	2000040c 	.word	0x2000040c

08002300 <actLogStartTransfer>:

#ifdef __PIF_DEBUG__

static BOOL actLogStartTransfer(PifComm* p_comm)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
	uint8_t *p_data, state;

	s_usLogTx = 0;
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <actLogStartTransfer+0x48>)
 800230a:	2200      	movs	r2, #0
 800230c:	801a      	strh	r2, [r3, #0]
	state = pifComm_StartGetTxData(p_comm, &p_data, &s_usLogTx);
 800230e:	f107 0308 	add.w	r3, r7, #8
 8002312:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <actLogStartTransfer+0x48>)
 8002314:	4619      	mov	r1, r3
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f010 f97c 	bl	8012614 <pifComm_StartGetTxData>
 800231c:	4603      	mov	r3, r0
 800231e:	73fb      	strb	r3, [r7, #15]
	if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d008      	beq.n	800233c <actLogStartTransfer+0x3c>
		HAL_UART_Transmit_IT(&huart2, p_data, s_usLogTx);
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	4a06      	ldr	r2, [pc, #24]	; (8002348 <actLogStartTransfer+0x48>)
 800232e:	8812      	ldrh	r2, [r2, #0]
 8002330:	4619      	mov	r1, r3
 8002332:	4806      	ldr	r0, [pc, #24]	; (800234c <actLogStartTransfer+0x4c>)
 8002334:	f020 fc8a 	bl	8022c4c <HAL_UART_Transmit_IT>
		return TRUE;
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <actLogStartTransfer+0x3e>
	}
	return FALSE;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000408 	.word	0x20000408
 800234c:	2000075c 	.word	0x2000075c

08002350 <logOpen>:

BOOL logOpen()
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af02      	add	r7, sp, #8
	pifLog_Init();
 8002356:	f011 fb63 	bl	8013a20 <pifLog_Init>

	if (!pifComm_Init(&s_comm_log, PIF_ID_AUTO)) return FALSE;
 800235a:	2100      	movs	r1, #0
 800235c:	4816      	ldr	r0, [pc, #88]	; (80023b8 <logOpen+0x68>)
 800235e:	f010 f843 	bl	80123e8 <pifComm_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <logOpen+0x1c>
 8002368:	2300      	movs	r3, #0
 800236a:	e022      	b.n	80023b2 <logOpen+0x62>
	if (!pifComm_AttachTask(&s_comm_log, TM_PERIOD_MS, 1, TRUE, "C-Log")) return FALSE;			// 1ms
 800236c:	4b13      	ldr	r3, [pc, #76]	; (80023bc <logOpen+0x6c>)
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2301      	movs	r3, #1
 8002372:	2201      	movs	r2, #1
 8002374:	2102      	movs	r1, #2
 8002376:	4810      	ldr	r0, [pc, #64]	; (80023b8 <logOpen+0x68>)
 8002378:	f010 f9e0 	bl	801273c <pifComm_AttachTask>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <logOpen+0x36>
 8002382:	2300      	movs	r3, #0
 8002384:	e015      	b.n	80023b2 <logOpen+0x62>
	if (!pifComm_AllocTxBuffer(&s_comm_log, 256)) return FALSE;
 8002386:	f44f 7180 	mov.w	r1, #256	; 0x100
 800238a:	480b      	ldr	r0, [pc, #44]	; (80023b8 <logOpen+0x68>)
 800238c:	f010 f8c0 	bl	8012510 <pifComm_AllocTxBuffer>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <logOpen+0x4a>
 8002396:	2300      	movs	r3, #0
 8002398:	e00b      	b.n	80023b2 <logOpen+0x62>
	s_comm_log.act_start_transfer = actLogStartTransfer;
 800239a:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <logOpen+0x68>)
 800239c:	4a08      	ldr	r2, [pc, #32]	; (80023c0 <logOpen+0x70>)
 800239e:	60da      	str	r2, [r3, #12]

	if (!pifLog_AttachComm(&s_comm_log)) return FALSE;
 80023a0:	4805      	ldr	r0, [pc, #20]	; (80023b8 <logOpen+0x68>)
 80023a2:	f011 fcb7 	bl	8013d14 <pifLog_AttachComm>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <logOpen+0x60>
 80023ac:	2300      	movs	r3, #0
 80023ae:	e000      	b.n	80023b2 <logOpen+0x62>
	return TRUE;
 80023b0:	2301      	movs	r3, #1
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	200003d8 	.word	0x200003d8
 80023bc:	08026d04 	.word	0x08026d04
 80023c0:	08002301 	.word	0x08002301

080023c4 <uartOpen>:

#endif

serialPort_t *uartOpen(int port, uint32_t baudRate, portMode_t mode, uint8_t period)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08c      	sub	sp, #48	; 0x30
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	4611      	mov	r1, r2
 80023d0:	461a      	mov	r2, r3
 80023d2:	460b      	mov	r3, r1
 80023d4:	71fb      	strb	r3, [r7, #7]
 80023d6:	4613      	mov	r3, r2
 80023d8:	71bb      	strb	r3, [r7, #6]
    uartPort_t *s = NULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t rx_size = 16;
 80023de:	2310      	movs	r3, #16
 80023e0:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t tmp;
	const char* names[] = { "Comm-1", "Comm-2", "Comm-3" };
 80023e2:	4a47      	ldr	r2, [pc, #284]	; (8002500 <uartOpen+0x13c>)
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80023ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    if (port == UART_PORT_1) {
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d105      	bne.n	8002400 <uartOpen+0x3c>
        s = &uartPort[0];
 80023f4:	4b43      	ldr	r3, [pc, #268]	; (8002504 <uartOpen+0x140>)
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
        s->p_huart = &huart1;
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	4a43      	ldr	r2, [pc, #268]	; (8002508 <uartOpen+0x144>)
 80023fc:	639a      	str	r2, [r3, #56]	; 0x38
 80023fe:	e00a      	b.n	8002416 <uartOpen+0x52>
    else if (port == UART_PORT_2) {
        s = &uartPort[1];
        s->p_huart = &huart2;
    }
#endif
    else if (port == UART_PORT_3) {
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2b03      	cmp	r3, #3
 8002404:	d105      	bne.n	8002412 <uartOpen+0x4e>
        s = &uartPort[2];
 8002406:	4b41      	ldr	r3, [pc, #260]	; (800250c <uartOpen+0x148>)
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
        s->p_huart = &huart6;
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	4a40      	ldr	r2, [pc, #256]	; (8002510 <uartOpen+0x14c>)
 800240e:	639a      	str	r2, [r3, #56]	; 0x38
 8002410:	e001      	b.n	8002416 <uartOpen+0x52>
    }
    else return NULL;
 8002412:	2300      	movs	r3, #0
 8002414:	e06f      	b.n	80024f6 <uartOpen+0x132>

    tmp = period * 115200 / 10000;
 8002416:	79bb      	ldrb	r3, [r7, #6]
 8002418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800241c:	fb02 f303 	mul.w	r3, r2, r3
 8002420:	4a3c      	ldr	r2, [pc, #240]	; (8002514 <uartOpen+0x150>)
 8002422:	fb82 1203 	smull	r1, r2, r2, r3
 8002426:	1312      	asrs	r2, r2, #12
 8002428:	17db      	asrs	r3, r3, #31
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	843b      	strh	r3, [r7, #32]
    while (tmp >= rx_size) rx_size <<= 1;
 800242e:	e002      	b.n	8002436 <uartOpen+0x72>
 8002430:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	847b      	strh	r3, [r7, #34]	; 0x22
 8002436:	8c3a      	ldrh	r2, [r7, #32]
 8002438:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800243a:	429a      	cmp	r2, r3
 800243c:	d2f8      	bcs.n	8002430 <uartOpen+0x6c>
	s->init = TRUE;
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	2201      	movs	r2, #1
 8002442:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	if (!pifComm_Init(&s->port.comm, PIF_ID_UART(port - 1))) return FALSE;
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	1d1a      	adds	r2, r3, #4
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	b29b      	uxth	r3, r3
 800244e:	33ff      	adds	r3, #255	; 0xff
 8002450:	b29b      	uxth	r3, r3
 8002452:	4619      	mov	r1, r3
 8002454:	4610      	mov	r0, r2
 8002456:	f00f ffc7 	bl	80123e8 <pifComm_Init>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <uartOpen+0xa0>
 8002460:	2300      	movs	r3, #0
 8002462:	e048      	b.n	80024f6 <uartOpen+0x132>
	if (!pifComm_AttachTask(&s->port.comm, TM_PERIOD_MS, period, TRUE, names[port - 1])) return FALSE;
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	1d18      	adds	r0, r3, #4
 8002468:	79bb      	ldrb	r3, [r7, #6]
 800246a:	b29a      	uxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	3b01      	subs	r3, #1
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	3328      	adds	r3, #40	; 0x28
 8002474:	443b      	add	r3, r7
 8002476:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2301      	movs	r3, #1
 800247e:	2102      	movs	r1, #2
 8002480:	f010 f95c 	bl	801273c <pifComm_AttachTask>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <uartOpen+0xca>
 800248a:	2300      	movs	r3, #0
 800248c:	e033      	b.n	80024f6 <uartOpen+0x132>
	if (!pifComm_AllocRxBuffer(&s->port.comm, rx_size, rx_size / 2)) return FALSE;
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	1d18      	adds	r0, r3, #4
 8002492:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002494:	085b      	lsrs	r3, r3, #1
 8002496:	b29b      	uxth	r3, r3
 8002498:	b2da      	uxtb	r2, r3
 800249a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800249c:	4619      	mov	r1, r3
 800249e:	f00f fff3 	bl	8012488 <pifComm_AllocRxBuffer>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <uartOpen+0xe8>
 80024a8:	2300      	movs	r3, #0
 80024aa:	e024      	b.n	80024f6 <uartOpen+0x132>
	if (!pifComm_AllocTxBuffer(&s->port.comm, 64)) return FALSE;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	3304      	adds	r3, #4
 80024b0:	2140      	movs	r1, #64	; 0x40
 80024b2:	4618      	mov	r0, r3
 80024b4:	f010 f82c 	bl	8012510 <pifComm_AllocTxBuffer>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <uartOpen+0xfe>
 80024be:	2300      	movs	r3, #0
 80024c0:	e019      	b.n	80024f6 <uartOpen+0x132>
	s->port.comm.act_set_baudrate = actUartSetBaudRate;
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	4a14      	ldr	r2, [pc, #80]	; (8002518 <uartOpen+0x154>)
 80024c6:	605a      	str	r2, [r3, #4]
	s->port.comm.act_start_transfer = actUartStartTransfer;
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	4a14      	ldr	r2, [pc, #80]	; (800251c <uartOpen+0x158>)
 80024cc:	611a      	str	r2, [r3, #16]

    // callback for IRQ-based RX ONLY
    if (!serialSetBaudRate(&s->port, baudRate)) {
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	68b9      	ldr	r1, [r7, #8]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 f8f0 	bl	80026b8 <serialSetBaudRate>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d106      	bne.n	80024ec <uartOpen+0x128>
    	pifComm_Clear(&s->port.comm);
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	3304      	adds	r3, #4
 80024e2:	4618      	mov	r0, r3
 80024e4:	f00f ffaa 	bl	801243c <pifComm_Clear>
    	return FALSE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e004      	b.n	80024f6 <uartOpen+0x132>
    }

	s->init = FALSE;
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    return (serialPort_t *)s;
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3728      	adds	r7, #40	; 0x28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	08026d0c 	.word	0x08026d0c
 8002504:	2000040c 	.word	0x2000040c
 8002508:	20000718 	.word	0x20000718
 800250c:	2000048c 	.word	0x2000048c
 8002510:	200007a0 	.word	0x200007a0
 8002514:	68db8bad 	.word	0x68db8bad
 8002518:	08002241 	.word	0x08002241
 800251c:	080022a1 	.word	0x080022a1

08002520 <HAL_UART_TxCpltCallback>:

// Handlers

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	uint8_t* p_data;
	uint8_t state;
	uartPort_t* p_uart;

	if (huart->Instance == USART1) {
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a39      	ldr	r2, [pc, #228]	; (8002614 <HAL_UART_TxCpltCallback+0xf4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d102      	bne.n	8002538 <HAL_UART_TxCpltCallback+0x18>
		p_uart = &uartPort[0];
 8002532:	4b39      	ldr	r3, [pc, #228]	; (8002618 <HAL_UART_TxCpltCallback+0xf8>)
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	e035      	b.n	80025a4 <HAL_UART_TxCpltCallback+0x84>
	}
	else if (huart->Instance == USART2) {
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a37      	ldr	r2, [pc, #220]	; (800261c <HAL_UART_TxCpltCallback+0xfc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d129      	bne.n	8002596 <HAL_UART_TxCpltCallback+0x76>
#ifdef __PIF_DEBUG__
		state = pifComm_EndGetTxData(&s_comm_log, s_usLogTx);
 8002542:	4b37      	ldr	r3, [pc, #220]	; (8002620 <HAL_UART_TxCpltCallback+0x100>)
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	4619      	mov	r1, r3
 8002548:	4836      	ldr	r0, [pc, #216]	; (8002624 <HAL_UART_TxCpltCallback+0x104>)
 800254a:	f010 f89b 	bl	8012684 <pifComm_EndGetTxData>
 800254e:	4603      	mov	r3, r0
 8002550:	74fb      	strb	r3, [r7, #19]
		if (state & PIF_COMM_SEND_DATA_STATE_EMPTY) {
 8002552:	7cfb      	ldrb	r3, [r7, #19]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_UART_TxCpltCallback+0x44>
			pifComm_FinishTransfer(&s_comm_log);
 800255c:	4831      	ldr	r0, [pc, #196]	; (8002624 <HAL_UART_TxCpltCallback+0x104>)
 800255e:	f010 f8aa 	bl	80126b6 <pifComm_FinishTransfer>
			state = pifComm_StartGetTxData(&s_comm_log, &p_data, &s_usLogTx);
			if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
				HAL_UART_Transmit_IT(huart, p_data, s_usLogTx);
			}
		}
		return;
 8002562:	e050      	b.n	8002606 <HAL_UART_TxCpltCallback+0xe6>
			s_usLogTx = 0;
 8002564:	4b2e      	ldr	r3, [pc, #184]	; (8002620 <HAL_UART_TxCpltCallback+0x100>)
 8002566:	2200      	movs	r2, #0
 8002568:	801a      	strh	r2, [r3, #0]
			state = pifComm_StartGetTxData(&s_comm_log, &p_data, &s_usLogTx);
 800256a:	f107 030c 	add.w	r3, r7, #12
 800256e:	4a2c      	ldr	r2, [pc, #176]	; (8002620 <HAL_UART_TxCpltCallback+0x100>)
 8002570:	4619      	mov	r1, r3
 8002572:	482c      	ldr	r0, [pc, #176]	; (8002624 <HAL_UART_TxCpltCallback+0x104>)
 8002574:	f010 f84e 	bl	8012614 <pifComm_StartGetTxData>
 8002578:	4603      	mov	r3, r0
 800257a:	74fb      	strb	r3, [r7, #19]
			if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 800257c:	7cfb      	ldrb	r3, [r7, #19]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d03f      	beq.n	8002606 <HAL_UART_TxCpltCallback+0xe6>
				HAL_UART_Transmit_IT(huart, p_data, s_usLogTx);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4a25      	ldr	r2, [pc, #148]	; (8002620 <HAL_UART_TxCpltCallback+0x100>)
 800258a:	8812      	ldrh	r2, [r2, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f020 fb5c 	bl	8022c4c <HAL_UART_Transmit_IT>
		return;
 8002594:	e037      	b.n	8002606 <HAL_UART_TxCpltCallback+0xe6>
#else
		p_uart = &uartPort[1];
#endif
	}
	else if (huart->Instance == USART6) {
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a23      	ldr	r2, [pc, #140]	; (8002628 <HAL_UART_TxCpltCallback+0x108>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d134      	bne.n	800260a <HAL_UART_TxCpltCallback+0xea>
		p_uart = &uartPort[2];
 80025a0:	4b22      	ldr	r3, [pc, #136]	; (800262c <HAL_UART_TxCpltCallback+0x10c>)
 80025a2:	617b      	str	r3, [r7, #20]
	}
	else return;

	state = pifComm_EndGetTxData(&p_uart->port.comm, p_uart->tx_frame_size);
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	1d1a      	adds	r2, r3, #4
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80025ac:	4619      	mov	r1, r3
 80025ae:	4610      	mov	r0, r2
 80025b0:	f010 f868 	bl	8012684 <pifComm_EndGetTxData>
 80025b4:	4603      	mov	r3, r0
 80025b6:	74fb      	strb	r3, [r7, #19]
	if (state & PIF_COMM_SEND_DATA_STATE_EMPTY) {
 80025b8:	7cfb      	ldrb	r3, [r7, #19]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d005      	beq.n	80025ce <HAL_UART_TxCpltCallback+0xae>
		pifComm_FinishTransfer(&p_uart->port.comm);
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3304      	adds	r3, #4
 80025c6:	4618      	mov	r0, r3
 80025c8:	f010 f875 	bl	80126b6 <pifComm_FinishTransfer>
 80025cc:	e01e      	b.n	800260c <HAL_UART_TxCpltCallback+0xec>
	}
	else {
		p_uart->tx_frame_size = UART_TX_FRAME_SIZE;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2208      	movs	r2, #8
 80025d2:	879a      	strh	r2, [r3, #60]	; 0x3c
		state = pifComm_StartGetTxData(&p_uart->port.comm, &p_data, &p_uart->tx_frame_size);
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	1d18      	adds	r0, r3, #4
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80025de:	f107 030c 	add.w	r3, r7, #12
 80025e2:	4619      	mov	r1, r3
 80025e4:	f010 f816 	bl	8012614 <pifComm_StartGetTxData>
 80025e8:	4603      	mov	r3, r0
 80025ea:	74fb      	strb	r3, [r7, #19]
		if (state & 1) {
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HAL_UART_TxCpltCallback+0xec>
			HAL_UART_Transmit_IT(huart, p_data, p_uart->tx_frame_size);
 80025f6:	68f9      	ldr	r1, [r7, #12]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80025fc:	461a      	mov	r2, r3
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f020 fb24 	bl	8022c4c <HAL_UART_Transmit_IT>
 8002604:	e002      	b.n	800260c <HAL_UART_TxCpltCallback+0xec>
		return;
 8002606:	bf00      	nop
 8002608:	e000      	b.n	800260c <HAL_UART_TxCpltCallback+0xec>
	else return;
 800260a:	bf00      	nop
		}
	}
}
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40011000 	.word	0x40011000
 8002618:	2000040c 	.word	0x2000040c
 800261c:	40004400 	.word	0x40004400
 8002620:	20000408 	.word	0x20000408
 8002624:	200003d8 	.word	0x200003d8
 8002628:	40011400 	.word	0x40011400
 800262c:	2000048c 	.word	0x2000048c

08002630 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart;

	if (huart->Instance == USART1) {
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a18      	ldr	r2, [pc, #96]	; (80026a0 <HAL_UART_RxCpltCallback+0x70>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d102      	bne.n	8002648 <HAL_UART_RxCpltCallback+0x18>
		p_uart = &uartPort[0];
 8002642:	4b18      	ldr	r3, [pc, #96]	; (80026a4 <HAL_UART_RxCpltCallback+0x74>)
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	e00e      	b.n	8002666 <HAL_UART_RxCpltCallback+0x36>
	}
	else if (huart->Instance == USART2) {
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a16      	ldr	r2, [pc, #88]	; (80026a8 <HAL_UART_RxCpltCallback+0x78>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d102      	bne.n	8002658 <HAL_UART_RxCpltCallback+0x28>
		p_uart = &uartPort[1];
 8002652:	4b16      	ldr	r3, [pc, #88]	; (80026ac <HAL_UART_RxCpltCallback+0x7c>)
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	e006      	b.n	8002666 <HAL_UART_RxCpltCallback+0x36>
	}
	else if (huart->Instance == USART6) {
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a14      	ldr	r2, [pc, #80]	; (80026b0 <HAL_UART_RxCpltCallback+0x80>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d117      	bne.n	8002692 <HAL_UART_RxCpltCallback+0x62>
		p_uart = &uartPort[2];
 8002662:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <HAL_UART_RxCpltCallback+0x84>)
 8002664:	60fb      	str	r3, [r7, #12]
	}
	else return;

	if (p_uart->init) return;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800266c:	2b00      	cmp	r3, #0
 800266e:	d112      	bne.n	8002696 <HAL_UART_RxCpltCallback+0x66>

	pifComm_PutRxByte(&p_uart->port.comm, p_uart->rx_frame);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1d1a      	adds	r2, r3, #4
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800267a:	4619      	mov	r1, r3
 800267c:	4610      	mov	r0, r2
 800267e:	f00f ff9c 	bl	80125ba <pifComm_PutRxByte>
	HAL_UART_Receive_IT(huart, &p_uart->rx_frame, 1);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	333e      	adds	r3, #62	; 0x3e
 8002686:	2201      	movs	r2, #1
 8002688:	4619      	mov	r1, r3
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f020 fb23 	bl	8022cd6 <HAL_UART_Receive_IT>
 8002690:	e002      	b.n	8002698 <HAL_UART_RxCpltCallback+0x68>
	else return;
 8002692:	bf00      	nop
 8002694:	e000      	b.n	8002698 <HAL_UART_RxCpltCallback+0x68>
	if (p_uart->init) return;
 8002696:	bf00      	nop
}
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40011000 	.word	0x40011000
 80026a4:	2000040c 	.word	0x2000040c
 80026a8:	40004400 	.word	0x40004400
 80026ac:	2000044c 	.word	0x2000044c
 80026b0:	40011400 	.word	0x40011400
 80026b4:	2000048c 	.word	0x2000048c

080026b8 <serialSetBaudRate>:

BOOL serialSetBaudRate(serialPort_t* instance, uint32_t baudRate)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
   	return (*instance->comm.act_set_baudrate)(&instance->comm, baudRate);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	3204      	adds	r2, #4
 80026ca:	6839      	ldr	r1, [r7, #0]
 80026cc:	4610      	mov	r0, r2
 80026ce:	4798      	blx	r3
 80026d0:	4603      	mov	r3, r0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <serialStartReceiveFunc>:

BOOL serialStartReceiveFunc(PifComm* p_comm)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	8a1b      	ldrh	r3, [r3, #16]
 80026e8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80026ec:	019b      	lsls	r3, r3, #6
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <serialStartReceiveFunc+0x3c>)
 80026f0:	4413      	add	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]

	if (HAL_UART_Receive_IT(p_uart->p_huart, &p_uart->rx_frame, 1) != HAL_OK) return FALSE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	333e      	adds	r3, #62	; 0x3e
 80026fc:	2201      	movs	r2, #1
 80026fe:	4619      	mov	r1, r3
 8002700:	f020 fae9 	bl	8022cd6 <HAL_UART_Receive_IT>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <serialStartReceiveFunc+0x32>
 800270a:	2300      	movs	r3, #0
 800270c:	e000      	b.n	8002710 <serialStartReceiveFunc+0x34>
	return TRUE;
 800270e:	2301      	movs	r3, #1
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	2000040c 	.word	0x2000040c

0800271c <serialStopReceiveFunc>:

BOOL serialStopReceiveFunc(PifComm* p_comm)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	8a1b      	ldrh	r3, [r3, #16]
 8002728:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800272c:	019b      	lsls	r3, r3, #6
 800272e:	4a06      	ldr	r2, [pc, #24]	; (8002748 <serialStopReceiveFunc+0x2c>)
 8002730:	4413      	add	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]

	HAL_UART_Abort_IT(p_uart->p_huart);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002738:	4618      	mov	r0, r3
 800273a:	f020 fafd 	bl	8022d38 <HAL_UART_Abort_IT>
	return TRUE;
 800273e:	2301      	movs	r3, #1
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	2000040c 	.word	0x2000040c

0800274c <micros>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t micros()
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
	return htim2.Instance->CNT;
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <micros+0x14>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002756:	4618      	mov	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	20000688 	.word	0x20000688

08002764 <featureDefault>:

static void featureDefault(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
    featureSet(FEATURE_VBAT);
 8002768:	2002      	movs	r0, #2
 800276a:	f004 fcaf 	bl	80070cc <featureSet>
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <actTaskSignal>:

#ifdef __PIF_DEBUG__

void actTaskSignal(BOOL state)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, state);
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	461a      	mov	r2, r3
 8002782:	2120      	movs	r1, #32
 8002784:	4803      	ldr	r0, [pc, #12]	; (8002794 <actTaskSignal+0x20>)
 8002786:	f01b fd71 	bl	801e26c <HAL_GPIO_WritePin>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40020000 	.word	0x40020000

08002798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b08f      	sub	sp, #60	; 0x3c
 800279c:	af02      	add	r7, sp, #8
#else
	#define FAIL { goto fail; }
#endif
    drv_pwm_config_t pwm_params;
    drv_adc_config_t adc_params;
    bool sensorsOK = false;
 800279e:	2300      	movs	r3, #0
 80027a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027a4:	f01a f926 	bl	801c9f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027a8:	f000 fb6c 	bl	8002e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027ac:	f000 fe24 	bl	80033f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80027b0:	f000 fde4 	bl	800337c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80027b4:	f000 fd8e 	bl	80032d4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80027b8:	f000 fc4a 	bl	8003050 <MX_I2C1_Init>
  MX_TIM3_Init();
 80027bc:	f000 fcc2 	bl	8003144 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80027c0:	f000 fd5e 	bl	8003280 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80027c4:	f000 fdb0 	bl	8003328 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80027c8:	f000 fbc6 	bl	8002f58 <MX_ADC1_Init>
  MX_TIM2_Init();
 80027cc:	f000 fc6e 	bl	80030ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80027d0:	2100      	movs	r1, #0
 80027d2:	4896      	ldr	r0, [pc, #600]	; (8002a2c <main+0x294>)
 80027d4:	f01f fa92 	bl	8021cfc <HAL_TIM_IC_Start_IT>

    pif_Init(micros);
 80027d8:	4895      	ldr	r0, [pc, #596]	; (8002a30 <main+0x298>)
 80027da:	f00e ff8f 	bl	80116fc <pif_Init>

    if (!pifTaskManager_Init(20)) FAIL;
 80027de:	2014      	movs	r0, #20
 80027e0:	f012 fb06 	bl	8014df0 <pifTaskManager_Init>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d102      	bne.n	80027f0 <main+0x58>
 80027ea:	23ac      	movs	r3, #172	; 0xac
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ee:	e323      	b.n	8002e38 <main+0x6a0>

#ifdef __PIF_DEBUG__
    pif_act_task_signal = actTaskSignal;
 80027f0:	4b90      	ldr	r3, [pc, #576]	; (8002a34 <main+0x29c>)
 80027f2:	4a91      	ldr	r2, [pc, #580]	; (8002a38 <main+0x2a0>)
 80027f4:	601a      	str	r2, [r3, #0]

    logOpen();
 80027f6:	f7ff fdab 	bl	8002350 <logOpen>
#endif

    if (!pifTimerManager_Init(&g_timer_1ms, PIF_ID_AUTO, 1000, 3)) FAIL;		        // 1000us
 80027fa:	2303      	movs	r3, #3
 80027fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002800:	2100      	movs	r1, #0
 8002802:	488e      	ldr	r0, [pc, #568]	; (8002a3c <main+0x2a4>)
 8002804:	f012 ff2a 	bl	801565c <pifTimerManager_Init>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d102      	bne.n	8002814 <main+0x7c>
 800280e:	23b4      	movs	r3, #180	; 0xb4
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
 8002812:	e311      	b.n	8002e38 <main+0x6a0>

#ifdef __PIF_DEBUG__
    pifLog_Printf(LT_INFO, "Start Baseflight: %d\n", sizeof(master_t));
 8002814:	f240 526c 	movw	r2, #1388	; 0x56c
 8002818:	4989      	ldr	r1, [pc, #548]	; (8002a40 <main+0x2a8>)
 800281a:	2002      	movs	r0, #2
 800281c:	f011 f9ec 	bl	8013bf8 <pifLog_Printf>
#endif

    if (!buzzerInit()) FAIL;
 8002820:	f001 fc50 	bl	80040c4 <buzzerInit>
 8002824:	4603      	mov	r3, r0
 8002826:	f083 0301 	eor.w	r3, r3, #1
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <main+0x9e>
 8002830:	23ba      	movs	r3, #186	; 0xba
 8002832:	62bb      	str	r3, [r7, #40]	; 0x28
 8002834:	e300      	b.n	8002e38 <main+0x6a0>

    // make sure (at compile time) that config struct doesn't overflow allocated flash pages
    ct_assert(sizeof(mcfg) < STORAGE_VOLUME);

    g_featureDefault = featureDefault;
 8002836:	4b83      	ldr	r3, [pc, #524]	; (8002a44 <main+0x2ac>)
 8002838:	4a83      	ldr	r2, [pc, #524]	; (8002a48 <main+0x2b0>)
 800283a:	601a      	str	r2, [r3, #0]

    if (!i2cInit()) FAIL;
 800283c:	f7ff f950 	bl	8001ae0 <i2cInit>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <main+0xb4>
 8002846:	23c1      	movs	r3, #193	; 0xc1
 8002848:	62bb      	str	r3, [r7, #40]	; 0x28
 800284a:	e2f5      	b.n	8002e38 <main+0x6a0>

    if (!initEEPROM(storageInit())) FAIL;
 800284c:	f7ff fca2 	bl	8002194 <storageInit>
 8002850:	4603      	mov	r3, r0
 8002852:	4618      	mov	r0, r3
 8002854:	f003 fe82 	bl	800655c <initEEPROM>
 8002858:	4603      	mov	r3, r0
 800285a:	f083 0301 	eor.w	r3, r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <main+0xd2>
 8002864:	23c3      	movs	r3, #195	; 0xc3
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28
 8002868:	e2e6      	b.n	8002e38 <main+0x6a0>
    if (!checkFirstTime(false)) FAIL;
 800286a:	2000      	movs	r0, #0
 800286c:	f004 f8b8 	bl	80069e0 <checkFirstTime>
 8002870:	4603      	mov	r3, r0
 8002872:	f083 0301 	eor.w	r3, r3, #1
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <main+0xea>
 800287c:	23c4      	movs	r3, #196	; 0xc4
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002880:	e2da      	b.n	8002e38 <main+0x6a0>
    readEEPROM();
 8002882:	f003 ff17 	bl	80066b4 <readEEPROM>

    systemInit();
 8002886:	f7ff fb9d 	bl	8001fc4 <systemInit>

    // sleep for 100ms
    pif_Delay1ms(100);
 800288a:	2064      	movs	r0, #100	; 0x64
 800288c:	f00f f80a 	bl	80118a4 <pif_Delay1ms>

    activateConfig();
 8002890:	f003 ff5a 	bl	8006748 <activateConfig>

    // configure rssi ADC
    if (mcfg.rssi_adc_channel > 0 && (mcfg.rssi_adc_channel == 1 || mcfg.rssi_adc_channel == 9 || mcfg.rssi_adc_channel == 5) && mcfg.rssi_adc_channel != mcfg.power_adc_channel)
 8002894:	4b6d      	ldr	r3, [pc, #436]	; (8002a4c <main+0x2b4>)
 8002896:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01b      	beq.n	80028d6 <main+0x13e>
 800289e:	4b6b      	ldr	r3, [pc, #428]	; (8002a4c <main+0x2b4>)
 80028a0:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d009      	beq.n	80028bc <main+0x124>
 80028a8:	4b68      	ldr	r3, [pc, #416]	; (8002a4c <main+0x2b4>)
 80028aa:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 80028ae:	2b09      	cmp	r3, #9
 80028b0:	d004      	beq.n	80028bc <main+0x124>
 80028b2:	4b66      	ldr	r3, [pc, #408]	; (8002a4c <main+0x2b4>)
 80028b4:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d10c      	bne.n	80028d6 <main+0x13e>
 80028bc:	4b63      	ldr	r3, [pc, #396]	; (8002a4c <main+0x2b4>)
 80028be:	f893 21a4 	ldrb.w	r2, [r3, #420]	; 0x1a4
 80028c2:	4b62      	ldr	r3, [pc, #392]	; (8002a4c <main+0x2b4>)
 80028c4:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d004      	beq.n	80028d6 <main+0x13e>
        adc_params.rssiAdcChannel = mcfg.rssi_adc_channel;
 80028cc:	4b5f      	ldr	r3, [pc, #380]	; (8002a4c <main+0x2b4>)
 80028ce:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 80028d2:	717b      	strb	r3, [r7, #5]
 80028d4:	e005      	b.n	80028e2 <main+0x14a>
    else {
        adc_params.rssiAdcChannel = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	717b      	strb	r3, [r7, #5]
        mcfg.rssi_adc_channel = 0;
 80028da:	4b5c      	ldr	r3, [pc, #368]	; (8002a4c <main+0x2b4>)
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
    }

    adcInit(&adc_params);
 80028e2:	1d3b      	adds	r3, r7, #4
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fe fc4d 	bl	8001184 <adcInit>
    // Check battery type/voltage
    if (feature(FEATURE_VBAT))
 80028ea:	2002      	movs	r0, #2
 80028ec:	f004 fbd8 	bl	80070a0 <feature>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <main+0x162>
        batteryInit();
 80028f6:	f00c f905 	bl	800eb04 <batteryInit>
    initBoardAlignment();
 80028fa:	f001 fa89 	bl	8003e10 <initBoardAlignment>

    // drop out any sensors that don't seem to work, init all the others. halt if gyro is dead.
    sensorsOK = sensorsAutodetect(gyro_detect, acc_detect, baro_detect, mag_detect);
 80028fe:	4b54      	ldr	r3, [pc, #336]	; (8002a50 <main+0x2b8>)
 8002900:	6819      	ldr	r1, [r3, #0]
 8002902:	4b54      	ldr	r3, [pc, #336]	; (8002a54 <main+0x2bc>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4b54      	ldr	r3, [pc, #336]	; (8002a58 <main+0x2c0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4854      	ldr	r0, [pc, #336]	; (8002a5c <main+0x2c4>)
 800290c:	f00b ff98 	bl	800e840 <sensorsAutodetect>
 8002910:	4603      	mov	r3, r0
 8002912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#ifdef __PIF_DEBUG__
    pifLog_Printf(LT_INFO, "Sensor: %lxh(%d)", sensorsMask(), sensorsOK);
 8002916:	f004 fbb7 	bl	8007088 <sensorsMask>
 800291a:	4602      	mov	r2, r0
 800291c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002920:	494f      	ldr	r1, [pc, #316]	; (8002a60 <main+0x2c8>)
 8002922:	2002      	movs	r0, #2
 8002924:	f011 f968 	bl	8013bf8 <pifLog_Printf>
#endif

    // if gyro was not detected due to whatever reason, we give up now.
    if (!sensorsOK)
 8002928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800292c:	f083 0301 	eor.w	r3, r3, #1
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <main+0x1a4>
        failureMode(3);
 8002936:	2003      	movs	r0, #3
 8002938:	f7ff fb53 	bl	8001fe2 <failureMode>

    actLed1State(ON);
 800293c:	2001      	movs	r0, #1
 800293e:	f7ff fbc9 	bl	80020d4 <actLed1State>
    actLed0State(OFF);
 8002942:	2000      	movs	r0, #0
 8002944:	f7ff fb9a 	bl	800207c <actLed0State>
    for (i = 0; i < 10; i++) {
 8002948:	2300      	movs	r3, #0
 800294a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800294e:	e018      	b.n	8002982 <main+0x1ea>
        actLed1Toggle();
 8002950:	f7ff fbd6 	bl	8002100 <actLed1Toggle>
        actLed0Toggle();
 8002954:	f7ff fba8 	bl	80020a8 <actLed0Toggle>
        pifTaskManager_YieldMs(25);
 8002958:	2019      	movs	r0, #25
 800295a:	f012 fd97 	bl	801548c <pifTaskManager_YieldMs>
        actBuzzerAction(PIF_ID_BUZZER, ON);
 800295e:	2101      	movs	r1, #1
 8002960:	f44f 7098 	mov.w	r0, #304	; 0x130
 8002964:	f7ff fbe2 	bl	800212c <actBuzzerAction>
        pifTaskManager_YieldMs(25);
 8002968:	2019      	movs	r0, #25
 800296a:	f012 fd8f 	bl	801548c <pifTaskManager_YieldMs>
        actBuzzerAction(PIF_ID_BUZZER, OFF);
 800296e:	2100      	movs	r1, #0
 8002970:	f44f 7098 	mov.w	r0, #304	; 0x130
 8002974:	f7ff fbda 	bl	800212c <actBuzzerAction>
    for (i = 0; i < 10; i++) {
 8002978:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800297c:	3301      	adds	r3, #1
 800297e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002982:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002986:	2b09      	cmp	r3, #9
 8002988:	d9e2      	bls.n	8002950 <main+0x1b8>
    }
    actLed0State(OFF);
 800298a:	2000      	movs	r0, #0
 800298c:	f7ff fb76 	bl	800207c <actLed0State>
    actLed1State(OFF);
 8002990:	2000      	movs	r0, #0
 8002992:	f7ff fb9f 	bl	80020d4 <actLed1State>

    imuInit(); // Mag is initialized inside imuInit
 8002996:	f007 f91b 	bl	8009bd0 <imuInit>
    mixerInit(); // this will set core.useServo var depending on mixer type
 800299a:	f008 fbf9 	bl	800b190 <mixerInit>

#ifdef __PIF_DEBUG__
    pifLog_Printf(LT_INFO, "Serial: %lu", mcfg.serial_baudrate);
 800299e:	4b2b      	ldr	r3, [pc, #172]	; (8002a4c <main+0x2b4>)
 80029a0:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80029a4:	461a      	mov	r2, r3
 80029a6:	492f      	ldr	r1, [pc, #188]	; (8002a64 <main+0x2cc>)
 80029a8:	2002      	movs	r0, #2
 80029aa:	f011 f925 	bl	8013bf8 <pifLog_Printf>
#endif
    serialInit(UART_PORT_1, mcfg.serial_baudrate, UART_PORT_NONE);
 80029ae:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <main+0x2b4>)
 80029b0:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80029b4:	2200      	movs	r2, #0
 80029b6:	4619      	mov	r1, r3
 80029b8:	2001      	movs	r0, #1
 80029ba:	f00c fef7 	bl	800f7ac <serialInit>

    g_task_compute_rc = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, taskComputeRc, NULL, FALSE);
 80029be:	2300      	movs	r3, #0
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	2300      	movs	r3, #0
 80029c4:	4a28      	ldr	r2, [pc, #160]	; (8002a68 <main+0x2d0>)
 80029c6:	2100      	movs	r1, #0
 80029c8:	2007      	movs	r0, #7
 80029ca:	f012 fa37 	bl	8014e3c <pifTaskManager_Add>
 80029ce:	4603      	mov	r3, r0
 80029d0:	4a26      	ldr	r2, [pc, #152]	; (8002a6c <main+0x2d4>)
 80029d2:	6013      	str	r3, [r2, #0]
    if (!g_task_compute_rc) FAIL;
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <main+0x2d4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d102      	bne.n	80029e2 <main+0x24a>
 80029dc:	23fc      	movs	r3, #252	; 0xfc
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
 80029e0:	e22a      	b.n	8002e38 <main+0x6a0>
    g_task_compute_rc->name = "RC";
 80029e2:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <main+0x2d4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a22      	ldr	r2, [pc, #136]	; (8002a70 <main+0x2d8>)
 80029e8:	601a      	str	r2, [r3, #0]

    // when using airplane/wing mixer, servo/motor outputs are remapped
    if (mcfg.mixerConfiguration == MULTITYPE_AIRPLANE || mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 80029ea:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <main+0x2b4>)
 80029ec:	795b      	ldrb	r3, [r3, #5]
 80029ee:	2b0e      	cmp	r3, #14
 80029f0:	d007      	beq.n	8002a02 <main+0x26a>
 80029f2:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <main+0x2b4>)
 80029f4:	795b      	ldrb	r3, [r3, #5]
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d003      	beq.n	8002a02 <main+0x26a>
 80029fa:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <main+0x2b4>)
 80029fc:	795b      	ldrb	r3, [r3, #5]
 80029fe:	2b18      	cmp	r3, #24
 8002a00:	d102      	bne.n	8002a08 <main+0x270>
        pwm_params.airplane = true;
 8002a02:	2301      	movs	r3, #1
 8002a04:	73bb      	strb	r3, [r7, #14]
 8002a06:	e001      	b.n	8002a0c <main+0x274>
    else
        pwm_params.airplane = false;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73bb      	strb	r3, [r7, #14]
    pwm_params.useUART = feature(FEATURE_GPS) || feature(FEATURE_SERIALRX); // spektrum/sbus support uses UART too
 8002a0c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a10:	f004 fb46 	bl	80070a0 <feature>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d105      	bne.n	8002a26 <main+0x28e>
 8002a1a:	2008      	movs	r0, #8
 8002a1c:	f004 fb40 	bl	80070a0 <feature>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d026      	beq.n	8002a74 <main+0x2dc>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e025      	b.n	8002a76 <main+0x2de>
 8002a2a:	bf00      	nop
 8002a2c:	20000688 	.word	0x20000688
 8002a30:	0800274d 	.word	0x0800274d
 8002a34:	20001e8c 	.word	0x20001e8c
 8002a38:	08002775 	.word	0x08002775
 8002a3c:	20001580 	.word	0x20001580
 8002a40:	08026d18 	.word	0x08026d18
 8002a44:	20001734 	.word	0x20001734
 8002a48:	08002765 	.word	0x08002765
 8002a4c:	2000089c 	.word	0x2000089c
 8002a50:	200007fc 	.word	0x200007fc
 8002a54:	20000800 	.word	0x20000800
 8002a58:	20000804 	.word	0x20000804
 8002a5c:	20000010 	.word	0x20000010
 8002a60:	08026d30 	.word	0x08026d30
 8002a64:	08026d44 	.word	0x08026d44
 8002a68:	0800d475 	.word	0x0800d475
 8002a6c:	200015a8 	.word	0x200015a8
 8002a70:	08026d50 	.word	0x08026d50
 8002a74:	2300      	movs	r3, #0
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	72bb      	strb	r3, [r7, #10]
    pwm_params.useSoftSerial = false;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	72fb      	strb	r3, [r7, #11]
    pwm_params.usePPM = feature(FEATURE_PPM);
 8002a82:	2001      	movs	r0, #1
 8002a84:	f004 fb0c 	bl	80070a0 <feature>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	727b      	strb	r3, [r7, #9]
    pwm_params.enableInput = !feature(FEATURE_SERIALRX); // disable inputs if using spektrum
 8002a8c:	2008      	movs	r0, #8
 8002a8e:	f004 fb07 	bl	80070a0 <feature>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	bf14      	ite	ne
 8002a98:	2301      	movne	r3, #1
 8002a9a:	2300      	moveq	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f083 0301 	eor.w	r3, r3, #1
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	723b      	strb	r3, [r7, #8]
    pwm_params.useServos = core.useServo;
 8002aac:	4baf      	ldr	r3, [pc, #700]	; (8002d6c <main+0x5d4>)
 8002aae:	7d5b      	ldrb	r3, [r3, #21]
 8002ab0:	733b      	strb	r3, [r7, #12]
    pwm_params.extraServos = cfg.gimbal_flags & GIMBAL_FORWARDAUX;
 8002ab2:	4baf      	ldr	r3, [pc, #700]	; (8002d70 <main+0x5d8>)
 8002ab4:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf14      	ite	ne
 8002ac0:	2301      	movne	r3, #1
 8002ac2:	2300      	moveq	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	737b      	strb	r3, [r7, #13]
    pwm_params.motorPwmRate = mcfg.motor_pwm_rate;
 8002ac8:	4baa      	ldr	r3, [pc, #680]	; (8002d74 <main+0x5dc>)
 8002aca:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8002ace:	827b      	strh	r3, [r7, #18]
    pwm_params.servoPwmRate = mcfg.servo_pwm_rate;
 8002ad0:	4ba8      	ldr	r3, [pc, #672]	; (8002d74 <main+0x5dc>)
 8002ad2:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8002ad6:	82bb      	strh	r3, [r7, #20]
    pwm_params.pwmFilter = mcfg.pwm_filter;
 8002ad8:	4ba6      	ldr	r3, [pc, #664]	; (8002d74 <main+0x5dc>)
 8002ada:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 8002ade:	73fb      	strb	r3, [r7, #15]
    pwm_params.idlePulse = PULSE_1MS; // standard PWM for brushless ESC (default, overridden below)
 8002ae0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ae4:	82fb      	strh	r3, [r7, #22]
    if (feature(FEATURE_3D))
 8002ae6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002aea:	f004 fad9 	bl	80070a0 <feature>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <main+0x364>
        pwm_params.idlePulse = mcfg.neutral3d;
 8002af4:	4b9f      	ldr	r3, [pc, #636]	; (8002d74 <main+0x5dc>)
 8002af6:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 8002afa:	82fb      	strh	r3, [r7, #22]
    if (pwm_params.motorPwmRate > 500)
 8002afc:	8a7b      	ldrh	r3, [r7, #18]
 8002afe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b02:	d901      	bls.n	8002b08 <main+0x370>
        pwm_params.idlePulse = 0; // brushed motors
 8002b04:	2300      	movs	r3, #0
 8002b06:	82fb      	strh	r3, [r7, #22]
    pwm_params.syncPWM = feature(FEATURE_SYNCPWM);
 8002b08:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002b0c:	f004 fac8 	bl	80070a0 <feature>
 8002b10:	4603      	mov	r3, r0
 8002b12:	773b      	strb	r3, [r7, #28]
    pwm_params.fastPWM = feature(FEATURE_FASTPWM);
 8002b14:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b18:	f004 fac2 	bl	80070a0 <feature>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	777b      	strb	r3, [r7, #29]
    pwm_params.servoCenterPulse = mcfg.midrc;
 8002b20:	4b94      	ldr	r3, [pc, #592]	; (8002d74 <main+0x5dc>)
 8002b22:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8002b26:	833b      	strh	r3, [r7, #24]
    pwm_params.failsafeThreshold = cfg.failsafe_detect_threshold;
 8002b28:	4b91      	ldr	r3, [pc, #580]	; (8002d70 <main+0x5d8>)
 8002b2a:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8002b2e:	837b      	strh	r3, [r7, #26]
    switch (mcfg.power_adc_channel) {
 8002b30:	4b90      	ldr	r3, [pc, #576]	; (8002d74 <main+0x5dc>)
 8002b32:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d002      	beq.n	8002b40 <main+0x3a8>
 8002b3a:	2b09      	cmp	r3, #9
 8002b3c:	d003      	beq.n	8002b46 <main+0x3ae>
 8002b3e:	e005      	b.n	8002b4c <main+0x3b4>
        case 1:
            pwm_params.adcChannel = PWM2;
 8002b40:	2301      	movs	r3, #1
 8002b42:	743b      	strb	r3, [r7, #16]
            break;
 8002b44:	e005      	b.n	8002b52 <main+0x3ba>
        case 9:
            pwm_params.adcChannel = PWM8;
 8002b46:	2307      	movs	r3, #7
 8002b48:	743b      	strb	r3, [r7, #16]
            break;
 8002b4a:	e002      	b.n	8002b52 <main+0x3ba>
        default:
            pwm_params.adcChannel = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	743b      	strb	r3, [r7, #16]
            break;
 8002b50:	bf00      	nop
    }

    pwmInit(&pwm_params);
 8002b52:	f107 0308 	add.w	r3, r7, #8
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff f8b2 	bl	8001cc0 <pwmInit>
    core.numServos = pwm_params.numServos;
 8002b5c:	7fba      	ldrb	r2, [r7, #30]
 8002b5e:	4b83      	ldr	r3, [pc, #524]	; (8002d6c <main+0x5d4>)
 8002b60:	759a      	strb	r2, [r3, #22]

    // configure PWM/CPPM read function and max number of channels. spektrum or sbus below will override both of these, if enabled
    for (i = 0; i < RC_CHANS; i++)
 8002b62:	2300      	movs	r3, #0
 8002b64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002b68:	e00b      	b.n	8002b82 <main+0x3ea>
        rcData[i] = 1502;
 8002b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b6e:	4a82      	ldr	r2, [pc, #520]	; (8002d78 <main+0x5e0>)
 8002b70:	f240 51de 	movw	r1, #1502	; 0x5de
 8002b74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < RC_CHANS; i++)
 8002b78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002b82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b86:	2b11      	cmp	r3, #17
 8002b88:	d9ef      	bls.n	8002b6a <main+0x3d2>
    rcReadRawFunc = pwmReadRawRC;
 8002b8a:	4b7c      	ldr	r3, [pc, #496]	; (8002d7c <main+0x5e4>)
 8002b8c:	4a7c      	ldr	r2, [pc, #496]	; (8002d80 <main+0x5e8>)
 8002b8e:	601a      	str	r2, [r3, #0]

    if (feature(FEATURE_SERIALRX)) {
 8002b90:	2008      	movs	r0, #8
 8002b92:	f004 fa85 	bl	80070a0 <feature>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d02e      	beq.n	8002bfa <main+0x462>
        switch (mcfg.serialrx_type) {
 8002b9c:	4b75      	ldr	r3, [pc, #468]	; (8002d74 <main+0x5dc>)
 8002b9e:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8002ba2:	2b05      	cmp	r3, #5
 8002ba4:	d82a      	bhi.n	8002bfc <main+0x464>
 8002ba6:	a201      	add	r2, pc, #4	; (adr r2, 8002bac <main+0x414>)
 8002ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bac:	08002bc5 	.word	0x08002bc5
 8002bb0:	08002bc5 	.word	0x08002bc5
 8002bb4:	08002bcf 	.word	0x08002bcf
 8002bb8:	08002bdf 	.word	0x08002bdf
 8002bbc:	08002be9 	.word	0x08002be9
 8002bc0:	08002bf1 	.word	0x08002bf1
            case SERIALRX_SPEKTRUM1024:
            case SERIALRX_SPEKTRUM2048:
                spektrumInit(UART_PORT_2, &rcReadRawFunc);
 8002bc4:	496d      	ldr	r1, [pc, #436]	; (8002d7c <main+0x5e4>)
 8002bc6:	2002      	movs	r0, #2
 8002bc8:	f00e fc90 	bl	80114ec <spektrumInit>
                break;
 8002bcc:	e016      	b.n	8002bfc <main+0x464>
            case SERIALRX_SBUS:
                // Configure hardware inverter on PB2. If not available, this has no effect.
                actInvState(ON);
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f7ff fac0 	bl	8002154 <actInvState>
                sbusInit(UART_PORT_2, &rcReadRawFunc);
 8002bd4:	4969      	ldr	r1, [pc, #420]	; (8002d7c <main+0x5e4>)
 8002bd6:	2002      	movs	r0, #2
 8002bd8:	f00b fdd4 	bl	800e784 <sbusInit>
                break;
 8002bdc:	e00e      	b.n	8002bfc <main+0x464>
            case SERIALRX_SUMD:
                sumdInit(UART_PORT_2, &rcReadRawFunc);
 8002bde:	4967      	ldr	r1, [pc, #412]	; (8002d7c <main+0x5e4>)
 8002be0:	2002      	movs	r0, #2
 8002be2:	f00e fd43 	bl	801166c <sumdInit>
                break;
 8002be6:	e009      	b.n	8002bfc <main+0x464>
            case SERIALRX_MSP:
                mspInit(&rcReadRawFunc);
 8002be8:	4864      	ldr	r0, [pc, #400]	; (8002d7c <main+0x5e4>)
 8002bea:	f00b fd67 	bl	800e6bc <mspInit>
                break;
 8002bee:	e005      	b.n	8002bfc <main+0x464>
            case SERIALRX_IBUS:
                ibusInit(UART_PORT_2, &rcReadRawFunc);
 8002bf0:	4962      	ldr	r1, [pc, #392]	; (8002d7c <main+0x5e4>)
 8002bf2:	2002      	movs	r0, #2
 8002bf4:	f006 ff8e 	bl	8009b14 <ibusInit>
                break;
 8002bf8:	e000      	b.n	8002bfc <main+0x464>
        }
    }
 8002bfa:	bf00      	nop

    // Optional GPS - available in both PPM, PWM and serialRX input mode, in PWM input, reduces number of available channels by 2.
    // gpsInit will return if FEATURE_GPS is not enabled.
    if (feature(FEATURE_GPS)) {
 8002bfc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c00:	f004 fa4e 	bl	80070a0 <feature>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d007      	beq.n	8002c1a <main+0x482>
        gpsInit(UART_PORT_3, mcfg.gps_baudrate);
 8002c0a:	4b5a      	ldr	r3, [pc, #360]	; (8002d74 <main+0x5dc>)
 8002c0c:	f993 31ac 	ldrsb.w	r3, [r3, #428]	; 0x1ac
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	4619      	mov	r1, r3
 8002c14:	2003      	movs	r0, #3
 8002c16:	f005 fa77 	bl	8008108 <gpsInit>
    }

#ifdef SONAR
    // sonar stuff only works with PPM
    if (feature(FEATURE_SONAR)) {
 8002c1a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002c1e:	f004 fa3f 	bl	80070a0 <feature>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <main+0x498>
//      Sonar_init(hcsr04Init, SF_NONE);
//      Sonar_init(hcsr04Init, SF_AVERAGE);
        Sonar_init(hcsr04Init, SF_NOISE_CANCEL);
 8002c28:	2102      	movs	r1, #2
 8002c2a:	4856      	ldr	r0, [pc, #344]	; (8002d84 <main+0x5ec>)
 8002c2c:	f00c fd28 	bl	800f680 <Sonar_init>
    }
#endif

    core.numAuxChannels = constrain((mcfg.rc_channel_count - 4), 4, 8);
 8002c30:	4b50      	ldr	r3, [pc, #320]	; (8002d74 <main+0x5dc>)
 8002c32:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8002c36:	3b04      	subs	r3, #4
 8002c38:	2208      	movs	r2, #8
 8002c3a:	2104      	movs	r1, #4
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f001 f8cb 	bl	8003dd8 <constrain>
 8002c42:	4603      	mov	r3, r0
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	4b49      	ldr	r3, [pc, #292]	; (8002d6c <main+0x5d4>)
 8002c48:	751a      	strb	r2, [r3, #20]
#ifdef TELEMETRY
    if (feature(FEATURE_TELEMETRY))
        initTelemetry();
#endif

    if (mcfg.mixerConfiguration == MULTITYPE_GIMBAL)
 8002c4a:	4b4a      	ldr	r3, [pc, #296]	; (8002d74 <main+0x5dc>)
 8002c4c:	795b      	ldrb	r3, [r3, #5]
 8002c4e:	2b05      	cmp	r3, #5
 8002c50:	d103      	bne.n	8002c5a <main+0x4c2>
        calibratingA = CALIBRATING_ACC_CYCLES;
 8002c52:	4b4d      	ldr	r3, [pc, #308]	; (8002d88 <main+0x5f0>)
 8002c54:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002c58:	801a      	strh	r2, [r3, #0]
    calibratingG = CALIBRATING_GYRO_CYCLES;
 8002c5a:	4b4c      	ldr	r3, [pc, #304]	; (8002d8c <main+0x5f4>)
 8002c5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c60:	801a      	strh	r2, [r3, #0]
    calibratingB = CALIBRATING_BARO_CYCLES;             // 10 seconds init_delay + 200 * 25 ms = 15 seconds before ground pressure settles
 8002c62:	4b4b      	ldr	r3, [pc, #300]	; (8002d90 <main+0x5f8>)
 8002c64:	22c8      	movs	r2, #200	; 0xc8
 8002c66:	801a      	strh	r2, [r3, #0]
    f.SMALL_ANGLE = 1;
 8002c68:	4b4a      	ldr	r3, [pc, #296]	; (8002d94 <main+0x5fc>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	735a      	strb	r2, [r3, #13]

    p_task = pifTaskManager_Add(TM_PERIOD_MS, 1, taskLoop, NULL, TRUE);         								// 1ms
 8002c6e:	2301      	movs	r3, #1
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	2300      	movs	r3, #0
 8002c74:	4a48      	ldr	r2, [pc, #288]	; (8002d98 <main+0x600>)
 8002c76:	2101      	movs	r1, #1
 8002c78:	2002      	movs	r0, #2
 8002c7a:	f012 f8df 	bl	8014e3c <pifTaskManager_Add>
 8002c7e:	6238      	str	r0, [r7, #32]
    if (!p_task) FAIL;
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d103      	bne.n	8002c8e <main+0x4f6>
 8002c86:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c8c:	e0d4      	b.n	8002e38 <main+0x6a0>
    p_task->name = "Loop";
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	4a42      	ldr	r2, [pc, #264]	; (8002d9c <main+0x604>)
 8002c92:	601a      	str	r2, [r3, #0]

    if (mcfg.looptime) {
 8002c94:	4b37      	ldr	r3, [pc, #220]	; (8002d74 <main+0x5dc>)
 8002c96:	899b      	ldrh	r3, [r3, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00c      	beq.n	8002cb6 <main+0x51e>
    	g_task_compute_imu = pifTaskManager_Add(TM_PERIOD_US, mcfg.looptime, taskComputeImu, NULL, TRUE);
 8002c9c:	4b35      	ldr	r3, [pc, #212]	; (8002d74 <main+0x5dc>)
 8002c9e:	8999      	ldrh	r1, [r3, #12]
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	4a3e      	ldr	r2, [pc, #248]	; (8002da0 <main+0x608>)
 8002ca8:	2003      	movs	r0, #3
 8002caa:	f012 f8c7 	bl	8014e3c <pifTaskManager_Add>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4a3c      	ldr	r2, [pc, #240]	; (8002da4 <main+0x60c>)
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	e00a      	b.n	8002ccc <main+0x534>
    }
    else {
    	g_task_compute_imu = pifTaskManager_Add(TM_ALWAYS, 0, taskComputeImu, NULL, TRUE);
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	4a38      	ldr	r2, [pc, #224]	; (8002da0 <main+0x608>)
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	2001      	movs	r0, #1
 8002cc2:	f012 f8bb 	bl	8014e3c <pifTaskManager_Add>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	4a36      	ldr	r2, [pc, #216]	; (8002da4 <main+0x60c>)
 8002cca:	6013      	str	r3, [r2, #0]
    }
    if (!g_task_compute_imu) FAIL;
 8002ccc:	4b35      	ldr	r3, [pc, #212]	; (8002da4 <main+0x60c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d103      	bne.n	8002cdc <main+0x544>
 8002cd4:	f240 1367 	movw	r3, #359	; 0x167
 8002cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cda:	e0ad      	b.n	8002e38 <main+0x6a0>
    g_task_compute_imu->name = "IMU";
 8002cdc:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <main+0x60c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a31      	ldr	r2, [pc, #196]	; (8002da8 <main+0x610>)
 8002ce2:	601a      	str	r2, [r3, #0]
    g_task_compute_imu->disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8002ce4:	4b2f      	ldr	r3, [pc, #188]	; (8002da4 <main+0x60c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	715a      	strb	r2, [r3, #5]

#ifdef MAG
    if (sensors(SENSOR_MAG)) {
 8002cec:	2008      	movs	r0, #8
 8002cee:	f004 f98f 	bl	8007010 <sensors>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01e      	beq.n	8002d36 <main+0x59e>
        sensor_set.mag.p_task = pifTaskManager_Add(TM_PERIOD_MS, 100, taskMagGetAdc, NULL, TRUE);             // 100ms
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	4a2b      	ldr	r2, [pc, #172]	; (8002dac <main+0x614>)
 8002d00:	2164      	movs	r1, #100	; 0x64
 8002d02:	2002      	movs	r0, #2
 8002d04:	f012 f89a 	bl	8014e3c <pifTaskManager_Add>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4a29      	ldr	r2, [pc, #164]	; (8002db0 <main+0x618>)
 8002d0c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
        if (!sensor_set.mag.p_task) FAIL;
 8002d10:	4b27      	ldr	r3, [pc, #156]	; (8002db0 <main+0x618>)
 8002d12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d103      	bne.n	8002d22 <main+0x58a>
 8002d1a:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d20:	e08a      	b.n	8002e38 <main+0x6a0>
        sensor_set.mag.p_task->name = "Mag";
 8002d22:	4b23      	ldr	r3, [pc, #140]	; (8002db0 <main+0x618>)
 8002d24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d28:	4a22      	ldr	r2, [pc, #136]	; (8002db4 <main+0x61c>)
 8002d2a:	601a      	str	r2, [r3, #0]
        sensor_set.mag.p_task->disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8002d2c:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <main+0x618>)
 8002d2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d32:	2201      	movs	r2, #1
 8002d34:	715a      	strb	r2, [r3, #5]
    }
#endif

#ifdef BARO
    if (sensors(SENSOR_BARO)) {
 8002d36:	2004      	movs	r0, #4
 8002d38:	f004 f96a 	bl	8007010 <sensors>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d041      	beq.n	8002dc6 <main+0x62e>
        sensor_set.baro.p_task = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, taskGetEstimatedAltitude, NULL, FALSE);
 8002d42:	2300      	movs	r3, #0
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	2300      	movs	r3, #0
 8002d48:	4a1b      	ldr	r2, [pc, #108]	; (8002db8 <main+0x620>)
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	2007      	movs	r0, #7
 8002d4e:	f012 f875 	bl	8014e3c <pifTaskManager_Add>
 8002d52:	4603      	mov	r3, r0
 8002d54:	4a16      	ldr	r2, [pc, #88]	; (8002db0 <main+0x618>)
 8002d56:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
        if (!sensor_set.baro.p_task) FAIL;
 8002d5a:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <main+0x618>)
 8002d5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d12b      	bne.n	8002dbc <main+0x624>
 8002d64:	f240 1377 	movw	r3, #375	; 0x177
 8002d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d6a:	e065      	b.n	8002e38 <main+0x6a0>
 8002d6c:	200007e4 	.word	0x200007e4
 8002d70:	20000e08 	.word	0x20000e08
 8002d74:	2000089c 	.word	0x2000089c
 8002d78:	20001784 	.word	0x20001784
 8002d7c:	200017dc 	.word	0x200017dc
 8002d80:	0800cc4d 	.word	0x0800cc4d
 8002d84:	080018e5 	.word	0x080018e5
 8002d88:	20001a78 	.word	0x20001a78
 8002d8c:	20001a7c 	.word	0x20001a7c
 8002d90:	20001a7a 	.word	0x20001a7a
 8002d94:	2000174c 	.word	0x2000174c
 8002d98:	0800e045 	.word	0x0800e045
 8002d9c:	08026d54 	.word	0x08026d54
 8002da0:	0800e0ad 	.word	0x0800e0ad
 8002da4:	200015a4 	.word	0x200015a4
 8002da8:	08026d5c 	.word	0x08026d5c
 8002dac:	0800f3f1 	.word	0x0800f3f1
 8002db0:	20000060 	.word	0x20000060
 8002db4:	08026d60 	.word	0x08026d60
 8002db8:	0800aa11 	.word	0x0800aa11
        sensor_set.baro.p_task->name = "Baro";
 8002dbc:	4b26      	ldr	r3, [pc, #152]	; (8002e58 <main+0x6c0>)
 8002dbe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002dc2:	4a26      	ldr	r2, [pc, #152]	; (8002e5c <main+0x6c4>)
 8002dc4:	601a      	str	r2, [r3, #0]
    }
#endif

#ifdef GPS
    g_task_gps = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, taskGpsNewData, NULL, FALSE);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	4a24      	ldr	r2, [pc, #144]	; (8002e60 <main+0x6c8>)
 8002dce:	2100      	movs	r1, #0
 8002dd0:	2007      	movs	r0, #7
 8002dd2:	f012 f833 	bl	8014e3c <pifTaskManager_Add>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4a22      	ldr	r2, [pc, #136]	; (8002e64 <main+0x6cc>)
 8002dda:	6013      	str	r3, [r2, #0]
    if (!g_task_gps) FAIL;
 8002ddc:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <main+0x6cc>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d103      	bne.n	8002dec <main+0x654>
 8002de4:	f44f 73bf 	mov.w	r3, #382	; 0x17e
 8002de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dea:	e025      	b.n	8002e38 <main+0x6a0>
    g_task_gps->name = "GPS";
 8002dec:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <main+0x6cc>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a1d      	ldr	r2, [pc, #116]	; (8002e68 <main+0x6d0>)
 8002df2:	601a      	str	r2, [r3, #0]
#endif

    p_task = pifTaskManager_Add(TM_PERIOD_MS, 50, taskLedState, NULL, TRUE);									// 50ms
 8002df4:	2301      	movs	r3, #1
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	4a1c      	ldr	r2, [pc, #112]	; (8002e6c <main+0x6d4>)
 8002dfc:	2132      	movs	r1, #50	; 0x32
 8002dfe:	2002      	movs	r0, #2
 8002e00:	f012 f81c 	bl	8014e3c <pifTaskManager_Add>
 8002e04:	6238      	str	r0, [r7, #32]
    if (!p_task) FAIL;
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d103      	bne.n	8002e14 <main+0x67c>
 8002e0c:	f240 1383 	movw	r3, #387	; 0x183
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e12:	e011      	b.n	8002e38 <main+0x6a0>
    p_task->name = "Loop";
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	4a16      	ldr	r2, [pc, #88]	; (8002e70 <main+0x6d8>)
 8002e18:	601a      	str	r2, [r3, #0]

#ifdef __PIF_DEBUG__
	pifLog_Printf(LT_INFO, "Task=%d Timer1ms=%d\n", pifTaskManager_Count(),
 8002e1a:	f012 f8af 	bl	8014f7c <pifTaskManager_Count>
 8002e1e:	4604      	mov	r4, r0
 8002e20:	4814      	ldr	r0, [pc, #80]	; (8002e74 <main+0x6dc>)
 8002e22:	f012 fcb8 	bl	8015796 <pifTimerManager_Count>
 8002e26:	4603      	mov	r3, r0
 8002e28:	4622      	mov	r2, r4
 8002e2a:	4913      	ldr	r1, [pc, #76]	; (8002e78 <main+0x6e0>)
 8002e2c:	2002      	movs	r0, #2
 8002e2e:	f010 fee3 	bl	8013bf8 <pifLog_Printf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pifTaskManager_Loop();
 8002e32:	f012 f8ad 	bl	8014f90 <pifTaskManager_Loop>
 8002e36:	e7fc      	b.n	8002e32 <main+0x69a>
  }
  return 0;

fail:
#ifdef __PIF_DEBUG__
	pifLog_Printf(LT_ERROR, "Error=%Xh Line=%u", pif_error, line);
 8002e38:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <main+0x6e4>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e40:	490f      	ldr	r1, [pc, #60]	; (8002e80 <main+0x6e8>)
 8002e42:	2004      	movs	r0, #4
 8002e44:	f010 fed8 	bl	8013bf8 <pifLog_Printf>
	pifLog_SendAndExit();
 8002e48:	f010 ff9e 	bl	8013d88 <pifLog_SendAndExit>
#endif
  return -1;
 8002e4c:	f04f 33ff 	mov.w	r3, #4294967295
  /* USER CODE END 3 */
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3734      	adds	r7, #52	; 0x34
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd90      	pop	{r4, r7, pc}
 8002e58:	20000060 	.word	0x20000060
 8002e5c:	08026d64 	.word	0x08026d64
 8002e60:	08008aad 	.word	0x08008aad
 8002e64:	200015ac 	.word	0x200015ac
 8002e68:	08026d6c 	.word	0x08026d6c
 8002e6c:	0800c991 	.word	0x0800c991
 8002e70:	08026d54 	.word	0x08026d54
 8002e74:	20001580 	.word	0x20001580
 8002e78:	08026d70 	.word	0x08026d70
 8002e7c:	20001de0 	.word	0x20001de0
 8002e80:	08026d88 	.word	0x08026d88

08002e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b094      	sub	sp, #80	; 0x50
 8002e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e8a:	f107 0320 	add.w	r3, r7, #32
 8002e8e:	2230      	movs	r2, #48	; 0x30
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f021 f812 	bl	8023ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e98:	f107 030c 	add.w	r3, r7, #12
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <SystemClock_Config+0xcc>)
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	4a27      	ldr	r2, [pc, #156]	; (8002f50 <SystemClock_Config+0xcc>)
 8002eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb8:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <SystemClock_Config+0xcc>)
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	4b22      	ldr	r3, [pc, #136]	; (8002f54 <SystemClock_Config+0xd0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a21      	ldr	r2, [pc, #132]	; (8002f54 <SystemClock_Config+0xd0>)
 8002ece:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	4b1f      	ldr	r3, [pc, #124]	; (8002f54 <SystemClock_Config+0xd0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002edc:	607b      	str	r3, [r7, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 13;
 8002ee8:	230d      	movs	r3, #13
 8002eea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eec:	2302      	movs	r3, #2
 8002eee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002ef4:	2310      	movs	r3, #16
 8002ef6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002ef8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002efc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002efe:	2304      	movs	r3, #4
 8002f00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f02:	2304      	movs	r3, #4
 8002f04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f06:	f107 0320 	add.w	r3, r7, #32
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f01e f906 	bl	802111c <HAL_RCC_OscConfig>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002f16:	f000 fb31 	bl	800357c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f1a:	230f      	movs	r3, #15
 8002f1c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f30:	f107 030c 	add.w	r3, r7, #12
 8002f34:	2102      	movs	r1, #2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f01e fb68 	bl	802160c <HAL_RCC_ClockConfig>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002f42:	f000 fb1b 	bl	800357c <Error_Handler>
  }
}
 8002f46:	bf00      	nop
 8002f48:	3750      	adds	r7, #80	; 0x50
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40007000 	.word	0x40007000

08002f58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f5e:	463b      	mov	r3, r7
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002f6a:	4b36      	ldr	r3, [pc, #216]	; (8003044 <MX_ADC1_Init+0xec>)
 8002f6c:	4a36      	ldr	r2, [pc, #216]	; (8003048 <MX_ADC1_Init+0xf0>)
 8002f6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f70:	4b34      	ldr	r3, [pc, #208]	; (8003044 <MX_ADC1_Init+0xec>)
 8002f72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f76:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f78:	4b32      	ldr	r3, [pc, #200]	; (8003044 <MX_ADC1_Init+0xec>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002f7e:	4b31      	ldr	r3, [pc, #196]	; (8003044 <MX_ADC1_Init+0xec>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002f84:	4b2f      	ldr	r3, [pc, #188]	; (8003044 <MX_ADC1_Init+0xec>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f8a:	4b2e      	ldr	r3, [pc, #184]	; (8003044 <MX_ADC1_Init+0xec>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f92:	4b2c      	ldr	r3, [pc, #176]	; (8003044 <MX_ADC1_Init+0xec>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f98:	4b2a      	ldr	r3, [pc, #168]	; (8003044 <MX_ADC1_Init+0xec>)
 8002f9a:	4a2c      	ldr	r2, [pc, #176]	; (800304c <MX_ADC1_Init+0xf4>)
 8002f9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f9e:	4b29      	ldr	r3, [pc, #164]	; (8003044 <MX_ADC1_Init+0xec>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002fa4:	4b27      	ldr	r3, [pc, #156]	; (8003044 <MX_ADC1_Init+0xec>)
 8002fa6:	2204      	movs	r2, #4
 8002fa8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002faa:	4b26      	ldr	r3, [pc, #152]	; (8003044 <MX_ADC1_Init+0xec>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002fb2:	4b24      	ldr	r3, [pc, #144]	; (8003044 <MX_ADC1_Init+0xec>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002fb8:	4822      	ldr	r0, [pc, #136]	; (8003044 <MX_ADC1_Init+0xec>)
 8002fba:	f019 fd8d 	bl	801cad8 <HAL_ADC_Init>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002fc4:	f000 fada 	bl	800357c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002fc8:	2306      	movs	r3, #6
 8002fca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fd4:	463b      	mov	r3, r7
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	481a      	ldr	r0, [pc, #104]	; (8003044 <MX_ADC1_Init+0xec>)
 8002fda:	f019 fecf 	bl	801cd7c <HAL_ADC_ConfigChannel>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002fe4:	f000 faca 	bl	800357c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002fe8:	2309      	movs	r3, #9
 8002fea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002fec:	2302      	movs	r3, #2
 8002fee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ff0:	463b      	mov	r3, r7
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4813      	ldr	r0, [pc, #76]	; (8003044 <MX_ADC1_Init+0xec>)
 8002ff6:	f019 fec1 	bl	801cd7c <HAL_ADC_ConfigChannel>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003000:	f000 fabc 	bl	800357c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003004:	2307      	movs	r3, #7
 8003006:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003008:	2303      	movs	r3, #3
 800300a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800300c:	463b      	mov	r3, r7
 800300e:	4619      	mov	r1, r3
 8003010:	480c      	ldr	r0, [pc, #48]	; (8003044 <MX_ADC1_Init+0xec>)
 8003012:	f019 feb3 	bl	801cd7c <HAL_ADC_ConfigChannel>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800301c:	f000 faae 	bl	800357c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003020:	230c      	movs	r3, #12
 8003022:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003024:	2304      	movs	r3, #4
 8003026:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003028:	463b      	mov	r3, r7
 800302a:	4619      	mov	r1, r3
 800302c:	4805      	ldr	r0, [pc, #20]	; (8003044 <MX_ADC1_Init+0xec>)
 800302e:	f019 fea5 	bl	801cd7c <HAL_ADC_ConfigChannel>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8003038:	f000 faa0 	bl	800357c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800303c:	bf00      	nop
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	200004cc 	.word	0x200004cc
 8003048:	40012000 	.word	0x40012000
 800304c:	0f000001 	.word	0x0f000001

08003050 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003054:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <MX_I2C1_Init+0x50>)
 8003056:	4a13      	ldr	r2, [pc, #76]	; (80030a4 <MX_I2C1_Init+0x54>)
 8003058:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800305a:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <MX_I2C1_Init+0x50>)
 800305c:	4a12      	ldr	r2, [pc, #72]	; (80030a8 <MX_I2C1_Init+0x58>)
 800305e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003060:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <MX_I2C1_Init+0x50>)
 8003062:	2200      	movs	r2, #0
 8003064:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003066:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <MX_I2C1_Init+0x50>)
 8003068:	2200      	movs	r2, #0
 800306a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <MX_I2C1_Init+0x50>)
 800306e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003072:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003074:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <MX_I2C1_Init+0x50>)
 8003076:	2200      	movs	r2, #0
 8003078:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800307a:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <MX_I2C1_Init+0x50>)
 800307c:	2200      	movs	r2, #0
 800307e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003080:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <MX_I2C1_Init+0x50>)
 8003082:	2200      	movs	r2, #0
 8003084:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003086:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <MX_I2C1_Init+0x50>)
 8003088:	2200      	movs	r2, #0
 800308a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800308c:	4804      	ldr	r0, [pc, #16]	; (80030a0 <MX_I2C1_Init+0x50>)
 800308e:	f01b f91f 	bl	801e2d0 <HAL_I2C_Init>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003098:	f000 fa70 	bl	800357c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800309c:	bf00      	nop
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20000574 	.word	0x20000574
 80030a4:	40005400 	.word	0x40005400
 80030a8:	00061a80 	.word	0x00061a80

080030ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030b2:	f107 0308 	add.w	r3, r7, #8
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	605a      	str	r2, [r3, #4]
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030c0:	463b      	mov	r3, r7
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80030c8:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <MX_TIM2_Init+0x94>)
 80030ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80030d0:	4b1b      	ldr	r3, [pc, #108]	; (8003140 <MX_TIM2_Init+0x94>)
 80030d2:	2253      	movs	r2, #83	; 0x53
 80030d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030d6:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <MX_TIM2_Init+0x94>)
 80030d8:	2200      	movs	r2, #0
 80030da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80030dc:	4b18      	ldr	r3, [pc, #96]	; (8003140 <MX_TIM2_Init+0x94>)
 80030de:	f04f 32ff 	mov.w	r2, #4294967295
 80030e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030e4:	4b16      	ldr	r3, [pc, #88]	; (8003140 <MX_TIM2_Init+0x94>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ea:	4b15      	ldr	r3, [pc, #84]	; (8003140 <MX_TIM2_Init+0x94>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80030f0:	4813      	ldr	r0, [pc, #76]	; (8003140 <MX_TIM2_Init+0x94>)
 80030f2:	f01e fcab 	bl	8021a4c <HAL_TIM_Base_Init>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80030fc:	f000 fa3e 	bl	800357c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003104:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003106:	f107 0308 	add.w	r3, r7, #8
 800310a:	4619      	mov	r1, r3
 800310c:	480c      	ldr	r0, [pc, #48]	; (8003140 <MX_TIM2_Init+0x94>)
 800310e:	f01f f8d9 	bl	80222c4 <HAL_TIM_ConfigClockSource>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003118:	f000 fa30 	bl	800357c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800311c:	2300      	movs	r3, #0
 800311e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003120:	2300      	movs	r3, #0
 8003122:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003124:	463b      	mov	r3, r7
 8003126:	4619      	mov	r1, r3
 8003128:	4805      	ldr	r0, [pc, #20]	; (8003140 <MX_TIM2_Init+0x94>)
 800312a:	f01f fc91 	bl	8022a50 <HAL_TIMEx_MasterConfigSynchronization>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003134:	f000 fa22 	bl	800357c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003138:	bf00      	nop
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20000688 	.word	0x20000688

08003144 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b08e      	sub	sp, #56	; 0x38
 8003148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800314a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	605a      	str	r2, [r3, #4]
 8003154:	609a      	str	r2, [r3, #8]
 8003156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003158:	f107 0320 	add.w	r3, r7, #32
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003162:	1d3b      	adds	r3, r7, #4
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]
 8003170:	615a      	str	r2, [r3, #20]
 8003172:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003174:	4b40      	ldr	r3, [pc, #256]	; (8003278 <MX_TIM3_Init+0x134>)
 8003176:	4a41      	ldr	r2, [pc, #260]	; (800327c <MX_TIM3_Init+0x138>)
 8003178:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800317a:	4b3f      	ldr	r3, [pc, #252]	; (8003278 <MX_TIM3_Init+0x134>)
 800317c:	2253      	movs	r2, #83	; 0x53
 800317e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003180:	4b3d      	ldr	r3, [pc, #244]	; (8003278 <MX_TIM3_Init+0x134>)
 8003182:	2200      	movs	r2, #0
 8003184:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500;
 8003186:	4b3c      	ldr	r3, [pc, #240]	; (8003278 <MX_TIM3_Init+0x134>)
 8003188:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800318c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800318e:	4b3a      	ldr	r3, [pc, #232]	; (8003278 <MX_TIM3_Init+0x134>)
 8003190:	2200      	movs	r2, #0
 8003192:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003194:	4b38      	ldr	r3, [pc, #224]	; (8003278 <MX_TIM3_Init+0x134>)
 8003196:	2200      	movs	r2, #0
 8003198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800319a:	4837      	ldr	r0, [pc, #220]	; (8003278 <MX_TIM3_Init+0x134>)
 800319c:	f01e fc56 	bl	8021a4c <HAL_TIM_Base_Init>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80031a6:	f000 f9e9 	bl	800357c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80031b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031b4:	4619      	mov	r1, r3
 80031b6:	4830      	ldr	r0, [pc, #192]	; (8003278 <MX_TIM3_Init+0x134>)
 80031b8:	f01f f884 	bl	80222c4 <HAL_TIM_ConfigClockSource>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80031c2:	f000 f9db 	bl	800357c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80031c6:	482c      	ldr	r0, [pc, #176]	; (8003278 <MX_TIM3_Init+0x134>)
 80031c8:	f01e fc8f 	bl	8021aea <HAL_TIM_PWM_Init>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80031d2:	f000 f9d3 	bl	800357c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031d6:	2300      	movs	r3, #0
 80031d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031da:	2300      	movs	r3, #0
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031de:	f107 0320 	add.w	r3, r7, #32
 80031e2:	4619      	mov	r1, r3
 80031e4:	4824      	ldr	r0, [pc, #144]	; (8003278 <MX_TIM3_Init+0x134>)
 80031e6:	f01f fc33 	bl	8022a50 <HAL_TIMEx_MasterConfigSynchronization>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80031f0:	f000 f9c4 	bl	800357c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031f4:	2360      	movs	r3, #96	; 0x60
 80031f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80031f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003206:	1d3b      	adds	r3, r7, #4
 8003208:	2200      	movs	r2, #0
 800320a:	4619      	mov	r1, r3
 800320c:	481a      	ldr	r0, [pc, #104]	; (8003278 <MX_TIM3_Init+0x134>)
 800320e:	f01e ff97 	bl	8022140 <HAL_TIM_PWM_ConfigChannel>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003218:	f000 f9b0 	bl	800357c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800321c:	1d3b      	adds	r3, r7, #4
 800321e:	2204      	movs	r2, #4
 8003220:	4619      	mov	r1, r3
 8003222:	4815      	ldr	r0, [pc, #84]	; (8003278 <MX_TIM3_Init+0x134>)
 8003224:	f01e ff8c 	bl	8022140 <HAL_TIM_PWM_ConfigChannel>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800322e:	f000 f9a5 	bl	800357c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003236:	1d3b      	adds	r3, r7, #4
 8003238:	2208      	movs	r2, #8
 800323a:	4619      	mov	r1, r3
 800323c:	480e      	ldr	r0, [pc, #56]	; (8003278 <MX_TIM3_Init+0x134>)
 800323e:	f01e ff7f 	bl	8022140 <HAL_TIM_PWM_ConfigChannel>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8003248:	f000 f998 	bl	800357c <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 800324c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003250:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003252:	1d3b      	adds	r3, r7, #4
 8003254:	220c      	movs	r2, #12
 8003256:	4619      	mov	r1, r3
 8003258:	4807      	ldr	r0, [pc, #28]	; (8003278 <MX_TIM3_Init+0x134>)
 800325a:	f01e ff71 	bl	8022140 <HAL_TIM_PWM_ConfigChannel>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <MX_TIM3_Init+0x124>
  {
    Error_Handler();
 8003264:	f000 f98a 	bl	800357c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003268:	4803      	ldr	r0, [pc, #12]	; (8003278 <MX_TIM3_Init+0x134>)
 800326a:	f000 fb5d 	bl	8003928 <HAL_TIM_MspPostInit>

}
 800326e:	bf00      	nop
 8003270:	3738      	adds	r7, #56	; 0x38
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	200006d0 	.word	0x200006d0
 800327c:	40000400 	.word	0x40000400

08003280 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003284:	4b11      	ldr	r3, [pc, #68]	; (80032cc <MX_USART1_UART_Init+0x4c>)
 8003286:	4a12      	ldr	r2, [pc, #72]	; (80032d0 <MX_USART1_UART_Init+0x50>)
 8003288:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800328a:	4b10      	ldr	r3, [pc, #64]	; (80032cc <MX_USART1_UART_Init+0x4c>)
 800328c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003290:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003292:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <MX_USART1_UART_Init+0x4c>)
 8003294:	2200      	movs	r2, #0
 8003296:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003298:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <MX_USART1_UART_Init+0x4c>)
 800329a:	2200      	movs	r2, #0
 800329c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <MX_USART1_UART_Init+0x4c>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032a4:	4b09      	ldr	r3, [pc, #36]	; (80032cc <MX_USART1_UART_Init+0x4c>)
 80032a6:	220c      	movs	r2, #12
 80032a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032aa:	4b08      	ldr	r3, [pc, #32]	; (80032cc <MX_USART1_UART_Init+0x4c>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80032b0:	4b06      	ldr	r3, [pc, #24]	; (80032cc <MX_USART1_UART_Init+0x4c>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032b6:	4805      	ldr	r0, [pc, #20]	; (80032cc <MX_USART1_UART_Init+0x4c>)
 80032b8:	f01f fc4c 	bl	8022b54 <HAL_UART_Init>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80032c2:	f000 f95b 	bl	800357c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20000718 	.word	0x20000718
 80032d0:	40011000 	.word	0x40011000

080032d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032d8:	4b11      	ldr	r3, [pc, #68]	; (8003320 <MX_USART2_UART_Init+0x4c>)
 80032da:	4a12      	ldr	r2, [pc, #72]	; (8003324 <MX_USART2_UART_Init+0x50>)
 80032dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80032de:	4b10      	ldr	r3, [pc, #64]	; (8003320 <MX_USART2_UART_Init+0x4c>)
 80032e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032e6:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <MX_USART2_UART_Init+0x4c>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032ec:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <MX_USART2_UART_Init+0x4c>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032f2:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <MX_USART2_UART_Init+0x4c>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032f8:	4b09      	ldr	r3, [pc, #36]	; (8003320 <MX_USART2_UART_Init+0x4c>)
 80032fa:	220c      	movs	r2, #12
 80032fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <MX_USART2_UART_Init+0x4c>)
 8003300:	2200      	movs	r2, #0
 8003302:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <MX_USART2_UART_Init+0x4c>)
 8003306:	2200      	movs	r2, #0
 8003308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800330a:	4805      	ldr	r0, [pc, #20]	; (8003320 <MX_USART2_UART_Init+0x4c>)
 800330c:	f01f fc22 	bl	8022b54 <HAL_UART_Init>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003316:	f000 f931 	bl	800357c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	2000075c 	.word	0x2000075c
 8003324:	40004400 	.word	0x40004400

08003328 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800332c:	4b11      	ldr	r3, [pc, #68]	; (8003374 <MX_USART6_UART_Init+0x4c>)
 800332e:	4a12      	ldr	r2, [pc, #72]	; (8003378 <MX_USART6_UART_Init+0x50>)
 8003330:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003332:	4b10      	ldr	r3, [pc, #64]	; (8003374 <MX_USART6_UART_Init+0x4c>)
 8003334:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003338:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800333a:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <MX_USART6_UART_Init+0x4c>)
 800333c:	2200      	movs	r2, #0
 800333e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003340:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <MX_USART6_UART_Init+0x4c>)
 8003342:	2200      	movs	r2, #0
 8003344:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003346:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <MX_USART6_UART_Init+0x4c>)
 8003348:	2200      	movs	r2, #0
 800334a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800334c:	4b09      	ldr	r3, [pc, #36]	; (8003374 <MX_USART6_UART_Init+0x4c>)
 800334e:	220c      	movs	r2, #12
 8003350:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003352:	4b08      	ldr	r3, [pc, #32]	; (8003374 <MX_USART6_UART_Init+0x4c>)
 8003354:	2200      	movs	r2, #0
 8003356:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003358:	4b06      	ldr	r3, [pc, #24]	; (8003374 <MX_USART6_UART_Init+0x4c>)
 800335a:	2200      	movs	r2, #0
 800335c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800335e:	4805      	ldr	r0, [pc, #20]	; (8003374 <MX_USART6_UART_Init+0x4c>)
 8003360:	f01f fbf8 	bl	8022b54 <HAL_UART_Init>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800336a:	f000 f907 	bl	800357c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	200007a0 	.word	0x200007a0
 8003378:	40011400 	.word	0x40011400

0800337c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	607b      	str	r3, [r7, #4]
 8003386:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <MX_DMA_Init+0x78>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	4a1a      	ldr	r2, [pc, #104]	; (80033f4 <MX_DMA_Init+0x78>)
 800338c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003390:	6313      	str	r3, [r2, #48]	; 0x30
 8003392:	4b18      	ldr	r3, [pc, #96]	; (80033f4 <MX_DMA_Init+0x78>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800339a:	607b      	str	r3, [r7, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <MX_DMA_Init+0x78>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <MX_DMA_Init+0x78>)
 80033a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033ac:	6313      	str	r3, [r2, #48]	; 0x30
 80033ae:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <MX_DMA_Init+0x78>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033b6:	603b      	str	r3, [r7, #0]
 80033b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80033ba:	2200      	movs	r2, #0
 80033bc:	2100      	movs	r1, #0
 80033be:	200b      	movs	r0, #11
 80033c0:	f01a f88b 	bl	801d4da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80033c4:	200b      	movs	r0, #11
 80033c6:	f01a f8a4 	bl	801d512 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80033ca:	2200      	movs	r2, #0
 80033cc:	2100      	movs	r1, #0
 80033ce:	200c      	movs	r0, #12
 80033d0:	f01a f883 	bl	801d4da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80033d4:	200c      	movs	r0, #12
 80033d6:	f01a f89c 	bl	801d512 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80033da:	2200      	movs	r2, #0
 80033dc:	2100      	movs	r1, #0
 80033de:	2038      	movs	r0, #56	; 0x38
 80033e0:	f01a f87b 	bl	801d4da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80033e4:	2038      	movs	r0, #56	; 0x38
 80033e6:	f01a f894 	bl	801d512 <HAL_NVIC_EnableIRQ>

}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800

080033f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	; 0x28
 80033fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fe:	f107 0314 	add.w	r3, r7, #20
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	605a      	str	r2, [r3, #4]
 8003408:	609a      	str	r2, [r3, #8]
 800340a:	60da      	str	r2, [r3, #12]
 800340c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	4b56      	ldr	r3, [pc, #344]	; (800356c <MX_GPIO_Init+0x174>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	4a55      	ldr	r2, [pc, #340]	; (800356c <MX_GPIO_Init+0x174>)
 8003418:	f043 0304 	orr.w	r3, r3, #4
 800341c:	6313      	str	r3, [r2, #48]	; 0x30
 800341e:	4b53      	ldr	r3, [pc, #332]	; (800356c <MX_GPIO_Init+0x174>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	4b4f      	ldr	r3, [pc, #316]	; (800356c <MX_GPIO_Init+0x174>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	4a4e      	ldr	r2, [pc, #312]	; (800356c <MX_GPIO_Init+0x174>)
 8003434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003438:	6313      	str	r3, [r2, #48]	; 0x30
 800343a:	4b4c      	ldr	r3, [pc, #304]	; (800356c <MX_GPIO_Init+0x174>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	4b48      	ldr	r3, [pc, #288]	; (800356c <MX_GPIO_Init+0x174>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	4a47      	ldr	r2, [pc, #284]	; (800356c <MX_GPIO_Init+0x174>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	6313      	str	r3, [r2, #48]	; 0x30
 8003456:	4b45      	ldr	r3, [pc, #276]	; (800356c <MX_GPIO_Init+0x174>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	60bb      	str	r3, [r7, #8]
 8003460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	607b      	str	r3, [r7, #4]
 8003466:	4b41      	ldr	r3, [pc, #260]	; (800356c <MX_GPIO_Init+0x174>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	4a40      	ldr	r2, [pc, #256]	; (800356c <MX_GPIO_Init+0x174>)
 800346c:	f043 0302 	orr.w	r3, r3, #2
 8003470:	6313      	str	r3, [r2, #48]	; 0x30
 8003472:	4b3e      	ldr	r3, [pc, #248]	; (800356c <MX_GPIO_Init+0x174>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	607b      	str	r3, [r7, #4]
 800347c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SONAR_TRIGGER_Pin|LD1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 800347e:	2200      	movs	r2, #0
 8003480:	2131      	movs	r1, #49	; 0x31
 8003482:	483b      	ldr	r0, [pc, #236]	; (8003570 <MX_GPIO_Init+0x178>)
 8003484:	f01a fef2 	bl	801e26c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003488:	2200      	movs	r2, #0
 800348a:	2120      	movs	r1, #32
 800348c:	4839      	ldr	r0, [pc, #228]	; (8003574 <MX_GPIO_Init+0x17c>)
 800348e:	f01a feed 	bl	801e26c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003492:	2200      	movs	r2, #0
 8003494:	2104      	movs	r1, #4
 8003496:	4838      	ldr	r0, [pc, #224]	; (8003578 <MX_GPIO_Init+0x180>)
 8003498:	f01a fee8 	bl	801e26c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800349c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80034a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80034a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80034ac:	f107 0314 	add.w	r3, r7, #20
 80034b0:	4619      	mov	r1, r3
 80034b2:	482f      	ldr	r0, [pc, #188]	; (8003570 <MX_GPIO_Init+0x178>)
 80034b4:	f01a fc72 	bl	801dd9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SONAR_TRIGGER_Pin LD1_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = SONAR_TRIGGER_Pin|LD1_Pin|BUZZER_Pin;
 80034b8:	2331      	movs	r3, #49	; 0x31
 80034ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034bc:	2301      	movs	r3, #1
 80034be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c4:	2300      	movs	r3, #0
 80034c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034c8:	f107 0314 	add.w	r3, r7, #20
 80034cc:	4619      	mov	r1, r3
 80034ce:	4828      	ldr	r0, [pc, #160]	; (8003570 <MX_GPIO_Init+0x178>)
 80034d0:	f01a fc64 	bl	801dd9c <HAL_GPIO_Init>

  /*Configure GPIO pin : SONAR_ECHO_Pin */
  GPIO_InitStruct.Pin = SONAR_ECHO_Pin;
 80034d4:	2302      	movs	r3, #2
 80034d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80034d8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80034dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SONAR_ECHO_GPIO_Port, &GPIO_InitStruct);
 80034e2:	f107 0314 	add.w	r3, r7, #20
 80034e6:	4619      	mov	r1, r3
 80034e8:	4821      	ldr	r0, [pc, #132]	; (8003570 <MX_GPIO_Init+0x178>)
 80034ea:	f01a fc57 	bl	801dd9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80034ee:	2320      	movs	r3, #32
 80034f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034f2:	2301      	movs	r3, #1
 80034f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fa:	2300      	movs	r3, #0
 80034fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80034fe:	f107 0314 	add.w	r3, r7, #20
 8003502:	4619      	mov	r1, r3
 8003504:	481b      	ldr	r0, [pc, #108]	; (8003574 <MX_GPIO_Init+0x17c>)
 8003506:	f01a fc49 	bl	801dd9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800350a:	2304      	movs	r3, #4
 800350c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800350e:	2301      	movs	r3, #1
 8003510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003516:	2300      	movs	r3, #0
 8003518:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800351a:	f107 0314 	add.w	r3, r7, #20
 800351e:	4619      	mov	r1, r3
 8003520:	4815      	ldr	r0, [pc, #84]	; (8003578 <MX_GPIO_Init+0x180>)
 8003522:	f01a fc3b 	bl	801dd9c <HAL_GPIO_Init>

  /*Configure GPIO pin : RC_PPM_Pin */
  GPIO_InitStruct.Pin = RC_PPM_Pin;
 8003526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800352a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800352c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RC_PPM_GPIO_Port, &GPIO_InitStruct);
 8003536:	f107 0314 	add.w	r3, r7, #20
 800353a:	4619      	mov	r1, r3
 800353c:	480c      	ldr	r0, [pc, #48]	; (8003570 <MX_GPIO_Init+0x178>)
 800353e:	f01a fc2d 	bl	801dd9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003542:	2200      	movs	r2, #0
 8003544:	2100      	movs	r1, #0
 8003546:	2007      	movs	r0, #7
 8003548:	f019 ffc7 	bl	801d4da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800354c:	2007      	movs	r0, #7
 800354e:	f019 ffe0 	bl	801d512 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003552:	2200      	movs	r2, #0
 8003554:	2100      	movs	r1, #0
 8003556:	2028      	movs	r0, #40	; 0x28
 8003558:	f019 ffbf 	bl	801d4da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800355c:	2028      	movs	r0, #40	; 0x28
 800355e:	f019 ffd8 	bl	801d512 <HAL_NVIC_EnableIRQ>

}
 8003562:	bf00      	nop
 8003564:	3728      	adds	r7, #40	; 0x28
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40023800 	.word	0x40023800
 8003570:	40020800 	.word	0x40020800
 8003574:	40020000 	.word	0x40020000
 8003578:	40020400 	.word	0x40020400

0800357c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003580:	b672      	cpsid	i
}
 8003582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003584:	e7fe      	b.n	8003584 <Error_Handler+0x8>
	...

08003588 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	607b      	str	r3, [r7, #4]
 8003592:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <HAL_MspInit+0x4c>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	4a0f      	ldr	r2, [pc, #60]	; (80035d4 <HAL_MspInit+0x4c>)
 8003598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800359c:	6453      	str	r3, [r2, #68]	; 0x44
 800359e:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <HAL_MspInit+0x4c>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a6:	607b      	str	r3, [r7, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	603b      	str	r3, [r7, #0]
 80035ae:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <HAL_MspInit+0x4c>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	4a08      	ldr	r2, [pc, #32]	; (80035d4 <HAL_MspInit+0x4c>)
 80035b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ba:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <HAL_MspInit+0x4c>)
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80035c6:	2007      	movs	r0, #7
 80035c8:	f019 ff7c 	bl	801d4c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40023800 	.word	0x40023800

080035d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08c      	sub	sp, #48	; 0x30
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e0:	f107 031c 	add.w	r3, r7, #28
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	605a      	str	r2, [r3, #4]
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	60da      	str	r2, [r3, #12]
 80035ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a49      	ldr	r2, [pc, #292]	; (800371c <HAL_ADC_MspInit+0x144>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	f040 808c 	bne.w	8003714 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80035fc:	2300      	movs	r3, #0
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	4b47      	ldr	r3, [pc, #284]	; (8003720 <HAL_ADC_MspInit+0x148>)
 8003602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003604:	4a46      	ldr	r2, [pc, #280]	; (8003720 <HAL_ADC_MspInit+0x148>)
 8003606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360a:	6453      	str	r3, [r2, #68]	; 0x44
 800360c:	4b44      	ldr	r3, [pc, #272]	; (8003720 <HAL_ADC_MspInit+0x148>)
 800360e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	4b40      	ldr	r3, [pc, #256]	; (8003720 <HAL_ADC_MspInit+0x148>)
 800361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003620:	4a3f      	ldr	r2, [pc, #252]	; (8003720 <HAL_ADC_MspInit+0x148>)
 8003622:	f043 0304 	orr.w	r3, r3, #4
 8003626:	6313      	str	r3, [r2, #48]	; 0x30
 8003628:	4b3d      	ldr	r3, [pc, #244]	; (8003720 <HAL_ADC_MspInit+0x148>)
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003634:	2300      	movs	r3, #0
 8003636:	613b      	str	r3, [r7, #16]
 8003638:	4b39      	ldr	r3, [pc, #228]	; (8003720 <HAL_ADC_MspInit+0x148>)
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	4a38      	ldr	r2, [pc, #224]	; (8003720 <HAL_ADC_MspInit+0x148>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6313      	str	r3, [r2, #48]	; 0x30
 8003644:	4b36      	ldr	r3, [pc, #216]	; (8003720 <HAL_ADC_MspInit+0x148>)
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	4b32      	ldr	r3, [pc, #200]	; (8003720 <HAL_ADC_MspInit+0x148>)
 8003656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003658:	4a31      	ldr	r2, [pc, #196]	; (8003720 <HAL_ADC_MspInit+0x148>)
 800365a:	f043 0302 	orr.w	r3, r3, #2
 800365e:	6313      	str	r3, [r2, #48]	; 0x30
 8003660:	4b2f      	ldr	r3, [pc, #188]	; (8003720 <HAL_ADC_MspInit+0x148>)
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN12
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RSSI_Pin;
 800366c:	2304      	movs	r3, #4
 800366e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003670:	2303      	movs	r3, #3
 8003672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RSSI_GPIO_Port, &GPIO_InitStruct);
 8003678:	f107 031c 	add.w	r3, r7, #28
 800367c:	4619      	mov	r1, r3
 800367e:	4829      	ldr	r0, [pc, #164]	; (8003724 <HAL_ADC_MspInit+0x14c>)
 8003680:	f01a fb8c 	bl	801dd9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VOLTAGE_IN_Pin|CURRENT_IN_Pin;
 8003684:	23c0      	movs	r3, #192	; 0xc0
 8003686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003688:	2303      	movs	r3, #3
 800368a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368c:	2300      	movs	r3, #0
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003690:	f107 031c 	add.w	r3, r7, #28
 8003694:	4619      	mov	r1, r3
 8003696:	4824      	ldr	r0, [pc, #144]	; (8003728 <HAL_ADC_MspInit+0x150>)
 8003698:	f01a fb80 	bl	801dd9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EXTERNAL_PAD_Pin;
 800369c:	2302      	movs	r3, #2
 800369e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036a0:	2303      	movs	r3, #3
 80036a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a4:	2300      	movs	r3, #0
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EXTERNAL_PAD_GPIO_Port, &GPIO_InitStruct);
 80036a8:	f107 031c 	add.w	r3, r7, #28
 80036ac:	4619      	mov	r1, r3
 80036ae:	481f      	ldr	r0, [pc, #124]	; (800372c <HAL_ADC_MspInit+0x154>)
 80036b0:	f01a fb74 	bl	801dd9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80036b4:	4b1e      	ldr	r3, [pc, #120]	; (8003730 <HAL_ADC_MspInit+0x158>)
 80036b6:	4a1f      	ldr	r2, [pc, #124]	; (8003734 <HAL_ADC_MspInit+0x15c>)
 80036b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80036ba:	4b1d      	ldr	r3, [pc, #116]	; (8003730 <HAL_ADC_MspInit+0x158>)
 80036bc:	2200      	movs	r2, #0
 80036be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036c0:	4b1b      	ldr	r3, [pc, #108]	; (8003730 <HAL_ADC_MspInit+0x158>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80036c6:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <HAL_ADC_MspInit+0x158>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80036cc:	4b18      	ldr	r3, [pc, #96]	; (8003730 <HAL_ADC_MspInit+0x158>)
 80036ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036d4:	4b16      	ldr	r3, [pc, #88]	; (8003730 <HAL_ADC_MspInit+0x158>)
 80036d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036dc:	4b14      	ldr	r3, [pc, #80]	; (8003730 <HAL_ADC_MspInit+0x158>)
 80036de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036e2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <HAL_ADC_MspInit+0x158>)
 80036e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80036ec:	4b10      	ldr	r3, [pc, #64]	; (8003730 <HAL_ADC_MspInit+0x158>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036f2:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <HAL_ADC_MspInit+0x158>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80036f8:	480d      	ldr	r0, [pc, #52]	; (8003730 <HAL_ADC_MspInit+0x158>)
 80036fa:	f019 ff33 	bl	801d564 <HAL_DMA_Init>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8003704:	f7ff ff3a 	bl	800357c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a09      	ldr	r2, [pc, #36]	; (8003730 <HAL_ADC_MspInit+0x158>)
 800370c:	639a      	str	r2, [r3, #56]	; 0x38
 800370e:	4a08      	ldr	r2, [pc, #32]	; (8003730 <HAL_ADC_MspInit+0x158>)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003714:	bf00      	nop
 8003716:	3730      	adds	r7, #48	; 0x30
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40012000 	.word	0x40012000
 8003720:	40023800 	.word	0x40023800
 8003724:	40020800 	.word	0x40020800
 8003728:	40020000 	.word	0x40020000
 800372c:	40020400 	.word	0x40020400
 8003730:	20000514 	.word	0x20000514
 8003734:	40026410 	.word	0x40026410

08003738 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	; 0x28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003740:	f107 0314 	add.w	r3, r7, #20
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	609a      	str	r2, [r3, #8]
 800374c:	60da      	str	r2, [r3, #12]
 800374e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a4f      	ldr	r2, [pc, #316]	; (8003894 <HAL_I2C_MspInit+0x15c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	f040 8097 	bne.w	800388a <HAL_I2C_MspInit+0x152>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	4b4d      	ldr	r3, [pc, #308]	; (8003898 <HAL_I2C_MspInit+0x160>)
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	4a4c      	ldr	r2, [pc, #304]	; (8003898 <HAL_I2C_MspInit+0x160>)
 8003766:	f043 0302 	orr.w	r3, r3, #2
 800376a:	6313      	str	r3, [r2, #48]	; 0x30
 800376c:	4b4a      	ldr	r3, [pc, #296]	; (8003898 <HAL_I2C_MspInit+0x160>)
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003778:	23c0      	movs	r3, #192	; 0xc0
 800377a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800377c:	2312      	movs	r3, #18
 800377e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003780:	2300      	movs	r3, #0
 8003782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003784:	2303      	movs	r3, #3
 8003786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003788:	2304      	movs	r3, #4
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800378c:	f107 0314 	add.w	r3, r7, #20
 8003790:	4619      	mov	r1, r3
 8003792:	4842      	ldr	r0, [pc, #264]	; (800389c <HAL_I2C_MspInit+0x164>)
 8003794:	f01a fb02 	bl	801dd9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	4b3e      	ldr	r3, [pc, #248]	; (8003898 <HAL_I2C_MspInit+0x160>)
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	4a3d      	ldr	r2, [pc, #244]	; (8003898 <HAL_I2C_MspInit+0x160>)
 80037a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037a6:	6413      	str	r3, [r2, #64]	; 0x40
 80037a8:	4b3b      	ldr	r3, [pc, #236]	; (8003898 <HAL_I2C_MspInit+0x160>)
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80037b4:	4b3a      	ldr	r3, [pc, #232]	; (80038a0 <HAL_I2C_MspInit+0x168>)
 80037b6:	4a3b      	ldr	r2, [pc, #236]	; (80038a4 <HAL_I2C_MspInit+0x16c>)
 80037b8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80037ba:	4b39      	ldr	r3, [pc, #228]	; (80038a0 <HAL_I2C_MspInit+0x168>)
 80037bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037c0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037c2:	4b37      	ldr	r3, [pc, #220]	; (80038a0 <HAL_I2C_MspInit+0x168>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037c8:	4b35      	ldr	r3, [pc, #212]	; (80038a0 <HAL_I2C_MspInit+0x168>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037ce:	4b34      	ldr	r3, [pc, #208]	; (80038a0 <HAL_I2C_MspInit+0x168>)
 80037d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037d4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037d6:	4b32      	ldr	r3, [pc, #200]	; (80038a0 <HAL_I2C_MspInit+0x168>)
 80037d8:	2200      	movs	r2, #0
 80037da:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037dc:	4b30      	ldr	r3, [pc, #192]	; (80038a0 <HAL_I2C_MspInit+0x168>)
 80037de:	2200      	movs	r2, #0
 80037e0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80037e2:	4b2f      	ldr	r3, [pc, #188]	; (80038a0 <HAL_I2C_MspInit+0x168>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037e8:	4b2d      	ldr	r3, [pc, #180]	; (80038a0 <HAL_I2C_MspInit+0x168>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037ee:	4b2c      	ldr	r3, [pc, #176]	; (80038a0 <HAL_I2C_MspInit+0x168>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80037f4:	482a      	ldr	r0, [pc, #168]	; (80038a0 <HAL_I2C_MspInit+0x168>)
 80037f6:	f019 feb5 	bl	801d564 <HAL_DMA_Init>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8003800:	f7ff febc 	bl	800357c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a26      	ldr	r2, [pc, #152]	; (80038a0 <HAL_I2C_MspInit+0x168>)
 8003808:	639a      	str	r2, [r3, #56]	; 0x38
 800380a:	4a25      	ldr	r2, [pc, #148]	; (80038a0 <HAL_I2C_MspInit+0x168>)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8003810:	4b25      	ldr	r3, [pc, #148]	; (80038a8 <HAL_I2C_MspInit+0x170>)
 8003812:	4a26      	ldr	r2, [pc, #152]	; (80038ac <HAL_I2C_MspInit+0x174>)
 8003814:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8003816:	4b24      	ldr	r3, [pc, #144]	; (80038a8 <HAL_I2C_MspInit+0x170>)
 8003818:	2200      	movs	r2, #0
 800381a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800381c:	4b22      	ldr	r3, [pc, #136]	; (80038a8 <HAL_I2C_MspInit+0x170>)
 800381e:	2240      	movs	r2, #64	; 0x40
 8003820:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003822:	4b21      	ldr	r3, [pc, #132]	; (80038a8 <HAL_I2C_MspInit+0x170>)
 8003824:	2200      	movs	r2, #0
 8003826:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003828:	4b1f      	ldr	r3, [pc, #124]	; (80038a8 <HAL_I2C_MspInit+0x170>)
 800382a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800382e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003830:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <HAL_I2C_MspInit+0x170>)
 8003832:	2200      	movs	r2, #0
 8003834:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003836:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <HAL_I2C_MspInit+0x170>)
 8003838:	2200      	movs	r2, #0
 800383a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800383c:	4b1a      	ldr	r3, [pc, #104]	; (80038a8 <HAL_I2C_MspInit+0x170>)
 800383e:	2200      	movs	r2, #0
 8003840:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003842:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <HAL_I2C_MspInit+0x170>)
 8003844:	2200      	movs	r2, #0
 8003846:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003848:	4b17      	ldr	r3, [pc, #92]	; (80038a8 <HAL_I2C_MspInit+0x170>)
 800384a:	2200      	movs	r2, #0
 800384c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800384e:	4816      	ldr	r0, [pc, #88]	; (80038a8 <HAL_I2C_MspInit+0x170>)
 8003850:	f019 fe88 	bl	801d564 <HAL_DMA_Init>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 800385a:	f7ff fe8f 	bl	800357c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a11      	ldr	r2, [pc, #68]	; (80038a8 <HAL_I2C_MspInit+0x170>)
 8003862:	635a      	str	r2, [r3, #52]	; 0x34
 8003864:	4a10      	ldr	r2, [pc, #64]	; (80038a8 <HAL_I2C_MspInit+0x170>)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800386a:	2200      	movs	r2, #0
 800386c:	2100      	movs	r1, #0
 800386e:	201f      	movs	r0, #31
 8003870:	f019 fe33 	bl	801d4da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003874:	201f      	movs	r0, #31
 8003876:	f019 fe4c 	bl	801d512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800387a:	2200      	movs	r2, #0
 800387c:	2100      	movs	r1, #0
 800387e:	2020      	movs	r0, #32
 8003880:	f019 fe2b 	bl	801d4da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003884:	2020      	movs	r0, #32
 8003886:	f019 fe44 	bl	801d512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800388a:	bf00      	nop
 800388c:	3728      	adds	r7, #40	; 0x28
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40005400 	.word	0x40005400
 8003898:	40023800 	.word	0x40023800
 800389c:	40020400 	.word	0x40020400
 80038a0:	200005c8 	.word	0x200005c8
 80038a4:	40026010 	.word	0x40026010
 80038a8:	20000628 	.word	0x20000628
 80038ac:	40026028 	.word	0x40026028

080038b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c0:	d10e      	bne.n	80038e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	4b16      	ldr	r3, [pc, #88]	; (8003920 <HAL_TIM_Base_MspInit+0x70>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	4a15      	ldr	r2, [pc, #84]	; (8003920 <HAL_TIM_Base_MspInit+0x70>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	6413      	str	r3, [r2, #64]	; 0x40
 80038d2:	4b13      	ldr	r3, [pc, #76]	; (8003920 <HAL_TIM_Base_MspInit+0x70>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80038de:	e01a      	b.n	8003916 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a0f      	ldr	r2, [pc, #60]	; (8003924 <HAL_TIM_Base_MspInit+0x74>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d115      	bne.n	8003916 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <HAL_TIM_Base_MspInit+0x70>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	4a0b      	ldr	r2, [pc, #44]	; (8003920 <HAL_TIM_Base_MspInit+0x70>)
 80038f4:	f043 0302 	orr.w	r3, r3, #2
 80038f8:	6413      	str	r3, [r2, #64]	; 0x40
 80038fa:	4b09      	ldr	r3, [pc, #36]	; (8003920 <HAL_TIM_Base_MspInit+0x70>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	60bb      	str	r3, [r7, #8]
 8003904:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003906:	2200      	movs	r2, #0
 8003908:	2100      	movs	r1, #0
 800390a:	201d      	movs	r0, #29
 800390c:	f019 fde5 	bl	801d4da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003910:	201d      	movs	r0, #29
 8003912:	f019 fdfe 	bl	801d512 <HAL_NVIC_EnableIRQ>
}
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40023800 	.word	0x40023800
 8003924:	40000400 	.word	0x40000400

08003928 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08a      	sub	sp, #40	; 0x28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003930:	f107 0314 	add.w	r3, r7, #20
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a21      	ldr	r2, [pc, #132]	; (80039cc <HAL_TIM_MspPostInit+0xa4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d13c      	bne.n	80039c4 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	613b      	str	r3, [r7, #16]
 800394e:	4b20      	ldr	r3, [pc, #128]	; (80039d0 <HAL_TIM_MspPostInit+0xa8>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	4a1f      	ldr	r2, [pc, #124]	; (80039d0 <HAL_TIM_MspPostInit+0xa8>)
 8003954:	f043 0302 	orr.w	r3, r3, #2
 8003958:	6313      	str	r3, [r2, #48]	; 0x30
 800395a:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <HAL_TIM_MspPostInit+0xa8>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <HAL_TIM_MspPostInit+0xa8>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	4a18      	ldr	r2, [pc, #96]	; (80039d0 <HAL_TIM_MspPostInit+0xa8>)
 8003970:	f043 0304 	orr.w	r3, r3, #4
 8003974:	6313      	str	r3, [r2, #48]	; 0x30
 8003976:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <HAL_TIM_MspPostInit+0xa8>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003982:	2301      	movs	r3, #1
 8003984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003986:	2302      	movs	r3, #2
 8003988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800398e:	2300      	movs	r3, #0
 8003990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003992:	2302      	movs	r3, #2
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003996:	f107 0314 	add.w	r3, r7, #20
 800399a:	4619      	mov	r1, r3
 800399c:	480d      	ldr	r0, [pc, #52]	; (80039d4 <HAL_TIM_MspPostInit+0xac>)
 800399e:	f01a f9fd 	bl	801dd9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 80039a2:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80039a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a8:	2302      	movs	r3, #2
 80039aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b0:	2300      	movs	r3, #0
 80039b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80039b4:	2302      	movs	r3, #2
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039b8:	f107 0314 	add.w	r3, r7, #20
 80039bc:	4619      	mov	r1, r3
 80039be:	4806      	ldr	r0, [pc, #24]	; (80039d8 <HAL_TIM_MspPostInit+0xb0>)
 80039c0:	f01a f9ec 	bl	801dd9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80039c4:	bf00      	nop
 80039c6:	3728      	adds	r7, #40	; 0x28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40000400 	.word	0x40000400
 80039d0:	40023800 	.word	0x40023800
 80039d4:	40020400 	.word	0x40020400
 80039d8:	40020800 	.word	0x40020800

080039dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08e      	sub	sp, #56	; 0x38
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	60da      	str	r2, [r3, #12]
 80039f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a58      	ldr	r2, [pc, #352]	; (8003b5c <HAL_UART_MspInit+0x180>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d135      	bne.n	8003a6a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	623b      	str	r3, [r7, #32]
 8003a02:	4b57      	ldr	r3, [pc, #348]	; (8003b60 <HAL_UART_MspInit+0x184>)
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	4a56      	ldr	r2, [pc, #344]	; (8003b60 <HAL_UART_MspInit+0x184>)
 8003a08:	f043 0310 	orr.w	r3, r3, #16
 8003a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a0e:	4b54      	ldr	r3, [pc, #336]	; (8003b60 <HAL_UART_MspInit+0x184>)
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	f003 0310 	and.w	r3, r3, #16
 8003a16:	623b      	str	r3, [r7, #32]
 8003a18:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	4b50      	ldr	r3, [pc, #320]	; (8003b60 <HAL_UART_MspInit+0x184>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	4a4f      	ldr	r2, [pc, #316]	; (8003b60 <HAL_UART_MspInit+0x184>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2a:	4b4d      	ldr	r3, [pc, #308]	; (8003b60 <HAL_UART_MspInit+0x184>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a44:	2303      	movs	r3, #3
 8003a46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a48:	2307      	movs	r3, #7
 8003a4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a50:	4619      	mov	r1, r3
 8003a52:	4844      	ldr	r0, [pc, #272]	; (8003b64 <HAL_UART_MspInit+0x188>)
 8003a54:	f01a f9a2 	bl	801dd9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	2025      	movs	r0, #37	; 0x25
 8003a5e:	f019 fd3c 	bl	801d4da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a62:	2025      	movs	r0, #37	; 0x25
 8003a64:	f019 fd55 	bl	801d512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003a68:	e073      	b.n	8003b52 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a3e      	ldr	r2, [pc, #248]	; (8003b68 <HAL_UART_MspInit+0x18c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d134      	bne.n	8003ade <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a74:	2300      	movs	r3, #0
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	4b39      	ldr	r3, [pc, #228]	; (8003b60 <HAL_UART_MspInit+0x184>)
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	4a38      	ldr	r2, [pc, #224]	; (8003b60 <HAL_UART_MspInit+0x184>)
 8003a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a82:	6413      	str	r3, [r2, #64]	; 0x40
 8003a84:	4b36      	ldr	r3, [pc, #216]	; (8003b60 <HAL_UART_MspInit+0x184>)
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	4b32      	ldr	r3, [pc, #200]	; (8003b60 <HAL_UART_MspInit+0x184>)
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	4a31      	ldr	r2, [pc, #196]	; (8003b60 <HAL_UART_MspInit+0x184>)
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa0:	4b2f      	ldr	r3, [pc, #188]	; (8003b60 <HAL_UART_MspInit+0x184>)
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003aac:	230c      	movs	r3, #12
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003abc:	2307      	movs	r3, #7
 8003abe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4827      	ldr	r0, [pc, #156]	; (8003b64 <HAL_UART_MspInit+0x188>)
 8003ac8:	f01a f968 	bl	801dd9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003acc:	2200      	movs	r2, #0
 8003ace:	2100      	movs	r1, #0
 8003ad0:	2026      	movs	r0, #38	; 0x26
 8003ad2:	f019 fd02 	bl	801d4da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ad6:	2026      	movs	r0, #38	; 0x26
 8003ad8:	f019 fd1b 	bl	801d512 <HAL_NVIC_EnableIRQ>
}
 8003adc:	e039      	b.n	8003b52 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART6)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a22      	ldr	r2, [pc, #136]	; (8003b6c <HAL_UART_MspInit+0x190>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d134      	bne.n	8003b52 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003ae8:	2300      	movs	r3, #0
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	4b1c      	ldr	r3, [pc, #112]	; (8003b60 <HAL_UART_MspInit+0x184>)
 8003aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af0:	4a1b      	ldr	r2, [pc, #108]	; (8003b60 <HAL_UART_MspInit+0x184>)
 8003af2:	f043 0320 	orr.w	r3, r3, #32
 8003af6:	6453      	str	r3, [r2, #68]	; 0x44
 8003af8:	4b19      	ldr	r3, [pc, #100]	; (8003b60 <HAL_UART_MspInit+0x184>)
 8003afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	613b      	str	r3, [r7, #16]
 8003b02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <HAL_UART_MspInit+0x184>)
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	4a14      	ldr	r2, [pc, #80]	; (8003b60 <HAL_UART_MspInit+0x184>)
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	6313      	str	r3, [r2, #48]	; 0x30
 8003b14:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <HAL_UART_MspInit+0x184>)
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003b20:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b26:	2302      	movs	r3, #2
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003b32:	2308      	movs	r3, #8
 8003b34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4809      	ldr	r0, [pc, #36]	; (8003b64 <HAL_UART_MspInit+0x188>)
 8003b3e:	f01a f92d 	bl	801dd9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003b42:	2200      	movs	r2, #0
 8003b44:	2100      	movs	r1, #0
 8003b46:	2047      	movs	r0, #71	; 0x47
 8003b48:	f019 fcc7 	bl	801d4da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003b4c:	2047      	movs	r0, #71	; 0x47
 8003b4e:	f019 fce0 	bl	801d512 <HAL_NVIC_EnableIRQ>
}
 8003b52:	bf00      	nop
 8003b54:	3738      	adds	r7, #56	; 0x38
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40011000 	.word	0x40011000
 8003b60:	40023800 	.word	0x40023800
 8003b64:	40020000 	.word	0x40020000
 8003b68:	40004400 	.word	0x40004400
 8003b6c:	40011400 	.word	0x40011400

08003b70 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a1d      	ldr	r2, [pc, #116]	; (8003bf4 <HAL_UART_MspDeInit+0x84>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d10e      	bne.n	8003ba0 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003b82:	4b1d      	ldr	r3, [pc, #116]	; (8003bf8 <HAL_UART_MspDeInit+0x88>)
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	4a1c      	ldr	r2, [pc, #112]	; (8003bf8 <HAL_UART_MspDeInit+0x88>)
 8003b88:	f023 0310 	bic.w	r3, r3, #16
 8003b8c:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003b8e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003b92:	481a      	ldr	r0, [pc, #104]	; (8003bfc <HAL_UART_MspDeInit+0x8c>)
 8003b94:	f01a fa86 	bl	801e0a4 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003b98:	2025      	movs	r0, #37	; 0x25
 8003b9a:	f019 fcc8 	bl	801d52e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8003b9e:	e025      	b.n	8003bec <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART2)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a16      	ldr	r2, [pc, #88]	; (8003c00 <HAL_UART_MspDeInit+0x90>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d10d      	bne.n	8003bc6 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003baa:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <HAL_UART_MspDeInit+0x88>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	4a12      	ldr	r2, [pc, #72]	; (8003bf8 <HAL_UART_MspDeInit+0x88>)
 8003bb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003bb4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8003bb6:	210c      	movs	r1, #12
 8003bb8:	4810      	ldr	r0, [pc, #64]	; (8003bfc <HAL_UART_MspDeInit+0x8c>)
 8003bba:	f01a fa73 	bl	801e0a4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003bbe:	2026      	movs	r0, #38	; 0x26
 8003bc0:	f019 fcb5 	bl	801d52e <HAL_NVIC_DisableIRQ>
}
 8003bc4:	e012      	b.n	8003bec <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART6)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a0e      	ldr	r2, [pc, #56]	; (8003c04 <HAL_UART_MspDeInit+0x94>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d10d      	bne.n	8003bec <HAL_UART_MspDeInit+0x7c>
    __HAL_RCC_USART6_CLK_DISABLE();
 8003bd0:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <HAL_UART_MspDeInit+0x88>)
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd4:	4a08      	ldr	r2, [pc, #32]	; (8003bf8 <HAL_UART_MspDeInit+0x88>)
 8003bd6:	f023 0320 	bic.w	r3, r3, #32
 8003bda:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8003bdc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003be0:	4806      	ldr	r0, [pc, #24]	; (8003bfc <HAL_UART_MspDeInit+0x8c>)
 8003be2:	f01a fa5f 	bl	801e0a4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8003be6:	2047      	movs	r0, #71	; 0x47
 8003be8:	f019 fca1 	bl	801d52e <HAL_NVIC_DisableIRQ>
}
 8003bec:	bf00      	nop
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40011000 	.word	0x40011000
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40020000 	.word	0x40020000
 8003c00:	40004400 	.word	0x40004400
 8003c04:	40011400 	.word	0x40011400

08003c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c0c:	e7fe      	b.n	8003c0c <NMI_Handler+0x4>

08003c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c12:	e7fe      	b.n	8003c12 <HardFault_Handler+0x4>

08003c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c18:	e7fe      	b.n	8003c18 <MemManage_Handler+0x4>

08003c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c1e:	e7fe      	b.n	8003c1e <BusFault_Handler+0x4>

08003c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c24:	e7fe      	b.n	8003c24 <UsageFault_Handler+0x4>

08003c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c26:	b480      	push	{r7}
 8003c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c42:	b480      	push	{r7}
 8003c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c46:	bf00      	nop
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  pif_sigTimer1ms();
 8003c54:	f00d fd6a 	bl	801172c <pif_sigTimer1ms>
  pifTimerManager_sigTick(&g_timer_1ms);
 8003c58:	4803      	ldr	r0, [pc, #12]	; (8003c68 <SysTick_Handler+0x18>)
 8003c5a:	f011 fe00 	bl	801585e <pifTimerManager_sigTick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c5e:	f018 ff1b 	bl	801ca98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c62:	bf00      	nop
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20001580 	.word	0x20001580

08003c6c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SONAR_ECHO_Pin);
 8003c70:	2002      	movs	r0, #2
 8003c72:	f01a fb15 	bl	801e2a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
	...

08003c7c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003c80:	4802      	ldr	r0, [pc, #8]	; (8003c8c <DMA1_Stream0_IRQHandler+0x10>)
 8003c82:	f019 fe07 	bl	801d894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003c86:	bf00      	nop
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	200005c8 	.word	0x200005c8

08003c90 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003c94:	4802      	ldr	r0, [pc, #8]	; (8003ca0 <DMA1_Stream1_IRQHandler+0x10>)
 8003c96:	f019 fdfd 	bl	801d894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003c9a:	bf00      	nop
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000628 	.word	0x20000628

08003ca4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ca8:	4802      	ldr	r0, [pc, #8]	; (8003cb4 <TIM3_IRQHandler+0x10>)
 8003caa:	f01e f941 	bl	8021f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	200006d0 	.word	0x200006d0

08003cb8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003cbc:	4802      	ldr	r0, [pc, #8]	; (8003cc8 <I2C1_EV_IRQHandler+0x10>)
 8003cbe:	f01b f9a3 	bl	801f008 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003cc2:	bf00      	nop
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20000574 	.word	0x20000574

08003ccc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003cd0:	4802      	ldr	r0, [pc, #8]	; (8003cdc <I2C1_ER_IRQHandler+0x10>)
 8003cd2:	f01b fb0a 	bl	801f2ea <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003cd6:	bf00      	nop
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	20000574 	.word	0x20000574

08003ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ce4:	4802      	ldr	r0, [pc, #8]	; (8003cf0 <USART1_IRQHandler+0x10>)
 8003ce6:	f01f f93b 	bl	8022f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	20000718 	.word	0x20000718

08003cf4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003cf8:	4802      	ldr	r0, [pc, #8]	; (8003d04 <USART2_IRQHandler+0x10>)
 8003cfa:	f01f f931 	bl	8022f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003cfe:	bf00      	nop
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	2000075c 	.word	0x2000075c

08003d08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RC_PPM_Pin);
 8003d0c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003d10:	f01a fac6 	bl	801e2a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003d14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003d18:	f01a fac2 	bl	801e2a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d1c:	bf00      	nop
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d24:	4802      	ldr	r0, [pc, #8]	; (8003d30 <DMA2_Stream0_IRQHandler+0x10>)
 8003d26:	f019 fdb5 	bl	801d894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003d2a:	bf00      	nop
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20000514 	.word	0x20000514

08003d34 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003d38:	4802      	ldr	r0, [pc, #8]	; (8003d44 <USART6_IRQHandler+0x10>)
 8003d3a:	f01f f911 	bl	8022f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003d3e:	bf00      	nop
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	200007a0 	.word	0x200007a0

08003d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d50:	4a14      	ldr	r2, [pc, #80]	; (8003da4 <_sbrk+0x5c>)
 8003d52:	4b15      	ldr	r3, [pc, #84]	; (8003da8 <_sbrk+0x60>)
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d5c:	4b13      	ldr	r3, [pc, #76]	; (8003dac <_sbrk+0x64>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d102      	bne.n	8003d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d64:	4b11      	ldr	r3, [pc, #68]	; (8003dac <_sbrk+0x64>)
 8003d66:	4a12      	ldr	r2, [pc, #72]	; (8003db0 <_sbrk+0x68>)
 8003d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d6a:	4b10      	ldr	r3, [pc, #64]	; (8003dac <_sbrk+0x64>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4413      	add	r3, r2
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d207      	bcs.n	8003d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d78:	f020 f858 	bl	8023e2c <__errno>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	220c      	movs	r2, #12
 8003d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d82:	f04f 33ff 	mov.w	r3, #4294967295
 8003d86:	e009      	b.n	8003d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d88:	4b08      	ldr	r3, [pc, #32]	; (8003dac <_sbrk+0x64>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d8e:	4b07      	ldr	r3, [pc, #28]	; (8003dac <_sbrk+0x64>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4413      	add	r3, r2
 8003d96:	4a05      	ldr	r2, [pc, #20]	; (8003dac <_sbrk+0x64>)
 8003d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	20020000 	.word	0x20020000
 8003da8:	00000400 	.word	0x00000400
 8003dac:	20000808 	.word	0x20000808
 8003db0:	20001fb0 	.word	0x20001fb0

08003db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003db8:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <SystemInit+0x20>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	4a05      	ldr	r2, [pc, #20]	; (8003dd4 <SystemInit+0x20>)
 8003dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003dc8:	bf00      	nop
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	e000ed00 	.word	0xe000ed00

08003dd8 <constrain>:

static bool standardBoardAlignment = true;     // board orientation correction
static float boardRotation[3][3];              // matrix

int constrain(int amt, int low, int high)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	da01      	bge.n	8003df0 <constrain+0x18>
        return low;
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	e006      	b.n	8003dfe <constrain+0x26>
    else if (amt > high)
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	dd01      	ble.n	8003dfc <constrain+0x24>
        return high;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	e000      	b.n	8003dfe <constrain+0x26>
    else
        return amt;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	0000      	movs	r0, r0
 8003e0c:	0000      	movs	r0, r0
	...

08003e10 <initBoardAlignment>:

void initBoardAlignment(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08e      	sub	sp, #56	; 0x38
 8003e14:	af00      	add	r7, sp, #0
    float roll, pitch, yaw;
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, coszcosy, sinzcosx, coszsinx, sinzsinx;

    // standard alignment, nothing to calculate
    if (!mcfg.board_align_roll && !mcfg.board_align_pitch && !mcfg.board_align_yaw)
 8003e16:	4b8a      	ldr	r3, [pc, #552]	; (8004040 <initBoardAlignment+0x230>)
 8003e18:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10a      	bne.n	8003e36 <initBoardAlignment+0x26>
 8003e20:	4b87      	ldr	r3, [pc, #540]	; (8004040 <initBoardAlignment+0x230>)
 8003e22:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d105      	bne.n	8003e36 <initBoardAlignment+0x26>
 8003e2a:	4b85      	ldr	r3, [pc, #532]	; (8004040 <initBoardAlignment+0x230>)
 8003e2c:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80fd 	beq.w	8004030 <initBoardAlignment+0x220>
        return;

    standardBoardAlignment = false;
 8003e36:	4b83      	ldr	r3, [pc, #524]	; (8004044 <initBoardAlignment+0x234>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	701a      	strb	r2, [r3, #0]

    // deg2rad
    roll = mcfg.board_align_roll * M_PI / 180.0f;
 8003e3c:	4b80      	ldr	r3, [pc, #512]	; (8004040 <initBoardAlignment+0x230>)
 8003e3e:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fc fb22 	bl	800048c <__aeabi_i2d>
 8003e48:	a37b      	add	r3, pc, #492	; (adr r3, 8004038 <initBoardAlignment+0x228>)
 8003e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4e:	f7fc fb87 	bl	8000560 <__aeabi_dmul>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4610      	mov	r0, r2
 8003e58:	4619      	mov	r1, r3
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	4b7a      	ldr	r3, [pc, #488]	; (8004048 <initBoardAlignment+0x238>)
 8003e60:	f7fc fca8 	bl	80007b4 <__aeabi_ddiv>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4610      	mov	r0, r2
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	f7fc fe5a 	bl	8000b24 <__aeabi_d2f>
 8003e70:	4603      	mov	r3, r0
 8003e72:	637b      	str	r3, [r7, #52]	; 0x34
    pitch = mcfg.board_align_pitch * M_PI / 180.0f;
 8003e74:	4b72      	ldr	r3, [pc, #456]	; (8004040 <initBoardAlignment+0x230>)
 8003e76:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fc fb06 	bl	800048c <__aeabi_i2d>
 8003e80:	a36d      	add	r3, pc, #436	; (adr r3, 8004038 <initBoardAlignment+0x228>)
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	f7fc fb6b 	bl	8000560 <__aeabi_dmul>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4610      	mov	r0, r2
 8003e90:	4619      	mov	r1, r3
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	4b6c      	ldr	r3, [pc, #432]	; (8004048 <initBoardAlignment+0x238>)
 8003e98:	f7fc fc8c 	bl	80007b4 <__aeabi_ddiv>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	f7fc fe3e 	bl	8000b24 <__aeabi_d2f>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	633b      	str	r3, [r7, #48]	; 0x30
    yaw = mcfg.board_align_yaw * M_PI / 180.0f;
 8003eac:	4b64      	ldr	r3, [pc, #400]	; (8004040 <initBoardAlignment+0x230>)
 8003eae:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fc faea 	bl	800048c <__aeabi_i2d>
 8003eb8:	a35f      	add	r3, pc, #380	; (adr r3, 8004038 <initBoardAlignment+0x228>)
 8003eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebe:	f7fc fb4f 	bl	8000560 <__aeabi_dmul>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	4619      	mov	r1, r3
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	4b5e      	ldr	r3, [pc, #376]	; (8004048 <initBoardAlignment+0x238>)
 8003ed0:	f7fc fc70 	bl	80007b4 <__aeabi_ddiv>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4610      	mov	r0, r2
 8003eda:	4619      	mov	r1, r3
 8003edc:	f7fc fe22 	bl	8000b24 <__aeabi_d2f>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c

    cosx = cosf(roll);
 8003ee4:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003ee8:	f020 fac6 	bl	8024478 <cosf>
 8003eec:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    sinx = sinf(roll);
 8003ef0:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003ef4:	f020 fb44 	bl	8024580 <sinf>
 8003ef8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    cosy = cosf(pitch);
 8003efc:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003f00:	f020 faba 	bl	8024478 <cosf>
 8003f04:	ed87 0a08 	vstr	s0, [r7, #32]
    siny = sinf(pitch);
 8003f08:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003f0c:	f020 fb38 	bl	8024580 <sinf>
 8003f10:	ed87 0a07 	vstr	s0, [r7, #28]
    cosz = cosf(yaw);
 8003f14:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003f18:	f020 faae 	bl	8024478 <cosf>
 8003f1c:	ed87 0a06 	vstr	s0, [r7, #24]
    sinz = sinf(yaw);
 8003f20:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003f24:	f020 fb2c 	bl	8024580 <sinf>
 8003f28:	ed87 0a05 	vstr	s0, [r7, #20]

    coszcosx = cosz * cosx;
 8003f2c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003f30:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f38:	edc7 7a04 	vstr	s15, [r7, #16]
    coszcosy = cosz * cosy;
 8003f3c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003f40:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f48:	edc7 7a03 	vstr	s15, [r7, #12]
    sinzcosx = sinz * cosx;
 8003f4c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003f50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f58:	edc7 7a02 	vstr	s15, [r7, #8]
    coszsinx = sinx * cosz;
 8003f5c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003f60:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f68:	edc7 7a01 	vstr	s15, [r7, #4]
    sinzsinx = sinx * sinz;
 8003f6c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003f70:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f78:	edc7 7a00 	vstr	s15, [r7]

    // define rotation matrix
    boardRotation[0][0] = coszcosy;
 8003f7c:	4a33      	ldr	r2, [pc, #204]	; (800404c <initBoardAlignment+0x23c>)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6013      	str	r3, [r2, #0]
    boardRotation[0][1] = -cosy * sinz;
 8003f82:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f86:	eeb1 7a67 	vneg.f32	s14, s15
 8003f8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f92:	4b2e      	ldr	r3, [pc, #184]	; (800404c <initBoardAlignment+0x23c>)
 8003f94:	edc3 7a01 	vstr	s15, [r3, #4]
    boardRotation[0][2] = siny;
 8003f98:	4a2c      	ldr	r2, [pc, #176]	; (800404c <initBoardAlignment+0x23c>)
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	6093      	str	r3, [r2, #8]

    boardRotation[1][0] = sinzcosx + (coszsinx * siny);
 8003f9e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003fa2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003fa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003faa:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fb2:	4b26      	ldr	r3, [pc, #152]	; (800404c <initBoardAlignment+0x23c>)
 8003fb4:	edc3 7a03 	vstr	s15, [r3, #12]
    boardRotation[1][1] = coszcosx - (sinzsinx * siny);
 8003fb8:	ed97 7a00 	vldr	s14, [r7]
 8003fbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8003fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc4:	ed97 7a04 	vldr	s14, [r7, #16]
 8003fc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fcc:	4b1f      	ldr	r3, [pc, #124]	; (800404c <initBoardAlignment+0x23c>)
 8003fce:	edc3 7a04 	vstr	s15, [r3, #16]
    boardRotation[1][2] = -sinx * cosy;
 8003fd2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003fd6:	eeb1 7a67 	vneg.f32	s14, s15
 8003fda:	edd7 7a08 	vldr	s15, [r7, #32]
 8003fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe2:	4b1a      	ldr	r3, [pc, #104]	; (800404c <initBoardAlignment+0x23c>)
 8003fe4:	edc3 7a05 	vstr	s15, [r3, #20]

    boardRotation[2][0] = (sinzsinx) - (coszcosx * siny);
 8003fe8:	ed97 7a04 	vldr	s14, [r7, #16]
 8003fec:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff4:	ed97 7a00 	vldr	s14, [r7]
 8003ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ffc:	4b13      	ldr	r3, [pc, #76]	; (800404c <initBoardAlignment+0x23c>)
 8003ffe:	edc3 7a06 	vstr	s15, [r3, #24]
    boardRotation[2][1] = (coszsinx) + (sinzcosx * siny);
 8004002:	ed97 7a02 	vldr	s14, [r7, #8]
 8004006:	edd7 7a07 	vldr	s15, [r7, #28]
 800400a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800400e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004016:	4b0d      	ldr	r3, [pc, #52]	; (800404c <initBoardAlignment+0x23c>)
 8004018:	edc3 7a07 	vstr	s15, [r3, #28]
    boardRotation[2][2] = cosy * cosx;
 800401c:	ed97 7a08 	vldr	s14, [r7, #32]
 8004020:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004028:	4b08      	ldr	r3, [pc, #32]	; (800404c <initBoardAlignment+0x23c>)
 800402a:	edc3 7a08 	vstr	s15, [r3, #32]
 800402e:	e000      	b.n	8004032 <initBoardAlignment+0x222>
        return;
 8004030:	bf00      	nop
}
 8004032:	3738      	adds	r7, #56	; 0x38
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	54442d18 	.word	0x54442d18
 800403c:	400921fb 	.word	0x400921fb
 8004040:	2000089c 	.word	0x2000089c
 8004044:	20000024 	.word	0x20000024
 8004048:	40668000 	.word	0x40668000
 800404c:	2000080c 	.word	0x2000080c

08004050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004088 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004054:	480d      	ldr	r0, [pc, #52]	; (800408c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004056:	490e      	ldr	r1, [pc, #56]	; (8004090 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004058:	4a0e      	ldr	r2, [pc, #56]	; (8004094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800405a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800405c:	e002      	b.n	8004064 <LoopCopyDataInit>

0800405e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800405e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004062:	3304      	adds	r3, #4

08004064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004068:	d3f9      	bcc.n	800405e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800406a:	4a0b      	ldr	r2, [pc, #44]	; (8004098 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800406c:	4c0b      	ldr	r4, [pc, #44]	; (800409c <LoopFillZerobss+0x26>)
  movs r3, #0
 800406e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004070:	e001      	b.n	8004076 <LoopFillZerobss>

08004072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004074:	3204      	adds	r2, #4

08004076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004078:	d3fb      	bcc.n	8004072 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800407a:	f7ff fe9b 	bl	8003db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800407e:	f01f fedb 	bl	8023e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004082:	f7fe fb89 	bl	8002798 <main>
  bx  lr    
 8004086:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004088:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800408c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004090:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8004094:	0802abf0 	.word	0x0802abf0
  ldr r2, =_sbss
 8004098:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 800409c:	20001fac 	.word	0x20001fac

080040a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040a0:	e7fe      	b.n	80040a0 <ADC_IRQHandler>
	...

080040a4 <_evtBuzzerFinish>:
static uint8_t readyBeepDone = 0;

PifBuzzer s_buzzer;

static void _evtBuzzerFinish(PifId id)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	80fb      	strh	r3, [r7, #6]
	(void)id;

    buzzerMode = BUZZER_STOPPED;
 80040ae:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <_evtBuzzerFinish+0x1c>)
 80040b0:	220d      	movs	r2, #13
 80040b2:	701a      	strb	r2, [r3, #0]
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	20000025 	.word	0x20000025

080040c4 <buzzerInit>:

bool buzzerInit()
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
    if (!pifBuzzer_Init(&s_buzzer, PIF_ID_BUZZER, actBuzzerAction)) return false;
 80040c8:	4a08      	ldr	r2, [pc, #32]	; (80040ec <buzzerInit+0x28>)
 80040ca:	f44f 7198 	mov.w	r1, #304	; 0x130
 80040ce:	4808      	ldr	r0, [pc, #32]	; (80040f0 <buzzerInit+0x2c>)
 80040d0:	f017 fd4e 	bl	801bb70 <pifBuzzer_Init>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <buzzerInit+0x1a>
 80040da:	2300      	movs	r3, #0
 80040dc:	e003      	b.n	80040e6 <buzzerInit+0x22>
    s_buzzer.evt_finish = _evtBuzzerFinish;
 80040de:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <buzzerInit+0x2c>)
 80040e0:	4a04      	ldr	r2, [pc, #16]	; (80040f4 <buzzerInit+0x30>)
 80040e2:	601a      	str	r2, [r3, #0]
    return true;
 80040e4:	2301      	movs	r3, #1
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	0800212d 	.word	0x0800212d
 80040f0:	20000848 	.word	0x20000848
 80040f4:	080040a5 	.word	0x080040a5

080040f8 <buzzer>:

/* Buzzer -function is used to activate/deactive buzzer.
 * Parameter defines the used sequence.
 */
void buzzer(uint8_t mode)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	4603      	mov	r3, r0
 8004100:	71fb      	strb	r3, [r7, #7]
#ifdef GPS
    uint8_t i = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	73fb      	strb	r3, [r7, #15]
#endif

    // Just return if same or higher priority sound is active.
    if (buzzerMode <= mode)
 8004106:	4b62      	ldr	r3, [pc, #392]	; (8004290 <buzzer+0x198>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	79fa      	ldrb	r2, [r7, #7]
 800410c:	429a      	cmp	r2, r3
 800410e:	f080 80b7 	bcs.w	8004280 <buzzer+0x188>
        return;

    switch (mode) {
 8004112:	79fb      	ldrb	r3, [r7, #7]
 8004114:	2b0c      	cmp	r3, #12
 8004116:	f200 80b5 	bhi.w	8004284 <buzzer+0x18c>
 800411a:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <buzzer+0x28>)
 800411c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004120:	08004155 	.word	0x08004155
 8004124:	080041d3 	.word	0x080041d3
 8004128:	080041c3 	.word	0x080041c3
 800412c:	080041b3 	.word	0x080041b3
 8004130:	080041e3 	.word	0x080041e3
 8004134:	08004183 	.word	0x08004183
 8004138:	08004183 	.word	0x08004183
 800413c:	080041f3 	.word	0x080041f3
 8004140:	08004203 	.word	0x08004203
 8004144:	080041e3 	.word	0x080041e3
 8004148:	08004193 	.word	0x08004193
 800414c:	080041a3 	.word	0x080041a3
 8004150:	08004163 	.word	0x08004163
        case BUZZER_STOP:
            buzzerMode = BUZZER_STOPPED;
 8004154:	4b4e      	ldr	r3, [pc, #312]	; (8004290 <buzzer+0x198>)
 8004156:	220d      	movs	r2, #13
 8004158:	701a      	strb	r2, [r3, #0]
            pifBuzzer_Stop(&s_buzzer);
 800415a:	484e      	ldr	r0, [pc, #312]	; (8004294 <buzzer+0x19c>)
 800415c:	f017 fd74 	bl	801bc48 <pifBuzzer_Stop>
            break;
 8004160:	e093      	b.n	800428a <buzzer+0x192>
        case BUZZER_READY_BEEP:
            if (readyBeepDone)
 8004162:	4b4d      	ldr	r3, [pc, #308]	; (8004298 <buzzer+0x1a0>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	f040 808e 	bne.w	8004288 <buzzer+0x190>
                return;
            pifBuzzer_Start(&s_buzzer, buzz_readyBeep);
 800416c:	494b      	ldr	r1, [pc, #300]	; (800429c <buzzer+0x1a4>)
 800416e:	4849      	ldr	r0, [pc, #292]	; (8004294 <buzzer+0x19c>)
 8004170:	f017 fd48 	bl	801bc04 <pifBuzzer_Start>
            buzzerMode = mode;
 8004174:	4a46      	ldr	r2, [pc, #280]	; (8004290 <buzzer+0x198>)
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	7013      	strb	r3, [r2, #0]
            readyBeepDone = 1;
 800417a:	4b47      	ldr	r3, [pc, #284]	; (8004298 <buzzer+0x1a0>)
 800417c:	2201      	movs	r2, #1
 800417e:	701a      	strb	r2, [r3, #0]
            break;
 8004180:	e083      	b.n	800428a <buzzer+0x192>
        case BUZZER_ARMING:
        case BUZZER_DISARMING:
            pifBuzzer_Start(&s_buzzer, buzz_mediumBeepFast);
 8004182:	4947      	ldr	r1, [pc, #284]	; (80042a0 <buzzer+0x1a8>)
 8004184:	4843      	ldr	r0, [pc, #268]	; (8004294 <buzzer+0x19c>)
 8004186:	f017 fd3d 	bl	801bc04 <pifBuzzer_Start>
            buzzerMode = mode;
 800418a:	4a41      	ldr	r2, [pc, #260]	; (8004290 <buzzer+0x198>)
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	7013      	strb	r3, [r2, #0]
            break;
 8004190:	e07b      	b.n	800428a <buzzer+0x192>
        case BUZZER_ACC_CALIBRATION:
            pifBuzzer_Start(&s_buzzer, buzz_2shortBeeps);
 8004192:	4944      	ldr	r1, [pc, #272]	; (80042a4 <buzzer+0x1ac>)
 8004194:	483f      	ldr	r0, [pc, #252]	; (8004294 <buzzer+0x19c>)
 8004196:	f017 fd35 	bl	801bc04 <pifBuzzer_Start>
            buzzerMode = mode;
 800419a:	4a3d      	ldr	r2, [pc, #244]	; (8004290 <buzzer+0x198>)
 800419c:	79fb      	ldrb	r3, [r7, #7]
 800419e:	7013      	strb	r3, [r2, #0]
            break;
 80041a0:	e073      	b.n	800428a <buzzer+0x192>
        case BUZZER_ACC_CALIBRATION_FAIL:
            pifBuzzer_Start(&s_buzzer, buzz_3shortBeeps);
 80041a2:	4941      	ldr	r1, [pc, #260]	; (80042a8 <buzzer+0x1b0>)
 80041a4:	483b      	ldr	r0, [pc, #236]	; (8004294 <buzzer+0x19c>)
 80041a6:	f017 fd2d 	bl	801bc04 <pifBuzzer_Start>
            buzzerMode = mode;
 80041aa:	4a39      	ldr	r2, [pc, #228]	; (8004290 <buzzer+0x198>)
 80041ac:	79fb      	ldrb	r3, [r7, #7]
 80041ae:	7013      	strb	r3, [r2, #0]
            break;
 80041b0:	e06b      	b.n	800428a <buzzer+0x192>
        case BUZZER_TX_LOST_ARMED:
            pifBuzzer_Start(&s_buzzer, buzz_sos);
 80041b2:	493e      	ldr	r1, [pc, #248]	; (80042ac <buzzer+0x1b4>)
 80041b4:	4837      	ldr	r0, [pc, #220]	; (8004294 <buzzer+0x19c>)
 80041b6:	f017 fd25 	bl	801bc04 <pifBuzzer_Start>
            buzzerMode = mode;
 80041ba:	4a35      	ldr	r2, [pc, #212]	; (8004290 <buzzer+0x198>)
 80041bc:	79fb      	ldrb	r3, [r7, #7]
 80041be:	7013      	strb	r3, [r2, #0]
            break;
 80041c0:	e063      	b.n	800428a <buzzer+0x192>
        case BUZZER_BAT_LOW:
            pifBuzzer_Start(&s_buzzer, buzz_longBeep);
 80041c2:	493b      	ldr	r1, [pc, #236]	; (80042b0 <buzzer+0x1b8>)
 80041c4:	4833      	ldr	r0, [pc, #204]	; (8004294 <buzzer+0x19c>)
 80041c6:	f017 fd1d 	bl	801bc04 <pifBuzzer_Start>
            buzzerMode = mode;
 80041ca:	4a31      	ldr	r2, [pc, #196]	; (8004290 <buzzer+0x198>)
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	7013      	strb	r3, [r2, #0]
            break;
 80041d0:	e05b      	b.n	800428a <buzzer+0x192>
        case BUZZER_BAT_CRIT_LOW:
            pifBuzzer_Start(&s_buzzer, buzz_BatteryBeep);
 80041d2:	4938      	ldr	r1, [pc, #224]	; (80042b4 <buzzer+0x1bc>)
 80041d4:	482f      	ldr	r0, [pc, #188]	; (8004294 <buzzer+0x19c>)
 80041d6:	f017 fd15 	bl	801bc04 <pifBuzzer_Start>
            buzzerMode = mode;
 80041da:	4a2d      	ldr	r2, [pc, #180]	; (8004290 <buzzer+0x198>)
 80041dc:	79fb      	ldrb	r3, [r7, #7]
 80041de:	7013      	strb	r3, [r2, #0]
            break;
 80041e0:	e053      	b.n	800428a <buzzer+0x192>
        case BUZZER_ARMED:
        case BUZZER_TX_LOST:
            pifBuzzer_Start(&s_buzzer, buzz_mediumBeep);
 80041e2:	4935      	ldr	r1, [pc, #212]	; (80042b8 <buzzer+0x1c0>)
 80041e4:	482b      	ldr	r0, [pc, #172]	; (8004294 <buzzer+0x19c>)
 80041e6:	f017 fd0d 	bl	801bc04 <pifBuzzer_Start>
            buzzerMode = mode;
 80041ea:	4a29      	ldr	r2, [pc, #164]	; (8004290 <buzzer+0x198>)
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	7013      	strb	r3, [r2, #0]
            break;
 80041f0:	e04b      	b.n	800428a <buzzer+0x192>
        case BUZZER_ARMING_GPS_FIX:
            pifBuzzer_Start(&s_buzzer, buzz_armed);
 80041f2:	4932      	ldr	r1, [pc, #200]	; (80042bc <buzzer+0x1c4>)
 80041f4:	4827      	ldr	r0, [pc, #156]	; (8004294 <buzzer+0x19c>)
 80041f6:	f017 fd05 	bl	801bc04 <pifBuzzer_Start>
            buzzerMode = mode;
 80041fa:	4a25      	ldr	r2, [pc, #148]	; (8004290 <buzzer+0x198>)
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	7013      	strb	r3, [r2, #0]
            break;
 8004200:	e043      	b.n	800428a <buzzer+0x192>
        case BUZZER_TX_SET:
#ifdef GPS
            if (feature(FEATURE_GPS) && f.GPS_FIX && GPS_numSat >= 5) {
 8004202:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004206:	f002 ff4b 	bl	80070a0 <feature>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d02f      	beq.n	8004270 <buzzer+0x178>
 8004210:	4b2b      	ldr	r3, [pc, #172]	; (80042c0 <buzzer+0x1c8>)
 8004212:	7adb      	ldrb	r3, [r3, #11]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d02b      	beq.n	8004270 <buzzer+0x178>
 8004218:	4b2a      	ldr	r3, [pc, #168]	; (80042c4 <buzzer+0x1cc>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2b04      	cmp	r3, #4
 800421e:	d927      	bls.n	8004270 <buzzer+0x178>
                do {
                    buzz_countSats[i] = 5;
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	4a29      	ldr	r2, [pc, #164]	; (80042c8 <buzzer+0x1d0>)
 8004224:	2105      	movs	r1, #5
 8004226:	54d1      	strb	r1, [r2, r3]
                    buzz_countSats[i + 1] = 15;
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	3301      	adds	r3, #1
 800422c:	4a26      	ldr	r2, [pc, #152]	; (80042c8 <buzzer+0x1d0>)
 800422e:	210f      	movs	r1, #15
 8004230:	54d1      	strb	r1, [r2, r3]
                    i += 2;
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	3302      	adds	r3, #2
 8004236:	73fb      	strb	r3, [r7, #15]
                } while (i < 20 && GPS_numSat > i / 2);
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	2b13      	cmp	r3, #19
 800423c:	d806      	bhi.n	800424c <buzzer+0x154>
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	085b      	lsrs	r3, r3, #1
 8004242:	b2da      	uxtb	r2, r3
 8004244:	4b1f      	ldr	r3, [pc, #124]	; (80042c4 <buzzer+0x1cc>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d3e9      	bcc.n	8004220 <buzzer+0x128>
                buzz_countSats[i + 1] = 100;
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	3301      	adds	r3, #1
 8004250:	4a1d      	ldr	r2, [pc, #116]	; (80042c8 <buzzer+0x1d0>)
 8004252:	2164      	movs	r1, #100	; 0x64
 8004254:	54d1      	strb	r1, [r2, r3]
                buzz_countSats[i + 2] = 0xF0;
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	3302      	adds	r3, #2
 800425a:	4a1b      	ldr	r2, [pc, #108]	; (80042c8 <buzzer+0x1d0>)
 800425c:	21f0      	movs	r1, #240	; 0xf0
 800425e:	54d1      	strb	r1, [r2, r3]
                pifBuzzer_Start(&s_buzzer, buzz_countSats);
 8004260:	4919      	ldr	r1, [pc, #100]	; (80042c8 <buzzer+0x1d0>)
 8004262:	480c      	ldr	r0, [pc, #48]	; (8004294 <buzzer+0x19c>)
 8004264:	f017 fcce 	bl	801bc04 <pifBuzzer_Start>
                buzzerMode = mode;
 8004268:	4a09      	ldr	r2, [pc, #36]	; (8004290 <buzzer+0x198>)
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	7013      	strb	r3, [r2, #0]
                break;
 800426e:	e00c      	b.n	800428a <buzzer+0x192>
            }
#endif
            pifBuzzer_Start(&s_buzzer, buzz_shortBeep);
 8004270:	4916      	ldr	r1, [pc, #88]	; (80042cc <buzzer+0x1d4>)
 8004272:	4808      	ldr	r0, [pc, #32]	; (8004294 <buzzer+0x19c>)
 8004274:	f017 fcc6 	bl	801bc04 <pifBuzzer_Start>
            buzzerMode = mode;
 8004278:	4a05      	ldr	r2, [pc, #20]	; (8004290 <buzzer+0x198>)
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	7013      	strb	r3, [r2, #0]
            break;
 800427e:	e004      	b.n	800428a <buzzer+0x192>
        return;
 8004280:	bf00      	nop
 8004282:	e002      	b.n	800428a <buzzer+0x192>

        default:
            return;
 8004284:	bf00      	nop
 8004286:	e000      	b.n	800428a <buzzer+0x192>
                return;
 8004288:	bf00      	nop
    }
}
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	20000025 	.word	0x20000025
 8004294:	20000848 	.word	0x20000848
 8004298:	20000846 	.word	0x20000846
 800429c:	08028dec 	.word	0x08028dec
 80042a0:	08028dc0 	.word	0x08028dc0
 80042a4:	08028dfc 	.word	0x08028dfc
 80042a8:	08028e04 	.word	0x08028e04
 80042ac:	08028dcc 	.word	0x08028dcc
 80042b0:	08028dc8 	.word	0x08028dc8
 80042b4:	08028dbc 	.word	0x08028dbc
 80042b8:	08028dc4 	.word	0x08028dc4
 80042bc:	08028de0 	.word	0x08028de0
 80042c0:	2000174c 	.word	0x2000174c
 80042c4:	20001830 	.word	0x20001830
 80042c8:	20000830 	.word	0x20000830
 80042cc:	08028db8 	.word	0x08028db8

080042d0 <buzzerUpdate>:

/* buzzerUpdate -function is used in loop. It will update buzzer state
 * when the time is correct.
 */
void buzzerUpdate(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
    // If beeper option from AUX switch has been selected
    if (rcOptions[BOXBEEPERON]) {
 80042d4:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <buzzerUpdate+0x20>)
 80042d6:	7b5b      	ldrb	r3, [r3, #13]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d006      	beq.n	80042ea <buzzerUpdate+0x1a>
        if (buzzerMode > BUZZER_TX_SET)
 80042dc:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <buzzerUpdate+0x24>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d902      	bls.n	80042ea <buzzerUpdate+0x1a>
            buzzer(BUZZER_TX_SET);
 80042e4:	2008      	movs	r0, #8
 80042e6:	f7ff ff07 	bl	80040f8 <buzzer>
    }
}
 80042ea:	bf00      	nop
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	200017ec 	.word	0x200017ec
 80042f4:	20000025 	.word	0x20000025

080042f8 <i2a>:
**           range errors on the radix default it to base10
** Code from http://groups.google.com/group/comp.lang.c/msg/66552ef8b04fe1ab?pli=1
*/

static char *i2a(unsigned i, char *a, unsigned r)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
    if (i / r > 0)
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	429a      	cmp	r2, r3
 800430a:	d309      	bcc.n	8004320 <i2a+0x28>
        a = i2a(i / r, a, r);
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	fbb2 f3f3 	udiv	r3, r2, r3
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff ffed 	bl	80042f8 <i2a>
 800431e:	60b8      	str	r0, [r7, #8]
    *a = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[i % r];
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	fbb3 f2f2 	udiv	r2, r3, r2
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	fb01 f202 	mul.w	r2, r1, r2
 800432e:	1a9b      	subs	r3, r3, r2
 8004330:	4a04      	ldr	r2, [pc, #16]	; (8004344 <i2a+0x4c>)
 8004332:	5cd2      	ldrb	r2, [r2, r3]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	701a      	strb	r2, [r3, #0]
    return a + 1;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	3301      	adds	r3, #1
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	08027a90 	.word	0x08027a90

08004348 <itoa>:

char *itoa(int i, char *a, int r)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
    if ((r < 2) || (r > 36))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b01      	cmp	r3, #1
 8004358:	dd02      	ble.n	8004360 <itoa+0x18>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b24      	cmp	r3, #36	; 0x24
 800435e:	dd01      	ble.n	8004364 <itoa+0x1c>
        r = 10;
 8004360:	230a      	movs	r3, #10
 8004362:	607b      	str	r3, [r7, #4]
    if (i < 0) {
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	da0e      	bge.n	8004388 <itoa+0x40>
        *a = '-';
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	222d      	movs	r2, #45	; 0x2d
 800436e:	701a      	strb	r2, [r3, #0]
        *i2a(-(unsigned)i, a + 1, r) = 0;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4258      	negs	r0, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	3301      	adds	r3, #1
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	4619      	mov	r1, r3
 800437c:	f7ff ffbc 	bl	80042f8 <i2a>
 8004380:	4603      	mov	r3, r0
 8004382:	2200      	movs	r2, #0
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	e008      	b.n	800439a <itoa+0x52>
    } else
        *i2a(i, a, r) = 0;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	68b9      	ldr	r1, [r7, #8]
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff ffb2 	bl	80042f8 <i2a>
 8004394:	4603      	mov	r3, r0
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]
    return a;
 800439a:	68bb      	ldr	r3, [r7, #8]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <_atof>:
// 09-May-2009 Tom Van Baak (tvb) www.LeapSecond.com
//
#define white_space(c) ((c) == ' ' || (c) == '\t')
#define valid_digit(c) ((c) >= '0' && (c) <= '9')
static float _atof(const char *p)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b089      	sub	sp, #36	; 0x24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
    int frac = 0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61fb      	str	r3, [r7, #28]
    float sign, value, scale;

    // Skip leading white space, if any.
    while (white_space(*p)) {
 80043b0:	e002      	b.n	80043b8 <_atof+0x14>
        p += 1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3301      	adds	r3, #1
 80043b6:	607b      	str	r3, [r7, #4]
    while (white_space(*p)) {
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d0f8      	beq.n	80043b2 <_atof+0xe>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b09      	cmp	r3, #9
 80043c6:	d0f4      	beq.n	80043b2 <_atof+0xe>
    }

    // Get sign, if any.
    sign = 1.0f;
 80043c8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80043cc:	61bb      	str	r3, [r7, #24]
    if (*p == '-') {
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b2d      	cmp	r3, #45	; 0x2d
 80043d4:	d105      	bne.n	80043e2 <_atof+0x3e>
        sign = -1.0f;
 80043d6:	4b6a      	ldr	r3, [pc, #424]	; (8004580 <_atof+0x1dc>)
 80043d8:	61bb      	str	r3, [r7, #24]
        p += 1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	3301      	adds	r3, #1
 80043de:	607b      	str	r3, [r7, #4]
 80043e0:	e006      	b.n	80043f0 <_atof+0x4c>

    } else if (*p == '+') {
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b2b      	cmp	r3, #43	; 0x2b
 80043e8:	d102      	bne.n	80043f0 <_atof+0x4c>
        p += 1;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3301      	adds	r3, #1
 80043ee:	607b      	str	r3, [r7, #4]
    }

    // Get digits before decimal point or exponent, if any.
    value = 0.0f;
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
    while (valid_digit(*p)) {
 80043f6:	e013      	b.n	8004420 <_atof+0x7c>
        value = value * 10.0f + (*p - '0');
 80043f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80043fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004400:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	3b30      	subs	r3, #48	; 0x30
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004416:	edc7 7a05 	vstr	s15, [r7, #20]
        p += 1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3301      	adds	r3, #1
 800441e:	607b      	str	r3, [r7, #4]
    while (valid_digit(*p)) {
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b2f      	cmp	r3, #47	; 0x2f
 8004426:	d903      	bls.n	8004430 <_atof+0x8c>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b39      	cmp	r3, #57	; 0x39
 800442e:	d9e3      	bls.n	80043f8 <_atof+0x54>
    }

    // Get digits after decimal point, if any.
    if (*p == '.') {
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b2e      	cmp	r3, #46	; 0x2e
 8004436:	d129      	bne.n	800448c <_atof+0xe8>
        float pow10 = 10.0f;
 8004438:	4b52      	ldr	r3, [pc, #328]	; (8004584 <_atof+0x1e0>)
 800443a:	60fb      	str	r3, [r7, #12]
        p += 1;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3301      	adds	r3, #1
 8004440:	607b      	str	r3, [r7, #4]

        while (valid_digit(*p)) {
 8004442:	e01b      	b.n	800447c <_atof+0xd8>
            value += (*p - '0') / pow10;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	3b30      	subs	r3, #48	; 0x30
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004452:	ed97 7a03 	vldr	s14, [r7, #12]
 8004456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800445a:	ed97 7a05 	vldr	s14, [r7, #20]
 800445e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004462:	edc7 7a05 	vstr	s15, [r7, #20]
            pow10 *= 10.0f;
 8004466:	edd7 7a03 	vldr	s15, [r7, #12]
 800446a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800446e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004472:	edc7 7a03 	vstr	s15, [r7, #12]
            p += 1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3301      	adds	r3, #1
 800447a:	607b      	str	r3, [r7, #4]
        while (valid_digit(*p)) {
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b2f      	cmp	r3, #47	; 0x2f
 8004482:	d903      	bls.n	800448c <_atof+0xe8>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b39      	cmp	r3, #57	; 0x39
 800448a:	d9db      	bls.n	8004444 <_atof+0xa0>
        }
    }

    // Handle exponent, if any.
    scale = 1.0f;
 800448c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004490:	613b      	str	r3, [r7, #16]
    if ((*p == 'e') || (*p == 'E')) {
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b65      	cmp	r3, #101	; 0x65
 8004498:	d003      	beq.n	80044a2 <_atof+0xfe>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b45      	cmp	r3, #69	; 0x45
 80044a0:	d153      	bne.n	800454a <_atof+0x1a6>
        unsigned int expon;
        p += 1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3301      	adds	r3, #1
 80044a6:	607b      	str	r3, [r7, #4]

        // Get sign of exponent, if any.
        frac = 0;
 80044a8:	2300      	movs	r3, #0
 80044aa:	61fb      	str	r3, [r7, #28]
        if (*p == '-') {
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b2d      	cmp	r3, #45	; 0x2d
 80044b2:	d105      	bne.n	80044c0 <_atof+0x11c>
            frac = 1;
 80044b4:	2301      	movs	r3, #1
 80044b6:	61fb      	str	r3, [r7, #28]
            p += 1;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3301      	adds	r3, #1
 80044bc:	607b      	str	r3, [r7, #4]
 80044be:	e006      	b.n	80044ce <_atof+0x12a>

        } else if (*p == '+') {
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b2b      	cmp	r3, #43	; 0x2b
 80044c6:	d102      	bne.n	80044ce <_atof+0x12a>
            p += 1;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3301      	adds	r3, #1
 80044cc:	607b      	str	r3, [r7, #4]
        }

        // Get digits of exponent, if any.
        expon = 0;
 80044ce:	2300      	movs	r3, #0
 80044d0:	60bb      	str	r3, [r7, #8]
        while (valid_digit(*p)) {
 80044d2:	e00d      	b.n	80044f0 <_atof+0x14c>
            expon = expon * 10 + (*p - '0');
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	4613      	mov	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	461a      	mov	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	4413      	add	r3, r2
 80044e6:	3b30      	subs	r3, #48	; 0x30
 80044e8:	60bb      	str	r3, [r7, #8]
            p += 1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3301      	adds	r3, #1
 80044ee:	607b      	str	r3, [r7, #4]
        while (valid_digit(*p)) {
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b2f      	cmp	r3, #47	; 0x2f
 80044f6:	d903      	bls.n	8004500 <_atof+0x15c>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b39      	cmp	r3, #57	; 0x39
 80044fe:	d9e9      	bls.n	80044d4 <_atof+0x130>
        }
        if (expon > 308)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8004506:	d90e      	bls.n	8004526 <_atof+0x182>
            expon = 308;
 8004508:	f44f 739a 	mov.w	r3, #308	; 0x134
 800450c:	60bb      	str	r3, [r7, #8]

        // Calculate scaling factor.
        // while (expon >= 50) { scale *= 1E50f; expon -= 50; }
        while (expon >=  8) {
 800450e:	e00a      	b.n	8004526 <_atof+0x182>
            scale *= 1E8f;
 8004510:	edd7 7a04 	vldr	s15, [r7, #16]
 8004514:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004588 <_atof+0x1e4>
 8004518:	ee67 7a87 	vmul.f32	s15, s15, s14
 800451c:	edc7 7a04 	vstr	s15, [r7, #16]
            expon -=  8;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	3b08      	subs	r3, #8
 8004524:	60bb      	str	r3, [r7, #8]
        while (expon >=  8) {
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b07      	cmp	r3, #7
 800452a:	d8f1      	bhi.n	8004510 <_atof+0x16c>
        }
        while (expon >   0) {
 800452c:	e00a      	b.n	8004544 <_atof+0x1a0>
            scale *= 10.0f;
 800452e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004532:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800453a:	edc7 7a04 	vstr	s15, [r7, #16]
            expon -=  1;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	3b01      	subs	r3, #1
 8004542:	60bb      	str	r3, [r7, #8]
        while (expon >   0) {
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f1      	bne.n	800452e <_atof+0x18a>
        }
    }

    // Return signed and scaled floating point result.
    return sign * (frac ? (value / scale) : (value * scale));
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d006      	beq.n	800455e <_atof+0x1ba>
 8004550:	edd7 6a05 	vldr	s13, [r7, #20]
 8004554:	ed97 7a04 	vldr	s14, [r7, #16]
 8004558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800455c:	e005      	b.n	800456a <_atof+0x1c6>
 800455e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004562:	edd7 7a04 	vldr	s15, [r7, #16]
 8004566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800456a:	ed97 7a06 	vldr	s14, [r7, #24]
 800456e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004572:	eeb0 0a67 	vmov.f32	s0, s15
 8004576:	3724      	adds	r7, #36	; 0x24
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	bf800000 	.word	0xbf800000
 8004584:	41200000 	.word	0x41200000
 8004588:	4cbebc20 	.word	0x4cbebc20

0800458c <ftoa>:

///////////////////////////////////////////////////////////////////////////////
// FTOA
///////////////////////////////////////////////////////////////////////////////
static char *ftoa(float x, char *floatString)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08c      	sub	sp, #48	; 0x30
 8004590:	af00      	add	r7, sp, #0
 8004592:	ed87 0a01 	vstr	s0, [r7, #4]
 8004596:	6038      	str	r0, [r7, #0]
    int32_t value;
    char intString1[12];
    char intString2[12] = { 0, };
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	f107 0310 	add.w	r3, r7, #16
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	605a      	str	r2, [r3, #4]
    char *decimalPoint = ".";
 80045a6:	4b54      	ldr	r3, [pc, #336]	; (80046f8 <ftoa+0x16c>)
 80045a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t dpLocation;

    if (x > 0)                  // Rounding for x.xxx display format
 80045aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80045ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b6:	dd08      	ble.n	80045ca <ftoa+0x3e>
        x += 0.0005f;
 80045b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80045bc:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80046fc <ftoa+0x170>
 80045c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045c4:	edc7 7a01 	vstr	s15, [r7, #4]
 80045c8:	e007      	b.n	80045da <ftoa+0x4e>
    else
        x -= 0.0005f;
 80045ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80045ce:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80046fc <ftoa+0x170>
 80045d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045d6:	edc7 7a01 	vstr	s15, [r7, #4]

    value = (int32_t)(x * 1000.0f);    // Convert float * 1000 to an integer
 80045da:	edd7 7a01 	vldr	s15, [r7, #4]
 80045de:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004700 <ftoa+0x174>
 80045e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045ea:	ee17 3a90 	vmov	r3, s15
 80045ee:	62bb      	str	r3, [r7, #40]	; 0x28

    itoa(abs(value), intString1, 10);   // Create string from abs of integer value
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	bfb8      	it	lt
 80045f6:	425b      	neglt	r3, r3
 80045f8:	f107 0118 	add.w	r1, r7, #24
 80045fc:	220a      	movs	r2, #10
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fea2 	bl	8004348 <itoa>

    if (value >= 0)
 8004604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004606:	2b00      	cmp	r3, #0
 8004608:	db02      	blt.n	8004610 <ftoa+0x84>
        intString2[0] = ' ';    // Positive number, add a pad space
 800460a:	2320      	movs	r3, #32
 800460c:	733b      	strb	r3, [r7, #12]
 800460e:	e001      	b.n	8004614 <ftoa+0x88>
    else
        intString2[0] = '-';    // Negative number, add a negative sign
 8004610:	232d      	movs	r3, #45	; 0x2d
 8004612:	733b      	strb	r3, [r7, #12]

    if (strlen(intString1) == 1) {
 8004614:	f107 0318 	add.w	r3, r7, #24
 8004618:	4618      	mov	r0, r3
 800461a:	f7fb fddd 	bl	80001d8 <strlen>
 800461e:	4603      	mov	r3, r0
 8004620:	2b01      	cmp	r3, #1
 8004622:	d10e      	bne.n	8004642 <ftoa+0xb6>
        intString2[1] = '0';
 8004624:	2330      	movs	r3, #48	; 0x30
 8004626:	737b      	strb	r3, [r7, #13]
        intString2[2] = '0';
 8004628:	2330      	movs	r3, #48	; 0x30
 800462a:	73bb      	strb	r3, [r7, #14]
        intString2[3] = '0';
 800462c:	2330      	movs	r3, #48	; 0x30
 800462e:	73fb      	strb	r3, [r7, #15]
        strcat(intString2, intString1);
 8004630:	f107 0218 	add.w	r2, r7, #24
 8004634:	f107 030c 	add.w	r3, r7, #12
 8004638:	4611      	mov	r1, r2
 800463a:	4618      	mov	r0, r3
 800463c:	f01f fd66 	bl	802410c <strcat>
 8004640:	e02f      	b.n	80046a2 <ftoa+0x116>
    } else if (strlen(intString1) == 2) {
 8004642:	f107 0318 	add.w	r3, r7, #24
 8004646:	4618      	mov	r0, r3
 8004648:	f7fb fdc6 	bl	80001d8 <strlen>
 800464c:	4603      	mov	r3, r0
 800464e:	2b02      	cmp	r3, #2
 8004650:	d10c      	bne.n	800466c <ftoa+0xe0>
        intString2[1] = '0';
 8004652:	2330      	movs	r3, #48	; 0x30
 8004654:	737b      	strb	r3, [r7, #13]
        intString2[2] = '0';
 8004656:	2330      	movs	r3, #48	; 0x30
 8004658:	73bb      	strb	r3, [r7, #14]
        strcat(intString2, intString1);
 800465a:	f107 0218 	add.w	r2, r7, #24
 800465e:	f107 030c 	add.w	r3, r7, #12
 8004662:	4611      	mov	r1, r2
 8004664:	4618      	mov	r0, r3
 8004666:	f01f fd51 	bl	802410c <strcat>
 800466a:	e01a      	b.n	80046a2 <ftoa+0x116>
    } else if (strlen(intString1) == 3) {
 800466c:	f107 0318 	add.w	r3, r7, #24
 8004670:	4618      	mov	r0, r3
 8004672:	f7fb fdb1 	bl	80001d8 <strlen>
 8004676:	4603      	mov	r3, r0
 8004678:	2b03      	cmp	r3, #3
 800467a:	d10a      	bne.n	8004692 <ftoa+0x106>
        intString2[1] = '0';
 800467c:	2330      	movs	r3, #48	; 0x30
 800467e:	737b      	strb	r3, [r7, #13]
        strcat(intString2, intString1);
 8004680:	f107 0218 	add.w	r2, r7, #24
 8004684:	f107 030c 	add.w	r3, r7, #12
 8004688:	4611      	mov	r1, r2
 800468a:	4618      	mov	r0, r3
 800468c:	f01f fd3e 	bl	802410c <strcat>
 8004690:	e007      	b.n	80046a2 <ftoa+0x116>
    } else {
        strcat(intString2, intString1);
 8004692:	f107 0218 	add.w	r2, r7, #24
 8004696:	f107 030c 	add.w	r3, r7, #12
 800469a:	4611      	mov	r1, r2
 800469c:	4618      	mov	r0, r3
 800469e:	f01f fd35 	bl	802410c <strcat>
    }

    dpLocation = strlen(intString2) - 3;
 80046a2:	f107 030c 	add.w	r3, r7, #12
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fb fd96 	bl	80001d8 <strlen>
 80046ac:	4603      	mov	r3, r0
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	3b03      	subs	r3, #3
 80046b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    strncpy(floatString, intString2, dpLocation);
 80046b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80046ba:	f107 030c 	add.w	r3, r7, #12
 80046be:	4619      	mov	r1, r3
 80046c0:	6838      	ldr	r0, [r7, #0]
 80046c2:	f01f fd69 	bl	8024198 <strncpy>
    floatString[dpLocation] = '\0';
 80046c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	4413      	add	r3, r2
 80046ce:	2200      	movs	r2, #0
 80046d0:	701a      	strb	r2, [r3, #0]
    strcat(floatString, decimalPoint);
 80046d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046d4:	6838      	ldr	r0, [r7, #0]
 80046d6:	f01f fd19 	bl	802410c <strcat>
    strcat(floatString, intString2 + dpLocation);
 80046da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046de:	f107 020c 	add.w	r2, r7, #12
 80046e2:	4413      	add	r3, r2
 80046e4:	4619      	mov	r1, r3
 80046e6:	6838      	ldr	r0, [r7, #0]
 80046e8:	f01f fd10 	bl	802410c <strcat>

    return floatString;
 80046ec:	683b      	ldr	r3, [r7, #0]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3730      	adds	r7, #48	; 0x30
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	08027ab8 	.word	0x08027ab8
 80046fc:	3a03126f 	.word	0x3a03126f
 8004700:	447a0000 	.word	0x447a0000

08004704 <cliAux>:

static int cliAux(int argc, char *argv[])
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
    int i, val = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	60bb      	str	r3, [r7, #8]

    if (argc == 0) {
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d114      	bne.n	8004742 <cliAux+0x3e>
        // print out aux channel settings
        for (i = 0; i < CHECKBOXITEMS; i++)
 8004718:	2300      	movs	r3, #0
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	e00d      	b.n	800473a <cliAux+0x36>
            pifLog_Printf(LT_NONE, "aux %u %u\r\n", i, cfg.activate[i]);
 800471e:	4a1d      	ldr	r2, [pc, #116]	; (8004794 <cliAux+0x90>)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	3312      	adds	r3, #18
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	491a      	ldr	r1, [pc, #104]	; (8004798 <cliAux+0x94>)
 800472e:	2000      	movs	r0, #0
 8004730:	f00f fa62 	bl	8013bf8 <pifLog_Printf>
        for (i = 0; i < CHECKBOXITEMS; i++)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3301      	adds	r3, #1
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b18      	cmp	r3, #24
 800473e:	ddee      	ble.n	800471e <cliAux+0x1a>
 8004740:	e023      	b.n	800478a <cliAux+0x86>
    } else if (argc > 1) {
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b01      	cmp	r3, #1
 8004746:	dd1d      	ble.n	8004784 <cliAux+0x80>
        i = atoi(argv[0]);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f01f fb61 	bl	8023e14 <atoi>
 8004752:	60f8      	str	r0, [r7, #12]
        if (i < CHECKBOXITEMS) {
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b18      	cmp	r3, #24
 8004758:	dc0e      	bgt.n	8004778 <cliAux+0x74>
            val = atoi(argv[1]);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	3304      	adds	r3, #4
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f01f fb57 	bl	8023e14 <atoi>
 8004766:	60b8      	str	r0, [r7, #8]
            cfg.activate[i] = val;
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	490a      	ldr	r1, [pc, #40]	; (8004794 <cliAux+0x90>)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3312      	adds	r3, #18
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	440b      	add	r3, r1
 8004774:	605a      	str	r2, [r3, #4]
 8004776:	e008      	b.n	800478a <cliAux+0x86>
        } else {
            pifLog_Printf(LT_NONE, "Invalid Feature index: must be < %u\r\n", CHECKBOXITEMS);
 8004778:	2219      	movs	r2, #25
 800477a:	4908      	ldr	r1, [pc, #32]	; (800479c <cliAux+0x98>)
 800477c:	2000      	movs	r0, #0
 800477e:	f00f fa3b 	bl	8013bf8 <pifLog_Printf>
 8004782:	e002      	b.n	800478a <cliAux+0x86>
        }
    } else {
    	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8004784:	f06f 0302 	mvn.w	r3, #2
 8004788:	e000      	b.n	800478c <cliAux+0x88>
    }
	return PIF_LOG_CMD_NO_ERROR;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20000e08 	.word	0x20000e08
 8004798:	08027abc 	.word	0x08027abc
 800479c:	08027ac8 	.word	0x08027ac8

080047a0 <cliCMix>:

static int cliCMix(int argc, char *argv[])
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08c      	sub	sp, #48	; 0x30
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
    int i, check = 0;
 80047aa:	2300      	movs	r3, #0
 80047ac:	62bb      	str	r3, [r7, #40]	; 0x28
    int num_motors = 0;
 80047ae:	2300      	movs	r3, #0
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
    char buf[16];
    float mixsum[3];

    if (argc == 0) {
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f040 80d8 	bne.w	800496a <cliCMix+0x1ca>
        pifLog_Print(LT_NONE, "Custom mixer: \r\nMotor\tThr\tRoll\tPitch\tYaw\r\n");
 80047ba:	4999      	ldr	r1, [pc, #612]	; (8004a20 <cliCMix+0x280>)
 80047bc:	2000      	movs	r0, #0
 80047be:	f00f f98d 	bl	8013adc <pifLog_Print>
        for (i = 0; i < MAX_MOTORS; i++) {
 80047c2:	2300      	movs	r3, #0
 80047c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047c6:	e069      	b.n	800489c <cliCMix+0xfc>
            if (mcfg.customMixer[i].throttle == 0.0f)
 80047c8:	4a96      	ldr	r2, [pc, #600]	; (8004a24 <cliCMix+0x284>)
 80047ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047cc:	3301      	adds	r3, #1
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	4413      	add	r3, r2
 80047d2:	edd3 7a00 	vldr	s15, [r3]
 80047d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80047da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047de:	d061      	beq.n	80048a4 <cliCMix+0x104>
                break;
            num_motors++;
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	3301      	adds	r3, #1
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 80047e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e8:	3301      	adds	r3, #1
 80047ea:	461a      	mov	r2, r3
 80047ec:	498e      	ldr	r1, [pc, #568]	; (8004a28 <cliCMix+0x288>)
 80047ee:	2000      	movs	r0, #0
 80047f0:	f00f fa02 	bl	8013bf8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].throttle, buf));
 80047f4:	4a8b      	ldr	r2, [pc, #556]	; (8004a24 <cliCMix+0x284>)
 80047f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f8:	3301      	adds	r3, #1
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	4413      	add	r3, r2
 80047fe:	edd3 7a00 	vldr	s15, [r3]
 8004802:	f107 0314 	add.w	r3, r7, #20
 8004806:	4618      	mov	r0, r3
 8004808:	eeb0 0a67 	vmov.f32	s0, s15
 800480c:	f7ff febe 	bl	800458c <ftoa>
 8004810:	4603      	mov	r3, r0
 8004812:	461a      	mov	r2, r3
 8004814:	4985      	ldr	r1, [pc, #532]	; (8004a2c <cliCMix+0x28c>)
 8004816:	2000      	movs	r0, #0
 8004818:	f00f f9ee 	bl	8013bf8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].roll, buf));
 800481c:	4a81      	ldr	r2, [pc, #516]	; (8004a24 <cliCMix+0x284>)
 800481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004820:	3301      	adds	r3, #1
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	4413      	add	r3, r2
 8004826:	3304      	adds	r3, #4
 8004828:	edd3 7a00 	vldr	s15, [r3]
 800482c:	f107 0314 	add.w	r3, r7, #20
 8004830:	4618      	mov	r0, r3
 8004832:	eeb0 0a67 	vmov.f32	s0, s15
 8004836:	f7ff fea9 	bl	800458c <ftoa>
 800483a:	4603      	mov	r3, r0
 800483c:	461a      	mov	r2, r3
 800483e:	497b      	ldr	r1, [pc, #492]	; (8004a2c <cliCMix+0x28c>)
 8004840:	2000      	movs	r0, #0
 8004842:	f00f f9d9 	bl	8013bf8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].pitch, buf));
 8004846:	4a77      	ldr	r2, [pc, #476]	; (8004a24 <cliCMix+0x284>)
 8004848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	4413      	add	r3, r2
 800484e:	3318      	adds	r3, #24
 8004850:	edd3 7a00 	vldr	s15, [r3]
 8004854:	f107 0314 	add.w	r3, r7, #20
 8004858:	4618      	mov	r0, r3
 800485a:	eeb0 0a67 	vmov.f32	s0, s15
 800485e:	f7ff fe95 	bl	800458c <ftoa>
 8004862:	4603      	mov	r3, r0
 8004864:	461a      	mov	r2, r3
 8004866:	4971      	ldr	r1, [pc, #452]	; (8004a2c <cliCMix+0x28c>)
 8004868:	2000      	movs	r0, #0
 800486a:	f00f f9c5 	bl	8013bf8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\r\n", ftoa(mcfg.customMixer[i].yaw, buf));
 800486e:	4a6d      	ldr	r2, [pc, #436]	; (8004a24 <cliCMix+0x284>)
 8004870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	4413      	add	r3, r2
 8004876:	331c      	adds	r3, #28
 8004878:	edd3 7a00 	vldr	s15, [r3]
 800487c:	f107 0314 	add.w	r3, r7, #20
 8004880:	4618      	mov	r0, r3
 8004882:	eeb0 0a67 	vmov.f32	s0, s15
 8004886:	f7ff fe81 	bl	800458c <ftoa>
 800488a:	4603      	mov	r3, r0
 800488c:	461a      	mov	r2, r3
 800488e:	4968      	ldr	r1, [pc, #416]	; (8004a30 <cliCMix+0x290>)
 8004890:	2000      	movs	r0, #0
 8004892:	f00f f9b1 	bl	8013bf8 <pifLog_Printf>
        for (i = 0; i < MAX_MOTORS; i++) {
 8004896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004898:	3301      	adds	r3, #1
 800489a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800489c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489e:	2b0b      	cmp	r3, #11
 80048a0:	dd92      	ble.n	80047c8 <cliCMix+0x28>
 80048a2:	e000      	b.n	80048a6 <cliCMix+0x106>
                break;
 80048a4:	bf00      	nop
        }
        mixsum[0] = mixsum[1] = mixsum[2] = 0.0f;
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < num_motors; i++) {
 80048b4:	2300      	movs	r3, #0
 80048b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b8:	e02a      	b.n	8004910 <cliCMix+0x170>
            mixsum[0] += mcfg.customMixer[i].roll;
 80048ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80048be:	4a59      	ldr	r2, [pc, #356]	; (8004a24 <cliCMix+0x284>)
 80048c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c2:	3301      	adds	r3, #1
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	4413      	add	r3, r2
 80048c8:	3304      	adds	r3, #4
 80048ca:	edd3 7a00 	vldr	s15, [r3]
 80048ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048d2:	edc7 7a02 	vstr	s15, [r7, #8]
            mixsum[1] += mcfg.customMixer[i].pitch;
 80048d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80048da:	4a52      	ldr	r2, [pc, #328]	; (8004a24 <cliCMix+0x284>)
 80048dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	4413      	add	r3, r2
 80048e2:	3318      	adds	r3, #24
 80048e4:	edd3 7a00 	vldr	s15, [r3]
 80048e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048ec:	edc7 7a03 	vstr	s15, [r7, #12]
            mixsum[2] += mcfg.customMixer[i].yaw;
 80048f0:	ed97 7a04 	vldr	s14, [r7, #16]
 80048f4:	4a4b      	ldr	r2, [pc, #300]	; (8004a24 <cliCMix+0x284>)
 80048f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	4413      	add	r3, r2
 80048fc:	331c      	adds	r3, #28
 80048fe:	edd3 7a00 	vldr	s15, [r3]
 8004902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004906:	edc7 7a04 	vstr	s15, [r7, #16]
        for (i = 0; i < num_motors; i++) {
 800490a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490c:	3301      	adds	r3, #1
 800490e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	429a      	cmp	r2, r3
 8004916:	dbd0      	blt.n	80048ba <cliCMix+0x11a>
        }
        pifLog_Print(LT_NONE, "Sanity check:\t");
 8004918:	4946      	ldr	r1, [pc, #280]	; (8004a34 <cliCMix+0x294>)
 800491a:	2000      	movs	r0, #0
 800491c:	f00f f8de 	bl	8013adc <pifLog_Print>
        for (i = 0; i < 3; i++)
 8004920:	2300      	movs	r3, #0
 8004922:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004924:	e019      	b.n	800495a <cliCMix+0x1ba>
            pifLog_Print(LT_NONE, fabsf(mixsum[i]) > 0.01f ? "NG\t" : "OK\t");
 8004926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	3330      	adds	r3, #48	; 0x30
 800492c:	443b      	add	r3, r7
 800492e:	3b28      	subs	r3, #40	; 0x28
 8004930:	edd3 7a00 	vldr	s15, [r3]
 8004934:	eef0 7ae7 	vabs.f32	s15, s15
 8004938:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004a38 <cliCMix+0x298>
 800493c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004944:	dd01      	ble.n	800494a <cliCMix+0x1aa>
 8004946:	4b3d      	ldr	r3, [pc, #244]	; (8004a3c <cliCMix+0x29c>)
 8004948:	e000      	b.n	800494c <cliCMix+0x1ac>
 800494a:	4b3d      	ldr	r3, [pc, #244]	; (8004a40 <cliCMix+0x2a0>)
 800494c:	4619      	mov	r1, r3
 800494e:	2000      	movs	r0, #0
 8004950:	f00f f8c4 	bl	8013adc <pifLog_Print>
        for (i = 0; i < 3; i++)
 8004954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004956:	3301      	adds	r3, #1
 8004958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495c:	2b02      	cmp	r3, #2
 800495e:	dde2      	ble.n	8004926 <cliCMix+0x186>
        pifLog_Print(LT_NONE, "\r\n");
 8004960:	4938      	ldr	r1, [pc, #224]	; (8004a44 <cliCMix+0x2a4>)
 8004962:	2000      	movs	r0, #0
 8004964:	f00f f8ba 	bl	8013adc <pifLog_Print>
 8004968:	e0eb      	b.n	8004b42 <cliCMix+0x3a2>
    } else if (strcasecmp(argv[0], "reset") == 0) {
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4936      	ldr	r1, [pc, #216]	; (8004a48 <cliCMix+0x2a8>)
 8004970:	4618      	mov	r0, r3
 8004972:	f01f fbb1 	bl	80240d8 <strcasecmp>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d111      	bne.n	80049a0 <cliCMix+0x200>
        // erase custom mixer
        for (i = 0; i < MAX_MOTORS; i++)
 800497c:	2300      	movs	r3, #0
 800497e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004980:	e00a      	b.n	8004998 <cliCMix+0x1f8>
            mcfg.customMixer[i].throttle = 0.0f;
 8004982:	4a28      	ldr	r2, [pc, #160]	; (8004a24 <cliCMix+0x284>)
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	3301      	adds	r3, #1
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	4413      	add	r3, r2
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
        for (i = 0; i < MAX_MOTORS; i++)
 8004992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004994:	3301      	adds	r3, #1
 8004996:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499a:	2b0b      	cmp	r3, #11
 800499c:	ddf1      	ble.n	8004982 <cliCMix+0x1e2>
 800499e:	e0d0      	b.n	8004b42 <cliCMix+0x3a2>
    } else if (strcasecmp(argv[0], "load") == 0) {
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4929      	ldr	r1, [pc, #164]	; (8004a4c <cliCMix+0x2ac>)
 80049a6:	4618      	mov	r0, r3
 80049a8:	f01f fb96 	bl	80240d8 <strcasecmp>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d154      	bne.n	8004a5c <cliCMix+0x2bc>
        if (argc > 1) {
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	dd2f      	ble.n	8004a18 <cliCMix+0x278>
            for (i = 0; ; i++) {
 80049b8:	2300      	movs	r3, #0
 80049ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (mixerNames[i] == NULL) {
 80049bc:	4a24      	ldr	r2, [pc, #144]	; (8004a50 <cliCMix+0x2b0>)
 80049be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d104      	bne.n	80049d2 <cliCMix+0x232>
                    pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 80049c8:	4922      	ldr	r1, [pc, #136]	; (8004a54 <cliCMix+0x2b4>)
 80049ca:	2000      	movs	r0, #0
 80049cc:	f00f f886 	bl	8013adc <pifLog_Print>
                    break;
 80049d0:	e0b7      	b.n	8004b42 <cliCMix+0x3a2>
                }
                if (strcasecmp(argv[1], mixerNames[i]) == 0) {
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	3304      	adds	r3, #4
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	491d      	ldr	r1, [pc, #116]	; (8004a50 <cliCMix+0x2b0>)
 80049da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80049e0:	4619      	mov	r1, r3
 80049e2:	4610      	mov	r0, r2
 80049e4:	f01f fb78 	bl	80240d8 <strcasecmp>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d110      	bne.n	8004a10 <cliCMix+0x270>
                    mixerLoadMix(i);
 80049ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049f0:	f006 fd9c 	bl	800b52c <mixerLoadMix>
                    pifLog_Printf(LT_NONE, "Loaded %s mix...\r\n", mixerNames[i]);
 80049f4:	4a16      	ldr	r2, [pc, #88]	; (8004a50 <cliCMix+0x2b0>)
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049fc:	461a      	mov	r2, r3
 80049fe:	4916      	ldr	r1, [pc, #88]	; (8004a58 <cliCMix+0x2b8>)
 8004a00:	2000      	movs	r0, #0
 8004a02:	f00f f8f9 	bl	8013bf8 <pifLog_Printf>
                    cliCMix(1, NULL);
 8004a06:	2100      	movs	r1, #0
 8004a08:	2001      	movs	r0, #1
 8004a0a:	f7ff fec9 	bl	80047a0 <cliCMix>
                    break;
 8004a0e:	e098      	b.n	8004b42 <cliCMix+0x3a2>
            for (i = 0; ; i++) {
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	3301      	adds	r3, #1
 8004a14:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (mixerNames[i] == NULL) {
 8004a16:	e7d1      	b.n	80049bc <cliCMix+0x21c>
                }
            }
        }
        else {
        	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8004a18:	f06f 0302 	mvn.w	r3, #2
 8004a1c:	e092      	b.n	8004b44 <cliCMix+0x3a4>
 8004a1e:	bf00      	nop
 8004a20:	08027af0 	.word	0x08027af0
 8004a24:	2000089c 	.word	0x2000089c
 8004a28:	08027b1c 	.word	0x08027b1c
 8004a2c:	08027b24 	.word	0x08027b24
 8004a30:	08027b28 	.word	0x08027b28
 8004a34:	08027b30 	.word	0x08027b30
 8004a38:	3c23d70a 	.word	0x3c23d70a
 8004a3c:	08027b40 	.word	0x08027b40
 8004a40:	08027b44 	.word	0x08027b44
 8004a44:	08027b48 	.word	0x08027b48
 8004a48:	08027b4c 	.word	0x08027b4c
 8004a4c:	08027b54 	.word	0x08027b54
 8004a50:	08028e0c 	.word	0x08028e0c
 8004a54:	08027b5c 	.word	0x08027b5c
 8004a58:	08027b74 	.word	0x08027b74
        }
    } else {
        i = atoi(argv[0]); // get motor number
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f01f f9d7 	bl	8023e14 <atoi>
 8004a66:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (--i < MAX_MOTORS) {
 8004a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a70:	2b0b      	cmp	r3, #11
 8004a72:	dc61      	bgt.n	8004b38 <cliCMix+0x398>
            if (argc > 1) {
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	dd11      	ble.n	8004a9e <cliCMix+0x2fe>
                mcfg.customMixer[i].throttle = _atof(argv[1]);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7ff fc8f 	bl	80043a4 <_atof>
 8004a86:	eef0 7a40 	vmov.f32	s15, s0
 8004a8a:	4a30      	ldr	r2, [pc, #192]	; (8004b4c <cliCMix+0x3ac>)
 8004a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8e:	3301      	adds	r3, #1
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	4413      	add	r3, r2
 8004a94:	edc3 7a00 	vstr	s15, [r3]
                check++;
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 2) {
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	dd12      	ble.n	8004aca <cliCMix+0x32a>
                mcfg.customMixer[i].roll = _atof(argv[2]);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	3308      	adds	r3, #8
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff fc7a 	bl	80043a4 <_atof>
 8004ab0:	eef0 7a40 	vmov.f32	s15, s0
 8004ab4:	4a25      	ldr	r2, [pc, #148]	; (8004b4c <cliCMix+0x3ac>)
 8004ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab8:	3301      	adds	r3, #1
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	4413      	add	r3, r2
 8004abe:	3304      	adds	r3, #4
 8004ac0:	edc3 7a00 	vstr	s15, [r3]
                check++;
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 3) {
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	dd11      	ble.n	8004af4 <cliCMix+0x354>
                mcfg.customMixer[i].pitch = _atof(argv[3]);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	330c      	adds	r3, #12
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7ff fc64 	bl	80043a4 <_atof>
 8004adc:	eef0 7a40 	vmov.f32	s15, s0
 8004ae0:	4a1a      	ldr	r2, [pc, #104]	; (8004b4c <cliCMix+0x3ac>)
 8004ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3318      	adds	r3, #24
 8004aea:	edc3 7a00 	vstr	s15, [r3]
                check++;
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	3301      	adds	r3, #1
 8004af2:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 4) {
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	dd11      	ble.n	8004b1e <cliCMix+0x37e>
                mcfg.customMixer[i].yaw = _atof(argv[4]);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	3310      	adds	r3, #16
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff fc4f 	bl	80043a4 <_atof>
 8004b06:	eef0 7a40 	vmov.f32	s15, s0
 8004b0a:	4a10      	ldr	r2, [pc, #64]	; (8004b4c <cliCMix+0x3ac>)
 8004b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	4413      	add	r3, r2
 8004b12:	331c      	adds	r3, #28
 8004b14:	edc3 7a00 	vstr	s15, [r3]
                check++;
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (check != 4) {
 8004b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d004      	beq.n	8004b2e <cliCMix+0x38e>
                pifLog_Print(LT_NONE, "Wrong number of arguments, needs idx thr roll pitch yaw\r\n");
 8004b24:	490a      	ldr	r1, [pc, #40]	; (8004b50 <cliCMix+0x3b0>)
 8004b26:	2000      	movs	r0, #0
 8004b28:	f00e ffd8 	bl	8013adc <pifLog_Print>
 8004b2c:	e009      	b.n	8004b42 <cliCMix+0x3a2>
            } else {
                cliCMix(1, NULL);
 8004b2e:	2100      	movs	r1, #0
 8004b30:	2001      	movs	r0, #1
 8004b32:	f7ff fe35 	bl	80047a0 <cliCMix>
 8004b36:	e004      	b.n	8004b42 <cliCMix+0x3a2>
            }
        } else {
            pifLog_Printf(LT_NONE, "Motor number must be between 1 and %d\r\n", MAX_MOTORS);
 8004b38:	220c      	movs	r2, #12
 8004b3a:	4906      	ldr	r1, [pc, #24]	; (8004b54 <cliCMix+0x3b4>)
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	f00f f85b 	bl	8013bf8 <pifLog_Printf>
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3730      	adds	r7, #48	; 0x30
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	2000089c 	.word	0x2000089c
 8004b50:	08027b88 	.word	0x08027b88
 8004b54:	08027bc4 	.word	0x08027bc4

08004b58 <cliServo>:

static int cliServo(int argc, char *argv[])
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08c      	sub	sp, #48	; 0x30
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
    int i;
    int8_t servoRates[8] = { 30, 30, 100, 100, 100, 100, 100, 100 };
 8004b62:	4aa0      	ldr	r2, [pc, #640]	; (8004de4 <cliServo+0x28c>)
 8004b64:	f107 0320 	add.w	r3, r7, #32
 8004b68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b6c:	e883 0003 	stmia.w	r3, {r0, r1}

    if (argc == 0) {
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d15c      	bne.n	8004c30 <cliServo+0xd8>
        pifLog_Print(LT_NONE, "servo servo_number\tmin\tmiddle\tmax\trate\r\n");
 8004b76:	499c      	ldr	r1, [pc, #624]	; (8004de8 <cliServo+0x290>)
 8004b78:	2000      	movs	r0, #0
 8004b7a:	f00e ffaf 	bl	8013adc <pifLog_Print>
        for (i = 0; i < MAX_SERVOS; i++) {
 8004b7e:	2300      	movs	r3, #0
 8004b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b82:	e049      	b.n	8004c18 <cliServo+0xc0>
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 8004b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b86:	3301      	adds	r3, #1
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4998      	ldr	r1, [pc, #608]	; (8004dec <cliServo+0x294>)
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	f00f f833 	bl	8013bf8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].min);
 8004b92:	4997      	ldr	r1, [pc, #604]	; (8004df0 <cliServo+0x298>)
 8004b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b96:	4613      	mov	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	440b      	add	r3, r1
 8004ba0:	33b8      	adds	r3, #184	; 0xb8
 8004ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	4992      	ldr	r1, [pc, #584]	; (8004df4 <cliServo+0x29c>)
 8004baa:	2000      	movs	r0, #0
 8004bac:	f00f f824 	bl	8013bf8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].middle);
 8004bb0:	498f      	ldr	r1, [pc, #572]	; (8004df0 <cliServo+0x298>)
 8004bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	440b      	add	r3, r1
 8004bbe:	33bc      	adds	r3, #188	; 0xbc
 8004bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	498b      	ldr	r1, [pc, #556]	; (8004df4 <cliServo+0x29c>)
 8004bc8:	2000      	movs	r0, #0
 8004bca:	f00f f815 	bl	8013bf8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].max);
 8004bce:	4988      	ldr	r1, [pc, #544]	; (8004df0 <cliServo+0x298>)
 8004bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	440b      	add	r3, r1
 8004bdc:	33ba      	adds	r3, #186	; 0xba
 8004bde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004be2:	461a      	mov	r2, r3
 8004be4:	4983      	ldr	r1, [pc, #524]	; (8004df4 <cliServo+0x29c>)
 8004be6:	2000      	movs	r0, #0
 8004be8:	f00f f806 	bl	8013bf8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].rate);
 8004bec:	4980      	ldr	r1, [pc, #512]	; (8004df0 <cliServo+0x298>)
 8004bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	440b      	add	r3, r1
 8004bfa:	33be      	adds	r3, #190	; 0xbe
 8004bfc:	f993 3000 	ldrsb.w	r3, [r3]
 8004c00:	461a      	mov	r2, r3
 8004c02:	497c      	ldr	r1, [pc, #496]	; (8004df4 <cliServo+0x29c>)
 8004c04:	2000      	movs	r0, #0
 8004c06:	f00e fff7 	bl	8013bf8 <pifLog_Printf>
            pifLog_Print(LT_NONE, "\r\n");
 8004c0a:	497b      	ldr	r1, [pc, #492]	; (8004df8 <cliServo+0x2a0>)
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	f00e ff65 	bl	8013adc <pifLog_Print>
        for (i = 0; i < MAX_SERVOS; i++) {
 8004c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c14:	3301      	adds	r3, #1
 8004c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1a:	2b07      	cmp	r3, #7
 8004c1c:	ddb2      	ble.n	8004b84 <cliServo+0x2c>
        }
        pifLog_Print(LT_NONE, "\r\n");
 8004c1e:	4976      	ldr	r1, [pc, #472]	; (8004df8 <cliServo+0x2a0>)
 8004c20:	2000      	movs	r0, #0
 8004c22:	f00e ff5b 	bl	8013adc <pifLog_Print>
        pifLog_Print(LT_NONE, "Reset servos: servo reset\r\n");
 8004c26:	4975      	ldr	r1, [pc, #468]	; (8004dfc <cliServo+0x2a4>)
 8004c28:	2000      	movs	r0, #0
 8004c2a:	f00e ff57 	bl	8013adc <pifLog_Print>
 8004c2e:	e0d4      	b.n	8004dda <cliServo+0x282>
    } else if (strcasecmp(argv[0], "reset") == 0) {
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4972      	ldr	r1, [pc, #456]	; (8004e00 <cliServo+0x2a8>)
 8004c36:	4618      	mov	r0, r3
 8004c38:	f01f fa4e 	bl	80240d8 <strcasecmp>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d13a      	bne.n	8004cb8 <cliServo+0x160>
        // erase servo config
        for (i = 0; i < MAX_SERVOS; i++) {
 8004c42:	2300      	movs	r3, #0
 8004c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c46:	e033      	b.n	8004cb0 <cliServo+0x158>
            cfg.servoConf[i].min = 1020;
 8004c48:	4969      	ldr	r1, [pc, #420]	; (8004df0 <cliServo+0x298>)
 8004c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	440b      	add	r3, r1
 8004c56:	33b8      	adds	r3, #184	; 0xb8
 8004c58:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8004c5c:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].max = 2000;
 8004c5e:	4964      	ldr	r1, [pc, #400]	; (8004df0 <cliServo+0x298>)
 8004c60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	440b      	add	r3, r1
 8004c6c:	33ba      	adds	r3, #186	; 0xba
 8004c6e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004c72:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].middle = 1500;
 8004c74:	495e      	ldr	r1, [pc, #376]	; (8004df0 <cliServo+0x298>)
 8004c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	440b      	add	r3, r1
 8004c82:	33bc      	adds	r3, #188	; 0xbc
 8004c84:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004c88:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].rate = servoRates[i];
 8004c8a:	f107 0220 	add.w	r2, r7, #32
 8004c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c90:	4413      	add	r3, r2
 8004c92:	f993 0000 	ldrsb.w	r0, [r3]
 8004c96:	4956      	ldr	r1, [pc, #344]	; (8004df0 <cliServo+0x298>)
 8004c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	440b      	add	r3, r1
 8004ca4:	33be      	adds	r3, #190	; 0xbe
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++) {
 8004caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cac:	3301      	adds	r3, #1
 8004cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb2:	2b07      	cmp	r3, #7
 8004cb4:	ddc8      	ble.n	8004c48 <cliServo+0xf0>
 8004cb6:	e090      	b.n	8004dda <cliServo+0x282>
        }
    } else {
        enum {SERVO = 0, MIN, MIDDLE, MAX, RATE, ARGS_COUNT};
        int args[ARGS_COUNT], check = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	62bb      	str	r3, [r7, #40]	; 0x28

        while (check < argc && check < ARGS_COUNT) {
 8004cbc:	e011      	b.n	8004ce2 <cliServo+0x18a>
            args[check] = atoi(argv[check]);
 8004cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f01f f8a3 	bl	8023e14 <atoi>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	3330      	adds	r3, #48	; 0x30
 8004cd6:	443b      	add	r3, r7
 8004cd8:	f843 2c24 	str.w	r2, [r3, #-36]
            check++;
 8004cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cde:	3301      	adds	r3, #1
 8004ce0:	62bb      	str	r3, [r7, #40]	; 0x28
        while (check < argc && check < ARGS_COUNT) {
 8004ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	da02      	bge.n	8004cf0 <cliServo+0x198>
 8004cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	dde6      	ble.n	8004cbe <cliServo+0x166>
        }

        if (check != ARGS_COUNT) {
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	2b05      	cmp	r3, #5
 8004cf4:	d005      	beq.n	8004d02 <cliServo+0x1aa>
            pifLog_Print(LT_NONE, "ERR: Wrong number of arguments, needs servo_number min middle max rate\r\n");
 8004cf6:	4943      	ldr	r1, [pc, #268]	; (8004e04 <cliServo+0x2ac>)
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	f00e feef 	bl	8013adc <pifLog_Print>
        	return PIF_LOG_CMD_NO_ERROR;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	e06c      	b.n	8004ddc <cliServo+0x284>
        }

        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS &&
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	dd60      	ble.n	8004dca <cliServo+0x272>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	dc5d      	bgt.n	8004dca <cliServo+0x272>
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004d0e:	693b      	ldr	r3, [r7, #16]
        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS &&
 8004d10:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004d14:	db59      	blt.n	8004dca <cliServo+0x272>
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f640 0234 	movw	r2, #2100	; 0x834
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	dc54      	bgt.n	8004dca <cliServo+0x272>
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004d20:	69bb      	ldr	r3, [r7, #24]
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004d22:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004d26:	db50      	blt.n	8004dca <cliServo+0x272>
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	f640 0234 	movw	r2, #2100	; 0x834
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	dc4b      	bgt.n	8004dca <cliServo+0x272>
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004d32:	697b      	ldr	r3, [r7, #20]
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004d34:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004d38:	db47      	blt.n	8004dca <cliServo+0x272>
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f640 0234 	movw	r2, #2100	; 0x834
 8004d40:	4293      	cmp	r3, r2
 8004d42:	dc42      	bgt.n	8004dca <cliServo+0x272>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004d44:	69fb      	ldr	r3, [r7, #28]
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004d46:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8004d4a:	db3e      	blt.n	8004dca <cliServo+0x272>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	2b64      	cmp	r3, #100	; 0x64
 8004d50:	dc3b      	bgt.n	8004dca <cliServo+0x272>
            args[MIN] <= args[MIDDLE] && args[MIDDLE] <= args[MAX]) {
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	697b      	ldr	r3, [r7, #20]
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004d56:	429a      	cmp	r2, r3
 8004d58:	dc37      	bgt.n	8004dca <cliServo+0x272>
            args[MIN] <= args[MIDDLE] && args[MIDDLE] <= args[MAX]) {
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	dc33      	bgt.n	8004dca <cliServo+0x272>
            args[SERVO]--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	60fb      	str	r3, [r7, #12]
            cfg.servoConf[args[SERVO]].min = args[MIN];
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	b218      	sxth	r0, r3
 8004d6e:	4920      	ldr	r1, [pc, #128]	; (8004df0 <cliServo+0x298>)
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	440b      	add	r3, r1
 8004d7a:	33b8      	adds	r3, #184	; 0xb8
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].max = args[MAX];
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	b218      	sxth	r0, r3
 8004d86:	491a      	ldr	r1, [pc, #104]	; (8004df0 <cliServo+0x298>)
 8004d88:	4613      	mov	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	440b      	add	r3, r1
 8004d92:	33ba      	adds	r3, #186	; 0xba
 8004d94:	4602      	mov	r2, r0
 8004d96:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].middle = args[MIDDLE];
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	b218      	sxth	r0, r3
 8004d9e:	4914      	ldr	r1, [pc, #80]	; (8004df0 <cliServo+0x298>)
 8004da0:	4613      	mov	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	440b      	add	r3, r1
 8004daa:	33bc      	adds	r3, #188	; 0xbc
 8004dac:	4602      	mov	r2, r0
 8004dae:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].rate = args[RATE];
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	b258      	sxtb	r0, r3
 8004db6:	490e      	ldr	r1, [pc, #56]	; (8004df0 <cliServo+0x298>)
 8004db8:	4613      	mov	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	440b      	add	r3, r1
 8004dc2:	33be      	adds	r3, #190	; 0xbe
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	701a      	strb	r2, [r3, #0]
 8004dc8:	e003      	b.n	8004dd2 <cliServo+0x27a>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments, range for min, max and middle [900,2100], min <= middle <= max, range for rate [-100,100]\r\n");
 8004dca:	490f      	ldr	r1, [pc, #60]	; (8004e08 <cliServo+0x2b0>)
 8004dcc:	2000      	movs	r0, #0
 8004dce:	f00e fe85 	bl	8013adc <pifLog_Print>
        cliServo(1, NULL);
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	f7ff febf 	bl	8004b58 <cliServo>
    }
	return PIF_LOG_CMD_NO_ERROR;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3730      	adds	r7, #48	; 0x30
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	08027d00 	.word	0x08027d00
 8004de8:	08027bec 	.word	0x08027bec
 8004dec:	08027b1c 	.word	0x08027b1c
 8004df0:	20000e08 	.word	0x20000e08
 8004df4:	08027c18 	.word	0x08027c18
 8004df8:	08027b48 	.word	0x08027b48
 8004dfc:	08027c1c 	.word	0x08027c1c
 8004e00:	08027b4c 	.word	0x08027b4c
 8004e04:	08027c38 	.word	0x08027c38
 8004e08:	08027c84 	.word	0x08027c84

08004e0c <cliServoMix>:

static int cliServoMix(int argc, char *argv[])
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b090      	sub	sp, #64	; 0x40
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
    int i;
    int args[8], check = 0;
 8004e16:	2300      	movs	r3, #0
 8004e18:	63bb      	str	r3, [r7, #56]	; 0x38

    if (argc == 0) {
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f040 808a 	bne.w	8004f36 <cliServoMix+0x12a>
        pifLog_Print(LT_NONE, "Custom servo mixer: \r\nchange mixer: smix rule\ttarget_channel\tinput_channel\trate\tspeed\t\tmin\tmax\tbox\r\n");
 8004e22:	49aa      	ldr	r1, [pc, #680]	; (80050cc <cliServoMix+0x2c0>)
 8004e24:	2000      	movs	r0, #0
 8004e26:	f00e fe59 	bl	8013adc <pifLog_Print>
        pifLog_Print(LT_NONE, "reset mixer: smix reset\r\nload mixer: smix load\r\nchange direction of channel: smix direction\r\n");
 8004e2a:	49a9      	ldr	r1, [pc, #676]	; (80050d0 <cliServoMix+0x2c4>)
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	f00e fe55 	bl	8013adc <pifLog_Print>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8004e32:	2300      	movs	r3, #0
 8004e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e36:	e074      	b.n	8004f22 <cliServoMix+0x116>
            if (mcfg.customServoMixer[i].rate == 0)
 8004e38:	49a6      	ldr	r1, [pc, #664]	; (80050d4 <cliServoMix+0x2c8>)
 8004e3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	1a9b      	subs	r3, r3, r2
 8004e42:	440b      	add	r3, r1
 8004e44:	33d2      	adds	r3, #210	; 0xd2
 8004e46:	f993 3000 	ldrsb.w	r3, [r3]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d06d      	beq.n	8004f2a <cliServoMix+0x11e>
                break;
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 8004e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e50:	3301      	adds	r3, #1
 8004e52:	461a      	mov	r2, r3
 8004e54:	49a0      	ldr	r1, [pc, #640]	; (80050d8 <cliServoMix+0x2cc>)
 8004e56:	2000      	movs	r0, #0
 8004e58:	f00e fece 	bl	8013bf8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].targetChannel + 1);
 8004e5c:	499d      	ldr	r1, [pc, #628]	; (80050d4 <cliServoMix+0x2c8>)
 8004e5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e60:	4613      	mov	r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	1a9b      	subs	r3, r3, r2
 8004e66:	440b      	add	r3, r1
 8004e68:	33d0      	adds	r3, #208	; 0xd0
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	461a      	mov	r2, r3
 8004e70:	499a      	ldr	r1, [pc, #616]	; (80050dc <cliServoMix+0x2d0>)
 8004e72:	2000      	movs	r0, #0
 8004e74:	f00e fec0 	bl	8013bf8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].fromChannel + 1);
 8004e78:	4996      	ldr	r1, [pc, #600]	; (80050d4 <cliServoMix+0x2c8>)
 8004e7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	1a9b      	subs	r3, r3, r2
 8004e82:	440b      	add	r3, r1
 8004e84:	33d1      	adds	r3, #209	; 0xd1
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	4993      	ldr	r1, [pc, #588]	; (80050dc <cliServoMix+0x2d0>)
 8004e8e:	2000      	movs	r0, #0
 8004e90:	f00e feb2 	bl	8013bf8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].rate);
 8004e94:	498f      	ldr	r1, [pc, #572]	; (80050d4 <cliServoMix+0x2c8>)
 8004e96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e98:	4613      	mov	r3, r2
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	1a9b      	subs	r3, r3, r2
 8004e9e:	440b      	add	r3, r1
 8004ea0:	33d2      	adds	r3, #210	; 0xd2
 8004ea2:	f993 3000 	ldrsb.w	r3, [r3]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	498c      	ldr	r1, [pc, #560]	; (80050dc <cliServoMix+0x2d0>)
 8004eaa:	2000      	movs	r0, #0
 8004eac:	f00e fea4 	bl	8013bf8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].speed);
 8004eb0:	4988      	ldr	r1, [pc, #544]	; (80050d4 <cliServoMix+0x2c8>)
 8004eb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	1a9b      	subs	r3, r3, r2
 8004eba:	440b      	add	r3, r1
 8004ebc:	33d3      	adds	r3, #211	; 0xd3
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	4986      	ldr	r1, [pc, #536]	; (80050dc <cliServoMix+0x2d0>)
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	f00e fe97 	bl	8013bf8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].min);
 8004eca:	4982      	ldr	r1, [pc, #520]	; (80050d4 <cliServoMix+0x2c8>)
 8004ecc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ece:	4613      	mov	r3, r2
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	33d4      	adds	r3, #212	; 0xd4
 8004ed8:	f993 3000 	ldrsb.w	r3, [r3]
 8004edc:	461a      	mov	r2, r3
 8004ede:	497f      	ldr	r1, [pc, #508]	; (80050dc <cliServoMix+0x2d0>)
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	f00e fe89 	bl	8013bf8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].max);
 8004ee6:	497b      	ldr	r1, [pc, #492]	; (80050d4 <cliServoMix+0x2c8>)
 8004ee8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004eea:	4613      	mov	r3, r2
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	1a9b      	subs	r3, r3, r2
 8004ef0:	440b      	add	r3, r1
 8004ef2:	33d5      	adds	r3, #213	; 0xd5
 8004ef4:	f993 3000 	ldrsb.w	r3, [r3]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4978      	ldr	r1, [pc, #480]	; (80050dc <cliServoMix+0x2d0>)
 8004efc:	2000      	movs	r0, #0
 8004efe:	f00e fe7b 	bl	8013bf8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\r\n", mcfg.customServoMixer[i].box);
 8004f02:	4974      	ldr	r1, [pc, #464]	; (80050d4 <cliServoMix+0x2c8>)
 8004f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f06:	4613      	mov	r3, r2
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	1a9b      	subs	r3, r3, r2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	33d6      	adds	r3, #214	; 0xd6
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	461a      	mov	r2, r3
 8004f14:	4972      	ldr	r1, [pc, #456]	; (80050e0 <cliServoMix+0x2d4>)
 8004f16:	2000      	movs	r0, #0
 8004f18:	f00e fe6e 	bl	8013bf8 <pifLog_Printf>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8004f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f1e:	3301      	adds	r3, #1
 8004f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f24:	2b0f      	cmp	r3, #15
 8004f26:	dd87      	ble.n	8004e38 <cliServoMix+0x2c>
 8004f28:	e000      	b.n	8004f2c <cliServoMix+0x120>
                break;
 8004f2a:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8004f2c:	496d      	ldr	r1, [pc, #436]	; (80050e4 <cliServoMix+0x2d8>)
 8004f2e:	2000      	movs	r0, #0
 8004f30:	f00e fdd4 	bl	8013adc <pifLog_Print>
 8004f34:	e235      	b.n	80053a2 <cliServoMix+0x596>
    } else if (strcasecmp(argv[0], "reset") == 0) {
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	496b      	ldr	r1, [pc, #428]	; (80050e8 <cliServoMix+0x2dc>)
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f01f f8cb 	bl	80240d8 <strcasecmp>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d118      	bne.n	8004f7a <cliServoMix+0x16e>
        // erase custom mixer
        memset(mcfg.customServoMixer, 0, sizeof(mcfg.customServoMixer));
 8004f48:	2270      	movs	r2, #112	; 0x70
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	4867      	ldr	r0, [pc, #412]	; (80050ec <cliServoMix+0x2e0>)
 8004f4e:	f01e ffb5 	bl	8023ebc <memset>
        for (i = 0; i < MAX_SERVOS; i++)
 8004f52:	2300      	movs	r3, #0
 8004f54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f56:	e00c      	b.n	8004f72 <cliServoMix+0x166>
            cfg.servoConf[i].direction = 0;
 8004f58:	4965      	ldr	r1, [pc, #404]	; (80050f0 <cliServoMix+0x2e4>)
 8004f5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	440b      	add	r3, r1
 8004f66:	33c0      	adds	r3, #192	; 0xc0
 8004f68:	2200      	movs	r2, #0
 8004f6a:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++)
 8004f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f6e:	3301      	adds	r3, #1
 8004f70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f74:	2b07      	cmp	r3, #7
 8004f76:	ddef      	ble.n	8004f58 <cliServoMix+0x14c>
 8004f78:	e213      	b.n	80053a2 <cliServoMix+0x596>
    } else if (strcasecmp(argv[0], "load") == 0) {
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	495d      	ldr	r1, [pc, #372]	; (80050f4 <cliServoMix+0x2e8>)
 8004f80:	4618      	mov	r0, r3
 8004f82:	f01f f8a9 	bl	80240d8 <strcasecmp>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d135      	bne.n	8004ff8 <cliServoMix+0x1ec>
        if (argc > 1) {
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	dd2f      	ble.n	8004ff2 <cliServoMix+0x1e6>
            for (i = 0; ; i++) {
 8004f92:	2300      	movs	r3, #0
 8004f94:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (mixerNames[i] == NULL) {
 8004f96:	4a58      	ldr	r2, [pc, #352]	; (80050f8 <cliServoMix+0x2ec>)
 8004f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d104      	bne.n	8004fac <cliServoMix+0x1a0>
                    pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 8004fa2:	4956      	ldr	r1, [pc, #344]	; (80050fc <cliServoMix+0x2f0>)
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	f00e fd99 	bl	8013adc <pifLog_Print>
                    break;
 8004faa:	e1fa      	b.n	80053a2 <cliServoMix+0x596>
                }
                if (strcasecmp(argv[1], mixerNames[i]) == 0) {
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	3304      	adds	r3, #4
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	4951      	ldr	r1, [pc, #324]	; (80050f8 <cliServoMix+0x2ec>)
 8004fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	f01f f88b 	bl	80240d8 <strcasecmp>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d110      	bne.n	8004fea <cliServoMix+0x1de>
                    servoMixerLoadMix(i);
 8004fc8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004fca:	f006 fa37 	bl	800b43c <servoMixerLoadMix>
                    pifLog_Printf(LT_NONE, "Loaded %s mix...\r\n", mixerNames[i]);
 8004fce:	4a4a      	ldr	r2, [pc, #296]	; (80050f8 <cliServoMix+0x2ec>)
 8004fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	4949      	ldr	r1, [pc, #292]	; (8005100 <cliServoMix+0x2f4>)
 8004fda:	2000      	movs	r0, #0
 8004fdc:	f00e fe0c 	bl	8013bf8 <pifLog_Printf>
                    cliServoMix(1, NULL);
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	2001      	movs	r0, #1
 8004fe4:	f7ff ff12 	bl	8004e0c <cliServoMix>
                    break;
 8004fe8:	e1db      	b.n	80053a2 <cliServoMix+0x596>
            for (i = 0; ; i++) {
 8004fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fec:	3301      	adds	r3, #1
 8004fee:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (mixerNames[i] == NULL) {
 8004ff0:	e7d1      	b.n	8004f96 <cliServoMix+0x18a>
                }
            }
        }
        else {
        	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8004ff2:	f06f 0302 	mvn.w	r3, #2
 8004ff6:	e1d5      	b.n	80053a4 <cliServoMix+0x598>
        }
    } else if (strcasecmp(argv[0], "direction") == 0) {
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4941      	ldr	r1, [pc, #260]	; (8005104 <cliServoMix+0x2f8>)
 8004ffe:	4618      	mov	r0, r3
 8005000:	f01f f86a 	bl	80240d8 <strcasecmp>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	f040 8126 	bne.w	8005258 <cliServoMix+0x44c>
        enum {SERVO = 0, INPUT_, DIRECTION, ARGS_COUNT};
        int servoIndex, channel;
        char* smix_dir[2] = { "smix", "direction" };
 800500c:	4a3e      	ldr	r2, [pc, #248]	; (8005108 <cliServoMix+0x2fc>)
 800500e:	f107 0308 	add.w	r3, r7, #8
 8005012:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005016:	e883 0003 	stmia.w	r3, {r0, r1}

        if (argc == 1) {
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b01      	cmp	r3, #1
 800501e:	f040 8095 	bne.w	800514c <cliServoMix+0x340>
            pifLog_Print(LT_NONE, "change the direction a servo reacts to a input channel: \r\nservo input -1|1\r\n");
 8005022:	493a      	ldr	r1, [pc, #232]	; (800510c <cliServoMix+0x300>)
 8005024:	2000      	movs	r0, #0
 8005026:	f00e fd59 	bl	8013adc <pifLog_Print>
            pifLog_Print(LT_NONE, "s");
 800502a:	4939      	ldr	r1, [pc, #228]	; (8005110 <cliServoMix+0x304>)
 800502c:	2000      	movs	r0, #0
 800502e:	f00e fd55 	bl	8013adc <pifLog_Print>
            for (channel = 0; channel < INPUT_ITEMS; channel++)
 8005032:	2300      	movs	r3, #0
 8005034:	633b      	str	r3, [r7, #48]	; 0x30
 8005036:	e009      	b.n	800504c <cliServoMix+0x240>
                pifLog_Printf(LT_NONE, "\ti%d", channel + 1);
 8005038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503a:	3301      	adds	r3, #1
 800503c:	461a      	mov	r2, r3
 800503e:	4935      	ldr	r1, [pc, #212]	; (8005114 <cliServoMix+0x308>)
 8005040:	2000      	movs	r0, #0
 8005042:	f00e fdd9 	bl	8013bf8 <pifLog_Printf>
            for (channel = 0; channel < INPUT_ITEMS; channel++)
 8005046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005048:	3301      	adds	r3, #1
 800504a:	633b      	str	r3, [r7, #48]	; 0x30
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	2b0b      	cmp	r3, #11
 8005050:	ddf2      	ble.n	8005038 <cliServoMix+0x22c>
            pifLog_Print(LT_NONE, "\r\n");
 8005052:	4924      	ldr	r1, [pc, #144]	; (80050e4 <cliServoMix+0x2d8>)
 8005054:	2000      	movs	r0, #0
 8005056:	f00e fd41 	bl	8013adc <pifLog_Print>

            for (servoIndex = 0; servoIndex < MAX_SERVOS; servoIndex++) {
 800505a:	2300      	movs	r3, #0
 800505c:	637b      	str	r3, [r7, #52]	; 0x34
 800505e:	e02f      	b.n	80050c0 <cliServoMix+0x2b4>
                pifLog_Printf(LT_NONE, "%d", servoIndex + 1);
 8005060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005062:	3301      	adds	r3, #1
 8005064:	461a      	mov	r2, r3
 8005066:	492c      	ldr	r1, [pc, #176]	; (8005118 <cliServoMix+0x30c>)
 8005068:	2000      	movs	r0, #0
 800506a:	f00e fdc5 	bl	8013bf8 <pifLog_Printf>
                for (channel = 0; channel < INPUT_ITEMS; channel++)
 800506e:	2300      	movs	r3, #0
 8005070:	633b      	str	r3, [r7, #48]	; 0x30
 8005072:	e01b      	b.n	80050ac <cliServoMix+0x2a0>
                    pifLog_Printf(LT_NONE, "\t%s  ", (cfg.servoConf[servoIndex].direction & (1 << channel)) ? "r" : "n");
 8005074:	491e      	ldr	r1, [pc, #120]	; (80050f0 <cliServoMix+0x2e4>)
 8005076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	440b      	add	r3, r1
 8005082:	33c0      	adds	r3, #192	; 0xc0
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508a:	fa42 f303 	asr.w	r3, r2, r3
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <cliServoMix+0x28e>
 8005096:	4b21      	ldr	r3, [pc, #132]	; (800511c <cliServoMix+0x310>)
 8005098:	e000      	b.n	800509c <cliServoMix+0x290>
 800509a:	4b21      	ldr	r3, [pc, #132]	; (8005120 <cliServoMix+0x314>)
 800509c:	461a      	mov	r2, r3
 800509e:	4921      	ldr	r1, [pc, #132]	; (8005124 <cliServoMix+0x318>)
 80050a0:	2000      	movs	r0, #0
 80050a2:	f00e fda9 	bl	8013bf8 <pifLog_Printf>
                for (channel = 0; channel < INPUT_ITEMS; channel++)
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	3301      	adds	r3, #1
 80050aa:	633b      	str	r3, [r7, #48]	; 0x30
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	2b0b      	cmp	r3, #11
 80050b0:	dde0      	ble.n	8005074 <cliServoMix+0x268>
                pifLog_Print(LT_NONE, "\r\n");
 80050b2:	490c      	ldr	r1, [pc, #48]	; (80050e4 <cliServoMix+0x2d8>)
 80050b4:	2000      	movs	r0, #0
 80050b6:	f00e fd11 	bl	8013adc <pifLog_Print>
            for (servoIndex = 0; servoIndex < MAX_SERVOS; servoIndex++) {
 80050ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050bc:	3301      	adds	r3, #1
 80050be:	637b      	str	r3, [r7, #52]	; 0x34
 80050c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c2:	2b07      	cmp	r3, #7
 80050c4:	ddcc      	ble.n	8005060 <cliServoMix+0x254>
            }
            return PIF_LOG_CMD_NO_ERROR;
 80050c6:	2300      	movs	r3, #0
 80050c8:	e16c      	b.n	80053a4 <cliServoMix+0x598>
 80050ca:	bf00      	nop
 80050cc:	08027d08 	.word	0x08027d08
 80050d0:	08027d70 	.word	0x08027d70
 80050d4:	2000089c 	.word	0x2000089c
 80050d8:	08027b1c 	.word	0x08027b1c
 80050dc:	08027c18 	.word	0x08027c18
 80050e0:	08027dd0 	.word	0x08027dd0
 80050e4:	08027b48 	.word	0x08027b48
 80050e8:	08027b4c 	.word	0x08027b4c
 80050ec:	2000096c 	.word	0x2000096c
 80050f0:	20000e08 	.word	0x20000e08
 80050f4:	08027b54 	.word	0x08027b54
 80050f8:	08028e0c 	.word	0x08028e0c
 80050fc:	08027b5c 	.word	0x08027b5c
 8005100:	08027b74 	.word	0x08027b74
 8005104:	08026da4 	.word	0x08026da4
 8005108:	08027f0c 	.word	0x08027f0c
 800510c:	08027dd8 	.word	0x08027dd8
 8005110:	08027e28 	.word	0x08027e28
 8005114:	08027e2c 	.word	0x08027e2c
 8005118:	08027e34 	.word	0x08027e34
 800511c:	08027e38 	.word	0x08027e38
 8005120:	08027e3c 	.word	0x08027e3c
 8005124:	08027e40 	.word	0x08027e40
        }

        while (check < argc && check < ARGS_COUNT) {
            args[check] = atoi(argv[check]);
 8005128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	4413      	add	r3, r2
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f01e fe6e 	bl	8023e14 <atoi>
 8005138:	4602      	mov	r2, r0
 800513a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	3340      	adds	r3, #64	; 0x40
 8005140:	443b      	add	r3, r7
 8005142:	f843 2c30 	str.w	r2, [r3, #-48]
            check++;
 8005146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005148:	3301      	adds	r3, #1
 800514a:	63bb      	str	r3, [r7, #56]	; 0x38
        while (check < argc && check < ARGS_COUNT) {
 800514c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	429a      	cmp	r2, r3
 8005152:	da02      	bge.n	800515a <cliServoMix+0x34e>
 8005154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005156:	2b02      	cmp	r3, #2
 8005158:	dde6      	ble.n	8005128 <cliServoMix+0x31c>
        }

        if (check != ARGS_COUNT) {
 800515a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515c:	2b03      	cmp	r3, #3
 800515e:	d005      	beq.n	800516c <cliServoMix+0x360>
            pifLog_Print(LT_NONE, "Wrong number of arguments, needs servo input direction\r\n");
 8005160:	4992      	ldr	r1, [pc, #584]	; (80053ac <cliServoMix+0x5a0>)
 8005162:	2000      	movs	r0, #0
 8005164:	f00e fcba 	bl	8013adc <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8005168:	2300      	movs	r3, #0
 800516a:	e11b      	b.n	80053a4 <cliServoMix+0x598>
        }

        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS && args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS && (args[DIRECTION] == -1 || args[DIRECTION] == 1)) {
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	2b00      	cmp	r3, #0
 8005170:	dd55      	ble.n	800521e <cliServoMix+0x412>
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2b08      	cmp	r3, #8
 8005176:	dc52      	bgt.n	800521e <cliServoMix+0x412>
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2b00      	cmp	r3, #0
 800517c:	dd4f      	ble.n	800521e <cliServoMix+0x412>
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2b0c      	cmp	r3, #12
 8005182:	dc4c      	bgt.n	800521e <cliServoMix+0x412>
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518a:	d002      	beq.n	8005192 <cliServoMix+0x386>
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d145      	bne.n	800521e <cliServoMix+0x412>
            args[SERVO] -= 1;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	3b01      	subs	r3, #1
 8005196:	613b      	str	r3, [r7, #16]
            args[INPUT_] -= 1;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	3b01      	subs	r3, #1
 800519c:	617b      	str	r3, [r7, #20]
            if (args[DIRECTION] == -1)
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a4:	d11c      	bne.n	80051e0 <cliServoMix+0x3d4>
                cfg.servoConf[args[SERVO]].direction |= 1 << args[INPUT_];
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4981      	ldr	r1, [pc, #516]	; (80053b0 <cliServoMix+0x5a4>)
 80051aa:	4613      	mov	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	440b      	add	r3, r1
 80051b4:	33c0      	adds	r3, #192	; 0xc0
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	b21a      	sxth	r2, r3
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2101      	movs	r1, #1
 80051be:	fa01 f303 	lsl.w	r3, r1, r3
 80051c2:	b21b      	sxth	r3, r3
 80051c4:	4313      	orrs	r3, r2
 80051c6:	b21b      	sxth	r3, r3
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	b298      	uxth	r0, r3
 80051cc:	4978      	ldr	r1, [pc, #480]	; (80053b0 <cliServoMix+0x5a4>)
 80051ce:	4613      	mov	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	440b      	add	r3, r1
 80051d8:	33c0      	adds	r3, #192	; 0xc0
 80051da:	4602      	mov	r2, r0
 80051dc:	801a      	strh	r2, [r3, #0]
            if (args[DIRECTION] == -1)
 80051de:	e022      	b.n	8005226 <cliServoMix+0x41a>
            else
                cfg.servoConf[args[SERVO]].direction &= ~(1 << args[INPUT_]);
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4973      	ldr	r1, [pc, #460]	; (80053b0 <cliServoMix+0x5a4>)
 80051e4:	4613      	mov	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	440b      	add	r3, r1
 80051ee:	33c0      	adds	r3, #192	; 0xc0
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	b21a      	sxth	r2, r3
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	2101      	movs	r1, #1
 80051f8:	fa01 f303 	lsl.w	r3, r1, r3
 80051fc:	b21b      	sxth	r3, r3
 80051fe:	43db      	mvns	r3, r3
 8005200:	b21b      	sxth	r3, r3
 8005202:	4013      	ands	r3, r2
 8005204:	b21b      	sxth	r3, r3
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	b298      	uxth	r0, r3
 800520a:	4969      	ldr	r1, [pc, #420]	; (80053b0 <cliServoMix+0x5a4>)
 800520c:	4613      	mov	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	440b      	add	r3, r1
 8005216:	33c0      	adds	r3, #192	; 0xc0
 8005218:	4602      	mov	r2, r0
 800521a:	801a      	strh	r2, [r3, #0]
            if (args[DIRECTION] == -1)
 800521c:	e003      	b.n	8005226 <cliServoMix+0x41a>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments\r\n");
 800521e:	4965      	ldr	r1, [pc, #404]	; (80053b4 <cliServoMix+0x5a8>)
 8005220:	2000      	movs	r0, #0
 8005222:	f00e fc5b 	bl	8013adc <pifLog_Print>

        cliServoMix(2, smix_dir);
 8005226:	f107 0308 	add.w	r3, r7, #8
 800522a:	4619      	mov	r1, r3
 800522c:	2002      	movs	r0, #2
 800522e:	f7ff fded 	bl	8004e0c <cliServoMix>
 8005232:	e0b6      	b.n	80053a2 <cliServoMix+0x596>
    } else {
        enum {RULE = 0, TARGET, INPUT_, RATE, SPEED, MIN, MAX, BOX, ARGS_COUNT};
        while (check < argc && check < ARGS_COUNT) {
            args[check] = atoi(argv[check]);
 8005234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	4413      	add	r3, r2
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4618      	mov	r0, r3
 8005240:	f01e fde8 	bl	8023e14 <atoi>
 8005244:	4602      	mov	r2, r0
 8005246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	3340      	adds	r3, #64	; 0x40
 800524c:	443b      	add	r3, r7
 800524e:	f843 2c30 	str.w	r2, [r3, #-48]
            check++;
 8005252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005254:	3301      	adds	r3, #1
 8005256:	63bb      	str	r3, [r7, #56]	; 0x38
        while (check < argc && check < ARGS_COUNT) {
 8005258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	429a      	cmp	r2, r3
 800525e:	da02      	bge.n	8005266 <cliServoMix+0x45a>
 8005260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005262:	2b07      	cmp	r3, #7
 8005264:	dde6      	ble.n	8005234 <cliServoMix+0x428>
        }

        if (check != ARGS_COUNT) {
 8005266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005268:	2b08      	cmp	r3, #8
 800526a:	d005      	beq.n	8005278 <cliServoMix+0x46c>
            pifLog_Print(LT_NONE, "ERR: Wrong number of arguments, needs rule target_channel input_channel rate speed min max box\r\n");
 800526c:	4952      	ldr	r1, [pc, #328]	; (80053b8 <cliServoMix+0x5ac>)
 800526e:	2000      	movs	r0, #0
 8005270:	f00e fc34 	bl	8013adc <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8005274:	2300      	movs	r3, #0
 8005276:	e095      	b.n	80053a4 <cliServoMix+0x598>
        }

        i = args[RULE] - 1;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	3b01      	subs	r3, #1
 800527c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (i >= 0 && i < MAX_SERVO_RULES &&
 800527e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005280:	2b00      	cmp	r3, #0
 8005282:	f2c0 808a 	blt.w	800539a <cliServoMix+0x58e>
 8005286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005288:	2b0f      	cmp	r3, #15
 800528a:	f300 8086 	bgt.w	800539a <cliServoMix+0x58e>
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 800528e:	697b      	ldr	r3, [r7, #20]
        if (i >= 0 && i < MAX_SERVO_RULES &&
 8005290:	2b00      	cmp	r3, #0
 8005292:	f340 8082 	ble.w	800539a <cliServoMix+0x58e>
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b08      	cmp	r3, #8
 800529a:	dc7e      	bgt.n	800539a <cliServoMix+0x58e>
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 800529c:	69bb      	ldr	r3, [r7, #24]
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 800529e:	2b00      	cmp	r3, #0
 80052a0:	dd7b      	ble.n	800539a <cliServoMix+0x58e>
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	2b0c      	cmp	r3, #12
 80052a6:	dc78      	bgt.n	800539a <cliServoMix+0x58e>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 80052a8:	69fb      	ldr	r3, [r7, #28]
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 80052aa:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80052ae:	db74      	blt.n	800539a <cliServoMix+0x58e>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	2b64      	cmp	r3, #100	; 0x64
 80052b4:	dc71      	bgt.n	800539a <cliServoMix+0x58e>
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 80052b6:	6a3b      	ldr	r3, [r7, #32]
            args[RATE] >= -100 && args[RATE] <= 100 &&
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	db6e      	blt.n	800539a <cliServoMix+0x58e>
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	2bff      	cmp	r3, #255	; 0xff
 80052c0:	dc6b      	bgt.n	800539a <cliServoMix+0x58e>
            args[MIN] >= 0 && args[MIN] <= 100 &&
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	db68      	blt.n	800539a <cliServoMix+0x58e>
            args[MIN] >= 0 && args[MIN] <= 100 &&
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	2b64      	cmp	r3, #100	; 0x64
 80052cc:	dc65      	bgt.n	800539a <cliServoMix+0x58e>
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
            args[MIN] >= 0 && args[MIN] <= 100 &&
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	db62      	blt.n	800539a <cliServoMix+0x58e>
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	2b64      	cmp	r3, #100	; 0x64
 80052d8:	dc5f      	bgt.n	800539a <cliServoMix+0x58e>
 80052da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	429a      	cmp	r2, r3
 80052e0:	da5b      	bge.n	800539a <cliServoMix+0x58e>
            args[BOX] >= 0 && args[BOX] <= MAX_SERVO_BOXES) {
 80052e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	db58      	blt.n	800539a <cliServoMix+0x58e>
            args[BOX] >= 0 && args[BOX] <= MAX_SERVO_BOXES) {
 80052e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	dc55      	bgt.n	800539a <cliServoMix+0x58e>
            mcfg.customServoMixer[i].targetChannel = args[TARGET] - 1;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b2d8      	uxtb	r0, r3
 80052f6:	4931      	ldr	r1, [pc, #196]	; (80053bc <cliServoMix+0x5b0>)
 80052f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052fa:	4613      	mov	r3, r2
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	1a9b      	subs	r3, r3, r2
 8005300:	440b      	add	r3, r1
 8005302:	33d0      	adds	r3, #208	; 0xd0
 8005304:	4602      	mov	r2, r0
 8005306:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].fromChannel = args[INPUT_] - 1;
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	b2db      	uxtb	r3, r3
 800530c:	3b01      	subs	r3, #1
 800530e:	b2d8      	uxtb	r0, r3
 8005310:	492a      	ldr	r1, [pc, #168]	; (80053bc <cliServoMix+0x5b0>)
 8005312:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005314:	4613      	mov	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	1a9b      	subs	r3, r3, r2
 800531a:	440b      	add	r3, r1
 800531c:	33d1      	adds	r3, #209	; 0xd1
 800531e:	4602      	mov	r2, r0
 8005320:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].rate = args[RATE];
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	b258      	sxtb	r0, r3
 8005326:	4925      	ldr	r1, [pc, #148]	; (80053bc <cliServoMix+0x5b0>)
 8005328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800532a:	4613      	mov	r3, r2
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	1a9b      	subs	r3, r3, r2
 8005330:	440b      	add	r3, r1
 8005332:	33d2      	adds	r3, #210	; 0xd2
 8005334:	4602      	mov	r2, r0
 8005336:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].speed = args[SPEED];
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	b2d8      	uxtb	r0, r3
 800533c:	491f      	ldr	r1, [pc, #124]	; (80053bc <cliServoMix+0x5b0>)
 800533e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005340:	4613      	mov	r3, r2
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	1a9b      	subs	r3, r3, r2
 8005346:	440b      	add	r3, r1
 8005348:	33d3      	adds	r3, #211	; 0xd3
 800534a:	4602      	mov	r2, r0
 800534c:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].min = args[MIN];
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	b258      	sxtb	r0, r3
 8005352:	491a      	ldr	r1, [pc, #104]	; (80053bc <cliServoMix+0x5b0>)
 8005354:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005356:	4613      	mov	r3, r2
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	1a9b      	subs	r3, r3, r2
 800535c:	440b      	add	r3, r1
 800535e:	33d4      	adds	r3, #212	; 0xd4
 8005360:	4602      	mov	r2, r0
 8005362:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].max = args[MAX];
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	b258      	sxtb	r0, r3
 8005368:	4914      	ldr	r1, [pc, #80]	; (80053bc <cliServoMix+0x5b0>)
 800536a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800536c:	4613      	mov	r3, r2
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	1a9b      	subs	r3, r3, r2
 8005372:	440b      	add	r3, r1
 8005374:	33d5      	adds	r3, #213	; 0xd5
 8005376:	4602      	mov	r2, r0
 8005378:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].box = args[BOX];
 800537a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537c:	b2d8      	uxtb	r0, r3
 800537e:	490f      	ldr	r1, [pc, #60]	; (80053bc <cliServoMix+0x5b0>)
 8005380:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005382:	4613      	mov	r3, r2
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	1a9b      	subs	r3, r3, r2
 8005388:	440b      	add	r3, r1
 800538a:	33d6      	adds	r3, #214	; 0xd6
 800538c:	4602      	mov	r2, r0
 800538e:	701a      	strb	r2, [r3, #0]
            cliServoMix(1, NULL);
 8005390:	2100      	movs	r1, #0
 8005392:	2001      	movs	r0, #1
 8005394:	f7ff fd3a 	bl	8004e0c <cliServoMix>
 8005398:	e003      	b.n	80053a2 <cliServoMix+0x596>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments\r\n");
 800539a:	4906      	ldr	r1, [pc, #24]	; (80053b4 <cliServoMix+0x5a8>)
 800539c:	2000      	movs	r0, #0
 800539e:	f00e fb9d 	bl	8013adc <pifLog_Print>
    }
	return PIF_LOG_CMD_NO_ERROR;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3740      	adds	r7, #64	; 0x40
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	08027e48 	.word	0x08027e48
 80053b0:	20000e08 	.word	0x20000e08
 80053b4:	08027e84 	.word	0x08027e84
 80053b8:	08027ea8 	.word	0x08027ea8
 80053bc:	2000089c 	.word	0x2000089c

080053c0 <cliDefaults>:

static int cliDefaults(int argc, char *argv[])
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Print(LT_NONE, "Resetting to defaults...\r\n");
 80053ca:	490b      	ldr	r1, [pc, #44]	; (80053f8 <cliDefaults+0x38>)
 80053cc:	2000      	movs	r0, #0
 80053ce:	f00e fb85 	bl	8013adc <pifLog_Print>
    checkFirstTime(true);
 80053d2:	2001      	movs	r0, #1
 80053d4:	f001 fb04 	bl	80069e0 <checkFirstTime>
    pifLog_Print(LT_NONE, "Rebooting...");
 80053d8:	4908      	ldr	r1, [pc, #32]	; (80053fc <cliDefaults+0x3c>)
 80053da:	2000      	movs	r0, #0
 80053dc:	f00e fb7e 	bl	8013adc <pifLog_Print>
    pif_Delay1ms(10);
 80053e0:	200a      	movs	r0, #10
 80053e2:	f00c fa5f 	bl	80118a4 <pif_Delay1ms>
    systemReset(false);
 80053e6:	2000      	movs	r0, #0
 80053e8:	f7fc fe2c 	bl	8002044 <systemReset>
	return PIF_LOG_CMD_NO_ERROR;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	08027f14 	.word	0x08027f14
 80053fc:	08027f30 	.word	0x08027f30

08005400 <cliDump>:

static int cliDump(int argc, char *argv[])
{
 8005400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005402:	b093      	sub	sp, #76	; 0x4c
 8005404:	af04      	add	r7, sp, #16
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
    char buf[16];
    float thr, roll, pitch, yaw;
    uint32_t mask;
    const clivalue_t *setval;

    cliVersion(1, NULL);
 800540a:	2100      	movs	r1, #0
 800540c:	2001      	movs	r0, #1
 800540e:	f001 f85d 	bl	80064cc <cliVersion>
    pifLog_Print(LT_NONE, "Current Config: Copy everything below here...\r\n");
 8005412:	49bc      	ldr	r1, [pc, #752]	; (8005704 <cliDump+0x304>)
 8005414:	2000      	movs	r0, #0
 8005416:	f00e fb61 	bl	8013adc <pifLog_Print>

    // print out aux switches
    cliAux(1, NULL);
 800541a:	2100      	movs	r1, #0
 800541c:	2001      	movs	r0, #1
 800541e:	f7ff f971 	bl	8004704 <cliAux>

    // print out current motor mix
    pifLog_Printf(LT_NONE, "mixer %s\r\n", mixerNames[mcfg.mixerConfiguration - 1]);
 8005422:	4bb9      	ldr	r3, [pc, #740]	; (8005708 <cliDump+0x308>)
 8005424:	795b      	ldrb	r3, [r3, #5]
 8005426:	3b01      	subs	r3, #1
 8005428:	4ab8      	ldr	r2, [pc, #736]	; (800570c <cliDump+0x30c>)
 800542a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542e:	461a      	mov	r2, r3
 8005430:	49b7      	ldr	r1, [pc, #732]	; (8005710 <cliDump+0x310>)
 8005432:	2000      	movs	r0, #0
 8005434:	f00e fbe0 	bl	8013bf8 <pifLog_Printf>

    // print custom mix if exists
    if (mcfg.customMixer[0].throttle != 0.0f) {
 8005438:	4bb3      	ldr	r3, [pc, #716]	; (8005708 <cliDump+0x308>)
 800543a:	edd3 7a04 	vldr	s15, [r3, #16]
 800543e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005446:	f000 80a4 	beq.w	8005592 <cliDump+0x192>
        for (i = 0; i < MAX_MOTORS; i++) {
 800544a:	2300      	movs	r3, #0
 800544c:	637b      	str	r3, [r7, #52]	; 0x34
 800544e:	e093      	b.n	8005578 <cliDump+0x178>
            if (mcfg.customMixer[i].throttle == 0.0f)
 8005450:	4aad      	ldr	r2, [pc, #692]	; (8005708 <cliDump+0x308>)
 8005452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005454:	3301      	adds	r3, #1
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	4413      	add	r3, r2
 800545a:	edd3 7a00 	vldr	s15, [r3]
 800545e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005466:	f000 808c 	beq.w	8005582 <cliDump+0x182>
                break;
            thr = mcfg.customMixer[i].throttle;
 800546a:	4aa7      	ldr	r2, [pc, #668]	; (8005708 <cliDump+0x308>)
 800546c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546e:	3301      	adds	r3, #1
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	4413      	add	r3, r2
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	62fb      	str	r3, [r7, #44]	; 0x2c
            roll = mcfg.customMixer[i].roll;
 8005478:	4aa3      	ldr	r2, [pc, #652]	; (8005708 <cliDump+0x308>)
 800547a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547c:	3301      	adds	r3, #1
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	4413      	add	r3, r2
 8005482:	3304      	adds	r3, #4
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	62bb      	str	r3, [r7, #40]	; 0x28
            pitch = mcfg.customMixer[i].pitch;
 8005488:	4a9f      	ldr	r2, [pc, #636]	; (8005708 <cliDump+0x308>)
 800548a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	4413      	add	r3, r2
 8005490:	3318      	adds	r3, #24
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	627b      	str	r3, [r7, #36]	; 0x24
            yaw = mcfg.customMixer[i].yaw;
 8005496:	4a9c      	ldr	r2, [pc, #624]	; (8005708 <cliDump+0x308>)
 8005498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	4413      	add	r3, r2
 800549e:	331c      	adds	r3, #28
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	623b      	str	r3, [r7, #32]
            pifLog_Printf(LT_NONE, "cmix %d", i + 1);
 80054a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a6:	3301      	adds	r3, #1
 80054a8:	461a      	mov	r2, r3
 80054aa:	499a      	ldr	r1, [pc, #616]	; (8005714 <cliDump+0x314>)
 80054ac:	2000      	movs	r0, #0
 80054ae:	f00e fba3 	bl	8013bf8 <pifLog_Printf>
            if (thr < 0)
 80054b2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80054b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054be:	d503      	bpl.n	80054c8 <cliDump+0xc8>
                pifLog_Print(LT_NONE, " ");
 80054c0:	4995      	ldr	r1, [pc, #596]	; (8005718 <cliDump+0x318>)
 80054c2:	2000      	movs	r0, #0
 80054c4:	f00e fb0a 	bl	8013adc <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(thr, buf));
 80054c8:	f107 0308 	add.w	r3, r7, #8
 80054cc:	4618      	mov	r0, r3
 80054ce:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80054d2:	f7ff f85b 	bl	800458c <ftoa>
 80054d6:	4603      	mov	r3, r0
 80054d8:	461a      	mov	r2, r3
 80054da:	4990      	ldr	r1, [pc, #576]	; (800571c <cliDump+0x31c>)
 80054dc:	2000      	movs	r0, #0
 80054de:	f00e fb8b 	bl	8013bf8 <pifLog_Printf>
            if (roll < 0)
 80054e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80054e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ee:	d503      	bpl.n	80054f8 <cliDump+0xf8>
                pifLog_Print(LT_NONE, " ");
 80054f0:	4989      	ldr	r1, [pc, #548]	; (8005718 <cliDump+0x318>)
 80054f2:	2000      	movs	r0, #0
 80054f4:	f00e faf2 	bl	8013adc <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(roll, buf));
 80054f8:	f107 0308 	add.w	r3, r7, #8
 80054fc:	4618      	mov	r0, r3
 80054fe:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8005502:	f7ff f843 	bl	800458c <ftoa>
 8005506:	4603      	mov	r3, r0
 8005508:	461a      	mov	r2, r3
 800550a:	4984      	ldr	r1, [pc, #528]	; (800571c <cliDump+0x31c>)
 800550c:	2000      	movs	r0, #0
 800550e:	f00e fb73 	bl	8013bf8 <pifLog_Printf>
            if (pitch < 0)
 8005512:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005516:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800551a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551e:	d503      	bpl.n	8005528 <cliDump+0x128>
                pifLog_Print(LT_NONE, " ");
 8005520:	497d      	ldr	r1, [pc, #500]	; (8005718 <cliDump+0x318>)
 8005522:	2000      	movs	r0, #0
 8005524:	f00e fada 	bl	8013adc <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(pitch, buf));
 8005528:	f107 0308 	add.w	r3, r7, #8
 800552c:	4618      	mov	r0, r3
 800552e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8005532:	f7ff f82b 	bl	800458c <ftoa>
 8005536:	4603      	mov	r3, r0
 8005538:	461a      	mov	r2, r3
 800553a:	4978      	ldr	r1, [pc, #480]	; (800571c <cliDump+0x31c>)
 800553c:	2000      	movs	r0, #0
 800553e:	f00e fb5b 	bl	8013bf8 <pifLog_Printf>
            if (yaw < 0)
 8005542:	edd7 7a08 	vldr	s15, [r7, #32]
 8005546:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800554a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800554e:	d503      	bpl.n	8005558 <cliDump+0x158>
                pifLog_Print(LT_NONE, " ");
 8005550:	4971      	ldr	r1, [pc, #452]	; (8005718 <cliDump+0x318>)
 8005552:	2000      	movs	r0, #0
 8005554:	f00e fac2 	bl	8013adc <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s\r\n", ftoa(yaw, buf));
 8005558:	f107 0308 	add.w	r3, r7, #8
 800555c:	4618      	mov	r0, r3
 800555e:	ed97 0a08 	vldr	s0, [r7, #32]
 8005562:	f7ff f813 	bl	800458c <ftoa>
 8005566:	4603      	mov	r3, r0
 8005568:	461a      	mov	r2, r3
 800556a:	496d      	ldr	r1, [pc, #436]	; (8005720 <cliDump+0x320>)
 800556c:	2000      	movs	r0, #0
 800556e:	f00e fb43 	bl	8013bf8 <pifLog_Printf>
        for (i = 0; i < MAX_MOTORS; i++) {
 8005572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005574:	3301      	adds	r3, #1
 8005576:	637b      	str	r3, [r7, #52]	; 0x34
 8005578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557a:	2b0b      	cmp	r3, #11
 800557c:	f67f af68 	bls.w	8005450 <cliDump+0x50>
 8005580:	e000      	b.n	8005584 <cliDump+0x184>
                break;
 8005582:	bf00      	nop
        }
        pifLog_Printf(LT_NONE, "cmix %d 0 0 0 0\r\n", i + 1);
 8005584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005586:	3301      	adds	r3, #1
 8005588:	461a      	mov	r2, r3
 800558a:	4966      	ldr	r1, [pc, #408]	; (8005724 <cliDump+0x324>)
 800558c:	2000      	movs	r0, #0
 800558e:	f00e fb33 	bl	8013bf8 <pifLog_Printf>
    }

    // print custom servo mixer if exists
    if (mcfg.customServoMixer[0].rate != 0) {
 8005592:	4b5d      	ldr	r3, [pc, #372]	; (8005708 <cliDump+0x308>)
 8005594:	f993 30d2 	ldrsb.w	r3, [r3, #210]	; 0xd2
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 8084 	beq.w	80056a6 <cliDump+0x2a6>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 800559e:	2300      	movs	r3, #0
 80055a0:	637b      	str	r3, [r7, #52]	; 0x34
 80055a2:	e074      	b.n	800568e <cliDump+0x28e>
            if (mcfg.customServoMixer[i].rate == 0)
 80055a4:	4958      	ldr	r1, [pc, #352]	; (8005708 <cliDump+0x308>)
 80055a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055a8:	4613      	mov	r3, r2
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	1a9b      	subs	r3, r3, r2
 80055ae:	440b      	add	r3, r1
 80055b0:	33d2      	adds	r3, #210	; 0xd2
 80055b2:	f993 3000 	ldrsb.w	r3, [r3]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d06d      	beq.n	8005696 <cliDump+0x296>
                break;
            pifLog_Printf(LT_NONE, "smix %d ", i + 1);
 80055ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055bc:	3301      	adds	r3, #1
 80055be:	461a      	mov	r2, r3
 80055c0:	4959      	ldr	r1, [pc, #356]	; (8005728 <cliDump+0x328>)
 80055c2:	2000      	movs	r0, #0
 80055c4:	f00e fb18 	bl	8013bf8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].targetChannel + 1);
 80055c8:	494f      	ldr	r1, [pc, #316]	; (8005708 <cliDump+0x308>)
 80055ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055cc:	4613      	mov	r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	1a9b      	subs	r3, r3, r2
 80055d2:	440b      	add	r3, r1
 80055d4:	33d0      	adds	r3, #208	; 0xd0
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	461a      	mov	r2, r3
 80055dc:	4953      	ldr	r1, [pc, #332]	; (800572c <cliDump+0x32c>)
 80055de:	2000      	movs	r0, #0
 80055e0:	f00e fb0a 	bl	8013bf8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].fromChannel + 1);
 80055e4:	4948      	ldr	r1, [pc, #288]	; (8005708 <cliDump+0x308>)
 80055e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055e8:	4613      	mov	r3, r2
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	1a9b      	subs	r3, r3, r2
 80055ee:	440b      	add	r3, r1
 80055f0:	33d1      	adds	r3, #209	; 0xd1
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	3301      	adds	r3, #1
 80055f6:	461a      	mov	r2, r3
 80055f8:	494c      	ldr	r1, [pc, #304]	; (800572c <cliDump+0x32c>)
 80055fa:	2000      	movs	r0, #0
 80055fc:	f00e fafc 	bl	8013bf8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].rate);
 8005600:	4941      	ldr	r1, [pc, #260]	; (8005708 <cliDump+0x308>)
 8005602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005604:	4613      	mov	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	1a9b      	subs	r3, r3, r2
 800560a:	440b      	add	r3, r1
 800560c:	33d2      	adds	r3, #210	; 0xd2
 800560e:	f993 3000 	ldrsb.w	r3, [r3]
 8005612:	461a      	mov	r2, r3
 8005614:	4945      	ldr	r1, [pc, #276]	; (800572c <cliDump+0x32c>)
 8005616:	2000      	movs	r0, #0
 8005618:	f00e faee 	bl	8013bf8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].speed);
 800561c:	493a      	ldr	r1, [pc, #232]	; (8005708 <cliDump+0x308>)
 800561e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005620:	4613      	mov	r3, r2
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	1a9b      	subs	r3, r3, r2
 8005626:	440b      	add	r3, r1
 8005628:	33d3      	adds	r3, #211	; 0xd3
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	461a      	mov	r2, r3
 800562e:	493f      	ldr	r1, [pc, #252]	; (800572c <cliDump+0x32c>)
 8005630:	2000      	movs	r0, #0
 8005632:	f00e fae1 	bl	8013bf8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].min);
 8005636:	4934      	ldr	r1, [pc, #208]	; (8005708 <cliDump+0x308>)
 8005638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800563a:	4613      	mov	r3, r2
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	1a9b      	subs	r3, r3, r2
 8005640:	440b      	add	r3, r1
 8005642:	33d4      	adds	r3, #212	; 0xd4
 8005644:	f993 3000 	ldrsb.w	r3, [r3]
 8005648:	461a      	mov	r2, r3
 800564a:	4938      	ldr	r1, [pc, #224]	; (800572c <cliDump+0x32c>)
 800564c:	2000      	movs	r0, #0
 800564e:	f00e fad3 	bl	8013bf8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].max);
 8005652:	492d      	ldr	r1, [pc, #180]	; (8005708 <cliDump+0x308>)
 8005654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005656:	4613      	mov	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	1a9b      	subs	r3, r3, r2
 800565c:	440b      	add	r3, r1
 800565e:	33d5      	adds	r3, #213	; 0xd5
 8005660:	f993 3000 	ldrsb.w	r3, [r3]
 8005664:	461a      	mov	r2, r3
 8005666:	4931      	ldr	r1, [pc, #196]	; (800572c <cliDump+0x32c>)
 8005668:	2000      	movs	r0, #0
 800566a:	f00e fac5 	bl	8013bf8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\r\n", mcfg.customServoMixer[i].box);
 800566e:	4926      	ldr	r1, [pc, #152]	; (8005708 <cliDump+0x308>)
 8005670:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005672:	4613      	mov	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	1a9b      	subs	r3, r3, r2
 8005678:	440b      	add	r3, r1
 800567a:	33d6      	adds	r3, #214	; 0xd6
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	492b      	ldr	r1, [pc, #172]	; (8005730 <cliDump+0x330>)
 8005682:	2000      	movs	r0, #0
 8005684:	f00e fab8 	bl	8013bf8 <pifLog_Printf>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8005688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568a:	3301      	adds	r3, #1
 800568c:	637b      	str	r3, [r7, #52]	; 0x34
 800568e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005690:	2b0f      	cmp	r3, #15
 8005692:	d987      	bls.n	80055a4 <cliDump+0x1a4>
 8005694:	e000      	b.n	8005698 <cliDump+0x298>
                break;
 8005696:	bf00      	nop
        }
        pifLog_Printf(LT_NONE, "smix %d 0 0 0 0\r\n", i + 1);
 8005698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569a:	3301      	adds	r3, #1
 800569c:	461a      	mov	r2, r3
 800569e:	4925      	ldr	r1, [pc, #148]	; (8005734 <cliDump+0x334>)
 80056a0:	2000      	movs	r0, #0
 80056a2:	f00e faa9 	bl	8013bf8 <pifLog_Printf>
    }

    // print servo directions
    for (i = 0; i < MAX_SERVOS; i++)
 80056a6:	2300      	movs	r3, #0
 80056a8:	637b      	str	r3, [r7, #52]	; 0x34
 80056aa:	e024      	b.n	80056f6 <cliDump+0x2f6>
        for (channel = 0; channel < INPUT_ITEMS; channel++)
 80056ac:	2300      	movs	r3, #0
 80056ae:	633b      	str	r3, [r7, #48]	; 0x30
 80056b0:	e01b      	b.n	80056ea <cliDump+0x2ea>
            if (cfg.servoConf[i].direction & (1 << channel))
 80056b2:	4921      	ldr	r1, [pc, #132]	; (8005738 <cliDump+0x338>)
 80056b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056b6:	4613      	mov	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	440b      	add	r3, r1
 80056c0:	33c0      	adds	r3, #192	; 0xc0
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	461a      	mov	r2, r3
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	fa42 f303 	asr.w	r3, r2, r3
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d007      	beq.n	80056e4 <cliDump+0x2e4>
                pifLog_Printf(LT_NONE, "smix direction %d %d -1\r\n", i + 1 , channel + 1);
 80056d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	3301      	adds	r3, #1
 80056dc:	4917      	ldr	r1, [pc, #92]	; (800573c <cliDump+0x33c>)
 80056de:	2000      	movs	r0, #0
 80056e0:	f00e fa8a 	bl	8013bf8 <pifLog_Printf>
        for (channel = 0; channel < INPUT_ITEMS; channel++)
 80056e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e6:	3301      	adds	r3, #1
 80056e8:	633b      	str	r3, [r7, #48]	; 0x30
 80056ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ec:	2b0b      	cmp	r3, #11
 80056ee:	d9e0      	bls.n	80056b2 <cliDump+0x2b2>
    for (i = 0; i < MAX_SERVOS; i++)
 80056f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f2:	3301      	adds	r3, #1
 80056f4:	637b      	str	r3, [r7, #52]	; 0x34
 80056f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f8:	2b07      	cmp	r3, #7
 80056fa:	d9d7      	bls.n	80056ac <cliDump+0x2ac>

    // print servo config
    for (i = 0; i < MAX_SERVOS; i++)
 80056fc:	2300      	movs	r3, #0
 80056fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005700:	e057      	b.n	80057b2 <cliDump+0x3b2>
 8005702:	bf00      	nop
 8005704:	08027f40 	.word	0x08027f40
 8005708:	2000089c 	.word	0x2000089c
 800570c:	08028e0c 	.word	0x08028e0c
 8005710:	08027f70 	.word	0x08027f70
 8005714:	08027f7c 	.word	0x08027f7c
 8005718:	08027f84 	.word	0x08027f84
 800571c:	08027f88 	.word	0x08027f88
 8005720:	08027b28 	.word	0x08027b28
 8005724:	08027f8c 	.word	0x08027f8c
 8005728:	08027fa0 	.word	0x08027fa0
 800572c:	08027fac 	.word	0x08027fac
 8005730:	08027dd0 	.word	0x08027dd0
 8005734:	08027fb0 	.word	0x08027fb0
 8005738:	20000e08 	.word	0x20000e08
 800573c:	08027fc4 	.word	0x08027fc4
        pifLog_Printf(LT_NONE, "servo %d %d %d %d %d\r\n", i + 1, cfg.servoConf[i].min, cfg.servoConf[i].middle, cfg.servoConf[i].max, cfg.servoConf[i].rate);
 8005740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005742:	1c59      	adds	r1, r3, #1
 8005744:	4863      	ldr	r0, [pc, #396]	; (80058d4 <cliDump+0x4d4>)
 8005746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005748:	4613      	mov	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	4403      	add	r3, r0
 8005752:	33b8      	adds	r3, #184	; 0xb8
 8005754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005758:	461e      	mov	r6, r3
 800575a:	485e      	ldr	r0, [pc, #376]	; (80058d4 <cliDump+0x4d4>)
 800575c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	4403      	add	r3, r0
 8005768:	33bc      	adds	r3, #188	; 0xbc
 800576a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800576e:	461c      	mov	r4, r3
 8005770:	4858      	ldr	r0, [pc, #352]	; (80058d4 <cliDump+0x4d4>)
 8005772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	4403      	add	r3, r0
 800577e:	33ba      	adds	r3, #186	; 0xba
 8005780:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005784:	461d      	mov	r5, r3
 8005786:	4853      	ldr	r0, [pc, #332]	; (80058d4 <cliDump+0x4d4>)
 8005788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800578a:	4613      	mov	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	4403      	add	r3, r0
 8005794:	33be      	adds	r3, #190	; 0xbe
 8005796:	f993 3000 	ldrsb.w	r3, [r3]
 800579a:	9302      	str	r3, [sp, #8]
 800579c:	9501      	str	r5, [sp, #4]
 800579e:	9400      	str	r4, [sp, #0]
 80057a0:	4633      	mov	r3, r6
 80057a2:	460a      	mov	r2, r1
 80057a4:	494c      	ldr	r1, [pc, #304]	; (80058d8 <cliDump+0x4d8>)
 80057a6:	2000      	movs	r0, #0
 80057a8:	f00e fa26 	bl	8013bf8 <pifLog_Printf>
    for (i = 0; i < MAX_SERVOS; i++)
 80057ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ae:	3301      	adds	r3, #1
 80057b0:	637b      	str	r3, [r7, #52]	; 0x34
 80057b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b4:	2b07      	cmp	r3, #7
 80057b6:	d9c3      	bls.n	8005740 <cliDump+0x340>

    // print enabled features
    mask = featureMask();
 80057b8:	f001 fcba 	bl	8007130 <featureMask>
 80057bc:	61f8      	str	r0, [r7, #28]
    for (i = 0; ; i++) { // disable all feature first
 80057be:	2300      	movs	r3, #0
 80057c0:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 80057c2:	4a46      	ldr	r2, [pc, #280]	; (80058dc <cliDump+0x4dc>)
 80057c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00c      	beq.n	80057e8 <cliDump+0x3e8>
            break;
        pifLog_Printf(LT_NONE, "feature -%s\r\n", featureNames[i]);
 80057ce:	4a43      	ldr	r2, [pc, #268]	; (80058dc <cliDump+0x4dc>)
 80057d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d6:	461a      	mov	r2, r3
 80057d8:	4941      	ldr	r1, [pc, #260]	; (80058e0 <cliDump+0x4e0>)
 80057da:	2000      	movs	r0, #0
 80057dc:	f00e fa0c 	bl	8013bf8 <pifLog_Printf>
    for (i = 0; ; i++) { // disable all feature first
 80057e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e2:	3301      	adds	r3, #1
 80057e4:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 80057e6:	e7ec      	b.n	80057c2 <cliDump+0x3c2>
            break;
 80057e8:	bf00      	nop
    }
    for (i = 0; ; i++) {  // reenable what we want.
 80057ea:	2300      	movs	r3, #0
 80057ec:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 80057ee:	4a3b      	ldr	r2, [pc, #236]	; (80058dc <cliDump+0x4dc>)
 80057f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d015      	beq.n	8005826 <cliDump+0x426>
            break;
        if (mask & (1 << i))
 80057fa:	2201      	movs	r2, #1
 80057fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005802:	461a      	mov	r2, r3
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	4013      	ands	r3, r2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d008      	beq.n	800581e <cliDump+0x41e>
            pifLog_Printf(LT_NONE, "feature %s\r\n", featureNames[i]);
 800580c:	4a33      	ldr	r2, [pc, #204]	; (80058dc <cliDump+0x4dc>)
 800580e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005814:	461a      	mov	r2, r3
 8005816:	4933      	ldr	r1, [pc, #204]	; (80058e4 <cliDump+0x4e4>)
 8005818:	2000      	movs	r0, #0
 800581a:	f00e f9ed 	bl	8013bf8 <pifLog_Printf>
    for (i = 0; ; i++) {  // reenable what we want.
 800581e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005820:	3301      	adds	r3, #1
 8005822:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 8005824:	e7e3      	b.n	80057ee <cliDump+0x3ee>
            break;
 8005826:	bf00      	nop
    }

    // print RC MAPPING
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005828:	2300      	movs	r3, #0
 800582a:	637b      	str	r3, [r7, #52]	; 0x34
 800582c:	e012      	b.n	8005854 <cliDump+0x454>
        buf[mcfg.rcmap[i]] = rcChannelLetters[i];
 800582e:	4a2e      	ldr	r2, [pc, #184]	; (80058e8 <cliDump+0x4e8>)
 8005830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005832:	4413      	add	r3, r2
 8005834:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	4619      	mov	r1, r3
 800583c:	4a2b      	ldr	r2, [pc, #172]	; (80058ec <cliDump+0x4ec>)
 800583e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005840:	4413      	add	r3, r2
 8005842:	781a      	ldrb	r2, [r3, #0]
 8005844:	f101 0338 	add.w	r3, r1, #56	; 0x38
 8005848:	443b      	add	r3, r7
 800584a:	f803 2c30 	strb.w	r2, [r3, #-48]
    for (i = 0; i < mcfg.rc_channel_count; i++)
 800584e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005850:	3301      	adds	r3, #1
 8005852:	637b      	str	r3, [r7, #52]	; 0x34
 8005854:	4b24      	ldr	r3, [pc, #144]	; (80058e8 <cliDump+0x4e8>)
 8005856:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800585a:	461a      	mov	r2, r3
 800585c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585e:	4293      	cmp	r3, r2
 8005860:	d3e5      	bcc.n	800582e <cliDump+0x42e>
    buf[i] = '\0';
 8005862:	f107 0208 	add.w	r2, r7, #8
 8005866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005868:	4413      	add	r3, r2
 800586a:	2200      	movs	r2, #0
 800586c:	701a      	strb	r2, [r3, #0]
    pifLog_Printf(LT_NONE, "map %s\r\n", buf);
 800586e:	f107 0308 	add.w	r3, r7, #8
 8005872:	461a      	mov	r2, r3
 8005874:	491e      	ldr	r1, [pc, #120]	; (80058f0 <cliDump+0x4f0>)
 8005876:	2000      	movs	r0, #0
 8005878:	f00e f9be 	bl	8013bf8 <pifLog_Printf>

    // print settings
    for (i = 0; i < VALUE_COUNT; i++) {
 800587c:	2300      	movs	r3, #0
 800587e:	637b      	str	r3, [r7, #52]	; 0x34
 8005880:	e01f      	b.n	80058c2 <cliDump+0x4c2>
        setval = &valueTable[i];
 8005882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005884:	4613      	mov	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4a19      	ldr	r2, [pc, #100]	; (80058f4 <cliDump+0x4f4>)
 800588e:	4413      	add	r3, r2
 8005890:	61bb      	str	r3, [r7, #24]
        pifLog_Printf(LT_NONE, "set %s = ", valueTable[i].name);
 8005892:	4918      	ldr	r1, [pc, #96]	; (80058f4 <cliDump+0x4f4>)
 8005894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005896:	4613      	mov	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	440b      	add	r3, r1
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	4914      	ldr	r1, [pc, #80]	; (80058f8 <cliDump+0x4f8>)
 80058a6:	2000      	movs	r0, #0
 80058a8:	f00e f9a6 	bl	8013bf8 <pifLog_Printf>
        cliPrintVar(setval, 0);
 80058ac:	2100      	movs	r1, #0
 80058ae:	69b8      	ldr	r0, [r7, #24]
 80058b0:	f000 fb4a 	bl	8005f48 <cliPrintVar>
        pifLog_Print(LT_NONE, "\r\n");
 80058b4:	4911      	ldr	r1, [pc, #68]	; (80058fc <cliDump+0x4fc>)
 80058b6:	2000      	movs	r0, #0
 80058b8:	f00e f910 	bl	8013adc <pifLog_Print>
    for (i = 0; i < VALUE_COUNT; i++) {
 80058bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058be:	3301      	adds	r3, #1
 80058c0:	637b      	str	r3, [r7, #52]	; 0x34
 80058c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c4:	2b8e      	cmp	r3, #142	; 0x8e
 80058c6:	d9dc      	bls.n	8005882 <cliDump+0x482>
    }
	return PIF_LOG_CMD_NO_ERROR;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	373c      	adds	r7, #60	; 0x3c
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058d2:	bf00      	nop
 80058d4:	20000e08 	.word	0x20000e08
 80058d8:	08027fe0 	.word	0x08027fe0
 80058dc:	08028e70 	.word	0x08028e70
 80058e0:	08027ff8 	.word	0x08027ff8
 80058e4:	08028008 	.word	0x08028008
 80058e8:	2000089c 	.word	0x2000089c
 80058ec:	08029b68 	.word	0x08029b68
 80058f0:	08028018 	.word	0x08028018
 80058f4:	0802903c 	.word	0x0802903c
 80058f8:	08028024 	.word	0x08028024
 80058fc:	08027b48 	.word	0x08027b48

08005900 <cliExit>:

static int cliExit(int argc, char *argv[])
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
    pifLog_Print(LT_NONE, "\r\nLeaving CLI mode...\r\n");
 800590a:	490c      	ldr	r1, [pc, #48]	; (800593c <cliExit+0x3c>)
 800590c:	2000      	movs	r0, #0
 800590e:	f00e f8e5 	bl	8013adc <pifLog_Print>
    *cliBuffer = '\0';
 8005912:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <cliExit+0x40>)
 8005914:	2200      	movs	r2, #0
 8005916:	701a      	strb	r2, [r3, #0]
    bufferIndex = 0;
 8005918:	4b0a      	ldr	r3, [pc, #40]	; (8005944 <cliExit+0x44>)
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]
    cliMode = 0;
 800591e:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <cliExit+0x48>)
 8005920:	2200      	movs	r2, #0
 8005922:	701a      	strb	r2, [r3, #0]
    // incase some idiot leaves a motor running during motortest, clear it here
    mixerResetMotors();
 8005924:	f005 fd60 	bl	800b3e8 <mixerResetMotors>
    // save and reboot... I think this makes the most sense
    cliSave(argc, argv);
 8005928:	6839      	ldr	r1, [r7, #0]
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 faec 	bl	8005f08 <cliSave>
	return PIF_LOG_CMD_NO_ERROR;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	08028030 	.word	0x08028030
 8005940:	20000868 	.word	0x20000868
 8005944:	20000898 	.word	0x20000898
 8005948:	20000864 	.word	0x20000864

0800594c <cliFeature>:

static int cliFeature(int argc, char *argv[])
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t mask;

    mask = featureMask();
 8005956:	f001 fbeb 	bl	8007130 <featureMask>
 800595a:	60f8      	str	r0, [r7, #12]

    if (argc == 0) {
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d127      	bne.n	80059b2 <cliFeature+0x66>
        pifLog_Print(LT_NONE, "Enabled features: ");
 8005962:	4950      	ldr	r1, [pc, #320]	; (8005aa4 <cliFeature+0x158>)
 8005964:	2000      	movs	r0, #0
 8005966:	f00e f8b9 	bl	8013adc <pifLog_Print>
        for (i = 0; ; i++) {
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 800596e:	4a4e      	ldr	r2, [pc, #312]	; (8005aa8 <cliFeature+0x15c>)
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d015      	beq.n	80059a6 <cliFeature+0x5a>
                break;
            if (mask & (1 << i))
 800597a:	2201      	movs	r2, #1
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	fa02 f303 	lsl.w	r3, r2, r3
 8005982:	461a      	mov	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4013      	ands	r3, r2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d008      	beq.n	800599e <cliFeature+0x52>
                pifLog_Printf(LT_NONE, "%s ", featureNames[i]);
 800598c:	4a46      	ldr	r2, [pc, #280]	; (8005aa8 <cliFeature+0x15c>)
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005994:	461a      	mov	r2, r3
 8005996:	4945      	ldr	r1, [pc, #276]	; (8005aac <cliFeature+0x160>)
 8005998:	2000      	movs	r0, #0
 800599a:	f00e f92d 	bl	8013bf8 <pifLog_Printf>
        for (i = 0; ; i++) {
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	3301      	adds	r3, #1
 80059a2:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 80059a4:	e7e3      	b.n	800596e <cliFeature+0x22>
                break;
 80059a6:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 80059a8:	4941      	ldr	r1, [pc, #260]	; (8005ab0 <cliFeature+0x164>)
 80059aa:	2000      	movs	r0, #0
 80059ac:	f00e f896 	bl	8013adc <pifLog_Print>
 80059b0:	e073      	b.n	8005a9a <cliFeature+0x14e>
    } else if (strcasecmp(argv[0], "list") == 0) {
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	493f      	ldr	r1, [pc, #252]	; (8005ab4 <cliFeature+0x168>)
 80059b8:	4618      	mov	r0, r3
 80059ba:	f01e fb8d 	bl	80240d8 <strcasecmp>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d11e      	bne.n	8005a02 <cliFeature+0xb6>
        pifLog_Print(LT_NONE, "Available features: ");
 80059c4:	493c      	ldr	r1, [pc, #240]	; (8005ab8 <cliFeature+0x16c>)
 80059c6:	2000      	movs	r0, #0
 80059c8:	f00e f888 	bl	8013adc <pifLog_Print>
        for (i = 0; ; i++) {
 80059cc:	2300      	movs	r3, #0
 80059ce:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 80059d0:	4a35      	ldr	r2, [pc, #212]	; (8005aa8 <cliFeature+0x15c>)
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00c      	beq.n	80059f6 <cliFeature+0xaa>
                break;
            pifLog_Printf(LT_NONE, "%s ", featureNames[i]);
 80059dc:	4a32      	ldr	r2, [pc, #200]	; (8005aa8 <cliFeature+0x15c>)
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059e4:	461a      	mov	r2, r3
 80059e6:	4931      	ldr	r1, [pc, #196]	; (8005aac <cliFeature+0x160>)
 80059e8:	2000      	movs	r0, #0
 80059ea:	f00e f905 	bl	8013bf8 <pifLog_Printf>
        for (i = 0; ; i++) {
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	3301      	adds	r3, #1
 80059f2:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 80059f4:	e7ec      	b.n	80059d0 <cliFeature+0x84>
                break;
 80059f6:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 80059f8:	492d      	ldr	r1, [pc, #180]	; (8005ab0 <cliFeature+0x164>)
 80059fa:	2000      	movs	r0, #0
 80059fc:	f00e f86e 	bl	8013adc <pifLog_Print>
 8005a00:	e04b      	b.n	8005a9a <cliFeature+0x14e>
    } else {
        bool remove = false;
 8005a02:	2300      	movs	r3, #0
 8005a04:	74fb      	strb	r3, [r7, #19]
        if (argv[0][0] == '-') {
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b2d      	cmp	r3, #45	; 0x2d
 8005a0e:	d101      	bne.n	8005a14 <cliFeature+0xc8>
            // remove feature
            remove = true;
 8005a10:	2301      	movs	r3, #1
 8005a12:	74fb      	strb	r3, [r7, #19]
        }

        for (i = 0; ; i++) {
 8005a14:	2300      	movs	r3, #0
 8005a16:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL) {
 8005a18:	4a23      	ldr	r2, [pc, #140]	; (8005aa8 <cliFeature+0x15c>)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d104      	bne.n	8005a2e <cliFeature+0xe2>
                pifLog_Print(LT_NONE, "Invalid feature name...\r\n");
 8005a24:	4925      	ldr	r1, [pc, #148]	; (8005abc <cliFeature+0x170>)
 8005a26:	2000      	movs	r0, #0
 8005a28:	f00e f858 	bl	8013adc <pifLog_Print>
                break;
 8005a2c:	e035      	b.n	8005a9a <cliFeature+0x14e>
            }
            if (strcasecmp(argv[0] + 1, featureNames[i]) == 0) {
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	491c      	ldr	r1, [pc, #112]	; (8005aa8 <cliFeature+0x15c>)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4610      	mov	r0, r2
 8005a40:	f01e fb4a 	bl	80240d8 <strcasecmp>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d123      	bne.n	8005a92 <cliFeature+0x146>
                if (remove) {
 8005a4a:	7cfb      	ldrb	r3, [r7, #19]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00b      	beq.n	8005a68 <cliFeature+0x11c>
                    featureClear(1 << i);
 8005a50:	2201      	movs	r2, #1
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f001 fb49 	bl	80070f0 <featureClear>
                    pifLog_Print(LT_NONE, "Disabled ");
 8005a5e:	4918      	ldr	r1, [pc, #96]	; (8005ac0 <cliFeature+0x174>)
 8005a60:	2000      	movs	r0, #0
 8005a62:	f00e f83b 	bl	8013adc <pifLog_Print>
 8005a66:	e00a      	b.n	8005a7e <cliFeature+0x132>
                } else {
                    featureSet(1 << i);
 8005a68:	2201      	movs	r2, #1
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	4618      	mov	r0, r3
 8005a72:	f001 fb2b 	bl	80070cc <featureSet>
                    pifLog_Print(LT_NONE, "Enabled ");
 8005a76:	4913      	ldr	r1, [pc, #76]	; (8005ac4 <cliFeature+0x178>)
 8005a78:	2000      	movs	r0, #0
 8005a7a:	f00e f82f 	bl	8013adc <pifLog_Print>
                }
                pifLog_Printf(LT_NONE, "%s\r\n", featureNames[i]);
 8005a7e:	4a0a      	ldr	r2, [pc, #40]	; (8005aa8 <cliFeature+0x15c>)
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a86:	461a      	mov	r2, r3
 8005a88:	490f      	ldr	r1, [pc, #60]	; (8005ac8 <cliFeature+0x17c>)
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	f00e f8b4 	bl	8013bf8 <pifLog_Printf>
                break;
 8005a90:	e003      	b.n	8005a9a <cliFeature+0x14e>
        for (i = 0; ; i++) {
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	3301      	adds	r3, #1
 8005a96:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL) {
 8005a98:	e7be      	b.n	8005a18 <cliFeature+0xcc>
            }
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	08028048 	.word	0x08028048
 8005aa8:	08028e70 	.word	0x08028e70
 8005aac:	0802805c 	.word	0x0802805c
 8005ab0:	08027b48 	.word	0x08027b48
 8005ab4:	08028060 	.word	0x08028060
 8005ab8:	08028068 	.word	0x08028068
 8005abc:	08028080 	.word	0x08028080
 8005ac0:	0802809c 	.word	0x0802809c
 8005ac4:	080280a8 	.word	0x080280a8
 8005ac8:	08027b28 	.word	0x08027b28

08005acc <cliGpsPassthrough>:

#ifdef GPS
static int cliGpsPassthrough(int argc, char *argv[])
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;

    switch (gpsSetPassthrough()) {
 8005ad6:	f003 fb2d 	bl	8009134 <gpsSetPassthrough>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <cliGpsPassthrough+0x1a>
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d005      	beq.n	8005af0 <cliGpsPassthrough+0x24>
 8005ae4:	e009      	b.n	8005afa <cliGpsPassthrough+0x2e>
    case 0:
        pifLog_Print(LT_NONE, "Disabling GPS passthrough...\r\n");
 8005ae6:	490a      	ldr	r1, [pc, #40]	; (8005b10 <cliGpsPassthrough+0x44>)
 8005ae8:	2000      	movs	r0, #0
 8005aea:	f00d fff7 	bl	8013adc <pifLog_Print>
        break;
 8005aee:	e009      	b.n	8005b04 <cliGpsPassthrough+0x38>

    case 1:
        pifLog_Print(LT_NONE, "Enabling GPS passthrough...\r\n");
 8005af0:	4908      	ldr	r1, [pc, #32]	; (8005b14 <cliGpsPassthrough+0x48>)
 8005af2:	2000      	movs	r0, #0
 8005af4:	f00d fff2 	bl	8013adc <pifLog_Print>
        break;
 8005af8:	e004      	b.n	8005b04 <cliGpsPassthrough+0x38>

    default:
        pifLog_Print(LT_NONE, "Error: Enable and plug in GPS first\r\n");
 8005afa:	4907      	ldr	r1, [pc, #28]	; (8005b18 <cliGpsPassthrough+0x4c>)
 8005afc:	2000      	movs	r0, #0
 8005afe:	f00d ffed 	bl	8013adc <pifLog_Print>
        break;
 8005b02:	bf00      	nop
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	080280b4 	.word	0x080280b4
 8005b14:	080280d4 	.word	0x080280d4
 8005b18:	080280f4 	.word	0x080280f4

08005b1c <cliMap>:
#endif

static int cliMap(int argc, char *argv[])
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b088      	sub	sp, #32
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
    uint32_t len;
    uint32_t i;
    char out[9];

    if (argc < 1) return PIF_LOG_CMD_TOO_FEW_ARGS;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	dc02      	bgt.n	8005b32 <cliMap+0x16>
 8005b2c:	f06f 0302 	mvn.w	r3, #2
 8005b30:	e096      	b.n	8005c60 <cliMap+0x144>

    len = strlen(argv[0]);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fa fb4e 	bl	80001d8 <strlen>
 8005b3c:	61b8      	str	r0, [r7, #24]

    if (len == mcfg.rc_channel_count) {
 8005b3e:	4b4a      	ldr	r3, [pc, #296]	; (8005c68 <cliMap+0x14c>)
 8005b40:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005b44:	461a      	mov	r2, r3
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d15a      	bne.n	8005c02 <cliMap+0xe6>
        // uppercase it
        for (i = 0; i < mcfg.rc_channel_count; i++)
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	61fb      	str	r3, [r7, #28]
 8005b50:	e01b      	b.n	8005b8a <cliMap+0x6e>
            argv[0][i] = toupper((unsigned char)argv[0][i]);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	4413      	add	r3, r2
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	75fb      	strb	r3, [r7, #23]
 8005b5e:	7dfb      	ldrb	r3, [r7, #23]
 8005b60:	3301      	adds	r3, #1
 8005b62:	4a42      	ldr	r2, [pc, #264]	; (8005c6c <cliMap+0x150>)
 8005b64:	4413      	add	r3, r2
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	f003 0303 	and.w	r3, r3, #3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d102      	bne.n	8005b76 <cliMap+0x5a>
 8005b70:	7dfb      	ldrb	r3, [r7, #23]
 8005b72:	3b20      	subs	r3, #32
 8005b74:	e000      	b.n	8005b78 <cliMap+0x5c>
 8005b76:	7dfb      	ldrb	r3, [r7, #23]
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	6811      	ldr	r1, [r2, #0]
 8005b7c:	69fa      	ldr	r2, [r7, #28]
 8005b7e:	440a      	add	r2, r1
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	7013      	strb	r3, [r2, #0]
        for (i = 0; i < mcfg.rc_channel_count; i++)
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	3301      	adds	r3, #1
 8005b88:	61fb      	str	r3, [r7, #28]
 8005b8a:	4b37      	ldr	r3, [pc, #220]	; (8005c68 <cliMap+0x14c>)
 8005b8c:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005b90:	461a      	mov	r2, r3
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d3dc      	bcc.n	8005b52 <cliMap+0x36>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61fb      	str	r3, [r7, #28]
 8005b9c:	e025      	b.n	8005bea <cliMap+0xce>
            if (strchr(rcChannelLetters, argv[0][i]) && !strchr(argv[0] + i + 1, argv[0][i]))
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4831      	ldr	r0, [pc, #196]	; (8005c70 <cliMap+0x154>)
 8005bac:	f01e fabd 	bl	802412a <strchr>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d013      	beq.n	8005bde <cliMap+0xc2>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	18d0      	adds	r0, r2, r3
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	4619      	mov	r1, r3
 8005bcc:	f01e faad 	bl	802412a <strchr>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d103      	bne.n	8005bde <cliMap+0xc2>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	61fb      	str	r3, [r7, #28]
 8005bdc:	e005      	b.n	8005bea <cliMap+0xce>
                continue;
            pifLog_Print(LT_NONE, "Must be any order of AETR1234\r\n");
 8005bde:	4925      	ldr	r1, [pc, #148]	; (8005c74 <cliMap+0x158>)
 8005be0:	2000      	movs	r0, #0
 8005be2:	f00d ff7b 	bl	8013adc <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8005be6:	2300      	movs	r3, #0
 8005be8:	e03a      	b.n	8005c60 <cliMap+0x144>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 8005bea:	4b1f      	ldr	r3, [pc, #124]	; (8005c68 <cliMap+0x14c>)
 8005bec:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d3d2      	bcc.n	8005b9e <cliMap+0x82>
        }
        parseRcChannels(argv[0]);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 fcc3 	bl	8006588 <parseRcChannels>
    }
    pifLog_Print(LT_NONE, "Current assignment: ");
 8005c02:	491d      	ldr	r1, [pc, #116]	; (8005c78 <cliMap+0x15c>)
 8005c04:	2000      	movs	r0, #0
 8005c06:	f00d ff69 	bl	8013adc <pifLog_Print>
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61fb      	str	r3, [r7, #28]
 8005c0e:	e012      	b.n	8005c36 <cliMap+0x11a>
        out[mcfg.rcmap[i]] = rcChannelLetters[i];
 8005c10:	4a15      	ldr	r2, [pc, #84]	; (8005c68 <cliMap+0x14c>)
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4a14      	ldr	r2, [pc, #80]	; (8005c70 <cliMap+0x154>)
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	4413      	add	r3, r2
 8005c24:	781a      	ldrb	r2, [r3, #0]
 8005c26:	f101 0320 	add.w	r3, r1, #32
 8005c2a:	443b      	add	r3, r7
 8005c2c:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	3301      	adds	r3, #1
 8005c34:	61fb      	str	r3, [r7, #28]
 8005c36:	4b0c      	ldr	r3, [pc, #48]	; (8005c68 <cliMap+0x14c>)
 8005c38:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d3e5      	bcc.n	8005c10 <cliMap+0xf4>
    out[i] = '\0';
 8005c44:	f107 020c 	add.w	r2, r7, #12
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	701a      	strb	r2, [r3, #0]
    pifLog_Printf(LT_NONE, "%s\r\n", out);
 8005c50:	f107 030c 	add.w	r3, r7, #12
 8005c54:	461a      	mov	r2, r3
 8005c56:	4909      	ldr	r1, [pc, #36]	; (8005c7c <cliMap+0x160>)
 8005c58:	2000      	movs	r0, #0
 8005c5a:	f00d ffcd 	bl	8013bf8 <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3720      	adds	r7, #32
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	2000089c 	.word	0x2000089c
 8005c6c:	0802a4d8 	.word	0x0802a4d8
 8005c70:	08029b68 	.word	0x08029b68
 8005c74:	0802811c 	.word	0x0802811c
 8005c78:	0802813c 	.word	0x0802813c
 8005c7c:	08027b28 	.word	0x08027b28

08005c80 <cliMixer>:

static int cliMixer(int argc, char *argv[])
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
    int i;

    if (argc == 0) {
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10c      	bne.n	8005caa <cliMixer+0x2a>
        pifLog_Printf(LT_NONE, "Current mixer: %s\r\n", mixerNames[mcfg.mixerConfiguration - 1]);
 8005c90:	4b46      	ldr	r3, [pc, #280]	; (8005dac <cliMixer+0x12c>)
 8005c92:	795b      	ldrb	r3, [r3, #5]
 8005c94:	3b01      	subs	r3, #1
 8005c96:	4a46      	ldr	r2, [pc, #280]	; (8005db0 <cliMixer+0x130>)
 8005c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	4945      	ldr	r1, [pc, #276]	; (8005db4 <cliMixer+0x134>)
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	f00d ffa9 	bl	8013bf8 <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	e07b      	b.n	8005da2 <cliMixer+0x122>
    } else if (strcasecmp(argv[0], "list") == 0) {
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4942      	ldr	r1, [pc, #264]	; (8005db8 <cliMixer+0x138>)
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f01e fa11 	bl	80240d8 <strcasecmp>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d11f      	bne.n	8005cfc <cliMixer+0x7c>
        pifLog_Print(LT_NONE, "Available mixers: ");
 8005cbc:	493f      	ldr	r1, [pc, #252]	; (8005dbc <cliMixer+0x13c>)
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	f00d ff0c 	bl	8013adc <pifLog_Print>
        for (i = 0; ; i++) {
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60fb      	str	r3, [r7, #12]
            if (mixerNames[i] == NULL)
 8005cc8:	4a39      	ldr	r2, [pc, #228]	; (8005db0 <cliMixer+0x130>)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00c      	beq.n	8005cee <cliMixer+0x6e>
                break;
            pifLog_Printf(LT_NONE, "%s ", mixerNames[i]);
 8005cd4:	4a36      	ldr	r2, [pc, #216]	; (8005db0 <cliMixer+0x130>)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	4938      	ldr	r1, [pc, #224]	; (8005dc0 <cliMixer+0x140>)
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	f00d ff89 	bl	8013bf8 <pifLog_Printf>
        for (i = 0; ; i++) {
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	60fb      	str	r3, [r7, #12]
            if (mixerNames[i] == NULL)
 8005cec:	e7ec      	b.n	8005cc8 <cliMixer+0x48>
                break;
 8005cee:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8005cf0:	4934      	ldr	r1, [pc, #208]	; (8005dc4 <cliMixer+0x144>)
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	f00d fef2 	bl	8013adc <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	e052      	b.n	8005da2 <cliMixer+0x122>
    }

    for (i = 0; ; i++) {
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	60fb      	str	r3, [r7, #12]
        if (mixerNames[i] == NULL) {
 8005d00:	4a2b      	ldr	r2, [pc, #172]	; (8005db0 <cliMixer+0x130>)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d105      	bne.n	8005d18 <cliMixer+0x98>
            pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 8005d0c:	492e      	ldr	r1, [pc, #184]	; (8005dc8 <cliMixer+0x148>)
 8005d0e:	2000      	movs	r0, #0
 8005d10:	f00d fee4 	bl	8013adc <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8005d14:	2300      	movs	r3, #0
 8005d16:	e044      	b.n	8005da2 <cliMixer+0x122>
        }
        if (strcasecmp(argv[0], mixerNames[i]) == 0) {
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	4924      	ldr	r1, [pc, #144]	; (8005db0 <cliMixer+0x130>)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d24:	4619      	mov	r1, r3
 8005d26:	4610      	mov	r0, r2
 8005d28:	f01e f9d6 	bl	80240d8 <strcasecmp>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d131      	bne.n	8005d96 <cliMixer+0x116>
            mcfg.mixerConfiguration = i + 1;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	3301      	adds	r3, #1
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	4b1c      	ldr	r3, [pc, #112]	; (8005dac <cliMixer+0x12c>)
 8005d3c:	715a      	strb	r2, [r3, #5]
            pifLog_Printf(LT_NONE, "Mixer set to %s\r\n", mixerNames[i]);
 8005d3e:	4a1c      	ldr	r2, [pc, #112]	; (8005db0 <cliMixer+0x130>)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d46:	461a      	mov	r2, r3
 8005d48:	4920      	ldr	r1, [pc, #128]	; (8005dcc <cliMixer+0x14c>)
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	f00d ff54 	bl	8013bf8 <pifLog_Printf>

            // Presets for planes. Not functional with current reset
            // Really Ugly Hack
            if (mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_AIRPLANE) {
 8005d50:	4b16      	ldr	r3, [pc, #88]	; (8005dac <cliMixer+0x12c>)
 8005d52:	795b      	ldrb	r3, [r3, #5]
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	d003      	beq.n	8005d60 <cliMixer+0xe0>
 8005d58:	4b14      	ldr	r3, [pc, #80]	; (8005dac <cliMixer+0x12c>)
 8005d5a:	795b      	ldrb	r3, [r3, #5]
 8005d5c:	2b0e      	cmp	r3, #14
 8005d5e:	d11e      	bne.n	8005d9e <cliMixer+0x11e>
                cfg.dynThrPID = 90;
 8005d60:	4b1b      	ldr	r3, [pc, #108]	; (8005dd0 <cliMixer+0x150>)
 8005d62:	225a      	movs	r2, #90	; 0x5a
 8005d64:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                cfg.rcExpo8 = 0;
 8005d68:	4b19      	ldr	r3, [pc, #100]	; (8005dd0 <cliMixer+0x150>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2020 	strb.w	r2, [r3, #32]
                cfg.P8[PIDALT] = 30;
 8005d70:	4b17      	ldr	r3, [pc, #92]	; (8005dd0 <cliMixer+0x150>)
 8005d72:	221e      	movs	r2, #30
 8005d74:	711a      	strb	r2, [r3, #4]
                cfg.I8[PIDALT] = 20;
 8005d76:	4b16      	ldr	r3, [pc, #88]	; (8005dd0 <cliMixer+0x150>)
 8005d78:	2214      	movs	r2, #20
 8005d7a:	739a      	strb	r2, [r3, #14]
                cfg.D8[PIDALT] = 45;
 8005d7c:	4b14      	ldr	r3, [pc, #80]	; (8005dd0 <cliMixer+0x150>)
 8005d7e:	222d      	movs	r2, #45	; 0x2d
 8005d80:	761a      	strb	r2, [r3, #24]
                cfg.P8[PIDNAVR] = 30;
 8005d82:	4b13      	ldr	r3, [pc, #76]	; (8005dd0 <cliMixer+0x150>)
 8005d84:	221e      	movs	r2, #30
 8005d86:	71da      	strb	r2, [r3, #7]
                cfg.I8[PIDNAVR] = 20;
 8005d88:	4b11      	ldr	r3, [pc, #68]	; (8005dd0 <cliMixer+0x150>)
 8005d8a:	2214      	movs	r2, #20
 8005d8c:	745a      	strb	r2, [r3, #17]
                cfg.D8[PIDNAVR] = 45;
 8005d8e:	4b10      	ldr	r3, [pc, #64]	; (8005dd0 <cliMixer+0x150>)
 8005d90:	222d      	movs	r2, #45	; 0x2d
 8005d92:	76da      	strb	r2, [r3, #27]
            }
            break;
 8005d94:	e003      	b.n	8005d9e <cliMixer+0x11e>
    for (i = 0; ; i++) {
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	60fb      	str	r3, [r7, #12]
        if (mixerNames[i] == NULL) {
 8005d9c:	e7b0      	b.n	8005d00 <cliMixer+0x80>
            break;
 8005d9e:	bf00      	nop
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	2000089c 	.word	0x2000089c
 8005db0:	08028e0c 	.word	0x08028e0c
 8005db4:	08028154 	.word	0x08028154
 8005db8:	08028060 	.word	0x08028060
 8005dbc:	08028168 	.word	0x08028168
 8005dc0:	0802805c 	.word	0x0802805c
 8005dc4:	08027b48 	.word	0x08027b48
 8005dc8:	08027b5c 	.word	0x08027b5c
 8005dcc:	0802817c 	.word	0x0802817c
 8005dd0:	20000e08 	.word	0x20000e08

08005dd4 <cliMotor>:

static int cliMotor(int argc, char *argv[])
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
    int motor_index = 0;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
    int motor_value = 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	60bb      	str	r3, [r7, #8]

    if (argc == 0) {
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d105      	bne.n	8005df8 <cliMotor+0x24>
        pifLog_Print(LT_NONE, "Usage:\r\nmotor index [value] - show [or set] motor value\r\n");
 8005dec:	4926      	ldr	r1, [pc, #152]	; (8005e88 <cliMotor+0xb4>)
 8005dee:	2000      	movs	r0, #0
 8005df0:	f00d fe74 	bl	8013adc <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005df4:	2300      	movs	r3, #0
 8005df6:	e042      	b.n	8005e7e <cliMotor+0xaa>
    }

    if (argc < 2) {
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	dc0a      	bgt.n	8005e14 <cliMotor+0x40>
        pifLog_Printf(LT_NONE, "Motor %d is set at %d\r\n", motor_index, motor_disarmed[motor_index]);
 8005dfe:	4a23      	ldr	r2, [pc, #140]	; (8005e8c <cliMotor+0xb8>)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4921      	ldr	r1, [pc, #132]	; (8005e90 <cliMotor+0xbc>)
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	f00d fef4 	bl	8013bf8 <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005e10:	2300      	movs	r3, #0
 8005e12:	e034      	b.n	8005e7e <cliMotor+0xaa>
    }

    motor_index = atoi(argv[0]);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f01d fffb 	bl	8023e14 <atoi>
 8005e1e:	60f8      	str	r0, [r7, #12]
    motor_value = atoi(argv[1]);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	3304      	adds	r3, #4
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f01d fff4 	bl	8023e14 <atoi>
 8005e2c:	60b8      	str	r0, [r7, #8]

    if (motor_index < 0 || motor_index >= MAX_MOTORS) {
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	db02      	blt.n	8005e3a <cliMotor+0x66>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b0b      	cmp	r3, #11
 8005e38:	dd06      	ble.n	8005e48 <cliMotor+0x74>
        pifLog_Printf(LT_NONE, "No such motor, use a number [0, %d]\r\n", MAX_MOTORS);
 8005e3a:	220c      	movs	r2, #12
 8005e3c:	4915      	ldr	r1, [pc, #84]	; (8005e94 <cliMotor+0xc0>)
 8005e3e:	2000      	movs	r0, #0
 8005e40:	f00d feda 	bl	8013bf8 <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005e44:	2300      	movs	r3, #0
 8005e46:	e01a      	b.n	8005e7e <cliMotor+0xaa>
    }

    if (motor_value < 1000 || motor_value > 2000) {
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e4e:	db03      	blt.n	8005e58 <cliMotor+0x84>
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005e56:	dd05      	ble.n	8005e64 <cliMotor+0x90>
        pifLog_Print(LT_NONE, "Invalid motor value, 1000..2000\r\n");
 8005e58:	490f      	ldr	r1, [pc, #60]	; (8005e98 <cliMotor+0xc4>)
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	f00d fe3e 	bl	8013adc <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005e60:	2300      	movs	r3, #0
 8005e62:	e00c      	b.n	8005e7e <cliMotor+0xaa>
    }

    pifLog_Printf(LT_NONE, "Setting motor %d to %d\r\n", motor_index, motor_value);
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	490c      	ldr	r1, [pc, #48]	; (8005e9c <cliMotor+0xc8>)
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	f00d fec4 	bl	8013bf8 <pifLog_Printf>
    motor_disarmed[motor_index] = motor_value;
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	b219      	sxth	r1, r3
 8005e74:	4a05      	ldr	r2, [pc, #20]	; (8005e8c <cliMotor+0xb8>)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	return PIF_LOG_CMD_NO_ERROR;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	08028190 	.word	0x08028190
 8005e8c:	200015cc 	.word	0x200015cc
 8005e90:	080281cc 	.word	0x080281cc
 8005e94:	080281e4 	.word	0x080281e4
 8005e98:	0802820c 	.word	0x0802820c
 8005e9c:	08028230 	.word	0x08028230

08005ea0 <cliProfile>:

static int cliProfile(int argc, char *argv[])
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
    int i;

    if (argc == 0) {
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d108      	bne.n	8005ec2 <cliProfile+0x22>
        pifLog_Printf(LT_NONE, "Current profile: %d\r\n", mcfg.current_profile);
 8005eb0:	4b13      	ldr	r3, [pc, #76]	; (8005f00 <cliProfile+0x60>)
 8005eb2:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	4912      	ldr	r1, [pc, #72]	; (8005f04 <cliProfile+0x64>)
 8005eba:	2000      	movs	r0, #0
 8005ebc:	f00d fe9c 	bl	8013bf8 <pifLog_Printf>
 8005ec0:	e018      	b.n	8005ef4 <cliProfile+0x54>
    } else {
        i = atoi(argv[0]);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f01d ffa4 	bl	8023e14 <atoi>
 8005ecc:	60f8      	str	r0, [r7, #12]
        if (i >= 0 && i <= 2) {
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	db0f      	blt.n	8005ef4 <cliProfile+0x54>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	dc0c      	bgt.n	8005ef4 <cliProfile+0x54>
            mcfg.current_profile = i;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	4b08      	ldr	r3, [pc, #32]	; (8005f00 <cliProfile+0x60>)
 8005ee0:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            writeEEPROM(0, false);
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	f000 fcf8 	bl	80068dc <writeEEPROM>
            cliProfile(1, NULL);
 8005eec:	2100      	movs	r1, #0
 8005eee:	2001      	movs	r0, #1
 8005ef0:	f7ff ffd6 	bl	8005ea0 <cliProfile>
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	2000089c 	.word	0x2000089c
 8005f04:	0802824c 	.word	0x0802824c

08005f08 <cliSave>:

static int cliSave(int argc, char *argv[])
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Print(LT_NONE, "Saving...");
 8005f12:	490b      	ldr	r1, [pc, #44]	; (8005f40 <cliSave+0x38>)
 8005f14:	2000      	movs	r0, #0
 8005f16:	f00d fde1 	bl	8013adc <pifLog_Print>
    writeEEPROM(0, true);
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	f000 fcdd 	bl	80068dc <writeEEPROM>
    pifLog_Print(LT_NONE, "\r\nRebooting...");
 8005f22:	4908      	ldr	r1, [pc, #32]	; (8005f44 <cliSave+0x3c>)
 8005f24:	2000      	movs	r0, #0
 8005f26:	f00d fdd9 	bl	8013adc <pifLog_Print>
    pif_Delay1ms(10);
 8005f2a:	200a      	movs	r0, #10
 8005f2c:	f00b fcba 	bl	80118a4 <pif_Delay1ms>
    systemReset(false);
 8005f30:	2000      	movs	r0, #0
 8005f32:	f7fc f887 	bl	8002044 <systemReset>
	return PIF_LOG_CMD_NO_ERROR;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	08028264 	.word	0x08028264
 8005f44:	08028270 	.word	0x08028270

08005f48 <cliPrintVar>:

static void cliPrintVar(const clivalue_t *var, uint32_t full)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
    int32_t value = 0;
 8005f52:	2300      	movs	r3, #0
 8005f54:	617b      	str	r3, [r7, #20]
    char buf[8];

    switch (var->type) {
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	791b      	ldrb	r3, [r3, #4]
 8005f5a:	2b05      	cmp	r3, #5
 8005f5c:	d864      	bhi.n	8006028 <cliPrintVar+0xe0>
 8005f5e:	a201      	add	r2, pc, #4	; (adr r2, 8005f64 <cliPrintVar+0x1c>)
 8005f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f64:	08005f7d 	.word	0x08005f7d
 8005f68:	08005f87 	.word	0x08005f87
 8005f6c:	08005f93 	.word	0x08005f93
 8005f70:	08005f9d 	.word	0x08005f9d
 8005f74:	08005fa9 	.word	0x08005fa9
 8005f78:	08005fb3 	.word	0x08005fb3
        case VAR_UINT8:
            value = *(uint8_t *)var->ptr;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	617b      	str	r3, [r7, #20]
            break;
 8005f84:	e050      	b.n	8006028 <cliPrintVar+0xe0>

        case VAR_INT8:
            value = *(int8_t *)var->ptr;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f993 3000 	ldrsb.w	r3, [r3]
 8005f8e:	617b      	str	r3, [r7, #20]
            break;
 8005f90:	e04a      	b.n	8006028 <cliPrintVar+0xe0>

        case VAR_UINT16:
            value = *(uint16_t *)var->ptr;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	881b      	ldrh	r3, [r3, #0]
 8005f98:	617b      	str	r3, [r7, #20]
            break;
 8005f9a:	e045      	b.n	8006028 <cliPrintVar+0xe0>

        case VAR_INT16:
            value = *(int16_t *)var->ptr;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fa4:	617b      	str	r3, [r7, #20]
            break;
 8005fa6:	e03f      	b.n	8006028 <cliPrintVar+0xe0>

        case VAR_UINT32:
            value = *(uint32_t *)var->ptr;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	617b      	str	r3, [r7, #20]
            break;
 8005fb0:	e03a      	b.n	8006028 <cliPrintVar+0xe0>

        case VAR_FLOAT:
            pifLog_Printf(LT_NONE, "%s", ftoa(*(float *)var->ptr, buf));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	edd3 7a00 	vldr	s15, [r3]
 8005fba:	f107 030c 	add.w	r3, r7, #12
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8005fc4:	f7fe fae2 	bl	800458c <ftoa>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	461a      	mov	r2, r3
 8005fcc:	4921      	ldr	r1, [pc, #132]	; (8006054 <cliPrintVar+0x10c>)
 8005fce:	2000      	movs	r0, #0
 8005fd0:	f00d fe12 	bl	8013bf8 <pifLog_Printf>
            if (full) {
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d037      	beq.n	800604a <cliPrintVar+0x102>
                pifLog_Printf(LT_NONE, " %s", ftoa((float)var->min, buf));
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fe6:	f107 030c 	add.w	r3, r7, #12
 8005fea:	4618      	mov	r0, r3
 8005fec:	eeb0 0a67 	vmov.f32	s0, s15
 8005ff0:	f7fe facc 	bl	800458c <ftoa>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	4917      	ldr	r1, [pc, #92]	; (8006058 <cliPrintVar+0x110>)
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	f00d fdfc 	bl	8013bf8 <pifLog_Printf>
                pifLog_Printf(LT_NONE, " %s", ftoa((float)var->max, buf));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	ee07 3a90 	vmov	s15, r3
 8006008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800600c:	f107 030c 	add.w	r3, r7, #12
 8006010:	4618      	mov	r0, r3
 8006012:	eeb0 0a67 	vmov.f32	s0, s15
 8006016:	f7fe fab9 	bl	800458c <ftoa>
 800601a:	4603      	mov	r3, r0
 800601c:	461a      	mov	r2, r3
 800601e:	490e      	ldr	r1, [pc, #56]	; (8006058 <cliPrintVar+0x110>)
 8006020:	2000      	movs	r0, #0
 8006022:	f00d fde9 	bl	8013bf8 <pifLog_Printf>
 8006026:	e011      	b.n	800604c <cliPrintVar+0x104>
            }
            return; // return from case for float only
    }
    pifLog_Printf(LT_NONE, "%d", value);
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	490c      	ldr	r1, [pc, #48]	; (800605c <cliPrintVar+0x114>)
 800602c:	2000      	movs	r0, #0
 800602e:	f00d fde3 	bl	8013bf8 <pifLog_Printf>
    if (full)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d009      	beq.n	800604c <cliPrintVar+0x104>
        pifLog_Printf(LT_NONE, " %d %d", var->min, var->max);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68da      	ldr	r2, [r3, #12]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	4907      	ldr	r1, [pc, #28]	; (8006060 <cliPrintVar+0x118>)
 8006042:	2000      	movs	r0, #0
 8006044:	f00d fdd8 	bl	8013bf8 <pifLog_Printf>
 8006048:	e000      	b.n	800604c <cliPrintVar+0x104>
            return; // return from case for float only
 800604a:	bf00      	nop
}
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	08027f88 	.word	0x08027f88
 8006058:	08028280 	.word	0x08028280
 800605c:	08027e34 	.word	0x08027e34
 8006060:	08028284 	.word	0x08028284

08006064 <cliSetVar>:

static void cliSetVar(const clivalue_t *var, const int_float_value_t value)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
    switch (var->type) {
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	791b      	ldrb	r3, [r3, #4]
 8006072:	2b05      	cmp	r3, #5
 8006074:	d824      	bhi.n	80060c0 <cliSetVar+0x5c>
 8006076:	a201      	add	r2, pc, #4	; (adr r2, 800607c <cliSetVar+0x18>)
 8006078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607c:	08006095 	.word	0x08006095
 8006080:	08006095 	.word	0x08006095
 8006084:	080060a1 	.word	0x080060a1
 8006088:	080060a1 	.word	0x080060a1
 800608c:	080060ad 	.word	0x080060ad
 8006090:	080060b7 	.word	0x080060b7
        case VAR_UINT8:
        case VAR_INT8:
            *(char *)var->ptr = (char)value.int_value;
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	701a      	strb	r2, [r3, #0]
            break;
 800609e:	e00f      	b.n	80060c0 <cliSetVar+0x5c>

        case VAR_UINT16:
        case VAR_INT16:
            *(short *)var->ptr = (short)value.int_value;
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	b212      	sxth	r2, r2
 80060a8:	801a      	strh	r2, [r3, #0]
            break;
 80060aa:	e009      	b.n	80060c0 <cliSetVar+0x5c>

        case VAR_UINT32:
            *(int *)var->ptr = (int)value.int_value;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	601a      	str	r2, [r3, #0]
            break;
 80060b4:	e004      	b.n	80060c0 <cliSetVar+0x5c>

        case VAR_FLOAT:
            *(float *)var->ptr = (float)value.float_value;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	601a      	str	r2, [r3, #0]
            break;
 80060be:	bf00      	nop
    }
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <cliSet>:

static int cliSet(int argc, char *argv[])
{
 80060cc:	b5b0      	push	{r4, r5, r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
    uint32_t i;
    const clivalue_t *val;
    char *eqptr = NULL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	61bb      	str	r3, [r7, #24]
    int32_t value = 0;
 80060da:	2300      	movs	r3, #0
 80060dc:	617b      	str	r3, [r7, #20]
    float valuef = 0;
 80060de:	f04f 0300 	mov.w	r3, #0
 80060e2:	613b      	str	r3, [r7, #16]

    if (argc == 0 || (argc == 1 && argv[0][0] == '*')) {
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d007      	beq.n	80060fa <cliSet+0x2e>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d135      	bne.n	800615c <cliSet+0x90>
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2b2a      	cmp	r3, #42	; 0x2a
 80060f8:	d130      	bne.n	800615c <cliSet+0x90>
        pifLog_Print(LT_NONE, "Current settings: \r\n");
 80060fa:	4987      	ldr	r1, [pc, #540]	; (8006318 <cliSet+0x24c>)
 80060fc:	2000      	movs	r0, #0
 80060fe:	f00d fced 	bl	8013adc <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 8006102:	2300      	movs	r3, #0
 8006104:	61fb      	str	r3, [r7, #28]
 8006106:	e025      	b.n	8006154 <cliSet+0x88>
            val = &valueTable[i];
 8006108:	69fa      	ldr	r2, [r7, #28]
 800610a:	4613      	mov	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4a82      	ldr	r2, [pc, #520]	; (800631c <cliSet+0x250>)
 8006114:	4413      	add	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]
            pifLog_Printf(LT_NONE, "%s = ", valueTable[i].name);
 8006118:	4980      	ldr	r1, [pc, #512]	; (800631c <cliSet+0x250>)
 800611a:	69fa      	ldr	r2, [r7, #28]
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	440b      	add	r3, r1
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	497d      	ldr	r1, [pc, #500]	; (8006320 <cliSet+0x254>)
 800612c:	2000      	movs	r0, #0
 800612e:	f00d fd63 	bl	8013bf8 <pifLog_Printf>
            cliPrintVar(val, strlen(argv[0])); // when len is 1 (when * is passed as argument), it will print min/max values as well, for gui
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4618      	mov	r0, r3
 8006138:	f7fa f84e 	bl	80001d8 <strlen>
 800613c:	4603      	mov	r3, r0
 800613e:	4619      	mov	r1, r3
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7ff ff01 	bl	8005f48 <cliPrintVar>
            pifLog_Print(LT_NONE, "\r\n");
 8006146:	4977      	ldr	r1, [pc, #476]	; (8006324 <cliSet+0x258>)
 8006148:	2000      	movs	r0, #0
 800614a:	f00d fcc7 	bl	8013adc <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	3301      	adds	r3, #1
 8006152:	61fb      	str	r3, [r7, #28]
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	2b8e      	cmp	r3, #142	; 0x8e
 8006158:	d9d6      	bls.n	8006108 <cliSet+0x3c>
    if (argc == 0 || (argc == 1 && argv[0][0] == '*')) {
 800615a:	e0d7      	b.n	800630c <cliSet+0x240>
        }
    } else if ((eqptr = strstr(argv[0], "=")) != NULL) {
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	213d      	movs	r1, #61	; 0x3d
 8006162:	4618      	mov	r0, r3
 8006164:	f01d ffe1 	bl	802412a <strchr>
 8006168:	61b8      	str	r0, [r7, #24]
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 8096 	beq.w	800629e <cliSet+0x1d2>
        // has equal, set var
        eqptr++;
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	3301      	adds	r3, #1
 8006176:	61bb      	str	r3, [r7, #24]
        value = atoi(eqptr);
 8006178:	69b8      	ldr	r0, [r7, #24]
 800617a:	f01d fe4b 	bl	8023e14 <atoi>
 800617e:	6178      	str	r0, [r7, #20]
        valuef = _atof(eqptr);
 8006180:	69b8      	ldr	r0, [r7, #24]
 8006182:	f7fe f90f 	bl	80043a4 <_atof>
 8006186:	ed87 0a04 	vstr	s0, [r7, #16]
        for (i = 0; i < VALUE_COUNT; i++) {
 800618a:	2300      	movs	r3, #0
 800618c:	61fb      	str	r3, [r7, #28]
 800618e:	e07c      	b.n	800628a <cliSet+0x1be>
            val = &valueTable[i];
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	4613      	mov	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4a60      	ldr	r2, [pc, #384]	; (800631c <cliSet+0x250>)
 800619c:	4413      	add	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]
            if (strncasecmp(argv[0], valueTable[i].name, strlen(valueTable[i].name)) == 0) {
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681c      	ldr	r4, [r3, #0]
 80061a4:	495d      	ldr	r1, [pc, #372]	; (800631c <cliSet+0x250>)
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	681d      	ldr	r5, [r3, #0]
 80061b4:	4959      	ldr	r1, [pc, #356]	; (800631c <cliSet+0x250>)
 80061b6:	69fa      	ldr	r2, [r7, #28]
 80061b8:	4613      	mov	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	440b      	add	r3, r1
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fa f807 	bl	80001d8 <strlen>
 80061ca:	4603      	mov	r3, r0
 80061cc:	461a      	mov	r2, r3
 80061ce:	4629      	mov	r1, r5
 80061d0:	4620      	mov	r0, r4
 80061d2:	f01d ffbf 	bl	8024154 <strncasecmp>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d153      	bne.n	8006284 <cliSet+0x1b8>
                if (valuef >= valueTable[i].min && valuef <= valueTable[i].max) { // here we compare the float value since... it should work, RIGHT?
 80061dc:	494f      	ldr	r1, [pc, #316]	; (800631c <cliSet+0x250>)
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	4613      	mov	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	440b      	add	r3, r1
 80061ea:	330c      	adds	r3, #12
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	ee07 3a90 	vmov	s15, r3
 80061f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80061fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80061fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006202:	db39      	blt.n	8006278 <cliSet+0x1ac>
 8006204:	4945      	ldr	r1, [pc, #276]	; (800631c <cliSet+0x250>)
 8006206:	69fa      	ldr	r2, [r7, #28]
 8006208:	4613      	mov	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	440b      	add	r3, r1
 8006212:	3310      	adds	r3, #16
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	ee07 3a90 	vmov	s15, r3
 800621a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800621e:	ed97 7a04 	vldr	s14, [r7, #16]
 8006222:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800622a:	d825      	bhi.n	8006278 <cliSet+0x1ac>
                    int_float_value_t tmp;
                    if (valueTable[i].type == VAR_FLOAT)
 800622c:	493b      	ldr	r1, [pc, #236]	; (800631c <cliSet+0x250>)
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	4613      	mov	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	440b      	add	r3, r1
 800623a:	3304      	adds	r3, #4
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	2b05      	cmp	r3, #5
 8006240:	d102      	bne.n	8006248 <cliSet+0x17c>
                        tmp.float_value = valuef;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	60bb      	str	r3, [r7, #8]
 8006246:	e001      	b.n	800624c <cliSet+0x180>
                    else
                        tmp.int_value = value;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	60bb      	str	r3, [r7, #8]
                    cliSetVar(val, tmp);
 800624c:	68b9      	ldr	r1, [r7, #8]
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f7ff ff08 	bl	8006064 <cliSetVar>
                    pifLog_Printf(LT_NONE, "%s set to ", valueTable[i].name);
 8006254:	4931      	ldr	r1, [pc, #196]	; (800631c <cliSet+0x250>)
 8006256:	69fa      	ldr	r2, [r7, #28]
 8006258:	4613      	mov	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	440b      	add	r3, r1
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	461a      	mov	r2, r3
 8006266:	4930      	ldr	r1, [pc, #192]	; (8006328 <cliSet+0x25c>)
 8006268:	2000      	movs	r0, #0
 800626a:	f00d fcc5 	bl	8013bf8 <pifLog_Printf>
                    cliPrintVar(val, 0);
 800626e:	2100      	movs	r1, #0
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f7ff fe69 	bl	8005f48 <cliPrintVar>
                if (valuef >= valueTable[i].min && valuef <= valueTable[i].max) { // here we compare the float value since... it should work, RIGHT?
 8006276:	e003      	b.n	8006280 <cliSet+0x1b4>
                } else {
                    pifLog_Print(LT_NONE, "ERR: Value assignment out of range\r\n");
 8006278:	492c      	ldr	r1, [pc, #176]	; (800632c <cliSet+0x260>)
 800627a:	2000      	movs	r0, #0
 800627c:	f00d fc2e 	bl	8013adc <pifLog_Print>
                }
                return PIF_LOG_CMD_NO_ERROR;
 8006280:	2300      	movs	r3, #0
 8006282:	e044      	b.n	800630e <cliSet+0x242>
        for (i = 0; i < VALUE_COUNT; i++) {
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	3301      	adds	r3, #1
 8006288:	61fb      	str	r3, [r7, #28]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	2b8e      	cmp	r3, #142	; 0x8e
 800628e:	f67f af7f 	bls.w	8006190 <cliSet+0xc4>
            }
        }
        pifLog_Print(LT_NONE, "ERR: Unknown variable name\r\n");
 8006292:	4927      	ldr	r1, [pc, #156]	; (8006330 <cliSet+0x264>)
 8006294:	2000      	movs	r0, #0
 8006296:	f00d fc21 	bl	8013adc <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 800629a:	2300      	movs	r3, #0
 800629c:	e037      	b.n	800630e <cliSet+0x242>
    } else {
        // no equals, check for matching variables.
        for (i = 0; i < VALUE_COUNT; i++) {
 800629e:	2300      	movs	r3, #0
 80062a0:	61fb      	str	r3, [r7, #28]
 80062a2:	e030      	b.n	8006306 <cliSet+0x23a>
            if (strstr(valueTable[i].name, argv[0])) {
 80062a4:	491d      	ldr	r1, [pc, #116]	; (800631c <cliSet+0x250>)
 80062a6:	69fa      	ldr	r2, [r7, #28]
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4619      	mov	r1, r3
 80062ba:	4610      	mov	r0, r2
 80062bc:	f01d ff7f 	bl	80241be <strstr>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d01c      	beq.n	8006300 <cliSet+0x234>
                val = &valueTable[i];
 80062c6:	69fa      	ldr	r2, [r7, #28]
 80062c8:	4613      	mov	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4a12      	ldr	r2, [pc, #72]	; (800631c <cliSet+0x250>)
 80062d2:	4413      	add	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]
                pifLog_Printf(LT_NONE, "%s = ", valueTable[i].name);
 80062d6:	4911      	ldr	r1, [pc, #68]	; (800631c <cliSet+0x250>)
 80062d8:	69fa      	ldr	r2, [r7, #28]
 80062da:	4613      	mov	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	440b      	add	r3, r1
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	461a      	mov	r2, r3
 80062e8:	490d      	ldr	r1, [pc, #52]	; (8006320 <cliSet+0x254>)
 80062ea:	2000      	movs	r0, #0
 80062ec:	f00d fc84 	bl	8013bf8 <pifLog_Printf>
                cliPrintVar(val, 0);
 80062f0:	2100      	movs	r1, #0
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f7ff fe28 	bl	8005f48 <cliPrintVar>
                pifLog_Print(LT_NONE, "\r\n");
 80062f8:	490a      	ldr	r1, [pc, #40]	; (8006324 <cliSet+0x258>)
 80062fa:	2000      	movs	r0, #0
 80062fc:	f00d fbee 	bl	8013adc <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	3301      	adds	r3, #1
 8006304:	61fb      	str	r3, [r7, #28]
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	2b8e      	cmp	r3, #142	; 0x8e
 800630a:	d9cb      	bls.n	80062a4 <cliSet+0x1d8>
            }
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3720      	adds	r7, #32
 8006312:	46bd      	mov	sp, r7
 8006314:	bdb0      	pop	{r4, r5, r7, pc}
 8006316:	bf00      	nop
 8006318:	0802828c 	.word	0x0802828c
 800631c:	0802903c 	.word	0x0802903c
 8006320:	080282a4 	.word	0x080282a4
 8006324:	08027b48 	.word	0x08027b48
 8006328:	080282ac 	.word	0x080282ac
 800632c:	080282b8 	.word	0x080282b8
 8006330:	080282e0 	.word	0x080282e0

08006334 <cliStatus>:

static int cliStatus(int argc, char *argv[])
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af02      	add	r7, sp, #8
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    uint8_t i;
    uint32_t mask;

    pifLog_Printf(LT_NONE, "System Uptime: %ld seconds, Voltage: %d * 0.1V (%dS battery)\r\n",
 800633e:	4b4d      	ldr	r3, [pc, #308]	; (8006474 <cliStatus+0x140>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a4d      	ldr	r2, [pc, #308]	; (8006478 <cliStatus+0x144>)
 8006344:	fba2 2303 	umull	r2, r3, r2, r3
 8006348:	099a      	lsrs	r2, r3, #6
 800634a:	4b4c      	ldr	r3, [pc, #304]	; (800647c <cliStatus+0x148>)
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	4619      	mov	r1, r3
 8006350:	4b4b      	ldr	r3, [pc, #300]	; (8006480 <cliStatus+0x14c>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	460b      	mov	r3, r1
 8006358:	494a      	ldr	r1, [pc, #296]	; (8006484 <cliStatus+0x150>)
 800635a:	2000      	movs	r0, #0
 800635c:	f00d fc4c 	bl	8013bf8 <pifLog_Printf>
           pif_cumulative_timer1ms / 1000, vbat, batteryCellCount);
    mask = sensorsMask();
 8006360:	f000 fe92 	bl	8007088 <sensorsMask>
 8006364:	60b8      	str	r0, [r7, #8]

    pifLog_Printf(LT_NONE, "Hardware: %s @ %ldMHz, detected sensors: ", g_board_name, (g_core_clock / 1000000));
 8006366:	4b48      	ldr	r3, [pc, #288]	; (8006488 <cliStatus+0x154>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a48      	ldr	r2, [pc, #288]	; (800648c <cliStatus+0x158>)
 800636c:	fba2 2303 	umull	r2, r3, r2, r3
 8006370:	0c9b      	lsrs	r3, r3, #18
 8006372:	4a47      	ldr	r2, [pc, #284]	; (8006490 <cliStatus+0x15c>)
 8006374:	4947      	ldr	r1, [pc, #284]	; (8006494 <cliStatus+0x160>)
 8006376:	2000      	movs	r0, #0
 8006378:	f00d fc3e 	bl	8013bf8 <pifLog_Printf>
    for (i = 0; ; i++) {
 800637c:	2300      	movs	r3, #0
 800637e:	73fb      	strb	r3, [r7, #15]
        if (sensorNames[i] == NULL)
 8006380:	7bfb      	ldrb	r3, [r7, #15]
 8006382:	4a45      	ldr	r2, [pc, #276]	; (8006498 <cliStatus+0x164>)
 8006384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d015      	beq.n	80063b8 <cliStatus+0x84>
            break;
        if (mask & (1 << i))
 800638c:	7bfb      	ldrb	r3, [r7, #15]
 800638e:	2201      	movs	r2, #1
 8006390:	fa02 f303 	lsl.w	r3, r2, r3
 8006394:	461a      	mov	r2, r3
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	4013      	ands	r3, r2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d008      	beq.n	80063b0 <cliStatus+0x7c>
            pifLog_Printf(LT_NONE, "%s ", sensorNames[i]);
 800639e:	7bfb      	ldrb	r3, [r7, #15]
 80063a0:	4a3d      	ldr	r2, [pc, #244]	; (8006498 <cliStatus+0x164>)
 80063a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063a6:	461a      	mov	r2, r3
 80063a8:	493c      	ldr	r1, [pc, #240]	; (800649c <cliStatus+0x168>)
 80063aa:	2000      	movs	r0, #0
 80063ac:	f00d fc24 	bl	8013bf8 <pifLog_Printf>
    for (i = 0; ; i++) {
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	3301      	adds	r3, #1
 80063b4:	73fb      	strb	r3, [r7, #15]
        if (sensorNames[i] == NULL)
 80063b6:	e7e3      	b.n	8006380 <cliStatus+0x4c>
            break;
 80063b8:	bf00      	nop
    }
    pifLog_Print(LT_NONE, "\r\n");
 80063ba:	4939      	ldr	r1, [pc, #228]	; (80064a0 <cliStatus+0x16c>)
 80063bc:	2000      	movs	r0, #0
 80063be:	f00d fb8d 	bl	8013adc <pifLog_Print>
    if (sensors(SENSOR_GYRO))
 80063c2:	2001      	movs	r0, #1
 80063c4:	f000 fe24 	bl	8007010 <sensors>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d006      	beq.n	80063dc <cliStatus+0xa8>
        pifLog_Printf(LT_NONE, "GYRO_HW: %s ", sensor_set.gyro.hardware);
 80063ce:	4b35      	ldr	r3, [pc, #212]	; (80064a4 <cliStatus+0x170>)
 80063d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063d2:	461a      	mov	r2, r3
 80063d4:	4934      	ldr	r1, [pc, #208]	; (80064a8 <cliStatus+0x174>)
 80063d6:	2000      	movs	r0, #0
 80063d8:	f00d fc0e 	bl	8013bf8 <pifLog_Printf>
    if (sensors(SENSOR_ACC))
 80063dc:	2002      	movs	r0, #2
 80063de:	f000 fe17 	bl	8007010 <sensors>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d007      	beq.n	80063f8 <cliStatus+0xc4>
        pifLog_Printf(LT_NONE, "ACC_HW: %s ", sensor_set.acc.hardware);
 80063e8:	4b2e      	ldr	r3, [pc, #184]	; (80064a4 <cliStatus+0x170>)
 80063ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ee:	461a      	mov	r2, r3
 80063f0:	492e      	ldr	r1, [pc, #184]	; (80064ac <cliStatus+0x178>)
 80063f2:	2000      	movs	r0, #0
 80063f4:	f00d fc00 	bl	8013bf8 <pifLog_Printf>
    if (sensors(SENSOR_MAG))
 80063f8:	2008      	movs	r0, #8
 80063fa:	f000 fe09 	bl	8007010 <sensors>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d007      	beq.n	8006414 <cliStatus+0xe0>
        pifLog_Printf(LT_NONE, ", MAG_HW: %s ", sensor_set.mag.hardware);
 8006404:	4b27      	ldr	r3, [pc, #156]	; (80064a4 <cliStatus+0x170>)
 8006406:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800640a:	461a      	mov	r2, r3
 800640c:	4928      	ldr	r1, [pc, #160]	; (80064b0 <cliStatus+0x17c>)
 800640e:	2000      	movs	r0, #0
 8006410:	f00d fbf2 	bl	8013bf8 <pifLog_Printf>
    if (sensors(SENSOR_BARO))
 8006414:	2004      	movs	r0, #4
 8006416:	f000 fdfb 	bl	8007010 <sensors>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d007      	beq.n	8006430 <cliStatus+0xfc>
        pifLog_Printf(LT_NONE, ", BARO_HW: %s ", sensor_set.baro.hardware);
 8006420:	4b20      	ldr	r3, [pc, #128]	; (80064a4 <cliStatus+0x170>)
 8006422:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006426:	461a      	mov	r2, r3
 8006428:	4922      	ldr	r1, [pc, #136]	; (80064b4 <cliStatus+0x180>)
 800642a:	2000      	movs	r0, #0
 800642c:	f00d fbe4 	bl	8013bf8 <pifLog_Printf>
    pifLog_Print(LT_NONE, "\r\n");
 8006430:	491b      	ldr	r1, [pc, #108]	; (80064a0 <cliStatus+0x16c>)
 8006432:	2000      	movs	r0, #0
 8006434:	f00d fb52 	bl	8013adc <pifLog_Print>

    pifLog_Printf(LT_NONE, "Cycle Time: %d, I2C Errors: %d, config size: %d\r\n", cycleTime, g_i2c_port.error_count, sizeof(master_t));
 8006438:	4b1f      	ldr	r3, [pc, #124]	; (80064b8 <cliStatus+0x184>)
 800643a:	881b      	ldrh	r3, [r3, #0]
 800643c:	461a      	mov	r2, r3
 800643e:	4b1f      	ldr	r3, [pc, #124]	; (80064bc <cliStatus+0x188>)
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	4619      	mov	r1, r3
 8006444:	f240 536c 	movw	r3, #1388	; 0x56c
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	460b      	mov	r3, r1
 800644c:	491c      	ldr	r1, [pc, #112]	; (80064c0 <cliStatus+0x18c>)
 800644e:	2000      	movs	r0, #0
 8006450:	f00d fbd2 	bl	8013bf8 <pifLog_Printf>

   	pifLog_Printf(LT_NONE, "PIF Timer 1ms count=%d\n", pifTimerManager_Count(&g_timer_1ms));
 8006454:	481b      	ldr	r0, [pc, #108]	; (80064c4 <cliStatus+0x190>)
 8006456:	f00f f99e 	bl	8015796 <pifTimerManager_Count>
 800645a:	4603      	mov	r3, r0
 800645c:	461a      	mov	r2, r3
 800645e:	491a      	ldr	r1, [pc, #104]	; (80064c8 <cliStatus+0x194>)
 8006460:	2000      	movs	r0, #0
 8006462:	f00d fbc9 	bl	8013bf8 <pifLog_Printf>

    cliStatusCallback();
 8006466:	f000 f871 	bl	800654c <cliStatusCallback>

	return PIF_LOG_CMD_NO_ERROR;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	20001df8 	.word	0x20001df8
 8006478:	10624dd3 	.word	0x10624dd3
 800647c:	20001770 	.word	0x20001770
 8006480:	20000054 	.word	0x20000054
 8006484:	08028300 	.word	0x08028300
 8006488:	2000173c 	.word	0x2000173c
 800648c:	431bde83 	.word	0x431bde83
 8006490:	08028d90 	.word	0x08028d90
 8006494:	08028340 	.word	0x08028340
 8006498:	08028ebc 	.word	0x08028ebc
 800649c:	0802805c 	.word	0x0802805c
 80064a0:	08027b48 	.word	0x08027b48
 80064a4:	20000060 	.word	0x20000060
 80064a8:	0802836c 	.word	0x0802836c
 80064ac:	0802837c 	.word	0x0802837c
 80064b0:	08028388 	.word	0x08028388
 80064b4:	08028398 	.word	0x08028398
 80064b8:	2000176c 	.word	0x2000176c
 80064bc:	20001550 	.word	0x20001550
 80064c0:	080283a8 	.word	0x080283a8
 80064c4:	20001580 	.word	0x20001580
 80064c8:	080283dc 	.word	0x080283dc

080064cc <cliVersion>:

static int cliVersion(int argc, char *argv[])
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Printf(LT_NONE, "Afro32 CLI version 2.3 " __DATE__ " / " __TIME__);
 80064d6:	4904      	ldr	r1, [pc, #16]	; (80064e8 <cliVersion+0x1c>)
 80064d8:	2000      	movs	r0, #0
 80064da:	f00d fb8d 	bl	8013bf8 <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	080283f4 	.word	0x080283f4

080064ec <cliInit>:

BOOL cliInit(PifComm* p_comm)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
    if (!cliMode) {
 80064f4:	4b11      	ldr	r3, [pc, #68]	; (800653c <cliInit+0x50>)
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d119      	bne.n	8006530 <cliInit+0x44>
        cliMode = 1;
 80064fc:	4b0f      	ldr	r3, [pc, #60]	; (800653c <cliInit+0x50>)
 80064fe:	2201      	movs	r2, #1
 8006500:	701a      	strb	r2, [r3, #0]

#ifndef __PIF_NO_LOG__
        pifLog_DetachComm();
 8006502:	f00d fc2d 	bl	8013d60 <pifLog_DetachComm>
#else
        pifLog_Init();
#endif
        if (!pifLog_AttachComm(p_comm)) return FALSE;
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f00d fc04 	bl	8013d14 <pifLog_AttachComm>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <cliInit+0x2a>
 8006512:	2300      	movs	r3, #0
 8006514:	e00d      	b.n	8006532 <cliInit+0x46>
        if (!pifLog_UseCommand(c_psCmdTable, "\r\n# ")) return FALSE;
 8006516:	490a      	ldr	r1, [pc, #40]	; (8006540 <cliInit+0x54>)
 8006518:	480a      	ldr	r0, [pc, #40]	; (8006544 <cliInit+0x58>)
 800651a:	f00d faab 	bl	8013a74 <pifLog_UseCommand>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <cliInit+0x3c>
 8006524:	2300      	movs	r3, #0
 8006526:	e004      	b.n	8006532 <cliInit+0x46>
        pifLog_Print(LT_NONE, "\r\nEntering CLI Mode, type 'exit' to return, or 'help'\r\n");
 8006528:	4907      	ldr	r1, [pc, #28]	; (8006548 <cliInit+0x5c>)
 800652a:	2000      	movs	r0, #0
 800652c:	f00d fad6 	bl	8013adc <pifLog_Print>
    }
    return TRUE;
 8006530:	2301      	movs	r3, #1
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	20000864 	.word	0x20000864
 8006540:	08028424 	.word	0x08028424
 8006544:	08028edc 	.word	0x08028edc
 8006548:	0802842c 	.word	0x0802842c

0800654c <cliStatusCallback>:

PIF_WEAK void cliStatusCallback()
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0

}
 8006550:	bf00      	nop
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
	...

0800655c <initEEPROM>:
static void resetConf(void);

static PifStorage* p_storage;

bool initEEPROM(PifStorage* p_sto)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
	if (p_sto) {
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d004      	beq.n	8006574 <initEEPROM+0x18>
		p_storage = p_sto;
 800656a:	4a06      	ldr	r2, [pc, #24]	; (8006584 <initEEPROM+0x28>)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6013      	str	r3, [r2, #0]
		return TRUE;
 8006570:	2301      	movs	r3, #1
 8006572:	e000      	b.n	8006576 <initEEPROM+0x1a>
	}
	return FALSE;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	20000f44 	.word	0x20000f44

08006588 <parseRcChannels>:

void parseRcChannels(const char *input)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
    const char *c, *s;

    for (c = input; *c; c++) {
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	e018      	b.n	80065c8 <parseRcChannels+0x40>
        s = strchr(rcChannelLetters, *c);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	4619      	mov	r1, r3
 800659c:	480f      	ldr	r0, [pc, #60]	; (80065dc <parseRcChannels+0x54>)
 800659e:	f01d fdc4 	bl	802412a <strchr>
 80065a2:	60b8      	str	r0, [r7, #8]
        if (s)
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00b      	beq.n	80065c2 <parseRcChannels+0x3a>
            mcfg.rcmap[s - rcChannelLetters] = c - input;
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	1ad1      	subs	r1, r2, r3
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	4a0a      	ldr	r2, [pc, #40]	; (80065dc <parseRcChannels+0x54>)
 80065b4:	1a9b      	subs	r3, r3, r2
 80065b6:	b2c9      	uxtb	r1, r1
 80065b8:	4a09      	ldr	r2, [pc, #36]	; (80065e0 <parseRcChannels+0x58>)
 80065ba:	4413      	add	r3, r2
 80065bc:	460a      	mov	r2, r1
 80065be:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
    for (c = input; *c; c++) {
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3301      	adds	r3, #1
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e2      	bne.n	8006596 <parseRcChannels+0xe>
    }
}
 80065d0:	bf00      	nop
 80065d2:	bf00      	nop
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	08029b68 	.word	0x08029b68
 80065e0:	2000089c 	.word	0x2000089c

080065e4 <validEEPROM>:

static uint8_t validEEPROM(void)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
    master_t *temp = NULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	607b      	str	r3, [r7, #4]
    const uint8_t *p;
    uint8_t chk = 0;
 80065ee:	2300      	movs	r3, #0
 80065f0:	72fb      	strb	r3, [r7, #11]
	PifStorageDataInfoP p_data_info;

    temp = malloc(sizeof(master_t));
 80065f2:	f240 506c 	movw	r0, #1388	; 0x56c
 80065f6:	f01d fc43 	bl	8023e80 <malloc>
 80065fa:	4603      	mov	r3, r0
 80065fc:	607b      	str	r3, [r7, #4]
    if (!temp) return 0;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <validEEPROM+0x24>
 8006604:	2300      	movs	r3, #0
 8006606:	e04e      	b.n	80066a6 <validEEPROM+0xc2>

    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 8006608:	4b29      	ldr	r3, [pc, #164]	; (80066b0 <validEEPROM+0xcc>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	214c      	movs	r1, #76	; 0x4c
 800660e:	4618      	mov	r0, r3
 8006610:	f015 fc6d 	bl	801beee <pifStorage_Open>
 8006614:	6038      	str	r0, [r7, #0]
    if (!p_data_info) goto fail;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d037      	beq.n	800668c <validEEPROM+0xa8>

    if (!pifStorage_Read(p_storage, (uint8_t*)temp, p_data_info, sizeof(master_t))) goto fail;
 800661c:	4b24      	ldr	r3, [pc, #144]	; (80066b0 <validEEPROM+0xcc>)
 800661e:	6818      	ldr	r0, [r3, #0]
 8006620:	f240 536c 	movw	r3, #1388	; 0x56c
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	6879      	ldr	r1, [r7, #4]
 8006628:	f015 fc72 	bl	801bf10 <pifStorage_Read>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d02e      	beq.n	8006690 <validEEPROM+0xac>

    // check version number
    if (EEPROM_CONF_VERSION != temp->version)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	224c      	movs	r2, #76	; 0x4c
 8006638:	4293      	cmp	r3, r2
 800663a:	d12b      	bne.n	8006694 <validEEPROM+0xb0>
        goto fail;

    // check size and magic numbers
    if (temp->size != sizeof(master_t) || temp->magic_be != 0xBE || temp->magic_ef != 0xEF)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	885b      	ldrh	r3, [r3, #2]
 8006640:	f240 526c 	movw	r2, #1388	; 0x56c
 8006644:	4293      	cmp	r3, r2
 8006646:	d127      	bne.n	8006698 <validEEPROM+0xb4>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	791b      	ldrb	r3, [r3, #4]
 800664c:	2bbe      	cmp	r3, #190	; 0xbe
 800664e:	d123      	bne.n	8006698 <validEEPROM+0xb4>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 356a 	ldrb.w	r3, [r3, #1386]	; 0x56a
 8006656:	2bef      	cmp	r3, #239	; 0xef
 8006658:	d11e      	bne.n	8006698 <validEEPROM+0xb4>
        goto fail;

    // verify integrity of temporary copy
    for (p = (const uint8_t *)temp; p < ((const uint8_t *)temp + sizeof(master_t)); p++)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	60fb      	str	r3, [r7, #12]
 800665e:	e007      	b.n	8006670 <validEEPROM+0x8c>
        chk ^= *p;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	781a      	ldrb	r2, [r3, #0]
 8006664:	7afb      	ldrb	r3, [r7, #11]
 8006666:	4053      	eors	r3, r2
 8006668:	72fb      	strb	r3, [r7, #11]
    for (p = (const uint8_t *)temp; p < ((const uint8_t *)temp + sizeof(master_t)); p++)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	3301      	adds	r3, #1
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	429a      	cmp	r2, r3
 800667a:	d3f1      	bcc.n	8006660 <validEEPROM+0x7c>

    // checksum failed
    if (chk != 0)
 800667c:	7afb      	ldrb	r3, [r7, #11]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10c      	bne.n	800669c <validEEPROM+0xb8>
        goto fail;

    free(temp);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f01d fc04 	bl	8023e90 <free>

    // looks good, let's roll!
    return 1;
 8006688:	2301      	movs	r3, #1
 800668a:	e00c      	b.n	80066a6 <validEEPROM+0xc2>
    if (!p_data_info) goto fail;
 800668c:	bf00      	nop
 800668e:	e006      	b.n	800669e <validEEPROM+0xba>
    if (!pifStorage_Read(p_storage, (uint8_t*)temp, p_data_info, sizeof(master_t))) goto fail;
 8006690:	bf00      	nop
 8006692:	e004      	b.n	800669e <validEEPROM+0xba>
        goto fail;
 8006694:	bf00      	nop
 8006696:	e002      	b.n	800669e <validEEPROM+0xba>
        goto fail;
 8006698:	bf00      	nop
 800669a:	e000      	b.n	800669e <validEEPROM+0xba>
        goto fail;
 800669c:	bf00      	nop

fail:
    free(temp);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f01d fbf6 	bl	8023e90 <free>
    return 0;    
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	20000f44 	.word	0x20000f44

080066b4 <readEEPROM>:

void readEEPROM(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
	PifStorageDataInfoP p_data_info;

    // Sanity check
    if (!validEEPROM()) goto fail;
 80066ba:	f7ff ff93 	bl	80065e4 <validEEPROM>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d030      	beq.n	8006726 <readEEPROM+0x72>

    // Read flash
    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 80066c4:	4b1d      	ldr	r3, [pc, #116]	; (800673c <readEEPROM+0x88>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	214c      	movs	r1, #76	; 0x4c
 80066ca:	4618      	mov	r0, r3
 80066cc:	f015 fc0f 	bl	801beee <pifStorage_Open>
 80066d0:	6078      	str	r0, [r7, #4]
    if (!p_data_info) goto fail;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d028      	beq.n	800672a <readEEPROM+0x76>

    if (!pifStorage_Read(p_storage, (uint8_t*)&mcfg, p_data_info, sizeof(master_t))) goto fail;
 80066d8:	4b18      	ldr	r3, [pc, #96]	; (800673c <readEEPROM+0x88>)
 80066da:	6818      	ldr	r0, [r3, #0]
 80066dc:	f240 536c 	movw	r3, #1388	; 0x56c
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	4917      	ldr	r1, [pc, #92]	; (8006740 <readEEPROM+0x8c>)
 80066e4:	f015 fc14 	bl	801bf10 <pifStorage_Read>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d01f      	beq.n	800672e <readEEPROM+0x7a>

    // Copy current profile
    if (mcfg.current_profile > 2) // sanity check
 80066ee:	4b14      	ldr	r3, [pc, #80]	; (8006740 <readEEPROM+0x8c>)
 80066f0:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d903      	bls.n	8006700 <readEEPROM+0x4c>
        mcfg.current_profile = 0;
 80066f8:	4b11      	ldr	r3, [pc, #68]	; (8006740 <readEEPROM+0x8c>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
    memcpy(&cfg, &mcfg.profile[mcfg.current_profile], sizeof(config_t));
 8006700:	4b0f      	ldr	r3, [pc, #60]	; (8006740 <readEEPROM+0x8c>)
 8006702:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8006706:	461a      	mov	r2, r3
 8006708:	f44f 739c 	mov.w	r3, #312	; 0x138
 800670c:	fb02 f303 	mul.w	r3, r2, r3
 8006710:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8006714:	4a0a      	ldr	r2, [pc, #40]	; (8006740 <readEEPROM+0x8c>)
 8006716:	4413      	add	r3, r2
 8006718:	f44f 729c 	mov.w	r2, #312	; 0x138
 800671c:	4619      	mov	r1, r3
 800671e:	4809      	ldr	r0, [pc, #36]	; (8006744 <readEEPROM+0x90>)
 8006720:	f01d fbbe 	bl	8023ea0 <memcpy>
    return;
 8006724:	e007      	b.n	8006736 <readEEPROM+0x82>
    if (!validEEPROM()) goto fail;
 8006726:	bf00      	nop
 8006728:	e002      	b.n	8006730 <readEEPROM+0x7c>
    if (!p_data_info) goto fail;
 800672a:	bf00      	nop
 800672c:	e000      	b.n	8006730 <readEEPROM+0x7c>
    if (!pifStorage_Read(p_storage, (uint8_t*)&mcfg, p_data_info, sizeof(master_t))) goto fail;
 800672e:	bf00      	nop

fail:    
    failureMode(10);
 8006730:	200a      	movs	r0, #10
 8006732:	f7fb fc56 	bl	8001fe2 <failureMode>
}
 8006736:	3708      	adds	r7, #8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	20000f44 	.word	0x20000f44
 8006740:	2000089c 	.word	0x2000089c
 8006744:	20000e08 	.word	0x20000e08

08006748 <activateConfig>:

void activateConfig(void)
{
 8006748:	b5b0      	push	{r4, r5, r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
    uint8_t i;
    for (i = 0; i < PITCH_LOOKUP_LENGTH; i++)
 800674e:	2300      	movs	r3, #0
 8006750:	71fb      	strb	r3, [r7, #7]
 8006752:	e021      	b.n	8006798 <activateConfig+0x50>
        lookupPitchRollRC[i] = (2500 + cfg.rcExpo8 * (i * i - 25)) * i * (int32_t)cfg.rcRate8 / 2500;
 8006754:	4b56      	ldr	r3, [pc, #344]	; (80068b0 <activateConfig+0x168>)
 8006756:	f893 3020 	ldrb.w	r3, [r3, #32]
 800675a:	4619      	mov	r1, r3
 800675c:	79fb      	ldrb	r3, [r7, #7]
 800675e:	79fa      	ldrb	r2, [r7, #7]
 8006760:	fb02 f303 	mul.w	r3, r2, r3
 8006764:	3b19      	subs	r3, #25
 8006766:	fb01 f303 	mul.w	r3, r1, r3
 800676a:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 800676e:	79fa      	ldrb	r2, [r7, #7]
 8006770:	fb02 f303 	mul.w	r3, r2, r3
 8006774:	4a4e      	ldr	r2, [pc, #312]	; (80068b0 <activateConfig+0x168>)
 8006776:	7fd2      	ldrb	r2, [r2, #31]
 8006778:	fb02 f303 	mul.w	r3, r2, r3
 800677c:	4a4d      	ldr	r2, [pc, #308]	; (80068b4 <activateConfig+0x16c>)
 800677e:	fb82 1203 	smull	r1, r2, r2, r3
 8006782:	1292      	asrs	r2, r2, #10
 8006784:	17db      	asrs	r3, r3, #31
 8006786:	1ad2      	subs	r2, r2, r3
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	b211      	sxth	r1, r2
 800678c:	4a4a      	ldr	r2, [pc, #296]	; (80068b8 <activateConfig+0x170>)
 800678e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < PITCH_LOOKUP_LENGTH; i++)
 8006792:	79fb      	ldrb	r3, [r7, #7]
 8006794:	3301      	adds	r3, #1
 8006796:	71fb      	strb	r3, [r7, #7]
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	2b06      	cmp	r3, #6
 800679c:	d9da      	bls.n	8006754 <activateConfig+0xc>

    for (i = 0; i < THROTTLE_LOOKUP_LENGTH; i++) {
 800679e:	2300      	movs	r3, #0
 80067a0:	71fb      	strb	r3, [r7, #7]
 80067a2:	e076      	b.n	8006892 <activateConfig+0x14a>
        int16_t tmp = 10 * i - cfg.thrMid8;
 80067a4:	79fb      	ldrb	r3, [r7, #7]
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	461a      	mov	r2, r3
 80067aa:	0092      	lsls	r2, r2, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	4b3f      	ldr	r3, [pc, #252]	; (80068b0 <activateConfig+0x168>)
 80067b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	b29b      	uxth	r3, r3
 80067be:	80bb      	strh	r3, [r7, #4]
        uint8_t y = 1;
 80067c0:	2301      	movs	r3, #1
 80067c2:	71bb      	strb	r3, [r7, #6]
        if (tmp > 0)
 80067c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	dd05      	ble.n	80067d8 <activateConfig+0x90>
            y = 100 - cfg.thrMid8;
 80067cc:	4b38      	ldr	r3, [pc, #224]	; (80068b0 <activateConfig+0x168>)
 80067ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80067d2:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80067d6:	71bb      	strb	r3, [r7, #6]
        if (tmp < 0)
 80067d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	da03      	bge.n	80067e8 <activateConfig+0xa0>
            y = cfg.thrMid8;
 80067e0:	4b33      	ldr	r3, [pc, #204]	; (80068b0 <activateConfig+0x168>)
 80067e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80067e6:	71bb      	strb	r3, [r7, #6]
        lookupThrottleRC[i] = 10 * cfg.thrMid8 + tmp * (100 - cfg.thrExpo8 + (int32_t)cfg.thrExpo8 * (tmp * tmp) / (y * y)) / 10;
 80067e8:	4b31      	ldr	r3, [pc, #196]	; (80068b0 <activateConfig+0x168>)
 80067ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	461a      	mov	r2, r3
 80067f2:	0092      	lsls	r2, r2, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	005b      	lsls	r3, r3, #1
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80067fe:	492c      	ldr	r1, [pc, #176]	; (80068b0 <activateConfig+0x168>)
 8006800:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8006804:	f1c1 0064 	rsb	r0, r1, #100	; 0x64
 8006808:	4929      	ldr	r1, [pc, #164]	; (80068b0 <activateConfig+0x168>)
 800680a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 800680e:	460d      	mov	r5, r1
 8006810:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006814:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006818:	fb04 f101 	mul.w	r1, r4, r1
 800681c:	fb01 f405 	mul.w	r4, r1, r5
 8006820:	79b9      	ldrb	r1, [r7, #6]
 8006822:	79bd      	ldrb	r5, [r7, #6]
 8006824:	fb05 f101 	mul.w	r1, r5, r1
 8006828:	fb94 f1f1 	sdiv	r1, r4, r1
 800682c:	4401      	add	r1, r0
 800682e:	fb01 f303 	mul.w	r3, r1, r3
 8006832:	4922      	ldr	r1, [pc, #136]	; (80068bc <activateConfig+0x174>)
 8006834:	fb81 0103 	smull	r0, r1, r1, r3
 8006838:	1089      	asrs	r1, r1, #2
 800683a:	17db      	asrs	r3, r3, #31
 800683c:	1acb      	subs	r3, r1, r3
 800683e:	b29b      	uxth	r3, r3
 8006840:	4413      	add	r3, r2
 8006842:	b29a      	uxth	r2, r3
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	b211      	sxth	r1, r2
 8006848:	4a1d      	ldr	r2, [pc, #116]	; (80068c0 <activateConfig+0x178>)
 800684a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        lookupThrottleRC[i] = mcfg.minthrottle + (int32_t)(mcfg.maxthrottle - mcfg.minthrottle) * lookupThrottleRC[i] / 1000; // [MINTHROTTLE;MAXTHROTTLE]
 800684e:	4b1d      	ldr	r3, [pc, #116]	; (80068c4 <activateConfig+0x17c>)
 8006850:	f8b3 2140 	ldrh.w	r2, [r3, #320]	; 0x140
 8006854:	4b1b      	ldr	r3, [pc, #108]	; (80068c4 <activateConfig+0x17c>)
 8006856:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800685a:	4619      	mov	r1, r3
 800685c:	4b19      	ldr	r3, [pc, #100]	; (80068c4 <activateConfig+0x17c>)
 800685e:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8006862:	1acb      	subs	r3, r1, r3
 8006864:	79f9      	ldrb	r1, [r7, #7]
 8006866:	4816      	ldr	r0, [pc, #88]	; (80068c0 <activateConfig+0x178>)
 8006868:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800686c:	fb01 f303 	mul.w	r3, r1, r3
 8006870:	4915      	ldr	r1, [pc, #84]	; (80068c8 <activateConfig+0x180>)
 8006872:	fb81 0103 	smull	r0, r1, r1, r3
 8006876:	1189      	asrs	r1, r1, #6
 8006878:	17db      	asrs	r3, r3, #31
 800687a:	1acb      	subs	r3, r1, r3
 800687c:	b29b      	uxth	r3, r3
 800687e:	4413      	add	r3, r2
 8006880:	b29a      	uxth	r2, r3
 8006882:	79fb      	ldrb	r3, [r7, #7]
 8006884:	b211      	sxth	r1, r2
 8006886:	4a0e      	ldr	r2, [pc, #56]	; (80068c0 <activateConfig+0x178>)
 8006888:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < THROTTLE_LOOKUP_LENGTH; i++) {
 800688c:	79fb      	ldrb	r3, [r7, #7]
 800688e:	3301      	adds	r3, #1
 8006890:	71fb      	strb	r3, [r7, #7]
 8006892:	79fb      	ldrb	r3, [r7, #7]
 8006894:	2b0b      	cmp	r3, #11
 8006896:	d985      	bls.n	80067a4 <activateConfig+0x5c>
    }

    setPIDController(cfg.pidController);
 8006898:	4b05      	ldr	r3, [pc, #20]	; (80068b0 <activateConfig+0x168>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	4618      	mov	r0, r3
 800689e:	f006 fdcd 	bl	800d43c <setPIDController>
#ifdef GPS
    gpsSetPIDs();
 80068a2:	f002 fb7f 	bl	8008fa4 <gpsSetPIDs>
#endif
}
 80068a6:	bf00      	nop
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bdb0      	pop	{r4, r5, r7, pc}
 80068ae:	bf00      	nop
 80068b0:	20000e08 	.word	0x20000e08
 80068b4:	68db8bad 	.word	0x68db8bad
 80068b8:	200017b0 	.word	0x200017b0
 80068bc:	66666667 	.word	0x66666667
 80068c0:	200017c0 	.word	0x200017c0
 80068c4:	2000089c 	.word	0x2000089c
 80068c8:	10624dd3 	.word	0x10624dd3

080068cc <loadAndActivateConfig>:

void loadAndActivateConfig(void)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	af00      	add	r7, sp, #0
    readEEPROM();
 80068d0:	f7ff fef0 	bl	80066b4 <readEEPROM>
    activateConfig();
 80068d4:	f7ff ff38 	bl	8006748 <activateConfig>
}
 80068d8:	bf00      	nop
 80068da:	bd80      	pop	{r7, pc}

080068dc <writeEEPROM>:

void writeEEPROM(uint8_t b, uint8_t updateProfile)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	4603      	mov	r3, r0
 80068e4:	460a      	mov	r2, r1
 80068e6:	71fb      	strb	r3, [r7, #7]
 80068e8:	4613      	mov	r3, r2
 80068ea:	71bb      	strb	r3, [r7, #6]
    bool status = false;
 80068ec:	2300      	movs	r3, #0
 80068ee:	75fb      	strb	r3, [r7, #23]
    uint8_t chk = 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	75bb      	strb	r3, [r7, #22]
    const uint8_t *p;
	PifStorageDataInfoP p_data_info;

    // prepare checksum/version constants
    mcfg.version = EEPROM_CONF_VERSION;
 80068f4:	224c      	movs	r2, #76	; 0x4c
 80068f6:	4b36      	ldr	r3, [pc, #216]	; (80069d0 <writeEEPROM+0xf4>)
 80068f8:	701a      	strb	r2, [r3, #0]
    mcfg.size = sizeof(master_t);
 80068fa:	4b35      	ldr	r3, [pc, #212]	; (80069d0 <writeEEPROM+0xf4>)
 80068fc:	f240 526c 	movw	r2, #1388	; 0x56c
 8006900:	805a      	strh	r2, [r3, #2]
    mcfg.magic_be = 0xBE;
 8006902:	4b33      	ldr	r3, [pc, #204]	; (80069d0 <writeEEPROM+0xf4>)
 8006904:	22be      	movs	r2, #190	; 0xbe
 8006906:	711a      	strb	r2, [r3, #4]
    mcfg.magic_ef = 0xEF;
 8006908:	4b31      	ldr	r3, [pc, #196]	; (80069d0 <writeEEPROM+0xf4>)
 800690a:	22ef      	movs	r2, #239	; 0xef
 800690c:	f883 256a 	strb.w	r2, [r3, #1386]	; 0x56a
    mcfg.chk = 0;
 8006910:	4b2f      	ldr	r3, [pc, #188]	; (80069d0 <writeEEPROM+0xf4>)
 8006912:	2200      	movs	r2, #0
 8006914:	f883 256b 	strb.w	r2, [r3, #1387]	; 0x56b

    // when updateProfile = true, we copy contents of cfg to global configuration. when false, only profile number is updated, and then that profile is loaded on readEEPROM()
    if (updateProfile) {
 8006918:	79bb      	ldrb	r3, [r7, #6]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d011      	beq.n	8006942 <writeEEPROM+0x66>
        // copy current in-memory profile to stored configuration
        memcpy(&mcfg.profile[mcfg.current_profile], &cfg, sizeof(config_t));
 800691e:	4b2c      	ldr	r3, [pc, #176]	; (80069d0 <writeEEPROM+0xf4>)
 8006920:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8006924:	461a      	mov	r2, r3
 8006926:	f44f 739c 	mov.w	r3, #312	; 0x138
 800692a:	fb02 f303 	mul.w	r3, r2, r3
 800692e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8006932:	4a27      	ldr	r2, [pc, #156]	; (80069d0 <writeEEPROM+0xf4>)
 8006934:	4413      	add	r3, r2
 8006936:	f44f 729c 	mov.w	r2, #312	; 0x138
 800693a:	4926      	ldr	r1, [pc, #152]	; (80069d4 <writeEEPROM+0xf8>)
 800693c:	4618      	mov	r0, r3
 800693e:	f01d faaf 	bl	8023ea0 <memcpy>
    }

    // recalculate checksum before writing
    for (p = (const uint8_t *)&mcfg; p < ((const uint8_t *)&mcfg + sizeof(master_t)); p++)
 8006942:	4b23      	ldr	r3, [pc, #140]	; (80069d0 <writeEEPROM+0xf4>)
 8006944:	613b      	str	r3, [r7, #16]
 8006946:	e007      	b.n	8006958 <writeEEPROM+0x7c>
        chk ^= *p;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	781a      	ldrb	r2, [r3, #0]
 800694c:	7dbb      	ldrb	r3, [r7, #22]
 800694e:	4053      	eors	r3, r2
 8006950:	75bb      	strb	r3, [r7, #22]
    for (p = (const uint8_t *)&mcfg; p < ((const uint8_t *)&mcfg + sizeof(master_t)); p++)
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	3301      	adds	r3, #1
 8006956:	613b      	str	r3, [r7, #16]
 8006958:	4a1f      	ldr	r2, [pc, #124]	; (80069d8 <writeEEPROM+0xfc>)
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	4293      	cmp	r3, r2
 800695e:	d3f3      	bcc.n	8006948 <writeEEPROM+0x6c>
    mcfg.chk = chk;
 8006960:	4a1b      	ldr	r2, [pc, #108]	; (80069d0 <writeEEPROM+0xf4>)
 8006962:	7dbb      	ldrb	r3, [r7, #22]
 8006964:	f882 356b 	strb.w	r3, [r2, #1387]	; 0x56b

    // write it
    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 8006968:	4b1c      	ldr	r3, [pc, #112]	; (80069dc <writeEEPROM+0x100>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	214c      	movs	r1, #76	; 0x4c
 800696e:	4618      	mov	r0, r3
 8006970:	f015 fabd 	bl	801beee <pifStorage_Open>
 8006974:	60f8      	str	r0, [r7, #12]
    if (p_data_info) {
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00c      	beq.n	8006996 <writeEEPROM+0xba>
        if (pifStorage_Write(p_storage, p_data_info, (uint8_t*)&mcfg, sizeof(master_t))) status = true;
 800697c:	4b17      	ldr	r3, [pc, #92]	; (80069dc <writeEEPROM+0x100>)
 800697e:	6818      	ldr	r0, [r3, #0]
 8006980:	f240 536c 	movw	r3, #1388	; 0x56c
 8006984:	4a12      	ldr	r2, [pc, #72]	; (80069d0 <writeEEPROM+0xf4>)
 8006986:	68f9      	ldr	r1, [r7, #12]
 8006988:	f015 fad5 	bl	801bf36 <pifStorage_Write>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <writeEEPROM+0xba>
 8006992:	2301      	movs	r3, #1
 8006994:	75fb      	strb	r3, [r7, #23]
    }

    // Flash write failed - just die now
    if (!status || !validEEPROM()) {
 8006996:	7dfb      	ldrb	r3, [r7, #23]
 8006998:	f083 0301 	eor.w	r3, r3, #1
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d104      	bne.n	80069ac <writeEEPROM+0xd0>
 80069a2:	f7ff fe1f 	bl	80065e4 <validEEPROM>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d102      	bne.n	80069b2 <writeEEPROM+0xd6>
        failureMode(10);
 80069ac:	200a      	movs	r0, #10
 80069ae:	f7fb fb18 	bl	8001fe2 <failureMode>
    }

    // re-read written data
    loadAndActivateConfig();
 80069b2:	f7ff ff8b 	bl	80068cc <loadAndActivateConfig>
    if (b)
 80069b6:	79fb      	ldrb	r3, [r7, #7]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d004      	beq.n	80069c6 <writeEEPROM+0xea>
        blinkLED(15, 20, 1);
 80069bc:	2201      	movs	r2, #1
 80069be:	2114      	movs	r1, #20
 80069c0:	200f      	movs	r0, #15
 80069c2:	f005 fd07 	bl	800c3d4 <blinkLED>
}
 80069c6:	bf00      	nop
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	2000089c 	.word	0x2000089c
 80069d4:	20000e08 	.word	0x20000e08
 80069d8:	20000e08 	.word	0x20000e08
 80069dc:	20000f44 	.word	0x20000f44

080069e0 <checkFirstTime>:

bool checkFirstTime(bool reset)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	4603      	mov	r3, r0
 80069e8:	71fb      	strb	r3, [r7, #7]
    bool alloc = true;
 80069ea:	2301      	movs	r3, #1
 80069ec:	73fb      	strb	r3, [r7, #15]

	if (!pifStorage_IsFormat(p_storage)) {
 80069ee:	4b24      	ldr	r3, [pc, #144]	; (8006a80 <checkFirstTime+0xa0>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f015 fa4e 	bl	801be94 <pifStorage_IsFormat>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10c      	bne.n	8006a18 <checkFirstTime+0x38>
		if (!pifStorage_Format(p_storage)) return false;
 80069fe:	4b20      	ldr	r3, [pc, #128]	; (8006a80 <checkFirstTime+0xa0>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f015 fa53 	bl	801beae <pifStorage_Format>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <checkFirstTime+0x32>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	e032      	b.n	8006a78 <checkFirstTime+0x98>
        alloc = false;
 8006a12:	2300      	movs	r3, #0
 8006a14:	73fb      	strb	r3, [r7, #15]
 8006a16:	e00b      	b.n	8006a30 <checkFirstTime+0x50>
	}
    else {
        alloc = pifStorage_Open(p_storage, STORAGE_ID) != NULL;
 8006a18:	4b19      	ldr	r3, [pc, #100]	; (8006a80 <checkFirstTime+0xa0>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	214c      	movs	r1, #76	; 0x4c
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f015 fa65 	bl	801beee <pifStorage_Open>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	bf14      	ite	ne
 8006a2a:	2301      	movne	r3, #1
 8006a2c:	2300      	moveq	r3, #0
 8006a2e:	73fb      	strb	r3, [r7, #15]
    }
    if (!alloc) {
 8006a30:	7bfb      	ldrb	r3, [r7, #15]
 8006a32:	f083 0301 	eor.w	r3, r3, #1
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00e      	beq.n	8006a5a <checkFirstTime+0x7a>
		if (!pifStorage_Create(p_storage, STORAGE_ID, sizeof(master_t))) return false;
 8006a3c:	4b10      	ldr	r3, [pc, #64]	; (8006a80 <checkFirstTime+0xa0>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f240 526c 	movw	r2, #1388	; 0x56c
 8006a44:	214c      	movs	r1, #76	; 0x4c
 8006a46:	4618      	mov	r0, r3
 8006a48:	f015 fa3e 	bl	801bec8 <pifStorage_Create>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <checkFirstTime+0x76>
 8006a52:	2300      	movs	r3, #0
 8006a54:	e010      	b.n	8006a78 <checkFirstTime+0x98>
        reset = true;
 8006a56:	2301      	movs	r3, #1
 8006a58:	71fb      	strb	r3, [r7, #7]
    }
    // check the EEPROM integrity before resetting values
    if (!validEEPROM() || reset) {
 8006a5a:	f7ff fdc3 	bl	80065e4 <validEEPROM>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <checkFirstTime+0x8a>
 8006a64:	79fb      	ldrb	r3, [r7, #7]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d005      	beq.n	8006a76 <checkFirstTime+0x96>
        resetConf();
 8006a6a:	f000 f80b 	bl	8006a84 <resetConf>
        // no need to memcpy profile again, we just did it in resetConf() above
        writeEEPROM(0, false);
 8006a6e:	2100      	movs	r1, #0
 8006a70:	2000      	movs	r0, #0
 8006a72:	f7ff ff33 	bl	80068dc <writeEEPROM>
    }
    return true;
 8006a76:	2301      	movs	r3, #1
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	20000f44 	.word	0x20000f44

08006a84 <resetConf>:

// Default settings
static void resetConf(void)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
    int i;
    int8_t servoRates[8] = { 30, 30, 100, 100, 100, 100, 100, 100 };
 8006a8a:	4ac7      	ldr	r2, [pc, #796]	; (8006da8 <resetConf+0x324>)
 8006a8c:	1d3b      	adds	r3, r7, #4
 8006a8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a92:	e883 0003 	stmia.w	r3, {r0, r1}

    // Clear all configuration
    memset(&mcfg, 0, sizeof(master_t));
 8006a96:	f240 526c 	movw	r2, #1388	; 0x56c
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	48c3      	ldr	r0, [pc, #780]	; (8006dac <resetConf+0x328>)
 8006a9e:	f01d fa0d 	bl	8023ebc <memset>
    memset(&cfg, 0, sizeof(config_t));
 8006aa2:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	48c1      	ldr	r0, [pc, #772]	; (8006db0 <resetConf+0x32c>)
 8006aaa:	f01d fa07 	bl	8023ebc <memset>

    mcfg.version = EEPROM_CONF_VERSION;
 8006aae:	224c      	movs	r2, #76	; 0x4c
 8006ab0:	4bbe      	ldr	r3, [pc, #760]	; (8006dac <resetConf+0x328>)
 8006ab2:	701a      	strb	r2, [r3, #0]
    mcfg.mixerConfiguration = MULTITYPE_QUADX;
 8006ab4:	4bbd      	ldr	r3, [pc, #756]	; (8006dac <resetConf+0x328>)
 8006ab6:	2203      	movs	r2, #3
 8006ab8:	715a      	strb	r2, [r3, #5]
    featureClearAll();
 8006aba:	f000 fb2d 	bl	8007118 <featureClearAll>
    if (g_featureDefault) (*g_featureDefault)();
 8006abe:	4bbd      	ldr	r3, [pc, #756]	; (8006db4 <resetConf+0x330>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <resetConf+0x48>
 8006ac6:	4bbb      	ldr	r3, [pc, #748]	; (8006db4 <resetConf+0x330>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4798      	blx	r3

    // global settings
    mcfg.current_profile = 0;       // default profile
 8006acc:	4bb7      	ldr	r3, [pc, #732]	; (8006dac <resetConf+0x328>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
    mcfg.gyro_cmpf_factor = 600;    // default MWC
 8006ad4:	4bb5      	ldr	r3, [pc, #724]	; (8006dac <resetConf+0x328>)
 8006ad6:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006ada:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
    mcfg.gyro_cmpfm_factor = 250;   // default MWC
 8006ade:	4bb3      	ldr	r3, [pc, #716]	; (8006dac <resetConf+0x328>)
 8006ae0:	22fa      	movs	r2, #250	; 0xfa
 8006ae2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
    mcfg.gyro_lpf = 42;             // supported by all gyro drivers now. In case of ST gyro, will default to 32Hz instead
 8006ae6:	4bb1      	ldr	r3, [pc, #708]	; (8006dac <resetConf+0x328>)
 8006ae8:	222a      	movs	r2, #42	; 0x2a
 8006aea:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
    mcfg.accZero[0] = 0;
 8006aee:	4baf      	ldr	r3, [pc, #700]	; (8006dac <resetConf+0x328>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
    mcfg.accZero[1] = 0;
 8006af6:	4bad      	ldr	r3, [pc, #692]	; (8006dac <resetConf+0x328>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
    mcfg.accZero[2] = 0;
 8006afe:	4bab      	ldr	r3, [pc, #684]	; (8006dac <resetConf+0x328>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
    mcfg.gyro_align = IMUS_ALIGN_DEFAULT;
 8006b06:	4ba9      	ldr	r3, [pc, #676]	; (8006dac <resetConf+0x328>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
    mcfg.acc_align = IMUS_ALIGN_DEFAULT;
 8006b0e:	4ba7      	ldr	r3, [pc, #668]	; (8006dac <resetConf+0x328>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
    mcfg.mag_align = IMUS_ALIGN_DEFAULT;
 8006b16:	4ba5      	ldr	r3, [pc, #660]	; (8006dac <resetConf+0x328>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
    mcfg.board_align_roll = 0;
 8006b1e:	4ba3      	ldr	r3, [pc, #652]	; (8006dac <resetConf+0x328>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
    mcfg.board_align_pitch = 0;
 8006b26:	4ba1      	ldr	r3, [pc, #644]	; (8006dac <resetConf+0x328>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
    mcfg.board_align_yaw = 0;
 8006b2e:	4b9f      	ldr	r3, [pc, #636]	; (8006dac <resetConf+0x328>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
    mcfg.acc_hardware = 0;               // default/autodetect
 8006b36:	4b9d      	ldr	r3, [pc, #628]	; (8006dac <resetConf+0x328>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
    mcfg.mag_hardware = 0;
 8006b3e:	4b9b      	ldr	r3, [pc, #620]	; (8006dac <resetConf+0x328>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
    mcfg.max_angle_inclination = 500;    // 50 degrees
 8006b46:	4b99      	ldr	r3, [pc, #612]	; (8006dac <resetConf+0x328>)
 8006b48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006b4c:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
    mcfg.yaw_control_direction = 1;
 8006b50:	4b96      	ldr	r3, [pc, #600]	; (8006dac <resetConf+0x328>)
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    mcfg.moron_threshold = 32;
 8006b58:	4b94      	ldr	r3, [pc, #592]	; (8006dac <resetConf+0x328>)
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
    mcfg.currentscale = 400; // for Allegro ACS758LCB-100U (40mV/A)
 8006b60:	4b92      	ldr	r3, [pc, #584]	; (8006dac <resetConf+0x328>)
 8006b62:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006b66:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
    mcfg.vbatscale = 110;
 8006b6a:	4b90      	ldr	r3, [pc, #576]	; (8006dac <resetConf+0x328>)
 8006b6c:	226e      	movs	r2, #110	; 0x6e
 8006b6e:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
    mcfg.vbatmaxcellvoltage = 43;
 8006b72:	4b8e      	ldr	r3, [pc, #568]	; (8006dac <resetConf+0x328>)
 8006b74:	222b      	movs	r2, #43	; 0x2b
 8006b76:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
    mcfg.vbatmincellvoltage = 33;
 8006b7a:	4b8c      	ldr	r3, [pc, #560]	; (8006dac <resetConf+0x328>)
 8006b7c:	2221      	movs	r2, #33	; 0x21
 8006b7e:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
    mcfg.vbatwarningcellvoltage = 35;
 8006b82:	4b8a      	ldr	r3, [pc, #552]	; (8006dac <resetConf+0x328>)
 8006b84:	2223      	movs	r2, #35	; 0x23
 8006b86:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
    mcfg.power_adc_channel = 0;
 8006b8a:	4b88      	ldr	r3, [pc, #544]	; (8006dac <resetConf+0x328>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
    mcfg.serialrx_type = 0;
 8006b92:	4b86      	ldr	r3, [pc, #536]	; (8006dac <resetConf+0x328>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
    mcfg.spektrum_sat_bind = 0;
 8006b9a:	4b84      	ldr	r3, [pc, #528]	; (8006dac <resetConf+0x328>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    mcfg.telemetry_provider = TELEMETRY_PROVIDER_FRSKY;
 8006ba2:	4b82      	ldr	r3, [pc, #520]	; (8006dac <resetConf+0x328>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
    mcfg.telemetry_port = TELEMETRY_PORT_UART;
 8006baa:	4b80      	ldr	r3, [pc, #512]	; (8006dac <resetConf+0x328>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
    mcfg.telemetry_switch = 0;
 8006bb2:	4b7e      	ldr	r3, [pc, #504]	; (8006dac <resetConf+0x328>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 21bc 	strb.w	r2, [r3, #444]	; 0x1bc
    mcfg.midrc = 1500;
 8006bba:	4b7c      	ldr	r3, [pc, #496]	; (8006dac <resetConf+0x328>)
 8006bbc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006bc0:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
    mcfg.mincheck = 1100;
 8006bc4:	4b79      	ldr	r3, [pc, #484]	; (8006dac <resetConf+0x328>)
 8006bc6:	f240 424c 	movw	r2, #1100	; 0x44c
 8006bca:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
    mcfg.maxcheck = 1900;
 8006bce:	4b77      	ldr	r3, [pc, #476]	; (8006dac <resetConf+0x328>)
 8006bd0:	f240 726c 	movw	r2, #1900	; 0x76c
 8006bd4:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
    mcfg.retarded_arm = 0;       // disable arm/disarm on roll left/right
 8006bd8:	4b74      	ldr	r3, [pc, #464]	; (8006dac <resetConf+0x328>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
    mcfg.disarm_kill_switch = 1; // AUX disarm independently of throttle value
 8006be0:	4b72      	ldr	r3, [pc, #456]	; (8006dac <resetConf+0x328>)
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
    mcfg.fw_althold_dir = 1;
 8006be8:	4b70      	ldr	r3, [pc, #448]	; (8006dac <resetConf+0x328>)
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
    // Motor/ESC/Servo
    mcfg.minthrottle = 1150;
 8006bf0:	4b6e      	ldr	r3, [pc, #440]	; (8006dac <resetConf+0x328>)
 8006bf2:	f240 427e 	movw	r2, #1150	; 0x47e
 8006bf6:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
    mcfg.maxthrottle = 1850;
 8006bfa:	4b6c      	ldr	r3, [pc, #432]	; (8006dac <resetConf+0x328>)
 8006bfc:	f240 723a 	movw	r2, #1850	; 0x73a
 8006c00:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
    mcfg.mincommand = 1000;
 8006c04:	4b69      	ldr	r3, [pc, #420]	; (8006dac <resetConf+0x328>)
 8006c06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c0a:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
    mcfg.deadband3d_low = 1406;
 8006c0e:	4b67      	ldr	r3, [pc, #412]	; (8006dac <resetConf+0x328>)
 8006c10:	f240 527e 	movw	r2, #1406	; 0x57e
 8006c14:	f8a3 2146 	strh.w	r2, [r3, #326]	; 0x146
    mcfg.deadband3d_high = 1514;
 8006c18:	4b64      	ldr	r3, [pc, #400]	; (8006dac <resetConf+0x328>)
 8006c1a:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8006c1e:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
    mcfg.neutral3d = 1460;
 8006c22:	4b62      	ldr	r3, [pc, #392]	; (8006dac <resetConf+0x328>)
 8006c24:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8006c28:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
    mcfg.deadband3d_throttle = 50;
 8006c2c:	4b5f      	ldr	r3, [pc, #380]	; (8006dac <resetConf+0x328>)
 8006c2e:	2232      	movs	r2, #50	; 0x32
 8006c30:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
    mcfg.motor_pwm_rate = MOTOR_PWM_RATE;
 8006c34:	4b5d      	ldr	r3, [pc, #372]	; (8006dac <resetConf+0x328>)
 8006c36:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006c3a:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
    mcfg.servo_pwm_rate = 50;
 8006c3e:	4b5b      	ldr	r3, [pc, #364]	; (8006dac <resetConf+0x328>)
 8006c40:	2232      	movs	r2, #50	; 0x32
 8006c42:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
    // safety features
    mcfg.auto_disarm_board = 5; // auto disarm after 5 sec if motors not started or disarmed
 8006c46:	4b59      	ldr	r3, [pc, #356]	; (8006dac <resetConf+0x328>)
 8006c48:	2205      	movs	r2, #5
 8006c4a:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
    // gps/nav stuff
    mcfg.gps_type = GPS_NMEA;
 8006c4e:	4b57      	ldr	r3, [pc, #348]	; (8006dac <resetConf+0x328>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
    mcfg.gps_baudrate = GPS_BAUD_115200;
 8006c56:	4b55      	ldr	r3, [pc, #340]	; (8006dac <resetConf+0x328>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
    // serial (USART1) baudrate
    mcfg.serial_baudrate = 115200;
 8006c5e:	4b53      	ldr	r3, [pc, #332]	; (8006dac <resetConf+0x328>)
 8006c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006c64:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    mcfg.softserial_baudrate = 9600;
 8006c68:	4b50      	ldr	r3, [pc, #320]	; (8006dac <resetConf+0x328>)
 8006c6a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006c6e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    mcfg.softserial_1_inverted = 0;
 8006c72:	4b4e      	ldr	r3, [pc, #312]	; (8006dac <resetConf+0x328>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
    mcfg.softserial_2_inverted = 0;
 8006c7a:	4b4c      	ldr	r3, [pc, #304]	; (8006dac <resetConf+0x328>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
    mcfg.looptime = 3500;
 8006c82:	4b4a      	ldr	r3, [pc, #296]	; (8006dac <resetConf+0x328>)
 8006c84:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006c88:	819a      	strh	r2, [r3, #12]
    mcfg.emf_avoidance = 0;
 8006c8a:	4b48      	ldr	r3, [pc, #288]	; (8006dac <resetConf+0x328>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	739a      	strb	r2, [r3, #14]
    mcfg.rssi_aux_channel = 0;
 8006c90:	4b46      	ldr	r3, [pc, #280]	; (8006dac <resetConf+0x328>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    mcfg.rssi_aux_max = 1000;
 8006c98:	4b44      	ldr	r3, [pc, #272]	; (8006dac <resetConf+0x328>)
 8006c9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c9e:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
    mcfg.rssi_adc_max = 4095;
 8006ca2:	4b42      	ldr	r3, [pc, #264]	; (8006dac <resetConf+0x328>)
 8006ca4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006ca8:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
    mcfg.rc_channel_count = 8;
 8006cac:	4b3f      	ldr	r3, [pc, #252]	; (8006dac <resetConf+0x328>)
 8006cae:	2208      	movs	r2, #8
 8006cb0:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa

    cfg.pidController = 0;
 8006cb4:	4b3e      	ldr	r3, [pc, #248]	; (8006db0 <resetConf+0x32c>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	701a      	strb	r2, [r3, #0]
    cfg.P8[ROLL] = 40;
 8006cba:	4b3d      	ldr	r3, [pc, #244]	; (8006db0 <resetConf+0x32c>)
 8006cbc:	2228      	movs	r2, #40	; 0x28
 8006cbe:	705a      	strb	r2, [r3, #1]
    cfg.I8[ROLL] = 30;
 8006cc0:	4b3b      	ldr	r3, [pc, #236]	; (8006db0 <resetConf+0x32c>)
 8006cc2:	221e      	movs	r2, #30
 8006cc4:	72da      	strb	r2, [r3, #11]
    cfg.D8[ROLL] = 23;
 8006cc6:	4b3a      	ldr	r3, [pc, #232]	; (8006db0 <resetConf+0x32c>)
 8006cc8:	2217      	movs	r2, #23
 8006cca:	755a      	strb	r2, [r3, #21]
    cfg.P8[PITCH] = 40;
 8006ccc:	4b38      	ldr	r3, [pc, #224]	; (8006db0 <resetConf+0x32c>)
 8006cce:	2228      	movs	r2, #40	; 0x28
 8006cd0:	709a      	strb	r2, [r3, #2]
    cfg.I8[PITCH] = 30;
 8006cd2:	4b37      	ldr	r3, [pc, #220]	; (8006db0 <resetConf+0x32c>)
 8006cd4:	221e      	movs	r2, #30
 8006cd6:	731a      	strb	r2, [r3, #12]
    cfg.D8[PITCH] = 23;
 8006cd8:	4b35      	ldr	r3, [pc, #212]	; (8006db0 <resetConf+0x32c>)
 8006cda:	2217      	movs	r2, #23
 8006cdc:	759a      	strb	r2, [r3, #22]
    cfg.P8[YAW] = 85;
 8006cde:	4b34      	ldr	r3, [pc, #208]	; (8006db0 <resetConf+0x32c>)
 8006ce0:	2255      	movs	r2, #85	; 0x55
 8006ce2:	70da      	strb	r2, [r3, #3]
    cfg.I8[YAW] = 45;
 8006ce4:	4b32      	ldr	r3, [pc, #200]	; (8006db0 <resetConf+0x32c>)
 8006ce6:	222d      	movs	r2, #45	; 0x2d
 8006ce8:	735a      	strb	r2, [r3, #13]
    cfg.D8[YAW] = 0;
 8006cea:	4b31      	ldr	r3, [pc, #196]	; (8006db0 <resetConf+0x32c>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	75da      	strb	r2, [r3, #23]
    cfg.P8[PIDALT] = 50;
 8006cf0:	4b2f      	ldr	r3, [pc, #188]	; (8006db0 <resetConf+0x32c>)
 8006cf2:	2232      	movs	r2, #50	; 0x32
 8006cf4:	711a      	strb	r2, [r3, #4]
    cfg.I8[PIDALT] = 0;
 8006cf6:	4b2e      	ldr	r3, [pc, #184]	; (8006db0 <resetConf+0x32c>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	739a      	strb	r2, [r3, #14]
    cfg.D8[PIDALT] = 0;
 8006cfc:	4b2c      	ldr	r3, [pc, #176]	; (8006db0 <resetConf+0x32c>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	761a      	strb	r2, [r3, #24]
    cfg.P8[PIDPOS] = 11; // POSHOLD_P * 100;
 8006d02:	4b2b      	ldr	r3, [pc, #172]	; (8006db0 <resetConf+0x32c>)
 8006d04:	220b      	movs	r2, #11
 8006d06:	715a      	strb	r2, [r3, #5]
    cfg.I8[PIDPOS] = 0; // POSHOLD_I * 100;
 8006d08:	4b29      	ldr	r3, [pc, #164]	; (8006db0 <resetConf+0x32c>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	73da      	strb	r2, [r3, #15]
    cfg.D8[PIDPOS] = 0;
 8006d0e:	4b28      	ldr	r3, [pc, #160]	; (8006db0 <resetConf+0x32c>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	765a      	strb	r2, [r3, #25]
    cfg.P8[PIDPOSR] = 20; // POSHOLD_RATE_P * 10;
 8006d14:	4b26      	ldr	r3, [pc, #152]	; (8006db0 <resetConf+0x32c>)
 8006d16:	2214      	movs	r2, #20
 8006d18:	719a      	strb	r2, [r3, #6]
    cfg.I8[PIDPOSR] = 8; // POSHOLD_RATE_I * 100;
 8006d1a:	4b25      	ldr	r3, [pc, #148]	; (8006db0 <resetConf+0x32c>)
 8006d1c:	2208      	movs	r2, #8
 8006d1e:	741a      	strb	r2, [r3, #16]
    cfg.D8[PIDPOSR] = 45; // POSHOLD_RATE_D * 1000;
 8006d20:	4b23      	ldr	r3, [pc, #140]	; (8006db0 <resetConf+0x32c>)
 8006d22:	222d      	movs	r2, #45	; 0x2d
 8006d24:	769a      	strb	r2, [r3, #26]
    cfg.P8[PIDNAVR] = 14; // NAV_P * 10;
 8006d26:	4b22      	ldr	r3, [pc, #136]	; (8006db0 <resetConf+0x32c>)
 8006d28:	220e      	movs	r2, #14
 8006d2a:	71da      	strb	r2, [r3, #7]
    cfg.I8[PIDNAVR] = 20; // NAV_I * 100;
 8006d2c:	4b20      	ldr	r3, [pc, #128]	; (8006db0 <resetConf+0x32c>)
 8006d2e:	2214      	movs	r2, #20
 8006d30:	745a      	strb	r2, [r3, #17]
    cfg.D8[PIDNAVR] = 80; // NAV_D * 1000;
 8006d32:	4b1f      	ldr	r3, [pc, #124]	; (8006db0 <resetConf+0x32c>)
 8006d34:	2250      	movs	r2, #80	; 0x50
 8006d36:	76da      	strb	r2, [r3, #27]
    cfg.P8[PIDLEVEL] = 90;
 8006d38:	4b1d      	ldr	r3, [pc, #116]	; (8006db0 <resetConf+0x32c>)
 8006d3a:	225a      	movs	r2, #90	; 0x5a
 8006d3c:	721a      	strb	r2, [r3, #8]
    cfg.I8[PIDLEVEL] = 10;
 8006d3e:	4b1c      	ldr	r3, [pc, #112]	; (8006db0 <resetConf+0x32c>)
 8006d40:	220a      	movs	r2, #10
 8006d42:	749a      	strb	r2, [r3, #18]
    cfg.D8[PIDLEVEL] = 100;
 8006d44:	4b1a      	ldr	r3, [pc, #104]	; (8006db0 <resetConf+0x32c>)
 8006d46:	2264      	movs	r2, #100	; 0x64
 8006d48:	771a      	strb	r2, [r3, #28]
    cfg.P8[PIDMAG] = 40;
 8006d4a:	4b19      	ldr	r3, [pc, #100]	; (8006db0 <resetConf+0x32c>)
 8006d4c:	2228      	movs	r2, #40	; 0x28
 8006d4e:	725a      	strb	r2, [r3, #9]
    cfg.P8[PIDVEL] = 120;
 8006d50:	4b17      	ldr	r3, [pc, #92]	; (8006db0 <resetConf+0x32c>)
 8006d52:	2278      	movs	r2, #120	; 0x78
 8006d54:	729a      	strb	r2, [r3, #10]
    cfg.I8[PIDVEL] = 45;
 8006d56:	4b16      	ldr	r3, [pc, #88]	; (8006db0 <resetConf+0x32c>)
 8006d58:	222d      	movs	r2, #45	; 0x2d
 8006d5a:	751a      	strb	r2, [r3, #20]
    cfg.D8[PIDVEL] = 1;
 8006d5c:	4b14      	ldr	r3, [pc, #80]	; (8006db0 <resetConf+0x32c>)
 8006d5e:	2201      	movs	r2, #1
 8006d60:	779a      	strb	r2, [r3, #30]
    cfg.rcRate8 = 90;
 8006d62:	4b13      	ldr	r3, [pc, #76]	; (8006db0 <resetConf+0x32c>)
 8006d64:	225a      	movs	r2, #90	; 0x5a
 8006d66:	77da      	strb	r2, [r3, #31]
    cfg.rcExpo8 = 65;
 8006d68:	4b11      	ldr	r3, [pc, #68]	; (8006db0 <resetConf+0x32c>)
 8006d6a:	2241      	movs	r2, #65	; 0x41
 8006d6c:	f883 2020 	strb.w	r2, [r3, #32]
    cfg.yawRate = 0;
 8006d70:	4b0f      	ldr	r3, [pc, #60]	; (8006db0 <resetConf+0x32c>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    cfg.dynThrPID = 0;
 8006d78:	4b0d      	ldr	r3, [pc, #52]	; (8006db0 <resetConf+0x32c>)
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    cfg.tpa_breakpoint = 1500;
 8006d80:	4b0b      	ldr	r3, [pc, #44]	; (8006db0 <resetConf+0x32c>)
 8006d82:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006d86:	851a      	strh	r2, [r3, #40]	; 0x28
    cfg.thrMid8 = 50;
 8006d88:	4b09      	ldr	r3, [pc, #36]	; (8006db0 <resetConf+0x32c>)
 8006d8a:	2232      	movs	r2, #50	; 0x32
 8006d8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    cfg.thrExpo8 = 0;
 8006d90:	4b07      	ldr	r3, [pc, #28]	; (8006db0 <resetConf+0x32c>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    // for (i = 0; i < CHECKBOXITEMS; i++)
    //     cfg.activate[i] = 0;
    cfg.angleTrim[0] = 0;
 8006d98:	4b05      	ldr	r3, [pc, #20]	; (8006db0 <resetConf+0x32c>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	859a      	strh	r2, [r3, #44]	; 0x2c
    cfg.angleTrim[1] = 0;
 8006d9e:	4b04      	ldr	r3, [pc, #16]	; (8006db0 <resetConf+0x32c>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006da4:	e008      	b.n	8006db8 <resetConf+0x334>
 8006da6:	bf00      	nop
 8006da8:	08028478 	.word	0x08028478
 8006dac:	2000089c 	.word	0x2000089c
 8006db0:	20000e08 	.word	0x20000e08
 8006db4:	20001734 	.word	0x20001734
    cfg.locked_in = 0;
 8006db8:	4b8e      	ldr	r3, [pc, #568]	; (8006ff4 <resetConf+0x570>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    cfg.mag_declination = 0;    // For example, -6deg 37min, = -637 Japan, format is [sign]dddmm (degreesminutes) default is zero.
 8006dc0:	4b8c      	ldr	r3, [pc, #560]	; (8006ff4 <resetConf+0x570>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    cfg.acc_lpf_factor = 4;
 8006dc6:	4b8b      	ldr	r3, [pc, #556]	; (8006ff4 <resetConf+0x570>)
 8006dc8:	2204      	movs	r2, #4
 8006dca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    cfg.accz_deadband = 40;
 8006dce:	4b89      	ldr	r3, [pc, #548]	; (8006ff4 <resetConf+0x570>)
 8006dd0:	2228      	movs	r2, #40	; 0x28
 8006dd2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    cfg.accxy_deadband = 40;
 8006dd6:	4b87      	ldr	r3, [pc, #540]	; (8006ff4 <resetConf+0x570>)
 8006dd8:	2228      	movs	r2, #40	; 0x28
 8006dda:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    cfg.baro_tab_size = 21;
 8006dde:	4b85      	ldr	r3, [pc, #532]	; (8006ff4 <resetConf+0x570>)
 8006de0:	2215      	movs	r2, #21
 8006de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    cfg.baro_noise_lpf = 0.6f;
 8006de6:	4b83      	ldr	r3, [pc, #524]	; (8006ff4 <resetConf+0x570>)
 8006de8:	4a83      	ldr	r2, [pc, #524]	; (8006ff8 <resetConf+0x574>)
 8006dea:	639a      	str	r2, [r3, #56]	; 0x38
    cfg.baro_cf_vel = 0.985f;
 8006dec:	4b81      	ldr	r3, [pc, #516]	; (8006ff4 <resetConf+0x570>)
 8006dee:	4a83      	ldr	r2, [pc, #524]	; (8006ffc <resetConf+0x578>)
 8006df0:	63da      	str	r2, [r3, #60]	; 0x3c
    cfg.baro_cf_alt = 0.965f;
 8006df2:	4b80      	ldr	r3, [pc, #512]	; (8006ff4 <resetConf+0x570>)
 8006df4:	4a82      	ldr	r2, [pc, #520]	; (8007000 <resetConf+0x57c>)
 8006df6:	641a      	str	r2, [r3, #64]	; 0x40
    cfg.accz_lpf_cutoff = 5.0f;
 8006df8:	4b7e      	ldr	r3, [pc, #504]	; (8006ff4 <resetConf+0x570>)
 8006dfa:	4a82      	ldr	r2, [pc, #520]	; (8007004 <resetConf+0x580>)
 8006dfc:	645a      	str	r2, [r3, #68]	; 0x44
    cfg.acc_unarmedcal = 1;
 8006dfe:	4b7d      	ldr	r3, [pc, #500]	; (8006ff4 <resetConf+0x570>)
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    cfg.small_angle = 25;
 8006e06:	4b7b      	ldr	r3, [pc, #492]	; (8006ff4 <resetConf+0x570>)
 8006e08:	2219      	movs	r2, #25
 8006e0a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    // Radio
    parseRcChannels( "AETR123456789LMNOP" );    //18 channels max
 8006e0e:	487e      	ldr	r0, [pc, #504]	; (8007008 <resetConf+0x584>)
 8006e10:	f7ff fbba 	bl	8006588 <parseRcChannels>
    cfg.deadband = 0;
 8006e14:	4b77      	ldr	r3, [pc, #476]	; (8006ff4 <resetConf+0x570>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    cfg.yawdeadband = 0;
 8006e1c:	4b75      	ldr	r3, [pc, #468]	; (8006ff4 <resetConf+0x570>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    cfg.alt_hold_throttle_neutral = 40;
 8006e24:	4b73      	ldr	r3, [pc, #460]	; (8006ff4 <resetConf+0x570>)
 8006e26:	2228      	movs	r2, #40	; 0x28
 8006e28:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
    cfg.alt_hold_fast_change = 1;
 8006e2c:	4b71      	ldr	r3, [pc, #452]	; (8006ff4 <resetConf+0x570>)
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
    cfg.throttle_correction_value = 0;      // could 10 with althold or 40 for fpv
 8006e34:	4b6f      	ldr	r3, [pc, #444]	; (8006ff4 <resetConf+0x570>)
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
    cfg.throttle_correction_angle = 800;    // could be 80.0 deg with atlhold or 45.0 for fpv
 8006e3c:	4b6d      	ldr	r3, [pc, #436]	; (8006ff4 <resetConf+0x570>)
 8006e3e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006e42:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

    // Failsafe Variables
    cfg.failsafe_delay = 10;                // 1sec
 8006e46:	4b6b      	ldr	r3, [pc, #428]	; (8006ff4 <resetConf+0x570>)
 8006e48:	220a      	movs	r2, #10
 8006e4a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    cfg.failsafe_off_delay = 200;           // 20sec
 8006e4e:	4b69      	ldr	r3, [pc, #420]	; (8006ff4 <resetConf+0x570>)
 8006e50:	22c8      	movs	r2, #200	; 0xc8
 8006e52:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    cfg.failsafe_throttle = 1200;           // decent default which should always be below hover throttle for people.
 8006e56:	4b67      	ldr	r3, [pc, #412]	; (8006ff4 <resetConf+0x570>)
 8006e58:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8006e5c:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    cfg.failsafe_detect_threshold = 985;    // any of first 4 channels below this value will trigger failsafe
 8006e60:	4b64      	ldr	r3, [pc, #400]	; (8006ff4 <resetConf+0x570>)
 8006e62:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006e66:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    // servos
    for (i = 0; i < 8; i++) {
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60fb      	str	r3, [r7, #12]
 8006e6e:	e032      	b.n	8006ed6 <resetConf+0x452>
        cfg.servoConf[i].min = 1020;
 8006e70:	4960      	ldr	r1, [pc, #384]	; (8006ff4 <resetConf+0x570>)
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	4613      	mov	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	005b      	lsls	r3, r3, #1
 8006e7c:	440b      	add	r3, r1
 8006e7e:	33b8      	adds	r3, #184	; 0xb8
 8006e80:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8006e84:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].max = 2000;
 8006e86:	495b      	ldr	r1, [pc, #364]	; (8006ff4 <resetConf+0x570>)
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	440b      	add	r3, r1
 8006e94:	33ba      	adds	r3, #186	; 0xba
 8006e96:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006e9a:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].middle = 1500;
 8006e9c:	4955      	ldr	r1, [pc, #340]	; (8006ff4 <resetConf+0x570>)
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	440b      	add	r3, r1
 8006eaa:	33bc      	adds	r3, #188	; 0xbc
 8006eac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006eb0:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].rate = servoRates[i];
 8006eb2:	1d3a      	adds	r2, r7, #4
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f993 0000 	ldrsb.w	r0, [r3]
 8006ebc:	494d      	ldr	r1, [pc, #308]	; (8006ff4 <resetConf+0x570>)
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	005b      	lsls	r3, r3, #1
 8006ec8:	440b      	add	r3, r1
 8006eca:	33be      	adds	r3, #190	; 0xbe
 8006ecc:	4602      	mov	r2, r0
 8006ece:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 8; i++) {
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	60fb      	str	r3, [r7, #12]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b07      	cmp	r3, #7
 8006eda:	ddc9      	ble.n	8006e70 <resetConf+0x3ec>
    }

    cfg.yaw_direction = 1;
 8006edc:	4b45      	ldr	r3, [pc, #276]	; (8006ff4 <resetConf+0x570>)
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    cfg.tri_unarmed_servo = 1;
 8006ee4:	4b43      	ldr	r3, [pc, #268]	; (8006ff4 <resetConf+0x570>)
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f

    // gimbal
    cfg.gimbal_flags = GIMBAL_NORMAL;
 8006eec:	4b41      	ldr	r3, [pc, #260]	; (8006ff4 <resetConf+0x570>)
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // gps/nav stuff
    cfg.gps_wp_radius = 200;
 8006ef4:	4b3f      	ldr	r3, [pc, #252]	; (8006ff4 <resetConf+0x570>)
 8006ef6:	22c8      	movs	r2, #200	; 0xc8
 8006ef8:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
    cfg.gps_lpf = 20;
 8006efc:	4b3d      	ldr	r3, [pc, #244]	; (8006ff4 <resetConf+0x570>)
 8006efe:	2214      	movs	r2, #20
 8006f00:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
    cfg.nav_slew_rate = 30;
 8006f04:	4b3b      	ldr	r3, [pc, #236]	; (8006ff4 <resetConf+0x570>)
 8006f06:	221e      	movs	r2, #30
 8006f08:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    cfg.nav_controls_heading = 1;
 8006f0c:	4b39      	ldr	r3, [pc, #228]	; (8006ff4 <resetConf+0x570>)
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
    cfg.nav_speed_min = 100;
 8006f14:	4b37      	ldr	r3, [pc, #220]	; (8006ff4 <resetConf+0x570>)
 8006f16:	2264      	movs	r2, #100	; 0x64
 8006f18:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
    cfg.nav_speed_max = 300;
 8006f1c:	4b35      	ldr	r3, [pc, #212]	; (8006ff4 <resetConf+0x570>)
 8006f1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006f22:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
    cfg.ap_mode = 40;
 8006f26:	4b33      	ldr	r3, [pc, #204]	; (8006ff4 <resetConf+0x570>)
 8006f28:	2228      	movs	r2, #40	; 0x28
 8006f2a:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
    // fw stuff
    cfg.fw_gps_maxcorr = 20;
 8006f2e:	4b31      	ldr	r3, [pc, #196]	; (8006ff4 <resetConf+0x570>)
 8006f30:	2214      	movs	r2, #20
 8006f32:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    cfg.fw_gps_rudder = 15;
 8006f36:	4b2f      	ldr	r3, [pc, #188]	; (8006ff4 <resetConf+0x570>)
 8006f38:	220f      	movs	r2, #15
 8006f3a:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    cfg.fw_gps_maxclimb = 15;
 8006f3e:	4b2d      	ldr	r3, [pc, #180]	; (8006ff4 <resetConf+0x570>)
 8006f40:	220f      	movs	r2, #15
 8006f42:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    cfg.fw_gps_maxdive = 15;
 8006f46:	4b2b      	ldr	r3, [pc, #172]	; (8006ff4 <resetConf+0x570>)
 8006f48:	220f      	movs	r2, #15
 8006f4a:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
    cfg.fw_climb_throttle = 1900;
 8006f4e:	4b29      	ldr	r3, [pc, #164]	; (8006ff4 <resetConf+0x570>)
 8006f50:	f240 726c 	movw	r2, #1900	; 0x76c
 8006f54:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
    cfg.fw_cruise_throttle = 1500;
 8006f58:	4b26      	ldr	r3, [pc, #152]	; (8006ff4 <resetConf+0x570>)
 8006f5a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006f5e:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
    cfg.fw_idle_throttle = 1300;
 8006f62:	4b24      	ldr	r3, [pc, #144]	; (8006ff4 <resetConf+0x570>)
 8006f64:	f240 5214 	movw	r2, #1300	; 0x514
 8006f68:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
    cfg.fw_scaler_throttle = 8;
 8006f6c:	4b21      	ldr	r3, [pc, #132]	; (8006ff4 <resetConf+0x570>)
 8006f6e:	2208      	movs	r2, #8
 8006f70:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
    cfg.fw_roll_comp = 100;
 8006f74:	4b1f      	ldr	r3, [pc, #124]	; (8006ff4 <resetConf+0x570>)
 8006f76:	2264      	movs	r2, #100	; 0x64
 8006f78:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    cfg.fw_cruise_distance = 500;
 8006f7c:	4b1d      	ldr	r3, [pc, #116]	; (8006ff4 <resetConf+0x570>)
 8006f7e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006f82:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
    cfg.fw_rth_alt = 50;
 8006f86:	4b1b      	ldr	r3, [pc, #108]	; (8006ff4 <resetConf+0x570>)
 8006f88:	2232      	movs	r2, #50	; 0x32
 8006f8a:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
    // control stuff
    mcfg.reboot_character = 'R';
 8006f8e:	4b1f      	ldr	r3, [pc, #124]	; (800700c <resetConf+0x588>)
 8006f90:	2252      	movs	r2, #82	; 0x52
 8006f92:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569

    // custom mixer. clear by defaults.
    for (i = 0; i < MAX_MOTORS; i++)
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
 8006f9a:	e00a      	b.n	8006fb2 <resetConf+0x52e>
        mcfg.customMixer[i].throttle = 0.0f;
 8006f9c:	4a1b      	ldr	r2, [pc, #108]	; (800700c <resetConf+0x588>)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	011b      	lsls	r3, r3, #4
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f04f 0200 	mov.w	r2, #0
 8006faa:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MOTORS; i++)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2b0b      	cmp	r3, #11
 8006fb6:	ddf1      	ble.n	8006f9c <resetConf+0x518>

    // copy default config into all 3 profiles
    for (i = 0; i < 3; i++)
 8006fb8:	2300      	movs	r3, #0
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	e011      	b.n	8006fe2 <resetConf+0x55e>
        memcpy(&mcfg.profile[i], &cfg, sizeof(config_t));
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006fc4:	fb02 f303 	mul.w	r3, r2, r3
 8006fc8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8006fcc:	4a0f      	ldr	r2, [pc, #60]	; (800700c <resetConf+0x588>)
 8006fce:	4413      	add	r3, r2
 8006fd0:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006fd4:	4907      	ldr	r1, [pc, #28]	; (8006ff4 <resetConf+0x570>)
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f01c ff62 	bl	8023ea0 <memcpy>
    for (i = 0; i < 3; i++)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	ddea      	ble.n	8006fbe <resetConf+0x53a>
}
 8006fe8:	bf00      	nop
 8006fea:	bf00      	nop
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	20000e08 	.word	0x20000e08
 8006ff8:	3f19999a 	.word	0x3f19999a
 8006ffc:	3f7c28f6 	.word	0x3f7c28f6
 8007000:	3f770a3d 	.word	0x3f770a3d
 8007004:	40a00000 	.word	0x40a00000
 8007008:	08028464 	.word	0x08028464
 800700c:	2000089c 	.word	0x2000089c

08007010 <sensors>:

bool sensors(uint32_t mask)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
    return (enabledSensors & mask) != 0;
 8007018:	4b07      	ldr	r3, [pc, #28]	; (8007038 <sensors+0x28>)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4013      	ands	r3, r2
 8007020:	2b00      	cmp	r3, #0
 8007022:	bf14      	ite	ne
 8007024:	2301      	movne	r3, #1
 8007026:	2300      	moveq	r3, #0
 8007028:	b2db      	uxtb	r3, r3
}
 800702a:	4618      	mov	r0, r3
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	20000f40 	.word	0x20000f40

0800703c <sensorsSet>:

void sensorsSet(uint32_t mask)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
    enabledSensors |= mask;
 8007044:	4b05      	ldr	r3, [pc, #20]	; (800705c <sensorsSet+0x20>)
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4313      	orrs	r3, r2
 800704c:	4a03      	ldr	r2, [pc, #12]	; (800705c <sensorsSet+0x20>)
 800704e:	6013      	str	r3, [r2, #0]
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	20000f40 	.word	0x20000f40

08007060 <sensorsClear>:

void sensorsClear(uint32_t mask)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
    enabledSensors &= ~(mask);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	43da      	mvns	r2, r3
 800706c:	4b05      	ldr	r3, [pc, #20]	; (8007084 <sensorsClear+0x24>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4013      	ands	r3, r2
 8007072:	4a04      	ldr	r2, [pc, #16]	; (8007084 <sensorsClear+0x24>)
 8007074:	6013      	str	r3, [r2, #0]
}
 8007076:	bf00      	nop
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	20000f40 	.word	0x20000f40

08007088 <sensorsMask>:

uint32_t sensorsMask(void)
{
 8007088:	b480      	push	{r7}
 800708a:	af00      	add	r7, sp, #0
    return enabledSensors;
 800708c:	4b03      	ldr	r3, [pc, #12]	; (800709c <sensorsMask+0x14>)
 800708e:	681b      	ldr	r3, [r3, #0]
}
 8007090:	4618      	mov	r0, r3
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	20000f40 	.word	0x20000f40

080070a0 <feature>:

bool feature(uint32_t mask)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
    return (mcfg.enabledFeatures & mask) != 0;
 80070a8:	4b07      	ldr	r3, [pc, #28]	; (80070c8 <feature+0x28>)
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4013      	ands	r3, r2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	bf14      	ite	ne
 80070b4:	2301      	movne	r3, #1
 80070b6:	2300      	moveq	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	2000089c 	.word	0x2000089c

080070cc <featureSet>:

void featureSet(uint32_t mask)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
    mcfg.enabledFeatures |= mask;
 80070d4:	4b05      	ldr	r3, [pc, #20]	; (80070ec <featureSet+0x20>)
 80070d6:	689a      	ldr	r2, [r3, #8]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4313      	orrs	r3, r2
 80070dc:	4a03      	ldr	r2, [pc, #12]	; (80070ec <featureSet+0x20>)
 80070de:	6093      	str	r3, [r2, #8]
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	2000089c 	.word	0x2000089c

080070f0 <featureClear>:

void featureClear(uint32_t mask)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
    mcfg.enabledFeatures &= ~(mask);
 80070f8:	4b06      	ldr	r3, [pc, #24]	; (8007114 <featureClear+0x24>)
 80070fa:	689a      	ldr	r2, [r3, #8]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	43db      	mvns	r3, r3
 8007100:	4013      	ands	r3, r2
 8007102:	4a04      	ldr	r2, [pc, #16]	; (8007114 <featureClear+0x24>)
 8007104:	6093      	str	r3, [r2, #8]
}
 8007106:	bf00      	nop
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	2000089c 	.word	0x2000089c

08007118 <featureClearAll>:

void featureClearAll()
{
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
    mcfg.enabledFeatures = 0;
 800711c:	4b03      	ldr	r3, [pc, #12]	; (800712c <featureClearAll+0x14>)
 800711e:	2200      	movs	r2, #0
 8007120:	609a      	str	r2, [r3, #8]
}
 8007122:	bf00      	nop
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	2000089c 	.word	0x2000089c

08007130 <featureMask>:

uint32_t featureMask(void)
{
 8007130:	b480      	push	{r7}
 8007132:	af00      	add	r7, sp, #0
    return mcfg.enabledFeatures;
 8007134:	4b03      	ldr	r3, [pc, #12]	; (8007144 <featureMask+0x14>)
 8007136:	689b      	ldr	r3, [r3, #8]
}
 8007138:	4618      	mov	r0, r3
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	2000089c 	.word	0x2000089c

08007148 <fw_nav_reset>:
static int16_t speedBoost;
static int16_t altHist[GPS_UPD_HZ + 1];     // shift register
static int16_t navDif[GPS_UPD_HZ + 1];      // shift register

void fw_nav_reset(void)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
    uint8_t i;

    navErrorI = 0;
 800714e:	4b15      	ldr	r3, [pc, #84]	; (80071a4 <fw_nav_reset+0x5c>)
 8007150:	f04f 0200 	mov.w	r2, #0
 8007154:	601a      	str	r2, [r3, #0]
    altErrorI = 0;
 8007156:	4b14      	ldr	r3, [pc, #80]	; (80071a8 <fw_nav_reset+0x60>)
 8007158:	f04f 0200 	mov.w	r2, #0
 800715c:	601a      	str	r2, [r3, #0]
    lastAltDiff = 0;
 800715e:	4b13      	ldr	r3, [pc, #76]	; (80071ac <fw_nav_reset+0x64>)
 8007160:	2200      	movs	r2, #0
 8007162:	801a      	strh	r2, [r3, #0]
    lastnavDiff = 0;
 8007164:	4b12      	ldr	r3, [pc, #72]	; (80071b0 <fw_nav_reset+0x68>)
 8007166:	2200      	movs	r2, #0
 8007168:	801a      	strh	r2, [r3, #0]
    speedBoost = 0;
 800716a:	4b12      	ldr	r3, [pc, #72]	; (80071b4 <fw_nav_reset+0x6c>)
 800716c:	2200      	movs	r2, #0
 800716e:	801a      	strh	r2, [r3, #0]

    for (i = 0; i < GPS_UPD_HZ; i++) {
 8007170:	2300      	movs	r3, #0
 8007172:	71fb      	strb	r3, [r7, #7]
 8007174:	e00c      	b.n	8007190 <fw_nav_reset+0x48>
        altHist[i] = 0;
 8007176:	79fb      	ldrb	r3, [r7, #7]
 8007178:	4a0f      	ldr	r2, [pc, #60]	; (80071b8 <fw_nav_reset+0x70>)
 800717a:	2100      	movs	r1, #0
 800717c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        navDif[i] = 0;
 8007180:	79fb      	ldrb	r3, [r7, #7]
 8007182:	4a0e      	ldr	r2, [pc, #56]	; (80071bc <fw_nav_reset+0x74>)
 8007184:	2100      	movs	r1, #0
 8007186:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < GPS_UPD_HZ; i++) {
 800718a:	79fb      	ldrb	r3, [r7, #7]
 800718c:	3301      	adds	r3, #1
 800718e:	71fb      	strb	r3, [r7, #7]
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	2b04      	cmp	r3, #4
 8007194:	d9ef      	bls.n	8007176 <fw_nav_reset+0x2e>
    }
}
 8007196:	bf00      	nop
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	20000f48 	.word	0x20000f48
 80071a8:	20000f4c 	.word	0x20000f4c
 80071ac:	20000f50 	.word	0x20000f50
 80071b0:	20000f52 	.word	0x20000f52
 80071b4:	20000f54 	.word	0x20000f54
 80071b8:	20000f58 	.word	0x20000f58
 80071bc:	20000f64 	.word	0x20000f64

080071c0 <fw_FlyTo>:

void fw_FlyTo(void) // PatrikE CruiseMode version
{
 80071c0:	b5b0      	push	{r4, r5, r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
    float wp_lat_diff, wp_lon_diff, scaler;
    int32_t holdHeading = GPS_ground_course / 10;
 80071c6:	4b48      	ldr	r3, [pc, #288]	; (80072e8 <fw_FlyTo+0x128>)
 80071c8:	881b      	ldrh	r3, [r3, #0]
 80071ca:	4a48      	ldr	r2, [pc, #288]	; (80072ec <fw_FlyTo+0x12c>)
 80071cc:	fba2 2303 	umull	r2, r3, r2, r3
 80071d0:	08db      	lsrs	r3, r3, #3
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	60fb      	str	r3, [r7, #12]
    if (holdHeading > 180)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2bb4      	cmp	r3, #180	; 0xb4
 80071da:	dd03      	ble.n	80071e4 <fw_FlyTo+0x24>
        holdHeading -= 360;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80071e2:	60fb      	str	r3, [r7, #12]
    scaler = (GEO_SKALEFACT / GPS_scaleLonDown) * cfg.fw_cruise_distance;
 80071e4:	4b42      	ldr	r3, [pc, #264]	; (80072f0 <fw_FlyTo+0x130>)
 80071e6:	edd3 7a00 	vldr	s15, [r3]
 80071ea:	eddf 6a42 	vldr	s13, [pc, #264]	; 80072f4 <fw_FlyTo+0x134>
 80071ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071f2:	4b41      	ldr	r3, [pc, #260]	; (80072f8 <fw_FlyTo+0x138>)
 80071f4:	f9b3 3134 	ldrsh.w	r3, [r3, #308]	; 0x134
 80071f8:	ee07 3a90 	vmov	s15, r3
 80071fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007204:	edc7 7a02 	vstr	s15, [r7, #8]
    wp_lat_diff = cos(holdHeading * 0.0174532925f);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007212:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80072fc <fw_FlyTo+0x13c>
 8007216:	ee67 7a87 	vmul.f32	s15, s15, s14
 800721a:	ee17 0a90 	vmov	r0, s15
 800721e:	f7f9 f947 	bl	80004b0 <__aeabi_f2d>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	ec43 2b10 	vmov	d0, r2, r3
 800722a:	f01d f879 	bl	8024320 <cos>
 800722e:	ec53 2b10 	vmov	r2, r3, d0
 8007232:	4610      	mov	r0, r2
 8007234:	4619      	mov	r1, r3
 8007236:	f7f9 fc75 	bl	8000b24 <__aeabi_d2f>
 800723a:	4603      	mov	r3, r0
 800723c:	607b      	str	r3, [r7, #4]
    wp_lon_diff = sin(holdHeading * 0.0174532925f) * GPS_scaleLonDown;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	ee07 3a90 	vmov	s15, r3
 8007244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007248:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80072fc <fw_FlyTo+0x13c>
 800724c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007250:	ee17 0a90 	vmov	r0, s15
 8007254:	f7f9 f92c 	bl	80004b0 <__aeabi_f2d>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	ec43 2b10 	vmov	d0, r2, r3
 8007260:	f01d f8b2 	bl	80243c8 <sin>
 8007264:	ec55 4b10 	vmov	r4, r5, d0
 8007268:	4b21      	ldr	r3, [pc, #132]	; (80072f0 <fw_FlyTo+0x130>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4618      	mov	r0, r3
 800726e:	f7f9 f91f 	bl	80004b0 <__aeabi_f2d>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4620      	mov	r0, r4
 8007278:	4629      	mov	r1, r5
 800727a:	f7f9 f971 	bl	8000560 <__aeabi_dmul>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	4610      	mov	r0, r2
 8007284:	4619      	mov	r1, r3
 8007286:	f7f9 fc4d 	bl	8000b24 <__aeabi_d2f>
 800728a:	4603      	mov	r3, r0
 800728c:	603b      	str	r3, [r7, #0]
    GPS_WP[LAT] += wp_lat_diff * scaler;
 800728e:	4b1c      	ldr	r3, [pc, #112]	; (8007300 <fw_FlyTo+0x140>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	ee07 3a90 	vmov	s15, r3
 8007296:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800729a:	edd7 6a01 	vldr	s13, [r7, #4]
 800729e:	edd7 7a02 	vldr	s15, [r7, #8]
 80072a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80072a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072ae:	ee17 2a90 	vmov	r2, s15
 80072b2:	4b13      	ldr	r3, [pc, #76]	; (8007300 <fw_FlyTo+0x140>)
 80072b4:	601a      	str	r2, [r3, #0]
    GPS_WP[LON] += wp_lon_diff * scaler;
 80072b6:	4b12      	ldr	r3, [pc, #72]	; (8007300 <fw_FlyTo+0x140>)
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072c2:	edd7 6a00 	vldr	s13, [r7]
 80072c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80072ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80072ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072d6:	ee17 2a90 	vmov	r2, s15
 80072da:	4b09      	ldr	r3, [pc, #36]	; (8007300 <fw_FlyTo+0x140>)
 80072dc:	605a      	str	r2, [r3, #4]
}
 80072de:	bf00      	nop
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bdb0      	pop	{r4, r5, r7, pc}
 80072e6:	bf00      	nop
 80072e8:	20001842 	.word	0x20001842
 80072ec:	cccccccd 	.word	0xcccccccd
 80072f0:	20000028 	.word	0x20000028
 80072f4:	42b3a9fc 	.word	0x42b3a9fc
 80072f8:	20000e08 	.word	0x20000e08
 80072fc:	3c8efa35 	.word	0x3c8efa35
 8007300:	20001338 	.word	0x20001338

08007304 <fw_nav>:

void fw_nav(void)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b08a      	sub	sp, #40	; 0x28
 8007308:	af00      	add	r7, sp, #0
    int16_t GPS_Heading = GPS_ground_course;    // Store current bearing
 800730a:	4b56      	ldr	r3, [pc, #344]	; (8007464 <fw_nav+0x160>)
 800730c:	881b      	ldrh	r3, [r3, #0]
 800730e:	843b      	strh	r3, [r7, #32]
    int16_t Current_Heading;                    // Store current bearing
    int16_t altDiff = 0;
 8007310:	2300      	movs	r3, #0
 8007312:	83fb      	strh	r3, [r7, #30]
    uint8_t RTH_Alt = cfg.fw_rth_alt;           // Min Altitude to keep during RTH. (Max 200m)
 8007314:	4b54      	ldr	r3, [pc, #336]	; (8007468 <fw_nav+0x164>)
 8007316:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 800731a:	777b      	strb	r3, [r7, #29]
    int16_t delta[2] = { 0, 0 };                // D-Term
 800731c:	2300      	movs	r3, #0
 800731e:	80bb      	strh	r3, [r7, #4]
 8007320:	2300      	movs	r3, #0
 8007322:	80fb      	strh	r3, [r7, #6]
    static int16_t NAV_deltaSum, ALT_deltaSum, GPS_FwTarget, GPS_AltErr, NAV_Thro;
    int16_t TX_Thro = rcData[THROTTLE];         // Read and store Throttle pos.
 8007324:	4b51      	ldr	r3, [pc, #324]	; (800746c <fw_nav+0x168>)
 8007326:	88db      	ldrh	r3, [r3, #6]
 8007328:	837b      	strh	r3, [r7, #26]
    // Nav timer
    static uint32_t gpsTimer = 0;
    static uint16_t gpsFreq = 1000 / GPS_UPD_HZ;    // 5HZ 200ms DT

    // Calculated Altitude over home in meters
    int16_t currAlt = GPS_altitude - GPS_home[ALT];         // GPS
 800732a:	4b51      	ldr	r3, [pc, #324]	; (8007470 <fw_nav+0x16c>)
 800732c:	881a      	ldrh	r2, [r3, #0]
 800732e:	4b51      	ldr	r3, [pc, #324]	; (8007474 <fw_nav+0x170>)
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	b29b      	uxth	r3, r3
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	b29b      	uxth	r3, r3
 8007338:	833b      	strh	r3, [r7, #24]
    int16_t navTargetAlt = GPS_hold[ALT] - GPS_home[ALT];   // Diff from homeAlt.
 800733a:	4b4f      	ldr	r3, [pc, #316]	; (8007478 <fw_nav+0x174>)
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	b29a      	uxth	r2, r3
 8007340:	4b4c      	ldr	r3, [pc, #304]	; (8007474 <fw_nav+0x170>)
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	b29b      	uxth	r3, r3
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	b29b      	uxth	r3, r3
 800734a:	82fb      	strh	r3, [r7, #22]

    // Handles ReSetting RTH alt if rth is enabled to low!
    if (f.CLIMBOUT_FW && currAlt < RTH_Alt)
 800734c:	4b4b      	ldr	r3, [pc, #300]	; (800747c <fw_nav+0x178>)
 800734e:	7cdb      	ldrb	r3, [r3, #19]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00a      	beq.n	800736a <fw_nav+0x66>
 8007354:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007358:	7f7b      	ldrb	r3, [r7, #29]
 800735a:	429a      	cmp	r2, r3
 800735c:	da05      	bge.n	800736a <fw_nav+0x66>
        GPS_hold[ALT] = GPS_home[ALT] + RTH_Alt;
 800735e:	4b45      	ldr	r3, [pc, #276]	; (8007474 <fw_nav+0x170>)
 8007360:	689a      	ldr	r2, [r3, #8]
 8007362:	7f7b      	ldrb	r3, [r7, #29]
 8007364:	4413      	add	r3, r2
 8007366:	4a44      	ldr	r2, [pc, #272]	; (8007478 <fw_nav+0x174>)
 8007368:	6093      	str	r3, [r2, #8]

    // Wrap GPS_Heading 1800
    GPS_Heading = wrap_18000(GPS_Heading * 10) / 10;
 800736a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800736e:	4613      	mov	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4413      	add	r3, r2
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	4618      	mov	r0, r3
 8007378:	f002 fb40 	bl	80099fc <wrap_18000>
 800737c:	4603      	mov	r3, r0
 800737e:	4a40      	ldr	r2, [pc, #256]	; (8007480 <fw_nav+0x17c>)
 8007380:	fb82 1203 	smull	r1, r2, r2, r3
 8007384:	1092      	asrs	r2, r2, #2
 8007386:	17db      	asrs	r3, r3, #31
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	843b      	strh	r3, [r7, #32]

    // Only use MAG if Mag and GPS_Heading aligns
    if (sensors(SENSOR_MAG)) {
 800738c:	2008      	movs	r0, #8
 800738e:	f7ff fe3f 	bl	8007010 <sensors>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d024      	beq.n	80073e2 <fw_nav+0xde>
        if (abs(heading - (GPS_Heading / 10)) > 10 && GPS_speed > 200)
 8007398:	4b3a      	ldr	r3, [pc, #232]	; (8007484 <fw_nav+0x180>)
 800739a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800739e:	4619      	mov	r1, r3
 80073a0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80073a4:	4a36      	ldr	r2, [pc, #216]	; (8007480 <fw_nav+0x17c>)
 80073a6:	fb82 0203 	smull	r0, r2, r2, r3
 80073aa:	1092      	asrs	r2, r2, #2
 80073ac:	17db      	asrs	r3, r3, #31
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	b21b      	sxth	r3, r3
 80073b2:	1acb      	subs	r3, r1, r3
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	bfb8      	it	lt
 80073b8:	425b      	neglt	r3, r3
 80073ba:	2b0a      	cmp	r3, #10
 80073bc:	dd0d      	ble.n	80073da <fw_nav+0xd6>
 80073be:	4b32      	ldr	r3, [pc, #200]	; (8007488 <fw_nav+0x184>)
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	2bc8      	cmp	r3, #200	; 0xc8
 80073c4:	d909      	bls.n	80073da <fw_nav+0xd6>
            Current_Heading = GPS_Heading / 10;
 80073c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80073ca:	4a2d      	ldr	r2, [pc, #180]	; (8007480 <fw_nav+0x17c>)
 80073cc:	fb82 1203 	smull	r1, r2, r2, r3
 80073d0:	1092      	asrs	r2, r2, #2
 80073d2:	17db      	asrs	r3, r3, #31
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80073d8:	e00c      	b.n	80073f4 <fw_nav+0xf0>
        else
            Current_Heading = heading;
 80073da:	4b2a      	ldr	r3, [pc, #168]	; (8007484 <fw_nav+0x180>)
 80073dc:	881b      	ldrh	r3, [r3, #0]
 80073de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80073e0:	e008      	b.n	80073f4 <fw_nav+0xf0>
    } else
        Current_Heading = GPS_Heading / 10;
 80073e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80073e6:	4a26      	ldr	r2, [pc, #152]	; (8007480 <fw_nav+0x17c>)
 80073e8:	fb82 1203 	smull	r1, r2, r2, r3
 80073ec:	1092      	asrs	r2, r2, #2
 80073ee:	17db      	asrs	r3, r3, #31
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	84fb      	strh	r3, [r7, #38]	; 0x26

    // Calculate Navigation errors
    GPS_FwTarget = nav_bearing / 100;
 80073f4:	4b25      	ldr	r3, [pc, #148]	; (800748c <fw_nav+0x188>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a25      	ldr	r2, [pc, #148]	; (8007490 <fw_nav+0x18c>)
 80073fa:	fb82 1203 	smull	r1, r2, r2, r3
 80073fe:	1152      	asrs	r2, r2, #5
 8007400:	17db      	asrs	r3, r3, #31
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	b21a      	sxth	r2, r3
 8007406:	4b23      	ldr	r3, [pc, #140]	; (8007494 <fw_nav+0x190>)
 8007408:	801a      	strh	r2, [r3, #0]
    navDiff = GPS_FwTarget - Current_Heading;   // Navigation Error
 800740a:	4b22      	ldr	r3, [pc, #136]	; (8007494 <fw_nav+0x190>)
 800740c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007410:	b29a      	uxth	r2, r3
 8007412:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	b29b      	uxth	r3, r3
 8007418:	84bb      	strh	r3, [r7, #36]	; 0x24
    GPS_AltErr = currAlt - navTargetAlt;        // Altitude error Negative means you're to low
 800741a:	8b3a      	ldrh	r2, [r7, #24]
 800741c:	8afb      	ldrh	r3, [r7, #22]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	b29b      	uxth	r3, r3
 8007422:	b21a      	sxth	r2, r3
 8007424:	4b1c      	ldr	r3, [pc, #112]	; (8007498 <fw_nav+0x194>)
 8007426:	801a      	strh	r2, [r3, #0]

    // Start of NavTimer
    if (pif_cumulative_timer1ms - gpsTimer >= gpsFreq) {
 8007428:	4b1c      	ldr	r3, [pc, #112]	; (800749c <fw_nav+0x198>)
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	4b1c      	ldr	r3, [pc, #112]	; (80074a0 <fw_nav+0x19c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	4a1c      	ldr	r2, [pc, #112]	; (80074a4 <fw_nav+0x1a0>)
 8007434:	8812      	ldrh	r2, [r2, #0]
 8007436:	4293      	cmp	r3, r2
 8007438:	f0c0 83e9 	bcc.w	8007c0e <fw_nav+0x90a>
        gpsTimer = pif_cumulative_timer1ms;
 800743c:	4b17      	ldr	r3, [pc, #92]	; (800749c <fw_nav+0x198>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a17      	ldr	r2, [pc, #92]	; (80074a0 <fw_nav+0x19c>)
 8007442:	6013      	str	r3, [r2, #0]

        // Throttle control
        // Deadpan for throttle at correct Alt.
        if (abs(GPS_AltErr) < 1) // Just cruise along in deadpan.
 8007444:	4b14      	ldr	r3, [pc, #80]	; (8007498 <fw_nav+0x194>)
 8007446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800744a:	2b00      	cmp	r3, #0
 800744c:	bfb8      	it	lt
 800744e:	425b      	neglt	r3, r3
 8007450:	b29b      	uxth	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d12a      	bne.n	80074ac <fw_nav+0x1a8>
            NAV_Thro = cfg.fw_cruise_throttle;
 8007456:	4b04      	ldr	r3, [pc, #16]	; (8007468 <fw_nav+0x164>)
 8007458:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 800745c:	b21a      	sxth	r2, r3
 800745e:	4b12      	ldr	r3, [pc, #72]	; (80074a8 <fw_nav+0x1a4>)
 8007460:	801a      	strh	r2, [r3, #0]
 8007462:	e03f      	b.n	80074e4 <fw_nav+0x1e0>
 8007464:	20001842 	.word	0x20001842
 8007468:	20000e08 	.word	0x20000e08
 800746c:	20001784 	.word	0x20001784
 8007470:	20001836 	.word	0x20001836
 8007474:	20001818 	.word	0x20001818
 8007478:	20001824 	.word	0x20001824
 800747c:	2000174c 	.word	0x2000174c
 8007480:	66666667 	.word	0x66666667
 8007484:	20001a7e 	.word	0x20001a7e
 8007488:	20001838 	.word	0x20001838
 800748c:	200013a0 	.word	0x200013a0
 8007490:	51eb851f 	.word	0x51eb851f
 8007494:	20000f70 	.word	0x20000f70
 8007498:	20000f72 	.word	0x20000f72
 800749c:	20001df8 	.word	0x20001df8
 80074a0:	20000f74 	.word	0x20000f74
 80074a4:	20000026 	.word	0x20000026
 80074a8:	20000f78 	.word	0x20000f78
        else
            // Add AltitudeError  and scale up with a factor to throttle
            NAV_Thro = constrain(cfg.fw_cruise_throttle - (GPS_AltErr * cfg.fw_scaler_throttle), cfg.fw_idle_throttle, cfg.fw_climb_throttle);
 80074ac:	4b99      	ldr	r3, [pc, #612]	; (8007714 <fw_nav+0x410>)
 80074ae:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 80074b2:	461a      	mov	r2, r3
 80074b4:	4b98      	ldr	r3, [pc, #608]	; (8007718 <fw_nav+0x414>)
 80074b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074ba:	4619      	mov	r1, r3
 80074bc:	4b95      	ldr	r3, [pc, #596]	; (8007714 <fw_nav+0x410>)
 80074be:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 80074c2:	fb01 f303 	mul.w	r3, r1, r3
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	4a92      	ldr	r2, [pc, #584]	; (8007714 <fw_nav+0x410>)
 80074ca:	f8b2 212e 	ldrh.w	r2, [r2, #302]	; 0x12e
 80074ce:	4611      	mov	r1, r2
 80074d0:	4a90      	ldr	r2, [pc, #576]	; (8007714 <fw_nav+0x410>)
 80074d2:	f8b2 212a 	ldrh.w	r2, [r2, #298]	; 0x12a
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fc fc7e 	bl	8003dd8 <constrain>
 80074dc:	4603      	mov	r3, r0
 80074de:	b21a      	sxth	r2, r3
 80074e0:	4b8e      	ldr	r3, [pc, #568]	; (800771c <fw_nav+0x418>)
 80074e2:	801a      	strh	r2, [r3, #0]

        // Reset Climbout Flag when Alt have been reached
        if (f.CLIMBOUT_FW && GPS_AltErr >= 0)
 80074e4:	4b8e      	ldr	r3, [pc, #568]	; (8007720 <fw_nav+0x41c>)
 80074e6:	7cdb      	ldrb	r3, [r3, #19]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d007      	beq.n	80074fc <fw_nav+0x1f8>
 80074ec:	4b8a      	ldr	r3, [pc, #552]	; (8007718 <fw_nav+0x414>)
 80074ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	db02      	blt.n	80074fc <fw_nav+0x1f8>
            f.CLIMBOUT_FW = 0;
 80074f6:	4b8a      	ldr	r3, [pc, #552]	; (8007720 <fw_nav+0x41c>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	74da      	strb	r2, [r3, #19]

        // Climb out before RTH
        if (f.GPS_HOME_MODE) {
 80074fc:	4b88      	ldr	r3, [pc, #544]	; (8007720 <fw_nav+0x41c>)
 80074fe:	79db      	ldrb	r3, [r3, #7]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d02c      	beq.n	800755e <fw_nav+0x25a>
            if (f.CLIMBOUT_FW) {
 8007504:	4b86      	ldr	r3, [pc, #536]	; (8007720 <fw_nav+0x41c>)
 8007506:	7cdb      	ldrb	r3, [r3, #19]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d019      	beq.n	8007540 <fw_nav+0x23c>
                GPS_AltErr = -(cfg.fw_gps_maxclimb * 10);  // Max climbAngle
 800750c:	4b81      	ldr	r3, [pc, #516]	; (8007714 <fw_nav+0x410>)
 800750e:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8007512:	b29b      	uxth	r3, r3
 8007514:	461a      	mov	r2, r3
 8007516:	0352      	lsls	r2, r2, #13
 8007518:	1ad2      	subs	r2, r2, r3
 800751a:	0092      	lsls	r2, r2, #2
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	005b      	lsls	r3, r3, #1
 8007520:	b29b      	uxth	r3, r3
 8007522:	b21a      	sxth	r2, r3
 8007524:	4b7c      	ldr	r3, [pc, #496]	; (8007718 <fw_nav+0x414>)
 8007526:	801a      	strh	r2, [r3, #0]
                NAV_Thro = cfg.fw_climb_throttle;          // Max Allowed Throttle
 8007528:	4b7a      	ldr	r3, [pc, #488]	; (8007714 <fw_nav+0x410>)
 800752a:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 800752e:	b21a      	sxth	r2, r3
 8007530:	4b7a      	ldr	r3, [pc, #488]	; (800771c <fw_nav+0x418>)
 8007532:	801a      	strh	r2, [r3, #0]
                if (currAlt < SAFE_NAV_ALT)
 8007534:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007538:	2b18      	cmp	r3, #24
 800753a:	dc01      	bgt.n	8007540 <fw_nav+0x23c>
                    navDiff = 0;                        // Force climb with Level Wings below safe Alt
 800753c:	2300      	movs	r3, #0
 800753e:	84bb      	strh	r3, [r7, #36]	; 0x24
            }

            if ((GPS_distanceToHome < SAFE_DECSCEND_ZONE) && currAlt > RTH_Alt)
 8007540:	4b78      	ldr	r3, [pc, #480]	; (8007724 <fw_nav+0x420>)
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	2b31      	cmp	r3, #49	; 0x31
 8007546:	d80a      	bhi.n	800755e <fw_nav+0x25a>
 8007548:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800754c:	7f7b      	ldrb	r3, [r7, #29]
 800754e:	429a      	cmp	r2, r3
 8007550:	dd05      	ble.n	800755e <fw_nav+0x25a>
                GPS_hold[ALT] = GPS_home[ALT] + RTH_Alt;    // Start descend to correct RTH Alt.
 8007552:	4b75      	ldr	r3, [pc, #468]	; (8007728 <fw_nav+0x424>)
 8007554:	689a      	ldr	r2, [r3, #8]
 8007556:	7f7b      	ldrb	r3, [r7, #29]
 8007558:	4413      	add	r3, r2
 800755a:	4a74      	ldr	r2, [pc, #464]	; (800772c <fw_nav+0x428>)
 800755c:	6093      	str	r3, [r2, #8]
        }

        // Always DISARM when Home is within 10 meters if FC is in failsafe.
        if (f.FW_FAILSAFE_RTH_ENABLE && (GPS_distanceToHome < 10)) {
 800755e:	4b70      	ldr	r3, [pc, #448]	; (8007720 <fw_nav+0x41c>)
 8007560:	7c9b      	ldrb	r3, [r3, #18]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00e      	beq.n	8007584 <fw_nav+0x280>
 8007566:	4b6f      	ldr	r3, [pc, #444]	; (8007724 <fw_nav+0x420>)
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	2b09      	cmp	r3, #9
 800756c:	d80a      	bhi.n	8007584 <fw_nav+0x280>
            f.ARMED = 0;
 800756e:	4b6c      	ldr	r3, [pc, #432]	; (8007720 <fw_nav+0x41c>)
 8007570:	2200      	movs	r2, #0
 8007572:	705a      	strb	r2, [r3, #1]
            f.CLIMBOUT_FW = 0;                  // Abort Climbout
 8007574:	4b6a      	ldr	r3, [pc, #424]	; (8007720 <fw_nav+0x41c>)
 8007576:	2200      	movs	r2, #0
 8007578:	74da      	strb	r2, [r3, #19]
            GPS_hold[ALT] = GPS_home[ALT] + 5;  // Come down
 800757a:	4b6b      	ldr	r3, [pc, #428]	; (8007728 <fw_nav+0x424>)
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	3305      	adds	r3, #5
 8007580:	4a6a      	ldr	r2, [pc, #424]	; (800772c <fw_nav+0x428>)
 8007582:	6093      	str	r3, [r2, #8]
        }

        // Filtering of navDiff around home to stop nervous servos
        if (GPS_distanceToHome < 10)
 8007584:	4b67      	ldr	r3, [pc, #412]	; (8007724 <fw_nav+0x420>)
 8007586:	881b      	ldrh	r3, [r3, #0]
 8007588:	2b09      	cmp	r3, #9
 800758a:	d80e      	bhi.n	80075aa <fw_nav+0x2a6>
            navDiff *= 0.1f;
 800758c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007590:	ee07 3a90 	vmov	s15, r3
 8007594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007598:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8007730 <fw_nav+0x42c>
 800759c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80075a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075a4:	ee17 3a90 	vmov	r3, s15
 80075a8:	84bb      	strh	r3, [r7, #36]	; 0x24

        // Wrap Heading 180
        navDiff = wrap_18000(navDiff * 100) / 100;
 80075aa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80075ae:	2264      	movs	r2, #100	; 0x64
 80075b0:	fb02 f303 	mul.w	r3, r2, r3
 80075b4:	4618      	mov	r0, r3
 80075b6:	f002 fa21 	bl	80099fc <wrap_18000>
 80075ba:	4603      	mov	r3, r0
 80075bc:	4a5d      	ldr	r2, [pc, #372]	; (8007734 <fw_nav+0x430>)
 80075be:	fb82 1203 	smull	r1, r2, r2, r3
 80075c2:	1152      	asrs	r2, r2, #5
 80075c4:	17db      	asrs	r3, r3, #31
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (abs(navDiff) > 170)
 80075ca:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	bfb8      	it	lt
 80075d2:	425b      	neglt	r3, r3
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	2baa      	cmp	r3, #170	; 0xaa
 80075d8:	d901      	bls.n	80075de <fw_nav+0x2da>
            navDiff = 175;      // Forced turn.
 80075da:	23af      	movs	r3, #175	; 0xaf
 80075dc:	84bb      	strh	r3, [r7, #36]	; 0x24

        // PID for Navigating planes.
        navDT = (float) (pif_cumulative_timer1ms - nav_loopT) / 1000;
 80075de:	4b56      	ldr	r3, [pc, #344]	; (8007738 <fw_nav+0x434>)
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	4b56      	ldr	r3, [pc, #344]	; (800773c <fw_nav+0x438>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	ee07 3a90 	vmov	s15, r3
 80075ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80075f0:	eddf 6a53 	vldr	s13, [pc, #332]	; 8007740 <fw_nav+0x43c>
 80075f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075f8:	edc7 7a04 	vstr	s15, [r7, #16]
        nav_loopT = pif_cumulative_timer1ms;
 80075fc:	4b4e      	ldr	r3, [pc, #312]	; (8007738 <fw_nav+0x434>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a4e      	ldr	r2, [pc, #312]	; (800773c <fw_nav+0x438>)
 8007602:	6013      	str	r3, [r2, #0]

        // Altitude PID
        if (abs(GPS_AltErr) <= 3)
 8007604:	4b44      	ldr	r3, [pc, #272]	; (8007718 <fw_nav+0x414>)
 8007606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800760a:	2b00      	cmp	r3, #0
 800760c:	bfb8      	it	lt
 800760e:	425b      	neglt	r3, r3
 8007610:	b29b      	uxth	r3, r3
 8007612:	2b03      	cmp	r3, #3
 8007614:	d809      	bhi.n	800762a <fw_nav+0x326>
            altErrorI *= navDT; // Remove I-Term in deadspan
 8007616:	4b4b      	ldr	r3, [pc, #300]	; (8007744 <fw_nav+0x440>)
 8007618:	ed93 7a00 	vldr	s14, [r3]
 800761c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007624:	4b47      	ldr	r3, [pc, #284]	; (8007744 <fw_nav+0x440>)
 8007626:	edc3 7a00 	vstr	s15, [r3]

        GPS_AltErr *= 10;
 800762a:	4b3b      	ldr	r3, [pc, #236]	; (8007718 <fw_nav+0x414>)
 800762c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007630:	b29b      	uxth	r3, r3
 8007632:	461a      	mov	r2, r3
 8007634:	0092      	lsls	r2, r2, #2
 8007636:	4413      	add	r3, r2
 8007638:	005b      	lsls	r3, r3, #1
 800763a:	b29b      	uxth	r3, r3
 800763c:	b21a      	sxth	r2, r3
 800763e:	4b36      	ldr	r3, [pc, #216]	; (8007718 <fw_nav+0x414>)
 8007640:	801a      	strh	r2, [r3, #0]
        altErrorI += (GPS_AltErr * altPID_PARAM.kI) * navDT;    // Acumulate I from PIDPOSR
 8007642:	4b35      	ldr	r3, [pc, #212]	; (8007718 <fw_nav+0x414>)
 8007644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007648:	ee07 3a90 	vmov	s15, r3
 800764c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007650:	4b3d      	ldr	r3, [pc, #244]	; (8007748 <fw_nav+0x444>)
 8007652:	edd3 7a01 	vldr	s15, [r3, #4]
 8007656:	ee27 7a27 	vmul.f32	s14, s14, s15
 800765a:	edd7 7a04 	vldr	s15, [r7, #16]
 800765e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007662:	4b38      	ldr	r3, [pc, #224]	; (8007744 <fw_nav+0x440>)
 8007664:	edd3 7a00 	vldr	s15, [r3]
 8007668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800766c:	4b35      	ldr	r3, [pc, #212]	; (8007744 <fw_nav+0x440>)
 800766e:	edc3 7a00 	vstr	s15, [r3]
        altErrorI = constrain(altErrorI, -500, 500);            // limits I term influence
 8007672:	4b34      	ldr	r3, [pc, #208]	; (8007744 <fw_nav+0x440>)
 8007674:	edd3 7a00 	vldr	s15, [r3]
 8007678:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800767c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007680:	4932      	ldr	r1, [pc, #200]	; (800774c <fw_nav+0x448>)
 8007682:	ee17 0a90 	vmov	r0, s15
 8007686:	f7fc fba7 	bl	8003dd8 <constrain>
 800768a:	ee07 0a90 	vmov	s15, r0
 800768e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007692:	4b2c      	ldr	r3, [pc, #176]	; (8007744 <fw_nav+0x440>)
 8007694:	edc3 7a00 	vstr	s15, [r3]

        delta[0] = (GPS_AltErr - lastAltDiff);
 8007698:	4b1f      	ldr	r3, [pc, #124]	; (8007718 <fw_nav+0x414>)
 800769a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800769e:	b29a      	uxth	r2, r3
 80076a0:	4b2b      	ldr	r3, [pc, #172]	; (8007750 <fw_nav+0x44c>)
 80076a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	b21b      	sxth	r3, r3
 80076ae:	80bb      	strh	r3, [r7, #4]
        lastAltDiff = GPS_AltErr;
 80076b0:	4b19      	ldr	r3, [pc, #100]	; (8007718 <fw_nav+0x414>)
 80076b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80076b6:	4b26      	ldr	r3, [pc, #152]	; (8007750 <fw_nav+0x44c>)
 80076b8:	801a      	strh	r2, [r3, #0]
        if (abs(delta[0]) > 100)
 80076ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	bfb8      	it	lt
 80076c2:	425b      	neglt	r3, r3
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	2b64      	cmp	r3, #100	; 0x64
 80076c8:	d901      	bls.n	80076ce <fw_nav+0x3ca>
            delta[0] = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	80bb      	strh	r3, [r7, #4]

        for (i = 0; i < GPS_UPD_HZ; i++)
 80076ce:	2300      	movs	r3, #0
 80076d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076d4:	e00f      	b.n	80076f6 <fw_nav+0x3f2>
            altHist[i] = altHist[i + 1];
 80076d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076e0:	491c      	ldr	r1, [pc, #112]	; (8007754 <fw_nav+0x450>)
 80076e2:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80076e6:	4a1b      	ldr	r2, [pc, #108]	; (8007754 <fw_nav+0x450>)
 80076e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80076ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076f0:	3301      	adds	r3, #1
 80076f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076fa:	2b04      	cmp	r3, #4
 80076fc:	d9eb      	bls.n	80076d6 <fw_nav+0x3d2>

        altHist[GPS_UPD_HZ - 1] = delta[0];
 80076fe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007702:	4b14      	ldr	r3, [pc, #80]	; (8007754 <fw_nav+0x450>)
 8007704:	811a      	strh	r2, [r3, #8]

        // Store 1 sec history for D-term in shift register
        ALT_deltaSum = 0;       // Sum History
 8007706:	4b14      	ldr	r3, [pc, #80]	; (8007758 <fw_nav+0x454>)
 8007708:	2200      	movs	r2, #0
 800770a:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 800770c:	2300      	movs	r3, #0
 800770e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007712:	e037      	b.n	8007784 <fw_nav+0x480>
 8007714:	20000e08 	.word	0x20000e08
 8007718:	20000f72 	.word	0x20000f72
 800771c:	20000f78 	.word	0x20000f78
 8007720:	2000174c 	.word	0x2000174c
 8007724:	20001832 	.word	0x20001832
 8007728:	20001818 	.word	0x20001818
 800772c:	20001824 	.word	0x20001824
 8007730:	3dcccccd 	.word	0x3dcccccd
 8007734:	51eb851f 	.word	0x51eb851f
 8007738:	20001df8 	.word	0x20001df8
 800773c:	20000f7c 	.word	0x20000f7c
 8007740:	447a0000 	.word	0x447a0000
 8007744:	20000f4c 	.word	0x20000f4c
 8007748:	2000129c 	.word	0x2000129c
 800774c:	fffffe0c 	.word	0xfffffe0c
 8007750:	20000f50 	.word	0x20000f50
 8007754:	20000f58 	.word	0x20000f58
 8007758:	20000f80 	.word	0x20000f80
            ALT_deltaSum += altHist[i];
 800775c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007760:	4a64      	ldr	r2, [pc, #400]	; (80078f4 <fw_nav+0x5f0>)
 8007762:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8007766:	b29a      	uxth	r2, r3
 8007768:	4b63      	ldr	r3, [pc, #396]	; (80078f8 <fw_nav+0x5f4>)
 800776a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800776e:	b29b      	uxth	r3, r3
 8007770:	4413      	add	r3, r2
 8007772:	b29b      	uxth	r3, r3
 8007774:	b21a      	sxth	r2, r3
 8007776:	4b60      	ldr	r3, [pc, #384]	; (80078f8 <fw_nav+0x5f4>)
 8007778:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 800777a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800777e:	3301      	adds	r3, #1
 8007780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007784:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007788:	2b04      	cmp	r3, #4
 800778a:	d9e7      	bls.n	800775c <fw_nav+0x458>

        ALT_deltaSum = (ALT_deltaSum * altPID_PARAM.kD) / navDT;
 800778c:	4b5a      	ldr	r3, [pc, #360]	; (80078f8 <fw_nav+0x5f4>)
 800778e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007792:	ee07 3a90 	vmov	s15, r3
 8007796:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800779a:	4b58      	ldr	r3, [pc, #352]	; (80078fc <fw_nav+0x5f8>)
 800779c:	edd3 7a02 	vldr	s15, [r3, #8]
 80077a0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80077a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80077a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077b0:	ee17 3a90 	vmov	r3, s15
 80077b4:	b21a      	sxth	r2, r3
 80077b6:	4b50      	ldr	r3, [pc, #320]	; (80078f8 <fw_nav+0x5f4>)
 80077b8:	801a      	strh	r2, [r3, #0]
        altDiff = GPS_AltErr * altPID_PARAM.kP; // Add P in Elevator compensation.
 80077ba:	4b51      	ldr	r3, [pc, #324]	; (8007900 <fw_nav+0x5fc>)
 80077bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077c0:	ee07 3a90 	vmov	s15, r3
 80077c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077c8:	4b4c      	ldr	r3, [pc, #304]	; (80078fc <fw_nav+0x5f8>)
 80077ca:	edd3 7a00 	vldr	s15, [r3]
 80077ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077d6:	ee17 3a90 	vmov	r3, s15
 80077da:	83fb      	strh	r3, [r7, #30]
        altDiff += (altErrorI); // Add I
 80077dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80077e0:	ee07 3a90 	vmov	s15, r3
 80077e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077e8:	4b46      	ldr	r3, [pc, #280]	; (8007904 <fw_nav+0x600>)
 80077ea:	edd3 7a00 	vldr	s15, [r3]
 80077ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077f6:	ee17 3a90 	vmov	r3, s15
 80077fa:	83fb      	strh	r3, [r7, #30]

        // Start of NavPID
        if (abs(navDiff) <= 3)
 80077fc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007800:	2b00      	cmp	r3, #0
 8007802:	bfb8      	it	lt
 8007804:	425b      	neglt	r3, r3
 8007806:	b29b      	uxth	r3, r3
 8007808:	2b03      	cmp	r3, #3
 800780a:	d809      	bhi.n	8007820 <fw_nav+0x51c>
            navErrorI *= navDT; // Remove I-Term in deadspan
 800780c:	4b3e      	ldr	r3, [pc, #248]	; (8007908 <fw_nav+0x604>)
 800780e:	ed93 7a00 	vldr	s14, [r3]
 8007812:	edd7 7a04 	vldr	s15, [r7, #16]
 8007816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800781a:	4b3b      	ldr	r3, [pc, #236]	; (8007908 <fw_nav+0x604>)
 800781c:	edc3 7a00 	vstr	s15, [r3]

        navDiff *= 10;
 8007820:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007822:	461a      	mov	r2, r3
 8007824:	0092      	lsls	r2, r2, #2
 8007826:	4413      	add	r3, r2
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	b29b      	uxth	r3, r3
 800782c:	84bb      	strh	r3, [r7, #36]	; 0x24

        navErrorI += (navDiff * navPID_PARAM.kI) * navDT;
 800782e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007832:	ee07 3a90 	vmov	s15, r3
 8007836:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800783a:	4b34      	ldr	r3, [pc, #208]	; (800790c <fw_nav+0x608>)
 800783c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007840:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007844:	edd7 7a04 	vldr	s15, [r7, #16]
 8007848:	ee27 7a27 	vmul.f32	s14, s14, s15
 800784c:	4b2e      	ldr	r3, [pc, #184]	; (8007908 <fw_nav+0x604>)
 800784e:	edd3 7a00 	vldr	s15, [r3]
 8007852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007856:	4b2c      	ldr	r3, [pc, #176]	; (8007908 <fw_nav+0x604>)
 8007858:	edc3 7a00 	vstr	s15, [r3]
        navErrorI = constrain(navErrorI, -500, 500);
 800785c:	4b2a      	ldr	r3, [pc, #168]	; (8007908 <fw_nav+0x604>)
 800785e:	edd3 7a00 	vldr	s15, [r3]
 8007862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007866:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800786a:	4929      	ldr	r1, [pc, #164]	; (8007910 <fw_nav+0x60c>)
 800786c:	ee17 0a90 	vmov	r0, s15
 8007870:	f7fc fab2 	bl	8003dd8 <constrain>
 8007874:	ee07 0a90 	vmov	s15, r0
 8007878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800787c:	4b22      	ldr	r3, [pc, #136]	; (8007908 <fw_nav+0x604>)
 800787e:	edc3 7a00 	vstr	s15, [r3]

        delta[1] = (navDiff - lastnavDiff);
 8007882:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007884:	4b23      	ldr	r3, [pc, #140]	; (8007914 <fw_nav+0x610>)
 8007886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800788a:	b29b      	uxth	r3, r3
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	b29b      	uxth	r3, r3
 8007890:	b21b      	sxth	r3, r3
 8007892:	80fb      	strh	r3, [r7, #6]
        lastnavDiff = navDiff;
 8007894:	4a1f      	ldr	r2, [pc, #124]	; (8007914 <fw_nav+0x610>)
 8007896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007898:	8013      	strh	r3, [r2, #0]

        if (abs(delta[1]) > 100)
 800789a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	bfb8      	it	lt
 80078a2:	425b      	neglt	r3, r3
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2b64      	cmp	r3, #100	; 0x64
 80078a8:	d901      	bls.n	80078ae <fw_nav+0x5aa>
            delta[1] = 0;
 80078aa:	2300      	movs	r3, #0
 80078ac:	80fb      	strh	r3, [r7, #6]

        // Store 1 sec history for D-term in shift register
        for (i = 0; i < GPS_UPD_HZ; i++)
 80078ae:	2300      	movs	r3, #0
 80078b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078b4:	e00f      	b.n	80078d6 <fw_nav+0x5d2>
            navDif[i] = navDif[i + 1];
 80078b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078c0:	4915      	ldr	r1, [pc, #84]	; (8007918 <fw_nav+0x614>)
 80078c2:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80078c6:	4a14      	ldr	r2, [pc, #80]	; (8007918 <fw_nav+0x614>)
 80078c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80078cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078d0:	3301      	adds	r3, #1
 80078d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078da:	2b04      	cmp	r3, #4
 80078dc:	d9eb      	bls.n	80078b6 <fw_nav+0x5b2>

        navDif[GPS_UPD_HZ - 1] = delta[1];
 80078de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80078e2:	4b0d      	ldr	r3, [pc, #52]	; (8007918 <fw_nav+0x614>)
 80078e4:	811a      	strh	r2, [r3, #8]

        NAV_deltaSum = 0;       // Sum History
 80078e6:	4b0d      	ldr	r3, [pc, #52]	; (800791c <fw_nav+0x618>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80078ec:	2300      	movs	r3, #0
 80078ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078f2:	e029      	b.n	8007948 <fw_nav+0x644>
 80078f4:	20000f58 	.word	0x20000f58
 80078f8:	20000f80 	.word	0x20000f80
 80078fc:	2000129c 	.word	0x2000129c
 8007900:	20000f72 	.word	0x20000f72
 8007904:	20000f4c 	.word	0x20000f4c
 8007908:	20000f48 	.word	0x20000f48
 800790c:	2000128c 	.word	0x2000128c
 8007910:	fffffe0c 	.word	0xfffffe0c
 8007914:	20000f52 	.word	0x20000f52
 8007918:	20000f64 	.word	0x20000f64
 800791c:	20000f82 	.word	0x20000f82
            NAV_deltaSum += navDif[i];
 8007920:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007924:	4abc      	ldr	r2, [pc, #752]	; (8007c18 <fw_nav+0x914>)
 8007926:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800792a:	b29a      	uxth	r2, r3
 800792c:	4bbb      	ldr	r3, [pc, #748]	; (8007c1c <fw_nav+0x918>)
 800792e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007932:	b29b      	uxth	r3, r3
 8007934:	4413      	add	r3, r2
 8007936:	b29b      	uxth	r3, r3
 8007938:	b21a      	sxth	r2, r3
 800793a:	4bb8      	ldr	r3, [pc, #736]	; (8007c1c <fw_nav+0x918>)
 800793c:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 800793e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007942:	3301      	adds	r3, #1
 8007944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007948:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800794c:	2b04      	cmp	r3, #4
 800794e:	d9e7      	bls.n	8007920 <fw_nav+0x61c>

        NAV_deltaSum = (NAV_deltaSum * navPID_PARAM.kD) / navDT;    // Add D
 8007950:	4bb2      	ldr	r3, [pc, #712]	; (8007c1c <fw_nav+0x918>)
 8007952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007956:	ee07 3a90 	vmov	s15, r3
 800795a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800795e:	4bb0      	ldr	r3, [pc, #704]	; (8007c20 <fw_nav+0x91c>)
 8007960:	edd3 7a02 	vldr	s15, [r3, #8]
 8007964:	ee67 6a27 	vmul.f32	s13, s14, s15
 8007968:	ed97 7a04 	vldr	s14, [r7, #16]
 800796c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007970:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007974:	ee17 3a90 	vmov	r3, s15
 8007978:	b21a      	sxth	r2, r3
 800797a:	4ba8      	ldr	r3, [pc, #672]	; (8007c1c <fw_nav+0x918>)
 800797c:	801a      	strh	r2, [r3, #0]

        navDiff *= navPID_PARAM.kP;                                 // Add P
 800797e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007982:	ee07 3a90 	vmov	s15, r3
 8007986:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800798a:	4ba5      	ldr	r3, [pc, #660]	; (8007c20 <fw_nav+0x91c>)
 800798c:	edd3 7a00 	vldr	s15, [r3]
 8007990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007998:	ee17 3a90 	vmov	r3, s15
 800799c:	84bb      	strh	r3, [r7, #36]	; 0x24
        navDiff += navErrorI;                                       // Add I
 800799e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80079a2:	ee07 3a90 	vmov	s15, r3
 80079a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80079aa:	4b9e      	ldr	r3, [pc, #632]	; (8007c24 <fw_nav+0x920>)
 80079ac:	edd3 7a00 	vldr	s15, [r3]
 80079b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079b8:	ee17 3a90 	vmov	r3, s15
 80079bc:	84bb      	strh	r3, [r7, #36]	; 0x24
        // End of NavPID

        // Limit outputs
        GPS_angle[PITCH] = constrain(altDiff / 10, -cfg.fw_gps_maxclimb * 10, cfg.fw_gps_maxdive * 10) + ALT_deltaSum;
 80079be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80079c2:	4a99      	ldr	r2, [pc, #612]	; (8007c28 <fw_nav+0x924>)
 80079c4:	fb82 1203 	smull	r1, r2, r2, r3
 80079c8:	1092      	asrs	r2, r2, #2
 80079ca:	17db      	asrs	r3, r3, #31
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	b21b      	sxth	r3, r3
 80079d0:	4618      	mov	r0, r3
 80079d2:	4b96      	ldr	r3, [pc, #600]	; (8007c2c <fw_nav+0x928>)
 80079d4:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80079d8:	461a      	mov	r2, r3
 80079da:	f06f 0309 	mvn.w	r3, #9
 80079de:	fb03 f102 	mul.w	r1, r3, r2
 80079e2:	4b92      	ldr	r3, [pc, #584]	; (8007c2c <fw_nav+0x928>)
 80079e4:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 80079e8:	461a      	mov	r2, r3
 80079ea:	4613      	mov	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	005b      	lsls	r3, r3, #1
 80079f2:	461a      	mov	r2, r3
 80079f4:	f7fc f9f0 	bl	8003dd8 <constrain>
 80079f8:	4603      	mov	r3, r0
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	4b8c      	ldr	r3, [pc, #560]	; (8007c30 <fw_nav+0x92c>)
 80079fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	4413      	add	r3, r2
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	b21a      	sxth	r2, r3
 8007a0a:	4b8a      	ldr	r3, [pc, #552]	; (8007c34 <fw_nav+0x930>)
 8007a0c:	805a      	strh	r2, [r3, #2]
        GPS_angle[ROLL] = constrain(navDiff / 10, -cfg.fw_gps_maxcorr * 10, cfg.fw_gps_maxcorr * 10) + NAV_deltaSum;
 8007a0e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007a12:	4a85      	ldr	r2, [pc, #532]	; (8007c28 <fw_nav+0x924>)
 8007a14:	fb82 1203 	smull	r1, r2, r2, r3
 8007a18:	1092      	asrs	r2, r2, #2
 8007a1a:	17db      	asrs	r3, r3, #31
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	b21b      	sxth	r3, r3
 8007a20:	4618      	mov	r0, r3
 8007a22:	4b82      	ldr	r3, [pc, #520]	; (8007c2c <fw_nav+0x928>)
 8007a24:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 8007a28:	461a      	mov	r2, r3
 8007a2a:	f06f 0309 	mvn.w	r3, #9
 8007a2e:	fb03 f102 	mul.w	r1, r3, r2
 8007a32:	4b7e      	ldr	r3, [pc, #504]	; (8007c2c <fw_nav+0x928>)
 8007a34:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 8007a38:	461a      	mov	r2, r3
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	005b      	lsls	r3, r3, #1
 8007a42:	461a      	mov	r2, r3
 8007a44:	f7fc f9c8 	bl	8003dd8 <constrain>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	4b73      	ldr	r3, [pc, #460]	; (8007c1c <fw_nav+0x918>)
 8007a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	4413      	add	r3, r2
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	b21a      	sxth	r2, r3
 8007a5a:	4b76      	ldr	r3, [pc, #472]	; (8007c34 <fw_nav+0x930>)
 8007a5c:	801a      	strh	r2, [r3, #0]
        GPS_angle[YAW] = constrain(navDiff / 10, -cfg.fw_gps_rudder * 10, cfg.fw_gps_rudder * 10) + NAV_deltaSum;
 8007a5e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007a62:	4a71      	ldr	r2, [pc, #452]	; (8007c28 <fw_nav+0x924>)
 8007a64:	fb82 1203 	smull	r1, r2, r2, r3
 8007a68:	1092      	asrs	r2, r2, #2
 8007a6a:	17db      	asrs	r3, r3, #31
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	b21b      	sxth	r3, r3
 8007a70:	4618      	mov	r0, r3
 8007a72:	4b6e      	ldr	r3, [pc, #440]	; (8007c2c <fw_nav+0x928>)
 8007a74:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 8007a78:	461a      	mov	r2, r3
 8007a7a:	f06f 0309 	mvn.w	r3, #9
 8007a7e:	fb03 f102 	mul.w	r1, r3, r2
 8007a82:	4b6a      	ldr	r3, [pc, #424]	; (8007c2c <fw_nav+0x928>)
 8007a84:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 8007a88:	461a      	mov	r2, r3
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	005b      	lsls	r3, r3, #1
 8007a92:	461a      	mov	r2, r3
 8007a94:	f7fc f9a0 	bl	8003dd8 <constrain>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	4b5f      	ldr	r3, [pc, #380]	; (8007c1c <fw_nav+0x918>)
 8007a9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	4413      	add	r3, r2
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	b21a      	sxth	r2, r3
 8007aaa:	4b62      	ldr	r3, [pc, #392]	; (8007c34 <fw_nav+0x930>)
 8007aac:	809a      	strh	r2, [r3, #4]

        // Elevator compensation depending on behaviour.
        // Prevent stall with Disarmed motor
        if (f.MOTORS_STOPPED)
 8007aae:	4b62      	ldr	r3, [pc, #392]	; (8007c38 <fw_nav+0x934>)
 8007ab0:	7c5b      	ldrb	r3, [r3, #17]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d016      	beq.n	8007ae4 <fw_nav+0x7e0>
            GPS_angle[PITCH] = constrain(GPS_angle[PITCH], -cfg.fw_glide_angle, cfg.fw_gps_maxdive * 10);
 8007ab6:	4b5f      	ldr	r3, [pc, #380]	; (8007c34 <fw_nav+0x930>)
 8007ab8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007abc:	4618      	mov	r0, r3
 8007abe:	4b5b      	ldr	r3, [pc, #364]	; (8007c2c <fw_nav+0x928>)
 8007ac0:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8007ac4:	4259      	negs	r1, r3
 8007ac6:	4b59      	ldr	r3, [pc, #356]	; (8007c2c <fw_nav+0x928>)
 8007ac8:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 8007acc:	461a      	mov	r2, r3
 8007ace:	4613      	mov	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	005b      	lsls	r3, r3, #1
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	f7fc f97e 	bl	8003dd8 <constrain>
 8007adc:	4603      	mov	r3, r0
 8007ade:	b21a      	sxth	r2, r3
 8007ae0:	4b54      	ldr	r3, [pc, #336]	; (8007c34 <fw_nav+0x930>)
 8007ae2:	805a      	strh	r2, [r3, #2]

        // Add elevator compared with rollAngle
        if (!f.CLIMBOUT_FW)
 8007ae4:	4b54      	ldr	r3, [pc, #336]	; (8007c38 <fw_nav+0x934>)
 8007ae6:	7cdb      	ldrb	r3, [r3, #19]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d11b      	bne.n	8007b24 <fw_nav+0x820>
            GPS_angle[PITCH] -= (abs(angle[ROLL]) * (cfg.fw_roll_comp / 100));
 8007aec:	4b51      	ldr	r3, [pc, #324]	; (8007c34 <fw_nav+0x930>)
 8007aee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	4b51      	ldr	r3, [pc, #324]	; (8007c3c <fw_nav+0x938>)
 8007af6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	bfb8      	it	lt
 8007afe:	425b      	neglt	r3, r3
 8007b00:	b299      	uxth	r1, r3
 8007b02:	4b4a      	ldr	r3, [pc, #296]	; (8007c2c <fw_nav+0x928>)
 8007b04:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8007b08:	484d      	ldr	r0, [pc, #308]	; (8007c40 <fw_nav+0x93c>)
 8007b0a:	fba0 0303 	umull	r0, r3, r0, r3
 8007b0e:	095b      	lsrs	r3, r3, #5
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	fb11 f303 	smulbb	r3, r1, r3
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	b21a      	sxth	r2, r3
 8007b20:	4b44      	ldr	r3, [pc, #272]	; (8007c34 <fw_nav+0x930>)
 8007b22:	805a      	strh	r2, [r3, #2]

        // Throttle compensation depending on behaviour.
        // Compensate throttle with pitch Angle
        NAV_Thro -= constrain(angle[PITCH] * PITCH_COMP, 0, 450);
 8007b24:	4b45      	ldr	r3, [pc, #276]	; (8007c3c <fw_nav+0x938>)
 8007b26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007b2a:	ee07 3a90 	vmov	s15, r3
 8007b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007b36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b3e:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8007b42:	2100      	movs	r1, #0
 8007b44:	ee17 0a90 	vmov	r0, s15
 8007b48:	f7fc f946 	bl	8003dd8 <constrain>
 8007b4c:	4601      	mov	r1, r0
 8007b4e:	4b3d      	ldr	r3, [pc, #244]	; (8007c44 <fw_nav+0x940>)
 8007b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	b28b      	uxth	r3, r1
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	b21a      	sxth	r2, r3
 8007b5e:	4b39      	ldr	r3, [pc, #228]	; (8007c44 <fw_nav+0x940>)
 8007b60:	801a      	strh	r2, [r3, #0]

        // Force the Plane move forward in headwind with speedBoost
        groundSpeed = GPS_speed;
 8007b62:	4b39      	ldr	r3, [pc, #228]	; (8007c48 <fw_nav+0x944>)
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	81fb      	strh	r3, [r7, #14]
        spDiff = (GPS_MINSPEED - groundSpeed) * I_TERM;
 8007b68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b6c:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8007b70:	ee07 3a90 	vmov	s15, r3
 8007b74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b78:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007c4c <fw_nav+0x948>
 8007b7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b84:	ee17 3a90 	vmov	r3, s15
 8007b88:	60bb      	str	r3, [r7, #8]

        if (GPS_speed < GPS_MINSPEED - 50 || GPS_speed > GPS_MINSPEED + 50)
 8007b8a:	4b2f      	ldr	r3, [pc, #188]	; (8007c48 <fw_nav+0x944>)
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8007b92:	d305      	bcc.n	8007ba0 <fw_nav+0x89c>
 8007b94:	4b2c      	ldr	r3, [pc, #176]	; (8007c48 <fw_nav+0x944>)
 8007b96:	881b      	ldrh	r3, [r3, #0]
 8007b98:	f240 2226 	movw	r2, #550	; 0x226
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d90a      	bls.n	8007bb6 <fw_nav+0x8b2>
            speedBoost += spDiff;
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	4b2a      	ldr	r3, [pc, #168]	; (8007c50 <fw_nav+0x94c>)
 8007ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	4413      	add	r3, r2
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	b21a      	sxth	r2, r3
 8007bb2:	4b27      	ldr	r3, [pc, #156]	; (8007c50 <fw_nav+0x94c>)
 8007bb4:	801a      	strh	r2, [r3, #0]

        speedBoost = constrain(speedBoost, 0, 500);
 8007bb6:	4b26      	ldr	r3, [pc, #152]	; (8007c50 <fw_nav+0x94c>)
 8007bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bbc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fc f908 	bl	8003dd8 <constrain>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	b21a      	sxth	r2, r3
 8007bcc:	4b20      	ldr	r3, [pc, #128]	; (8007c50 <fw_nav+0x94c>)
 8007bce:	801a      	strh	r2, [r3, #0]
        NAV_Thro += speedBoost;
 8007bd0:	4b1c      	ldr	r3, [pc, #112]	; (8007c44 <fw_nav+0x940>)
 8007bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	4b1d      	ldr	r3, [pc, #116]	; (8007c50 <fw_nav+0x94c>)
 8007bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	4413      	add	r3, r2
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	b21a      	sxth	r2, r3
 8007be6:	4b17      	ldr	r3, [pc, #92]	; (8007c44 <fw_nav+0x940>)
 8007be8:	801a      	strh	r2, [r3, #0]

        // constrain throttle to Max climb.
        NAV_Thro = constrain(NAV_Thro, cfg.fw_idle_throttle, cfg.fw_climb_throttle);
 8007bea:	4b16      	ldr	r3, [pc, #88]	; (8007c44 <fw_nav+0x940>)
 8007bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	4b0e      	ldr	r3, [pc, #56]	; (8007c2c <fw_nav+0x928>)
 8007bf4:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	4b0c      	ldr	r3, [pc, #48]	; (8007c2c <fw_nav+0x928>)
 8007bfc:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8007c00:	461a      	mov	r2, r3
 8007c02:	f7fc f8e9 	bl	8003dd8 <constrain>
 8007c06:	4603      	mov	r3, r0
 8007c08:	b21a      	sxth	r2, r3
 8007c0a:	4b0e      	ldr	r3, [pc, #56]	; (8007c44 <fw_nav+0x940>)
 8007c0c:	801a      	strh	r2, [r3, #0]
    }
    // End of NavTimer

    // PassThru for throttle In AcroMode
    if ((!f.ANGLE_MODE && !f.HORIZON_MODE) || (f.PASSTHRU_MODE && !f.FW_FAILSAFE_RTH_ENABLE)) {
 8007c0e:	4b0a      	ldr	r3, [pc, #40]	; (8007c38 <fw_nav+0x934>)
 8007c10:	78db      	ldrb	r3, [r3, #3]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d122      	bne.n	8007c5c <fw_nav+0x958>
 8007c16:	e01d      	b.n	8007c54 <fw_nav+0x950>
 8007c18:	20000f64 	.word	0x20000f64
 8007c1c:	20000f82 	.word	0x20000f82
 8007c20:	2000128c 	.word	0x2000128c
 8007c24:	20000f48 	.word	0x20000f48
 8007c28:	66666667 	.word	0x66666667
 8007c2c:	20000e08 	.word	0x20000e08
 8007c30:	20000f80 	.word	0x20000f80
 8007c34:	2000183c 	.word	0x2000183c
 8007c38:	2000174c 	.word	0x2000174c
 8007c3c:	200014f4 	.word	0x200014f4
 8007c40:	51eb851f 	.word	0x51eb851f
 8007c44:	20000f78 	.word	0x20000f78
 8007c48:	20001838 	.word	0x20001838
 8007c4c:	3dcccccd 	.word	0x3dcccccd
 8007c50:	20000f54 	.word	0x20000f54
 8007c54:	4b16      	ldr	r3, [pc, #88]	; (8007cb0 <fw_nav+0x9ac>)
 8007c56:	791b      	ldrb	r3, [r3, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d007      	beq.n	8007c6c <fw_nav+0x968>
 8007c5c:	4b14      	ldr	r3, [pc, #80]	; (8007cb0 <fw_nav+0x9ac>)
 8007c5e:	7a9b      	ldrb	r3, [r3, #10]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00f      	beq.n	8007c84 <fw_nav+0x980>
 8007c64:	4b12      	ldr	r3, [pc, #72]	; (8007cb0 <fw_nav+0x9ac>)
 8007c66:	7c9b      	ldrb	r3, [r3, #18]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10b      	bne.n	8007c84 <fw_nav+0x980>
        NAV_Thro = TX_Thro;
 8007c6c:	4a11      	ldr	r2, [pc, #68]	; (8007cb4 <fw_nav+0x9b0>)
 8007c6e:	8b7b      	ldrh	r3, [r7, #26]
 8007c70:	8013      	strh	r3, [r2, #0]
        GPS_angle[PITCH] = 0;
 8007c72:	4b11      	ldr	r3, [pc, #68]	; (8007cb8 <fw_nav+0x9b4>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	805a      	strh	r2, [r3, #2]
        GPS_angle[ROLL] = 0;
 8007c78:	4b0f      	ldr	r3, [pc, #60]	; (8007cb8 <fw_nav+0x9b4>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	801a      	strh	r2, [r3, #0]
        GPS_angle[YAW] = 0;
 8007c7e:	4b0e      	ldr	r3, [pc, #56]	; (8007cb8 <fw_nav+0x9b4>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	809a      	strh	r2, [r3, #4]
    }
    rcCommand[THROTTLE] = NAV_Thro;
 8007c84:	4b0b      	ldr	r3, [pc, #44]	; (8007cb4 <fw_nav+0x9b0>)
 8007c86:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007c8a:	4b0c      	ldr	r3, [pc, #48]	; (8007cbc <fw_nav+0x9b8>)
 8007c8c:	80da      	strh	r2, [r3, #6]
    rcCommand[YAW] += GPS_angle[YAW];
 8007c8e:	4b0b      	ldr	r3, [pc, #44]	; (8007cbc <fw_nav+0x9b8>)
 8007c90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	4b08      	ldr	r3, [pc, #32]	; (8007cb8 <fw_nav+0x9b4>)
 8007c98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	4413      	add	r3, r2
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	b21a      	sxth	r2, r3
 8007ca4:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <fw_nav+0x9b8>)
 8007ca6:	809a      	strh	r2, [r3, #4]
}
 8007ca8:	bf00      	nop
 8007caa:	3728      	adds	r7, #40	; 0x28
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	2000174c 	.word	0x2000174c
 8007cb4:	20000f78 	.word	0x20000f78
 8007cb8:	2000183c 	.word	0x2000183c
 8007cbc:	200017a8 	.word	0x200017a8

08007cc0 <gpsSetState>:
static PifGpsUblox gps_ublox;
static uint8_t gps_receive = 0;


static void gpsSetState(uint8_t state)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	71fb      	strb	r3, [r7, #7]
    gpsData.state = state;
 8007cca:	4a0b      	ldr	r2, [pc, #44]	; (8007cf8 <gpsSetState+0x38>)
 8007ccc:	79fb      	ldrb	r3, [r7, #7]
 8007cce:	7013      	strb	r3, [r2, #0]
    gpsData.state_position = 0;
 8007cd0:	4b09      	ldr	r3, [pc, #36]	; (8007cf8 <gpsSetState+0x38>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	611a      	str	r2, [r3, #16]
    gpsData.state_ts = pif_cumulative_timer1ms;
 8007cd6:	4b09      	ldr	r3, [pc, #36]	; (8007cfc <gpsSetState+0x3c>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a07      	ldr	r2, [pc, #28]	; (8007cf8 <gpsSetState+0x38>)
 8007cdc:	6153      	str	r3, [r2, #20]
    gpsData.step = 0;
 8007cde:	4b06      	ldr	r3, [pc, #24]	; (8007cf8 <gpsSetState+0x38>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	60da      	str	r2, [r3, #12]
    gpsData.receive = FALSE;
 8007ce4:	4b04      	ldr	r3, [pc, #16]	; (8007cf8 <gpsSetState+0x38>)
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	761a      	strb	r2, [r3, #24]
}
 8007cea:	bf00      	nop
 8007cec:	370c      	adds	r7, #12
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	20000f84 	.word	0x20000f84
 8007cfc:	20001df8 	.word	0x20001df8

08007d00 <_evtGpsNmeaReceive>:

static BOOL _evtGpsNmeaReceive(PifGps *p_owner, PifGpsNmeaMsgId msg_id)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	70fb      	strb	r3, [r7, #3]
	switch (msg_id) {
 8007d0c:	78fb      	ldrb	r3, [r7, #3]
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d002      	beq.n	8007d18 <_evtGpsNmeaReceive+0x18>
 8007d12:	2b0a      	cmp	r3, #10
 8007d14:	d047      	beq.n	8007da6 <_evtGpsNmeaReceive+0xa6>
 8007d16:	e072      	b.n	8007dfe <_evtGpsNmeaReceive+0xfe>
	case PIF_GPS_NMEA_MSG_ID_GGA:
	    f.GPS_FIX = p_owner->_fix;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	461a      	mov	r2, r3
 8007d26:	4b40      	ldr	r3, [pc, #256]	; (8007e28 <_evtGpsNmeaReceive+0x128>)
 8007d28:	72da      	strb	r2, [r3, #11]
	    if (f.GPS_FIX) {
 8007d2a:	4b3f      	ldr	r3, [pc, #252]	; (8007e28 <_evtGpsNmeaReceive+0x128>)
 8007d2c:	7adb      	ldrb	r3, [r3, #11]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d031      	beq.n	8007d96 <_evtGpsNmeaReceive+0x96>
	        GPS_coord[LAT] = p_owner->_coord_deg[PIF_GPS_LAT] * 10000000UL;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007d38:	a339      	add	r3, pc, #228	; (adr r3, 8007e20 <_evtGpsNmeaReceive+0x120>)
 8007d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3e:	f7f8 fc0f 	bl	8000560 <__aeabi_dmul>
 8007d42:	4602      	mov	r2, r0
 8007d44:	460b      	mov	r3, r1
 8007d46:	4610      	mov	r0, r2
 8007d48:	4619      	mov	r1, r3
 8007d4a:	f7f8 fea3 	bl	8000a94 <__aeabi_d2iz>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	4a36      	ldr	r2, [pc, #216]	; (8007e2c <_evtGpsNmeaReceive+0x12c>)
 8007d52:	6013      	str	r3, [r2, #0]
	        GPS_coord[LON] = p_owner->_coord_deg[PIF_GPS_LON] * 10000000UL;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007d5a:	a331      	add	r3, pc, #196	; (adr r3, 8007e20 <_evtGpsNmeaReceive+0x120>)
 8007d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d60:	f7f8 fbfe 	bl	8000560 <__aeabi_dmul>
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	4610      	mov	r0, r2
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	f7f8 fe92 	bl	8000a94 <__aeabi_d2iz>
 8007d70:	4603      	mov	r3, r0
 8007d72:	4a2e      	ldr	r2, [pc, #184]	; (8007e2c <_evtGpsNmeaReceive+0x12c>)
 8007d74:	6053      	str	r3, [r2, #4]
	        GPS_numSat = p_owner->_num_sat;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8007d7c:	4b2c      	ldr	r3, [pc, #176]	; (8007e30 <_evtGpsNmeaReceive+0x130>)
 8007d7e:	701a      	strb	r2, [r3, #0]
	        GPS_altitude = p_owner->_altitude;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007d86:	4610      	mov	r0, r2
 8007d88:	4619      	mov	r1, r3
 8007d8a:	f7f8 feab 	bl	8000ae4 <__aeabi_d2uiz>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	4b28      	ldr	r3, [pc, #160]	; (8007e34 <_evtGpsNmeaReceive+0x134>)
 8007d94:	801a      	strh	r2, [r3, #0]
	    }
	    gps_receive |= 1;
 8007d96:	4b28      	ldr	r3, [pc, #160]	; (8007e38 <_evtGpsNmeaReceive+0x138>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	f043 0301 	orr.w	r3, r3, #1
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	4b25      	ldr	r3, [pc, #148]	; (8007e38 <_evtGpsNmeaReceive+0x138>)
 8007da2:	701a      	strb	r2, [r3, #0]
		break;
 8007da4:	e02b      	b.n	8007dfe <_evtGpsNmeaReceive+0xfe>

	case PIF_GPS_NMEA_MSG_ID_RMC:
	    GPS_speed = (uint16_t)(p_owner->_ground_speed / 10);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007dac:	f04f 0200 	mov.w	r2, #0
 8007db0:	4b22      	ldr	r3, [pc, #136]	; (8007e3c <_evtGpsNmeaReceive+0x13c>)
 8007db2:	f7f8 fcff 	bl	80007b4 <__aeabi_ddiv>
 8007db6:	4602      	mov	r2, r0
 8007db8:	460b      	mov	r3, r1
 8007dba:	4610      	mov	r0, r2
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	f7f8 fe91 	bl	8000ae4 <__aeabi_d2uiz>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	4b1e      	ldr	r3, [pc, #120]	; (8007e40 <_evtGpsNmeaReceive+0x140>)
 8007dc8:	801a      	strh	r2, [r3, #0]
	    GPS_ground_course = (uint16_t)(p_owner->_ground_course * 10);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007dd0:	f04f 0200 	mov.w	r2, #0
 8007dd4:	4b19      	ldr	r3, [pc, #100]	; (8007e3c <_evtGpsNmeaReceive+0x13c>)
 8007dd6:	f7f8 fbc3 	bl	8000560 <__aeabi_dmul>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4610      	mov	r0, r2
 8007de0:	4619      	mov	r1, r3
 8007de2:	f7f8 fe7f 	bl	8000ae4 <__aeabi_d2uiz>
 8007de6:	4603      	mov	r3, r0
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	4b16      	ldr	r3, [pc, #88]	; (8007e44 <_evtGpsNmeaReceive+0x144>)
 8007dec:	801a      	strh	r2, [r3, #0]
	    gps_receive |= 2;
 8007dee:	4b12      	ldr	r3, [pc, #72]	; (8007e38 <_evtGpsNmeaReceive+0x138>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	f043 0302 	orr.w	r3, r3, #2
 8007df6:	b2da      	uxtb	r2, r3
 8007df8:	4b0f      	ldr	r3, [pc, #60]	; (8007e38 <_evtGpsNmeaReceive+0x138>)
 8007dfa:	701a      	strb	r2, [r3, #0]
		break;
 8007dfc:	bf00      	nop
	}
	if (gps_receive != 3) return FALSE;
 8007dfe:	4b0e      	ldr	r3, [pc, #56]	; (8007e38 <_evtGpsNmeaReceive+0x138>)
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	d001      	beq.n	8007e0a <_evtGpsNmeaReceive+0x10a>
 8007e06:	2300      	movs	r3, #0
 8007e08:	e003      	b.n	8007e12 <_evtGpsNmeaReceive+0x112>

	gps_receive = 0;
 8007e0a:	4b0b      	ldr	r3, [pc, #44]	; (8007e38 <_evtGpsNmeaReceive+0x138>)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8007e10:	2301      	movs	r3, #1
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	f3af 8000 	nop.w
 8007e20:	00000000 	.word	0x00000000
 8007e24:	416312d0 	.word	0x416312d0
 8007e28:	2000174c 	.word	0x2000174c
 8007e2c:	20001810 	.word	0x20001810
 8007e30:	20001830 	.word	0x20001830
 8007e34:	20001836 	.word	0x20001836
 8007e38:	20001268 	.word	0x20001268
 8007e3c:	40240000 	.word	0x40240000
 8007e40:	20001838 	.word	0x20001838
 8007e44:	20001842 	.word	0x20001842

08007e48 <_evtGpsUbxReceive>:

static BOOL _evtGpsUbxReceive(PifGpsUblox* p_owner, PifGpsUbxPacket* p_packet)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
	PifGps* p_parent = &p_owner->_gps;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	3308      	adds	r3, #8
 8007e56:	60fb      	str	r3, [r7, #12]

    switch (p_packet->class_id) {
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d013      	beq.n	8007e88 <_evtGpsUbxReceive+0x40>
 8007e60:	2b05      	cmp	r3, #5
 8007e62:	f040 8095 	bne.w	8007f90 <_evtGpsUbxReceive+0x148>
	case GUCI_ACK:
		switch (p_packet->msg_id) {
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	785b      	ldrb	r3, [r3, #1]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d007      	beq.n	8007e7e <_evtGpsUbxReceive+0x36>
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	f040 808d 	bne.w	8007f8e <_evtGpsUbxReceive+0x146>
		case GUMI_ACK_ACK:
			gpsData.cfg_result = GUCR_ACK;
 8007e74:	4b50      	ldr	r3, [pc, #320]	; (8007fb8 <_evtGpsUbxReceive+0x170>)
 8007e76:	2201      	movs	r2, #1
 8007e78:	61da      	str	r2, [r3, #28]
			return FALSE;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	e092      	b.n	8007fa4 <_evtGpsUbxReceive+0x15c>

		case GUMI_ACK_NAK:
			gpsData.cfg_result = GUCR_NAK;
 8007e7e:	4b4e      	ldr	r3, [pc, #312]	; (8007fb8 <_evtGpsUbxReceive+0x170>)
 8007e80:	2202      	movs	r2, #2
 8007e82:	61da      	str	r2, [r3, #28]
			return FALSE;
 8007e84:	2300      	movs	r3, #0
 8007e86:	e08d      	b.n	8007fa4 <_evtGpsUbxReceive+0x15c>
		}
		break;

    case GUCI_NAV:
		switch (p_packet->msg_id) {
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	785b      	ldrb	r3, [r3, #1]
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d002      	beq.n	8007e96 <_evtGpsUbxReceive+0x4e>
 8007e90:	2b12      	cmp	r3, #18
 8007e92:	d04f      	beq.n	8007f34 <_evtGpsUbxReceive+0xec>
				GPS_speed = (uint16_t)(p_parent->_ground_speed / 10);
				GPS_ground_course = (uint16_t)(p_parent->_ground_course * 10);
				gps_receive |= 2;
				break;
		}
		break;
 8007e94:	e07c      	b.n	8007f90 <_evtGpsUbxReceive+0x148>
				f.GPS_FIX = p_parent->_fix;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e9c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	4b45      	ldr	r3, [pc, #276]	; (8007fbc <_evtGpsUbxReceive+0x174>)
 8007ea6:	72da      	strb	r2, [r3, #11]
				if (f.GPS_FIX) {
 8007ea8:	4b44      	ldr	r3, [pc, #272]	; (8007fbc <_evtGpsUbxReceive+0x174>)
 8007eaa:	7adb      	ldrb	r3, [r3, #11]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d031      	beq.n	8007f14 <_evtGpsUbxReceive+0xcc>
					GPS_coord[LAT] = p_parent->_coord_deg[PIF_GPS_LAT] * 10000000UL;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007eb6:	a33e      	add	r3, pc, #248	; (adr r3, 8007fb0 <_evtGpsUbxReceive+0x168>)
 8007eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebc:	f7f8 fb50 	bl	8000560 <__aeabi_dmul>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	4610      	mov	r0, r2
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	f7f8 fde4 	bl	8000a94 <__aeabi_d2iz>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	4a3c      	ldr	r2, [pc, #240]	; (8007fc0 <_evtGpsUbxReceive+0x178>)
 8007ed0:	6013      	str	r3, [r2, #0]
					GPS_coord[LON] = p_parent->_coord_deg[PIF_GPS_LON] * 10000000UL;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007ed8:	a335      	add	r3, pc, #212	; (adr r3, 8007fb0 <_evtGpsUbxReceive+0x168>)
 8007eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ede:	f7f8 fb3f 	bl	8000560 <__aeabi_dmul>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	4619      	mov	r1, r3
 8007eea:	f7f8 fdd3 	bl	8000a94 <__aeabi_d2iz>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	4a33      	ldr	r2, [pc, #204]	; (8007fc0 <_evtGpsUbxReceive+0x178>)
 8007ef2:	6053      	str	r3, [r2, #4]
					GPS_numSat = p_parent->_num_sat;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8007efa:	4b32      	ldr	r3, [pc, #200]	; (8007fc4 <_evtGpsUbxReceive+0x17c>)
 8007efc:	701a      	strb	r2, [r3, #0]
					GPS_altitude = p_parent->_altitude;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007f04:	4610      	mov	r0, r2
 8007f06:	4619      	mov	r1, r3
 8007f08:	f7f8 fdec 	bl	8000ae4 <__aeabi_d2uiz>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	4b2d      	ldr	r3, [pc, #180]	; (8007fc8 <_evtGpsUbxReceive+0x180>)
 8007f12:	801a      	strh	r2, [r3, #0]
				GPS_HorizontalAcc = p_parent->_horizontal_acc;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f18:	4a2c      	ldr	r2, [pc, #176]	; (8007fcc <_evtGpsUbxReceive+0x184>)
 8007f1a:	6013      	str	r3, [r2, #0]
				GPS_VerticalAcc = p_parent->_vertical_acc;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f20:	4a2b      	ldr	r2, [pc, #172]	; (8007fd0 <_evtGpsUbxReceive+0x188>)
 8007f22:	6013      	str	r3, [r2, #0]
				gps_receive |= 1;
 8007f24:	4b2b      	ldr	r3, [pc, #172]	; (8007fd4 <_evtGpsUbxReceive+0x18c>)
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	f043 0301 	orr.w	r3, r3, #1
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	4b29      	ldr	r3, [pc, #164]	; (8007fd4 <_evtGpsUbxReceive+0x18c>)
 8007f30:	701a      	strb	r2, [r3, #0]
				break;
 8007f32:	e02b      	b.n	8007f8c <_evtGpsUbxReceive+0x144>
				GPS_speed = (uint16_t)(p_parent->_ground_speed / 10);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007f3a:	f04f 0200 	mov.w	r2, #0
 8007f3e:	4b26      	ldr	r3, [pc, #152]	; (8007fd8 <_evtGpsUbxReceive+0x190>)
 8007f40:	f7f8 fc38 	bl	80007b4 <__aeabi_ddiv>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	4610      	mov	r0, r2
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	f7f8 fdca 	bl	8000ae4 <__aeabi_d2uiz>
 8007f50:	4603      	mov	r3, r0
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	4b21      	ldr	r3, [pc, #132]	; (8007fdc <_evtGpsUbxReceive+0x194>)
 8007f56:	801a      	strh	r2, [r3, #0]
				GPS_ground_course = (uint16_t)(p_parent->_ground_course * 10);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007f5e:	f04f 0200 	mov.w	r2, #0
 8007f62:	4b1d      	ldr	r3, [pc, #116]	; (8007fd8 <_evtGpsUbxReceive+0x190>)
 8007f64:	f7f8 fafc 	bl	8000560 <__aeabi_dmul>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4610      	mov	r0, r2
 8007f6e:	4619      	mov	r1, r3
 8007f70:	f7f8 fdb8 	bl	8000ae4 <__aeabi_d2uiz>
 8007f74:	4603      	mov	r3, r0
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	4b19      	ldr	r3, [pc, #100]	; (8007fe0 <_evtGpsUbxReceive+0x198>)
 8007f7a:	801a      	strh	r2, [r3, #0]
				gps_receive |= 2;
 8007f7c:	4b15      	ldr	r3, [pc, #84]	; (8007fd4 <_evtGpsUbxReceive+0x18c>)
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	f043 0302 	orr.w	r3, r3, #2
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	4b13      	ldr	r3, [pc, #76]	; (8007fd4 <_evtGpsUbxReceive+0x18c>)
 8007f88:	701a      	strb	r2, [r3, #0]
				break;
 8007f8a:	bf00      	nop
		break;
 8007f8c:	e000      	b.n	8007f90 <_evtGpsUbxReceive+0x148>
		break;
 8007f8e:	bf00      	nop
    }
	if (gps_receive != 3) return FALSE;
 8007f90:	4b10      	ldr	r3, [pc, #64]	; (8007fd4 <_evtGpsUbxReceive+0x18c>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d001      	beq.n	8007f9c <_evtGpsUbxReceive+0x154>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	e003      	b.n	8007fa4 <_evtGpsUbxReceive+0x15c>

	gps_receive = 0;
 8007f9c:	4b0d      	ldr	r3, [pc, #52]	; (8007fd4 <_evtGpsUbxReceive+0x18c>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8007fa2:	2301      	movs	r3, #1
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	f3af 8000 	nop.w
 8007fb0:	00000000 	.word	0x00000000
 8007fb4:	416312d0 	.word	0x416312d0
 8007fb8:	20000f84 	.word	0x20000f84
 8007fbc:	2000174c 	.word	0x2000174c
 8007fc0:	20001810 	.word	0x20001810
 8007fc4:	20001830 	.word	0x20001830
 8007fc8:	20001836 	.word	0x20001836
 8007fcc:	200018e0 	.word	0x200018e0
 8007fd0:	200018e4 	.word	0x200018e4
 8007fd4:	20001268 	.word	0x20001268
 8007fd8:	40240000 	.word	0x40240000
 8007fdc:	20001838 	.word	0x20001838
 8007fe0:	20001842 	.word	0x20001842

08007fe4 <_evtGpsReceive>:

static void _evtGpsReceive(PifGps *p_owner)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
	(void)p_owner;

    if (f.GPS_FIX) {
 8007fec:	4b29      	ldr	r3, [pc, #164]	; (8008094 <_evtGpsReceive+0xb0>)
 8007fee:	7adb      	ldrb	r3, [r3, #11]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d017      	beq.n	8008024 <_evtGpsReceive+0x40>
        if (!sensors(SENSOR_BARO) && f.FIXED_WING)
 8007ff4:	2004      	movs	r0, #4
 8007ff6:	f7ff f80b 	bl	8007010 <sensors>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	f083 0301 	eor.w	r3, r3, #1
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00e      	beq.n	8008024 <_evtGpsReceive+0x40>
 8008006:	4b23      	ldr	r3, [pc, #140]	; (8008094 <_evtGpsReceive+0xb0>)
 8008008:	7c1b      	ldrb	r3, [r3, #16]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00a      	beq.n	8008024 <_evtGpsReceive+0x40>
            EstAlt = (GPS_altitude - GPS_home[ALT]) * 100;    // Use values Based on GPS
 800800e:	4b22      	ldr	r3, [pc, #136]	; (8008098 <_evtGpsReceive+0xb4>)
 8008010:	881b      	ldrh	r3, [r3, #0]
 8008012:	461a      	mov	r2, r3
 8008014:	4b21      	ldr	r3, [pc, #132]	; (800809c <_evtGpsReceive+0xb8>)
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	2264      	movs	r2, #100	; 0x64
 800801c:	fb02 f303 	mul.w	r3, r2, r3
 8008020:	4a1f      	ldr	r2, [pc, #124]	; (80080a0 <_evtGpsReceive+0xbc>)
 8008022:	6013      	str	r3, [r2, #0]
    }

    if (!sensors(SENSOR_MAG) && GPS_speed > 100) {
 8008024:	2008      	movs	r0, #8
 8008026:	f7fe fff3 	bl	8007010 <sensors>
 800802a:	4603      	mov	r3, r0
 800802c:	f083 0301 	eor.w	r3, r3, #1
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	d021      	beq.n	800807a <_evtGpsReceive+0x96>
 8008036:	4b1b      	ldr	r3, [pc, #108]	; (80080a4 <_evtGpsReceive+0xc0>)
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	2b64      	cmp	r3, #100	; 0x64
 800803c:	d91d      	bls.n	800807a <_evtGpsReceive+0x96>
        GPS_ground_course = wrap_18000(GPS_ground_course * 10) / 10;
 800803e:	4b1a      	ldr	r3, [pc, #104]	; (80080a8 <_evtGpsReceive+0xc4>)
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	4613      	mov	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	005b      	lsls	r3, r3, #1
 800804c:	4618      	mov	r0, r3
 800804e:	f001 fcd5 	bl	80099fc <wrap_18000>
 8008052:	4603      	mov	r3, r0
 8008054:	4a15      	ldr	r2, [pc, #84]	; (80080ac <_evtGpsReceive+0xc8>)
 8008056:	fb82 1203 	smull	r1, r2, r2, r3
 800805a:	1092      	asrs	r2, r2, #2
 800805c:	17db      	asrs	r3, r3, #31
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	b29a      	uxth	r2, r3
 8008062:	4b11      	ldr	r3, [pc, #68]	; (80080a8 <_evtGpsReceive+0xc4>)
 8008064:	801a      	strh	r2, [r3, #0]
        heading = GPS_ground_course / 10;    // Use values Based on GPS if we are moving.
 8008066:	4b10      	ldr	r3, [pc, #64]	; (80080a8 <_evtGpsReceive+0xc4>)
 8008068:	881b      	ldrh	r3, [r3, #0]
 800806a:	4a11      	ldr	r2, [pc, #68]	; (80080b0 <_evtGpsReceive+0xcc>)
 800806c:	fba2 2303 	umull	r2, r3, r2, r3
 8008070:	08db      	lsrs	r3, r3, #3
 8008072:	b29b      	uxth	r3, r3
 8008074:	b21a      	sxth	r2, r3
 8008076:	4b0f      	ldr	r3, [pc, #60]	; (80080b4 <_evtGpsReceive+0xd0>)
 8008078:	801a      	strh	r2, [r3, #0]
    }

    pifTask_SetTrigger(g_task_gps);
 800807a:	4b0f      	ldr	r3, [pc, #60]	; (80080b8 <_evtGpsReceive+0xd4>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4618      	mov	r0, r3
 8008080:	f00c fe56 	bl	8014d30 <pifTask_SetTrigger>
    gpsData.receive = TRUE;
 8008084:	4b0d      	ldr	r3, [pc, #52]	; (80080bc <_evtGpsReceive+0xd8>)
 8008086:	2201      	movs	r2, #1
 8008088:	761a      	strb	r2, [r3, #24]
}
 800808a:	bf00      	nop
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	2000174c 	.word	0x2000174c
 8008098:	20001836 	.word	0x20001836
 800809c:	20001818 	.word	0x20001818
 80080a0:	200014b8 	.word	0x200014b8
 80080a4:	20001838 	.word	0x20001838
 80080a8:	20001842 	.word	0x20001842
 80080ac:	66666667 	.word	0x66666667
 80080b0:	cccccccd 	.word	0xcccccccd
 80080b4:	20001a7e 	.word	0x20001a7e
 80080b8:	200015ac 	.word	0x200015ac
 80080bc:	20000f84 	.word	0x20000f84

080080c0 <_evtGpsTimeout>:

static void _evtGpsTimeout(PifGps *p_owner)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
    (void)p_owner;

    // remove GPS from capability
    serialStopReceiveFunc(&core.gpsport->comm);
 80080c8:	4b0c      	ldr	r3, [pc, #48]	; (80080fc <_evtGpsTimeout+0x3c>)
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	3304      	adds	r3, #4
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fa fb24 	bl	800271c <serialStopReceiveFunc>
    gps_ublox._gps.evt_nmea_receive = NULL;
 80080d4:	4b0a      	ldr	r3, [pc, #40]	; (8008100 <_evtGpsTimeout+0x40>)
 80080d6:	2200      	movs	r2, #0
 80080d8:	609a      	str	r2, [r3, #8]
    gps_ublox.evt_ubx_receive = NULL;
 80080da:	4b09      	ldr	r3, [pc, #36]	; (8008100 <_evtGpsTimeout+0x40>)
 80080dc:	2200      	movs	r2, #0
 80080de:	601a      	str	r2, [r3, #0]
    sensorsClear(SENSOR_GPS);
 80080e0:	2020      	movs	r0, #32
 80080e2:	f7fe ffbd 	bl	8007060 <sensorsClear>
    gpsSetState(GPS_LOSTCOMMS);
 80080e6:	2006      	movs	r0, #6
 80080e8:	f7ff fdea 	bl	8007cc0 <gpsSetState>
#ifndef __PIF_NO_LOG__
    pifLog_Print(LT_INFO, "GPS: Timeout");
 80080ec:	4905      	ldr	r1, [pc, #20]	; (8008104 <_evtGpsTimeout+0x44>)
 80080ee:	2002      	movs	r0, #2
 80080f0:	f00b fcf4 	bl	8013adc <pifLog_Print>
#endif
}
 80080f4:	bf00      	nop
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	200007e4 	.word	0x200007e4
 8008100:	20000fa8 	.word	0x20000fa8
 8008104:	08028480 	.word	0x08028480

08008108 <gpsInit>:

void gpsInit(uint8_t port, uint8_t baudrateIndex)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	4603      	mov	r3, r0
 8008110:	460a      	mov	r2, r1
 8008112:	71fb      	strb	r3, [r7, #7]
 8008114:	4613      	mov	r3, r2
 8008116:	71bb      	strb	r3, [r7, #6]
    // init gpsData structure. if we're not actually enabled, don't bother doing anything else
    gpsSetState(GPS_UNKNOWN);
 8008118:	2000      	movs	r0, #0
 800811a:	f7ff fdd1 	bl	8007cc0 <gpsSetState>

    gpsData.baudrateIndex = baudrateIndex;
 800811e:	4a21      	ldr	r2, [pc, #132]	; (80081a4 <gpsInit+0x9c>)
 8008120:	79bb      	ldrb	r3, [r7, #6]
 8008122:	7053      	strb	r3, [r2, #1]
    gpsData.lastMessage = pif_cumulative_timer1ms;
 8008124:	4b20      	ldr	r3, [pc, #128]	; (80081a8 <gpsInit+0xa0>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a1e      	ldr	r2, [pc, #120]	; (80081a4 <gpsInit+0x9c>)
 800812a:	6093      	str	r3, [r2, #8]
    gpsData.errors = 0;
 800812c:	4b1d      	ldr	r3, [pc, #116]	; (80081a4 <gpsInit+0x9c>)
 800812e:	2200      	movs	r2, #0
 8008130:	605a      	str	r2, [r3, #4]

    gpsSetPIDs();
 8008132:	f000 ff37 	bl	8008fa4 <gpsSetPIDs>
    // Open GPS UART, no callback - buffer will be read out in gpsThread()
    core.gpsport = uartOpen(port, 9600, MODE_RXTX, 5);    // signal GPS "thread" to initialize when it gets to it, 5ms
 8008136:	79f8      	ldrb	r0, [r7, #7]
 8008138:	2305      	movs	r3, #5
 800813a:	2203      	movs	r2, #3
 800813c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8008140:	f7fa f940 	bl	80023c4 <uartOpen>
 8008144:	4603      	mov	r3, r0
 8008146:	4a19      	ldr	r2, [pc, #100]	; (80081ac <gpsInit+0xa4>)
 8008148:	6093      	str	r3, [r2, #8]
    if (!core.gpsport) goto fail;
 800814a:	4b18      	ldr	r3, [pc, #96]	; (80081ac <gpsInit+0xa4>)
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d01d      	beq.n	800818e <gpsInit+0x86>
    if (!pifGpsUblox_Init(&gps_ublox, PIF_ID_AUTO)) goto fail;
 8008152:	2100      	movs	r1, #0
 8008154:	4816      	ldr	r0, [pc, #88]	; (80081b0 <gpsInit+0xa8>)
 8008156:	f00f fcb7 	bl	8017ac8 <pifGpsUblox_Init>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d018      	beq.n	8008192 <gpsInit+0x8a>
    pifGpsUblox_AttachComm(&gps_ublox, &core.gpsport->comm);
 8008160:	4b12      	ldr	r3, [pc, #72]	; (80081ac <gpsInit+0xa4>)
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	3304      	adds	r3, #4
 8008166:	4619      	mov	r1, r3
 8008168:	4811      	ldr	r0, [pc, #68]	; (80081b0 <gpsInit+0xa8>)
 800816a:	f00f fd07 	bl	8017b7c <pifGpsUblox_AttachComm>
    gps_ublox._gps.evt_receive = _evtGpsReceive;
 800816e:	4b10      	ldr	r3, [pc, #64]	; (80081b0 <gpsInit+0xa8>)
 8008170:	4a10      	ldr	r2, [pc, #64]	; (80081b4 <gpsInit+0xac>)
 8008172:	60da      	str	r2, [r3, #12]

    // signal GPS "thread" to initialize when it gets to it
    gpsSetState(GPS_INITIALIZING);
 8008174:	2001      	movs	r0, #1
 8008176:	f7ff fda3 	bl	8007cc0 <gpsSetState>

    // copy ubx sbas config string to use
    if (mcfg.gps_ubx_sbas >= SBAS_LAST)
 800817a:	4b0f      	ldr	r3, [pc, #60]	; (80081b8 <gpsInit+0xb0>)
 800817c:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8008180:	2b04      	cmp	r3, #4
 8008182:	dd0b      	ble.n	800819c <gpsInit+0x94>
        mcfg.gps_ubx_sbas = SBAS_AUTO;
 8008184:	4b0c      	ldr	r3, [pc, #48]	; (80081b8 <gpsInit+0xb0>)
 8008186:	2200      	movs	r2, #0
 8008188:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad

    return;
 800818c:	e006      	b.n	800819c <gpsInit+0x94>
    if (!core.gpsport) goto fail;
 800818e:	bf00      	nop
 8008190:	e000      	b.n	8008194 <gpsInit+0x8c>
    if (!pifGpsUblox_Init(&gps_ublox, PIF_ID_AUTO)) goto fail;
 8008192:	bf00      	nop

fail:    
    sensorsClear(SENSOR_GPS);
 8008194:	2020      	movs	r0, #32
 8008196:	f7fe ff63 	bl	8007060 <sensorsClear>
 800819a:	e000      	b.n	800819e <gpsInit+0x96>
    return;
 800819c:	bf00      	nop
}
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	20000f84 	.word	0x20000f84
 80081a8:	20001df8 	.word	0x20001df8
 80081ac:	200007e4 	.word	0x200007e4
 80081b0:	20000fa8 	.word	0x20000fa8
 80081b4:	08007fe5 	.word	0x08007fe5
 80081b8:	2000089c 	.word	0x2000089c

080081bc <gpsInitNmea>:

static void gpsInitNmea(void)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	af00      	add	r7, sp, #0
    gps_ublox._gps.evt_nmea_receive = _evtGpsNmeaReceive;
 80081c0:	4b07      	ldr	r3, [pc, #28]	; (80081e0 <gpsInitNmea+0x24>)
 80081c2:	4a08      	ldr	r2, [pc, #32]	; (80081e4 <gpsInitNmea+0x28>)
 80081c4:	609a      	str	r2, [r3, #8]
    pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 80081c6:	4b08      	ldr	r3, [pc, #32]	; (80081e8 <gpsInitNmea+0x2c>)
 80081c8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80081cc:	4907      	ldr	r1, [pc, #28]	; (80081ec <gpsInitNmea+0x30>)
 80081ce:	4808      	ldr	r0, [pc, #32]	; (80081f0 <gpsInitNmea+0x34>)
 80081d0:	f00e f8de 	bl	8016390 <pifGps_SetTimeout>
    gpsSetState(GPS_RECEIVINGDATA);
 80081d4:	2005      	movs	r0, #5
 80081d6:	f7ff fd73 	bl	8007cc0 <gpsSetState>
}
 80081da:	bf00      	nop
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	20000fa8 	.word	0x20000fa8
 80081e4:	08007d01 	.word	0x08007d01
 80081e8:	080080c1 	.word	0x080080c1
 80081ec:	20001580 	.word	0x20001580
 80081f0:	20000fb0 	.word	0x20000fb0

080081f4 <gpsInitUblox>:

static void gpsInitUblox(void)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af02      	add	r7, sp, #8
    uint8_t i;
    int line = 0;
 80081fa:	2300      	movs	r3, #0
 80081fc:	607b      	str	r3, [r7, #4]

	// GPS_CONFIGURATION, push some ublox config strings
	if (gpsData.step >= 50) {
 80081fe:	4b91      	ldr	r3, [pc, #580]	; (8008444 <gpsInitUblox+0x250>)
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	2b31      	cmp	r3, #49	; 0x31
 8008204:	dd7c      	ble.n	8008300 <gpsInitUblox+0x10c>
		if (gpsData.step < 70) {
 8008206:	4b8f      	ldr	r3, [pc, #572]	; (8008444 <gpsInitUblox+0x250>)
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	2b45      	cmp	r3, #69	; 0x45
 800820c:	dc29      	bgt.n	8008262 <gpsInitUblox+0x6e>
			if (pif_cumulative_timer1ms - gpsData.state_ts >= 50) {
 800820e:	4b8e      	ldr	r3, [pc, #568]	; (8008448 <gpsInitUblox+0x254>)
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	4b8c      	ldr	r3, [pc, #560]	; (8008444 <gpsInitUblox+0x250>)
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	2b31      	cmp	r3, #49	; 0x31
 800821a:	f240 81a4 	bls.w	8008566 <gpsInitUblox+0x372>
#ifdef __PIF_DEBUG__
				pifLog_Printf(LT_INFO, "GPS(%u) S:%u T=%lu", __LINE__, gpsData.step, pif_cumulative_timer1ms - gpsData.state_ts);
 800821e:	4b89      	ldr	r3, [pc, #548]	; (8008444 <gpsInitUblox+0x250>)
 8008220:	68d9      	ldr	r1, [r3, #12]
 8008222:	4b89      	ldr	r3, [pc, #548]	; (8008448 <gpsInitUblox+0x254>)
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	4b87      	ldr	r3, [pc, #540]	; (8008444 <gpsInitUblox+0x250>)
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	460b      	mov	r3, r1
 8008230:	f240 1231 	movw	r2, #305	; 0x131
 8008234:	4985      	ldr	r1, [pc, #532]	; (800844c <gpsInitUblox+0x258>)
 8008236:	2002      	movs	r0, #2
 8008238:	f00b fcde 	bl	8013bf8 <pifLog_Printf>
#endif
		  		gpsData.step = (gpsData.step - 50) + 1;
 800823c:	4b81      	ldr	r3, [pc, #516]	; (8008444 <gpsInitUblox+0x250>)
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	3b31      	subs	r3, #49	; 0x31
 8008242:	4a80      	ldr	r2, [pc, #512]	; (8008444 <gpsInitUblox+0x250>)
 8008244:	60d3      	str	r3, [r2, #12]
				if (gpsData.step == 10 + kCfgMsgNmeaSize) gpsData.step = 20;
 8008246:	4b7f      	ldr	r3, [pc, #508]	; (8008444 <gpsInitUblox+0x250>)
 8008248:	68da      	ldr	r2, [r3, #12]
 800824a:	2306      	movs	r3, #6
 800824c:	330a      	adds	r3, #10
 800824e:	429a      	cmp	r2, r3
 8008250:	d102      	bne.n	8008258 <gpsInitUblox+0x64>
 8008252:	4b7c      	ldr	r3, [pc, #496]	; (8008444 <gpsInitUblox+0x250>)
 8008254:	2214      	movs	r2, #20
 8008256:	60da      	str	r2, [r3, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 8008258:	4b7b      	ldr	r3, [pc, #492]	; (8008448 <gpsInitUblox+0x254>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a79      	ldr	r2, [pc, #484]	; (8008444 <gpsInitUblox+0x250>)
 800825e:	6153      	str	r3, [r2, #20]
 8008260:	e181      	b.n	8008566 <gpsInitUblox+0x372>
			}
		}
		else {
			if (gpsData.cfg_result == GUCR_ACK) {
 8008262:	4b78      	ldr	r3, [pc, #480]	; (8008444 <gpsInitUblox+0x250>)
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d121      	bne.n	80082ae <gpsInitUblox+0xba>
#ifdef __PIF_DEBUG__
				pifLog_Printf(LT_INFO, "GPS(%u) ACK:%u T=%lu", __LINE__, gpsData.step, pif_cumulative_timer1ms - gpsData.state_ts);
 800826a:	4b76      	ldr	r3, [pc, #472]	; (8008444 <gpsInitUblox+0x250>)
 800826c:	68d9      	ldr	r1, [r3, #12]
 800826e:	4b76      	ldr	r3, [pc, #472]	; (8008448 <gpsInitUblox+0x254>)
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	4b74      	ldr	r3, [pc, #464]	; (8008444 <gpsInitUblox+0x250>)
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	460b      	mov	r3, r1
 800827c:	f240 123b 	movw	r2, #315	; 0x13b
 8008280:	4973      	ldr	r1, [pc, #460]	; (8008450 <gpsInitUblox+0x25c>)
 8008282:	2002      	movs	r0, #2
 8008284:	f00b fcb8 	bl	8013bf8 <pifLog_Printf>
#endif
		  		gpsData.step = (gpsData.step - 50) + 1;
 8008288:	4b6e      	ldr	r3, [pc, #440]	; (8008444 <gpsInitUblox+0x250>)
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	3b31      	subs	r3, #49	; 0x31
 800828e:	4a6d      	ldr	r2, [pc, #436]	; (8008444 <gpsInitUblox+0x250>)
 8008290:	60d3      	str	r3, [r2, #12]
				if (gpsData.step == 20 + kCfgMsgNavSize) gpsData.step = 30;
 8008292:	4b6c      	ldr	r3, [pc, #432]	; (8008444 <gpsInitUblox+0x250>)
 8008294:	68da      	ldr	r2, [r3, #12]
 8008296:	2305      	movs	r3, #5
 8008298:	3314      	adds	r3, #20
 800829a:	429a      	cmp	r2, r3
 800829c:	d102      	bne.n	80082a4 <gpsInitUblox+0xb0>
 800829e:	4b69      	ldr	r3, [pc, #420]	; (8008444 <gpsInitUblox+0x250>)
 80082a0:	221e      	movs	r2, #30
 80082a2:	60da      	str	r2, [r3, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 80082a4:	4b68      	ldr	r3, [pc, #416]	; (8008448 <gpsInitUblox+0x254>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a66      	ldr	r2, [pc, #408]	; (8008444 <gpsInitUblox+0x250>)
 80082aa:	6153      	str	r3, [r2, #20]
 80082ac:	e15b      	b.n	8008566 <gpsInitUblox+0x372>
			}
			else if (gpsData.cfg_result == GUCR_NAK) {
 80082ae:	4b65      	ldr	r3, [pc, #404]	; (8008444 <gpsInitUblox+0x250>)
 80082b0:	69db      	ldr	r3, [r3, #28]
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d114      	bne.n	80082e0 <gpsInitUblox+0xec>
				pif_error = E_RECEIVE_NACK;
 80082b6:	4b67      	ldr	r3, [pc, #412]	; (8008454 <gpsInitUblox+0x260>)
 80082b8:	2210      	movs	r2, #16
 80082ba:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 80082bc:	f240 1343 	movw	r3, #323	; 0x143
 80082c0:	607b      	str	r3, [r7, #4]
#ifdef __PIF_DEBUG__
				pifLog_Printf(LT_INFO, "GPS(%u) NAK:%u T=%lu", line, gpsData.step, pif_cumulative_timer1ms - gpsData.state_ts);
 80082c2:	4b60      	ldr	r3, [pc, #384]	; (8008444 <gpsInitUblox+0x250>)
 80082c4:	68d9      	ldr	r1, [r3, #12]
 80082c6:	4b60      	ldr	r3, [pc, #384]	; (8008448 <gpsInitUblox+0x254>)
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	4b5e      	ldr	r3, [pc, #376]	; (8008444 <gpsInitUblox+0x250>)
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	460b      	mov	r3, r1
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	4960      	ldr	r1, [pc, #384]	; (8008458 <gpsInitUblox+0x264>)
 80082d8:	2002      	movs	r0, #2
 80082da:	f00b fc8d 	bl	8013bf8 <pifLog_Printf>
 80082de:	e142      	b.n	8008566 <gpsInitUblox+0x372>
#endif
			}
			else {
				if (pif_cumulative_timer1ms - gpsData.state_ts >= 500) {
 80082e0:	4b59      	ldr	r3, [pc, #356]	; (8008448 <gpsInitUblox+0x254>)
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	4b57      	ldr	r3, [pc, #348]	; (8008444 <gpsInitUblox+0x250>)
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80082ee:	f0c0 813a 	bcc.w	8008566 <gpsInitUblox+0x372>
					pif_error = E_TIMEOUT;
 80082f2:	4b58      	ldr	r3, [pc, #352]	; (8008454 <gpsInitUblox+0x260>)
 80082f4:	2207      	movs	r2, #7
 80082f6:	701a      	strb	r2, [r3, #0]
					line = __LINE__;
 80082f8:	f240 134b 	movw	r3, #331	; 0x14b
 80082fc:	607b      	str	r3, [r7, #4]
 80082fe:	e132      	b.n	8008566 <gpsInitUblox+0x372>
				}
			}
		}
	}
	else {
		if (pif_cumulative_timer1ms - gpsData.state_ts < 10) return;
 8008300:	4b51      	ldr	r3, [pc, #324]	; (8008448 <gpsInitUblox+0x254>)
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	4b4f      	ldr	r3, [pc, #316]	; (8008444 <gpsInitUblox+0x250>)
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	2b09      	cmp	r3, #9
 800830c:	f240 813c 	bls.w	8008588 <gpsInitUblox+0x394>
		if (gpsData.step < 10) {
 8008310:	4b4c      	ldr	r3, [pc, #304]	; (8008444 <gpsInitUblox+0x250>)
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	2b09      	cmp	r3, #9
 8008316:	dc0f      	bgt.n	8008338 <gpsInitUblox+0x144>
			if (!gpsData.step) {
 8008318:	4b4a      	ldr	r3, [pc, #296]	; (8008444 <gpsInitUblox+0x250>)
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	2b00      	cmp	r3, #0
 800831e:	f040 8122 	bne.w	8008566 <gpsInitUblox+0x372>
				gpsData.state_ts = pif_cumulative_timer1ms;
 8008322:	4b49      	ldr	r3, [pc, #292]	; (8008448 <gpsInitUblox+0x254>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a47      	ldr	r2, [pc, #284]	; (8008444 <gpsInitUblox+0x250>)
 8008328:	6153      	str	r3, [r2, #20]
			    gps_ublox.evt_ubx_receive = _evtGpsUbxReceive;
 800832a:	4b4c      	ldr	r3, [pc, #304]	; (800845c <gpsInitUblox+0x268>)
 800832c:	4a4c      	ldr	r2, [pc, #304]	; (8008460 <gpsInitUblox+0x26c>)
 800832e:	601a      	str	r2, [r3, #0]
			    gpsData.step = 10;
 8008330:	4b44      	ldr	r3, [pc, #272]	; (8008444 <gpsInitUblox+0x250>)
 8008332:	220a      	movs	r2, #10
 8008334:	60da      	str	r2, [r3, #12]
 8008336:	e116      	b.n	8008566 <gpsInitUblox+0x372>
			}
		}
		else if (gpsData.step < 10 + kCfgMsgNmeaSize) {
 8008338:	2306      	movs	r3, #6
 800833a:	f103 0209 	add.w	r2, r3, #9
 800833e:	4b41      	ldr	r3, [pc, #260]	; (8008444 <gpsInitUblox+0x250>)
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	429a      	cmp	r2, r3
 8008344:	db28      	blt.n	8008398 <gpsInitUblox+0x1a4>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_MSG, sizeof(kCfgMsgNmea[gpsData.step - 10]), (uint8_t*)kCfgMsgNmea[gpsData.step - 10], FALSE)) {
 8008346:	4b3f      	ldr	r3, [pc, #252]	; (8008444 <gpsInitUblox+0x250>)
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	f1a3 020a 	sub.w	r2, r3, #10
 800834e:	4613      	mov	r3, r2
 8008350:	005b      	lsls	r3, r3, #1
 8008352:	4413      	add	r3, r2
 8008354:	4a43      	ldr	r2, [pc, #268]	; (8008464 <gpsInitUblox+0x270>)
 8008356:	4413      	add	r3, r2
 8008358:	2200      	movs	r2, #0
 800835a:	9201      	str	r2, [sp, #4]
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	2303      	movs	r3, #3
 8008360:	2201      	movs	r2, #1
 8008362:	2106      	movs	r1, #6
 8008364:	483d      	ldr	r0, [pc, #244]	; (800845c <gpsInitUblox+0x268>)
 8008366:	f00f fc57 	bl	8017c18 <pifGpsUblox_SendUbxMsg>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00c      	beq.n	800838a <gpsInitUblox+0x196>
                gpsData.cfg_result = GUCR_NONE;
 8008370:	4b34      	ldr	r3, [pc, #208]	; (8008444 <gpsInitUblox+0x250>)
 8008372:	2200      	movs	r2, #0
 8008374:	61da      	str	r2, [r3, #28]
				gpsData.step += 50;
 8008376:	4b33      	ldr	r3, [pc, #204]	; (8008444 <gpsInitUblox+0x250>)
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	3332      	adds	r3, #50	; 0x32
 800837c:	4a31      	ldr	r2, [pc, #196]	; (8008444 <gpsInitUblox+0x250>)
 800837e:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 8008380:	4b31      	ldr	r3, [pc, #196]	; (8008448 <gpsInitUblox+0x254>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a2f      	ldr	r2, [pc, #188]	; (8008444 <gpsInitUblox+0x250>)
 8008386:	6153      	str	r3, [r2, #20]
 8008388:	e0ed      	b.n	8008566 <gpsInitUblox+0x372>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 800838a:	4b32      	ldr	r3, [pc, #200]	; (8008454 <gpsInitUblox+0x260>)
 800838c:	220a      	movs	r2, #10
 800838e:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8008390:	f240 1361 	movw	r3, #353	; 0x161
 8008394:	607b      	str	r3, [r7, #4]
 8008396:	e0e6      	b.n	8008566 <gpsInitUblox+0x372>
			}
		}
		else if (gpsData.step < 20 + kCfgMsgNavSize) {
 8008398:	2305      	movs	r3, #5
 800839a:	f103 0213 	add.w	r2, r3, #19
 800839e:	4b29      	ldr	r3, [pc, #164]	; (8008444 <gpsInitUblox+0x250>)
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	db28      	blt.n	80083f8 <gpsInitUblox+0x204>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_MSG, sizeof(kCfgMsgNav[gpsData.step - 20]), (uint8_t*)kCfgMsgNav[gpsData.step - 20], FALSE)) {
 80083a6:	4b27      	ldr	r3, [pc, #156]	; (8008444 <gpsInitUblox+0x250>)
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	f1a3 0214 	sub.w	r2, r3, #20
 80083ae:	4613      	mov	r3, r2
 80083b0:	005b      	lsls	r3, r3, #1
 80083b2:	4413      	add	r3, r2
 80083b4:	4a2c      	ldr	r2, [pc, #176]	; (8008468 <gpsInitUblox+0x274>)
 80083b6:	4413      	add	r3, r2
 80083b8:	2200      	movs	r2, #0
 80083ba:	9201      	str	r2, [sp, #4]
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	2303      	movs	r3, #3
 80083c0:	2201      	movs	r2, #1
 80083c2:	2106      	movs	r1, #6
 80083c4:	4825      	ldr	r0, [pc, #148]	; (800845c <gpsInitUblox+0x268>)
 80083c6:	f00f fc27 	bl	8017c18 <pifGpsUblox_SendUbxMsg>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00c      	beq.n	80083ea <gpsInitUblox+0x1f6>
                gpsData.cfg_result = GUCR_NONE;
 80083d0:	4b1c      	ldr	r3, [pc, #112]	; (8008444 <gpsInitUblox+0x250>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	61da      	str	r2, [r3, #28]
				gpsData.step += 50;
 80083d6:	4b1b      	ldr	r3, [pc, #108]	; (8008444 <gpsInitUblox+0x250>)
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	3332      	adds	r3, #50	; 0x32
 80083dc:	4a19      	ldr	r2, [pc, #100]	; (8008444 <gpsInitUblox+0x250>)
 80083de:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 80083e0:	4b19      	ldr	r3, [pc, #100]	; (8008448 <gpsInitUblox+0x254>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a17      	ldr	r2, [pc, #92]	; (8008444 <gpsInitUblox+0x250>)
 80083e6:	6153      	str	r3, [r2, #20]
 80083e8:	e0bd      	b.n	8008566 <gpsInitUblox+0x372>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 80083ea:	4b1a      	ldr	r3, [pc, #104]	; (8008454 <gpsInitUblox+0x260>)
 80083ec:	220a      	movs	r2, #10
 80083ee:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 80083f0:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80083f4:	607b      	str	r3, [r7, #4]
 80083f6:	e0b6      	b.n	8008566 <gpsInitUblox+0x372>
			}
		}
		else if (gpsData.step == 30) {
 80083f8:	4b12      	ldr	r3, [pc, #72]	; (8008444 <gpsInitUblox+0x250>)
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	2b1e      	cmp	r3, #30
 80083fe:	d137      	bne.n	8008470 <gpsInitUblox+0x27c>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_RATE, sizeof(kCfgRate), (uint8_t*)kCfgRate, FALSE)) {
 8008400:	2300      	movs	r3, #0
 8008402:	9301      	str	r3, [sp, #4]
 8008404:	4b19      	ldr	r3, [pc, #100]	; (800846c <gpsInitUblox+0x278>)
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	2306      	movs	r3, #6
 800840a:	2208      	movs	r2, #8
 800840c:	2106      	movs	r1, #6
 800840e:	4813      	ldr	r0, [pc, #76]	; (800845c <gpsInitUblox+0x268>)
 8008410:	f00f fc02 	bl	8017c18 <pifGpsUblox_SendUbxMsg>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00c      	beq.n	8008434 <gpsInitUblox+0x240>
                gpsData.cfg_result = GUCR_NONE;
 800841a:	4b0a      	ldr	r3, [pc, #40]	; (8008444 <gpsInitUblox+0x250>)
 800841c:	2200      	movs	r2, #0
 800841e:	61da      	str	r2, [r3, #28]
				gpsData.step += 50;
 8008420:	4b08      	ldr	r3, [pc, #32]	; (8008444 <gpsInitUblox+0x250>)
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	3332      	adds	r3, #50	; 0x32
 8008426:	4a07      	ldr	r2, [pc, #28]	; (8008444 <gpsInitUblox+0x250>)
 8008428:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 800842a:	4b07      	ldr	r3, [pc, #28]	; (8008448 <gpsInitUblox+0x254>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a05      	ldr	r2, [pc, #20]	; (8008444 <gpsInitUblox+0x250>)
 8008430:	6153      	str	r3, [r2, #20]
 8008432:	e098      	b.n	8008566 <gpsInitUblox+0x372>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8008434:	4b07      	ldr	r3, [pc, #28]	; (8008454 <gpsInitUblox+0x260>)
 8008436:	220a      	movs	r2, #10
 8008438:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 800843a:	f240 1377 	movw	r3, #375	; 0x177
 800843e:	607b      	str	r3, [r7, #4]
 8008440:	e091      	b.n	8008566 <gpsInitUblox+0x372>
 8008442:	bf00      	nop
 8008444:	20000f84 	.word	0x20000f84
 8008448:	20001df8 	.word	0x20001df8
 800844c:	08028490 	.word	0x08028490
 8008450:	080284a4 	.word	0x080284a4
 8008454:	20001de0 	.word	0x20001de0
 8008458:	080284bc 	.word	0x080284bc
 800845c:	20000fa8 	.word	0x20000fa8
 8008460:	08007e49 	.word	0x08007e49
 8008464:	08029ba4 	.word	0x08029ba4
 8008468:	08029bb8 	.word	0x08029bb8
 800846c:	08029bc8 	.word	0x08029bc8
			}
		}
		else if (gpsData.step == 31) {
 8008470:	4b47      	ldr	r3, [pc, #284]	; (8008590 <gpsInitUblox+0x39c>)
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	2b1f      	cmp	r3, #31
 8008476:	d120      	bne.n	80084ba <gpsInitUblox+0x2c6>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_NAV5, sizeof(kCfgNav5), (uint8_t*)kCfgNav5, FALSE)) {
 8008478:	2300      	movs	r3, #0
 800847a:	9301      	str	r3, [sp, #4]
 800847c:	4b45      	ldr	r3, [pc, #276]	; (8008594 <gpsInitUblox+0x3a0>)
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	2324      	movs	r3, #36	; 0x24
 8008482:	2224      	movs	r2, #36	; 0x24
 8008484:	2106      	movs	r1, #6
 8008486:	4844      	ldr	r0, [pc, #272]	; (8008598 <gpsInitUblox+0x3a4>)
 8008488:	f00f fbc6 	bl	8017c18 <pifGpsUblox_SendUbxMsg>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00c      	beq.n	80084ac <gpsInitUblox+0x2b8>
                gpsData.cfg_result = GUCR_NONE;
 8008492:	4b3f      	ldr	r3, [pc, #252]	; (8008590 <gpsInitUblox+0x39c>)
 8008494:	2200      	movs	r2, #0
 8008496:	61da      	str	r2, [r3, #28]
				gpsData.step += 50;
 8008498:	4b3d      	ldr	r3, [pc, #244]	; (8008590 <gpsInitUblox+0x39c>)
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	3332      	adds	r3, #50	; 0x32
 800849e:	4a3c      	ldr	r2, [pc, #240]	; (8008590 <gpsInitUblox+0x39c>)
 80084a0:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 80084a2:	4b3e      	ldr	r3, [pc, #248]	; (800859c <gpsInitUblox+0x3a8>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a3a      	ldr	r2, [pc, #232]	; (8008590 <gpsInitUblox+0x39c>)
 80084a8:	6153      	str	r3, [r2, #20]
 80084aa:	e05c      	b.n	8008566 <gpsInitUblox+0x372>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 80084ac:	4b3c      	ldr	r3, [pc, #240]	; (80085a0 <gpsInitUblox+0x3ac>)
 80084ae:	220a      	movs	r2, #10
 80084b0:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 80084b2:	f44f 73c1 	mov.w	r3, #386	; 0x182
 80084b6:	607b      	str	r3, [r7, #4]
 80084b8:	e055      	b.n	8008566 <gpsInitUblox+0x372>
			}
		}
		else if (gpsData.step == 32) {
 80084ba:	4b35      	ldr	r3, [pc, #212]	; (8008590 <gpsInitUblox+0x39c>)
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	2b20      	cmp	r3, #32
 80084c0:	d12f      	bne.n	8008522 <gpsInitUblox+0x32e>
			i = mcfg.gps_ubx_sbas > SBAS_DISABLED ? mcfg.gps_ubx_sbas : SBAS_LAST;
 80084c2:	4b38      	ldr	r3, [pc, #224]	; (80085a4 <gpsInitUblox+0x3b0>)
 80084c4:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	db04      	blt.n	80084d6 <gpsInitUblox+0x2e2>
 80084cc:	4b35      	ldr	r3, [pc, #212]	; (80085a4 <gpsInitUblox+0x3b0>)
 80084ce:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	e000      	b.n	80084d8 <gpsInitUblox+0x2e4>
 80084d6:	2305      	movs	r3, #5
 80084d8:	70fb      	strb	r3, [r7, #3]
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_SBAS, sizeof(kCfgSbas[i]), (uint8_t*)kCfgSbas[i], FALSE)) {
 80084da:	78fb      	ldrb	r3, [r7, #3]
 80084dc:	00db      	lsls	r3, r3, #3
 80084de:	4a32      	ldr	r2, [pc, #200]	; (80085a8 <gpsInitUblox+0x3b4>)
 80084e0:	4413      	add	r3, r2
 80084e2:	2200      	movs	r2, #0
 80084e4:	9201      	str	r2, [sp, #4]
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	2308      	movs	r3, #8
 80084ea:	2216      	movs	r2, #22
 80084ec:	2106      	movs	r1, #6
 80084ee:	482a      	ldr	r0, [pc, #168]	; (8008598 <gpsInitUblox+0x3a4>)
 80084f0:	f00f fb92 	bl	8017c18 <pifGpsUblox_SendUbxMsg>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00c      	beq.n	8008514 <gpsInitUblox+0x320>
                gpsData.cfg_result = GUCR_NONE;
 80084fa:	4b25      	ldr	r3, [pc, #148]	; (8008590 <gpsInitUblox+0x39c>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	61da      	str	r2, [r3, #28]
				gpsData.step += 50;
 8008500:	4b23      	ldr	r3, [pc, #140]	; (8008590 <gpsInitUblox+0x39c>)
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	3332      	adds	r3, #50	; 0x32
 8008506:	4a22      	ldr	r2, [pc, #136]	; (8008590 <gpsInitUblox+0x39c>)
 8008508:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 800850a:	4b24      	ldr	r3, [pc, #144]	; (800859c <gpsInitUblox+0x3a8>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a20      	ldr	r2, [pc, #128]	; (8008590 <gpsInitUblox+0x39c>)
 8008510:	6153      	str	r3, [r2, #20]
 8008512:	e028      	b.n	8008566 <gpsInitUblox+0x372>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8008514:	4b22      	ldr	r3, [pc, #136]	; (80085a0 <gpsInitUblox+0x3ac>)
 8008516:	220a      	movs	r2, #10
 8008518:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 800851a:	f44f 73c7 	mov.w	r3, #398	; 0x18e
 800851e:	607b      	str	r3, [r7, #4]
 8008520:	e021      	b.n	8008566 <gpsInitUblox+0x372>
			}
		}
		else if (gpsData.step == 33) {
 8008522:	4b1b      	ldr	r3, [pc, #108]	; (8008590 <gpsInitUblox+0x39c>)
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	2b21      	cmp	r3, #33	; 0x21
 8008528:	d11d      	bne.n	8008566 <gpsInitUblox+0x372>
			if (pif_cumulative_timer1ms - gpsData.state_ts < 10000) {
 800852a:	4b1c      	ldr	r3, [pc, #112]	; (800859c <gpsInitUblox+0x3a8>)
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	4b18      	ldr	r3, [pc, #96]	; (8008590 <gpsInitUblox+0x39c>)
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	f242 720f 	movw	r2, #9999	; 0x270f
 8008538:	4293      	cmp	r3, r2
 800853a:	d80e      	bhi.n	800855a <gpsInitUblox+0x366>
				if (gpsData.receive) {
 800853c:	4b14      	ldr	r3, [pc, #80]	; (8008590 <gpsInitUblox+0x39c>)
 800853e:	7e1b      	ldrb	r3, [r3, #24]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d010      	beq.n	8008566 <gpsInitUblox+0x372>
					// ublox should be init'd, time to try receiving some junk
					pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 8008544:	4b19      	ldr	r3, [pc, #100]	; (80085ac <gpsInitUblox+0x3b8>)
 8008546:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800854a:	4919      	ldr	r1, [pc, #100]	; (80085b0 <gpsInitUblox+0x3bc>)
 800854c:	4819      	ldr	r0, [pc, #100]	; (80085b4 <gpsInitUblox+0x3c0>)
 800854e:	f00d ff1f 	bl	8016390 <pifGps_SetTimeout>
					gpsSetState(GPS_RECEIVINGDATA);
 8008552:	2005      	movs	r0, #5
 8008554:	f7ff fbb4 	bl	8007cc0 <gpsSetState>
 8008558:	e005      	b.n	8008566 <gpsInitUblox+0x372>
				}
			}
			else {
				pif_error = E_TIMEOUT;
 800855a:	4b11      	ldr	r3, [pc, #68]	; (80085a0 <gpsInitUblox+0x3ac>)
 800855c:	2207      	movs	r2, #7
 800855e:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8008560:	f240 139b 	movw	r3, #411	; 0x19b
 8008564:	607b      	str	r3, [r7, #4]
			}
		}
	}

	if (line) {
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00e      	beq.n	800858a <gpsInitUblox+0x396>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_ERROR, "GPS(%u) S:%u E:%u", line, gpsData.step, pif_error);
 800856c:	4b08      	ldr	r3, [pc, #32]	; (8008590 <gpsInitUblox+0x39c>)
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	4a0b      	ldr	r2, [pc, #44]	; (80085a0 <gpsInitUblox+0x3ac>)
 8008572:	7812      	ldrb	r2, [r2, #0]
 8008574:	9200      	str	r2, [sp, #0]
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	490f      	ldr	r1, [pc, #60]	; (80085b8 <gpsInitUblox+0x3c4>)
 800857a:	2004      	movs	r0, #4
 800857c:	f00b fb3c 	bl	8013bf8 <pifLog_Printf>
#endif
		_evtGpsTimeout(&gps_ublox._gps);
 8008580:	480c      	ldr	r0, [pc, #48]	; (80085b4 <gpsInitUblox+0x3c0>)
 8008582:	f7ff fd9d 	bl	80080c0 <_evtGpsTimeout>
 8008586:	e000      	b.n	800858a <gpsInitUblox+0x396>
		if (pif_cumulative_timer1ms - gpsData.state_ts < 10) return;
 8008588:	bf00      	nop
	}
}
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	20000f84 	.word	0x20000f84
 8008594:	08029bd0 	.word	0x08029bd0
 8008598:	20000fa8 	.word	0x20000fa8
 800859c:	20001df8 	.word	0x20001df8
 80085a0:	20001de0 	.word	0x20001de0
 80085a4:	2000089c 	.word	0x2000089c
 80085a8:	08029bf4 	.word	0x08029bf4
 80085ac:	080080c1 	.word	0x080080c1
 80085b0:	20001580 	.word	0x20001580
 80085b4:	20000fb0 	.word	0x20000fb0
 80085b8:	080284d4 	.word	0x080284d4

080085bc <gpsInitHardware>:

static void gpsInitHardware(void)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
    switch (mcfg.gps_type) {
 80085c0:	4b0b      	ldr	r3, [pc, #44]	; (80085f0 <gpsInitHardware+0x34>)
 80085c2:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	dc0d      	bgt.n	80085e6 <gpsInitHardware+0x2a>
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	da0a      	bge.n	80085e4 <gpsInitHardware+0x28>
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d002      	beq.n	80085d8 <gpsInitHardware+0x1c>
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d003      	beq.n	80085de <gpsInitHardware+0x22>
 80085d6:	e006      	b.n	80085e6 <gpsInitHardware+0x2a>
        case GPS_NMEA:
            gpsInitNmea();
 80085d8:	f7ff fdf0 	bl	80081bc <gpsInitNmea>
            break;
 80085dc:	e003      	b.n	80085e6 <gpsInitHardware+0x2a>

        case GPS_UBLOX:
            gpsInitUblox();
 80085de:	f7ff fe09 	bl	80081f4 <gpsInitUblox>
            break;
 80085e2:	e000      	b.n	80085e6 <gpsInitHardware+0x2a>

        case GPS_MTK_NMEA:
        case GPS_MTK_BINARY:
            // TODO. need to find my old piece of shit MTK GPS.
            break;
 80085e4:	bf00      	nop
    }

    // clear error counter
    gpsData.errors = 0;
 80085e6:	4b03      	ldr	r3, [pc, #12]	; (80085f4 <gpsInitHardware+0x38>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	605a      	str	r2, [r3, #4]
}
 80085ec:	bf00      	nop
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	2000089c 	.word	0x2000089c
 80085f4:	20000f84 	.word	0x20000f84

080085f8 <gpsThread>:

void gpsThread(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af02      	add	r7, sp, #8
    uint32_t m;

    switch (gpsData.state) {
 80085fe:	4b62      	ldr	r3, [pc, #392]	; (8008788 <gpsThread+0x190>)
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	2b06      	cmp	r3, #6
 8008604:	f200 80bc 	bhi.w	8008780 <gpsThread+0x188>
 8008608:	a201      	add	r2, pc, #4	; (adr r2, 8008610 <gpsThread+0x18>)
 800860a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860e:	bf00      	nop
 8008610:	08008781 	.word	0x08008781
 8008614:	0800862d 	.word	0x0800862d
 8008618:	08008679 	.word	0x08008679
 800861c:	080086cf 	.word	0x080086cf
 8008620:	0800870f 	.word	0x0800870f
 8008624:	08008781 	.word	0x08008781
 8008628:	08008715 	.word	0x08008715
        case GPS_UNKNOWN:
            break;

        case GPS_INITIALIZING:
            m = pif_cumulative_timer1ms;
 800862c:	4b57      	ldr	r3, [pc, #348]	; (800878c <gpsThread+0x194>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < GPS_BAUD_DELAY)
 8008632:	4b55      	ldr	r3, [pc, #340]	; (8008788 <gpsThread+0x190>)
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800863e:	f0c0 809a 	bcc.w	8008776 <gpsThread+0x17e>
                return;

            if (gpsData.state_position < GPS_INIT_ENTRIES) {
 8008642:	4b51      	ldr	r3, [pc, #324]	; (8008788 <gpsThread+0x190>)
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	2b04      	cmp	r3, #4
 8008648:	dc12      	bgt.n	8008670 <gpsThread+0x78>
                // try different speed to INIT
                serialSetBaudRate(core.gpsport, gpsInitData[gpsData.state_position].baudrate);
 800864a:	4b51      	ldr	r3, [pc, #324]	; (8008790 <gpsThread+0x198>)
 800864c:	689a      	ldr	r2, [r3, #8]
 800864e:	4b4e      	ldr	r3, [pc, #312]	; (8008788 <gpsThread+0x190>)
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	4950      	ldr	r1, [pc, #320]	; (8008794 <gpsThread+0x19c>)
 8008654:	00db      	lsls	r3, r3, #3
 8008656:	440b      	add	r3, r1
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	4619      	mov	r1, r3
 800865c:	4610      	mov	r0, r2
 800865e:	f7fa f82b 	bl	80026b8 <serialSetBaudRate>
                gpsData.state = GPS_SENDBAUD;
 8008662:	4b49      	ldr	r3, [pc, #292]	; (8008788 <gpsThread+0x190>)
 8008664:	2202      	movs	r2, #2
 8008666:	701a      	strb	r2, [r3, #0]
                gpsData.state_ts = m;
 8008668:	4a47      	ldr	r2, [pc, #284]	; (8008788 <gpsThread+0x190>)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6153      	str	r3, [r2, #20]
            else
            {
                // we're now (hopefully) at the correct rate, next state will switch to it
                gpsSetState(GPS_SETBAUD);
            }
            break;
 800866e:	e087      	b.n	8008780 <gpsThread+0x188>
                gpsSetState(GPS_SETBAUD);
 8008670:	2003      	movs	r0, #3
 8008672:	f7ff fb25 	bl	8007cc0 <gpsSetState>
            break;
 8008676:	e083      	b.n	8008780 <gpsThread+0x188>

        case GPS_SENDBAUD:
            m = pif_cumulative_timer1ms;
 8008678:	4b44      	ldr	r3, [pc, #272]	; (800878c <gpsThread+0x194>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < 200)
 800867e:	4b42      	ldr	r3, [pc, #264]	; (8008788 <gpsThread+0x190>)
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	2bc7      	cmp	r3, #199	; 0xc7
 8008688:	d977      	bls.n	800877a <gpsThread+0x182>
                return;

            // but print our FIXED init string for the baudrate we want to be at
            if (pifGpsUblox_SetPubxConfig(&gps_ublox, 1, 0x07, 0x03, gpsInitData[gpsData.baudrateIndex].baudrate, FALSE)) {
 800868a:	4b3f      	ldr	r3, [pc, #252]	; (8008788 <gpsThread+0x190>)
 800868c:	785b      	ldrb	r3, [r3, #1]
 800868e:	4a41      	ldr	r2, [pc, #260]	; (8008794 <gpsThread+0x19c>)
 8008690:	00db      	lsls	r3, r3, #3
 8008692:	4413      	add	r3, r2
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	9201      	str	r2, [sp, #4]
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	2303      	movs	r3, #3
 800869e:	2207      	movs	r2, #7
 80086a0:	2101      	movs	r1, #1
 80086a2:	483d      	ldr	r0, [pc, #244]	; (8008798 <gpsThread+0x1a0>)
 80086a4:	f00f fa82 	bl	8017bac <pifGpsUblox_SetPubxConfig>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00b      	beq.n	80086c6 <gpsThread+0xce>
                gpsData.state_position++;
 80086ae:	4b36      	ldr	r3, [pc, #216]	; (8008788 <gpsThread+0x190>)
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	3301      	adds	r3, #1
 80086b4:	4a34      	ldr	r2, [pc, #208]	; (8008788 <gpsThread+0x190>)
 80086b6:	6113      	str	r3, [r2, #16]
                gpsData.state = GPS_INITIALIZING;
 80086b8:	4b33      	ldr	r3, [pc, #204]	; (8008788 <gpsThread+0x190>)
 80086ba:	2201      	movs	r2, #1
 80086bc:	701a      	strb	r2, [r3, #0]
                gpsData.state_ts = m;
 80086be:	4a32      	ldr	r2, [pc, #200]	; (8008788 <gpsThread+0x190>)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6153      	str	r3, [r2, #20]
            }
            else {
        		gpsSetState(GPS_INITIALIZING);
            }
            break;
 80086c4:	e05c      	b.n	8008780 <gpsThread+0x188>
        		gpsSetState(GPS_INITIALIZING);
 80086c6:	2001      	movs	r0, #1
 80086c8:	f7ff fafa 	bl	8007cc0 <gpsSetState>
            break;
 80086cc:	e058      	b.n	8008780 <gpsThread+0x188>

        case GPS_SETBAUD:
            m = pif_cumulative_timer1ms;
 80086ce:	4b2f      	ldr	r3, [pc, #188]	; (800878c <gpsThread+0x194>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < GPS_BAUD_DELAY)
 80086d4:	4b2c      	ldr	r3, [pc, #176]	; (8008788 <gpsThread+0x190>)
 80086d6:	695b      	ldr	r3, [r3, #20]
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80086e0:	d34d      	bcc.n	800877e <gpsThread+0x186>
                return;

            serialSetBaudRate(core.gpsport, gpsInitData[gpsData.baudrateIndex].baudrate);
 80086e2:	4b2b      	ldr	r3, [pc, #172]	; (8008790 <gpsThread+0x198>)
 80086e4:	689a      	ldr	r2, [r3, #8]
 80086e6:	4b28      	ldr	r3, [pc, #160]	; (8008788 <gpsThread+0x190>)
 80086e8:	785b      	ldrb	r3, [r3, #1]
 80086ea:	492a      	ldr	r1, [pc, #168]	; (8008794 <gpsThread+0x19c>)
 80086ec:	00db      	lsls	r3, r3, #3
 80086ee:	440b      	add	r3, r1
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	4619      	mov	r1, r3
 80086f4:	4610      	mov	r0, r2
 80086f6:	f7f9 ffdf 	bl	80026b8 <serialSetBaudRate>
        	serialStartReceiveFunc(&core.gpsport->comm);
 80086fa:	4b25      	ldr	r3, [pc, #148]	; (8008790 <gpsThread+0x198>)
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	3304      	adds	r3, #4
 8008700:	4618      	mov	r0, r3
 8008702:	f7f9 ffeb 	bl	80026dc <serialStartReceiveFunc>
            gpsSetState(GPS_CONFIGURATION);
 8008706:	2004      	movs	r0, #4
 8008708:	f7ff fada 	bl	8007cc0 <gpsSetState>
            break;
 800870c:	e038      	b.n	8008780 <gpsThread+0x188>

        case GPS_CONFIGURATION:
            gpsInitHardware();
 800870e:	f7ff ff55 	bl	80085bc <gpsInitHardware>
            break;
 8008712:	e035      	b.n	8008780 <gpsThread+0x188>

        case GPS_LOSTCOMMS:
            pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, 0, NULL);
 8008714:	2300      	movs	r3, #0
 8008716:	2200      	movs	r2, #0
 8008718:	4920      	ldr	r1, [pc, #128]	; (800879c <gpsThread+0x1a4>)
 800871a:	4821      	ldr	r0, [pc, #132]	; (80087a0 <gpsThread+0x1a8>)
 800871c:	f00d fe38 	bl	8016390 <pifGps_SetTimeout>
            gpsData.errors++;
 8008720:	4b19      	ldr	r3, [pc, #100]	; (8008788 <gpsThread+0x190>)
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	3301      	adds	r3, #1
 8008726:	4a18      	ldr	r2, [pc, #96]	; (8008788 <gpsThread+0x190>)
 8008728:	6053      	str	r3, [r2, #4]
            // try another rate (Only if autobauding is enabled)
            if (mcfg.gps_autobaud) {
 800872a:	4b1e      	ldr	r3, [pc, #120]	; (80087a4 <gpsThread+0x1ac>)
 800872c:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8008730:	2b00      	cmp	r3, #0
 8008732:	d012      	beq.n	800875a <gpsThread+0x162>
                gpsData.baudrateIndex++;
 8008734:	4b14      	ldr	r3, [pc, #80]	; (8008788 <gpsThread+0x190>)
 8008736:	785b      	ldrb	r3, [r3, #1]
 8008738:	3301      	adds	r3, #1
 800873a:	b2da      	uxtb	r2, r3
 800873c:	4b12      	ldr	r3, [pc, #72]	; (8008788 <gpsThread+0x190>)
 800873e:	705a      	strb	r2, [r3, #1]
                gpsData.baudrateIndex %= GPS_INIT_ENTRIES;
 8008740:	4b11      	ldr	r3, [pc, #68]	; (8008788 <gpsThread+0x190>)
 8008742:	785a      	ldrb	r2, [r3, #1]
 8008744:	4b18      	ldr	r3, [pc, #96]	; (80087a8 <gpsThread+0x1b0>)
 8008746:	fba3 1302 	umull	r1, r3, r3, r2
 800874a:	0899      	lsrs	r1, r3, #2
 800874c:	460b      	mov	r3, r1
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	440b      	add	r3, r1
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	b2da      	uxtb	r2, r3
 8008756:	4b0c      	ldr	r3, [pc, #48]	; (8008788 <gpsThread+0x190>)
 8008758:	705a      	strb	r2, [r3, #1]
            }
            gpsData.lastMessage = pif_cumulative_timer1ms;
 800875a:	4b0c      	ldr	r3, [pc, #48]	; (800878c <gpsThread+0x194>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a0a      	ldr	r2, [pc, #40]	; (8008788 <gpsThread+0x190>)
 8008760:	6093      	str	r3, [r2, #8]
            // TODO - move some / all of these into gpsData
            GPS_numSat = 0;
 8008762:	4b12      	ldr	r3, [pc, #72]	; (80087ac <gpsThread+0x1b4>)
 8008764:	2200      	movs	r2, #0
 8008766:	701a      	strb	r2, [r3, #0]
            f.GPS_FIX = 0;
 8008768:	4b11      	ldr	r3, [pc, #68]	; (80087b0 <gpsThread+0x1b8>)
 800876a:	2200      	movs	r2, #0
 800876c:	72da      	strb	r2, [r3, #11]
            gpsSetState(GPS_INITIALIZING);
 800876e:	2001      	movs	r0, #1
 8008770:	f7ff faa6 	bl	8007cc0 <gpsSetState>
            break;
 8008774:	e004      	b.n	8008780 <gpsThread+0x188>
                return;
 8008776:	bf00      	nop
 8008778:	e002      	b.n	8008780 <gpsThread+0x188>
                return;
 800877a:	bf00      	nop
 800877c:	e000      	b.n	8008780 <gpsThread+0x188>
                return;
 800877e:	bf00      	nop

        case GPS_RECEIVINGDATA:
            break;
    }
}
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	20000f84 	.word	0x20000f84
 800878c:	20001df8 	.word	0x20001df8
 8008790:	200007e4 	.word	0x200007e4
 8008794:	08029b7c 	.word	0x08029b7c
 8008798:	20000fa8 	.word	0x20000fa8
 800879c:	20001580 	.word	0x20001580
 80087a0:	20000fb0 	.word	0x20000fb0
 80087a4:	2000089c 	.word	0x2000089c
 80087a8:	cccccccd 	.word	0xcccccccd
 80087ac:	20001830 	.word	0x20001830
 80087b0:	2000174c 	.word	0x2000174c

080087b4 <gpsPollSvinfo>:

// gpsPollSvinfo-function. Used for polling UBX-NAV-SVINFO (0x01 0x30) information from GPS.
void gpsPollSvinfo(void)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af02      	add	r7, sp, #8
    // If selected GPS isn't UBLOX then we don't poll UBX messages.
    if (mcfg.gps_type != GPS_UBLOX)
 80087ba:	4b2b      	ldr	r3, [pc, #172]	; (8008868 <gpsPollSvinfo+0xb4>)
 80087bc:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d14d      	bne.n	8008860 <gpsPollSvinfo+0xac>
        return;

    GPS_numCh = gps_ublox._num_ch;
 80087c4:	4b29      	ldr	r3, [pc, #164]	; (800886c <gpsPollSvinfo+0xb8>)
 80087c6:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 80087ca:	4b29      	ldr	r3, [pc, #164]	; (8008870 <gpsPollSvinfo+0xbc>)
 80087cc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < GPS_numCh; i++) {
 80087ce:	2300      	movs	r3, #0
 80087d0:	607b      	str	r3, [r7, #4]
 80087d2:	e02a      	b.n	800882a <gpsPollSvinfo+0x76>
        GPS_svinfo_chn[i] = gps_ublox._svinfo_chn[i];
 80087d4:	4a25      	ldr	r2, [pc, #148]	; (800886c <gpsPollSvinfo+0xb8>)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4413      	add	r3, r2
 80087da:	33b9      	adds	r3, #185	; 0xb9
 80087dc:	7819      	ldrb	r1, [r3, #0]
 80087de:	4a25      	ldr	r2, [pc, #148]	; (8008874 <gpsPollSvinfo+0xc0>)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4413      	add	r3, r2
 80087e4:	460a      	mov	r2, r1
 80087e6:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_svid[i] = gps_ublox._svinfo_svid[i];
 80087e8:	4a20      	ldr	r2, [pc, #128]	; (800886c <gpsPollSvinfo+0xb8>)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4413      	add	r3, r2
 80087ee:	33c9      	adds	r3, #201	; 0xc9
 80087f0:	7819      	ldrb	r1, [r3, #0]
 80087f2:	4a21      	ldr	r2, [pc, #132]	; (8008878 <gpsPollSvinfo+0xc4>)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4413      	add	r3, r2
 80087f8:	460a      	mov	r2, r1
 80087fa:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_quality[i] = gps_ublox._svinfo_quality[i];
 80087fc:	4a1b      	ldr	r2, [pc, #108]	; (800886c <gpsPollSvinfo+0xb8>)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4413      	add	r3, r2
 8008802:	33d9      	adds	r3, #217	; 0xd9
 8008804:	7819      	ldrb	r1, [r3, #0]
 8008806:	4a1d      	ldr	r2, [pc, #116]	; (800887c <gpsPollSvinfo+0xc8>)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4413      	add	r3, r2
 800880c:	460a      	mov	r2, r1
 800880e:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_cno[i] = gps_ublox._svinfo_cno[i];
 8008810:	4a16      	ldr	r2, [pc, #88]	; (800886c <gpsPollSvinfo+0xb8>)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4413      	add	r3, r2
 8008816:	33e9      	adds	r3, #233	; 0xe9
 8008818:	7819      	ldrb	r1, [r3, #0]
 800881a:	4a19      	ldr	r2, [pc, #100]	; (8008880 <gpsPollSvinfo+0xcc>)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4413      	add	r3, r2
 8008820:	460a      	mov	r2, r1
 8008822:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < GPS_numCh; i++) {
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	3301      	adds	r3, #1
 8008828:	607b      	str	r3, [r7, #4]
 800882a:	4b11      	ldr	r3, [pc, #68]	; (8008870 <gpsPollSvinfo+0xbc>)
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	461a      	mov	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4293      	cmp	r3, r2
 8008834:	dbce      	blt.n	80087d4 <gpsPollSvinfo+0x20>
    }
    // Update GPS SVIFO update rate table.
    GPS_svinfo_rate[0] = gps_ublox._svinfo_rate[0];
 8008836:	4b0d      	ldr	r3, [pc, #52]	; (800886c <gpsPollSvinfo+0xb8>)
 8008838:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800883c:	4a11      	ldr	r2, [pc, #68]	; (8008884 <gpsPollSvinfo+0xd0>)
 800883e:	6013      	str	r3, [r2, #0]
    GPS_svinfo_rate[1] = gps_ublox._svinfo_rate[1];
 8008840:	4b0a      	ldr	r3, [pc, #40]	; (800886c <gpsPollSvinfo+0xb8>)
 8008842:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008846:	4a0f      	ldr	r2, [pc, #60]	; (8008884 <gpsPollSvinfo+0xd0>)
 8008848:	6053      	str	r3, [r2, #4]

    pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_NAV, GUMI_NAV_SVINFO, 0, NULL, FALSE);
 800884a:	2300      	movs	r3, #0
 800884c:	9301      	str	r3, [sp, #4]
 800884e:	2300      	movs	r3, #0
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	2300      	movs	r3, #0
 8008854:	2230      	movs	r2, #48	; 0x30
 8008856:	2101      	movs	r1, #1
 8008858:	4804      	ldr	r0, [pc, #16]	; (800886c <gpsPollSvinfo+0xb8>)
 800885a:	f00f f9dd 	bl	8017c18 <pifGpsUblox_SendUbxMsg>
 800885e:	e000      	b.n	8008862 <gpsPollSvinfo+0xae>
        return;
 8008860:	bf00      	nop
}
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	2000089c 	.word	0x2000089c
 800886c:	20000fa8 	.word	0x20000fa8
 8008870:	2000184d 	.word	0x2000184d
 8008874:	20001850 	.word	0x20001850
 8008878:	20001870 	.word	0x20001870
 800887c:	20001890 	.word	0x20001890
 8008880:	200018b0 	.word	0x200018b0
 8008884:	200018d8 	.word	0x200018d8

08008888 <get_P>:
static PID posholdPID[2];
static PID poshold_ratePID[2];
static PID navPID[2];

static int32_t get_P(int32_t error, PID_PARAM *pid)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
    return (float)error * pid->kP;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	ee07 3a90 	vmov	s15, r3
 8008898:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	edd3 7a00 	vldr	s15, [r3]
 80088a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088aa:	ee17 3a90 	vmov	r3, s15
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <get_I>:

static int32_t get_I(int32_t error, float *dt, PID *pid, PID_PARAM *pid_param)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b084      	sub	sp, #16
 80088be:	af00      	add	r7, sp, #0
 80088c0:	60f8      	str	r0, [r7, #12]
 80088c2:	60b9      	str	r1, [r7, #8]
 80088c4:	607a      	str	r2, [r7, #4]
 80088c6:	603b      	str	r3, [r7, #0]
    pid->integrator += ((float)error * pid_param->kI) **dt;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	ed93 7a00 	vldr	s14, [r3]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	ee07 3a90 	vmov	s15, r3
 80088d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	edd3 7a01 	vldr	s15, [r3, #4]
 80088de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	edd3 7a00 	vldr	s15, [r3]
 80088e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80088ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	edc3 7a00 	vstr	s15, [r3]
    pid->integrator = constrain(pid->integrator, -pid_param->Imax, pid_param->Imax);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	edd3 7a00 	vldr	s15, [r3]
 80088fc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	edd3 7a03 	vldr	s15, [r3, #12]
 8008906:	eef1 7a67 	vneg.f32	s15, s15
 800890a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	edd3 7a03 	vldr	s15, [r3, #12]
 8008914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008918:	ee17 2a90 	vmov	r2, s15
 800891c:	ee16 1a90 	vmov	r1, s13
 8008920:	ee17 0a10 	vmov	r0, s14
 8008924:	f7fb fa58 	bl	8003dd8 <constrain>
 8008928:	ee07 0a90 	vmov	s15, r0
 800892c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	edc3 7a00 	vstr	s15, [r3]
    return pid->integrator;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	edd3 7a00 	vldr	s15, [r3]
 800893c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008940:	ee17 3a90 	vmov	r3, s15
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	0000      	movs	r0, r0
	...

08008950 <get_D>:

static int32_t get_D(int32_t input, float *dt, PID *pid, PID_PARAM *pid_param)
{
 8008950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008954:	b084      	sub	sp, #16
 8008956:	af00      	add	r7, sp, #0
 8008958:	60f8      	str	r0, [r7, #12]
 800895a:	60b9      	str	r1, [r7, #8]
 800895c:	607a      	str	r2, [r7, #4]
 800895e:	603b      	str	r3, [r7, #0]
    pid->derivative = (input - pid->last_input) / *dt;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	ee07 3a90 	vmov	s15, r3
 800896c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	ed93 7a00 	vldr	s14, [r3]
 8008976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	edc3 7a04 	vstr	s15, [r3, #16]
    // Low pass filter cut frequency for derivative calculation
    // Set to  "1 / ( 2 * PI * gps_lpf )"
#define PID_FILTER       (1.0f / (2.0f * M_PI * (float)cfg.gps_lpf))
    // discrete low pass filter, cuts out the
    // high frequency noise that can drive the controller crazy
    pid->derivative = pid->last_derivative + (*dt / (PID_FILTER + *dt)) * (pid->derivative - pid->last_derivative);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	4618      	mov	r0, r3
 8008986:	f7f7 fd93 	bl	80004b0 <__aeabi_f2d>
 800898a:	4604      	mov	r4, r0
 800898c:	460d      	mov	r5, r1
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4618      	mov	r0, r3
 8008994:	f7f7 fd8c 	bl	80004b0 <__aeabi_f2d>
 8008998:	4680      	mov	r8, r0
 800899a:	4689      	mov	r9, r1
 800899c:	4b36      	ldr	r3, [pc, #216]	; (8008a78 <get_D+0x128>)
 800899e:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80089a2:	ee07 3a90 	vmov	s15, r3
 80089a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089aa:	ee17 0a90 	vmov	r0, s15
 80089ae:	f7f7 fd7f 	bl	80004b0 <__aeabi_f2d>
 80089b2:	a32f      	add	r3, pc, #188	; (adr r3, 8008a70 <get_D+0x120>)
 80089b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b8:	f7f7 fdd2 	bl	8000560 <__aeabi_dmul>
 80089bc:	4602      	mov	r2, r0
 80089be:	460b      	mov	r3, r1
 80089c0:	f04f 0000 	mov.w	r0, #0
 80089c4:	492d      	ldr	r1, [pc, #180]	; (8008a7c <get_D+0x12c>)
 80089c6:	f7f7 fef5 	bl	80007b4 <__aeabi_ddiv>
 80089ca:	4602      	mov	r2, r0
 80089cc:	460b      	mov	r3, r1
 80089ce:	4692      	mov	sl, r2
 80089d0:	469b      	mov	fp, r3
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7f7 fd6a 	bl	80004b0 <__aeabi_f2d>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4650      	mov	r0, sl
 80089e2:	4659      	mov	r1, fp
 80089e4:	f7f7 fc06 	bl	80001f4 <__adddf3>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4640      	mov	r0, r8
 80089ee:	4649      	mov	r1, r9
 80089f0:	f7f7 fee0 	bl	80007b4 <__aeabi_ddiv>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	4690      	mov	r8, r2
 80089fa:	4699      	mov	r9, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	ed93 7a04 	vldr	s14, [r3, #16]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	edd3 7a02 	vldr	s15, [r3, #8]
 8008a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a0c:	ee17 0a90 	vmov	r0, s15
 8008a10:	f7f7 fd4e 	bl	80004b0 <__aeabi_f2d>
 8008a14:	4602      	mov	r2, r0
 8008a16:	460b      	mov	r3, r1
 8008a18:	4640      	mov	r0, r8
 8008a1a:	4649      	mov	r1, r9
 8008a1c:	f7f7 fda0 	bl	8000560 <__aeabi_dmul>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4620      	mov	r0, r4
 8008a26:	4629      	mov	r1, r5
 8008a28:	f7f7 fbe4 	bl	80001f4 <__adddf3>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	4610      	mov	r0, r2
 8008a32:	4619      	mov	r1, r3
 8008a34:	f7f8 f876 	bl	8000b24 <__aeabi_d2f>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	611a      	str	r2, [r3, #16]
    // update state
    pid->last_input = input;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	605a      	str	r2, [r3, #4]
    pid->last_derivative = pid->derivative;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	691a      	ldr	r2, [r3, #16]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	609a      	str	r2, [r3, #8]
    // add in derivative component
    return pid_param->kD * pid->derivative;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	edd3 7a04 	vldr	s15, [r3, #16]
 8008a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a60:	ee17 3a90 	vmov	r3, s15
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a6e:	bf00      	nop
 8008a70:	54442d18 	.word	0x54442d18
 8008a74:	401921fb 	.word	0x401921fb
 8008a78:	20000e08 	.word	0x20000e08
 8008a7c:	3ff00000 	.word	0x3ff00000

08008a80 <reset_PID>:

static void reset_PID(PID *pid)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
    pid->integrator = 0;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f04f 0200 	mov.w	r2, #0
 8008a8e:	601a      	str	r2, [r3, #0]
    pid->last_input = 0;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	605a      	str	r2, [r3, #4]
    pid->last_derivative = 0;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f04f 0200 	mov.w	r2, #0
 8008a9c:	609a      	str	r2, [r3, #8]
}
 8008a9e:	bf00      	nop
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
	...

08008aac <taskGpsNewData>:
int32_t nav_bearing;
// saves the bearing at takeof (1deg = 1) used to rotate to takeoff direction when arrives at home
static int16_t nav_takeoff_bearing;

uint16_t taskGpsNewData(PifTask *p_task)
{
 8008aac:	b590      	push	{r4, r7, lr}
 8008aae:	b089      	sub	sp, #36	; 0x24
 8008ab0:	af02      	add	r7, sp, #8
 8008ab2:	6078      	str	r0, [r7, #4]
    int16_t speed;

    (void)p_task;

        // new data received and parsed, we're in business
        gpsData.lastMessage = pif_cumulative_timer1ms;
 8008ab4:	4b84      	ldr	r3, [pc, #528]	; (8008cc8 <taskGpsNewData+0x21c>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a84      	ldr	r2, [pc, #528]	; (8008ccc <taskGpsNewData+0x220>)
 8008aba:	6093      	str	r3, [r2, #8]
        sensorsSet(SENSOR_GPS);
 8008abc:	2020      	movs	r0, #32
 8008abe:	f7fe fabd 	bl	800703c <sensorsSet>
        if (GPS_update == 1)
 8008ac2:	4b83      	ldr	r3, [pc, #524]	; (8008cd0 <taskGpsNewData+0x224>)
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d103      	bne.n	8008ad2 <taskGpsNewData+0x26>
            GPS_update = 0;
 8008aca:	4b81      	ldr	r3, [pc, #516]	; (8008cd0 <taskGpsNewData+0x224>)
 8008acc:	2200      	movs	r2, #0
 8008ace:	701a      	strb	r2, [r3, #0]
 8008ad0:	e002      	b.n	8008ad8 <taskGpsNewData+0x2c>
        else
            GPS_update = 1;
 8008ad2:	4b7f      	ldr	r3, [pc, #508]	; (8008cd0 <taskGpsNewData+0x224>)
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	701a      	strb	r2, [r3, #0]
        if (f.GPS_FIX && GPS_numSat >= 5) {
 8008ad8:	4b7e      	ldr	r3, [pc, #504]	; (8008cd4 <taskGpsNewData+0x228>)
 8008ada:	7adb      	ldrb	r3, [r3, #11]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f000 81ae 	beq.w	8008e3e <taskGpsNewData+0x392>
 8008ae2:	4b7d      	ldr	r3, [pc, #500]	; (8008cd8 <taskGpsNewData+0x22c>)
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	2b04      	cmp	r3, #4
 8008ae8:	f240 81a9 	bls.w	8008e3e <taskGpsNewData+0x392>
            if (!f.ARMED && !f.FIXED_WING)
 8008aec:	4b79      	ldr	r3, [pc, #484]	; (8008cd4 <taskGpsNewData+0x228>)
 8008aee:	785b      	ldrb	r3, [r3, #1]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d106      	bne.n	8008b02 <taskGpsNewData+0x56>
 8008af4:	4b77      	ldr	r3, [pc, #476]	; (8008cd4 <taskGpsNewData+0x228>)
 8008af6:	7c1b      	ldrb	r3, [r3, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d102      	bne.n	8008b02 <taskGpsNewData+0x56>
                f.GPS_FIX_HOME = 0;
 8008afc:	4b75      	ldr	r3, [pc, #468]	; (8008cd4 <taskGpsNewData+0x228>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	731a      	strb	r2, [r3, #12]
            if (!f.GPS_FIX_HOME && f.ARMED)
 8008b02:	4b74      	ldr	r3, [pc, #464]	; (8008cd4 <taskGpsNewData+0x228>)
 8008b04:	7b1b      	ldrb	r3, [r3, #12]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d105      	bne.n	8008b16 <taskGpsNewData+0x6a>
 8008b0a:	4b72      	ldr	r3, [pc, #456]	; (8008cd4 <taskGpsNewData+0x228>)
 8008b0c:	785b      	ldrb	r3, [r3, #1]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <taskGpsNewData+0x6a>
                GPS_reset_home_position();
 8008b12:	f000 f9c1 	bl	8008e98 <GPS_reset_home_position>
            // Apply moving average filter to GPS data
#if defined(GPS_FILTERING)
            GPS_filter_index = (GPS_filter_index + 1) % GPS_FILTER_VECTOR_LENGTH;
 8008b16:	4b71      	ldr	r3, [pc, #452]	; (8008cdc <taskGpsNewData+0x230>)
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	1c5a      	adds	r2, r3, #1
 8008b1c:	4b70      	ldr	r3, [pc, #448]	; (8008ce0 <taskGpsNewData+0x234>)
 8008b1e:	fb83 1302 	smull	r1, r3, r3, r2
 8008b22:	1059      	asrs	r1, r3, #1
 8008b24:	17d3      	asrs	r3, r2, #31
 8008b26:	1ac9      	subs	r1, r1, r3
 8008b28:	460b      	mov	r3, r1
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	440b      	add	r3, r1
 8008b2e:	1ad1      	subs	r1, r2, r3
 8008b30:	b2ca      	uxtb	r2, r1
 8008b32:	4b6a      	ldr	r3, [pc, #424]	; (8008cdc <taskGpsNewData+0x230>)
 8008b34:	701a      	strb	r2, [r3, #0]
            for (axis = 0; axis < 2; axis++) {
 8008b36:	2300      	movs	r3, #0
 8008b38:	617b      	str	r3, [r7, #20]
 8008b3a:	e09f      	b.n	8008c7c <taskGpsNewData+0x1d0>
                GPS_read[axis] = GPS_coord[axis];               // latest unfiltered data is in GPS_latitude and GPS_longitude
 8008b3c:	4a69      	ldr	r2, [pc, #420]	; (8008ce4 <taskGpsNewData+0x238>)
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008b44:	4968      	ldr	r1, [pc, #416]	; (8008ce8 <taskGpsNewData+0x23c>)
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_degree[axis] = GPS_read[axis] / 10000000;   // get the degree to assure the sum fits to the int32_t
 8008b4c:	4a66      	ldr	r2, [pc, #408]	; (8008ce8 <taskGpsNewData+0x23c>)
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b54:	4a65      	ldr	r2, [pc, #404]	; (8008cec <taskGpsNewData+0x240>)
 8008b56:	fb82 1203 	smull	r1, r2, r2, r3
 8008b5a:	1592      	asrs	r2, r2, #22
 8008b5c:	17db      	asrs	r3, r3, #31
 8008b5e:	1ad2      	subs	r2, r2, r3
 8008b60:	4963      	ldr	r1, [pc, #396]	; (8008cf0 <taskGpsNewData+0x244>)
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                // How close we are to a degree line ? its the first three digits from the fractions of degree
                // later we use it to Check if we are close to a degree line, if yes, disable averaging,
                fraction3[axis] = (GPS_read[axis] - GPS_degree[axis] * 10000000) / 10000;
 8008b68:	4a5f      	ldr	r2, [pc, #380]	; (8008ce8 <taskGpsNewData+0x23c>)
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008b70:	495f      	ldr	r1, [pc, #380]	; (8008cf0 <taskGpsNewData+0x244>)
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008b78:	495e      	ldr	r1, [pc, #376]	; (8008cf4 <taskGpsNewData+0x248>)
 8008b7a:	fb01 f303 	mul.w	r3, r1, r3
 8008b7e:	4413      	add	r3, r2
 8008b80:	4a5d      	ldr	r2, [pc, #372]	; (8008cf8 <taskGpsNewData+0x24c>)
 8008b82:	fb82 1203 	smull	r1, r2, r2, r3
 8008b86:	1312      	asrs	r2, r2, #12
 8008b88:	17db      	asrs	r3, r3, #31
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	b299      	uxth	r1, r3
 8008b8e:	4a5b      	ldr	r2, [pc, #364]	; (8008cfc <taskGpsNewData+0x250>)
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

                GPS_filter_sum[axis] -= GPS_filter[axis][GPS_filter_index];
 8008b96:	4a5a      	ldr	r2, [pc, #360]	; (8008d00 <taskGpsNewData+0x254>)
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008b9e:	4b4f      	ldr	r3, [pc, #316]	; (8008cdc <taskGpsNewData+0x230>)
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	461c      	mov	r4, r3
 8008ba4:	4857      	ldr	r0, [pc, #348]	; (8008d04 <taskGpsNewData+0x258>)
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	4423      	add	r3, r4
 8008bb0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008bb4:	1aca      	subs	r2, r1, r3
 8008bb6:	4952      	ldr	r1, [pc, #328]	; (8008d00 <taskGpsNewData+0x254>)
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_filter[axis][GPS_filter_index] = GPS_read[axis] - (GPS_degree[axis] * 10000000);
 8008bbe:	4a4a      	ldr	r2, [pc, #296]	; (8008ce8 <taskGpsNewData+0x23c>)
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008bc6:	494a      	ldr	r1, [pc, #296]	; (8008cf0 <taskGpsNewData+0x244>)
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008bce:	4949      	ldr	r1, [pc, #292]	; (8008cf4 <taskGpsNewData+0x248>)
 8008bd0:	fb01 f303 	mul.w	r3, r1, r3
 8008bd4:	4941      	ldr	r1, [pc, #260]	; (8008cdc <taskGpsNewData+0x230>)
 8008bd6:	7809      	ldrb	r1, [r1, #0]
 8008bd8:	460c      	mov	r4, r1
 8008bda:	18d1      	adds	r1, r2, r3
 8008bdc:	4849      	ldr	r0, [pc, #292]	; (8008d04 <taskGpsNewData+0x258>)
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	4613      	mov	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4413      	add	r3, r2
 8008be6:	4423      	add	r3, r4
 8008be8:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                GPS_filter_sum[axis] += GPS_filter[axis][GPS_filter_index];
 8008bec:	4a44      	ldr	r2, [pc, #272]	; (8008d00 <taskGpsNewData+0x254>)
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008bf4:	4b39      	ldr	r3, [pc, #228]	; (8008cdc <taskGpsNewData+0x230>)
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	461c      	mov	r4, r3
 8008bfa:	4842      	ldr	r0, [pc, #264]	; (8008d04 <taskGpsNewData+0x258>)
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4413      	add	r3, r2
 8008c04:	4423      	add	r3, r4
 8008c06:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008c0a:	18ca      	adds	r2, r1, r3
 8008c0c:	493c      	ldr	r1, [pc, #240]	; (8008d00 <taskGpsNewData+0x254>)
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_filtered[axis] = GPS_filter_sum[axis] / GPS_FILTER_VECTOR_LENGTH + (GPS_degree[axis] * 10000000);
 8008c14:	4a3a      	ldr	r2, [pc, #232]	; (8008d00 <taskGpsNewData+0x254>)
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c1c:	4a30      	ldr	r2, [pc, #192]	; (8008ce0 <taskGpsNewData+0x234>)
 8008c1e:	fb82 1203 	smull	r1, r2, r2, r3
 8008c22:	1052      	asrs	r2, r2, #1
 8008c24:	17db      	asrs	r3, r3, #31
 8008c26:	1ad2      	subs	r2, r2, r3
 8008c28:	4931      	ldr	r1, [pc, #196]	; (8008cf0 <taskGpsNewData+0x244>)
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008c30:	4935      	ldr	r1, [pc, #212]	; (8008d08 <taskGpsNewData+0x25c>)
 8008c32:	fb01 f303 	mul.w	r3, r1, r3
 8008c36:	441a      	add	r2, r3
 8008c38:	4934      	ldr	r1, [pc, #208]	; (8008d0c <taskGpsNewData+0x260>)
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (nav_mode == NAV_MODE_POSHOLD) {             // we use gps averaging only in poshold mode...
 8008c40:	4b33      	ldr	r3, [pc, #204]	; (8008d10 <taskGpsNewData+0x264>)
 8008c42:	f993 3000 	ldrsb.w	r3, [r3]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d115      	bne.n	8008c76 <taskGpsNewData+0x1ca>
                    if (fraction3[axis] > 1 && fraction3[axis] < 999)
 8008c4a:	4a2c      	ldr	r2, [pc, #176]	; (8008cfc <taskGpsNewData+0x250>)
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d90f      	bls.n	8008c76 <taskGpsNewData+0x1ca>
 8008c56:	4a29      	ldr	r2, [pc, #164]	; (8008cfc <taskGpsNewData+0x250>)
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c5e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d807      	bhi.n	8008c76 <taskGpsNewData+0x1ca>
                        GPS_coord[axis] = GPS_filtered[axis];
 8008c66:	4a29      	ldr	r2, [pc, #164]	; (8008d0c <taskGpsNewData+0x260>)
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008c6e:	491d      	ldr	r1, [pc, #116]	; (8008ce4 <taskGpsNewData+0x238>)
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (axis = 0; axis < 2; axis++) {
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	617b      	str	r3, [r7, #20]
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	f77f af5c 	ble.w	8008b3c <taskGpsNewData+0x90>
                }
            }
#endif
            // dTnav calculation
            // Time for calculating x,y speed and navigation pids
            dTnav = (float)(pif_cumulative_timer1ms - nav_loopTimer) / 1000.0f;
 8008c84:	4b10      	ldr	r3, [pc, #64]	; (8008cc8 <taskGpsNewData+0x21c>)
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	4b22      	ldr	r3, [pc, #136]	; (8008d14 <taskGpsNewData+0x268>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	ee07 3a90 	vmov	s15, r3
 8008c92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c96:	eddf 6a20 	vldr	s13, [pc, #128]	; 8008d18 <taskGpsNewData+0x26c>
 8008c9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c9e:	4b1f      	ldr	r3, [pc, #124]	; (8008d1c <taskGpsNewData+0x270>)
 8008ca0:	edc3 7a00 	vstr	s15, [r3]
            nav_loopTimer = pif_cumulative_timer1ms;
 8008ca4:	4b08      	ldr	r3, [pc, #32]	; (8008cc8 <taskGpsNewData+0x21c>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a1a      	ldr	r2, [pc, #104]	; (8008d14 <taskGpsNewData+0x268>)
 8008caa:	6013      	str	r3, [r2, #0]
            // prevent runup from bad GPS
            dTnav = min(dTnav, 1.0f);
 8008cac:	4b1b      	ldr	r3, [pc, #108]	; (8008d1c <taskGpsNewData+0x270>)
 8008cae:	edd3 7a00 	vldr	s15, [r3]
 8008cb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cbe:	d52f      	bpl.n	8008d20 <taskGpsNewData+0x274>
 8008cc0:	4b16      	ldr	r3, [pc, #88]	; (8008d1c <taskGpsNewData+0x270>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	e02e      	b.n	8008d24 <taskGpsNewData+0x278>
 8008cc6:	bf00      	nop
 8008cc8:	20001df8 	.word	0x20001df8
 8008ccc:	20000f84 	.word	0x20000f84
 8008cd0:	2000183a 	.word	0x2000183a
 8008cd4:	2000174c 	.word	0x2000174c
 8008cd8:	20001830 	.word	0x20001830
 8008cdc:	20001352 	.word	0x20001352
 8008ce0:	66666667 	.word	0x66666667
 8008ce4:	20001810 	.word	0x20001810
 8008ce8:	20001384 	.word	0x20001384
 8008cec:	6b5fca6b 	.word	0x6b5fca6b
 8008cf0:	20001394 	.word	0x20001394
 8008cf4:	ff676980 	.word	0xff676980
 8008cf8:	68db8bad 	.word	0x68db8bad
 8008cfc:	2000139c 	.word	0x2000139c
 8008d00:	2000137c 	.word	0x2000137c
 8008d04:	20001354 	.word	0x20001354
 8008d08:	00989680 	.word	0x00989680
 8008d0c:	2000138c 	.word	0x2000138c
 8008d10:	2000184c 	.word	0x2000184c
 8008d14:	200013a8 	.word	0x200013a8
 8008d18:	447a0000 	.word	0x447a0000
 8008d1c:	20001324 	.word	0x20001324
 8008d20:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008d24:	4a4a      	ldr	r2, [pc, #296]	; (8008e50 <taskGpsNewData+0x3a4>)
 8008d26:	6013      	str	r3, [r2, #0]

            // calculate distance and bearings for gui and other stuff continously - From home to copter
            GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_home[LAT], &GPS_home[LON], &dist, &dir);
 8008d28:	f107 0308 	add.w	r3, r7, #8
 8008d2c:	9301      	str	r3, [sp, #4]
 8008d2e:	f107 030c 	add.w	r3, r7, #12
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	4b47      	ldr	r3, [pc, #284]	; (8008e54 <taskGpsNewData+0x3a8>)
 8008d36:	4a48      	ldr	r2, [pc, #288]	; (8008e58 <taskGpsNewData+0x3ac>)
 8008d38:	4948      	ldr	r1, [pc, #288]	; (8008e5c <taskGpsNewData+0x3b0>)
 8008d3a:	4849      	ldr	r0, [pc, #292]	; (8008e60 <taskGpsNewData+0x3b4>)
 8008d3c:	f000 fad8 	bl	80092f0 <GPS_distance_cm_bearing>
            GPS_distanceToHome = dist / 100;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4a48      	ldr	r2, [pc, #288]	; (8008e64 <taskGpsNewData+0x3b8>)
 8008d44:	fb82 1203 	smull	r1, r2, r2, r3
 8008d48:	1152      	asrs	r2, r2, #5
 8008d4a:	17db      	asrs	r3, r3, #31
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	4b45      	ldr	r3, [pc, #276]	; (8008e68 <taskGpsNewData+0x3bc>)
 8008d52:	801a      	strh	r2, [r3, #0]
            GPS_directionToHome = dir / 100;
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	4a43      	ldr	r2, [pc, #268]	; (8008e64 <taskGpsNewData+0x3b8>)
 8008d58:	fb82 1203 	smull	r1, r2, r2, r3
 8008d5c:	1152      	asrs	r2, r2, #5
 8008d5e:	17db      	asrs	r3, r3, #31
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	b21a      	sxth	r2, r3
 8008d64:	4b41      	ldr	r3, [pc, #260]	; (8008e6c <taskGpsNewData+0x3c0>)
 8008d66:	801a      	strh	r2, [r3, #0]

            if (!f.GPS_FIX_HOME) {      // If we don't have home set, do not display anything
 8008d68:	4b41      	ldr	r3, [pc, #260]	; (8008e70 <taskGpsNewData+0x3c4>)
 8008d6a:	7b1b      	ldrb	r3, [r3, #12]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d105      	bne.n	8008d7c <taskGpsNewData+0x2d0>
                GPS_distanceToHome = 0;
 8008d70:	4b3d      	ldr	r3, [pc, #244]	; (8008e68 <taskGpsNewData+0x3bc>)
 8008d72:	2200      	movs	r2, #0
 8008d74:	801a      	strh	r2, [r3, #0]
                GPS_directionToHome = 0;
 8008d76:	4b3d      	ldr	r3, [pc, #244]	; (8008e6c <taskGpsNewData+0x3c0>)
 8008d78:	2200      	movs	r2, #0
 8008d7a:	801a      	strh	r2, [r3, #0]
            }

            // calculate the current velocity based on gps coordinates continously to get a valid speed at the moment when we start navigating
            GPS_calc_velocity();
 8008d7c:	f000 fb26 	bl	80093cc <GPS_calc_velocity>

            if (f.GPS_HOLD_MODE || f.GPS_HOME_MODE) { // ok we are navigating
 8008d80:	4b3b      	ldr	r3, [pc, #236]	; (8008e70 <taskGpsNewData+0x3c4>)
 8008d82:	7a1b      	ldrb	r3, [r3, #8]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d103      	bne.n	8008d90 <taskGpsNewData+0x2e4>
 8008d88:	4b39      	ldr	r3, [pc, #228]	; (8008e70 <taskGpsNewData+0x3c4>)
 8008d8a:	79db      	ldrb	r3, [r3, #7]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d056      	beq.n	8008e3e <taskGpsNewData+0x392>
                // do gps nav calculations here, these are common for nav and poshold
                GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON], &wp_distance, &target_bearing);
 8008d90:	4b38      	ldr	r3, [pc, #224]	; (8008e74 <taskGpsNewData+0x3c8>)
 8008d92:	9301      	str	r3, [sp, #4]
 8008d94:	4b38      	ldr	r3, [pc, #224]	; (8008e78 <taskGpsNewData+0x3cc>)
 8008d96:	9300      	str	r3, [sp, #0]
 8008d98:	4b38      	ldr	r3, [pc, #224]	; (8008e7c <taskGpsNewData+0x3d0>)
 8008d9a:	4a39      	ldr	r2, [pc, #228]	; (8008e80 <taskGpsNewData+0x3d4>)
 8008d9c:	492f      	ldr	r1, [pc, #188]	; (8008e5c <taskGpsNewData+0x3b0>)
 8008d9e:	4830      	ldr	r0, [pc, #192]	; (8008e60 <taskGpsNewData+0x3b4>)
 8008da0:	f000 faa6 	bl	80092f0 <GPS_distance_cm_bearing>
                GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON]);
 8008da4:	4b2d      	ldr	r3, [pc, #180]	; (8008e5c <taskGpsNewData+0x3b0>)
 8008da6:	4a2e      	ldr	r2, [pc, #184]	; (8008e60 <taskGpsNewData+0x3b4>)
 8008da8:	4934      	ldr	r1, [pc, #208]	; (8008e7c <taskGpsNewData+0x3d0>)
 8008daa:	4835      	ldr	r0, [pc, #212]	; (8008e80 <taskGpsNewData+0x3d4>)
 8008dac:	f000 fb90 	bl	80094d0 <GPS_calc_location_error>

                if (f.FIXED_WING)
 8008db0:	4b2f      	ldr	r3, [pc, #188]	; (8008e70 <taskGpsNewData+0x3c4>)
 8008db2:	7c1b      	ldrb	r3, [r3, #16]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d002      	beq.n	8008dbe <taskGpsNewData+0x312>
                    nav_mode = NAV_MODE_WP; // Planes always navigate in Wp mode.
 8008db8:	4b32      	ldr	r3, [pc, #200]	; (8008e84 <taskGpsNewData+0x3d8>)
 8008dba:	2202      	movs	r2, #2
 8008dbc:	701a      	strb	r2, [r3, #0]

                switch (nav_mode) {
 8008dbe:	4b31      	ldr	r3, [pc, #196]	; (8008e84 <taskGpsNewData+0x3d8>)
 8008dc0:	f993 3000 	ldrsb.w	r3, [r3]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d002      	beq.n	8008dce <taskGpsNewData+0x322>
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d003      	beq.n	8008dd4 <taskGpsNewData+0x328>
 8008dcc:	e03a      	b.n	8008e44 <taskGpsNewData+0x398>
                    case NAV_MODE_POSHOLD:
                        // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
                        GPS_calc_poshold();
 8008dce:	f000 fbab 	bl	8009528 <GPS_calc_poshold>
                        break;
 8008dd2:	e037      	b.n	8008e44 <taskGpsNewData+0x398>

                    case NAV_MODE_WP:
                        speed = GPS_calc_desired_speed(cfg.nav_speed_max, NAV_SLOW_NAV);    // slow navigation
 8008dd4:	4b2c      	ldr	r3, [pc, #176]	; (8008e88 <taskGpsNewData+0x3dc>)
 8008dd6:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 8008dda:	b21b      	sxth	r3, r3
 8008ddc:	2101      	movs	r1, #1
 8008dde:	4618      	mov	r0, r3
 8008de0:	f000 fdb0 	bl	8009944 <GPS_calc_desired_speed>
 8008de4:	4603      	mov	r3, r0
 8008de6:	827b      	strh	r3, [r7, #18]
                        // use error as the desired rate towards the target
                        // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
                        GPS_calc_nav_rate(speed);
 8008de8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f000 fc53 	bl	8009698 <GPS_calc_nav_rate>

                        // Tail control
                        if (cfg.nav_controls_heading) {
 8008df2:	4b25      	ldr	r3, [pc, #148]	; (8008e88 <taskGpsNewData+0x3dc>)
 8008df4:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00a      	beq.n	8008e12 <taskGpsNewData+0x366>
                            if (NAV_TAIL_FIRST) {
                                magHold = wrap_18000(nav_bearing - 18000) / 100;
                            } else {
                                magHold = nav_bearing / 100;
 8008dfc:	4b23      	ldr	r3, [pc, #140]	; (8008e8c <taskGpsNewData+0x3e0>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a18      	ldr	r2, [pc, #96]	; (8008e64 <taskGpsNewData+0x3b8>)
 8008e02:	fb82 1203 	smull	r1, r2, r2, r3
 8008e06:	1152      	asrs	r2, r2, #5
 8008e08:	17db      	asrs	r3, r3, #31
 8008e0a:	1ad3      	subs	r3, r2, r3
 8008e0c:	b21a      	sxth	r2, r3
 8008e0e:	4b20      	ldr	r3, [pc, #128]	; (8008e90 <taskGpsNewData+0x3e4>)
 8008e10:	801a      	strh	r2, [r3, #0]
                            }
                        }
                        // Are we there yet ?(within x meters of the destination)
                        if ((wp_distance <= cfg.gps_wp_radius) || check_missed_wp()) {      // if yes switch to poshold mode
 8008e12:	4b1d      	ldr	r3, [pc, #116]	; (8008e88 <taskGpsNewData+0x3dc>)
 8008e14:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8008e18:	461a      	mov	r2, r3
 8008e1a:	4b17      	ldr	r3, [pc, #92]	; (8008e78 <taskGpsNewData+0x3cc>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	da04      	bge.n	8008e2c <taskGpsNewData+0x380>
 8008e22:	f000 fa45 	bl	80092b0 <check_missed_wp>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00a      	beq.n	8008e42 <taskGpsNewData+0x396>
                            nav_mode = NAV_MODE_POSHOLD;
 8008e2c:	4b15      	ldr	r3, [pc, #84]	; (8008e84 <taskGpsNewData+0x3d8>)
 8008e2e:	2201      	movs	r2, #1
 8008e30:	701a      	strb	r2, [r3, #0]
                            if (NAV_SET_TAKEOFF_HEADING) {
                                magHold = nav_takeoff_bearing;
 8008e32:	4b18      	ldr	r3, [pc, #96]	; (8008e94 <taskGpsNewData+0x3e8>)
 8008e34:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008e38:	4b15      	ldr	r3, [pc, #84]	; (8008e90 <taskGpsNewData+0x3e4>)
 8008e3a:	801a      	strh	r2, [r3, #0]
                            }
                        }
                        break;
 8008e3c:	e001      	b.n	8008e42 <taskGpsNewData+0x396>
                }
            }                   //end of gps calcs
 8008e3e:	bf00      	nop
 8008e40:	e000      	b.n	8008e44 <taskGpsNewData+0x398>
                        break;
 8008e42:	bf00      	nop
        }

    return 0;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	371c      	adds	r7, #28
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd90      	pop	{r4, r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	20001324 	.word	0x20001324
 8008e54:	2000181c 	.word	0x2000181c
 8008e58:	20001818 	.word	0x20001818
 8008e5c:	20001814 	.word	0x20001814
 8008e60:	20001810 	.word	0x20001810
 8008e64:	51eb851f 	.word	0x51eb851f
 8008e68:	20001832 	.word	0x20001832
 8008e6c:	20001834 	.word	0x20001834
 8008e70:	2000174c 	.word	0x2000174c
 8008e74:	20001340 	.word	0x20001340
 8008e78:	2000134c 	.word	0x2000134c
 8008e7c:	2000133c 	.word	0x2000133c
 8008e80:	20001338 	.word	0x20001338
 8008e84:	2000184c 	.word	0x2000184c
 8008e88:	20000e08 	.word	0x20000e08
 8008e8c:	200013a0 	.word	0x200013a0
 8008e90:	20001a80 	.word	0x20001a80
 8008e94:	200013a4 	.word	0x200013a4

08008e98 <GPS_reset_home_position>:

void GPS_reset_home_position(void)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	af00      	add	r7, sp, #0
    if (f.GPS_FIX && GPS_numSat >= 5) {
 8008e9c:	4b11      	ldr	r3, [pc, #68]	; (8008ee4 <GPS_reset_home_position+0x4c>)
 8008e9e:	7adb      	ldrb	r3, [r3, #11]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d01d      	beq.n	8008ee0 <GPS_reset_home_position+0x48>
 8008ea4:	4b10      	ldr	r3, [pc, #64]	; (8008ee8 <GPS_reset_home_position+0x50>)
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	2b04      	cmp	r3, #4
 8008eaa:	d919      	bls.n	8008ee0 <GPS_reset_home_position+0x48>
        GPS_home[LAT] = GPS_coord[LAT];
 8008eac:	4b0f      	ldr	r3, [pc, #60]	; (8008eec <GPS_reset_home_position+0x54>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a0f      	ldr	r2, [pc, #60]	; (8008ef0 <GPS_reset_home_position+0x58>)
 8008eb2:	6013      	str	r3, [r2, #0]
        GPS_home[LON] = GPS_coord[LON];
 8008eb4:	4b0d      	ldr	r3, [pc, #52]	; (8008eec <GPS_reset_home_position+0x54>)
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	4a0d      	ldr	r2, [pc, #52]	; (8008ef0 <GPS_reset_home_position+0x58>)
 8008eba:	6053      	str	r3, [r2, #4]
        GPS_calc_longitude_scaling(GPS_coord[LAT]); // need an initial value for distance and bearing calc
 8008ebc:	4b0b      	ldr	r3, [pc, #44]	; (8008eec <GPS_reset_home_position+0x54>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 f96d 	bl	80091a0 <GPS_calc_longitude_scaling>
        nav_takeoff_bearing = heading;              // save takeoff heading
 8008ec6:	4b0b      	ldr	r3, [pc, #44]	; (8008ef4 <GPS_reset_home_position+0x5c>)
 8008ec8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008ecc:	4b0a      	ldr	r3, [pc, #40]	; (8008ef8 <GPS_reset_home_position+0x60>)
 8008ece:	801a      	strh	r2, [r3, #0]
        //Set ground altitude
        GPS_home[ALT] = GPS_altitude;
 8008ed0:	4b0a      	ldr	r3, [pc, #40]	; (8008efc <GPS_reset_home_position+0x64>)
 8008ed2:	881b      	ldrh	r3, [r3, #0]
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	4b06      	ldr	r3, [pc, #24]	; (8008ef0 <GPS_reset_home_position+0x58>)
 8008ed8:	609a      	str	r2, [r3, #8]
        f.GPS_FIX_HOME = 1;
 8008eda:	4b02      	ldr	r3, [pc, #8]	; (8008ee4 <GPS_reset_home_position+0x4c>)
 8008edc:	2201      	movs	r2, #1
 8008ede:	731a      	strb	r2, [r3, #12]
    }
}
 8008ee0:	bf00      	nop
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	2000174c 	.word	0x2000174c
 8008ee8:	20001830 	.word	0x20001830
 8008eec:	20001810 	.word	0x20001810
 8008ef0:	20001818 	.word	0x20001818
 8008ef4:	20001a7e 	.word	0x20001a7e
 8008ef8:	200013a4 	.word	0x200013a4
 8008efc:	20001836 	.word	0x20001836

08008f00 <GPS_reset_nav>:

// reset navigation (stop the navigation processor, and clear nav)
void GPS_reset_nav(void)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
    int i;

    for (i = 0; i < 2; i++) {
 8008f06:	2300      	movs	r3, #0
 8008f08:	607b      	str	r3, [r7, #4]
 8008f0a:	e02f      	b.n	8008f6c <GPS_reset_nav+0x6c>
        GPS_angle[i] = 0;
 8008f0c:	4a1e      	ldr	r2, [pc, #120]	; (8008f88 <GPS_reset_nav+0x88>)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2100      	movs	r1, #0
 8008f12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav_rated[i] = 0;
 8008f16:	4a1d      	ldr	r2, [pc, #116]	; (8008f8c <GPS_reset_nav+0x8c>)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav[i] = 0;
 8008f20:	4a1b      	ldr	r2, [pc, #108]	; (8008f90 <GPS_reset_nav+0x90>)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2100      	movs	r1, #0
 8008f26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        reset_PID(&posholdPID[i]);
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4413      	add	r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4a17      	ldr	r2, [pc, #92]	; (8008f94 <GPS_reset_nav+0x94>)
 8008f36:	4413      	add	r3, r2
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7ff fda1 	bl	8008a80 <reset_PID>
        reset_PID(&poshold_ratePID[i]);
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	4613      	mov	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4413      	add	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4a13      	ldr	r2, [pc, #76]	; (8008f98 <GPS_reset_nav+0x98>)
 8008f4a:	4413      	add	r3, r2
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7ff fd97 	bl	8008a80 <reset_PID>
        reset_PID(&navPID[i]);
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	4613      	mov	r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4413      	add	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	4a0f      	ldr	r2, [pc, #60]	; (8008f9c <GPS_reset_nav+0x9c>)
 8008f5e:	4413      	add	r3, r2
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7ff fd8d 	bl	8008a80 <reset_PID>
    for (i = 0; i < 2; i++) {
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	607b      	str	r3, [r7, #4]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	ddcc      	ble.n	8008f0c <GPS_reset_nav+0xc>
    }

    if (f.FIXED_WING)
 8008f72:	4b0b      	ldr	r3, [pc, #44]	; (8008fa0 <GPS_reset_nav+0xa0>)
 8008f74:	7c1b      	ldrb	r3, [r3, #16]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d001      	beq.n	8008f7e <GPS_reset_nav+0x7e>
        fw_nav_reset();
 8008f7a:	f7fe f8e5 	bl	8007148 <fw_nav_reset>

}
 8008f7e:	bf00      	nop
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	2000183c 	.word	0x2000183c
 8008f8c:	20001848 	.word	0x20001848
 8008f90:	20001844 	.word	0x20001844
 8008f94:	200012ac 	.word	0x200012ac
 8008f98:	200012d4 	.word	0x200012d4
 8008f9c:	200012fc 	.word	0x200012fc
 8008fa0:	2000174c 	.word	0x2000174c

08008fa4 <gpsSetPIDs>:

// Get the relevant P I D values and set the PID controllers
void gpsSetPIDs(void)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	af00      	add	r7, sp, #0
    posholdPID_PARAM.kP = (float)cfg.P8[PIDPOS] / 100.0f;
 8008fa8:	4b50      	ldr	r3, [pc, #320]	; (80090ec <gpsSetPIDs+0x148>)
 8008faa:	795b      	ldrb	r3, [r3, #5]
 8008fac:	ee07 3a90 	vmov	s15, r3
 8008fb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008fb4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80090f0 <gpsSetPIDs+0x14c>
 8008fb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008fbc:	4b4d      	ldr	r3, [pc, #308]	; (80090f4 <gpsSetPIDs+0x150>)
 8008fbe:	edc3 7a00 	vstr	s15, [r3]
    posholdPID_PARAM.kI = (float)cfg.I8[PIDPOS] / 100.0f;
 8008fc2:	4b4a      	ldr	r3, [pc, #296]	; (80090ec <gpsSetPIDs+0x148>)
 8008fc4:	7bdb      	ldrb	r3, [r3, #15]
 8008fc6:	ee07 3a90 	vmov	s15, r3
 8008fca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008fce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80090f0 <gpsSetPIDs+0x14c>
 8008fd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008fd6:	4b47      	ldr	r3, [pc, #284]	; (80090f4 <gpsSetPIDs+0x150>)
 8008fd8:	edc3 7a01 	vstr	s15, [r3, #4]
    posholdPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008fdc:	4b45      	ldr	r3, [pc, #276]	; (80090f4 <gpsSetPIDs+0x150>)
 8008fde:	4a46      	ldr	r2, [pc, #280]	; (80090f8 <gpsSetPIDs+0x154>)
 8008fe0:	60da      	str	r2, [r3, #12]

    poshold_ratePID_PARAM.kP = (float)cfg.P8[PIDPOSR] / 10.0f;
 8008fe2:	4b42      	ldr	r3, [pc, #264]	; (80090ec <gpsSetPIDs+0x148>)
 8008fe4:	799b      	ldrb	r3, [r3, #6]
 8008fe6:	ee07 3a90 	vmov	s15, r3
 8008fea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008fee:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008ff6:	4b41      	ldr	r3, [pc, #260]	; (80090fc <gpsSetPIDs+0x158>)
 8008ff8:	edc3 7a00 	vstr	s15, [r3]
    poshold_ratePID_PARAM.kI = (float)cfg.I8[PIDPOSR] / 100.0f;
 8008ffc:	4b3b      	ldr	r3, [pc, #236]	; (80090ec <gpsSetPIDs+0x148>)
 8008ffe:	7c1b      	ldrb	r3, [r3, #16]
 8009000:	ee07 3a90 	vmov	s15, r3
 8009004:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009008:	eddf 6a39 	vldr	s13, [pc, #228]	; 80090f0 <gpsSetPIDs+0x14c>
 800900c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009010:	4b3a      	ldr	r3, [pc, #232]	; (80090fc <gpsSetPIDs+0x158>)
 8009012:	edc3 7a01 	vstr	s15, [r3, #4]
    poshold_ratePID_PARAM.kD = (float)cfg.D8[PIDPOSR] / 1000.0f;
 8009016:	4b35      	ldr	r3, [pc, #212]	; (80090ec <gpsSetPIDs+0x148>)
 8009018:	7e9b      	ldrb	r3, [r3, #26]
 800901a:	ee07 3a90 	vmov	s15, r3
 800901e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009022:	eddf 6a37 	vldr	s13, [pc, #220]	; 8009100 <gpsSetPIDs+0x15c>
 8009026:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800902a:	4b34      	ldr	r3, [pc, #208]	; (80090fc <gpsSetPIDs+0x158>)
 800902c:	edc3 7a02 	vstr	s15, [r3, #8]
    poshold_ratePID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8009030:	4b32      	ldr	r3, [pc, #200]	; (80090fc <gpsSetPIDs+0x158>)
 8009032:	4a31      	ldr	r2, [pc, #196]	; (80090f8 <gpsSetPIDs+0x154>)
 8009034:	60da      	str	r2, [r3, #12]

    navPID_PARAM.kP = (float)cfg.P8[PIDNAVR] / 10.0f;
 8009036:	4b2d      	ldr	r3, [pc, #180]	; (80090ec <gpsSetPIDs+0x148>)
 8009038:	79db      	ldrb	r3, [r3, #7]
 800903a:	ee07 3a90 	vmov	s15, r3
 800903e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009042:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8009046:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800904a:	4b2e      	ldr	r3, [pc, #184]	; (8009104 <gpsSetPIDs+0x160>)
 800904c:	edc3 7a00 	vstr	s15, [r3]
    navPID_PARAM.kI = (float)cfg.I8[PIDNAVR] / 100.0f;
 8009050:	4b26      	ldr	r3, [pc, #152]	; (80090ec <gpsSetPIDs+0x148>)
 8009052:	7c5b      	ldrb	r3, [r3, #17]
 8009054:	ee07 3a90 	vmov	s15, r3
 8009058:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800905c:	eddf 6a24 	vldr	s13, [pc, #144]	; 80090f0 <gpsSetPIDs+0x14c>
 8009060:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009064:	4b27      	ldr	r3, [pc, #156]	; (8009104 <gpsSetPIDs+0x160>)
 8009066:	edc3 7a01 	vstr	s15, [r3, #4]
    navPID_PARAM.kD = (float)cfg.D8[PIDNAVR] / 1000.0f;
 800906a:	4b20      	ldr	r3, [pc, #128]	; (80090ec <gpsSetPIDs+0x148>)
 800906c:	7edb      	ldrb	r3, [r3, #27]
 800906e:	ee07 3a90 	vmov	s15, r3
 8009072:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009076:	eddf 6a22 	vldr	s13, [pc, #136]	; 8009100 <gpsSetPIDs+0x15c>
 800907a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800907e:	4b21      	ldr	r3, [pc, #132]	; (8009104 <gpsSetPIDs+0x160>)
 8009080:	edc3 7a02 	vstr	s15, [r3, #8]
    navPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8009084:	4b1f      	ldr	r3, [pc, #124]	; (8009104 <gpsSetPIDs+0x160>)
 8009086:	4a1c      	ldr	r2, [pc, #112]	; (80090f8 <gpsSetPIDs+0x154>)
 8009088:	60da      	str	r2, [r3, #12]

    if (f.FIXED_WING) {
 800908a:	4b1f      	ldr	r3, [pc, #124]	; (8009108 <gpsSetPIDs+0x164>)
 800908c:	7c1b      	ldrb	r3, [r3, #16]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d026      	beq.n	80090e0 <gpsSetPIDs+0x13c>
        altPID_PARAM.kP   = (float)cfg.P8[PIDALT] / 10.0f;
 8009092:	4b16      	ldr	r3, [pc, #88]	; (80090ec <gpsSetPIDs+0x148>)
 8009094:	791b      	ldrb	r3, [r3, #4]
 8009096:	ee07 3a90 	vmov	s15, r3
 800909a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800909e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80090a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80090a6:	4b19      	ldr	r3, [pc, #100]	; (800910c <gpsSetPIDs+0x168>)
 80090a8:	edc3 7a00 	vstr	s15, [r3]
        altPID_PARAM.kI   = (float)cfg.I8[PIDALT] / 100.0f;
 80090ac:	4b0f      	ldr	r3, [pc, #60]	; (80090ec <gpsSetPIDs+0x148>)
 80090ae:	7b9b      	ldrb	r3, [r3, #14]
 80090b0:	ee07 3a90 	vmov	s15, r3
 80090b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80090b8:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80090f0 <gpsSetPIDs+0x14c>
 80090bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80090c0:	4b12      	ldr	r3, [pc, #72]	; (800910c <gpsSetPIDs+0x168>)
 80090c2:	edc3 7a01 	vstr	s15, [r3, #4]
        altPID_PARAM.kD   = (float)cfg.D8[PIDALT] / 1000.0f;
 80090c6:	4b09      	ldr	r3, [pc, #36]	; (80090ec <gpsSetPIDs+0x148>)
 80090c8:	7e1b      	ldrb	r3, [r3, #24]
 80090ca:	ee07 3a90 	vmov	s15, r3
 80090ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80090d2:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8009100 <gpsSetPIDs+0x15c>
 80090d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80090da:	4b0c      	ldr	r3, [pc, #48]	; (800910c <gpsSetPIDs+0x168>)
 80090dc:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 80090e0:	bf00      	nop
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	20000e08 	.word	0x20000e08
 80090f0:	42c80000 	.word	0x42c80000
 80090f4:	2000126c 	.word	0x2000126c
 80090f8:	44fa0000 	.word	0x44fa0000
 80090fc:	2000127c 	.word	0x2000127c
 8009100:	447a0000 	.word	0x447a0000
 8009104:	2000128c 	.word	0x2000128c
 8009108:	2000174c 	.word	0x2000174c
 800910c:	2000129c 	.word	0x2000129c

08009110 <_EvtPrintFrame>:

static void _EvtPrintFrame(char* p_frame)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
    actLed0State(ON);
 8009118:	2001      	movs	r0, #1
 800911a:	f7f8 ffaf 	bl	800207c <actLed0State>
#ifndef __PIF_NO_LOG__
    pifLog_Print(LT_NONE, p_frame);
 800911e:	6879      	ldr	r1, [r7, #4]
 8009120:	2000      	movs	r0, #0
 8009122:	f00a fcdb 	bl	8013adc <pifLog_Print>
#else
    (void)p_frame;
#endif
    actLed0State(OFF);
 8009126:	2000      	movs	r0, #0
 8009128:	f7f8 ffa8 	bl	800207c <actLed0State>
}
 800912c:	bf00      	nop
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <gpsSetPassthrough>:

int8_t gpsSetPassthrough(void)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	af00      	add	r7, sp, #0
    static bool state = false;

    if (gpsData.state != GPS_RECEIVINGDATA)
 8009138:	4b14      	ldr	r3, [pc, #80]	; (800918c <gpsSetPassthrough+0x58>)
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	2b05      	cmp	r3, #5
 800913e:	d002      	beq.n	8009146 <gpsSetPassthrough+0x12>
        return -1;
 8009140:	f04f 33ff 	mov.w	r3, #4294967295
 8009144:	e020      	b.n	8009188 <gpsSetPassthrough+0x54>

    actLed0State(OFF);
 8009146:	2000      	movs	r0, #0
 8009148:	f7f8 ff98 	bl	800207c <actLed0State>
    actLed1State(OFF);
 800914c:	2000      	movs	r0, #0
 800914e:	f7f8 ffc1 	bl	80020d4 <actLed1State>

    if (mcfg.gps_type == GPS_NMEA) {
 8009152:	4b0f      	ldr	r3, [pc, #60]	; (8009190 <gpsSetPassthrough+0x5c>)
 8009154:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8009158:	2b00      	cmp	r3, #0
 800915a:	d113      	bne.n	8009184 <gpsSetPassthrough+0x50>
        if (state) {
 800915c:	4b0d      	ldr	r3, [pc, #52]	; (8009194 <gpsSetPassthrough+0x60>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d007      	beq.n	8009174 <gpsSetPassthrough+0x40>
            gps_ublox._gps.evt_frame = NULL;
 8009164:	4b0c      	ldr	r3, [pc, #48]	; (8009198 <gpsSetPassthrough+0x64>)
 8009166:	2200      	movs	r2, #0
 8009168:	611a      	str	r2, [r3, #16]
            state = false;
 800916a:	4b0a      	ldr	r3, [pc, #40]	; (8009194 <gpsSetPassthrough+0x60>)
 800916c:	2200      	movs	r2, #0
 800916e:	701a      	strb	r2, [r3, #0]
            return 0;
 8009170:	2300      	movs	r3, #0
 8009172:	e009      	b.n	8009188 <gpsSetPassthrough+0x54>
        }
        else {
            gps_ublox._gps.evt_frame = _EvtPrintFrame;
 8009174:	4b08      	ldr	r3, [pc, #32]	; (8009198 <gpsSetPassthrough+0x64>)
 8009176:	4a09      	ldr	r2, [pc, #36]	; (800919c <gpsSetPassthrough+0x68>)
 8009178:	611a      	str	r2, [r3, #16]
            state = true;
 800917a:	4b06      	ldr	r3, [pc, #24]	; (8009194 <gpsSetPassthrough+0x60>)
 800917c:	2201      	movs	r2, #1
 800917e:	701a      	strb	r2, [r3, #0]
            return 1;
 8009180:	2301      	movs	r3, #1
 8009182:	e001      	b.n	8009188 <gpsSetPassthrough+0x54>
        }
    }
    return -1;
 8009184:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009188:	4618      	mov	r0, r3
 800918a:	bd80      	pop	{r7, pc}
 800918c:	20000f84 	.word	0x20000f84
 8009190:	2000089c 	.word	0x2000089c
 8009194:	200013ac 	.word	0x200013ac
 8009198:	20000fa8 	.word	0x20000fa8
 800919c:	08009111 	.word	0x08009111

080091a0 <GPS_calc_longitude_scaling>:
////////////////////////////////////////////////////////////////////////////////////
// this is used to offset the shrinking longitude as we go towards the poles
// It's ok to calculate this once per waypoint setting, since it changes a little within the reach of a multicopter
//
static void GPS_calc_longitude_scaling(int32_t lat)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
    float rads = (abs((float)lat) / 10000000.0f) * 0.0174532925f;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	ee07 3a90 	vmov	s15, r3
 80091ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80091b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ba:	dd05      	ble.n	80091c8 <GPS_calc_longitude_scaling+0x28>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	ee07 3a90 	vmov	s15, r3
 80091c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091c6:	e006      	b.n	80091d6 <GPS_calc_longitude_scaling+0x36>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	ee07 3a90 	vmov	s15, r3
 80091ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091d2:	eef1 7a67 	vneg.f32	s15, s15
 80091d6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8009204 <GPS_calc_longitude_scaling+0x64>
 80091da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80091de:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8009208 <GPS_calc_longitude_scaling+0x68>
 80091e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091e6:	edc7 7a03 	vstr	s15, [r7, #12]
    GPS_scaleLonDown = cosf(rads);
 80091ea:	ed97 0a03 	vldr	s0, [r7, #12]
 80091ee:	f01b f943 	bl	8024478 <cosf>
 80091f2:	eef0 7a40 	vmov.f32	s15, s0
 80091f6:	4b05      	ldr	r3, [pc, #20]	; (800920c <GPS_calc_longitude_scaling+0x6c>)
 80091f8:	edc3 7a00 	vstr	s15, [r3]
}
 80091fc:	bf00      	nop
 80091fe:	3710      	adds	r7, #16
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	4b189680 	.word	0x4b189680
 8009208:	3c8efa35 	.word	0x3c8efa35
 800920c:	20000028 	.word	0x20000028

08009210 <GPS_set_next_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Sets the waypoint to navigate, reset neccessary variables and calculate initial values
//
void GPS_set_next_wp(int32_t *lat, int32_t *lon)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af02      	add	r7, sp, #8
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
    GPS_WP[LAT] = *lat;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a19      	ldr	r2, [pc, #100]	; (8009284 <GPS_set_next_wp+0x74>)
 8009220:	6013      	str	r3, [r2, #0]
    GPS_WP[LON] = *lon;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a17      	ldr	r2, [pc, #92]	; (8009284 <GPS_set_next_wp+0x74>)
 8009228:	6053      	str	r3, [r2, #4]

    GPS_calc_longitude_scaling(*lat);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4618      	mov	r0, r3
 8009230:	f7ff ffb6 	bl	80091a0 <GPS_calc_longitude_scaling>
    if (f.CRUISE_MODE)
 8009234:	4b14      	ldr	r3, [pc, #80]	; (8009288 <GPS_set_next_wp+0x78>)
 8009236:	7d1b      	ldrb	r3, [r3, #20]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d001      	beq.n	8009240 <GPS_set_next_wp+0x30>
        fw_FlyTo();  // PatrikE CruiseMode version
 800923c:	f7fd ffc0 	bl	80071c0 <fw_FlyTo>

    GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON], &wp_distance, &target_bearing);
 8009240:	4b12      	ldr	r3, [pc, #72]	; (800928c <GPS_set_next_wp+0x7c>)
 8009242:	9301      	str	r3, [sp, #4]
 8009244:	4b12      	ldr	r3, [pc, #72]	; (8009290 <GPS_set_next_wp+0x80>)
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	4b12      	ldr	r3, [pc, #72]	; (8009294 <GPS_set_next_wp+0x84>)
 800924a:	4a0e      	ldr	r2, [pc, #56]	; (8009284 <GPS_set_next_wp+0x74>)
 800924c:	4912      	ldr	r1, [pc, #72]	; (8009298 <GPS_set_next_wp+0x88>)
 800924e:	4813      	ldr	r0, [pc, #76]	; (800929c <GPS_set_next_wp+0x8c>)
 8009250:	f000 f84e 	bl	80092f0 <GPS_distance_cm_bearing>

    nav_bearing = target_bearing;
 8009254:	4b0d      	ldr	r3, [pc, #52]	; (800928c <GPS_set_next_wp+0x7c>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a11      	ldr	r2, [pc, #68]	; (80092a0 <GPS_set_next_wp+0x90>)
 800925a:	6013      	str	r3, [r2, #0]
    GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON]);
 800925c:	4b0e      	ldr	r3, [pc, #56]	; (8009298 <GPS_set_next_wp+0x88>)
 800925e:	4a0f      	ldr	r2, [pc, #60]	; (800929c <GPS_set_next_wp+0x8c>)
 8009260:	490c      	ldr	r1, [pc, #48]	; (8009294 <GPS_set_next_wp+0x84>)
 8009262:	4808      	ldr	r0, [pc, #32]	; (8009284 <GPS_set_next_wp+0x74>)
 8009264:	f000 f934 	bl	80094d0 <GPS_calc_location_error>
    original_target_bearing = target_bearing;
 8009268:	4b08      	ldr	r3, [pc, #32]	; (800928c <GPS_set_next_wp+0x7c>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a0d      	ldr	r2, [pc, #52]	; (80092a4 <GPS_set_next_wp+0x94>)
 800926e:	6013      	str	r3, [r2, #0]
    waypoint_speed_gov = cfg.nav_speed_min;
 8009270:	4b0d      	ldr	r3, [pc, #52]	; (80092a8 <GPS_set_next_wp+0x98>)
 8009272:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8009276:	b21a      	sxth	r2, r3
 8009278:	4b0c      	ldr	r3, [pc, #48]	; (80092ac <GPS_set_next_wp+0x9c>)
 800927a:	801a      	strh	r2, [r3, #0]
}
 800927c:	bf00      	nop
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	20001338 	.word	0x20001338
 8009288:	2000174c 	.word	0x2000174c
 800928c:	20001340 	.word	0x20001340
 8009290:	2000134c 	.word	0x2000134c
 8009294:	2000133c 	.word	0x2000133c
 8009298:	20001814 	.word	0x20001814
 800929c:	20001810 	.word	0x20001810
 80092a0:	200013a0 	.word	0x200013a0
 80092a4:	20001344 	.word	0x20001344
 80092a8:	20000e08 	.word	0x20000e08
 80092ac:	20001350 	.word	0x20001350

080092b0 <check_missed_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Check if we missed the destination somehow
//
static bool check_missed_wp(void)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
    int32_t temp;
    temp = target_bearing - original_target_bearing;
 80092b6:	4b0c      	ldr	r3, [pc, #48]	; (80092e8 <check_missed_wp+0x38>)
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	4b0c      	ldr	r3, [pc, #48]	; (80092ec <check_missed_wp+0x3c>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	1ad3      	subs	r3, r2, r3
 80092c0:	607b      	str	r3, [r7, #4]
    temp = wrap_18000(temp);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fb9a 	bl	80099fc <wrap_18000>
 80092c8:	6078      	str	r0, [r7, #4]
    return (abs(temp) > 10000); // we passed the waypoint by 100 degrees
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	bfb8      	it	lt
 80092d0:	425b      	neglt	r3, r3
 80092d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80092d6:	4293      	cmp	r3, r2
 80092d8:	bfcc      	ite	gt
 80092da:	2301      	movgt	r3, #1
 80092dc:	2300      	movle	r3, #0
 80092de:	b2db      	uxtb	r3, r3
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	20001340 	.word	0x20001340
 80092ec:	20001344 	.word	0x20001344

080092f0 <GPS_distance_cm_bearing>:

////////////////////////////////////////////////////////////////////////////////////
// Get distance between two points in cm
// Get bearing from pos1 to pos2, returns an 1deg = 100 precision
static void GPS_distance_cm_bearing(int32_t *lat1, int32_t *lon1, int32_t *lat2, int32_t *lon2, int32_t *dist, int32_t *bearing)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b086      	sub	sp, #24
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
 80092fc:	603b      	str	r3, [r7, #0]
    float dLat = *lat2 - *lat1; // difference of latitude in 1/10 000 000 degrees
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	ee07 3a90 	vmov	s15, r3
 800930c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009310:	edc7 7a05 	vstr	s15, [r7, #20]
    float dLon = (float)(*lon2 - *lon1) * GPS_scaleLonDown;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	ee07 3a90 	vmov	s15, r3
 8009322:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009326:	4b25      	ldr	r3, [pc, #148]	; (80093bc <GPS_distance_cm_bearing+0xcc>)
 8009328:	edd3 7a00 	vldr	s15, [r3]
 800932c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009330:	edc7 7a04 	vstr	s15, [r7, #16]
    *dist = sqrtf(sq(dLat) + sq(dLon)) * 1.113195f;
 8009334:	edd7 7a05 	vldr	s15, [r7, #20]
 8009338:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800933c:	edd7 7a04 	vldr	s15, [r7, #16]
 8009340:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009348:	eeb0 0a67 	vmov.f32	s0, s15
 800934c:	f01b f9e4 	bl	8024718 <sqrtf>
 8009350:	eef0 7a40 	vmov.f32	s15, s0
 8009354:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80093c0 <GPS_distance_cm_bearing+0xd0>
 8009358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800935c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009360:	ee17 2a90 	vmov	r2, s15
 8009364:	6a3b      	ldr	r3, [r7, #32]
 8009366:	601a      	str	r2, [r3, #0]

    *bearing = 9000.0f + atan2f(-dLat, dLon) * 5729.57795f;      // Convert the output radians to 100xdeg
 8009368:	edd7 7a05 	vldr	s15, [r7, #20]
 800936c:	eef1 7a67 	vneg.f32	s15, s15
 8009370:	edd7 0a04 	vldr	s1, [r7, #16]
 8009374:	eeb0 0a67 	vmov.f32	s0, s15
 8009378:	f01b f974 	bl	8024664 <atan2f>
 800937c:	eef0 7a40 	vmov.f32	s15, s0
 8009380:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80093c4 <GPS_distance_cm_bearing+0xd4>
 8009384:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009388:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80093c8 <GPS_distance_cm_bearing+0xd8>
 800938c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009394:	ee17 2a90 	vmov	r2, s15
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	601a      	str	r2, [r3, #0]
    if (*bearing < 0)
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	da06      	bge.n	80093b2 <GPS_distance_cm_bearing+0xc2>
        *bearing += 36000;
 80093a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80093ac:	33a0      	adds	r3, #160	; 0xa0
 80093ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093b0:	6013      	str	r3, [r2, #0]
}
 80093b2:	bf00      	nop
 80093b4:	3718      	adds	r7, #24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	20000028 	.word	0x20000028
 80093c0:	3f8e7d2c 	.word	0x3f8e7d2c
 80093c4:	45b30ca0 	.word	0x45b30ca0
 80093c8:	460ca000 	.word	0x460ca000

080093cc <GPS_calc_velocity>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate our current speed vector from gps position data
//
static void GPS_calc_velocity(void)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
    static int32_t last[2] = { 0, 0 };
    static uint8_t init = 0;
    // y_GPS_speed positve = Up
    // x_GPS_speed positve = Right

    if (init) {
 80093d2:	4b38      	ldr	r3, [pc, #224]	; (80094b4 <GPS_calc_velocity+0xe8>)
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d05b      	beq.n	8009492 <GPS_calc_velocity+0xc6>
        float tmp = 1.0f / dTnav;
 80093da:	4b37      	ldr	r3, [pc, #220]	; (80094b8 <GPS_calc_velocity+0xec>)
 80093dc:	ed93 7a00 	vldr	s14, [r3]
 80093e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093e8:	edc7 7a01 	vstr	s15, [r7, #4]
        actual_speed[GPS_X] = (float)(GPS_coord[LON] - last[LON]) * GPS_scaleLonDown * tmp;
 80093ec:	4b33      	ldr	r3, [pc, #204]	; (80094bc <GPS_calc_velocity+0xf0>)
 80093ee:	685a      	ldr	r2, [r3, #4]
 80093f0:	4b33      	ldr	r3, [pc, #204]	; (80094c0 <GPS_calc_velocity+0xf4>)
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	ee07 3a90 	vmov	s15, r3
 80093fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80093fe:	4b31      	ldr	r3, [pc, #196]	; (80094c4 <GPS_calc_velocity+0xf8>)
 8009400:	edd3 7a00 	vldr	s15, [r3]
 8009404:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009408:	edd7 7a01 	vldr	s15, [r7, #4]
 800940c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009414:	ee17 3a90 	vmov	r3, s15
 8009418:	b21a      	sxth	r2, r3
 800941a:	4b2b      	ldr	r3, [pc, #172]	; (80094c8 <GPS_calc_velocity+0xfc>)
 800941c:	805a      	strh	r2, [r3, #2]
        actual_speed[GPS_Y] = (float)(GPS_coord[LAT] - last[LAT]) * tmp;
 800941e:	4b27      	ldr	r3, [pc, #156]	; (80094bc <GPS_calc_velocity+0xf0>)
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	4b27      	ldr	r3, [pc, #156]	; (80094c0 <GPS_calc_velocity+0xf4>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	ee07 3a90 	vmov	s15, r3
 800942c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009430:	edd7 7a01 	vldr	s15, [r7, #4]
 8009434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009438:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800943c:	ee17 3a90 	vmov	r3, s15
 8009440:	b21a      	sxth	r2, r3
 8009442:	4b21      	ldr	r3, [pc, #132]	; (80094c8 <GPS_calc_velocity+0xfc>)
 8009444:	801a      	strh	r2, [r3, #0]

        actual_speed[GPS_X] = (actual_speed[GPS_X] + speed_old[GPS_X]) / 2;
 8009446:	4b20      	ldr	r3, [pc, #128]	; (80094c8 <GPS_calc_velocity+0xfc>)
 8009448:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800944c:	461a      	mov	r2, r3
 800944e:	4b1f      	ldr	r3, [pc, #124]	; (80094cc <GPS_calc_velocity+0x100>)
 8009450:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009454:	4413      	add	r3, r2
 8009456:	0fda      	lsrs	r2, r3, #31
 8009458:	4413      	add	r3, r2
 800945a:	105b      	asrs	r3, r3, #1
 800945c:	b21a      	sxth	r2, r3
 800945e:	4b1a      	ldr	r3, [pc, #104]	; (80094c8 <GPS_calc_velocity+0xfc>)
 8009460:	805a      	strh	r2, [r3, #2]
        actual_speed[GPS_Y] = (actual_speed[GPS_Y] + speed_old[GPS_Y]) / 2;
 8009462:	4b19      	ldr	r3, [pc, #100]	; (80094c8 <GPS_calc_velocity+0xfc>)
 8009464:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009468:	461a      	mov	r2, r3
 800946a:	4b18      	ldr	r3, [pc, #96]	; (80094cc <GPS_calc_velocity+0x100>)
 800946c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009470:	4413      	add	r3, r2
 8009472:	0fda      	lsrs	r2, r3, #31
 8009474:	4413      	add	r3, r2
 8009476:	105b      	asrs	r3, r3, #1
 8009478:	b21a      	sxth	r2, r3
 800947a:	4b13      	ldr	r3, [pc, #76]	; (80094c8 <GPS_calc_velocity+0xfc>)
 800947c:	801a      	strh	r2, [r3, #0]

        speed_old[GPS_X] = actual_speed[GPS_X];
 800947e:	4b12      	ldr	r3, [pc, #72]	; (80094c8 <GPS_calc_velocity+0xfc>)
 8009480:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009484:	4b11      	ldr	r3, [pc, #68]	; (80094cc <GPS_calc_velocity+0x100>)
 8009486:	805a      	strh	r2, [r3, #2]
        speed_old[GPS_Y] = actual_speed[GPS_Y];
 8009488:	4b0f      	ldr	r3, [pc, #60]	; (80094c8 <GPS_calc_velocity+0xfc>)
 800948a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800948e:	4b0f      	ldr	r3, [pc, #60]	; (80094cc <GPS_calc_velocity+0x100>)
 8009490:	801a      	strh	r2, [r3, #0]
    }
    init = 1;
 8009492:	4b08      	ldr	r3, [pc, #32]	; (80094b4 <GPS_calc_velocity+0xe8>)
 8009494:	2201      	movs	r2, #1
 8009496:	701a      	strb	r2, [r3, #0]

    last[LON] = GPS_coord[LON];
 8009498:	4b08      	ldr	r3, [pc, #32]	; (80094bc <GPS_calc_velocity+0xf0>)
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	4a08      	ldr	r2, [pc, #32]	; (80094c0 <GPS_calc_velocity+0xf4>)
 800949e:	6053      	str	r3, [r2, #4]
    last[LAT] = GPS_coord[LAT];
 80094a0:	4b06      	ldr	r3, [pc, #24]	; (80094bc <GPS_calc_velocity+0xf0>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a06      	ldr	r2, [pc, #24]	; (80094c0 <GPS_calc_velocity+0xf4>)
 80094a6:	6013      	str	r3, [r2, #0]
}
 80094a8:	bf00      	nop
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr
 80094b4:	200013ad 	.word	0x200013ad
 80094b8:	20001324 	.word	0x20001324
 80094bc:	20001810 	.word	0x20001810
 80094c0:	200013b0 	.word	0x200013b0
 80094c4:	20000028 	.word	0x20000028
 80094c8:	20001328 	.word	0x20001328
 80094cc:	200013b8 	.word	0x200013b8

080094d0 <GPS_calc_location_error>:
//      1800    = 19.80m = 60 feet
//      3000    = 33m
//      10000   = 111m
//
static void GPS_calc_location_error(int32_t *target_lat, int32_t *target_lng, int32_t *gps_lat, int32_t *gps_lng)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
 80094dc:	603b      	str	r3, [r7, #0]
    error[LON] = (float)(*target_lng - *gps_lng) * GPS_scaleLonDown;   // X Error
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	ee07 3a90 	vmov	s15, r3
 80094ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80094f0:	4b0b      	ldr	r3, [pc, #44]	; (8009520 <GPS_calc_location_error+0x50>)
 80094f2:	edd3 7a00 	vldr	s15, [r3]
 80094f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094fe:	ee17 2a90 	vmov	r2, s15
 8009502:	4b08      	ldr	r3, [pc, #32]	; (8009524 <GPS_calc_location_error+0x54>)
 8009504:	605a      	str	r2, [r3, #4]
    error[LAT] = *target_lat - *gps_lat;        // Y Error
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	4a04      	ldr	r2, [pc, #16]	; (8009524 <GPS_calc_location_error+0x54>)
 8009512:	6013      	str	r3, [r2, #0]
}
 8009514:	bf00      	nop
 8009516:	3714      	adds	r7, #20
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr
 8009520:	20000028 	.word	0x20000028
 8009524:	20001330 	.word	0x20001330

08009528 <GPS_calc_poshold>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate nav_lat and nav_lon from the x and y error and the speed
//
static void GPS_calc_poshold(void)
{
 8009528:	b590      	push	{r4, r7, lr}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
    int32_t d;
    int32_t target_speed;
    int axis;

    for (axis = 0; axis < 2; axis++) {
 800952e:	2300      	movs	r3, #0
 8009530:	60bb      	str	r3, [r7, #8]
 8009532:	e092      	b.n	800965a <GPS_calc_poshold+0x132>
        target_speed = get_P(error[axis], &posholdPID_PARAM);       // calculate desired speed from lon error
 8009534:	4a4d      	ldr	r2, [pc, #308]	; (800966c <GPS_calc_poshold+0x144>)
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800953c:	494c      	ldr	r1, [pc, #304]	; (8009670 <GPS_calc_poshold+0x148>)
 800953e:	4618      	mov	r0, r3
 8009540:	f7ff f9a2 	bl	8008888 <get_P>
 8009544:	6078      	str	r0, [r7, #4]
        rate_error[axis] = target_speed - actual_speed[axis];       // calc the speed error
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	b29a      	uxth	r2, r3
 800954a:	494a      	ldr	r1, [pc, #296]	; (8009674 <GPS_calc_poshold+0x14c>)
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8009552:	b29b      	uxth	r3, r3
 8009554:	1ad3      	subs	r3, r2, r3
 8009556:	b29b      	uxth	r3, r3
 8009558:	b219      	sxth	r1, r3
 800955a:	4a47      	ldr	r2, [pc, #284]	; (8009678 <GPS_calc_poshold+0x150>)
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 8009562:	4a45      	ldr	r2, [pc, #276]	; (8009678 <GPS_calc_poshold+0x150>)
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800956a:	4944      	ldr	r1, [pc, #272]	; (800967c <GPS_calc_poshold+0x154>)
 800956c:	4618      	mov	r0, r3
 800956e:	f7ff f98b 	bl	8008888 <get_P>
 8009572:	4603      	mov	r3, r0
 8009574:	b29c      	uxth	r4, r3
                    get_I(rate_error[axis] + error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 8009576:	4a40      	ldr	r2, [pc, #256]	; (8009678 <GPS_calc_poshold+0x150>)
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800957e:	4619      	mov	r1, r3
 8009580:	4a3a      	ldr	r2, [pc, #232]	; (800966c <GPS_calc_poshold+0x144>)
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009588:	18c8      	adds	r0, r1, r3
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	4613      	mov	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	4413      	add	r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4a3a      	ldr	r2, [pc, #232]	; (8009680 <GPS_calc_poshold+0x158>)
 8009596:	441a      	add	r2, r3
 8009598:	4b38      	ldr	r3, [pc, #224]	; (800967c <GPS_calc_poshold+0x154>)
 800959a:	493a      	ldr	r1, [pc, #232]	; (8009684 <GPS_calc_poshold+0x15c>)
 800959c:	f7ff f98d 	bl	80088ba <get_I>
 80095a0:	4603      	mov	r3, r0
        nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	4423      	add	r3, r4
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	b219      	sxth	r1, r3
 80095aa:	4a37      	ldr	r2, [pc, #220]	; (8009688 <GPS_calc_poshold+0x160>)
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        d = get_D(error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 80095b2:	4a2e      	ldr	r2, [pc, #184]	; (800966c <GPS_calc_poshold+0x144>)
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	4613      	mov	r3, r2
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	4a2e      	ldr	r2, [pc, #184]	; (8009680 <GPS_calc_poshold+0x158>)
 80095c6:	441a      	add	r2, r3
 80095c8:	4b2c      	ldr	r3, [pc, #176]	; (800967c <GPS_calc_poshold+0x154>)
 80095ca:	492e      	ldr	r1, [pc, #184]	; (8009684 <GPS_calc_poshold+0x15c>)
 80095cc:	f7ff f9c0 	bl	8008950 <get_D>
 80095d0:	60f8      	str	r0, [r7, #12]
        d = constrain(d, -2000, 2000);
 80095d2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80095d6:	492d      	ldr	r1, [pc, #180]	; (800968c <GPS_calc_poshold+0x164>)
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f7fa fbfd 	bl	8003dd8 <constrain>
 80095de:	60f8      	str	r0, [r7, #12]

        // get rid of noise
#if defined(GPS_LOW_SPEED_D_FILTER)
        if (abs(actual_speed[axis]) < 50)
 80095e0:	4a24      	ldr	r2, [pc, #144]	; (8009674 <GPS_calc_poshold+0x14c>)
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	bfb8      	it	lt
 80095ec:	425b      	neglt	r3, r3
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	2b31      	cmp	r3, #49	; 0x31
 80095f2:	d801      	bhi.n	80095f8 <GPS_calc_poshold+0xd0>
            d = 0;
 80095f4:	2300      	movs	r3, #0
 80095f6:	60fb      	str	r3, [r7, #12]
#endif

        nav[axis] += d;
 80095f8:	4a23      	ldr	r2, [pc, #140]	; (8009688 <GPS_calc_poshold+0x160>)
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009600:	b29a      	uxth	r2, r3
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	b29b      	uxth	r3, r3
 8009606:	4413      	add	r3, r2
 8009608:	b29b      	uxth	r3, r3
 800960a:	b219      	sxth	r1, r3
 800960c:	4a1e      	ldr	r2, [pc, #120]	; (8009688 <GPS_calc_poshold+0x160>)
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 8009614:	4a1c      	ldr	r2, [pc, #112]	; (8009688 <GPS_calc_poshold+0x160>)
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800961c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009620:	491b      	ldr	r1, [pc, #108]	; (8009690 <GPS_calc_poshold+0x168>)
 8009622:	4618      	mov	r0, r3
 8009624:	f7fa fbd8 	bl	8003dd8 <constrain>
 8009628:	4603      	mov	r3, r0
 800962a:	b219      	sxth	r1, r3
 800962c:	4a16      	ldr	r2, [pc, #88]	; (8009688 <GPS_calc_poshold+0x160>)
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        navPID[axis].integrator = poshold_ratePID[axis].integrator;
 8009634:	4912      	ldr	r1, [pc, #72]	; (8009680 <GPS_calc_poshold+0x158>)
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	4613      	mov	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	440b      	add	r3, r1
 8009642:	6819      	ldr	r1, [r3, #0]
 8009644:	4813      	ldr	r0, [pc, #76]	; (8009694 <GPS_calc_poshold+0x16c>)
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	4613      	mov	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	4413      	add	r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	4403      	add	r3, r0
 8009652:	6019      	str	r1, [r3, #0]
    for (axis = 0; axis < 2; axis++) {
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	3301      	adds	r3, #1
 8009658:	60bb      	str	r3, [r7, #8]
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	2b01      	cmp	r3, #1
 800965e:	f77f af69 	ble.w	8009534 <GPS_calc_poshold+0xc>
    }
}
 8009662:	bf00      	nop
 8009664:	bf00      	nop
 8009666:	3714      	adds	r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	bd90      	pop	{r4, r7, pc}
 800966c:	20001330 	.word	0x20001330
 8009670:	2000126c 	.word	0x2000126c
 8009674:	20001328 	.word	0x20001328
 8009678:	2000132c 	.word	0x2000132c
 800967c:	2000127c 	.word	0x2000127c
 8009680:	200012d4 	.word	0x200012d4
 8009684:	20001324 	.word	0x20001324
 8009688:	20001844 	.word	0x20001844
 800968c:	fffff830 	.word	0xfffff830
 8009690:	fffff448 	.word	0xfffff448
 8009694:	200012fc 	.word	0x200012fc

08009698 <GPS_calc_nav_rate>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate the desired nav_lat and nav_lon for distance flying such as RTH
//
static void GPS_calc_nav_rate(int max_speed)
{
 8009698:	b590      	push	{r4, r7, lr}
 800969a:	b087      	sub	sp, #28
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
    float trig[2];
    float temp;
    int axis;

    // push us towards the original track
    GPS_update_crosstrack();
 80096a0:	f000 f8cc 	bl	800983c <GPS_update_crosstrack>

    // nav_bearing includes crosstrack
    temp = (9000l - nav_bearing) * RADX100;
 80096a4:	4b5a      	ldr	r3, [pc, #360]	; (8009810 <GPS_calc_nav_rate+0x178>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f5c3 530c 	rsb	r3, r3, #8960	; 0x2300
 80096ac:	3328      	adds	r3, #40	; 0x28
 80096ae:	ee07 3a90 	vmov	s15, r3
 80096b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096b6:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8009814 <GPS_calc_nav_rate+0x17c>
 80096ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80096be:	edc7 7a04 	vstr	s15, [r7, #16]
    trig[GPS_X] = cosf(temp);
 80096c2:	ed97 0a04 	vldr	s0, [r7, #16]
 80096c6:	f01a fed7 	bl	8024478 <cosf>
 80096ca:	eef0 7a40 	vmov.f32	s15, s0
 80096ce:	edc7 7a03 	vstr	s15, [r7, #12]
    trig[GPS_Y] = sinf(temp);
 80096d2:	ed97 0a04 	vldr	s0, [r7, #16]
 80096d6:	f01a ff53 	bl	8024580 <sinf>
 80096da:	eef0 7a40 	vmov.f32	s15, s0
 80096de:	edc7 7a02 	vstr	s15, [r7, #8]

    for (axis = 0; axis < 2; axis++) {
 80096e2:	2300      	movs	r3, #0
 80096e4:	617b      	str	r3, [r7, #20]
 80096e6:	e08a      	b.n	80097fe <GPS_calc_nav_rate+0x166>
        rate_error[axis] = (trig[axis] * max_speed) - actual_speed[axis];
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	3318      	adds	r3, #24
 80096ee:	443b      	add	r3, r7
 80096f0:	3b10      	subs	r3, #16
 80096f2:	ed93 7a00 	vldr	s14, [r3]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	ee07 3a90 	vmov	s15, r3
 80096fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009700:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009704:	4a44      	ldr	r2, [pc, #272]	; (8009818 <GPS_calc_nav_rate+0x180>)
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800970c:	ee07 3a90 	vmov	s15, r3
 8009710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800971c:	ee17 3a90 	vmov	r3, s15
 8009720:	b219      	sxth	r1, r3
 8009722:	4a3e      	ldr	r2, [pc, #248]	; (800981c <GPS_calc_nav_rate+0x184>)
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        rate_error[axis] = constrain(rate_error[axis], -1000, 1000);
 800972a:	4a3c      	ldr	r2, [pc, #240]	; (800981c <GPS_calc_nav_rate+0x184>)
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009732:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009736:	493a      	ldr	r1, [pc, #232]	; (8009820 <GPS_calc_nav_rate+0x188>)
 8009738:	4618      	mov	r0, r3
 800973a:	f7fa fb4d 	bl	8003dd8 <constrain>
 800973e:	4603      	mov	r3, r0
 8009740:	b219      	sxth	r1, r3
 8009742:	4a36      	ldr	r2, [pc, #216]	; (800981c <GPS_calc_nav_rate+0x184>)
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        // P + I + D
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 800974a:	4a34      	ldr	r2, [pc, #208]	; (800981c <GPS_calc_nav_rate+0x184>)
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009752:	4934      	ldr	r1, [pc, #208]	; (8009824 <GPS_calc_nav_rate+0x18c>)
 8009754:	4618      	mov	r0, r3
 8009756:	f7ff f897 	bl	8008888 <get_P>
 800975a:	4603      	mov	r3, r0
 800975c:	b29c      	uxth	r4, r3
                    get_I(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM) +
 800975e:	4a2f      	ldr	r2, [pc, #188]	; (800981c <GPS_calc_nav_rate+0x184>)
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009766:	4618      	mov	r0, r3
 8009768:	697a      	ldr	r2, [r7, #20]
 800976a:	4613      	mov	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4413      	add	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4a2d      	ldr	r2, [pc, #180]	; (8009828 <GPS_calc_nav_rate+0x190>)
 8009774:	441a      	add	r2, r3
 8009776:	4b2b      	ldr	r3, [pc, #172]	; (8009824 <GPS_calc_nav_rate+0x18c>)
 8009778:	492c      	ldr	r1, [pc, #176]	; (800982c <GPS_calc_nav_rate+0x194>)
 800977a:	f7ff f89e 	bl	80088ba <get_I>
 800977e:	4603      	mov	r3, r0
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 8009780:	b29b      	uxth	r3, r3
 8009782:	4423      	add	r3, r4
 8009784:	b29c      	uxth	r4, r3
                    get_D(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM);
 8009786:	4a25      	ldr	r2, [pc, #148]	; (800981c <GPS_calc_nav_rate+0x184>)
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800978e:	4618      	mov	r0, r3
 8009790:	697a      	ldr	r2, [r7, #20]
 8009792:	4613      	mov	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4413      	add	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	4a23      	ldr	r2, [pc, #140]	; (8009828 <GPS_calc_nav_rate+0x190>)
 800979c:	441a      	add	r2, r3
 800979e:	4b21      	ldr	r3, [pc, #132]	; (8009824 <GPS_calc_nav_rate+0x18c>)
 80097a0:	4922      	ldr	r1, [pc, #136]	; (800982c <GPS_calc_nav_rate+0x194>)
 80097a2:	f7ff f8d5 	bl	8008950 <get_D>
 80097a6:	4603      	mov	r3, r0
                    get_I(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM) +
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	4423      	add	r3, r4
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	b219      	sxth	r1, r3
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 80097b0:	4a1f      	ldr	r2, [pc, #124]	; (8009830 <GPS_calc_nav_rate+0x198>)
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 80097b8:	4a1d      	ldr	r2, [pc, #116]	; (8009830 <GPS_calc_nav_rate+0x198>)
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80097c0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80097c4:	491b      	ldr	r1, [pc, #108]	; (8009834 <GPS_calc_nav_rate+0x19c>)
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7fa fb06 	bl	8003dd8 <constrain>
 80097cc:	4603      	mov	r3, r0
 80097ce:	b219      	sxth	r1, r3
 80097d0:	4a17      	ldr	r2, [pc, #92]	; (8009830 <GPS_calc_nav_rate+0x198>)
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        poshold_ratePID[axis].integrator = navPID[axis].integrator;
 80097d8:	4913      	ldr	r1, [pc, #76]	; (8009828 <GPS_calc_nav_rate+0x190>)
 80097da:	697a      	ldr	r2, [r7, #20]
 80097dc:	4613      	mov	r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	440b      	add	r3, r1
 80097e6:	6819      	ldr	r1, [r3, #0]
 80097e8:	4813      	ldr	r0, [pc, #76]	; (8009838 <GPS_calc_nav_rate+0x1a0>)
 80097ea:	697a      	ldr	r2, [r7, #20]
 80097ec:	4613      	mov	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	4413      	add	r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	4403      	add	r3, r0
 80097f6:	6019      	str	r1, [r3, #0]
    for (axis = 0; axis < 2; axis++) {
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	3301      	adds	r3, #1
 80097fc:	617b      	str	r3, [r7, #20]
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	2b01      	cmp	r3, #1
 8009802:	f77f af71 	ble.w	80096e8 <GPS_calc_nav_rate+0x50>
    }
}
 8009806:	bf00      	nop
 8009808:	bf00      	nop
 800980a:	371c      	adds	r7, #28
 800980c:	46bd      	mov	sp, r7
 800980e:	bd90      	pop	{r4, r7, pc}
 8009810:	200013a0 	.word	0x200013a0
 8009814:	393702d3 	.word	0x393702d3
 8009818:	20001328 	.word	0x20001328
 800981c:	2000132c 	.word	0x2000132c
 8009820:	fffffc18 	.word	0xfffffc18
 8009824:	2000128c 	.word	0x2000128c
 8009828:	200012fc 	.word	0x200012fc
 800982c:	20001324 	.word	0x20001324
 8009830:	20001844 	.word	0x20001844
 8009834:	fffff448 	.word	0xfffff448
 8009838:	200012d4 	.word	0x200012d4

0800983c <GPS_update_crosstrack>:
////////////////////////////////////////////////////////////////////////////////////
// Calculating cross track error, this tries to keep the copter on a direct line
// when flying to a waypoint.
//
static void GPS_update_crosstrack(void)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
    if (abs(wrap_18000(target_bearing - original_target_bearing)) < 4500) {     // If we are too far off or too close we don't do track following
 8009842:	4b38      	ldr	r3, [pc, #224]	; (8009924 <GPS_update_crosstrack+0xe8>)
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	4b38      	ldr	r3, [pc, #224]	; (8009928 <GPS_update_crosstrack+0xec>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	1ad3      	subs	r3, r2, r3
 800984c:	4618      	mov	r0, r3
 800984e:	f000 f8d5 	bl	80099fc <wrap_18000>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	dd10      	ble.n	800987a <GPS_update_crosstrack+0x3e>
 8009858:	4b32      	ldr	r3, [pc, #200]	; (8009924 <GPS_update_crosstrack+0xe8>)
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	4b32      	ldr	r3, [pc, #200]	; (8009928 <GPS_update_crosstrack+0xec>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	4618      	mov	r0, r3
 8009864:	f000 f8ca 	bl	80099fc <wrap_18000>
 8009868:	4603      	mov	r3, r0
 800986a:	f241 1293 	movw	r2, #4499	; 0x1193
 800986e:	4293      	cmp	r3, r2
 8009870:	bfd4      	ite	le
 8009872:	2301      	movle	r3, #1
 8009874:	2300      	movgt	r3, #0
 8009876:	b2db      	uxtb	r3, r3
 8009878:	e00e      	b.n	8009898 <GPS_update_crosstrack+0x5c>
 800987a:	4b2a      	ldr	r3, [pc, #168]	; (8009924 <GPS_update_crosstrack+0xe8>)
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	4b2a      	ldr	r3, [pc, #168]	; (8009928 <GPS_update_crosstrack+0xec>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	1ad3      	subs	r3, r2, r3
 8009884:	4618      	mov	r0, r3
 8009886:	f000 f8b9 	bl	80099fc <wrap_18000>
 800988a:	4603      	mov	r3, r0
 800988c:	4a27      	ldr	r2, [pc, #156]	; (800992c <GPS_update_crosstrack+0xf0>)
 800988e:	4293      	cmp	r3, r2
 8009890:	bfac      	ite	ge
 8009892:	2301      	movge	r3, #1
 8009894:	2300      	movlt	r3, #0
 8009896:	b2db      	uxtb	r3, r3
 8009898:	2b00      	cmp	r3, #0
 800989a:	d03b      	beq.n	8009914 <GPS_update_crosstrack+0xd8>
        float temp = (target_bearing - original_target_bearing) * RADX100;
 800989c:	4b21      	ldr	r3, [pc, #132]	; (8009924 <GPS_update_crosstrack+0xe8>)
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	4b21      	ldr	r3, [pc, #132]	; (8009928 <GPS_update_crosstrack+0xec>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	ee07 3a90 	vmov	s15, r3
 80098aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098ae:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8009930 <GPS_update_crosstrack+0xf4>
 80098b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098b6:	edc7 7a01 	vstr	s15, [r7, #4]
        crosstrack_error = sinf(temp) * (wp_distance * CROSSTRACK_GAIN); // Meters we are off track line
 80098ba:	ed97 0a01 	vldr	s0, [r7, #4]
 80098be:	f01a fe5f 	bl	8024580 <sinf>
 80098c2:	eeb0 7a40 	vmov.f32	s14, s0
 80098c6:	4b1b      	ldr	r3, [pc, #108]	; (8009934 <GPS_update_crosstrack+0xf8>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	ee07 3a90 	vmov	s15, r3
 80098ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80098da:	ee17 3a90 	vmov	r3, s15
 80098de:	b21a      	sxth	r2, r3
 80098e0:	4b15      	ldr	r3, [pc, #84]	; (8009938 <GPS_update_crosstrack+0xfc>)
 80098e2:	801a      	strh	r2, [r3, #0]
        nav_bearing = target_bearing + constrain(crosstrack_error, -3000, 3000);
 80098e4:	4b14      	ldr	r3, [pc, #80]	; (8009938 <GPS_update_crosstrack+0xfc>)
 80098e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098ea:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80098ee:	4913      	ldr	r1, [pc, #76]	; (800993c <GPS_update_crosstrack+0x100>)
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7fa fa71 	bl	8003dd8 <constrain>
 80098f6:	4602      	mov	r2, r0
 80098f8:	4b0a      	ldr	r3, [pc, #40]	; (8009924 <GPS_update_crosstrack+0xe8>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4413      	add	r3, r2
 80098fe:	4a10      	ldr	r2, [pc, #64]	; (8009940 <GPS_update_crosstrack+0x104>)
 8009900:	6013      	str	r3, [r2, #0]
        nav_bearing = wrap_36000(nav_bearing);
 8009902:	4b0f      	ldr	r3, [pc, #60]	; (8009940 <GPS_update_crosstrack+0x104>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4618      	mov	r0, r3
 8009908:	f000 f898 	bl	8009a3c <wrap_36000>
 800990c:	4603      	mov	r3, r0
 800990e:	4a0c      	ldr	r2, [pc, #48]	; (8009940 <GPS_update_crosstrack+0x104>)
 8009910:	6013      	str	r3, [r2, #0]
    } else {
        nav_bearing = target_bearing;
    }
}
 8009912:	e003      	b.n	800991c <GPS_update_crosstrack+0xe0>
        nav_bearing = target_bearing;
 8009914:	4b03      	ldr	r3, [pc, #12]	; (8009924 <GPS_update_crosstrack+0xe8>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a09      	ldr	r2, [pc, #36]	; (8009940 <GPS_update_crosstrack+0x104>)
 800991a:	6013      	str	r3, [r2, #0]
}
 800991c:	bf00      	nop
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	20001340 	.word	0x20001340
 8009928:	20001344 	.word	0x20001344
 800992c:	ffffee6d 	.word	0xffffee6d
 8009930:	393702d3 	.word	0x393702d3
 8009934:	2000134c 	.word	0x2000134c
 8009938:	20001348 	.word	0x20001348
 800993c:	fffff448 	.word	0xfffff448
 8009940:	200013a0 	.word	0x200013a0

08009944 <GPS_calc_desired_speed>:
//                100  |  200     300     400cm/s
//                 |                                        +|+
//                 |< we should slow to 1.5 m/s as we hit the target
//
static int16_t GPS_calc_desired_speed(int16_t max_speed, bool _slow)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	460a      	mov	r2, r1
 800994e:	80fb      	strh	r3, [r7, #6]
 8009950:	4613      	mov	r3, r2
 8009952:	717b      	strb	r3, [r7, #5]
    // max_speed is default 400 or 4m/s
    if (_slow) {
 8009954:	797b      	ldrb	r3, [r7, #5]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00c      	beq.n	8009974 <GPS_calc_desired_speed+0x30>
        max_speed = min(max_speed, wp_distance / 2);
 800995a:	4b23      	ldr	r3, [pc, #140]	; (80099e8 <GPS_calc_desired_speed+0xa4>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	0fda      	lsrs	r2, r3, #31
 8009960:	4413      	add	r3, r2
 8009962:	105b      	asrs	r3, r3, #1
 8009964:	461a      	mov	r2, r3
 8009966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800996a:	4293      	cmp	r3, r2
 800996c:	bfa8      	it	ge
 800996e:	4613      	movge	r3, r2
 8009970:	80fb      	strh	r3, [r7, #6]
 8009972:	e011      	b.n	8009998 <GPS_calc_desired_speed+0x54>
    } else {
        max_speed = min(max_speed, wp_distance);
 8009974:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009978:	4b1b      	ldr	r3, [pc, #108]	; (80099e8 <GPS_calc_desired_speed+0xa4>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4293      	cmp	r3, r2
 800997e:	bfa8      	it	ge
 8009980:	4613      	movge	r3, r2
 8009982:	80fb      	strh	r3, [r7, #6]
        max_speed = max(max_speed, cfg.nav_speed_min);      // go at least 100cm/s
 8009984:	4b19      	ldr	r3, [pc, #100]	; (80099ec <GPS_calc_desired_speed+0xa8>)
 8009986:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800998a:	461a      	mov	r2, r3
 800998c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009990:	4293      	cmp	r3, r2
 8009992:	bfb8      	it	lt
 8009994:	4613      	movlt	r3, r2
 8009996:	80fb      	strh	r3, [r7, #6]
    }

    // limit the ramp up of the speed
    // waypoint_speed_gov is reset to 0 at each new WP command
    if (max_speed > waypoint_speed_gov) {
 8009998:	4b15      	ldr	r3, [pc, #84]	; (80099f0 <GPS_calc_desired_speed+0xac>)
 800999a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800999e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	dd17      	ble.n	80099d6 <GPS_calc_desired_speed+0x92>
        waypoint_speed_gov += (int)(100.0f * dTnav);    // increase at .5/ms
 80099a6:	4b13      	ldr	r3, [pc, #76]	; (80099f4 <GPS_calc_desired_speed+0xb0>)
 80099a8:	edd3 7a00 	vldr	s15, [r3]
 80099ac:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80099f8 <GPS_calc_desired_speed+0xb4>
 80099b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80099b8:	ee17 3a90 	vmov	r3, s15
 80099bc:	b29a      	uxth	r2, r3
 80099be:	4b0c      	ldr	r3, [pc, #48]	; (80099f0 <GPS_calc_desired_speed+0xac>)
 80099c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	4413      	add	r3, r2
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	b21a      	sxth	r2, r3
 80099cc:	4b08      	ldr	r3, [pc, #32]	; (80099f0 <GPS_calc_desired_speed+0xac>)
 80099ce:	801a      	strh	r2, [r3, #0]
        max_speed = waypoint_speed_gov;
 80099d0:	4b07      	ldr	r3, [pc, #28]	; (80099f0 <GPS_calc_desired_speed+0xac>)
 80099d2:	881b      	ldrh	r3, [r3, #0]
 80099d4:	80fb      	strh	r3, [r7, #6]
    }
    return max_speed;
 80099d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80099da:	4618      	mov	r0, r3
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr
 80099e6:	bf00      	nop
 80099e8:	2000134c 	.word	0x2000134c
 80099ec:	20000e08 	.word	0x20000e08
 80099f0:	20001350 	.word	0x20001350
 80099f4:	20001324 	.word	0x20001324
 80099f8:	42c80000 	.word	0x42c80000

080099fc <wrap_18000>:

////////////////////////////////////////////////////////////////////////////////////
// Utilities
//
int32_t wrap_18000(int32_t err)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
    if (err > 18000)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f244 6250 	movw	r2, #18000	; 0x4650
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	dd04      	ble.n	8009a18 <wrap_18000+0x1c>
        err -= 36000;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f5a3 430c 	sub.w	r3, r3, #35840	; 0x8c00
 8009a14:	3ba0      	subs	r3, #160	; 0xa0
 8009a16:	607b      	str	r3, [r7, #4]
    if (err < -18000)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a07      	ldr	r2, [pc, #28]	; (8009a38 <wrap_18000+0x3c>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	da04      	bge.n	8009a2a <wrap_18000+0x2e>
        err += 36000;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8009a26:	33a0      	adds	r3, #160	; 0xa0
 8009a28:	607b      	str	r3, [r7, #4]
    return err;
 8009a2a:	687b      	ldr	r3, [r7, #4]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr
 8009a38:	ffffb9b0 	.word	0xffffb9b0

08009a3c <wrap_36000>:

static int32_t wrap_36000(int32_t deg)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
    if (deg > 36000)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	dd04      	ble.n	8009a58 <wrap_36000+0x1c>
        deg -= 36000;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f5a3 430c 	sub.w	r3, r3, #35840	; 0x8c00
 8009a54:	3ba0      	subs	r3, #160	; 0xa0
 8009a56:	607b      	str	r3, [r7, #4]
    if (deg < 0)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	da04      	bge.n	8009a68 <wrap_36000+0x2c>
        deg += 36000;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8009a64:	33a0      	adds	r3, #160	; 0xa0
 8009a66:	607b      	str	r3, [r7, #4]
    return deg;
 8009a68:	687b      	ldr	r3, [r7, #4]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	370c      	adds	r7, #12
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
	...

08009a78 <ibusReadRawRC>:
static PifRcIbus s_ibus;
static uint16_t ibusChannelData[IBUS_MAX_CHANNEL];


static uint16_t ibusReadRawRC(uint8_t chan)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	4603      	mov	r3, r0
 8009a80:	71fb      	strb	r3, [r7, #7]
    return ibusChannelData[mcfg.rcmap[chan]];
 8009a82:	79fb      	ldrb	r3, [r7, #7]
 8009a84:	4a06      	ldr	r2, [pc, #24]	; (8009aa0 <ibusReadRawRC+0x28>)
 8009a86:	4413      	add	r3, r2
 8009a88:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	4b05      	ldr	r3, [pc, #20]	; (8009aa4 <ibusReadRawRC+0x2c>)
 8009a90:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr
 8009aa0:	2000089c 	.word	0x2000089c
 8009aa4:	2000145c 	.word	0x2000145c

08009aa8 <_evtIbusReceive>:

static void _evtIbusReceive(PifRc* p_owner, uint16_t* channel, PifIssuerP p_issuer)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
    PifTask* p_task;

    // internal failsafe enabled and rx failsafe flag set
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 8009ab4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009ab8:	f7fd faf2 	bl	80070a0 <feature>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d005      	beq.n	8009ace <_evtIbusReceive+0x26>
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f00e fe18 	bl	80186f8 <pifRc_CheckFailSafe>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d11a      	bne.n	8009b04 <_evtIbusReceive+0x5c>

    failsafeCnt = 0; // clear FailSafe counter
 8009ace:	4b0f      	ldr	r3, [pc, #60]	; (8009b0c <_evtIbusReceive+0x64>)
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < IBUS_MAX_CHANNEL; i++) {
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	617b      	str	r3, [r7, #20]
 8009ad8:	e00b      	b.n	8009af2 <_evtIbusReceive+0x4a>
		ibusChannelData[i] = channel[i];
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	005b      	lsls	r3, r3, #1
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	8819      	ldrh	r1, [r3, #0]
 8009ae4:	4a0a      	ldr	r2, [pc, #40]	; (8009b10 <_evtIbusReceive+0x68>)
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < IBUS_MAX_CHANNEL; i++) {
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	3301      	adds	r3, #1
 8009af0:	617b      	str	r3, [r7, #20]
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	2b07      	cmp	r3, #7
 8009af6:	ddf0      	ble.n	8009ada <_evtIbusReceive+0x32>
	}

	p_task = (PifTask*)p_issuer;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	613b      	str	r3, [r7, #16]
	pifTask_SetTrigger(p_task);
 8009afc:	6938      	ldr	r0, [r7, #16]
 8009afe:	f00b f917 	bl	8014d30 <pifTask_SetTrigger>
 8009b02:	e000      	b.n	8009b06 <_evtIbusReceive+0x5e>
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 8009b04:	bf00      	nop
}
 8009b06:	3718      	adds	r7, #24
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	2000177e 	.word	0x2000177e
 8009b10:	2000145c 	.word	0x2000145c

08009b14 <ibusInit>:

BOOL ibusInit(int uart, rcReadRawDataPtr *callback)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
    int b;

    for (b = 0; b < IBUS_MAX_CHANNEL; b++)
 8009b1e:	2300      	movs	r3, #0
 8009b20:	60fb      	str	r3, [r7, #12]
 8009b22:	e009      	b.n	8009b38 <ibusInit+0x24>
        ibusChannelData[b] = mcfg.midrc;
 8009b24:	4b22      	ldr	r3, [pc, #136]	; (8009bb0 <ibusInit+0x9c>)
 8009b26:	f8b3 1198 	ldrh.w	r1, [r3, #408]	; 0x198
 8009b2a:	4a22      	ldr	r2, [pc, #136]	; (8009bb4 <ibusInit+0xa0>)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (b = 0; b < IBUS_MAX_CHANNEL; b++)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	3301      	adds	r3, #1
 8009b36:	60fb      	str	r3, [r7, #12]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2b07      	cmp	r3, #7
 8009b3c:	ddf2      	ble.n	8009b24 <ibusInit+0x10>

    core.rcvrport = uartOpen(uart, 115200, MODE_RX, 2);	// 2ms
 8009b3e:	2302      	movs	r3, #2
 8009b40:	2201      	movs	r2, #1
 8009b42:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7f8 fc3c 	bl	80023c4 <uartOpen>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	4a1a      	ldr	r2, [pc, #104]	; (8009bb8 <ibusInit+0xa4>)
 8009b50:	6113      	str	r3, [r2, #16]
    if (!core.rcvrport) return FALSE;
 8009b52:	4b19      	ldr	r3, [pc, #100]	; (8009bb8 <ibusInit+0xa4>)
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d101      	bne.n	8009b5e <ibusInit+0x4a>
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	e023      	b.n	8009ba6 <ibusInit+0x92>

    if (!pifRcIbus_Init(&s_ibus, PIF_ID_AUTO)) return FALSE;
 8009b5e:	2100      	movs	r1, #0
 8009b60:	4816      	ldr	r0, [pc, #88]	; (8009bbc <ibusInit+0xa8>)
 8009b62:	f00e ffe5 	bl	8018b30 <pifRcIbus_Init>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d101      	bne.n	8009b70 <ibusInit+0x5c>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	e01a      	b.n	8009ba6 <ibusInit+0x92>
    pifRc_AttachEvtReceive(&s_ibus.parent, _evtIbusReceive, g_task_compute_rc);
 8009b70:	4b13      	ldr	r3, [pc, #76]	; (8009bc0 <ibusInit+0xac>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	461a      	mov	r2, r3
 8009b76:	4913      	ldr	r1, [pc, #76]	; (8009bc4 <ibusInit+0xb0>)
 8009b78:	4810      	ldr	r0, [pc, #64]	; (8009bbc <ibusInit+0xa8>)
 8009b7a:	f00e fdab 	bl	80186d4 <pifRc_AttachEvtReceive>
    pifRcIbus_AttachComm(&s_ibus, &core.rcvrport->comm);
 8009b7e:	4b0e      	ldr	r3, [pc, #56]	; (8009bb8 <ibusInit+0xa4>)
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	3304      	adds	r3, #4
 8009b84:	4619      	mov	r1, r3
 8009b86:	480d      	ldr	r0, [pc, #52]	; (8009bbc <ibusInit+0xa8>)
 8009b88:	f00f f802 	bl	8018b90 <pifRcIbus_AttachComm>

    if (callback)
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d002      	beq.n	8009b98 <ibusInit+0x84>
        *callback = ibusReadRawRC;
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	4a0c      	ldr	r2, [pc, #48]	; (8009bc8 <ibusInit+0xb4>)
 8009b96:	601a      	str	r2, [r3, #0]

    serialStartReceiveFunc(&core.rcvrport->comm);
 8009b98:	4b07      	ldr	r3, [pc, #28]	; (8009bb8 <ibusInit+0xa4>)
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	3304      	adds	r3, #4
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7f8 fd9c 	bl	80026dc <serialStartReceiveFunc>

    return TRUE;
 8009ba4:	2301      	movs	r3, #1
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	2000089c 	.word	0x2000089c
 8009bb4:	2000145c 	.word	0x2000145c
 8009bb8:	200007e4 	.word	0x200007e4
 8009bbc:	200013bc 	.word	0x200013bc
 8009bc0:	200015a8 	.word	0x200015a8
 8009bc4:	08009aa9 	.word	0x08009aa9
 8009bc8:	08009a79 	.word	0x08009a79
 8009bcc:	00000000 	.word	0x00000000

08009bd0 <imuInit>:
float anglerad[2] = { 0.0f, 0.0f };    // absolute angle inclination in radians

static void getEstimatedAttitude(void);

void imuInit(void)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	ed2d 8b02 	vpush	{d8}
 8009bd6:	af00      	add	r7, sp, #0
    smallAngle = lrintf(sensor_set.acc.acc_1G * cosf(RAD * cfg.small_angle));
 8009bd8:	4b45      	ldr	r3, [pc, #276]	; (8009cf0 <imuInit+0x120>)
 8009bda:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8009bde:	ee07 3a90 	vmov	s15, r3
 8009be2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8009be6:	4b43      	ldr	r3, [pc, #268]	; (8009cf4 <imuInit+0x124>)
 8009be8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7f6 fc4d 	bl	800048c <__aeabi_i2d>
 8009bf2:	a339      	add	r3, pc, #228	; (adr r3, 8009cd8 <imuInit+0x108>)
 8009bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf8:	f7f6 fcb2 	bl	8000560 <__aeabi_dmul>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	460b      	mov	r3, r1
 8009c00:	4610      	mov	r0, r2
 8009c02:	4619      	mov	r1, r3
 8009c04:	f7f6 ff8e 	bl	8000b24 <__aeabi_d2f>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	ee00 3a10 	vmov	s0, r3
 8009c0e:	f01a fc33 	bl	8024478 <cosf>
 8009c12:	eef0 7a40 	vmov.f32	s15, s0
 8009c16:	ee68 7a27 	vmul.f32	s15, s16, s15
 8009c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8009c1e:	f01a fc6f 	bl	8024500 <lrintf>
 8009c22:	4603      	mov	r3, r0
 8009c24:	b21a      	sxth	r2, r3
 8009c26:	4b34      	ldr	r3, [pc, #208]	; (8009cf8 <imuInit+0x128>)
 8009c28:	801a      	strh	r2, [r3, #0]
    accVelScale = 9.80665f / sensor_set.acc.acc_1G / 10000.0f;
 8009c2a:	4b31      	ldr	r3, [pc, #196]	; (8009cf0 <imuInit+0x120>)
 8009c2c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8009c30:	ee07 3a90 	vmov	s15, r3
 8009c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c38:	eddf 6a30 	vldr	s13, [pc, #192]	; 8009cfc <imuInit+0x12c>
 8009c3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c40:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8009d00 <imuInit+0x130>
 8009c44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009c48:	4b2e      	ldr	r3, [pc, #184]	; (8009d04 <imuInit+0x134>)
 8009c4a:	edc3 7a00 	vstr	s15, [r3]
    throttleAngleScale = (1800.0f / M_PI) * (900.0f / cfg.throttle_correction_angle);
 8009c4e:	4b29      	ldr	r3, [pc, #164]	; (8009cf4 <imuInit+0x124>)
 8009c50:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8009c54:	ee07 3a90 	vmov	s15, r3
 8009c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c5c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8009d08 <imuInit+0x138>
 8009c60:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009c64:	ee16 0a90 	vmov	r0, s13
 8009c68:	f7f6 fc22 	bl	80004b0 <__aeabi_f2d>
 8009c6c:	a31c      	add	r3, pc, #112	; (adr r3, 8009ce0 <imuInit+0x110>)
 8009c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c72:	f7f6 fc75 	bl	8000560 <__aeabi_dmul>
 8009c76:	4602      	mov	r2, r0
 8009c78:	460b      	mov	r3, r1
 8009c7a:	4610      	mov	r0, r2
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	f7f6 ff51 	bl	8000b24 <__aeabi_d2f>
 8009c82:	4603      	mov	r3, r0
 8009c84:	4a21      	ldr	r2, [pc, #132]	; (8009d0c <imuInit+0x13c>)
 8009c86:	6013      	str	r3, [r2, #0]

    fc_acc = 0.5f / (M_PI * cfg.accz_lpf_cutoff); // calculate RC time constant used in the accZ lpf
 8009c88:	4b1a      	ldr	r3, [pc, #104]	; (8009cf4 <imuInit+0x124>)
 8009c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7f6 fc0f 	bl	80004b0 <__aeabi_f2d>
 8009c92:	a315      	add	r3, pc, #84	; (adr r3, 8009ce8 <imuInit+0x118>)
 8009c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c98:	f7f6 fc62 	bl	8000560 <__aeabi_dmul>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	f04f 0000 	mov.w	r0, #0
 8009ca4:	491a      	ldr	r1, [pc, #104]	; (8009d10 <imuInit+0x140>)
 8009ca6:	f7f6 fd85 	bl	80007b4 <__aeabi_ddiv>
 8009caa:	4602      	mov	r2, r0
 8009cac:	460b      	mov	r3, r1
 8009cae:	4610      	mov	r0, r2
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	f7f6 ff37 	bl	8000b24 <__aeabi_d2f>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	4a16      	ldr	r2, [pc, #88]	; (8009d14 <imuInit+0x144>)
 8009cba:	6013      	str	r3, [r2, #0]

#ifdef MAG
    // if mag sensor is enabled, use it
    if (sensors(SENSOR_MAG))
 8009cbc:	2008      	movs	r0, #8
 8009cbe:	f7fd f9a7 	bl	8007010 <sensors>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d001      	beq.n	8009ccc <imuInit+0xfc>
        Mag_init();
 8009cc8:	f005 fb68 	bl	800f39c <Mag_init>
#endif
}
 8009ccc:	bf00      	nop
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	ecbd 8b02 	vpop	{d8}
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	a2529d39 	.word	0xa2529d39
 8009cdc:	3f91df46 	.word	0x3f91df46
 8009ce0:	907e593b 	.word	0x907e593b
 8009ce4:	4081e7a9 	.word	0x4081e7a9
 8009ce8:	54442d18 	.word	0x54442d18
 8009cec:	400921fb 	.word	0x400921fb
 8009cf0:	20000060 	.word	0x20000060
 8009cf4:	20000e08 	.word	0x20000e08
 8009cf8:	200014a0 	.word	0x200014a0
 8009cfc:	411ce80a 	.word	0x411ce80a
 8009d00:	461c4000 	.word	0x461c4000
 8009d04:	200014d8 	.word	0x200014d8
 8009d08:	44610000 	.word	0x44610000
 8009d0c:	200014dc 	.word	0x200014dc
 8009d10:	3fe00000 	.word	0x3fe00000
 8009d14:	200014e0 	.word	0x200014e0

08009d18 <computeIMU>:

int computeIMU(int step)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
    static int16_t gyroYawSmooth = 0;

	switch (step) {
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	d02c      	beq.n	8009d80 <computeIMU+0x68>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	dc2d      	bgt.n	8009d88 <computeIMU+0x70>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d003      	beq.n	8009d3a <computeIMU+0x22>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d01a      	beq.n	8009d6e <computeIMU+0x56>
 8009d38:	e026      	b.n	8009d88 <computeIMU+0x70>
	case 0:
		if (Gyro_getADC()) {
 8009d3a:	f005 fb19 	bl	800f370 <Gyro_getADC>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d012      	beq.n	8009d6a <computeIMU+0x52>
			if (sensors(SENSOR_ACC)) return 1;
 8009d44:	2002      	movs	r0, #2
 8009d46:	f7fd f963 	bl	8007010 <sensors>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d001      	beq.n	8009d54 <computeIMU+0x3c>
 8009d50:	2301      	movs	r3, #1
 8009d52:	e043      	b.n	8009ddc <computeIMU+0xc4>

			accADC[X] = 0;
 8009d54:	4b23      	ldr	r3, [pc, #140]	; (8009de4 <computeIMU+0xcc>)
 8009d56:	2200      	movs	r2, #0
 8009d58:	801a      	strh	r2, [r3, #0]
			accADC[Y] = 0;
 8009d5a:	4b22      	ldr	r3, [pc, #136]	; (8009de4 <computeIMU+0xcc>)
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	805a      	strh	r2, [r3, #2]
			accADC[Z] = 0;
 8009d60:	4b20      	ldr	r3, [pc, #128]	; (8009de4 <computeIMU+0xcc>)
 8009d62:	2200      	movs	r2, #0
 8009d64:	809a      	strh	r2, [r3, #4]
			return 3;
 8009d66:	2303      	movs	r3, #3
 8009d68:	e038      	b.n	8009ddc <computeIMU+0xc4>
		}
		return step;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	e036      	b.n	8009ddc <computeIMU+0xc4>

	case 1:
		return ACC_getADC() ? 2 : step;
 8009d6e:	f005 f8d7 	bl	800ef20 <ACC_getADC>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d101      	bne.n	8009d7c <computeIMU+0x64>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	e02f      	b.n	8009ddc <computeIMU+0xc4>
 8009d7c:	2302      	movs	r3, #2
 8009d7e:	e02d      	b.n	8009ddc <computeIMU+0xc4>

	case 2:
		getEstimatedAttitude();
 8009d80:	f000 fbba 	bl	800a4f8 <getEstimatedAttitude>
		return 3;
 8009d84:	2303      	movs	r3, #3
 8009d86:	e029      	b.n	8009ddc <computeIMU+0xc4>
	}

    if (mcfg.mixerConfiguration == MULTITYPE_TRI) {
 8009d88:	4b17      	ldr	r3, [pc, #92]	; (8009de8 <computeIMU+0xd0>)
 8009d8a:	795b      	ldrb	r3, [r3, #5]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d115      	bne.n	8009dbc <computeIMU+0xa4>
        gyroData[YAW] = (gyroYawSmooth * 2 + gyroADC[YAW]) / 3;
 8009d90:	4b16      	ldr	r3, [pc, #88]	; (8009dec <computeIMU+0xd4>)
 8009d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d96:	005b      	lsls	r3, r3, #1
 8009d98:	4a15      	ldr	r2, [pc, #84]	; (8009df0 <computeIMU+0xd8>)
 8009d9a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8009d9e:	4413      	add	r3, r2
 8009da0:	4a14      	ldr	r2, [pc, #80]	; (8009df4 <computeIMU+0xdc>)
 8009da2:	fb82 1203 	smull	r1, r2, r2, r3
 8009da6:	17db      	asrs	r3, r3, #31
 8009da8:	1ad3      	subs	r3, r2, r3
 8009daa:	b21a      	sxth	r2, r3
 8009dac:	4b12      	ldr	r3, [pc, #72]	; (8009df8 <computeIMU+0xe0>)
 8009dae:	809a      	strh	r2, [r3, #4]
        gyroYawSmooth = gyroData[YAW];
 8009db0:	4b11      	ldr	r3, [pc, #68]	; (8009df8 <computeIMU+0xe0>)
 8009db2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8009db6:	4b0d      	ldr	r3, [pc, #52]	; (8009dec <computeIMU+0xd4>)
 8009db8:	801a      	strh	r2, [r3, #0]
 8009dba:	e004      	b.n	8009dc6 <computeIMU+0xae>
    } else {
        gyroData[YAW] = gyroADC[YAW];
 8009dbc:	4b0c      	ldr	r3, [pc, #48]	; (8009df0 <computeIMU+0xd8>)
 8009dbe:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8009dc2:	4b0d      	ldr	r3, [pc, #52]	; (8009df8 <computeIMU+0xe0>)
 8009dc4:	809a      	strh	r2, [r3, #4]
    }
    gyroData[ROLL] = gyroADC[ROLL];
 8009dc6:	4b0a      	ldr	r3, [pc, #40]	; (8009df0 <computeIMU+0xd8>)
 8009dc8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009dcc:	4b0a      	ldr	r3, [pc, #40]	; (8009df8 <computeIMU+0xe0>)
 8009dce:	801a      	strh	r2, [r3, #0]
    gyroData[PITCH] = gyroADC[PITCH];
 8009dd0:	4b07      	ldr	r3, [pc, #28]	; (8009df0 <computeIMU+0xd8>)
 8009dd2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009dd6:	4b08      	ldr	r3, [pc, #32]	; (8009df8 <computeIMU+0xe0>)
 8009dd8:	805a      	strh	r2, [r3, #2]
	return 4;
 8009dda:	2304      	movs	r3, #4
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	20001474 	.word	0x20001474
 8009de8:	2000089c 	.word	0x2000089c
 8009dec:	2000150c 	.word	0x2000150c
 8009df0:	2000146c 	.word	0x2000146c
 8009df4:	55555556 	.word	0x55555556
 8009df8:	200014e4 	.word	0x200014e4

08009dfc <normalizeV>:

t_fp_vector EstG;

// Normalize a vector
void normalizeV(struct fp_vector *src, struct fp_vector *dest)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
    float length;

    length = sqrtf(src->X * src->X + src->Y * src->Y + src->Z * src->Z);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	ed93 7a00 	vldr	s14, [r3]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	edd3 7a00 	vldr	s15, [r3]
 8009e12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	edd3 6a01 	vldr	s13, [r3, #4]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8009e22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	edd3 6a02 	vldr	s13, [r3, #8]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	edd3 7a02 	vldr	s15, [r3, #8]
 8009e36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8009e42:	f01a fc69 	bl	8024718 <sqrtf>
 8009e46:	ed87 0a03 	vstr	s0, [r7, #12]
    if (length != 0) {
 8009e4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e56:	d01d      	beq.n	8009e94 <normalizeV+0x98>
        dest->X = src->X / length;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	edd3 6a00 	vldr	s13, [r3]
 8009e5e:	ed97 7a03 	vldr	s14, [r7, #12]
 8009e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	edc3 7a00 	vstr	s15, [r3]
        dest->Y = src->Y / length;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	edd3 6a01 	vldr	s13, [r3, #4]
 8009e72:	ed97 7a03 	vldr	s14, [r7, #12]
 8009e76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	edc3 7a01 	vstr	s15, [r3, #4]
        dest->Z = src->Z / length;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	edd3 6a02 	vldr	s13, [r3, #8]
 8009e86:	ed97 7a03 	vldr	s14, [r7, #12]
 8009e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 8009e94:	bf00      	nop
 8009e96:	3710      	adds	r7, #16
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <rotateV>:

// Rotate Estimated vector(s) with small angle approximation, according to the gyro data
void rotateV(struct fp_vector *v, float *delta)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b098      	sub	sp, #96	; 0x60
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
    struct fp_vector v_tmp = *v;
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009eac:	ca07      	ldmia	r2, {r0, r1, r2}
 8009eae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    // This does a  "proper" matrix rotation using gyro deltas without small-angle approximation
    float mat[3][3];
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, sinzcosx, coszsinx, sinzsinx;

    cosx = cosf(delta[ROLL]);
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	edd3 7a00 	vldr	s15, [r3]
 8009eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8009ebc:	f01a fadc 	bl	8024478 <cosf>
 8009ec0:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
    sinx = sinf(delta[ROLL]);
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	edd3 7a00 	vldr	s15, [r3]
 8009eca:	eeb0 0a67 	vmov.f32	s0, s15
 8009ece:	f01a fb57 	bl	8024580 <sinf>
 8009ed2:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    cosy = cosf(delta[PITCH]);
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	3304      	adds	r3, #4
 8009eda:	edd3 7a00 	vldr	s15, [r3]
 8009ede:	eeb0 0a67 	vmov.f32	s0, s15
 8009ee2:	f01a fac9 	bl	8024478 <cosf>
 8009ee6:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
    siny = sinf(delta[PITCH]);
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	3304      	adds	r3, #4
 8009eee:	edd3 7a00 	vldr	s15, [r3]
 8009ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8009ef6:	f01a fb43 	bl	8024580 <sinf>
 8009efa:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
    cosz = cosf(delta[YAW]);
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	3308      	adds	r3, #8
 8009f02:	edd3 7a00 	vldr	s15, [r3]
 8009f06:	eeb0 0a67 	vmov.f32	s0, s15
 8009f0a:	f01a fab5 	bl	8024478 <cosf>
 8009f0e:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
    sinz = sinf(delta[YAW]);
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	3308      	adds	r3, #8
 8009f16:	edd3 7a00 	vldr	s15, [r3]
 8009f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8009f1e:	f01a fb2f 	bl	8024580 <sinf>
 8009f22:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

    coszcosx = cosz * cosx;
 8009f26:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009f2a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f32:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    sinzcosx = sinz * cosx;
 8009f36:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009f3a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f42:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    coszsinx = sinx * cosz;
 8009f46:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009f4a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8009f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f52:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sinzsinx = sinx * sinz;
 8009f56:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009f5a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f62:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

    mat[0][0] = cosz * cosy;
 8009f66:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009f6a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f72:	edc7 7a02 	vstr	s15, [r7, #8]
    mat[0][1] = -cosy * sinz;
 8009f76:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009f7a:	eeb1 7a67 	vneg.f32	s14, s15
 8009f7e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f86:	edc7 7a03 	vstr	s15, [r7, #12]
    mat[0][2] = siny;
 8009f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f8c:	613b      	str	r3, [r7, #16]
    mat[1][0] = sinzcosx + (coszsinx * siny);
 8009f8e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009f92:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009f96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f9a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009fa2:	edc7 7a05 	vstr	s15, [r7, #20]
    mat[1][1] = coszcosx - (sinzsinx * siny);
 8009fa6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009faa:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fb2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009fb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fba:	edc7 7a06 	vstr	s15, [r7, #24]
    mat[1][2] = -sinx * cosy;
 8009fbe:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009fc2:	eeb1 7a67 	vneg.f32	s14, s15
 8009fc6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fce:	edc7 7a07 	vstr	s15, [r7, #28]
    mat[2][0] = (sinzsinx) - (coszcosx * siny);
 8009fd2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009fd6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fde:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009fe2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fe6:	edc7 7a08 	vstr	s15, [r7, #32]
    mat[2][1] = (coszsinx) + (sinzcosx * siny);
 8009fea:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009fee:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009ff2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ff6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ffe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    mat[2][2] = cosy * cosx;
 800a002:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a006:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800a00a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a00e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    v->X = v_tmp.X * mat[0][0] + v_tmp.Y * mat[1][0] + v_tmp.Z * mat[2][0];
 800a012:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a016:	edd7 7a02 	vldr	s15, [r7, #8]
 800a01a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a01e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800a022:	edd7 7a05 	vldr	s15, [r7, #20]
 800a026:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a02a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a02e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800a032:	edd7 7a08 	vldr	s15, [r7, #32]
 800a036:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a03a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	edc3 7a00 	vstr	s15, [r3]
    v->Y = v_tmp.X * mat[0][1] + v_tmp.Y * mat[1][1] + v_tmp.Z * mat[2][1];
 800a044:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a048:	edd7 7a03 	vldr	s15, [r7, #12]
 800a04c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a050:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800a054:	edd7 7a06 	vldr	s15, [r7, #24]
 800a058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a05c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a060:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800a064:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a06c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	edc3 7a01 	vstr	s15, [r3, #4]
    v->Z = v_tmp.X * mat[0][2] + v_tmp.Y * mat[1][2] + v_tmp.Z * mat[2][2];
 800a076:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a07a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a07e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a082:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800a086:	edd7 7a07 	vldr	s15, [r7, #28]
 800a08a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a08e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a092:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800a096:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a09a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a09e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800a0a8:	bf00      	nop
 800a0aa:	3760      	adds	r7, #96	; 0x60
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <applyDeadband>:

int32_t applyDeadband(int32_t value, int32_t deadband)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
    if (abs(value) < deadband) {
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	bfb8      	it	lt
 800a0c0:	425b      	neglt	r3, r3
 800a0c2:	683a      	ldr	r2, [r7, #0]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	dd02      	ble.n	800a0ce <applyDeadband+0x1e>
        value = 0;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	607b      	str	r3, [r7, #4]
 800a0cc:	e00e      	b.n	800a0ec <applyDeadband+0x3c>
    } else if (value > 0) {
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	dd04      	ble.n	800a0de <applyDeadband+0x2e>
        value -= deadband;
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	607b      	str	r3, [r7, #4]
 800a0dc:	e006      	b.n	800a0ec <applyDeadband+0x3c>
    } else if (value < 0) {
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	da03      	bge.n	800a0ec <applyDeadband+0x3c>
        value += deadband;
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	607b      	str	r3, [r7, #4]
    }
    return value;
 800a0ec:	687b      	ldr	r3, [r7, #4]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	370c      	adds	r7, #12
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr
 800a0fa:	0000      	movs	r0, r0
 800a0fc:	0000      	movs	r0, r0
	...

0800a100 <acc_calc>:

// rotate acc into Earth frame and calculate acceleration in it
void acc_calc(uint32_t deltaT)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b08a      	sub	sp, #40	; 0x28
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
    static int32_t accZoffset = 0;
    static float accz_smooth = 0;
    float dT = 0;
 800a108:	f04f 0300 	mov.w	r3, #0
 800a10c:	627b      	str	r3, [r7, #36]	; 0x24
    float rpy[3];
    t_fp_vector accel_ned;

    // deltaT is measured in us ticks
    dT = (float)deltaT * 1e-6f;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	ee07 3a90 	vmov	s15, r3
 800a114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a118:	ed9f 7a81 	vldr	s14, [pc, #516]	; 800a320 <acc_calc+0x220>
 800a11c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a120:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // the accel values have to be rotated into the earth frame
    rpy[0] = -(float)anglerad[ROLL];
 800a124:	4b7f      	ldr	r3, [pc, #508]	; (800a324 <acc_calc+0x224>)
 800a126:	edd3 7a00 	vldr	s15, [r3]
 800a12a:	eef1 7a67 	vneg.f32	s15, s15
 800a12e:	edc7 7a06 	vstr	s15, [r7, #24]
    rpy[1] = -(float)anglerad[PITCH];
 800a132:	4b7c      	ldr	r3, [pc, #496]	; (800a324 <acc_calc+0x224>)
 800a134:	edd3 7a01 	vldr	s15, [r3, #4]
 800a138:	eef1 7a67 	vneg.f32	s15, s15
 800a13c:	edc7 7a07 	vstr	s15, [r7, #28]
    rpy[2] = -(float)heading * RAD;
 800a140:	4b79      	ldr	r3, [pc, #484]	; (800a328 <acc_calc+0x228>)
 800a142:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a146:	ee07 3a90 	vmov	s15, r3
 800a14a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a14e:	eef1 7a67 	vneg.f32	s15, s15
 800a152:	ee17 3a90 	vmov	r3, s15
 800a156:	4618      	mov	r0, r3
 800a158:	f7f6 f9aa 	bl	80004b0 <__aeabi_f2d>
 800a15c:	a36e      	add	r3, pc, #440	; (adr r3, 800a318 <acc_calc+0x218>)
 800a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a162:	f7f6 f9fd 	bl	8000560 <__aeabi_dmul>
 800a166:	4602      	mov	r2, r0
 800a168:	460b      	mov	r3, r1
 800a16a:	4610      	mov	r0, r2
 800a16c:	4619      	mov	r1, r3
 800a16e:	f7f6 fcd9 	bl	8000b24 <__aeabi_d2f>
 800a172:	4603      	mov	r3, r0
 800a174:	623b      	str	r3, [r7, #32]

    accel_ned.V.X = accSmooth[0];
 800a176:	4b6d      	ldr	r3, [pc, #436]	; (800a32c <acc_calc+0x22c>)
 800a178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a17c:	ee07 3a90 	vmov	s15, r3
 800a180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a184:	edc7 7a03 	vstr	s15, [r7, #12]
    accel_ned.V.Y = accSmooth[1];
 800a188:	4b68      	ldr	r3, [pc, #416]	; (800a32c <acc_calc+0x22c>)
 800a18a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a18e:	ee07 3a90 	vmov	s15, r3
 800a192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a196:	edc7 7a04 	vstr	s15, [r7, #16]
    accel_ned.V.Z = accSmooth[2];
 800a19a:	4b64      	ldr	r3, [pc, #400]	; (800a32c <acc_calc+0x22c>)
 800a19c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a1a0:	ee07 3a90 	vmov	s15, r3
 800a1a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1a8:	edc7 7a05 	vstr	s15, [r7, #20]

    rotateV(&accel_ned.V, rpy);
 800a1ac:	f107 0218 	add.w	r2, r7, #24
 800a1b0:	f107 030c 	add.w	r3, r7, #12
 800a1b4:	4611      	mov	r1, r2
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7ff fe70 	bl	8009e9c <rotateV>

    if (cfg.acc_unarmedcal == 1) {
 800a1bc:	4b5c      	ldr	r3, [pc, #368]	; (800a330 <acc_calc+0x230>)
 800a1be:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d131      	bne.n	800a22a <acc_calc+0x12a>
        if (!f.ARMED) {
 800a1c6:	4b5b      	ldr	r3, [pc, #364]	; (800a334 <acc_calc+0x234>)
 800a1c8:	785b      	ldrb	r3, [r3, #1]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d11c      	bne.n	800a208 <acc_calc+0x108>
            accZoffset -= accZoffset / 64;
 800a1ce:	4b5a      	ldr	r3, [pc, #360]	; (800a338 <acc_calc+0x238>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	da00      	bge.n	800a1d8 <acc_calc+0xd8>
 800a1d6:	333f      	adds	r3, #63	; 0x3f
 800a1d8:	119b      	asrs	r3, r3, #6
 800a1da:	425b      	negs	r3, r3
 800a1dc:	461a      	mov	r2, r3
 800a1de:	4b56      	ldr	r3, [pc, #344]	; (800a338 <acc_calc+0x238>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	4a54      	ldr	r2, [pc, #336]	; (800a338 <acc_calc+0x238>)
 800a1e6:	6013      	str	r3, [r2, #0]
            accZoffset += accel_ned.V.Z;
 800a1e8:	4b53      	ldr	r3, [pc, #332]	; (800a338 <acc_calc+0x238>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	ee07 3a90 	vmov	s15, r3
 800a1f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a1f4:	edd7 7a05 	vldr	s15, [r7, #20]
 800a1f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a200:	ee17 2a90 	vmov	r2, s15
 800a204:	4b4c      	ldr	r3, [pc, #304]	; (800a338 <acc_calc+0x238>)
 800a206:	601a      	str	r2, [r3, #0]
        }
        accel_ned.V.Z -= accZoffset / 64;  // compensate for gravitation on z-axis
 800a208:	ed97 7a05 	vldr	s14, [r7, #20]
 800a20c:	4b4a      	ldr	r3, [pc, #296]	; (800a338 <acc_calc+0x238>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	da00      	bge.n	800a216 <acc_calc+0x116>
 800a214:	333f      	adds	r3, #63	; 0x3f
 800a216:	119b      	asrs	r3, r3, #6
 800a218:	ee07 3a90 	vmov	s15, r3
 800a21c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a220:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a224:	edc7 7a05 	vstr	s15, [r7, #20]
 800a228:	e00c      	b.n	800a244 <acc_calc+0x144>
    } else
        accel_ned.V.Z -= sensor_set.acc.acc_1G;
 800a22a:	ed97 7a05 	vldr	s14, [r7, #20]
 800a22e:	4b43      	ldr	r3, [pc, #268]	; (800a33c <acc_calc+0x23c>)
 800a230:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800a234:	ee07 3a90 	vmov	s15, r3
 800a238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a23c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a240:	edc7 7a05 	vstr	s15, [r7, #20]

    accz_smooth = accz_smooth + (dT / (fc_acc + dT)) * (accel_ned.V.Z - accz_smooth); // low pass filter
 800a244:	4b3e      	ldr	r3, [pc, #248]	; (800a340 <acc_calc+0x240>)
 800a246:	ed93 7a00 	vldr	s14, [r3]
 800a24a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a24e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a252:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a25a:	edd7 6a05 	vldr	s13, [r7, #20]
 800a25e:	4b39      	ldr	r3, [pc, #228]	; (800a344 <acc_calc+0x244>)
 800a260:	edd3 7a00 	vldr	s15, [r3]
 800a264:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a268:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a26c:	4b35      	ldr	r3, [pc, #212]	; (800a344 <acc_calc+0x244>)
 800a26e:	edd3 7a00 	vldr	s15, [r3]
 800a272:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a276:	4b33      	ldr	r3, [pc, #204]	; (800a344 <acc_calc+0x244>)
 800a278:	edc3 7a00 	vstr	s15, [r3]

    // apply Deadband to reduce integration drift and vibration influence and
    // sum up Values for later integration to get velocity and distance
    accSum[X] += applyDeadband(lrintf(accel_ned.V.X), cfg.accxy_deadband);
 800a27c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a280:	eeb0 0a67 	vmov.f32	s0, s15
 800a284:	f01a f93c 	bl	8024500 <lrintf>
 800a288:	4603      	mov	r3, r0
 800a28a:	4a29      	ldr	r2, [pc, #164]	; (800a330 <acc_calc+0x230>)
 800a28c:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 800a290:	4611      	mov	r1, r2
 800a292:	4618      	mov	r0, r3
 800a294:	f7ff ff0c 	bl	800a0b0 <applyDeadband>
 800a298:	4602      	mov	r2, r0
 800a29a:	4b2b      	ldr	r3, [pc, #172]	; (800a348 <acc_calc+0x248>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4413      	add	r3, r2
 800a2a0:	4a29      	ldr	r2, [pc, #164]	; (800a348 <acc_calc+0x248>)
 800a2a2:	6013      	str	r3, [r2, #0]
    accSum[Y] += applyDeadband(lrintf(accel_ned.V.Y), cfg.accxy_deadband);
 800a2a4:	edd7 7a04 	vldr	s15, [r7, #16]
 800a2a8:	eeb0 0a67 	vmov.f32	s0, s15
 800a2ac:	f01a f928 	bl	8024500 <lrintf>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	4a1f      	ldr	r2, [pc, #124]	; (800a330 <acc_calc+0x230>)
 800a2b4:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 800a2b8:	4611      	mov	r1, r2
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7ff fef8 	bl	800a0b0 <applyDeadband>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	4b21      	ldr	r3, [pc, #132]	; (800a348 <acc_calc+0x248>)
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	4a1f      	ldr	r2, [pc, #124]	; (800a348 <acc_calc+0x248>)
 800a2ca:	6053      	str	r3, [r2, #4]
    accSum[Z] += applyDeadband(lrintf(accz_smooth), cfg.accz_deadband);
 800a2cc:	4b1d      	ldr	r3, [pc, #116]	; (800a344 <acc_calc+0x244>)
 800a2ce:	edd3 7a00 	vldr	s15, [r3]
 800a2d2:	eeb0 0a67 	vmov.f32	s0, s15
 800a2d6:	f01a f913 	bl	8024500 <lrintf>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	4a14      	ldr	r2, [pc, #80]	; (800a330 <acc_calc+0x230>)
 800a2de:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7ff fee3 	bl	800a0b0 <applyDeadband>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	4b16      	ldr	r3, [pc, #88]	; (800a348 <acc_calc+0x248>)
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	4a15      	ldr	r2, [pc, #84]	; (800a348 <acc_calc+0x248>)
 800a2f4:	6093      	str	r3, [r2, #8]

    accTimeSum += deltaT;
 800a2f6:	4b15      	ldr	r3, [pc, #84]	; (800a34c <acc_calc+0x24c>)
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	4a13      	ldr	r2, [pc, #76]	; (800a34c <acc_calc+0x24c>)
 800a300:	6013      	str	r3, [r2, #0]
    accSumCount++;
 800a302:	4b13      	ldr	r3, [pc, #76]	; (800a350 <acc_calc+0x250>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	3301      	adds	r3, #1
 800a308:	4a11      	ldr	r2, [pc, #68]	; (800a350 <acc_calc+0x250>)
 800a30a:	6013      	str	r3, [r2, #0]
}
 800a30c:	bf00      	nop
 800a30e:	3728      	adds	r7, #40	; 0x28
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	f3af 8000 	nop.w
 800a318:	a2529d39 	.word	0xa2529d39
 800a31c:	3f91df46 	.word	0x3f91df46
 800a320:	358637bd 	.word	0x358637bd
 800a324:	200014f8 	.word	0x200014f8
 800a328:	20001a7e 	.word	0x20001a7e
 800a32c:	2000147c 	.word	0x2000147c
 800a330:	20000e08 	.word	0x20000e08
 800a334:	2000174c 	.word	0x2000174c
 800a338:	20001510 	.word	0x20001510
 800a33c:	20000060 	.word	0x20000060
 800a340:	200014e0 	.word	0x200014e0
 800a344:	20001514 	.word	0x20001514
 800a348:	2000148c 	.word	0x2000148c
 800a34c:	20001498 	.word	0x20001498
 800a350:	2000149c 	.word	0x2000149c

0800a354 <accSum_reset>:

void accSum_reset(void)
{
 800a354:	b480      	push	{r7}
 800a356:	af00      	add	r7, sp, #0
    accSum[0] = 0;
 800a358:	4b09      	ldr	r3, [pc, #36]	; (800a380 <accSum_reset+0x2c>)
 800a35a:	2200      	movs	r2, #0
 800a35c:	601a      	str	r2, [r3, #0]
    accSum[1] = 0;
 800a35e:	4b08      	ldr	r3, [pc, #32]	; (800a380 <accSum_reset+0x2c>)
 800a360:	2200      	movs	r2, #0
 800a362:	605a      	str	r2, [r3, #4]
    accSum[2] = 0;
 800a364:	4b06      	ldr	r3, [pc, #24]	; (800a380 <accSum_reset+0x2c>)
 800a366:	2200      	movs	r2, #0
 800a368:	609a      	str	r2, [r3, #8]
    accSumCount = 0;
 800a36a:	4b06      	ldr	r3, [pc, #24]	; (800a384 <accSum_reset+0x30>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	601a      	str	r2, [r3, #0]
    accTimeSum = 0;
 800a370:	4b05      	ldr	r3, [pc, #20]	; (800a388 <accSum_reset+0x34>)
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]
}
 800a376:	bf00      	nop
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr
 800a380:	2000148c 	.word	0x2000148c
 800a384:	2000149c 	.word	0x2000149c
 800a388:	20001498 	.word	0x20001498
 800a38c:	00000000 	.word	0x00000000

0800a390 <calculateHeading>:

// baseflight calculation by Luggi09 originates from arducopter
static int16_t calculateHeading(t_fp_vector *vec)
{
 800a390:	b5b0      	push	{r4, r5, r7, lr}
 800a392:	b08a      	sub	sp, #40	; 0x28
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
    int16_t head;

    float cosineRoll = cosf(anglerad[ROLL]);
 800a398:	4b53      	ldr	r3, [pc, #332]	; (800a4e8 <calculateHeading+0x158>)
 800a39a:	edd3 7a00 	vldr	s15, [r3]
 800a39e:	eeb0 0a67 	vmov.f32	s0, s15
 800a3a2:	f01a f869 	bl	8024478 <cosf>
 800a3a6:	ed87 0a08 	vstr	s0, [r7, #32]
    float sineRoll = sinf(anglerad[ROLL]);
 800a3aa:	4b4f      	ldr	r3, [pc, #316]	; (800a4e8 <calculateHeading+0x158>)
 800a3ac:	edd3 7a00 	vldr	s15, [r3]
 800a3b0:	eeb0 0a67 	vmov.f32	s0, s15
 800a3b4:	f01a f8e4 	bl	8024580 <sinf>
 800a3b8:	ed87 0a07 	vstr	s0, [r7, #28]
    float cosinePitch = cosf(anglerad[PITCH]);
 800a3bc:	4b4a      	ldr	r3, [pc, #296]	; (800a4e8 <calculateHeading+0x158>)
 800a3be:	edd3 7a01 	vldr	s15, [r3, #4]
 800a3c2:	eeb0 0a67 	vmov.f32	s0, s15
 800a3c6:	f01a f857 	bl	8024478 <cosf>
 800a3ca:	ed87 0a06 	vstr	s0, [r7, #24]
    float sinePitch = sinf(anglerad[PITCH]);
 800a3ce:	4b46      	ldr	r3, [pc, #280]	; (800a4e8 <calculateHeading+0x158>)
 800a3d0:	edd3 7a01 	vldr	s15, [r3, #4]
 800a3d4:	eeb0 0a67 	vmov.f32	s0, s15
 800a3d8:	f01a f8d2 	bl	8024580 <sinf>
 800a3dc:	ed87 0a05 	vstr	s0, [r7, #20]
    float Xh = vec->A[X] * cosinePitch + vec->A[Y] * sineRoll * sinePitch + vec->A[Z] * sinePitch * cosineRoll;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	ed93 7a00 	vldr	s14, [r3]
 800a3e6:	edd7 7a06 	vldr	s15, [r7, #24]
 800a3ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	edd3 6a01 	vldr	s13, [r3, #4]
 800a3f4:	edd7 7a07 	vldr	s15, [r7, #28]
 800a3f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a3fc:	edd7 7a05 	vldr	s15, [r7, #20]
 800a400:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a404:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	edd3 6a02 	vldr	s13, [r3, #8]
 800a40e:	edd7 7a05 	vldr	s15, [r7, #20]
 800a412:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a416:	edd7 7a08 	vldr	s15, [r7, #32]
 800a41a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a41e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a422:	edc7 7a04 	vstr	s15, [r7, #16]
    float Yh = vec->A[Y] * cosineRoll - vec->A[Z] * sineRoll;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	ed93 7a01 	vldr	s14, [r3, #4]
 800a42c:	edd7 7a08 	vldr	s15, [r7, #32]
 800a430:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	edd3 6a02 	vldr	s13, [r3, #8]
 800a43a:	edd7 7a07 	vldr	s15, [r7, #28]
 800a43e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a442:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a446:	edc7 7a03 	vstr	s15, [r7, #12]
    float hd = (atan2f(Yh, Xh) * 1800.0f / M_PI + sensor_set.mag.declination) / 10.0f;
 800a44a:	edd7 0a04 	vldr	s1, [r7, #16]
 800a44e:	ed97 0a03 	vldr	s0, [r7, #12]
 800a452:	f01a f907 	bl	8024664 <atan2f>
 800a456:	eef0 7a40 	vmov.f32	s15, s0
 800a45a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800a4ec <calculateHeading+0x15c>
 800a45e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a462:	ee17 0a90 	vmov	r0, s15
 800a466:	f7f6 f823 	bl	80004b0 <__aeabi_f2d>
 800a46a:	a31d      	add	r3, pc, #116	; (adr r3, 800a4e0 <calculateHeading+0x150>)
 800a46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a470:	f7f6 f9a0 	bl	80007b4 <__aeabi_ddiv>
 800a474:	4602      	mov	r2, r0
 800a476:	460b      	mov	r3, r1
 800a478:	4614      	mov	r4, r2
 800a47a:	461d      	mov	r5, r3
 800a47c:	4b1c      	ldr	r3, [pc, #112]	; (800a4f0 <calculateHeading+0x160>)
 800a47e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a482:	4618      	mov	r0, r3
 800a484:	f7f6 f814 	bl	80004b0 <__aeabi_f2d>
 800a488:	4602      	mov	r2, r0
 800a48a:	460b      	mov	r3, r1
 800a48c:	4620      	mov	r0, r4
 800a48e:	4629      	mov	r1, r5
 800a490:	f7f5 feb0 	bl	80001f4 <__adddf3>
 800a494:	4602      	mov	r2, r0
 800a496:	460b      	mov	r3, r1
 800a498:	4610      	mov	r0, r2
 800a49a:	4619      	mov	r1, r3
 800a49c:	f04f 0200 	mov.w	r2, #0
 800a4a0:	4b14      	ldr	r3, [pc, #80]	; (800a4f4 <calculateHeading+0x164>)
 800a4a2:	f7f6 f987 	bl	80007b4 <__aeabi_ddiv>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	4610      	mov	r0, r2
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	f7f6 fb39 	bl	8000b24 <__aeabi_d2f>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	60bb      	str	r3, [r7, #8]
    head = lrintf(hd);
 800a4b6:	ed97 0a02 	vldr	s0, [r7, #8]
 800a4ba:	f01a f821 	bl	8024500 <lrintf>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (head < 0)
 800a4c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	da04      	bge.n	800a4d4 <calculateHeading+0x144>
        head += 360;
 800a4ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	84fb      	strh	r3, [r7, #38]	; 0x26

    return head;
 800a4d4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3728      	adds	r7, #40	; 0x28
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bdb0      	pop	{r4, r5, r7, pc}
 800a4e0:	54442d18 	.word	0x54442d18
 800a4e4:	400921fb 	.word	0x400921fb
 800a4e8:	200014f8 	.word	0x200014f8
 800a4ec:	44e10000 	.word	0x44e10000
 800a4f0:	20000060 	.word	0x20000060
 800a4f4:	40240000 	.word	0x40240000

0800a4f8 <getEstimatedAttitude>:

static void getEstimatedAttitude(void)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	ed2d 8b02 	vpush	{d8}
 800a4fe:	b08a      	sub	sp, #40	; 0x28
 800a500:	af00      	add	r7, sp, #0
    int32_t axis;
    int32_t accMag = 0;
 800a502:	2300      	movs	r3, #0
 800a504:	623b      	str	r3, [r7, #32]
    static t_fp_vector EstM;
    static t_fp_vector EstN = { .A = { 1.0f, 0.0f, 0.0f } };
    static float accLPF[3];
    static uint32_t previousT = 0UL;
    uint32_t currentT = (*pif_act_timer1us)();
 800a506:	4bbe      	ldr	r3, [pc, #760]	; (800a800 <getEstimatedAttitude+0x308>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4798      	blx	r3
 800a50c:	61b8      	str	r0, [r7, #24]
    uint32_t deltaT;
    float scale, deltaGyroAngle[3];
    deltaT = currentT - previousT;
 800a50e:	4bbd      	ldr	r3, [pc, #756]	; (800a804 <getEstimatedAttitude+0x30c>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	69ba      	ldr	r2, [r7, #24]
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	617b      	str	r3, [r7, #20]
    scale = deltaT * sensor_set.gyro.scale;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	ee07 3a90 	vmov	s15, r3
 800a51e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a522:	4bb9      	ldr	r3, [pc, #740]	; (800a808 <getEstimatedAttitude+0x310>)
 800a524:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800a528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a52c:	edc7 7a04 	vstr	s15, [r7, #16]
    previousT = currentT;
 800a530:	4ab4      	ldr	r2, [pc, #720]	; (800a804 <getEstimatedAttitude+0x30c>)
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	6013      	str	r3, [r2, #0]

    // Initialization
    for (axis = 0; axis < 3; axis++) {
 800a536:	2300      	movs	r3, #0
 800a538:	627b      	str	r3, [r7, #36]	; 0x24
 800a53a:	e074      	b.n	800a626 <getEstimatedAttitude+0x12e>
        deltaGyroAngle[axis] = gyroADC[axis] * scale;
 800a53c:	4ab3      	ldr	r2, [pc, #716]	; (800a80c <getEstimatedAttitude+0x314>)
 800a53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a540:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a544:	ee07 3a90 	vmov	s15, r3
 800a548:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a54c:	edd7 7a04 	vldr	s15, [r7, #16]
 800a550:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	3328      	adds	r3, #40	; 0x28
 800a55a:	443b      	add	r3, r7
 800a55c:	3b28      	subs	r3, #40	; 0x28
 800a55e:	edc3 7a00 	vstr	s15, [r3]
        if (cfg.acc_lpf_factor > 0) {
 800a562:	4bab      	ldr	r3, [pc, #684]	; (800a810 <getEstimatedAttitude+0x318>)
 800a564:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d043      	beq.n	800a5f4 <getEstimatedAttitude+0xfc>
            accLPF[axis] = accLPF[axis] * (1.0f - (1.0f / cfg.acc_lpf_factor)) + accADC[axis] * (1.0f / cfg.acc_lpf_factor);
 800a56c:	4aa9      	ldr	r2, [pc, #676]	; (800a814 <getEstimatedAttitude+0x31c>)
 800a56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	4413      	add	r3, r2
 800a574:	ed93 7a00 	vldr	s14, [r3]
 800a578:	4ba5      	ldr	r3, [pc, #660]	; (800a810 <getEstimatedAttitude+0x318>)
 800a57a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a57e:	ee07 3a90 	vmov	s15, r3
 800a582:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a586:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a58a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a58e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a592:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a596:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a59a:	4a9f      	ldr	r2, [pc, #636]	; (800a818 <getEstimatedAttitude+0x320>)
 800a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a5a2:	ee07 3a90 	vmov	s15, r3
 800a5a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a5aa:	4b99      	ldr	r3, [pc, #612]	; (800a810 <getEstimatedAttitude+0x318>)
 800a5ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a5b0:	ee07 3a90 	vmov	s15, r3
 800a5b4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a5b8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a5bc:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800a5c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a5c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5c8:	4a92      	ldr	r2, [pc, #584]	; (800a814 <getEstimatedAttitude+0x31c>)
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	4413      	add	r3, r2
 800a5d0:	edc3 7a00 	vstr	s15, [r3]
            accSmooth[axis] = accLPF[axis];
 800a5d4:	4a8f      	ldr	r2, [pc, #572]	; (800a814 <getEstimatedAttitude+0x31c>)
 800a5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d8:	009b      	lsls	r3, r3, #2
 800a5da:	4413      	add	r3, r2
 800a5dc:	edd3 7a00 	vldr	s15, [r3]
 800a5e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a5e4:	ee17 3a90 	vmov	r3, s15
 800a5e8:	b219      	sxth	r1, r3
 800a5ea:	4a8c      	ldr	r2, [pc, #560]	; (800a81c <getEstimatedAttitude+0x324>)
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800a5f2:	e007      	b.n	800a604 <getEstimatedAttitude+0x10c>
        } else {
            accSmooth[axis] = accADC[axis];
 800a5f4:	4a88      	ldr	r2, [pc, #544]	; (800a818 <getEstimatedAttitude+0x320>)
 800a5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f8:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800a5fc:	4a87      	ldr	r2, [pc, #540]	; (800a81c <getEstimatedAttitude+0x324>)
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a600:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        accMag += (int32_t)accSmooth[axis] * accSmooth[axis];
 800a604:	4a85      	ldr	r2, [pc, #532]	; (800a81c <getEstimatedAttitude+0x324>)
 800a606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a608:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a60c:	4619      	mov	r1, r3
 800a60e:	4a83      	ldr	r2, [pc, #524]	; (800a81c <getEstimatedAttitude+0x324>)
 800a610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a612:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a616:	fb01 f303 	mul.w	r3, r1, r3
 800a61a:	6a3a      	ldr	r2, [r7, #32]
 800a61c:	4413      	add	r3, r2
 800a61e:	623b      	str	r3, [r7, #32]
    for (axis = 0; axis < 3; axis++) {
 800a620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a622:	3301      	adds	r3, #1
 800a624:	627b      	str	r3, [r7, #36]	; 0x24
 800a626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a628:	2b02      	cmp	r3, #2
 800a62a:	dd87      	ble.n	800a53c <getEstimatedAttitude+0x44>
    }
    accMag = accMag * 100 / ((int32_t)sensor_set.acc.acc_1G * sensor_set.acc.acc_1G);
 800a62c:	6a3b      	ldr	r3, [r7, #32]
 800a62e:	2264      	movs	r2, #100	; 0x64
 800a630:	fb03 f202 	mul.w	r2, r3, r2
 800a634:	4b74      	ldr	r3, [pc, #464]	; (800a808 <getEstimatedAttitude+0x310>)
 800a636:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800a63a:	4619      	mov	r1, r3
 800a63c:	4b72      	ldr	r3, [pc, #456]	; (800a808 <getEstimatedAttitude+0x310>)
 800a63e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800a642:	fb01 f303 	mul.w	r3, r1, r3
 800a646:	fb92 f3f3 	sdiv	r3, r2, r3
 800a64a:	623b      	str	r3, [r7, #32]

    rotateV(&EstG.V, deltaGyroAngle);
 800a64c:	463b      	mov	r3, r7
 800a64e:	4619      	mov	r1, r3
 800a650:	4873      	ldr	r0, [pc, #460]	; (800a820 <getEstimatedAttitude+0x328>)
 800a652:	f7ff fc23 	bl	8009e9c <rotateV>

    // Apply complimentary filter (Gyro drift correction)
    // If accel magnitude >1.15G or <0.85G and ACC vector outside of the limit range => we neutralize the effect of accelerometers in the angle estimation.
    // To do that, we just skip filter, as EstV already rotated by Gyro
    if (72 < (uint16_t)accMag && (uint16_t)accMag < 133) {
 800a656:	6a3b      	ldr	r3, [r7, #32]
 800a658:	b29b      	uxth	r3, r3
 800a65a:	2b48      	cmp	r3, #72	; 0x48
 800a65c:	d93c      	bls.n	800a6d8 <getEstimatedAttitude+0x1e0>
 800a65e:	6a3b      	ldr	r3, [r7, #32]
 800a660:	b29b      	uxth	r3, r3
 800a662:	2b84      	cmp	r3, #132	; 0x84
 800a664:	d838      	bhi.n	800a6d8 <getEstimatedAttitude+0x1e0>
        for (axis = 0; axis < 3; axis++)
 800a666:	2300      	movs	r3, #0
 800a668:	627b      	str	r3, [r7, #36]	; 0x24
 800a66a:	e032      	b.n	800a6d2 <getEstimatedAttitude+0x1da>
            EstG.A[axis] = (EstG.A[axis] * (float)mcfg.gyro_cmpf_factor + accSmooth[axis]) * INV_GYR_CMPF_FACTOR;
 800a66c:	4a6c      	ldr	r2, [pc, #432]	; (800a820 <getEstimatedAttitude+0x328>)
 800a66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4413      	add	r3, r2
 800a674:	ed93 7a00 	vldr	s14, [r3]
 800a678:	4b6a      	ldr	r3, [pc, #424]	; (800a824 <getEstimatedAttitude+0x32c>)
 800a67a:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a67e:	ee07 3a90 	vmov	s15, r3
 800a682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a686:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a68a:	4a64      	ldr	r2, [pc, #400]	; (800a81c <getEstimatedAttitude+0x324>)
 800a68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a692:	ee07 3a90 	vmov	s15, r3
 800a696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a69a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a69e:	4b61      	ldr	r3, [pc, #388]	; (800a824 <getEstimatedAttitude+0x32c>)
 800a6a0:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a6a4:	ee07 3a90 	vmov	s15, r3
 800a6a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6b0:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a6b4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a6b8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a6bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6c0:	4a57      	ldr	r2, [pc, #348]	; (800a820 <getEstimatedAttitude+0x328>)
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	4413      	add	r3, r2
 800a6c8:	edc3 7a00 	vstr	s15, [r3]
        for (axis = 0; axis < 3; axis++)
 800a6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	627b      	str	r3, [r7, #36]	; 0x24
 800a6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d4:	2b02      	cmp	r3, #2
 800a6d6:	ddc9      	ble.n	800a66c <getEstimatedAttitude+0x174>
    }

    f.SMALL_ANGLE = (EstG.A[Z] > smallAngle);
 800a6d8:	4b51      	ldr	r3, [pc, #324]	; (800a820 <getEstimatedAttitude+0x328>)
 800a6da:	ed93 7a02 	vldr	s14, [r3, #8]
 800a6de:	4b52      	ldr	r3, [pc, #328]	; (800a828 <getEstimatedAttitude+0x330>)
 800a6e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a6e4:	ee07 3a90 	vmov	s15, r3
 800a6e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6f4:	bfcc      	ite	gt
 800a6f6:	2301      	movgt	r3, #1
 800a6f8:	2300      	movle	r3, #0
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	4b4b      	ldr	r3, [pc, #300]	; (800a82c <getEstimatedAttitude+0x334>)
 800a700:	735a      	strb	r2, [r3, #13]

    // Attitude of the estimated vector
    anglerad[ROLL] = atan2f(EstG.V.Y, EstG.V.Z);
 800a702:	4b47      	ldr	r3, [pc, #284]	; (800a820 <getEstimatedAttitude+0x328>)
 800a704:	edd3 7a01 	vldr	s15, [r3, #4]
 800a708:	4b45      	ldr	r3, [pc, #276]	; (800a820 <getEstimatedAttitude+0x328>)
 800a70a:	ed93 7a02 	vldr	s14, [r3, #8]
 800a70e:	eef0 0a47 	vmov.f32	s1, s14
 800a712:	eeb0 0a67 	vmov.f32	s0, s15
 800a716:	f019 ffa5 	bl	8024664 <atan2f>
 800a71a:	eef0 7a40 	vmov.f32	s15, s0
 800a71e:	4b44      	ldr	r3, [pc, #272]	; (800a830 <getEstimatedAttitude+0x338>)
 800a720:	edc3 7a00 	vstr	s15, [r3]
    anglerad[PITCH] = atan2f(-EstG.V.X, sqrtf(EstG.V.Y * EstG.V.Y + EstG.V.Z * EstG.V.Z));
 800a724:	4b3e      	ldr	r3, [pc, #248]	; (800a820 <getEstimatedAttitude+0x328>)
 800a726:	edd3 7a00 	vldr	s15, [r3]
 800a72a:	eeb1 8a67 	vneg.f32	s16, s15
 800a72e:	4b3c      	ldr	r3, [pc, #240]	; (800a820 <getEstimatedAttitude+0x328>)
 800a730:	ed93 7a01 	vldr	s14, [r3, #4]
 800a734:	4b3a      	ldr	r3, [pc, #232]	; (800a820 <getEstimatedAttitude+0x328>)
 800a736:	edd3 7a01 	vldr	s15, [r3, #4]
 800a73a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a73e:	4b38      	ldr	r3, [pc, #224]	; (800a820 <getEstimatedAttitude+0x328>)
 800a740:	edd3 6a02 	vldr	s13, [r3, #8]
 800a744:	4b36      	ldr	r3, [pc, #216]	; (800a820 <getEstimatedAttitude+0x328>)
 800a746:	edd3 7a02 	vldr	s15, [r3, #8]
 800a74a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a74e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a752:	eeb0 0a67 	vmov.f32	s0, s15
 800a756:	f019 ffdf 	bl	8024718 <sqrtf>
 800a75a:	eef0 7a40 	vmov.f32	s15, s0
 800a75e:	eef0 0a67 	vmov.f32	s1, s15
 800a762:	eeb0 0a48 	vmov.f32	s0, s16
 800a766:	f019 ff7d 	bl	8024664 <atan2f>
 800a76a:	eef0 7a40 	vmov.f32	s15, s0
 800a76e:	4b30      	ldr	r3, [pc, #192]	; (800a830 <getEstimatedAttitude+0x338>)
 800a770:	edc3 7a01 	vstr	s15, [r3, #4]
    angle[ROLL] = lrintf(anglerad[ROLL] * (1800.0f / M_PI));
 800a774:	4b2e      	ldr	r3, [pc, #184]	; (800a830 <getEstimatedAttitude+0x338>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4618      	mov	r0, r3
 800a77a:	f7f5 fe99 	bl	80004b0 <__aeabi_f2d>
 800a77e:	a31e      	add	r3, pc, #120	; (adr r3, 800a7f8 <getEstimatedAttitude+0x300>)
 800a780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a784:	f7f5 feec 	bl	8000560 <__aeabi_dmul>
 800a788:	4602      	mov	r2, r0
 800a78a:	460b      	mov	r3, r1
 800a78c:	4610      	mov	r0, r2
 800a78e:	4619      	mov	r1, r3
 800a790:	f7f6 f9c8 	bl	8000b24 <__aeabi_d2f>
 800a794:	4603      	mov	r3, r0
 800a796:	ee00 3a10 	vmov	s0, r3
 800a79a:	f019 feb1 	bl	8024500 <lrintf>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	b21a      	sxth	r2, r3
 800a7a2:	4b24      	ldr	r3, [pc, #144]	; (800a834 <getEstimatedAttitude+0x33c>)
 800a7a4:	801a      	strh	r2, [r3, #0]
    angle[PITCH] = lrintf(anglerad[PITCH] * (1800.0f / M_PI));
 800a7a6:	4b22      	ldr	r3, [pc, #136]	; (800a830 <getEstimatedAttitude+0x338>)
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7f5 fe80 	bl	80004b0 <__aeabi_f2d>
 800a7b0:	a311      	add	r3, pc, #68	; (adr r3, 800a7f8 <getEstimatedAttitude+0x300>)
 800a7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b6:	f7f5 fed3 	bl	8000560 <__aeabi_dmul>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	4610      	mov	r0, r2
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	f7f6 f9af 	bl	8000b24 <__aeabi_d2f>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	ee00 3a10 	vmov	s0, r3
 800a7cc:	f019 fe98 	bl	8024500 <lrintf>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	b21a      	sxth	r2, r3
 800a7d4:	4b17      	ldr	r3, [pc, #92]	; (800a834 <getEstimatedAttitude+0x33c>)
 800a7d6:	805a      	strh	r2, [r3, #2]

    if (sensors(SENSOR_MAG)) {
 800a7d8:	2008      	movs	r0, #8
 800a7da:	f7fc fc19 	bl	8007010 <sensors>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d069      	beq.n	800a8b8 <getEstimatedAttitude+0x3c0>
        rotateV(&EstM.V, deltaGyroAngle);
 800a7e4:	463b      	mov	r3, r7
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	4813      	ldr	r0, [pc, #76]	; (800a838 <getEstimatedAttitude+0x340>)
 800a7ea:	f7ff fb57 	bl	8009e9c <rotateV>
        for (axis = 0; axis < 3; axis++)
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	627b      	str	r3, [r7, #36]	; 0x24
 800a7f2:	e056      	b.n	800a8a2 <getEstimatedAttitude+0x3aa>
 800a7f4:	f3af 8000 	nop.w
 800a7f8:	907e593b 	.word	0x907e593b
 800a7fc:	4081e7a9 	.word	0x4081e7a9
 800a800:	20001e08 	.word	0x20001e08
 800a804:	20001518 	.word	0x20001518
 800a808:	20000060 	.word	0x20000060
 800a80c:	2000146c 	.word	0x2000146c
 800a810:	20000e08 	.word	0x20000e08
 800a814:	2000151c 	.word	0x2000151c
 800a818:	20001474 	.word	0x20001474
 800a81c:	2000147c 	.word	0x2000147c
 800a820:	20001500 	.word	0x20001500
 800a824:	2000089c 	.word	0x2000089c
 800a828:	200014a0 	.word	0x200014a0
 800a82c:	2000174c 	.word	0x2000174c
 800a830:	200014f8 	.word	0x200014f8
 800a834:	200014f4 	.word	0x200014f4
 800a838:	20001528 	.word	0x20001528
            EstM.A[axis] = (EstM.A[axis] * (float)mcfg.gyro_cmpfm_factor + magADC[axis]) * INV_GYR_CMPFM_FACTOR;
 800a83c:	4a6a      	ldr	r2, [pc, #424]	; (800a9e8 <getEstimatedAttitude+0x4f0>)
 800a83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	4413      	add	r3, r2
 800a844:	ed93 7a00 	vldr	s14, [r3]
 800a848:	4b68      	ldr	r3, [pc, #416]	; (800a9ec <getEstimatedAttitude+0x4f4>)
 800a84a:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a84e:	ee07 3a90 	vmov	s15, r3
 800a852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a856:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a85a:	4a65      	ldr	r2, [pc, #404]	; (800a9f0 <getEstimatedAttitude+0x4f8>)
 800a85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a862:	ee07 3a90 	vmov	s15, r3
 800a866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a86a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a86e:	4b5f      	ldr	r3, [pc, #380]	; (800a9ec <getEstimatedAttitude+0x4f4>)
 800a870:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a874:	ee07 3a90 	vmov	s15, r3
 800a878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a87c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a880:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a884:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a888:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a88c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a890:	4a55      	ldr	r2, [pc, #340]	; (800a9e8 <getEstimatedAttitude+0x4f0>)
 800a892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	4413      	add	r3, r2
 800a898:	edc3 7a00 	vstr	s15, [r3]
        for (axis = 0; axis < 3; axis++)
 800a89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89e:	3301      	adds	r3, #1
 800a8a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	ddc9      	ble.n	800a83c <getEstimatedAttitude+0x344>
        heading = calculateHeading(&EstM);
 800a8a8:	484f      	ldr	r0, [pc, #316]	; (800a9e8 <getEstimatedAttitude+0x4f0>)
 800a8aa:	f7ff fd71 	bl	800a390 <calculateHeading>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	4b50      	ldr	r3, [pc, #320]	; (800a9f4 <getEstimatedAttitude+0x4fc>)
 800a8b4:	801a      	strh	r2, [r3, #0]
 800a8b6:	e00f      	b.n	800a8d8 <getEstimatedAttitude+0x3e0>
    } else {
        rotateV(&EstN.V, deltaGyroAngle);
 800a8b8:	463b      	mov	r3, r7
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	484e      	ldr	r0, [pc, #312]	; (800a9f8 <getEstimatedAttitude+0x500>)
 800a8be:	f7ff faed 	bl	8009e9c <rotateV>
        normalizeV(&EstN.V, &EstN.V);
 800a8c2:	494d      	ldr	r1, [pc, #308]	; (800a9f8 <getEstimatedAttitude+0x500>)
 800a8c4:	484c      	ldr	r0, [pc, #304]	; (800a9f8 <getEstimatedAttitude+0x500>)
 800a8c6:	f7ff fa99 	bl	8009dfc <normalizeV>
        heading = calculateHeading(&EstN);
 800a8ca:	484b      	ldr	r0, [pc, #300]	; (800a9f8 <getEstimatedAttitude+0x500>)
 800a8cc:	f7ff fd60 	bl	800a390 <calculateHeading>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	4b47      	ldr	r3, [pc, #284]	; (800a9f4 <getEstimatedAttitude+0x4fc>)
 800a8d6:	801a      	strh	r2, [r3, #0]
    }

    acc_calc(deltaT); // rotate acc vector into earth frame
 800a8d8:	6978      	ldr	r0, [r7, #20]
 800a8da:	f7ff fc11 	bl	800a100 <acc_calc>

    if (cfg.throttle_correction_value) {
 800a8de:	4b47      	ldr	r3, [pc, #284]	; (800a9fc <getEstimatedAttitude+0x504>)
 800a8e0:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d072      	beq.n	800a9ce <getEstimatedAttitude+0x4d6>

        float cosZ = EstG.V.Z / sqrtf(EstG.V.X * EstG.V.X + EstG.V.Y * EstG.V.Y + EstG.V.Z * EstG.V.Z);
 800a8e8:	4b45      	ldr	r3, [pc, #276]	; (800aa00 <getEstimatedAttitude+0x508>)
 800a8ea:	ed93 8a02 	vldr	s16, [r3, #8]
 800a8ee:	4b44      	ldr	r3, [pc, #272]	; (800aa00 <getEstimatedAttitude+0x508>)
 800a8f0:	ed93 7a00 	vldr	s14, [r3]
 800a8f4:	4b42      	ldr	r3, [pc, #264]	; (800aa00 <getEstimatedAttitude+0x508>)
 800a8f6:	edd3 7a00 	vldr	s15, [r3]
 800a8fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8fe:	4b40      	ldr	r3, [pc, #256]	; (800aa00 <getEstimatedAttitude+0x508>)
 800a900:	edd3 6a01 	vldr	s13, [r3, #4]
 800a904:	4b3e      	ldr	r3, [pc, #248]	; (800aa00 <getEstimatedAttitude+0x508>)
 800a906:	edd3 7a01 	vldr	s15, [r3, #4]
 800a90a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a90e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a912:	4b3b      	ldr	r3, [pc, #236]	; (800aa00 <getEstimatedAttitude+0x508>)
 800a914:	edd3 6a02 	vldr	s13, [r3, #8]
 800a918:	4b39      	ldr	r3, [pc, #228]	; (800aa00 <getEstimatedAttitude+0x508>)
 800a91a:	edd3 7a02 	vldr	s15, [r3, #8]
 800a91e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a922:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a926:	eeb0 0a67 	vmov.f32	s0, s15
 800a92a:	f019 fef5 	bl	8024718 <sqrtf>
 800a92e:	eeb0 7a40 	vmov.f32	s14, s0
 800a932:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800a936:	edc7 7a03 	vstr	s15, [r7, #12]

        if (cosZ <= 0.015f) { // we are inverted, vertical or with a small angle < 0.86 deg
 800a93a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a93e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800aa04 <getEstimatedAttitude+0x50c>
 800a942:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a94a:	d803      	bhi.n	800a954 <getEstimatedAttitude+0x45c>
            throttleAngleCorrection = 0;
 800a94c:	4b2e      	ldr	r3, [pc, #184]	; (800aa08 <getEstimatedAttitude+0x510>)
 800a94e:	2200      	movs	r2, #0
 800a950:	801a      	strh	r2, [r3, #0]
            if (deg > 900)
                deg = 900;
            throttleAngleCorrection = lrintf(cfg.throttle_correction_value * sinf(deg / (900.0f * M_PI / 2.0f)));
        }
    }
}
 800a952:	e03c      	b.n	800a9ce <getEstimatedAttitude+0x4d6>
            int deg = lrintf(acosf(cosZ) * throttleAngleScale);
 800a954:	ed97 0a03 	vldr	s0, [r7, #12]
 800a958:	f019 fe58 	bl	802460c <acosf>
 800a95c:	eeb0 7a40 	vmov.f32	s14, s0
 800a960:	4b2a      	ldr	r3, [pc, #168]	; (800aa0c <getEstimatedAttitude+0x514>)
 800a962:	edd3 7a00 	vldr	s15, [r3]
 800a966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a96a:	eeb0 0a67 	vmov.f32	s0, s15
 800a96e:	f019 fdc7 	bl	8024500 <lrintf>
 800a972:	61f8      	str	r0, [r7, #28]
            if (deg > 900)
 800a974:	69fb      	ldr	r3, [r7, #28]
 800a976:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800a97a:	dd02      	ble.n	800a982 <getEstimatedAttitude+0x48a>
                deg = 900;
 800a97c:	f44f 7361 	mov.w	r3, #900	; 0x384
 800a980:	61fb      	str	r3, [r7, #28]
            throttleAngleCorrection = lrintf(cfg.throttle_correction_value * sinf(deg / (900.0f * M_PI / 2.0f)));
 800a982:	4b1e      	ldr	r3, [pc, #120]	; (800a9fc <getEstimatedAttitude+0x504>)
 800a984:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800a988:	ee07 3a90 	vmov	s15, r3
 800a98c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800a990:	69f8      	ldr	r0, [r7, #28]
 800a992:	f7f5 fd7b 	bl	800048c <__aeabi_i2d>
 800a996:	a312      	add	r3, pc, #72	; (adr r3, 800a9e0 <getEstimatedAttitude+0x4e8>)
 800a998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99c:	f7f5 ff0a 	bl	80007b4 <__aeabi_ddiv>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	4610      	mov	r0, r2
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	f7f6 f8bc 	bl	8000b24 <__aeabi_d2f>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	ee00 3a10 	vmov	s0, r3
 800a9b2:	f019 fde5 	bl	8024580 <sinf>
 800a9b6:	eef0 7a40 	vmov.f32	s15, s0
 800a9ba:	ee68 7a27 	vmul.f32	s15, s16, s15
 800a9be:	eeb0 0a67 	vmov.f32	s0, s15
 800a9c2:	f019 fd9d 	bl	8024500 <lrintf>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	b21a      	sxth	r2, r3
 800a9ca:	4b0f      	ldr	r3, [pc, #60]	; (800aa08 <getEstimatedAttitude+0x510>)
 800a9cc:	801a      	strh	r2, [r3, #0]
}
 800a9ce:	bf00      	nop
 800a9d0:	3728      	adds	r7, #40	; 0x28
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	ecbd 8b02 	vpop	{d8}
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	f3af 8000 	nop.w
 800a9e0:	e50feba2 	.word	0xe50feba2
 800a9e4:	409616dd 	.word	0x409616dd
 800a9e8:	20001528 	.word	0x20001528
 800a9ec:	2000089c 	.word	0x2000089c
 800a9f0:	20001484 	.word	0x20001484
 800a9f4:	20001a7e 	.word	0x20001a7e
 800a9f8:	20000034 	.word	0x20000034
 800a9fc:	20000e08 	.word	0x20000e08
 800aa00:	20001500 	.word	0x20001500
 800aa04:	3c75c28f 	.word	0x3c75c28f
 800aa08:	200014d4 	.word	0x200014d4
 800aa0c:	200014dc 	.word	0x200014dc

0800aa10 <taskGetEstimatedAltitude>:

#ifdef BARO

uint16_t taskGetEstimatedAltitude(PifTask *p_task)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b08e      	sub	sp, #56	; 0x38
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
    static uint32_t previousT;
    uint32_t currentT = (*pif_act_timer1us)();
 800aa18:	4b84      	ldr	r3, [pc, #528]	; (800ac2c <taskGetEstimatedAltitude+0x21c>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4798      	blx	r3
 800aa1e:	6338      	str	r0, [r7, #48]	; 0x30
    static float vel = 0.0f;
    static float accAlt = 0.0f;
    static int32_t lastBaroAlt;
    static int32_t baroGroundAltitude = 0;
    static int32_t baroGroundPressure = 0;
    int16_t tiltAngle = max(abs(angle[ROLL]), abs(angle[PITCH]));
 800aa20:	4b83      	ldr	r3, [pc, #524]	; (800ac30 <taskGetEstimatedAltitude+0x220>)
 800aa22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	bfb8      	it	lt
 800aa2a:	425b      	neglt	r3, r3
 800aa2c:	b29a      	uxth	r2, r3
 800aa2e:	4b80      	ldr	r3, [pc, #512]	; (800ac30 <taskGetEstimatedAltitude+0x220>)
 800aa30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	bfb8      	it	lt
 800aa38:	425b      	neglt	r3, r3
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	bf38      	it	cc
 800aa40:	4613      	movcc	r3, r2
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	85fb      	strh	r3, [r7, #46]	; 0x2e

    (void)p_task;

    baroState = 0;
 800aa46:	4b7b      	ldr	r3, [pc, #492]	; (800ac34 <taskGetEstimatedAltitude+0x224>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	601a      	str	r2, [r3, #0]

    dTime = currentT - previousT;
 800aa4c:	4b7a      	ldr	r3, [pc, #488]	; (800ac38 <taskGetEstimatedAltitude+0x228>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa52:	1ad3      	subs	r3, r2, r3
 800aa54:	62bb      	str	r3, [r7, #40]	; 0x28
    previousT = currentT;
 800aa56:	4a78      	ldr	r2, [pc, #480]	; (800ac38 <taskGetEstimatedAltitude+0x228>)
 800aa58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5a:	6013      	str	r3, [r2, #0]

    if (calibratingB > 0) {
 800aa5c:	4b77      	ldr	r3, [pc, #476]	; (800ac3c <taskGetEstimatedAltitude+0x22c>)
 800aa5e:	881b      	ldrh	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d058      	beq.n	800ab16 <taskGetEstimatedAltitude+0x106>
        baroGroundPressure -= baroGroundPressure / 8;
 800aa64:	4b76      	ldr	r3, [pc, #472]	; (800ac40 <taskGetEstimatedAltitude+0x230>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	da00      	bge.n	800aa6e <taskGetEstimatedAltitude+0x5e>
 800aa6c:	3307      	adds	r3, #7
 800aa6e:	10db      	asrs	r3, r3, #3
 800aa70:	425b      	negs	r3, r3
 800aa72:	461a      	mov	r2, r3
 800aa74:	4b72      	ldr	r3, [pc, #456]	; (800ac40 <taskGetEstimatedAltitude+0x230>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4413      	add	r3, r2
 800aa7a:	4a71      	ldr	r2, [pc, #452]	; (800ac40 <taskGetEstimatedAltitude+0x230>)
 800aa7c:	6013      	str	r3, [r2, #0]
        baroGroundPressure += baroPressureSum / (cfg.baro_tab_size - 1);
 800aa7e:	4b71      	ldr	r3, [pc, #452]	; (800ac44 <taskGetEstimatedAltitude+0x234>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a71      	ldr	r2, [pc, #452]	; (800ac48 <taskGetEstimatedAltitude+0x238>)
 800aa84:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800aa88:	3a01      	subs	r2, #1
 800aa8a:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa8e:	4a6c      	ldr	r2, [pc, #432]	; (800ac40 <taskGetEstimatedAltitude+0x230>)
 800aa90:	6812      	ldr	r2, [r2, #0]
 800aa92:	4413      	add	r3, r2
 800aa94:	461a      	mov	r2, r3
 800aa96:	4b6a      	ldr	r3, [pc, #424]	; (800ac40 <taskGetEstimatedAltitude+0x230>)
 800aa98:	601a      	str	r2, [r3, #0]
        baroGroundAltitude = (1.0f - powf((baroGroundPressure / 8) / 101325.0f, 0.190295f)) * 4433000.0f;
 800aa9a:	4b69      	ldr	r3, [pc, #420]	; (800ac40 <taskGetEstimatedAltitude+0x230>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	da00      	bge.n	800aaa4 <taskGetEstimatedAltitude+0x94>
 800aaa2:	3307      	adds	r3, #7
 800aaa4:	10db      	asrs	r3, r3, #3
 800aaa6:	ee07 3a90 	vmov	s15, r3
 800aaaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aaae:	eddf 6a67 	vldr	s13, [pc, #412]	; 800ac4c <taskGetEstimatedAltitude+0x23c>
 800aab2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800aab6:	eddf 0a66 	vldr	s1, [pc, #408]	; 800ac50 <taskGetEstimatedAltitude+0x240>
 800aaba:	eeb0 0a47 	vmov.f32	s0, s14
 800aabe:	f019 fdd3 	bl	8024668 <powf>
 800aac2:	eef0 7a40 	vmov.f32	s15, s0
 800aac6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aaca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aace:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800ac54 <taskGetEstimatedAltitude+0x244>
 800aad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aad6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aada:	ee17 2a90 	vmov	r2, s15
 800aade:	4b5e      	ldr	r3, [pc, #376]	; (800ac58 <taskGetEstimatedAltitude+0x248>)
 800aae0:	601a      	str	r2, [r3, #0]

        vel = 0;
 800aae2:	4b5e      	ldr	r3, [pc, #376]	; (800ac5c <taskGetEstimatedAltitude+0x24c>)
 800aae4:	f04f 0200 	mov.w	r2, #0
 800aae8:	601a      	str	r2, [r3, #0]
        accAlt = 0;
 800aaea:	4b5d      	ldr	r3, [pc, #372]	; (800ac60 <taskGetEstimatedAltitude+0x250>)
 800aaec:	f04f 0200 	mov.w	r2, #0
 800aaf0:	601a      	str	r2, [r3, #0]
        calibratingB--;
 800aaf2:	4b52      	ldr	r3, [pc, #328]	; (800ac3c <taskGetEstimatedAltitude+0x22c>)
 800aaf4:	881b      	ldrh	r3, [r3, #0]
 800aaf6:	3b01      	subs	r3, #1
 800aaf8:	b29a      	uxth	r2, r3
 800aafa:	4b50      	ldr	r3, [pc, #320]	; (800ac3c <taskGetEstimatedAltitude+0x22c>)
 800aafc:	801a      	strh	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
        if (!calibratingB) {
 800aafe:	4b4f      	ldr	r3, [pc, #316]	; (800ac3c <taskGetEstimatedAltitude+0x22c>)
 800ab00:	881b      	ldrh	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d107      	bne.n	800ab16 <taskGetEstimatedAltitude+0x106>
        	pifLog_Printf(LT_INFO, "Baro: GP=%ld, GA=%ld", baroGroundPressure, baroGroundAltitude);
 800ab06:	4b4e      	ldr	r3, [pc, #312]	; (800ac40 <taskGetEstimatedAltitude+0x230>)
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	4b53      	ldr	r3, [pc, #332]	; (800ac58 <taskGetEstimatedAltitude+0x248>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4955      	ldr	r1, [pc, #340]	; (800ac64 <taskGetEstimatedAltitude+0x254>)
 800ab10:	2002      	movs	r0, #2
 800ab12:	f009 f871 	bl	8013bf8 <pifLog_Printf>
#endif
    }

    // calculates height from ground via baro readings
    // see: https://github.com/diydrones/ardupilot/blob/master/libraries/AP_Baro/AP_Baro.cpp#L140
    BaroAlt_tmp = lrintf((1.0f - powf((float)(baroPressureSum / (cfg.baro_tab_size - 1)) / 101325.0f, 0.190295f)) * 4433000.0f); // in cm
 800ab16:	4b4b      	ldr	r3, [pc, #300]	; (800ac44 <taskGetEstimatedAltitude+0x234>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a4b      	ldr	r2, [pc, #300]	; (800ac48 <taskGetEstimatedAltitude+0x238>)
 800ab1c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800ab20:	3a01      	subs	r2, #1
 800ab22:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab26:	ee07 3a90 	vmov	s15, r3
 800ab2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab2e:	eddf 6a47 	vldr	s13, [pc, #284]	; 800ac4c <taskGetEstimatedAltitude+0x23c>
 800ab32:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ab36:	eddf 0a46 	vldr	s1, [pc, #280]	; 800ac50 <taskGetEstimatedAltitude+0x240>
 800ab3a:	eeb0 0a47 	vmov.f32	s0, s14
 800ab3e:	f019 fd93 	bl	8024668 <powf>
 800ab42:	eef0 7a40 	vmov.f32	s15, s0
 800ab46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab4e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800ac54 <taskGetEstimatedAltitude+0x244>
 800ab52:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab56:	eeb0 0a67 	vmov.f32	s0, s15
 800ab5a:	f019 fcd1 	bl	8024500 <lrintf>
 800ab5e:	6278      	str	r0, [r7, #36]	; 0x24
    BaroAlt_tmp -= baroGroundAltitude;
 800ab60:	4b3d      	ldr	r3, [pc, #244]	; (800ac58 <taskGetEstimatedAltitude+0x248>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	627b      	str	r3, [r7, #36]	; 0x24
    BaroAlt = lrintf((float)BaroAlt * cfg.baro_noise_lpf + (float)BaroAlt_tmp * (1.0f - cfg.baro_noise_lpf)); // additional LPF to reduce baro noise
 800ab6a:	4b3f      	ldr	r3, [pc, #252]	; (800ac68 <taskGetEstimatedAltitude+0x258>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	ee07 3a90 	vmov	s15, r3
 800ab72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ab76:	4b34      	ldr	r3, [pc, #208]	; (800ac48 <taskGetEstimatedAltitude+0x238>)
 800ab78:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800ab7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab82:	ee07 3a90 	vmov	s15, r3
 800ab86:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ab8a:	4b2f      	ldr	r3, [pc, #188]	; (800ac48 <taskGetEstimatedAltitude+0x238>)
 800ab8c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800ab90:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ab94:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ab98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aba0:	eeb0 0a67 	vmov.f32	s0, s15
 800aba4:	f019 fcac 	bl	8024500 <lrintf>
 800aba8:	4603      	mov	r3, r0
 800abaa:	4a2f      	ldr	r2, [pc, #188]	; (800ac68 <taskGetEstimatedAltitude+0x258>)
 800abac:	6013      	str	r3, [r2, #0]

    // calculate sonar altitude only if the sonar is facing downwards(<25deg)
    if (tiltAngle > 250 || sonarDistance == -1)
 800abae:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800abb2:	2bfa      	cmp	r3, #250	; 0xfa
 800abb4:	dc04      	bgt.n	800abc0 <taskGetEstimatedAltitude+0x1b0>
 800abb6:	4b2d      	ldr	r3, [pc, #180]	; (800ac6c <taskGetEstimatedAltitude+0x25c>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abbe:	d104      	bne.n	800abca <taskGetEstimatedAltitude+0x1ba>
        sonarAlt = -1;
 800abc0:	4b2b      	ldr	r3, [pc, #172]	; (800ac70 <taskGetEstimatedAltitude+0x260>)
 800abc2:	f04f 32ff 	mov.w	r2, #4294967295
 800abc6:	601a      	str	r2, [r3, #0]
 800abc8:	e01b      	b.n	800ac02 <taskGetEstimatedAltitude+0x1f2>
    else
        sonarAlt = sonarDistance * (900.0f - tiltAngle) / 900.0f;
 800abca:	4b28      	ldr	r3, [pc, #160]	; (800ac6c <taskGetEstimatedAltitude+0x25c>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	ee07 3a90 	vmov	s15, r3
 800abd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800abd6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800abda:	ee07 3a90 	vmov	s15, r3
 800abde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abe2:	eddf 6a24 	vldr	s13, [pc, #144]	; 800ac74 <taskGetEstimatedAltitude+0x264>
 800abe6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800abea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abee:	eddf 6a21 	vldr	s13, [pc, #132]	; 800ac74 <taskGetEstimatedAltitude+0x264>
 800abf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800abf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800abfa:	ee17 2a90 	vmov	r2, s15
 800abfe:	4b1c      	ldr	r3, [pc, #112]	; (800ac70 <taskGetEstimatedAltitude+0x260>)
 800ac00:	601a      	str	r2, [r3, #0]

    // do sonarAlt and baroAlt fusion
    if (sonarAlt > 0 && sonarAlt < 200) {
 800ac02:	4b1b      	ldr	r3, [pc, #108]	; (800ac70 <taskGetEstimatedAltitude+0x260>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	dd38      	ble.n	800ac7c <taskGetEstimatedAltitude+0x26c>
 800ac0a:	4b19      	ldr	r3, [pc, #100]	; (800ac70 <taskGetEstimatedAltitude+0x260>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2bc7      	cmp	r3, #199	; 0xc7
 800ac10:	dc34      	bgt.n	800ac7c <taskGetEstimatedAltitude+0x26c>
        baroAlt_offset = BaroAlt - sonarAlt;
 800ac12:	4b15      	ldr	r3, [pc, #84]	; (800ac68 <taskGetEstimatedAltitude+0x258>)
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	4b16      	ldr	r3, [pc, #88]	; (800ac70 <taskGetEstimatedAltitude+0x260>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	1ad3      	subs	r3, r2, r3
 800ac1c:	4a16      	ldr	r2, [pc, #88]	; (800ac78 <taskGetEstimatedAltitude+0x268>)
 800ac1e:	6013      	str	r3, [r2, #0]
        BaroAlt = sonarAlt;
 800ac20:	4b13      	ldr	r3, [pc, #76]	; (800ac70 <taskGetEstimatedAltitude+0x260>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a10      	ldr	r2, [pc, #64]	; (800ac68 <taskGetEstimatedAltitude+0x258>)
 800ac26:	6013      	str	r3, [r2, #0]
 800ac28:	e064      	b.n	800acf4 <taskGetEstimatedAltitude+0x2e4>
 800ac2a:	bf00      	nop
 800ac2c:	20001e08 	.word	0x20001e08
 800ac30:	200014f4 	.word	0x200014f4
 800ac34:	200014ac 	.word	0x200014ac
 800ac38:	20001534 	.word	0x20001534
 800ac3c:	20001a7a 	.word	0x20001a7a
 800ac40:	20001538 	.word	0x20001538
 800ac44:	200014a4 	.word	0x200014a4
 800ac48:	20000e08 	.word	0x20000e08
 800ac4c:	47c5e680 	.word	0x47c5e680
 800ac50:	3e42dcb1 	.word	0x3e42dcb1
 800ac54:	4a8748d0 	.word	0x4a8748d0
 800ac58:	2000153c 	.word	0x2000153c
 800ac5c:	20001540 	.word	0x20001540
 800ac60:	20001544 	.word	0x20001544
 800ac64:	080284e8 	.word	0x080284e8
 800ac68:	200014a8 	.word	0x200014a8
 800ac6c:	2000002c 	.word	0x2000002c
 800ac70:	20000030 	.word	0x20000030
 800ac74:	44610000 	.word	0x44610000
 800ac78:	200014b4 	.word	0x200014b4
    } else {
        BaroAlt -= baroAlt_offset;
 800ac7c:	4ba0      	ldr	r3, [pc, #640]	; (800af00 <taskGetEstimatedAltitude+0x4f0>)
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	4ba0      	ldr	r3, [pc, #640]	; (800af04 <taskGetEstimatedAltitude+0x4f4>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	1ad3      	subs	r3, r2, r3
 800ac86:	4a9e      	ldr	r2, [pc, #632]	; (800af00 <taskGetEstimatedAltitude+0x4f0>)
 800ac88:	6013      	str	r3, [r2, #0]
        if (sonarAlt > 0) {
 800ac8a:	4b9f      	ldr	r3, [pc, #636]	; (800af08 <taskGetEstimatedAltitude+0x4f8>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	dd30      	ble.n	800acf4 <taskGetEstimatedAltitude+0x2e4>
            sonarTransition = (300 - sonarAlt) / 100.0f;
 800ac92:	4b9d      	ldr	r3, [pc, #628]	; (800af08 <taskGetEstimatedAltitude+0x4f8>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 800ac9a:	ee07 3a90 	vmov	s15, r3
 800ac9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aca2:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800af0c <taskGetEstimatedAltitude+0x4fc>
 800aca6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800acaa:	4b99      	ldr	r3, [pc, #612]	; (800af10 <taskGetEstimatedAltitude+0x500>)
 800acac:	edc3 7a00 	vstr	s15, [r3]
            BaroAlt = sonarAlt * sonarTransition + BaroAlt * (1.0f - sonarTransition);
 800acb0:	4b95      	ldr	r3, [pc, #596]	; (800af08 <taskGetEstimatedAltitude+0x4f8>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	ee07 3a90 	vmov	s15, r3
 800acb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800acbc:	4b94      	ldr	r3, [pc, #592]	; (800af10 <taskGetEstimatedAltitude+0x500>)
 800acbe:	edd3 7a00 	vldr	s15, [r3]
 800acc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800acc6:	4b8e      	ldr	r3, [pc, #568]	; (800af00 <taskGetEstimatedAltitude+0x4f0>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	ee07 3a90 	vmov	s15, r3
 800acce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800acd2:	4b8f      	ldr	r3, [pc, #572]	; (800af10 <taskGetEstimatedAltitude+0x500>)
 800acd4:	edd3 7a00 	vldr	s15, [r3]
 800acd8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800acdc:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ace0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ace4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ace8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800acec:	ee17 2a90 	vmov	r2, s15
 800acf0:	4b83      	ldr	r3, [pc, #524]	; (800af00 <taskGetEstimatedAltitude+0x4f0>)
 800acf2:	601a      	str	r2, [r3, #0]
        }
    }

    dt = accTimeSum * 1e-6f; // delta acc reading time in seconds
 800acf4:	4b87      	ldr	r3, [pc, #540]	; (800af14 <taskGetEstimatedAltitude+0x504>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	ee07 3a90 	vmov	s15, r3
 800acfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad00:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800af18 <taskGetEstimatedAltitude+0x508>
 800ad04:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ad08:	edc7 7a08 	vstr	s15, [r7, #32]

    // Integrator - velocity, cm/sec
    accZ_tmp = (float)accSum[2] / (float)accSumCount;
 800ad0c:	4b83      	ldr	r3, [pc, #524]	; (800af1c <taskGetEstimatedAltitude+0x50c>)
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	ee07 3a90 	vmov	s15, r3
 800ad14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ad18:	4b81      	ldr	r3, [pc, #516]	; (800af20 <taskGetEstimatedAltitude+0x510>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	ee07 3a90 	vmov	s15, r3
 800ad20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ad24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad28:	edc7 7a07 	vstr	s15, [r7, #28]
    vel_acc = accZ_tmp * accVelScale * (float)accTimeSum;
 800ad2c:	4b7d      	ldr	r3, [pc, #500]	; (800af24 <taskGetEstimatedAltitude+0x514>)
 800ad2e:	ed93 7a00 	vldr	s14, [r3]
 800ad32:	edd7 7a07 	vldr	s15, [r7, #28]
 800ad36:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad3a:	4b76      	ldr	r3, [pc, #472]	; (800af14 <taskGetEstimatedAltitude+0x504>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	ee07 3a90 	vmov	s15, r3
 800ad42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad4a:	edc7 7a06 	vstr	s15, [r7, #24]

    // Integrator - Altitude in cm
    accAlt += (vel_acc * 0.5f) * dt + vel * dt;                                         // integrate velocity to get distance (x= a/2 * t^2)
 800ad4e:	edd7 7a06 	vldr	s15, [r7, #24]
 800ad52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ad56:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ad5a:	edd7 7a08 	vldr	s15, [r7, #32]
 800ad5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad62:	4b71      	ldr	r3, [pc, #452]	; (800af28 <taskGetEstimatedAltitude+0x518>)
 800ad64:	edd3 6a00 	vldr	s13, [r3]
 800ad68:	edd7 7a08 	vldr	s15, [r7, #32]
 800ad6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad70:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ad74:	4b6d      	ldr	r3, [pc, #436]	; (800af2c <taskGetEstimatedAltitude+0x51c>)
 800ad76:	edd3 7a00 	vldr	s15, [r3]
 800ad7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad7e:	4b6b      	ldr	r3, [pc, #428]	; (800af2c <taskGetEstimatedAltitude+0x51c>)
 800ad80:	edc3 7a00 	vstr	s15, [r3]
    accAlt = accAlt * cfg.baro_cf_alt + (float)BaroAlt * (1.0f - cfg.baro_cf_alt);      // complementary filter for altitude estimation (baro & acc)
 800ad84:	4b6a      	ldr	r3, [pc, #424]	; (800af30 <taskGetEstimatedAltitude+0x520>)
 800ad86:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800ad8a:	4b68      	ldr	r3, [pc, #416]	; (800af2c <taskGetEstimatedAltitude+0x51c>)
 800ad8c:	edd3 7a00 	vldr	s15, [r3]
 800ad90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad94:	4b5a      	ldr	r3, [pc, #360]	; (800af00 <taskGetEstimatedAltitude+0x4f0>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	ee07 3a90 	vmov	s15, r3
 800ad9c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ada0:	4b63      	ldr	r3, [pc, #396]	; (800af30 <taskGetEstimatedAltitude+0x520>)
 800ada2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800ada6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800adaa:	ee76 7a67 	vsub.f32	s15, s12, s15
 800adae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800adb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adb6:	4b5d      	ldr	r3, [pc, #372]	; (800af2c <taskGetEstimatedAltitude+0x51c>)
 800adb8:	edc3 7a00 	vstr	s15, [r3]

    // when the sonar is in his best range
    if (sonarAlt > 0 && sonarAlt < 200)
 800adbc:	4b52      	ldr	r3, [pc, #328]	; (800af08 <taskGetEstimatedAltitude+0x4f8>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	dd08      	ble.n	800add6 <taskGetEstimatedAltitude+0x3c6>
 800adc4:	4b50      	ldr	r3, [pc, #320]	; (800af08 <taskGetEstimatedAltitude+0x4f8>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2bc7      	cmp	r3, #199	; 0xc7
 800adca:	dc04      	bgt.n	800add6 <taskGetEstimatedAltitude+0x3c6>
        EstAlt = BaroAlt;
 800adcc:	4b4c      	ldr	r3, [pc, #304]	; (800af00 <taskGetEstimatedAltitude+0x4f0>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a58      	ldr	r2, [pc, #352]	; (800af34 <taskGetEstimatedAltitude+0x524>)
 800add2:	6013      	str	r3, [r2, #0]
 800add4:	e008      	b.n	800ade8 <taskGetEstimatedAltitude+0x3d8>
    else
        EstAlt = accAlt;
 800add6:	4b55      	ldr	r3, [pc, #340]	; (800af2c <taskGetEstimatedAltitude+0x51c>)
 800add8:	edd3 7a00 	vldr	s15, [r3]
 800addc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ade0:	ee17 2a90 	vmov	r2, s15
 800ade4:	4b53      	ldr	r3, [pc, #332]	; (800af34 <taskGetEstimatedAltitude+0x524>)
 800ade6:	601a      	str	r2, [r3, #0]

    vel += vel_acc;
 800ade8:	4b4f      	ldr	r3, [pc, #316]	; (800af28 <taskGetEstimatedAltitude+0x518>)
 800adea:	ed93 7a00 	vldr	s14, [r3]
 800adee:	edd7 7a06 	vldr	s15, [r7, #24]
 800adf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adf6:	4b4c      	ldr	r3, [pc, #304]	; (800af28 <taskGetEstimatedAltitude+0x518>)
 800adf8:	edc3 7a00 	vstr	s15, [r3]
    debug[0] = accSum[2] / accSumCount; // acceleration
    debug[1] = vel;                     // velocity
    debug[2] = accAlt;                  // height
#endif

    accSum_reset();
 800adfc:	f7ff faaa 	bl	800a354 <accSum_reset>

    baroVel = (BaroAlt - lastBaroAlt) * 1000000.0f / dTime;
 800ae00:	4b3f      	ldr	r3, [pc, #252]	; (800af00 <taskGetEstimatedAltitude+0x4f0>)
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	4b4c      	ldr	r3, [pc, #304]	; (800af38 <taskGetEstimatedAltitude+0x528>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	1ad3      	subs	r3, r2, r3
 800ae0a:	ee07 3a90 	vmov	s15, r3
 800ae0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae12:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800af3c <taskGetEstimatedAltitude+0x52c>
 800ae16:	ee67 6a87 	vmul.f32	s13, s15, s14
 800ae1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1c:	ee07 3a90 	vmov	s15, r3
 800ae20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ae24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae2c:	ee17 3a90 	vmov	r3, s15
 800ae30:	617b      	str	r3, [r7, #20]
    lastBaroAlt = BaroAlt;
 800ae32:	4b33      	ldr	r3, [pc, #204]	; (800af00 <taskGetEstimatedAltitude+0x4f0>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a40      	ldr	r2, [pc, #256]	; (800af38 <taskGetEstimatedAltitude+0x528>)
 800ae38:	6013      	str	r3, [r2, #0]

    baroVel = constrain(baroVel, -1500, 1500);    // constrain baro velocity +/- 1500cm/s
 800ae3a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ae3e:	4940      	ldr	r1, [pc, #256]	; (800af40 <taskGetEstimatedAltitude+0x530>)
 800ae40:	6978      	ldr	r0, [r7, #20]
 800ae42:	f7f8 ffc9 	bl	8003dd8 <constrain>
 800ae46:	6178      	str	r0, [r7, #20]
    baroVel = applyDeadband(baroVel, 10);         // to reduce noise near zero
 800ae48:	210a      	movs	r1, #10
 800ae4a:	6978      	ldr	r0, [r7, #20]
 800ae4c:	f7ff f930 	bl	800a0b0 <applyDeadband>
 800ae50:	6178      	str	r0, [r7, #20]

    // apply Complimentary Filter to keep the calculated velocity based on baro velocity (i.e. near real velocity).
    // By using CF it's possible to correct the drift of integrated accZ (velocity) without loosing the phase, i.e without delay
    vel = vel * cfg.baro_cf_vel + baroVel * (1 - cfg.baro_cf_vel);
 800ae52:	4b37      	ldr	r3, [pc, #220]	; (800af30 <taskGetEstimatedAltitude+0x520>)
 800ae54:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800ae58:	4b33      	ldr	r3, [pc, #204]	; (800af28 <taskGetEstimatedAltitude+0x518>)
 800ae5a:	edd3 7a00 	vldr	s15, [r3]
 800ae5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	ee07 3a90 	vmov	s15, r3
 800ae68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ae6c:	4b30      	ldr	r3, [pc, #192]	; (800af30 <taskGetEstimatedAltitude+0x520>)
 800ae6e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800ae72:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ae76:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ae7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae82:	4b29      	ldr	r3, [pc, #164]	; (800af28 <taskGetEstimatedAltitude+0x518>)
 800ae84:	edc3 7a00 	vstr	s15, [r3]
    vel_tmp = lrintf(vel);
 800ae88:	4b27      	ldr	r3, [pc, #156]	; (800af28 <taskGetEstimatedAltitude+0x518>)
 800ae8a:	edd3 7a00 	vldr	s15, [r3]
 800ae8e:	eeb0 0a67 	vmov.f32	s0, s15
 800ae92:	f019 fb35 	bl	8024500 <lrintf>
 800ae96:	6138      	str	r0, [r7, #16]

    // set vario
    vario = applyDeadband(vel_tmp, 5);
 800ae98:	2105      	movs	r1, #5
 800ae9a:	6938      	ldr	r0, [r7, #16]
 800ae9c:	f7ff f908 	bl	800a0b0 <applyDeadband>
 800aea0:	4603      	mov	r3, r0
 800aea2:	4a28      	ldr	r2, [pc, #160]	; (800af44 <taskGetEstimatedAltitude+0x534>)
 800aea4:	6013      	str	r3, [r2, #0]

    if (tiltAngle < 800) { // only calculate pid if the copters thrust is facing downwards(<80deg)
 800aea6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800aeaa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800aeae:	f280 80b2 	bge.w	800b016 <taskGetEstimatedAltitude+0x606>
        // Altitude P-Controller
        if (!velocityControl) {
 800aeb2:	4b25      	ldr	r3, [pc, #148]	; (800af48 <taskGetEstimatedAltitude+0x538>)
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d14e      	bne.n	800af58 <taskGetEstimatedAltitude+0x548>
            error = constrain(AltHold - EstAlt, -500, 500);
 800aeba:	4b24      	ldr	r3, [pc, #144]	; (800af4c <taskGetEstimatedAltitude+0x53c>)
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	4b1d      	ldr	r3, [pc, #116]	; (800af34 <taskGetEstimatedAltitude+0x524>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	1ad3      	subs	r3, r2, r3
 800aec4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800aec8:	4921      	ldr	r1, [pc, #132]	; (800af50 <taskGetEstimatedAltitude+0x540>)
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7f8 ff84 	bl	8003dd8 <constrain>
 800aed0:	60f8      	str	r0, [r7, #12]
            error = applyDeadband(error, 10);       // remove small P parametr to reduce noise near zero position
 800aed2:	210a      	movs	r1, #10
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	f7ff f8eb 	bl	800a0b0 <applyDeadband>
 800aeda:	60f8      	str	r0, [r7, #12]
            setVel = constrain((cfg.P8[PIDALT] * error / 128), -300, +300); // limit velocity to +/- 3 m/s
 800aedc:	4b14      	ldr	r3, [pc, #80]	; (800af30 <taskGetEstimatedAltitude+0x520>)
 800aede:	791b      	ldrb	r3, [r3, #4]
 800aee0:	461a      	mov	r2, r3
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	fb02 f303 	mul.w	r3, r2, r3
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	da00      	bge.n	800aeee <taskGetEstimatedAltitude+0x4de>
 800aeec:	337f      	adds	r3, #127	; 0x7f
 800aeee:	11db      	asrs	r3, r3, #7
 800aef0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aef4:	4917      	ldr	r1, [pc, #92]	; (800af54 <taskGetEstimatedAltitude+0x544>)
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7f8 ff6e 	bl	8003dd8 <constrain>
 800aefc:	6378      	str	r0, [r7, #52]	; 0x34
 800aefe:	e02e      	b.n	800af5e <taskGetEstimatedAltitude+0x54e>
 800af00:	200014a8 	.word	0x200014a8
 800af04:	200014b4 	.word	0x200014b4
 800af08:	20000030 	.word	0x20000030
 800af0c:	42c80000 	.word	0x42c80000
 800af10:	200014b0 	.word	0x200014b0
 800af14:	20001498 	.word	0x20001498
 800af18:	358637bd 	.word	0x358637bd
 800af1c:	2000148c 	.word	0x2000148c
 800af20:	2000149c 	.word	0x2000149c
 800af24:	200014d8 	.word	0x200014d8
 800af28:	20001540 	.word	0x20001540
 800af2c:	20001544 	.word	0x20001544
 800af30:	20000e08 	.word	0x20000e08
 800af34:	200014b8 	.word	0x200014b8
 800af38:	20001548 	.word	0x20001548
 800af3c:	49742400 	.word	0x49742400
 800af40:	fffffa24 	.word	0xfffffa24
 800af44:	200014d0 	.word	0x200014d0
 800af48:	200014c8 	.word	0x200014c8
 800af4c:	200014c0 	.word	0x200014c0
 800af50:	fffffe0c 	.word	0xfffffe0c
 800af54:	fffffed4 	.word	0xfffffed4
        } else {
            setVel = setVelocity;
 800af58:	4b34      	ldr	r3, [pc, #208]	; (800b02c <taskGetEstimatedAltitude+0x61c>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // Velocity PID-Controller
        // P
        error = setVel - vel_tmp;
 800af5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	1ad3      	subs	r3, r2, r3
 800af64:	60fb      	str	r3, [r7, #12]
        BaroPID = constrain((cfg.P8[PIDVEL] * error / 32), -300, +300);
 800af66:	4b32      	ldr	r3, [pc, #200]	; (800b030 <taskGetEstimatedAltitude+0x620>)
 800af68:	7a9b      	ldrb	r3, [r3, #10]
 800af6a:	461a      	mov	r2, r3
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	fb02 f303 	mul.w	r3, r2, r3
 800af72:	2b00      	cmp	r3, #0
 800af74:	da00      	bge.n	800af78 <taskGetEstimatedAltitude+0x568>
 800af76:	331f      	adds	r3, #31
 800af78:	115b      	asrs	r3, r3, #5
 800af7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800af7e:	492d      	ldr	r1, [pc, #180]	; (800b034 <taskGetEstimatedAltitude+0x624>)
 800af80:	4618      	mov	r0, r3
 800af82:	f7f8 ff29 	bl	8003dd8 <constrain>
 800af86:	4603      	mov	r3, r0
 800af88:	4a2b      	ldr	r2, [pc, #172]	; (800b038 <taskGetEstimatedAltitude+0x628>)
 800af8a:	6013      	str	r3, [r2, #0]

        // I
        errorVelocityI += (cfg.I8[PIDVEL] * error);
 800af8c:	4b28      	ldr	r3, [pc, #160]	; (800b030 <taskGetEstimatedAltitude+0x620>)
 800af8e:	7d1b      	ldrb	r3, [r3, #20]
 800af90:	461a      	mov	r2, r3
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	fb03 f202 	mul.w	r2, r3, r2
 800af98:	4b28      	ldr	r3, [pc, #160]	; (800b03c <taskGetEstimatedAltitude+0x62c>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4413      	add	r3, r2
 800af9e:	4a27      	ldr	r2, [pc, #156]	; (800b03c <taskGetEstimatedAltitude+0x62c>)
 800afa0:	6013      	str	r3, [r2, #0]
        errorVelocityI = constrain(errorVelocityI, -(8196 * 200), (8196 * 200));
 800afa2:	4b26      	ldr	r3, [pc, #152]	; (800b03c <taskGetEstimatedAltitude+0x62c>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4a26      	ldr	r2, [pc, #152]	; (800b040 <taskGetEstimatedAltitude+0x630>)
 800afa8:	4926      	ldr	r1, [pc, #152]	; (800b044 <taskGetEstimatedAltitude+0x634>)
 800afaa:	4618      	mov	r0, r3
 800afac:	f7f8 ff14 	bl	8003dd8 <constrain>
 800afb0:	4603      	mov	r3, r0
 800afb2:	4a22      	ldr	r2, [pc, #136]	; (800b03c <taskGetEstimatedAltitude+0x62c>)
 800afb4:	6013      	str	r3, [r2, #0]
        BaroPID += errorVelocityI / 8196;     // I in the range of +/-200
 800afb6:	4b21      	ldr	r3, [pc, #132]	; (800b03c <taskGetEstimatedAltitude+0x62c>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a23      	ldr	r2, [pc, #140]	; (800b048 <taskGetEstimatedAltitude+0x638>)
 800afbc:	fb82 1203 	smull	r1, r2, r2, r3
 800afc0:	10d2      	asrs	r2, r2, #3
 800afc2:	17db      	asrs	r3, r3, #31
 800afc4:	1ad2      	subs	r2, r2, r3
 800afc6:	4b1c      	ldr	r3, [pc, #112]	; (800b038 <taskGetEstimatedAltitude+0x628>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4413      	add	r3, r2
 800afcc:	4a1a      	ldr	r2, [pc, #104]	; (800b038 <taskGetEstimatedAltitude+0x628>)
 800afce:	6013      	str	r3, [r2, #0]

        // D
        BaroPID -= constrain(cfg.D8[PIDVEL] * (accZ_tmp + accZ_old) / 512, -150, 150);
 800afd0:	4b17      	ldr	r3, [pc, #92]	; (800b030 <taskGetEstimatedAltitude+0x620>)
 800afd2:	7f9b      	ldrb	r3, [r3, #30]
 800afd4:	ee07 3a90 	vmov	s15, r3
 800afd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800afdc:	4b1b      	ldr	r3, [pc, #108]	; (800b04c <taskGetEstimatedAltitude+0x63c>)
 800afde:	edd3 6a00 	vldr	s13, [r3]
 800afe2:	edd7 7a07 	vldr	s15, [r7, #28]
 800afe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800afee:	eddf 6a18 	vldr	s13, [pc, #96]	; 800b050 <taskGetEstimatedAltitude+0x640>
 800aff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aff6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800affa:	2296      	movs	r2, #150	; 0x96
 800affc:	f06f 0195 	mvn.w	r1, #149	; 0x95
 800b000:	ee17 0a90 	vmov	r0, s15
 800b004:	f7f8 fee8 	bl	8003dd8 <constrain>
 800b008:	4602      	mov	r2, r0
 800b00a:	4b0b      	ldr	r3, [pc, #44]	; (800b038 <taskGetEstimatedAltitude+0x628>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	1a9b      	subs	r3, r3, r2
 800b010:	4a09      	ldr	r2, [pc, #36]	; (800b038 <taskGetEstimatedAltitude+0x628>)
 800b012:	6013      	str	r3, [r2, #0]
 800b014:	e002      	b.n	800b01c <taskGetEstimatedAltitude+0x60c>

    } else {
        BaroPID = 0;
 800b016:	4b08      	ldr	r3, [pc, #32]	; (800b038 <taskGetEstimatedAltitude+0x628>)
 800b018:	2200      	movs	r2, #0
 800b01a:	601a      	str	r2, [r3, #0]
    }

    accZ_old = accZ_tmp;
 800b01c:	4a0b      	ldr	r2, [pc, #44]	; (800b04c <taskGetEstimatedAltitude+0x63c>)
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	6013      	str	r3, [r2, #0]

    return 1;
 800b022:	2301      	movs	r3, #1
}
 800b024:	4618      	mov	r0, r3
 800b026:	3738      	adds	r7, #56	; 0x38
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	200014c4 	.word	0x200014c4
 800b030:	20000e08 	.word	0x20000e08
 800b034:	fffffed4 	.word	0xfffffed4
 800b038:	200014bc 	.word	0x200014bc
 800b03c:	200014cc 	.word	0x200014cc
 800b040:	00190320 	.word	0x00190320
 800b044:	ffe6fce0 	.word	0xffe6fce0
 800b048:	003ff801 	.word	0x003ff801
 800b04c:	2000154c 	.word	0x2000154c
 800b050:	44000000 	.word	0x44000000

0800b054 <servoMiddle>:
    { 0, NULL },                // MULTITYPE_CUSTOM_PLANE
};


int16_t servoMiddle(int nr)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
    // Normally, servo.middle is a value between 1000..2000, but for the purposes of stupid, if it's less than
    // the number of RC channels, it means the center value is taken FROM that RC channel (by its index)
    if (cfg.servoConf[nr].middle < RC_CHANS && nr < MAX_SERVOS)
 800b05c:	4916      	ldr	r1, [pc, #88]	; (800b0b8 <servoMiddle+0x64>)
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	4613      	mov	r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	4413      	add	r3, r2
 800b066:	005b      	lsls	r3, r3, #1
 800b068:	440b      	add	r3, r1
 800b06a:	33bc      	adds	r3, #188	; 0xbc
 800b06c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b070:	2b11      	cmp	r3, #17
 800b072:	dc11      	bgt.n	800b098 <servoMiddle+0x44>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2b07      	cmp	r3, #7
 800b078:	dc0e      	bgt.n	800b098 <servoMiddle+0x44>
        return rcData[cfg.servoConf[nr].middle];
 800b07a:	490f      	ldr	r1, [pc, #60]	; (800b0b8 <servoMiddle+0x64>)
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	4613      	mov	r3, r2
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	4413      	add	r3, r2
 800b084:	005b      	lsls	r3, r3, #1
 800b086:	440b      	add	r3, r1
 800b088:	33bc      	adds	r3, #188	; 0xbc
 800b08a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b08e:	461a      	mov	r2, r3
 800b090:	4b0a      	ldr	r3, [pc, #40]	; (800b0bc <servoMiddle+0x68>)
 800b092:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800b096:	e009      	b.n	800b0ac <servoMiddle+0x58>
    else
        return cfg.servoConf[nr].middle;
 800b098:	4907      	ldr	r1, [pc, #28]	; (800b0b8 <servoMiddle+0x64>)
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	4613      	mov	r3, r2
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	4413      	add	r3, r2
 800b0a2:	005b      	lsls	r3, r3, #1
 800b0a4:	440b      	add	r3, r1
 800b0a6:	33bc      	adds	r3, #188	; 0xbc
 800b0a8:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	370c      	adds	r7, #12
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr
 800b0b8:	20000e08 	.word	0x20000e08
 800b0bc:	20001784 	.word	0x20001784

0800b0c0 <servoDirection>:

int servoDirection(int nr, int lr)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
    // load the direction from the direction field of the servo
    if (cfg.servoConf[nr].direction & (1 << lr))
 800b0ca:	490d      	ldr	r1, [pc, #52]	; (800b100 <servoDirection+0x40>)
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	4413      	add	r3, r2
 800b0d4:	005b      	lsls	r3, r3, #1
 800b0d6:	440b      	add	r3, r1
 800b0d8:	33c0      	adds	r3, #192	; 0xc0
 800b0da:	881b      	ldrh	r3, [r3, #0]
 800b0dc:	461a      	mov	r2, r3
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	fa42 f303 	asr.w	r3, r2, r3
 800b0e4:	f003 0301 	and.w	r3, r3, #1
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d002      	beq.n	800b0f2 <servoDirection+0x32>
        return -1;
 800b0ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b0f0:	e000      	b.n	800b0f4 <servoDirection+0x34>
    else
        return 1;
 800b0f2:	2301      	movs	r3, #1
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	20000e08 	.word	0x20000e08

0800b104 <loadCustomServoMixer>:

void loadCustomServoMixer(void)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0
    uint8_t i;

    // reset settings
    numberRules = 0;
 800b10a:	4b1e      	ldr	r3, [pc, #120]	; (800b184 <loadCustomServoMixer+0x80>)
 800b10c:	2200      	movs	r2, #0
 800b10e:	701a      	strb	r2, [r3, #0]
    memset(currentServoMixer, 0, sizeof(currentServoMixer));
 800b110:	2270      	movs	r2, #112	; 0x70
 800b112:	2100      	movs	r1, #0
 800b114:	481c      	ldr	r0, [pc, #112]	; (800b188 <loadCustomServoMixer+0x84>)
 800b116:	f018 fed1 	bl	8023ebc <memset>

    // load custom mixer into currentServoMixer
    for (i = 0; i < MAX_SERVO_RULES; i++) {
 800b11a:	2300      	movs	r3, #0
 800b11c:	71fb      	strb	r3, [r7, #7]
 800b11e:	e028      	b.n	800b172 <loadCustomServoMixer+0x6e>
        // check if done
        if (mcfg.customServoMixer[i].rate == 0)
 800b120:	79fa      	ldrb	r2, [r7, #7]
 800b122:	491a      	ldr	r1, [pc, #104]	; (800b18c <loadCustomServoMixer+0x88>)
 800b124:	4613      	mov	r3, r2
 800b126:	00db      	lsls	r3, r3, #3
 800b128:	1a9b      	subs	r3, r3, r2
 800b12a:	440b      	add	r3, r1
 800b12c:	33d2      	adds	r3, #210	; 0xd2
 800b12e:	f993 3000 	ldrsb.w	r3, [r3]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d021      	beq.n	800b17a <loadCustomServoMixer+0x76>
            break;
        currentServoMixer[i] = mcfg.customServoMixer[i];
 800b136:	79fa      	ldrb	r2, [r7, #7]
 800b138:	79f9      	ldrb	r1, [r7, #7]
 800b13a:	4813      	ldr	r0, [pc, #76]	; (800b188 <loadCustomServoMixer+0x84>)
 800b13c:	460b      	mov	r3, r1
 800b13e:	00db      	lsls	r3, r3, #3
 800b140:	1a5b      	subs	r3, r3, r1
 800b142:	4418      	add	r0, r3
 800b144:	4911      	ldr	r1, [pc, #68]	; (800b18c <loadCustomServoMixer+0x88>)
 800b146:	4613      	mov	r3, r2
 800b148:	00db      	lsls	r3, r3, #3
 800b14a:	1a9b      	subs	r3, r3, r2
 800b14c:	440b      	add	r3, r1
 800b14e:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800b152:	4603      	mov	r3, r0
 800b154:	6811      	ldr	r1, [r2, #0]
 800b156:	6019      	str	r1, [r3, #0]
 800b158:	8891      	ldrh	r1, [r2, #4]
 800b15a:	7992      	ldrb	r2, [r2, #6]
 800b15c:	8099      	strh	r1, [r3, #4]
 800b15e:	719a      	strb	r2, [r3, #6]
        numberRules++;
 800b160:	4b08      	ldr	r3, [pc, #32]	; (800b184 <loadCustomServoMixer+0x80>)
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	3301      	adds	r3, #1
 800b166:	b2da      	uxtb	r2, r3
 800b168:	4b06      	ldr	r3, [pc, #24]	; (800b184 <loadCustomServoMixer+0x80>)
 800b16a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MAX_SERVO_RULES; i++) {
 800b16c:	79fb      	ldrb	r3, [r7, #7]
 800b16e:	3301      	adds	r3, #1
 800b170:	71fb      	strb	r3, [r7, #7]
 800b172:	79fb      	ldrb	r3, [r7, #7]
 800b174:	2b0f      	cmp	r3, #15
 800b176:	d9d3      	bls.n	800b120 <loadCustomServoMixer+0x1c>
    }
}
 800b178:	e000      	b.n	800b17c <loadCustomServoMixer+0x78>
            break;
 800b17a:	bf00      	nop
}
 800b17c:	bf00      	nop
 800b17e:	3708      	adds	r7, #8
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}
 800b184:	200015b1 	.word	0x200015b1
 800b188:	200016a4 	.word	0x200016a4
 800b18c:	2000089c 	.word	0x2000089c

0800b190 <mixerInit>:

void mixerInit(void)
{
 800b190:	b590      	push	{r4, r7, lr}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
    int i;

    // enable servos for mixes that require them. note, this shifts motor counts.
    core.useServo = mixers[mcfg.mixerConfiguration].useServo;
 800b196:	4b8b      	ldr	r3, [pc, #556]	; (800b3c4 <mixerInit+0x234>)
 800b198:	795b      	ldrb	r3, [r3, #5]
 800b19a:	4a8b      	ldr	r2, [pc, #556]	; (800b3c8 <mixerInit+0x238>)
 800b19c:	00db      	lsls	r3, r3, #3
 800b19e:	4413      	add	r3, r2
 800b1a0:	785b      	ldrb	r3, [r3, #1]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	bf14      	ite	ne
 800b1a6:	2301      	movne	r3, #1
 800b1a8:	2300      	moveq	r3, #0
 800b1aa:	b2da      	uxtb	r2, r3
 800b1ac:	4b87      	ldr	r3, [pc, #540]	; (800b3cc <mixerInit+0x23c>)
 800b1ae:	755a      	strb	r2, [r3, #21]
    // if we want camstab/trig, that also enables servos, even if mixer doesn't
    if (feature(FEATURE_SERVO_TILT))
 800b1b0:	2020      	movs	r0, #32
 800b1b2:	f7fb ff75 	bl	80070a0 <feature>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d002      	beq.n	800b1c2 <mixerInit+0x32>
        core.useServo = 1;
 800b1bc:	4b83      	ldr	r3, [pc, #524]	; (800b3cc <mixerInit+0x23c>)
 800b1be:	2201      	movs	r2, #1
 800b1c0:	755a      	strb	r2, [r3, #21]

    if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM) {
 800b1c2:	4b80      	ldr	r3, [pc, #512]	; (800b3c4 <mixerInit+0x234>)
 800b1c4:	795b      	ldrb	r3, [r3, #5]
 800b1c6:	2b17      	cmp	r3, #23
 800b1c8:	d128      	bne.n	800b21c <mixerInit+0x8c>
        // load custom mixer into currentMixer
        for (i = 0; i < MAX_MOTORS; i++) {
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	607b      	str	r3, [r7, #4]
 800b1ce:	e021      	b.n	800b214 <mixerInit+0x84>
            // check if done
            if (mcfg.customMixer[i].throttle == 0.0f)
 800b1d0:	4a7c      	ldr	r2, [pc, #496]	; (800b3c4 <mixerInit+0x234>)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	011b      	lsls	r3, r3, #4
 800b1d8:	4413      	add	r3, r2
 800b1da:	edd3 7a00 	vldr	s15, [r3]
 800b1de:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1e6:	d048      	beq.n	800b27a <mixerInit+0xea>
                break;
            currentMixer[i] = mcfg.customMixer[i];
 800b1e8:	4a79      	ldr	r2, [pc, #484]	; (800b3d0 <mixerInit+0x240>)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	011b      	lsls	r3, r3, #4
 800b1ee:	18d1      	adds	r1, r2, r3
 800b1f0:	4a74      	ldr	r2, [pc, #464]	; (800b3c4 <mixerInit+0x234>)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	011b      	lsls	r3, r3, #4
 800b1f8:	4413      	add	r3, r2
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b1fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            numberMotor++;
 800b202:	4b74      	ldr	r3, [pc, #464]	; (800b3d4 <mixerInit+0x244>)
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	3301      	adds	r3, #1
 800b208:	b2da      	uxtb	r2, r3
 800b20a:	4b72      	ldr	r3, [pc, #456]	; (800b3d4 <mixerInit+0x244>)
 800b20c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_MOTORS; i++) {
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	3301      	adds	r3, #1
 800b212:	607b      	str	r3, [r7, #4]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2b0b      	cmp	r3, #11
 800b218:	ddda      	ble.n	800b1d0 <mixerInit+0x40>
 800b21a:	e02f      	b.n	800b27c <mixerInit+0xec>
        }
    } else {
        numberMotor = mixers[mcfg.mixerConfiguration].numberMotor;
 800b21c:	4b69      	ldr	r3, [pc, #420]	; (800b3c4 <mixerInit+0x234>)
 800b21e:	795b      	ldrb	r3, [r3, #5]
 800b220:	461a      	mov	r2, r3
 800b222:	4b69      	ldr	r3, [pc, #420]	; (800b3c8 <mixerInit+0x238>)
 800b224:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800b228:	4b6a      	ldr	r3, [pc, #424]	; (800b3d4 <mixerInit+0x244>)
 800b22a:	701a      	strb	r2, [r3, #0]
        // copy motor-based mixers
        if (mixers[mcfg.mixerConfiguration].motor) {
 800b22c:	4b65      	ldr	r3, [pc, #404]	; (800b3c4 <mixerInit+0x234>)
 800b22e:	795b      	ldrb	r3, [r3, #5]
 800b230:	4a65      	ldr	r2, [pc, #404]	; (800b3c8 <mixerInit+0x238>)
 800b232:	00db      	lsls	r3, r3, #3
 800b234:	4413      	add	r3, r2
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d01f      	beq.n	800b27c <mixerInit+0xec>
            for (i = 0; i < numberMotor; i++)
 800b23c:	2300      	movs	r3, #0
 800b23e:	607b      	str	r3, [r7, #4]
 800b240:	e014      	b.n	800b26c <mixerInit+0xdc>
                currentMixer[i] = mixers[mcfg.mixerConfiguration].motor[i];
 800b242:	4b60      	ldr	r3, [pc, #384]	; (800b3c4 <mixerInit+0x234>)
 800b244:	795b      	ldrb	r3, [r3, #5]
 800b246:	4a60      	ldr	r2, [pc, #384]	; (800b3c8 <mixerInit+0x238>)
 800b248:	00db      	lsls	r3, r3, #3
 800b24a:	4413      	add	r3, r2
 800b24c:	685a      	ldr	r2, [r3, #4]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	011b      	lsls	r3, r3, #4
 800b252:	18d1      	adds	r1, r2, r3
 800b254:	4a5e      	ldr	r2, [pc, #376]	; (800b3d0 <mixerInit+0x240>)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	011b      	lsls	r3, r3, #4
 800b25a:	4413      	add	r3, r2
 800b25c:	461c      	mov	r4, r3
 800b25e:	460b      	mov	r3, r1
 800b260:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b262:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (i = 0; i < numberMotor; i++)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	3301      	adds	r3, #1
 800b26a:	607b      	str	r3, [r7, #4]
 800b26c:	4b59      	ldr	r3, [pc, #356]	; (800b3d4 <mixerInit+0x244>)
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	461a      	mov	r2, r3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	4293      	cmp	r3, r2
 800b276:	dbe4      	blt.n	800b242 <mixerInit+0xb2>
 800b278:	e000      	b.n	800b27c <mixerInit+0xec>
                break;
 800b27a:	bf00      	nop
        }
    }

    if (core.useServo) {
 800b27c:	4b53      	ldr	r3, [pc, #332]	; (800b3cc <mixerInit+0x23c>)
 800b27e:	7d5b      	ldrb	r3, [r3, #21]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d033      	beq.n	800b2ec <mixerInit+0x15c>
        numberRules = servoMixers[mcfg.mixerConfiguration].numberRules;
 800b284:	4b4f      	ldr	r3, [pc, #316]	; (800b3c4 <mixerInit+0x234>)
 800b286:	795b      	ldrb	r3, [r3, #5]
 800b288:	461a      	mov	r2, r3
 800b28a:	4b53      	ldr	r3, [pc, #332]	; (800b3d8 <mixerInit+0x248>)
 800b28c:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800b290:	4b52      	ldr	r3, [pc, #328]	; (800b3dc <mixerInit+0x24c>)
 800b292:	701a      	strb	r2, [r3, #0]
        if (servoMixers[mcfg.mixerConfiguration].rule) {
 800b294:	4b4b      	ldr	r3, [pc, #300]	; (800b3c4 <mixerInit+0x234>)
 800b296:	795b      	ldrb	r3, [r3, #5]
 800b298:	4a4f      	ldr	r2, [pc, #316]	; (800b3d8 <mixerInit+0x248>)
 800b29a:	00db      	lsls	r3, r3, #3
 800b29c:	4413      	add	r3, r2
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d023      	beq.n	800b2ec <mixerInit+0x15c>
            for (i = 0; i < numberRules; i++)
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	607b      	str	r3, [r7, #4]
 800b2a8:	e01a      	b.n	800b2e0 <mixerInit+0x150>
                currentServoMixer[i] = servoMixers[mcfg.mixerConfiguration].rule[i];
 800b2aa:	4b46      	ldr	r3, [pc, #280]	; (800b3c4 <mixerInit+0x234>)
 800b2ac:	795b      	ldrb	r3, [r3, #5]
 800b2ae:	4a4a      	ldr	r2, [pc, #296]	; (800b3d8 <mixerInit+0x248>)
 800b2b0:	00db      	lsls	r3, r3, #3
 800b2b2:	4413      	add	r3, r2
 800b2b4:	6859      	ldr	r1, [r3, #4]
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	4613      	mov	r3, r2
 800b2ba:	00db      	lsls	r3, r3, #3
 800b2bc:	1a9b      	subs	r3, r3, r2
 800b2be:	18c8      	adds	r0, r1, r3
 800b2c0:	4947      	ldr	r1, [pc, #284]	; (800b3e0 <mixerInit+0x250>)
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	4613      	mov	r3, r2
 800b2c6:	00db      	lsls	r3, r3, #3
 800b2c8:	1a9b      	subs	r3, r3, r2
 800b2ca:	440b      	add	r3, r1
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	6811      	ldr	r1, [r2, #0]
 800b2d0:	6019      	str	r1, [r3, #0]
 800b2d2:	8891      	ldrh	r1, [r2, #4]
 800b2d4:	7992      	ldrb	r2, [r2, #6]
 800b2d6:	8099      	strh	r1, [r3, #4]
 800b2d8:	719a      	strb	r2, [r3, #6]
            for (i = 0; i < numberRules; i++)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	607b      	str	r3, [r7, #4]
 800b2e0:	4b3e      	ldr	r3, [pc, #248]	; (800b3dc <mixerInit+0x24c>)
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	dbde      	blt.n	800b2aa <mixerInit+0x11a>
        }
    }

    // in 3D mode, mixer gain has to be halved
    if (feature(FEATURE_3D)) {
 800b2ec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b2f0:	f7fb fed6 	bl	80070a0 <feature>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d045      	beq.n	800b386 <mixerInit+0x1f6>
        if (numberMotor > 1) {
 800b2fa:	4b36      	ldr	r3, [pc, #216]	; (800b3d4 <mixerInit+0x244>)
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d941      	bls.n	800b386 <mixerInit+0x1f6>
            for (i = 0; i < numberMotor; i++) {
 800b302:	2300      	movs	r3, #0
 800b304:	607b      	str	r3, [r7, #4]
 800b306:	e038      	b.n	800b37a <mixerInit+0x1ea>
                currentMixer[i].pitch *= 0.5f;
 800b308:	4a31      	ldr	r2, [pc, #196]	; (800b3d0 <mixerInit+0x240>)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	011b      	lsls	r3, r3, #4
 800b30e:	4413      	add	r3, r2
 800b310:	3308      	adds	r3, #8
 800b312:	edd3 7a00 	vldr	s15, [r3]
 800b316:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b31a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b31e:	4a2c      	ldr	r2, [pc, #176]	; (800b3d0 <mixerInit+0x240>)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	011b      	lsls	r3, r3, #4
 800b324:	4413      	add	r3, r2
 800b326:	3308      	adds	r3, #8
 800b328:	edc3 7a00 	vstr	s15, [r3]
                currentMixer[i].roll *= 0.5f;
 800b32c:	4a28      	ldr	r2, [pc, #160]	; (800b3d0 <mixerInit+0x240>)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	011b      	lsls	r3, r3, #4
 800b332:	4413      	add	r3, r2
 800b334:	3304      	adds	r3, #4
 800b336:	edd3 7a00 	vldr	s15, [r3]
 800b33a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b33e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b342:	4a23      	ldr	r2, [pc, #140]	; (800b3d0 <mixerInit+0x240>)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	011b      	lsls	r3, r3, #4
 800b348:	4413      	add	r3, r2
 800b34a:	3304      	adds	r3, #4
 800b34c:	edc3 7a00 	vstr	s15, [r3]
                currentMixer[i].yaw *= 0.5f;
 800b350:	4a1f      	ldr	r2, [pc, #124]	; (800b3d0 <mixerInit+0x240>)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	011b      	lsls	r3, r3, #4
 800b356:	4413      	add	r3, r2
 800b358:	330c      	adds	r3, #12
 800b35a:	edd3 7a00 	vldr	s15, [r3]
 800b35e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b362:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b366:	4a1a      	ldr	r2, [pc, #104]	; (800b3d0 <mixerInit+0x240>)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	011b      	lsls	r3, r3, #4
 800b36c:	4413      	add	r3, r2
 800b36e:	330c      	adds	r3, #12
 800b370:	edc3 7a00 	vstr	s15, [r3]
            for (i = 0; i < numberMotor; i++) {
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	3301      	adds	r3, #1
 800b378:	607b      	str	r3, [r7, #4]
 800b37a:	4b16      	ldr	r3, [pc, #88]	; (800b3d4 <mixerInit+0x244>)
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	461a      	mov	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	4293      	cmp	r3, r2
 800b384:	dbc0      	blt.n	800b308 <mixerInit+0x178>
            }
        }
    }

    // set flag that we're on something with wings
    if (mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_AIRPLANE || mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE) {
 800b386:	4b0f      	ldr	r3, [pc, #60]	; (800b3c4 <mixerInit+0x234>)
 800b388:	795b      	ldrb	r3, [r3, #5]
 800b38a:	2b08      	cmp	r3, #8
 800b38c:	d007      	beq.n	800b39e <mixerInit+0x20e>
 800b38e:	4b0d      	ldr	r3, [pc, #52]	; (800b3c4 <mixerInit+0x234>)
 800b390:	795b      	ldrb	r3, [r3, #5]
 800b392:	2b0e      	cmp	r3, #14
 800b394:	d003      	beq.n	800b39e <mixerInit+0x20e>
 800b396:	4b0b      	ldr	r3, [pc, #44]	; (800b3c4 <mixerInit+0x234>)
 800b398:	795b      	ldrb	r3, [r3, #5]
 800b39a:	2b18      	cmp	r3, #24
 800b39c:	d109      	bne.n	800b3b2 <mixerInit+0x222>
        f.FIXED_WING = 1;
 800b39e:	4b11      	ldr	r3, [pc, #68]	; (800b3e4 <mixerInit+0x254>)
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	741a      	strb	r2, [r3, #16]

        if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800b3a4:	4b07      	ldr	r3, [pc, #28]	; (800b3c4 <mixerInit+0x234>)
 800b3a6:	795b      	ldrb	r3, [r3, #5]
 800b3a8:	2b18      	cmp	r3, #24
 800b3aa:	d105      	bne.n	800b3b8 <mixerInit+0x228>
            loadCustomServoMixer();
 800b3ac:	f7ff feaa 	bl	800b104 <loadCustomServoMixer>
        if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800b3b0:	e002      	b.n	800b3b8 <mixerInit+0x228>
    } else
        f.FIXED_WING = 0;
 800b3b2:	4b0c      	ldr	r3, [pc, #48]	; (800b3e4 <mixerInit+0x254>)
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	741a      	strb	r2, [r3, #16]

    mixerResetMotors();
 800b3b8:	f000 f816 	bl	800b3e8 <mixerResetMotors>
}
 800b3bc:	bf00      	nop
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd90      	pop	{r4, r7, pc}
 800b3c4:	2000089c 	.word	0x2000089c
 800b3c8:	0802a0f4 	.word	0x0802a0f4
 800b3cc:	200007e4 	.word	0x200007e4
 800b3d0:	200015e4 	.word	0x200015e4
 800b3d4:	200015b0 	.word	0x200015b0
 800b3d8:	0802a260 	.word	0x0802a260
 800b3dc:	200015b1 	.word	0x200015b1
 800b3e0:	200016a4 	.word	0x200016a4
 800b3e4:	2000174c 	.word	0x2000174c

0800b3e8 <mixerResetMotors>:

void mixerResetMotors(void)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
    int i;
    // set disarmed motor values
    for (i = 0; i < MAX_MOTORS; i++)
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	607b      	str	r3, [r7, #4]
 800b3f2:	e016      	b.n	800b422 <mixerResetMotors+0x3a>
        motor_disarmed[i] = feature(FEATURE_3D) ? mcfg.neutral3d : mcfg.mincommand;
 800b3f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b3f8:	f7fb fe52 	bl	80070a0 <feature>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d004      	beq.n	800b40c <mixerResetMotors+0x24>
 800b402:	4b0c      	ldr	r3, [pc, #48]	; (800b434 <mixerResetMotors+0x4c>)
 800b404:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 800b408:	b21b      	sxth	r3, r3
 800b40a:	e003      	b.n	800b414 <mixerResetMotors+0x2c>
 800b40c:	4b09      	ldr	r3, [pc, #36]	; (800b434 <mixerResetMotors+0x4c>)
 800b40e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800b412:	b21b      	sxth	r3, r3
 800b414:	4908      	ldr	r1, [pc, #32]	; (800b438 <mixerResetMotors+0x50>)
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
    for (i = 0; i < MAX_MOTORS; i++)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	3301      	adds	r3, #1
 800b420:	607b      	str	r3, [r7, #4]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2b0b      	cmp	r3, #11
 800b426:	dde5      	ble.n	800b3f4 <mixerResetMotors+0xc>
}
 800b428:	bf00      	nop
 800b42a:	bf00      	nop
 800b42c:	3708      	adds	r7, #8
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	2000089c 	.word	0x2000089c
 800b438:	200015cc 	.word	0x200015cc

0800b43c <servoMixerLoadMix>:

void servoMixerLoadMix(int index)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
    int i;

    // we're 1-based
    index++;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	3301      	adds	r3, #1
 800b448:	607b      	str	r3, [r7, #4]
    // clear existing
    for (i = 0; i < MAX_SERVO_RULES; i++)
 800b44a:	2300      	movs	r3, #0
 800b44c:	60fb      	str	r3, [r7, #12]
 800b44e:	e038      	b.n	800b4c2 <servoMixerLoadMix+0x86>
        mcfg.customServoMixer[i].targetChannel = mcfg.customServoMixer[i].fromChannel = mcfg.customServoMixer[i].rate = mcfg.customServoMixer[i].box = 0;
 800b450:	4934      	ldr	r1, [pc, #208]	; (800b524 <servoMixerLoadMix+0xe8>)
 800b452:	68fa      	ldr	r2, [r7, #12]
 800b454:	4613      	mov	r3, r2
 800b456:	00db      	lsls	r3, r3, #3
 800b458:	1a9b      	subs	r3, r3, r2
 800b45a:	440b      	add	r3, r1
 800b45c:	33d6      	adds	r3, #214	; 0xd6
 800b45e:	2200      	movs	r2, #0
 800b460:	701a      	strb	r2, [r3, #0]
 800b462:	4930      	ldr	r1, [pc, #192]	; (800b524 <servoMixerLoadMix+0xe8>)
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	4613      	mov	r3, r2
 800b468:	00db      	lsls	r3, r3, #3
 800b46a:	1a9b      	subs	r3, r3, r2
 800b46c:	440b      	add	r3, r1
 800b46e:	33d2      	adds	r3, #210	; 0xd2
 800b470:	2200      	movs	r2, #0
 800b472:	701a      	strb	r2, [r3, #0]
 800b474:	492b      	ldr	r1, [pc, #172]	; (800b524 <servoMixerLoadMix+0xe8>)
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	4613      	mov	r3, r2
 800b47a:	00db      	lsls	r3, r3, #3
 800b47c:	1a9b      	subs	r3, r3, r2
 800b47e:	440b      	add	r3, r1
 800b480:	33d2      	adds	r3, #210	; 0xd2
 800b482:	f993 3000 	ldrsb.w	r3, [r3]
 800b486:	b2d8      	uxtb	r0, r3
 800b488:	4926      	ldr	r1, [pc, #152]	; (800b524 <servoMixerLoadMix+0xe8>)
 800b48a:	68fa      	ldr	r2, [r7, #12]
 800b48c:	4613      	mov	r3, r2
 800b48e:	00db      	lsls	r3, r3, #3
 800b490:	1a9b      	subs	r3, r3, r2
 800b492:	440b      	add	r3, r1
 800b494:	33d1      	adds	r3, #209	; 0xd1
 800b496:	4602      	mov	r2, r0
 800b498:	701a      	strb	r2, [r3, #0]
 800b49a:	4922      	ldr	r1, [pc, #136]	; (800b524 <servoMixerLoadMix+0xe8>)
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	4613      	mov	r3, r2
 800b4a0:	00db      	lsls	r3, r3, #3
 800b4a2:	1a9b      	subs	r3, r3, r2
 800b4a4:	440b      	add	r3, r1
 800b4a6:	33d1      	adds	r3, #209	; 0xd1
 800b4a8:	7818      	ldrb	r0, [r3, #0]
 800b4aa:	491e      	ldr	r1, [pc, #120]	; (800b524 <servoMixerLoadMix+0xe8>)
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	00db      	lsls	r3, r3, #3
 800b4b2:	1a9b      	subs	r3, r3, r2
 800b4b4:	440b      	add	r3, r1
 800b4b6:	33d0      	adds	r3, #208	; 0xd0
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MAX_SERVO_RULES; i++)
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	60fb      	str	r3, [r7, #12]
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2b0f      	cmp	r3, #15
 800b4c6:	ddc3      	ble.n	800b450 <servoMixerLoadMix+0x14>

    for (i = 0; i < servoMixers[index].numberRules; i++)
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	60fb      	str	r3, [r7, #12]
 800b4cc:	e01a      	b.n	800b504 <servoMixerLoadMix+0xc8>
        mcfg.customServoMixer[i] = servoMixers[index].rule[i];
 800b4ce:	4a16      	ldr	r2, [pc, #88]	; (800b528 <servoMixerLoadMix+0xec>)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	00db      	lsls	r3, r3, #3
 800b4d4:	4413      	add	r3, r2
 800b4d6:	6859      	ldr	r1, [r3, #4]
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	4613      	mov	r3, r2
 800b4dc:	00db      	lsls	r3, r3, #3
 800b4de:	1a9b      	subs	r3, r3, r2
 800b4e0:	18c8      	adds	r0, r1, r3
 800b4e2:	4910      	ldr	r1, [pc, #64]	; (800b524 <servoMixerLoadMix+0xe8>)
 800b4e4:	68fa      	ldr	r2, [r7, #12]
 800b4e6:	4613      	mov	r3, r2
 800b4e8:	00db      	lsls	r3, r3, #3
 800b4ea:	1a9b      	subs	r3, r3, r2
 800b4ec:	440b      	add	r3, r1
 800b4ee:	33d0      	adds	r3, #208	; 0xd0
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	6811      	ldr	r1, [r2, #0]
 800b4f4:	6019      	str	r1, [r3, #0]
 800b4f6:	8891      	ldrh	r1, [r2, #4]
 800b4f8:	7992      	ldrb	r2, [r2, #6]
 800b4fa:	8099      	strh	r1, [r3, #4]
 800b4fc:	719a      	strb	r2, [r3, #6]
    for (i = 0; i < servoMixers[index].numberRules; i++)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	3301      	adds	r3, #1
 800b502:	60fb      	str	r3, [r7, #12]
 800b504:	4a08      	ldr	r2, [pc, #32]	; (800b528 <servoMixerLoadMix+0xec>)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b50c:	461a      	mov	r2, r3
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	4293      	cmp	r3, r2
 800b512:	dbdc      	blt.n	800b4ce <servoMixerLoadMix+0x92>
}
 800b514:	bf00      	nop
 800b516:	bf00      	nop
 800b518:	3714      	adds	r7, #20
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	2000089c 	.word	0x2000089c
 800b528:	0802a260 	.word	0x0802a260

0800b52c <mixerLoadMix>:

void mixerLoadMix(int index)
{
 800b52c:	b490      	push	{r4, r7}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
    int i;

    // we're 1-based
    index++;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	3301      	adds	r3, #1
 800b538:	607b      	str	r3, [r7, #4]
    // clear existing
    for (i = 0; i < MAX_MOTORS; i++)
 800b53a:	2300      	movs	r3, #0
 800b53c:	60fb      	str	r3, [r7, #12]
 800b53e:	e00a      	b.n	800b556 <mixerLoadMix+0x2a>
        mcfg.customMixer[i].throttle = 0.0f;
 800b540:	4a1c      	ldr	r2, [pc, #112]	; (800b5b4 <mixerLoadMix+0x88>)
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	3301      	adds	r3, #1
 800b546:	011b      	lsls	r3, r3, #4
 800b548:	4413      	add	r3, r2
 800b54a:	f04f 0200 	mov.w	r2, #0
 800b54e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MOTORS; i++)
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	3301      	adds	r3, #1
 800b554:	60fb      	str	r3, [r7, #12]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2b0b      	cmp	r3, #11
 800b55a:	ddf1      	ble.n	800b540 <mixerLoadMix+0x14>

    // do we have anything here to begin with?
    if (mixers[index].motor != NULL) {
 800b55c:	4a16      	ldr	r2, [pc, #88]	; (800b5b8 <mixerLoadMix+0x8c>)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	00db      	lsls	r3, r3, #3
 800b562:	4413      	add	r3, r2
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d01f      	beq.n	800b5aa <mixerLoadMix+0x7e>
        for (i = 0; i < mixers[index].numberMotor; i++)
 800b56a:	2300      	movs	r3, #0
 800b56c:	60fb      	str	r3, [r7, #12]
 800b56e:	e014      	b.n	800b59a <mixerLoadMix+0x6e>
            mcfg.customMixer[i] = mixers[index].motor[i];
 800b570:	4a11      	ldr	r2, [pc, #68]	; (800b5b8 <mixerLoadMix+0x8c>)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	00db      	lsls	r3, r3, #3
 800b576:	4413      	add	r3, r2
 800b578:	685a      	ldr	r2, [r3, #4]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	011b      	lsls	r3, r3, #4
 800b57e:	18d1      	adds	r1, r2, r3
 800b580:	4a0c      	ldr	r2, [pc, #48]	; (800b5b4 <mixerLoadMix+0x88>)
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	3301      	adds	r3, #1
 800b586:	011b      	lsls	r3, r3, #4
 800b588:	4413      	add	r3, r2
 800b58a:	461c      	mov	r4, r3
 800b58c:	460b      	mov	r3, r1
 800b58e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b590:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (i = 0; i < mixers[index].numberMotor; i++)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	3301      	adds	r3, #1
 800b598:	60fb      	str	r3, [r7, #12]
 800b59a:	4a07      	ldr	r2, [pc, #28]	; (800b5b8 <mixerLoadMix+0x8c>)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	dbe2      	blt.n	800b570 <mixerLoadMix+0x44>
    }
}
 800b5aa:	bf00      	nop
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bc90      	pop	{r4, r7}
 800b5b2:	4770      	bx	lr
 800b5b4:	2000089c 	.word	0x2000089c
 800b5b8:	0802a0f4 	.word	0x0802a0f4

0800b5bc <writeServos>:

void writeServos(void)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	af00      	add	r7, sp, #0
    if (!core.useServo)
 800b5c0:	4b95      	ldr	r3, [pc, #596]	; (800b818 <writeServos+0x25c>)
 800b5c2:	7d5b      	ldrb	r3, [r3, #21]
 800b5c4:	f083 0301 	eor.w	r3, r3, #1
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	f040 811d 	bne.w	800b80a <writeServos+0x24e>
        return;

    switch (mcfg.mixerConfiguration) {
 800b5d0:	4b92      	ldr	r3, [pc, #584]	; (800b81c <writeServos+0x260>)
 800b5d2:	795b      	ldrb	r3, [r3, #5]
 800b5d4:	3b01      	subs	r3, #1
 800b5d6:	2b17      	cmp	r3, #23
 800b5d8:	f200 8100 	bhi.w	800b7dc <writeServos+0x220>
 800b5dc:	a201      	add	r2, pc, #4	; (adr r2, 800b5e4 <writeServos+0x28>)
 800b5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e2:	bf00      	nop
 800b5e4:	0800b667 	.word	0x0800b667
 800b5e8:	0800b7dd 	.word	0x0800b7dd
 800b5ec:	0800b7dd 	.word	0x0800b7dd
 800b5f0:	0800b645 	.word	0x0800b645
 800b5f4:	0800b6a7 	.word	0x0800b6a7
 800b5f8:	0800b7dd 	.word	0x0800b7dd
 800b5fc:	0800b7dd 	.word	0x0800b7dd
 800b600:	0800b6eb 	.word	0x0800b6eb
 800b604:	0800b7dd 	.word	0x0800b7dd
 800b608:	0800b7dd 	.word	0x0800b7dd
 800b60c:	0800b7dd 	.word	0x0800b7dd
 800b610:	0800b7dd 	.word	0x0800b7dd
 800b614:	0800b7dd 	.word	0x0800b7dd
 800b618:	0800b70d 	.word	0x0800b70d
 800b61c:	0800b7dd 	.word	0x0800b7dd
 800b620:	0800b7dd 	.word	0x0800b7dd
 800b624:	0800b7dd 	.word	0x0800b7dd
 800b628:	0800b7dd 	.word	0x0800b7dd
 800b62c:	0800b7dd 	.word	0x0800b7dd
 800b630:	0800b6c9 	.word	0x0800b6c9
 800b634:	0800b70d 	.word	0x0800b70d
 800b638:	0800b7dd 	.word	0x0800b7dd
 800b63c:	0800b7dd 	.word	0x0800b7dd
 800b640:	0800b74f 	.word	0x0800b74f
        case MULTITYPE_BI:
        	actPwmWriteServo(0, servo[4]);
 800b644:	4b76      	ldr	r3, [pc, #472]	; (800b820 <writeServos+0x264>)
 800b646:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	4619      	mov	r1, r3
 800b64e:	2000      	movs	r0, #0
 800b650:	f7f6 fc98 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[5]);
 800b654:	4b72      	ldr	r3, [pc, #456]	; (800b820 <writeServos+0x264>)
 800b656:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	4619      	mov	r1, r3
 800b65e:	2001      	movs	r0, #1
 800b660:	f7f6 fc90 	bl	8001f84 <actPwmWriteServo>
            break;
 800b664:	e0d6      	b.n	800b814 <writeServos+0x258>

        case MULTITYPE_TRI:
            if (cfg.tri_unarmed_servo) {
 800b666:	4b6f      	ldr	r3, [pc, #444]	; (800b824 <writeServos+0x268>)
 800b668:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d008      	beq.n	800b682 <writeServos+0xc6>
                // if unarmed flag set, we always move servo
            	actPwmWriteServo(0, servo[5]);
 800b670:	4b6b      	ldr	r3, [pc, #428]	; (800b820 <writeServos+0x264>)
 800b672:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b676:	b29b      	uxth	r3, r3
 800b678:	4619      	mov	r1, r3
 800b67a:	2000      	movs	r0, #0
 800b67c:	f7f6 fc82 	bl	8001f84 <actPwmWriteServo>
                if (f.ARMED)
                	actPwmWriteServo(0, servo[5]);
                else
                	actPwmWriteServo(0, 0); // kill servo signal completely.
            }
            break;
 800b680:	e0c8      	b.n	800b814 <writeServos+0x258>
                if (f.ARMED)
 800b682:	4b69      	ldr	r3, [pc, #420]	; (800b828 <writeServos+0x26c>)
 800b684:	785b      	ldrb	r3, [r3, #1]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d008      	beq.n	800b69c <writeServos+0xe0>
                	actPwmWriteServo(0, servo[5]);
 800b68a:	4b65      	ldr	r3, [pc, #404]	; (800b820 <writeServos+0x264>)
 800b68c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b690:	b29b      	uxth	r3, r3
 800b692:	4619      	mov	r1, r3
 800b694:	2000      	movs	r0, #0
 800b696:	f7f6 fc75 	bl	8001f84 <actPwmWriteServo>
            break;
 800b69a:	e0bb      	b.n	800b814 <writeServos+0x258>
                	actPwmWriteServo(0, 0); // kill servo signal completely.
 800b69c:	2100      	movs	r1, #0
 800b69e:	2000      	movs	r0, #0
 800b6a0:	f7f6 fc70 	bl	8001f84 <actPwmWriteServo>
            break;
 800b6a4:	e0b6      	b.n	800b814 <writeServos+0x258>

        case MULTITYPE_GIMBAL:
        	actPwmWriteServo(0, servo[0]);
 800b6a6:	4b5e      	ldr	r3, [pc, #376]	; (800b820 <writeServos+0x264>)
 800b6a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	f7f6 fc67 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[1]);
 800b6b6:	4b5a      	ldr	r3, [pc, #360]	; (800b820 <writeServos+0x264>)
 800b6b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	4619      	mov	r1, r3
 800b6c0:	2001      	movs	r0, #1
 800b6c2:	f7f6 fc5f 	bl	8001f84 <actPwmWriteServo>
            break;
 800b6c6:	e0a5      	b.n	800b814 <writeServos+0x258>

        case MULTITYPE_DUALCOPTER:
        	actPwmWriteServo(0, servo[4]);
 800b6c8:	4b55      	ldr	r3, [pc, #340]	; (800b820 <writeServos+0x264>)
 800b6ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	2000      	movs	r0, #0
 800b6d4:	f7f6 fc56 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[5]);
 800b6d8:	4b51      	ldr	r3, [pc, #324]	; (800b820 <writeServos+0x264>)
 800b6da:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	2001      	movs	r0, #1
 800b6e4:	f7f6 fc4e 	bl	8001f84 <actPwmWriteServo>
            break;
 800b6e8:	e094      	b.n	800b814 <writeServos+0x258>

        case MULTITYPE_FLYING_WING:
        	actPwmWriteServo(0, servo[3]);
 800b6ea:	4b4d      	ldr	r3, [pc, #308]	; (800b820 <writeServos+0x264>)
 800b6ec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	f7f6 fc45 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b6fa:	4b49      	ldr	r3, [pc, #292]	; (800b820 <writeServos+0x264>)
 800b6fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b700:	b29b      	uxth	r3, r3
 800b702:	4619      	mov	r1, r3
 800b704:	2001      	movs	r0, #1
 800b706:	f7f6 fc3d 	bl	8001f84 <actPwmWriteServo>
            break;
 800b70a:	e083      	b.n	800b814 <writeServos+0x258>

        case MULTITYPE_AIRPLANE:
        case MULTITYPE_SINGLECOPTER:
        	actPwmWriteServo(0, servo[3]);
 800b70c:	4b44      	ldr	r3, [pc, #272]	; (800b820 <writeServos+0x264>)
 800b70e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b712:	b29b      	uxth	r3, r3
 800b714:	4619      	mov	r1, r3
 800b716:	2000      	movs	r0, #0
 800b718:	f7f6 fc34 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b71c:	4b40      	ldr	r3, [pc, #256]	; (800b820 <writeServos+0x264>)
 800b71e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b722:	b29b      	uxth	r3, r3
 800b724:	4619      	mov	r1, r3
 800b726:	2001      	movs	r0, #1
 800b728:	f7f6 fc2c 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(2, servo[5]);
 800b72c:	4b3c      	ldr	r3, [pc, #240]	; (800b820 <writeServos+0x264>)
 800b72e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b732:	b29b      	uxth	r3, r3
 800b734:	4619      	mov	r1, r3
 800b736:	2002      	movs	r0, #2
 800b738:	f7f6 fc24 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(3, servo[6]);
 800b73c:	4b38      	ldr	r3, [pc, #224]	; (800b820 <writeServos+0x264>)
 800b73e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b742:	b29b      	uxth	r3, r3
 800b744:	4619      	mov	r1, r3
 800b746:	2003      	movs	r0, #3
 800b748:	f7f6 fc1c 	bl	8001f84 <actPwmWriteServo>
            break;
 800b74c:	e062      	b.n	800b814 <writeServos+0x258>

        case MULTITYPE_CUSTOM_PLANE:
        	actPwmWriteServo(0, servo[3]);
 800b74e:	4b34      	ldr	r3, [pc, #208]	; (800b820 <writeServos+0x264>)
 800b750:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b754:	b29b      	uxth	r3, r3
 800b756:	4619      	mov	r1, r3
 800b758:	2000      	movs	r0, #0
 800b75a:	f7f6 fc13 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b75e:	4b30      	ldr	r3, [pc, #192]	; (800b820 <writeServos+0x264>)
 800b760:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b764:	b29b      	uxth	r3, r3
 800b766:	4619      	mov	r1, r3
 800b768:	2001      	movs	r0, #1
 800b76a:	f7f6 fc0b 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(2, servo[5]);
 800b76e:	4b2c      	ldr	r3, [pc, #176]	; (800b820 <writeServos+0x264>)
 800b770:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b774:	b29b      	uxth	r3, r3
 800b776:	4619      	mov	r1, r3
 800b778:	2002      	movs	r0, #2
 800b77a:	f7f6 fc03 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(3, servo[6]);
 800b77e:	4b28      	ldr	r3, [pc, #160]	; (800b820 <writeServos+0x264>)
 800b780:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b784:	b29b      	uxth	r3, r3
 800b786:	4619      	mov	r1, r3
 800b788:	2003      	movs	r0, #3
 800b78a:	f7f6 fbfb 	bl	8001f84 <actPwmWriteServo>
            if (feature(FEATURE_PPM)) {
 800b78e:	2001      	movs	r0, #1
 800b790:	f7fb fc86 	bl	80070a0 <feature>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d039      	beq.n	800b80e <writeServos+0x252>
            	actPwmWriteServo(4, servo[0]);
 800b79a:	4b21      	ldr	r3, [pc, #132]	; (800b820 <writeServos+0x264>)
 800b79c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	2004      	movs	r0, #4
 800b7a6:	f7f6 fbed 	bl	8001f84 <actPwmWriteServo>
            	actPwmWriteServo(5, servo[1]);
 800b7aa:	4b1d      	ldr	r3, [pc, #116]	; (800b820 <writeServos+0x264>)
 800b7ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	2005      	movs	r0, #5
 800b7b6:	f7f6 fbe5 	bl	8001f84 <actPwmWriteServo>
            	actPwmWriteServo(6, servo[2]);
 800b7ba:	4b19      	ldr	r3, [pc, #100]	; (800b820 <writeServos+0x264>)
 800b7bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	2006      	movs	r0, #6
 800b7c6:	f7f6 fbdd 	bl	8001f84 <actPwmWriteServo>
            	actPwmWriteServo(7, servo[7]);
 800b7ca:	4b15      	ldr	r3, [pc, #84]	; (800b820 <writeServos+0x264>)
 800b7cc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	2007      	movs	r0, #7
 800b7d6:	f7f6 fbd5 	bl	8001f84 <actPwmWriteServo>
            }
            break;
 800b7da:	e018      	b.n	800b80e <writeServos+0x252>

        default:
            // Two servos for SERVO_TILT, if enabled
            if (feature(FEATURE_SERVO_TILT)) {
 800b7dc:	2020      	movs	r0, #32
 800b7de:	f7fb fc5f 	bl	80070a0 <feature>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d014      	beq.n	800b812 <writeServos+0x256>
            	actPwmWriteServo(0, servo[0]);
 800b7e8:	4b0d      	ldr	r3, [pc, #52]	; (800b820 <writeServos+0x264>)
 800b7ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	2000      	movs	r0, #0
 800b7f4:	f7f6 fbc6 	bl	8001f84 <actPwmWriteServo>
            	actPwmWriteServo(1, servo[1]);
 800b7f8:	4b09      	ldr	r3, [pc, #36]	; (800b820 <writeServos+0x264>)
 800b7fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	4619      	mov	r1, r3
 800b802:	2001      	movs	r0, #1
 800b804:	f7f6 fbbe 	bl	8001f84 <actPwmWriteServo>
            }
            break;
 800b808:	e003      	b.n	800b812 <writeServos+0x256>
        return;
 800b80a:	bf00      	nop
 800b80c:	e002      	b.n	800b814 <writeServos+0x258>
            break;
 800b80e:	bf00      	nop
 800b810:	e000      	b.n	800b814 <writeServos+0x258>
            break;
 800b812:	bf00      	nop
    }
}
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	200007e4 	.word	0x200007e4
 800b81c:	2000089c 	.word	0x2000089c
 800b820:	20000040 	.word	0x20000040
 800b824:	20000e08 	.word	0x20000e08
 800b828:	2000174c 	.word	0x2000174c

0800b82c <writeMotors>:

void writeMotors(void)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
    uint8_t i;

    for (i = 0; i < numberMotor; i++)
 800b832:	2300      	movs	r3, #0
 800b834:	71fb      	strb	r3, [r7, #7]
 800b836:	e00c      	b.n	800b852 <writeMotors+0x26>
        actPwmWriteMotor(i, motor[i]);
 800b838:	79fb      	ldrb	r3, [r7, #7]
 800b83a:	4a0b      	ldr	r2, [pc, #44]	; (800b868 <writeMotors+0x3c>)
 800b83c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b840:	b29a      	uxth	r2, r3
 800b842:	79fb      	ldrb	r3, [r7, #7]
 800b844:	4611      	mov	r1, r2
 800b846:	4618      	mov	r0, r3
 800b848:	f7f6 fb80 	bl	8001f4c <actPwmWriteMotor>
    for (i = 0; i < numberMotor; i++)
 800b84c:	79fb      	ldrb	r3, [r7, #7]
 800b84e:	3301      	adds	r3, #1
 800b850:	71fb      	strb	r3, [r7, #7]
 800b852:	4b06      	ldr	r3, [pc, #24]	; (800b86c <writeMotors+0x40>)
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	79fa      	ldrb	r2, [r7, #7]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d3ed      	bcc.n	800b838 <writeMotors+0xc>
}
 800b85c:	bf00      	nop
 800b85e:	bf00      	nop
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	200015b4 	.word	0x200015b4
 800b86c:	200015b0 	.word	0x200015b0

0800b870 <servoMixer>:
        motor[i] = mc;
    writeMotors();
}

static void servoMixer(void)
{
 800b870:	b590      	push	{r4, r7, lr}
 800b872:	b08b      	sub	sp, #44	; 0x2c
 800b874:	af00      	add	r7, sp, #0
    int16_t input[INPUT_ITEMS];
    static int16_t currentOutput[MAX_SERVO_RULES];
    uint8_t i;

    if (f.PASSTHRU_MODE) {
 800b876:	4bae      	ldr	r3, [pc, #696]	; (800bb30 <servoMixer+0x2c0>)
 800b878:	7a9b      	ldrb	r3, [r3, #10]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00c      	beq.n	800b898 <servoMixer+0x28>
        // Direct passthru from RX
        input[INPUT_ROLL] = rcCommand[ROLL];
 800b87e:	4bad      	ldr	r3, [pc, #692]	; (800bb34 <servoMixer+0x2c4>)
 800b880:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b884:	80bb      	strh	r3, [r7, #4]
        input[INPUT_PITCH] = rcCommand[PITCH];
 800b886:	4bab      	ldr	r3, [pc, #684]	; (800bb34 <servoMixer+0x2c4>)
 800b888:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b88c:	80fb      	strh	r3, [r7, #6]
        input[INPUT_YAW] = rcCommand[YAW];
 800b88e:	4ba9      	ldr	r3, [pc, #676]	; (800bb34 <servoMixer+0x2c4>)
 800b890:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b894:	813b      	strh	r3, [r7, #8]
 800b896:	e00b      	b.n	800b8b0 <servoMixer+0x40>
    } else {
        // Assisted modes (gyro only or gyro+acc according to AUX configuration in Gui
        input[INPUT_ROLL] = axisPID[ROLL];
 800b898:	4ba7      	ldr	r3, [pc, #668]	; (800bb38 <servoMixer+0x2c8>)
 800b89a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b89e:	80bb      	strh	r3, [r7, #4]
        input[INPUT_PITCH] = axisPID[PITCH];
 800b8a0:	4ba5      	ldr	r3, [pc, #660]	; (800bb38 <servoMixer+0x2c8>)
 800b8a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b8a6:	80fb      	strh	r3, [r7, #6]
        input[INPUT_YAW] = axisPID[YAW];
 800b8a8:	4ba3      	ldr	r3, [pc, #652]	; (800bb38 <servoMixer+0x2c8>)
 800b8aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b8ae:	813b      	strh	r3, [r7, #8]
    }

    input[INPUT_THROTTLE] = motor[0];
 800b8b0:	4ba2      	ldr	r3, [pc, #648]	; (800bb3c <servoMixer+0x2cc>)
 800b8b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8b6:	817b      	strh	r3, [r7, #10]
    // by subtracting the RC middle value from the RC input value, we get:
    // data - middle = input
    // 2000 - 1500 = +500
    // 1500 - 1500 = 0
    // 1000 - 1500 = -500
    input[INPUT_AUX1] = rcData[AUX1] - mcfg.midrc;
 800b8b8:	4ba1      	ldr	r3, [pc, #644]	; (800bb40 <servoMixer+0x2d0>)
 800b8ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b8be:	b29a      	uxth	r2, r3
 800b8c0:	4ba0      	ldr	r3, [pc, #640]	; (800bb44 <servoMixer+0x2d4>)
 800b8c2:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b8c6:	1ad3      	subs	r3, r2, r3
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	b21b      	sxth	r3, r3
 800b8cc:	81bb      	strh	r3, [r7, #12]
    input[INPUT_AUX2] = rcData[AUX2] - mcfg.midrc;
 800b8ce:	4b9c      	ldr	r3, [pc, #624]	; (800bb40 <servoMixer+0x2d0>)
 800b8d0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	4b9b      	ldr	r3, [pc, #620]	; (800bb44 <servoMixer+0x2d4>)
 800b8d8:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b8dc:	1ad3      	subs	r3, r2, r3
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	b21b      	sxth	r3, r3
 800b8e2:	81fb      	strh	r3, [r7, #14]
    input[INPUT_AUX3] = rcData[AUX3] - mcfg.midrc;
 800b8e4:	4b96      	ldr	r3, [pc, #600]	; (800bb40 <servoMixer+0x2d0>)
 800b8e6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b8ea:	b29a      	uxth	r2, r3
 800b8ec:	4b95      	ldr	r3, [pc, #596]	; (800bb44 <servoMixer+0x2d4>)
 800b8ee:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b8f2:	1ad3      	subs	r3, r2, r3
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	b21b      	sxth	r3, r3
 800b8f8:	823b      	strh	r3, [r7, #16]
    input[INPUT_AUX4] = rcData[AUX4] - mcfg.midrc;
 800b8fa:	4b91      	ldr	r3, [pc, #580]	; (800bb40 <servoMixer+0x2d0>)
 800b8fc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b900:	b29a      	uxth	r2, r3
 800b902:	4b90      	ldr	r3, [pc, #576]	; (800bb44 <servoMixer+0x2d4>)
 800b904:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b908:	1ad3      	subs	r3, r2, r3
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	b21b      	sxth	r3, r3
 800b90e:	827b      	strh	r3, [r7, #18]
    input[INPUT_RC_ROLL] = rcData[ROLL] - mcfg.midrc;
 800b910:	4b8b      	ldr	r3, [pc, #556]	; (800bb40 <servoMixer+0x2d0>)
 800b912:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b916:	b29a      	uxth	r2, r3
 800b918:	4b8a      	ldr	r3, [pc, #552]	; (800bb44 <servoMixer+0x2d4>)
 800b91a:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b91e:	1ad3      	subs	r3, r2, r3
 800b920:	b29b      	uxth	r3, r3
 800b922:	b21b      	sxth	r3, r3
 800b924:	82bb      	strh	r3, [r7, #20]
    input[INPUT_RC_PITCH] = rcData[PITCH] - mcfg.midrc;
 800b926:	4b86      	ldr	r3, [pc, #536]	; (800bb40 <servoMixer+0x2d0>)
 800b928:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b92c:	b29a      	uxth	r2, r3
 800b92e:	4b85      	ldr	r3, [pc, #532]	; (800bb44 <servoMixer+0x2d4>)
 800b930:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	b29b      	uxth	r3, r3
 800b938:	b21b      	sxth	r3, r3
 800b93a:	82fb      	strh	r3, [r7, #22]
    input[INPUT_RC_YAW] = rcData[YAW] - mcfg.midrc;
 800b93c:	4b80      	ldr	r3, [pc, #512]	; (800bb40 <servoMixer+0x2d0>)
 800b93e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b942:	b29a      	uxth	r2, r3
 800b944:	4b7f      	ldr	r3, [pc, #508]	; (800bb44 <servoMixer+0x2d4>)
 800b946:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b94a:	1ad3      	subs	r3, r2, r3
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	b21b      	sxth	r3, r3
 800b950:	833b      	strh	r3, [r7, #24]
    input[INPUT_RC_THROTTLE] = rcData[THROTTLE] - mcfg.midrc;
 800b952:	4b7b      	ldr	r3, [pc, #492]	; (800bb40 <servoMixer+0x2d0>)
 800b954:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b958:	b29a      	uxth	r2, r3
 800b95a:	4b7a      	ldr	r3, [pc, #488]	; (800bb44 <servoMixer+0x2d4>)
 800b95c:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b960:	1ad3      	subs	r3, r2, r3
 800b962:	b29b      	uxth	r3, r3
 800b964:	b21b      	sxth	r3, r3
 800b966:	837b      	strh	r3, [r7, #26]

    for (i = 0; i < MAX_SERVOS; i++)
 800b968:	2300      	movs	r3, #0
 800b96a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b96e:	e00a      	b.n	800b986 <servoMixer+0x116>
        servo[i] = 0;
 800b970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b974:	4a74      	ldr	r2, [pc, #464]	; (800bb48 <servoMixer+0x2d8>)
 800b976:	2100      	movs	r1, #0
 800b978:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++)
 800b97c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b980:	3301      	adds	r3, #1
 800b982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b986:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b98a:	2b07      	cmp	r3, #7
 800b98c:	d9f0      	bls.n	800b970 <servoMixer+0x100>

    // mix servos according to rules
    for (i = 0; i < numberRules; i++) {
 800b98e:	2300      	movs	r3, #0
 800b990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b994:	e15f      	b.n	800bc56 <servoMixer+0x3e6>
        // consider rule if no box assigned or box is active
        if (currentServoMixer[i].box == 0 || rcOptions[BOXSERVO1 + currentServoMixer[i].box - 1]) {
 800b996:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b99a:	496c      	ldr	r1, [pc, #432]	; (800bb4c <servoMixer+0x2dc>)
 800b99c:	4613      	mov	r3, r2
 800b99e:	00db      	lsls	r3, r3, #3
 800b9a0:	1a9b      	subs	r3, r3, r2
 800b9a2:	440b      	add	r3, r1
 800b9a4:	3306      	adds	r3, #6
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d00e      	beq.n	800b9ca <servoMixer+0x15a>
 800b9ac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b9b0:	4966      	ldr	r1, [pc, #408]	; (800bb4c <servoMixer+0x2dc>)
 800b9b2:	4613      	mov	r3, r2
 800b9b4:	00db      	lsls	r3, r3, #3
 800b9b6:	1a9b      	subs	r3, r3, r2
 800b9b8:	440b      	add	r3, r1
 800b9ba:	3306      	adds	r3, #6
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	3314      	adds	r3, #20
 800b9c0:	4a63      	ldr	r2, [pc, #396]	; (800bb50 <servoMixer+0x2e0>)
 800b9c2:	5cd3      	ldrb	r3, [r2, r3]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f000 813b 	beq.w	800bc40 <servoMixer+0x3d0>
            uint8_t target = currentServoMixer[i].targetChannel;
 800b9ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b9ce:	495f      	ldr	r1, [pc, #380]	; (800bb4c <servoMixer+0x2dc>)
 800b9d0:	4613      	mov	r3, r2
 800b9d2:	00db      	lsls	r3, r3, #3
 800b9d4:	1a9b      	subs	r3, r3, r2
 800b9d6:	440b      	add	r3, r1
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            uint8_t from = currentServoMixer[i].fromChannel;
 800b9de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b9e2:	495a      	ldr	r1, [pc, #360]	; (800bb4c <servoMixer+0x2dc>)
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	00db      	lsls	r3, r3, #3
 800b9e8:	1a9b      	subs	r3, r3, r2
 800b9ea:	440b      	add	r3, r1
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            uint16_t servo_width = cfg.servoConf[target].max - cfg.servoConf[target].min;
 800b9f4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b9f8:	4956      	ldr	r1, [pc, #344]	; (800bb54 <servoMixer+0x2e4>)
 800b9fa:	4613      	mov	r3, r2
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	4413      	add	r3, r2
 800ba00:	005b      	lsls	r3, r3, #1
 800ba02:	440b      	add	r3, r1
 800ba04:	33ba      	adds	r3, #186	; 0xba
 800ba06:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba0a:	b299      	uxth	r1, r3
 800ba0c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ba10:	4850      	ldr	r0, [pc, #320]	; (800bb54 <servoMixer+0x2e4>)
 800ba12:	4613      	mov	r3, r2
 800ba14:	009b      	lsls	r3, r3, #2
 800ba16:	4413      	add	r3, r2
 800ba18:	005b      	lsls	r3, r3, #1
 800ba1a:	4403      	add	r3, r0
 800ba1c:	33b8      	adds	r3, #184	; 0xb8
 800ba1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	1acb      	subs	r3, r1, r3
 800ba26:	847b      	strh	r3, [r7, #34]	; 0x22
            int16_t min = currentServoMixer[i].min * servo_width / 100 - servo_width / 2;
 800ba28:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ba2c:	4947      	ldr	r1, [pc, #284]	; (800bb4c <servoMixer+0x2dc>)
 800ba2e:	4613      	mov	r3, r2
 800ba30:	00db      	lsls	r3, r3, #3
 800ba32:	1a9b      	subs	r3, r3, r2
 800ba34:	440b      	add	r3, r1
 800ba36:	3304      	adds	r3, #4
 800ba38:	f993 3000 	ldrsb.w	r3, [r3]
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba40:	fb02 f303 	mul.w	r3, r2, r3
 800ba44:	4a44      	ldr	r2, [pc, #272]	; (800bb58 <servoMixer+0x2e8>)
 800ba46:	fb82 1203 	smull	r1, r2, r2, r3
 800ba4a:	1152      	asrs	r2, r2, #5
 800ba4c:	17db      	asrs	r3, r3, #31
 800ba4e:	1ad3      	subs	r3, r2, r3
 800ba50:	b29a      	uxth	r2, r3
 800ba52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba54:	085b      	lsrs	r3, r3, #1
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	1ad3      	subs	r3, r2, r3
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	843b      	strh	r3, [r7, #32]
            int16_t max = currentServoMixer[i].max * servo_width / 100 - servo_width / 2;
 800ba5e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ba62:	493a      	ldr	r1, [pc, #232]	; (800bb4c <servoMixer+0x2dc>)
 800ba64:	4613      	mov	r3, r2
 800ba66:	00db      	lsls	r3, r3, #3
 800ba68:	1a9b      	subs	r3, r3, r2
 800ba6a:	440b      	add	r3, r1
 800ba6c:	3305      	adds	r3, #5
 800ba6e:	f993 3000 	ldrsb.w	r3, [r3]
 800ba72:	461a      	mov	r2, r3
 800ba74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba76:	fb02 f303 	mul.w	r3, r2, r3
 800ba7a:	4a37      	ldr	r2, [pc, #220]	; (800bb58 <servoMixer+0x2e8>)
 800ba7c:	fb82 1203 	smull	r1, r2, r2, r3
 800ba80:	1152      	asrs	r2, r2, #5
 800ba82:	17db      	asrs	r3, r3, #31
 800ba84:	1ad3      	subs	r3, r2, r3
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba8a:	085b      	lsrs	r3, r3, #1
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	1ad3      	subs	r3, r2, r3
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	83fb      	strh	r3, [r7, #30]

            if (currentServoMixer[i].speed == 0)
 800ba94:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ba98:	492c      	ldr	r1, [pc, #176]	; (800bb4c <servoMixer+0x2dc>)
 800ba9a:	4613      	mov	r3, r2
 800ba9c:	00db      	lsls	r3, r3, #3
 800ba9e:	1a9b      	subs	r3, r3, r2
 800baa0:	440b      	add	r3, r1
 800baa2:	3303      	adds	r3, #3
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d10c      	bne.n	800bac4 <servoMixer+0x254>
                currentOutput[i] = input[from];
 800baaa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800baae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bab2:	005b      	lsls	r3, r3, #1
 800bab4:	3328      	adds	r3, #40	; 0x28
 800bab6:	443b      	add	r3, r7
 800bab8:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 800babc:	4b27      	ldr	r3, [pc, #156]	; (800bb5c <servoMixer+0x2ec>)
 800babe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800bac2:	e082      	b.n	800bbca <servoMixer+0x35a>
            else {
                if (currentOutput[i] < input[from])
 800bac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bac8:	4a24      	ldr	r2, [pc, #144]	; (800bb5c <servoMixer+0x2ec>)
 800baca:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800bace:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800bad2:	005b      	lsls	r3, r3, #1
 800bad4:	3328      	adds	r3, #40	; 0x28
 800bad6:	443b      	add	r3, r7
 800bad8:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800badc:	429a      	cmp	r2, r3
 800bade:	da3f      	bge.n	800bb60 <servoMixer+0x2f0>
                    currentOutput[i] = constrain(currentOutput[i] + currentServoMixer[i].speed, currentOutput[i], input[from]);
 800bae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bae4:	4a1d      	ldr	r2, [pc, #116]	; (800bb5c <servoMixer+0x2ec>)
 800bae6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800baea:	4618      	mov	r0, r3
 800baec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800baf0:	4916      	ldr	r1, [pc, #88]	; (800bb4c <servoMixer+0x2dc>)
 800baf2:	4613      	mov	r3, r2
 800baf4:	00db      	lsls	r3, r3, #3
 800baf6:	1a9b      	subs	r3, r3, r2
 800baf8:	440b      	add	r3, r1
 800bafa:	3303      	adds	r3, #3
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	4418      	add	r0, r3
 800bb00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb04:	4a15      	ldr	r2, [pc, #84]	; (800bb5c <servoMixer+0x2ec>)
 800bb06:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800bb10:	005b      	lsls	r3, r3, #1
 800bb12:	3328      	adds	r3, #40	; 0x28
 800bb14:	443b      	add	r3, r7
 800bb16:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	f7f8 f95c 	bl	8003dd8 <constrain>
 800bb20:	4602      	mov	r2, r0
 800bb22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb26:	b211      	sxth	r1, r2
 800bb28:	4a0c      	ldr	r2, [pc, #48]	; (800bb5c <servoMixer+0x2ec>)
 800bb2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800bb2e:	e04c      	b.n	800bbca <servoMixer+0x35a>
 800bb30:	2000174c 	.word	0x2000174c
 800bb34:	200017a8 	.word	0x200017a8
 800bb38:	20001808 	.word	0x20001808
 800bb3c:	200015b4 	.word	0x200015b4
 800bb40:	20001784 	.word	0x20001784
 800bb44:	2000089c 	.word	0x2000089c
 800bb48:	20000040 	.word	0x20000040
 800bb4c:	200016a4 	.word	0x200016a4
 800bb50:	200017ec 	.word	0x200017ec
 800bb54:	20000e08 	.word	0x20000e08
 800bb58:	51eb851f 	.word	0x51eb851f
 800bb5c:	20001714 	.word	0x20001714
                else if (currentOutput[i] > input[from])
 800bb60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb64:	4a63      	ldr	r2, [pc, #396]	; (800bcf4 <servoMixer+0x484>)
 800bb66:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800bb6a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800bb6e:	005b      	lsls	r3, r3, #1
 800bb70:	3328      	adds	r3, #40	; 0x28
 800bb72:	443b      	add	r3, r7
 800bb74:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	dd26      	ble.n	800bbca <servoMixer+0x35a>
                    currentOutput[i] = constrain(currentOutput[i] - currentServoMixer[i].speed, input[from], currentOutput[i]);
 800bb7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb80:	4a5c      	ldr	r2, [pc, #368]	; (800bcf4 <servoMixer+0x484>)
 800bb82:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bb86:	4618      	mov	r0, r3
 800bb88:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bb8c:	495a      	ldr	r1, [pc, #360]	; (800bcf8 <servoMixer+0x488>)
 800bb8e:	4613      	mov	r3, r2
 800bb90:	00db      	lsls	r3, r3, #3
 800bb92:	1a9b      	subs	r3, r3, r2
 800bb94:	440b      	add	r3, r1
 800bb96:	3303      	adds	r3, #3
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	1ac0      	subs	r0, r0, r3
 800bb9c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800bba0:	005b      	lsls	r3, r3, #1
 800bba2:	3328      	adds	r3, #40	; 0x28
 800bba4:	443b      	add	r3, r7
 800bba6:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800bbaa:	4619      	mov	r1, r3
 800bbac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbb0:	4a50      	ldr	r2, [pc, #320]	; (800bcf4 <servoMixer+0x484>)
 800bbb2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	f7f8 f90e 	bl	8003dd8 <constrain>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbc2:	b211      	sxth	r1, r2
 800bbc4:	4a4b      	ldr	r2, [pc, #300]	; (800bcf4 <servoMixer+0x484>)
 800bbc6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            servo[target] += servoDirection(target, from) * constrain(((int32_t)currentOutput[i] * currentServoMixer[i].rate) / 100, min, max);
 800bbca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bbce:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800bbd2:	4611      	mov	r1, r2
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7ff fa73 	bl	800b0c0 <servoDirection>
 800bbda:	4604      	mov	r4, r0
 800bbdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbe0:	4a44      	ldr	r2, [pc, #272]	; (800bcf4 <servoMixer+0x484>)
 800bbe2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bbec:	4942      	ldr	r1, [pc, #264]	; (800bcf8 <servoMixer+0x488>)
 800bbee:	4613      	mov	r3, r2
 800bbf0:	00db      	lsls	r3, r3, #3
 800bbf2:	1a9b      	subs	r3, r3, r2
 800bbf4:	440b      	add	r3, r1
 800bbf6:	3302      	adds	r3, #2
 800bbf8:	f993 3000 	ldrsb.w	r3, [r3]
 800bbfc:	fb00 f303 	mul.w	r3, r0, r3
 800bc00:	4a3e      	ldr	r2, [pc, #248]	; (800bcfc <servoMixer+0x48c>)
 800bc02:	fb82 1203 	smull	r1, r2, r2, r3
 800bc06:	1152      	asrs	r2, r2, #5
 800bc08:	17db      	asrs	r3, r3, #31
 800bc0a:	1ad3      	subs	r3, r2, r3
 800bc0c:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 800bc10:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7f8 f8df 	bl	8003dd8 <constrain>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	fb03 f104 	mul.w	r1, r3, r4
 800bc20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc24:	4a36      	ldr	r2, [pc, #216]	; (800bd00 <servoMixer+0x490>)
 800bc26:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bc2a:	b29a      	uxth	r2, r3
 800bc2c:	b28b      	uxth	r3, r1
 800bc2e:	4413      	add	r3, r2
 800bc30:	b29a      	uxth	r2, r3
 800bc32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc36:	b211      	sxth	r1, r2
 800bc38:	4a31      	ldr	r2, [pc, #196]	; (800bd00 <servoMixer+0x490>)
 800bc3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        if (currentServoMixer[i].box == 0 || rcOptions[BOXSERVO1 + currentServoMixer[i].box - 1]) {
 800bc3e:	e005      	b.n	800bc4c <servoMixer+0x3dc>
        } else
            currentOutput[i] = 0;
 800bc40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc44:	4a2b      	ldr	r2, [pc, #172]	; (800bcf4 <servoMixer+0x484>)
 800bc46:	2100      	movs	r1, #0
 800bc48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < numberRules; i++) {
 800bc4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc50:	3301      	adds	r3, #1
 800bc52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bc56:	4b2b      	ldr	r3, [pc, #172]	; (800bd04 <servoMixer+0x494>)
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	f4ff ae99 	bcc.w	800b996 <servoMixer+0x126>
    }

    // servo rates
    for (i = 0; i < MAX_SERVOS; i++) {
 800bc64:	2300      	movs	r3, #0
 800bc66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bc6a:	e039      	b.n	800bce0 <servoMixer+0x470>
        servo[i] = ((int32_t)cfg.servoConf[i].rate * servo[i]) / 100;
 800bc6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bc70:	4925      	ldr	r1, [pc, #148]	; (800bd08 <servoMixer+0x498>)
 800bc72:	4613      	mov	r3, r2
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	4413      	add	r3, r2
 800bc78:	005b      	lsls	r3, r3, #1
 800bc7a:	440b      	add	r3, r1
 800bc7c:	33be      	adds	r3, #190	; 0xbe
 800bc7e:	f993 3000 	ldrsb.w	r3, [r3]
 800bc82:	4619      	mov	r1, r3
 800bc84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc88:	4a1d      	ldr	r2, [pc, #116]	; (800bd00 <servoMixer+0x490>)
 800bc8a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bc8e:	fb01 f303 	mul.w	r3, r1, r3
 800bc92:	4a1a      	ldr	r2, [pc, #104]	; (800bcfc <servoMixer+0x48c>)
 800bc94:	fb82 1203 	smull	r1, r2, r2, r3
 800bc98:	1152      	asrs	r2, r2, #5
 800bc9a:	17db      	asrs	r3, r3, #31
 800bc9c:	1ad2      	subs	r2, r2, r3
 800bc9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bca2:	b211      	sxth	r1, r2
 800bca4:	4a16      	ldr	r2, [pc, #88]	; (800bd00 <servoMixer+0x490>)
 800bca6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        servo[i] += servoMiddle(i);
 800bcaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7ff f9d0 	bl	800b054 <servoMiddle>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcbc:	4a10      	ldr	r2, [pc, #64]	; (800bd00 <servoMixer+0x490>)
 800bcbe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bcc2:	b29a      	uxth	r2, r3
 800bcc4:	b28b      	uxth	r3, r1
 800bcc6:	4413      	add	r3, r2
 800bcc8:	b29a      	uxth	r2, r3
 800bcca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcce:	b211      	sxth	r1, r2
 800bcd0:	4a0b      	ldr	r2, [pc, #44]	; (800bd00 <servoMixer+0x490>)
 800bcd2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++) {
 800bcd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcda:	3301      	adds	r3, #1
 800bcdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bce4:	2b07      	cmp	r3, #7
 800bce6:	d9c1      	bls.n	800bc6c <servoMixer+0x3fc>
    }
}
 800bce8:	bf00      	nop
 800bcea:	bf00      	nop
 800bcec:	372c      	adds	r7, #44	; 0x2c
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd90      	pop	{r4, r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	20001714 	.word	0x20001714
 800bcf8:	200016a4 	.word	0x200016a4
 800bcfc:	51eb851f 	.word	0x51eb851f
 800bd00:	20000040 	.word	0x20000040
 800bd04:	200015b1 	.word	0x200015b1
 800bd08:	20000e08 	.word	0x20000e08

0800bd0c <mixTable>:

void mixTable(void)
{
 800bd0c:	b590      	push	{r4, r7, lr}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	af00      	add	r7, sp, #0
    int16_t maxMotor;
    uint32_t i;

    if (numberMotor > 3) {
 800bd12:	4b7e      	ldr	r3, [pc, #504]	; (800bf0c <mixTable+0x200>)
 800bd14:	781b      	ldrb	r3, [r3, #0]
 800bd16:	2b03      	cmp	r3, #3
 800bd18:	d91d      	bls.n	800bd56 <mixTable+0x4a>
        // prevent "yaw jump" during yaw correction
        axisPID[YAW] = constrain(axisPID[YAW], -100 - abs(rcCommand[YAW]), +100 + abs(rcCommand[YAW]));
 800bd1a:	4b7d      	ldr	r3, [pc, #500]	; (800bf10 <mixTable+0x204>)
 800bd1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bd20:	4618      	mov	r0, r3
 800bd22:	4b7c      	ldr	r3, [pc, #496]	; (800bf14 <mixTable+0x208>)
 800bd24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	bfb8      	it	lt
 800bd2c:	425b      	neglt	r3, r3
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	461a      	mov	r2, r3
 800bd32:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800bd36:	1a9b      	subs	r3, r3, r2
 800bd38:	4a76      	ldr	r2, [pc, #472]	; (800bf14 <mixTable+0x208>)
 800bd3a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800bd3e:	2a00      	cmp	r2, #0
 800bd40:	bfb8      	it	lt
 800bd42:	4252      	neglt	r2, r2
 800bd44:	b292      	uxth	r2, r2
 800bd46:	3264      	adds	r2, #100	; 0x64
 800bd48:	4619      	mov	r1, r3
 800bd4a:	f7f8 f845 	bl	8003dd8 <constrain>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	b21a      	sxth	r2, r3
 800bd52:	4b6f      	ldr	r3, [pc, #444]	; (800bf10 <mixTable+0x204>)
 800bd54:	809a      	strh	r2, [r3, #4]
    }

    // motors for non-servo mixes
    if (numberMotor > 1) {
 800bd56:	4b6d      	ldr	r3, [pc, #436]	; (800bf0c <mixTable+0x200>)
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	f240 809a 	bls.w	800be94 <mixTable+0x188>
        for (i = 0; i < numberMotor; i++) {
 800bd60:	2300      	movs	r3, #0
 800bd62:	60bb      	str	r3, [r7, #8]
 800bd64:	e08f      	b.n	800be86 <mixTable+0x17a>
            motor[i] = rcCommand[THROTTLE] * currentMixer[i].throttle + axisPID[PITCH] * currentMixer[i].pitch + axisPID[ROLL] * currentMixer[i].roll + -cfg.yaw_direction * axisPID[YAW] * currentMixer[i].yaw;
 800bd66:	4b6b      	ldr	r3, [pc, #428]	; (800bf14 <mixTable+0x208>)
 800bd68:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bd6c:	ee07 3a90 	vmov	s15, r3
 800bd70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bd74:	4a68      	ldr	r2, [pc, #416]	; (800bf18 <mixTable+0x20c>)
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	011b      	lsls	r3, r3, #4
 800bd7a:	4413      	add	r3, r2
 800bd7c:	edd3 7a00 	vldr	s15, [r3]
 800bd80:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd84:	4b62      	ldr	r3, [pc, #392]	; (800bf10 <mixTable+0x204>)
 800bd86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bd8a:	ee07 3a90 	vmov	s15, r3
 800bd8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bd92:	4a61      	ldr	r2, [pc, #388]	; (800bf18 <mixTable+0x20c>)
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	011b      	lsls	r3, r3, #4
 800bd98:	4413      	add	r3, r2
 800bd9a:	3308      	adds	r3, #8
 800bd9c:	edd3 7a00 	vldr	s15, [r3]
 800bda0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bda4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bda8:	4b59      	ldr	r3, [pc, #356]	; (800bf10 <mixTable+0x204>)
 800bdaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bdae:	ee07 3a90 	vmov	s15, r3
 800bdb2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bdb6:	4a58      	ldr	r2, [pc, #352]	; (800bf18 <mixTable+0x20c>)
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	011b      	lsls	r3, r3, #4
 800bdbc:	4413      	add	r3, r2
 800bdbe:	3304      	adds	r3, #4
 800bdc0:	edd3 7a00 	vldr	s15, [r3]
 800bdc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bdc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bdcc:	4b53      	ldr	r3, [pc, #332]	; (800bf1c <mixTable+0x210>)
 800bdce:	f993 310e 	ldrsb.w	r3, [r3, #270]	; 0x10e
 800bdd2:	425b      	negs	r3, r3
 800bdd4:	4a4e      	ldr	r2, [pc, #312]	; (800bf10 <mixTable+0x204>)
 800bdd6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800bdda:	fb02 f303 	mul.w	r3, r2, r3
 800bdde:	ee07 3a90 	vmov	s15, r3
 800bde2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bde6:	4a4c      	ldr	r2, [pc, #304]	; (800bf18 <mixTable+0x20c>)
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	011b      	lsls	r3, r3, #4
 800bdec:	4413      	add	r3, r2
 800bdee:	330c      	adds	r3, #12
 800bdf0:	edd3 7a00 	vldr	s15, [r3]
 800bdf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bdf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bdfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be00:	ee17 3a90 	vmov	r3, s15
 800be04:	b219      	sxth	r1, r3
 800be06:	4a46      	ldr	r2, [pc, #280]	; (800bf20 <mixTable+0x214>)
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (f.FIXED_WING) { // vector_thrust handeling
 800be0e:	4b45      	ldr	r3, [pc, #276]	; (800bf24 <mixTable+0x218>)
 800be10:	7c1b      	ldrb	r3, [r3, #16]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d034      	beq.n	800be80 <mixTable+0x174>
                if (cfg.fw_vector_thrust) {
 800be16:	4b41      	ldr	r3, [pc, #260]	; (800bf1c <mixTable+0x210>)
 800be18:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d028      	beq.n	800be72 <mixTable+0x166>
                    if (f.PASSTHRU_MODE)
 800be20:	4b40      	ldr	r3, [pc, #256]	; (800bf24 <mixTable+0x218>)
 800be22:	7a9b      	ldrb	r3, [r3, #10]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d02b      	beq.n	800be80 <mixTable+0x174>
                        motor[i] = rcCommand[THROTTLE] - rcCommand[YAW] * (i - 0.5f);
 800be28:	4b3a      	ldr	r3, [pc, #232]	; (800bf14 <mixTable+0x208>)
 800be2a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800be2e:	ee07 3a90 	vmov	s15, r3
 800be32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800be36:	4b37      	ldr	r3, [pc, #220]	; (800bf14 <mixTable+0x208>)
 800be38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800be3c:	ee07 3a90 	vmov	s15, r3
 800be40:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	ee07 3a90 	vmov	s15, r3
 800be4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be4e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800be52:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800be56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be62:	ee17 3a90 	vmov	r3, s15
 800be66:	b219      	sxth	r1, r3
 800be68:	4a2d      	ldr	r2, [pc, #180]	; (800bf20 <mixTable+0x214>)
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800be70:	e006      	b.n	800be80 <mixTable+0x174>
                } else { // Override mixerVectorThrust
                    motor[i] = rcCommand[THROTTLE];
 800be72:	4b28      	ldr	r3, [pc, #160]	; (800bf14 <mixTable+0x208>)
 800be74:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800be78:	4a29      	ldr	r2, [pc, #164]	; (800bf20 <mixTable+0x214>)
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < numberMotor; i++) {
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	3301      	adds	r3, #1
 800be84:	60bb      	str	r3, [r7, #8]
 800be86:	4b21      	ldr	r3, [pc, #132]	; (800bf0c <mixTable+0x200>)
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	461a      	mov	r2, r3
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	4293      	cmp	r3, r2
 800be90:	f4ff af69 	bcc.w	800bd66 <mixTable+0x5a>
            }
        }
    }

    // airplane / servo mixes
    switch (mcfg.mixerConfiguration) {
 800be94:	4b24      	ldr	r3, [pc, #144]	; (800bf28 <mixTable+0x21c>)
 800be96:	795b      	ldrb	r3, [r3, #5]
 800be98:	3b01      	subs	r3, #1
 800be9a:	2b17      	cmp	r3, #23
 800be9c:	d87b      	bhi.n	800bf96 <mixTable+0x28a>
 800be9e:	a201      	add	r2, pc, #4	; (adr r2, 800bea4 <mixTable+0x198>)
 800bea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea4:	0800bf05 	.word	0x0800bf05
 800bea8:	0800bf97 	.word	0x0800bf97
 800beac:	0800bf97 	.word	0x0800bf97
 800beb0:	0800bf05 	.word	0x0800bf05
 800beb4:	0800bf2d 	.word	0x0800bf2d
 800beb8:	0800bf97 	.word	0x0800bf97
 800bebc:	0800bf97 	.word	0x0800bf97
 800bec0:	0800bf05 	.word	0x0800bf05
 800bec4:	0800bf97 	.word	0x0800bf97
 800bec8:	0800bf97 	.word	0x0800bf97
 800becc:	0800bf97 	.word	0x0800bf97
 800bed0:	0800bf97 	.word	0x0800bf97
 800bed4:	0800bf97 	.word	0x0800bf97
 800bed8:	0800bf05 	.word	0x0800bf05
 800bedc:	0800bf97 	.word	0x0800bf97
 800bee0:	0800bf97 	.word	0x0800bf97
 800bee4:	0800bf97 	.word	0x0800bf97
 800bee8:	0800bf97 	.word	0x0800bf97
 800beec:	0800bf97 	.word	0x0800bf97
 800bef0:	0800bf05 	.word	0x0800bf05
 800bef4:	0800bf05 	.word	0x0800bf05
 800bef8:	0800bf97 	.word	0x0800bf97
 800befc:	0800bf97 	.word	0x0800bf97
 800bf00:	0800bf05 	.word	0x0800bf05
        case MULTITYPE_AIRPLANE:
        case MULTITYPE_BI:
        case MULTITYPE_TRI:
        case MULTITYPE_DUALCOPTER:
        case MULTITYPE_SINGLECOPTER:
            servoMixer();
 800bf04:	f7ff fcb4 	bl	800b870 <servoMixer>
            break;
 800bf08:	e045      	b.n	800bf96 <mixTable+0x28a>
 800bf0a:	bf00      	nop
 800bf0c:	200015b0 	.word	0x200015b0
 800bf10:	20001808 	.word	0x20001808
 800bf14:	200017a8 	.word	0x200017a8
 800bf18:	200015e4 	.word	0x200015e4
 800bf1c:	20000e08 	.word	0x20000e08
 800bf20:	200015b4 	.word	0x200015b4
 800bf24:	2000174c 	.word	0x2000174c
 800bf28:	2000089c 	.word	0x2000089c
        case MULTITYPE_GIMBAL:
            servo[0] = (((int32_t)cfg.servoConf[0].rate * angle[PITCH]) / 50) + servoMiddle(0);
 800bf2c:	4ba7      	ldr	r3, [pc, #668]	; (800c1cc <mixTable+0x4c0>)
 800bf2e:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bf32:	461a      	mov	r2, r3
 800bf34:	4ba6      	ldr	r3, [pc, #664]	; (800c1d0 <mixTable+0x4c4>)
 800bf36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bf3a:	fb02 f303 	mul.w	r3, r2, r3
 800bf3e:	4aa5      	ldr	r2, [pc, #660]	; (800c1d4 <mixTable+0x4c8>)
 800bf40:	fb82 1203 	smull	r1, r2, r2, r3
 800bf44:	1112      	asrs	r2, r2, #4
 800bf46:	17db      	asrs	r3, r3, #31
 800bf48:	1ad3      	subs	r3, r2, r3
 800bf4a:	b29c      	uxth	r4, r3
 800bf4c:	2000      	movs	r0, #0
 800bf4e:	f7ff f881 	bl	800b054 <servoMiddle>
 800bf52:	4603      	mov	r3, r0
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	4423      	add	r3, r4
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	b21a      	sxth	r2, r3
 800bf5c:	4b9e      	ldr	r3, [pc, #632]	; (800c1d8 <mixTable+0x4cc>)
 800bf5e:	801a      	strh	r2, [r3, #0]
            servo[1] = (((int32_t)cfg.servoConf[1].rate * angle[ROLL]) / 50) + servoMiddle(1);
 800bf60:	4b9a      	ldr	r3, [pc, #616]	; (800c1cc <mixTable+0x4c0>)
 800bf62:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bf66:	461a      	mov	r2, r3
 800bf68:	4b99      	ldr	r3, [pc, #612]	; (800c1d0 <mixTable+0x4c4>)
 800bf6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bf6e:	fb02 f303 	mul.w	r3, r2, r3
 800bf72:	4a98      	ldr	r2, [pc, #608]	; (800c1d4 <mixTable+0x4c8>)
 800bf74:	fb82 1203 	smull	r1, r2, r2, r3
 800bf78:	1112      	asrs	r2, r2, #4
 800bf7a:	17db      	asrs	r3, r3, #31
 800bf7c:	1ad3      	subs	r3, r2, r3
 800bf7e:	b29c      	uxth	r4, r3
 800bf80:	2001      	movs	r0, #1
 800bf82:	f7ff f867 	bl	800b054 <servoMiddle>
 800bf86:	4603      	mov	r3, r0
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	4423      	add	r3, r4
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	b21a      	sxth	r2, r3
 800bf90:	4b91      	ldr	r3, [pc, #580]	; (800c1d8 <mixTable+0x4cc>)
 800bf92:	805a      	strh	r2, [r3, #2]
            break;
 800bf94:	bf00      	nop
    }

    // do camstab
    if (feature(FEATURE_SERVO_TILT)) {
 800bf96:	2020      	movs	r0, #32
 800bf98:	f7fb f882 	bl	80070a0 <feature>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	f000 80a3 	beq.w	800c0ea <mixTable+0x3de>
        // center at fixed position, or vary either pitch or roll by RC channel
        servo[0] = servoMiddle(0);
 800bfa4:	2000      	movs	r0, #0
 800bfa6:	f7ff f855 	bl	800b054 <servoMiddle>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	461a      	mov	r2, r3
 800bfae:	4b8a      	ldr	r3, [pc, #552]	; (800c1d8 <mixTable+0x4cc>)
 800bfb0:	801a      	strh	r2, [r3, #0]
        servo[1] = servoMiddle(1);
 800bfb2:	2001      	movs	r0, #1
 800bfb4:	f7ff f84e 	bl	800b054 <servoMiddle>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	461a      	mov	r2, r3
 800bfbc:	4b86      	ldr	r3, [pc, #536]	; (800c1d8 <mixTable+0x4cc>)
 800bfbe:	805a      	strh	r2, [r3, #2]

        if (rcOptions[BOXCAMSTAB]) {
 800bfc0:	4b86      	ldr	r3, [pc, #536]	; (800c1dc <mixTable+0x4d0>)
 800bfc2:	7a1b      	ldrb	r3, [r3, #8]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	f000 8090 	beq.w	800c0ea <mixTable+0x3de>
            if (cfg.gimbal_flags & GIMBAL_MIXTILT) {
 800bfca:	4b80      	ldr	r3, [pc, #512]	; (800c1cc <mixTable+0x4c0>)
 800bfcc:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800bfd0:	f003 0302 	and.w	r3, r3, #2
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d056      	beq.n	800c086 <mixTable+0x37a>
                servo[0] -= (-(int32_t)cfg.servoConf[0].rate) * angle[PITCH] / 50 - (int32_t)cfg.servoConf[1].rate * angle[ROLL] / 50;
 800bfd8:	4b7f      	ldr	r3, [pc, #508]	; (800c1d8 <mixTable+0x4cc>)
 800bfda:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bfde:	b29a      	uxth	r2, r3
 800bfe0:	4b7a      	ldr	r3, [pc, #488]	; (800c1cc <mixTable+0x4c0>)
 800bfe2:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bfe6:	425b      	negs	r3, r3
 800bfe8:	4979      	ldr	r1, [pc, #484]	; (800c1d0 <mixTable+0x4c4>)
 800bfea:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800bfee:	fb01 f303 	mul.w	r3, r1, r3
 800bff2:	4978      	ldr	r1, [pc, #480]	; (800c1d4 <mixTable+0x4c8>)
 800bff4:	fb81 0103 	smull	r0, r1, r1, r3
 800bff8:	1109      	asrs	r1, r1, #4
 800bffa:	17db      	asrs	r3, r3, #31
 800bffc:	1acb      	subs	r3, r1, r3
 800bffe:	b299      	uxth	r1, r3
 800c000:	4b72      	ldr	r3, [pc, #456]	; (800c1cc <mixTable+0x4c0>)
 800c002:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800c006:	4618      	mov	r0, r3
 800c008:	4b71      	ldr	r3, [pc, #452]	; (800c1d0 <mixTable+0x4c4>)
 800c00a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c00e:	fb00 f303 	mul.w	r3, r0, r3
 800c012:	4870      	ldr	r0, [pc, #448]	; (800c1d4 <mixTable+0x4c8>)
 800c014:	fb80 4003 	smull	r4, r0, r0, r3
 800c018:	1100      	asrs	r0, r0, #4
 800c01a:	17db      	asrs	r3, r3, #31
 800c01c:	1a1b      	subs	r3, r3, r0
 800c01e:	b29b      	uxth	r3, r3
 800c020:	440b      	add	r3, r1
 800c022:	b29b      	uxth	r3, r3
 800c024:	1ad3      	subs	r3, r2, r3
 800c026:	b29b      	uxth	r3, r3
 800c028:	b21a      	sxth	r2, r3
 800c02a:	4b6b      	ldr	r3, [pc, #428]	; (800c1d8 <mixTable+0x4cc>)
 800c02c:	801a      	strh	r2, [r3, #0]
                servo[1] += (-(int32_t)cfg.servoConf[0].rate) * angle[PITCH] / 50 + (int32_t)cfg.servoConf[1].rate * angle[ROLL] / 50;
 800c02e:	4b6a      	ldr	r3, [pc, #424]	; (800c1d8 <mixTable+0x4cc>)
 800c030:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c034:	b29a      	uxth	r2, r3
 800c036:	4b65      	ldr	r3, [pc, #404]	; (800c1cc <mixTable+0x4c0>)
 800c038:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800c03c:	425b      	negs	r3, r3
 800c03e:	4964      	ldr	r1, [pc, #400]	; (800c1d0 <mixTable+0x4c4>)
 800c040:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800c044:	fb01 f303 	mul.w	r3, r1, r3
 800c048:	4962      	ldr	r1, [pc, #392]	; (800c1d4 <mixTable+0x4c8>)
 800c04a:	fb81 0103 	smull	r0, r1, r1, r3
 800c04e:	1109      	asrs	r1, r1, #4
 800c050:	17db      	asrs	r3, r3, #31
 800c052:	1acb      	subs	r3, r1, r3
 800c054:	b299      	uxth	r1, r3
 800c056:	4b5d      	ldr	r3, [pc, #372]	; (800c1cc <mixTable+0x4c0>)
 800c058:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800c05c:	4618      	mov	r0, r3
 800c05e:	4b5c      	ldr	r3, [pc, #368]	; (800c1d0 <mixTable+0x4c4>)
 800c060:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c064:	fb00 f303 	mul.w	r3, r0, r3
 800c068:	485a      	ldr	r0, [pc, #360]	; (800c1d4 <mixTable+0x4c8>)
 800c06a:	fb80 4003 	smull	r4, r0, r0, r3
 800c06e:	1100      	asrs	r0, r0, #4
 800c070:	17db      	asrs	r3, r3, #31
 800c072:	1ac3      	subs	r3, r0, r3
 800c074:	b29b      	uxth	r3, r3
 800c076:	440b      	add	r3, r1
 800c078:	b29b      	uxth	r3, r3
 800c07a:	4413      	add	r3, r2
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	b21a      	sxth	r2, r3
 800c080:	4b55      	ldr	r3, [pc, #340]	; (800c1d8 <mixTable+0x4cc>)
 800c082:	805a      	strh	r2, [r3, #2]
 800c084:	e031      	b.n	800c0ea <mixTable+0x3de>
            } else {
                servo[0] += (int32_t)cfg.servoConf[0].rate * angle[PITCH] / 50;
 800c086:	4b54      	ldr	r3, [pc, #336]	; (800c1d8 <mixTable+0x4cc>)
 800c088:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c08c:	b29a      	uxth	r2, r3
 800c08e:	4b4f      	ldr	r3, [pc, #316]	; (800c1cc <mixTable+0x4c0>)
 800c090:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800c094:	4619      	mov	r1, r3
 800c096:	4b4e      	ldr	r3, [pc, #312]	; (800c1d0 <mixTable+0x4c4>)
 800c098:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c09c:	fb01 f303 	mul.w	r3, r1, r3
 800c0a0:	494c      	ldr	r1, [pc, #304]	; (800c1d4 <mixTable+0x4c8>)
 800c0a2:	fb81 0103 	smull	r0, r1, r1, r3
 800c0a6:	1109      	asrs	r1, r1, #4
 800c0a8:	17db      	asrs	r3, r3, #31
 800c0aa:	1acb      	subs	r3, r1, r3
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	4413      	add	r3, r2
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	b21a      	sxth	r2, r3
 800c0b4:	4b48      	ldr	r3, [pc, #288]	; (800c1d8 <mixTable+0x4cc>)
 800c0b6:	801a      	strh	r2, [r3, #0]
                servo[1] += (int32_t)cfg.servoConf[1].rate * angle[ROLL]  / 50;
 800c0b8:	4b47      	ldr	r3, [pc, #284]	; (800c1d8 <mixTable+0x4cc>)
 800c0ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c0be:	b29a      	uxth	r2, r3
 800c0c0:	4b42      	ldr	r3, [pc, #264]	; (800c1cc <mixTable+0x4c0>)
 800c0c2:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	4b41      	ldr	r3, [pc, #260]	; (800c1d0 <mixTable+0x4c4>)
 800c0ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c0ce:	fb01 f303 	mul.w	r3, r1, r3
 800c0d2:	4940      	ldr	r1, [pc, #256]	; (800c1d4 <mixTable+0x4c8>)
 800c0d4:	fb81 0103 	smull	r0, r1, r1, r3
 800c0d8:	1109      	asrs	r1, r1, #4
 800c0da:	17db      	asrs	r3, r3, #31
 800c0dc:	1acb      	subs	r3, r1, r3
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	4413      	add	r3, r2
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	b21a      	sxth	r2, r3
 800c0e6:	4b3c      	ldr	r3, [pc, #240]	; (800c1d8 <mixTable+0x4cc>)
 800c0e8:	805a      	strh	r2, [r3, #2]
            }
        }
    }

    // constrain servos
    for (i = 0; i < MAX_SERVOS; i++)
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	60bb      	str	r3, [r7, #8]
 800c0ee:	e026      	b.n	800c13e <mixTable+0x432>
        servo[i] = constrain(servo[i], cfg.servoConf[i].min, cfg.servoConf[i].max); // limit the values
 800c0f0:	4a39      	ldr	r2, [pc, #228]	; (800c1d8 <mixTable+0x4cc>)
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	4934      	ldr	r1, [pc, #208]	; (800c1cc <mixTable+0x4c0>)
 800c0fc:	68ba      	ldr	r2, [r7, #8]
 800c0fe:	4613      	mov	r3, r2
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	4413      	add	r3, r2
 800c104:	005b      	lsls	r3, r3, #1
 800c106:	440b      	add	r3, r1
 800c108:	33b8      	adds	r3, #184	; 0xb8
 800c10a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c10e:	461c      	mov	r4, r3
 800c110:	492e      	ldr	r1, [pc, #184]	; (800c1cc <mixTable+0x4c0>)
 800c112:	68ba      	ldr	r2, [r7, #8]
 800c114:	4613      	mov	r3, r2
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	4413      	add	r3, r2
 800c11a:	005b      	lsls	r3, r3, #1
 800c11c:	440b      	add	r3, r1
 800c11e:	33ba      	adds	r3, #186	; 0xba
 800c120:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c124:	461a      	mov	r2, r3
 800c126:	4621      	mov	r1, r4
 800c128:	f7f7 fe56 	bl	8003dd8 <constrain>
 800c12c:	4603      	mov	r3, r0
 800c12e:	b219      	sxth	r1, r3
 800c130:	4a29      	ldr	r2, [pc, #164]	; (800c1d8 <mixTable+0x4cc>)
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++)
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	3301      	adds	r3, #1
 800c13c:	60bb      	str	r3, [r7, #8]
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	2b07      	cmp	r3, #7
 800c142:	d9d5      	bls.n	800c0f0 <mixTable+0x3e4>

    // forward AUX1-4 to servo outputs (not constrained)
    if (cfg.gimbal_flags & GIMBAL_FORWARDAUX) {
 800c144:	4b21      	ldr	r3, [pc, #132]	; (800c1cc <mixTable+0x4c0>)
 800c146:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800c14a:	f003 0304 	and.w	r3, r3, #4
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d01c      	beq.n	800c18c <mixTable+0x480>
        int offset = core.numServos - 4;
 800c152:	4b23      	ldr	r3, [pc, #140]	; (800c1e0 <mixTable+0x4d4>)
 800c154:	7d9b      	ldrb	r3, [r3, #22]
 800c156:	3b04      	subs	r3, #4
 800c158:	607b      	str	r3, [r7, #4]
        // offset servos based off number already used in mixer types
        // airplane and servo_tilt together can't be used
        // calculate offset by taking 4 from core.numServos
        for (i = 0; i < 4; i++)
 800c15a:	2300      	movs	r3, #0
 800c15c:	60bb      	str	r3, [r7, #8]
 800c15e:	e012      	b.n	800c186 <mixTable+0x47a>
        	actPwmWriteServo(i + offset, rcData[AUX1 + i]);
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	b2da      	uxtb	r2, r3
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	b2db      	uxtb	r3, r3
 800c168:	4413      	add	r3, r2
 800c16a:	b2da      	uxtb	r2, r3
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	3304      	adds	r3, #4
 800c170:	491c      	ldr	r1, [pc, #112]	; (800c1e4 <mixTable+0x4d8>)
 800c172:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800c176:	b29b      	uxth	r3, r3
 800c178:	4619      	mov	r1, r3
 800c17a:	4610      	mov	r0, r2
 800c17c:	f7f5 ff02 	bl	8001f84 <actPwmWriteServo>
        for (i = 0; i < 4; i++)
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	3301      	adds	r3, #1
 800c184:	60bb      	str	r3, [r7, #8]
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	2b03      	cmp	r3, #3
 800c18a:	d9e9      	bls.n	800c160 <mixTable+0x454>
    }

    maxMotor = motor[0];
 800c18c:	4b16      	ldr	r3, [pc, #88]	; (800c1e8 <mixTable+0x4dc>)
 800c18e:	881b      	ldrh	r3, [r3, #0]
 800c190:	81fb      	strh	r3, [r7, #14]
    for (i = 1; i < numberMotor; i++)
 800c192:	2301      	movs	r3, #1
 800c194:	60bb      	str	r3, [r7, #8]
 800c196:	e00f      	b.n	800c1b8 <mixTable+0x4ac>
        if (motor[i] > maxMotor)
 800c198:	4a13      	ldr	r2, [pc, #76]	; (800c1e8 <mixTable+0x4dc>)
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c1a0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	da04      	bge.n	800c1b2 <mixTable+0x4a6>
            maxMotor = motor[i];
 800c1a8:	4a0f      	ldr	r2, [pc, #60]	; (800c1e8 <mixTable+0x4dc>)
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1b0:	81fb      	strh	r3, [r7, #14]
    for (i = 1; i < numberMotor; i++)
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	60bb      	str	r3, [r7, #8]
 800c1b8:	4b0c      	ldr	r3, [pc, #48]	; (800c1ec <mixTable+0x4e0>)
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	461a      	mov	r2, r3
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d3e9      	bcc.n	800c198 <mixTable+0x48c>
    for (i = 0; i < numberMotor; i++) {
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	60bb      	str	r3, [r7, #8]
 800c1c8:	e0e8      	b.n	800c39c <mixTable+0x690>
 800c1ca:	bf00      	nop
 800c1cc:	20000e08 	.word	0x20000e08
 800c1d0:	200014f4 	.word	0x200014f4
 800c1d4:	51eb851f 	.word	0x51eb851f
 800c1d8:	20000040 	.word	0x20000040
 800c1dc:	200017ec 	.word	0x200017ec
 800c1e0:	200007e4 	.word	0x200007e4
 800c1e4:	20001784 	.word	0x20001784
 800c1e8:	200015b4 	.word	0x200015b4
 800c1ec:	200015b0 	.word	0x200015b0
        if (maxMotor > mcfg.maxthrottle && !f.FIXED_WING)     // this is a way to still have good gyro corrections if at least one motor reaches its max.
 800c1f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c1f4:	4a6f      	ldr	r2, [pc, #444]	; (800c3b4 <mixTable+0x6a8>)
 800c1f6:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	dd15      	ble.n	800c22a <mixTable+0x51e>
 800c1fe:	4b6e      	ldr	r3, [pc, #440]	; (800c3b8 <mixTable+0x6ac>)
 800c200:	7c1b      	ldrb	r3, [r3, #16]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d111      	bne.n	800c22a <mixTable+0x51e>
            motor[i] -= maxMotor - mcfg.maxthrottle;
 800c206:	4a6d      	ldr	r2, [pc, #436]	; (800c3bc <mixTable+0x6b0>)
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c20e:	b29a      	uxth	r2, r3
 800c210:	4b68      	ldr	r3, [pc, #416]	; (800c3b4 <mixTable+0x6a8>)
 800c212:	f8b3 1142 	ldrh.w	r1, [r3, #322]	; 0x142
 800c216:	89fb      	ldrh	r3, [r7, #14]
 800c218:	1acb      	subs	r3, r1, r3
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	4413      	add	r3, r2
 800c21e:	b29b      	uxth	r3, r3
 800c220:	b219      	sxth	r1, r3
 800c222:	4a66      	ldr	r2, [pc, #408]	; (800c3bc <mixTable+0x6b0>)
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        if (feature(FEATURE_3D)) {
 800c22a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c22e:	f7fa ff37 	bl	80070a0 <feature>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d060      	beq.n	800c2fa <mixTable+0x5ee>
            if ((rcData[THROTTLE]) > mcfg.midrc) {
 800c238:	4b61      	ldr	r3, [pc, #388]	; (800c3c0 <mixTable+0x6b4>)
 800c23a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c23e:	461a      	mov	r2, r3
 800c240:	4b5c      	ldr	r3, [pc, #368]	; (800c3b4 <mixTable+0x6a8>)
 800c242:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c246:	429a      	cmp	r2, r3
 800c248:	dd2b      	ble.n	800c2a2 <mixTable+0x596>
                motor[i] = constrain(motor[i], mcfg.deadband3d_high, mcfg.maxthrottle);
 800c24a:	4a5c      	ldr	r2, [pc, #368]	; (800c3bc <mixTable+0x6b0>)
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c252:	4618      	mov	r0, r3
 800c254:	4b57      	ldr	r3, [pc, #348]	; (800c3b4 <mixTable+0x6a8>)
 800c256:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 800c25a:	4619      	mov	r1, r3
 800c25c:	4b55      	ldr	r3, [pc, #340]	; (800c3b4 <mixTable+0x6a8>)
 800c25e:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800c262:	461a      	mov	r2, r3
 800c264:	f7f7 fdb8 	bl	8003dd8 <constrain>
 800c268:	4603      	mov	r3, r0
 800c26a:	b219      	sxth	r1, r3
 800c26c:	4a53      	ldr	r2, [pc, #332]	; (800c3bc <mixTable+0x6b0>)
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if ((mcfg.mixerConfiguration) == MULTITYPE_TRI) {
 800c274:	4b4f      	ldr	r3, [pc, #316]	; (800c3b4 <mixTable+0x6a8>)
 800c276:	795b      	ldrb	r3, [r3, #5]
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d17d      	bne.n	800c378 <mixTable+0x66c>
                    servo[5] = constrain(servo[5], cfg.servoConf[5].min, cfg.servoConf[5].max);
 800c27c:	4b51      	ldr	r3, [pc, #324]	; (800c3c4 <mixTable+0x6b8>)
 800c27e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c282:	4618      	mov	r0, r3
 800c284:	4b50      	ldr	r3, [pc, #320]	; (800c3c8 <mixTable+0x6bc>)
 800c286:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	; 0xea
 800c28a:	4619      	mov	r1, r3
 800c28c:	4b4e      	ldr	r3, [pc, #312]	; (800c3c8 <mixTable+0x6bc>)
 800c28e:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800c292:	461a      	mov	r2, r3
 800c294:	f7f7 fda0 	bl	8003dd8 <constrain>
 800c298:	4603      	mov	r3, r0
 800c29a:	b21a      	sxth	r2, r3
 800c29c:	4b49      	ldr	r3, [pc, #292]	; (800c3c4 <mixTable+0x6b8>)
 800c29e:	815a      	strh	r2, [r3, #10]
 800c2a0:	e06a      	b.n	800c378 <mixTable+0x66c>
                }
            } else {
                motor[i] = constrain(motor[i], mcfg.mincommand, mcfg.deadband3d_low);
 800c2a2:	4a46      	ldr	r2, [pc, #280]	; (800c3bc <mixTable+0x6b0>)
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	4b41      	ldr	r3, [pc, #260]	; (800c3b4 <mixTable+0x6a8>)
 800c2ae:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	4b3f      	ldr	r3, [pc, #252]	; (800c3b4 <mixTable+0x6a8>)
 800c2b6:	f8b3 3146 	ldrh.w	r3, [r3, #326]	; 0x146
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	f7f7 fd8c 	bl	8003dd8 <constrain>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	b219      	sxth	r1, r3
 800c2c4:	4a3d      	ldr	r2, [pc, #244]	; (800c3bc <mixTable+0x6b0>)
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if ((mcfg.mixerConfiguration) == MULTITYPE_TRI) {
 800c2cc:	4b39      	ldr	r3, [pc, #228]	; (800c3b4 <mixTable+0x6a8>)
 800c2ce:	795b      	ldrb	r3, [r3, #5]
 800c2d0:	2b01      	cmp	r3, #1
 800c2d2:	d151      	bne.n	800c378 <mixTable+0x66c>
                    servo[5] = constrain(servo[5], cfg.servoConf[5].max, cfg.servoConf[5].min);
 800c2d4:	4b3b      	ldr	r3, [pc, #236]	; (800c3c4 <mixTable+0x6b8>)
 800c2d6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	4b3a      	ldr	r3, [pc, #232]	; (800c3c8 <mixTable+0x6bc>)
 800c2de:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	4b38      	ldr	r3, [pc, #224]	; (800c3c8 <mixTable+0x6bc>)
 800c2e6:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	; 0xea
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	f7f7 fd74 	bl	8003dd8 <constrain>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	b21a      	sxth	r2, r3
 800c2f4:	4b33      	ldr	r3, [pc, #204]	; (800c3c4 <mixTable+0x6b8>)
 800c2f6:	815a      	strh	r2, [r3, #10]
 800c2f8:	e03e      	b.n	800c378 <mixTable+0x66c>
                }
            }
        } else {
            motor[i] = constrain(motor[i], mcfg.minthrottle, mcfg.maxthrottle);
 800c2fa:	4a30      	ldr	r2, [pc, #192]	; (800c3bc <mixTable+0x6b0>)
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c302:	4618      	mov	r0, r3
 800c304:	4b2b      	ldr	r3, [pc, #172]	; (800c3b4 <mixTable+0x6a8>)
 800c306:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800c30a:	4619      	mov	r1, r3
 800c30c:	4b29      	ldr	r3, [pc, #164]	; (800c3b4 <mixTable+0x6a8>)
 800c30e:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800c312:	461a      	mov	r2, r3
 800c314:	f7f7 fd60 	bl	8003dd8 <constrain>
 800c318:	4603      	mov	r3, r0
 800c31a:	b219      	sxth	r1, r3
 800c31c:	4a27      	ldr	r2, [pc, #156]	; (800c3bc <mixTable+0x6b0>)
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if ((rcData[THROTTLE]) < mcfg.mincheck) {
 800c324:	4b26      	ldr	r3, [pc, #152]	; (800c3c0 <mixTable+0x6b4>)
 800c326:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c32a:	461a      	mov	r2, r3
 800c32c:	4b21      	ldr	r3, [pc, #132]	; (800c3b4 <mixTable+0x6a8>)
 800c32e:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800c332:	429a      	cmp	r2, r3
 800c334:	da1d      	bge.n	800c372 <mixTable+0x666>
                if (!feature(FEATURE_MOTOR_STOP))
 800c336:	2010      	movs	r0, #16
 800c338:	f7fa feb2 	bl	80070a0 <feature>
 800c33c:	4603      	mov	r3, r0
 800c33e:	f083 0301 	eor.w	r3, r3, #1
 800c342:	b2db      	uxtb	r3, r3
 800c344:	2b00      	cmp	r3, #0
 800c346:	d008      	beq.n	800c35a <mixTable+0x64e>
                    motor[i] = mcfg.minthrottle;
 800c348:	4b1a      	ldr	r3, [pc, #104]	; (800c3b4 <mixTable+0x6a8>)
 800c34a:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800c34e:	b219      	sxth	r1, r3
 800c350:	4a1a      	ldr	r2, [pc, #104]	; (800c3bc <mixTable+0x6b0>)
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800c358:	e00e      	b.n	800c378 <mixTable+0x66c>
                else {
                    motor[i] = mcfg.mincommand;
 800c35a:	4b16      	ldr	r3, [pc, #88]	; (800c3b4 <mixTable+0x6a8>)
 800c35c:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800c360:	b219      	sxth	r1, r3
 800c362:	4a16      	ldr	r2, [pc, #88]	; (800c3bc <mixTable+0x6b0>)
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    f.MOTORS_STOPPED = 1;
 800c36a:	4b13      	ldr	r3, [pc, #76]	; (800c3b8 <mixTable+0x6ac>)
 800c36c:	2201      	movs	r2, #1
 800c36e:	745a      	strb	r2, [r3, #17]
 800c370:	e002      	b.n	800c378 <mixTable+0x66c>
                }
            } else {
                f.MOTORS_STOPPED = 0;
 800c372:	4b11      	ldr	r3, [pc, #68]	; (800c3b8 <mixTable+0x6ac>)
 800c374:	2200      	movs	r2, #0
 800c376:	745a      	strb	r2, [r3, #17]
            }
        }
        if (!f.ARMED) {
 800c378:	4b0f      	ldr	r3, [pc, #60]	; (800c3b8 <mixTable+0x6ac>)
 800c37a:	785b      	ldrb	r3, [r3, #1]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d10a      	bne.n	800c396 <mixTable+0x68a>
            motor[i] = motor_disarmed[i];
 800c380:	4a12      	ldr	r2, [pc, #72]	; (800c3cc <mixTable+0x6c0>)
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800c388:	4a0c      	ldr	r2, [pc, #48]	; (800c3bc <mixTable+0x6b0>)
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            f.MOTORS_STOPPED = 1;
 800c390:	4b09      	ldr	r3, [pc, #36]	; (800c3b8 <mixTable+0x6ac>)
 800c392:	2201      	movs	r2, #1
 800c394:	745a      	strb	r2, [r3, #17]
    for (i = 0; i < numberMotor; i++) {
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	3301      	adds	r3, #1
 800c39a:	60bb      	str	r3, [r7, #8]
 800c39c:	4b0c      	ldr	r3, [pc, #48]	; (800c3d0 <mixTable+0x6c4>)
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	f4ff af23 	bcc.w	800c1f0 <mixTable+0x4e4>
        }
    }
}
 800c3aa:	bf00      	nop
 800c3ac:	bf00      	nop
 800c3ae:	3714      	adds	r7, #20
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd90      	pop	{r4, r7, pc}
 800c3b4:	2000089c 	.word	0x2000089c
 800c3b8:	2000174c 	.word	0x2000174c
 800c3bc:	200015b4 	.word	0x200015b4
 800c3c0:	20001784 	.word	0x20001784
 800c3c4:	20000040 	.word	0x20000040
 800c3c8:	20000e08 	.word	0x20000e08
 800c3cc:	200015cc 	.word	0x200015cc
 800c3d0:	200015b0 	.word	0x200015b0

0800c3d4 <blinkLED>:
// Time of automatic disarm when "Don't spin the motors when armed" is enabled.
static uint32_t disarmTime = 0;


void blinkLED(uint8_t num, uint8_t wait, uint8_t repeat)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	4603      	mov	r3, r0
 800c3dc:	71fb      	strb	r3, [r7, #7]
 800c3de:	460b      	mov	r3, r1
 800c3e0:	71bb      	strb	r3, [r7, #6]
 800c3e2:	4613      	mov	r3, r2
 800c3e4:	717b      	strb	r3, [r7, #5]
    uint8_t i, r;

    for (r = 0; r < repeat; r++) {
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	73bb      	strb	r3, [r7, #14]
 800c3ea:	e020      	b.n	800c42e <blinkLED+0x5a>
        for (i = 0; i < num; i++) {
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	73fb      	strb	r3, [r7, #15]
 800c3f0:	e013      	b.n	800c41a <blinkLED+0x46>
            actLed0Toggle();            // switch LEDPIN state
 800c3f2:	f7f5 fe59 	bl	80020a8 <actLed0Toggle>
            actBuzzerAction(PIF_ID_BUZZER, ON);
 800c3f6:	2101      	movs	r1, #1
 800c3f8:	f44f 7098 	mov.w	r0, #304	; 0x130
 800c3fc:	f7f5 fe96 	bl	800212c <actBuzzerAction>
            pif_Delay1ms(wait);
 800c400:	79bb      	ldrb	r3, [r7, #6]
 800c402:	b29b      	uxth	r3, r3
 800c404:	4618      	mov	r0, r3
 800c406:	f005 fa4d 	bl	80118a4 <pif_Delay1ms>
            actBuzzerAction(PIF_ID_BUZZER, OFF);
 800c40a:	2100      	movs	r1, #0
 800c40c:	f44f 7098 	mov.w	r0, #304	; 0x130
 800c410:	f7f5 fe8c 	bl	800212c <actBuzzerAction>
        for (i = 0; i < num; i++) {
 800c414:	7bfb      	ldrb	r3, [r7, #15]
 800c416:	3301      	adds	r3, #1
 800c418:	73fb      	strb	r3, [r7, #15]
 800c41a:	7bfa      	ldrb	r2, [r7, #15]
 800c41c:	79fb      	ldrb	r3, [r7, #7]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d3e7      	bcc.n	800c3f2 <blinkLED+0x1e>
        }
        pif_Delay1ms(60);
 800c422:	203c      	movs	r0, #60	; 0x3c
 800c424:	f005 fa3e 	bl	80118a4 <pif_Delay1ms>
    for (r = 0; r < repeat; r++) {
 800c428:	7bbb      	ldrb	r3, [r7, #14]
 800c42a:	3301      	adds	r3, #1
 800c42c:	73bb      	strb	r3, [r7, #14]
 800c42e:	7bba      	ldrb	r2, [r7, #14]
 800c430:	797b      	ldrb	r3, [r7, #5]
 800c432:	429a      	cmp	r2, r3
 800c434:	d3da      	bcc.n	800c3ec <blinkLED+0x18>
    }
}
 800c436:	bf00      	nop
 800c438:	bf00      	nop
 800c43a:	3710      	adds	r7, #16
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <annexCode>:

void annexCode(void)
{
 800c440:	b590      	push	{r4, r7, lr}
 800c442:	b08b      	sub	sp, #44	; 0x2c
 800c444:	af00      	add	r7, sp, #0
    int32_t tmp, tmp2;
    int32_t axis, prop1, prop2;
    static uint16_t MaxBrkpoint = 300; // Max angle of APA

    if (!f.FIXED_WING) { // Baseflight original dynamic PID adjustemnt
 800c446:	4b98      	ldr	r3, [pc, #608]	; (800c6a8 <annexCode+0x268>)
 800c448:	7c1b      	ldrb	r3, [r3, #16]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d12e      	bne.n	800c4ac <annexCode+0x6c>
        // PITCH & ROLL only dynamic PID adjustemnt,  depending on throttle value
        if (rcData[THROTTLE] < cfg.tpa_breakpoint) {
 800c44e:	4b97      	ldr	r3, [pc, #604]	; (800c6ac <annexCode+0x26c>)
 800c450:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c454:	461a      	mov	r2, r3
 800c456:	4b96      	ldr	r3, [pc, #600]	; (800c6b0 <annexCode+0x270>)
 800c458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c45a:	429a      	cmp	r2, r3
 800c45c:	da02      	bge.n	800c464 <annexCode+0x24>
            prop2 = 100;
 800c45e:	2364      	movs	r3, #100	; 0x64
 800c460:	61bb      	str	r3, [r7, #24]
 800c462:	e07b      	b.n	800c55c <annexCode+0x11c>
        } else {
            if (rcData[THROTTLE] < 2000) {
 800c464:	4b91      	ldr	r3, [pc, #580]	; (800c6ac <annexCode+0x26c>)
 800c466:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c46a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c46e:	da16      	bge.n	800c49e <annexCode+0x5e>
                prop2 = 100 - (uint16_t)cfg.dynThrPID * (rcData[THROTTLE] - cfg.tpa_breakpoint) / (2000 - cfg.tpa_breakpoint);
 800c470:	4b8f      	ldr	r3, [pc, #572]	; (800c6b0 <annexCode+0x270>)
 800c472:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c476:	461a      	mov	r2, r3
 800c478:	4b8c      	ldr	r3, [pc, #560]	; (800c6ac <annexCode+0x26c>)
 800c47a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c47e:	4619      	mov	r1, r3
 800c480:	4b8b      	ldr	r3, [pc, #556]	; (800c6b0 <annexCode+0x270>)
 800c482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c484:	1acb      	subs	r3, r1, r3
 800c486:	fb03 f202 	mul.w	r2, r3, r2
 800c48a:	4b89      	ldr	r3, [pc, #548]	; (800c6b0 <annexCode+0x270>)
 800c48c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c48e:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800c492:	fb92 f3f3 	sdiv	r3, r2, r3
 800c496:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800c49a:	61bb      	str	r3, [r7, #24]
 800c49c:	e05e      	b.n	800c55c <annexCode+0x11c>
            } else {
                prop2 = 100 - cfg.dynThrPID;
 800c49e:	4b84      	ldr	r3, [pc, #528]	; (800c6b0 <annexCode+0x270>)
 800c4a0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c4a4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800c4a8:	61bb      	str	r3, [r7, #24]
 800c4aa:	e057      	b.n	800c55c <annexCode+0x11c>
            }
        }
    } else {
        // Throttle & Angle combined PID Attenuation
        // Will dampen the PID's in High speeds dive on Fixed Wing Only
        prop2 = 128; // prop2 was 100, is 128 now
 800c4ac:	2380      	movs	r3, #128	; 0x80
 800c4ae:	61bb      	str	r3, [r7, #24]
        if (rcData[THROTTLE] < cfg.tpa_breakpoint) {
 800c4b0:	4b7e      	ldr	r3, [pc, #504]	; (800c6ac <annexCode+0x26c>)
 800c4b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	4b7d      	ldr	r3, [pc, #500]	; (800c6b0 <annexCode+0x270>)
 800c4ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	da02      	bge.n	800c4c6 <annexCode+0x86>
            prop2 = 128; // Higher prop2 for Fixed wing Same as used in MWii
 800c4c0:	2380      	movs	r3, #128	; 0x80
 800c4c2:	61bb      	str	r3, [r7, #24]
 800c4c4:	e028      	b.n	800c518 <annexCode+0xd8>
        } else {
            if (rcCommand[THROTTLE] > cfg.dynThrPID) { // Using rcCommand() to include Tpa even in Gps modes.
 800c4c6:	4b7b      	ldr	r3, [pc, #492]	; (800c6b4 <annexCode+0x274>)
 800c4c8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	4b78      	ldr	r3, [pc, #480]	; (800c6b0 <annexCode+0x270>)
 800c4d0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	dd1f      	ble.n	800c518 <annexCode+0xd8>
                if (rcCommand[THROTTLE] < 2000) {
 800c4d8:	4b76      	ldr	r3, [pc, #472]	; (800c6b4 <annexCode+0x274>)
 800c4da:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c4de:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c4e2:	da12      	bge.n	800c50a <annexCode+0xca>
                    prop2 -=  ((uint16_t)cfg.dynThrPID * (rcCommand[THROTTLE] - cfg.dynThrPID) >> 9);
 800c4e4:	4b72      	ldr	r3, [pc, #456]	; (800c6b0 <annexCode+0x270>)
 800c4e6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	4b71      	ldr	r3, [pc, #452]	; (800c6b4 <annexCode+0x274>)
 800c4ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	4b6e      	ldr	r3, [pc, #440]	; (800c6b0 <annexCode+0x270>)
 800c4f6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c4fa:	1acb      	subs	r3, r1, r3
 800c4fc:	fb02 f303 	mul.w	r3, r2, r3
 800c500:	125b      	asrs	r3, r3, #9
 800c502:	69ba      	ldr	r2, [r7, #24]
 800c504:	1ad3      	subs	r3, r2, r3
 800c506:	61bb      	str	r3, [r7, #24]
 800c508:	e006      	b.n	800c518 <annexCode+0xd8>
                } else {
                    prop2 -=  cfg.dynThrPID;
 800c50a:	4b69      	ldr	r3, [pc, #420]	; (800c6b0 <annexCode+0x270>)
 800c50c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c510:	461a      	mov	r2, r3
 800c512:	69bb      	ldr	r3, [r7, #24]
 800c514:	1a9b      	subs	r3, r3, r2
 800c516:	61bb      	str	r3, [r7, #24]
                }
            }
        }
        // APA dynamic PID adjustemnt, depending on Angle of attack
        if (angle[1] > 20)
 800c518:	4b67      	ldr	r3, [pc, #412]	; (800c6b8 <annexCode+0x278>)
 800c51a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c51e:	2b14      	cmp	r3, #20
 800c520:	dd12      	ble.n	800c548 <annexCode+0x108>
            prop2 -= ((uint16_t)cfg.dynThrPID * (min(angle[1], MaxBrkpoint)) >> 8);
 800c522:	4b63      	ldr	r3, [pc, #396]	; (800c6b0 <annexCode+0x270>)
 800c524:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c528:	461a      	mov	r2, r3
 800c52a:	4b64      	ldr	r3, [pc, #400]	; (800c6bc <annexCode+0x27c>)
 800c52c:	881b      	ldrh	r3, [r3, #0]
 800c52e:	4619      	mov	r1, r3
 800c530:	4b61      	ldr	r3, [pc, #388]	; (800c6b8 <annexCode+0x278>)
 800c532:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c536:	428b      	cmp	r3, r1
 800c538:	bfa8      	it	ge
 800c53a:	460b      	movge	r3, r1
 800c53c:	fb02 f303 	mul.w	r3, r2, r3
 800c540:	121b      	asrs	r3, r3, #8
 800c542:	69ba      	ldr	r2, [r7, #24]
 800c544:	1ad3      	subs	r3, r2, r3
 800c546:	61bb      	str	r3, [r7, #24]
        prop2 = max((128 - cfg.dynThrPID), prop2);
 800c548:	4b59      	ldr	r3, [pc, #356]	; (800c6b0 <annexCode+0x270>)
 800c54a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c54e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800c552:	69ba      	ldr	r2, [r7, #24]
 800c554:	4293      	cmp	r3, r2
 800c556:	bfb8      	it	lt
 800c558:	4613      	movlt	r3, r2
 800c55a:	61bb      	str	r3, [r7, #24]
    }


    for (axis = 0; axis < 3; axis++) {
 800c55c:	2300      	movs	r3, #0
 800c55e:	623b      	str	r3, [r7, #32]
 800c560:	e131      	b.n	800c7c6 <annexCode+0x386>
        tmp = min(abs(rcData[axis] - mcfg.midrc), 500);
 800c562:	4a52      	ldr	r2, [pc, #328]	; (800c6ac <annexCode+0x26c>)
 800c564:	6a3b      	ldr	r3, [r7, #32]
 800c566:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c56a:	461a      	mov	r2, r3
 800c56c:	4b54      	ldr	r3, [pc, #336]	; (800c6c0 <annexCode+0x280>)
 800c56e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c572:	1ad3      	subs	r3, r2, r3
 800c574:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800c578:	dd18      	ble.n	800c5ac <annexCode+0x16c>
 800c57a:	4a4c      	ldr	r2, [pc, #304]	; (800c6ac <annexCode+0x26c>)
 800c57c:	6a3b      	ldr	r3, [r7, #32]
 800c57e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c582:	461a      	mov	r2, r3
 800c584:	4b4e      	ldr	r3, [pc, #312]	; (800c6c0 <annexCode+0x280>)
 800c586:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c58a:	1ad3      	subs	r3, r2, r3
 800c58c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c590:	da0c      	bge.n	800c5ac <annexCode+0x16c>
 800c592:	4a46      	ldr	r2, [pc, #280]	; (800c6ac <annexCode+0x26c>)
 800c594:	6a3b      	ldr	r3, [r7, #32]
 800c596:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c59a:	461a      	mov	r2, r3
 800c59c:	4b48      	ldr	r3, [pc, #288]	; (800c6c0 <annexCode+0x280>)
 800c59e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c5a2:	1ad3      	subs	r3, r2, r3
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	bfb8      	it	lt
 800c5a8:	425b      	neglt	r3, r3
 800c5aa:	e001      	b.n	800c5b0 <annexCode+0x170>
 800c5ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c5b0:	627b      	str	r3, [r7, #36]	; 0x24
        if (axis != 2) {        // ROLL & PITCH
 800c5b2:	6a3b      	ldr	r3, [r7, #32]
 800c5b4:	2b02      	cmp	r3, #2
 800c5b6:	d063      	beq.n	800c680 <annexCode+0x240>
            if (cfg.deadband) {
 800c5b8:	4b3d      	ldr	r3, [pc, #244]	; (800c6b0 <annexCode+0x270>)
 800c5ba:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d010      	beq.n	800c5e4 <annexCode+0x1a4>
                if (tmp > cfg.deadband) {
 800c5c2:	4b3b      	ldr	r3, [pc, #236]	; (800c6b0 <annexCode+0x270>)
 800c5c4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	dd07      	ble.n	800c5e0 <annexCode+0x1a0>
                    tmp -= cfg.deadband;
 800c5d0:	4b37      	ldr	r3, [pc, #220]	; (800c6b0 <annexCode+0x270>)
 800c5d2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5da:	1a9b      	subs	r3, r3, r2
 800c5dc:	627b      	str	r3, [r7, #36]	; 0x24
 800c5de:	e001      	b.n	800c5e4 <annexCode+0x1a4>
                } else {
                    tmp = 0;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }

            tmp2 = tmp / 100;
 800c5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e6:	4a37      	ldr	r2, [pc, #220]	; (800c6c4 <annexCode+0x284>)
 800c5e8:	fb82 1203 	smull	r1, r2, r2, r3
 800c5ec:	1152      	asrs	r2, r2, #5
 800c5ee:	17db      	asrs	r3, r3, #31
 800c5f0:	1ad3      	subs	r3, r2, r3
 800c5f2:	617b      	str	r3, [r7, #20]
            rcCommand[axis] = lookupPitchRollRC[tmp2] + (tmp - tmp2 * 100) * (lookupPitchRollRC[tmp2 + 1] - lookupPitchRollRC[tmp2]) / 100;
 800c5f4:	4a34      	ldr	r2, [pc, #208]	; (800c6c8 <annexCode+0x288>)
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c5fc:	b29a      	uxth	r2, r3
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800c604:	fb03 f101 	mul.w	r1, r3, r1
 800c608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60a:	440b      	add	r3, r1
 800c60c:	6979      	ldr	r1, [r7, #20]
 800c60e:	3101      	adds	r1, #1
 800c610:	482d      	ldr	r0, [pc, #180]	; (800c6c8 <annexCode+0x288>)
 800c612:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c616:	460c      	mov	r4, r1
 800c618:	482b      	ldr	r0, [pc, #172]	; (800c6c8 <annexCode+0x288>)
 800c61a:	6979      	ldr	r1, [r7, #20]
 800c61c:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c620:	1a61      	subs	r1, r4, r1
 800c622:	fb01 f303 	mul.w	r3, r1, r3
 800c626:	4927      	ldr	r1, [pc, #156]	; (800c6c4 <annexCode+0x284>)
 800c628:	fb81 0103 	smull	r0, r1, r1, r3
 800c62c:	1149      	asrs	r1, r1, #5
 800c62e:	17db      	asrs	r3, r3, #31
 800c630:	1acb      	subs	r3, r1, r3
 800c632:	b29b      	uxth	r3, r3
 800c634:	4413      	add	r3, r2
 800c636:	b29b      	uxth	r3, r3
 800c638:	b219      	sxth	r1, r3
 800c63a:	4a1e      	ldr	r2, [pc, #120]	; (800c6b4 <annexCode+0x274>)
 800c63c:	6a3b      	ldr	r3, [r7, #32]
 800c63e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            prop1 = 100 - (uint16_t)cfg.rollPitchRate[axis] * tmp / 500;
 800c642:	4a1b      	ldr	r2, [pc, #108]	; (800c6b0 <annexCode+0x270>)
 800c644:	6a3b      	ldr	r3, [r7, #32]
 800c646:	4413      	add	r3, r2
 800c648:	3323      	adds	r3, #35	; 0x23
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	461a      	mov	r2, r3
 800c64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c650:	fb02 f303 	mul.w	r3, r2, r3
 800c654:	4a1d      	ldr	r2, [pc, #116]	; (800c6cc <annexCode+0x28c>)
 800c656:	fb82 1203 	smull	r1, r2, r2, r3
 800c65a:	1152      	asrs	r2, r2, #5
 800c65c:	17db      	asrs	r3, r3, #31
 800c65e:	1a9b      	subs	r3, r3, r2
 800c660:	3364      	adds	r3, #100	; 0x64
 800c662:	61fb      	str	r3, [r7, #28]
            prop1 = (uint16_t)prop1 * prop2 / 100;
 800c664:	69fb      	ldr	r3, [r7, #28]
 800c666:	b29b      	uxth	r3, r3
 800c668:	461a      	mov	r2, r3
 800c66a:	69bb      	ldr	r3, [r7, #24]
 800c66c:	fb02 f303 	mul.w	r3, r2, r3
 800c670:	4a14      	ldr	r2, [pc, #80]	; (800c6c4 <annexCode+0x284>)
 800c672:	fb82 1203 	smull	r1, r2, r2, r3
 800c676:	1152      	asrs	r2, r2, #5
 800c678:	17db      	asrs	r3, r3, #31
 800c67a:	1ad3      	subs	r3, r2, r3
 800c67c:	61fb      	str	r3, [r7, #28]
 800c67e:	e04a      	b.n	800c716 <annexCode+0x2d6>
        } else {                // YAW
            if (cfg.yawdeadband) {
 800c680:	4b0b      	ldr	r3, [pc, #44]	; (800c6b0 <annexCode+0x270>)
 800c682:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c686:	2b00      	cmp	r3, #0
 800c688:	d024      	beq.n	800c6d4 <annexCode+0x294>
                if (tmp > cfg.yawdeadband) {
 800c68a:	4b09      	ldr	r3, [pc, #36]	; (800c6b0 <annexCode+0x270>)
 800c68c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c690:	461a      	mov	r2, r3
 800c692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c694:	4293      	cmp	r3, r2
 800c696:	dd1b      	ble.n	800c6d0 <annexCode+0x290>
                    tmp -= cfg.yawdeadband;
 800c698:	4b05      	ldr	r3, [pc, #20]	; (800c6b0 <annexCode+0x270>)
 800c69a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c69e:	461a      	mov	r2, r3
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a2:	1a9b      	subs	r3, r3, r2
 800c6a4:	627b      	str	r3, [r7, #36]	; 0x24
 800c6a6:	e015      	b.n	800c6d4 <annexCode+0x294>
 800c6a8:	2000174c 	.word	0x2000174c
 800c6ac:	20001784 	.word	0x20001784
 800c6b0:	20000e08 	.word	0x20000e08
 800c6b4:	200017a8 	.word	0x200017a8
 800c6b8:	200014f4 	.word	0x200014f4
 800c6bc:	20000056 	.word	0x20000056
 800c6c0:	2000089c 	.word	0x2000089c
 800c6c4:	51eb851f 	.word	0x51eb851f
 800c6c8:	200017b0 	.word	0x200017b0
 800c6cc:	10624dd3 	.word	0x10624dd3
                } else {
                    tmp = 0;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
            rcCommand[axis] = tmp * -mcfg.yaw_control_direction;
 800c6d4:	4ba0      	ldr	r3, [pc, #640]	; (800c958 <annexCode+0x518>)
 800c6d6:	f993 315c 	ldrsb.w	r3, [r3, #348]	; 0x15c
 800c6da:	425b      	negs	r3, r3
 800c6dc:	b29a      	uxth	r2, r3
 800c6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	fb12 f303 	smulbb	r3, r2, r3
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	b219      	sxth	r1, r3
 800c6ea:	4a9c      	ldr	r2, [pc, #624]	; (800c95c <annexCode+0x51c>)
 800c6ec:	6a3b      	ldr	r3, [r7, #32]
 800c6ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            prop1 = 100 - (uint16_t)cfg.yawRate * abs(tmp) / 500;
 800c6f2:	4b9b      	ldr	r3, [pc, #620]	; (800c960 <annexCode+0x520>)
 800c6f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	bfb8      	it	lt
 800c700:	425b      	neglt	r3, r3
 800c702:	fb02 f303 	mul.w	r3, r2, r3
 800c706:	4a97      	ldr	r2, [pc, #604]	; (800c964 <annexCode+0x524>)
 800c708:	fb82 1203 	smull	r1, r2, r2, r3
 800c70c:	1152      	asrs	r2, r2, #5
 800c70e:	17db      	asrs	r3, r3, #31
 800c710:	1a9b      	subs	r3, r3, r2
 800c712:	3364      	adds	r3, #100	; 0x64
 800c714:	61fb      	str	r3, [r7, #28]
        }
        dynP8[axis] = (uint16_t)cfg.P8[axis] * prop1 / 100;
 800c716:	4a92      	ldr	r2, [pc, #584]	; (800c960 <annexCode+0x520>)
 800c718:	6a3b      	ldr	r3, [r7, #32]
 800c71a:	4413      	add	r3, r2
 800c71c:	3301      	adds	r3, #1
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	461a      	mov	r2, r3
 800c722:	69fb      	ldr	r3, [r7, #28]
 800c724:	fb02 f303 	mul.w	r3, r2, r3
 800c728:	4a8f      	ldr	r2, [pc, #572]	; (800c968 <annexCode+0x528>)
 800c72a:	fb82 1203 	smull	r1, r2, r2, r3
 800c72e:	1152      	asrs	r2, r2, #5
 800c730:	17db      	asrs	r3, r3, #31
 800c732:	1ad3      	subs	r3, r2, r3
 800c734:	b2d9      	uxtb	r1, r3
 800c736:	4a8d      	ldr	r2, [pc, #564]	; (800c96c <annexCode+0x52c>)
 800c738:	6a3b      	ldr	r3, [r7, #32]
 800c73a:	4413      	add	r3, r2
 800c73c:	460a      	mov	r2, r1
 800c73e:	701a      	strb	r2, [r3, #0]
        dynI8[axis] = (uint16_t)cfg.I8[axis] * prop1 / 100;
 800c740:	4a87      	ldr	r2, [pc, #540]	; (800c960 <annexCode+0x520>)
 800c742:	6a3b      	ldr	r3, [r7, #32]
 800c744:	4413      	add	r3, r2
 800c746:	330b      	adds	r3, #11
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	461a      	mov	r2, r3
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	fb02 f303 	mul.w	r3, r2, r3
 800c752:	4a85      	ldr	r2, [pc, #532]	; (800c968 <annexCode+0x528>)
 800c754:	fb82 1203 	smull	r1, r2, r2, r3
 800c758:	1152      	asrs	r2, r2, #5
 800c75a:	17db      	asrs	r3, r3, #31
 800c75c:	1ad3      	subs	r3, r2, r3
 800c75e:	b2d9      	uxtb	r1, r3
 800c760:	4a83      	ldr	r2, [pc, #524]	; (800c970 <annexCode+0x530>)
 800c762:	6a3b      	ldr	r3, [r7, #32]
 800c764:	4413      	add	r3, r2
 800c766:	460a      	mov	r2, r1
 800c768:	701a      	strb	r2, [r3, #0]
        dynD8[axis] = (uint16_t)cfg.D8[axis] * prop1 / 100;
 800c76a:	4a7d      	ldr	r2, [pc, #500]	; (800c960 <annexCode+0x520>)
 800c76c:	6a3b      	ldr	r3, [r7, #32]
 800c76e:	4413      	add	r3, r2
 800c770:	3315      	adds	r3, #21
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	461a      	mov	r2, r3
 800c776:	69fb      	ldr	r3, [r7, #28]
 800c778:	fb02 f303 	mul.w	r3, r2, r3
 800c77c:	4a7a      	ldr	r2, [pc, #488]	; (800c968 <annexCode+0x528>)
 800c77e:	fb82 1203 	smull	r1, r2, r2, r3
 800c782:	1152      	asrs	r2, r2, #5
 800c784:	17db      	asrs	r3, r3, #31
 800c786:	1ad3      	subs	r3, r2, r3
 800c788:	b2d9      	uxtb	r1, r3
 800c78a:	4a7a      	ldr	r2, [pc, #488]	; (800c974 <annexCode+0x534>)
 800c78c:	6a3b      	ldr	r3, [r7, #32]
 800c78e:	4413      	add	r3, r2
 800c790:	460a      	mov	r2, r1
 800c792:	701a      	strb	r2, [r3, #0]
        if (rcData[axis] < mcfg.midrc)
 800c794:	4a78      	ldr	r2, [pc, #480]	; (800c978 <annexCode+0x538>)
 800c796:	6a3b      	ldr	r3, [r7, #32]
 800c798:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c79c:	461a      	mov	r2, r3
 800c79e:	4b6e      	ldr	r3, [pc, #440]	; (800c958 <annexCode+0x518>)
 800c7a0:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	da0b      	bge.n	800c7c0 <annexCode+0x380>
            rcCommand[axis] = -rcCommand[axis];
 800c7a8:	4a6c      	ldr	r2, [pc, #432]	; (800c95c <annexCode+0x51c>)
 800c7aa:	6a3b      	ldr	r3, [r7, #32]
 800c7ac:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	425b      	negs	r3, r3
 800c7b4:	b29b      	uxth	r3, r3
 800c7b6:	b219      	sxth	r1, r3
 800c7b8:	4a68      	ldr	r2, [pc, #416]	; (800c95c <annexCode+0x51c>)
 800c7ba:	6a3b      	ldr	r3, [r7, #32]
 800c7bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800c7c0:	6a3b      	ldr	r3, [r7, #32]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	623b      	str	r3, [r7, #32]
 800c7c6:	6a3b      	ldr	r3, [r7, #32]
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	f77f aeca 	ble.w	800c562 <annexCode+0x122>
    }

    tmp = constrain(rcData[THROTTLE], mcfg.mincheck, 2000);
 800c7ce:	4b6a      	ldr	r3, [pc, #424]	; (800c978 <annexCode+0x538>)
 800c7d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	4b60      	ldr	r3, [pc, #384]	; (800c958 <annexCode+0x518>)
 800c7d8:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800c7dc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	f7f7 faf9 	bl	8003dd8 <constrain>
 800c7e6:	6278      	str	r0, [r7, #36]	; 0x24
    tmp = (uint32_t)(tmp - mcfg.mincheck) * 1000 / (2000 - mcfg.mincheck);       // [MINCHECK;2000] -> [0;1000]
 800c7e8:	4b5b      	ldr	r3, [pc, #364]	; (800c958 <annexCode+0x518>)
 800c7ea:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f2:	1a9b      	subs	r3, r3, r2
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c7fa:	fb02 f303 	mul.w	r3, r2, r3
 800c7fe:	4a56      	ldr	r2, [pc, #344]	; (800c958 <annexCode+0x518>)
 800c800:	f8b2 219a 	ldrh.w	r2, [r2, #410]	; 0x19a
 800c804:	f5c2 62fa 	rsb	r2, r2, #2000	; 0x7d0
 800c808:	fbb3 f3f2 	udiv	r3, r3, r2
 800c80c:	627b      	str	r3, [r7, #36]	; 0x24
    tmp2 = tmp / 100;
 800c80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c810:	4a55      	ldr	r2, [pc, #340]	; (800c968 <annexCode+0x528>)
 800c812:	fb82 1203 	smull	r1, r2, r2, r3
 800c816:	1152      	asrs	r2, r2, #5
 800c818:	17db      	asrs	r3, r3, #31
 800c81a:	1ad3      	subs	r3, r2, r3
 800c81c:	617b      	str	r3, [r7, #20]
    rcCommand[THROTTLE] = lookupThrottleRC[tmp2] + (tmp - tmp2 * 100) * (lookupThrottleRC[tmp2 + 1] - lookupThrottleRC[tmp2]) / 100;    // [0;1000] -> expo -> [MINTHROTTLE;MAXTHROTTLE]
 800c81e:	4a57      	ldr	r2, [pc, #348]	; (800c97c <annexCode+0x53c>)
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c826:	b29a      	uxth	r2, r3
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800c82e:	fb03 f101 	mul.w	r1, r3, r1
 800c832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c834:	440b      	add	r3, r1
 800c836:	6979      	ldr	r1, [r7, #20]
 800c838:	3101      	adds	r1, #1
 800c83a:	4850      	ldr	r0, [pc, #320]	; (800c97c <annexCode+0x53c>)
 800c83c:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c840:	460c      	mov	r4, r1
 800c842:	484e      	ldr	r0, [pc, #312]	; (800c97c <annexCode+0x53c>)
 800c844:	6979      	ldr	r1, [r7, #20]
 800c846:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c84a:	1a61      	subs	r1, r4, r1
 800c84c:	fb01 f303 	mul.w	r3, r1, r3
 800c850:	4945      	ldr	r1, [pc, #276]	; (800c968 <annexCode+0x528>)
 800c852:	fb81 0103 	smull	r0, r1, r1, r3
 800c856:	1149      	asrs	r1, r1, #5
 800c858:	17db      	asrs	r3, r3, #31
 800c85a:	1acb      	subs	r3, r1, r3
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	4413      	add	r3, r2
 800c860:	b29b      	uxth	r3, r3
 800c862:	b21a      	sxth	r2, r3
 800c864:	4b3d      	ldr	r3, [pc, #244]	; (800c95c <annexCode+0x51c>)
 800c866:	80da      	strh	r2, [r3, #6]

    if (f.HEADFREE_MODE) {
 800c868:	4b45      	ldr	r3, [pc, #276]	; (800c980 <annexCode+0x540>)
 800c86a:	7a5b      	ldrb	r3, [r3, #9]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d06b      	beq.n	800c948 <annexCode+0x508>
        float radDiff = (heading - headFreeModeHold) * M_PI / 180.0f;
 800c870:	4b44      	ldr	r3, [pc, #272]	; (800c984 <annexCode+0x544>)
 800c872:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c876:	461a      	mov	r2, r3
 800c878:	4b43      	ldr	r3, [pc, #268]	; (800c988 <annexCode+0x548>)
 800c87a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c87e:	1ad3      	subs	r3, r2, r3
 800c880:	4618      	mov	r0, r3
 800c882:	f7f3 fe03 	bl	800048c <__aeabi_i2d>
 800c886:	a332      	add	r3, pc, #200	; (adr r3, 800c950 <annexCode+0x510>)
 800c888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88c:	f7f3 fe68 	bl	8000560 <__aeabi_dmul>
 800c890:	4602      	mov	r2, r0
 800c892:	460b      	mov	r3, r1
 800c894:	4610      	mov	r0, r2
 800c896:	4619      	mov	r1, r3
 800c898:	f04f 0200 	mov.w	r2, #0
 800c89c:	4b3b      	ldr	r3, [pc, #236]	; (800c98c <annexCode+0x54c>)
 800c89e:	f7f3 ff89 	bl	80007b4 <__aeabi_ddiv>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	4610      	mov	r0, r2
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	f7f4 f93b 	bl	8000b24 <__aeabi_d2f>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	613b      	str	r3, [r7, #16]
        float cosDiff = cosf(radDiff);
 800c8b2:	ed97 0a04 	vldr	s0, [r7, #16]
 800c8b6:	f017 fddf 	bl	8024478 <cosf>
 800c8ba:	ed87 0a03 	vstr	s0, [r7, #12]
        float sinDiff = sinf(radDiff);
 800c8be:	ed97 0a04 	vldr	s0, [r7, #16]
 800c8c2:	f017 fe5d 	bl	8024580 <sinf>
 800c8c6:	ed87 0a02 	vstr	s0, [r7, #8]
        int16_t rcCommand_PITCH = rcCommand[PITCH] * cosDiff + rcCommand[ROLL] * sinDiff;
 800c8ca:	4b24      	ldr	r3, [pc, #144]	; (800c95c <annexCode+0x51c>)
 800c8cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c8d0:	ee07 3a90 	vmov	s15, r3
 800c8d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c8d8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c8dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8e0:	4b1e      	ldr	r3, [pc, #120]	; (800c95c <annexCode+0x51c>)
 800c8e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c8e6:	ee07 3a90 	vmov	s15, r3
 800c8ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c8ee:	edd7 7a02 	vldr	s15, [r7, #8]
 800c8f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8fe:	ee17 3a90 	vmov	r3, s15
 800c902:	80fb      	strh	r3, [r7, #6]
        rcCommand[ROLL] = rcCommand[ROLL] * cosDiff - rcCommand[PITCH] * sinDiff;
 800c904:	4b15      	ldr	r3, [pc, #84]	; (800c95c <annexCode+0x51c>)
 800c906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c90a:	ee07 3a90 	vmov	s15, r3
 800c90e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c912:	edd7 7a03 	vldr	s15, [r7, #12]
 800c916:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c91a:	4b10      	ldr	r3, [pc, #64]	; (800c95c <annexCode+0x51c>)
 800c91c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c920:	ee07 3a90 	vmov	s15, r3
 800c924:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c928:	edd7 7a02 	vldr	s15, [r7, #8]
 800c92c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c930:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c934:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c938:	ee17 3a90 	vmov	r3, s15
 800c93c:	b21a      	sxth	r2, r3
 800c93e:	4b07      	ldr	r3, [pc, #28]	; (800c95c <annexCode+0x51c>)
 800c940:	801a      	strh	r2, [r3, #0]
        rcCommand[PITCH] = rcCommand_PITCH;
 800c942:	4a06      	ldr	r2, [pc, #24]	; (800c95c <annexCode+0x51c>)
 800c944:	88fb      	ldrh	r3, [r7, #6]
 800c946:	8053      	strh	r3, [r2, #2]
    }
}
 800c948:	bf00      	nop
 800c94a:	372c      	adds	r7, #44	; 0x2c
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd90      	pop	{r4, r7, pc}
 800c950:	54442d18 	.word	0x54442d18
 800c954:	400921fb 	.word	0x400921fb
 800c958:	2000089c 	.word	0x2000089c
 800c95c:	200017a8 	.word	0x200017a8
 800c960:	20000e08 	.word	0x20000e08
 800c964:	10624dd3 	.word	0x10624dd3
 800c968:	51eb851f 	.word	0x51eb851f
 800c96c:	200017e0 	.word	0x200017e0
 800c970:	200017e4 	.word	0x200017e4
 800c974:	200017e8 	.word	0x200017e8
 800c978:	20001784 	.word	0x20001784
 800c97c:	200017c0 	.word	0x200017c0
 800c980:	2000174c 	.word	0x2000174c
 800c984:	20001a7e 	.word	0x20001a7e
 800c988:	2000176e 	.word	0x2000176e
 800c98c:	40668000 	.word	0x40668000

0800c990 <taskLedState>:

uint16_t taskLedState(PifTask *p_task)
{
 800c990:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c994:	b082      	sub	sp, #8
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
    static int64_t mAhdrawnRaw = 0;
    static int32_t vbatCycleTime = 0;

    (void)p_task;

    if (feature(FEATURE_VBAT)) {
 800c99a:	2002      	movs	r0, #2
 800c99c:	f7fa fb80 	bl	80070a0 <feature>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f000 80bb 	beq.w	800cb1e <taskLedState+0x18e>
        vbatCycleTime += cycleTime;
 800c9a8:	4b91      	ldr	r3, [pc, #580]	; (800cbf0 <taskLedState+0x260>)
 800c9aa:	881b      	ldrh	r3, [r3, #0]
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	4b91      	ldr	r3, [pc, #580]	; (800cbf4 <taskLedState+0x264>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4413      	add	r3, r2
 800c9b4:	4a8f      	ldr	r2, [pc, #572]	; (800cbf4 <taskLedState+0x264>)
 800c9b6:	6013      	str	r3, [r2, #0]
        if (!(++vbatTimer % VBATFREQ)) {
 800c9b8:	4b8f      	ldr	r3, [pc, #572]	; (800cbf8 <taskLedState+0x268>)
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	3301      	adds	r3, #1
 800c9be:	b2da      	uxtb	r2, r3
 800c9c0:	4b8d      	ldr	r3, [pc, #564]	; (800cbf8 <taskLedState+0x268>)
 800c9c2:	701a      	strb	r2, [r3, #0]
 800c9c4:	4b8c      	ldr	r3, [pc, #560]	; (800cbf8 <taskLedState+0x268>)
 800c9c6:	781a      	ldrb	r2, [r3, #0]
 800c9c8:	4b8c      	ldr	r3, [pc, #560]	; (800cbfc <taskLedState+0x26c>)
 800c9ca:	fba3 1302 	umull	r1, r3, r3, r2
 800c9ce:	0899      	lsrs	r1, r3, #2
 800c9d0:	460b      	mov	r3, r1
 800c9d2:	005b      	lsls	r3, r3, #1
 800c9d4:	440b      	add	r3, r1
 800c9d6:	005b      	lsls	r3, r3, #1
 800c9d8:	1ad3      	subs	r3, r2, r3
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	f040 808b 	bne.w	800caf8 <taskLedState+0x168>
            vbatRaw -= vbatRaw / 8;
 800c9e2:	4b87      	ldr	r3, [pc, #540]	; (800cc00 <taskLedState+0x270>)
 800c9e4:	ed93 7a00 	vldr	s14, [r3]
 800c9e8:	4b85      	ldr	r3, [pc, #532]	; (800cc00 <taskLedState+0x270>)
 800c9ea:	edd3 6a00 	vldr	s13, [r3]
 800c9ee:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
 800c9f2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800c9f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9fa:	4b81      	ldr	r3, [pc, #516]	; (800cc00 <taskLedState+0x270>)
 800c9fc:	edc3 7a00 	vstr	s15, [r3]
            vbatRaw += actGetBatteryVoltage() * mcfg.vbatscale;
 800ca00:	f7f4 fbe4 	bl	80011cc <actGetBatteryVoltage>
 800ca04:	eeb0 7a40 	vmov.f32	s14, s0
 800ca08:	4b7e      	ldr	r3, [pc, #504]	; (800cc04 <taskLedState+0x274>)
 800ca0a:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800ca0e:	ee07 3a90 	vmov	s15, r3
 800ca12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca16:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca1a:	4b79      	ldr	r3, [pc, #484]	; (800cc00 <taskLedState+0x270>)
 800ca1c:	edd3 7a00 	vldr	s15, [r3]
 800ca20:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca24:	4b76      	ldr	r3, [pc, #472]	; (800cc00 <taskLedState+0x270>)
 800ca26:	edc3 7a00 	vstr	s15, [r3]
            vbat = vbatRaw / 8;
 800ca2a:	4b75      	ldr	r3, [pc, #468]	; (800cc00 <taskLedState+0x270>)
 800ca2c:	ed93 7a00 	vldr	s14, [r3]
 800ca30:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800ca34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ca38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca3c:	ee17 3a90 	vmov	r3, s15
 800ca40:	b29a      	uxth	r2, r3
 800ca42:	4b71      	ldr	r3, [pc, #452]	; (800cc08 <taskLedState+0x278>)
 800ca44:	801a      	strh	r2, [r3, #0]

            if (mcfg.power_adc_channel > 0) {
 800ca46:	4b6f      	ldr	r3, [pc, #444]	; (800cc04 <taskLedState+0x274>)
 800ca48:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d053      	beq.n	800caf8 <taskLedState+0x168>
                amperageRaw -= amperageRaw / 8;
 800ca50:	4b6e      	ldr	r3, [pc, #440]	; (800cc0c <taskLedState+0x27c>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	da00      	bge.n	800ca5a <taskLedState+0xca>
 800ca58:	3307      	adds	r3, #7
 800ca5a:	10db      	asrs	r3, r3, #3
 800ca5c:	425b      	negs	r3, r3
 800ca5e:	461a      	mov	r2, r3
 800ca60:	4b6a      	ldr	r3, [pc, #424]	; (800cc0c <taskLedState+0x27c>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4413      	add	r3, r2
 800ca66:	4a69      	ldr	r2, [pc, #420]	; (800cc0c <taskLedState+0x27c>)
 800ca68:	6013      	str	r3, [r2, #0]
                amperageRaw += (actGetBatteryCurrent() - mcfg.currentoffset) * 1000 / (int32_t)mcfg.currentscale; // current in 0.01A steps
 800ca6a:	f7f4 fbcd 	bl	8001208 <actGetBatteryCurrent>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	4a64      	ldr	r2, [pc, #400]	; (800cc04 <taskLedState+0x274>)
 800ca72:	f8b2 217a 	ldrh.w	r2, [r2, #378]	; 0x17a
 800ca76:	1a9b      	subs	r3, r3, r2
 800ca78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ca7c:	fb02 f303 	mul.w	r3, r2, r3
 800ca80:	4a60      	ldr	r2, [pc, #384]	; (800cc04 <taskLedState+0x274>)
 800ca82:	f8b2 2178 	ldrh.w	r2, [r2, #376]	; 0x178
 800ca86:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca8a:	4a60      	ldr	r2, [pc, #384]	; (800cc0c <taskLedState+0x27c>)
 800ca8c:	6812      	ldr	r2, [r2, #0]
 800ca8e:	4413      	add	r3, r2
 800ca90:	461a      	mov	r2, r3
 800ca92:	4b5e      	ldr	r3, [pc, #376]	; (800cc0c <taskLedState+0x27c>)
 800ca94:	601a      	str	r2, [r3, #0]
                amperage = amperageRaw / 8;
 800ca96:	4b5d      	ldr	r3, [pc, #372]	; (800cc0c <taskLedState+0x27c>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	da00      	bge.n	800caa0 <taskLedState+0x110>
 800ca9e:	3307      	adds	r3, #7
 800caa0:	10db      	asrs	r3, r3, #3
 800caa2:	461a      	mov	r2, r3
 800caa4:	4b5a      	ldr	r3, [pc, #360]	; (800cc10 <taskLedState+0x280>)
 800caa6:	601a      	str	r2, [r3, #0]
                mAhdrawnRaw += (amperage * vbatCycleTime) / 1000;
 800caa8:	4b59      	ldr	r3, [pc, #356]	; (800cc10 <taskLedState+0x280>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a51      	ldr	r2, [pc, #324]	; (800cbf4 <taskLedState+0x264>)
 800caae:	6812      	ldr	r2, [r2, #0]
 800cab0:	fb02 f303 	mul.w	r3, r2, r3
 800cab4:	4a57      	ldr	r2, [pc, #348]	; (800cc14 <taskLedState+0x284>)
 800cab6:	fb82 1203 	smull	r1, r2, r2, r3
 800caba:	1192      	asrs	r2, r2, #6
 800cabc:	17db      	asrs	r3, r3, #31
 800cabe:	1ad3      	subs	r3, r2, r3
 800cac0:	17da      	asrs	r2, r3, #31
 800cac2:	461c      	mov	r4, r3
 800cac4:	4615      	mov	r5, r2
 800cac6:	4b54      	ldr	r3, [pc, #336]	; (800cc18 <taskLedState+0x288>)
 800cac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cacc:	eb14 0802 	adds.w	r8, r4, r2
 800cad0:	eb45 0903 	adc.w	r9, r5, r3
 800cad4:	4b50      	ldr	r3, [pc, #320]	; (800cc18 <taskLedState+0x288>)
 800cad6:	e9c3 8900 	strd	r8, r9, [r3]
                mAhdrawn = mAhdrawnRaw / (3600 * 100);
 800cada:	4b4f      	ldr	r3, [pc, #316]	; (800cc18 <taskLedState+0x288>)
 800cadc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cae0:	4a4e      	ldr	r2, [pc, #312]	; (800cc1c <taskLedState+0x28c>)
 800cae2:	f04f 0300 	mov.w	r3, #0
 800cae6:	f7f4 f97b 	bl	8000de0 <__aeabi_ldivmod>
 800caea:	4602      	mov	r2, r0
 800caec:	460b      	mov	r3, r1
 800caee:	4b4c      	ldr	r3, [pc, #304]	; (800cc20 <taskLedState+0x290>)
 800caf0:	601a      	str	r2, [r3, #0]
                vbatCycleTime = 0;
 800caf2:	4b40      	ldr	r3, [pc, #256]	; (800cbf4 <taskLedState+0x264>)
 800caf4:	2200      	movs	r2, #0
 800caf6:	601a      	str	r2, [r3, #0]
            }

        }
        // Buzzers for low and critical battery levels
        if (vbat <= batteryCriticalVoltage)
 800caf8:	4b43      	ldr	r3, [pc, #268]	; (800cc08 <taskLedState+0x278>)
 800cafa:	881a      	ldrh	r2, [r3, #0]
 800cafc:	4b49      	ldr	r3, [pc, #292]	; (800cc24 <taskLedState+0x294>)
 800cafe:	881b      	ldrh	r3, [r3, #0]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d803      	bhi.n	800cb0c <taskLedState+0x17c>
            buzzer(BUZZER_BAT_CRIT_LOW);     // Critically low battery
 800cb04:	2001      	movs	r0, #1
 800cb06:	f7f7 faf7 	bl	80040f8 <buzzer>
 800cb0a:	e008      	b.n	800cb1e <taskLedState+0x18e>
        else if (vbat <= batteryWarningVoltage)
 800cb0c:	4b3e      	ldr	r3, [pc, #248]	; (800cc08 <taskLedState+0x278>)
 800cb0e:	881a      	ldrh	r2, [r3, #0]
 800cb10:	4b45      	ldr	r3, [pc, #276]	; (800cc28 <taskLedState+0x298>)
 800cb12:	881b      	ldrh	r3, [r3, #0]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d802      	bhi.n	800cb1e <taskLedState+0x18e>
            buzzer(BUZZER_BAT_LOW);     // low battery
 800cb18:	2002      	movs	r0, #2
 800cb1a:	f7f7 faed 	bl	80040f8 <buzzer>
    }
    // update buzzer handler
    buzzerUpdate();
 800cb1e:	f7f7 fbd7 	bl	80042d0 <buzzerUpdate>
    if (!cliMode && feature(FEATURE_TELEMETRY)) {
        handleTelemetry();
    }
#endif

    serialCom();
 800cb22:	f004 fc5f 	bl	80113e4 <serialCom>

    // Read out gyro temperature. can use it for something somewhere. maybe get MCU temperature instead? lots of fun possibilities.
    if (sensor_set.gyro.temperature)
 800cb26:	4b41      	ldr	r3, [pc, #260]	; (800cc2c <taskLedState+0x29c>)
 800cb28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d005      	beq.n	800cb3c <taskLedState+0x1ac>
        sensor_set.gyro.temperature(&sensor_set, &telemTemperature1);
 800cb30:	4b3e      	ldr	r3, [pc, #248]	; (800cc2c <taskLedState+0x29c>)
 800cb32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb36:	493e      	ldr	r1, [pc, #248]	; (800cc30 <taskLedState+0x2a0>)
 800cb38:	483c      	ldr	r0, [pc, #240]	; (800cc2c <taskLedState+0x29c>)
 800cb3a:	4798      	blx	r3
    else {
        // TODO MCU temp
    }

    if ((calibratingA > 0 && sensors(SENSOR_ACC)) || (calibratingG > 0)) {      // Calibration phasis
 800cb3c:	4b3d      	ldr	r3, [pc, #244]	; (800cc34 <taskLedState+0x2a4>)
 800cb3e:	881b      	ldrh	r3, [r3, #0]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d005      	beq.n	800cb50 <taskLedState+0x1c0>
 800cb44:	2002      	movs	r0, #2
 800cb46:	f7fa fa63 	bl	8007010 <sensors>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d103      	bne.n	800cb58 <taskLedState+0x1c8>
 800cb50:	4b39      	ldr	r3, [pc, #228]	; (800cc38 <taskLedState+0x2a8>)
 800cb52:	881b      	ldrh	r3, [r3, #0]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d002      	beq.n	800cb5e <taskLedState+0x1ce>
        actLed0Toggle();
 800cb58:	f7f5 faa6 	bl	80020a8 <actLed0Toggle>
 800cb5c:	e00d      	b.n	800cb7a <taskLedState+0x1ea>
    } else {
        if (f.ACC_CALIBRATED)
 800cb5e:	4b37      	ldr	r3, [pc, #220]	; (800cc3c <taskLedState+0x2ac>)
 800cb60:	789b      	ldrb	r3, [r3, #2]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d002      	beq.n	800cb6c <taskLedState+0x1dc>
            actLed0State(OFF);
 800cb66:	2000      	movs	r0, #0
 800cb68:	f7f5 fa88 	bl	800207c <actLed0State>
        if (f.ARMED)
 800cb6c:	4b33      	ldr	r3, [pc, #204]	; (800cc3c <taskLedState+0x2ac>)
 800cb6e:	785b      	ldrb	r3, [r3, #1]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d002      	beq.n	800cb7a <taskLedState+0x1ea>
            actLed0State(ON);
 800cb74:	2001      	movs	r0, #1
 800cb76:	f7f5 fa81 	bl	800207c <actLed0State>
        ledringState(heading, angle, f.ARMED);
    }
#endif

    static uint8_t AccCalibLed = 0;
    if (AccCalibLed) AccCalibLed--;
 800cb7a:	4b31      	ldr	r3, [pc, #196]	; (800cc40 <taskLedState+0x2b0>)
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d006      	beq.n	800cb90 <taskLedState+0x200>
 800cb82:	4b2f      	ldr	r3, [pc, #188]	; (800cc40 <taskLedState+0x2b0>)
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	3b01      	subs	r3, #1
 800cb88:	b2da      	uxtb	r2, r3
 800cb8a:	4b2d      	ldr	r3, [pc, #180]	; (800cc40 <taskLedState+0x2b0>)
 800cb8c:	701a      	strb	r2, [r3, #0]
 800cb8e:	e00f      	b.n	800cbb0 <taskLedState+0x220>
    else {
        if (!f.SMALL_ANGLE) {
 800cb90:	4b2a      	ldr	r3, [pc, #168]	; (800cc3c <taskLedState+0x2ac>)
 800cb92:	7b5b      	ldrb	r3, [r3, #13]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d105      	bne.n	800cba4 <taskLedState+0x214>
            f.ACC_CALIBRATED = 0; // the multi uses ACC and is not calibrated or is too much inclinated
 800cb98:	4b28      	ldr	r3, [pc, #160]	; (800cc3c <taskLedState+0x2ac>)
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	709a      	strb	r2, [r3, #2]
            actLed0Toggle();
 800cb9e:	f7f5 fa83 	bl	80020a8 <actLed0Toggle>
 800cba2:	e002      	b.n	800cbaa <taskLedState+0x21a>
        } else {
            f.ACC_CALIBRATED = 1;
 800cba4:	4b25      	ldr	r3, [pc, #148]	; (800cc3c <taskLedState+0x2ac>)
 800cba6:	2201      	movs	r2, #1
 800cba8:	709a      	strb	r2, [r3, #2]
        }
        AccCalibLed = 10 - 1;       // 50ms * 10 = 500ms
 800cbaa:	4b25      	ldr	r3, [pc, #148]	; (800cc40 <taskLedState+0x2b0>)
 800cbac:	2209      	movs	r2, #9
 800cbae:	701a      	strb	r2, [r3, #0]
    }

    if (sensors(SENSOR_GPS)) {
 800cbb0:	2020      	movs	r0, #32
 800cbb2:	f7fa fa2d 	bl	8007010 <sensors>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d013      	beq.n	800cbe4 <taskLedState+0x254>
        static uint8_t GPSLEDTime = 0;
        if (GPSLEDTime) GPSLEDTime--;
 800cbbc:	4b21      	ldr	r3, [pc, #132]	; (800cc44 <taskLedState+0x2b4>)
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d006      	beq.n	800cbd2 <taskLedState+0x242>
 800cbc4:	4b1f      	ldr	r3, [pc, #124]	; (800cc44 <taskLedState+0x2b4>)
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	3b01      	subs	r3, #1
 800cbca:	b2da      	uxtb	r2, r3
 800cbcc:	4b1d      	ldr	r3, [pc, #116]	; (800cc44 <taskLedState+0x2b4>)
 800cbce:	701a      	strb	r2, [r3, #0]
 800cbd0:	e008      	b.n	800cbe4 <taskLedState+0x254>
        else {
            if (GPS_numSat >= 5) actLed1Toggle();
 800cbd2:	4b1d      	ldr	r3, [pc, #116]	; (800cc48 <taskLedState+0x2b8>)
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	2b04      	cmp	r3, #4
 800cbd8:	d901      	bls.n	800cbde <taskLedState+0x24e>
 800cbda:	f7f5 fa91 	bl	8002100 <actLed1Toggle>
            GPSLEDTime = 3 - 1;     // 50ms * 3 = 150ms
 800cbde:	4b19      	ldr	r3, [pc, #100]	; (800cc44 <taskLedState+0x2b4>)
 800cbe0:	2202      	movs	r2, #2
 800cbe2:	701a      	strb	r2, [r3, #0]
        }
    }
    return 0;
 800cbe4:	2300      	movs	r3, #0
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3708      	adds	r7, #8
 800cbea:	46bd      	mov	sp, r7
 800cbec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800cbf0:	2000176c 	.word	0x2000176c
 800cbf4:	20001910 	.word	0x20001910
 800cbf8:	20001914 	.word	0x20001914
 800cbfc:	aaaaaaab 	.word	0xaaaaaaab
 800cc00:	20001918 	.word	0x20001918
 800cc04:	2000089c 	.word	0x2000089c
 800cc08:	20001770 	.word	0x20001770
 800cc0c:	2000191c 	.word	0x2000191c
 800cc10:	20001774 	.word	0x20001774
 800cc14:	10624dd3 	.word	0x10624dd3
 800cc18:	20001920 	.word	0x20001920
 800cc1c:	00057e40 	.word	0x00057e40
 800cc20:	20001778 	.word	0x20001778
 800cc24:	200018f0 	.word	0x200018f0
 800cc28:	200018ee 	.word	0x200018ee
 800cc2c:	20000060 	.word	0x20000060
 800cc30:	2000177c 	.word	0x2000177c
 800cc34:	20001a78 	.word	0x20001a78
 800cc38:	20001a7c 	.word	0x20001a7c
 800cc3c:	2000174c 	.word	0x2000174c
 800cc40:	20001928 	.word	0x20001928
 800cc44:	20001929 	.word	0x20001929
 800cc48:	20001830 	.word	0x20001830

0800cc4c <pwmReadRawRC>:

uint16_t pwmReadRawRC(uint8_t chan)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	4603      	mov	r3, r0
 800cc54:	71fb      	strb	r3, [r7, #7]
    return actPwmRead(mcfg.rcmap[chan]);
 800cc56:	79fb      	ldrb	r3, [r7, #7]
 800cc58:	4a05      	ldr	r2, [pc, #20]	; (800cc70 <pwmReadRawRC+0x24>)
 800cc5a:	4413      	add	r3, r2
 800cc5c:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7f5 f99d 	bl	8001fa0 <actPwmRead>
 800cc66:	4603      	mov	r3, r0
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3708      	adds	r7, #8
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	2000089c 	.word	0x2000089c

0800cc74 <computeRC>:

void computeRC(void)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
    uint16_t capture;
    int i, chan;

    if (feature(FEATURE_SERIALRX)) {
 800cc7a:	2008      	movs	r0, #8
 800cc7c:	f7fa fa10 	bl	80070a0 <feature>
 800cc80:	4603      	mov	r3, r0
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d019      	beq.n	800ccba <computeRC+0x46>
        for (chan = 0; chan < mcfg.rc_channel_count; chan++)
 800cc86:	2300      	movs	r3, #0
 800cc88:	607b      	str	r3, [r7, #4]
 800cc8a:	e00e      	b.n	800ccaa <computeRC+0x36>
            rcData[chan] = rcReadRawFunc(chan);
 800cc8c:	4b41      	ldr	r3, [pc, #260]	; (800cd94 <computeRC+0x120>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	b2d2      	uxtb	r2, r2
 800cc94:	4610      	mov	r0, r2
 800cc96:	4798      	blx	r3
 800cc98:	4603      	mov	r3, r0
 800cc9a:	b219      	sxth	r1, r3
 800cc9c:	4a3e      	ldr	r2, [pc, #248]	; (800cd98 <computeRC+0x124>)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (chan = 0; chan < mcfg.rc_channel_count; chan++)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	3301      	adds	r3, #1
 800cca8:	607b      	str	r3, [r7, #4]
 800ccaa:	4b3c      	ldr	r3, [pc, #240]	; (800cd9c <computeRC+0x128>)
 800ccac:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	dbe9      	blt.n	800cc8c <computeRC+0x18>
                rcData[chan] += rcDataAverage[chan][i];
            rcData[chan] /= 4;
        }
        rcAverageIndex++;
    }
}
 800ccb8:	e068      	b.n	800cd8c <computeRC+0x118>
        for (chan = 0; chan < mcfg.rc_channel_count; chan++) {
 800ccba:	2300      	movs	r3, #0
 800ccbc:	607b      	str	r3, [r7, #4]
 800ccbe:	e059      	b.n	800cd74 <computeRC+0x100>
            capture = rcReadRawFunc(chan);
 800ccc0:	4b34      	ldr	r3, [pc, #208]	; (800cd94 <computeRC+0x120>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	b2d2      	uxtb	r2, r2
 800ccc8:	4610      	mov	r0, r2
 800ccca:	4798      	blx	r3
 800cccc:	4603      	mov	r3, r0
 800ccce:	81fb      	strh	r3, [r7, #14]
            if (capture < PULSE_MIN || capture > PULSE_MAX)
 800ccd0:	89fb      	ldrh	r3, [r7, #14]
 800ccd2:	f240 22ed 	movw	r2, #749	; 0x2ed
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d904      	bls.n	800cce4 <computeRC+0x70>
 800ccda:	89fb      	ldrh	r3, [r7, #14]
 800ccdc:	f640 02ca 	movw	r2, #2250	; 0x8ca
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d903      	bls.n	800ccec <computeRC+0x78>
                capture = mcfg.midrc;
 800cce4:	4b2d      	ldr	r3, [pc, #180]	; (800cd9c <computeRC+0x128>)
 800cce6:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800ccea:	81fb      	strh	r3, [r7, #14]
            rcDataAverage[chan][rcAverageIndex % 4] = capture;
 800ccec:	4b2c      	ldr	r3, [pc, #176]	; (800cda0 <computeRC+0x12c>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	425a      	negs	r2, r3
 800ccf2:	f003 0303 	and.w	r3, r3, #3
 800ccf6:	f002 0203 	and.w	r2, r2, #3
 800ccfa:	bf58      	it	pl
 800ccfc:	4253      	negpl	r3, r2
 800ccfe:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800cd02:	4928      	ldr	r1, [pc, #160]	; (800cda4 <computeRC+0x130>)
 800cd04:	687a      	ldr	r2, [r7, #4]
 800cd06:	0092      	lsls	r2, r2, #2
 800cd08:	4413      	add	r3, r2
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            rcData[chan] = 0;
 800cd10:	4a21      	ldr	r2, [pc, #132]	; (800cd98 <computeRC+0x124>)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2100      	movs	r1, #0
 800cd16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < 4; i++)
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	60bb      	str	r3, [r7, #8]
 800cd1e:	e016      	b.n	800cd4e <computeRC+0xda>
                rcData[chan] += rcDataAverage[chan][i];
 800cd20:	4a1d      	ldr	r2, [pc, #116]	; (800cd98 <computeRC+0x124>)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd28:	b29a      	uxth	r2, r3
 800cd2a:	481e      	ldr	r0, [pc, #120]	; (800cda4 <computeRC+0x130>)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	0099      	lsls	r1, r3, #2
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	440b      	add	r3, r1
 800cd34:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	4413      	add	r3, r2
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	b219      	sxth	r1, r3
 800cd40:	4a15      	ldr	r2, [pc, #84]	; (800cd98 <computeRC+0x124>)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < 4; i++)
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	60bb      	str	r3, [r7, #8]
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	2b03      	cmp	r3, #3
 800cd52:	dde5      	ble.n	800cd20 <computeRC+0xac>
            rcData[chan] /= 4;
 800cd54:	4a10      	ldr	r2, [pc, #64]	; (800cd98 <computeRC+0x124>)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	da00      	bge.n	800cd62 <computeRC+0xee>
 800cd60:	3303      	adds	r3, #3
 800cd62:	109b      	asrs	r3, r3, #2
 800cd64:	b219      	sxth	r1, r3
 800cd66:	4a0c      	ldr	r2, [pc, #48]	; (800cd98 <computeRC+0x124>)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (chan = 0; chan < mcfg.rc_channel_count; chan++) {
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	3301      	adds	r3, #1
 800cd72:	607b      	str	r3, [r7, #4]
 800cd74:	4b09      	ldr	r3, [pc, #36]	; (800cd9c <computeRC+0x128>)
 800cd76:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	db9e      	blt.n	800ccc0 <computeRC+0x4c>
        rcAverageIndex++;
 800cd82:	4b07      	ldr	r3, [pc, #28]	; (800cda0 <computeRC+0x12c>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	3301      	adds	r3, #1
 800cd88:	4a05      	ldr	r2, [pc, #20]	; (800cda0 <computeRC+0x12c>)
 800cd8a:	6013      	str	r3, [r2, #0]
}
 800cd8c:	bf00      	nop
 800cd8e:	3710      	adds	r7, #16
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}
 800cd94:	200017dc 	.word	0x200017dc
 800cd98:	20001784 	.word	0x20001784
 800cd9c:	2000089c 	.word	0x2000089c
 800cda0:	2000192c 	.word	0x2000192c
 800cda4:	20001930 	.word	0x20001930

0800cda8 <mwArm>:

static void mwArm(void)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	af00      	add	r7, sp, #0
    if (calibratingG == 0 && f.ACC_CALIBRATED) {
 800cdac:	4b1b      	ldr	r3, [pc, #108]	; (800ce1c <mwArm+0x74>)
 800cdae:	881b      	ldrh	r3, [r3, #0]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d126      	bne.n	800ce02 <mwArm+0x5a>
 800cdb4:	4b1a      	ldr	r3, [pc, #104]	; (800ce20 <mwArm+0x78>)
 800cdb6:	789b      	ldrb	r3, [r3, #2]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d022      	beq.n	800ce02 <mwArm+0x5a>
        // TODO: feature(FEATURE_FAILSAFE) && failsafeCnt < 2
        // TODO: && ( !feature || ( feature && ( failsafecnt > 2) )
        if (!f.ARMED) {         // arm now!
 800cdbc:	4b18      	ldr	r3, [pc, #96]	; (800ce20 <mwArm+0x78>)
 800cdbe:	785b      	ldrb	r3, [r3, #1]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d128      	bne.n	800ce16 <mwArm+0x6e>
            f.ARMED = 1;
 800cdc4:	4b16      	ldr	r3, [pc, #88]	; (800ce20 <mwArm+0x78>)
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	705a      	strb	r2, [r3, #1]
            headFreeModeHold = heading;
 800cdca:	4b16      	ldr	r3, [pc, #88]	; (800ce24 <mwArm+0x7c>)
 800cdcc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cdd0:	4b15      	ldr	r3, [pc, #84]	; (800ce28 <mwArm+0x80>)
 800cdd2:	801a      	strh	r2, [r3, #0]
            // Beep for inform about arming
#ifdef GPS
            if (feature(FEATURE_GPS) && f.GPS_FIX && GPS_numSat >= 5)
 800cdd4:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cdd8:	f7fa f962 	bl	80070a0 <feature>
 800cddc:	4603      	mov	r3, r0
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d00b      	beq.n	800cdfa <mwArm+0x52>
 800cde2:	4b0f      	ldr	r3, [pc, #60]	; (800ce20 <mwArm+0x78>)
 800cde4:	7adb      	ldrb	r3, [r3, #11]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d007      	beq.n	800cdfa <mwArm+0x52>
 800cdea:	4b10      	ldr	r3, [pc, #64]	; (800ce2c <mwArm+0x84>)
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	2b04      	cmp	r3, #4
 800cdf0:	d903      	bls.n	800cdfa <mwArm+0x52>
                buzzer(BUZZER_ARMING_GPS_FIX);
 800cdf2:	2007      	movs	r0, #7
 800cdf4:	f7f7 f980 	bl	80040f8 <buzzer>
        if (!f.ARMED) {         // arm now!
 800cdf8:	e00d      	b.n	800ce16 <mwArm+0x6e>
            else
                buzzer(BUZZER_ARMING);
 800cdfa:	2006      	movs	r0, #6
 800cdfc:	f7f7 f97c 	bl	80040f8 <buzzer>
        if (!f.ARMED) {         // arm now!
 800ce00:	e009      	b.n	800ce16 <mwArm+0x6e>
#else
            buzzer(BUZZER_ARMING);
#endif
        }
    } else if (!f.ARMED) {
 800ce02:	4b07      	ldr	r3, [pc, #28]	; (800ce20 <mwArm+0x78>)
 800ce04:	785b      	ldrb	r3, [r3, #1]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d105      	bne.n	800ce16 <mwArm+0x6e>
        blinkLED(2, 255, 1);
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	21ff      	movs	r1, #255	; 0xff
 800ce0e:	2002      	movs	r0, #2
 800ce10:	f7ff fae0 	bl	800c3d4 <blinkLED>
    }
}
 800ce14:	e7ff      	b.n	800ce16 <mwArm+0x6e>
 800ce16:	bf00      	nop
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	20001a7c 	.word	0x20001a7c
 800ce20:	2000174c 	.word	0x2000174c
 800ce24:	20001a7e 	.word	0x20001a7e
 800ce28:	2000176e 	.word	0x2000176e
 800ce2c:	20001830 	.word	0x20001830

0800ce30 <mwDisarm>:

static void mwDisarm(void)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	af00      	add	r7, sp, #0
    if (f.ARMED) {
 800ce34:	4b09      	ldr	r3, [pc, #36]	; (800ce5c <mwDisarm+0x2c>)
 800ce36:	785b      	ldrb	r3, [r3, #1]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d00c      	beq.n	800ce56 <mwDisarm+0x26>
        f.ARMED = 0;
 800ce3c:	4b07      	ldr	r3, [pc, #28]	; (800ce5c <mwDisarm+0x2c>)
 800ce3e:	2200      	movs	r2, #0
 800ce40:	705a      	strb	r2, [r3, #1]
        // Beep for inform about disarming
        buzzer(BUZZER_DISARMING);
 800ce42:	2005      	movs	r0, #5
 800ce44:	f7f7 f958 	bl	80040f8 <buzzer>
        // Reset disarm time so that it works next time we arm the board.
        if (disarmTime != 0)
 800ce48:	4b05      	ldr	r3, [pc, #20]	; (800ce60 <mwDisarm+0x30>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d002      	beq.n	800ce56 <mwDisarm+0x26>
            disarmTime = 0;
 800ce50:	4b03      	ldr	r3, [pc, #12]	; (800ce60 <mwDisarm+0x30>)
 800ce52:	2200      	movs	r2, #0
 800ce54:	601a      	str	r2, [r3, #0]
    }
}
 800ce56:	bf00      	nop
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	2000174c 	.word	0x2000174c
 800ce60:	200018f4 	.word	0x200018f4

0800ce64 <mwVario>:

static void mwVario(void)
{
 800ce64:	b480      	push	{r7}
 800ce66:	af00      	add	r7, sp, #0

}
 800ce68:	bf00      	nop
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr
	...

0800ce74 <pidMultiWii>:

static int32_t errorGyroI[3] = { 0, 0, 0 };
static int32_t errorAngleI[2] = { 0, 0 };

static void pidMultiWii(void)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b08e      	sub	sp, #56	; 0x38
 800ce78:	af00      	add	r7, sp, #0
    int axis, prop;
    int32_t error, errorAngle;
    int32_t PTerm, ITerm, PTermACC = 0, ITermACC = 0, PTermGYRO = 0, ITermGYRO = 0, DTerm;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce7e:	2300      	movs	r3, #0
 800ce80:	627b      	str	r3, [r7, #36]	; 0x24
 800ce82:	2300      	movs	r3, #0
 800ce84:	623b      	str	r3, [r7, #32]
 800ce86:	2300      	movs	r3, #0
 800ce88:	61fb      	str	r3, [r7, #28]
    static int32_t delta1[3], delta2[3];
    int32_t deltaSum;
    int32_t delta;

    // **** PITCH & ROLL & YAW PID ****
    prop = max(abs(rcCommand[PITCH]), abs(rcCommand[ROLL])); // range [0;500]
 800ce8a:	4b91      	ldr	r3, [pc, #580]	; (800d0d0 <pidMultiWii+0x25c>)
 800ce8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	bfb8      	it	lt
 800ce94:	425b      	neglt	r3, r3
 800ce96:	b29a      	uxth	r2, r3
 800ce98:	4b8d      	ldr	r3, [pc, #564]	; (800d0d0 <pidMultiWii+0x25c>)
 800ce9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	bfb8      	it	lt
 800cea2:	425b      	neglt	r3, r3
 800cea4:	b29b      	uxth	r3, r3
 800cea6:	4293      	cmp	r3, r2
 800cea8:	bf38      	it	cc
 800ceaa:	4613      	movcc	r3, r2
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	61bb      	str	r3, [r7, #24]
    for (axis = 0; axis < 3; axis++) {
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	637b      	str	r3, [r7, #52]	; 0x34
 800ceb4:	e189      	b.n	800d1ca <pidMultiWii+0x356>
        if ((f.ANGLE_MODE || f.HORIZON_MODE) && axis < 2) { // MODE relying on ACC
 800ceb6:	4b87      	ldr	r3, [pc, #540]	; (800d0d4 <pidMultiWii+0x260>)
 800ceb8:	78db      	ldrb	r3, [r3, #3]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d103      	bne.n	800cec6 <pidMultiWii+0x52>
 800cebe:	4b85      	ldr	r3, [pc, #532]	; (800d0d4 <pidMultiWii+0x260>)
 800cec0:	791b      	ldrb	r3, [r3, #4]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d060      	beq.n	800cf88 <pidMultiWii+0x114>
 800cec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	dc5d      	bgt.n	800cf88 <pidMultiWii+0x114>
            // 50 degrees max inclination
            errorAngle = constrain(2 * rcCommand[axis] + GPS_angle[axis], -((int)mcfg.max_angle_inclination), +mcfg.max_angle_inclination) - angle[axis] + cfg.angleTrim[axis];
 800cecc:	4a80      	ldr	r2, [pc, #512]	; (800d0d0 <pidMultiWii+0x25c>)
 800cece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ced4:	005b      	lsls	r3, r3, #1
 800ced6:	4980      	ldr	r1, [pc, #512]	; (800d0d8 <pidMultiWii+0x264>)
 800ced8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ceda:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800cede:	4413      	add	r3, r2
 800cee0:	4a7e      	ldr	r2, [pc, #504]	; (800d0dc <pidMultiWii+0x268>)
 800cee2:	f8b2 2168 	ldrh.w	r2, [r2, #360]	; 0x168
 800cee6:	4251      	negs	r1, r2
 800cee8:	4a7c      	ldr	r2, [pc, #496]	; (800d0dc <pidMultiWii+0x268>)
 800ceea:	f8b2 2168 	ldrh.w	r2, [r2, #360]	; 0x168
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7f6 ff72 	bl	8003dd8 <constrain>
 800cef4:	4602      	mov	r2, r0
 800cef6:	497a      	ldr	r1, [pc, #488]	; (800d0e0 <pidMultiWii+0x26c>)
 800cef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cefa:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800cefe:	1ad2      	subs	r2, r2, r3
 800cf00:	4978      	ldr	r1, [pc, #480]	; (800d0e4 <pidMultiWii+0x270>)
 800cf02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf04:	3314      	adds	r3, #20
 800cf06:	005b      	lsls	r3, r3, #1
 800cf08:	440b      	add	r3, r1
 800cf0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cf0e:	4413      	add	r3, r2
 800cf10:	617b      	str	r3, [r7, #20]
            PTermACC = errorAngle * cfg.P8[PIDLEVEL] / 100; // 32 bits is needed for calculation: errorAngle*P8[PIDLEVEL] could exceed 32768   16 bits is ok for result
 800cf12:	4b74      	ldr	r3, [pc, #464]	; (800d0e4 <pidMultiWii+0x270>)
 800cf14:	7a1b      	ldrb	r3, [r3, #8]
 800cf16:	461a      	mov	r2, r3
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	fb02 f303 	mul.w	r3, r2, r3
 800cf1e:	4a72      	ldr	r2, [pc, #456]	; (800d0e8 <pidMultiWii+0x274>)
 800cf20:	fb82 1203 	smull	r1, r2, r2, r3
 800cf24:	1152      	asrs	r2, r2, #5
 800cf26:	17db      	asrs	r3, r3, #31
 800cf28:	1ad3      	subs	r3, r2, r3
 800cf2a:	62bb      	str	r3, [r7, #40]	; 0x28
            PTermACC = constrain(PTermACC, -cfg.D8[PIDLEVEL] * 5, +cfg.D8[PIDLEVEL] * 5);
 800cf2c:	4b6d      	ldr	r3, [pc, #436]	; (800d0e4 <pidMultiWii+0x270>)
 800cf2e:	7f1b      	ldrb	r3, [r3, #28]
 800cf30:	461a      	mov	r2, r3
 800cf32:	4613      	mov	r3, r2
 800cf34:	079b      	lsls	r3, r3, #30
 800cf36:	1a9b      	subs	r3, r3, r2
 800cf38:	009b      	lsls	r3, r3, #2
 800cf3a:	1a99      	subs	r1, r3, r2
 800cf3c:	4b69      	ldr	r3, [pc, #420]	; (800d0e4 <pidMultiWii+0x270>)
 800cf3e:	7f1b      	ldrb	r3, [r3, #28]
 800cf40:	461a      	mov	r2, r3
 800cf42:	4613      	mov	r3, r2
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	4413      	add	r3, r2
 800cf48:	461a      	mov	r2, r3
 800cf4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf4c:	f7f6 ff44 	bl	8003dd8 <constrain>
 800cf50:	62b8      	str	r0, [r7, #40]	; 0x28

            errorAngleI[axis] = constrain(errorAngleI[axis] + errorAngle, -10000, +10000); // WindUp
 800cf52:	4a66      	ldr	r2, [pc, #408]	; (800d0ec <pidMultiWii+0x278>)
 800cf54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	f242 7210 	movw	r2, #10000	; 0x2710
 800cf62:	4963      	ldr	r1, [pc, #396]	; (800d0f0 <pidMultiWii+0x27c>)
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7f6 ff37 	bl	8003dd8 <constrain>
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	495f      	ldr	r1, [pc, #380]	; (800d0ec <pidMultiWii+0x278>)
 800cf6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            ITermACC = (errorAngleI[axis] * cfg.I8[PIDLEVEL]) >> 12;
 800cf74:	4a5d      	ldr	r2, [pc, #372]	; (800d0ec <pidMultiWii+0x278>)
 800cf76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf7c:	4a59      	ldr	r2, [pc, #356]	; (800d0e4 <pidMultiWii+0x270>)
 800cf7e:	7c92      	ldrb	r2, [r2, #18]
 800cf80:	fb02 f303 	mul.w	r3, r2, r3
 800cf84:	131b      	asrs	r3, r3, #12
 800cf86:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if (!f.ANGLE_MODE || f.HORIZON_MODE || axis == 2) { // MODE relying on GYRO or YAW axis
 800cf88:	4b52      	ldr	r3, [pc, #328]	; (800d0d4 <pidMultiWii+0x260>)
 800cf8a:	78db      	ldrb	r3, [r3, #3]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d006      	beq.n	800cf9e <pidMultiWii+0x12a>
 800cf90:	4b50      	ldr	r3, [pc, #320]	; (800d0d4 <pidMultiWii+0x260>)
 800cf92:	791b      	ldrb	r3, [r3, #4]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d102      	bne.n	800cf9e <pidMultiWii+0x12a>
 800cf98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf9a:	2b02      	cmp	r3, #2
 800cf9c:	d15f      	bne.n	800d05e <pidMultiWii+0x1ea>
            error = (int32_t)rcCommand[axis] * 10 * 8 / cfg.P8[axis];
 800cf9e:	4a4c      	ldr	r2, [pc, #304]	; (800d0d0 <pidMultiWii+0x25c>)
 800cfa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfa2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	4413      	add	r3, r2
 800cfae:	011b      	lsls	r3, r3, #4
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	4a4c      	ldr	r2, [pc, #304]	; (800d0e4 <pidMultiWii+0x270>)
 800cfb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfb6:	4413      	add	r3, r2
 800cfb8:	3301      	adds	r3, #1
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	fb91 f3f3 	sdiv	r3, r1, r3
 800cfc0:	613b      	str	r3, [r7, #16]
            error -= gyroData[axis];
 800cfc2:	4a4c      	ldr	r2, [pc, #304]	; (800d0f4 <pidMultiWii+0x280>)
 800cfc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfc6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cfca:	461a      	mov	r2, r3
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	1a9b      	subs	r3, r3, r2
 800cfd0:	613b      	str	r3, [r7, #16]

            PTermGYRO = rcCommand[axis];
 800cfd2:	4a3f      	ldr	r2, [pc, #252]	; (800d0d0 <pidMultiWii+0x25c>)
 800cfd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfd6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cfda:	623b      	str	r3, [r7, #32]

            errorGyroI[axis] = constrain(errorGyroI[axis] + error, -16000, +16000); // WindUp
 800cfdc:	4a46      	ldr	r2, [pc, #280]	; (800d0f8 <pidMultiWii+0x284>)
 800cfde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfe0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	4413      	add	r3, r2
 800cfe8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800cfec:	4943      	ldr	r1, [pc, #268]	; (800d0fc <pidMultiWii+0x288>)
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7f6 fef2 	bl	8003dd8 <constrain>
 800cff4:	4602      	mov	r2, r0
 800cff6:	4940      	ldr	r1, [pc, #256]	; (800d0f8 <pidMultiWii+0x284>)
 800cff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if ((abs(gyroData[axis]) > 640) || ((axis == YAW) && (abs(rcCommand[axis]) > 100)))
 800cffe:	4a3d      	ldr	r2, [pc, #244]	; (800d0f4 <pidMultiWii+0x280>)
 800d000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d002:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d006:	2b00      	cmp	r3, #0
 800d008:	bfb8      	it	lt
 800d00a:	425b      	neglt	r3, r3
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d012:	d80c      	bhi.n	800d02e <pidMultiWii+0x1ba>
 800d014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d016:	2b02      	cmp	r3, #2
 800d018:	d10e      	bne.n	800d038 <pidMultiWii+0x1c4>
 800d01a:	4a2d      	ldr	r2, [pc, #180]	; (800d0d0 <pidMultiWii+0x25c>)
 800d01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d01e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d022:	2b00      	cmp	r3, #0
 800d024:	bfb8      	it	lt
 800d026:	425b      	neglt	r3, r3
 800d028:	b29b      	uxth	r3, r3
 800d02a:	2b64      	cmp	r3, #100	; 0x64
 800d02c:	d904      	bls.n	800d038 <pidMultiWii+0x1c4>
                errorGyroI[axis] = 0;
 800d02e:	4a32      	ldr	r2, [pc, #200]	; (800d0f8 <pidMultiWii+0x284>)
 800d030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d032:	2100      	movs	r1, #0
 800d034:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            ITermGYRO = (errorGyroI[axis] / 125 * cfg.I8[axis]) >> 6;
 800d038:	4a2f      	ldr	r2, [pc, #188]	; (800d0f8 <pidMultiWii+0x284>)
 800d03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d03c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d040:	4a2f      	ldr	r2, [pc, #188]	; (800d100 <pidMultiWii+0x28c>)
 800d042:	fb82 1203 	smull	r1, r2, r2, r3
 800d046:	10d2      	asrs	r2, r2, #3
 800d048:	17db      	asrs	r3, r3, #31
 800d04a:	1ad3      	subs	r3, r2, r3
 800d04c:	4925      	ldr	r1, [pc, #148]	; (800d0e4 <pidMultiWii+0x270>)
 800d04e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d050:	440a      	add	r2, r1
 800d052:	320b      	adds	r2, #11
 800d054:	7812      	ldrb	r2, [r2, #0]
 800d056:	fb02 f303 	mul.w	r3, r2, r3
 800d05a:	119b      	asrs	r3, r3, #6
 800d05c:	61fb      	str	r3, [r7, #28]
        }
        if (f.HORIZON_MODE && axis < 2) {
 800d05e:	4b1d      	ldr	r3, [pc, #116]	; (800d0d4 <pidMultiWii+0x260>)
 800d060:	791b      	ldrb	r3, [r3, #4]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d027      	beq.n	800d0b6 <pidMultiWii+0x242>
 800d066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d068:	2b01      	cmp	r3, #1
 800d06a:	dc24      	bgt.n	800d0b6 <pidMultiWii+0x242>
            PTerm = (PTermACC * (500 - prop) + PTermGYRO * prop) / 500;
 800d06c:	69bb      	ldr	r3, [r7, #24]
 800d06e:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800d072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d074:	fb03 f202 	mul.w	r2, r3, r2
 800d078:	6a3b      	ldr	r3, [r7, #32]
 800d07a:	69b9      	ldr	r1, [r7, #24]
 800d07c:	fb01 f303 	mul.w	r3, r1, r3
 800d080:	4413      	add	r3, r2
 800d082:	4a1f      	ldr	r2, [pc, #124]	; (800d100 <pidMultiWii+0x28c>)
 800d084:	fb82 1203 	smull	r1, r2, r2, r3
 800d088:	1152      	asrs	r2, r2, #5
 800d08a:	17db      	asrs	r3, r3, #31
 800d08c:	1ad3      	subs	r3, r2, r3
 800d08e:	633b      	str	r3, [r7, #48]	; 0x30
            ITerm = (ITermACC * (500 - prop) + ITermGYRO * prop) / 500;
 800d090:	69bb      	ldr	r3, [r7, #24]
 800d092:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800d096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d098:	fb03 f202 	mul.w	r2, r3, r2
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	69b9      	ldr	r1, [r7, #24]
 800d0a0:	fb01 f303 	mul.w	r3, r1, r3
 800d0a4:	4413      	add	r3, r2
 800d0a6:	4a16      	ldr	r2, [pc, #88]	; (800d100 <pidMultiWii+0x28c>)
 800d0a8:	fb82 1203 	smull	r1, r2, r2, r3
 800d0ac:	1152      	asrs	r2, r2, #5
 800d0ae:	17db      	asrs	r3, r3, #31
 800d0b0:	1ad3      	subs	r3, r2, r3
 800d0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0b4:	e02a      	b.n	800d10c <pidMultiWii+0x298>
        } else {
            if (f.ANGLE_MODE && axis < 2) {
 800d0b6:	4b07      	ldr	r3, [pc, #28]	; (800d0d4 <pidMultiWii+0x260>)
 800d0b8:	78db      	ldrb	r3, [r3, #3]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d022      	beq.n	800d104 <pidMultiWii+0x290>
 800d0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	dc1f      	bgt.n	800d104 <pidMultiWii+0x290>
                PTerm = PTermACC;
 800d0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c6:	633b      	str	r3, [r7, #48]	; 0x30
                ITerm = ITermACC;
 800d0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0cc:	e01e      	b.n	800d10c <pidMultiWii+0x298>
 800d0ce:	bf00      	nop
 800d0d0:	200017a8 	.word	0x200017a8
 800d0d4:	2000174c 	.word	0x2000174c
 800d0d8:	2000183c 	.word	0x2000183c
 800d0dc:	2000089c 	.word	0x2000089c
 800d0e0:	200014f4 	.word	0x200014f4
 800d0e4:	20000e08 	.word	0x20000e08
 800d0e8:	51eb851f 	.word	0x51eb851f
 800d0ec:	20001904 	.word	0x20001904
 800d0f0:	ffffd8f0 	.word	0xffffd8f0
 800d0f4:	200014e4 	.word	0x200014e4
 800d0f8:	200018f8 	.word	0x200018f8
 800d0fc:	ffffc180 	.word	0xffffc180
 800d100:	10624dd3 	.word	0x10624dd3
            } else {
                PTerm = PTermGYRO;
 800d104:	6a3b      	ldr	r3, [r7, #32]
 800d106:	633b      	str	r3, [r7, #48]	; 0x30
                ITerm = ITermGYRO;
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        PTerm -= (int32_t)gyroData[axis] * dynP8[axis] / 10 / 8; // 32 bits is needed for calculation
 800d10c:	4a33      	ldr	r2, [pc, #204]	; (800d1dc <pidMultiWii+0x368>)
 800d10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d110:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d114:	4619      	mov	r1, r3
 800d116:	4a32      	ldr	r2, [pc, #200]	; (800d1e0 <pidMultiWii+0x36c>)
 800d118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d11a:	4413      	add	r3, r2
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	fb01 f303 	mul.w	r3, r1, r3
 800d122:	4a30      	ldr	r2, [pc, #192]	; (800d1e4 <pidMultiWii+0x370>)
 800d124:	fb82 1203 	smull	r1, r2, r2, r3
 800d128:	1152      	asrs	r2, r2, #5
 800d12a:	17db      	asrs	r3, r3, #31
 800d12c:	1a9b      	subs	r3, r3, r2
 800d12e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d130:	4413      	add	r3, r2
 800d132:	633b      	str	r3, [r7, #48]	; 0x30
        delta = gyroData[axis] - lastGyro[axis];
 800d134:	4a29      	ldr	r2, [pc, #164]	; (800d1dc <pidMultiWii+0x368>)
 800d136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d138:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d13c:	4619      	mov	r1, r3
 800d13e:	4a2a      	ldr	r2, [pc, #168]	; (800d1e8 <pidMultiWii+0x374>)
 800d140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d142:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d146:	1acb      	subs	r3, r1, r3
 800d148:	60fb      	str	r3, [r7, #12]
        lastGyro[axis] = gyroData[axis];
 800d14a:	4a24      	ldr	r2, [pc, #144]	; (800d1dc <pidMultiWii+0x368>)
 800d14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d14e:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800d152:	4a25      	ldr	r2, [pc, #148]	; (800d1e8 <pidMultiWii+0x374>)
 800d154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d156:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        deltaSum = delta1[axis] + delta2[axis] + delta;
 800d15a:	4a24      	ldr	r2, [pc, #144]	; (800d1ec <pidMultiWii+0x378>)
 800d15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d15e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d162:	4923      	ldr	r1, [pc, #140]	; (800d1f0 <pidMultiWii+0x37c>)
 800d164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d166:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d16a:	4413      	add	r3, r2
 800d16c:	68fa      	ldr	r2, [r7, #12]
 800d16e:	4413      	add	r3, r2
 800d170:	60bb      	str	r3, [r7, #8]
        delta2[axis] = delta1[axis];
 800d172:	4a1e      	ldr	r2, [pc, #120]	; (800d1ec <pidMultiWii+0x378>)
 800d174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d176:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d17a:	491d      	ldr	r1, [pc, #116]	; (800d1f0 <pidMultiWii+0x37c>)
 800d17c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d17e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        delta1[axis] = delta;
 800d182:	491a      	ldr	r1, [pc, #104]	; (800d1ec <pidMultiWii+0x378>)
 800d184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DTerm = (deltaSum * dynD8[axis]) / 32;
 800d18c:	4a19      	ldr	r2, [pc, #100]	; (800d1f4 <pidMultiWii+0x380>)
 800d18e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d190:	4413      	add	r3, r2
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	461a      	mov	r2, r3
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	fb02 f303 	mul.w	r3, r2, r3
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	da00      	bge.n	800d1a2 <pidMultiWii+0x32e>
 800d1a0:	331f      	adds	r3, #31
 800d1a2:	115b      	asrs	r3, r3, #5
 800d1a4:	607b      	str	r3, [r7, #4]
        axisPID[axis] = PTerm + ITerm - DTerm;
 800d1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a8:	b29a      	uxth	r2, r3
 800d1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	4413      	add	r3, r2
 800d1b0:	b29a      	uxth	r2, r3
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	1ad3      	subs	r3, r2, r3
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	b219      	sxth	r1, r3
 800d1bc:	4a0e      	ldr	r2, [pc, #56]	; (800d1f8 <pidMultiWii+0x384>)
 800d1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800d1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	637b      	str	r3, [r7, #52]	; 0x34
 800d1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1cc:	2b02      	cmp	r3, #2
 800d1ce:	f77f ae72 	ble.w	800ceb6 <pidMultiWii+0x42>
    }
}
 800d1d2:	bf00      	nop
 800d1d4:	bf00      	nop
 800d1d6:	3738      	adds	r7, #56	; 0x38
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	200014e4 	.word	0x200014e4
 800d1e0:	200017e0 	.word	0x200017e0
 800d1e4:	66666667 	.word	0x66666667
 800d1e8:	200019c0 	.word	0x200019c0
 800d1ec:	200019c8 	.word	0x200019c8
 800d1f0:	200019d4 	.word	0x200019d4
 800d1f4:	200017e8 	.word	0x200017e8
 800d1f8:	20001808 	.word	0x20001808

0800d1fc <pidRewrite>:

#define GYRO_I_MAX 256

static void pidRewrite(void)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b08a      	sub	sp, #40	; 0x28
 800d200:	af00      	add	r7, sp, #0
    int32_t errorAngle = 0;
 800d202:	2300      	movs	r3, #0
 800d204:	61fb      	str	r3, [r7, #28]
    int32_t PTerm, ITerm, DTerm;
    static int32_t lastError[3] = { 0, 0, 0 };
    int32_t AngleRateTmp, RateError;

    // ----------PID controller----------
    for (axis = 0; axis < 3; axis++) {
 800d206:	2300      	movs	r3, #0
 800d208:	627b      	str	r3, [r7, #36]	; 0x24
 800d20a:	e0f2      	b.n	800d3f2 <pidRewrite+0x1f6>
        // -----Get the desired angle rate depending on flight mode
        if (axis == 2) { // YAW is always gyro-controlled (MAG correction is applied to rcCommand)
 800d20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20e:	2b02      	cmp	r3, #2
 800d210:	d10b      	bne.n	800d22a <pidRewrite+0x2e>
            AngleRateTmp = (((int32_t)(cfg.yawRate + 27) * rcCommand[YAW]) >> 5);
 800d212:	4b7c      	ldr	r3, [pc, #496]	; (800d404 <pidRewrite+0x208>)
 800d214:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d218:	331b      	adds	r3, #27
 800d21a:	4a7b      	ldr	r2, [pc, #492]	; (800d408 <pidRewrite+0x20c>)
 800d21c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800d220:	fb02 f303 	mul.w	r3, r2, r3
 800d224:	115b      	asrs	r3, r3, #5
 800d226:	623b      	str	r3, [r7, #32]
 800d228:	e053      	b.n	800d2d2 <pidRewrite+0xd6>
        } else {
            // calculate error and limit the angle to 50 degrees max inclination
            errorAngle = (constrain(rcCommand[axis] + GPS_angle[axis], -500, +500) - angle[axis] + cfg.angleTrim[axis]) / 10.0f; // 16 bits is ok here
 800d22a:	4a77      	ldr	r2, [pc, #476]	; (800d408 <pidRewrite+0x20c>)
 800d22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d232:	4619      	mov	r1, r3
 800d234:	4a75      	ldr	r2, [pc, #468]	; (800d40c <pidRewrite+0x210>)
 800d236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d238:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d23c:	440b      	add	r3, r1
 800d23e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d242:	4973      	ldr	r1, [pc, #460]	; (800d410 <pidRewrite+0x214>)
 800d244:	4618      	mov	r0, r3
 800d246:	f7f6 fdc7 	bl	8003dd8 <constrain>
 800d24a:	4602      	mov	r2, r0
 800d24c:	4971      	ldr	r1, [pc, #452]	; (800d414 <pidRewrite+0x218>)
 800d24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d250:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800d254:	1ad2      	subs	r2, r2, r3
 800d256:	496b      	ldr	r1, [pc, #428]	; (800d404 <pidRewrite+0x208>)
 800d258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25a:	3314      	adds	r3, #20
 800d25c:	005b      	lsls	r3, r3, #1
 800d25e:	440b      	add	r3, r1
 800d260:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d264:	4413      	add	r3, r2
 800d266:	ee07 3a90 	vmov	s15, r3
 800d26a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d26e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800d272:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d276:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d27a:	ee17 3a90 	vmov	r3, s15
 800d27e:	61fb      	str	r3, [r7, #28]
            if (!f.ANGLE_MODE) { //control is GYRO based (ACRO and HORIZON - direct sticks control is applied to rate PID
 800d280:	4b65      	ldr	r3, [pc, #404]	; (800d418 <pidRewrite+0x21c>)
 800d282:	78db      	ldrb	r3, [r3, #3]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d11c      	bne.n	800d2c2 <pidRewrite+0xc6>
                AngleRateTmp = ((int32_t)(cfg.rollPitchRate[axis] + 27) * rcCommand[axis]) >> 4;
 800d288:	4a5e      	ldr	r2, [pc, #376]	; (800d404 <pidRewrite+0x208>)
 800d28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d28c:	4413      	add	r3, r2
 800d28e:	3323      	adds	r3, #35	; 0x23
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	331b      	adds	r3, #27
 800d294:	495c      	ldr	r1, [pc, #368]	; (800d408 <pidRewrite+0x20c>)
 800d296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d298:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800d29c:	fb02 f303 	mul.w	r3, r2, r3
 800d2a0:	111b      	asrs	r3, r3, #4
 800d2a2:	623b      	str	r3, [r7, #32]

                if (f.HORIZON_MODE) {
 800d2a4:	4b5c      	ldr	r3, [pc, #368]	; (800d418 <pidRewrite+0x21c>)
 800d2a6:	791b      	ldrb	r3, [r3, #4]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d012      	beq.n	800d2d2 <pidRewrite+0xd6>
                    // mix up angle error to desired AngleRateTmp to add a little auto-level feel
                    AngleRateTmp += (errorAngle * cfg.I8[PIDLEVEL]) >> 8;
 800d2ac:	4b55      	ldr	r3, [pc, #340]	; (800d404 <pidRewrite+0x208>)
 800d2ae:	7c9b      	ldrb	r3, [r3, #18]
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	69fb      	ldr	r3, [r7, #28]
 800d2b4:	fb02 f303 	mul.w	r3, r2, r3
 800d2b8:	121b      	asrs	r3, r3, #8
 800d2ba:	6a3a      	ldr	r2, [r7, #32]
 800d2bc:	4413      	add	r3, r2
 800d2be:	623b      	str	r3, [r7, #32]
 800d2c0:	e007      	b.n	800d2d2 <pidRewrite+0xd6>
                }
            } else { // it's the ANGLE mode - control is angle based, so control loop is needed
                AngleRateTmp = (errorAngle * cfg.P8[PIDLEVEL]) >> 4;
 800d2c2:	4b50      	ldr	r3, [pc, #320]	; (800d404 <pidRewrite+0x208>)
 800d2c4:	7a1b      	ldrb	r3, [r3, #8]
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	fb02 f303 	mul.w	r3, r2, r3
 800d2ce:	111b      	asrs	r3, r3, #4
 800d2d0:	623b      	str	r3, [r7, #32]

        // --------low-level gyro-based PID. ----------
        // Used in stand-alone mode for ACRO, controlled by higher level regulators in other modes
        // -----calculate scaled error.AngleRates
        // multiplication of rcCommand corresponds to changing the sticks scaling here
        RateError = AngleRateTmp - gyroData[axis];
 800d2d2:	4a52      	ldr	r2, [pc, #328]	; (800d41c <pidRewrite+0x220>)
 800d2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d2da:	461a      	mov	r2, r3
 800d2dc:	6a3b      	ldr	r3, [r7, #32]
 800d2de:	1a9b      	subs	r3, r3, r2
 800d2e0:	61bb      	str	r3, [r7, #24]

        // -----calculate P component
        PTerm = (RateError * cfg.P8[axis]) >> 7;
 800d2e2:	4a48      	ldr	r2, [pc, #288]	; (800d404 <pidRewrite+0x208>)
 800d2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e6:	4413      	add	r3, r2
 800d2e8:	3301      	adds	r3, #1
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	69bb      	ldr	r3, [r7, #24]
 800d2f0:	fb02 f303 	mul.w	r3, r2, r3
 800d2f4:	11db      	asrs	r3, r3, #7
 800d2f6:	617b      	str	r3, [r7, #20]
        // -----calculate I component
        // there should be no division before accumulating the error to integrator, because the precision would be reduced.
        // Precision is critical, as I prevents from long-time drift. Thus, 32 bits integrator is used.
        // Time correction (to avoid different I scaling for different builds based on average cycle time)
        // is normalized to cycle time = 2048.
        errorGyroI[axis] = errorGyroI[axis] + ((RateError * cycleTime) >> 11) * cfg.I8[axis];
 800d2f8:	4a49      	ldr	r2, [pc, #292]	; (800d420 <pidRewrite+0x224>)
 800d2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d300:	4b48      	ldr	r3, [pc, #288]	; (800d424 <pidRewrite+0x228>)
 800d302:	881b      	ldrh	r3, [r3, #0]
 800d304:	4619      	mov	r1, r3
 800d306:	69bb      	ldr	r3, [r7, #24]
 800d308:	fb01 f303 	mul.w	r3, r1, r3
 800d30c:	12db      	asrs	r3, r3, #11
 800d30e:	483d      	ldr	r0, [pc, #244]	; (800d404 <pidRewrite+0x208>)
 800d310:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d312:	4401      	add	r1, r0
 800d314:	310b      	adds	r1, #11
 800d316:	7809      	ldrb	r1, [r1, #0]
 800d318:	fb01 f303 	mul.w	r3, r1, r3
 800d31c:	441a      	add	r2, r3
 800d31e:	4940      	ldr	r1, [pc, #256]	; (800d420 <pidRewrite+0x224>)
 800d320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // limit maximum integrator value to prevent WindUp - accumulating extreme values when system is saturated.
        // I coefficient (I8) moved before integration to make limiting independent from PID settings
        errorGyroI[axis] = constrain(errorGyroI[axis], (int32_t)(-GYRO_I_MAX) << 13, (int32_t)(+GYRO_I_MAX) << 13);
 800d326:	4a3e      	ldr	r2, [pc, #248]	; (800d420 <pidRewrite+0x224>)
 800d328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d32e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d332:	493d      	ldr	r1, [pc, #244]	; (800d428 <pidRewrite+0x22c>)
 800d334:	4618      	mov	r0, r3
 800d336:	f7f6 fd4f 	bl	8003dd8 <constrain>
 800d33a:	4602      	mov	r2, r0
 800d33c:	4938      	ldr	r1, [pc, #224]	; (800d420 <pidRewrite+0x224>)
 800d33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ITerm = errorGyroI[axis] >> 13;
 800d344:	4a36      	ldr	r2, [pc, #216]	; (800d420 <pidRewrite+0x224>)
 800d346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d34c:	135b      	asrs	r3, r3, #13
 800d34e:	613b      	str	r3, [r7, #16]

        //-----calculate D-term
        delta = RateError - lastError[axis];  // 16 bits is ok here, the dif between 2 consecutive gyro reads is limited to 800
 800d350:	4a36      	ldr	r2, [pc, #216]	; (800d42c <pidRewrite+0x230>)
 800d352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d358:	69ba      	ldr	r2, [r7, #24]
 800d35a:	1ad3      	subs	r3, r2, r3
 800d35c:	60fb      	str	r3, [r7, #12]
        lastError[axis] = RateError;
 800d35e:	4933      	ldr	r1, [pc, #204]	; (800d42c <pidRewrite+0x230>)
 800d360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d362:	69ba      	ldr	r2, [r7, #24]
 800d364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Correct difference by cycle time. Cycle time is jittery (can be different 2 times), so calculated difference
        // would be scaled by different dt each time. Division by dT fixes that.
        delta = (delta * ((uint16_t)0xFFFF / (cycleTime >> 4))) >> 6;
 800d368:	4b2e      	ldr	r3, [pc, #184]	; (800d424 <pidRewrite+0x228>)
 800d36a:	881b      	ldrh	r3, [r3, #0]
 800d36c:	091b      	lsrs	r3, r3, #4
 800d36e:	b29b      	uxth	r3, r3
 800d370:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d374:	fbb2 f3f3 	udiv	r3, r2, r3
 800d378:	b29b      	uxth	r3, r3
 800d37a:	461a      	mov	r2, r3
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	fb02 f303 	mul.w	r3, r2, r3
 800d382:	119b      	asrs	r3, r3, #6
 800d384:	60fb      	str	r3, [r7, #12]
        // add moving average here to reduce noise
        deltaSum = delta1[axis] + delta2[axis] + delta;
 800d386:	4a2a      	ldr	r2, [pc, #168]	; (800d430 <pidRewrite+0x234>)
 800d388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d38a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d38e:	4929      	ldr	r1, [pc, #164]	; (800d434 <pidRewrite+0x238>)
 800d390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d392:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d396:	4413      	add	r3, r2
 800d398:	68fa      	ldr	r2, [r7, #12]
 800d39a:	4413      	add	r3, r2
 800d39c:	60bb      	str	r3, [r7, #8]
        delta2[axis] = delta1[axis];
 800d39e:	4a24      	ldr	r2, [pc, #144]	; (800d430 <pidRewrite+0x234>)
 800d3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d3a6:	4923      	ldr	r1, [pc, #140]	; (800d434 <pidRewrite+0x238>)
 800d3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        delta1[axis] = delta;
 800d3ae:	4920      	ldr	r1, [pc, #128]	; (800d430 <pidRewrite+0x234>)
 800d3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b2:	68fa      	ldr	r2, [r7, #12]
 800d3b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DTerm = (deltaSum * cfg.D8[axis]) >> 8;
 800d3b8:	4a12      	ldr	r2, [pc, #72]	; (800d404 <pidRewrite+0x208>)
 800d3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3bc:	4413      	add	r3, r2
 800d3be:	3315      	adds	r3, #21
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	fb02 f303 	mul.w	r3, r2, r3
 800d3ca:	121b      	asrs	r3, r3, #8
 800d3cc:	607b      	str	r3, [r7, #4]

        // -----calculate total PID output
        axisPID[axis] = PTerm + ITerm + DTerm;
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	b29a      	uxth	r2, r3
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	4413      	add	r3, r2
 800d3d8:	b29a      	uxth	r2, r3
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	4413      	add	r3, r2
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	b219      	sxth	r1, r3
 800d3e4:	4a14      	ldr	r2, [pc, #80]	; (800d438 <pidRewrite+0x23c>)
 800d3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800d3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	627b      	str	r3, [r7, #36]	; 0x24
 800d3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f4:	2b02      	cmp	r3, #2
 800d3f6:	f77f af09 	ble.w	800d20c <pidRewrite+0x10>
    }
}
 800d3fa:	bf00      	nop
 800d3fc:	bf00      	nop
 800d3fe:	3728      	adds	r7, #40	; 0x28
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}
 800d404:	20000e08 	.word	0x20000e08
 800d408:	200017a8 	.word	0x200017a8
 800d40c:	2000183c 	.word	0x2000183c
 800d410:	fffffe0c 	.word	0xfffffe0c
 800d414:	200014f4 	.word	0x200014f4
 800d418:	2000174c 	.word	0x2000174c
 800d41c:	200014e4 	.word	0x200014e4
 800d420:	200018f8 	.word	0x200018f8
 800d424:	2000176c 	.word	0x2000176c
 800d428:	ffe00000 	.word	0xffe00000
 800d42c:	200019e0 	.word	0x200019e0
 800d430:	200019ec 	.word	0x200019ec
 800d434:	200019f8 	.word	0x200019f8
 800d438:	20001808 	.word	0x20001808

0800d43c <setPIDController>:

void setPIDController(int type)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b083      	sub	sp, #12
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
    switch (type) {
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2b01      	cmp	r3, #1
 800d448:	d003      	beq.n	800d452 <setPIDController+0x16>
        case 0:
        default:
            pid_controller = pidMultiWii;
 800d44a:	4b07      	ldr	r3, [pc, #28]	; (800d468 <setPIDController+0x2c>)
 800d44c:	4a07      	ldr	r2, [pc, #28]	; (800d46c <setPIDController+0x30>)
 800d44e:	601a      	str	r2, [r3, #0]
            break;
 800d450:	e003      	b.n	800d45a <setPIDController+0x1e>
        case 1:
            pid_controller = pidRewrite;
 800d452:	4b05      	ldr	r3, [pc, #20]	; (800d468 <setPIDController+0x2c>)
 800d454:	4a06      	ldr	r2, [pc, #24]	; (800d470 <setPIDController+0x34>)
 800d456:	601a      	str	r2, [r3, #0]
            break;
 800d458:	bf00      	nop
    }
}
 800d45a:	bf00      	nop
 800d45c:	370c      	adds	r7, #12
 800d45e:	46bd      	mov	sp, r7
 800d460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d464:	4770      	bx	lr
 800d466:	bf00      	nop
 800d468:	20000050 	.word	0x20000050
 800d46c:	0800ce75 	.word	0x0800ce75
 800d470:	0800d1fd 	.word	0x0800d1fd

0800d474 <taskComputeRc>:
#ifdef BARO
    static int16_t initialThrottleHold;
#endif

uint16_t taskComputeRc(PifTask *p_task)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b086      	sub	sp, #24
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
    static uint8_t rcDelayCommand;      // this indicates the number of time (multiple of RC measurement at 50Hz) the sticks must be maintained to run or switch off motors
    static uint8_t rcSticks;            // this hold sticks position for command combos
    uint8_t stTmp = 0;
 800d47c:	2300      	movs	r3, #0
 800d47e:	75fb      	strb	r3, [r7, #23]
    int i;
    uint32_t auxState = 0;
 800d480:	2300      	movs	r3, #0
 800d482:	60fb      	str	r3, [r7, #12]
#ifdef GPS
    static uint8_t GPSNavReset = 1;
#endif
    bool isThrottleLow = false;
 800d484:	2300      	movs	r3, #0
 800d486:	72fb      	strb	r3, [r7, #11]

    (void)p_task;

        computeRC();
 800d488:	f7ff fbf4 	bl	800cc74 <computeRC>

        // in 3D mode, we need to be able to disarm by switch at any time
        if (feature(FEATURE_3D)) {
 800d48c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d490:	f7f9 fe06 	bl	80070a0 <feature>
 800d494:	4603      	mov	r3, r0
 800d496:	2b00      	cmp	r3, #0
 800d498:	d005      	beq.n	800d4a6 <taskComputeRc+0x32>
            if (!rcOptions[BOXARM])
 800d49a:	4b9d      	ldr	r3, [pc, #628]	; (800d710 <taskComputeRc+0x29c>)
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d101      	bne.n	800d4a6 <taskComputeRc+0x32>
                mwDisarm();
 800d4a2:	f7ff fcc5 	bl	800ce30 <mwDisarm>
        }

        // Read rssi value
        rssi = RSSI_getValue();
 800d4a6:	f001 facd 	bl	800ea44 <RSSI_getValue>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	4b99      	ldr	r3, [pc, #612]	; (800d714 <taskComputeRc+0x2a0>)
 800d4b0:	801a      	strh	r2, [r3, #0]

        // Failsafe routine
        if (feature(FEATURE_FAILSAFE) || feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d4b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d4b6:	f7f9 fdf3 	bl	80070a0 <feature>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d106      	bne.n	800d4ce <taskComputeRc+0x5a>
 800d4c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d4c4:	f7f9 fdec 	bl	80070a0 <feature>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d072      	beq.n	800d5b4 <taskComputeRc+0x140>
            if (failsafeCnt > (5 * cfg.failsafe_delay) && f.ARMED) { // Stabilize, and set Throttle to specified level
 800d4ce:	4b92      	ldr	r3, [pc, #584]	; (800d718 <taskComputeRc+0x2a4>)
 800d4d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	4b91      	ldr	r3, [pc, #580]	; (800d71c <taskComputeRc+0x2a8>)
 800d4d8:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d4dc:	461a      	mov	r2, r3
 800d4de:	4613      	mov	r3, r2
 800d4e0:	009b      	lsls	r3, r3, #2
 800d4e2:	4413      	add	r3, r2
 800d4e4:	4299      	cmp	r1, r3
 800d4e6:	dd43      	ble.n	800d570 <taskComputeRc+0xfc>
 800d4e8:	4b8d      	ldr	r3, [pc, #564]	; (800d720 <taskComputeRc+0x2ac>)
 800d4ea:	785b      	ldrb	r3, [r3, #1]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d03f      	beq.n	800d570 <taskComputeRc+0xfc>
                for (i = 0; i < 3; i++)
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	613b      	str	r3, [r7, #16]
 800d4f4:	e00a      	b.n	800d50c <taskComputeRc+0x98>
                    rcData[i] = mcfg.midrc;      // after specified guard time after RC signal is lost (in 0.1sec)
 800d4f6:	4b8b      	ldr	r3, [pc, #556]	; (800d724 <taskComputeRc+0x2b0>)
 800d4f8:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d4fc:	b219      	sxth	r1, r3
 800d4fe:	4a8a      	ldr	r2, [pc, #552]	; (800d728 <taskComputeRc+0x2b4>)
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (i = 0; i < 3; i++)
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	3301      	adds	r3, #1
 800d50a:	613b      	str	r3, [r7, #16]
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	2b02      	cmp	r3, #2
 800d510:	ddf1      	ble.n	800d4f6 <taskComputeRc+0x82>
                rcData[THROTTLE] = cfg.failsafe_throttle;
 800d512:	4b82      	ldr	r3, [pc, #520]	; (800d71c <taskComputeRc+0x2a8>)
 800d514:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800d518:	b21a      	sxth	r2, r3
 800d51a:	4b83      	ldr	r3, [pc, #524]	; (800d728 <taskComputeRc+0x2b4>)
 800d51c:	80da      	strh	r2, [r3, #6]
                buzzer(BUZZER_TX_LOST_ARMED);
 800d51e:	2003      	movs	r0, #3
 800d520:	f7f6 fdea 	bl	80040f8 <buzzer>
                if ((failsafeCnt > 5 * (cfg.failsafe_delay + cfg.failsafe_off_delay)) && !f.FW_FAILSAFE_RTH_ENABLE) {  // Turn OFF motors after specified Time (in 0.1sec)
 800d524:	4b7c      	ldr	r3, [pc, #496]	; (800d718 <taskComputeRc+0x2a4>)
 800d526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d52a:	4619      	mov	r1, r3
 800d52c:	4b7b      	ldr	r3, [pc, #492]	; (800d71c <taskComputeRc+0x2a8>)
 800d52e:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d532:	461a      	mov	r2, r3
 800d534:	4b79      	ldr	r3, [pc, #484]	; (800d71c <taskComputeRc+0x2a8>)
 800d536:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 800d53a:	441a      	add	r2, r3
 800d53c:	4613      	mov	r3, r2
 800d53e:	009b      	lsls	r3, r3, #2
 800d540:	4413      	add	r3, r2
 800d542:	4299      	cmp	r1, r3
 800d544:	dd0b      	ble.n	800d55e <taskComputeRc+0xea>
 800d546:	4b76      	ldr	r3, [pc, #472]	; (800d720 <taskComputeRc+0x2ac>)
 800d548:	7c9b      	ldrb	r3, [r3, #18]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d107      	bne.n	800d55e <taskComputeRc+0xea>
                    mwDisarm();             // This will prevent the copter to automatically rearm if failsafe shuts it down and prevents
 800d54e:	f7ff fc6f 	bl	800ce30 <mwDisarm>
                    f.OK_TO_ARM = 0;        // to restart accidentely by just reconnect to the tx - you will have to switch off first to rearm
 800d552:	4b73      	ldr	r3, [pc, #460]	; (800d720 <taskComputeRc+0x2ac>)
 800d554:	2200      	movs	r2, #0
 800d556:	701a      	strb	r2, [r3, #0]
                    buzzer(BUZZER_TX_LOST);
 800d558:	2004      	movs	r0, #4
 800d55a:	f7f6 fdcd 	bl	80040f8 <buzzer>
                }
                failsafeEvents++;
 800d55e:	4b73      	ldr	r3, [pc, #460]	; (800d72c <taskComputeRc+0x2b8>)
 800d560:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d564:	b29b      	uxth	r3, r3
 800d566:	3301      	adds	r3, #1
 800d568:	b29b      	uxth	r3, r3
 800d56a:	b21a      	sxth	r2, r3
 800d56c:	4b6f      	ldr	r3, [pc, #444]	; (800d72c <taskComputeRc+0x2b8>)
 800d56e:	801a      	strh	r2, [r3, #0]
            }
            if (failsafeCnt > (5 * cfg.failsafe_delay) && !f.ARMED) {  // Turn off "Ok To arm to prevent the motors from spinning after repowering the RX with low throttle and aux to arm
 800d570:	4b69      	ldr	r3, [pc, #420]	; (800d718 <taskComputeRc+0x2a4>)
 800d572:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d576:	4619      	mov	r1, r3
 800d578:	4b68      	ldr	r3, [pc, #416]	; (800d71c <taskComputeRc+0x2a8>)
 800d57a:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d57e:	461a      	mov	r2, r3
 800d580:	4613      	mov	r3, r2
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	4413      	add	r3, r2
 800d586:	4299      	cmp	r1, r3
 800d588:	dd0b      	ble.n	800d5a2 <taskComputeRc+0x12e>
 800d58a:	4b65      	ldr	r3, [pc, #404]	; (800d720 <taskComputeRc+0x2ac>)
 800d58c:	785b      	ldrb	r3, [r3, #1]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d107      	bne.n	800d5a2 <taskComputeRc+0x12e>
                mwDisarm();         // This will prevent the copter to automatically rearm if failsafe shuts it down and prevents
 800d592:	f7ff fc4d 	bl	800ce30 <mwDisarm>
                f.OK_TO_ARM = 0;    // to restart accidentely by just reconnect to the tx - you will have to switch off first to rearm
 800d596:	4b62      	ldr	r3, [pc, #392]	; (800d720 <taskComputeRc+0x2ac>)
 800d598:	2200      	movs	r2, #0
 800d59a:	701a      	strb	r2, [r3, #0]
                buzzer(BUZZER_TX_LOST);
 800d59c:	2004      	movs	r0, #4
 800d59e:	f7f6 fdab 	bl	80040f8 <buzzer>
            }
            failsafeCnt++;
 800d5a2:	4b5d      	ldr	r3, [pc, #372]	; (800d718 <taskComputeRc+0x2a4>)
 800d5a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d5a8:	b29b      	uxth	r3, r3
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	b21a      	sxth	r2, r3
 800d5b0:	4b59      	ldr	r3, [pc, #356]	; (800d718 <taskComputeRc+0x2a4>)
 800d5b2:	801a      	strh	r2, [r3, #0]
        }
        // end of failsafe routine - next change is made with RcOptions setting

        // ------------------ STICKS COMMAND HANDLER --------------------
        // checking sticks positions
        for (i = 0; i < 4; i++) {
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	613b      	str	r3, [r7, #16]
 800d5b8:	e021      	b.n	800d5fe <taskComputeRc+0x18a>
            stTmp >>= 2;
 800d5ba:	7dfb      	ldrb	r3, [r7, #23]
 800d5bc:	089b      	lsrs	r3, r3, #2
 800d5be:	75fb      	strb	r3, [r7, #23]
            if (rcData[i] > mcfg.mincheck)
 800d5c0:	4a59      	ldr	r2, [pc, #356]	; (800d728 <taskComputeRc+0x2b4>)
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	4b56      	ldr	r3, [pc, #344]	; (800d724 <taskComputeRc+0x2b0>)
 800d5cc:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	dd03      	ble.n	800d5dc <taskComputeRc+0x168>
                stTmp |= 0x80;  // check for MIN
 800d5d4:	7dfb      	ldrb	r3, [r7, #23]
 800d5d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d5da:	75fb      	strb	r3, [r7, #23]
            if (rcData[i] < mcfg.maxcheck)
 800d5dc:	4a52      	ldr	r2, [pc, #328]	; (800d728 <taskComputeRc+0x2b4>)
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	4b4f      	ldr	r3, [pc, #316]	; (800d724 <taskComputeRc+0x2b0>)
 800d5e8:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	da03      	bge.n	800d5f8 <taskComputeRc+0x184>
                stTmp |= 0x40;  // check for MAX
 800d5f0:	7dfb      	ldrb	r3, [r7, #23]
 800d5f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5f6:	75fb      	strb	r3, [r7, #23]
        for (i = 0; i < 4; i++) {
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	613b      	str	r3, [r7, #16]
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	2b03      	cmp	r3, #3
 800d602:	ddda      	ble.n	800d5ba <taskComputeRc+0x146>
        }
        if (stTmp == rcSticks) {
 800d604:	4b4a      	ldr	r3, [pc, #296]	; (800d730 <taskComputeRc+0x2bc>)
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	7dfa      	ldrb	r2, [r7, #23]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d10a      	bne.n	800d624 <taskComputeRc+0x1b0>
            if (rcDelayCommand < 250)
 800d60e:	4b49      	ldr	r3, [pc, #292]	; (800d734 <taskComputeRc+0x2c0>)
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	2bf9      	cmp	r3, #249	; 0xf9
 800d614:	d809      	bhi.n	800d62a <taskComputeRc+0x1b6>
                rcDelayCommand++;
 800d616:	4b47      	ldr	r3, [pc, #284]	; (800d734 <taskComputeRc+0x2c0>)
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	3301      	adds	r3, #1
 800d61c:	b2da      	uxtb	r2, r3
 800d61e:	4b45      	ldr	r3, [pc, #276]	; (800d734 <taskComputeRc+0x2c0>)
 800d620:	701a      	strb	r2, [r3, #0]
 800d622:	e002      	b.n	800d62a <taskComputeRc+0x1b6>
        } else
            rcDelayCommand = 0;
 800d624:	4b43      	ldr	r3, [pc, #268]	; (800d734 <taskComputeRc+0x2c0>)
 800d626:	2200      	movs	r2, #0
 800d628:	701a      	strb	r2, [r3, #0]
        rcSticks = stTmp;
 800d62a:	4a41      	ldr	r2, [pc, #260]	; (800d730 <taskComputeRc+0x2bc>)
 800d62c:	7dfb      	ldrb	r3, [r7, #23]
 800d62e:	7013      	strb	r3, [r2, #0]

        // perform actions
        if (feature(FEATURE_3D) && (rcData[THROTTLE] > (mcfg.midrc - mcfg.deadband3d_throttle) && rcData[THROTTLE] < (mcfg.midrc + mcfg.deadband3d_throttle)))
 800d630:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d634:	f7f9 fd34 	bl	80070a0 <feature>
 800d638:	4603      	mov	r3, r0
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d01e      	beq.n	800d67c <taskComputeRc+0x208>
 800d63e:	4b3a      	ldr	r3, [pc, #232]	; (800d728 <taskComputeRc+0x2b4>)
 800d640:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d644:	461a      	mov	r2, r3
 800d646:	4b37      	ldr	r3, [pc, #220]	; (800d724 <taskComputeRc+0x2b0>)
 800d648:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d64c:	4619      	mov	r1, r3
 800d64e:	4b35      	ldr	r3, [pc, #212]	; (800d724 <taskComputeRc+0x2b0>)
 800d650:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800d654:	1acb      	subs	r3, r1, r3
 800d656:	429a      	cmp	r2, r3
 800d658:	dd10      	ble.n	800d67c <taskComputeRc+0x208>
 800d65a:	4b33      	ldr	r3, [pc, #204]	; (800d728 <taskComputeRc+0x2b4>)
 800d65c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d660:	461a      	mov	r2, r3
 800d662:	4b30      	ldr	r3, [pc, #192]	; (800d724 <taskComputeRc+0x2b0>)
 800d664:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d668:	4619      	mov	r1, r3
 800d66a:	4b2e      	ldr	r3, [pc, #184]	; (800d724 <taskComputeRc+0x2b0>)
 800d66c:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800d670:	440b      	add	r3, r1
 800d672:	429a      	cmp	r2, r3
 800d674:	da02      	bge.n	800d67c <taskComputeRc+0x208>
            isThrottleLow = true;
 800d676:	2301      	movs	r3, #1
 800d678:	72fb      	strb	r3, [r7, #11]
 800d67a:	e014      	b.n	800d6a6 <taskComputeRc+0x232>
        else if (!feature(FEATURE_3D) && (rcData[THROTTLE] < mcfg.mincheck))
 800d67c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d680:	f7f9 fd0e 	bl	80070a0 <feature>
 800d684:	4603      	mov	r3, r0
 800d686:	f083 0301 	eor.w	r3, r3, #1
 800d68a:	b2db      	uxtb	r3, r3
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d00a      	beq.n	800d6a6 <taskComputeRc+0x232>
 800d690:	4b25      	ldr	r3, [pc, #148]	; (800d728 <taskComputeRc+0x2b4>)
 800d692:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d696:	461a      	mov	r2, r3
 800d698:	4b22      	ldr	r3, [pc, #136]	; (800d724 <taskComputeRc+0x2b0>)
 800d69a:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	da01      	bge.n	800d6a6 <taskComputeRc+0x232>
            isThrottleLow = true;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	72fb      	strb	r3, [r7, #11]
        if (isThrottleLow) {
 800d6a6:	7afb      	ldrb	r3, [r7, #11]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d01c      	beq.n	800d6e6 <taskComputeRc+0x272>
            errorGyroI[ROLL] = 0;
 800d6ac:	4b22      	ldr	r3, [pc, #136]	; (800d738 <taskComputeRc+0x2c4>)
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	601a      	str	r2, [r3, #0]
            errorGyroI[PITCH] = 0;
 800d6b2:	4b21      	ldr	r3, [pc, #132]	; (800d738 <taskComputeRc+0x2c4>)
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	605a      	str	r2, [r3, #4]
            errorGyroI[YAW] = 0;
 800d6b8:	4b1f      	ldr	r3, [pc, #124]	; (800d738 <taskComputeRc+0x2c4>)
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	609a      	str	r2, [r3, #8]
            errorAngleI[ROLL] = 0;
 800d6be:	4b1f      	ldr	r3, [pc, #124]	; (800d73c <taskComputeRc+0x2c8>)
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	601a      	str	r2, [r3, #0]
            errorAngleI[PITCH] = 0;
 800d6c4:	4b1d      	ldr	r3, [pc, #116]	; (800d73c <taskComputeRc+0x2c8>)
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	605a      	str	r2, [r3, #4]
            if (cfg.activate[BOXARM] > 0) { // Arming via ARM BOX
 800d6ca:	4b14      	ldr	r3, [pc, #80]	; (800d71c <taskComputeRc+0x2a8>)
 800d6cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d009      	beq.n	800d6e6 <taskComputeRc+0x272>
                if (rcOptions[BOXARM] && f.OK_TO_ARM)
 800d6d2:	4b0f      	ldr	r3, [pc, #60]	; (800d710 <taskComputeRc+0x29c>)
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d005      	beq.n	800d6e6 <taskComputeRc+0x272>
 800d6da:	4b11      	ldr	r3, [pc, #68]	; (800d720 <taskComputeRc+0x2ac>)
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d001      	beq.n	800d6e6 <taskComputeRc+0x272>
                    mwArm();
 800d6e2:	f7ff fb61 	bl	800cda8 <mwArm>
            }
        }

        if (cfg.activate[BOXARM] > 0) { // Disarming via ARM BOX
 800d6e6:	4b0d      	ldr	r3, [pc, #52]	; (800d71c <taskComputeRc+0x2a8>)
 800d6e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d02d      	beq.n	800d74a <taskComputeRc+0x2d6>
            if (!rcOptions[BOXARM] && f.ARMED) {
 800d6ee:	4b08      	ldr	r3, [pc, #32]	; (800d710 <taskComputeRc+0x29c>)
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d129      	bne.n	800d74a <taskComputeRc+0x2d6>
 800d6f6:	4b0a      	ldr	r3, [pc, #40]	; (800d720 <taskComputeRc+0x2ac>)
 800d6f8:	785b      	ldrb	r3, [r3, #1]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d025      	beq.n	800d74a <taskComputeRc+0x2d6>
                if (mcfg.disarm_kill_switch) {
 800d6fe:	4b09      	ldr	r3, [pc, #36]	; (800d724 <taskComputeRc+0x2b0>)
 800d700:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800d704:	2b00      	cmp	r3, #0
 800d706:	d01b      	beq.n	800d740 <taskComputeRc+0x2cc>
                    mwDisarm();
 800d708:	f7ff fb92 	bl	800ce30 <mwDisarm>
 800d70c:	e01d      	b.n	800d74a <taskComputeRc+0x2d6>
 800d70e:	bf00      	nop
 800d710:	200017ec 	.word	0x200017ec
 800d714:	200017d8 	.word	0x200017d8
 800d718:	2000177e 	.word	0x2000177e
 800d71c:	20000e08 	.word	0x20000e08
 800d720:	2000174c 	.word	0x2000174c
 800d724:	2000089c 	.word	0x2000089c
 800d728:	20001784 	.word	0x20001784
 800d72c:	20001780 	.word	0x20001780
 800d730:	20001a04 	.word	0x20001a04
 800d734:	20001a05 	.word	0x20001a05
 800d738:	200018f8 	.word	0x200018f8
 800d73c:	20001904 	.word	0x20001904
                } else if (isThrottleLow) {
 800d740:	7afb      	ldrb	r3, [r7, #11]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d001      	beq.n	800d74a <taskComputeRc+0x2d6>
                    mwDisarm();
 800d746:	f7ff fb73 	bl	800ce30 <mwDisarm>
                }
            }
        }

        if (rcDelayCommand == 20) {
 800d74a:	4b82      	ldr	r3, [pc, #520]	; (800d954 <taskComputeRc+0x4e0>)
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	2b14      	cmp	r3, #20
 800d750:	f040 8131 	bne.w	800d9b6 <taskComputeRc+0x542>
            if (f.ARMED) {      // actions during armed
 800d754:	4b80      	ldr	r3, [pc, #512]	; (800d958 <taskComputeRc+0x4e4>)
 800d756:	785b      	ldrb	r3, [r3, #1]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d01c      	beq.n	800d796 <taskComputeRc+0x322>
                // Disarm on throttle down + yaw
                if (cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_CE))
 800d75c:	4b7f      	ldr	r3, [pc, #508]	; (800d95c <taskComputeRc+0x4e8>)
 800d75e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d760:	2b00      	cmp	r3, #0
 800d762:	d105      	bne.n	800d770 <taskComputeRc+0x2fc>
 800d764:	4b7e      	ldr	r3, [pc, #504]	; (800d960 <taskComputeRc+0x4ec>)
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	2b5f      	cmp	r3, #95	; 0x5f
 800d76a:	d101      	bne.n	800d770 <taskComputeRc+0x2fc>
                    mwDisarm();
 800d76c:	f7ff fb60 	bl	800ce30 <mwDisarm>
                // Disarm on roll (only when retarded_arm is enabled)
                if (mcfg.retarded_arm && cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_LO))
 800d770:	4b7c      	ldr	r3, [pc, #496]	; (800d964 <taskComputeRc+0x4f0>)
 800d772:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 800d776:	2b00      	cmp	r3, #0
 800d778:	f000 811d 	beq.w	800d9b6 <taskComputeRc+0x542>
 800d77c:	4b77      	ldr	r3, [pc, #476]	; (800d95c <taskComputeRc+0x4e8>)
 800d77e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d780:	2b00      	cmp	r3, #0
 800d782:	f040 8118 	bne.w	800d9b6 <taskComputeRc+0x542>
 800d786:	4b76      	ldr	r3, [pc, #472]	; (800d960 <taskComputeRc+0x4ec>)
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	2b7d      	cmp	r3, #125	; 0x7d
 800d78c:	f040 8113 	bne.w	800d9b6 <taskComputeRc+0x542>
                    mwDisarm();
 800d790:	f7ff fb4e 	bl	800ce30 <mwDisarm>
 800d794:	e10f      	b.n	800d9b6 <taskComputeRc+0x542>
            } else {            // actions during not armed
                i = 0;
 800d796:	2300      	movs	r3, #0
 800d798:	613b      	str	r3, [r7, #16]
                // GYRO calibration
                if (rcSticks == THR_LO + YAW_LO + PIT_LO + ROL_CE) {
 800d79a:	4b71      	ldr	r3, [pc, #452]	; (800d960 <taskComputeRc+0x4ec>)
 800d79c:	781b      	ldrb	r3, [r3, #0]
 800d79e:	2b57      	cmp	r3, #87	; 0x57
 800d7a0:	d122      	bne.n	800d7e8 <taskComputeRc+0x374>
                    calibratingG = CALIBRATING_GYRO_CYCLES;
 800d7a2:	4b71      	ldr	r3, [pc, #452]	; (800d968 <taskComputeRc+0x4f4>)
 800d7a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d7a8:	801a      	strh	r2, [r3, #0]
#ifdef GPS
                    if (feature(FEATURE_GPS))
 800d7aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d7ae:	f7f9 fc77 	bl	80070a0 <feature>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d001      	beq.n	800d7bc <taskComputeRc+0x348>
                        GPS_reset_home_position();
 800d7b8:	f7fb fb6e 	bl	8008e98 <GPS_reset_home_position>
#endif
                    if (sensors(SENSOR_BARO))
 800d7bc:	2004      	movs	r0, #4
 800d7be:	f7f9 fc27 	bl	8007010 <sensors>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d002      	beq.n	800d7ce <taskComputeRc+0x35a>
                        calibratingB = 10; // calibrate baro to new ground level (10 * 25 ms = ~250 ms non blocking)
 800d7c8:	4b68      	ldr	r3, [pc, #416]	; (800d96c <taskComputeRc+0x4f8>)
 800d7ca:	220a      	movs	r2, #10
 800d7cc:	801a      	strh	r2, [r3, #0]
                    if (!sensors(SENSOR_MAG))
 800d7ce:	2008      	movs	r0, #8
 800d7d0:	f7f9 fc1e 	bl	8007010 <sensors>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	f083 0301 	eor.w	r3, r3, #1
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d032      	beq.n	800d846 <taskComputeRc+0x3d2>
                        heading = 0; // reset heading to zero after gyro calibration
 800d7e0:	4b63      	ldr	r3, [pc, #396]	; (800d970 <taskComputeRc+0x4fc>)
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	801a      	strh	r2, [r3, #0]
 800d7e6:	e02e      	b.n	800d846 <taskComputeRc+0x3d2>
                    // Inflight ACC Calibration
                } else if (feature(FEATURE_INFLIGHT_ACC_CAL) && (rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_HI)) {
 800d7e8:	2004      	movs	r0, #4
 800d7ea:	f7f9 fc59 	bl	80070a0 <feature>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d028      	beq.n	800d846 <taskComputeRc+0x3d2>
 800d7f4:	4b5a      	ldr	r3, [pc, #360]	; (800d960 <taskComputeRc+0x4ec>)
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	2b5a      	cmp	r3, #90	; 0x5a
 800d7fa:	d124      	bne.n	800d846 <taskComputeRc+0x3d2>
                    if (AccInflightCalibrationMeasurementDone) {        // trigger saving into eeprom after landing
 800d7fc:	4b5d      	ldr	r3, [pc, #372]	; (800d974 <taskComputeRc+0x500>)
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d006      	beq.n	800d812 <taskComputeRc+0x39e>
                        AccInflightCalibrationMeasurementDone = false;
 800d804:	4b5b      	ldr	r3, [pc, #364]	; (800d974 <taskComputeRc+0x500>)
 800d806:	2200      	movs	r2, #0
 800d808:	701a      	strb	r2, [r3, #0]
                        AccInflightCalibrationSavetoEEProm = true;
 800d80a:	4b5b      	ldr	r3, [pc, #364]	; (800d978 <taskComputeRc+0x504>)
 800d80c:	2201      	movs	r2, #1
 800d80e:	701a      	strb	r2, [r3, #0]
 800d810:	e019      	b.n	800d846 <taskComputeRc+0x3d2>
                    } else {
                        AccInflightCalibrationArmed = !AccInflightCalibrationArmed;
 800d812:	4b5a      	ldr	r3, [pc, #360]	; (800d97c <taskComputeRc+0x508>)
 800d814:	781b      	ldrb	r3, [r3, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	bf14      	ite	ne
 800d81a:	2301      	movne	r3, #1
 800d81c:	2300      	moveq	r3, #0
 800d81e:	b2db      	uxtb	r3, r3
 800d820:	f083 0301 	eor.w	r3, r3, #1
 800d824:	b2db      	uxtb	r3, r3
 800d826:	f003 0301 	and.w	r3, r3, #1
 800d82a:	b2da      	uxtb	r2, r3
 800d82c:	4b53      	ldr	r3, [pc, #332]	; (800d97c <taskComputeRc+0x508>)
 800d82e:	701a      	strb	r2, [r3, #0]
                        if (AccInflightCalibrationArmed) {
 800d830:	4b52      	ldr	r3, [pc, #328]	; (800d97c <taskComputeRc+0x508>)
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d003      	beq.n	800d840 <taskComputeRc+0x3cc>
                            buzzer(BUZZER_ACC_CALIBRATION);
 800d838:	200a      	movs	r0, #10
 800d83a:	f7f6 fc5d 	bl	80040f8 <buzzer>
 800d83e:	e002      	b.n	800d846 <taskComputeRc+0x3d2>
                        } else {
                            buzzer(BUZZER_ACC_CALIBRATION_FAIL);
 800d840:	200b      	movs	r0, #11
 800d842:	f7f6 fc59 	bl	80040f8 <buzzer>
                        }
                    }
                }

                // Multiple configuration profiles
                if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_LO)          // ROLL left  -> Profile 1
 800d846:	4b46      	ldr	r3, [pc, #280]	; (800d960 <taskComputeRc+0x4ec>)
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	2b5d      	cmp	r3, #93	; 0x5d
 800d84c:	d102      	bne.n	800d854 <taskComputeRc+0x3e0>
                    i = 1;
 800d84e:	2301      	movs	r3, #1
 800d850:	613b      	str	r3, [r7, #16]
 800d852:	e00c      	b.n	800d86e <taskComputeRc+0x3fa>
                else if (rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_CE)     // PITCH up   -> Profile 2
 800d854:	4b42      	ldr	r3, [pc, #264]	; (800d960 <taskComputeRc+0x4ec>)
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	2b5b      	cmp	r3, #91	; 0x5b
 800d85a:	d102      	bne.n	800d862 <taskComputeRc+0x3ee>
                    i = 2;
 800d85c:	2302      	movs	r3, #2
 800d85e:	613b      	str	r3, [r7, #16]
 800d860:	e005      	b.n	800d86e <taskComputeRc+0x3fa>
                else if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_HI)     // ROLL right -> Profile 3
 800d862:	4b3f      	ldr	r3, [pc, #252]	; (800d960 <taskComputeRc+0x4ec>)
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	2b5e      	cmp	r3, #94	; 0x5e
 800d868:	d101      	bne.n	800d86e <taskComputeRc+0x3fa>
                    i = 3;
 800d86a:	2303      	movs	r3, #3
 800d86c:	613b      	str	r3, [r7, #16]
                if (i) {
 800d86e:	693b      	ldr	r3, [r7, #16]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d011      	beq.n	800d898 <taskComputeRc+0x424>
                    mcfg.current_profile = i - 1;
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	b2db      	uxtb	r3, r3
 800d878:	3b01      	subs	r3, #1
 800d87a:	b2da      	uxtb	r2, r3
 800d87c:	4b39      	ldr	r3, [pc, #228]	; (800d964 <taskComputeRc+0x4f0>)
 800d87e:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
                    writeEEPROM(0, false);
 800d882:	2100      	movs	r1, #0
 800d884:	2000      	movs	r0, #0
 800d886:	f7f9 f829 	bl	80068dc <writeEEPROM>
                    blinkLED(2, 40, i);
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	461a      	mov	r2, r3
 800d890:	2128      	movs	r1, #40	; 0x28
 800d892:	2002      	movs	r0, #2
 800d894:	f7fe fd9e 	bl	800c3d4 <blinkLED>
                    // TODO alarmArray[0] = i;
                }

                // Arm via YAW
                if (cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_HI + PIT_CE + ROL_CE))
 800d898:	4b30      	ldr	r3, [pc, #192]	; (800d95c <taskComputeRc+0x4e8>)
 800d89a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d106      	bne.n	800d8ae <taskComputeRc+0x43a>
 800d8a0:	4b2f      	ldr	r3, [pc, #188]	; (800d960 <taskComputeRc+0x4ec>)
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	2b6f      	cmp	r3, #111	; 0x6f
 800d8a6:	d102      	bne.n	800d8ae <taskComputeRc+0x43a>
                    mwArm();
 800d8a8:	f7ff fa7e 	bl	800cda8 <mwArm>
 800d8ac:	e01f      	b.n	800d8ee <taskComputeRc+0x47a>
                // Arm via ROLL
                else if (mcfg.retarded_arm && cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_HI))
 800d8ae:	4b2d      	ldr	r3, [pc, #180]	; (800d964 <taskComputeRc+0x4f0>)
 800d8b0:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d00a      	beq.n	800d8ce <taskComputeRc+0x45a>
 800d8b8:	4b28      	ldr	r3, [pc, #160]	; (800d95c <taskComputeRc+0x4e8>)
 800d8ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d106      	bne.n	800d8ce <taskComputeRc+0x45a>
 800d8c0:	4b27      	ldr	r3, [pc, #156]	; (800d960 <taskComputeRc+0x4ec>)
 800d8c2:	781b      	ldrb	r3, [r3, #0]
 800d8c4:	2b7e      	cmp	r3, #126	; 0x7e
 800d8c6:	d102      	bne.n	800d8ce <taskComputeRc+0x45a>
                    mwArm();
 800d8c8:	f7ff fa6e 	bl	800cda8 <mwArm>
 800d8cc:	e00f      	b.n	800d8ee <taskComputeRc+0x47a>
                // Calibrating Acc
                else if (rcSticks == THR_HI + YAW_LO + PIT_LO + ROL_CE)
 800d8ce:	4b24      	ldr	r3, [pc, #144]	; (800d960 <taskComputeRc+0x4ec>)
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	2b97      	cmp	r3, #151	; 0x97
 800d8d4:	d104      	bne.n	800d8e0 <taskComputeRc+0x46c>
                    calibratingA = CALIBRATING_ACC_CYCLES;
 800d8d6:	4b2a      	ldr	r3, [pc, #168]	; (800d980 <taskComputeRc+0x50c>)
 800d8d8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d8dc:	801a      	strh	r2, [r3, #0]
 800d8de:	e006      	b.n	800d8ee <taskComputeRc+0x47a>
                // Calibrating Mag
                else if (rcSticks == THR_HI + YAW_HI + PIT_LO + ROL_CE)
 800d8e0:	4b1f      	ldr	r3, [pc, #124]	; (800d960 <taskComputeRc+0x4ec>)
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	2ba7      	cmp	r3, #167	; 0xa7
 800d8e6:	d102      	bne.n	800d8ee <taskComputeRc+0x47a>
                    f.CALIBRATE_MAG = 1;
 800d8e8:	4b1b      	ldr	r3, [pc, #108]	; (800d958 <taskComputeRc+0x4e4>)
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	739a      	strb	r2, [r3, #14]
                i = 0;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	613b      	str	r3, [r7, #16]
                // Acc Trim
                if (rcSticks == THR_HI + YAW_CE + PIT_HI + ROL_CE) {
 800d8f2:	4b1b      	ldr	r3, [pc, #108]	; (800d960 <taskComputeRc+0x4ec>)
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	2bbb      	cmp	r3, #187	; 0xbb
 800d8f8:	d10b      	bne.n	800d912 <taskComputeRc+0x49e>
                    cfg.angleTrim[PITCH] += 2;
 800d8fa:	4b18      	ldr	r3, [pc, #96]	; (800d95c <taskComputeRc+0x4e8>)
 800d8fc:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800d900:	b29b      	uxth	r3, r3
 800d902:	3302      	adds	r3, #2
 800d904:	b29b      	uxth	r3, r3
 800d906:	b21a      	sxth	r2, r3
 800d908:	4b14      	ldr	r3, [pc, #80]	; (800d95c <taskComputeRc+0x4e8>)
 800d90a:	85da      	strh	r2, [r3, #46]	; 0x2e
                    i = 1;
 800d90c:	2301      	movs	r3, #1
 800d90e:	613b      	str	r3, [r7, #16]
 800d910:	e047      	b.n	800d9a2 <taskComputeRc+0x52e>
                } else if (rcSticks == THR_HI + YAW_CE + PIT_LO + ROL_CE) {
 800d912:	4b13      	ldr	r3, [pc, #76]	; (800d960 <taskComputeRc+0x4ec>)
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	2bb7      	cmp	r3, #183	; 0xb7
 800d918:	d10b      	bne.n	800d932 <taskComputeRc+0x4be>
                    cfg.angleTrim[PITCH] -= 2;
 800d91a:	4b10      	ldr	r3, [pc, #64]	; (800d95c <taskComputeRc+0x4e8>)
 800d91c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800d920:	b29b      	uxth	r3, r3
 800d922:	3b02      	subs	r3, #2
 800d924:	b29b      	uxth	r3, r3
 800d926:	b21a      	sxth	r2, r3
 800d928:	4b0c      	ldr	r3, [pc, #48]	; (800d95c <taskComputeRc+0x4e8>)
 800d92a:	85da      	strh	r2, [r3, #46]	; 0x2e
                    i = 1;
 800d92c:	2301      	movs	r3, #1
 800d92e:	613b      	str	r3, [r7, #16]
 800d930:	e037      	b.n	800d9a2 <taskComputeRc+0x52e>
                } else if (rcSticks == THR_HI + YAW_CE + PIT_CE + ROL_HI) {
 800d932:	4b0b      	ldr	r3, [pc, #44]	; (800d960 <taskComputeRc+0x4ec>)
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	2bbe      	cmp	r3, #190	; 0xbe
 800d938:	d124      	bne.n	800d984 <taskComputeRc+0x510>
                    cfg.angleTrim[ROLL] += 2;
 800d93a:	4b08      	ldr	r3, [pc, #32]	; (800d95c <taskComputeRc+0x4e8>)
 800d93c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800d940:	b29b      	uxth	r3, r3
 800d942:	3302      	adds	r3, #2
 800d944:	b29b      	uxth	r3, r3
 800d946:	b21a      	sxth	r2, r3
 800d948:	4b04      	ldr	r3, [pc, #16]	; (800d95c <taskComputeRc+0x4e8>)
 800d94a:	859a      	strh	r2, [r3, #44]	; 0x2c
                    i = 1;
 800d94c:	2301      	movs	r3, #1
 800d94e:	613b      	str	r3, [r7, #16]
 800d950:	e027      	b.n	800d9a2 <taskComputeRc+0x52e>
 800d952:	bf00      	nop
 800d954:	20001a05 	.word	0x20001a05
 800d958:	2000174c 	.word	0x2000174c
 800d95c:	20000e08 	.word	0x20000e08
 800d960:	20001a04 	.word	0x20001a04
 800d964:	2000089c 	.word	0x2000089c
 800d968:	20001a7c 	.word	0x20001a7c
 800d96c:	20001a7a 	.word	0x20001a7a
 800d970:	20001a7e 	.word	0x20001a7e
 800d974:	200018e9 	.word	0x200018e9
 800d978:	200018ea 	.word	0x200018ea
 800d97c:	200018e8 	.word	0x200018e8
 800d980:	20001a78 	.word	0x20001a78
                } else if (rcSticks == THR_HI + YAW_CE + PIT_CE + ROL_LO) {
 800d984:	4b9e      	ldr	r3, [pc, #632]	; (800dc00 <taskComputeRc+0x78c>)
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	2bbd      	cmp	r3, #189	; 0xbd
 800d98a:	d10a      	bne.n	800d9a2 <taskComputeRc+0x52e>
                    cfg.angleTrim[ROLL] -= 2;
 800d98c:	4b9d      	ldr	r3, [pc, #628]	; (800dc04 <taskComputeRc+0x790>)
 800d98e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800d992:	b29b      	uxth	r3, r3
 800d994:	3b02      	subs	r3, #2
 800d996:	b29b      	uxth	r3, r3
 800d998:	b21a      	sxth	r2, r3
 800d99a:	4b9a      	ldr	r3, [pc, #616]	; (800dc04 <taskComputeRc+0x790>)
 800d99c:	859a      	strh	r2, [r3, #44]	; 0x2c
                    i = 1;
 800d99e:	2301      	movs	r3, #1
 800d9a0:	613b      	str	r3, [r7, #16]
                }
                if (i) {
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d006      	beq.n	800d9b6 <taskComputeRc+0x542>
                    writeEEPROM(1, true);
 800d9a8:	2101      	movs	r1, #1
 800d9aa:	2001      	movs	r0, #1
 800d9ac:	f7f8 ff96 	bl	80068dc <writeEEPROM>
                    rcDelayCommand = 0; // allow autorepetition
 800d9b0:	4b95      	ldr	r3, [pc, #596]	; (800dc08 <taskComputeRc+0x794>)
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	701a      	strb	r2, [r3, #0]
                }
            }
        }

        if (feature(FEATURE_INFLIGHT_ACC_CAL)) {
 800d9b6:	2004      	movs	r0, #4
 800d9b8:	f7f9 fb72 	bl	80070a0 <feature>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d041      	beq.n	800da46 <taskComputeRc+0x5d2>
            if (AccInflightCalibrationArmed && f.ARMED && rcData[THROTTLE] > mcfg.mincheck && !rcOptions[BOXARM]) {   // Copter is airborne and you are turning it off via boxarm : start measurement
 800d9c2:	4b92      	ldr	r3, [pc, #584]	; (800dc0c <taskComputeRc+0x798>)
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d016      	beq.n	800d9f8 <taskComputeRc+0x584>
 800d9ca:	4b91      	ldr	r3, [pc, #580]	; (800dc10 <taskComputeRc+0x79c>)
 800d9cc:	785b      	ldrb	r3, [r3, #1]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d012      	beq.n	800d9f8 <taskComputeRc+0x584>
 800d9d2:	4b90      	ldr	r3, [pc, #576]	; (800dc14 <taskComputeRc+0x7a0>)
 800d9d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d9d8:	461a      	mov	r2, r3
 800d9da:	4b8f      	ldr	r3, [pc, #572]	; (800dc18 <taskComputeRc+0x7a4>)
 800d9dc:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	dd09      	ble.n	800d9f8 <taskComputeRc+0x584>
 800d9e4:	4b8d      	ldr	r3, [pc, #564]	; (800dc1c <taskComputeRc+0x7a8>)
 800d9e6:	781b      	ldrb	r3, [r3, #0]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d105      	bne.n	800d9f8 <taskComputeRc+0x584>
                InflightcalibratingA = 50;
 800d9ec:	4b8c      	ldr	r3, [pc, #560]	; (800dc20 <taskComputeRc+0x7ac>)
 800d9ee:	2232      	movs	r2, #50	; 0x32
 800d9f0:	801a      	strh	r2, [r3, #0]
                AccInflightCalibrationArmed = false;
 800d9f2:	4b86      	ldr	r3, [pc, #536]	; (800dc0c <taskComputeRc+0x798>)
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	701a      	strb	r2, [r3, #0]
            }
            if (rcOptions[BOXCALIB]) {      // Use the Calib Option to activate : Calib = TRUE Meausrement started, Land and Calib = 0 measurement stored
 800d9f8:	4b88      	ldr	r3, [pc, #544]	; (800dc1c <taskComputeRc+0x7a8>)
 800d9fa:	7c5b      	ldrb	r3, [r3, #17]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d014      	beq.n	800da2a <taskComputeRc+0x5b6>
                if (!AccInflightCalibrationActive && !AccInflightCalibrationMeasurementDone)
 800da00:	4b88      	ldr	r3, [pc, #544]	; (800dc24 <taskComputeRc+0x7b0>)
 800da02:	781b      	ldrb	r3, [r3, #0]
 800da04:	f083 0301 	eor.w	r3, r3, #1
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d009      	beq.n	800da22 <taskComputeRc+0x5ae>
 800da0e:	4b86      	ldr	r3, [pc, #536]	; (800dc28 <taskComputeRc+0x7b4>)
 800da10:	781b      	ldrb	r3, [r3, #0]
 800da12:	f083 0301 	eor.w	r3, r3, #1
 800da16:	b2db      	uxtb	r3, r3
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d002      	beq.n	800da22 <taskComputeRc+0x5ae>
                    InflightcalibratingA = 50;
 800da1c:	4b80      	ldr	r3, [pc, #512]	; (800dc20 <taskComputeRc+0x7ac>)
 800da1e:	2232      	movs	r2, #50	; 0x32
 800da20:	801a      	strh	r2, [r3, #0]
                AccInflightCalibrationActive = true;
 800da22:	4b80      	ldr	r3, [pc, #512]	; (800dc24 <taskComputeRc+0x7b0>)
 800da24:	2201      	movs	r2, #1
 800da26:	701a      	strb	r2, [r3, #0]
 800da28:	e00d      	b.n	800da46 <taskComputeRc+0x5d2>
            } else if (AccInflightCalibrationMeasurementDone && !f.ARMED) {
 800da2a:	4b7f      	ldr	r3, [pc, #508]	; (800dc28 <taskComputeRc+0x7b4>)
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d009      	beq.n	800da46 <taskComputeRc+0x5d2>
 800da32:	4b77      	ldr	r3, [pc, #476]	; (800dc10 <taskComputeRc+0x79c>)
 800da34:	785b      	ldrb	r3, [r3, #1]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d105      	bne.n	800da46 <taskComputeRc+0x5d2>
                AccInflightCalibrationMeasurementDone = false;
 800da3a:	4b7b      	ldr	r3, [pc, #492]	; (800dc28 <taskComputeRc+0x7b4>)
 800da3c:	2200      	movs	r2, #0
 800da3e:	701a      	strb	r2, [r3, #0]
                AccInflightCalibrationSavetoEEProm = true;
 800da40:	4b7a      	ldr	r3, [pc, #488]	; (800dc2c <taskComputeRc+0x7b8>)
 800da42:	2201      	movs	r2, #1
 800da44:	701a      	strb	r2, [r3, #0]
            }
        }

        // Check AUX switches

        for (i = 0; i < core.numAuxChannels; i++)
 800da46:	2300      	movs	r3, #0
 800da48:	613b      	str	r3, [r7, #16]
 800da4a:	e04a      	b.n	800dae2 <taskComputeRc+0x66e>
            auxState |= (rcData[AUX1 + i] < 1300) << (3 * i) | (1300 < rcData[AUX1 + i] && rcData[AUX1 + i] < 1700) << (3 * i + 1) | (rcData[AUX1 + i] > 1700) << (3 * i + 2);
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	3304      	adds	r3, #4
 800da50:	4a70      	ldr	r2, [pc, #448]	; (800dc14 <taskComputeRc+0x7a0>)
 800da52:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800da56:	f240 5213 	movw	r2, #1299	; 0x513
 800da5a:	4293      	cmp	r3, r2
 800da5c:	bfd4      	ite	le
 800da5e:	2301      	movle	r3, #1
 800da60:	2300      	movgt	r3, #0
 800da62:	b2db      	uxtb	r3, r3
 800da64:	4619      	mov	r1, r3
 800da66:	693a      	ldr	r2, [r7, #16]
 800da68:	4613      	mov	r3, r2
 800da6a:	005b      	lsls	r3, r3, #1
 800da6c:	4413      	add	r3, r2
 800da6e:	4099      	lsls	r1, r3
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	3304      	adds	r3, #4
 800da74:	4a67      	ldr	r2, [pc, #412]	; (800dc14 <taskComputeRc+0x7a0>)
 800da76:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800da7a:	f240 5214 	movw	r2, #1300	; 0x514
 800da7e:	4293      	cmp	r3, r2
 800da80:	dd0a      	ble.n	800da98 <taskComputeRc+0x624>
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	3304      	adds	r3, #4
 800da86:	4a63      	ldr	r2, [pc, #396]	; (800dc14 <taskComputeRc+0x7a0>)
 800da88:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800da8c:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800da90:	4293      	cmp	r3, r2
 800da92:	dc01      	bgt.n	800da98 <taskComputeRc+0x624>
 800da94:	2001      	movs	r0, #1
 800da96:	e000      	b.n	800da9a <taskComputeRc+0x626>
 800da98:	2000      	movs	r0, #0
 800da9a:	693a      	ldr	r2, [r7, #16]
 800da9c:	4613      	mov	r3, r2
 800da9e:	005b      	lsls	r3, r3, #1
 800daa0:	4413      	add	r3, r2
 800daa2:	3301      	adds	r3, #1
 800daa4:	fa00 f303 	lsl.w	r3, r0, r3
 800daa8:	4319      	orrs	r1, r3
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	3304      	adds	r3, #4
 800daae:	4a59      	ldr	r2, [pc, #356]	; (800dc14 <taskComputeRc+0x7a0>)
 800dab0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800dab4:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800dab8:	4293      	cmp	r3, r2
 800daba:	bfcc      	ite	gt
 800dabc:	2301      	movgt	r3, #1
 800dabe:	2300      	movle	r3, #0
 800dac0:	b2db      	uxtb	r3, r3
 800dac2:	4618      	mov	r0, r3
 800dac4:	693a      	ldr	r2, [r7, #16]
 800dac6:	4613      	mov	r3, r2
 800dac8:	005b      	lsls	r3, r3, #1
 800daca:	4413      	add	r3, r2
 800dacc:	3302      	adds	r3, #2
 800dace:	fa00 f303 	lsl.w	r3, r0, r3
 800dad2:	430b      	orrs	r3, r1
 800dad4:	461a      	mov	r2, r3
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	4313      	orrs	r3, r2
 800dada:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < core.numAuxChannels; i++)
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	3301      	adds	r3, #1
 800dae0:	613b      	str	r3, [r7, #16]
 800dae2:	4b53      	ldr	r3, [pc, #332]	; (800dc30 <taskComputeRc+0x7bc>)
 800dae4:	7d1b      	ldrb	r3, [r3, #20]
 800dae6:	461a      	mov	r2, r3
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	4293      	cmp	r3, r2
 800daec:	dbae      	blt.n	800da4c <taskComputeRc+0x5d8>
        for (i = 0; i < CHECKBOXITEMS; i++)
 800daee:	2300      	movs	r3, #0
 800daf0:	613b      	str	r3, [r7, #16]
 800daf2:	e015      	b.n	800db20 <taskComputeRc+0x6ac>
            rcOptions[i] = (auxState & cfg.activate[i]) > 0;
 800daf4:	4a43      	ldr	r2, [pc, #268]	; (800dc04 <taskComputeRc+0x790>)
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	3312      	adds	r3, #18
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	4413      	add	r3, r2
 800dafe:	685a      	ldr	r2, [r3, #4]
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	4013      	ands	r3, r2
 800db04:	2b00      	cmp	r3, #0
 800db06:	bf14      	ite	ne
 800db08:	2301      	movne	r3, #1
 800db0a:	2300      	moveq	r3, #0
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	4619      	mov	r1, r3
 800db10:	4a42      	ldr	r2, [pc, #264]	; (800dc1c <taskComputeRc+0x7a8>)
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	4413      	add	r3, r2
 800db16:	460a      	mov	r2, r1
 800db18:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < CHECKBOXITEMS; i++)
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	3301      	adds	r3, #1
 800db1e:	613b      	str	r3, [r7, #16]
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	2b18      	cmp	r3, #24
 800db24:	dde6      	ble.n	800daf4 <taskComputeRc+0x680>
        f.CRUISE_MODE = rcOptions[BOXGCRUISE];
 800db26:	4b3d      	ldr	r3, [pc, #244]	; (800dc1c <taskComputeRc+0x7a8>)
 800db28:	7e1a      	ldrb	r2, [r3, #24]
 800db2a:	4b39      	ldr	r3, [pc, #228]	; (800dc10 <taskComputeRc+0x79c>)
 800db2c:	751a      	strb	r2, [r3, #20]
        if (f.CRUISE_MODE) {
 800db2e:	4b38      	ldr	r3, [pc, #224]	; (800dc10 <taskComputeRc+0x79c>)
 800db30:	7d1b      	ldrb	r3, [r3, #20]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d005      	beq.n	800db42 <taskComputeRc+0x6ce>
            rcOptions[BOXGPSHOLD] = true;
 800db36:	4b39      	ldr	r3, [pc, #228]	; (800dc1c <taskComputeRc+0x7a8>)
 800db38:	2201      	movs	r2, #1
 800db3a:	72da      	strb	r2, [r3, #11]
            rcOptions[BOXHORIZON] = true;
 800db3c:	4b37      	ldr	r3, [pc, #220]	; (800dc1c <taskComputeRc+0x7a8>)
 800db3e:	2201      	movs	r2, #1
 800db40:	709a      	strb	r2, [r3, #2]
        }

        // note: if FAILSAFE is disable, failsafeCnt > 5 * FAILSAVE_DELAY is always false
        if ((rcOptions[BOXANGLE] || (failsafeCnt > 5 * cfg.failsafe_delay)) && (sensors(SENSOR_ACC))) {
 800db42:	4b36      	ldr	r3, [pc, #216]	; (800dc1c <taskComputeRc+0x7a8>)
 800db44:	785b      	ldrb	r3, [r3, #1]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d10c      	bne.n	800db64 <taskComputeRc+0x6f0>
 800db4a:	4b3a      	ldr	r3, [pc, #232]	; (800dc34 <taskComputeRc+0x7c0>)
 800db4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db50:	4619      	mov	r1, r3
 800db52:	4b2c      	ldr	r3, [pc, #176]	; (800dc04 <taskComputeRc+0x790>)
 800db54:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800db58:	461a      	mov	r2, r3
 800db5a:	4613      	mov	r3, r2
 800db5c:	009b      	lsls	r3, r3, #2
 800db5e:	4413      	add	r3, r2
 800db60:	4299      	cmp	r1, r3
 800db62:	dd30      	ble.n	800dbc6 <taskComputeRc+0x752>
 800db64:	2002      	movs	r0, #2
 800db66:	f7f9 fa53 	bl	8007010 <sensors>
 800db6a:	4603      	mov	r3, r0
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d02a      	beq.n	800dbc6 <taskComputeRc+0x752>
            // bumpless transfer to Level mode
            if (!f.ANGLE_MODE) {
 800db70:	4b27      	ldr	r3, [pc, #156]	; (800dc10 <taskComputeRc+0x79c>)
 800db72:	78db      	ldrb	r3, [r3, #3]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d108      	bne.n	800db8a <taskComputeRc+0x716>
                errorAngleI[ROLL] = 0;
 800db78:	4b2f      	ldr	r3, [pc, #188]	; (800dc38 <taskComputeRc+0x7c4>)
 800db7a:	2200      	movs	r2, #0
 800db7c:	601a      	str	r2, [r3, #0]
                errorAngleI[PITCH] = 0;
 800db7e:	4b2e      	ldr	r3, [pc, #184]	; (800dc38 <taskComputeRc+0x7c4>)
 800db80:	2200      	movs	r2, #0
 800db82:	605a      	str	r2, [r3, #4]
                f.ANGLE_MODE = 1;
 800db84:	4b22      	ldr	r3, [pc, #136]	; (800dc10 <taskComputeRc+0x79c>)
 800db86:	2201      	movs	r2, #1
 800db88:	70da      	strb	r2, [r3, #3]
            }
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800db8a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800db8e:	f7f9 fa87 	bl	80070a0 <feature>
 800db92:	4603      	mov	r3, r0
 800db94:	2b00      	cmp	r3, #0
 800db96:	d01d      	beq.n	800dbd4 <taskComputeRc+0x760>
                if ((failsafeCnt > 5 * cfg.failsafe_delay) && sensors(SENSOR_GPS)) {
 800db98:	4b26      	ldr	r3, [pc, #152]	; (800dc34 <taskComputeRc+0x7c0>)
 800db9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db9e:	4619      	mov	r1, r3
 800dba0:	4b18      	ldr	r3, [pc, #96]	; (800dc04 <taskComputeRc+0x790>)
 800dba2:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800dba6:	461a      	mov	r2, r3
 800dba8:	4613      	mov	r3, r2
 800dbaa:	009b      	lsls	r3, r3, #2
 800dbac:	4413      	add	r3, r2
 800dbae:	4299      	cmp	r1, r3
 800dbb0:	dd10      	ble.n	800dbd4 <taskComputeRc+0x760>
 800dbb2:	2020      	movs	r0, #32
 800dbb4:	f7f9 fa2c 	bl	8007010 <sensors>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d00a      	beq.n	800dbd4 <taskComputeRc+0x760>
                    f.FW_FAILSAFE_RTH_ENABLE = 1;
 800dbbe:	4b14      	ldr	r3, [pc, #80]	; (800dc10 <taskComputeRc+0x79c>)
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	749a      	strb	r2, [r3, #18]
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800dbc4:	e006      	b.n	800dbd4 <taskComputeRc+0x760>
                }
            }
        } else {
            f.ANGLE_MODE = 0;   // failsafe support
 800dbc6:	4b12      	ldr	r3, [pc, #72]	; (800dc10 <taskComputeRc+0x79c>)
 800dbc8:	2200      	movs	r2, #0
 800dbca:	70da      	strb	r2, [r3, #3]
            f.FW_FAILSAFE_RTH_ENABLE = 0;
 800dbcc:	4b10      	ldr	r3, [pc, #64]	; (800dc10 <taskComputeRc+0x79c>)
 800dbce:	2200      	movs	r2, #0
 800dbd0:	749a      	strb	r2, [r3, #18]
 800dbd2:	e000      	b.n	800dbd6 <taskComputeRc+0x762>
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800dbd4:	bf00      	nop
        }

        if (rcOptions[BOXHORIZON]) {
 800dbd6:	4b11      	ldr	r3, [pc, #68]	; (800dc1c <taskComputeRc+0x7a8>)
 800dbd8:	789b      	ldrb	r3, [r3, #2]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d02e      	beq.n	800dc3c <taskComputeRc+0x7c8>
            f.ANGLE_MODE = 0;
 800dbde:	4b0c      	ldr	r3, [pc, #48]	; (800dc10 <taskComputeRc+0x79c>)
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	70da      	strb	r2, [r3, #3]
            if (!f.HORIZON_MODE) {
 800dbe4:	4b0a      	ldr	r3, [pc, #40]	; (800dc10 <taskComputeRc+0x79c>)
 800dbe6:	791b      	ldrb	r3, [r3, #4]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d12a      	bne.n	800dc42 <taskComputeRc+0x7ce>
                errorAngleI[ROLL] = 0;
 800dbec:	4b12      	ldr	r3, [pc, #72]	; (800dc38 <taskComputeRc+0x7c4>)
 800dbee:	2200      	movs	r2, #0
 800dbf0:	601a      	str	r2, [r3, #0]
                errorAngleI[PITCH] = 0;
 800dbf2:	4b11      	ldr	r3, [pc, #68]	; (800dc38 <taskComputeRc+0x7c4>)
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	605a      	str	r2, [r3, #4]
                f.HORIZON_MODE = 1;
 800dbf8:	4b05      	ldr	r3, [pc, #20]	; (800dc10 <taskComputeRc+0x79c>)
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	711a      	strb	r2, [r3, #4]
 800dbfe:	e020      	b.n	800dc42 <taskComputeRc+0x7ce>
 800dc00:	20001a04 	.word	0x20001a04
 800dc04:	20000e08 	.word	0x20000e08
 800dc08:	20001a05 	.word	0x20001a05
 800dc0c:	200018e8 	.word	0x200018e8
 800dc10:	2000174c 	.word	0x2000174c
 800dc14:	20001784 	.word	0x20001784
 800dc18:	2000089c 	.word	0x2000089c
 800dc1c:	200017ec 	.word	0x200017ec
 800dc20:	200018ec 	.word	0x200018ec
 800dc24:	200018eb 	.word	0x200018eb
 800dc28:	200018e9 	.word	0x200018e9
 800dc2c:	200018ea 	.word	0x200018ea
 800dc30:	200007e4 	.word	0x200007e4
 800dc34:	2000177e 	.word	0x2000177e
 800dc38:	20001904 	.word	0x20001904
            }
        } else {
            f.HORIZON_MODE = 0;
 800dc3c:	4b9c      	ldr	r3, [pc, #624]	; (800deb0 <taskComputeRc+0xa3c>)
 800dc3e:	2200      	movs	r2, #0
 800dc40:	711a      	strb	r2, [r3, #4]
        }

        if ((rcOptions[BOXARM]) == 0)
 800dc42:	4b9c      	ldr	r3, [pc, #624]	; (800deb4 <taskComputeRc+0xa40>)
 800dc44:	781b      	ldrb	r3, [r3, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d102      	bne.n	800dc50 <taskComputeRc+0x7dc>
            f.OK_TO_ARM = 1;
 800dc4a:	4b99      	ldr	r3, [pc, #612]	; (800deb0 <taskComputeRc+0xa3c>)
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	701a      	strb	r2, [r3, #0]
        if (f.ANGLE_MODE || f.HORIZON_MODE) {
 800dc50:	4b97      	ldr	r3, [pc, #604]	; (800deb0 <taskComputeRc+0xa3c>)
 800dc52:	78db      	ldrb	r3, [r3, #3]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d103      	bne.n	800dc60 <taskComputeRc+0x7ec>
 800dc58:	4b95      	ldr	r3, [pc, #596]	; (800deb0 <taskComputeRc+0xa3c>)
 800dc5a:	791b      	ldrb	r3, [r3, #4]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d003      	beq.n	800dc68 <taskComputeRc+0x7f4>
            actLed1State(ON);
 800dc60:	2001      	movs	r0, #1
 800dc62:	f7f4 fa37 	bl	80020d4 <actLed1State>
 800dc66:	e002      	b.n	800dc6e <taskComputeRc+0x7fa>
        } else {
            actLed1State(OFF);
 800dc68:	2000      	movs	r0, #0
 800dc6a:	f7f4 fa33 	bl	80020d4 <actLed1State>
        }

#ifdef BARO
        if (sensors(SENSOR_BARO)) {
 800dc6e:	2004      	movs	r0, #4
 800dc70:	f7f9 f9ce 	bl	8007010 <sensors>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d033      	beq.n	800dce2 <taskComputeRc+0x86e>
            // Baro alt hold activate
            if (rcOptions[BOXBARO]) {
 800dc7a:	4b8e      	ldr	r3, [pc, #568]	; (800deb4 <taskComputeRc+0xa40>)
 800dc7c:	78db      	ldrb	r3, [r3, #3]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d016      	beq.n	800dcb0 <taskComputeRc+0x83c>
                if (!f.BARO_MODE) {
 800dc82:	4b8b      	ldr	r3, [pc, #556]	; (800deb0 <taskComputeRc+0xa3c>)
 800dc84:	799b      	ldrb	r3, [r3, #6]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d115      	bne.n	800dcb6 <taskComputeRc+0x842>
                    f.BARO_MODE = 1;
 800dc8a:	4b89      	ldr	r3, [pc, #548]	; (800deb0 <taskComputeRc+0xa3c>)
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	719a      	strb	r2, [r3, #6]
                    AltHold = EstAlt;
 800dc90:	4b89      	ldr	r3, [pc, #548]	; (800deb8 <taskComputeRc+0xa44>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	4a89      	ldr	r2, [pc, #548]	; (800debc <taskComputeRc+0xa48>)
 800dc96:	6013      	str	r3, [r2, #0]
                    initialThrottleHold = rcCommand[THROTTLE];
 800dc98:	4b89      	ldr	r3, [pc, #548]	; (800dec0 <taskComputeRc+0xa4c>)
 800dc9a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800dc9e:	4b89      	ldr	r3, [pc, #548]	; (800dec4 <taskComputeRc+0xa50>)
 800dca0:	801a      	strh	r2, [r3, #0]
                    errorVelocityI = 0;
 800dca2:	4b89      	ldr	r3, [pc, #548]	; (800dec8 <taskComputeRc+0xa54>)
 800dca4:	2200      	movs	r2, #0
 800dca6:	601a      	str	r2, [r3, #0]
                    BaroPID = 0;
 800dca8:	4b88      	ldr	r3, [pc, #544]	; (800decc <taskComputeRc+0xa58>)
 800dcaa:	2200      	movs	r2, #0
 800dcac:	601a      	str	r2, [r3, #0]
 800dcae:	e002      	b.n	800dcb6 <taskComputeRc+0x842>
                }
            } else {
                f.BARO_MODE = 0;
 800dcb0:	4b7f      	ldr	r3, [pc, #508]	; (800deb0 <taskComputeRc+0xa3c>)
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	719a      	strb	r2, [r3, #6]
            }
            // Vario signalling activate
            if (feature(FEATURE_VARIO)) {
 800dcb6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800dcba:	f7f9 f9f1 	bl	80070a0 <feature>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d00e      	beq.n	800dce2 <taskComputeRc+0x86e>
                if (rcOptions[BOXVARIO]) {
 800dcc4:	4b7b      	ldr	r3, [pc, #492]	; (800deb4 <taskComputeRc+0xa40>)
 800dcc6:	791b      	ldrb	r3, [r3, #4]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d007      	beq.n	800dcdc <taskComputeRc+0x868>
                    if (!f.VARIO_MODE) {
 800dccc:	4b78      	ldr	r3, [pc, #480]	; (800deb0 <taskComputeRc+0xa3c>)
 800dcce:	7bdb      	ldrb	r3, [r3, #15]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d106      	bne.n	800dce2 <taskComputeRc+0x86e>
                        f.VARIO_MODE = 1;
 800dcd4:	4b76      	ldr	r3, [pc, #472]	; (800deb0 <taskComputeRc+0xa3c>)
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	73da      	strb	r2, [r3, #15]
 800dcda:	e002      	b.n	800dce2 <taskComputeRc+0x86e>
                    }
                } else {
                    f.VARIO_MODE = 0;
 800dcdc:	4b74      	ldr	r3, [pc, #464]	; (800deb0 <taskComputeRc+0xa3c>)
 800dcde:	2200      	movs	r2, #0
 800dce0:	73da      	strb	r2, [r3, #15]
            }
        }
#endif

#ifdef  MAG
        if (sensors(SENSOR_ACC) || sensors(SENSOR_MAG)) {
 800dce2:	2002      	movs	r0, #2
 800dce4:	f7f9 f994 	bl	8007010 <sensors>
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d105      	bne.n	800dcfa <taskComputeRc+0x886>
 800dcee:	2008      	movs	r0, #8
 800dcf0:	f7f9 f98e 	bl	8007010 <sensors>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d02b      	beq.n	800dd52 <taskComputeRc+0x8de>
            if (rcOptions[BOXMAG]) {
 800dcfa:	4b6e      	ldr	r3, [pc, #440]	; (800deb4 <taskComputeRc+0xa40>)
 800dcfc:	795b      	ldrb	r3, [r3, #5]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d00c      	beq.n	800dd1c <taskComputeRc+0x8a8>
                if (!f.MAG_MODE) {
 800dd02:	4b6b      	ldr	r3, [pc, #428]	; (800deb0 <taskComputeRc+0xa3c>)
 800dd04:	795b      	ldrb	r3, [r3, #5]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d10b      	bne.n	800dd22 <taskComputeRc+0x8ae>
                    f.MAG_MODE = 1;
 800dd0a:	4b69      	ldr	r3, [pc, #420]	; (800deb0 <taskComputeRc+0xa3c>)
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	715a      	strb	r2, [r3, #5]
                    magHold = heading;
 800dd10:	4b6f      	ldr	r3, [pc, #444]	; (800ded0 <taskComputeRc+0xa5c>)
 800dd12:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dd16:	4b6f      	ldr	r3, [pc, #444]	; (800ded4 <taskComputeRc+0xa60>)
 800dd18:	801a      	strh	r2, [r3, #0]
 800dd1a:	e002      	b.n	800dd22 <taskComputeRc+0x8ae>
                }
            } else {
                f.MAG_MODE = 0;
 800dd1c:	4b64      	ldr	r3, [pc, #400]	; (800deb0 <taskComputeRc+0xa3c>)
 800dd1e:	2200      	movs	r2, #0
 800dd20:	715a      	strb	r2, [r3, #5]
            }
            if (rcOptions[BOXHEADFREE]) {
 800dd22:	4b64      	ldr	r3, [pc, #400]	; (800deb4 <taskComputeRc+0xa40>)
 800dd24:	799b      	ldrb	r3, [r3, #6]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d007      	beq.n	800dd3a <taskComputeRc+0x8c6>
                if (!f.HEADFREE_MODE) {
 800dd2a:	4b61      	ldr	r3, [pc, #388]	; (800deb0 <taskComputeRc+0xa3c>)
 800dd2c:	7a5b      	ldrb	r3, [r3, #9]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d106      	bne.n	800dd40 <taskComputeRc+0x8cc>
                    f.HEADFREE_MODE = 1;
 800dd32:	4b5f      	ldr	r3, [pc, #380]	; (800deb0 <taskComputeRc+0xa3c>)
 800dd34:	2201      	movs	r2, #1
 800dd36:	725a      	strb	r2, [r3, #9]
 800dd38:	e002      	b.n	800dd40 <taskComputeRc+0x8cc>
                }
            } else {
                f.HEADFREE_MODE = 0;
 800dd3a:	4b5d      	ldr	r3, [pc, #372]	; (800deb0 <taskComputeRc+0xa3c>)
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	725a      	strb	r2, [r3, #9]
            }
            if (rcOptions[BOXHEADADJ]) {
 800dd40:	4b5c      	ldr	r3, [pc, #368]	; (800deb4 <taskComputeRc+0xa40>)
 800dd42:	79db      	ldrb	r3, [r3, #7]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d004      	beq.n	800dd52 <taskComputeRc+0x8de>
                headFreeModeHold = heading; // acquire new heading
 800dd48:	4b61      	ldr	r3, [pc, #388]	; (800ded0 <taskComputeRc+0xa5c>)
 800dd4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dd4e:	4b62      	ldr	r3, [pc, #392]	; (800ded8 <taskComputeRc+0xa64>)
 800dd50:	801a      	strh	r2, [r3, #0]
            }
        }
#endif

#ifdef GPS
        if (sensors(SENSOR_GPS)) {
 800dd52:	2020      	movs	r0, #32
 800dd54:	f7f9 f95c 	bl	8007010 <sensors>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	f000 809c 	beq.w	800de98 <taskComputeRc+0xa24>
            if (f.GPS_FIX && GPS_numSat >= 5) {
 800dd60:	4b53      	ldr	r3, [pc, #332]	; (800deb0 <taskComputeRc+0xa3c>)
 800dd62:	7adb      	ldrb	r3, [r3, #11]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	f000 808e 	beq.w	800de86 <taskComputeRc+0xa12>
 800dd6a:	4b5c      	ldr	r3, [pc, #368]	; (800dedc <taskComputeRc+0xa68>)
 800dd6c:	781b      	ldrb	r3, [r3, #0]
 800dd6e:	2b04      	cmp	r3, #4
 800dd70:	f240 8089 	bls.w	800de86 <taskComputeRc+0xa12>
                if (nav_mode != NAV_MODE_NONE && (!f.HORIZON_MODE && !f.ANGLE_MODE))
 800dd74:	4b5a      	ldr	r3, [pc, #360]	; (800dee0 <taskComputeRc+0xa6c>)
 800dd76:	f993 3000 	ldrsb.w	r3, [r3]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d00a      	beq.n	800dd94 <taskComputeRc+0x920>
 800dd7e:	4b4c      	ldr	r3, [pc, #304]	; (800deb0 <taskComputeRc+0xa3c>)
 800dd80:	791b      	ldrb	r3, [r3, #4]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d106      	bne.n	800dd94 <taskComputeRc+0x920>
 800dd86:	4b4a      	ldr	r3, [pc, #296]	; (800deb0 <taskComputeRc+0xa3c>)
 800dd88:	78db      	ldrb	r3, [r3, #3]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d102      	bne.n	800dd94 <taskComputeRc+0x920>
                    f.ANGLE_MODE = true; // Force a stable mode in GPS Mode
 800dd8e:	4b48      	ldr	r3, [pc, #288]	; (800deb0 <taskComputeRc+0xa3c>)
 800dd90:	2201      	movs	r2, #1
 800dd92:	70da      	strb	r2, [r3, #3]

                // if both GPS_HOME & GPS_HOLD are checked => GPS_HOME is the priority
                if (rcOptions[BOXGPSHOME] || f.FW_FAILSAFE_RTH_ENABLE ) {
 800dd94:	4b47      	ldr	r3, [pc, #284]	; (800deb4 <taskComputeRc+0xa40>)
 800dd96:	7a9b      	ldrb	r3, [r3, #10]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d103      	bne.n	800dda4 <taskComputeRc+0x930>
 800dd9c:	4b44      	ldr	r3, [pc, #272]	; (800deb0 <taskComputeRc+0xa3c>)
 800dd9e:	7c9b      	ldrb	r3, [r3, #18]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d01c      	beq.n	800ddde <taskComputeRc+0x96a>
                    if (!f.GPS_HOME_MODE) {
 800dda4:	4b42      	ldr	r3, [pc, #264]	; (800deb0 <taskComputeRc+0xa3c>)
 800dda6:	79db      	ldrb	r3, [r3, #7]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d168      	bne.n	800de7e <taskComputeRc+0xa0a>
                        f.GPS_HOME_MODE = 1;
 800ddac:	4b40      	ldr	r3, [pc, #256]	; (800deb0 <taskComputeRc+0xa3c>)
 800ddae:	2201      	movs	r2, #1
 800ddb0:	71da      	strb	r2, [r3, #7]
                        f.GPS_HOLD_MODE = 0;
 800ddb2:	4b3f      	ldr	r3, [pc, #252]	; (800deb0 <taskComputeRc+0xa3c>)
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	721a      	strb	r2, [r3, #8]
                        GPSNavReset = 0;
 800ddb8:	4b4a      	ldr	r3, [pc, #296]	; (800dee4 <taskComputeRc+0xa70>)
 800ddba:	2200      	movs	r2, #0
 800ddbc:	701a      	strb	r2, [r3, #0]
                        GPS_set_next_wp(&GPS_home[LAT], &GPS_home[LON]);
 800ddbe:	494a      	ldr	r1, [pc, #296]	; (800dee8 <taskComputeRc+0xa74>)
 800ddc0:	484a      	ldr	r0, [pc, #296]	; (800deec <taskComputeRc+0xa78>)
 800ddc2:	f7fb fa25 	bl	8009210 <GPS_set_next_wp>
                        nav_mode = NAV_MODE_WP;
 800ddc6:	4b46      	ldr	r3, [pc, #280]	; (800dee0 <taskComputeRc+0xa6c>)
 800ddc8:	2202      	movs	r2, #2
 800ddca:	701a      	strb	r2, [r3, #0]
                        GPS_hold[ALT] = GPS_altitude;
 800ddcc:	4b48      	ldr	r3, [pc, #288]	; (800def0 <taskComputeRc+0xa7c>)
 800ddce:	881b      	ldrh	r3, [r3, #0]
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	4b48      	ldr	r3, [pc, #288]	; (800def4 <taskComputeRc+0xa80>)
 800ddd4:	609a      	str	r2, [r3, #8]
                        f.CLIMBOUT_FW = 1;
 800ddd6:	4b36      	ldr	r3, [pc, #216]	; (800deb0 <taskComputeRc+0xa3c>)
 800ddd8:	2201      	movs	r2, #1
 800ddda:	74da      	strb	r2, [r3, #19]
                    if (!f.GPS_HOME_MODE) {
 800dddc:	e04f      	b.n	800de7e <taskComputeRc+0xa0a>
                    }
                } else {
                    f.GPS_HOME_MODE = 0;
 800ddde:	4b34      	ldr	r3, [pc, #208]	; (800deb0 <taskComputeRc+0xa3c>)
 800dde0:	2200      	movs	r2, #0
 800dde2:	71da      	strb	r2, [r3, #7]
                    if (rcOptions[BOXGPSHOLD] && abs(rcCommand[ROLL]) < cfg.ap_mode && abs(rcCommand[PITCH]) < cfg.ap_mode) {
 800dde4:	4b33      	ldr	r3, [pc, #204]	; (800deb4 <taskComputeRc+0xa40>)
 800dde6:	7adb      	ldrb	r3, [r3, #11]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d039      	beq.n	800de60 <taskComputeRc+0x9ec>
 800ddec:	4b34      	ldr	r3, [pc, #208]	; (800dec0 <taskComputeRc+0xa4c>)
 800ddee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	bfb8      	it	lt
 800ddf6:	425b      	neglt	r3, r3
 800ddf8:	b29a      	uxth	r2, r3
 800ddfa:	4b3f      	ldr	r3, [pc, #252]	; (800def8 <taskComputeRc+0xa84>)
 800ddfc:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800de00:	429a      	cmp	r2, r3
 800de02:	d22d      	bcs.n	800de60 <taskComputeRc+0x9ec>
 800de04:	4b2e      	ldr	r3, [pc, #184]	; (800dec0 <taskComputeRc+0xa4c>)
 800de06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	bfb8      	it	lt
 800de0e:	425b      	neglt	r3, r3
 800de10:	b29a      	uxth	r2, r3
 800de12:	4b39      	ldr	r3, [pc, #228]	; (800def8 <taskComputeRc+0xa84>)
 800de14:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800de18:	429a      	cmp	r2, r3
 800de1a:	d221      	bcs.n	800de60 <taskComputeRc+0x9ec>
                        if (!f.GPS_HOLD_MODE) {
 800de1c:	4b24      	ldr	r3, [pc, #144]	; (800deb0 <taskComputeRc+0xa3c>)
 800de1e:	7a1b      	ldrb	r3, [r3, #8]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d12c      	bne.n	800de7e <taskComputeRc+0xa0a>
                            f.GPS_HOLD_MODE = 1;
 800de24:	4b22      	ldr	r3, [pc, #136]	; (800deb0 <taskComputeRc+0xa3c>)
 800de26:	2201      	movs	r2, #1
 800de28:	721a      	strb	r2, [r3, #8]
                            GPSNavReset = 0;
 800de2a:	4b2e      	ldr	r3, [pc, #184]	; (800dee4 <taskComputeRc+0xa70>)
 800de2c:	2200      	movs	r2, #0
 800de2e:	701a      	strb	r2, [r3, #0]
                            GPS_hold[LAT] = GPS_coord[LAT];
 800de30:	4b32      	ldr	r3, [pc, #200]	; (800defc <taskComputeRc+0xa88>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4a2f      	ldr	r2, [pc, #188]	; (800def4 <taskComputeRc+0xa80>)
 800de36:	6013      	str	r3, [r2, #0]
                            GPS_hold[LON] = GPS_coord[LON];
 800de38:	4b30      	ldr	r3, [pc, #192]	; (800defc <taskComputeRc+0xa88>)
 800de3a:	685b      	ldr	r3, [r3, #4]
 800de3c:	4a2d      	ldr	r2, [pc, #180]	; (800def4 <taskComputeRc+0xa80>)
 800de3e:	6053      	str	r3, [r2, #4]
                            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
 800de40:	492f      	ldr	r1, [pc, #188]	; (800df00 <taskComputeRc+0xa8c>)
 800de42:	482c      	ldr	r0, [pc, #176]	; (800def4 <taskComputeRc+0xa80>)
 800de44:	f7fb f9e4 	bl	8009210 <GPS_set_next_wp>
                            nav_mode = NAV_MODE_POSHOLD;
 800de48:	4b25      	ldr	r3, [pc, #148]	; (800dee0 <taskComputeRc+0xa6c>)
 800de4a:	2201      	movs	r2, #1
 800de4c:	701a      	strb	r2, [r3, #0]
                            GPS_hold[ALT] = GPS_altitude;
 800de4e:	4b28      	ldr	r3, [pc, #160]	; (800def0 <taskComputeRc+0xa7c>)
 800de50:	881b      	ldrh	r3, [r3, #0]
 800de52:	461a      	mov	r2, r3
 800de54:	4b27      	ldr	r3, [pc, #156]	; (800def4 <taskComputeRc+0xa80>)
 800de56:	609a      	str	r2, [r3, #8]
                            f.CLIMBOUT_FW = 0;
 800de58:	4b15      	ldr	r3, [pc, #84]	; (800deb0 <taskComputeRc+0xa3c>)
 800de5a:	2200      	movs	r2, #0
 800de5c:	74da      	strb	r2, [r3, #19]
                        if (!f.GPS_HOLD_MODE) {
 800de5e:	e00e      	b.n	800de7e <taskComputeRc+0xa0a>
                        }
                    } else {
                        f.GPS_HOLD_MODE = 0;
 800de60:	4b13      	ldr	r3, [pc, #76]	; (800deb0 <taskComputeRc+0xa3c>)
 800de62:	2200      	movs	r2, #0
 800de64:	721a      	strb	r2, [r3, #8]
                        // both boxes are unselected here, nav is reset if not already done
                        if (GPSNavReset == 0) {
 800de66:	4b1f      	ldr	r3, [pc, #124]	; (800dee4 <taskComputeRc+0xa70>)
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d107      	bne.n	800de7e <taskComputeRc+0xa0a>
                            GPSNavReset = 1;
 800de6e:	4b1d      	ldr	r3, [pc, #116]	; (800dee4 <taskComputeRc+0xa70>)
 800de70:	2201      	movs	r2, #1
 800de72:	701a      	strb	r2, [r3, #0]
                            GPS_reset_nav();
 800de74:	f7fb f844 	bl	8008f00 <GPS_reset_nav>
                            f.CLIMBOUT_FW = 0;
 800de78:	4b0d      	ldr	r3, [pc, #52]	; (800deb0 <taskComputeRc+0xa3c>)
 800de7a:	2200      	movs	r2, #0
 800de7c:	74da      	strb	r2, [r3, #19]
                        }
                    }
                }
                // Beep for indication that GPS has found satellites and naze32 is ready to fly
                buzzer(BUZZER_READY_BEEP);
 800de7e:	200c      	movs	r0, #12
 800de80:	f7f6 f93a 	bl	80040f8 <buzzer>
 800de84:	e008      	b.n	800de98 <taskComputeRc+0xa24>
            } else {
                f.GPS_HOME_MODE = 0;
 800de86:	4b0a      	ldr	r3, [pc, #40]	; (800deb0 <taskComputeRc+0xa3c>)
 800de88:	2200      	movs	r2, #0
 800de8a:	71da      	strb	r2, [r3, #7]
                f.GPS_HOLD_MODE = 0;
 800de8c:	4b08      	ldr	r3, [pc, #32]	; (800deb0 <taskComputeRc+0xa3c>)
 800de8e:	2200      	movs	r2, #0
 800de90:	721a      	strb	r2, [r3, #8]
                nav_mode = NAV_MODE_NONE;
 800de92:	4b13      	ldr	r3, [pc, #76]	; (800dee0 <taskComputeRc+0xa6c>)
 800de94:	2200      	movs	r2, #0
 800de96:	701a      	strb	r2, [r3, #0]
            }
        }
#endif

        if (rcOptions[BOXPASSTHRU] && !f.FW_FAILSAFE_RTH_ENABLE) {
 800de98:	4b06      	ldr	r3, [pc, #24]	; (800deb4 <taskComputeRc+0xa40>)
 800de9a:	7b1b      	ldrb	r3, [r3, #12]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d031      	beq.n	800df04 <taskComputeRc+0xa90>
 800dea0:	4b03      	ldr	r3, [pc, #12]	; (800deb0 <taskComputeRc+0xa3c>)
 800dea2:	7c9b      	ldrb	r3, [r3, #18]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d12d      	bne.n	800df04 <taskComputeRc+0xa90>
            f.PASSTHRU_MODE = 1;
 800dea8:	4b01      	ldr	r3, [pc, #4]	; (800deb0 <taskComputeRc+0xa3c>)
 800deaa:	2201      	movs	r2, #1
 800deac:	729a      	strb	r2, [r3, #10]
 800deae:	e02c      	b.n	800df0a <taskComputeRc+0xa96>
 800deb0:	2000174c 	.word	0x2000174c
 800deb4:	200017ec 	.word	0x200017ec
 800deb8:	200014b8 	.word	0x200014b8
 800debc:	200014c0 	.word	0x200014c0
 800dec0:	200017a8 	.word	0x200017a8
 800dec4:	2000190c 	.word	0x2000190c
 800dec8:	200014cc 	.word	0x200014cc
 800decc:	200014bc 	.word	0x200014bc
 800ded0:	20001a7e 	.word	0x20001a7e
 800ded4:	20001a80 	.word	0x20001a80
 800ded8:	2000176e 	.word	0x2000176e
 800dedc:	20001830 	.word	0x20001830
 800dee0:	2000184c 	.word	0x2000184c
 800dee4:	20000058 	.word	0x20000058
 800dee8:	2000181c 	.word	0x2000181c
 800deec:	20001818 	.word	0x20001818
 800def0:	20001836 	.word	0x20001836
 800def4:	20001824 	.word	0x20001824
 800def8:	20000e08 	.word	0x20000e08
 800defc:	20001810 	.word	0x20001810
 800df00:	20001828 	.word	0x20001828
        } else {
            f.PASSTHRU_MODE = 0;
 800df04:	4b47      	ldr	r3, [pc, #284]	; (800e024 <taskComputeRc+0xbb0>)
 800df06:	2200      	movs	r2, #0
 800df08:	729a      	strb	r2, [r3, #10]
        }

        if (f.FIXED_WING) {
 800df0a:	4b46      	ldr	r3, [pc, #280]	; (800e024 <taskComputeRc+0xbb0>)
 800df0c:	7c1b      	ldrb	r3, [r3, #16]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d047      	beq.n	800dfa2 <taskComputeRc+0xb2e>
            f.HEADFREE_MODE = 0;
 800df12:	4b44      	ldr	r3, [pc, #272]	; (800e024 <taskComputeRc+0xbb0>)
 800df14:	2200      	movs	r2, #0
 800df16:	725a      	strb	r2, [r3, #9]
            if (feature(FEATURE_FAILSAFE) && failsafeCnt > (6 * cfg.failsafe_delay)) {
 800df18:	f44f 7000 	mov.w	r0, #512	; 0x200
 800df1c:	f7f9 f8c0 	bl	80070a0 <feature>
 800df20:	4603      	mov	r3, r0
 800df22:	2b00      	cmp	r3, #0
 800df24:	d03d      	beq.n	800dfa2 <taskComputeRc+0xb2e>
 800df26:	4b40      	ldr	r3, [pc, #256]	; (800e028 <taskComputeRc+0xbb4>)
 800df28:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df2c:	4619      	mov	r1, r3
 800df2e:	4b3f      	ldr	r3, [pc, #252]	; (800e02c <taskComputeRc+0xbb8>)
 800df30:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800df34:	461a      	mov	r2, r3
 800df36:	4613      	mov	r3, r2
 800df38:	005b      	lsls	r3, r3, #1
 800df3a:	4413      	add	r3, r2
 800df3c:	005b      	lsls	r3, r3, #1
 800df3e:	4299      	cmp	r1, r3
 800df40:	dd2f      	ble.n	800dfa2 <taskComputeRc+0xb2e>
                f.PASSTHRU_MODE = 0;
 800df42:	4b38      	ldr	r3, [pc, #224]	; (800e024 <taskComputeRc+0xbb0>)
 800df44:	2200      	movs	r2, #0
 800df46:	729a      	strb	r2, [r3, #10]
                f.ANGLE_MODE = 1;
 800df48:	4b36      	ldr	r3, [pc, #216]	; (800e024 <taskComputeRc+0xbb0>)
 800df4a:	2201      	movs	r2, #1
 800df4c:	70da      	strb	r2, [r3, #3]
                for (i = 0; i < 3; i++)
 800df4e:	2300      	movs	r3, #0
 800df50:	613b      	str	r3, [r7, #16]
 800df52:	e00a      	b.n	800df6a <taskComputeRc+0xaf6>
                    rcData[i] = mcfg.midrc;
 800df54:	4b36      	ldr	r3, [pc, #216]	; (800e030 <taskComputeRc+0xbbc>)
 800df56:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800df5a:	b219      	sxth	r1, r3
 800df5c:	4a35      	ldr	r2, [pc, #212]	; (800e034 <taskComputeRc+0xbc0>)
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (i = 0; i < 3; i++)
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	3301      	adds	r3, #1
 800df68:	613b      	str	r3, [r7, #16]
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	2b02      	cmp	r3, #2
 800df6e:	ddf1      	ble.n	800df54 <taskComputeRc+0xae0>
                rcData[THROTTLE] = cfg.failsafe_throttle;
 800df70:	4b2e      	ldr	r3, [pc, #184]	; (800e02c <taskComputeRc+0xbb8>)
 800df72:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800df76:	b21a      	sxth	r2, r3
 800df78:	4b2e      	ldr	r3, [pc, #184]	; (800e034 <taskComputeRc+0xbc0>)
 800df7a:	80da      	strh	r2, [r3, #6]
                // No GPS?  Force a soft left turn.
                if (!f.GPS_FIX && GPS_numSat <= 5) {
 800df7c:	4b29      	ldr	r3, [pc, #164]	; (800e024 <taskComputeRc+0xbb0>)
 800df7e:	7adb      	ldrb	r3, [r3, #11]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d10e      	bne.n	800dfa2 <taskComputeRc+0xb2e>
 800df84:	4b2c      	ldr	r3, [pc, #176]	; (800e038 <taskComputeRc+0xbc4>)
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	2b05      	cmp	r3, #5
 800df8a:	d80a      	bhi.n	800dfa2 <taskComputeRc+0xb2e>
                    f.FW_FAILSAFE_RTH_ENABLE = 0;
 800df8c:	4b25      	ldr	r3, [pc, #148]	; (800e024 <taskComputeRc+0xbb0>)
 800df8e:	2200      	movs	r2, #0
 800df90:	749a      	strb	r2, [r3, #18]
                    rcData[ROLL] = mcfg.midrc - 50;
 800df92:	4b27      	ldr	r3, [pc, #156]	; (800e030 <taskComputeRc+0xbbc>)
 800df94:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800df98:	3b32      	subs	r3, #50	; 0x32
 800df9a:	b29b      	uxth	r3, r3
 800df9c:	b21a      	sxth	r2, r3
 800df9e:	4b25      	ldr	r3, [pc, #148]	; (800e034 <taskComputeRc+0xbc0>)
 800dfa0:	801a      	strh	r2, [r3, #0]
                }
            }
        }
        // When armed and motors aren't spinning. Make warning beeps so that accidentally won't lose fingers...
        // Also disarm board after 5 sec so users without buzzer won't lose fingers.
        if (feature(FEATURE_MOTOR_STOP) && f.ARMED && !f.FIXED_WING) {
 800dfa2:	2010      	movs	r0, #16
 800dfa4:	f7f9 f87c 	bl	80070a0 <feature>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d035      	beq.n	800e01a <taskComputeRc+0xba6>
 800dfae:	4b1d      	ldr	r3, [pc, #116]	; (800e024 <taskComputeRc+0xbb0>)
 800dfb0:	785b      	ldrb	r3, [r3, #1]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d031      	beq.n	800e01a <taskComputeRc+0xba6>
 800dfb6:	4b1b      	ldr	r3, [pc, #108]	; (800e024 <taskComputeRc+0xbb0>)
 800dfb8:	7c1b      	ldrb	r3, [r3, #16]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d12d      	bne.n	800e01a <taskComputeRc+0xba6>
            if (isThrottleLow) {
 800dfbe:	7afb      	ldrb	r3, [r7, #11]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d023      	beq.n	800e00c <taskComputeRc+0xb98>
                if (disarmTime == 0)
 800dfc4:	4b1d      	ldr	r3, [pc, #116]	; (800e03c <taskComputeRc+0xbc8>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d10e      	bne.n	800dfea <taskComputeRc+0xb76>
                    disarmTime = pif_cumulative_timer1ms + 1000 * mcfg.auto_disarm_board;
 800dfcc:	4b18      	ldr	r3, [pc, #96]	; (800e030 <taskComputeRc+0xbbc>)
 800dfce:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dfd8:	fb02 f303 	mul.w	r3, r2, r3
 800dfdc:	461a      	mov	r2, r3
 800dfde:	4b18      	ldr	r3, [pc, #96]	; (800e040 <taskComputeRc+0xbcc>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	4413      	add	r3, r2
 800dfe4:	4a15      	ldr	r2, [pc, #84]	; (800e03c <taskComputeRc+0xbc8>)
 800dfe6:	6013      	str	r3, [r2, #0]
 800dfe8:	e00c      	b.n	800e004 <taskComputeRc+0xb90>
                else if (disarmTime < pif_cumulative_timer1ms && mcfg.auto_disarm_board != 0)
 800dfea:	4b14      	ldr	r3, [pc, #80]	; (800e03c <taskComputeRc+0xbc8>)
 800dfec:	681a      	ldr	r2, [r3, #0]
 800dfee:	4b14      	ldr	r3, [pc, #80]	; (800e040 <taskComputeRc+0xbcc>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d206      	bcs.n	800e004 <taskComputeRc+0xb90>
 800dff6:	4b0e      	ldr	r3, [pc, #56]	; (800e030 <taskComputeRc+0xbbc>)
 800dff8:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d001      	beq.n	800e004 <taskComputeRc+0xb90>
                    mwDisarm();
 800e000:	f7fe ff16 	bl	800ce30 <mwDisarm>
                buzzer(BUZZER_ARMED);
 800e004:	2009      	movs	r0, #9
 800e006:	f7f6 f877 	bl	80040f8 <buzzer>
 800e00a:	e006      	b.n	800e01a <taskComputeRc+0xba6>
            } else if (disarmTime != 0)
 800e00c:	4b0b      	ldr	r3, [pc, #44]	; (800e03c <taskComputeRc+0xbc8>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d002      	beq.n	800e01a <taskComputeRc+0xba6>
                disarmTime = 0;
 800e014:	4b09      	ldr	r3, [pc, #36]	; (800e03c <taskComputeRc+0xbc8>)
 800e016:	2200      	movs	r2, #0
 800e018:	601a      	str	r2, [r3, #0]
        }
    return 0;
 800e01a:	2300      	movs	r3, #0
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3718      	adds	r7, #24
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}
 800e024:	2000174c 	.word	0x2000174c
 800e028:	2000177e 	.word	0x2000177e
 800e02c:	20000e08 	.word	0x20000e08
 800e030:	2000089c 	.word	0x2000089c
 800e034:	20001784 	.word	0x20001784
 800e038:	20001830 	.word	0x20001830
 800e03c:	200018f4 	.word	0x200018f4
 800e040:	20001df8 	.word	0x20001df8

0800e044 <taskLoop>:

uint16_t taskLoop(PifTask *p_task)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
	static int taskOrder = 0;   // never call all function in the same loop, to avoid high delay spikes

	(void)p_task;

	switch (taskOrder) {
 800e04c:	4b15      	ldr	r3, [pc, #84]	; (800e0a4 <taskLoop+0x60>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d002      	beq.n	800e05a <taskLoop+0x16>
 800e054:	2b01      	cmp	r3, #1
 800e056:	d00f      	beq.n	800e078 <taskLoop+0x34>
 800e058:	e01f      	b.n	800e09a <taskLoop+0x56>
		case 0:
			// if GPS feature is enabled, gpsThread() will be called at some intervals to check for stuck
			// hardware, wrong baud rates, init GPS if needed, etc. Don't use SENSOR_GPS here as gpsThread() can and will
			// change this based on available hardware
			taskOrder++;
 800e05a:	4b12      	ldr	r3, [pc, #72]	; (800e0a4 <taskLoop+0x60>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	3301      	adds	r3, #1
 800e060:	4a10      	ldr	r2, [pc, #64]	; (800e0a4 <taskLoop+0x60>)
 800e062:	6013      	str	r3, [r2, #0]
#ifdef GPS
			if (feature(FEATURE_GPS)) {
 800e064:	f44f 7080 	mov.w	r0, #256	; 0x100
 800e068:	f7f9 f81a 	bl	80070a0 <feature>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d002      	beq.n	800e078 <taskLoop+0x34>
				gpsThread();
 800e072:	f7fa fac1 	bl	80085f8 <gpsThread>
				break;
 800e076:	e010      	b.n	800e09a <taskLoop+0x56>
			}
#endif
		case 1:
			taskOrder = 0;
 800e078:	4b0a      	ldr	r3, [pc, #40]	; (800e0a4 <taskLoop+0x60>)
 800e07a:	2200      	movs	r2, #0
 800e07c:	601a      	str	r2, [r3, #0]
			if (feature(FEATURE_VARIO) && f.VARIO_MODE)
 800e07e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800e082:	f7f9 f80d 	bl	80070a0 <feature>
 800e086:	4603      	mov	r3, r0
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d005      	beq.n	800e098 <taskLoop+0x54>
 800e08c:	4b06      	ldr	r3, [pc, #24]	; (800e0a8 <taskLoop+0x64>)
 800e08e:	7bdb      	ldrb	r3, [r3, #15]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d001      	beq.n	800e098 <taskLoop+0x54>
				mwVario();
 800e094:	f7fe fee6 	bl	800ce64 <mwVario>
			break;
 800e098:	bf00      	nop
	}
    return 0;
 800e09a:	2300      	movs	r3, #0
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3708      	adds	r7, #8
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}
 800e0a4:	20001a08 	.word	0x20001a08
 800e0a8:	2000174c 	.word	0x2000174c

0800e0ac <taskComputeImu>:

uint16_t taskComputeImu(PifTask *p_task)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b086      	sub	sp, #24
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
	static int step = 0;

    switch (step) {
 800e0b4:	4ba1      	ldr	r3, [pc, #644]	; (800e33c <taskComputeImu+0x290>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	2b06      	cmp	r3, #6
 800e0ba:	f200 82be 	bhi.w	800e63a <taskComputeImu+0x58e>
 800e0be:	a201      	add	r2, pc, #4	; (adr r2, 800e0c4 <taskComputeImu+0x18>)
 800e0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0c4:	0800e0e1 	.word	0x0800e0e1
 800e0c8:	0800e0f1 	.word	0x0800e0f1
 800e0cc:	0800e0f1 	.word	0x0800e0f1
 800e0d0:	0800e0f1 	.word	0x0800e0f1
 800e0d4:	0800e109 	.word	0x0800e109
 800e0d8:	0800e11b 	.word	0x0800e11b
 800e0dc:	0800e621 	.word	0x0800e621
    case 0:
        // Measure loop rate just afer reading the sensors
        cycleTime = pifTask_GetDeltaTime(p_task, TRUE);
 800e0e0:	2101      	movs	r1, #1
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f006 fe4a 	bl	8014d7c <pifTask_GetDeltaTime>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	b29a      	uxth	r2, r3
 800e0ec:	4b94      	ldr	r3, [pc, #592]	; (800e340 <taskComputeImu+0x294>)
 800e0ee:	801a      	strh	r2, [r3, #0]
    
    case 1:
    case 2:
    case 3:
        step = computeIMU(step);
 800e0f0:	4b92      	ldr	r3, [pc, #584]	; (800e33c <taskComputeImu+0x290>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7fb fe0f 	bl	8009d18 <computeIMU>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	4a8f      	ldr	r2, [pc, #572]	; (800e33c <taskComputeImu+0x290>)
 800e0fe:	6013      	str	r3, [r2, #0]
        pifTask_SetTrigger(p_task);
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f006 fe15 	bl	8014d30 <pifTask_SetTrigger>
		break;
 800e106:	e298      	b.n	800e63a <taskComputeImu+0x58e>

    case 4:
        // non IMU critical, temeperatur
        annexCode();
 800e108:	f7fe f99a 	bl	800c440 <annexCode>
        step = 5;
 800e10c:	4b8b      	ldr	r3, [pc, #556]	; (800e33c <taskComputeImu+0x290>)
 800e10e:	2205      	movs	r2, #5
 800e110:	601a      	str	r2, [r3, #0]
        pifTask_SetTrigger(p_task);
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f006 fe0c 	bl	8014d30 <pifTask_SetTrigger>
    	break;
 800e118:	e28f      	b.n	800e63a <taskComputeImu+0x58e>

    case 5:
#ifdef MAG
        if (sensors(SENSOR_MAG)) {
 800e11a:	2008      	movs	r0, #8
 800e11c:	f7f8 ff78 	bl	8007010 <sensors>
 800e120:	4603      	mov	r3, r0
 800e122:	2b00      	cmp	r3, #0
 800e124:	d057      	beq.n	800e1d6 <taskComputeImu+0x12a>
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800e126:	4b87      	ldr	r3, [pc, #540]	; (800e344 <taskComputeImu+0x298>)
 800e128:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	bfb8      	it	lt
 800e130:	425b      	neglt	r3, r3
 800e132:	b29b      	uxth	r3, r3
 800e134:	2b45      	cmp	r3, #69	; 0x45
 800e136:	d847      	bhi.n	800e1c8 <taskComputeImu+0x11c>
 800e138:	4b83      	ldr	r3, [pc, #524]	; (800e348 <taskComputeImu+0x29c>)
 800e13a:	795b      	ldrb	r3, [r3, #5]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d043      	beq.n	800e1c8 <taskComputeImu+0x11c>
                int16_t dif = heading - magHold;
 800e140:	4b82      	ldr	r3, [pc, #520]	; (800e34c <taskComputeImu+0x2a0>)
 800e142:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e146:	b29a      	uxth	r2, r3
 800e148:	4b81      	ldr	r3, [pc, #516]	; (800e350 <taskComputeImu+0x2a4>)
 800e14a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e14e:	b29b      	uxth	r3, r3
 800e150:	1ad3      	subs	r3, r2, r3
 800e152:	b29b      	uxth	r3, r3
 800e154:	82fb      	strh	r3, [r7, #22]
                if (dif <= -180)
 800e156:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e15a:	f113 0fb3 	cmn.w	r3, #179	; 0xb3
 800e15e:	da04      	bge.n	800e16a <taskComputeImu+0xbe>
                    dif += 360;
 800e160:	8afb      	ldrh	r3, [r7, #22]
 800e162:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e166:	b29b      	uxth	r3, r3
 800e168:	82fb      	strh	r3, [r7, #22]
                if (dif >= +180)
 800e16a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e16e:	2bb3      	cmp	r3, #179	; 0xb3
 800e170:	dd04      	ble.n	800e17c <taskComputeImu+0xd0>
                    dif -= 360;
 800e172:	8afb      	ldrh	r3, [r7, #22]
 800e174:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800e178:	b29b      	uxth	r3, r3
 800e17a:	82fb      	strh	r3, [r7, #22]
                dif *= -mcfg.yaw_control_direction;
 800e17c:	4b75      	ldr	r3, [pc, #468]	; (800e354 <taskComputeImu+0x2a8>)
 800e17e:	f993 315c 	ldrsb.w	r3, [r3, #348]	; 0x15c
 800e182:	425b      	negs	r3, r3
 800e184:	b29a      	uxth	r2, r3
 800e186:	8afb      	ldrh	r3, [r7, #22]
 800e188:	fb12 f303 	smulbb	r3, r2, r3
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	82fb      	strh	r3, [r7, #22]
                if (f.SMALL_ANGLE)
 800e190:	4b6d      	ldr	r3, [pc, #436]	; (800e348 <taskComputeImu+0x29c>)
 800e192:	7b5b      	ldrb	r3, [r3, #13]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d01d      	beq.n	800e1d4 <taskComputeImu+0x128>
                    rcCommand[YAW] -= dif * cfg.P8[PIDMAG] / 30;    // 18 deg
 800e198:	4b6a      	ldr	r3, [pc, #424]	; (800e344 <taskComputeImu+0x298>)
 800e19a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e19e:	b29a      	uxth	r2, r3
 800e1a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e1a4:	496c      	ldr	r1, [pc, #432]	; (800e358 <taskComputeImu+0x2ac>)
 800e1a6:	7a49      	ldrb	r1, [r1, #9]
 800e1a8:	fb01 f303 	mul.w	r3, r1, r3
 800e1ac:	496b      	ldr	r1, [pc, #428]	; (800e35c <taskComputeImu+0x2b0>)
 800e1ae:	fb81 0103 	smull	r0, r1, r1, r3
 800e1b2:	4419      	add	r1, r3
 800e1b4:	1109      	asrs	r1, r1, #4
 800e1b6:	17db      	asrs	r3, r3, #31
 800e1b8:	1a5b      	subs	r3, r3, r1
 800e1ba:	b29b      	uxth	r3, r3
 800e1bc:	4413      	add	r3, r2
 800e1be:	b29b      	uxth	r3, r3
 800e1c0:	b21a      	sxth	r2, r3
 800e1c2:	4b60      	ldr	r3, [pc, #384]	; (800e344 <taskComputeImu+0x298>)
 800e1c4:	809a      	strh	r2, [r3, #4]
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800e1c6:	e005      	b.n	800e1d4 <taskComputeImu+0x128>
            } else
                magHold = heading;
 800e1c8:	4b60      	ldr	r3, [pc, #384]	; (800e34c <taskComputeImu+0x2a0>)
 800e1ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e1ce:	4b60      	ldr	r3, [pc, #384]	; (800e350 <taskComputeImu+0x2a4>)
 800e1d0:	801a      	strh	r2, [r3, #0]
 800e1d2:	e000      	b.n	800e1d6 <taskComputeImu+0x12a>
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800e1d4:	bf00      	nop
        }
#endif

#ifdef BARO
        if (sensors(SENSOR_BARO)) {
 800e1d6:	2004      	movs	r0, #4
 800e1d8:	f7f8 ff1a 	bl	8007010 <sensors>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	f000 80e1 	beq.w	800e3a6 <taskComputeImu+0x2fa>
            if (f.BARO_MODE) {
 800e1e4:	4b58      	ldr	r3, [pc, #352]	; (800e348 <taskComputeImu+0x29c>)
 800e1e6:	799b      	ldrb	r3, [r3, #6]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	f000 80dc 	beq.w	800e3a6 <taskComputeImu+0x2fa>
                static uint8_t isAltHoldChanged = 0;
                if (!f.FIXED_WING) {
 800e1ee:	4b56      	ldr	r3, [pc, #344]	; (800e348 <taskComputeImu+0x29c>)
 800e1f0:	7c1b      	ldrb	r3, [r3, #16]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	f040 80c4 	bne.w	800e380 <taskComputeImu+0x2d4>
                    // multirotor alt hold
                    if (cfg.alt_hold_fast_change) {
 800e1f8:	4b57      	ldr	r3, [pc, #348]	; (800e358 <taskComputeImu+0x2ac>)
 800e1fa:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d053      	beq.n	800e2aa <taskComputeImu+0x1fe>
                        // rapid alt changes
                        if (abs(rcCommand[THROTTLE] - initialThrottleHold) > cfg.alt_hold_throttle_neutral) {
 800e202:	4b50      	ldr	r3, [pc, #320]	; (800e344 <taskComputeImu+0x298>)
 800e204:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e208:	461a      	mov	r2, r3
 800e20a:	4b55      	ldr	r3, [pc, #340]	; (800e360 <taskComputeImu+0x2b4>)
 800e20c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e210:	1ad3      	subs	r3, r2, r3
 800e212:	2b00      	cmp	r3, #0
 800e214:	bfb8      	it	lt
 800e216:	425b      	neglt	r3, r3
 800e218:	4a4f      	ldr	r2, [pc, #316]	; (800e358 <taskComputeImu+0x2ac>)
 800e21a:	f892 20b2 	ldrb.w	r2, [r2, #178]	; 0xb2
 800e21e:	4293      	cmp	r3, r2
 800e220:	dd22      	ble.n	800e268 <taskComputeImu+0x1bc>
                            errorVelocityI = 0;
 800e222:	4b50      	ldr	r3, [pc, #320]	; (800e364 <taskComputeImu+0x2b8>)
 800e224:	2200      	movs	r2, #0
 800e226:	601a      	str	r2, [r3, #0]
                            isAltHoldChanged = 1;
 800e228:	4b4f      	ldr	r3, [pc, #316]	; (800e368 <taskComputeImu+0x2bc>)
 800e22a:	2201      	movs	r2, #1
 800e22c:	701a      	strb	r2, [r3, #0]
                            rcCommand[THROTTLE] += (rcCommand[THROTTLE] > initialThrottleHold) ? -cfg.alt_hold_throttle_neutral : cfg.alt_hold_throttle_neutral;
 800e22e:	4b45      	ldr	r3, [pc, #276]	; (800e344 <taskComputeImu+0x298>)
 800e230:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e234:	b29a      	uxth	r2, r3
 800e236:	4b43      	ldr	r3, [pc, #268]	; (800e344 <taskComputeImu+0x298>)
 800e238:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800e23c:	4b48      	ldr	r3, [pc, #288]	; (800e360 <taskComputeImu+0x2b4>)
 800e23e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e242:	4299      	cmp	r1, r3
 800e244:	dd06      	ble.n	800e254 <taskComputeImu+0x1a8>
 800e246:	4b44      	ldr	r3, [pc, #272]	; (800e358 <taskComputeImu+0x2ac>)
 800e248:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800e24c:	b29b      	uxth	r3, r3
 800e24e:	425b      	negs	r3, r3
 800e250:	b29b      	uxth	r3, r3
 800e252:	e003      	b.n	800e25c <taskComputeImu+0x1b0>
 800e254:	4b40      	ldr	r3, [pc, #256]	; (800e358 <taskComputeImu+0x2ac>)
 800e256:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800e25a:	b29b      	uxth	r3, r3
 800e25c:	4413      	add	r3, r2
 800e25e:	b29b      	uxth	r3, r3
 800e260:	b21a      	sxth	r2, r3
 800e262:	4b38      	ldr	r3, [pc, #224]	; (800e344 <taskComputeImu+0x298>)
 800e264:	80da      	strh	r2, [r3, #6]
 800e266:	e09e      	b.n	800e3a6 <taskComputeImu+0x2fa>
                        } else {
                            if (isAltHoldChanged) {
 800e268:	4b3f      	ldr	r3, [pc, #252]	; (800e368 <taskComputeImu+0x2bc>)
 800e26a:	781b      	ldrb	r3, [r3, #0]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d006      	beq.n	800e27e <taskComputeImu+0x1d2>
                                AltHold = EstAlt;
 800e270:	4b3e      	ldr	r3, [pc, #248]	; (800e36c <taskComputeImu+0x2c0>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4a3e      	ldr	r2, [pc, #248]	; (800e370 <taskComputeImu+0x2c4>)
 800e276:	6013      	str	r3, [r2, #0]
                                isAltHoldChanged = 0;
 800e278:	4b3b      	ldr	r3, [pc, #236]	; (800e368 <taskComputeImu+0x2bc>)
 800e27a:	2200      	movs	r2, #0
 800e27c:	701a      	strb	r2, [r3, #0]
                            }
                            rcCommand[THROTTLE] = constrain(initialThrottleHold + BaroPID, mcfg.minthrottle, mcfg.maxthrottle);
 800e27e:	4b38      	ldr	r3, [pc, #224]	; (800e360 <taskComputeImu+0x2b4>)
 800e280:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e284:	461a      	mov	r2, r3
 800e286:	4b3b      	ldr	r3, [pc, #236]	; (800e374 <taskComputeImu+0x2c8>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	4413      	add	r3, r2
 800e28c:	4a31      	ldr	r2, [pc, #196]	; (800e354 <taskComputeImu+0x2a8>)
 800e28e:	f8b2 2140 	ldrh.w	r2, [r2, #320]	; 0x140
 800e292:	4611      	mov	r1, r2
 800e294:	4a2f      	ldr	r2, [pc, #188]	; (800e354 <taskComputeImu+0x2a8>)
 800e296:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7f5 fd9c 	bl	8003dd8 <constrain>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	b21a      	sxth	r2, r3
 800e2a4:	4b27      	ldr	r3, [pc, #156]	; (800e344 <taskComputeImu+0x298>)
 800e2a6:	80da      	strh	r2, [r3, #6]
 800e2a8:	e07d      	b.n	800e3a6 <taskComputeImu+0x2fa>
                        }
                    } else {
                        // slow alt changes for apfags
                        if (abs(rcCommand[THROTTLE] - initialThrottleHold) > cfg.alt_hold_throttle_neutral) {
 800e2aa:	4b26      	ldr	r3, [pc, #152]	; (800e344 <taskComputeImu+0x298>)
 800e2ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	4b2b      	ldr	r3, [pc, #172]	; (800e360 <taskComputeImu+0x2b4>)
 800e2b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2b8:	1ad3      	subs	r3, r2, r3
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	bfb8      	it	lt
 800e2be:	425b      	neglt	r3, r3
 800e2c0:	4a25      	ldr	r2, [pc, #148]	; (800e358 <taskComputeImu+0x2ac>)
 800e2c2:	f892 20b2 	ldrb.w	r2, [r2, #178]	; 0xb2
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	dd14      	ble.n	800e2f4 <taskComputeImu+0x248>
                            // set velocity proportional to stick movement +100 throttle gives ~ +50 cm/s
                            setVelocity = (rcCommand[THROTTLE] - initialThrottleHold) / 2;
 800e2ca:	4b1e      	ldr	r3, [pc, #120]	; (800e344 <taskComputeImu+0x298>)
 800e2cc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	4b23      	ldr	r3, [pc, #140]	; (800e360 <taskComputeImu+0x2b4>)
 800e2d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2d8:	1ad3      	subs	r3, r2, r3
 800e2da:	0fda      	lsrs	r2, r3, #31
 800e2dc:	4413      	add	r3, r2
 800e2de:	105b      	asrs	r3, r3, #1
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	4b25      	ldr	r3, [pc, #148]	; (800e378 <taskComputeImu+0x2cc>)
 800e2e4:	601a      	str	r2, [r3, #0]
                            velocityControl = 1;
 800e2e6:	4b25      	ldr	r3, [pc, #148]	; (800e37c <taskComputeImu+0x2d0>)
 800e2e8:	2201      	movs	r2, #1
 800e2ea:	701a      	strb	r2, [r3, #0]
                            isAltHoldChanged = 1;
 800e2ec:	4b1e      	ldr	r3, [pc, #120]	; (800e368 <taskComputeImu+0x2bc>)
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	701a      	strb	r2, [r3, #0]
 800e2f2:	e00d      	b.n	800e310 <taskComputeImu+0x264>
                        } else if (isAltHoldChanged) {
 800e2f4:	4b1c      	ldr	r3, [pc, #112]	; (800e368 <taskComputeImu+0x2bc>)
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d009      	beq.n	800e310 <taskComputeImu+0x264>
                            AltHold = EstAlt;
 800e2fc:	4b1b      	ldr	r3, [pc, #108]	; (800e36c <taskComputeImu+0x2c0>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a1b      	ldr	r2, [pc, #108]	; (800e370 <taskComputeImu+0x2c4>)
 800e302:	6013      	str	r3, [r2, #0]
                            velocityControl = 0;
 800e304:	4b1d      	ldr	r3, [pc, #116]	; (800e37c <taskComputeImu+0x2d0>)
 800e306:	2200      	movs	r2, #0
 800e308:	701a      	strb	r2, [r3, #0]
                            isAltHoldChanged = 0;
 800e30a:	4b17      	ldr	r3, [pc, #92]	; (800e368 <taskComputeImu+0x2bc>)
 800e30c:	2200      	movs	r2, #0
 800e30e:	701a      	strb	r2, [r3, #0]
                        }
                        rcCommand[THROTTLE] = constrain(initialThrottleHold + BaroPID, mcfg.minthrottle, mcfg.maxthrottle);
 800e310:	4b13      	ldr	r3, [pc, #76]	; (800e360 <taskComputeImu+0x2b4>)
 800e312:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e316:	461a      	mov	r2, r3
 800e318:	4b16      	ldr	r3, [pc, #88]	; (800e374 <taskComputeImu+0x2c8>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4413      	add	r3, r2
 800e31e:	4a0d      	ldr	r2, [pc, #52]	; (800e354 <taskComputeImu+0x2a8>)
 800e320:	f8b2 2140 	ldrh.w	r2, [r2, #320]	; 0x140
 800e324:	4611      	mov	r1, r2
 800e326:	4a0b      	ldr	r2, [pc, #44]	; (800e354 <taskComputeImu+0x2a8>)
 800e328:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7f5 fd53 	bl	8003dd8 <constrain>
 800e332:	4603      	mov	r3, r0
 800e334:	b21a      	sxth	r2, r3
 800e336:	4b03      	ldr	r3, [pc, #12]	; (800e344 <taskComputeImu+0x298>)
 800e338:	80da      	strh	r2, [r3, #6]
 800e33a:	e034      	b.n	800e3a6 <taskComputeImu+0x2fa>
 800e33c:	20001a0c 	.word	0x20001a0c
 800e340:	2000176c 	.word	0x2000176c
 800e344:	200017a8 	.word	0x200017a8
 800e348:	2000174c 	.word	0x2000174c
 800e34c:	20001a7e 	.word	0x20001a7e
 800e350:	20001a80 	.word	0x20001a80
 800e354:	2000089c 	.word	0x2000089c
 800e358:	20000e08 	.word	0x20000e08
 800e35c:	88888889 	.word	0x88888889
 800e360:	2000190c 	.word	0x2000190c
 800e364:	200014cc 	.word	0x200014cc
 800e368:	20001a10 	.word	0x20001a10
 800e36c:	200014b8 	.word	0x200014b8
 800e370:	200014c0 	.word	0x200014c0
 800e374:	200014bc 	.word	0x200014bc
 800e378:	200014c4 	.word	0x200014c4
 800e37c:	200014c8 	.word	0x200014c8
                    }
                } else {
                    // handle fixedwing-related althold. UNTESTED! and probably wrong
                    // most likely need to check changes on pitch channel and 'reset' althold similar to
                    // how throttle does it on multirotor
                    rcCommand[PITCH] += BaroPID * mcfg.fw_althold_dir;
 800e380:	4bb0      	ldr	r3, [pc, #704]	; (800e644 <taskComputeImu+0x598>)
 800e382:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e386:	b29a      	uxth	r2, r3
 800e388:	4baf      	ldr	r3, [pc, #700]	; (800e648 <taskComputeImu+0x59c>)
 800e38a:	f993 31a0 	ldrsb.w	r3, [r3, #416]	; 0x1a0
 800e38e:	b299      	uxth	r1, r3
 800e390:	4bae      	ldr	r3, [pc, #696]	; (800e64c <taskComputeImu+0x5a0>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	b29b      	uxth	r3, r3
 800e396:	fb11 f303 	smulbb	r3, r1, r3
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	4413      	add	r3, r2
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	b21a      	sxth	r2, r3
 800e3a2:	4ba8      	ldr	r3, [pc, #672]	; (800e644 <taskComputeImu+0x598>)
 800e3a4:	805a      	strh	r2, [r3, #2]
                }
            }
        }
#endif

        if (cfg.throttle_correction_value && (f.ANGLE_MODE || f.HORIZON_MODE)) {
 800e3a6:	4baa      	ldr	r3, [pc, #680]	; (800e650 <taskComputeImu+0x5a4>)
 800e3a8:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d014      	beq.n	800e3da <taskComputeImu+0x32e>
 800e3b0:	4ba8      	ldr	r3, [pc, #672]	; (800e654 <taskComputeImu+0x5a8>)
 800e3b2:	78db      	ldrb	r3, [r3, #3]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d103      	bne.n	800e3c0 <taskComputeImu+0x314>
 800e3b8:	4ba6      	ldr	r3, [pc, #664]	; (800e654 <taskComputeImu+0x5a8>)
 800e3ba:	791b      	ldrb	r3, [r3, #4]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d00c      	beq.n	800e3da <taskComputeImu+0x32e>
            rcCommand[THROTTLE] += throttleAngleCorrection;
 800e3c0:	4ba0      	ldr	r3, [pc, #640]	; (800e644 <taskComputeImu+0x598>)
 800e3c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e3c6:	b29a      	uxth	r2, r3
 800e3c8:	4ba3      	ldr	r3, [pc, #652]	; (800e658 <taskComputeImu+0x5ac>)
 800e3ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	4413      	add	r3, r2
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	b21a      	sxth	r2, r3
 800e3d6:	4b9b      	ldr	r3, [pc, #620]	; (800e644 <taskComputeImu+0x598>)
 800e3d8:	80da      	strh	r2, [r3, #6]
        }

#ifdef GPS
        if (sensors(SENSOR_GPS)) {
 800e3da:	2020      	movs	r0, #32
 800e3dc:	f7f8 fe18 	bl	8007010 <sensors>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	f000 8115 	beq.w	800e612 <taskComputeImu+0x566>
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e3e8:	4b9a      	ldr	r3, [pc, #616]	; (800e654 <taskComputeImu+0x5a8>)
 800e3ea:	79db      	ldrb	r3, [r3, #7]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d104      	bne.n	800e3fa <taskComputeImu+0x34e>
 800e3f0:	4b98      	ldr	r3, [pc, #608]	; (800e654 <taskComputeImu+0x5a8>)
 800e3f2:	7a1b      	ldrb	r3, [r3, #8]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	f000 8103 	beq.w	800e600 <taskComputeImu+0x554>
 800e3fa:	4b96      	ldr	r3, [pc, #600]	; (800e654 <taskComputeImu+0x5a8>)
 800e3fc:	7b1b      	ldrb	r3, [r3, #12]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	f000 80fe 	beq.w	800e600 <taskComputeImu+0x554>
                float sin_yaw_y = sinf(heading * 0.0174532925f);
 800e404:	4b95      	ldr	r3, [pc, #596]	; (800e65c <taskComputeImu+0x5b0>)
 800e406:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e40a:	ee07 3a90 	vmov	s15, r3
 800e40e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e412:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800e660 <taskComputeImu+0x5b4>
 800e416:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e41a:	eeb0 0a67 	vmov.f32	s0, s15
 800e41e:	f016 f8af 	bl	8024580 <sinf>
 800e422:	ed87 0a04 	vstr	s0, [r7, #16]
                float cos_yaw_x = cosf(heading * 0.0174532925f);
 800e426:	4b8d      	ldr	r3, [pc, #564]	; (800e65c <taskComputeImu+0x5b0>)
 800e428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e42c:	ee07 3a90 	vmov	s15, r3
 800e430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e434:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800e660 <taskComputeImu+0x5b4>
 800e438:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e43c:	eeb0 0a67 	vmov.f32	s0, s15
 800e440:	f016 f81a 	bl	8024478 <cosf>
 800e444:	ed87 0a03 	vstr	s0, [r7, #12]
                if (!f.FIXED_WING) {
 800e448:	4b82      	ldr	r3, [pc, #520]	; (800e654 <taskComputeImu+0x5a8>)
 800e44a:	7c1b      	ldrb	r3, [r3, #16]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	f040 80d4 	bne.w	800e5fa <taskComputeImu+0x54e>
                    if (cfg.nav_slew_rate) {
 800e452:	4b7f      	ldr	r3, [pc, #508]	; (800e650 <taskComputeImu+0x5a4>)
 800e454:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e458:	2b00      	cmp	r3, #0
 800e45a:	f000 8087 	beq.w	800e56c <taskComputeImu+0x4c0>
                        nav_rated[LON] += constrain(wrap_18000(nav[LON] - nav_rated[LON]), -cfg.nav_slew_rate, cfg.nav_slew_rate); // TODO check this on uint8
 800e45e:	4b81      	ldr	r3, [pc, #516]	; (800e664 <taskComputeImu+0x5b8>)
 800e460:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e464:	461a      	mov	r2, r3
 800e466:	4b80      	ldr	r3, [pc, #512]	; (800e668 <taskComputeImu+0x5bc>)
 800e468:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e46c:	1ad3      	subs	r3, r2, r3
 800e46e:	4618      	mov	r0, r3
 800e470:	f7fb fac4 	bl	80099fc <wrap_18000>
 800e474:	4b76      	ldr	r3, [pc, #472]	; (800e650 <taskComputeImu+0x5a4>)
 800e476:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e47a:	425b      	negs	r3, r3
 800e47c:	4a74      	ldr	r2, [pc, #464]	; (800e650 <taskComputeImu+0x5a4>)
 800e47e:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 800e482:	4619      	mov	r1, r3
 800e484:	f7f5 fca8 	bl	8003dd8 <constrain>
 800e488:	4601      	mov	r1, r0
 800e48a:	4b77      	ldr	r3, [pc, #476]	; (800e668 <taskComputeImu+0x5bc>)
 800e48c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e490:	b29a      	uxth	r2, r3
 800e492:	b28b      	uxth	r3, r1
 800e494:	4413      	add	r3, r2
 800e496:	b29b      	uxth	r3, r3
 800e498:	b21a      	sxth	r2, r3
 800e49a:	4b73      	ldr	r3, [pc, #460]	; (800e668 <taskComputeImu+0x5bc>)
 800e49c:	805a      	strh	r2, [r3, #2]
                        nav_rated[LAT] += constrain(wrap_18000(nav[LAT] - nav_rated[LAT]), -cfg.nav_slew_rate, cfg.nav_slew_rate);
 800e49e:	4b71      	ldr	r3, [pc, #452]	; (800e664 <taskComputeImu+0x5b8>)
 800e4a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	4b70      	ldr	r3, [pc, #448]	; (800e668 <taskComputeImu+0x5bc>)
 800e4a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4ac:	1ad3      	subs	r3, r2, r3
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7fb faa4 	bl	80099fc <wrap_18000>
 800e4b4:	4b66      	ldr	r3, [pc, #408]	; (800e650 <taskComputeImu+0x5a4>)
 800e4b6:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e4ba:	425b      	negs	r3, r3
 800e4bc:	4a64      	ldr	r2, [pc, #400]	; (800e650 <taskComputeImu+0x5a4>)
 800e4be:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 800e4c2:	4619      	mov	r1, r3
 800e4c4:	f7f5 fc88 	bl	8003dd8 <constrain>
 800e4c8:	4601      	mov	r1, r0
 800e4ca:	4b67      	ldr	r3, [pc, #412]	; (800e668 <taskComputeImu+0x5bc>)
 800e4cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4d0:	b29a      	uxth	r2, r3
 800e4d2:	b28b      	uxth	r3, r1
 800e4d4:	4413      	add	r3, r2
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	b21a      	sxth	r2, r3
 800e4da:	4b63      	ldr	r3, [pc, #396]	; (800e668 <taskComputeImu+0x5bc>)
 800e4dc:	801a      	strh	r2, [r3, #0]
                        GPS_angle[ROLL] = (nav_rated[LON] * cos_yaw_x - nav_rated[LAT] * sin_yaw_y) / 10;
 800e4de:	4b62      	ldr	r3, [pc, #392]	; (800e668 <taskComputeImu+0x5bc>)
 800e4e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e4e4:	ee07 3a90 	vmov	s15, r3
 800e4e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e4ec:	edd7 7a03 	vldr	s15, [r7, #12]
 800e4f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e4f4:	4b5c      	ldr	r3, [pc, #368]	; (800e668 <taskComputeImu+0x5bc>)
 800e4f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4fa:	ee07 3a90 	vmov	s15, r3
 800e4fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e502:	edd7 7a04 	vldr	s15, [r7, #16]
 800e506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e50a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e50e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e512:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e516:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e51a:	ee17 3a90 	vmov	r3, s15
 800e51e:	b21a      	sxth	r2, r3
 800e520:	4b52      	ldr	r3, [pc, #328]	; (800e66c <taskComputeImu+0x5c0>)
 800e522:	801a      	strh	r2, [r3, #0]
                        GPS_angle[PITCH] = (nav_rated[LON] * sin_yaw_y + nav_rated[LAT] * cos_yaw_x) / 10;
 800e524:	4b50      	ldr	r3, [pc, #320]	; (800e668 <taskComputeImu+0x5bc>)
 800e526:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e52a:	ee07 3a90 	vmov	s15, r3
 800e52e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e532:	edd7 7a04 	vldr	s15, [r7, #16]
 800e536:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e53a:	4b4b      	ldr	r3, [pc, #300]	; (800e668 <taskComputeImu+0x5bc>)
 800e53c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e540:	ee07 3a90 	vmov	s15, r3
 800e544:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e548:	edd7 7a03 	vldr	s15, [r7, #12]
 800e54c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e550:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e554:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e558:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e55c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e560:	ee17 3a90 	vmov	r3, s15
 800e564:	b21a      	sxth	r2, r3
 800e566:	4b41      	ldr	r3, [pc, #260]	; (800e66c <taskComputeImu+0x5c0>)
 800e568:	805a      	strh	r2, [r3, #2]
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e56a:	e052      	b.n	800e612 <taskComputeImu+0x566>
                    } else {
                        GPS_angle[ROLL] = (nav[LON] * cos_yaw_x - nav[LAT] * sin_yaw_y) / 10;
 800e56c:	4b3d      	ldr	r3, [pc, #244]	; (800e664 <taskComputeImu+0x5b8>)
 800e56e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e572:	ee07 3a90 	vmov	s15, r3
 800e576:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e57a:	edd7 7a03 	vldr	s15, [r7, #12]
 800e57e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e582:	4b38      	ldr	r3, [pc, #224]	; (800e664 <taskComputeImu+0x5b8>)
 800e584:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e588:	ee07 3a90 	vmov	s15, r3
 800e58c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e590:	edd7 7a04 	vldr	s15, [r7, #16]
 800e594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e598:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e59c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e5a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e5a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e5a8:	ee17 3a90 	vmov	r3, s15
 800e5ac:	b21a      	sxth	r2, r3
 800e5ae:	4b2f      	ldr	r3, [pc, #188]	; (800e66c <taskComputeImu+0x5c0>)
 800e5b0:	801a      	strh	r2, [r3, #0]
                        GPS_angle[PITCH] = (nav[LON] * sin_yaw_y + nav[LAT] * cos_yaw_x) / 10;
 800e5b2:	4b2c      	ldr	r3, [pc, #176]	; (800e664 <taskComputeImu+0x5b8>)
 800e5b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e5b8:	ee07 3a90 	vmov	s15, r3
 800e5bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e5c0:	edd7 7a04 	vldr	s15, [r7, #16]
 800e5c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e5c8:	4b26      	ldr	r3, [pc, #152]	; (800e664 <taskComputeImu+0x5b8>)
 800e5ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5ce:	ee07 3a90 	vmov	s15, r3
 800e5d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e5d6:	edd7 7a03 	vldr	s15, [r7, #12]
 800e5da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e5de:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e5e2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e5e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e5ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e5ee:	ee17 3a90 	vmov	r3, s15
 800e5f2:	b21a      	sxth	r2, r3
 800e5f4:	4b1d      	ldr	r3, [pc, #116]	; (800e66c <taskComputeImu+0x5c0>)
 800e5f6:	805a      	strh	r2, [r3, #2]
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e5f8:	e00b      	b.n	800e612 <taskComputeImu+0x566>
                    }
                } else fw_nav();
 800e5fa:	f7f8 fe83 	bl	8007304 <fw_nav>
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e5fe:	e008      	b.n	800e612 <taskComputeImu+0x566>
            } else {
                GPS_angle[ROLL] = 0;
 800e600:	4b1a      	ldr	r3, [pc, #104]	; (800e66c <taskComputeImu+0x5c0>)
 800e602:	2200      	movs	r2, #0
 800e604:	801a      	strh	r2, [r3, #0]
                GPS_angle[PITCH] = 0;
 800e606:	4b19      	ldr	r3, [pc, #100]	; (800e66c <taskComputeImu+0x5c0>)
 800e608:	2200      	movs	r2, #0
 800e60a:	805a      	strh	r2, [r3, #2]
                GPS_angle[YAW] = 0;
 800e60c:	4b17      	ldr	r3, [pc, #92]	; (800e66c <taskComputeImu+0x5c0>)
 800e60e:	2200      	movs	r2, #0
 800e610:	809a      	strh	r2, [r3, #4]
            }
        }
#endif
        step = 6;
 800e612:	4b17      	ldr	r3, [pc, #92]	; (800e670 <taskComputeImu+0x5c4>)
 800e614:	2206      	movs	r2, #6
 800e616:	601a      	str	r2, [r3, #0]
        pifTask_SetTrigger(p_task);
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f006 fb89 	bl	8014d30 <pifTask_SetTrigger>
    	break;
 800e61e:	e00c      	b.n	800e63a <taskComputeImu+0x58e>

    case 6:
        // PID - note this is function pointer set by setPIDController()
        pid_controller();
 800e620:	4b14      	ldr	r3, [pc, #80]	; (800e674 <taskComputeImu+0x5c8>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	4798      	blx	r3

        mixTable();
 800e626:	f7fd fb71 	bl	800bd0c <mixTable>
        writeServos();
 800e62a:	f7fc ffc7 	bl	800b5bc <writeServos>
        writeMotors();
 800e62e:	f7fd f8fd 	bl	800b82c <writeMotors>
        step = 0;
 800e632:	4b0f      	ldr	r3, [pc, #60]	; (800e670 <taskComputeImu+0x5c4>)
 800e634:	2200      	movs	r2, #0
 800e636:	601a      	str	r2, [r3, #0]
    	break;
 800e638:	bf00      	nop
	}

    return 0;
 800e63a:	2300      	movs	r3, #0
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3718      	adds	r7, #24
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}
 800e644:	200017a8 	.word	0x200017a8
 800e648:	2000089c 	.word	0x2000089c
 800e64c:	200014bc 	.word	0x200014bc
 800e650:	20000e08 	.word	0x20000e08
 800e654:	2000174c 	.word	0x2000174c
 800e658:	200014d4 	.word	0x200014d4
 800e65c:	20001a7e 	.word	0x20001a7e
 800e660:	3c8efa35 	.word	0x3c8efa35
 800e664:	20001844 	.word	0x20001844
 800e668:	20001848 	.word	0x20001848
 800e66c:	2000183c 	.word	0x2000183c
 800e670:	20001a0c 	.word	0x20001a0c
 800e674:	20000050 	.word	0x20000050

0800e678 <mspReadRawRC>:
#include "board.h"
#include "mw.h"


static uint16_t mspReadRawRC(uint8_t chan)
{
 800e678:	b480      	push	{r7}
 800e67a:	b083      	sub	sp, #12
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	4603      	mov	r3, r0
 800e680:	71fb      	strb	r3, [r7, #7]
    return rcData[chan];
 800e682:	79fb      	ldrb	r3, [r7, #7]
 800e684:	4a04      	ldr	r2, [pc, #16]	; (800e698 <mspReadRawRC+0x20>)
 800e686:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800e68a:	b29b      	uxth	r3, r3
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	370c      	adds	r7, #12
 800e690:	46bd      	mov	sp, r7
 800e692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e696:	4770      	bx	lr
 800e698:	20001784 	.word	0x20001784

0800e69c <mspFrameRecieve>:

void mspFrameRecieve(void)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	af00      	add	r7, sp, #0
    failsafeCnt = 0; // clear FailSafe counter
 800e6a0:	4b04      	ldr	r3, [pc, #16]	; (800e6b4 <mspFrameRecieve+0x18>)
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	801a      	strh	r2, [r3, #0]

    pifTask_SetTrigger(g_task_compute_rc);
 800e6a6:	4b04      	ldr	r3, [pc, #16]	; (800e6b8 <mspFrameRecieve+0x1c>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f006 fb40 	bl	8014d30 <pifTask_SetTrigger>
}
 800e6b0:	bf00      	nop
 800e6b2:	bd80      	pop	{r7, pc}
 800e6b4:	2000177e 	.word	0x2000177e
 800e6b8:	200015a8 	.word	0x200015a8

0800e6bc <mspInit>:

void mspInit(rcReadRawDataPtr *callback)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
    if (callback)
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d002      	beq.n	800e6d0 <mspInit+0x14>
        *callback = mspReadRawRC;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	4a03      	ldr	r2, [pc, #12]	; (800e6dc <mspInit+0x20>)
 800e6ce:	601a      	str	r2, [r3, #0]
}
 800e6d0:	bf00      	nop
 800e6d2:	370c      	adds	r7, #12
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr
 800e6dc:	0800e679 	.word	0x0800e679

0800e6e0 <sbusReadRawRC>:
static PifRcSbus s_sbus;
static uint32_t sbusChannelData[SBUS_MAX_CHANNEL];


static uint16_t sbusReadRawRC(uint8_t chan)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b083      	sub	sp, #12
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	71fb      	strb	r3, [r7, #7]
    return sbusChannelData[mcfg.rcmap[chan]];
 800e6ea:	79fb      	ldrb	r3, [r7, #7]
 800e6ec:	4a07      	ldr	r2, [pc, #28]	; (800e70c <sbusReadRawRC+0x2c>)
 800e6ee:	4413      	add	r3, r2
 800e6f0:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 800e6f4:	461a      	mov	r2, r3
 800e6f6:	4b06      	ldr	r3, [pc, #24]	; (800e710 <sbusReadRawRC+0x30>)
 800e6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6fc:	b29b      	uxth	r3, r3
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	370c      	adds	r7, #12
 800e702:	46bd      	mov	sp, r7
 800e704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e708:	4770      	bx	lr
 800e70a:	bf00      	nop
 800e70c:	2000089c 	.word	0x2000089c
 800e710:	20001a58 	.word	0x20001a58

0800e714 <_evtSbusReceive>:

static void _evtSbusReceive(PifRc* p_owner, uint16_t* channel, PifIssuerP p_issuer)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b086      	sub	sp, #24
 800e718:	af00      	add	r7, sp, #0
 800e71a:	60f8      	str	r0, [r7, #12]
 800e71c:	60b9      	str	r1, [r7, #8]
 800e71e:	607a      	str	r2, [r7, #4]
    PifTask* p_task;

    // internal failsafe enabled and rx failsafe flag set
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 800e720:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e724:	f7f8 fcbc 	bl	80070a0 <feature>
 800e728:	4603      	mov	r3, r0
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d005      	beq.n	800e73a <_evtSbusReceive+0x26>
 800e72e:	68f8      	ldr	r0, [r7, #12]
 800e730:	f009 ffe2 	bl	80186f8 <pifRc_CheckFailSafe>
 800e734:	4603      	mov	r3, r0
 800e736:	2b00      	cmp	r3, #0
 800e738:	d11b      	bne.n	800e772 <_evtSbusReceive+0x5e>

    failsafeCnt = 0; // clear FailSafe counter
 800e73a:	4b10      	ldr	r3, [pc, #64]	; (800e77c <_evtSbusReceive+0x68>)
 800e73c:	2200      	movs	r2, #0
 800e73e:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < SBUS_MAX_CHANNEL; i++) {
 800e740:	2300      	movs	r3, #0
 800e742:	617b      	str	r3, [r7, #20]
 800e744:	e00c      	b.n	800e760 <_evtSbusReceive+0x4c>
		sbusChannelData[i] = channel[i];
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	005b      	lsls	r3, r3, #1
 800e74a:	68ba      	ldr	r2, [r7, #8]
 800e74c:	4413      	add	r3, r2
 800e74e:	881b      	ldrh	r3, [r3, #0]
 800e750:	4619      	mov	r1, r3
 800e752:	4a0b      	ldr	r2, [pc, #44]	; (800e780 <_evtSbusReceive+0x6c>)
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < SBUS_MAX_CHANNEL; i++) {
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	3301      	adds	r3, #1
 800e75e:	617b      	str	r3, [r7, #20]
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	2b07      	cmp	r3, #7
 800e764:	ddef      	ble.n	800e746 <_evtSbusReceive+0x32>
	}

	p_task = (PifTask*)p_issuer;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	613b      	str	r3, [r7, #16]
	pifTask_SetTrigger(p_task);
 800e76a:	6938      	ldr	r0, [r7, #16]
 800e76c:	f006 fae0 	bl	8014d30 <pifTask_SetTrigger>
 800e770:	e000      	b.n	800e774 <_evtSbusReceive+0x60>
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 800e772:	bf00      	nop
}
 800e774:	3718      	adds	r7, #24
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}
 800e77a:	bf00      	nop
 800e77c:	2000177e 	.word	0x2000177e
 800e780:	20001a58 	.word	0x20001a58

0800e784 <sbusInit>:

BOOL sbusInit(int uart, rcReadRawDataPtr *callback)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b084      	sub	sp, #16
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	6039      	str	r1, [r7, #0]
    int b;

    for (b = 0; b < SBUS_MAX_CHANNEL; b++)
 800e78e:	2300      	movs	r3, #0
 800e790:	60fb      	str	r3, [r7, #12]
 800e792:	e00a      	b.n	800e7aa <sbusInit+0x26>
        sbusChannelData[b] = mcfg.midrc;
 800e794:	4b22      	ldr	r3, [pc, #136]	; (800e820 <sbusInit+0x9c>)
 800e796:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800e79a:	4619      	mov	r1, r3
 800e79c:	4a21      	ldr	r2, [pc, #132]	; (800e824 <sbusInit+0xa0>)
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (b = 0; b < SBUS_MAX_CHANNEL; b++)
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	60fb      	str	r3, [r7, #12]
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	2b07      	cmp	r3, #7
 800e7ae:	ddf1      	ble.n	800e794 <sbusInit+0x10>

    core.rcvrport = uartOpen(uart, 100000, (portMode_t)(MODE_RX | MODE_SBUS), 2);	// 2ms
 800e7b0:	2302      	movs	r3, #2
 800e7b2:	2205      	movs	r2, #5
 800e7b4:	491c      	ldr	r1, [pc, #112]	; (800e828 <sbusInit+0xa4>)
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f7f3 fe04 	bl	80023c4 <uartOpen>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	4a1b      	ldr	r2, [pc, #108]	; (800e82c <sbusInit+0xa8>)
 800e7c0:	6113      	str	r3, [r2, #16]
    if (!core.rcvrport) return FALSE;
 800e7c2:	4b1a      	ldr	r3, [pc, #104]	; (800e82c <sbusInit+0xa8>)
 800e7c4:	691b      	ldr	r3, [r3, #16]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d101      	bne.n	800e7ce <sbusInit+0x4a>
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	e023      	b.n	800e816 <sbusInit+0x92>

    if (!pifRcSbus_Init(&s_sbus, PIF_ID_AUTO)) return FALSE;
 800e7ce:	2100      	movs	r1, #0
 800e7d0:	4817      	ldr	r0, [pc, #92]	; (800e830 <sbusInit+0xac>)
 800e7d2:	f00a fe2f 	bl	8019434 <pifRcSbus_Init>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d101      	bne.n	800e7e0 <sbusInit+0x5c>
 800e7dc:	2300      	movs	r3, #0
 800e7de:	e01a      	b.n	800e816 <sbusInit+0x92>
    pifRc_AttachEvtReceive(&s_sbus.parent, _evtSbusReceive, g_task_compute_rc);
 800e7e0:	4b14      	ldr	r3, [pc, #80]	; (800e834 <sbusInit+0xb0>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	4914      	ldr	r1, [pc, #80]	; (800e838 <sbusInit+0xb4>)
 800e7e8:	4811      	ldr	r0, [pc, #68]	; (800e830 <sbusInit+0xac>)
 800e7ea:	f009 ff73 	bl	80186d4 <pifRc_AttachEvtReceive>
    pifRcSbus_AttachComm(&s_sbus, &core.rcvrport->comm);
 800e7ee:	4b0f      	ldr	r3, [pc, #60]	; (800e82c <sbusInit+0xa8>)
 800e7f0:	691b      	ldr	r3, [r3, #16]
 800e7f2:	3304      	adds	r3, #4
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	480e      	ldr	r0, [pc, #56]	; (800e830 <sbusInit+0xac>)
 800e7f8:	f00a fe4c 	bl	8019494 <pifRcSbus_AttachComm>

    if (callback)
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d002      	beq.n	800e808 <sbusInit+0x84>
        *callback = sbusReadRawRC;
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	4a0d      	ldr	r2, [pc, #52]	; (800e83c <sbusInit+0xb8>)
 800e806:	601a      	str	r2, [r3, #0]

    serialStartReceiveFunc(&core.rcvrport->comm);
 800e808:	4b08      	ldr	r3, [pc, #32]	; (800e82c <sbusInit+0xa8>)
 800e80a:	691b      	ldr	r3, [r3, #16]
 800e80c:	3304      	adds	r3, #4
 800e80e:	4618      	mov	r0, r3
 800e810:	f7f3 ff64 	bl	80026dc <serialStartReceiveFunc>

    return TRUE;
 800e814:	2301      	movs	r3, #1
}
 800e816:	4618      	mov	r0, r3
 800e818:	3710      	adds	r7, #16
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
 800e81e:	bf00      	nop
 800e820:	2000089c 	.word	0x2000089c
 800e824:	20001a58 	.word	0x20001a58
 800e828:	000186a0 	.word	0x000186a0
 800e82c:	200007e4 	.word	0x200007e4
 800e830:	20001a14 	.word	0x20001a14
 800e834:	200015a8 	.word	0x200015a8
 800e838:	0800e715 	.word	0x0800e715
 800e83c:	0800e6e1 	.word	0x0800e6e1

0800e840 <sensorsAutodetect>:
#endif
};


bool sensorsAutodetect(sensorDetect_t* gyroDetect, sensorDetect_t* accDetect, sensorDetect_t* baroDetect, sensorDetect_t* magDetect)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b086      	sub	sp, #24
 800e844:	af00      	add	r7, sp, #0
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	60b9      	str	r1, [r7, #8]
 800e84a:	607a      	str	r2, [r7, #4]
 800e84c:	603b      	str	r3, [r7, #0]
    int16_t deg, min;

    pifImuSensor_Init(&sensor_set.imu_sensor);
 800e84e:	4878      	ldr	r0, [pc, #480]	; (800ea30 <sensorsAutodetect+0x1f0>)
 800e850:	f00b ffc8 	bl	801a7e4 <pifImuSensor_Init>
    pifImuSensor_InitBoardAlignment(&sensor_set.imu_sensor, mcfg.board_align_roll, mcfg.board_align_pitch, mcfg.board_align_yaw);
 800e854:	4b77      	ldr	r3, [pc, #476]	; (800ea34 <sensorsAutodetect+0x1f4>)
 800e856:	f9b3 1156 	ldrsh.w	r1, [r3, #342]	; 0x156
 800e85a:	4b76      	ldr	r3, [pc, #472]	; (800ea34 <sensorsAutodetect+0x1f4>)
 800e85c:	f9b3 2158 	ldrsh.w	r2, [r3, #344]	; 0x158
 800e860:	4b74      	ldr	r3, [pc, #464]	; (800ea34 <sensorsAutodetect+0x1f4>)
 800e862:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 800e866:	4872      	ldr	r0, [pc, #456]	; (800ea30 <sensorsAutodetect+0x1f0>)
 800e868:	f00b ffca 	bl	801a800 <pifImuSensor_InitBoardAlignment>

    // set gyro low pass filter parameters
    sensor_set.gyro.lpf = mcfg.gyro_lpf;
 800e86c:	4b71      	ldr	r3, [pc, #452]	; (800ea34 <sensorsAutodetect+0x1f4>)
 800e86e:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
 800e872:	4b6f      	ldr	r3, [pc, #444]	; (800ea30 <sensorsAutodetect+0x1f0>)
 800e874:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88

    // Autodetect Invensense gyro hardware
    while (gyroDetect->p_func) {
 800e878:	e010      	b.n	800e89c <sensorsAutodetect+0x5c>
    	if ((*gyroDetect->p_func)(&sensor_set, gyroDetect->p_param)) {
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	68fa      	ldr	r2, [r7, #12]
 800e880:	6852      	ldr	r2, [r2, #4]
 800e882:	4611      	mov	r1, r2
 800e884:	486a      	ldr	r0, [pc, #424]	; (800ea30 <sensorsAutodetect+0x1f0>)
 800e886:	4798      	blx	r3
 800e888:	4603      	mov	r3, r0
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d003      	beq.n	800e896 <sensorsAutodetect+0x56>
    	    sensorsSet(SENSOR_GYRO);
 800e88e:	2001      	movs	r0, #1
 800e890:	f7f8 fbd4 	bl	800703c <sensorsSet>
    		break;
 800e894:	e006      	b.n	800e8a4 <sensorsAutodetect+0x64>
    	}
    	gyroDetect++;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	3308      	adds	r3, #8
 800e89a:	60fb      	str	r3, [r7, #12]
    while (gyroDetect->p_func) {
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d1ea      	bne.n	800e87a <sensorsAutodetect+0x3a>
    }
    if (!sensor_set.gyro.hardware) return false;
 800e8a4:	4b62      	ldr	r3, [pc, #392]	; (800ea30 <sensorsAutodetect+0x1f0>)
 800e8a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d101      	bne.n	800e8b0 <sensorsAutodetect+0x70>
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	e0ba      	b.n	800ea26 <sensorsAutodetect+0x1e6>

    // Autodetect Invensense acc hardware
    if (sensor_set.acc.hardware) {
 800e8b0:	4b5f      	ldr	r3, [pc, #380]	; (800ea30 <sensorsAutodetect+0x1f0>)
 800e8b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d003      	beq.n	800e8c2 <sensorsAutodetect+0x82>
    	sensorsSet(SENSOR_ACC);
 800e8ba:	2002      	movs	r0, #2
 800e8bc:	f7f8 fbbe 	bl	800703c <sensorsSet>
 800e8c0:	e018      	b.n	800e8f4 <sensorsAutodetect+0xb4>
    }
    else if (accDetect) {
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d015      	beq.n	800e8f4 <sensorsAutodetect+0xb4>
        while (accDetect->p_func) {
 800e8c8:	e010      	b.n	800e8ec <sensorsAutodetect+0xac>
        	if ((*accDetect->p_func)(&sensor_set, accDetect->p_param)) {
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	68ba      	ldr	r2, [r7, #8]
 800e8d0:	6852      	ldr	r2, [r2, #4]
 800e8d2:	4611      	mov	r1, r2
 800e8d4:	4856      	ldr	r0, [pc, #344]	; (800ea30 <sensorsAutodetect+0x1f0>)
 800e8d6:	4798      	blx	r3
 800e8d8:	4603      	mov	r3, r0
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d003      	beq.n	800e8e6 <sensorsAutodetect+0xa6>
            	sensorsSet(SENSOR_ACC);
 800e8de:	2002      	movs	r0, #2
 800e8e0:	f7f8 fbac 	bl	800703c <sensorsSet>
        		break;
 800e8e4:	e006      	b.n	800e8f4 <sensorsAutodetect+0xb4>
        	}
        	accDetect++;
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	3308      	adds	r3, #8
 800e8ea:	60bb      	str	r3, [r7, #8]
        while (accDetect->p_func) {
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d1ea      	bne.n	800e8ca <sensorsAutodetect+0x8a>
        }
    }

#ifdef BARO
    // Autodetect Invensense baro hardware
    if (sensor_set.baro.hardware) {
 800e8f4:	4b4e      	ldr	r3, [pc, #312]	; (800ea30 <sensorsAutodetect+0x1f0>)
 800e8f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d003      	beq.n	800e906 <sensorsAutodetect+0xc6>
    	sensorsSet(SENSOR_BARO);
 800e8fe:	2004      	movs	r0, #4
 800e900:	f7f8 fb9c 	bl	800703c <sensorsSet>
 800e904:	e018      	b.n	800e938 <sensorsAutodetect+0xf8>
    }
    else if (baroDetect) {
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d015      	beq.n	800e938 <sensorsAutodetect+0xf8>
		while (baroDetect->p_func) {
 800e90c:	e010      	b.n	800e930 <sensorsAutodetect+0xf0>
			if ((*baroDetect->p_func)(&sensor_set, baroDetect->p_param)) {
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	687a      	ldr	r2, [r7, #4]
 800e914:	6852      	ldr	r2, [r2, #4]
 800e916:	4611      	mov	r1, r2
 800e918:	4845      	ldr	r0, [pc, #276]	; (800ea30 <sensorsAutodetect+0x1f0>)
 800e91a:	4798      	blx	r3
 800e91c:	4603      	mov	r3, r0
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d003      	beq.n	800e92a <sensorsAutodetect+0xea>
				sensorsSet(SENSOR_BARO);
 800e922:	2004      	movs	r0, #4
 800e924:	f7f8 fb8a 	bl	800703c <sensorsSet>
				break;
 800e928:	e006      	b.n	800e938 <sensorsAutodetect+0xf8>
			}
			baroDetect++;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	3308      	adds	r3, #8
 800e92e:	607b      	str	r3, [r7, #4]
		while (baroDetect->p_func) {
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d1ea      	bne.n	800e90e <sensorsAutodetect+0xce>
#else
    (void)baroDetect;
#endif

    // Now time to init things, acc first
    if (sensors(SENSOR_ACC))
 800e938:	2002      	movs	r0, #2
 800e93a:	f7f8 fb69 	bl	8007010 <sensors>
 800e93e:	4603      	mov	r3, r0
 800e940:	2b00      	cmp	r3, #0
 800e942:	d008      	beq.n	800e956 <sensorsAutodetect+0x116>
        sensor_set.acc.init(&sensor_set, mcfg.acc_align);
 800e944:	4b3a      	ldr	r3, [pc, #232]	; (800ea30 <sensorsAutodetect+0x1f0>)
 800e946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e94a:	4a3a      	ldr	r2, [pc, #232]	; (800ea34 <sensorsAutodetect+0x1f4>)
 800e94c:	f892 2154 	ldrb.w	r2, [r2, #340]	; 0x154
 800e950:	4611      	mov	r1, r2
 800e952:	4837      	ldr	r0, [pc, #220]	; (800ea30 <sensorsAutodetect+0x1f0>)
 800e954:	4798      	blx	r3
    // this is safe because either mpu6050 or mpu3050 or lg3d20 sets it, and in case of fail, we never get here.
    sensor_set.gyro.init(&sensor_set, mcfg.gyro_align);
 800e956:	4b36      	ldr	r3, [pc, #216]	; (800ea30 <sensorsAutodetect+0x1f0>)
 800e958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e95a:	4a36      	ldr	r2, [pc, #216]	; (800ea34 <sensorsAutodetect+0x1f4>)
 800e95c:	f892 2153 	ldrb.w	r2, [r2, #339]	; 0x153
 800e960:	4611      	mov	r1, r2
 800e962:	4833      	ldr	r0, [pc, #204]	; (800ea30 <sensorsAutodetect+0x1f0>)
 800e964:	4798      	blx	r3

#ifdef MAG
    // Autodetect Invensense mag hardware
    if (sensor_set.mag.hardware) {
 800e966:	4b32      	ldr	r3, [pc, #200]	; (800ea30 <sensorsAutodetect+0x1f0>)
 800e968:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d003      	beq.n	800e978 <sensorsAutodetect+0x138>
    	sensorsSet(SENSOR_MAG);
 800e970:	2008      	movs	r0, #8
 800e972:	f7f8 fb63 	bl	800703c <sensorsSet>
 800e976:	e018      	b.n	800e9aa <sensorsAutodetect+0x16a>
    }
    else if (magDetect) {
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d015      	beq.n	800e9aa <sensorsAutodetect+0x16a>
		while (magDetect->p_func) {
 800e97e:	e010      	b.n	800e9a2 <sensorsAutodetect+0x162>
			if ((*magDetect->p_func)(&sensor_set, magDetect->p_param)) {
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	683a      	ldr	r2, [r7, #0]
 800e986:	6852      	ldr	r2, [r2, #4]
 800e988:	4611      	mov	r1, r2
 800e98a:	4829      	ldr	r0, [pc, #164]	; (800ea30 <sensorsAutodetect+0x1f0>)
 800e98c:	4798      	blx	r3
 800e98e:	4603      	mov	r3, r0
 800e990:	2b00      	cmp	r3, #0
 800e992:	d003      	beq.n	800e99c <sensorsAutodetect+0x15c>
				sensorsSet(SENSOR_MAG);
 800e994:	2008      	movs	r0, #8
 800e996:	f7f8 fb51 	bl	800703c <sensorsSet>
				break;
 800e99a:	e006      	b.n	800e9aa <sensorsAutodetect+0x16a>
			}
			magDetect++;
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	3308      	adds	r3, #8
 800e9a0:	603b      	str	r3, [r7, #0]
		while (magDetect->p_func) {
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d1ea      	bne.n	800e980 <sensorsAutodetect+0x140>
#else
    (void)magDetect;
#endif

    // calculate magnetic declination
    deg = cfg.mag_declination / 100;
 800e9aa:	4b23      	ldr	r3, [pc, #140]	; (800ea38 <sensorsAutodetect+0x1f8>)
 800e9ac:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800e9b0:	4a22      	ldr	r2, [pc, #136]	; (800ea3c <sensorsAutodetect+0x1fc>)
 800e9b2:	fb82 1203 	smull	r1, r2, r2, r3
 800e9b6:	1152      	asrs	r2, r2, #5
 800e9b8:	17db      	asrs	r3, r3, #31
 800e9ba:	1ad3      	subs	r3, r2, r3
 800e9bc:	82fb      	strh	r3, [r7, #22]
    min = cfg.mag_declination % 100;
 800e9be:	4b1e      	ldr	r3, [pc, #120]	; (800ea38 <sensorsAutodetect+0x1f8>)
 800e9c0:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800e9c4:	4a1d      	ldr	r2, [pc, #116]	; (800ea3c <sensorsAutodetect+0x1fc>)
 800e9c6:	fb82 1203 	smull	r1, r2, r2, r3
 800e9ca:	1151      	asrs	r1, r2, #5
 800e9cc:	17da      	asrs	r2, r3, #31
 800e9ce:	1a8a      	subs	r2, r1, r2
 800e9d0:	2164      	movs	r1, #100	; 0x64
 800e9d2:	fb01 f202 	mul.w	r2, r1, r2
 800e9d6:	1a9b      	subs	r3, r3, r2
 800e9d8:	82bb      	strh	r3, [r7, #20]
    if (sensors(SENSOR_MAG))
 800e9da:	2008      	movs	r0, #8
 800e9dc:	f7f8 fb18 	bl	8007010 <sensors>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d019      	beq.n	800ea1a <sensorsAutodetect+0x1da>
        sensor_set.mag.declination = (deg + ((float)min * (1.0f / 60.0f))) * 10; // heading is in 0.1deg units
 800e9e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e9ea:	ee07 3a90 	vmov	s15, r3
 800e9ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e9f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e9f6:	ee07 3a90 	vmov	s15, r3
 800e9fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e9fe:	eddf 6a10 	vldr	s13, [pc, #64]	; 800ea40 <sensorsAutodetect+0x200>
 800ea02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ea06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea0a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ea0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea12:	4b07      	ldr	r3, [pc, #28]	; (800ea30 <sensorsAutodetect+0x1f0>)
 800ea14:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800ea18:	e004      	b.n	800ea24 <sensorsAutodetect+0x1e4>
    else
        sensor_set.mag.declination = 0.0f;
 800ea1a:	4b05      	ldr	r3, [pc, #20]	; (800ea30 <sensorsAutodetect+0x1f0>)
 800ea1c:	f04f 0200 	mov.w	r2, #0
 800ea20:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    return true;
 800ea24:	2301      	movs	r3, #1
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3718      	adds	r7, #24
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	20000060 	.word	0x20000060
 800ea34:	2000089c 	.word	0x2000089c
 800ea38:	20000e08 	.word	0x20000e08
 800ea3c:	51eb851f 	.word	0x51eb851f
 800ea40:	3c888889 	.word	0x3c888889

0800ea44 <RSSI_getValue>:

uint16_t RSSI_getValue(void)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
    uint16_t value = 0;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	80fb      	strh	r3, [r7, #6]

    if (mcfg.rssi_aux_channel > 0) {
 800ea4e:	4b2a      	ldr	r3, [pc, #168]	; (800eaf8 <RSSI_getValue+0xb4>)
 800ea50:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d029      	beq.n	800eaac <RSSI_getValue+0x68>
        const int16_t rssiChannelData = rcData[AUX1 + mcfg.rssi_aux_channel - 1];
 800ea58:	4b27      	ldr	r3, [pc, #156]	; (800eaf8 <RSSI_getValue+0xb4>)
 800ea5a:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800ea5e:	3303      	adds	r3, #3
 800ea60:	4a26      	ldr	r2, [pc, #152]	; (800eafc <RSSI_getValue+0xb8>)
 800ea62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea66:	807b      	strh	r3, [r7, #2]
        // Range of rssiChannelData is [1000;2000]. rssi should be in [0;1023];
        value = (uint16_t)((constrain(rssiChannelData - 1000, 0, mcfg.rssi_aux_max) / (float) mcfg.rssi_aux_max) * 1023.0f);
 800ea68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ea6c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800ea70:	4a21      	ldr	r2, [pc, #132]	; (800eaf8 <RSSI_getValue+0xb4>)
 800ea72:	f8b2 21a2 	ldrh.w	r2, [r2, #418]	; 0x1a2
 800ea76:	2100      	movs	r1, #0
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7f5 f9ad 	bl	8003dd8 <constrain>
 800ea7e:	ee07 0a90 	vmov	s15, r0
 800ea82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ea86:	4b1c      	ldr	r3, [pc, #112]	; (800eaf8 <RSSI_getValue+0xb4>)
 800ea88:	f8b3 31a2 	ldrh.w	r3, [r3, #418]	; 0x1a2
 800ea8c:	ee07 3a90 	vmov	s15, r3
 800ea90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ea94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea98:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800eb00 <RSSI_getValue+0xbc>
 800ea9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eaa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eaa4:	ee17 3a90 	vmov	r3, s15
 800eaa8:	80fb      	strh	r3, [r7, #6]
 800eaaa:	e020      	b.n	800eaee <RSSI_getValue+0xaa>
    } else if (mcfg.rssi_adc_channel > 0) {
 800eaac:	4b12      	ldr	r3, [pc, #72]	; (800eaf8 <RSSI_getValue+0xb4>)
 800eaae:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d01b      	beq.n	800eaee <RSSI_getValue+0xaa>
        const int16_t rssiData = (((int32_t)(actGetAdcChannel(ADC_RSSI) - mcfg.rssi_adc_offset)) * 1023L) / mcfg.rssi_adc_max;
 800eab6:	2003      	movs	r0, #3
 800eab8:	f7f2 fb76 	bl	80011a8 <actGetAdcChannel>
 800eabc:	4603      	mov	r3, r0
 800eabe:	461a      	mov	r2, r3
 800eac0:	4b0d      	ldr	r3, [pc, #52]	; (800eaf8 <RSSI_getValue+0xb4>)
 800eac2:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 800eac6:	1ad2      	subs	r2, r2, r3
 800eac8:	4613      	mov	r3, r2
 800eaca:	029b      	lsls	r3, r3, #10
 800eacc:	1a9b      	subs	r3, r3, r2
 800eace:	4a0a      	ldr	r2, [pc, #40]	; (800eaf8 <RSSI_getValue+0xb4>)
 800ead0:	f8b2 21a6 	ldrh.w	r2, [r2, #422]	; 0x1a6
 800ead4:	fb93 f3f2 	sdiv	r3, r3, r2
 800ead8:	80bb      	strh	r3, [r7, #4]
        // Set to correct range [0;1023]
        value = constrain(rssiData, 0, 1023);
 800eada:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800eade:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800eae2:	2100      	movs	r1, #0
 800eae4:	4618      	mov	r0, r3
 800eae6:	f7f5 f977 	bl	8003dd8 <constrain>
 800eaea:	4603      	mov	r3, r0
 800eaec:	80fb      	strh	r3, [r7, #6]
    }

    // return range [0;1023]
    return value;
 800eaee:	88fb      	ldrh	r3, [r7, #6]
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3708      	adds	r7, #8
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}
 800eaf8:	2000089c 	.word	0x2000089c
 800eafc:	20001784 	.word	0x20001784
 800eb00:	447fc000 	.word	0x447fc000

0800eb04 <batteryInit>:

void batteryInit(void)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b082      	sub	sp, #8
 800eb08:	af00      	add	r7, sp, #0
    uint32_t i;
    float voltage = 0;
 800eb0a:	f04f 0300 	mov.w	r3, #0
 800eb0e:	603b      	str	r3, [r7, #0]

    // average up some voltage readings
    for (i = 0; i < 32; i++) {
 800eb10:	2300      	movs	r3, #0
 800eb12:	607b      	str	r3, [r7, #4]
 800eb14:	e018      	b.n	800eb48 <batteryInit+0x44>
        voltage += actGetBatteryVoltage() * mcfg.vbatscale;
 800eb16:	f7f2 fb59 	bl	80011cc <actGetBatteryVoltage>
 800eb1a:	eeb0 7a40 	vmov.f32	s14, s0
 800eb1e:	4b35      	ldr	r3, [pc, #212]	; (800ebf4 <batteryInit+0xf0>)
 800eb20:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800eb24:	ee07 3a90 	vmov	s15, r3
 800eb28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb30:	ed97 7a00 	vldr	s14, [r7]
 800eb34:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb38:	edc7 7a00 	vstr	s15, [r7]
        pif_Delay1ms(10);
 800eb3c:	200a      	movs	r0, #10
 800eb3e:	f002 feb1 	bl	80118a4 <pif_Delay1ms>
    for (i = 0; i < 32; i++) {
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	3301      	adds	r3, #1
 800eb46:	607b      	str	r3, [r7, #4]
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2b1f      	cmp	r3, #31
 800eb4c:	d9e3      	bls.n	800eb16 <batteryInit+0x12>
    }

    voltage = voltage / 32;
 800eb4e:	ed97 7a00 	vldr	s14, [r7]
 800eb52:	eddf 6a29 	vldr	s13, [pc, #164]	; 800ebf8 <batteryInit+0xf4>
 800eb56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800eb5a:	edc7 7a00 	vstr	s15, [r7]
#ifndef __PIF_NO_LOG__
    pifLog_Printf(LT_INFO, "Battery: %fV", voltage / 10);
 800eb5e:	edd7 7a00 	vldr	s15, [r7]
 800eb62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800eb66:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800eb6a:	ee16 0a90 	vmov	r0, s13
 800eb6e:	f7f1 fc9f 	bl	80004b0 <__aeabi_f2d>
 800eb72:	4602      	mov	r2, r0
 800eb74:	460b      	mov	r3, r1
 800eb76:	4921      	ldr	r1, [pc, #132]	; (800ebfc <batteryInit+0xf8>)
 800eb78:	2002      	movs	r0, #2
 800eb7a:	f005 f83d 	bl	8013bf8 <pifLog_Printf>
#endif

    // autodetect cell count, going from 2S..8S
    for (i = 1; i < 8; i++) {
 800eb7e:	2301      	movs	r3, #1
 800eb80:	607b      	str	r3, [r7, #4]
 800eb82:	e014      	b.n	800ebae <batteryInit+0xaa>
        if (voltage < i * mcfg.vbatmaxcellvoltage)
 800eb84:	4b1b      	ldr	r3, [pc, #108]	; (800ebf4 <batteryInit+0xf0>)
 800eb86:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	fb02 f303 	mul.w	r3, r2, r3
 800eb92:	ee07 3a90 	vmov	s15, r3
 800eb96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb9a:	ed97 7a00 	vldr	s14, [r7]
 800eb9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eba6:	d406      	bmi.n	800ebb6 <batteryInit+0xb2>
    for (i = 1; i < 8; i++) {
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	3301      	adds	r3, #1
 800ebac:	607b      	str	r3, [r7, #4]
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2b07      	cmp	r3, #7
 800ebb2:	d9e7      	bls.n	800eb84 <batteryInit+0x80>
 800ebb4:	e000      	b.n	800ebb8 <batteryInit+0xb4>
            break;
 800ebb6:	bf00      	nop
    }
    batteryCellCount = i;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	b2da      	uxtb	r2, r3
 800ebbc:	4b10      	ldr	r3, [pc, #64]	; (800ec00 <batteryInit+0xfc>)
 800ebbe:	701a      	strb	r2, [r3, #0]
    batteryWarningVoltage = i * mcfg.vbatwarningcellvoltage; // 3.5V per cell minimum, configurable in CLI
 800ebc0:	4b0c      	ldr	r3, [pc, #48]	; (800ebf4 <batteryInit+0xf0>)
 800ebc2:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800ebc6:	b29a      	uxth	r2, r3
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	b29b      	uxth	r3, r3
 800ebcc:	fb12 f303 	smulbb	r3, r2, r3
 800ebd0:	b29a      	uxth	r2, r3
 800ebd2:	4b0c      	ldr	r3, [pc, #48]	; (800ec04 <batteryInit+0x100>)
 800ebd4:	801a      	strh	r2, [r3, #0]
    batteryCriticalVoltage = i * mcfg.vbatmincellvoltage; // 3.3V per cell minimum, configurable in CLI
 800ebd6:	4b07      	ldr	r3, [pc, #28]	; (800ebf4 <batteryInit+0xf0>)
 800ebd8:	f893 317f 	ldrb.w	r3, [r3, #383]	; 0x17f
 800ebdc:	b29a      	uxth	r2, r3
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	b29b      	uxth	r3, r3
 800ebe2:	fb12 f303 	smulbb	r3, r2, r3
 800ebe6:	b29a      	uxth	r2, r3
 800ebe8:	4b07      	ldr	r3, [pc, #28]	; (800ec08 <batteryInit+0x104>)
 800ebea:	801a      	strh	r2, [r3, #0]
}
 800ebec:	bf00      	nop
 800ebee:	3708      	adds	r7, #8
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}
 800ebf4:	2000089c 	.word	0x2000089c
 800ebf8:	42000000 	.word	0x42000000
 800ebfc:	08028500 	.word	0x08028500
 800ec00:	20000054 	.word	0x20000054
 800ec04:	200018ee 	.word	0x200018ee
 800ec08:	200018f0 	.word	0x200018f0

0800ec0c <ACC_Common>:

static void ACC_Common(void)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b082      	sub	sp, #8
 800ec10:	af00      	add	r7, sp, #0
    static int32_t a[3];
    int axis;

    if (calibratingA > 0) {
 800ec12:	4b4e      	ldr	r3, [pc, #312]	; (800ed4c <ACC_Common+0x140>)
 800ec14:	881b      	ldrh	r3, [r3, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d06c      	beq.n	800ecf4 <ACC_Common+0xe8>
        for (axis = 0; axis < 3; axis++) {
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	607b      	str	r3, [r7, #4]
 800ec1e:	e025      	b.n	800ec6c <ACC_Common+0x60>
            // Reset a[axis] at start of calibration
            if (calibratingA == CALIBRATING_ACC_CYCLES)
 800ec20:	4b4a      	ldr	r3, [pc, #296]	; (800ed4c <ACC_Common+0x140>)
 800ec22:	881b      	ldrh	r3, [r3, #0]
 800ec24:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800ec28:	d104      	bne.n	800ec34 <ACC_Common+0x28>
                a[axis] = 0;
 800ec2a:	4a49      	ldr	r2, [pc, #292]	; (800ed50 <ACC_Common+0x144>)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2100      	movs	r1, #0
 800ec30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            // Sum up CALIBRATING_ACC_CYCLES readings
            a[axis] += accADC[axis];
 800ec34:	4a46      	ldr	r2, [pc, #280]	; (800ed50 <ACC_Common+0x144>)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec3c:	4945      	ldr	r1, [pc, #276]	; (800ed54 <ACC_Common+0x148>)
 800ec3e:	687a      	ldr	r2, [r7, #4]
 800ec40:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800ec44:	441a      	add	r2, r3
 800ec46:	4942      	ldr	r1, [pc, #264]	; (800ed50 <ACC_Common+0x144>)
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            // Clear global variables for next reading
            accADC[axis] = 0;
 800ec4e:	4a41      	ldr	r2, [pc, #260]	; (800ed54 <ACC_Common+0x148>)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2100      	movs	r1, #0
 800ec54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            mcfg.accZero[axis] = 0;
 800ec58:	4a3f      	ldr	r2, [pc, #252]	; (800ed58 <ACC_Common+0x14c>)
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	33b4      	adds	r3, #180	; 0xb4
 800ec5e:	005b      	lsls	r3, r3, #1
 800ec60:	4413      	add	r3, r2
 800ec62:	2200      	movs	r2, #0
 800ec64:	805a      	strh	r2, [r3, #2]
        for (axis = 0; axis < 3; axis++) {
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	3301      	adds	r3, #1
 800ec6a:	607b      	str	r3, [r7, #4]
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2b02      	cmp	r3, #2
 800ec70:	ddd6      	ble.n	800ec20 <ACC_Common+0x14>
        }
        // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
        if (calibratingA == 1) {
 800ec72:	4b36      	ldr	r3, [pc, #216]	; (800ed4c <ACC_Common+0x140>)
 800ec74:	881b      	ldrh	r3, [r3, #0]
 800ec76:	2b01      	cmp	r3, #1
 800ec78:	d136      	bne.n	800ece8 <ACC_Common+0xdc>
            mcfg.accZero[ROLL] = (a[ROLL] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
 800ec7a:	4b35      	ldr	r3, [pc, #212]	; (800ed50 <ACC_Common+0x144>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	33c8      	adds	r3, #200	; 0xc8
 800ec80:	4a36      	ldr	r2, [pc, #216]	; (800ed5c <ACC_Common+0x150>)
 800ec82:	fb82 1203 	smull	r1, r2, r2, r3
 800ec86:	11d2      	asrs	r2, r2, #7
 800ec88:	17db      	asrs	r3, r3, #31
 800ec8a:	1ad3      	subs	r3, r2, r3
 800ec8c:	b21a      	sxth	r2, r3
 800ec8e:	4b32      	ldr	r3, [pc, #200]	; (800ed58 <ACC_Common+0x14c>)
 800ec90:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
            mcfg.accZero[PITCH] = (a[PITCH] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
 800ec94:	4b2e      	ldr	r3, [pc, #184]	; (800ed50 <ACC_Common+0x144>)
 800ec96:	685b      	ldr	r3, [r3, #4]
 800ec98:	33c8      	adds	r3, #200	; 0xc8
 800ec9a:	4a30      	ldr	r2, [pc, #192]	; (800ed5c <ACC_Common+0x150>)
 800ec9c:	fb82 1203 	smull	r1, r2, r2, r3
 800eca0:	11d2      	asrs	r2, r2, #7
 800eca2:	17db      	asrs	r3, r3, #31
 800eca4:	1ad3      	subs	r3, r2, r3
 800eca6:	b21a      	sxth	r2, r3
 800eca8:	4b2b      	ldr	r3, [pc, #172]	; (800ed58 <ACC_Common+0x14c>)
 800ecaa:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
            mcfg.accZero[YAW] = (a[YAW] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES - sensor_set.acc.acc_1G;
 800ecae:	4b28      	ldr	r3, [pc, #160]	; (800ed50 <ACC_Common+0x144>)
 800ecb0:	689b      	ldr	r3, [r3, #8]
 800ecb2:	33c8      	adds	r3, #200	; 0xc8
 800ecb4:	4a29      	ldr	r2, [pc, #164]	; (800ed5c <ACC_Common+0x150>)
 800ecb6:	fb82 1203 	smull	r1, r2, r2, r3
 800ecba:	11d2      	asrs	r2, r2, #7
 800ecbc:	17db      	asrs	r3, r3, #31
 800ecbe:	1ad3      	subs	r3, r2, r3
 800ecc0:	b29a      	uxth	r2, r3
 800ecc2:	4b27      	ldr	r3, [pc, #156]	; (800ed60 <ACC_Common+0x154>)
 800ecc4:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800ecc8:	1ad3      	subs	r3, r2, r3
 800ecca:	b29b      	uxth	r3, r3
 800eccc:	b21a      	sxth	r2, r3
 800ecce:	4b22      	ldr	r3, [pc, #136]	; (800ed58 <ACC_Common+0x14c>)
 800ecd0:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
            cfg.angleTrim[ROLL] = 0;
 800ecd4:	4b23      	ldr	r3, [pc, #140]	; (800ed64 <ACC_Common+0x158>)
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	859a      	strh	r2, [r3, #44]	; 0x2c
            cfg.angleTrim[PITCH] = 0;
 800ecda:	4b22      	ldr	r3, [pc, #136]	; (800ed64 <ACC_Common+0x158>)
 800ecdc:	2200      	movs	r2, #0
 800ecde:	85da      	strh	r2, [r3, #46]	; 0x2e
            writeEEPROM(1, true);      // write accZero in EEPROM
 800ece0:	2101      	movs	r1, #1
 800ece2:	2001      	movs	r0, #1
 800ece4:	f7f7 fdfa 	bl	80068dc <writeEEPROM>
        }
        calibratingA--;
 800ece8:	4b18      	ldr	r3, [pc, #96]	; (800ed4c <ACC_Common+0x140>)
 800ecea:	881b      	ldrh	r3, [r3, #0]
 800ecec:	3b01      	subs	r3, #1
 800ecee:	b29a      	uxth	r2, r3
 800ecf0:	4b16      	ldr	r3, [pc, #88]	; (800ed4c <ACC_Common+0x140>)
 800ecf2:	801a      	strh	r2, [r3, #0]
    }

    if (feature(FEATURE_INFLIGHT_ACC_CAL)) {
 800ecf4:	2004      	movs	r0, #4
 800ecf6:	f7f8 f9d3 	bl	80070a0 <feature>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	f000 80cb 	beq.w	800ee98 <ACC_Common+0x28c>
        static int32_t b[3];
        static int16_t accZero_saved[3] = { 0, 0, 0 };
        static int16_t angleTrim_saved[2] = { 0, 0 };
        // Saving old zeropoints before measurement
        if (InflightcalibratingA == 50) {
 800ed02:	4b19      	ldr	r3, [pc, #100]	; (800ed68 <ACC_Common+0x15c>)
 800ed04:	881b      	ldrh	r3, [r3, #0]
 800ed06:	2b32      	cmp	r3, #50	; 0x32
 800ed08:	d118      	bne.n	800ed3c <ACC_Common+0x130>
            accZero_saved[ROLL] = mcfg.accZero[ROLL];
 800ed0a:	4b13      	ldr	r3, [pc, #76]	; (800ed58 <ACC_Common+0x14c>)
 800ed0c:	f9b3 216a 	ldrsh.w	r2, [r3, #362]	; 0x16a
 800ed10:	4b16      	ldr	r3, [pc, #88]	; (800ed6c <ACC_Common+0x160>)
 800ed12:	801a      	strh	r2, [r3, #0]
            accZero_saved[PITCH] = mcfg.accZero[PITCH];
 800ed14:	4b10      	ldr	r3, [pc, #64]	; (800ed58 <ACC_Common+0x14c>)
 800ed16:	f9b3 216c 	ldrsh.w	r2, [r3, #364]	; 0x16c
 800ed1a:	4b14      	ldr	r3, [pc, #80]	; (800ed6c <ACC_Common+0x160>)
 800ed1c:	805a      	strh	r2, [r3, #2]
            accZero_saved[YAW] = mcfg.accZero[YAW];
 800ed1e:	4b0e      	ldr	r3, [pc, #56]	; (800ed58 <ACC_Common+0x14c>)
 800ed20:	f9b3 216e 	ldrsh.w	r2, [r3, #366]	; 0x16e
 800ed24:	4b11      	ldr	r3, [pc, #68]	; (800ed6c <ACC_Common+0x160>)
 800ed26:	809a      	strh	r2, [r3, #4]
            angleTrim_saved[ROLL] = cfg.angleTrim[ROLL];
 800ed28:	4b0e      	ldr	r3, [pc, #56]	; (800ed64 <ACC_Common+0x158>)
 800ed2a:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800ed2e:	4b10      	ldr	r3, [pc, #64]	; (800ed70 <ACC_Common+0x164>)
 800ed30:	801a      	strh	r2, [r3, #0]
            angleTrim_saved[PITCH] = cfg.angleTrim[PITCH];
 800ed32:	4b0c      	ldr	r3, [pc, #48]	; (800ed64 <ACC_Common+0x158>)
 800ed34:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 800ed38:	4b0d      	ldr	r3, [pc, #52]	; (800ed70 <ACC_Common+0x164>)
 800ed3a:	805a      	strh	r2, [r3, #2]
        }
        if (InflightcalibratingA > 0) {
 800ed3c:	4b0a      	ldr	r3, [pc, #40]	; (800ed68 <ACC_Common+0x15c>)
 800ed3e:	881b      	ldrh	r3, [r3, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d06e      	beq.n	800ee22 <ACC_Common+0x216>
            for (axis = 0; axis < 3; axis++) {
 800ed44:	2300      	movs	r3, #0
 800ed46:	607b      	str	r3, [r7, #4]
 800ed48:	e039      	b.n	800edbe <ACC_Common+0x1b2>
 800ed4a:	bf00      	nop
 800ed4c:	20001a78 	.word	0x20001a78
 800ed50:	20001a94 	.word	0x20001a94
 800ed54:	20001474 	.word	0x20001474
 800ed58:	2000089c 	.word	0x2000089c
 800ed5c:	51eb851f 	.word	0x51eb851f
 800ed60:	20000060 	.word	0x20000060
 800ed64:	20000e08 	.word	0x20000e08
 800ed68:	200018ec 	.word	0x200018ec
 800ed6c:	20001aa0 	.word	0x20001aa0
 800ed70:	20001aa8 	.word	0x20001aa8
                // Reset a[axis] at start of calibration
                if (InflightcalibratingA == 50)
 800ed74:	4b5e      	ldr	r3, [pc, #376]	; (800eef0 <ACC_Common+0x2e4>)
 800ed76:	881b      	ldrh	r3, [r3, #0]
 800ed78:	2b32      	cmp	r3, #50	; 0x32
 800ed7a:	d104      	bne.n	800ed86 <ACC_Common+0x17a>
                    b[axis] = 0;
 800ed7c:	4a5d      	ldr	r2, [pc, #372]	; (800eef4 <ACC_Common+0x2e8>)
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2100      	movs	r1, #0
 800ed82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                // Sum up 50 readings
                b[axis] += accADC[axis];
 800ed86:	4a5b      	ldr	r2, [pc, #364]	; (800eef4 <ACC_Common+0x2e8>)
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed8e:	495a      	ldr	r1, [pc, #360]	; (800eef8 <ACC_Common+0x2ec>)
 800ed90:	687a      	ldr	r2, [r7, #4]
 800ed92:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800ed96:	441a      	add	r2, r3
 800ed98:	4956      	ldr	r1, [pc, #344]	; (800eef4 <ACC_Common+0x2e8>)
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Clear global variables for next reading
                accADC[axis] = 0;
 800eda0:	4a55      	ldr	r2, [pc, #340]	; (800eef8 <ACC_Common+0x2ec>)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2100      	movs	r1, #0
 800eda6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                mcfg.accZero[axis] = 0;
 800edaa:	4a54      	ldr	r2, [pc, #336]	; (800eefc <ACC_Common+0x2f0>)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	33b4      	adds	r3, #180	; 0xb4
 800edb0:	005b      	lsls	r3, r3, #1
 800edb2:	4413      	add	r3, r2
 800edb4:	2200      	movs	r2, #0
 800edb6:	805a      	strh	r2, [r3, #2]
            for (axis = 0; axis < 3; axis++) {
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	3301      	adds	r3, #1
 800edbc:	607b      	str	r3, [r7, #4]
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2b02      	cmp	r3, #2
 800edc2:	ddd7      	ble.n	800ed74 <ACC_Common+0x168>
            }
            // all values are measured
            if (InflightcalibratingA == 1) {
 800edc4:	4b4a      	ldr	r3, [pc, #296]	; (800eef0 <ACC_Common+0x2e4>)
 800edc6:	881b      	ldrh	r3, [r3, #0]
 800edc8:	2b01      	cmp	r3, #1
 800edca:	d124      	bne.n	800ee16 <ACC_Common+0x20a>
                AccInflightCalibrationActive = false;
 800edcc:	4b4c      	ldr	r3, [pc, #304]	; (800ef00 <ACC_Common+0x2f4>)
 800edce:	2200      	movs	r2, #0
 800edd0:	701a      	strb	r2, [r3, #0]
                AccInflightCalibrationMeasurementDone = true;
 800edd2:	4b4c      	ldr	r3, [pc, #304]	; (800ef04 <ACC_Common+0x2f8>)
 800edd4:	2201      	movs	r2, #1
 800edd6:	701a      	strb	r2, [r3, #0]
                buzzer(BUZZER_ACC_CALIBRATION);      // buzzer for indicatiing the end of calibration
 800edd8:	200a      	movs	r0, #10
 800edda:	f7f5 f98d 	bl	80040f8 <buzzer>
                // recover saved values to maintain current flight behavior until new values are transferred
                mcfg.accZero[ROLL] = accZero_saved[ROLL];
 800edde:	4b4a      	ldr	r3, [pc, #296]	; (800ef08 <ACC_Common+0x2fc>)
 800ede0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ede4:	4b45      	ldr	r3, [pc, #276]	; (800eefc <ACC_Common+0x2f0>)
 800ede6:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
                mcfg.accZero[PITCH] = accZero_saved[PITCH];
 800edea:	4b47      	ldr	r3, [pc, #284]	; (800ef08 <ACC_Common+0x2fc>)
 800edec:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800edf0:	4b42      	ldr	r3, [pc, #264]	; (800eefc <ACC_Common+0x2f0>)
 800edf2:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
                mcfg.accZero[YAW] = accZero_saved[YAW];
 800edf6:	4b44      	ldr	r3, [pc, #272]	; (800ef08 <ACC_Common+0x2fc>)
 800edf8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800edfc:	4b3f      	ldr	r3, [pc, #252]	; (800eefc <ACC_Common+0x2f0>)
 800edfe:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
                cfg.angleTrim[ROLL] = angleTrim_saved[ROLL];
 800ee02:	4b42      	ldr	r3, [pc, #264]	; (800ef0c <ACC_Common+0x300>)
 800ee04:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ee08:	4b41      	ldr	r3, [pc, #260]	; (800ef10 <ACC_Common+0x304>)
 800ee0a:	859a      	strh	r2, [r3, #44]	; 0x2c
                cfg.angleTrim[PITCH] = angleTrim_saved[PITCH];
 800ee0c:	4b3f      	ldr	r3, [pc, #252]	; (800ef0c <ACC_Common+0x300>)
 800ee0e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800ee12:	4b3f      	ldr	r3, [pc, #252]	; (800ef10 <ACC_Common+0x304>)
 800ee14:	85da      	strh	r2, [r3, #46]	; 0x2e
            }
            InflightcalibratingA--;
 800ee16:	4b36      	ldr	r3, [pc, #216]	; (800eef0 <ACC_Common+0x2e4>)
 800ee18:	881b      	ldrh	r3, [r3, #0]
 800ee1a:	3b01      	subs	r3, #1
 800ee1c:	b29a      	uxth	r2, r3
 800ee1e:	4b34      	ldr	r3, [pc, #208]	; (800eef0 <ACC_Common+0x2e4>)
 800ee20:	801a      	strh	r2, [r3, #0]
        }
        // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
        if (AccInflightCalibrationSavetoEEProm) {      // the copter is landed, disarmed and the combo has been done again
 800ee22:	4b3c      	ldr	r3, [pc, #240]	; (800ef14 <ACC_Common+0x308>)
 800ee24:	781b      	ldrb	r3, [r3, #0]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d036      	beq.n	800ee98 <ACC_Common+0x28c>
            AccInflightCalibrationSavetoEEProm = false;
 800ee2a:	4b3a      	ldr	r3, [pc, #232]	; (800ef14 <ACC_Common+0x308>)
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	701a      	strb	r2, [r3, #0]
            mcfg.accZero[ROLL] = b[ROLL] / 50;
 800ee30:	4b30      	ldr	r3, [pc, #192]	; (800eef4 <ACC_Common+0x2e8>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4a38      	ldr	r2, [pc, #224]	; (800ef18 <ACC_Common+0x30c>)
 800ee36:	fb82 1203 	smull	r1, r2, r2, r3
 800ee3a:	1112      	asrs	r2, r2, #4
 800ee3c:	17db      	asrs	r3, r3, #31
 800ee3e:	1ad3      	subs	r3, r2, r3
 800ee40:	b21a      	sxth	r2, r3
 800ee42:	4b2e      	ldr	r3, [pc, #184]	; (800eefc <ACC_Common+0x2f0>)
 800ee44:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
            mcfg.accZero[PITCH] = b[PITCH] / 50;
 800ee48:	4b2a      	ldr	r3, [pc, #168]	; (800eef4 <ACC_Common+0x2e8>)
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	4a32      	ldr	r2, [pc, #200]	; (800ef18 <ACC_Common+0x30c>)
 800ee4e:	fb82 1203 	smull	r1, r2, r2, r3
 800ee52:	1112      	asrs	r2, r2, #4
 800ee54:	17db      	asrs	r3, r3, #31
 800ee56:	1ad3      	subs	r3, r2, r3
 800ee58:	b21a      	sxth	r2, r3
 800ee5a:	4b28      	ldr	r3, [pc, #160]	; (800eefc <ACC_Common+0x2f0>)
 800ee5c:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
            mcfg.accZero[YAW] = b[YAW] / 50 - sensor_set.acc.acc_1G;    // for nunchuk 200=1G
 800ee60:	4b24      	ldr	r3, [pc, #144]	; (800eef4 <ACC_Common+0x2e8>)
 800ee62:	689b      	ldr	r3, [r3, #8]
 800ee64:	4a2c      	ldr	r2, [pc, #176]	; (800ef18 <ACC_Common+0x30c>)
 800ee66:	fb82 1203 	smull	r1, r2, r2, r3
 800ee6a:	1112      	asrs	r2, r2, #4
 800ee6c:	17db      	asrs	r3, r3, #31
 800ee6e:	1ad3      	subs	r3, r2, r3
 800ee70:	b29a      	uxth	r2, r3
 800ee72:	4b2a      	ldr	r3, [pc, #168]	; (800ef1c <ACC_Common+0x310>)
 800ee74:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800ee78:	1ad3      	subs	r3, r2, r3
 800ee7a:	b29b      	uxth	r3, r3
 800ee7c:	b21a      	sxth	r2, r3
 800ee7e:	4b1f      	ldr	r3, [pc, #124]	; (800eefc <ACC_Common+0x2f0>)
 800ee80:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
            cfg.angleTrim[ROLL] = 0;
 800ee84:	4b22      	ldr	r3, [pc, #136]	; (800ef10 <ACC_Common+0x304>)
 800ee86:	2200      	movs	r2, #0
 800ee88:	859a      	strh	r2, [r3, #44]	; 0x2c
            cfg.angleTrim[PITCH] = 0;
 800ee8a:	4b21      	ldr	r3, [pc, #132]	; (800ef10 <ACC_Common+0x304>)
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	85da      	strh	r2, [r3, #46]	; 0x2e
            writeEEPROM(1, true);          // write accZero in EEPROM
 800ee90:	2101      	movs	r1, #1
 800ee92:	2001      	movs	r0, #1
 800ee94:	f7f7 fd22 	bl	80068dc <writeEEPROM>
        }
    }

    accADC[ROLL] -= mcfg.accZero[ROLL];
 800ee98:	4b17      	ldr	r3, [pc, #92]	; (800eef8 <ACC_Common+0x2ec>)
 800ee9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee9e:	b29a      	uxth	r2, r3
 800eea0:	4b16      	ldr	r3, [pc, #88]	; (800eefc <ACC_Common+0x2f0>)
 800eea2:	f9b3 316a 	ldrsh.w	r3, [r3, #362]	; 0x16a
 800eea6:	b29b      	uxth	r3, r3
 800eea8:	1ad3      	subs	r3, r2, r3
 800eeaa:	b29b      	uxth	r3, r3
 800eeac:	b21a      	sxth	r2, r3
 800eeae:	4b12      	ldr	r3, [pc, #72]	; (800eef8 <ACC_Common+0x2ec>)
 800eeb0:	801a      	strh	r2, [r3, #0]
    accADC[PITCH] -= mcfg.accZero[PITCH];
 800eeb2:	4b11      	ldr	r3, [pc, #68]	; (800eef8 <ACC_Common+0x2ec>)
 800eeb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800eeb8:	b29a      	uxth	r2, r3
 800eeba:	4b10      	ldr	r3, [pc, #64]	; (800eefc <ACC_Common+0x2f0>)
 800eebc:	f9b3 316c 	ldrsh.w	r3, [r3, #364]	; 0x16c
 800eec0:	b29b      	uxth	r3, r3
 800eec2:	1ad3      	subs	r3, r2, r3
 800eec4:	b29b      	uxth	r3, r3
 800eec6:	b21a      	sxth	r2, r3
 800eec8:	4b0b      	ldr	r3, [pc, #44]	; (800eef8 <ACC_Common+0x2ec>)
 800eeca:	805a      	strh	r2, [r3, #2]
    accADC[YAW] -= mcfg.accZero[YAW];
 800eecc:	4b0a      	ldr	r3, [pc, #40]	; (800eef8 <ACC_Common+0x2ec>)
 800eece:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800eed2:	b29a      	uxth	r2, r3
 800eed4:	4b09      	ldr	r3, [pc, #36]	; (800eefc <ACC_Common+0x2f0>)
 800eed6:	f9b3 316e 	ldrsh.w	r3, [r3, #366]	; 0x16e
 800eeda:	b29b      	uxth	r3, r3
 800eedc:	1ad3      	subs	r3, r2, r3
 800eede:	b29b      	uxth	r3, r3
 800eee0:	b21a      	sxth	r2, r3
 800eee2:	4b05      	ldr	r3, [pc, #20]	; (800eef8 <ACC_Common+0x2ec>)
 800eee4:	809a      	strh	r2, [r3, #4]
}
 800eee6:	bf00      	nop
 800eee8:	3708      	adds	r7, #8
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	200018ec 	.word	0x200018ec
 800eef4:	20001aac 	.word	0x20001aac
 800eef8:	20001474 	.word	0x20001474
 800eefc:	2000089c 	.word	0x2000089c
 800ef00:	200018eb 	.word	0x200018eb
 800ef04:	200018e9 	.word	0x200018e9
 800ef08:	20001aa0 	.word	0x20001aa0
 800ef0c:	20001aa8 	.word	0x20001aa8
 800ef10:	20000e08 	.word	0x20000e08
 800ef14:	200018ea 	.word	0x200018ea
 800ef18:	51eb851f 	.word	0x51eb851f
 800ef1c:	20000060 	.word	0x20000060

0800ef20 <ACC_getADC>:

BOOL ACC_getADC(void)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	af00      	add	r7, sp, #0
    if (sensor_set.acc.read(&sensor_set, accADC)) {
 800ef24:	4b07      	ldr	r3, [pc, #28]	; (800ef44 <ACC_getADC+0x24>)
 800ef26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ef2a:	4907      	ldr	r1, [pc, #28]	; (800ef48 <ACC_getADC+0x28>)
 800ef2c:	4805      	ldr	r0, [pc, #20]	; (800ef44 <ACC_getADC+0x24>)
 800ef2e:	4798      	blx	r3
 800ef30:	4603      	mov	r3, r0
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d003      	beq.n	800ef3e <ACC_getADC+0x1e>
    	ACC_Common();
 800ef36:	f7ff fe69 	bl	800ec0c <ACC_Common>
    	return TRUE;
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	e000      	b.n	800ef40 <ACC_getADC+0x20>
    }
	return FALSE;
 800ef3e:	2300      	movs	r3, #0
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	bd80      	pop	{r7, pc}
 800ef44:	20000060 	.word	0x20000060
 800ef48:	20001474 	.word	0x20001474

0800ef4c <Baro_Common>:

#ifdef BARO
static void Baro_Common(void)
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b083      	sub	sp, #12
 800ef50:	af00      	add	r7, sp, #0
    static int32_t baroHistTab[BARO_TAB_SIZE_MAX];
    static int baroHistIdx = 0;
    int indexplus1;

    indexplus1 = (baroHistIdx + 1);
 800ef52:	4b18      	ldr	r3, [pc, #96]	; (800efb4 <Baro_Common+0x68>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	3301      	adds	r3, #1
 800ef58:	607b      	str	r3, [r7, #4]
    if (indexplus1 >= cfg.baro_tab_size)
 800ef5a:	4b17      	ldr	r3, [pc, #92]	; (800efb8 <Baro_Common+0x6c>)
 800ef5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ef60:	461a      	mov	r2, r3
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	4293      	cmp	r3, r2
 800ef66:	db01      	blt.n	800ef6c <Baro_Common+0x20>
        indexplus1 = 0;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	607b      	str	r3, [r7, #4]
    baroHistTab[baroHistIdx] = baroPressure;
 800ef6c:	4b11      	ldr	r3, [pc, #68]	; (800efb4 <Baro_Common+0x68>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4a12      	ldr	r2, [pc, #72]	; (800efbc <Baro_Common+0x70>)
 800ef72:	6812      	ldr	r2, [r2, #0]
 800ef74:	4912      	ldr	r1, [pc, #72]	; (800efc0 <Baro_Common+0x74>)
 800ef76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    baroPressureSum += baroHistTab[baroHistIdx];
 800ef7a:	4b0e      	ldr	r3, [pc, #56]	; (800efb4 <Baro_Common+0x68>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	4a10      	ldr	r2, [pc, #64]	; (800efc0 <Baro_Common+0x74>)
 800ef80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef84:	461a      	mov	r2, r3
 800ef86:	4b0f      	ldr	r3, [pc, #60]	; (800efc4 <Baro_Common+0x78>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	4413      	add	r3, r2
 800ef8c:	4a0d      	ldr	r2, [pc, #52]	; (800efc4 <Baro_Common+0x78>)
 800ef8e:	6013      	str	r3, [r2, #0]
    baroPressureSum -= baroHistTab[indexplus1];
 800ef90:	4b0c      	ldr	r3, [pc, #48]	; (800efc4 <Baro_Common+0x78>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	490a      	ldr	r1, [pc, #40]	; (800efc0 <Baro_Common+0x74>)
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ef9c:	1a9b      	subs	r3, r3, r2
 800ef9e:	4a09      	ldr	r2, [pc, #36]	; (800efc4 <Baro_Common+0x78>)
 800efa0:	6013      	str	r3, [r2, #0]
    baroHistIdx = indexplus1;
 800efa2:	4a04      	ldr	r2, [pc, #16]	; (800efb4 <Baro_Common+0x68>)
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6013      	str	r3, [r2, #0]
}
 800efa8:	bf00      	nop
 800efaa:	370c      	adds	r7, #12
 800efac:	46bd      	mov	sp, r7
 800efae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb2:	4770      	bx	lr
 800efb4:	20001ab8 	.word	0x20001ab8
 800efb8:	20000e08 	.word	0x20000e08
 800efbc:	20001a84 	.word	0x20001a84
 800efc0:	20001abc 	.word	0x20001abc
 800efc4:	200014a4 	.word	0x200014a4

0800efc8 <evtBaroRead>:

static void evtBaroRead(float pressure, float temperature)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
 800efce:	ed87 0a01 	vstr	s0, [r7, #4]
 800efd2:	edc7 0a00 	vstr	s1, [r7]
    baroPressure = pressure * 100;
 800efd6:	edd7 7a01 	vldr	s15, [r7, #4]
 800efda:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800f020 <evtBaroRead+0x58>
 800efde:	ee67 7a87 	vmul.f32	s15, s15, s14
 800efe2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800efe6:	ee17 2a90 	vmov	r2, s15
 800efea:	4b0e      	ldr	r3, [pc, #56]	; (800f024 <evtBaroRead+0x5c>)
 800efec:	601a      	str	r2, [r3, #0]
    baroTemperature = temperature * 100;
 800efee:	edd7 7a00 	vldr	s15, [r7]
 800eff2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800f020 <evtBaroRead+0x58>
 800eff6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800effa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800effe:	ee17 2a90 	vmov	r2, s15
 800f002:	4b09      	ldr	r3, [pc, #36]	; (800f028 <evtBaroRead+0x60>)
 800f004:	601a      	str	r2, [r3, #0]
    Baro_Common();
 800f006:	f7ff ffa1 	bl	800ef4c <Baro_Common>
    pifTask_SetTrigger(sensor_set.baro.p_task);
 800f00a:	4b08      	ldr	r3, [pc, #32]	; (800f02c <evtBaroRead+0x64>)
 800f00c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800f010:	4618      	mov	r0, r3
 800f012:	f005 fe8d 	bl	8014d30 <pifTask_SetTrigger>
}
 800f016:	bf00      	nop
 800f018:	3708      	adds	r7, #8
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}
 800f01e:	bf00      	nop
 800f020:	42c80000 	.word	0x42c80000
 800f024:	20001a84 	.word	0x20001a84
 800f028:	20001a88 	.word	0x20001a88
 800f02c:	20000060 	.word	0x20000060

0800f030 <devClear>:
    float m_oldM, m_newM, m_oldS, m_newS;
    int m_n;
} stdev_t;

static void devClear(stdev_t *dev)
{
 800f030:	b480      	push	{r7}
 800f032:	b083      	sub	sp, #12
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
    dev->m_n = 0;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2200      	movs	r2, #0
 800f03c:	611a      	str	r2, [r3, #16]
}
 800f03e:	bf00      	nop
 800f040:	370c      	adds	r7, #12
 800f042:	46bd      	mov	sp, r7
 800f044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f048:	4770      	bx	lr

0800f04a <devPush>:

static void devPush(stdev_t *dev, float x)
{
 800f04a:	b480      	push	{r7}
 800f04c:	b083      	sub	sp, #12
 800f04e:	af00      	add	r7, sp, #0
 800f050:	6078      	str	r0, [r7, #4]
 800f052:	ed87 0a00 	vstr	s0, [r7]
    dev->m_n++;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	691b      	ldr	r3, [r3, #16]
 800f05a:	1c5a      	adds	r2, r3, #1
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	611a      	str	r2, [r3, #16]
    if (dev->m_n == 1) {
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	691b      	ldr	r3, [r3, #16]
 800f064:	2b01      	cmp	r3, #1
 800f066:	d10b      	bne.n	800f080 <devPush+0x36>
        dev->m_oldM = dev->m_newM = x;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	683a      	ldr	r2, [r7, #0]
 800f06c:	605a      	str	r2, [r3, #4]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	685a      	ldr	r2, [r3, #4]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	601a      	str	r2, [r3, #0]
        dev->m_oldS = 0.0f;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f04f 0200 	mov.w	r2, #0
 800f07c:	609a      	str	r2, [r3, #8]
        dev->m_newM = dev->m_oldM + (x - dev->m_oldM) / dev->m_n;
        dev->m_newS = dev->m_oldS + (x - dev->m_oldM) * (x - dev->m_newM);
        dev->m_oldM = dev->m_newM;
        dev->m_oldS = dev->m_newS;
    }
}
 800f07e:	e036      	b.n	800f0ee <devPush+0xa4>
        dev->m_newM = dev->m_oldM + (x - dev->m_oldM) / dev->m_n;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	ed93 7a00 	vldr	s14, [r3]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	edd3 7a00 	vldr	s15, [r3]
 800f08c:	edd7 6a00 	vldr	s13, [r7]
 800f090:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	691b      	ldr	r3, [r3, #16]
 800f098:	ee07 3a90 	vmov	s15, r3
 800f09c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f0a0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800f0a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	edc3 7a01 	vstr	s15, [r3, #4]
        dev->m_newS = dev->m_oldS + (x - dev->m_oldM) * (x - dev->m_newM);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	ed93 7a02 	vldr	s14, [r3, #8]
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	edd3 7a00 	vldr	s15, [r3]
 800f0ba:	edd7 6a00 	vldr	s13, [r7]
 800f0be:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	edd3 7a01 	vldr	s15, [r3, #4]
 800f0c8:	ed97 6a00 	vldr	s12, [r7]
 800f0cc:	ee76 7a67 	vsub.f32	s15, s12, s15
 800f0d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f0d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	edc3 7a03 	vstr	s15, [r3, #12]
        dev->m_oldM = dev->m_newM;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	685a      	ldr	r2, [r3, #4]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	601a      	str	r2, [r3, #0]
        dev->m_oldS = dev->m_newS;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	68da      	ldr	r2, [r3, #12]
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	609a      	str	r2, [r3, #8]
}
 800f0ee:	bf00      	nop
 800f0f0:	370c      	adds	r7, #12
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f8:	4770      	bx	lr
	...

0800f0fc <devVariance>:

static float devVariance(stdev_t *dev)
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b083      	sub	sp, #12
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
    return ((dev->m_n > 1) ? dev->m_newS / (dev->m_n - 1) : 0.0f);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	691b      	ldr	r3, [r3, #16]
 800f108:	2b01      	cmp	r3, #1
 800f10a:	dd0c      	ble.n	800f126 <devVariance+0x2a>
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	ed93 7a03 	vldr	s14, [r3, #12]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	691b      	ldr	r3, [r3, #16]
 800f116:	3b01      	subs	r3, #1
 800f118:	ee07 3a90 	vmov	s15, r3
 800f11c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f120:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f124:	e001      	b.n	800f12a <devVariance+0x2e>
 800f126:	eddf 6a05 	vldr	s13, [pc, #20]	; 800f13c <devVariance+0x40>
 800f12a:	eef0 7a66 	vmov.f32	s15, s13
}
 800f12e:	eeb0 0a67 	vmov.f32	s0, s15
 800f132:	370c      	adds	r7, #12
 800f134:	46bd      	mov	sp, r7
 800f136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13a:	4770      	bx	lr
 800f13c:	00000000 	.word	0x00000000

0800f140 <devStandardDeviation>:

static float devStandardDeviation(stdev_t *dev)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b082      	sub	sp, #8
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
    return sqrtf(devVariance(dev));
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f7ff ffd7 	bl	800f0fc <devVariance>
 800f14e:	eef0 7a40 	vmov.f32	s15, s0
 800f152:	eeb0 0a67 	vmov.f32	s0, s15
 800f156:	f015 fadf 	bl	8024718 <sqrtf>
 800f15a:	eef0 7a40 	vmov.f32	s15, s0
}
 800f15e:	eeb0 0a67 	vmov.f32	s0, s15
 800f162:	3708      	adds	r7, #8
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}

0800f168 <GYRO_Common>:

static void GYRO_Common(void)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b086      	sub	sp, #24
 800f16c:	af04      	add	r7, sp, #16
    int axis;
    static int32_t g[3];
    static stdev_t var[3];

    if (calibratingG > 0) {
 800f16e:	4b75      	ldr	r3, [pc, #468]	; (800f344 <GYRO_Common+0x1dc>)
 800f170:	881b      	ldrh	r3, [r3, #0]
 800f172:	2b00      	cmp	r3, #0
 800f174:	f000 80c6 	beq.w	800f304 <GYRO_Common+0x19c>
        for (axis = 0; axis < 3; axis++) {
 800f178:	2300      	movs	r3, #0
 800f17a:	607b      	str	r3, [r7, #4]
 800f17c:	e0a3      	b.n	800f2c6 <GYRO_Common+0x15e>
            // Reset g[axis] at start of calibration
            if (calibratingG == CALIBRATING_GYRO_CYCLES) {
 800f17e:	4b71      	ldr	r3, [pc, #452]	; (800f344 <GYRO_Common+0x1dc>)
 800f180:	881b      	ldrh	r3, [r3, #0]
 800f182:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f186:	d10e      	bne.n	800f1a6 <GYRO_Common+0x3e>
                g[axis] = 0;
 800f188:	4a6f      	ldr	r2, [pc, #444]	; (800f348 <GYRO_Common+0x1e0>)
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2100      	movs	r1, #0
 800f18e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                devClear(&var[axis]);
 800f192:	687a      	ldr	r2, [r7, #4]
 800f194:	4613      	mov	r3, r2
 800f196:	009b      	lsls	r3, r3, #2
 800f198:	4413      	add	r3, r2
 800f19a:	009b      	lsls	r3, r3, #2
 800f19c:	4a6b      	ldr	r2, [pc, #428]	; (800f34c <GYRO_Common+0x1e4>)
 800f19e:	4413      	add	r3, r2
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f7ff ff45 	bl	800f030 <devClear>
            }
            // Sum up 1000 readings
            g[axis] += gyroADC[axis];
 800f1a6:	4a68      	ldr	r2, [pc, #416]	; (800f348 <GYRO_Common+0x1e0>)
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1ae:	4968      	ldr	r1, [pc, #416]	; (800f350 <GYRO_Common+0x1e8>)
 800f1b0:	687a      	ldr	r2, [r7, #4]
 800f1b2:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800f1b6:	441a      	add	r2, r3
 800f1b8:	4963      	ldr	r1, [pc, #396]	; (800f348 <GYRO_Common+0x1e0>)
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            devPush(&var[axis], (float)gyroADC[axis]);
 800f1c0:	687a      	ldr	r2, [r7, #4]
 800f1c2:	4613      	mov	r3, r2
 800f1c4:	009b      	lsls	r3, r3, #2
 800f1c6:	4413      	add	r3, r2
 800f1c8:	009b      	lsls	r3, r3, #2
 800f1ca:	4a60      	ldr	r2, [pc, #384]	; (800f34c <GYRO_Common+0x1e4>)
 800f1cc:	441a      	add	r2, r3
 800f1ce:	4960      	ldr	r1, [pc, #384]	; (800f350 <GYRO_Common+0x1e8>)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800f1d6:	ee07 3a90 	vmov	s15, r3
 800f1da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f1de:	eeb0 0a67 	vmov.f32	s0, s15
 800f1e2:	4610      	mov	r0, r2
 800f1e4:	f7ff ff31 	bl	800f04a <devPush>
            // Clear global variables for next reading
            gyroADC[axis] = 0;
 800f1e8:	4a59      	ldr	r2, [pc, #356]	; (800f350 <GYRO_Common+0x1e8>)
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	2100      	movs	r1, #0
 800f1ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            gyroZero[axis] = 0;
 800f1f2:	4a58      	ldr	r2, [pc, #352]	; (800f354 <GYRO_Common+0x1ec>)
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2100      	movs	r1, #0
 800f1f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (calibratingG == 1) {
 800f1fc:	4b51      	ldr	r3, [pc, #324]	; (800f344 <GYRO_Common+0x1dc>)
 800f1fe:	881b      	ldrh	r3, [r3, #0]
 800f200:	2b01      	cmp	r3, #1
 800f202:	d15d      	bne.n	800f2c0 <GYRO_Common+0x158>
                float dev = devStandardDeviation(&var[axis]);
 800f204:	687a      	ldr	r2, [r7, #4]
 800f206:	4613      	mov	r3, r2
 800f208:	009b      	lsls	r3, r3, #2
 800f20a:	4413      	add	r3, r2
 800f20c:	009b      	lsls	r3, r3, #2
 800f20e:	4a4f      	ldr	r2, [pc, #316]	; (800f34c <GYRO_Common+0x1e4>)
 800f210:	4413      	add	r3, r2
 800f212:	4618      	mov	r0, r3
 800f214:	f7ff ff94 	bl	800f140 <devStandardDeviation>
 800f218:	ed87 0a00 	vstr	s0, [r7]
                // check deviation and startover if idiot was moving the model
                if (mcfg.moron_threshold && dev > mcfg.moron_threshold) {
 800f21c:	4b4e      	ldr	r3, [pc, #312]	; (800f358 <GYRO_Common+0x1f0>)
 800f21e:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800f222:	2b00      	cmp	r3, #0
 800f224:	d036      	beq.n	800f294 <GYRO_Common+0x12c>
 800f226:	4b4c      	ldr	r3, [pc, #304]	; (800f358 <GYRO_Common+0x1f0>)
 800f228:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800f22c:	ee07 3a90 	vmov	s15, r3
 800f230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f234:	ed97 7a00 	vldr	s14, [r7]
 800f238:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f240:	dd28      	ble.n	800f294 <GYRO_Common+0x12c>
#ifndef __PIF_NO_LOG__
                    pifLog_Printf(LT_INFO, "Gyro Calib[%u]: %f > %d", axis, dev, mcfg.moron_threshold);
 800f242:	6838      	ldr	r0, [r7, #0]
 800f244:	f7f1 f934 	bl	80004b0 <__aeabi_f2d>
 800f248:	4602      	mov	r2, r0
 800f24a:	460b      	mov	r3, r1
 800f24c:	4942      	ldr	r1, [pc, #264]	; (800f358 <GYRO_Common+0x1f0>)
 800f24e:	f891 1166 	ldrb.w	r1, [r1, #358]	; 0x166
 800f252:	9102      	str	r1, [sp, #8]
 800f254:	e9cd 2300 	strd	r2, r3, [sp]
 800f258:	687a      	ldr	r2, [r7, #4]
 800f25a:	4940      	ldr	r1, [pc, #256]	; (800f35c <GYRO_Common+0x1f4>)
 800f25c:	2002      	movs	r0, #2
 800f25e:	f004 fccb 	bl	8013bf8 <pifLog_Printf>
#endif
                    calibratingG = CALIBRATING_GYRO_CYCLES;
 800f262:	4b38      	ldr	r3, [pc, #224]	; (800f344 <GYRO_Common+0x1dc>)
 800f264:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f268:	801a      	strh	r2, [r3, #0]
                    devClear(&var[0]);
 800f26a:	4838      	ldr	r0, [pc, #224]	; (800f34c <GYRO_Common+0x1e4>)
 800f26c:	f7ff fee0 	bl	800f030 <devClear>
                    devClear(&var[1]);
 800f270:	483b      	ldr	r0, [pc, #236]	; (800f360 <GYRO_Common+0x1f8>)
 800f272:	f7ff fedd 	bl	800f030 <devClear>
                    devClear(&var[2]);
 800f276:	483b      	ldr	r0, [pc, #236]	; (800f364 <GYRO_Common+0x1fc>)
 800f278:	f7ff feda 	bl	800f030 <devClear>
                    g[0] = g[1] = g[2] = 0;
 800f27c:	4b32      	ldr	r3, [pc, #200]	; (800f348 <GYRO_Common+0x1e0>)
 800f27e:	2200      	movs	r2, #0
 800f280:	609a      	str	r2, [r3, #8]
 800f282:	4b31      	ldr	r3, [pc, #196]	; (800f348 <GYRO_Common+0x1e0>)
 800f284:	689b      	ldr	r3, [r3, #8]
 800f286:	4a30      	ldr	r2, [pc, #192]	; (800f348 <GYRO_Common+0x1e0>)
 800f288:	6053      	str	r3, [r2, #4]
 800f28a:	4b2f      	ldr	r3, [pc, #188]	; (800f348 <GYRO_Common+0x1e0>)
 800f28c:	685b      	ldr	r3, [r3, #4]
 800f28e:	4a2e      	ldr	r2, [pc, #184]	; (800f348 <GYRO_Common+0x1e0>)
 800f290:	6013      	str	r3, [r2, #0]
                    continue;
 800f292:	e015      	b.n	800f2c0 <GYRO_Common+0x158>
                }
                gyroZero[axis] = (g[axis] + (CALIBRATING_GYRO_CYCLES / 2)) / CALIBRATING_GYRO_CYCLES;
 800f294:	4a2c      	ldr	r2, [pc, #176]	; (800f348 <GYRO_Common+0x1e0>)
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f29c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f2a0:	4a31      	ldr	r2, [pc, #196]	; (800f368 <GYRO_Common+0x200>)
 800f2a2:	fb82 1203 	smull	r1, r2, r2, r3
 800f2a6:	1192      	asrs	r2, r2, #6
 800f2a8:	17db      	asrs	r3, r3, #31
 800f2aa:	1ad3      	subs	r3, r2, r3
 800f2ac:	b219      	sxth	r1, r3
 800f2ae:	4a29      	ldr	r2, [pc, #164]	; (800f354 <GYRO_Common+0x1ec>)
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                blinkLED(10, 15, 1);
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	210f      	movs	r1, #15
 800f2ba:	200a      	movs	r0, #10
 800f2bc:	f7fd f88a 	bl	800c3d4 <blinkLED>
        for (axis = 0; axis < 3; axis++) {
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	607b      	str	r3, [r7, #4]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2b02      	cmp	r3, #2
 800f2ca:	f77f af58 	ble.w	800f17e <GYRO_Common+0x16>
            }
        }
        calibratingG--;
 800f2ce:	4b1d      	ldr	r3, [pc, #116]	; (800f344 <GYRO_Common+0x1dc>)
 800f2d0:	881b      	ldrh	r3, [r3, #0]
 800f2d2:	3b01      	subs	r3, #1
 800f2d4:	b29a      	uxth	r2, r3
 800f2d6:	4b1b      	ldr	r3, [pc, #108]	; (800f344 <GYRO_Common+0x1dc>)
 800f2d8:	801a      	strh	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
        if (!calibratingG) pifLog_Printf(LT_INFO, "Gyro Zero: %d %d %d", gyroZero[X], gyroZero[Y], gyroZero[Z]);
 800f2da:	4b1a      	ldr	r3, [pc, #104]	; (800f344 <GYRO_Common+0x1dc>)
 800f2dc:	881b      	ldrh	r3, [r3, #0]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d110      	bne.n	800f304 <GYRO_Common+0x19c>
 800f2e2:	4b1c      	ldr	r3, [pc, #112]	; (800f354 <GYRO_Common+0x1ec>)
 800f2e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2e8:	461a      	mov	r2, r3
 800f2ea:	4b1a      	ldr	r3, [pc, #104]	; (800f354 <GYRO_Common+0x1ec>)
 800f2ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	4b18      	ldr	r3, [pc, #96]	; (800f354 <GYRO_Common+0x1ec>)
 800f2f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f2f8:	9300      	str	r3, [sp, #0]
 800f2fa:	460b      	mov	r3, r1
 800f2fc:	491b      	ldr	r1, [pc, #108]	; (800f36c <GYRO_Common+0x204>)
 800f2fe:	2002      	movs	r0, #2
 800f300:	f004 fc7a 	bl	8013bf8 <pifLog_Printf>
#endif
    }
    for (axis = 0; axis < 3; axis++)
 800f304:	2300      	movs	r3, #0
 800f306:	607b      	str	r3, [r7, #4]
 800f308:	e013      	b.n	800f332 <GYRO_Common+0x1ca>
        gyroADC[axis] -= gyroZero[axis];
 800f30a:	4a11      	ldr	r2, [pc, #68]	; (800f350 <GYRO_Common+0x1e8>)
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800f312:	b29a      	uxth	r2, r3
 800f314:	490f      	ldr	r1, [pc, #60]	; (800f354 <GYRO_Common+0x1ec>)
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800f31c:	b29b      	uxth	r3, r3
 800f31e:	1ad3      	subs	r3, r2, r3
 800f320:	b29b      	uxth	r3, r3
 800f322:	b219      	sxth	r1, r3
 800f324:	4a0a      	ldr	r2, [pc, #40]	; (800f350 <GYRO_Common+0x1e8>)
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	3301      	adds	r3, #1
 800f330:	607b      	str	r3, [r7, #4]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2b02      	cmp	r3, #2
 800f336:	dde8      	ble.n	800f30a <GYRO_Common+0x1a2>
}
 800f338:	bf00      	nop
 800f33a:	bf00      	nop
 800f33c:	3708      	adds	r7, #8
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
 800f342:	bf00      	nop
 800f344:	20001a7c 	.word	0x20001a7c
 800f348:	20001b7c 	.word	0x20001b7c
 800f34c:	20001b88 	.word	0x20001b88
 800f350:	2000146c 	.word	0x2000146c
 800f354:	200014ec 	.word	0x200014ec
 800f358:	2000089c 	.word	0x2000089c
 800f35c:	08028510 	.word	0x08028510
 800f360:	20001b9c 	.word	0x20001b9c
 800f364:	20001bb0 	.word	0x20001bb0
 800f368:	10624dd3 	.word	0x10624dd3
 800f36c:	08028528 	.word	0x08028528

0800f370 <Gyro_getADC>:

BOOL Gyro_getADC(void)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	af00      	add	r7, sp, #0
    // range: +/- 8192; +/- 2000 deg/sec
    if (sensor_set.gyro.read(&sensor_set, gyroADC)) {
 800f374:	4b07      	ldr	r3, [pc, #28]	; (800f394 <Gyro_getADC+0x24>)
 800f376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f37a:	4907      	ldr	r1, [pc, #28]	; (800f398 <Gyro_getADC+0x28>)
 800f37c:	4805      	ldr	r0, [pc, #20]	; (800f394 <Gyro_getADC+0x24>)
 800f37e:	4798      	blx	r3
 800f380:	4603      	mov	r3, r0
 800f382:	2b00      	cmp	r3, #0
 800f384:	d003      	beq.n	800f38e <Gyro_getADC+0x1e>
    	GYRO_Common();
 800f386:	f7ff feef 	bl	800f168 <GYRO_Common>
    	return TRUE;
 800f38a:	2301      	movs	r3, #1
 800f38c:	e000      	b.n	800f390 <Gyro_getADC+0x20>
    }
    return FALSE;
 800f38e:	2300      	movs	r3, #0
}
 800f390:	4618      	mov	r0, r3
 800f392:	bd80      	pop	{r7, pc}
 800f394:	20000060 	.word	0x20000060
 800f398:	2000146c 	.word	0x2000146c

0800f39c <Mag_init>:

#ifdef MAG
static uint8_t magInit = 0;

void Mag_init(void)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	af00      	add	r7, sp, #0
    // initialize and calibration. turn on led during mag calibration (calibration routine blinks it)
    actLed1State(ON);
 800f3a0:	2001      	movs	r0, #1
 800f3a2:	f7f2 fe97 	bl	80020d4 <actLed1State>
    if (!sensor_set.mag.init(&sensor_set, mcfg.gyro_align)) {
 800f3a6:	4b0d      	ldr	r3, [pc, #52]	; (800f3dc <Mag_init+0x40>)
 800f3a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f3ac:	4a0c      	ldr	r2, [pc, #48]	; (800f3e0 <Mag_init+0x44>)
 800f3ae:	f892 2153 	ldrb.w	r2, [r2, #339]	; 0x153
 800f3b2:	4611      	mov	r1, r2
 800f3b4:	4809      	ldr	r0, [pc, #36]	; (800f3dc <Mag_init+0x40>)
 800f3b6:	4798      	blx	r3
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d106      	bne.n	800f3cc <Mag_init+0x30>
#ifndef __PIF_NO_LOG__
    	pifLog_Printf(LT_INFO, "Mag Error:%d", pif_error);
 800f3be:	4b09      	ldr	r3, [pc, #36]	; (800f3e4 <Mag_init+0x48>)
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	461a      	mov	r2, r3
 800f3c4:	4908      	ldr	r1, [pc, #32]	; (800f3e8 <Mag_init+0x4c>)
 800f3c6:	2002      	movs	r0, #2
 800f3c8:	f004 fc16 	bl	8013bf8 <pifLog_Printf>
#endif
    }
    actLed1State(OFF);
 800f3cc:	2000      	movs	r0, #0
 800f3ce:	f7f2 fe81 	bl	80020d4 <actLed1State>
    magInit = 1;
 800f3d2:	4b06      	ldr	r3, [pc, #24]	; (800f3ec <Mag_init+0x50>)
 800f3d4:	2201      	movs	r2, #1
 800f3d6:	701a      	strb	r2, [r3, #0]
}
 800f3d8:	bf00      	nop
 800f3da:	bd80      	pop	{r7, pc}
 800f3dc:	20000060 	.word	0x20000060
 800f3e0:	2000089c 	.word	0x2000089c
 800f3e4:	20001de0 	.word	0x20001de0
 800f3e8:	0802853c 	.word	0x0802853c
 800f3ec:	20001a8c 	.word	0x20001a8c

0800f3f0 <taskMagGetAdc>:

uint16_t taskMagGetAdc(PifTask *p_task)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b084      	sub	sp, #16
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
    uint32_t axis;

    (void)p_task;

    // Read mag sensor
    if (!sensor_set.mag.read(&sensor_set, magADC)) {
 800f3f8:	4b65      	ldr	r3, [pc, #404]	; (800f590 <taskMagGetAdc+0x1a0>)
 800f3fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f3fe:	4965      	ldr	r1, [pc, #404]	; (800f594 <taskMagGetAdc+0x1a4>)
 800f400:	4863      	ldr	r0, [pc, #396]	; (800f590 <taskMagGetAdc+0x1a0>)
 800f402:	4798      	blx	r3
 800f404:	4603      	mov	r3, r0
 800f406:	2b00      	cmp	r3, #0
 800f408:	d104      	bne.n	800f414 <taskMagGetAdc+0x24>
    	pifTask_SetTrigger(p_task);
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f005 fc90 	bl	8014d30 <pifTask_SetTrigger>
    	return 0;
 800f410:	2300      	movs	r3, #0
 800f412:	e0b8      	b.n	800f586 <taskMagGetAdc+0x196>
    }

    if (f.CALIBRATE_MAG) {
 800f414:	4b60      	ldr	r3, [pc, #384]	; (800f598 <taskMagGetAdc+0x1a8>)
 800f416:	7b9b      	ldrb	r3, [r3, #14]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d027      	beq.n	800f46c <taskMagGetAdc+0x7c>
        tCal = (*pif_act_timer1us)();
 800f41c:	4b5f      	ldr	r3, [pc, #380]	; (800f59c <taskMagGetAdc+0x1ac>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	4798      	blx	r3
 800f422:	4603      	mov	r3, r0
 800f424:	4a5e      	ldr	r2, [pc, #376]	; (800f5a0 <taskMagGetAdc+0x1b0>)
 800f426:	6013      	str	r3, [r2, #0]
        for (axis = 0; axis < 3; axis++) {
 800f428:	2300      	movs	r3, #0
 800f42a:	60fb      	str	r3, [r7, #12]
 800f42c:	e018      	b.n	800f460 <taskMagGetAdc+0x70>
            mcfg.magZero[axis] = 0;
 800f42e:	4a5d      	ldr	r2, [pc, #372]	; (800f5a4 <taskMagGetAdc+0x1b4>)
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	33b8      	adds	r3, #184	; 0xb8
 800f434:	2100      	movs	r1, #0
 800f436:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            magZeroTempMin[axis] = magADC[axis];
 800f43a:	4a56      	ldr	r2, [pc, #344]	; (800f594 <taskMagGetAdc+0x1a4>)
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800f442:	4a59      	ldr	r2, [pc, #356]	; (800f5a8 <taskMagGetAdc+0x1b8>)
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            magZeroTempMax[axis] = magADC[axis];
 800f44a:	4a52      	ldr	r2, [pc, #328]	; (800f594 <taskMagGetAdc+0x1a4>)
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800f452:	4a56      	ldr	r2, [pc, #344]	; (800f5ac <taskMagGetAdc+0x1bc>)
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (axis = 0; axis < 3; axis++) {
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	3301      	adds	r3, #1
 800f45e:	60fb      	str	r3, [r7, #12]
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	2b02      	cmp	r3, #2
 800f464:	d9e3      	bls.n	800f42e <taskMagGetAdc+0x3e>
        }
        f.CALIBRATE_MAG = 0;
 800f466:	4b4c      	ldr	r3, [pc, #304]	; (800f598 <taskMagGetAdc+0x1a8>)
 800f468:	2200      	movs	r2, #0
 800f46a:	739a      	strb	r2, [r3, #14]
    }

    if (magInit) {              // we apply offset only once mag calibration is done
 800f46c:	4b50      	ldr	r3, [pc, #320]	; (800f5b0 <taskMagGetAdc+0x1c0>)
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d026      	beq.n	800f4c2 <taskMagGetAdc+0xd2>
        magADC[X] -= mcfg.magZero[X];
 800f474:	4b47      	ldr	r3, [pc, #284]	; (800f594 <taskMagGetAdc+0x1a4>)
 800f476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f47a:	b29a      	uxth	r2, r3
 800f47c:	4b49      	ldr	r3, [pc, #292]	; (800f5a4 <taskMagGetAdc+0x1b4>)
 800f47e:	f9b3 3170 	ldrsh.w	r3, [r3, #368]	; 0x170
 800f482:	b29b      	uxth	r3, r3
 800f484:	1ad3      	subs	r3, r2, r3
 800f486:	b29b      	uxth	r3, r3
 800f488:	b21a      	sxth	r2, r3
 800f48a:	4b42      	ldr	r3, [pc, #264]	; (800f594 <taskMagGetAdc+0x1a4>)
 800f48c:	801a      	strh	r2, [r3, #0]
        magADC[Y] -= mcfg.magZero[Y];
 800f48e:	4b41      	ldr	r3, [pc, #260]	; (800f594 <taskMagGetAdc+0x1a4>)
 800f490:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f494:	b29a      	uxth	r2, r3
 800f496:	4b43      	ldr	r3, [pc, #268]	; (800f5a4 <taskMagGetAdc+0x1b4>)
 800f498:	f9b3 3172 	ldrsh.w	r3, [r3, #370]	; 0x172
 800f49c:	b29b      	uxth	r3, r3
 800f49e:	1ad3      	subs	r3, r2, r3
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	b21a      	sxth	r2, r3
 800f4a4:	4b3b      	ldr	r3, [pc, #236]	; (800f594 <taskMagGetAdc+0x1a4>)
 800f4a6:	805a      	strh	r2, [r3, #2]
        magADC[Z] -= mcfg.magZero[Z];
 800f4a8:	4b3a      	ldr	r3, [pc, #232]	; (800f594 <taskMagGetAdc+0x1a4>)
 800f4aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f4ae:	b29a      	uxth	r2, r3
 800f4b0:	4b3c      	ldr	r3, [pc, #240]	; (800f5a4 <taskMagGetAdc+0x1b4>)
 800f4b2:	f9b3 3174 	ldrsh.w	r3, [r3, #372]	; 0x174
 800f4b6:	b29b      	uxth	r3, r3
 800f4b8:	1ad3      	subs	r3, r2, r3
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	b21a      	sxth	r2, r3
 800f4be:	4b35      	ldr	r3, [pc, #212]	; (800f594 <taskMagGetAdc+0x1a4>)
 800f4c0:	809a      	strh	r2, [r3, #4]
    }

    if (tCal != 0) {
 800f4c2:	4b37      	ldr	r3, [pc, #220]	; (800f5a0 <taskMagGetAdc+0x1b0>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d05c      	beq.n	800f584 <taskMagGetAdc+0x194>
        if (((*pif_act_timer1us)() - tCal) < 30000000) {    // 30s: you have 30s to turn the multi in all directions
 800f4ca:	4b34      	ldr	r3, [pc, #208]	; (800f59c <taskMagGetAdc+0x1ac>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	4798      	blx	r3
 800f4d0:	4602      	mov	r2, r0
 800f4d2:	4b33      	ldr	r3, [pc, #204]	; (800f5a0 <taskMagGetAdc+0x1b0>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	1ad3      	subs	r3, r2, r3
 800f4d8:	4a36      	ldr	r2, [pc, #216]	; (800f5b4 <taskMagGetAdc+0x1c4>)
 800f4da:	4293      	cmp	r3, r2
 800f4dc:	d82f      	bhi.n	800f53e <taskMagGetAdc+0x14e>
            actLed0Toggle();
 800f4de:	f7f2 fde3 	bl	80020a8 <actLed0Toggle>
            for (axis = 0; axis < 3; axis++) {
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	60fb      	str	r3, [r7, #12]
 800f4e6:	e026      	b.n	800f536 <taskMagGetAdc+0x146>
                if (magADC[axis] < magZeroTempMin[axis])
 800f4e8:	4a2a      	ldr	r2, [pc, #168]	; (800f594 <taskMagGetAdc+0x1a4>)
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800f4f0:	492d      	ldr	r1, [pc, #180]	; (800f5a8 <taskMagGetAdc+0x1b8>)
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	da07      	bge.n	800f50c <taskMagGetAdc+0x11c>
                    magZeroTempMin[axis] = magADC[axis];
 800f4fc:	4a25      	ldr	r2, [pc, #148]	; (800f594 <taskMagGetAdc+0x1a4>)
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800f504:	4a28      	ldr	r2, [pc, #160]	; (800f5a8 <taskMagGetAdc+0x1b8>)
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if (magADC[axis] > magZeroTempMax[axis])
 800f50c:	4a21      	ldr	r2, [pc, #132]	; (800f594 <taskMagGetAdc+0x1a4>)
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800f514:	4925      	ldr	r1, [pc, #148]	; (800f5ac <taskMagGetAdc+0x1bc>)
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800f51c:	429a      	cmp	r2, r3
 800f51e:	dd07      	ble.n	800f530 <taskMagGetAdc+0x140>
                    magZeroTempMax[axis] = magADC[axis];
 800f520:	4a1c      	ldr	r2, [pc, #112]	; (800f594 <taskMagGetAdc+0x1a4>)
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800f528:	4a20      	ldr	r2, [pc, #128]	; (800f5ac <taskMagGetAdc+0x1bc>)
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (axis = 0; axis < 3; axis++) {
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	3301      	adds	r3, #1
 800f534:	60fb      	str	r3, [r7, #12]
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	2b02      	cmp	r3, #2
 800f53a:	d9d5      	bls.n	800f4e8 <taskMagGetAdc+0xf8>
 800f53c:	e022      	b.n	800f584 <taskMagGetAdc+0x194>
            }
        } else {
            tCal = 0;
 800f53e:	4b18      	ldr	r3, [pc, #96]	; (800f5a0 <taskMagGetAdc+0x1b0>)
 800f540:	2200      	movs	r2, #0
 800f542:	601a      	str	r2, [r3, #0]
            for (axis = 0; axis < 3; axis++)
 800f544:	2300      	movs	r3, #0
 800f546:	60fb      	str	r3, [r7, #12]
 800f548:	e015      	b.n	800f576 <taskMagGetAdc+0x186>
                mcfg.magZero[axis] = (magZeroTempMin[axis] + magZeroTempMax[axis]) / 2; // Calculate offsets
 800f54a:	4a17      	ldr	r2, [pc, #92]	; (800f5a8 <taskMagGetAdc+0x1b8>)
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800f552:	4619      	mov	r1, r3
 800f554:	4a15      	ldr	r2, [pc, #84]	; (800f5ac <taskMagGetAdc+0x1bc>)
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800f55c:	440b      	add	r3, r1
 800f55e:	0fda      	lsrs	r2, r3, #31
 800f560:	4413      	add	r3, r2
 800f562:	105b      	asrs	r3, r3, #1
 800f564:	b219      	sxth	r1, r3
 800f566:	4a0f      	ldr	r2, [pc, #60]	; (800f5a4 <taskMagGetAdc+0x1b4>)
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	33b8      	adds	r3, #184	; 0xb8
 800f56c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (axis = 0; axis < 3; axis++)
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	3301      	adds	r3, #1
 800f574:	60fb      	str	r3, [r7, #12]
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	2b02      	cmp	r3, #2
 800f57a:	d9e6      	bls.n	800f54a <taskMagGetAdc+0x15a>
            writeEEPROM(1, true);
 800f57c:	2101      	movs	r1, #1
 800f57e:	2001      	movs	r0, #1
 800f580:	f7f7 f9ac 	bl	80068dc <writeEEPROM>
        }
    }
    return 0;
 800f584:	2300      	movs	r3, #0
}
 800f586:	4618      	mov	r0, r3
 800f588:	3710      	adds	r7, #16
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	20000060 	.word	0x20000060
 800f594:	20001484 	.word	0x20001484
 800f598:	2000174c 	.word	0x2000174c
 800f59c:	20001e08 	.word	0x20001e08
 800f5a0:	20001bc4 	.word	0x20001bc4
 800f5a4:	2000089c 	.word	0x2000089c
 800f5a8:	20001bc8 	.word	0x20001bc8
 800f5ac:	20001bd0 	.word	0x20001bd0
 800f5b0:	20001a8c 	.word	0x20001a8c
 800f5b4:	01c9c37f 	.word	0x01c9c37f

0800f5b8 <getSonarDistance>:
#ifdef SONAR

static PifNoiseFilter* p_sonar_noise_filter;

static float getSonarDistance(int32_t distance)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b082      	sub	sp, #8
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
	if (distance > 300)
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f5c6:	dd02      	ble.n	800f5ce <getSonarDistance+0x16>
		distance = -1;
 800f5c8:	f04f 33ff 	mov.w	r3, #4294967295
 800f5cc:	607b      	str	r3, [r7, #4]
	sonarDistance = distance;
 800f5ce:	4a0d      	ldr	r2, [pc, #52]	; (800f604 <getSonarDistance+0x4c>)
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6013      	str	r3, [r2, #0]

#ifdef BARO
	return baroTemperature / 100.0;
 800f5d4:	4b0c      	ldr	r3, [pc, #48]	; (800f608 <getSonarDistance+0x50>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f7f0 ff57 	bl	800048c <__aeabi_i2d>
 800f5de:	f04f 0200 	mov.w	r2, #0
 800f5e2:	4b0a      	ldr	r3, [pc, #40]	; (800f60c <getSonarDistance+0x54>)
 800f5e4:	f7f1 f8e6 	bl	80007b4 <__aeabi_ddiv>
 800f5e8:	4602      	mov	r2, r0
 800f5ea:	460b      	mov	r3, r1
 800f5ec:	4610      	mov	r0, r2
 800f5ee:	4619      	mov	r1, r3
 800f5f0:	f7f1 fa98 	bl	8000b24 <__aeabi_d2f>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	ee07 3a90 	vmov	s15, r3
#else
	return 20.0;
#endif
}
 800f5fa:	eeb0 0a67 	vmov.f32	s0, s15
 800f5fe:	3708      	adds	r7, #8
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}
 800f604:	2000002c 	.word	0x2000002c
 800f608:	20001a88 	.word	0x20001a88
 800f60c:	40590000 	.word	0x40590000

0800f610 <getSonarDistanceFilter>:

static float getSonarDistanceFilter(int32_t distance)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b082      	sub	sp, #8
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
	distance = *(int32_t*)pifNoiseFilter_Process(p_sonar_noise_filter, &distance);
 800f618:	4b15      	ldr	r3, [pc, #84]	; (800f670 <getSonarDistanceFilter+0x60>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	1d3a      	adds	r2, r7, #4
 800f61e:	4611      	mov	r1, r2
 800f620:	4618      	mov	r0, r3
 800f622:	f006 f9ed 	bl	8015a00 <pifNoiseFilter_Process>
 800f626:	4603      	mov	r3, r0
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	607b      	str	r3, [r7, #4]
	if (distance > 300)
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f632:	dd02      	ble.n	800f63a <getSonarDistanceFilter+0x2a>
		distance = -1;
 800f634:	f04f 33ff 	mov.w	r3, #4294967295
 800f638:	607b      	str	r3, [r7, #4]
	sonarDistance = distance;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	4a0d      	ldr	r2, [pc, #52]	; (800f674 <getSonarDistanceFilter+0x64>)
 800f63e:	6013      	str	r3, [r2, #0]

#ifdef BARO
	return baroTemperature / 100.0;
 800f640:	4b0d      	ldr	r3, [pc, #52]	; (800f678 <getSonarDistanceFilter+0x68>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	4618      	mov	r0, r3
 800f646:	f7f0 ff21 	bl	800048c <__aeabi_i2d>
 800f64a:	f04f 0200 	mov.w	r2, #0
 800f64e:	4b0b      	ldr	r3, [pc, #44]	; (800f67c <getSonarDistanceFilter+0x6c>)
 800f650:	f7f1 f8b0 	bl	80007b4 <__aeabi_ddiv>
 800f654:	4602      	mov	r2, r0
 800f656:	460b      	mov	r3, r1
 800f658:	4610      	mov	r0, r2
 800f65a:	4619      	mov	r1, r3
 800f65c:	f7f1 fa62 	bl	8000b24 <__aeabi_d2f>
 800f660:	4603      	mov	r3, r0
 800f662:	ee07 3a90 	vmov	s15, r3
#else
	return 20.0;
#endif
}
 800f666:	eeb0 0a67 	vmov.f32	s0, s15
 800f66a:	3708      	adds	r7, #8
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}
 800f670:	20001a90 	.word	0x20001a90
 800f674:	2000002c 	.word	0x2000002c
 800f678:	20001a88 	.word	0x20001a88
 800f67c:	40590000 	.word	0x40590000

0800f680 <Sonar_init>:

void Sonar_init(sonarInitFuncPtr sonarInit, sonar_filter_t filter)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b082      	sub	sp, #8
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	460b      	mov	r3, r1
 800f68a:	70fb      	strb	r3, [r7, #3]
    static PifNoiseFilterInt32 noise_filter;

    // the repeat interval of trig signal should be greater than 60ms
    // to avoid interference between connective measurements.
	switch (filter) {
 800f68c:	78fb      	ldrb	r3, [r7, #3]
 800f68e:	2b01      	cmp	r3, #1
 800f690:	d002      	beq.n	800f698 <Sonar_init+0x18>
 800f692:	2b02      	cmp	r3, #2
 800f694:	d00b      	beq.n	800f6ae <Sonar_init+0x2e>
	        }
	    }
		break;

	default:
		break;
 800f696:	e01e      	b.n	800f6d6 <Sonar_init+0x56>
	    if (pifNoiseFilterInt32_Init(&noise_filter, 5)) {
 800f698:	2105      	movs	r1, #5
 800f69a:	4820      	ldr	r0, [pc, #128]	; (800f71c <Sonar_init+0x9c>)
 800f69c:	f006 fb60 	bl	8015d60 <pifNoiseFilterInt32_Init>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d014      	beq.n	800f6d0 <Sonar_init+0x50>
	        p_sonar_noise_filter = &noise_filter.parent;
 800f6a6:	4b1e      	ldr	r3, [pc, #120]	; (800f720 <Sonar_init+0xa0>)
 800f6a8:	4a1c      	ldr	r2, [pc, #112]	; (800f71c <Sonar_init+0x9c>)
 800f6aa:	601a      	str	r2, [r3, #0]
		break;
 800f6ac:	e010      	b.n	800f6d0 <Sonar_init+0x50>
	    if (pifNoiseFilterInt32_Init(&noise_filter, 7)) {
 800f6ae:	2107      	movs	r1, #7
 800f6b0:	481a      	ldr	r0, [pc, #104]	; (800f71c <Sonar_init+0x9c>)
 800f6b2:	f006 fb55 	bl	8015d60 <pifNoiseFilterInt32_Init>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d00b      	beq.n	800f6d4 <Sonar_init+0x54>
	        if (pifNoiseFilterInt32_SetNoiseCancel(&noise_filter)) {
 800f6bc:	4817      	ldr	r0, [pc, #92]	; (800f71c <Sonar_init+0x9c>)
 800f6be:	f006 fb8f 	bl	8015de0 <pifNoiseFilterInt32_SetNoiseCancel>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d005      	beq.n	800f6d4 <Sonar_init+0x54>
	            p_sonar_noise_filter = &noise_filter.parent;
 800f6c8:	4b15      	ldr	r3, [pc, #84]	; (800f720 <Sonar_init+0xa0>)
 800f6ca:	4a14      	ldr	r2, [pc, #80]	; (800f71c <Sonar_init+0x9c>)
 800f6cc:	601a      	str	r2, [r3, #0]
		break;
 800f6ce:	e001      	b.n	800f6d4 <Sonar_init+0x54>
		break;
 800f6d0:	bf00      	nop
 800f6d2:	e000      	b.n	800f6d6 <Sonar_init+0x56>
		break;
 800f6d4:	bf00      	nop
	}
	if (p_sonar_noise_filter) {
 800f6d6:	4b12      	ldr	r3, [pc, #72]	; (800f720 <Sonar_init+0xa0>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d007      	beq.n	800f6ee <Sonar_init+0x6e>
		if (!(*sonarInit)(60, getSonarDistanceFilter)) return;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	4910      	ldr	r1, [pc, #64]	; (800f724 <Sonar_init+0xa4>)
 800f6e2:	203c      	movs	r0, #60	; 0x3c
 800f6e4:	4798      	blx	r3
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d107      	bne.n	800f6fc <Sonar_init+0x7c>
 800f6ec:	e013      	b.n	800f716 <Sonar_init+0x96>
	}
	else {
		if (!(*sonarInit)(60, getSonarDistance)) return;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	490d      	ldr	r1, [pc, #52]	; (800f728 <Sonar_init+0xa8>)
 800f6f2:	203c      	movs	r0, #60	; 0x3c
 800f6f4:	4798      	blx	r3
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d00b      	beq.n	800f714 <Sonar_init+0x94>
	}
    sensorsSet(SENSOR_SONAR);
 800f6fc:	2010      	movs	r0, #16
 800f6fe:	f7f7 fc9d 	bl	800703c <sensorsSet>
    sonarDistance = -1;
 800f702:	4b0a      	ldr	r3, [pc, #40]	; (800f72c <Sonar_init+0xac>)
 800f704:	f04f 32ff 	mov.w	r2, #4294967295
 800f708:	601a      	str	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Print(LT_INFO, "Sonar init : success");
 800f70a:	4909      	ldr	r1, [pc, #36]	; (800f730 <Sonar_init+0xb0>)
 800f70c:	2002      	movs	r0, #2
 800f70e:	f004 f9e5 	bl	8013adc <pifLog_Print>
 800f712:	e000      	b.n	800f716 <Sonar_init+0x96>
		if (!(*sonarInit)(60, getSonarDistance)) return;
 800f714:	bf00      	nop
#endif
}
 800f716:	3708      	adds	r7, #8
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}
 800f71c:	20001bd8 	.word	0x20001bd8
 800f720:	20001a90 	.word	0x20001a90
 800f724:	0800f611 	.word	0x0800f611
 800f728:	0800f5b9 	.word	0x0800f5b9
 800f72c:	2000002c 	.word	0x2000002c
 800f730:	0802854c 	.word	0x0802854c

0800f734 <_SerializeBoxNamesReply>:

static void evtMspReceive(PifMsp* p_owner, PifMspPacket* p_packet, PifIssuerP p_issuer);
static void evtMspOtherPacket(PifMsp* p_owner, uint8_t data, PifIssuerP p_issuer);

static void _SerializeBoxNamesReply(PifMsp* p_owner)
{
 800f734:	b590      	push	{r4, r7, lr}
 800f736:	b085      	sub	sp, #20
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
    int i, idx;

    // in first run of the loop, we grab total size of junk to be sent
    // then come back and actually send it
    for (i = 0; i < numberBoxItems; i++) {
 800f73c:	2300      	movs	r3, #0
 800f73e:	60fb      	str	r3, [r7, #12]
 800f740:	e023      	b.n	800f78a <_SerializeBoxNamesReply+0x56>
        idx = availableBoxes[i];
 800f742:	4a17      	ldr	r2, [pc, #92]	; (800f7a0 <_SerializeBoxNamesReply+0x6c>)
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	4413      	add	r3, r2
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	60bb      	str	r3, [r7, #8]
       	pifMsp_AddAnswer(p_owner, (uint8_t*)boxes[idx].boxName, strlen(boxes[idx].boxName));
 800f74c:	4915      	ldr	r1, [pc, #84]	; (800f7a4 <_SerializeBoxNamesReply+0x70>)
 800f74e:	68ba      	ldr	r2, [r7, #8]
 800f750:	4613      	mov	r3, r2
 800f752:	005b      	lsls	r3, r3, #1
 800f754:	4413      	add	r3, r2
 800f756:	009b      	lsls	r3, r3, #2
 800f758:	440b      	add	r3, r1
 800f75a:	3304      	adds	r3, #4
 800f75c:	681c      	ldr	r4, [r3, #0]
 800f75e:	4911      	ldr	r1, [pc, #68]	; (800f7a4 <_SerializeBoxNamesReply+0x70>)
 800f760:	68ba      	ldr	r2, [r7, #8]
 800f762:	4613      	mov	r3, r2
 800f764:	005b      	lsls	r3, r3, #1
 800f766:	4413      	add	r3, r2
 800f768:	009b      	lsls	r3, r3, #2
 800f76a:	440b      	add	r3, r1
 800f76c:	3304      	adds	r3, #4
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	4618      	mov	r0, r3
 800f772:	f7f0 fd31 	bl	80001d8 <strlen>
 800f776:	4603      	mov	r3, r0
 800f778:	b29b      	uxth	r3, r3
 800f77a:	461a      	mov	r2, r3
 800f77c:	4621      	mov	r1, r4
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f008 feaa 	bl	80184d8 <pifMsp_AddAnswer>
    for (i = 0; i < numberBoxItems; i++) {
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	3301      	adds	r3, #1
 800f788:	60fb      	str	r3, [r7, #12]
 800f78a:	4b07      	ldr	r3, [pc, #28]	; (800f7a8 <_SerializeBoxNamesReply+0x74>)
 800f78c:	781b      	ldrb	r3, [r3, #0]
 800f78e:	461a      	mov	r2, r3
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	4293      	cmp	r3, r2
 800f794:	dbd5      	blt.n	800f742 <_SerializeBoxNamesReply+0xe>
    }
}
 800f796:	bf00      	nop
 800f798:	bf00      	nop
 800f79a:	3714      	adds	r7, #20
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd90      	pop	{r4, r7, pc}
 800f7a0:	20001bf8 	.word	0x20001bf8
 800f7a4:	0802a328 	.word	0x0802a328
 800f7a8:	20001c11 	.word	0x20001c11

0800f7ac <serialInit>:

void serialInit(uint8_t port, uint32_t baudrate, uint8_t flexport)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b084      	sub	sp, #16
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	6039      	str	r1, [r7, #0]
 800f7b6:	71fb      	strb	r3, [r7, #7]
 800f7b8:	4613      	mov	r3, r2
 800f7ba:	71bb      	strb	r3, [r7, #6]
    int idx;

    core.mainport = uartOpen(port, baudrate, MODE_RXTX, 2);			// 10ms
 800f7bc:	79f8      	ldrb	r0, [r7, #7]
 800f7be:	2302      	movs	r3, #2
 800f7c0:	2203      	movs	r2, #3
 800f7c2:	6839      	ldr	r1, [r7, #0]
 800f7c4:	f7f2 fdfe 	bl	80023c4 <uartOpen>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	4a92      	ldr	r2, [pc, #584]	; (800fa14 <serialInit+0x268>)
 800f7cc:	6013      	str	r3, [r2, #0]
    ports[0].port = core.mainport;
 800f7ce:	4b91      	ldr	r3, [pc, #580]	; (800fa14 <serialInit+0x268>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	4a91      	ldr	r2, [pc, #580]	; (800fa18 <serialInit+0x26c>)
 800f7d4:	6013      	str	r3, [r2, #0]

    if (!pifMsp_Init(&ports[0].pif_msp, &g_timer_1ms, PIF_ID_MSP(0))) return;
 800f7d6:	f44f 7288 	mov.w	r2, #272	; 0x110
 800f7da:	4990      	ldr	r1, [pc, #576]	; (800fa1c <serialInit+0x270>)
 800f7dc:	4890      	ldr	r0, [pc, #576]	; (800fa20 <serialInit+0x274>)
 800f7de:	f008 fc29 	bl	8018034 <pifMsp_Init>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	f000 810e 	beq.w	800fa06 <serialInit+0x25a>
    pifMsp_AttachEvtReceive(&ports[0].pif_msp, evtMspReceive, evtMspOtherPacket, core.mainport);
 800f7ea:	4b8a      	ldr	r3, [pc, #552]	; (800fa14 <serialInit+0x268>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	4a8d      	ldr	r2, [pc, #564]	; (800fa24 <serialInit+0x278>)
 800f7f0:	498d      	ldr	r1, [pc, #564]	; (800fa28 <serialInit+0x27c>)
 800f7f2:	488b      	ldr	r0, [pc, #556]	; (800fa20 <serialInit+0x274>)
 800f7f4:	f008 fcd2 	bl	801819c <pifMsp_AttachEvtReceive>
    pifMsp_AttachComm(&ports[0].pif_msp, &core.mainport->comm);
 800f7f8:	4b86      	ldr	r3, [pc, #536]	; (800fa14 <serialInit+0x268>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	3304      	adds	r3, #4
 800f7fe:	4619      	mov	r1, r3
 800f800:	4887      	ldr	r0, [pc, #540]	; (800fa20 <serialInit+0x274>)
 800f802:	f008 fca5 	bl	8018150 <pifMsp_AttachComm>

    serialStartReceiveFunc(&core.mainport->comm);
 800f806:	4b83      	ldr	r3, [pc, #524]	; (800fa14 <serialInit+0x268>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	3304      	adds	r3, #4
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7f2 ff65 	bl	80026dc <serialStartReceiveFunc>

    // additional telemetry port available only if spektrum sat isn't already assigned there
    if (flexport) {
 800f812:	79bb      	ldrb	r3, [r7, #6]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d02a      	beq.n	800f86e <serialInit+0xc2>
        core.flexport = uartOpen(flexport, baudrate, MODE_RXTX, 10);	// 10ms
 800f818:	79b8      	ldrb	r0, [r7, #6]
 800f81a:	230a      	movs	r3, #10
 800f81c:	2203      	movs	r2, #3
 800f81e:	6839      	ldr	r1, [r7, #0]
 800f820:	f7f2 fdd0 	bl	80023c4 <uartOpen>
 800f824:	4603      	mov	r3, r0
 800f826:	4a7b      	ldr	r2, [pc, #492]	; (800fa14 <serialInit+0x268>)
 800f828:	6053      	str	r3, [r2, #4]
        ports[1].port = core.flexport;
 800f82a:	4b7a      	ldr	r3, [pc, #488]	; (800fa14 <serialInit+0x268>)
 800f82c:	685b      	ldr	r3, [r3, #4]
 800f82e:	4a7a      	ldr	r2, [pc, #488]	; (800fa18 <serialInit+0x26c>)
 800f830:	65d3      	str	r3, [r2, #92]	; 0x5c

        if (!pifMsp_Init(&ports[1].pif_msp, &g_timer_1ms, PIF_ID_MSP(1))) return;
 800f832:	f240 1211 	movw	r2, #273	; 0x111
 800f836:	4979      	ldr	r1, [pc, #484]	; (800fa1c <serialInit+0x270>)
 800f838:	487c      	ldr	r0, [pc, #496]	; (800fa2c <serialInit+0x280>)
 800f83a:	f008 fbfb 	bl	8018034 <pifMsp_Init>
 800f83e:	4603      	mov	r3, r0
 800f840:	2b00      	cmp	r3, #0
 800f842:	f000 80e2 	beq.w	800fa0a <serialInit+0x25e>
        pifMsp_AttachEvtReceive(&ports[1].pif_msp, evtMspReceive, evtMspOtherPacket, core.flexport);
 800f846:	4b73      	ldr	r3, [pc, #460]	; (800fa14 <serialInit+0x268>)
 800f848:	685b      	ldr	r3, [r3, #4]
 800f84a:	4a76      	ldr	r2, [pc, #472]	; (800fa24 <serialInit+0x278>)
 800f84c:	4976      	ldr	r1, [pc, #472]	; (800fa28 <serialInit+0x27c>)
 800f84e:	4877      	ldr	r0, [pc, #476]	; (800fa2c <serialInit+0x280>)
 800f850:	f008 fca4 	bl	801819c <pifMsp_AttachEvtReceive>
        pifMsp_AttachComm(&ports[1].pif_msp, &core.flexport->comm);
 800f854:	4b6f      	ldr	r3, [pc, #444]	; (800fa14 <serialInit+0x268>)
 800f856:	685b      	ldr	r3, [r3, #4]
 800f858:	3304      	adds	r3, #4
 800f85a:	4619      	mov	r1, r3
 800f85c:	4873      	ldr	r0, [pc, #460]	; (800fa2c <serialInit+0x280>)
 800f85e:	f008 fc77 	bl	8018150 <pifMsp_AttachComm>

        serialStartReceiveFunc(&core.flexport->comm);
 800f862:	4b6c      	ldr	r3, [pc, #432]	; (800fa14 <serialInit+0x268>)
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	3304      	adds	r3, #4
 800f868:	4618      	mov	r0, r3
 800f86a:	f7f2 ff37 	bl	80026dc <serialStartReceiveFunc>
    }

    // calculate used boxes based on features and fill availableBoxes[] array
    memset(availableBoxes, 0xFF, sizeof(availableBoxes));
 800f86e:	2219      	movs	r2, #25
 800f870:	21ff      	movs	r1, #255	; 0xff
 800f872:	486f      	ldr	r0, [pc, #444]	; (800fa30 <serialInit+0x284>)
 800f874:	f014 fb22 	bl	8023ebc <memset>

    idx = 0;
 800f878:	2300      	movs	r3, #0
 800f87a:	60fb      	str	r3, [r7, #12]
    availableBoxes[idx++] = BOXARM;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	1c5a      	adds	r2, r3, #1
 800f880:	60fa      	str	r2, [r7, #12]
 800f882:	4a6b      	ldr	r2, [pc, #428]	; (800fa30 <serialInit+0x284>)
 800f884:	2100      	movs	r1, #0
 800f886:	54d1      	strb	r1, [r2, r3]
    if (sensors(SENSOR_ACC)) {
 800f888:	2002      	movs	r0, #2
 800f88a:	f7f7 fbc1 	bl	8007010 <sensors>
 800f88e:	4603      	mov	r3, r0
 800f890:	2b00      	cmp	r3, #0
 800f892:	d00b      	beq.n	800f8ac <serialInit+0x100>
        availableBoxes[idx++] = BOXANGLE;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	1c5a      	adds	r2, r3, #1
 800f898:	60fa      	str	r2, [r7, #12]
 800f89a:	4a65      	ldr	r2, [pc, #404]	; (800fa30 <serialInit+0x284>)
 800f89c:	2101      	movs	r1, #1
 800f89e:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHORIZON;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	1c5a      	adds	r2, r3, #1
 800f8a4:	60fa      	str	r2, [r7, #12]
 800f8a6:	4a62      	ldr	r2, [pc, #392]	; (800fa30 <serialInit+0x284>)
 800f8a8:	2102      	movs	r1, #2
 800f8aa:	54d1      	strb	r1, [r2, r3]
    }
    if (sensors(SENSOR_BARO)) {
 800f8ac:	2004      	movs	r0, #4
 800f8ae:	f7f7 fbaf 	bl	8007010 <sensors>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d012      	beq.n	800f8de <serialInit+0x132>
        availableBoxes[idx++] = BOXBARO;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	1c5a      	adds	r2, r3, #1
 800f8bc:	60fa      	str	r2, [r7, #12]
 800f8be:	4a5c      	ldr	r2, [pc, #368]	; (800fa30 <serialInit+0x284>)
 800f8c0:	2103      	movs	r1, #3
 800f8c2:	54d1      	strb	r1, [r2, r3]
        if (feature(FEATURE_VARIO))
 800f8c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800f8c8:	f7f7 fbea 	bl	80070a0 <feature>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d005      	beq.n	800f8de <serialInit+0x132>
            availableBoxes[idx++] = BOXVARIO;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	1c5a      	adds	r2, r3, #1
 800f8d6:	60fa      	str	r2, [r7, #12]
 800f8d8:	4a55      	ldr	r2, [pc, #340]	; (800fa30 <serialInit+0x284>)
 800f8da:	2104      	movs	r1, #4
 800f8dc:	54d1      	strb	r1, [r2, r3]
    }
    if (sensors(SENSOR_ACC) || sensors(SENSOR_MAG)) {
 800f8de:	2002      	movs	r0, #2
 800f8e0:	f7f7 fb96 	bl	8007010 <sensors>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d105      	bne.n	800f8f6 <serialInit+0x14a>
 800f8ea:	2008      	movs	r0, #8
 800f8ec:	f7f7 fb90 	bl	8007010 <sensors>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d011      	beq.n	800f91a <serialInit+0x16e>
        availableBoxes[idx++] = BOXMAG;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	1c5a      	adds	r2, r3, #1
 800f8fa:	60fa      	str	r2, [r7, #12]
 800f8fc:	4a4c      	ldr	r2, [pc, #304]	; (800fa30 <serialInit+0x284>)
 800f8fe:	2105      	movs	r1, #5
 800f900:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHEADFREE;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	1c5a      	adds	r2, r3, #1
 800f906:	60fa      	str	r2, [r7, #12]
 800f908:	4a49      	ldr	r2, [pc, #292]	; (800fa30 <serialInit+0x284>)
 800f90a:	2106      	movs	r1, #6
 800f90c:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHEADADJ;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	1c5a      	adds	r2, r3, #1
 800f912:	60fa      	str	r2, [r7, #12]
 800f914:	4a46      	ldr	r2, [pc, #280]	; (800fa30 <serialInit+0x284>)
 800f916:	2107      	movs	r1, #7
 800f918:	54d1      	strb	r1, [r2, r3]
    }
    if (feature(FEATURE_SERVO_TILT))
 800f91a:	2020      	movs	r0, #32
 800f91c:	f7f7 fbc0 	bl	80070a0 <feature>
 800f920:	4603      	mov	r3, r0
 800f922:	2b00      	cmp	r3, #0
 800f924:	d005      	beq.n	800f932 <serialInit+0x186>
        availableBoxes[idx++] = BOXCAMSTAB;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	1c5a      	adds	r2, r3, #1
 800f92a:	60fa      	str	r2, [r7, #12]
 800f92c:	4a40      	ldr	r2, [pc, #256]	; (800fa30 <serialInit+0x284>)
 800f92e:	2108      	movs	r1, #8
 800f930:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_GPS)) {
 800f932:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f936:	f7f7 fbb3 	bl	80070a0 <feature>
 800f93a:	4603      	mov	r3, r0
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d00b      	beq.n	800f958 <serialInit+0x1ac>
        availableBoxes[idx++] = BOXGPSHOME;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	1c5a      	adds	r2, r3, #1
 800f944:	60fa      	str	r2, [r7, #12]
 800f946:	4a3a      	ldr	r2, [pc, #232]	; (800fa30 <serialInit+0x284>)
 800f948:	210a      	movs	r1, #10
 800f94a:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXGPSHOLD;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	1c5a      	adds	r2, r3, #1
 800f950:	60fa      	str	r2, [r7, #12]
 800f952:	4a37      	ldr	r2, [pc, #220]	; (800fa30 <serialInit+0x284>)
 800f954:	210b      	movs	r1, #11
 800f956:	54d1      	strb	r1, [r2, r3]
    }
    if (f.FIXED_WING) {
 800f958:	4b36      	ldr	r3, [pc, #216]	; (800fa34 <serialInit+0x288>)
 800f95a:	7c1b      	ldrb	r3, [r3, #16]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d00b      	beq.n	800f978 <serialInit+0x1cc>
        availableBoxes[idx++] = BOXPASSTHRU;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	1c5a      	adds	r2, r3, #1
 800f964:	60fa      	str	r2, [r7, #12]
 800f966:	4a32      	ldr	r2, [pc, #200]	; (800fa30 <serialInit+0x284>)
 800f968:	210c      	movs	r1, #12
 800f96a:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXGCRUISE;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	1c5a      	adds	r2, r3, #1
 800f970:	60fa      	str	r2, [r7, #12]
 800f972:	4a2f      	ldr	r2, [pc, #188]	; (800fa30 <serialInit+0x284>)
 800f974:	2118      	movs	r1, #24
 800f976:	54d1      	strb	r1, [r2, r3]
    }
    availableBoxes[idx++] = BOXBEEPERON;
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	1c5a      	adds	r2, r3, #1
 800f97c:	60fa      	str	r2, [r7, #12]
 800f97e:	4a2c      	ldr	r2, [pc, #176]	; (800fa30 <serialInit+0x284>)
 800f980:	210d      	movs	r1, #13
 800f982:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_INFLIGHT_ACC_CAL))
 800f984:	2004      	movs	r0, #4
 800f986:	f7f7 fb8b 	bl	80070a0 <feature>
 800f98a:	4603      	mov	r3, r0
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d005      	beq.n	800f99c <serialInit+0x1f0>
        availableBoxes[idx++] = BOXCALIB;
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	1c5a      	adds	r2, r3, #1
 800f994:	60fa      	str	r2, [r7, #12]
 800f996:	4a26      	ldr	r2, [pc, #152]	; (800fa30 <serialInit+0x284>)
 800f998:	2111      	movs	r1, #17
 800f99a:	54d1      	strb	r1, [r2, r3]
    availableBoxes[idx++] = BOXOSD;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	1c5a      	adds	r2, r3, #1
 800f9a0:	60fa      	str	r2, [r7, #12]
 800f9a2:	4a23      	ldr	r2, [pc, #140]	; (800fa30 <serialInit+0x284>)
 800f9a4:	2113      	movs	r1, #19
 800f9a6:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_TELEMETRY && mcfg.telemetry_switch))
 800f9a8:	4b23      	ldr	r3, [pc, #140]	; (800fa38 <serialInit+0x28c>)
 800f9aa:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	bf14      	ite	ne
 800f9b2:	2301      	movne	r3, #1
 800f9b4:	2300      	moveq	r3, #0
 800f9b6:	b2db      	uxtb	r3, r3
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7f7 fb71 	bl	80070a0 <feature>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d005      	beq.n	800f9d0 <serialInit+0x224>
        availableBoxes[idx++] = BOXTELEMETRY;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	1c5a      	adds	r2, r3, #1
 800f9c8:	60fa      	str	r2, [r7, #12]
 800f9ca:	4a19      	ldr	r2, [pc, #100]	; (800fa30 <serialInit+0x284>)
 800f9cc:	2114      	movs	r1, #20
 800f9ce:	54d1      	strb	r1, [r2, r3]
    if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE) {
 800f9d0:	4b19      	ldr	r3, [pc, #100]	; (800fa38 <serialInit+0x28c>)
 800f9d2:	795b      	ldrb	r3, [r3, #5]
 800f9d4:	2b18      	cmp	r3, #24
 800f9d6:	d111      	bne.n	800f9fc <serialInit+0x250>
        availableBoxes[idx++] = BOXSERVO1;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	1c5a      	adds	r2, r3, #1
 800f9dc:	60fa      	str	r2, [r7, #12]
 800f9de:	4a14      	ldr	r2, [pc, #80]	; (800fa30 <serialInit+0x284>)
 800f9e0:	2115      	movs	r1, #21
 800f9e2:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXSERVO2;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	1c5a      	adds	r2, r3, #1
 800f9e8:	60fa      	str	r2, [r7, #12]
 800f9ea:	4a11      	ldr	r2, [pc, #68]	; (800fa30 <serialInit+0x284>)
 800f9ec:	2116      	movs	r1, #22
 800f9ee:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXSERVO3;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	1c5a      	adds	r2, r3, #1
 800f9f4:	60fa      	str	r2, [r7, #12]
 800f9f6:	4a0e      	ldr	r2, [pc, #56]	; (800fa30 <serialInit+0x284>)
 800f9f8:	2117      	movs	r1, #23
 800f9fa:	54d1      	strb	r1, [r2, r3]
    }

    numberBoxItems = idx;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	b2da      	uxtb	r2, r3
 800fa00:	4b0e      	ldr	r3, [pc, #56]	; (800fa3c <serialInit+0x290>)
 800fa02:	701a      	strb	r2, [r3, #0]
 800fa04:	e002      	b.n	800fa0c <serialInit+0x260>
    if (!pifMsp_Init(&ports[0].pif_msp, &g_timer_1ms, PIF_ID_MSP(0))) return;
 800fa06:	bf00      	nop
 800fa08:	e000      	b.n	800fa0c <serialInit+0x260>
        if (!pifMsp_Init(&ports[1].pif_msp, &g_timer_1ms, PIF_ID_MSP(1))) return;
 800fa0a:	bf00      	nop
}
 800fa0c:	3710      	adds	r7, #16
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}
 800fa12:	bf00      	nop
 800fa14:	200007e4 	.word	0x200007e4
 800fa18:	20001c14 	.word	0x20001c14
 800fa1c:	20001580 	.word	0x20001580
 800fa20:	20001c18 	.word	0x20001c18
 800fa24:	08011399 	.word	0x08011399
 800fa28:	0800fa41 	.word	0x0800fa41
 800fa2c:	20001c74 	.word	0x20001c74
 800fa30:	20001bf8 	.word	0x20001bf8
 800fa34:	2000174c 	.word	0x2000174c
 800fa38:	2000089c 	.word	0x2000089c
 800fa3c:	20001c11 	.word	0x20001c11

0800fa40 <evtMspReceive>:

void evtMspReceive(PifMsp* p_owner, PifMspPacket* p_packet, PifIssuerP p_issuer)
{
 800fa40:	b590      	push	{r4, r7, lr}
 800fa42:	b091      	sub	sp, #68	; 0x44
 800fa44:	af02      	add	r7, sp, #8
 800fa46:	60f8      	str	r0, [r7, #12]
 800fa48:	60b9      	str	r1, [r7, #8]
 800fa4a:	607a      	str	r2, [r7, #4]
    uint32_t i, j, tmp, junk;
#ifdef GPS
    uint8_t wp_no;
    int32_t lat = 0, lon = 0, alt = 0;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	62bb      	str	r3, [r7, #40]	; 0x28
 800fa50:	2300      	movs	r3, #0
 800fa52:	627b      	str	r3, [r7, #36]	; 0x24
 800fa54:	2300      	movs	r3, #0
 800fa56:	623b      	str	r3, [r7, #32]
#endif
    const char *build = __DATE__;
 800fa58:	4bd9      	ldr	r3, [pc, #868]	; (800fdc0 <evtMspReceive+0x380>)
 800fa5a:	61fb      	str	r3, [r7, #28]

    (void)p_issuer;

    pifMsp_MakeAnswer(p_owner, p_packet);
 800fa5c:	68b9      	ldr	r1, [r7, #8]
 800fa5e:	68f8      	ldr	r0, [r7, #12]
 800fa60:	f008 fc0a 	bl	8018278 <pifMsp_MakeAnswer>
    switch (p_packet->command) {
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	781b      	ldrb	r3, [r3, #0]
 800fa68:	3b40      	subs	r3, #64	; 0x40
 800fa6a:	2bbe      	cmp	r3, #190	; 0xbe
 800fa6c:	f201 8477 	bhi.w	801135e <evtMspReceive+0x191e>
 800fa70:	a201      	add	r2, pc, #4	; (adr r2, 800fa78 <evtMspReceive+0x38>)
 800fa72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa76:	bf00      	nop
 800fa78:	080112cf 	.word	0x080112cf
 800fa7c:	080112f7 	.word	0x080112f7
 800fa80:	080111f9 	.word	0x080111f9
 800fa84:	08011065 	.word	0x08011065
 800fa88:	08011323 	.word	0x08011323
 800fa8c:	0801132b 	.word	0x0801132b
 800fa90:	0801135f 	.word	0x0801135f
 800fa94:	0801135f 	.word	0x0801135f
 800fa98:	0801135f 	.word	0x0801135f
 800fa9c:	0801135f 	.word	0x0801135f
 800faa0:	0801135f 	.word	0x0801135f
 800faa4:	0801135f 	.word	0x0801135f
 800faa8:	0801135f 	.word	0x0801135f
 800faac:	0801135f 	.word	0x0801135f
 800fab0:	0801135f 	.word	0x0801135f
 800fab4:	0801135f 	.word	0x0801135f
 800fab8:	0801135f 	.word	0x0801135f
 800fabc:	0801135f 	.word	0x0801135f
 800fac0:	0801135f 	.word	0x0801135f
 800fac4:	0801135f 	.word	0x0801135f
 800fac8:	0801135f 	.word	0x0801135f
 800facc:	0801135f 	.word	0x0801135f
 800fad0:	0801135f 	.word	0x0801135f
 800fad4:	0801135f 	.word	0x0801135f
 800fad8:	0801135f 	.word	0x0801135f
 800fadc:	0801135f 	.word	0x0801135f
 800fae0:	0801135f 	.word	0x0801135f
 800fae4:	0801135f 	.word	0x0801135f
 800fae8:	0801135f 	.word	0x0801135f
 800faec:	0801135f 	.word	0x0801135f
 800faf0:	0801135f 	.word	0x0801135f
 800faf4:	0801135f 	.word	0x0801135f
 800faf8:	0801135f 	.word	0x0801135f
 800fafc:	0801135f 	.word	0x0801135f
 800fb00:	0801135f 	.word	0x0801135f
 800fb04:	0801135f 	.word	0x0801135f
 800fb08:	08010117 	.word	0x08010117
 800fb0c:	0801013f 	.word	0x0801013f
 800fb10:	080102cb 	.word	0x080102cb
 800fb14:	080103ad 	.word	0x080103ad
 800fb18:	0801084f 	.word	0x0801084f
 800fb1c:	0801085d 	.word	0x0801085d
 800fb20:	08010885 	.word	0x08010885
 800fb24:	08010905 	.word	0x08010905
 800fb28:	08010937 	.word	0x08010937
 800fb2c:	0801096f 	.word	0x0801096f
 800fb30:	0801098d 	.word	0x0801098d
 800fb34:	08010a31 	.word	0x08010a31
 800fb38:	08010a95 	.word	0x08010a95
 800fb3c:	08010b21 	.word	0x08010b21
 800fb40:	08010c11 	.word	0x08010c11
 800fb44:	08010d01 	.word	0x08010d01
 800fb48:	08010b59 	.word	0x08010b59
 800fb4c:	08010b13 	.word	0x08010b13
 800fb50:	08010d25 	.word	0x08010d25
 800fb54:	08010b63 	.word	0x08010b63
 800fb58:	080103bb 	.word	0x080103bb
 800fb5c:	0801135f 	.word	0x0801135f
 800fb60:	0801135f 	.word	0x0801135f
 800fb64:	080106c5 	.word	0x080106c5
 800fb68:	0801135f 	.word	0x0801135f
 800fb6c:	0801135f 	.word	0x0801135f
 800fb70:	0801135f 	.word	0x0801135f
 800fb74:	0801135f 	.word	0x0801135f
 800fb78:	0801135f 	.word	0x0801135f
 800fb7c:	0801135f 	.word	0x0801135f
 800fb80:	0801135f 	.word	0x0801135f
 800fb84:	0801135f 	.word	0x0801135f
 800fb88:	0801135f 	.word	0x0801135f
 800fb8c:	0801135f 	.word	0x0801135f
 800fb90:	0801135f 	.word	0x0801135f
 800fb94:	0801135f 	.word	0x0801135f
 800fb98:	0801135f 	.word	0x0801135f
 800fb9c:	0801135f 	.word	0x0801135f
 800fba0:	0801135f 	.word	0x0801135f
 800fba4:	0801135f 	.word	0x0801135f
 800fba8:	0801135f 	.word	0x0801135f
 800fbac:	0801135f 	.word	0x0801135f
 800fbb0:	0801135f 	.word	0x0801135f
 800fbb4:	0801135f 	.word	0x0801135f
 800fbb8:	0801135f 	.word	0x0801135f
 800fbbc:	0801135f 	.word	0x0801135f
 800fbc0:	0801135f 	.word	0x0801135f
 800fbc4:	0801135f 	.word	0x0801135f
 800fbc8:	0801135f 	.word	0x0801135f
 800fbcc:	0801135f 	.word	0x0801135f
 800fbd0:	0801135f 	.word	0x0801135f
 800fbd4:	0801135f 	.word	0x0801135f
 800fbd8:	0801135f 	.word	0x0801135f
 800fbdc:	0801135f 	.word	0x0801135f
 800fbe0:	0801135f 	.word	0x0801135f
 800fbe4:	0801135f 	.word	0x0801135f
 800fbe8:	0801135f 	.word	0x0801135f
 800fbec:	0801135f 	.word	0x0801135f
 800fbf0:	0801135f 	.word	0x0801135f
 800fbf4:	0801135f 	.word	0x0801135f
 800fbf8:	08010f79 	.word	0x08010f79
 800fbfc:	0801135f 	.word	0x0801135f
 800fc00:	0801135f 	.word	0x0801135f
 800fc04:	0801135f 	.word	0x0801135f
 800fc08:	08010f9f 	.word	0x08010f9f
 800fc0c:	0801135f 	.word	0x0801135f
 800fc10:	08011009 	.word	0x08011009
 800fc14:	0801135f 	.word	0x0801135f
 800fc18:	0801135f 	.word	0x0801135f
 800fc1c:	0801135f 	.word	0x0801135f
 800fc20:	0801135f 	.word	0x0801135f
 800fc24:	0801135f 	.word	0x0801135f
 800fc28:	0801135f 	.word	0x0801135f
 800fc2c:	0801135f 	.word	0x0801135f
 800fc30:	0801135f 	.word	0x0801135f
 800fc34:	0801135f 	.word	0x0801135f
 800fc38:	0801135f 	.word	0x0801135f
 800fc3c:	0801135f 	.word	0x0801135f
 800fc40:	0801135f 	.word	0x0801135f
 800fc44:	0801135f 	.word	0x0801135f
 800fc48:	0801135f 	.word	0x0801135f
 800fc4c:	0801135f 	.word	0x0801135f
 800fc50:	0801135f 	.word	0x0801135f
 800fc54:	0801135f 	.word	0x0801135f
 800fc58:	0801135f 	.word	0x0801135f
 800fc5c:	0801135f 	.word	0x0801135f
 800fc60:	0801135f 	.word	0x0801135f
 800fc64:	0801135f 	.word	0x0801135f
 800fc68:	0801135f 	.word	0x0801135f
 800fc6c:	0801135f 	.word	0x0801135f
 800fc70:	0801135f 	.word	0x0801135f
 800fc74:	0801135f 	.word	0x0801135f
 800fc78:	0801135f 	.word	0x0801135f
 800fc7c:	0801135f 	.word	0x0801135f
 800fc80:	0801135f 	.word	0x0801135f
 800fc84:	0801135f 	.word	0x0801135f
 800fc88:	0801135f 	.word	0x0801135f
 800fc8c:	0801135f 	.word	0x0801135f
 800fc90:	0801135f 	.word	0x0801135f
 800fc94:	0801135f 	.word	0x0801135f
 800fc98:	0800fd75 	.word	0x0800fd75
 800fc9c:	0800fdcd 	.word	0x0800fdcd
 800fca0:	0800fe33 	.word	0x0800fe33
 800fca4:	0800febd 	.word	0x0800febd
 800fca8:	0800fef5 	.word	0x0800fef5
 800fcac:	08010e43 	.word	0x08010e43
 800fcb0:	08010e57 	.word	0x08010e57
 800fcb4:	0800ff5d 	.word	0x0800ff5d
 800fcb8:	08010e31 	.word	0x08010e31
 800fcbc:	08010d99 	.word	0x08010d99
 800fcc0:	080100cd 	.word	0x080100cd
 800fcc4:	08010105 	.word	0x08010105
 800fcc8:	08010463 	.word	0x08010463
 800fccc:	0801135f 	.word	0x0801135f
 800fcd0:	08010073 	.word	0x08010073
 800fcd4:	0801135f 	.word	0x0801135f
 800fcd8:	0801078d 	.word	0x0801078d
 800fcdc:	0801135f 	.word	0x0801135f
 800fce0:	0801135f 	.word	0x0801135f
 800fce4:	0801135f 	.word	0x0801135f
 800fce8:	0801135f 	.word	0x0801135f
 800fcec:	0801135f 	.word	0x0801135f
 800fcf0:	0801135f 	.word	0x0801135f
 800fcf4:	0801135f 	.word	0x0801135f
 800fcf8:	0801135f 	.word	0x0801135f
 800fcfc:	0801135f 	.word	0x0801135f
 800fd00:	0801135f 	.word	0x0801135f
 800fd04:	0801135f 	.word	0x0801135f
 800fd08:	0801135f 	.word	0x0801135f
 800fd0c:	0801135f 	.word	0x0801135f
 800fd10:	0801135f 	.word	0x0801135f
 800fd14:	0801135f 	.word	0x0801135f
 800fd18:	0801135f 	.word	0x0801135f
 800fd1c:	0801135f 	.word	0x0801135f
 800fd20:	0801135f 	.word	0x0801135f
 800fd24:	0801135f 	.word	0x0801135f
 800fd28:	0801135f 	.word	0x0801135f
 800fd2c:	0801135f 	.word	0x0801135f
 800fd30:	0801135f 	.word	0x0801135f
 800fd34:	0800fda1 	.word	0x0800fda1
 800fd38:	08010f57 	.word	0x08010f57
 800fd3c:	0801050f 	.word	0x0801050f
 800fd40:	080105d9 	.word	0x080105d9
 800fd44:	0801135f 	.word	0x0801135f
 800fd48:	0801135f 	.word	0x0801135f
 800fd4c:	0801135f 	.word	0x0801135f
 800fd50:	0801135f 	.word	0x0801135f
 800fd54:	0801135f 	.word	0x0801135f
 800fd58:	0801135f 	.word	0x0801135f
 800fd5c:	0801135f 	.word	0x0801135f
 800fd60:	08010e69 	.word	0x08010e69
 800fd64:	0801135f 	.word	0x0801135f
 800fd68:	0801135f 	.word	0x0801135f
 800fd6c:	0801135f 	.word	0x0801135f
 800fd70:	08010e85 	.word	0x08010e85
    case MSP_SET_RAW_RC:
        for (i = 0; i < 8; i++)
 800fd74:	2300      	movs	r3, #0
 800fd76:	637b      	str	r3, [r7, #52]	; 0x34
 800fd78:	e00b      	b.n	800fd92 <evtMspReceive+0x352>
            rcData[i] = pifMsp_ReadData16(p_packet);
 800fd7a:	68b8      	ldr	r0, [r7, #8]
 800fd7c:	f008 fa38 	bl	80181f0 <pifMsp_ReadData16>
 800fd80:	4603      	mov	r3, r0
 800fd82:	b219      	sxth	r1, r3
 800fd84:	4a0f      	ldr	r2, [pc, #60]	; (800fdc4 <evtMspReceive+0x384>)
 800fd86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < 8; i++)
 800fd8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd8e:	3301      	adds	r3, #1
 800fd90:	637b      	str	r3, [r7, #52]	; 0x34
 800fd92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd94:	2b07      	cmp	r3, #7
 800fd96:	d9f0      	bls.n	800fd7a <evtMspReceive+0x33a>
        mspFrameRecieve();
 800fd98:	f7fe fc80 	bl	800e69c <mspFrameRecieve>
        break;
 800fd9c:	f001 baed 	b.w	801137a <evtMspReceive+0x193a>
        
    case MSP_SET_ACC_TRIM:
        cfg.angleTrim[PITCH] = pifMsp_ReadData16(p_packet);
 800fda0:	68b8      	ldr	r0, [r7, #8]
 800fda2:	f008 fa25 	bl	80181f0 <pifMsp_ReadData16>
 800fda6:	4603      	mov	r3, r0
 800fda8:	b21a      	sxth	r2, r3
 800fdaa:	4b07      	ldr	r3, [pc, #28]	; (800fdc8 <evtMspReceive+0x388>)
 800fdac:	85da      	strh	r2, [r3, #46]	; 0x2e
        cfg.angleTrim[ROLL]  = pifMsp_ReadData16(p_packet);
 800fdae:	68b8      	ldr	r0, [r7, #8]
 800fdb0:	f008 fa1e 	bl	80181f0 <pifMsp_ReadData16>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	b21a      	sxth	r2, r3
 800fdb8:	4b03      	ldr	r3, [pc, #12]	; (800fdc8 <evtMspReceive+0x388>)
 800fdba:	859a      	strh	r2, [r3, #44]	; 0x2c
        break;
 800fdbc:	f001 badd 	b.w	801137a <evtMspReceive+0x193a>
 800fdc0:	08028658 	.word	0x08028658
 800fdc4:	20001784 	.word	0x20001784
 800fdc8:	20000e08 	.word	0x20000e08

#ifdef GPS
    case MSP_SET_RAW_GPS:
        f.GPS_FIX = pifMsp_ReadData8(p_packet);
 800fdcc:	68b8      	ldr	r0, [r7, #8]
 800fdce:	f008 f9fb 	bl	80181c8 <pifMsp_ReadData8>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	4bb1      	ldr	r3, [pc, #708]	; (801009c <evtMspReceive+0x65c>)
 800fdd8:	72da      	strb	r2, [r3, #11]
        GPS_numSat = pifMsp_ReadData8(p_packet);
 800fdda:	68b8      	ldr	r0, [r7, #8]
 800fddc:	f008 f9f4 	bl	80181c8 <pifMsp_ReadData8>
 800fde0:	4603      	mov	r3, r0
 800fde2:	461a      	mov	r2, r3
 800fde4:	4bae      	ldr	r3, [pc, #696]	; (80100a0 <evtMspReceive+0x660>)
 800fde6:	701a      	strb	r2, [r3, #0]
        GPS_coord[LAT] = pifMsp_ReadData32(p_packet);
 800fde8:	68b8      	ldr	r0, [r7, #8]
 800fdea:	f008 fa1e 	bl	801822a <pifMsp_ReadData32>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	461a      	mov	r2, r3
 800fdf2:	4bac      	ldr	r3, [pc, #688]	; (80100a4 <evtMspReceive+0x664>)
 800fdf4:	601a      	str	r2, [r3, #0]
        GPS_coord[LON] = pifMsp_ReadData32(p_packet);
 800fdf6:	68b8      	ldr	r0, [r7, #8]
 800fdf8:	f008 fa17 	bl	801822a <pifMsp_ReadData32>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	461a      	mov	r2, r3
 800fe00:	4ba8      	ldr	r3, [pc, #672]	; (80100a4 <evtMspReceive+0x664>)
 800fe02:	605a      	str	r2, [r3, #4]
        GPS_altitude = pifMsp_ReadData16(p_packet);
 800fe04:	68b8      	ldr	r0, [r7, #8]
 800fe06:	f008 f9f3 	bl	80181f0 <pifMsp_ReadData16>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	4ba6      	ldr	r3, [pc, #664]	; (80100a8 <evtMspReceive+0x668>)
 800fe10:	801a      	strh	r2, [r3, #0]
        GPS_speed = pifMsp_ReadData16(p_packet);
 800fe12:	68b8      	ldr	r0, [r7, #8]
 800fe14:	f008 f9ec 	bl	80181f0 <pifMsp_ReadData16>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	461a      	mov	r2, r3
 800fe1c:	4ba3      	ldr	r3, [pc, #652]	; (80100ac <evtMspReceive+0x66c>)
 800fe1e:	801a      	strh	r2, [r3, #0]
        GPS_update |= 2;        // New data signalisation to GPS functions
 800fe20:	4ba3      	ldr	r3, [pc, #652]	; (80100b0 <evtMspReceive+0x670>)
 800fe22:	781b      	ldrb	r3, [r3, #0]
 800fe24:	f043 0302 	orr.w	r3, r3, #2
 800fe28:	b2da      	uxtb	r2, r3
 800fe2a:	4ba1      	ldr	r3, [pc, #644]	; (80100b0 <evtMspReceive+0x670>)
 800fe2c:	701a      	strb	r2, [r3, #0]
        break;
 800fe2e:	f001 baa4 	b.w	801137a <evtMspReceive+0x193a>
#endif

    case MSP_SET_PID:
        for (i = 0; i < PIDITEMS; i++) {
 800fe32:	2300      	movs	r3, #0
 800fe34:	637b      	str	r3, [r7, #52]	; 0x34
 800fe36:	e03c      	b.n	800feb2 <evtMspReceive+0x472>
            cfg.P8[i] = pifMsp_ReadData8(p_packet);
 800fe38:	68b8      	ldr	r0, [r7, #8]
 800fe3a:	f008 f9c5 	bl	80181c8 <pifMsp_ReadData8>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	4619      	mov	r1, r3
 800fe42:	4a9c      	ldr	r2, [pc, #624]	; (80100b4 <evtMspReceive+0x674>)
 800fe44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe46:	4413      	add	r3, r2
 800fe48:	3301      	adds	r3, #1
 800fe4a:	460a      	mov	r2, r1
 800fe4c:	701a      	strb	r2, [r3, #0]
            cfg.I8[i] = pifMsp_ReadData8(p_packet);
 800fe4e:	68b8      	ldr	r0, [r7, #8]
 800fe50:	f008 f9ba 	bl	80181c8 <pifMsp_ReadData8>
 800fe54:	4603      	mov	r3, r0
 800fe56:	4619      	mov	r1, r3
 800fe58:	4a96      	ldr	r2, [pc, #600]	; (80100b4 <evtMspReceive+0x674>)
 800fe5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe5c:	4413      	add	r3, r2
 800fe5e:	330b      	adds	r3, #11
 800fe60:	460a      	mov	r2, r1
 800fe62:	701a      	strb	r2, [r3, #0]
            cfg.D8[i] = pifMsp_ReadData8(p_packet);
 800fe64:	68b8      	ldr	r0, [r7, #8]
 800fe66:	f008 f9af 	bl	80181c8 <pifMsp_ReadData8>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	4619      	mov	r1, r3
 800fe6e:	4a91      	ldr	r2, [pc, #580]	; (80100b4 <evtMspReceive+0x674>)
 800fe70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe72:	4413      	add	r3, r2
 800fe74:	3315      	adds	r3, #21
 800fe76:	460a      	mov	r2, r1
 800fe78:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
            pifLog_Printf(LT_INFO, "S-PID:%d P=%u I=%u D=%u", i, cfg.P8[i], cfg.I8[i], cfg.D8[i]);
 800fe7a:	4a8e      	ldr	r2, [pc, #568]	; (80100b4 <evtMspReceive+0x674>)
 800fe7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe7e:	4413      	add	r3, r2
 800fe80:	3301      	adds	r3, #1
 800fe82:	781b      	ldrb	r3, [r3, #0]
 800fe84:	4618      	mov	r0, r3
 800fe86:	4a8b      	ldr	r2, [pc, #556]	; (80100b4 <evtMspReceive+0x674>)
 800fe88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe8a:	4413      	add	r3, r2
 800fe8c:	330b      	adds	r3, #11
 800fe8e:	781b      	ldrb	r3, [r3, #0]
 800fe90:	4619      	mov	r1, r3
 800fe92:	4a88      	ldr	r2, [pc, #544]	; (80100b4 <evtMspReceive+0x674>)
 800fe94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe96:	4413      	add	r3, r2
 800fe98:	3315      	adds	r3, #21
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	9301      	str	r3, [sp, #4]
 800fe9e:	9100      	str	r1, [sp, #0]
 800fea0:	4603      	mov	r3, r0
 800fea2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fea4:	4984      	ldr	r1, [pc, #528]	; (80100b8 <evtMspReceive+0x678>)
 800fea6:	2002      	movs	r0, #2
 800fea8:	f003 fea6 	bl	8013bf8 <pifLog_Printf>
        for (i = 0; i < PIDITEMS; i++) {
 800feac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feae:	3301      	adds	r3, #1
 800feb0:	637b      	str	r3, [r7, #52]	; 0x34
 800feb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feb4:	2b09      	cmp	r3, #9
 800feb6:	d9bf      	bls.n	800fe38 <evtMspReceive+0x3f8>
#endif
        }
        break;
 800feb8:	f001 ba5f 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_SET_BOX:
        for (i = 0; i < numberBoxItems; i++)
 800febc:	2300      	movs	r3, #0
 800febe:	637b      	str	r3, [r7, #52]	; 0x34
 800fec0:	e010      	b.n	800fee4 <evtMspReceive+0x4a4>
            cfg.activate[availableBoxes[i]] = pifMsp_ReadData16(p_packet);
 800fec2:	68b8      	ldr	r0, [r7, #8]
 800fec4:	f008 f994 	bl	80181f0 <pifMsp_ReadData16>
 800fec8:	4603      	mov	r3, r0
 800feca:	4619      	mov	r1, r3
 800fecc:	4a7b      	ldr	r2, [pc, #492]	; (80100bc <evtMspReceive+0x67c>)
 800fece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fed0:	4413      	add	r3, r2
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	4a77      	ldr	r2, [pc, #476]	; (80100b4 <evtMspReceive+0x674>)
 800fed6:	3312      	adds	r3, #18
 800fed8:	009b      	lsls	r3, r3, #2
 800feda:	4413      	add	r3, r2
 800fedc:	6059      	str	r1, [r3, #4]
        for (i = 0; i < numberBoxItems; i++)
 800fede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fee0:	3301      	adds	r3, #1
 800fee2:	637b      	str	r3, [r7, #52]	; 0x34
 800fee4:	4b76      	ldr	r3, [pc, #472]	; (80100c0 <evtMspReceive+0x680>)
 800fee6:	781b      	ldrb	r3, [r3, #0]
 800fee8:	461a      	mov	r2, r3
 800feea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feec:	4293      	cmp	r3, r2
 800feee:	d3e8      	bcc.n	800fec2 <evtMspReceive+0x482>
        break;
 800fef0:	f001 ba43 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_SET_RC_TUNING:
        cfg.rcRate8 = pifMsp_ReadData8(p_packet);
 800fef4:	68b8      	ldr	r0, [r7, #8]
 800fef6:	f008 f967 	bl	80181c8 <pifMsp_ReadData8>
 800fefa:	4603      	mov	r3, r0
 800fefc:	461a      	mov	r2, r3
 800fefe:	4b6d      	ldr	r3, [pc, #436]	; (80100b4 <evtMspReceive+0x674>)
 800ff00:	77da      	strb	r2, [r3, #31]
        cfg.rcExpo8 = pifMsp_ReadData8(p_packet);
 800ff02:	68b8      	ldr	r0, [r7, #8]
 800ff04:	f008 f960 	bl	80181c8 <pifMsp_ReadData8>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	461a      	mov	r2, r3
 800ff0c:	4b69      	ldr	r3, [pc, #420]	; (80100b4 <evtMspReceive+0x674>)
 800ff0e:	f883 2020 	strb.w	r2, [r3, #32]
        pifMsp_ReadData8(p_packet); // Legacy pitch-roll rate, read but not set.
 800ff12:	68b8      	ldr	r0, [r7, #8]
 800ff14:	f008 f958 	bl	80181c8 <pifMsp_ReadData8>
        cfg.yawRate = pifMsp_ReadData8(p_packet);
 800ff18:	68b8      	ldr	r0, [r7, #8]
 800ff1a:	f008 f955 	bl	80181c8 <pifMsp_ReadData8>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	461a      	mov	r2, r3
 800ff22:	4b64      	ldr	r3, [pc, #400]	; (80100b4 <evtMspReceive+0x674>)
 800ff24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        cfg.dynThrPID = pifMsp_ReadData8(p_packet);
 800ff28:	68b8      	ldr	r0, [r7, #8]
 800ff2a:	f008 f94d 	bl	80181c8 <pifMsp_ReadData8>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	461a      	mov	r2, r3
 800ff32:	4b60      	ldr	r3, [pc, #384]	; (80100b4 <evtMspReceive+0x674>)
 800ff34:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        cfg.thrMid8 = pifMsp_ReadData8(p_packet);
 800ff38:	68b8      	ldr	r0, [r7, #8]
 800ff3a:	f008 f945 	bl	80181c8 <pifMsp_ReadData8>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	461a      	mov	r2, r3
 800ff42:	4b5c      	ldr	r3, [pc, #368]	; (80100b4 <evtMspReceive+0x674>)
 800ff44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        cfg.thrExpo8 = pifMsp_ReadData8(p_packet);
 800ff48:	68b8      	ldr	r0, [r7, #8]
 800ff4a:	f008 f93d 	bl	80181c8 <pifMsp_ReadData8>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	461a      	mov	r2, r3
 800ff52:	4b58      	ldr	r3, [pc, #352]	; (80100b4 <evtMspReceive+0x674>)
 800ff54:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        break;
 800ff58:	f001 ba0f 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_SET_MISC:
        tmp = pifMsp_ReadData16(p_packet);
 800ff5c:	68b8      	ldr	r0, [r7, #8]
 800ff5e:	f008 f947 	bl	80181f0 <pifMsp_ReadData16>
 800ff62:	4603      	mov	r3, r0
 800ff64:	617b      	str	r3, [r7, #20]
        // sanity check
        if (tmp < 1600 && tmp > 1400)
 800ff66:	697b      	ldr	r3, [r7, #20]
 800ff68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ff6c:	d208      	bcs.n	800ff80 <evtMspReceive+0x540>
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800ff74:	d904      	bls.n	800ff80 <evtMspReceive+0x540>
            mcfg.midrc = tmp;
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	b29a      	uxth	r2, r3
 800ff7a:	4b52      	ldr	r3, [pc, #328]	; (80100c4 <evtMspReceive+0x684>)
 800ff7c:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
        mcfg.minthrottle = pifMsp_ReadData16(p_packet);
 800ff80:	68b8      	ldr	r0, [r7, #8]
 800ff82:	f008 f935 	bl	80181f0 <pifMsp_ReadData16>
 800ff86:	4603      	mov	r3, r0
 800ff88:	461a      	mov	r2, r3
 800ff8a:	4b4e      	ldr	r3, [pc, #312]	; (80100c4 <evtMspReceive+0x684>)
 800ff8c:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
        mcfg.maxthrottle = pifMsp_ReadData16(p_packet);
 800ff90:	68b8      	ldr	r0, [r7, #8]
 800ff92:	f008 f92d 	bl	80181f0 <pifMsp_ReadData16>
 800ff96:	4603      	mov	r3, r0
 800ff98:	461a      	mov	r2, r3
 800ff9a:	4b4a      	ldr	r3, [pc, #296]	; (80100c4 <evtMspReceive+0x684>)
 800ff9c:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
        mcfg.mincommand = pifMsp_ReadData16(p_packet);
 800ffa0:	68b8      	ldr	r0, [r7, #8]
 800ffa2:	f008 f925 	bl	80181f0 <pifMsp_ReadData16>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	461a      	mov	r2, r3
 800ffaa:	4b46      	ldr	r3, [pc, #280]	; (80100c4 <evtMspReceive+0x684>)
 800ffac:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
        cfg.failsafe_throttle = pifMsp_ReadData16(p_packet);
 800ffb0:	68b8      	ldr	r0, [r7, #8]
 800ffb2:	f008 f91d 	bl	80181f0 <pifMsp_ReadData16>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	461a      	mov	r2, r3
 800ffba:	4b3e      	ldr	r3, [pc, #248]	; (80100b4 <evtMspReceive+0x674>)
 800ffbc:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
        mcfg.gps_type = pifMsp_ReadData8(p_packet);
 800ffc0:	68b8      	ldr	r0, [r7, #8]
 800ffc2:	f008 f901 	bl	80181c8 <pifMsp_ReadData8>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	461a      	mov	r2, r3
 800ffca:	4b3e      	ldr	r3, [pc, #248]	; (80100c4 <evtMspReceive+0x684>)
 800ffcc:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
        mcfg.gps_baudrate = pifMsp_ReadData8(p_packet);
 800ffd0:	68b8      	ldr	r0, [r7, #8]
 800ffd2:	f008 f8f9 	bl	80181c8 <pifMsp_ReadData8>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	b25a      	sxtb	r2, r3
 800ffda:	4b3a      	ldr	r3, [pc, #232]	; (80100c4 <evtMspReceive+0x684>)
 800ffdc:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
        mcfg.gps_ubx_sbas = pifMsp_ReadData8(p_packet);
 800ffe0:	68b8      	ldr	r0, [r7, #8]
 800ffe2:	f008 f8f1 	bl	80181c8 <pifMsp_ReadData8>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	b25a      	sxtb	r2, r3
 800ffea:	4b36      	ldr	r3, [pc, #216]	; (80100c4 <evtMspReceive+0x684>)
 800ffec:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
        mcfg.multiwiicurrentoutput = pifMsp_ReadData8(p_packet);
 800fff0:	68b8      	ldr	r0, [r7, #8]
 800fff2:	f008 f8e9 	bl	80181c8 <pifMsp_ReadData8>
 800fff6:	4603      	mov	r3, r0
 800fff8:	461a      	mov	r2, r3
 800fffa:	4b32      	ldr	r3, [pc, #200]	; (80100c4 <evtMspReceive+0x684>)
 800fffc:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
        mcfg.rssi_aux_channel = pifMsp_ReadData8(p_packet);
 8010000:	68b8      	ldr	r0, [r7, #8]
 8010002:	f008 f8e1 	bl	80181c8 <pifMsp_ReadData8>
 8010006:	4603      	mov	r3, r0
 8010008:	461a      	mov	r2, r3
 801000a:	4b2e      	ldr	r3, [pc, #184]	; (80100c4 <evtMspReceive+0x684>)
 801000c:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
        pifMsp_ReadData8(p_packet);
 8010010:	68b8      	ldr	r0, [r7, #8]
 8010012:	f008 f8d9 	bl	80181c8 <pifMsp_ReadData8>
        cfg.mag_declination = pifMsp_ReadData16(p_packet) * 10;
 8010016:	68b8      	ldr	r0, [r7, #8]
 8010018:	f008 f8ea 	bl	80181f0 <pifMsp_ReadData16>
 801001c:	4603      	mov	r3, r0
 801001e:	461a      	mov	r2, r3
 8010020:	0092      	lsls	r2, r2, #2
 8010022:	4413      	add	r3, r2
 8010024:	005b      	lsls	r3, r3, #1
 8010026:	b29b      	uxth	r3, r3
 8010028:	b21a      	sxth	r2, r3
 801002a:	4b22      	ldr	r3, [pc, #136]	; (80100b4 <evtMspReceive+0x674>)
 801002c:	855a      	strh	r2, [r3, #42]	; 0x2a
        mcfg.vbatscale = pifMsp_ReadData8(p_packet);           // actual vbatscale as intended
 801002e:	68b8      	ldr	r0, [r7, #8]
 8010030:	f008 f8ca 	bl	80181c8 <pifMsp_ReadData8>
 8010034:	4603      	mov	r3, r0
 8010036:	461a      	mov	r2, r3
 8010038:	4b22      	ldr	r3, [pc, #136]	; (80100c4 <evtMspReceive+0x684>)
 801003a:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
        mcfg.vbatmincellvoltage = pifMsp_ReadData8(p_packet);  // vbatlevel_warn1 in MWC2.3 GUI
 801003e:	68b8      	ldr	r0, [r7, #8]
 8010040:	f008 f8c2 	bl	80181c8 <pifMsp_ReadData8>
 8010044:	4603      	mov	r3, r0
 8010046:	461a      	mov	r2, r3
 8010048:	4b1e      	ldr	r3, [pc, #120]	; (80100c4 <evtMspReceive+0x684>)
 801004a:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
        mcfg.vbatmaxcellvoltage = pifMsp_ReadData8(p_packet);  // vbatlevel_warn2 in MWC2.3 GUI
 801004e:	68b8      	ldr	r0, [r7, #8]
 8010050:	f008 f8ba 	bl	80181c8 <pifMsp_ReadData8>
 8010054:	4603      	mov	r3, r0
 8010056:	461a      	mov	r2, r3
 8010058:	4b1a      	ldr	r3, [pc, #104]	; (80100c4 <evtMspReceive+0x684>)
 801005a:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
        mcfg.vbatwarningcellvoltage = pifMsp_ReadData8(p_packet); // vbatlevel when buzzer starts to alert
 801005e:	68b8      	ldr	r0, [r7, #8]
 8010060:	f008 f8b2 	bl	80181c8 <pifMsp_ReadData8>
 8010064:	4603      	mov	r3, r0
 8010066:	461a      	mov	r2, r3
 8010068:	4b16      	ldr	r3, [pc, #88]	; (80100c4 <evtMspReceive+0x684>)
 801006a:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
        break;
 801006e:	f001 b984 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_SET_MOTOR:
        for (i = 0; i < 8; i++)
 8010072:	2300      	movs	r3, #0
 8010074:	637b      	str	r3, [r7, #52]	; 0x34
 8010076:	e00b      	b.n	8010090 <evtMspReceive+0x650>
            motor_disarmed[i] = pifMsp_ReadData16(p_packet);
 8010078:	68b8      	ldr	r0, [r7, #8]
 801007a:	f008 f8b9 	bl	80181f0 <pifMsp_ReadData16>
 801007e:	4603      	mov	r3, r0
 8010080:	b219      	sxth	r1, r3
 8010082:	4a11      	ldr	r2, [pc, #68]	; (80100c8 <evtMspReceive+0x688>)
 8010084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010086:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < 8; i++)
 801008a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801008c:	3301      	adds	r3, #1
 801008e:	637b      	str	r3, [r7, #52]	; 0x34
 8010090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010092:	2b07      	cmp	r3, #7
 8010094:	d9f0      	bls.n	8010078 <evtMspReceive+0x638>
        break;
 8010096:	f001 b970 	b.w	801137a <evtMspReceive+0x193a>
 801009a:	bf00      	nop
 801009c:	2000174c 	.word	0x2000174c
 80100a0:	20001830 	.word	0x20001830
 80100a4:	20001810 	.word	0x20001810
 80100a8:	20001836 	.word	0x20001836
 80100ac:	20001838 	.word	0x20001838
 80100b0:	2000183a 	.word	0x2000183a
 80100b4:	20000e08 	.word	0x20000e08
 80100b8:	08028664 	.word	0x08028664
 80100bc:	20001bf8 	.word	0x20001bf8
 80100c0:	20001c11 	.word	0x20001c11
 80100c4:	2000089c 	.word	0x2000089c
 80100c8:	200015cc 	.word	0x200015cc

    case MSP_SELECT_SETTING:
        if (!f.ARMED) {
 80100cc:	4baa      	ldr	r3, [pc, #680]	; (8010378 <evtMspReceive+0x938>)
 80100ce:	785b      	ldrb	r3, [r3, #1]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	f041 8149 	bne.w	8011368 <evtMspReceive+0x1928>
            mcfg.current_profile = pifMsp_ReadData8(p_packet);
 80100d6:	68b8      	ldr	r0, [r7, #8]
 80100d8:	f008 f876 	bl	80181c8 <pifMsp_ReadData8>
 80100dc:	4603      	mov	r3, r0
 80100de:	461a      	mov	r2, r3
 80100e0:	4ba6      	ldr	r3, [pc, #664]	; (801037c <evtMspReceive+0x93c>)
 80100e2:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            if (mcfg.current_profile > 2)
 80100e6:	4ba5      	ldr	r3, [pc, #660]	; (801037c <evtMspReceive+0x93c>)
 80100e8:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 80100ec:	2b02      	cmp	r3, #2
 80100ee:	d903      	bls.n	80100f8 <evtMspReceive+0x6b8>
                mcfg.current_profile = 0;
 80100f0:	4ba2      	ldr	r3, [pc, #648]	; (801037c <evtMspReceive+0x93c>)
 80100f2:	2200      	movs	r2, #0
 80100f4:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            // this writes new profile index and re-reads it
            writeEEPROM(0, false);
 80100f8:	2100      	movs	r1, #0
 80100fa:	2000      	movs	r0, #0
 80100fc:	f7f6 fbee 	bl	80068dc <writeEEPROM>
        }
        break;
 8010100:	f001 b932 	b.w	8011368 <evtMspReceive+0x1928>

    case MSP_SET_HEAD:
        magHold = pifMsp_ReadData16(p_packet);
 8010104:	68b8      	ldr	r0, [r7, #8]
 8010106:	f008 f873 	bl	80181f0 <pifMsp_ReadData16>
 801010a:	4603      	mov	r3, r0
 801010c:	b21a      	sxth	r2, r3
 801010e:	4b9c      	ldr	r3, [pc, #624]	; (8010380 <evtMspReceive+0x940>)
 8010110:	801a      	strh	r2, [r3, #0]
        break;
 8010112:	f001 b932 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_IDENT:
        pifMsp_AddAnswer8(p_owner, VERSION);                    // multiwii version
 8010116:	21e7      	movs	r1, #231	; 0xe7
 8010118:	68f8      	ldr	r0, [r7, #12]
 801011a:	f008 f8ff 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.mixerConfiguration);    // type of multicopter
 801011e:	4b97      	ldr	r3, [pc, #604]	; (801037c <evtMspReceive+0x93c>)
 8010120:	795b      	ldrb	r3, [r3, #5]
 8010122:	4619      	mov	r1, r3
 8010124:	68f8      	ldr	r0, [r7, #12]
 8010126:	f008 f8f9 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, MSP_VERSION);                // MultiWii Serial Protocol Version
 801012a:	2104      	movs	r1, #4
 801012c:	68f8      	ldr	r0, [r7, #12]
 801012e:	f008 f8f5 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, CAP_PLATFORM_32BIT | CAP_BASEFLIGHT_CONFIG | CAP_DYNBALANCE | CAP_FW_FLAPS); // "capability"
 8010132:	4994      	ldr	r1, [pc, #592]	; (8010384 <evtMspReceive+0x944>)
 8010134:	68f8      	ldr	r0, [r7, #12]
 8010136:	f008 f983 	bl	8018440 <pifMsp_AddAnswer32>
        break;
 801013a:	f001 b91e 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_STATUS:
        pifMsp_AddAnswer16(p_owner, cycleTime);
 801013e:	4b92      	ldr	r3, [pc, #584]	; (8010388 <evtMspReceive+0x948>)
 8010140:	881b      	ldrh	r3, [r3, #0]
 8010142:	4619      	mov	r1, r3
 8010144:	68f8      	ldr	r0, [r7, #12]
 8010146:	f008 f92f 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, g_i2c_port.error_count);
 801014a:	4b90      	ldr	r3, [pc, #576]	; (801038c <evtMspReceive+0x94c>)
 801014c:	881b      	ldrh	r3, [r3, #0]
 801014e:	4619      	mov	r1, r3
 8010150:	68f8      	ldr	r0, [r7, #12]
 8010152:	f008 f929 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, sensors(SENSOR_ACC) | sensors(SENSOR_BARO) << 1 | sensors(SENSOR_MAG) << 2 | sensors(SENSOR_GPS) << 3 | sensors(SENSOR_SONAR) << 4);
 8010156:	2002      	movs	r0, #2
 8010158:	f7f6 ff5a 	bl	8007010 <sensors>
 801015c:	4603      	mov	r3, r0
 801015e:	b21c      	sxth	r4, r3
 8010160:	2004      	movs	r0, #4
 8010162:	f7f6 ff55 	bl	8007010 <sensors>
 8010166:	4603      	mov	r3, r0
 8010168:	005b      	lsls	r3, r3, #1
 801016a:	b21b      	sxth	r3, r3
 801016c:	4323      	orrs	r3, r4
 801016e:	b21c      	sxth	r4, r3
 8010170:	2008      	movs	r0, #8
 8010172:	f7f6 ff4d 	bl	8007010 <sensors>
 8010176:	4603      	mov	r3, r0
 8010178:	009b      	lsls	r3, r3, #2
 801017a:	b21b      	sxth	r3, r3
 801017c:	4323      	orrs	r3, r4
 801017e:	b21c      	sxth	r4, r3
 8010180:	2020      	movs	r0, #32
 8010182:	f7f6 ff45 	bl	8007010 <sensors>
 8010186:	4603      	mov	r3, r0
 8010188:	00db      	lsls	r3, r3, #3
 801018a:	b21b      	sxth	r3, r3
 801018c:	4323      	orrs	r3, r4
 801018e:	b21c      	sxth	r4, r3
 8010190:	2010      	movs	r0, #16
 8010192:	f7f6 ff3d 	bl	8007010 <sensors>
 8010196:	4603      	mov	r3, r0
 8010198:	011b      	lsls	r3, r3, #4
 801019a:	b21b      	sxth	r3, r3
 801019c:	4323      	orrs	r3, r4
 801019e:	b21b      	sxth	r3, r3
 80101a0:	b29b      	uxth	r3, r3
 80101a2:	4619      	mov	r1, r3
 80101a4:	68f8      	ldr	r0, [r7, #12]
 80101a6:	f008 f8ff 	bl	80183a8 <pifMsp_AddAnswer16>
        // OK, so you waste all the fucking time to have BOXNAMES and BOXINDEXES etc, and then you go ahead and serialize enabled shit simply by stuffing all
        // the bits in order, instead of setting the enabled bits based on BOXINDEX. WHERE IS THE FUCKING LOGIC IN THIS, FUCKWADS.
        // Serialize the boxes in the order we delivered them, until multiwii retards fix their shit
        junk = 0;
 80101aa:	2300      	movs	r3, #0
 80101ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 80101ae:	4b72      	ldr	r3, [pc, #456]	; (8010378 <evtMspReceive+0x938>)
 80101b0:	78db      	ldrb	r3, [r3, #3]
 80101b2:	005a      	lsls	r2, r3, #1
 80101b4:	4b70      	ldr	r3, [pc, #448]	; (8010378 <evtMspReceive+0x938>)
 80101b6:	791b      	ldrb	r3, [r3, #4]
 80101b8:	009b      	lsls	r3, r3, #2
 80101ba:	431a      	orrs	r2, r3
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 80101bc:	4b6e      	ldr	r3, [pc, #440]	; (8010378 <evtMspReceive+0x938>)
 80101be:	799b      	ldrb	r3, [r3, #6]
 80101c0:	00db      	lsls	r3, r3, #3
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 80101c2:	431a      	orrs	r2, r3
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 80101c4:	4b6c      	ldr	r3, [pc, #432]	; (8010378 <evtMspReceive+0x938>)
 80101c6:	795b      	ldrb	r3, [r3, #5]
 80101c8:	015b      	lsls	r3, r3, #5
 80101ca:	431a      	orrs	r2, r3
 80101cc:	4b6a      	ldr	r3, [pc, #424]	; (8010378 <evtMspReceive+0x938>)
 80101ce:	7a5b      	ldrb	r3, [r3, #9]
 80101d0:	019b      	lsls	r3, r3, #6
 80101d2:	431a      	orrs	r2, r3
 80101d4:	4b6e      	ldr	r3, [pc, #440]	; (8010390 <evtMspReceive+0x950>)
 80101d6:	79db      	ldrb	r3, [r3, #7]
 80101d8:	01db      	lsls	r3, r3, #7
 80101da:	431a      	orrs	r2, r3
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 80101dc:	4b6c      	ldr	r3, [pc, #432]	; (8010390 <evtMspReceive+0x950>)
 80101de:	7a1b      	ldrb	r3, [r3, #8]
 80101e0:	021b      	lsls	r3, r3, #8
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 80101e2:	431a      	orrs	r2, r3
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 80101e4:	4b6a      	ldr	r3, [pc, #424]	; (8010390 <evtMspReceive+0x950>)
 80101e6:	7a5b      	ldrb	r3, [r3, #9]
 80101e8:	025b      	lsls	r3, r3, #9
 80101ea:	431a      	orrs	r2, r3
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 80101ec:	4b62      	ldr	r3, [pc, #392]	; (8010378 <evtMspReceive+0x938>)
 80101ee:	79db      	ldrb	r3, [r3, #7]
 80101f0:	029b      	lsls	r3, r3, #10
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 80101f2:	431a      	orrs	r2, r3
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 80101f4:	4b60      	ldr	r3, [pc, #384]	; (8010378 <evtMspReceive+0x938>)
 80101f6:	7a1b      	ldrb	r3, [r3, #8]
 80101f8:	02db      	lsls	r3, r3, #11
 80101fa:	431a      	orrs	r2, r3
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 80101fc:	4b5e      	ldr	r3, [pc, #376]	; (8010378 <evtMspReceive+0x938>)
 80101fe:	7d1b      	ldrb	r3, [r3, #20]
 8010200:	061b      	lsls	r3, r3, #24
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 8010202:	431a      	orrs	r2, r3
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 8010204:	4b5c      	ldr	r3, [pc, #368]	; (8010378 <evtMspReceive+0x938>)
 8010206:	7a9b      	ldrb	r3, [r3, #10]
 8010208:	031b      	lsls	r3, r3, #12
 801020a:	431a      	orrs	r2, r3
                rcOptions[BOXBEEPERON] << BOXBEEPERON |
 801020c:	4b60      	ldr	r3, [pc, #384]	; (8010390 <evtMspReceive+0x950>)
 801020e:	7b5b      	ldrb	r3, [r3, #13]
 8010210:	035b      	lsls	r3, r3, #13
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 8010212:	431a      	orrs	r2, r3
                rcOptions[BOXLEDMAX] << BOXLEDMAX |
 8010214:	4b5e      	ldr	r3, [pc, #376]	; (8010390 <evtMspReceive+0x950>)
 8010216:	7b9b      	ldrb	r3, [r3, #14]
 8010218:	039b      	lsls	r3, r3, #14
                rcOptions[BOXBEEPERON] << BOXBEEPERON |
 801021a:	431a      	orrs	r2, r3
                rcOptions[BOXLLIGHTS] << BOXLLIGHTS |
 801021c:	4b5c      	ldr	r3, [pc, #368]	; (8010390 <evtMspReceive+0x950>)
 801021e:	7c1b      	ldrb	r3, [r3, #16]
 8010220:	041b      	lsls	r3, r3, #16
                rcOptions[BOXLEDMAX] << BOXLEDMAX |
 8010222:	431a      	orrs	r2, r3
                rcOptions[BOXVARIO] << BOXVARIO |
 8010224:	4b5a      	ldr	r3, [pc, #360]	; (8010390 <evtMspReceive+0x950>)
 8010226:	791b      	ldrb	r3, [r3, #4]
 8010228:	011b      	lsls	r3, r3, #4
                rcOptions[BOXLLIGHTS] << BOXLLIGHTS |
 801022a:	431a      	orrs	r2, r3
                rcOptions[BOXCALIB] << BOXCALIB |
 801022c:	4b58      	ldr	r3, [pc, #352]	; (8010390 <evtMspReceive+0x950>)
 801022e:	7c5b      	ldrb	r3, [r3, #17]
 8010230:	045b      	lsls	r3, r3, #17
                rcOptions[BOXVARIO] << BOXVARIO |
 8010232:	431a      	orrs	r2, r3
                rcOptions[BOXGOV] << BOXGOV |
 8010234:	4b56      	ldr	r3, [pc, #344]	; (8010390 <evtMspReceive+0x950>)
 8010236:	7c9b      	ldrb	r3, [r3, #18]
 8010238:	049b      	lsls	r3, r3, #18
                rcOptions[BOXCALIB] << BOXCALIB |
 801023a:	431a      	orrs	r2, r3
                rcOptions[BOXOSD] << BOXOSD |
 801023c:	4b54      	ldr	r3, [pc, #336]	; (8010390 <evtMspReceive+0x950>)
 801023e:	7cdb      	ldrb	r3, [r3, #19]
 8010240:	04db      	lsls	r3, r3, #19
                rcOptions[BOXGOV] << BOXGOV |
 8010242:	431a      	orrs	r2, r3
                rcOptions[BOXTELEMETRY] << BOXTELEMETRY |
 8010244:	4b52      	ldr	r3, [pc, #328]	; (8010390 <evtMspReceive+0x950>)
 8010246:	7d1b      	ldrb	r3, [r3, #20]
 8010248:	051b      	lsls	r3, r3, #20
                rcOptions[BOXOSD] << BOXOSD |
 801024a:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO1] << BOXSERVO1 |
 801024c:	4b50      	ldr	r3, [pc, #320]	; (8010390 <evtMspReceive+0x950>)
 801024e:	7d5b      	ldrb	r3, [r3, #21]
 8010250:	055b      	lsls	r3, r3, #21
                rcOptions[BOXTELEMETRY] << BOXTELEMETRY |
 8010252:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO2] << BOXSERVO2 |
 8010254:	4b4e      	ldr	r3, [pc, #312]	; (8010390 <evtMspReceive+0x950>)
 8010256:	7d9b      	ldrb	r3, [r3, #22]
 8010258:	059b      	lsls	r3, r3, #22
                rcOptions[BOXSERVO1] << BOXSERVO1 |
 801025a:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO3] << BOXSERVO3 |
 801025c:	4b4c      	ldr	r3, [pc, #304]	; (8010390 <evtMspReceive+0x950>)
 801025e:	7ddb      	ldrb	r3, [r3, #23]
 8010260:	05db      	lsls	r3, r3, #23
                rcOptions[BOXSERVO2] << BOXSERVO2 |
 8010262:	4313      	orrs	r3, r2
                f.ARMED << BOXARM;
 8010264:	4a44      	ldr	r2, [pc, #272]	; (8010378 <evtMspReceive+0x938>)
 8010266:	7852      	ldrb	r2, [r2, #1]
                rcOptions[BOXSERVO3] << BOXSERVO3 |
 8010268:	4313      	orrs	r3, r2
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 801026a:	617b      	str	r3, [r7, #20]
        for (i = 0; i < numberBoxItems; i++) {
 801026c:	2300      	movs	r3, #0
 801026e:	637b      	str	r3, [r7, #52]	; 0x34
 8010270:	e018      	b.n	80102a4 <evtMspReceive+0x864>
            int flag = (tmp & (1 << availableBoxes[i]));
 8010272:	4a48      	ldr	r2, [pc, #288]	; (8010394 <evtMspReceive+0x954>)
 8010274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010276:	4413      	add	r3, r2
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	461a      	mov	r2, r3
 801027c:	2301      	movs	r3, #1
 801027e:	4093      	lsls	r3, r2
 8010280:	461a      	mov	r2, r3
 8010282:	697b      	ldr	r3, [r7, #20]
 8010284:	4013      	ands	r3, r2
 8010286:	613b      	str	r3, [r7, #16]
            if (flag)
 8010288:	693b      	ldr	r3, [r7, #16]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d007      	beq.n	801029e <evtMspReceive+0x85e>
                junk |= 1 << i;
 801028e:	2201      	movs	r2, #1
 8010290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010292:	fa02 f303 	lsl.w	r3, r2, r3
 8010296:	461a      	mov	r2, r3
 8010298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801029a:	4313      	orrs	r3, r2
 801029c:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = 0; i < numberBoxItems; i++) {
 801029e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102a0:	3301      	adds	r3, #1
 80102a2:	637b      	str	r3, [r7, #52]	; 0x34
 80102a4:	4b3c      	ldr	r3, [pc, #240]	; (8010398 <evtMspReceive+0x958>)
 80102a6:	781b      	ldrb	r3, [r3, #0]
 80102a8:	461a      	mov	r2, r3
 80102aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ac:	4293      	cmp	r3, r2
 80102ae:	d3e0      	bcc.n	8010272 <evtMspReceive+0x832>
        }
        pifMsp_AddAnswer32(p_owner, junk);
 80102b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80102b2:	68f8      	ldr	r0, [r7, #12]
 80102b4:	f008 f8c4 	bl	8018440 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer8(p_owner, mcfg.current_profile);
 80102b8:	4b30      	ldr	r3, [pc, #192]	; (801037c <evtMspReceive+0x93c>)
 80102ba:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 80102be:	4619      	mov	r1, r3
 80102c0:	68f8      	ldr	r0, [r7, #12]
 80102c2:	f008 f82b 	bl	801831c <pifMsp_AddAnswer8>
        break;
 80102c6:	f001 b858 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_RAW_IMU:
        // Retarded hack until multiwiidorks start using real units for sensor data
        if (sensor_set.acc.acc_1G > 1024) {
 80102ca:	4b34      	ldr	r3, [pc, #208]	; (801039c <evtMspReceive+0x95c>)
 80102cc:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80102d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80102d4:	d917      	bls.n	8010306 <evtMspReceive+0x8c6>
            for (i = 0; i < 3; i++)
 80102d6:	2300      	movs	r3, #0
 80102d8:	637b      	str	r3, [r7, #52]	; 0x34
 80102da:	e010      	b.n	80102fe <evtMspReceive+0x8be>
                pifMsp_AddAnswer16(p_owner, accSmooth[i] / 8);
 80102dc:	4a30      	ldr	r2, [pc, #192]	; (80103a0 <evtMspReceive+0x960>)
 80102de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102e0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	da00      	bge.n	80102ea <evtMspReceive+0x8aa>
 80102e8:	3307      	adds	r3, #7
 80102ea:	10db      	asrs	r3, r3, #3
 80102ec:	b21b      	sxth	r3, r3
 80102ee:	b29b      	uxth	r3, r3
 80102f0:	4619      	mov	r1, r3
 80102f2:	68f8      	ldr	r0, [r7, #12]
 80102f4:	f008 f858 	bl	80183a8 <pifMsp_AddAnswer16>
            for (i = 0; i < 3; i++)
 80102f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102fa:	3301      	adds	r3, #1
 80102fc:	637b      	str	r3, [r7, #52]	; 0x34
 80102fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010300:	2b02      	cmp	r3, #2
 8010302:	d9eb      	bls.n	80102dc <evtMspReceive+0x89c>
 8010304:	e011      	b.n	801032a <evtMspReceive+0x8ea>
        } else {
            for (i = 0; i < 3; i++)
 8010306:	2300      	movs	r3, #0
 8010308:	637b      	str	r3, [r7, #52]	; 0x34
 801030a:	e00b      	b.n	8010324 <evtMspReceive+0x8e4>
                pifMsp_AddAnswer16(p_owner, accSmooth[i]);
 801030c:	4a24      	ldr	r2, [pc, #144]	; (80103a0 <evtMspReceive+0x960>)
 801030e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010310:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010314:	b29b      	uxth	r3, r3
 8010316:	4619      	mov	r1, r3
 8010318:	68f8      	ldr	r0, [r7, #12]
 801031a:	f008 f845 	bl	80183a8 <pifMsp_AddAnswer16>
            for (i = 0; i < 3; i++)
 801031e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010320:	3301      	adds	r3, #1
 8010322:	637b      	str	r3, [r7, #52]	; 0x34
 8010324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010326:	2b02      	cmp	r3, #2
 8010328:	d9f0      	bls.n	801030c <evtMspReceive+0x8cc>
        }
        for (i = 0; i < 3; i++)
 801032a:	2300      	movs	r3, #0
 801032c:	637b      	str	r3, [r7, #52]	; 0x34
 801032e:	e00b      	b.n	8010348 <evtMspReceive+0x908>
            pifMsp_AddAnswer16(p_owner, gyroData[i]);
 8010330:	4a1c      	ldr	r2, [pc, #112]	; (80103a4 <evtMspReceive+0x964>)
 8010332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010334:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010338:	b29b      	uxth	r3, r3
 801033a:	4619      	mov	r1, r3
 801033c:	68f8      	ldr	r0, [r7, #12]
 801033e:	f008 f833 	bl	80183a8 <pifMsp_AddAnswer16>
        for (i = 0; i < 3; i++)
 8010342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010344:	3301      	adds	r3, #1
 8010346:	637b      	str	r3, [r7, #52]	; 0x34
 8010348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801034a:	2b02      	cmp	r3, #2
 801034c:	d9f0      	bls.n	8010330 <evtMspReceive+0x8f0>
        for (i = 0; i < 3; i++)
 801034e:	2300      	movs	r3, #0
 8010350:	637b      	str	r3, [r7, #52]	; 0x34
 8010352:	e00b      	b.n	801036c <evtMspReceive+0x92c>
            pifMsp_AddAnswer16(p_owner, magADC[i]);
 8010354:	4a14      	ldr	r2, [pc, #80]	; (80103a8 <evtMspReceive+0x968>)
 8010356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010358:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801035c:	b29b      	uxth	r3, r3
 801035e:	4619      	mov	r1, r3
 8010360:	68f8      	ldr	r0, [r7, #12]
 8010362:	f008 f821 	bl	80183a8 <pifMsp_AddAnswer16>
        for (i = 0; i < 3; i++)
 8010366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010368:	3301      	adds	r3, #1
 801036a:	637b      	str	r3, [r7, #52]	; 0x34
 801036c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801036e:	2b02      	cmp	r3, #2
 8010370:	d9f0      	bls.n	8010354 <evtMspReceive+0x914>
        break;
 8010372:	f001 b802 	b.w	801137a <evtMspReceive+0x193a>
 8010376:	bf00      	nop
 8010378:	2000174c 	.word	0x2000174c
 801037c:	2000089c 	.word	0x2000089c
 8010380:	20001a80 	.word	0x20001a80
 8010384:	c000000c 	.word	0xc000000c
 8010388:	2000176c 	.word	0x2000176c
 801038c:	20001550 	.word	0x20001550
 8010390:	200017ec 	.word	0x200017ec
 8010394:	20001bf8 	.word	0x20001bf8
 8010398:	20001c11 	.word	0x20001c11
 801039c:	20000060 	.word	0x20000060
 80103a0:	2000147c 	.word	0x2000147c
 80103a4:	200014e4 	.word	0x200014e4
 80103a8:	20001484 	.word	0x20001484

    case MSP_SERVO:
        pifMsp_AddAnswer(p_owner, (uint8_t *)&servo, 16);
 80103ac:	2210      	movs	r2, #16
 80103ae:	498c      	ldr	r1, [pc, #560]	; (80105e0 <evtMspReceive+0xba0>)
 80103b0:	68f8      	ldr	r0, [r7, #12]
 80103b2:	f008 f891 	bl	80184d8 <pifMsp_AddAnswer>
        break;
 80103b6:	f000 bfe0 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_SERVO_CONF:
        for (i = 0; i < MAX_SERVOS; i++) {
 80103ba:	2300      	movs	r3, #0
 80103bc:	637b      	str	r3, [r7, #52]	; 0x34
 80103be:	e04b      	b.n	8010458 <evtMspReceive+0xa18>
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].min);
 80103c0:	4988      	ldr	r1, [pc, #544]	; (80105e4 <evtMspReceive+0xba4>)
 80103c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103c4:	4613      	mov	r3, r2
 80103c6:	009b      	lsls	r3, r3, #2
 80103c8:	4413      	add	r3, r2
 80103ca:	005b      	lsls	r3, r3, #1
 80103cc:	440b      	add	r3, r1
 80103ce:	33b8      	adds	r3, #184	; 0xb8
 80103d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80103d4:	b29b      	uxth	r3, r3
 80103d6:	4619      	mov	r1, r3
 80103d8:	68f8      	ldr	r0, [r7, #12]
 80103da:	f007 ffe5 	bl	80183a8 <pifMsp_AddAnswer16>
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].max);
 80103de:	4981      	ldr	r1, [pc, #516]	; (80105e4 <evtMspReceive+0xba4>)
 80103e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103e2:	4613      	mov	r3, r2
 80103e4:	009b      	lsls	r3, r3, #2
 80103e6:	4413      	add	r3, r2
 80103e8:	005b      	lsls	r3, r3, #1
 80103ea:	440b      	add	r3, r1
 80103ec:	33ba      	adds	r3, #186	; 0xba
 80103ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80103f2:	b29b      	uxth	r3, r3
 80103f4:	4619      	mov	r1, r3
 80103f6:	68f8      	ldr	r0, [r7, #12]
 80103f8:	f007 ffd6 	bl	80183a8 <pifMsp_AddAnswer16>
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].middle);
 80103fc:	4979      	ldr	r1, [pc, #484]	; (80105e4 <evtMspReceive+0xba4>)
 80103fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010400:	4613      	mov	r3, r2
 8010402:	009b      	lsls	r3, r3, #2
 8010404:	4413      	add	r3, r2
 8010406:	005b      	lsls	r3, r3, #1
 8010408:	440b      	add	r3, r1
 801040a:	33bc      	adds	r3, #188	; 0xbc
 801040c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010410:	b29b      	uxth	r3, r3
 8010412:	4619      	mov	r1, r3
 8010414:	68f8      	ldr	r0, [r7, #12]
 8010416:	f007 ffc7 	bl	80183a8 <pifMsp_AddAnswer16>
            pifMsp_AddAnswer8(p_owner, cfg.servoConf[i].rate);
 801041a:	4972      	ldr	r1, [pc, #456]	; (80105e4 <evtMspReceive+0xba4>)
 801041c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801041e:	4613      	mov	r3, r2
 8010420:	009b      	lsls	r3, r3, #2
 8010422:	4413      	add	r3, r2
 8010424:	005b      	lsls	r3, r3, #1
 8010426:	440b      	add	r3, r1
 8010428:	33be      	adds	r3, #190	; 0xbe
 801042a:	f993 3000 	ldrsb.w	r3, [r3]
 801042e:	b2db      	uxtb	r3, r3
 8010430:	4619      	mov	r1, r3
 8010432:	68f8      	ldr	r0, [r7, #12]
 8010434:	f007 ff72 	bl	801831c <pifMsp_AddAnswer8>
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].direction);
 8010438:	496a      	ldr	r1, [pc, #424]	; (80105e4 <evtMspReceive+0xba4>)
 801043a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801043c:	4613      	mov	r3, r2
 801043e:	009b      	lsls	r3, r3, #2
 8010440:	4413      	add	r3, r2
 8010442:	005b      	lsls	r3, r3, #1
 8010444:	440b      	add	r3, r1
 8010446:	33c0      	adds	r3, #192	; 0xc0
 8010448:	881b      	ldrh	r3, [r3, #0]
 801044a:	4619      	mov	r1, r3
 801044c:	68f8      	ldr	r0, [r7, #12]
 801044e:	f007 ffab 	bl	80183a8 <pifMsp_AddAnswer16>
        for (i = 0; i < MAX_SERVOS; i++) {
 8010452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010454:	3301      	adds	r3, #1
 8010456:	637b      	str	r3, [r7, #52]	; 0x34
 8010458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801045a:	2b07      	cmp	r3, #7
 801045c:	d9b0      	bls.n	80103c0 <evtMspReceive+0x980>
        }
        break;
 801045e:	f000 bf8c 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_SET_SERVO_CONF:
        for (i = 0; i < MAX_SERVOS; i++) {
 8010462:	2300      	movs	r3, #0
 8010464:	637b      	str	r3, [r7, #52]	; 0x34
 8010466:	e04d      	b.n	8010504 <evtMspReceive+0xac4>
            cfg.servoConf[i].min = pifMsp_ReadData16(p_packet);
 8010468:	68b8      	ldr	r0, [r7, #8]
 801046a:	f007 fec1 	bl	80181f0 <pifMsp_ReadData16>
 801046e:	4603      	mov	r3, r0
 8010470:	b218      	sxth	r0, r3
 8010472:	495c      	ldr	r1, [pc, #368]	; (80105e4 <evtMspReceive+0xba4>)
 8010474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010476:	4613      	mov	r3, r2
 8010478:	009b      	lsls	r3, r3, #2
 801047a:	4413      	add	r3, r2
 801047c:	005b      	lsls	r3, r3, #1
 801047e:	440b      	add	r3, r1
 8010480:	33b8      	adds	r3, #184	; 0xb8
 8010482:	4602      	mov	r2, r0
 8010484:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].max = pifMsp_ReadData16(p_packet);
 8010486:	68b8      	ldr	r0, [r7, #8]
 8010488:	f007 feb2 	bl	80181f0 <pifMsp_ReadData16>
 801048c:	4603      	mov	r3, r0
 801048e:	b218      	sxth	r0, r3
 8010490:	4954      	ldr	r1, [pc, #336]	; (80105e4 <evtMspReceive+0xba4>)
 8010492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010494:	4613      	mov	r3, r2
 8010496:	009b      	lsls	r3, r3, #2
 8010498:	4413      	add	r3, r2
 801049a:	005b      	lsls	r3, r3, #1
 801049c:	440b      	add	r3, r1
 801049e:	33ba      	adds	r3, #186	; 0xba
 80104a0:	4602      	mov	r2, r0
 80104a2:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].middle = pifMsp_ReadData16(p_packet);
 80104a4:	68b8      	ldr	r0, [r7, #8]
 80104a6:	f007 fea3 	bl	80181f0 <pifMsp_ReadData16>
 80104aa:	4603      	mov	r3, r0
 80104ac:	b218      	sxth	r0, r3
 80104ae:	494d      	ldr	r1, [pc, #308]	; (80105e4 <evtMspReceive+0xba4>)
 80104b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104b2:	4613      	mov	r3, r2
 80104b4:	009b      	lsls	r3, r3, #2
 80104b6:	4413      	add	r3, r2
 80104b8:	005b      	lsls	r3, r3, #1
 80104ba:	440b      	add	r3, r1
 80104bc:	33bc      	adds	r3, #188	; 0xbc
 80104be:	4602      	mov	r2, r0
 80104c0:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].rate = pifMsp_ReadData8(p_packet);
 80104c2:	68b8      	ldr	r0, [r7, #8]
 80104c4:	f007 fe80 	bl	80181c8 <pifMsp_ReadData8>
 80104c8:	4603      	mov	r3, r0
 80104ca:	b258      	sxtb	r0, r3
 80104cc:	4945      	ldr	r1, [pc, #276]	; (80105e4 <evtMspReceive+0xba4>)
 80104ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104d0:	4613      	mov	r3, r2
 80104d2:	009b      	lsls	r3, r3, #2
 80104d4:	4413      	add	r3, r2
 80104d6:	005b      	lsls	r3, r3, #1
 80104d8:	440b      	add	r3, r1
 80104da:	33be      	adds	r3, #190	; 0xbe
 80104dc:	4602      	mov	r2, r0
 80104de:	701a      	strb	r2, [r3, #0]
            cfg.servoConf[i].direction = pifMsp_ReadData16(p_packet);
 80104e0:	68b8      	ldr	r0, [r7, #8]
 80104e2:	f007 fe85 	bl	80181f0 <pifMsp_ReadData16>
 80104e6:	4603      	mov	r3, r0
 80104e8:	4618      	mov	r0, r3
 80104ea:	493e      	ldr	r1, [pc, #248]	; (80105e4 <evtMspReceive+0xba4>)
 80104ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104ee:	4613      	mov	r3, r2
 80104f0:	009b      	lsls	r3, r3, #2
 80104f2:	4413      	add	r3, r2
 80104f4:	005b      	lsls	r3, r3, #1
 80104f6:	440b      	add	r3, r1
 80104f8:	33c0      	adds	r3, #192	; 0xc0
 80104fa:	4602      	mov	r2, r0
 80104fc:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++) {
 80104fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010500:	3301      	adds	r3, #1
 8010502:	637b      	str	r3, [r7, #52]	; 0x34
 8010504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010506:	2b07      	cmp	r3, #7
 8010508:	d9ae      	bls.n	8010468 <evtMspReceive+0xa28>
        }
        break;
 801050a:	f000 bf36 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_SERVOMIX_CONF:
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 801050e:	2300      	movs	r3, #0
 8010510:	637b      	str	r3, [r7, #52]	; 0x34
 8010512:	e05c      	b.n	80105ce <evtMspReceive+0xb8e>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].targetChannel);
 8010514:	4934      	ldr	r1, [pc, #208]	; (80105e8 <evtMspReceive+0xba8>)
 8010516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010518:	4613      	mov	r3, r2
 801051a:	00db      	lsls	r3, r3, #3
 801051c:	1a9b      	subs	r3, r3, r2
 801051e:	440b      	add	r3, r1
 8010520:	33d0      	adds	r3, #208	; 0xd0
 8010522:	781b      	ldrb	r3, [r3, #0]
 8010524:	4619      	mov	r1, r3
 8010526:	68f8      	ldr	r0, [r7, #12]
 8010528:	f007 fef8 	bl	801831c <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].fromChannel);
 801052c:	492e      	ldr	r1, [pc, #184]	; (80105e8 <evtMspReceive+0xba8>)
 801052e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010530:	4613      	mov	r3, r2
 8010532:	00db      	lsls	r3, r3, #3
 8010534:	1a9b      	subs	r3, r3, r2
 8010536:	440b      	add	r3, r1
 8010538:	33d1      	adds	r3, #209	; 0xd1
 801053a:	781b      	ldrb	r3, [r3, #0]
 801053c:	4619      	mov	r1, r3
 801053e:	68f8      	ldr	r0, [r7, #12]
 8010540:	f007 feec 	bl	801831c <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].rate);
 8010544:	4928      	ldr	r1, [pc, #160]	; (80105e8 <evtMspReceive+0xba8>)
 8010546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010548:	4613      	mov	r3, r2
 801054a:	00db      	lsls	r3, r3, #3
 801054c:	1a9b      	subs	r3, r3, r2
 801054e:	440b      	add	r3, r1
 8010550:	33d2      	adds	r3, #210	; 0xd2
 8010552:	f993 3000 	ldrsb.w	r3, [r3]
 8010556:	b2db      	uxtb	r3, r3
 8010558:	4619      	mov	r1, r3
 801055a:	68f8      	ldr	r0, [r7, #12]
 801055c:	f007 fede 	bl	801831c <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].speed);
 8010560:	4921      	ldr	r1, [pc, #132]	; (80105e8 <evtMspReceive+0xba8>)
 8010562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010564:	4613      	mov	r3, r2
 8010566:	00db      	lsls	r3, r3, #3
 8010568:	1a9b      	subs	r3, r3, r2
 801056a:	440b      	add	r3, r1
 801056c:	33d3      	adds	r3, #211	; 0xd3
 801056e:	781b      	ldrb	r3, [r3, #0]
 8010570:	4619      	mov	r1, r3
 8010572:	68f8      	ldr	r0, [r7, #12]
 8010574:	f007 fed2 	bl	801831c <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].min);
 8010578:	491b      	ldr	r1, [pc, #108]	; (80105e8 <evtMspReceive+0xba8>)
 801057a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801057c:	4613      	mov	r3, r2
 801057e:	00db      	lsls	r3, r3, #3
 8010580:	1a9b      	subs	r3, r3, r2
 8010582:	440b      	add	r3, r1
 8010584:	33d4      	adds	r3, #212	; 0xd4
 8010586:	f993 3000 	ldrsb.w	r3, [r3]
 801058a:	b2db      	uxtb	r3, r3
 801058c:	4619      	mov	r1, r3
 801058e:	68f8      	ldr	r0, [r7, #12]
 8010590:	f007 fec4 	bl	801831c <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].max);
 8010594:	4914      	ldr	r1, [pc, #80]	; (80105e8 <evtMspReceive+0xba8>)
 8010596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010598:	4613      	mov	r3, r2
 801059a:	00db      	lsls	r3, r3, #3
 801059c:	1a9b      	subs	r3, r3, r2
 801059e:	440b      	add	r3, r1
 80105a0:	33d5      	adds	r3, #213	; 0xd5
 80105a2:	f993 3000 	ldrsb.w	r3, [r3]
 80105a6:	b2db      	uxtb	r3, r3
 80105a8:	4619      	mov	r1, r3
 80105aa:	68f8      	ldr	r0, [r7, #12]
 80105ac:	f007 feb6 	bl	801831c <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].box);
 80105b0:	490d      	ldr	r1, [pc, #52]	; (80105e8 <evtMspReceive+0xba8>)
 80105b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105b4:	4613      	mov	r3, r2
 80105b6:	00db      	lsls	r3, r3, #3
 80105b8:	1a9b      	subs	r3, r3, r2
 80105ba:	440b      	add	r3, r1
 80105bc:	33d6      	adds	r3, #214	; 0xd6
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	4619      	mov	r1, r3
 80105c2:	68f8      	ldr	r0, [r7, #12]
 80105c4:	f007 feaa 	bl	801831c <pifMsp_AddAnswer8>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80105c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ca:	3301      	adds	r3, #1
 80105cc:	637b      	str	r3, [r7, #52]	; 0x34
 80105ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105d0:	2b0f      	cmp	r3, #15
 80105d2:	d99f      	bls.n	8010514 <evtMspReceive+0xad4>
        }
        break;
 80105d4:	f000 bed1 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_SET_SERVOMIX_CONF:
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80105d8:	2300      	movs	r3, #0
 80105da:	637b      	str	r3, [r7, #52]	; 0x34
 80105dc:	e06b      	b.n	80106b6 <evtMspReceive+0xc76>
 80105de:	bf00      	nop
 80105e0:	20000040 	.word	0x20000040
 80105e4:	20000e08 	.word	0x20000e08
 80105e8:	2000089c 	.word	0x2000089c
            mcfg.customServoMixer[i].targetChannel = pifMsp_ReadData8(p_packet);
 80105ec:	68b8      	ldr	r0, [r7, #8]
 80105ee:	f007 fdeb 	bl	80181c8 <pifMsp_ReadData8>
 80105f2:	4603      	mov	r3, r0
 80105f4:	4618      	mov	r0, r3
 80105f6:	49b9      	ldr	r1, [pc, #740]	; (80108dc <evtMspReceive+0xe9c>)
 80105f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105fa:	4613      	mov	r3, r2
 80105fc:	00db      	lsls	r3, r3, #3
 80105fe:	1a9b      	subs	r3, r3, r2
 8010600:	440b      	add	r3, r1
 8010602:	33d0      	adds	r3, #208	; 0xd0
 8010604:	4602      	mov	r2, r0
 8010606:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].fromChannel = pifMsp_ReadData8(p_packet);
 8010608:	68b8      	ldr	r0, [r7, #8]
 801060a:	f007 fddd 	bl	80181c8 <pifMsp_ReadData8>
 801060e:	4603      	mov	r3, r0
 8010610:	4618      	mov	r0, r3
 8010612:	49b2      	ldr	r1, [pc, #712]	; (80108dc <evtMspReceive+0xe9c>)
 8010614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010616:	4613      	mov	r3, r2
 8010618:	00db      	lsls	r3, r3, #3
 801061a:	1a9b      	subs	r3, r3, r2
 801061c:	440b      	add	r3, r1
 801061e:	33d1      	adds	r3, #209	; 0xd1
 8010620:	4602      	mov	r2, r0
 8010622:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].rate = pifMsp_ReadData8(p_packet);
 8010624:	68b8      	ldr	r0, [r7, #8]
 8010626:	f007 fdcf 	bl	80181c8 <pifMsp_ReadData8>
 801062a:	4603      	mov	r3, r0
 801062c:	b258      	sxtb	r0, r3
 801062e:	49ab      	ldr	r1, [pc, #684]	; (80108dc <evtMspReceive+0xe9c>)
 8010630:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010632:	4613      	mov	r3, r2
 8010634:	00db      	lsls	r3, r3, #3
 8010636:	1a9b      	subs	r3, r3, r2
 8010638:	440b      	add	r3, r1
 801063a:	33d2      	adds	r3, #210	; 0xd2
 801063c:	4602      	mov	r2, r0
 801063e:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].speed = pifMsp_ReadData8(p_packet);
 8010640:	68b8      	ldr	r0, [r7, #8]
 8010642:	f007 fdc1 	bl	80181c8 <pifMsp_ReadData8>
 8010646:	4603      	mov	r3, r0
 8010648:	4618      	mov	r0, r3
 801064a:	49a4      	ldr	r1, [pc, #656]	; (80108dc <evtMspReceive+0xe9c>)
 801064c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801064e:	4613      	mov	r3, r2
 8010650:	00db      	lsls	r3, r3, #3
 8010652:	1a9b      	subs	r3, r3, r2
 8010654:	440b      	add	r3, r1
 8010656:	33d3      	adds	r3, #211	; 0xd3
 8010658:	4602      	mov	r2, r0
 801065a:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].min = pifMsp_ReadData8(p_packet);
 801065c:	68b8      	ldr	r0, [r7, #8]
 801065e:	f007 fdb3 	bl	80181c8 <pifMsp_ReadData8>
 8010662:	4603      	mov	r3, r0
 8010664:	b258      	sxtb	r0, r3
 8010666:	499d      	ldr	r1, [pc, #628]	; (80108dc <evtMspReceive+0xe9c>)
 8010668:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801066a:	4613      	mov	r3, r2
 801066c:	00db      	lsls	r3, r3, #3
 801066e:	1a9b      	subs	r3, r3, r2
 8010670:	440b      	add	r3, r1
 8010672:	33d4      	adds	r3, #212	; 0xd4
 8010674:	4602      	mov	r2, r0
 8010676:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].max = pifMsp_ReadData8(p_packet);
 8010678:	68b8      	ldr	r0, [r7, #8]
 801067a:	f007 fda5 	bl	80181c8 <pifMsp_ReadData8>
 801067e:	4603      	mov	r3, r0
 8010680:	b258      	sxtb	r0, r3
 8010682:	4996      	ldr	r1, [pc, #600]	; (80108dc <evtMspReceive+0xe9c>)
 8010684:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010686:	4613      	mov	r3, r2
 8010688:	00db      	lsls	r3, r3, #3
 801068a:	1a9b      	subs	r3, r3, r2
 801068c:	440b      	add	r3, r1
 801068e:	33d5      	adds	r3, #213	; 0xd5
 8010690:	4602      	mov	r2, r0
 8010692:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].box = pifMsp_ReadData8(p_packet);
 8010694:	68b8      	ldr	r0, [r7, #8]
 8010696:	f007 fd97 	bl	80181c8 <pifMsp_ReadData8>
 801069a:	4603      	mov	r3, r0
 801069c:	4618      	mov	r0, r3
 801069e:	498f      	ldr	r1, [pc, #572]	; (80108dc <evtMspReceive+0xe9c>)
 80106a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106a2:	4613      	mov	r3, r2
 80106a4:	00db      	lsls	r3, r3, #3
 80106a6:	1a9b      	subs	r3, r3, r2
 80106a8:	440b      	add	r3, r1
 80106aa:	33d6      	adds	r3, #214	; 0xd6
 80106ac:	4602      	mov	r2, r0
 80106ae:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80106b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106b2:	3301      	adds	r3, #1
 80106b4:	637b      	str	r3, [r7, #52]	; 0x34
 80106b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106b8:	2b0f      	cmp	r3, #15
 80106ba:	d997      	bls.n	80105ec <evtMspReceive+0xbac>
        }
        loadCustomServoMixer();
 80106bc:	f7fa fd22 	bl	800b104 <loadCustomServoMixer>
        break;
 80106c0:	f000 be5b 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_FW_CONFIG:
        pifMsp_AddAnswer8(p_owner, mcfg.fw_althold_dir);
 80106c4:	4b85      	ldr	r3, [pc, #532]	; (80108dc <evtMspReceive+0xe9c>)
 80106c6:	f993 31a0 	ldrsb.w	r3, [r3, #416]	; 0x1a0
 80106ca:	b2db      	uxtb	r3, r3
 80106cc:	4619      	mov	r1, r3
 80106ce:	68f8      	ldr	r0, [r7, #12]
 80106d0:	f007 fe24 	bl	801831c <pifMsp_AddAnswer8>
        // pifMsp_AddAnswer8(p_owner, cfg.fw_vector_thrust); // Future Gui setting?
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_maxcorr);
 80106d4:	4b82      	ldr	r3, [pc, #520]	; (80108e0 <evtMspReceive+0xea0>)
 80106d6:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 80106da:	b29b      	uxth	r3, r3
 80106dc:	4619      	mov	r1, r3
 80106de:	68f8      	ldr	r0, [r7, #12]
 80106e0:	f007 fe62 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_rudder);
 80106e4:	4b7e      	ldr	r3, [pc, #504]	; (80108e0 <evtMspReceive+0xea0>)
 80106e6:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 80106ea:	b29b      	uxth	r3, r3
 80106ec:	4619      	mov	r1, r3
 80106ee:	68f8      	ldr	r0, [r7, #12]
 80106f0:	f007 fe5a 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_maxclimb);
 80106f4:	4b7a      	ldr	r3, [pc, #488]	; (80108e0 <evtMspReceive+0xea0>)
 80106f6:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80106fa:	b29b      	uxth	r3, r3
 80106fc:	4619      	mov	r1, r3
 80106fe:	68f8      	ldr	r0, [r7, #12]
 8010700:	f007 fe52 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_maxdive);
 8010704:	4b76      	ldr	r3, [pc, #472]	; (80108e0 <evtMspReceive+0xea0>)
 8010706:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 801070a:	b29b      	uxth	r3, r3
 801070c:	4619      	mov	r1, r3
 801070e:	68f8      	ldr	r0, [r7, #12]
 8010710:	f007 fe4a 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_climb_throttle);
 8010714:	4b72      	ldr	r3, [pc, #456]	; (80108e0 <evtMspReceive+0xea0>)
 8010716:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 801071a:	4619      	mov	r1, r3
 801071c:	68f8      	ldr	r0, [r7, #12]
 801071e:	f007 fe43 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_cruise_throttle);
 8010722:	4b6f      	ldr	r3, [pc, #444]	; (80108e0 <evtMspReceive+0xea0>)
 8010724:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 8010728:	4619      	mov	r1, r3
 801072a:	68f8      	ldr	r0, [r7, #12]
 801072c:	f007 fe3c 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_idle_throttle);
 8010730:	4b6b      	ldr	r3, [pc, #428]	; (80108e0 <evtMspReceive+0xea0>)
 8010732:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 8010736:	4619      	mov	r1, r3
 8010738:	68f8      	ldr	r0, [r7, #12]
 801073a:	f007 fe35 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_scaler_throttle);
 801073e:	4b68      	ldr	r3, [pc, #416]	; (80108e0 <evtMspReceive+0xea0>)
 8010740:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 8010744:	4619      	mov	r1, r3
 8010746:	68f8      	ldr	r0, [r7, #12]
 8010748:	f007 fe2e 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer32(p_owner, cfg.fw_roll_comp); // Float is Not compatible with Gui. Change to _Serialize8
 801074c:	4b64      	ldr	r3, [pc, #400]	; (80108e0 <evtMspReceive+0xea0>)
 801074e:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8010752:	4619      	mov	r1, r3
 8010754:	68f8      	ldr	r0, [r7, #12]
 8010756:	f007 fe73 	bl	8018440 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer8(p_owner, cfg.fw_rth_alt);
 801075a:	4b61      	ldr	r3, [pc, #388]	; (80108e0 <evtMspReceive+0xea0>)
 801075c:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8010760:	4619      	mov	r1, r3
 8010762:	68f8      	ldr	r0, [r7, #12]
 8010764:	f007 fdda 	bl	801831c <pifMsp_AddAnswer8>
        // next added for future use
        pifMsp_AddAnswer32(p_owner, 0);
 8010768:	2100      	movs	r1, #0
 801076a:	68f8      	ldr	r0, [r7, #12]
 801076c:	f007 fe68 	bl	8018440 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0);
 8010770:	2100      	movs	r1, #0
 8010772:	68f8      	ldr	r0, [r7, #12]
 8010774:	f007 fe64 	bl	8018440 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0);
 8010778:	2100      	movs	r1, #0
 801077a:	68f8      	ldr	r0, [r7, #12]
 801077c:	f007 fe60 	bl	8018440 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0);
 8010780:	2100      	movs	r1, #0
 8010782:	68f8      	ldr	r0, [r7, #12]
 8010784:	f007 fe5c 	bl	8018440 <pifMsp_AddAnswer32>
        break;
 8010788:	f000 bdf7 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_SET_FW_CONFIG:
        mcfg.fw_althold_dir = pifMsp_ReadData8(p_packet);
 801078c:	68b8      	ldr	r0, [r7, #8]
 801078e:	f007 fd1b 	bl	80181c8 <pifMsp_ReadData8>
 8010792:	4603      	mov	r3, r0
 8010794:	b25a      	sxtb	r2, r3
 8010796:	4b51      	ldr	r3, [pc, #324]	; (80108dc <evtMspReceive+0xe9c>)
 8010798:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        // cfg.fw_vector_thrust = pifMsp_ReadData8(p_packet); // Future Gui setting?
        cfg.fw_gps_maxcorr = pifMsp_ReadData16(p_packet);
 801079c:	68b8      	ldr	r0, [r7, #8]
 801079e:	f007 fd27 	bl	80181f0 <pifMsp_ReadData16>
 80107a2:	4603      	mov	r3, r0
 80107a4:	b21a      	sxth	r2, r3
 80107a6:	4b4e      	ldr	r3, [pc, #312]	; (80108e0 <evtMspReceive+0xea0>)
 80107a8:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
        cfg.fw_gps_rudder = pifMsp_ReadData16(p_packet);
 80107ac:	68b8      	ldr	r0, [r7, #8]
 80107ae:	f007 fd1f 	bl	80181f0 <pifMsp_ReadData16>
 80107b2:	4603      	mov	r3, r0
 80107b4:	b21a      	sxth	r2, r3
 80107b6:	4b4a      	ldr	r3, [pc, #296]	; (80108e0 <evtMspReceive+0xea0>)
 80107b8:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
        cfg.fw_gps_maxclimb = pifMsp_ReadData16(p_packet);
 80107bc:	68b8      	ldr	r0, [r7, #8]
 80107be:	f007 fd17 	bl	80181f0 <pifMsp_ReadData16>
 80107c2:	4603      	mov	r3, r0
 80107c4:	b21a      	sxth	r2, r3
 80107c6:	4b46      	ldr	r3, [pc, #280]	; (80108e0 <evtMspReceive+0xea0>)
 80107c8:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
        cfg.fw_gps_maxdive = pifMsp_ReadData16(p_packet);
 80107cc:	68b8      	ldr	r0, [r7, #8]
 80107ce:	f007 fd0f 	bl	80181f0 <pifMsp_ReadData16>
 80107d2:	4603      	mov	r3, r0
 80107d4:	b21a      	sxth	r2, r3
 80107d6:	4b42      	ldr	r3, [pc, #264]	; (80108e0 <evtMspReceive+0xea0>)
 80107d8:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
        cfg.fw_climb_throttle = pifMsp_ReadData16(p_packet);
 80107dc:	68b8      	ldr	r0, [r7, #8]
 80107de:	f007 fd07 	bl	80181f0 <pifMsp_ReadData16>
 80107e2:	4603      	mov	r3, r0
 80107e4:	461a      	mov	r2, r3
 80107e6:	4b3e      	ldr	r3, [pc, #248]	; (80108e0 <evtMspReceive+0xea0>)
 80107e8:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
        cfg.fw_cruise_throttle = pifMsp_ReadData16(p_packet);
 80107ec:	68b8      	ldr	r0, [r7, #8]
 80107ee:	f007 fcff 	bl	80181f0 <pifMsp_ReadData16>
 80107f2:	4603      	mov	r3, r0
 80107f4:	461a      	mov	r2, r3
 80107f6:	4b3a      	ldr	r3, [pc, #232]	; (80108e0 <evtMspReceive+0xea0>)
 80107f8:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
        cfg.fw_idle_throttle = pifMsp_ReadData16(p_packet);
 80107fc:	68b8      	ldr	r0, [r7, #8]
 80107fe:	f007 fcf7 	bl	80181f0 <pifMsp_ReadData16>
 8010802:	4603      	mov	r3, r0
 8010804:	461a      	mov	r2, r3
 8010806:	4b36      	ldr	r3, [pc, #216]	; (80108e0 <evtMspReceive+0xea0>)
 8010808:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
        cfg.fw_scaler_throttle = pifMsp_ReadData16(p_packet);
 801080c:	68b8      	ldr	r0, [r7, #8]
 801080e:	f007 fcef 	bl	80181f0 <pifMsp_ReadData16>
 8010812:	4603      	mov	r3, r0
 8010814:	461a      	mov	r2, r3
 8010816:	4b32      	ldr	r3, [pc, #200]	; (80108e0 <evtMspReceive+0xea0>)
 8010818:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
        //cfg.fw_gps_maxdive = pifMsp_ReadData32(p_packet);// Wrong when using float in MSP!... Change to pifMsp_ReadData8
        pifMsp_ReadData32(p_packet); // Just read and skip
 801081c:	68b8      	ldr	r0, [r7, #8]
 801081e:	f007 fd04 	bl	801822a <pifMsp_ReadData32>
        cfg.fw_rth_alt = pifMsp_ReadData8(p_packet);
 8010822:	68b8      	ldr	r0, [r7, #8]
 8010824:	f007 fcd0 	bl	80181c8 <pifMsp_ReadData8>
 8010828:	4603      	mov	r3, r0
 801082a:	461a      	mov	r2, r3
 801082c:	4b2c      	ldr	r3, [pc, #176]	; (80108e0 <evtMspReceive+0xea0>)
 801082e:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
        // next added for future use
        pifMsp_ReadData32(p_packet);
 8010832:	68b8      	ldr	r0, [r7, #8]
 8010834:	f007 fcf9 	bl	801822a <pifMsp_ReadData32>
        pifMsp_ReadData32(p_packet);
 8010838:	68b8      	ldr	r0, [r7, #8]
 801083a:	f007 fcf6 	bl	801822a <pifMsp_ReadData32>
        pifMsp_ReadData32(p_packet);
 801083e:	68b8      	ldr	r0, [r7, #8]
 8010840:	f007 fcf3 	bl	801822a <pifMsp_ReadData32>
        pifMsp_ReadData32(p_packet);
 8010844:	68b8      	ldr	r0, [r7, #8]
 8010846:	f007 fcf0 	bl	801822a <pifMsp_ReadData32>
        break;
 801084a:	f000 bd96 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_MOTOR:
        pifMsp_AddAnswer(p_owner, (uint8_t *)&motor, 16);
 801084e:	2210      	movs	r2, #16
 8010850:	4924      	ldr	r1, [pc, #144]	; (80108e4 <evtMspReceive+0xea4>)
 8010852:	68f8      	ldr	r0, [r7, #12]
 8010854:	f007 fe40 	bl	80184d8 <pifMsp_AddAnswer>
        break;
 8010858:	f000 bd8f 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_RC:
        for (i = 0; i < 8; i++)
 801085c:	2300      	movs	r3, #0
 801085e:	637b      	str	r3, [r7, #52]	; 0x34
 8010860:	e00b      	b.n	801087a <evtMspReceive+0xe3a>
            pifMsp_AddAnswer16(p_owner, rcData[i]);
 8010862:	4a21      	ldr	r2, [pc, #132]	; (80108e8 <evtMspReceive+0xea8>)
 8010864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010866:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801086a:	b29b      	uxth	r3, r3
 801086c:	4619      	mov	r1, r3
 801086e:	68f8      	ldr	r0, [r7, #12]
 8010870:	f007 fd9a 	bl	80183a8 <pifMsp_AddAnswer16>
        for (i = 0; i < 8; i++)
 8010874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010876:	3301      	adds	r3, #1
 8010878:	637b      	str	r3, [r7, #52]	; 0x34
 801087a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801087c:	2b07      	cmp	r3, #7
 801087e:	d9f0      	bls.n	8010862 <evtMspReceive+0xe22>
        break;
 8010880:	f000 bd7b 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_RAW_GPS:
        pifMsp_AddAnswer8(p_owner, f.GPS_FIX);
 8010884:	4b19      	ldr	r3, [pc, #100]	; (80108ec <evtMspReceive+0xeac>)
 8010886:	7adb      	ldrb	r3, [r3, #11]
 8010888:	4619      	mov	r1, r3
 801088a:	68f8      	ldr	r0, [r7, #12]
 801088c:	f007 fd46 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, GPS_numSat);
 8010890:	4b17      	ldr	r3, [pc, #92]	; (80108f0 <evtMspReceive+0xeb0>)
 8010892:	781b      	ldrb	r3, [r3, #0]
 8010894:	4619      	mov	r1, r3
 8010896:	68f8      	ldr	r0, [r7, #12]
 8010898:	f007 fd40 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, GPS_coord[LAT]);
 801089c:	4b15      	ldr	r3, [pc, #84]	; (80108f4 <evtMspReceive+0xeb4>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	4619      	mov	r1, r3
 80108a2:	68f8      	ldr	r0, [r7, #12]
 80108a4:	f007 fdcc 	bl	8018440 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, GPS_coord[LON]);
 80108a8:	4b12      	ldr	r3, [pc, #72]	; (80108f4 <evtMspReceive+0xeb4>)
 80108aa:	685b      	ldr	r3, [r3, #4]
 80108ac:	4619      	mov	r1, r3
 80108ae:	68f8      	ldr	r0, [r7, #12]
 80108b0:	f007 fdc6 	bl	8018440 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer16(p_owner, GPS_altitude);
 80108b4:	4b10      	ldr	r3, [pc, #64]	; (80108f8 <evtMspReceive+0xeb8>)
 80108b6:	881b      	ldrh	r3, [r3, #0]
 80108b8:	4619      	mov	r1, r3
 80108ba:	68f8      	ldr	r0, [r7, #12]
 80108bc:	f007 fd74 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, GPS_speed);
 80108c0:	4b0e      	ldr	r3, [pc, #56]	; (80108fc <evtMspReceive+0xebc>)
 80108c2:	881b      	ldrh	r3, [r3, #0]
 80108c4:	4619      	mov	r1, r3
 80108c6:	68f8      	ldr	r0, [r7, #12]
 80108c8:	f007 fd6e 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, GPS_ground_course);
 80108cc:	4b0c      	ldr	r3, [pc, #48]	; (8010900 <evtMspReceive+0xec0>)
 80108ce:	881b      	ldrh	r3, [r3, #0]
 80108d0:	4619      	mov	r1, r3
 80108d2:	68f8      	ldr	r0, [r7, #12]
 80108d4:	f007 fd68 	bl	80183a8 <pifMsp_AddAnswer16>
        break;
 80108d8:	f000 bd4f 	b.w	801137a <evtMspReceive+0x193a>
 80108dc:	2000089c 	.word	0x2000089c
 80108e0:	20000e08 	.word	0x20000e08
 80108e4:	200015b4 	.word	0x200015b4
 80108e8:	20001784 	.word	0x20001784
 80108ec:	2000174c 	.word	0x2000174c
 80108f0:	20001830 	.word	0x20001830
 80108f4:	20001810 	.word	0x20001810
 80108f8:	20001836 	.word	0x20001836
 80108fc:	20001838 	.word	0x20001838
 8010900:	20001842 	.word	0x20001842

    case MSP_COMP_GPS:
        pifMsp_AddAnswer16(p_owner, GPS_distanceToHome);
 8010904:	4bb0      	ldr	r3, [pc, #704]	; (8010bc8 <evtMspReceive+0x1188>)
 8010906:	881b      	ldrh	r3, [r3, #0]
 8010908:	4619      	mov	r1, r3
 801090a:	68f8      	ldr	r0, [r7, #12]
 801090c:	f007 fd4c 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, GPS_directionToHome);
 8010910:	4bae      	ldr	r3, [pc, #696]	; (8010bcc <evtMspReceive+0x118c>)
 8010912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010916:	b29b      	uxth	r3, r3
 8010918:	4619      	mov	r1, r3
 801091a:	68f8      	ldr	r0, [r7, #12]
 801091c:	f007 fd44 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, GPS_update & 1);
 8010920:	4bab      	ldr	r3, [pc, #684]	; (8010bd0 <evtMspReceive+0x1190>)
 8010922:	781b      	ldrb	r3, [r3, #0]
 8010924:	f003 0301 	and.w	r3, r3, #1
 8010928:	b2db      	uxtb	r3, r3
 801092a:	4619      	mov	r1, r3
 801092c:	68f8      	ldr	r0, [r7, #12]
 801092e:	f007 fcf5 	bl	801831c <pifMsp_AddAnswer8>
        break;
 8010932:	f000 bd22 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_ATTITUDE:
        for (i = 0; i < 2; i++)
 8010936:	2300      	movs	r3, #0
 8010938:	637b      	str	r3, [r7, #52]	; 0x34
 801093a:	e00b      	b.n	8010954 <evtMspReceive+0xf14>
            pifMsp_AddAnswer16(p_owner, angle[i]);
 801093c:	4aa5      	ldr	r2, [pc, #660]	; (8010bd4 <evtMspReceive+0x1194>)
 801093e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010940:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010944:	b29b      	uxth	r3, r3
 8010946:	4619      	mov	r1, r3
 8010948:	68f8      	ldr	r0, [r7, #12]
 801094a:	f007 fd2d 	bl	80183a8 <pifMsp_AddAnswer16>
        for (i = 0; i < 2; i++)
 801094e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010950:	3301      	adds	r3, #1
 8010952:	637b      	str	r3, [r7, #52]	; 0x34
 8010954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010956:	2b01      	cmp	r3, #1
 8010958:	d9f0      	bls.n	801093c <evtMspReceive+0xefc>
        pifMsp_AddAnswer16(p_owner, heading);
 801095a:	4b9f      	ldr	r3, [pc, #636]	; (8010bd8 <evtMspReceive+0x1198>)
 801095c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010960:	b29b      	uxth	r3, r3
 8010962:	4619      	mov	r1, r3
 8010964:	68f8      	ldr	r0, [r7, #12]
 8010966:	f007 fd1f 	bl	80183a8 <pifMsp_AddAnswer16>
        break;
 801096a:	f000 bd06 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_ALTITUDE:
        pifMsp_AddAnswer32(p_owner, EstAlt);
 801096e:	4b9b      	ldr	r3, [pc, #620]	; (8010bdc <evtMspReceive+0x119c>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	4619      	mov	r1, r3
 8010974:	68f8      	ldr	r0, [r7, #12]
 8010976:	f007 fd63 	bl	8018440 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer16(p_owner, vario);
 801097a:	4b99      	ldr	r3, [pc, #612]	; (8010be0 <evtMspReceive+0x11a0>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	b29b      	uxth	r3, r3
 8010980:	4619      	mov	r1, r3
 8010982:	68f8      	ldr	r0, [r7, #12]
 8010984:	f007 fd10 	bl	80183a8 <pifMsp_AddAnswer16>
        break;
 8010988:	f000 bcf7 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_ANALOG:
        pifMsp_AddAnswer8(p_owner, (uint8_t)constrain((int16_t)vbat, 0, 255));
 801098c:	4b95      	ldr	r3, [pc, #596]	; (8010be4 <evtMspReceive+0x11a4>)
 801098e:	881b      	ldrh	r3, [r3, #0]
 8010990:	b21b      	sxth	r3, r3
 8010992:	22ff      	movs	r2, #255	; 0xff
 8010994:	2100      	movs	r1, #0
 8010996:	4618      	mov	r0, r3
 8010998:	f7f3 fa1e 	bl	8003dd8 <constrain>
 801099c:	4603      	mov	r3, r0
 801099e:	b2db      	uxtb	r3, r3
 80109a0:	4619      	mov	r1, r3
 80109a2:	68f8      	ldr	r0, [r7, #12]
 80109a4:	f007 fcba 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, (uint16_t)constrain(mAhdrawn, 0, 0xFFFF)); // milliamphours drawn from battery
 80109a8:	4b8f      	ldr	r3, [pc, #572]	; (8010be8 <evtMspReceive+0x11a8>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80109b0:	2100      	movs	r1, #0
 80109b2:	4618      	mov	r0, r3
 80109b4:	f7f3 fa10 	bl	8003dd8 <constrain>
 80109b8:	4603      	mov	r3, r0
 80109ba:	b29b      	uxth	r3, r3
 80109bc:	4619      	mov	r1, r3
 80109be:	68f8      	ldr	r0, [r7, #12]
 80109c0:	f007 fcf2 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, rssi);
 80109c4:	4b89      	ldr	r3, [pc, #548]	; (8010bec <evtMspReceive+0x11ac>)
 80109c6:	881b      	ldrh	r3, [r3, #0]
 80109c8:	4619      	mov	r1, r3
 80109ca:	68f8      	ldr	r0, [r7, #12]
 80109cc:	f007 fcec 	bl	80183a8 <pifMsp_AddAnswer16>
        if (mcfg.multiwiicurrentoutput)
 80109d0:	4b87      	ldr	r3, [pc, #540]	; (8010bf0 <evtMspReceive+0x11b0>)
 80109d2:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d017      	beq.n	8010a0a <evtMspReceive+0xfca>
            pifMsp_AddAnswer16(p_owner, (uint16_t)constrain((abs(amperage) * 10), 0, 0xFFFF)); // send amperage in 0.001 A steps
 80109da:	4b86      	ldr	r3, [pc, #536]	; (8010bf4 <evtMspReceive+0x11b4>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80109e2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80109e6:	4613      	mov	r3, r2
 80109e8:	009b      	lsls	r3, r3, #2
 80109ea:	4413      	add	r3, r2
 80109ec:	005b      	lsls	r3, r3, #1
 80109ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80109f2:	2100      	movs	r1, #0
 80109f4:	4618      	mov	r0, r3
 80109f6:	f7f3 f9ef 	bl	8003dd8 <constrain>
 80109fa:	4603      	mov	r3, r0
 80109fc:	b29b      	uxth	r3, r3
 80109fe:	4619      	mov	r1, r3
 8010a00:	68f8      	ldr	r0, [r7, #12]
 8010a02:	f007 fcd1 	bl	80183a8 <pifMsp_AddAnswer16>
        else
            pifMsp_AddAnswer16(p_owner, (uint16_t)constrain(abs(amperage), 0, 0xFFFF)); // send amperage in 0.01 A steps
        break;
 8010a06:	f000 bcb8 	b.w	801137a <evtMspReceive+0x193a>
            pifMsp_AddAnswer16(p_owner, (uint16_t)constrain(abs(amperage), 0, 0xFFFF)); // send amperage in 0.01 A steps
 8010a0a:	4b7a      	ldr	r3, [pc, #488]	; (8010bf4 <evtMspReceive+0x11b4>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	bfb8      	it	lt
 8010a12:	425b      	neglt	r3, r3
 8010a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a18:	2100      	movs	r1, #0
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f7f3 f9dc 	bl	8003dd8 <constrain>
 8010a20:	4603      	mov	r3, r0
 8010a22:	b29b      	uxth	r3, r3
 8010a24:	4619      	mov	r1, r3
 8010a26:	68f8      	ldr	r0, [r7, #12]
 8010a28:	f007 fcbe 	bl	80183a8 <pifMsp_AddAnswer16>
        break;
 8010a2c:	f000 bca5 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_RC_TUNING:
        pifMsp_AddAnswer8(p_owner, cfg.rcRate8);
 8010a30:	4b71      	ldr	r3, [pc, #452]	; (8010bf8 <evtMspReceive+0x11b8>)
 8010a32:	7fdb      	ldrb	r3, [r3, #31]
 8010a34:	4619      	mov	r1, r3
 8010a36:	68f8      	ldr	r0, [r7, #12]
 8010a38:	f007 fc70 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.rcExpo8);
 8010a3c:	4b6e      	ldr	r3, [pc, #440]	; (8010bf8 <evtMspReceive+0x11b8>)
 8010a3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010a42:	4619      	mov	r1, r3
 8010a44:	68f8      	ldr	r0, [r7, #12]
 8010a46:	f007 fc69 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.rollPitchRate[0]); // here for legacy support
 8010a4a:	4b6b      	ldr	r3, [pc, #428]	; (8010bf8 <evtMspReceive+0x11b8>)
 8010a4c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8010a50:	4619      	mov	r1, r3
 8010a52:	68f8      	ldr	r0, [r7, #12]
 8010a54:	f007 fc62 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.yawRate);
 8010a58:	4b67      	ldr	r3, [pc, #412]	; (8010bf8 <evtMspReceive+0x11b8>)
 8010a5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8010a5e:	4619      	mov	r1, r3
 8010a60:	68f8      	ldr	r0, [r7, #12]
 8010a62:	f007 fc5b 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.dynThrPID);
 8010a66:	4b64      	ldr	r3, [pc, #400]	; (8010bf8 <evtMspReceive+0x11b8>)
 8010a68:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	68f8      	ldr	r0, [r7, #12]
 8010a70:	f007 fc54 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.thrMid8);
 8010a74:	4b60      	ldr	r3, [pc, #384]	; (8010bf8 <evtMspReceive+0x11b8>)
 8010a76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010a7a:	4619      	mov	r1, r3
 8010a7c:	68f8      	ldr	r0, [r7, #12]
 8010a7e:	f007 fc4d 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.thrExpo8);
 8010a82:	4b5d      	ldr	r3, [pc, #372]	; (8010bf8 <evtMspReceive+0x11b8>)
 8010a84:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8010a88:	4619      	mov	r1, r3
 8010a8a:	68f8      	ldr	r0, [r7, #12]
 8010a8c:	f007 fc46 	bl	801831c <pifMsp_AddAnswer8>
        break;
 8010a90:	f000 bc73 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_PID:
        for (i = 0; i < PIDITEMS; i++) {
 8010a94:	2300      	movs	r3, #0
 8010a96:	637b      	str	r3, [r7, #52]	; 0x34
 8010a98:	e036      	b.n	8010b08 <evtMspReceive+0x10c8>
            pifMsp_AddAnswer8(p_owner, cfg.P8[i]);
 8010a9a:	4a57      	ldr	r2, [pc, #348]	; (8010bf8 <evtMspReceive+0x11b8>)
 8010a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a9e:	4413      	add	r3, r2
 8010aa0:	3301      	adds	r3, #1
 8010aa2:	781b      	ldrb	r3, [r3, #0]
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	68f8      	ldr	r0, [r7, #12]
 8010aa8:	f007 fc38 	bl	801831c <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, cfg.I8[i]);
 8010aac:	4a52      	ldr	r2, [pc, #328]	; (8010bf8 <evtMspReceive+0x11b8>)
 8010aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ab0:	4413      	add	r3, r2
 8010ab2:	330b      	adds	r3, #11
 8010ab4:	781b      	ldrb	r3, [r3, #0]
 8010ab6:	4619      	mov	r1, r3
 8010ab8:	68f8      	ldr	r0, [r7, #12]
 8010aba:	f007 fc2f 	bl	801831c <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, cfg.D8[i]);
 8010abe:	4a4e      	ldr	r2, [pc, #312]	; (8010bf8 <evtMspReceive+0x11b8>)
 8010ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ac2:	4413      	add	r3, r2
 8010ac4:	3315      	adds	r3, #21
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	4619      	mov	r1, r3
 8010aca:	68f8      	ldr	r0, [r7, #12]
 8010acc:	f007 fc26 	bl	801831c <pifMsp_AddAnswer8>
#ifndef __PIF_NO_LOG__
            pifLog_Printf(LT_INFO, "PID:%d P=%u I=%u D=%u", i, cfg.P8[i], cfg.I8[i], cfg.D8[i]);
 8010ad0:	4a49      	ldr	r2, [pc, #292]	; (8010bf8 <evtMspReceive+0x11b8>)
 8010ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ad4:	4413      	add	r3, r2
 8010ad6:	3301      	adds	r3, #1
 8010ad8:	781b      	ldrb	r3, [r3, #0]
 8010ada:	4618      	mov	r0, r3
 8010adc:	4a46      	ldr	r2, [pc, #280]	; (8010bf8 <evtMspReceive+0x11b8>)
 8010ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ae0:	4413      	add	r3, r2
 8010ae2:	330b      	adds	r3, #11
 8010ae4:	781b      	ldrb	r3, [r3, #0]
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	4a43      	ldr	r2, [pc, #268]	; (8010bf8 <evtMspReceive+0x11b8>)
 8010aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aec:	4413      	add	r3, r2
 8010aee:	3315      	adds	r3, #21
 8010af0:	781b      	ldrb	r3, [r3, #0]
 8010af2:	9301      	str	r3, [sp, #4]
 8010af4:	9100      	str	r1, [sp, #0]
 8010af6:	4603      	mov	r3, r0
 8010af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010afa:	4940      	ldr	r1, [pc, #256]	; (8010bfc <evtMspReceive+0x11bc>)
 8010afc:	2002      	movs	r0, #2
 8010afe:	f003 f87b 	bl	8013bf8 <pifLog_Printf>
        for (i = 0; i < PIDITEMS; i++) {
 8010b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b04:	3301      	adds	r3, #1
 8010b06:	637b      	str	r3, [r7, #52]	; 0x34
 8010b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b0a:	2b09      	cmp	r3, #9
 8010b0c:	d9c5      	bls.n	8010a9a <evtMspReceive+0x105a>
#endif
        }
        break;
 8010b0e:	f000 bc34 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_PIDNAMES:
        pifMsp_AddAnswer(p_owner, (uint8_t*)pidnames, sizeof(pidnames));
 8010b12:	2230      	movs	r2, #48	; 0x30
 8010b14:	493a      	ldr	r1, [pc, #232]	; (8010c00 <evtMspReceive+0x11c0>)
 8010b16:	68f8      	ldr	r0, [r7, #12]
 8010b18:	f007 fcde 	bl	80184d8 <pifMsp_AddAnswer>
        break;
 8010b1c:	f000 bc2d 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_BOX:
        for (i = 0; i < numberBoxItems; i++)
 8010b20:	2300      	movs	r3, #0
 8010b22:	637b      	str	r3, [r7, #52]	; 0x34
 8010b24:	e010      	b.n	8010b48 <evtMspReceive+0x1108>
            pifMsp_AddAnswer16(p_owner, cfg.activate[availableBoxes[i]]);
 8010b26:	4a37      	ldr	r2, [pc, #220]	; (8010c04 <evtMspReceive+0x11c4>)
 8010b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b2a:	4413      	add	r3, r2
 8010b2c:	781b      	ldrb	r3, [r3, #0]
 8010b2e:	4a32      	ldr	r2, [pc, #200]	; (8010bf8 <evtMspReceive+0x11b8>)
 8010b30:	3312      	adds	r3, #18
 8010b32:	009b      	lsls	r3, r3, #2
 8010b34:	4413      	add	r3, r2
 8010b36:	685b      	ldr	r3, [r3, #4]
 8010b38:	b29b      	uxth	r3, r3
 8010b3a:	4619      	mov	r1, r3
 8010b3c:	68f8      	ldr	r0, [r7, #12]
 8010b3e:	f007 fc33 	bl	80183a8 <pifMsp_AddAnswer16>
        for (i = 0; i < numberBoxItems; i++)
 8010b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b44:	3301      	adds	r3, #1
 8010b46:	637b      	str	r3, [r7, #52]	; 0x34
 8010b48:	4b2f      	ldr	r3, [pc, #188]	; (8010c08 <evtMspReceive+0x11c8>)
 8010b4a:	781b      	ldrb	r3, [r3, #0]
 8010b4c:	461a      	mov	r2, r3
 8010b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b50:	4293      	cmp	r3, r2
 8010b52:	d3e8      	bcc.n	8010b26 <evtMspReceive+0x10e6>
        break;
 8010b54:	f000 bc11 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_BOXNAMES:
        _SerializeBoxNamesReply(p_owner);
 8010b58:	68f8      	ldr	r0, [r7, #12]
 8010b5a:	f7fe fdeb 	bl	800f734 <_SerializeBoxNamesReply>
        break;
 8010b5e:	f000 bc0c 	b.w	801137a <evtMspReceive+0x193a>

    case MSP_BOXIDS:
        for (i = 0; i < numberBoxItems; i++) {
 8010b62:	2300      	movs	r3, #0
 8010b64:	637b      	str	r3, [r7, #52]	; 0x34
 8010b66:	e028      	b.n	8010bba <evtMspReceive+0x117a>
            for  (j = 0; j < CHECKBOXITEMS; j++) {
 8010b68:	2300      	movs	r3, #0
 8010b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8010b6c:	e01f      	b.n	8010bae <evtMspReceive+0x116e>
                if (boxes[j].permanentId == availableBoxes[i]) {
 8010b6e:	4927      	ldr	r1, [pc, #156]	; (8010c0c <evtMspReceive+0x11cc>)
 8010b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b72:	4613      	mov	r3, r2
 8010b74:	005b      	lsls	r3, r3, #1
 8010b76:	4413      	add	r3, r2
 8010b78:	009b      	lsls	r3, r3, #2
 8010b7a:	440b      	add	r3, r1
 8010b7c:	3308      	adds	r3, #8
 8010b7e:	781a      	ldrb	r2, [r3, #0]
 8010b80:	4920      	ldr	r1, [pc, #128]	; (8010c04 <evtMspReceive+0x11c4>)
 8010b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b84:	440b      	add	r3, r1
 8010b86:	781b      	ldrb	r3, [r3, #0]
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	d10d      	bne.n	8010ba8 <evtMspReceive+0x1168>
                    pifMsp_AddAnswer8(p_owner, boxes[j].permanentId);
 8010b8c:	491f      	ldr	r1, [pc, #124]	; (8010c0c <evtMspReceive+0x11cc>)
 8010b8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b90:	4613      	mov	r3, r2
 8010b92:	005b      	lsls	r3, r3, #1
 8010b94:	4413      	add	r3, r2
 8010b96:	009b      	lsls	r3, r3, #2
 8010b98:	440b      	add	r3, r1
 8010b9a:	3308      	adds	r3, #8
 8010b9c:	781b      	ldrb	r3, [r3, #0]
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	68f8      	ldr	r0, [r7, #12]
 8010ba2:	f007 fbbb 	bl	801831c <pifMsp_AddAnswer8>
                    break;
 8010ba6:	e005      	b.n	8010bb4 <evtMspReceive+0x1174>
            for  (j = 0; j < CHECKBOXITEMS; j++) {
 8010ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010baa:	3301      	adds	r3, #1
 8010bac:	633b      	str	r3, [r7, #48]	; 0x30
 8010bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb0:	2b18      	cmp	r3, #24
 8010bb2:	d9dc      	bls.n	8010b6e <evtMspReceive+0x112e>
        for (i = 0; i < numberBoxItems; i++) {
 8010bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8010bba:	4b13      	ldr	r3, [pc, #76]	; (8010c08 <evtMspReceive+0x11c8>)
 8010bbc:	781b      	ldrb	r3, [r3, #0]
 8010bbe:	461a      	mov	r2, r3
 8010bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bc2:	4293      	cmp	r3, r2
 8010bc4:	d3d0      	bcc.n	8010b68 <evtMspReceive+0x1128>
                }
            }
        }
        break;
 8010bc6:	e3d8      	b.n	801137a <evtMspReceive+0x193a>
 8010bc8:	20001832 	.word	0x20001832
 8010bcc:	20001834 	.word	0x20001834
 8010bd0:	2000183a 	.word	0x2000183a
 8010bd4:	200014f4 	.word	0x200014f4
 8010bd8:	20001a7e 	.word	0x20001a7e
 8010bdc:	200014b8 	.word	0x200014b8
 8010be0:	200014d0 	.word	0x200014d0
 8010be4:	20001770 	.word	0x20001770
 8010be8:	20001778 	.word	0x20001778
 8010bec:	200017d8 	.word	0x200017d8
 8010bf0:	2000089c 	.word	0x2000089c
 8010bf4:	20001774 	.word	0x20001774
 8010bf8:	20000e08 	.word	0x20000e08
 8010bfc:	0802867c 	.word	0x0802867c
 8010c00:	0802a460 	.word	0x0802a460
 8010c04:	20001bf8 	.word	0x20001bf8
 8010c08:	20001c11 	.word	0x20001c11
 8010c0c:	0802a328 	.word	0x0802a328

    case MSP_MISC:
        pifMsp_AddAnswer16(p_owner, mcfg.midrc);
 8010c10:	4ba8      	ldr	r3, [pc, #672]	; (8010eb4 <evtMspReceive+0x1474>)
 8010c12:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8010c16:	4619      	mov	r1, r3
 8010c18:	68f8      	ldr	r0, [r7, #12]
 8010c1a:	f007 fbc5 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.minthrottle);
 8010c1e:	4ba5      	ldr	r3, [pc, #660]	; (8010eb4 <evtMspReceive+0x1474>)
 8010c20:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8010c24:	4619      	mov	r1, r3
 8010c26:	68f8      	ldr	r0, [r7, #12]
 8010c28:	f007 fbbe 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.maxthrottle);
 8010c2c:	4ba1      	ldr	r3, [pc, #644]	; (8010eb4 <evtMspReceive+0x1474>)
 8010c2e:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 8010c32:	4619      	mov	r1, r3
 8010c34:	68f8      	ldr	r0, [r7, #12]
 8010c36:	f007 fbb7 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.mincommand);
 8010c3a:	4b9e      	ldr	r3, [pc, #632]	; (8010eb4 <evtMspReceive+0x1474>)
 8010c3c:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8010c40:	4619      	mov	r1, r3
 8010c42:	68f8      	ldr	r0, [r7, #12]
 8010c44:	f007 fbb0 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.failsafe_throttle);
 8010c48:	4b9b      	ldr	r3, [pc, #620]	; (8010eb8 <evtMspReceive+0x1478>)
 8010c4a:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8010c4e:	4619      	mov	r1, r3
 8010c50:	68f8      	ldr	r0, [r7, #12]
 8010c52:	f007 fba9 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, mcfg.gps_type);
 8010c56:	4b97      	ldr	r3, [pc, #604]	; (8010eb4 <evtMspReceive+0x1474>)
 8010c58:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8010c5c:	4619      	mov	r1, r3
 8010c5e:	68f8      	ldr	r0, [r7, #12]
 8010c60:	f007 fb5c 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.gps_baudrate);
 8010c64:	4b93      	ldr	r3, [pc, #588]	; (8010eb4 <evtMspReceive+0x1474>)
 8010c66:	f993 31ac 	ldrsb.w	r3, [r3, #428]	; 0x1ac
 8010c6a:	b2db      	uxtb	r3, r3
 8010c6c:	4619      	mov	r1, r3
 8010c6e:	68f8      	ldr	r0, [r7, #12]
 8010c70:	f007 fb54 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.gps_ubx_sbas);
 8010c74:	4b8f      	ldr	r3, [pc, #572]	; (8010eb4 <evtMspReceive+0x1474>)
 8010c76:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8010c7a:	b2db      	uxtb	r3, r3
 8010c7c:	4619      	mov	r1, r3
 8010c7e:	68f8      	ldr	r0, [r7, #12]
 8010c80:	f007 fb4c 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.multiwiicurrentoutput);
 8010c84:	4b8b      	ldr	r3, [pc, #556]	; (8010eb4 <evtMspReceive+0x1474>)
 8010c86:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	68f8      	ldr	r0, [r7, #12]
 8010c8e:	f007 fb45 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.rssi_aux_channel);
 8010c92:	4b88      	ldr	r3, [pc, #544]	; (8010eb4 <evtMspReceive+0x1474>)
 8010c94:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8010c98:	4619      	mov	r1, r3
 8010c9a:	68f8      	ldr	r0, [r7, #12]
 8010c9c:	f007 fb3e 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, 0);
 8010ca0:	2100      	movs	r1, #0
 8010ca2:	68f8      	ldr	r0, [r7, #12]
 8010ca4:	f007 fb3a 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, cfg.mag_declination / 10); // TODO check this shit
 8010ca8:	4b83      	ldr	r3, [pc, #524]	; (8010eb8 <evtMspReceive+0x1478>)
 8010caa:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8010cae:	4a83      	ldr	r2, [pc, #524]	; (8010ebc <evtMspReceive+0x147c>)
 8010cb0:	fb82 1203 	smull	r1, r2, r2, r3
 8010cb4:	1092      	asrs	r2, r2, #2
 8010cb6:	17db      	asrs	r3, r3, #31
 8010cb8:	1ad3      	subs	r3, r2, r3
 8010cba:	b21b      	sxth	r3, r3
 8010cbc:	b29b      	uxth	r3, r3
 8010cbe:	4619      	mov	r1, r3
 8010cc0:	68f8      	ldr	r0, [r7, #12]
 8010cc2:	f007 fb71 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatscale);
 8010cc6:	4b7b      	ldr	r3, [pc, #492]	; (8010eb4 <evtMspReceive+0x1474>)
 8010cc8:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 8010ccc:	4619      	mov	r1, r3
 8010cce:	68f8      	ldr	r0, [r7, #12]
 8010cd0:	f007 fb24 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatmincellvoltage);
 8010cd4:	4b77      	ldr	r3, [pc, #476]	; (8010eb4 <evtMspReceive+0x1474>)
 8010cd6:	f893 317f 	ldrb.w	r3, [r3, #383]	; 0x17f
 8010cda:	4619      	mov	r1, r3
 8010cdc:	68f8      	ldr	r0, [r7, #12]
 8010cde:	f007 fb1d 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatmaxcellvoltage);
 8010ce2:	4b74      	ldr	r3, [pc, #464]	; (8010eb4 <evtMspReceive+0x1474>)
 8010ce4:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 8010ce8:	4619      	mov	r1, r3
 8010cea:	68f8      	ldr	r0, [r7, #12]
 8010cec:	f007 fb16 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatwarningcellvoltage);
 8010cf0:	4b70      	ldr	r3, [pc, #448]	; (8010eb4 <evtMspReceive+0x1474>)
 8010cf2:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8010cf6:	4619      	mov	r1, r3
 8010cf8:	68f8      	ldr	r0, [r7, #12]
 8010cfa:	f007 fb0f 	bl	801831c <pifMsp_AddAnswer8>
        break;
 8010cfe:	e33c      	b.n	801137a <evtMspReceive+0x193a>

    case MSP_MOTOR_PINS:
        for (i = 0; i < 8; i++)
 8010d00:	2300      	movs	r3, #0
 8010d02:	637b      	str	r3, [r7, #52]	; 0x34
 8010d04:	e00a      	b.n	8010d1c <evtMspReceive+0x12dc>
            pifMsp_AddAnswer8(p_owner, i + 1);
 8010d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d08:	b2db      	uxtb	r3, r3
 8010d0a:	3301      	adds	r3, #1
 8010d0c:	b2db      	uxtb	r3, r3
 8010d0e:	4619      	mov	r1, r3
 8010d10:	68f8      	ldr	r0, [r7, #12]
 8010d12:	f007 fb03 	bl	801831c <pifMsp_AddAnswer8>
        for (i = 0; i < 8; i++)
 8010d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d18:	3301      	adds	r3, #1
 8010d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8010d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d1e:	2b07      	cmp	r3, #7
 8010d20:	d9f1      	bls.n	8010d06 <evtMspReceive+0x12c6>
        break;
 8010d22:	e32a      	b.n	801137a <evtMspReceive+0x193a>

#ifdef GPS
    case MSP_WP:
        wp_no = pifMsp_ReadData8(p_packet);    // get the wp number
 8010d24:	68b8      	ldr	r0, [r7, #8]
 8010d26:	f007 fa4f 	bl	80181c8 <pifMsp_ReadData8>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	76fb      	strb	r3, [r7, #27]
        if (wp_no == 0) {
 8010d2e:	7efb      	ldrb	r3, [r7, #27]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d106      	bne.n	8010d42 <evtMspReceive+0x1302>
            lat = GPS_home[LAT];
 8010d34:	4b62      	ldr	r3, [pc, #392]	; (8010ec0 <evtMspReceive+0x1480>)
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	62bb      	str	r3, [r7, #40]	; 0x28
            lon = GPS_home[LON];
 8010d3a:	4b61      	ldr	r3, [pc, #388]	; (8010ec0 <evtMspReceive+0x1480>)
 8010d3c:	685b      	ldr	r3, [r3, #4]
 8010d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8010d40:	e008      	b.n	8010d54 <evtMspReceive+0x1314>
        } else if (wp_no == 16) {
 8010d42:	7efb      	ldrb	r3, [r7, #27]
 8010d44:	2b10      	cmp	r3, #16
 8010d46:	d105      	bne.n	8010d54 <evtMspReceive+0x1314>
            lat = GPS_hold[LAT];
 8010d48:	4b5e      	ldr	r3, [pc, #376]	; (8010ec4 <evtMspReceive+0x1484>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	62bb      	str	r3, [r7, #40]	; 0x28
            lon = GPS_hold[LON];
 8010d4e:	4b5d      	ldr	r3, [pc, #372]	; (8010ec4 <evtMspReceive+0x1484>)
 8010d50:	685b      	ldr	r3, [r3, #4]
 8010d52:	627b      	str	r3, [r7, #36]	; 0x24
        }
        pifMsp_AddAnswer8(p_owner, wp_no);
 8010d54:	7efb      	ldrb	r3, [r7, #27]
 8010d56:	4619      	mov	r1, r3
 8010d58:	68f8      	ldr	r0, [r7, #12]
 8010d5a:	f007 fadf 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, lat);
 8010d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d60:	4619      	mov	r1, r3
 8010d62:	68f8      	ldr	r0, [r7, #12]
 8010d64:	f007 fb6c 	bl	8018440 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, lon);
 8010d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d6a:	4619      	mov	r1, r3
 8010d6c:	68f8      	ldr	r0, [r7, #12]
 8010d6e:	f007 fb67 	bl	8018440 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, AltHold);           // altitude (cm) will come here -- temporary implementation to test feature with apps
 8010d72:	4b55      	ldr	r3, [pc, #340]	; (8010ec8 <evtMspReceive+0x1488>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	4619      	mov	r1, r3
 8010d78:	68f8      	ldr	r0, [r7, #12]
 8010d7a:	f007 fb61 	bl	8018440 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer16(p_owner, 0);                 // heading  will come here (deg)
 8010d7e:	2100      	movs	r1, #0
 8010d80:	68f8      	ldr	r0, [r7, #12]
 8010d82:	f007 fb11 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, 0);                 // time to stay (ms) will come here
 8010d86:	2100      	movs	r1, #0
 8010d88:	68f8      	ldr	r0, [r7, #12]
 8010d8a:	f007 fb0d 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, 0);                  // nav flag will come here
 8010d8e:	2100      	movs	r1, #0
 8010d90:	68f8      	ldr	r0, [r7, #12]
 8010d92:	f007 fac3 	bl	801831c <pifMsp_AddAnswer8>
        break;
 8010d96:	e2f0      	b.n	801137a <evtMspReceive+0x193a>

    case MSP_SET_WP:
        wp_no = pifMsp_ReadData8(p_packet);    //get the wp number
 8010d98:	68b8      	ldr	r0, [r7, #8]
 8010d9a:	f007 fa15 	bl	80181c8 <pifMsp_ReadData8>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	76fb      	strb	r3, [r7, #27]
        lat = pifMsp_ReadData32(p_packet);
 8010da2:	68b8      	ldr	r0, [r7, #8]
 8010da4:	f007 fa41 	bl	801822a <pifMsp_ReadData32>
 8010da8:	4603      	mov	r3, r0
 8010daa:	62bb      	str	r3, [r7, #40]	; 0x28
        lon = pifMsp_ReadData32(p_packet);
 8010dac:	68b8      	ldr	r0, [r7, #8]
 8010dae:	f007 fa3c 	bl	801822a <pifMsp_ReadData32>
 8010db2:	4603      	mov	r3, r0
 8010db4:	627b      	str	r3, [r7, #36]	; 0x24
        alt = pifMsp_ReadData32(p_packet);     // to set altitude (cm)
 8010db6:	68b8      	ldr	r0, [r7, #8]
 8010db8:	f007 fa37 	bl	801822a <pifMsp_ReadData32>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	623b      	str	r3, [r7, #32]
        pifMsp_ReadData16(p_packet);           // future: to set heading (deg)
 8010dc0:	68b8      	ldr	r0, [r7, #8]
 8010dc2:	f007 fa15 	bl	80181f0 <pifMsp_ReadData16>
        pifMsp_ReadData16(p_packet);           // future: to set time to stay (ms)
 8010dc6:	68b8      	ldr	r0, [r7, #8]
 8010dc8:	f007 fa12 	bl	80181f0 <pifMsp_ReadData16>
        pifMsp_ReadData8(p_packet);            // future: to set nav flag
 8010dcc:	68b8      	ldr	r0, [r7, #8]
 8010dce:	f007 f9fb 	bl	80181c8 <pifMsp_ReadData8>
        if (wp_no == 0) {
 8010dd2:	7efb      	ldrb	r3, [r7, #27]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d113      	bne.n	8010e00 <evtMspReceive+0x13c0>
            GPS_home[LAT] = lat;
 8010dd8:	4a39      	ldr	r2, [pc, #228]	; (8010ec0 <evtMspReceive+0x1480>)
 8010dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ddc:	6013      	str	r3, [r2, #0]
            GPS_home[LON] = lon;
 8010dde:	4a38      	ldr	r2, [pc, #224]	; (8010ec0 <evtMspReceive+0x1480>)
 8010de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de2:	6053      	str	r3, [r2, #4]
            f.GPS_HOME_MODE = 0;        // with this flag, GPS_set_next_wp will be called in the next loop -- OK with SERIAL GPS / OK with I2C GPS
 8010de4:	4b39      	ldr	r3, [pc, #228]	; (8010ecc <evtMspReceive+0x148c>)
 8010de6:	2200      	movs	r2, #0
 8010de8:	71da      	strb	r2, [r3, #7]
            f.GPS_FIX_HOME = 1;
 8010dea:	4b38      	ldr	r3, [pc, #224]	; (8010ecc <evtMspReceive+0x148c>)
 8010dec:	2201      	movs	r2, #1
 8010dee:	731a      	strb	r2, [r3, #12]
            if (alt != 0)
 8010df0:	6a3b      	ldr	r3, [r7, #32]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	f000 82ba 	beq.w	801136c <evtMspReceive+0x192c>
                AltHold = alt;          // temporary implementation to test feature with apps
 8010df8:	4a33      	ldr	r2, [pc, #204]	; (8010ec8 <evtMspReceive+0x1488>)
 8010dfa:	6a3b      	ldr	r3, [r7, #32]
 8010dfc:	6013      	str	r3, [r2, #0]
            if (alt != 0)
                AltHold = alt;          // temporary implementation to test feature with apps
            nav_mode = NAV_MODE_WP;
            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
        }
        break;
 8010dfe:	e2b5      	b.n	801136c <evtMspReceive+0x192c>
        } else if (wp_no == 16) {       // OK with SERIAL GPS  --  NOK for I2C GPS / needs more code dev in order to inject GPS coord inside I2C GPS
 8010e00:	7efb      	ldrb	r3, [r7, #27]
 8010e02:	2b10      	cmp	r3, #16
 8010e04:	f040 82b2 	bne.w	801136c <evtMspReceive+0x192c>
            GPS_hold[LAT] = lat;
 8010e08:	4a2e      	ldr	r2, [pc, #184]	; (8010ec4 <evtMspReceive+0x1484>)
 8010e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e0c:	6013      	str	r3, [r2, #0]
            GPS_hold[LON] = lon;
 8010e0e:	4a2d      	ldr	r2, [pc, #180]	; (8010ec4 <evtMspReceive+0x1484>)
 8010e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e12:	6053      	str	r3, [r2, #4]
            if (alt != 0)
 8010e14:	6a3b      	ldr	r3, [r7, #32]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d002      	beq.n	8010e20 <evtMspReceive+0x13e0>
                AltHold = alt;          // temporary implementation to test feature with apps
 8010e1a:	4a2b      	ldr	r2, [pc, #172]	; (8010ec8 <evtMspReceive+0x1488>)
 8010e1c:	6a3b      	ldr	r3, [r7, #32]
 8010e1e:	6013      	str	r3, [r2, #0]
            nav_mode = NAV_MODE_WP;
 8010e20:	4b2b      	ldr	r3, [pc, #172]	; (8010ed0 <evtMspReceive+0x1490>)
 8010e22:	2202      	movs	r2, #2
 8010e24:	701a      	strb	r2, [r3, #0]
            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
 8010e26:	492b      	ldr	r1, [pc, #172]	; (8010ed4 <evtMspReceive+0x1494>)
 8010e28:	4826      	ldr	r0, [pc, #152]	; (8010ec4 <evtMspReceive+0x1484>)
 8010e2a:	f7f8 f9f1 	bl	8009210 <GPS_set_next_wp>
        break;
 8010e2e:	e29d      	b.n	801136c <evtMspReceive+0x192c>
#endif  // GPS

    case MSP_RESET_CONF:
        if (!f.ARMED)
 8010e30:	4b26      	ldr	r3, [pc, #152]	; (8010ecc <evtMspReceive+0x148c>)
 8010e32:	785b      	ldrb	r3, [r3, #1]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	f040 829b 	bne.w	8011370 <evtMspReceive+0x1930>
            checkFirstTime(true);
 8010e3a:	2001      	movs	r0, #1
 8010e3c:	f7f5 fdd0 	bl	80069e0 <checkFirstTime>
        break;
 8010e40:	e296      	b.n	8011370 <evtMspReceive+0x1930>

    case MSP_ACC_CALIBRATION:
        if (!f.ARMED)
 8010e42:	4b22      	ldr	r3, [pc, #136]	; (8010ecc <evtMspReceive+0x148c>)
 8010e44:	785b      	ldrb	r3, [r3, #1]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	f040 8294 	bne.w	8011374 <evtMspReceive+0x1934>
            calibratingA = CALIBRATING_ACC_CYCLES;
 8010e4c:	4b22      	ldr	r3, [pc, #136]	; (8010ed8 <evtMspReceive+0x1498>)
 8010e4e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010e52:	801a      	strh	r2, [r3, #0]
        break;
 8010e54:	e28e      	b.n	8011374 <evtMspReceive+0x1934>

    case MSP_MAG_CALIBRATION:
        if (!f.ARMED)
 8010e56:	4b1d      	ldr	r3, [pc, #116]	; (8010ecc <evtMspReceive+0x148c>)
 8010e58:	785b      	ldrb	r3, [r3, #1]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	f040 828c 	bne.w	8011378 <evtMspReceive+0x1938>
            f.CALIBRATE_MAG = 1;
 8010e60:	4b1a      	ldr	r3, [pc, #104]	; (8010ecc <evtMspReceive+0x148c>)
 8010e62:	2201      	movs	r2, #1
 8010e64:	739a      	strb	r2, [r3, #14]
        break;
 8010e66:	e287      	b.n	8011378 <evtMspReceive+0x1938>

    case MSP_EEPROM_WRITE:
        if (f.ARMED) {
 8010e68:	4b18      	ldr	r3, [pc, #96]	; (8010ecc <evtMspReceive+0x148c>)
 8010e6a:	785b      	ldrb	r3, [r3, #1]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d004      	beq.n	8010e7a <evtMspReceive+0x143a>
            pifMsp_MakeError(p_owner, p_packet);
 8010e70:	68b9      	ldr	r1, [r7, #8]
 8010e72:	68f8      	ldr	r0, [r7, #12]
 8010e74:	f007 fb82 	bl	801857c <pifMsp_MakeError>
        } else {
            writeEEPROM(0, true);
        }
        break;
 8010e78:	e27f      	b.n	801137a <evtMspReceive+0x193a>
            writeEEPROM(0, true);
 8010e7a:	2101      	movs	r1, #1
 8010e7c:	2000      	movs	r0, #0
 8010e7e:	f7f5 fd2d 	bl	80068dc <writeEEPROM>
        break;
 8010e82:	e27a      	b.n	801137a <evtMspReceive+0x193a>

    case MSP_DEBUG:
        // make use of this crap, output some useful QA statistics
        if (mcfg.looptime) debug[0] = (int16_t)cycleTime - mcfg.looptime + mcfg.looptime / 10;
 8010e84:	4b0b      	ldr	r3, [pc, #44]	; (8010eb4 <evtMspReceive+0x1474>)
 8010e86:	899b      	ldrh	r3, [r3, #12]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d02d      	beq.n	8010ee8 <evtMspReceive+0x14a8>
 8010e8c:	4b13      	ldr	r3, [pc, #76]	; (8010edc <evtMspReceive+0x149c>)
 8010e8e:	881a      	ldrh	r2, [r3, #0]
 8010e90:	4b08      	ldr	r3, [pc, #32]	; (8010eb4 <evtMspReceive+0x1474>)
 8010e92:	899b      	ldrh	r3, [r3, #12]
 8010e94:	1ad3      	subs	r3, r2, r3
 8010e96:	b29a      	uxth	r2, r3
 8010e98:	4b06      	ldr	r3, [pc, #24]	; (8010eb4 <evtMspReceive+0x1474>)
 8010e9a:	899b      	ldrh	r3, [r3, #12]
 8010e9c:	4910      	ldr	r1, [pc, #64]	; (8010ee0 <evtMspReceive+0x14a0>)
 8010e9e:	fba1 1303 	umull	r1, r3, r1, r3
 8010ea2:	08db      	lsrs	r3, r3, #3
 8010ea4:	b29b      	uxth	r3, r3
 8010ea6:	4413      	add	r3, r2
 8010ea8:	b29b      	uxth	r3, r3
 8010eaa:	b21a      	sxth	r2, r3
 8010eac:	4b0d      	ldr	r3, [pc, #52]	; (8010ee4 <evtMspReceive+0x14a4>)
 8010eae:	801a      	strh	r2, [r3, #0]
 8010eb0:	e01f      	b.n	8010ef2 <evtMspReceive+0x14b2>
 8010eb2:	bf00      	nop
 8010eb4:	2000089c 	.word	0x2000089c
 8010eb8:	20000e08 	.word	0x20000e08
 8010ebc:	66666667 	.word	0x66666667
 8010ec0:	20001818 	.word	0x20001818
 8010ec4:	20001824 	.word	0x20001824
 8010ec8:	200014c0 	.word	0x200014c0
 8010ecc:	2000174c 	.word	0x2000174c
 8010ed0:	2000184c 	.word	0x2000184c
 8010ed4:	20001828 	.word	0x20001828
 8010ed8:	20001a78 	.word	0x20001a78
 8010edc:	2000176c 	.word	0x2000176c
 8010ee0:	cccccccd 	.word	0xcccccccd
 8010ee4:	20001764 	.word	0x20001764
        else debug[0] = cycleTime;
 8010ee8:	4ba6      	ldr	r3, [pc, #664]	; (8011184 <evtMspReceive+0x1744>)
 8010eea:	881b      	ldrh	r3, [r3, #0]
 8010eec:	b21a      	sxth	r2, r3
 8010eee:	4ba6      	ldr	r3, [pc, #664]	; (8011188 <evtMspReceive+0x1748>)
 8010ef0:	801a      	strh	r2, [r3, #0]
        debug[1] = pif_performance._use_rate;
 8010ef2:	4ba6      	ldr	r3, [pc, #664]	; (801118c <evtMspReceive+0x174c>)
 8010ef4:	791b      	ldrb	r3, [r3, #4]
 8010ef6:	b21a      	sxth	r2, r3
 8010ef8:	4ba3      	ldr	r3, [pc, #652]	; (8011188 <evtMspReceive+0x1748>)
 8010efa:	805a      	strh	r2, [r3, #2]
        debug[3] = ((g_crystal_clock / 1000000) * 1000) + (g_core_clock / 1000000);         // XX0YY [crystal clock : core clock]
 8010efc:	4ba4      	ldr	r3, [pc, #656]	; (8011190 <evtMspReceive+0x1750>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	4aa4      	ldr	r2, [pc, #656]	; (8011194 <evtMspReceive+0x1754>)
 8010f02:	fba2 2303 	umull	r2, r3, r2, r3
 8010f06:	0c9b      	lsrs	r3, r3, #18
 8010f08:	b29b      	uxth	r3, r3
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	0152      	lsls	r2, r2, #5
 8010f0e:	1ad2      	subs	r2, r2, r3
 8010f10:	0092      	lsls	r2, r2, #2
 8010f12:	4413      	add	r3, r2
 8010f14:	00db      	lsls	r3, r3, #3
 8010f16:	b29a      	uxth	r2, r3
 8010f18:	4b9f      	ldr	r3, [pc, #636]	; (8011198 <evtMspReceive+0x1758>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	499d      	ldr	r1, [pc, #628]	; (8011194 <evtMspReceive+0x1754>)
 8010f1e:	fba1 1303 	umull	r1, r3, r1, r3
 8010f22:	0c9b      	lsrs	r3, r3, #18
 8010f24:	b29b      	uxth	r3, r3
 8010f26:	4413      	add	r3, r2
 8010f28:	b29b      	uxth	r3, r3
 8010f2a:	b21a      	sxth	r2, r3
 8010f2c:	4b96      	ldr	r3, [pc, #600]	; (8011188 <evtMspReceive+0x1748>)
 8010f2e:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 4; i++)
 8010f30:	2300      	movs	r3, #0
 8010f32:	637b      	str	r3, [r7, #52]	; 0x34
 8010f34:	e00b      	b.n	8010f4e <evtMspReceive+0x150e>
            pifMsp_AddAnswer16(p_owner, debug[i]);      // 4 variables are here for general monitoring purpose
 8010f36:	4a94      	ldr	r2, [pc, #592]	; (8011188 <evtMspReceive+0x1748>)
 8010f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f3a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010f3e:	b29b      	uxth	r3, r3
 8010f40:	4619      	mov	r1, r3
 8010f42:	68f8      	ldr	r0, [r7, #12]
 8010f44:	f007 fa30 	bl	80183a8 <pifMsp_AddAnswer16>
        for (i = 0; i < 4; i++)
 8010f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f4a:	3301      	adds	r3, #1
 8010f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8010f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f50:	2b03      	cmp	r3, #3
 8010f52:	d9f0      	bls.n	8010f36 <evtMspReceive+0x14f6>
        break;
 8010f54:	e211      	b.n	801137a <evtMspReceive+0x193a>

    // Additional commands that are not compatible with MultiWii
    case MSP_ACC_TRIM:
        pifMsp_AddAnswer16(p_owner, cfg.angleTrim[PITCH]);
 8010f56:	4b91      	ldr	r3, [pc, #580]	; (801119c <evtMspReceive+0x175c>)
 8010f58:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8010f5c:	b29b      	uxth	r3, r3
 8010f5e:	4619      	mov	r1, r3
 8010f60:	68f8      	ldr	r0, [r7, #12]
 8010f62:	f007 fa21 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.angleTrim[ROLL]);
 8010f66:	4b8d      	ldr	r3, [pc, #564]	; (801119c <evtMspReceive+0x175c>)
 8010f68:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8010f6c:	b29b      	uxth	r3, r3
 8010f6e:	4619      	mov	r1, r3
 8010f70:	68f8      	ldr	r0, [r7, #12]
 8010f72:	f007 fa19 	bl	80183a8 <pifMsp_AddAnswer16>
        break;
 8010f76:	e200      	b.n	801137a <evtMspReceive+0x193a>

    case MSP_UID:
        pifMsp_AddAnswer32(p_owner, g_unique_id[0]);
 8010f78:	4b89      	ldr	r3, [pc, #548]	; (80111a0 <evtMspReceive+0x1760>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	4619      	mov	r1, r3
 8010f7e:	68f8      	ldr	r0, [r7, #12]
 8010f80:	f007 fa5e 	bl	8018440 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, g_unique_id[1]);
 8010f84:	4b86      	ldr	r3, [pc, #536]	; (80111a0 <evtMspReceive+0x1760>)
 8010f86:	685b      	ldr	r3, [r3, #4]
 8010f88:	4619      	mov	r1, r3
 8010f8a:	68f8      	ldr	r0, [r7, #12]
 8010f8c:	f007 fa58 	bl	8018440 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, g_unique_id[2]);
 8010f90:	4b83      	ldr	r3, [pc, #524]	; (80111a0 <evtMspReceive+0x1760>)
 8010f92:	689b      	ldr	r3, [r3, #8]
 8010f94:	4619      	mov	r1, r3
 8010f96:	68f8      	ldr	r0, [r7, #12]
 8010f98:	f007 fa52 	bl	8018440 <pifMsp_AddAnswer32>
        break;
 8010f9c:	e1ed      	b.n	801137a <evtMspReceive+0x193a>

#ifdef GPS
    case MSP_GPSSVINFO:
        pifMsp_AddAnswer8(p_owner, GPS_numCh);
 8010f9e:	4b81      	ldr	r3, [pc, #516]	; (80111a4 <evtMspReceive+0x1764>)
 8010fa0:	781b      	ldrb	r3, [r3, #0]
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	68f8      	ldr	r0, [r7, #12]
 8010fa6:	f007 f9b9 	bl	801831c <pifMsp_AddAnswer8>
        for (i = 0; i < GPS_numCh; i++) {
 8010faa:	2300      	movs	r3, #0
 8010fac:	637b      	str	r3, [r7, #52]	; 0x34
 8010fae:	e022      	b.n	8010ff6 <evtMspReceive+0x15b6>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_chn[i]);
 8010fb0:	4a7d      	ldr	r2, [pc, #500]	; (80111a8 <evtMspReceive+0x1768>)
 8010fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fb4:	4413      	add	r3, r2
 8010fb6:	781b      	ldrb	r3, [r3, #0]
 8010fb8:	4619      	mov	r1, r3
 8010fba:	68f8      	ldr	r0, [r7, #12]
 8010fbc:	f007 f9ae 	bl	801831c <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_svid[i]);
 8010fc0:	4a7a      	ldr	r2, [pc, #488]	; (80111ac <evtMspReceive+0x176c>)
 8010fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fc4:	4413      	add	r3, r2
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	4619      	mov	r1, r3
 8010fca:	68f8      	ldr	r0, [r7, #12]
 8010fcc:	f007 f9a6 	bl	801831c <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_quality[i]);
 8010fd0:	4a77      	ldr	r2, [pc, #476]	; (80111b0 <evtMspReceive+0x1770>)
 8010fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fd4:	4413      	add	r3, r2
 8010fd6:	781b      	ldrb	r3, [r3, #0]
 8010fd8:	4619      	mov	r1, r3
 8010fda:	68f8      	ldr	r0, [r7, #12]
 8010fdc:	f007 f99e 	bl	801831c <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_cno[i]);
 8010fe0:	4a74      	ldr	r2, [pc, #464]	; (80111b4 <evtMspReceive+0x1774>)
 8010fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fe4:	4413      	add	r3, r2
 8010fe6:	781b      	ldrb	r3, [r3, #0]
 8010fe8:	4619      	mov	r1, r3
 8010fea:	68f8      	ldr	r0, [r7, #12]
 8010fec:	f007 f996 	bl	801831c <pifMsp_AddAnswer8>
        for (i = 0; i < GPS_numCh; i++) {
 8010ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ff2:	3301      	adds	r3, #1
 8010ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8010ff6:	4b6b      	ldr	r3, [pc, #428]	; (80111a4 <evtMspReceive+0x1764>)
 8010ff8:	781b      	ldrb	r3, [r3, #0]
 8010ffa:	461a      	mov	r2, r3
 8010ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ffe:	4293      	cmp	r3, r2
 8011000:	d3d6      	bcc.n	8010fb0 <evtMspReceive+0x1570>
        }
        // Poll new SVINFO from GPS
        gpsPollSvinfo();
 8011002:	f7f7 fbd7 	bl	80087b4 <gpsPollSvinfo>
        break;
 8011006:	e1b8      	b.n	801137a <evtMspReceive+0x193a>
    case MSP_GPSDEBUGINFO:
        if (sensors(SENSOR_GPS)) {
 8011008:	2020      	movs	r0, #32
 801100a:	f7f6 f801 	bl	8007010 <sensors>
 801100e:	4603      	mov	r3, r0
 8011010:	2b00      	cmp	r3, #0
 8011012:	d012      	beq.n	801103a <evtMspReceive+0x15fa>
            pifMsp_AddAnswer32(p_owner, GPS_update_rate[1] - GPS_update_rate[0]);
 8011014:	4b68      	ldr	r3, [pc, #416]	; (80111b8 <evtMspReceive+0x1778>)
 8011016:	685a      	ldr	r2, [r3, #4]
 8011018:	4b67      	ldr	r3, [pc, #412]	; (80111b8 <evtMspReceive+0x1778>)
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	1ad3      	subs	r3, r2, r3
 801101e:	4619      	mov	r1, r3
 8011020:	68f8      	ldr	r0, [r7, #12]
 8011022:	f007 fa0d 	bl	8018440 <pifMsp_AddAnswer32>
            pifMsp_AddAnswer32(p_owner, GPS_svinfo_rate[1] - GPS_svinfo_rate[0]);
 8011026:	4b65      	ldr	r3, [pc, #404]	; (80111bc <evtMspReceive+0x177c>)
 8011028:	685a      	ldr	r2, [r3, #4]
 801102a:	4b64      	ldr	r3, [pc, #400]	; (80111bc <evtMspReceive+0x177c>)
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	1ad3      	subs	r3, r2, r3
 8011030:	4619      	mov	r1, r3
 8011032:	68f8      	ldr	r0, [r7, #12]
 8011034:	f007 fa04 	bl	8018440 <pifMsp_AddAnswer32>
 8011038:	e007      	b.n	801104a <evtMspReceive+0x160a>
        } else {
            pifMsp_AddAnswer32(p_owner, 0);
 801103a:	2100      	movs	r1, #0
 801103c:	68f8      	ldr	r0, [r7, #12]
 801103e:	f007 f9ff 	bl	8018440 <pifMsp_AddAnswer32>
            pifMsp_AddAnswer32(p_owner, 0);
 8011042:	2100      	movs	r1, #0
 8011044:	68f8      	ldr	r0, [r7, #12]
 8011046:	f007 f9fb 	bl	8018440 <pifMsp_AddAnswer32>
        }
        pifMsp_AddAnswer32(p_owner, GPS_HorizontalAcc);
 801104a:	4b5d      	ldr	r3, [pc, #372]	; (80111c0 <evtMspReceive+0x1780>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	4619      	mov	r1, r3
 8011050:	68f8      	ldr	r0, [r7, #12]
 8011052:	f007 f9f5 	bl	8018440 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, GPS_VerticalAcc);
 8011056:	4b5b      	ldr	r3, [pc, #364]	; (80111c4 <evtMspReceive+0x1784>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	4619      	mov	r1, r3
 801105c:	68f8      	ldr	r0, [r7, #12]
 801105e:	f007 f9ef 	bl	8018440 <pifMsp_AddAnswer32>
        break;
 8011062:	e18a      	b.n	801137a <evtMspReceive+0x193a>
#endif  // GPS

    case MSP_SET_CONFIG:
        mcfg.mixerConfiguration = pifMsp_ReadData8(p_packet); // multitype
 8011064:	68b8      	ldr	r0, [r7, #8]
 8011066:	f007 f8af 	bl	80181c8 <pifMsp_ReadData8>
 801106a:	4603      	mov	r3, r0
 801106c:	461a      	mov	r2, r3
 801106e:	4b56      	ldr	r3, [pc, #344]	; (80111c8 <evtMspReceive+0x1788>)
 8011070:	715a      	strb	r2, [r3, #5]
        featureClearAll();
 8011072:	f7f6 f851 	bl	8007118 <featureClearAll>
        featureSet(pifMsp_ReadData32(p_packet)); // features bitmap
 8011076:	68b8      	ldr	r0, [r7, #8]
 8011078:	f007 f8d7 	bl	801822a <pifMsp_ReadData32>
 801107c:	4603      	mov	r3, r0
 801107e:	4618      	mov	r0, r3
 8011080:	f7f6 f824 	bl	80070cc <featureSet>
        mcfg.serialrx_type = pifMsp_ReadData8(p_packet); // serialrx_type
 8011084:	68b8      	ldr	r0, [r7, #8]
 8011086:	f007 f89f 	bl	80181c8 <pifMsp_ReadData8>
 801108a:	4603      	mov	r3, r0
 801108c:	461a      	mov	r2, r3
 801108e:	4b4e      	ldr	r3, [pc, #312]	; (80111c8 <evtMspReceive+0x1788>)
 8011090:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
        mcfg.board_align_roll = pifMsp_ReadData16(p_packet); // board_align_roll
 8011094:	68b8      	ldr	r0, [r7, #8]
 8011096:	f007 f8ab 	bl	80181f0 <pifMsp_ReadData16>
 801109a:	4603      	mov	r3, r0
 801109c:	b21a      	sxth	r2, r3
 801109e:	4b4a      	ldr	r3, [pc, #296]	; (80111c8 <evtMspReceive+0x1788>)
 80110a0:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
        mcfg.board_align_pitch = pifMsp_ReadData16(p_packet); // board_align_pitch
 80110a4:	68b8      	ldr	r0, [r7, #8]
 80110a6:	f007 f8a3 	bl	80181f0 <pifMsp_ReadData16>
 80110aa:	4603      	mov	r3, r0
 80110ac:	b21a      	sxth	r2, r3
 80110ae:	4b46      	ldr	r3, [pc, #280]	; (80111c8 <evtMspReceive+0x1788>)
 80110b0:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
        mcfg.board_align_yaw = pifMsp_ReadData16(p_packet); // board_align_yaw
 80110b4:	68b8      	ldr	r0, [r7, #8]
 80110b6:	f007 f89b 	bl	80181f0 <pifMsp_ReadData16>
 80110ba:	4603      	mov	r3, r0
 80110bc:	b21a      	sxth	r2, r3
 80110be:	4b42      	ldr	r3, [pc, #264]	; (80111c8 <evtMspReceive+0x1788>)
 80110c0:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
        mcfg.currentscale = pifMsp_ReadData16(p_packet);
 80110c4:	68b8      	ldr	r0, [r7, #8]
 80110c6:	f007 f893 	bl	80181f0 <pifMsp_ReadData16>
 80110ca:	4603      	mov	r3, r0
 80110cc:	461a      	mov	r2, r3
 80110ce:	4b3e      	ldr	r3, [pc, #248]	; (80111c8 <evtMspReceive+0x1788>)
 80110d0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
        mcfg.currentoffset = pifMsp_ReadData16(p_packet);
 80110d4:	68b8      	ldr	r0, [r7, #8]
 80110d6:	f007 f88b 	bl	80181f0 <pifMsp_ReadData16>
 80110da:	4603      	mov	r3, r0
 80110dc:	461a      	mov	r2, r3
 80110de:	4b3a      	ldr	r3, [pc, #232]	; (80111c8 <evtMspReceive+0x1788>)
 80110e0:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
        mcfg.motor_pwm_rate = pifMsp_ReadData16(p_packet);
 80110e4:	68b8      	ldr	r0, [r7, #8]
 80110e6:	f007 f883 	bl	80181f0 <pifMsp_ReadData16>
 80110ea:	4603      	mov	r3, r0
 80110ec:	461a      	mov	r2, r3
 80110ee:	4b36      	ldr	r3, [pc, #216]	; (80111c8 <evtMspReceive+0x1788>)
 80110f0:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
        cfg.rollPitchRate[0] = pifMsp_ReadData8(p_packet);
 80110f4:	68b8      	ldr	r0, [r7, #8]
 80110f6:	f007 f867 	bl	80181c8 <pifMsp_ReadData8>
 80110fa:	4603      	mov	r3, r0
 80110fc:	461a      	mov	r2, r3
 80110fe:	4b27      	ldr	r3, [pc, #156]	; (801119c <evtMspReceive+0x175c>)
 8011100:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        cfg.rollPitchRate[1] = pifMsp_ReadData8(p_packet);
 8011104:	68b8      	ldr	r0, [r7, #8]
 8011106:	f007 f85f 	bl	80181c8 <pifMsp_ReadData8>
 801110a:	4603      	mov	r3, r0
 801110c:	461a      	mov	r2, r3
 801110e:	4b23      	ldr	r3, [pc, #140]	; (801119c <evtMspReceive+0x175c>)
 8011110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mcfg.power_adc_channel = pifMsp_ReadData8(p_packet);
 8011114:	68b8      	ldr	r0, [r7, #8]
 8011116:	f007 f857 	bl	80181c8 <pifMsp_ReadData8>
 801111a:	4603      	mov	r3, r0
 801111c:	461a      	mov	r2, r3
 801111e:	4b2a      	ldr	r3, [pc, #168]	; (80111c8 <evtMspReceive+0x1788>)
 8011120:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
        cfg.small_angle = pifMsp_ReadData8(p_packet);
 8011124:	68b8      	ldr	r0, [r7, #8]
 8011126:	f007 f84f 	bl	80181c8 <pifMsp_ReadData8>
 801112a:	4603      	mov	r3, r0
 801112c:	461a      	mov	r2, r3
 801112e:	4b1b      	ldr	r3, [pc, #108]	; (801119c <evtMspReceive+0x175c>)
 8011130:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        tmp = pifMsp_ReadData16(p_packet);
 8011134:	68b8      	ldr	r0, [r7, #8]
 8011136:	f007 f85b 	bl	80181f0 <pifMsp_ReadData16>
 801113a:	4603      	mov	r3, r0
 801113c:	617b      	str	r3, [r7, #20]
        if (tmp != mcfg.looptime) {
 801113e:	4b22      	ldr	r3, [pc, #136]	; (80111c8 <evtMspReceive+0x1788>)
 8011140:	899b      	ldrh	r3, [r3, #12]
 8011142:	461a      	mov	r2, r3
 8011144:	697b      	ldr	r3, [r7, #20]
 8011146:	4293      	cmp	r3, r2
 8011148:	d04d      	beq.n	80111e6 <evtMspReceive+0x17a6>
            if (mcfg.looptime && tmp) {
 801114a:	4b1f      	ldr	r3, [pc, #124]	; (80111c8 <evtMspReceive+0x1788>)
 801114c:	899b      	ldrh	r3, [r3, #12]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d00b      	beq.n	801116a <evtMspReceive+0x172a>
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d008      	beq.n	801116a <evtMspReceive+0x172a>
                pifTask_ChangePeriod(g_task_compute_imu, tmp);
 8011158:	4b1c      	ldr	r3, [pc, #112]	; (80111cc <evtMspReceive+0x178c>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	697a      	ldr	r2, [r7, #20]
 801115e:	b292      	uxth	r2, r2
 8011160:	4611      	mov	r1, r2
 8011162:	4618      	mov	r0, r3
 8011164:	f003 fdc2 	bl	8014cec <pifTask_ChangePeriod>
 8011168:	e039      	b.n	80111de <evtMspReceive+0x179e>
            }
            else {
                if (tmp) {
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d02f      	beq.n	80111d0 <evtMspReceive+0x1790>
                    pifTask_ChangeMode(g_task_compute_imu, TM_PERIOD_US, tmp);
 8011170:	4b16      	ldr	r3, [pc, #88]	; (80111cc <evtMspReceive+0x178c>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	697a      	ldr	r2, [r7, #20]
 8011176:	b292      	uxth	r2, r2
 8011178:	2103      	movs	r1, #3
 801117a:	4618      	mov	r0, r3
 801117c:	f003 fd78 	bl	8014c70 <pifTask_ChangeMode>
 8011180:	e02d      	b.n	80111de <evtMspReceive+0x179e>
 8011182:	bf00      	nop
 8011184:	2000176c 	.word	0x2000176c
 8011188:	20001764 	.word	0x20001764
 801118c:	20001dfc 	.word	0x20001dfc
 8011190:	20001738 	.word	0x20001738
 8011194:	431bde83 	.word	0x431bde83
 8011198:	2000173c 	.word	0x2000173c
 801119c:	20000e08 	.word	0x20000e08
 80111a0:	20001740 	.word	0x20001740
 80111a4:	2000184d 	.word	0x2000184d
 80111a8:	20001850 	.word	0x20001850
 80111ac:	20001870 	.word	0x20001870
 80111b0:	20001890 	.word	0x20001890
 80111b4:	200018b0 	.word	0x200018b0
 80111b8:	200018d0 	.word	0x200018d0
 80111bc:	200018d8 	.word	0x200018d8
 80111c0:	200018e0 	.word	0x200018e0
 80111c4:	200018e4 	.word	0x200018e4
 80111c8:	2000089c 	.word	0x2000089c
 80111cc:	200015a4 	.word	0x200015a4
                }
                else {
                    pifTask_ChangeMode(g_task_compute_imu, TM_ALWAYS, 100);	    // 100%
 80111d0:	4b6d      	ldr	r3, [pc, #436]	; (8011388 <evtMspReceive+0x1948>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	2264      	movs	r2, #100	; 0x64
 80111d6:	2101      	movs	r1, #1
 80111d8:	4618      	mov	r0, r3
 80111da:	f003 fd49 	bl	8014c70 <pifTask_ChangeMode>
                }
            }
            mcfg.looptime = tmp;
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	b29a      	uxth	r2, r3
 80111e2:	4b6a      	ldr	r3, [pc, #424]	; (801138c <evtMspReceive+0x194c>)
 80111e4:	819a      	strh	r2, [r3, #12]
        }
        cfg.locked_in = pifMsp_ReadData8(p_packet);
 80111e6:	68b8      	ldr	r0, [r7, #8]
 80111e8:	f006 ffee 	bl	80181c8 <pifMsp_ReadData8>
 80111ec:	4603      	mov	r3, r0
 80111ee:	461a      	mov	r2, r3
 80111f0:	4b67      	ldr	r3, [pc, #412]	; (8011390 <evtMspReceive+0x1950>)
 80111f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        /// ???
        break;
 80111f6:	e0c0      	b.n	801137a <evtMspReceive+0x193a>

    case MSP_CONFIG:
        pifMsp_AddAnswer8(p_owner, mcfg.mixerConfiguration);
 80111f8:	4b64      	ldr	r3, [pc, #400]	; (801138c <evtMspReceive+0x194c>)
 80111fa:	795b      	ldrb	r3, [r3, #5]
 80111fc:	4619      	mov	r1, r3
 80111fe:	68f8      	ldr	r0, [r7, #12]
 8011200:	f007 f88c 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, featureMask());
 8011204:	f7f5 ff94 	bl	8007130 <featureMask>
 8011208:	4603      	mov	r3, r0
 801120a:	4619      	mov	r1, r3
 801120c:	68f8      	ldr	r0, [r7, #12]
 801120e:	f007 f917 	bl	8018440 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer8(p_owner, mcfg.serialrx_type);
 8011212:	4b5e      	ldr	r3, [pc, #376]	; (801138c <evtMspReceive+0x194c>)
 8011214:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8011218:	4619      	mov	r1, r3
 801121a:	68f8      	ldr	r0, [r7, #12]
 801121c:	f007 f87e 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, mcfg.board_align_roll);
 8011220:	4b5a      	ldr	r3, [pc, #360]	; (801138c <evtMspReceive+0x194c>)
 8011222:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8011226:	b29b      	uxth	r3, r3
 8011228:	4619      	mov	r1, r3
 801122a:	68f8      	ldr	r0, [r7, #12]
 801122c:	f007 f8bc 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.board_align_pitch);
 8011230:	4b56      	ldr	r3, [pc, #344]	; (801138c <evtMspReceive+0x194c>)
 8011232:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8011236:	b29b      	uxth	r3, r3
 8011238:	4619      	mov	r1, r3
 801123a:	68f8      	ldr	r0, [r7, #12]
 801123c:	f007 f8b4 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.board_align_yaw);
 8011240:	4b52      	ldr	r3, [pc, #328]	; (801138c <evtMspReceive+0x194c>)
 8011242:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8011246:	b29b      	uxth	r3, r3
 8011248:	4619      	mov	r1, r3
 801124a:	68f8      	ldr	r0, [r7, #12]
 801124c:	f007 f8ac 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.currentscale);
 8011250:	4b4e      	ldr	r3, [pc, #312]	; (801138c <evtMspReceive+0x194c>)
 8011252:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
 8011256:	4619      	mov	r1, r3
 8011258:	68f8      	ldr	r0, [r7, #12]
 801125a:	f007 f8a5 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.currentoffset);
 801125e:	4b4b      	ldr	r3, [pc, #300]	; (801138c <evtMspReceive+0x194c>)
 8011260:	f8b3 317a 	ldrh.w	r3, [r3, #378]	; 0x17a
 8011264:	4619      	mov	r1, r3
 8011266:	68f8      	ldr	r0, [r7, #12]
 8011268:	f007 f89e 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.motor_pwm_rate);
 801126c:	4b47      	ldr	r3, [pc, #284]	; (801138c <evtMspReceive+0x194c>)
 801126e:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8011272:	4619      	mov	r1, r3
 8011274:	68f8      	ldr	r0, [r7, #12]
 8011276:	f007 f897 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, cfg.rollPitchRate[0]);
 801127a:	4b45      	ldr	r3, [pc, #276]	; (8011390 <evtMspReceive+0x1950>)
 801127c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8011280:	4619      	mov	r1, r3
 8011282:	68f8      	ldr	r0, [r7, #12]
 8011284:	f007 f84a 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.rollPitchRate[1]);
 8011288:	4b41      	ldr	r3, [pc, #260]	; (8011390 <evtMspReceive+0x1950>)
 801128a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801128e:	4619      	mov	r1, r3
 8011290:	68f8      	ldr	r0, [r7, #12]
 8011292:	f007 f843 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.power_adc_channel);
 8011296:	4b3d      	ldr	r3, [pc, #244]	; (801138c <evtMspReceive+0x194c>)
 8011298:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 801129c:	4619      	mov	r1, r3
 801129e:	68f8      	ldr	r0, [r7, #12]
 80112a0:	f007 f83c 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.small_angle);
 80112a4:	4b3a      	ldr	r3, [pc, #232]	; (8011390 <evtMspReceive+0x1950>)
 80112a6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80112aa:	4619      	mov	r1, r3
 80112ac:	68f8      	ldr	r0, [r7, #12]
 80112ae:	f007 f835 	bl	801831c <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, mcfg.looptime);
 80112b2:	4b36      	ldr	r3, [pc, #216]	; (801138c <evtMspReceive+0x194c>)
 80112b4:	899b      	ldrh	r3, [r3, #12]
 80112b6:	4619      	mov	r1, r3
 80112b8:	68f8      	ldr	r0, [r7, #12]
 80112ba:	f007 f875 	bl	80183a8 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, cfg.locked_in);
 80112be:	4b34      	ldr	r3, [pc, #208]	; (8011390 <evtMspReceive+0x1950>)
 80112c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80112c4:	4619      	mov	r1, r3
 80112c6:	68f8      	ldr	r0, [r7, #12]
 80112c8:	f007 f828 	bl	801831c <pifMsp_AddAnswer8>
        /// ???
        break;
 80112cc:	e055      	b.n	801137a <evtMspReceive+0x193a>

    case MSP_RCMAP:
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 80112ce:	2300      	movs	r3, #0
 80112d0:	637b      	str	r3, [r7, #52]	; 0x34
 80112d2:	e00c      	b.n	80112ee <evtMspReceive+0x18ae>
            pifMsp_AddAnswer8(p_owner, mcfg.rcmap[i]);
 80112d4:	4a2d      	ldr	r2, [pc, #180]	; (801138c <evtMspReceive+0x194c>)
 80112d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112d8:	4413      	add	r3, r2
 80112da:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 80112de:	781b      	ldrb	r3, [r3, #0]
 80112e0:	4619      	mov	r1, r3
 80112e2:	68f8      	ldr	r0, [r7, #12]
 80112e4:	f007 f81a 	bl	801831c <pifMsp_AddAnswer8>
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 80112e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112ea:	3301      	adds	r3, #1
 80112ec:	637b      	str	r3, [r7, #52]	; 0x34
 80112ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112f0:	2b07      	cmp	r3, #7
 80112f2:	d9ef      	bls.n	80112d4 <evtMspReceive+0x1894>
        break;
 80112f4:	e041      	b.n	801137a <evtMspReceive+0x193a>

    case MSP_SET_RCMAP:
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 80112f6:	2300      	movs	r3, #0
 80112f8:	637b      	str	r3, [r7, #52]	; 0x34
 80112fa:	e00e      	b.n	801131a <evtMspReceive+0x18da>
            mcfg.rcmap[i] = pifMsp_ReadData8(p_packet);
 80112fc:	68b8      	ldr	r0, [r7, #8]
 80112fe:	f006 ff63 	bl	80181c8 <pifMsp_ReadData8>
 8011302:	4603      	mov	r3, r0
 8011304:	4619      	mov	r1, r3
 8011306:	4a21      	ldr	r2, [pc, #132]	; (801138c <evtMspReceive+0x194c>)
 8011308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801130a:	4413      	add	r3, r2
 801130c:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8011310:	460a      	mov	r2, r1
 8011312:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8011314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011316:	3301      	adds	r3, #1
 8011318:	637b      	str	r3, [r7, #52]	; 0x34
 801131a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801131c:	2b07      	cmp	r3, #7
 801131e:	d9ed      	bls.n	80112fc <evtMspReceive+0x18bc>
        break;
 8011320:	e02b      	b.n	801137a <evtMspReceive+0x193a>

    case MSP_REBOOT:
        pendReboot = true;
 8011322:	4b1c      	ldr	r3, [pc, #112]	; (8011394 <evtMspReceive+0x1954>)
 8011324:	2201      	movs	r2, #1
 8011326:	701a      	strb	r2, [r3, #0]
        break;
 8011328:	e027      	b.n	801137a <evtMspReceive+0x193a>

    case MSP_BUILDINFO:
        for (i = 0; i < 11; i++)
 801132a:	2300      	movs	r3, #0
 801132c:	637b      	str	r3, [r7, #52]	; 0x34
 801132e:	e00a      	b.n	8011346 <evtMspReceive+0x1906>
            pifMsp_AddAnswer8(p_owner, build[i]); // MMM DD YYYY as ascii, MMM = Jan/Feb... etc
 8011330:	69fa      	ldr	r2, [r7, #28]
 8011332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011334:	4413      	add	r3, r2
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	4619      	mov	r1, r3
 801133a:	68f8      	ldr	r0, [r7, #12]
 801133c:	f006 ffee 	bl	801831c <pifMsp_AddAnswer8>
        for (i = 0; i < 11; i++)
 8011340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011342:	3301      	adds	r3, #1
 8011344:	637b      	str	r3, [r7, #52]	; 0x34
 8011346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011348:	2b0a      	cmp	r3, #10
 801134a:	d9f1      	bls.n	8011330 <evtMspReceive+0x18f0>
        pifMsp_AddAnswer32(p_owner, 0); // future exp
 801134c:	2100      	movs	r1, #0
 801134e:	68f8      	ldr	r0, [r7, #12]
 8011350:	f007 f876 	bl	8018440 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0); // future exp
 8011354:	2100      	movs	r1, #0
 8011356:	68f8      	ldr	r0, [r7, #12]
 8011358:	f007 f872 	bl	8018440 <pifMsp_AddAnswer32>
        break;
 801135c:	e00d      	b.n	801137a <evtMspReceive+0x193a>

    default:                   // we do not know how to handle the (valid) message, indicate error MSP $M!
        pifMsp_MakeError(p_owner, p_packet);
 801135e:	68b9      	ldr	r1, [r7, #8]
 8011360:	68f8      	ldr	r0, [r7, #12]
 8011362:	f007 f90b 	bl	801857c <pifMsp_MakeError>
        break;
 8011366:	e008      	b.n	801137a <evtMspReceive+0x193a>
        break;
 8011368:	bf00      	nop
 801136a:	e006      	b.n	801137a <evtMspReceive+0x193a>
        break;
 801136c:	bf00      	nop
 801136e:	e004      	b.n	801137a <evtMspReceive+0x193a>
        break;
 8011370:	bf00      	nop
 8011372:	e002      	b.n	801137a <evtMspReceive+0x193a>
        break;
 8011374:	bf00      	nop
 8011376:	e000      	b.n	801137a <evtMspReceive+0x193a>
        break;
 8011378:	bf00      	nop
    }
    pifMsp_SendAnswer(p_owner);
 801137a:	68f8      	ldr	r0, [r7, #12]
 801137c:	f007 f950 	bl	8018620 <pifMsp_SendAnswer>
}
 8011380:	bf00      	nop
 8011382:	373c      	adds	r7, #60	; 0x3c
 8011384:	46bd      	mov	sp, r7
 8011386:	bd90      	pop	{r4, r7, pc}
 8011388:	200015a4 	.word	0x200015a4
 801138c:	2000089c 	.word	0x2000089c
 8011390:	20000e08 	.word	0x20000e08
 8011394:	20001c12 	.word	0x20001c12

08011398 <evtMspOtherPacket>:

static void evtMspOtherPacket(PifMsp* p_owner, uint8_t data, PifIssuerP p_issuer)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b084      	sub	sp, #16
 801139c:	af00      	add	r7, sp, #0
 801139e:	60f8      	str	r0, [r7, #12]
 80113a0:	460b      	mov	r3, r1
 80113a2:	607a      	str	r2, [r7, #4]
 80113a4:	72fb      	strb	r3, [r7, #11]
    (void)p_owner;
    (void)p_issuer;

    if (f.ARMED) return;
 80113a6:	4b0c      	ldr	r3, [pc, #48]	; (80113d8 <evtMspOtherPacket+0x40>)
 80113a8:	785b      	ldrb	r3, [r3, #1]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d110      	bne.n	80113d0 <evtMspOtherPacket+0x38>

    if (data == '#')
 80113ae:	7afb      	ldrb	r3, [r7, #11]
 80113b0:	2b23      	cmp	r3, #35	; 0x23
 80113b2:	d103      	bne.n	80113bc <evtMspOtherPacket+0x24>
        s_change_cli = TRUE;
 80113b4:	4b09      	ldr	r3, [pc, #36]	; (80113dc <evtMspOtherPacket+0x44>)
 80113b6:	2201      	movs	r2, #1
 80113b8:	701a      	strb	r2, [r3, #0]
 80113ba:	e00a      	b.n	80113d2 <evtMspOtherPacket+0x3a>
    else if (data == mcfg.reboot_character)
 80113bc:	4b08      	ldr	r3, [pc, #32]	; (80113e0 <evtMspOtherPacket+0x48>)
 80113be:	f893 3569 	ldrb.w	r3, [r3, #1385]	; 0x569
 80113c2:	7afa      	ldrb	r2, [r7, #11]
 80113c4:	429a      	cmp	r2, r3
 80113c6:	d104      	bne.n	80113d2 <evtMspOtherPacket+0x3a>
        systemReset(true);      // reboot to bootloader
 80113c8:	2001      	movs	r0, #1
 80113ca:	f7f0 fe3b 	bl	8002044 <systemReset>
 80113ce:	e000      	b.n	80113d2 <evtMspOtherPacket+0x3a>
    if (f.ARMED) return;
 80113d0:	bf00      	nop
}
 80113d2:	3710      	adds	r7, #16
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}
 80113d8:	2000174c 	.word	0x2000174c
 80113dc:	20001ccc 	.word	0x20001ccc
 80113e0:	2000089c 	.word	0x2000089c

080113e4 <serialCom>:

void serialCom(void)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	af00      	add	r7, sp, #0
    if (s_change_cli) {
 80113e8:	4b0c      	ldr	r3, [pc, #48]	; (801141c <serialCom+0x38>)
 80113ea:	781b      	ldrb	r3, [r3, #0]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d00b      	beq.n	8011408 <serialCom+0x24>
        s_change_cli = FALSE;
 80113f0:	4b0a      	ldr	r3, [pc, #40]	; (801141c <serialCom+0x38>)
 80113f2:	2200      	movs	r2, #0
 80113f4:	701a      	strb	r2, [r3, #0]

        pifMsp_DetachComm(&ports[0].pif_msp);
 80113f6:	480a      	ldr	r0, [pc, #40]	; (8011420 <serialCom+0x3c>)
 80113f8:	f006 fec0 	bl	801817c <pifMsp_DetachComm>
        cliInit(&core.mainport->comm);
 80113fc:	4b09      	ldr	r3, [pc, #36]	; (8011424 <serialCom+0x40>)
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	3304      	adds	r3, #4
 8011402:	4618      	mov	r0, r3
 8011404:	f7f5 f872 	bl	80064ec <cliInit>
    };

    if (pendReboot)
 8011408:	4b07      	ldr	r3, [pc, #28]	; (8011428 <serialCom+0x44>)
 801140a:	781b      	ldrb	r3, [r3, #0]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d002      	beq.n	8011416 <serialCom+0x32>
        systemReset(false); // noreturn
 8011410:	2000      	movs	r0, #0
 8011412:	f7f0 fe17 	bl	8002044 <systemReset>
}
 8011416:	bf00      	nop
 8011418:	bd80      	pop	{r7, pc}
 801141a:	bf00      	nop
 801141c:	20001ccc 	.word	0x20001ccc
 8011420:	20001c18 	.word	0x20001c18
 8011424:	200007e4 	.word	0x200007e4
 8011428:	20001c12 	.word	0x20001c12

0801142c <spektrumReadRawRC>:
static PifRcSpektrum s_spektrum;
static uint32_t spekChannelData[SPEK_2048_MAX_CHANNEL];


static uint16_t spektrumReadRawRC(uint8_t chan)
{
 801142c:	b480      	push	{r7}
 801142e:	b085      	sub	sp, #20
 8011430:	af00      	add	r7, sp, #0
 8011432:	4603      	mov	r3, r0
 8011434:	71fb      	strb	r3, [r7, #7]
	uint16_t data;

    if (chan >= s_spektrum.parent._channel_count) {
 8011436:	4b0d      	ldr	r3, [pc, #52]	; (801146c <spektrumReadRawRC+0x40>)
 8011438:	789b      	ldrb	r3, [r3, #2]
 801143a:	79fa      	ldrb	r2, [r7, #7]
 801143c:	429a      	cmp	r2, r3
 801143e:	d304      	bcc.n	801144a <spektrumReadRawRC+0x1e>
        data = mcfg.midrc;
 8011440:	4b0b      	ldr	r3, [pc, #44]	; (8011470 <spektrumReadRawRC+0x44>)
 8011442:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8011446:	81fb      	strh	r3, [r7, #14]
 8011448:	e009      	b.n	801145e <spektrumReadRawRC+0x32>
    } else {
        data = spekChannelData[mcfg.rcmap[chan]];
 801144a:	79fb      	ldrb	r3, [r7, #7]
 801144c:	4a08      	ldr	r2, [pc, #32]	; (8011470 <spektrumReadRawRC+0x44>)
 801144e:	4413      	add	r3, r2
 8011450:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 8011454:	461a      	mov	r2, r3
 8011456:	4b07      	ldr	r3, [pc, #28]	; (8011474 <spektrumReadRawRC+0x48>)
 8011458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801145c:	81fb      	strh	r3, [r7, #14]
    }

    return data;
 801145e:	89fb      	ldrh	r3, [r7, #14]
}
 8011460:	4618      	mov	r0, r3
 8011462:	3714      	adds	r7, #20
 8011464:	46bd      	mov	sp, r7
 8011466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146a:	4770      	bx	lr
 801146c:	20001cd0 	.word	0x20001cd0
 8011470:	2000089c 	.word	0x2000089c
 8011474:	20001d30 	.word	0x20001d30

08011478 <_evtSpektrumReceive>:

static void _evtSpektrumReceive(PifRc* p_owner, uint16_t* channel, PifIssuerP p_issuer)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b086      	sub	sp, #24
 801147c:	af00      	add	r7, sp, #0
 801147e:	60f8      	str	r0, [r7, #12]
 8011480:	60b9      	str	r1, [r7, #8]
 8011482:	607a      	str	r2, [r7, #4]
	int i;
    PifTask* p_task;

    // internal failsafe enabled and rx failsafe flag set
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 8011484:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011488:	f7f5 fe0a 	bl	80070a0 <feature>
 801148c:	4603      	mov	r3, r0
 801148e:	2b00      	cmp	r3, #0
 8011490:	d005      	beq.n	801149e <_evtSpektrumReceive+0x26>
 8011492:	68f8      	ldr	r0, [r7, #12]
 8011494:	f007 f930 	bl	80186f8 <pifRc_CheckFailSafe>
 8011498:	4603      	mov	r3, r0
 801149a:	2b00      	cmp	r3, #0
 801149c:	d11e      	bne.n	80114dc <_evtSpektrumReceive+0x64>

    failsafeCnt = 0;
 801149e:	4b11      	ldr	r3, [pc, #68]	; (80114e4 <_evtSpektrumReceive+0x6c>)
 80114a0:	2200      	movs	r2, #0
 80114a2:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < p_owner->_channel_count; i++) {
 80114a4:	2300      	movs	r3, #0
 80114a6:	617b      	str	r3, [r7, #20]
 80114a8:	e00c      	b.n	80114c4 <_evtSpektrumReceive+0x4c>
        spekChannelData[i] = channel[i];
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	005b      	lsls	r3, r3, #1
 80114ae:	68ba      	ldr	r2, [r7, #8]
 80114b0:	4413      	add	r3, r2
 80114b2:	881b      	ldrh	r3, [r3, #0]
 80114b4:	4619      	mov	r1, r3
 80114b6:	4a0c      	ldr	r2, [pc, #48]	; (80114e8 <_evtSpektrumReceive+0x70>)
 80114b8:	697b      	ldr	r3, [r7, #20]
 80114ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < p_owner->_channel_count; i++) {
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	3301      	adds	r3, #1
 80114c2:	617b      	str	r3, [r7, #20]
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	789b      	ldrb	r3, [r3, #2]
 80114c8:	461a      	mov	r2, r3
 80114ca:	697b      	ldr	r3, [r7, #20]
 80114cc:	4293      	cmp	r3, r2
 80114ce:	dbec      	blt.n	80114aa <_evtSpektrumReceive+0x32>
    }

	p_task = (PifTask*)p_issuer;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	613b      	str	r3, [r7, #16]
	pifTask_SetTrigger(p_task);
 80114d4:	6938      	ldr	r0, [r7, #16]
 80114d6:	f003 fc2b 	bl	8014d30 <pifTask_SetTrigger>
 80114da:	e000      	b.n	80114de <_evtSpektrumReceive+0x66>
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 80114dc:	bf00      	nop
}
 80114de:	3718      	adds	r7, #24
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}
 80114e4:	2000177e 	.word	0x2000177e
 80114e8:	20001d30 	.word	0x20001d30

080114ec <spektrumInit>:

BOOL spektrumInit(int uart, rcReadRawDataPtr *callback)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b084      	sub	sp, #16
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
 80114f4:	6039      	str	r1, [r7, #0]
    int b;
    uint8_t Protocol_id;

    for (b = 0; b < SPEK_2048_MAX_CHANNEL; b++)
 80114f6:	2300      	movs	r3, #0
 80114f8:	60fb      	str	r3, [r7, #12]
 80114fa:	e00a      	b.n	8011512 <spektrumInit+0x26>
        spekChannelData[b] = mcfg.midrc;
 80114fc:	4b2b      	ldr	r3, [pc, #172]	; (80115ac <spektrumInit+0xc0>)
 80114fe:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8011502:	4619      	mov	r1, r3
 8011504:	4a2a      	ldr	r2, [pc, #168]	; (80115b0 <spektrumInit+0xc4>)
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (b = 0; b < SPEK_2048_MAX_CHANNEL; b++)
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	3301      	adds	r3, #1
 8011510:	60fb      	str	r3, [r7, #12]
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	2b07      	cmp	r3, #7
 8011516:	ddf1      	ble.n	80114fc <spektrumInit+0x10>

    switch (mcfg.serialrx_type) {
 8011518:	4b24      	ldr	r3, [pc, #144]	; (80115ac <spektrumInit+0xc0>)
 801151a:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 801151e:	2b00      	cmp	r3, #0
 8011520:	d004      	beq.n	801152c <spektrumInit+0x40>
 8011522:	2b01      	cmp	r3, #1
 8011524:	d105      	bne.n	8011532 <spektrumInit+0x46>
    case SERIALRX_SPEKTRUM2048:
        Protocol_id = PIF_SPEKTRUM_PROTOCOL_ID_22MS_2048_DSMS;
 8011526:	23a2      	movs	r3, #162	; 0xa2
 8011528:	72fb      	strb	r3, [r7, #11]
        break;
 801152a:	e004      	b.n	8011536 <spektrumInit+0x4a>

    case SERIALRX_SPEKTRUM1024:
        Protocol_id = PIF_SPEKTRUM_PROTOCOL_ID_22MS_1024_DSM2;
 801152c:	2301      	movs	r3, #1
 801152e:	72fb      	strb	r3, [r7, #11]
        break;
 8011530:	e001      	b.n	8011536 <spektrumInit+0x4a>

    default:
        return FALSE;
 8011532:	2300      	movs	r3, #0
 8011534:	e035      	b.n	80115a2 <spektrumInit+0xb6>
    }

    // spekUart is set by spektrumBind() which is called very early at startup
    core.rcvrport = uartOpen(uart, 115200, MODE_RX, 2);		// 2ms
 8011536:	2302      	movs	r3, #2
 8011538:	2201      	movs	r2, #1
 801153a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 801153e:	6878      	ldr	r0, [r7, #4]
 8011540:	f7f0 ff40 	bl	80023c4 <uartOpen>
 8011544:	4603      	mov	r3, r0
 8011546:	4a1b      	ldr	r2, [pc, #108]	; (80115b4 <spektrumInit+0xc8>)
 8011548:	6113      	str	r3, [r2, #16]
    if (!core.rcvrport) return FALSE;
 801154a:	4b1a      	ldr	r3, [pc, #104]	; (80115b4 <spektrumInit+0xc8>)
 801154c:	691b      	ldr	r3, [r3, #16]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d101      	bne.n	8011556 <spektrumInit+0x6a>
 8011552:	2300      	movs	r3, #0
 8011554:	e025      	b.n	80115a2 <spektrumInit+0xb6>

    if (!pifRcSpektrum_Init(&s_spektrum, PIF_ID_AUTO, Protocol_id)) return FALSE;
 8011556:	7afb      	ldrb	r3, [r7, #11]
 8011558:	461a      	mov	r2, r3
 801155a:	2100      	movs	r1, #0
 801155c:	4816      	ldr	r0, [pc, #88]	; (80115b8 <spektrumInit+0xcc>)
 801155e:	f008 f87b 	bl	8019658 <pifRcSpektrum_Init>
 8011562:	4603      	mov	r3, r0
 8011564:	2b00      	cmp	r3, #0
 8011566:	d101      	bne.n	801156c <spektrumInit+0x80>
 8011568:	2300      	movs	r3, #0
 801156a:	e01a      	b.n	80115a2 <spektrumInit+0xb6>
    pifRc_AttachEvtReceive(&s_spektrum.parent, _evtSpektrumReceive, g_task_compute_rc);
 801156c:	4b13      	ldr	r3, [pc, #76]	; (80115bc <spektrumInit+0xd0>)
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	461a      	mov	r2, r3
 8011572:	4913      	ldr	r1, [pc, #76]	; (80115c0 <spektrumInit+0xd4>)
 8011574:	4810      	ldr	r0, [pc, #64]	; (80115b8 <spektrumInit+0xcc>)
 8011576:	f007 f8ad 	bl	80186d4 <pifRc_AttachEvtReceive>
    pifRcSpektrum_AttachComm(&s_spektrum, &core.rcvrport->comm);
 801157a:	4b0e      	ldr	r3, [pc, #56]	; (80115b4 <spektrumInit+0xc8>)
 801157c:	691b      	ldr	r3, [r3, #16]
 801157e:	3304      	adds	r3, #4
 8011580:	4619      	mov	r1, r3
 8011582:	480d      	ldr	r0, [pc, #52]	; (80115b8 <spektrumInit+0xcc>)
 8011584:	f008 f8fc 	bl	8019780 <pifRcSpektrum_AttachComm>

    if (callback)
 8011588:	683b      	ldr	r3, [r7, #0]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d002      	beq.n	8011594 <spektrumInit+0xa8>
        *callback = spektrumReadRawRC;
 801158e:	683b      	ldr	r3, [r7, #0]
 8011590:	4a0c      	ldr	r2, [pc, #48]	; (80115c4 <spektrumInit+0xd8>)
 8011592:	601a      	str	r2, [r3, #0]

    serialStartReceiveFunc(&core.rcvrport->comm);
 8011594:	4b07      	ldr	r3, [pc, #28]	; (80115b4 <spektrumInit+0xc8>)
 8011596:	691b      	ldr	r3, [r3, #16]
 8011598:	3304      	adds	r3, #4
 801159a:	4618      	mov	r0, r3
 801159c:	f7f1 f89e 	bl	80026dc <serialStartReceiveFunc>

    return TRUE;
 80115a0:	2301      	movs	r3, #1
}
 80115a2:	4618      	mov	r0, r3
 80115a4:	3710      	adds	r7, #16
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}
 80115aa:	bf00      	nop
 80115ac:	2000089c 	.word	0x2000089c
 80115b0:	20001d30 	.word	0x20001d30
 80115b4:	200007e4 	.word	0x200007e4
 80115b8:	20001cd0 	.word	0x20001cd0
 80115bc:	200015a8 	.word	0x200015a8
 80115c0:	08011479 	.word	0x08011479
 80115c4:	0801142d 	.word	0x0801142d

080115c8 <sumdReadRawRC>:
static PifRcSumd s_sumd;
static uint32_t sumdChannelData[SUMD_MAX_CHANNEL];


static uint16_t sumdReadRawRC(uint8_t chan)
{
 80115c8:	b480      	push	{r7}
 80115ca:	b083      	sub	sp, #12
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	4603      	mov	r3, r0
 80115d0:	71fb      	strb	r3, [r7, #7]
    return sumdChannelData[mcfg.rcmap[chan]];
 80115d2:	79fb      	ldrb	r3, [r7, #7]
 80115d4:	4a07      	ldr	r2, [pc, #28]	; (80115f4 <sumdReadRawRC+0x2c>)
 80115d6:	4413      	add	r3, r2
 80115d8:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 80115dc:	461a      	mov	r2, r3
 80115de:	4b06      	ldr	r3, [pc, #24]	; (80115f8 <sumdReadRawRC+0x30>)
 80115e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115e4:	b29b      	uxth	r3, r3
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	370c      	adds	r7, #12
 80115ea:	46bd      	mov	sp, r7
 80115ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f0:	4770      	bx	lr
 80115f2:	bf00      	nop
 80115f4:	2000089c 	.word	0x2000089c
 80115f8:	20001dc0 	.word	0x20001dc0

080115fc <_evtSumdReceive>:

static void _evtSumdReceive(PifRc* p_owner, uint16_t* channel, PifIssuerP p_issuer)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b086      	sub	sp, #24
 8011600:	af00      	add	r7, sp, #0
 8011602:	60f8      	str	r0, [r7, #12]
 8011604:	60b9      	str	r1, [r7, #8]
 8011606:	607a      	str	r2, [r7, #4]
    PifTask* p_task;

    // internal failsafe enabled and rx failsafe flag set
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 8011608:	f44f 7000 	mov.w	r0, #512	; 0x200
 801160c:	f7f5 fd48 	bl	80070a0 <feature>
 8011610:	4603      	mov	r3, r0
 8011612:	2b00      	cmp	r3, #0
 8011614:	d005      	beq.n	8011622 <_evtSumdReceive+0x26>
 8011616:	68f8      	ldr	r0, [r7, #12]
 8011618:	f007 f86e 	bl	80186f8 <pifRc_CheckFailSafe>
 801161c:	4603      	mov	r3, r0
 801161e:	2b00      	cmp	r3, #0
 8011620:	d11b      	bne.n	801165a <_evtSumdReceive+0x5e>

	failsafeCnt = 0;
 8011622:	4b10      	ldr	r3, [pc, #64]	; (8011664 <_evtSumdReceive+0x68>)
 8011624:	2200      	movs	r2, #0
 8011626:	801a      	strh	r2, [r3, #0]
	for (int b = 0; b < SUMD_MAX_CHANNEL; b++)
 8011628:	2300      	movs	r3, #0
 801162a:	617b      	str	r3, [r7, #20]
 801162c:	e00c      	b.n	8011648 <_evtSumdReceive+0x4c>
		sumdChannelData[b] = channel[b];
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	005b      	lsls	r3, r3, #1
 8011632:	68ba      	ldr	r2, [r7, #8]
 8011634:	4413      	add	r3, r2
 8011636:	881b      	ldrh	r3, [r3, #0]
 8011638:	4619      	mov	r1, r3
 801163a:	4a0b      	ldr	r2, [pc, #44]	; (8011668 <_evtSumdReceive+0x6c>)
 801163c:	697b      	ldr	r3, [r7, #20]
 801163e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int b = 0; b < SUMD_MAX_CHANNEL; b++)
 8011642:	697b      	ldr	r3, [r7, #20]
 8011644:	3301      	adds	r3, #1
 8011646:	617b      	str	r3, [r7, #20]
 8011648:	697b      	ldr	r3, [r7, #20]
 801164a:	2b07      	cmp	r3, #7
 801164c:	ddef      	ble.n	801162e <_evtSumdReceive+0x32>

	p_task = (PifTask*)p_issuer;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	613b      	str	r3, [r7, #16]
	pifTask_SetTrigger(p_task);
 8011652:	6938      	ldr	r0, [r7, #16]
 8011654:	f003 fb6c 	bl	8014d30 <pifTask_SetTrigger>
 8011658:	e000      	b.n	801165c <_evtSumdReceive+0x60>
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 801165a:	bf00      	nop
}
 801165c:	3718      	adds	r7, #24
 801165e:	46bd      	mov	sp, r7
 8011660:	bd80      	pop	{r7, pc}
 8011662:	bf00      	nop
 8011664:	2000177e 	.word	0x2000177e
 8011668:	20001dc0 	.word	0x20001dc0

0801166c <sumdInit>:

BOOL sumdInit(int uart, rcReadRawDataPtr *callback)
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b082      	sub	sp, #8
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
 8011674:	6039      	str	r1, [r7, #0]
    core.rcvrport = uartOpen(uart, 115200, MODE_RX, 2);		// 2ms
 8011676:	2302      	movs	r3, #2
 8011678:	2201      	movs	r2, #1
 801167a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 801167e:	6878      	ldr	r0, [r7, #4]
 8011680:	f7f0 fea0 	bl	80023c4 <uartOpen>
 8011684:	4603      	mov	r3, r0
 8011686:	4a18      	ldr	r2, [pc, #96]	; (80116e8 <sumdInit+0x7c>)
 8011688:	6113      	str	r3, [r2, #16]
    if (!core.rcvrport) return FALSE;
 801168a:	4b17      	ldr	r3, [pc, #92]	; (80116e8 <sumdInit+0x7c>)
 801168c:	691b      	ldr	r3, [r3, #16]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d101      	bne.n	8011696 <sumdInit+0x2a>
 8011692:	2300      	movs	r3, #0
 8011694:	e023      	b.n	80116de <sumdInit+0x72>

    if (!pifRcSumd_Init(&s_sumd, PIF_ID_AUTO)) return FALSE;
 8011696:	2100      	movs	r1, #0
 8011698:	4814      	ldr	r0, [pc, #80]	; (80116ec <sumdInit+0x80>)
 801169a:	f008 f97b 	bl	8019994 <pifRcSumd_Init>
 801169e:	4603      	mov	r3, r0
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d101      	bne.n	80116a8 <sumdInit+0x3c>
 80116a4:	2300      	movs	r3, #0
 80116a6:	e01a      	b.n	80116de <sumdInit+0x72>
    pifRc_AttachEvtReceive(&s_sumd.parent, _evtSumdReceive, g_task_compute_rc);
 80116a8:	4b11      	ldr	r3, [pc, #68]	; (80116f0 <sumdInit+0x84>)
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	461a      	mov	r2, r3
 80116ae:	4911      	ldr	r1, [pc, #68]	; (80116f4 <sumdInit+0x88>)
 80116b0:	480e      	ldr	r0, [pc, #56]	; (80116ec <sumdInit+0x80>)
 80116b2:	f007 f80f 	bl	80186d4 <pifRc_AttachEvtReceive>
    pifRcSumd_AttachComm(&s_sumd, &core.rcvrport->comm);
 80116b6:	4b0c      	ldr	r3, [pc, #48]	; (80116e8 <sumdInit+0x7c>)
 80116b8:	691b      	ldr	r3, [r3, #16]
 80116ba:	3304      	adds	r3, #4
 80116bc:	4619      	mov	r1, r3
 80116be:	480b      	ldr	r0, [pc, #44]	; (80116ec <sumdInit+0x80>)
 80116c0:	f008 f99c 	bl	80199fc <pifRcSumd_AttachComm>

    if (callback)
 80116c4:	683b      	ldr	r3, [r7, #0]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d002      	beq.n	80116d0 <sumdInit+0x64>
        *callback = sumdReadRawRC;
 80116ca:	683b      	ldr	r3, [r7, #0]
 80116cc:	4a0a      	ldr	r2, [pc, #40]	; (80116f8 <sumdInit+0x8c>)
 80116ce:	601a      	str	r2, [r3, #0]

    serialStartReceiveFunc(&core.rcvrport->comm);
 80116d0:	4b05      	ldr	r3, [pc, #20]	; (80116e8 <sumdInit+0x7c>)
 80116d2:	691b      	ldr	r3, [r3, #16]
 80116d4:	3304      	adds	r3, #4
 80116d6:	4618      	mov	r0, r3
 80116d8:	f7f1 f800 	bl	80026dc <serialStartReceiveFunc>

    return TRUE;
 80116dc:	2301      	movs	r3, #1
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3708      	adds	r7, #8
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	bf00      	nop
 80116e8:	200007e4 	.word	0x200007e4
 80116ec:	20001d50 	.word	0x20001d50
 80116f0:	200015a8 	.word	0x200015a8
 80116f4:	080115fd 	.word	0x080115fd
 80116f8:	080115c9 	.word	0x080115c9

080116fc <pif_Init>:
void PIF_WEAK pifSequenceColSig_Clear() {}

#endif

void pif_Init(PifActTimer1us act_timer1us)
{
 80116fc:	b480      	push	{r7}
 80116fe:	b083      	sub	sp, #12
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
	pif_act_timer1us = act_timer1us;
 8011704:	4a07      	ldr	r2, [pc, #28]	; (8011724 <pif_Init+0x28>)
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6013      	str	r3, [r2, #0]

	pif_datetime.month = 1;
 801170a:	4b07      	ldr	r3, [pc, #28]	; (8011728 <pif_Init+0x2c>)
 801170c:	2201      	movs	r2, #1
 801170e:	705a      	strb	r2, [r3, #1]
	pif_datetime.day = 1;
 8011710:	4b05      	ldr	r3, [pc, #20]	; (8011728 <pif_Init+0x2c>)
 8011712:	2201      	movs	r2, #1
 8011714:	709a      	strb	r2, [r3, #2]
    pifSensorDigitalColSig_Init();
    pifSensorSwitchColSig_Init();
    pifSolenoidColSig_Init();
    pifSequenceColSig_Init();
#endif
}
 8011716:	bf00      	nop
 8011718:	370c      	adds	r7, #12
 801171a:	46bd      	mov	sp, r7
 801171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011720:	4770      	bx	lr
 8011722:	bf00      	nop
 8011724:	20001e08 	.word	0x20001e08
 8011728:	20001df0 	.word	0x20001df0

0801172c <pif_sigTimer1ms>:
    pifSequenceColSig_Clear();
#endif
}

void pif_sigTimer1ms()
{
 801172c:	b480      	push	{r7}
 801172e:	b083      	sub	sp, #12
 8011730:	af00      	add	r7, sp, #0
	uint8_t days;
	uint16_t year;

	pif_cumulative_timer1ms++;
 8011732:	4b56      	ldr	r3, [pc, #344]	; (801188c <pif_sigTimer1ms+0x160>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	3301      	adds	r3, #1
 8011738:	4a54      	ldr	r2, [pc, #336]	; (801188c <pif_sigTimer1ms+0x160>)
 801173a:	6013      	str	r3, [r2, #0]
    pif_timer1ms++;
 801173c:	4b54      	ldr	r3, [pc, #336]	; (8011890 <pif_sigTimer1ms+0x164>)
 801173e:	881b      	ldrh	r3, [r3, #0]
 8011740:	b29b      	uxth	r3, r3
 8011742:	3301      	adds	r3, #1
 8011744:	b29a      	uxth	r2, r3
 8011746:	4b52      	ldr	r3, [pc, #328]	; (8011890 <pif_sigTimer1ms+0x164>)
 8011748:	801a      	strh	r2, [r3, #0]
    if (pif_timer1ms >= 1000) {
 801174a:	4b51      	ldr	r3, [pc, #324]	; (8011890 <pif_sigTimer1ms+0x164>)
 801174c:	881b      	ldrh	r3, [r3, #0]
 801174e:	b29b      	uxth	r3, r3
 8011750:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011754:	f0c0 808d 	bcc.w	8011872 <pif_sigTimer1ms+0x146>
        pif_timer1ms = 0;
 8011758:	4b4d      	ldr	r3, [pc, #308]	; (8011890 <pif_sigTimer1ms+0x164>)
 801175a:	2200      	movs	r2, #0
 801175c:	801a      	strh	r2, [r3, #0]

        pif_timer1sec++;
 801175e:	4b4d      	ldr	r3, [pc, #308]	; (8011894 <pif_sigTimer1ms+0x168>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	3301      	adds	r3, #1
 8011764:	4a4b      	ldr	r2, [pc, #300]	; (8011894 <pif_sigTimer1ms+0x168>)
 8011766:	6013      	str	r3, [r2, #0]
    	pif_datetime.second++;
 8011768:	4b4b      	ldr	r3, [pc, #300]	; (8011898 <pif_sigTimer1ms+0x16c>)
 801176a:	795b      	ldrb	r3, [r3, #5]
 801176c:	b2db      	uxtb	r3, r3
 801176e:	3301      	adds	r3, #1
 8011770:	b2da      	uxtb	r2, r3
 8011772:	4b49      	ldr	r3, [pc, #292]	; (8011898 <pif_sigTimer1ms+0x16c>)
 8011774:	715a      	strb	r2, [r3, #5]
    	if (pif_datetime.second >= 60) {
 8011776:	4b48      	ldr	r3, [pc, #288]	; (8011898 <pif_sigTimer1ms+0x16c>)
 8011778:	795b      	ldrb	r3, [r3, #5]
 801177a:	b2db      	uxtb	r3, r3
 801177c:	2b3b      	cmp	r3, #59	; 0x3b
 801177e:	d971      	bls.n	8011864 <pif_sigTimer1ms+0x138>
    		pif_datetime.second = 0;
 8011780:	4b45      	ldr	r3, [pc, #276]	; (8011898 <pif_sigTimer1ms+0x16c>)
 8011782:	2200      	movs	r2, #0
 8011784:	715a      	strb	r2, [r3, #5]
    		pif_datetime.minute++;
 8011786:	4b44      	ldr	r3, [pc, #272]	; (8011898 <pif_sigTimer1ms+0x16c>)
 8011788:	791b      	ldrb	r3, [r3, #4]
 801178a:	b2db      	uxtb	r3, r3
 801178c:	3301      	adds	r3, #1
 801178e:	b2da      	uxtb	r2, r3
 8011790:	4b41      	ldr	r3, [pc, #260]	; (8011898 <pif_sigTimer1ms+0x16c>)
 8011792:	711a      	strb	r2, [r3, #4]
    		if (pif_datetime.minute >= 60) {
 8011794:	4b40      	ldr	r3, [pc, #256]	; (8011898 <pif_sigTimer1ms+0x16c>)
 8011796:	791b      	ldrb	r3, [r3, #4]
 8011798:	b2db      	uxtb	r3, r3
 801179a:	2b3b      	cmp	r3, #59	; 0x3b
 801179c:	d95b      	bls.n	8011856 <pif_sigTimer1ms+0x12a>
    			pif_datetime.minute = 0;
 801179e:	4b3e      	ldr	r3, [pc, #248]	; (8011898 <pif_sigTimer1ms+0x16c>)
 80117a0:	2200      	movs	r2, #0
 80117a2:	711a      	strb	r2, [r3, #4]
    			pif_datetime.hour++;
 80117a4:	4b3c      	ldr	r3, [pc, #240]	; (8011898 <pif_sigTimer1ms+0x16c>)
 80117a6:	78db      	ldrb	r3, [r3, #3]
 80117a8:	b2db      	uxtb	r3, r3
 80117aa:	3301      	adds	r3, #1
 80117ac:	b2da      	uxtb	r2, r3
 80117ae:	4b3a      	ldr	r3, [pc, #232]	; (8011898 <pif_sigTimer1ms+0x16c>)
 80117b0:	70da      	strb	r2, [r3, #3]
    			if (pif_datetime.hour >= 24) {
 80117b2:	4b39      	ldr	r3, [pc, #228]	; (8011898 <pif_sigTimer1ms+0x16c>)
 80117b4:	78db      	ldrb	r3, [r3, #3]
 80117b6:	b2db      	uxtb	r3, r3
 80117b8:	2b17      	cmp	r3, #23
 80117ba:	d94c      	bls.n	8011856 <pif_sigTimer1ms+0x12a>
    				pif_datetime.hour = 0;
 80117bc:	4b36      	ldr	r3, [pc, #216]	; (8011898 <pif_sigTimer1ms+0x16c>)
 80117be:	2200      	movs	r2, #0
 80117c0:	70da      	strb	r2, [r3, #3]
    				pif_datetime.day++;
 80117c2:	4b35      	ldr	r3, [pc, #212]	; (8011898 <pif_sigTimer1ms+0x16c>)
 80117c4:	789b      	ldrb	r3, [r3, #2]
 80117c6:	b2db      	uxtb	r3, r3
 80117c8:	3301      	adds	r3, #1
 80117ca:	b2da      	uxtb	r2, r3
 80117cc:	4b32      	ldr	r3, [pc, #200]	; (8011898 <pif_sigTimer1ms+0x16c>)
 80117ce:	709a      	strb	r2, [r3, #2]
    				days = kDaysInMonth[pif_datetime.month - 1];
 80117d0:	4b31      	ldr	r3, [pc, #196]	; (8011898 <pif_sigTimer1ms+0x16c>)
 80117d2:	785b      	ldrb	r3, [r3, #1]
 80117d4:	b2db      	uxtb	r3, r3
 80117d6:	3b01      	subs	r3, #1
 80117d8:	4a30      	ldr	r2, [pc, #192]	; (801189c <pif_sigTimer1ms+0x170>)
 80117da:	5cd3      	ldrb	r3, [r2, r3]
 80117dc:	71fb      	strb	r3, [r7, #7]
    				if (pif_datetime.month == 2) {
 80117de:	4b2e      	ldr	r3, [pc, #184]	; (8011898 <pif_sigTimer1ms+0x16c>)
 80117e0:	785b      	ldrb	r3, [r3, #1]
 80117e2:	b2db      	uxtb	r3, r3
 80117e4:	2b02      	cmp	r3, #2
 80117e6:	d117      	bne.n	8011818 <pif_sigTimer1ms+0xec>
    					year = 2000 + pif_datetime.year;
 80117e8:	4b2b      	ldr	r3, [pc, #172]	; (8011898 <pif_sigTimer1ms+0x16c>)
 80117ea:	781b      	ldrb	r3, [r3, #0]
 80117ec:	b2db      	uxtb	r3, r3
 80117ee:	b29b      	uxth	r3, r3
 80117f0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80117f4:	80bb      	strh	r3, [r7, #4]
    					if (year / 4 == 0) {
 80117f6:	88bb      	ldrh	r3, [r7, #4]
 80117f8:	2b03      	cmp	r3, #3
 80117fa:	d80d      	bhi.n	8011818 <pif_sigTimer1ms+0xec>
    						if (year / 100 == 0) {
 80117fc:	88bb      	ldrh	r3, [r7, #4]
 80117fe:	2b63      	cmp	r3, #99	; 0x63
 8011800:	d807      	bhi.n	8011812 <pif_sigTimer1ms+0xe6>
    							if (year / 400 == 0) days++;
 8011802:	88bb      	ldrh	r3, [r7, #4]
 8011804:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8011808:	d206      	bcs.n	8011818 <pif_sigTimer1ms+0xec>
 801180a:	79fb      	ldrb	r3, [r7, #7]
 801180c:	3301      	adds	r3, #1
 801180e:	71fb      	strb	r3, [r7, #7]
 8011810:	e002      	b.n	8011818 <pif_sigTimer1ms+0xec>
    						}
    						else days++;
 8011812:	79fb      	ldrb	r3, [r7, #7]
 8011814:	3301      	adds	r3, #1
 8011816:	71fb      	strb	r3, [r7, #7]
    					}
    				}
    				if (pif_datetime.day > days) {
 8011818:	4b1f      	ldr	r3, [pc, #124]	; (8011898 <pif_sigTimer1ms+0x16c>)
 801181a:	789b      	ldrb	r3, [r3, #2]
 801181c:	b2db      	uxtb	r3, r3
 801181e:	79fa      	ldrb	r2, [r7, #7]
 8011820:	429a      	cmp	r2, r3
 8011822:	d218      	bcs.n	8011856 <pif_sigTimer1ms+0x12a>
    					pif_datetime.day = 1;
 8011824:	4b1c      	ldr	r3, [pc, #112]	; (8011898 <pif_sigTimer1ms+0x16c>)
 8011826:	2201      	movs	r2, #1
 8011828:	709a      	strb	r2, [r3, #2]
    					pif_datetime.month++;
 801182a:	4b1b      	ldr	r3, [pc, #108]	; (8011898 <pif_sigTimer1ms+0x16c>)
 801182c:	785b      	ldrb	r3, [r3, #1]
 801182e:	b2db      	uxtb	r3, r3
 8011830:	3301      	adds	r3, #1
 8011832:	b2da      	uxtb	r2, r3
 8011834:	4b18      	ldr	r3, [pc, #96]	; (8011898 <pif_sigTimer1ms+0x16c>)
 8011836:	705a      	strb	r2, [r3, #1]
    					if (pif_datetime.month > 12) {
 8011838:	4b17      	ldr	r3, [pc, #92]	; (8011898 <pif_sigTimer1ms+0x16c>)
 801183a:	785b      	ldrb	r3, [r3, #1]
 801183c:	b2db      	uxtb	r3, r3
 801183e:	2b0c      	cmp	r3, #12
 8011840:	d909      	bls.n	8011856 <pif_sigTimer1ms+0x12a>
    						pif_datetime.month = 1;
 8011842:	4b15      	ldr	r3, [pc, #84]	; (8011898 <pif_sigTimer1ms+0x16c>)
 8011844:	2201      	movs	r2, #1
 8011846:	705a      	strb	r2, [r3, #1]
    						pif_datetime.year++;
 8011848:	4b13      	ldr	r3, [pc, #76]	; (8011898 <pif_sigTimer1ms+0x16c>)
 801184a:	781b      	ldrb	r3, [r3, #0]
 801184c:	b2db      	uxtb	r3, r3
 801184e:	3301      	adds	r3, #1
 8011850:	b2da      	uxtb	r2, r3
 8011852:	4b11      	ldr	r3, [pc, #68]	; (8011898 <pif_sigTimer1ms+0x16c>)
 8011854:	701a      	strb	r2, [r3, #0]
    				}
    			}
    		}

#ifdef __PIF_DEBUG__
        	pif_performance.__state |= 4;
 8011856:	4b12      	ldr	r3, [pc, #72]	; (80118a0 <pif_sigTimer1ms+0x174>)
 8011858:	795b      	ldrb	r3, [r3, #5]
 801185a:	f043 0304 	orr.w	r3, r3, #4
 801185e:	b2da      	uxtb	r2, r3
 8011860:	4b0f      	ldr	r3, [pc, #60]	; (80118a0 <pif_sigTimer1ms+0x174>)
 8011862:	715a      	strb	r2, [r3, #5]
#endif			
    	}

    	pif_performance.__state |= 2;
 8011864:	4b0e      	ldr	r3, [pc, #56]	; (80118a0 <pif_sigTimer1ms+0x174>)
 8011866:	795b      	ldrb	r3, [r3, #5]
 8011868:	f043 0302 	orr.w	r3, r3, #2
 801186c:	b2da      	uxtb	r2, r3
 801186e:	4b0c      	ldr	r3, [pc, #48]	; (80118a0 <pif_sigTimer1ms+0x174>)
 8011870:	715a      	strb	r2, [r3, #5]
    }

   	pif_performance.__state |= 1;
 8011872:	4b0b      	ldr	r3, [pc, #44]	; (80118a0 <pif_sigTimer1ms+0x174>)
 8011874:	795b      	ldrb	r3, [r3, #5]
 8011876:	f043 0301 	orr.w	r3, r3, #1
 801187a:	b2da      	uxtb	r2, r3
 801187c:	4b08      	ldr	r3, [pc, #32]	; (80118a0 <pif_sigTimer1ms+0x174>)
 801187e:	715a      	strb	r2, [r3, #5]
}
 8011880:	bf00      	nop
 8011882:	370c      	adds	r7, #12
 8011884:	46bd      	mov	sp, r7
 8011886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188a:	4770      	bx	lr
 801188c:	20001df8 	.word	0x20001df8
 8011890:	20001de8 	.word	0x20001de8
 8011894:	20001dec 	.word	0x20001dec
 8011898:	20001df0 	.word	0x20001df0
 801189c:	0802a490 	.word	0x0802a490
 80118a0:	20001dfc 	.word	0x20001dfc

080118a4 <pif_Delay1ms>:

void pif_Delay1ms(uint16_t delay)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b085      	sub	sp, #20
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	4603      	mov	r3, r0
 80118ac:	80fb      	strh	r3, [r7, #6]
	uint32_t start;
	uint16_t diff;

	start = pif_cumulative_timer1ms;
 80118ae:	4b0a      	ldr	r3, [pc, #40]	; (80118d8 <pif_Delay1ms+0x34>)
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	60fb      	str	r3, [r7, #12]
	do {
		diff = pif_cumulative_timer1ms - start;
 80118b4:	4b08      	ldr	r3, [pc, #32]	; (80118d8 <pif_Delay1ms+0x34>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	b29a      	uxth	r2, r3
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	b29b      	uxth	r3, r3
 80118be:	1ad3      	subs	r3, r2, r3
 80118c0:	817b      	strh	r3, [r7, #10]
	} while (diff < delay);
 80118c2:	897a      	ldrh	r2, [r7, #10]
 80118c4:	88fb      	ldrh	r3, [r7, #6]
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d3f4      	bcc.n	80118b4 <pif_Delay1ms+0x10>
}
 80118ca:	bf00      	nop
 80118cc:	bf00      	nop
 80118ce:	3714      	adds	r7, #20
 80118d0:	46bd      	mov	sp, r7
 80118d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d6:	4770      	bx	lr
 80118d8:	20001df8 	.word	0x20001df8

080118dc <pif_Delay1us>:

void pif_Delay1us(uint16_t delay)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b084      	sub	sp, #16
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	4603      	mov	r3, r0
 80118e4:	80fb      	strh	r3, [r7, #6]
	uint32_t start;
	uint16_t diff;

	start = (*pif_act_timer1us)();
 80118e6:	4b0b      	ldr	r3, [pc, #44]	; (8011914 <pif_Delay1us+0x38>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	4798      	blx	r3
 80118ec:	60f8      	str	r0, [r7, #12]
	do {
		diff = (*pif_act_timer1us)() - start;
 80118ee:	4b09      	ldr	r3, [pc, #36]	; (8011914 <pif_Delay1us+0x38>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	4798      	blx	r3
 80118f4:	4603      	mov	r3, r0
 80118f6:	b29a      	uxth	r2, r3
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	b29b      	uxth	r3, r3
 80118fc:	1ad3      	subs	r3, r2, r3
 80118fe:	817b      	strh	r3, [r7, #10]
	} while (diff < delay);
 8011900:	897a      	ldrh	r2, [r7, #10]
 8011902:	88fb      	ldrh	r3, [r7, #6]
 8011904:	429a      	cmp	r2, r3
 8011906:	d3f2      	bcc.n	80118ee <pif_Delay1us+0x12>
}
 8011908:	bf00      	nop
 801190a:	bf00      	nop
 801190c:	3710      	adds	r7, #16
 801190e:	46bd      	mov	sp, r7
 8011910:	bd80      	pop	{r7, pc}
 8011912:	bf00      	nop
 8011914:	20001e08 	.word	0x20001e08

08011918 <pif_BinToString>:
{
	pif_error = E_SUCCESS;
}

int pif_BinToString(char* p_buffer, uint32_t value, uint16_t str_cnt)
{
 8011918:	b480      	push	{r7}
 801191a:	b089      	sub	sp, #36	; 0x24
 801191c:	af00      	add	r7, sp, #0
 801191e:	60f8      	str	r0, [r7, #12]
 8011920:	60b9      	str	r1, [r7, #8]
 8011922:	4613      	mov	r3, r2
 8011924:	80fb      	strh	r3, [r7, #6]
	int i, idx = 0;
 8011926:	2300      	movs	r3, #0
 8011928:	61bb      	str	r3, [r7, #24]
	BOOL first;
    uint32_t tmp_val;

    if (str_cnt) {
 801192a:	88fb      	ldrh	r3, [r7, #6]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d01b      	beq.n	8011968 <pif_BinToString+0x50>
    	for (i = str_cnt - 1; i >= 0; i--) {
 8011930:	88fb      	ldrh	r3, [r7, #6]
 8011932:	3b01      	subs	r3, #1
 8011934:	61fb      	str	r3, [r7, #28]
 8011936:	e013      	b.n	8011960 <pif_BinToString+0x48>
    		p_buffer[idx++] = '0' + ((value >> i) & 1);
 8011938:	68ba      	ldr	r2, [r7, #8]
 801193a:	69fb      	ldr	r3, [r7, #28]
 801193c:	fa22 f303 	lsr.w	r3, r2, r3
 8011940:	b2db      	uxtb	r3, r3
 8011942:	f003 0301 	and.w	r3, r3, #1
 8011946:	b2da      	uxtb	r2, r3
 8011948:	69bb      	ldr	r3, [r7, #24]
 801194a:	1c59      	adds	r1, r3, #1
 801194c:	61b9      	str	r1, [r7, #24]
 801194e:	4619      	mov	r1, r3
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	440b      	add	r3, r1
 8011954:	3230      	adds	r2, #48	; 0x30
 8011956:	b2d2      	uxtb	r2, r2
 8011958:	701a      	strb	r2, [r3, #0]
    	for (i = str_cnt - 1; i >= 0; i--) {
 801195a:	69fb      	ldr	r3, [r7, #28]
 801195c:	3b01      	subs	r3, #1
 801195e:	61fb      	str	r3, [r7, #28]
 8011960:	69fb      	ldr	r3, [r7, #28]
 8011962:	2b00      	cmp	r3, #0
 8011964:	dae8      	bge.n	8011938 <pif_BinToString+0x20>
 8011966:	e030      	b.n	80119ca <pif_BinToString+0xb2>
    	}
    }
    else if (value > 0) {
 8011968:	68bb      	ldr	r3, [r7, #8]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d025      	beq.n	80119ba <pif_BinToString+0xa2>
    	first = TRUE;
 801196e:	2301      	movs	r3, #1
 8011970:	75fb      	strb	r3, [r7, #23]
    	for (i = 31; i >= 0; i--) {
 8011972:	231f      	movs	r3, #31
 8011974:	61fb      	str	r3, [r7, #28]
 8011976:	e01c      	b.n	80119b2 <pif_BinToString+0x9a>
    		tmp_val = (value >> i) & 1;
 8011978:	68ba      	ldr	r2, [r7, #8]
 801197a:	69fb      	ldr	r3, [r7, #28]
 801197c:	fa22 f303 	lsr.w	r3, r2, r3
 8011980:	f003 0301 	and.w	r3, r3, #1
 8011984:	613b      	str	r3, [r7, #16]
    		if (!first || tmp_val) {
 8011986:	7dfb      	ldrb	r3, [r7, #23]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d002      	beq.n	8011992 <pif_BinToString+0x7a>
 801198c:	693b      	ldr	r3, [r7, #16]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d00c      	beq.n	80119ac <pif_BinToString+0x94>
    			p_buffer[idx++] = '0' + tmp_val;
 8011992:	693b      	ldr	r3, [r7, #16]
 8011994:	b2da      	uxtb	r2, r3
 8011996:	69bb      	ldr	r3, [r7, #24]
 8011998:	1c59      	adds	r1, r3, #1
 801199a:	61b9      	str	r1, [r7, #24]
 801199c:	4619      	mov	r1, r3
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	440b      	add	r3, r1
 80119a2:	3230      	adds	r2, #48	; 0x30
 80119a4:	b2d2      	uxtb	r2, r2
 80119a6:	701a      	strb	r2, [r3, #0]
    			first = FALSE;
 80119a8:	2300      	movs	r3, #0
 80119aa:	75fb      	strb	r3, [r7, #23]
    	for (i = 31; i >= 0; i--) {
 80119ac:	69fb      	ldr	r3, [r7, #28]
 80119ae:	3b01      	subs	r3, #1
 80119b0:	61fb      	str	r3, [r7, #28]
 80119b2:	69fb      	ldr	r3, [r7, #28]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	dadf      	bge.n	8011978 <pif_BinToString+0x60>
 80119b8:	e007      	b.n	80119ca <pif_BinToString+0xb2>
    		}
    	}
    }
    else {
    	p_buffer[idx++] = '0';
 80119ba:	69bb      	ldr	r3, [r7, #24]
 80119bc:	1c5a      	adds	r2, r3, #1
 80119be:	61ba      	str	r2, [r7, #24]
 80119c0:	461a      	mov	r2, r3
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	4413      	add	r3, r2
 80119c6:	2230      	movs	r2, #48	; 0x30
 80119c8:	701a      	strb	r2, [r3, #0]
    }
    return idx;
 80119ca:	69bb      	ldr	r3, [r7, #24]
}
 80119cc:	4618      	mov	r0, r3
 80119ce:	3724      	adds	r7, #36	; 0x24
 80119d0:	46bd      	mov	sp, r7
 80119d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d6:	4770      	bx	lr

080119d8 <pif_DecToString>:

int pif_DecToString(char* p_buffer, uint32_t value, uint16_t str_cnt)
{
 80119d8:	b480      	push	{r7}
 80119da:	b08d      	sub	sp, #52	; 0x34
 80119dc:	af00      	add	r7, sp, #0
 80119de:	60f8      	str	r0, [r7, #12]
 80119e0:	60b9      	str	r1, [r7, #8]
 80119e2:	4613      	mov	r3, r2
 80119e4:	80fb      	strh	r3, [r7, #6]
    uint16_t exp_cnt = 0;
 80119e6:	2300      	movs	r3, #0
 80119e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t zero_str_cnt = 0;
 80119ea:	2300      	movs	r3, #0
 80119ec:	85bb      	strh	r3, [r7, #44]	; 0x2c
    int idx = 0;
 80119ee:	2300      	movs	r3, #0
 80119f0:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t idx_inv = 0;
 80119f2:	2300      	movs	r3, #0
 80119f4:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t tmp_val;
    char inv_buf[11] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80119f6:	4a43      	ldr	r2, [pc, #268]	; (8011b04 <pif_DecToString+0x12c>)
 80119f8:	f107 0314 	add.w	r3, r7, #20
 80119fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80119fe:	c303      	stmia	r3!, {r0, r1}
 8011a00:	801a      	strh	r2, [r3, #0]
 8011a02:	3302      	adds	r3, #2
 8011a04:	0c12      	lsrs	r2, r2, #16
 8011a06:	701a      	strb	r2, [r3, #0]

    tmp_val = value;
 8011a08:	68bb      	ldr	r3, [r7, #8]
 8011a0a:	623b      	str	r3, [r7, #32]
    if (tmp_val != 0) {
 8011a0c:	6a3b      	ldr	r3, [r7, #32]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d05e      	beq.n	8011ad0 <pif_DecToString+0xf8>
        while (tmp_val) {
 8011a12:	e02c      	b.n	8011a6e <pif_DecToString+0x96>
        	exp_cnt++;
 8011a14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011a16:	3301      	adds	r3, #1
 8011a18:	85fb      	strh	r3, [r7, #46]	; 0x2e
            if (tmp_val >= 10) {
 8011a1a:	6a3b      	ldr	r3, [r7, #32]
 8011a1c:	2b09      	cmp	r3, #9
 8011a1e:	d914      	bls.n	8011a4a <pif_DecToString+0x72>
                inv_buf[idx_inv++] = (tmp_val % 10) + '0';
 8011a20:	6a39      	ldr	r1, [r7, #32]
 8011a22:	4b39      	ldr	r3, [pc, #228]	; (8011b08 <pif_DecToString+0x130>)
 8011a24:	fba3 2301 	umull	r2, r3, r3, r1
 8011a28:	08da      	lsrs	r2, r3, #3
 8011a2a:	4613      	mov	r3, r2
 8011a2c:	009b      	lsls	r3, r3, #2
 8011a2e:	4413      	add	r3, r2
 8011a30:	005b      	lsls	r3, r3, #1
 8011a32:	1aca      	subs	r2, r1, r3
 8011a34:	b2d2      	uxtb	r2, r2
 8011a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a38:	1c59      	adds	r1, r3, #1
 8011a3a:	6279      	str	r1, [r7, #36]	; 0x24
 8011a3c:	3230      	adds	r2, #48	; 0x30
 8011a3e:	b2d2      	uxtb	r2, r2
 8011a40:	3330      	adds	r3, #48	; 0x30
 8011a42:	443b      	add	r3, r7
 8011a44:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8011a48:	e00b      	b.n	8011a62 <pif_DecToString+0x8a>
            }
            else {
                inv_buf[idx_inv++] = tmp_val + '0';
 8011a4a:	6a3b      	ldr	r3, [r7, #32]
 8011a4c:	b2da      	uxtb	r2, r3
 8011a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a50:	1c59      	adds	r1, r3, #1
 8011a52:	6279      	str	r1, [r7, #36]	; 0x24
 8011a54:	3230      	adds	r2, #48	; 0x30
 8011a56:	b2d2      	uxtb	r2, r2
 8011a58:	3330      	adds	r3, #48	; 0x30
 8011a5a:	443b      	add	r3, r7
 8011a5c:	f803 2c1c 	strb.w	r2, [r3, #-28]
                break;
 8011a60:	e008      	b.n	8011a74 <pif_DecToString+0x9c>
            }
            tmp_val = tmp_val / 10;
 8011a62:	6a3b      	ldr	r3, [r7, #32]
 8011a64:	4a28      	ldr	r2, [pc, #160]	; (8011b08 <pif_DecToString+0x130>)
 8011a66:	fba2 2303 	umull	r2, r3, r2, r3
 8011a6a:	08db      	lsrs	r3, r3, #3
 8011a6c:	623b      	str	r3, [r7, #32]
        while (tmp_val) {
 8011a6e:	6a3b      	ldr	r3, [r7, #32]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d1cf      	bne.n	8011a14 <pif_DecToString+0x3c>
        }

        if ((str_cnt != 0) && (exp_cnt < str_cnt)) {
 8011a74:	88fb      	ldrh	r3, [r7, #6]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d026      	beq.n	8011ac8 <pif_DecToString+0xf0>
 8011a7a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011a7c:	88fb      	ldrh	r3, [r7, #6]
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	d222      	bcs.n	8011ac8 <pif_DecToString+0xf0>
            zero_str_cnt = str_cnt - exp_cnt;
 8011a82:	88fa      	ldrh	r2, [r7, #6]
 8011a84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011a86:	1ad3      	subs	r3, r2, r3
 8011a88:	85bb      	strh	r3, [r7, #44]	; 0x2c
            while (zero_str_cnt) {
 8011a8a:	e00a      	b.n	8011aa2 <pif_DecToString+0xca>
            	p_buffer[idx++] = '0';
 8011a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a8e:	1c5a      	adds	r2, r3, #1
 8011a90:	62ba      	str	r2, [r7, #40]	; 0x28
 8011a92:	461a      	mov	r2, r3
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	4413      	add	r3, r2
 8011a98:	2230      	movs	r2, #48	; 0x30
 8011a9a:	701a      	strb	r2, [r3, #0]
                zero_str_cnt--;
 8011a9c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011a9e:	3b01      	subs	r3, #1
 8011aa0:	85bb      	strh	r3, [r7, #44]	; 0x2c
            while (zero_str_cnt) {
 8011aa2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d1f1      	bne.n	8011a8c <pif_DecToString+0xb4>
            }
        }
        while (idx_inv) {
 8011aa8:	e00e      	b.n	8011ac8 <pif_DecToString+0xf0>
            idx_inv--;
 8011aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aac:	3b01      	subs	r3, #1
 8011aae:	627b      	str	r3, [r7, #36]	; 0x24
            p_buffer[idx++] = inv_buf[idx_inv];
 8011ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ab2:	1c5a      	adds	r2, r3, #1
 8011ab4:	62ba      	str	r2, [r7, #40]	; 0x28
 8011ab6:	461a      	mov	r2, r3
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	4413      	add	r3, r2
 8011abc:	f107 0114 	add.w	r1, r7, #20
 8011ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ac2:	440a      	add	r2, r1
 8011ac4:	7812      	ldrb	r2, [r2, #0]
 8011ac6:	701a      	strb	r2, [r3, #0]
        while (idx_inv) {
 8011ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d1ed      	bne.n	8011aaa <pif_DecToString+0xd2>
 8011ace:	e012      	b.n	8011af6 <pif_DecToString+0x11e>
        }
    }
    else {
        zero_str_cnt = str_cnt;
 8011ad0:	88fb      	ldrh	r3, [r7, #6]
 8011ad2:	85bb      	strh	r3, [r7, #44]	; 0x2c
        do {
        	p_buffer[idx++] = '0';
 8011ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ad6:	1c5a      	adds	r2, r3, #1
 8011ad8:	62ba      	str	r2, [r7, #40]	; 0x28
 8011ada:	461a      	mov	r2, r3
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	4413      	add	r3, r2
 8011ae0:	2230      	movs	r2, #48	; 0x30
 8011ae2:	701a      	strb	r2, [r3, #0]
            if (zero_str_cnt > 0) zero_str_cnt--;
 8011ae4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d002      	beq.n	8011af0 <pif_DecToString+0x118>
 8011aea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011aec:	3b01      	subs	r3, #1
 8011aee:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
        while (zero_str_cnt);
 8011af0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d1ee      	bne.n	8011ad4 <pif_DecToString+0xfc>
    }
    return idx;
 8011af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8011af8:	4618      	mov	r0, r3
 8011afa:	3734      	adds	r7, #52	; 0x34
 8011afc:	46bd      	mov	sp, r7
 8011afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b02:	4770      	bx	lr
 8011b04:	080286ec 	.word	0x080286ec
 8011b08:	cccccccd 	.word	0xcccccccd

08011b0c <pif_HexToString>:

int pif_HexToString(char* p_buffer, uint32_t value, uint16_t str_cnt, BOOL upper)
{
 8011b0c:	b480      	push	{r7}
 8011b0e:	b08b      	sub	sp, #44	; 0x2c
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	60f8      	str	r0, [r7, #12]
 8011b14:	60b9      	str	r1, [r7, #8]
 8011b16:	4611      	mov	r1, r2
 8011b18:	461a      	mov	r2, r3
 8011b1a:	460b      	mov	r3, r1
 8011b1c:	80fb      	strh	r3, [r7, #6]
 8011b1e:	4613      	mov	r3, r2
 8011b20:	717b      	strb	r3, [r7, #5]
	int i, idx = 0;
 8011b22:	2300      	movs	r3, #0
 8011b24:	623b      	str	r3, [r7, #32]
	BOOL first;
    uint32_t tmp_val;
    const char* kHexChar = upper ? kPifHexUpperChar : kPifHexLowerChar;
 8011b26:	797b      	ldrb	r3, [r7, #5]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d002      	beq.n	8011b32 <pif_HexToString+0x26>
 8011b2c:	4b2f      	ldr	r3, [pc, #188]	; (8011bec <pif_HexToString+0xe0>)
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	e001      	b.n	8011b36 <pif_HexToString+0x2a>
 8011b32:	4b2f      	ldr	r3, [pc, #188]	; (8011bf0 <pif_HexToString+0xe4>)
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	61bb      	str	r3, [r7, #24]

    if (str_cnt) {
 8011b38:	88fb      	ldrh	r3, [r7, #6]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d01d      	beq.n	8011b7a <pif_HexToString+0x6e>
    	for (i = (str_cnt - 1) * 4; i >= 0; i -= 4) {
 8011b3e:	88fb      	ldrh	r3, [r7, #6]
 8011b40:	3b01      	subs	r3, #1
 8011b42:	009b      	lsls	r3, r3, #2
 8011b44:	627b      	str	r3, [r7, #36]	; 0x24
 8011b46:	e014      	b.n	8011b72 <pif_HexToString+0x66>
    		tmp_val = (value >> i) & 0x0F;
 8011b48:	68ba      	ldr	r2, [r7, #8]
 8011b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8011b50:	f003 030f 	and.w	r3, r3, #15
 8011b54:	617b      	str	r3, [r7, #20]
    		p_buffer[idx++] = kHexChar[tmp_val];
 8011b56:	69ba      	ldr	r2, [r7, #24]
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	441a      	add	r2, r3
 8011b5c:	6a3b      	ldr	r3, [r7, #32]
 8011b5e:	1c59      	adds	r1, r3, #1
 8011b60:	6239      	str	r1, [r7, #32]
 8011b62:	4619      	mov	r1, r3
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	440b      	add	r3, r1
 8011b68:	7812      	ldrb	r2, [r2, #0]
 8011b6a:	701a      	strb	r2, [r3, #0]
    	for (i = (str_cnt - 1) * 4; i >= 0; i -= 4) {
 8011b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b6e:	3b04      	subs	r3, #4
 8011b70:	627b      	str	r3, [r7, #36]	; 0x24
 8011b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	dae7      	bge.n	8011b48 <pif_HexToString+0x3c>
 8011b78:	e030      	b.n	8011bdc <pif_HexToString+0xd0>
    	}
    }
    else if (value > 0) {
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d025      	beq.n	8011bcc <pif_HexToString+0xc0>
    	first = TRUE;
 8011b80:	2301      	movs	r3, #1
 8011b82:	77fb      	strb	r3, [r7, #31]
    	for (i = 28; i >= 0; i -= 4) {
 8011b84:	231c      	movs	r3, #28
 8011b86:	627b      	str	r3, [r7, #36]	; 0x24
 8011b88:	e01c      	b.n	8011bc4 <pif_HexToString+0xb8>
    		tmp_val = (value >> i) & 0x0F;
 8011b8a:	68ba      	ldr	r2, [r7, #8]
 8011b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8011b92:	f003 030f 	and.w	r3, r3, #15
 8011b96:	617b      	str	r3, [r7, #20]
    		if (!first || tmp_val) {
 8011b98:	7ffb      	ldrb	r3, [r7, #31]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d002      	beq.n	8011ba4 <pif_HexToString+0x98>
 8011b9e:	697b      	ldr	r3, [r7, #20]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d00c      	beq.n	8011bbe <pif_HexToString+0xb2>
    			p_buffer[idx++] = kHexChar[tmp_val];
 8011ba4:	69ba      	ldr	r2, [r7, #24]
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	441a      	add	r2, r3
 8011baa:	6a3b      	ldr	r3, [r7, #32]
 8011bac:	1c59      	adds	r1, r3, #1
 8011bae:	6239      	str	r1, [r7, #32]
 8011bb0:	4619      	mov	r1, r3
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	440b      	add	r3, r1
 8011bb6:	7812      	ldrb	r2, [r2, #0]
 8011bb8:	701a      	strb	r2, [r3, #0]
    			first = FALSE;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	77fb      	strb	r3, [r7, #31]
    	for (i = 28; i >= 0; i -= 4) {
 8011bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc0:	3b04      	subs	r3, #4
 8011bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8011bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	dadf      	bge.n	8011b8a <pif_HexToString+0x7e>
 8011bca:	e007      	b.n	8011bdc <pif_HexToString+0xd0>
    		}
    	}
    }
    else {
    	p_buffer[idx++] = '0';
 8011bcc:	6a3b      	ldr	r3, [r7, #32]
 8011bce:	1c5a      	adds	r2, r3, #1
 8011bd0:	623a      	str	r2, [r7, #32]
 8011bd2:	461a      	mov	r2, r3
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	4413      	add	r3, r2
 8011bd8:	2230      	movs	r2, #48	; 0x30
 8011bda:	701a      	strb	r2, [r3, #0]
    }
    return idx;
 8011bdc:	6a3b      	ldr	r3, [r7, #32]
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	372c      	adds	r7, #44	; 0x2c
 8011be2:	46bd      	mov	sp, r7
 8011be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be8:	4770      	bx	lr
 8011bea:	bf00      	nop
 8011bec:	2000012c 	.word	0x2000012c
 8011bf0:	20000130 	.word	0x20000130

08011bf4 <pif_FloatToString>:

int pif_FloatToString(char* p_buffer, double value, uint16_t point)
{
 8011bf4:	b5b0      	push	{r4, r5, r7, lr}
 8011bf6:	b086      	sub	sp, #24
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	60f8      	str	r0, [r7, #12]
 8011bfc:	ed87 0b00 	vstr	d0, [r7]
 8011c00:	460b      	mov	r3, r1
 8011c02:	817b      	strh	r3, [r7, #10]
	uint16_t i, idx = 0;
 8011c04:	2300      	movs	r3, #0
 8011c06:	82bb      	strh	r3, [r7, #20]
	uint32_t num;

	if (value < 0.0) {
 8011c08:	f04f 0200 	mov.w	r2, #0
 8011c0c:	f04f 0300 	mov.w	r3, #0
 8011c10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011c14:	f7ee ff16 	bl	8000a44 <__aeabi_dcmplt>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d00d      	beq.n	8011c3a <pif_FloatToString+0x46>
		p_buffer[idx++] = '-';
 8011c1e:	8abb      	ldrh	r3, [r7, #20]
 8011c20:	1c5a      	adds	r2, r3, #1
 8011c22:	82ba      	strh	r2, [r7, #20]
 8011c24:	461a      	mov	r2, r3
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	4413      	add	r3, r2
 8011c2a:	222d      	movs	r2, #45	; 0x2d
 8011c2c:	701a      	strb	r2, [r3, #0]
		value *= -1.0;
 8011c2e:	683c      	ldr	r4, [r7, #0]
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8011c36:	e9c7 4500 	strd	r4, r5, [r7]
	}

	num = (uint32_t)value;
 8011c3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011c3e:	f7ee ff51 	bl	8000ae4 <__aeabi_d2uiz>
 8011c42:	4603      	mov	r3, r0
 8011c44:	613b      	str	r3, [r7, #16]
	idx += pif_DecToString(p_buffer + idx, num, 0);
 8011c46:	8abb      	ldrh	r3, [r7, #20]
 8011c48:	68fa      	ldr	r2, [r7, #12]
 8011c4a:	4413      	add	r3, r2
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	6939      	ldr	r1, [r7, #16]
 8011c50:	4618      	mov	r0, r3
 8011c52:	f7ff fec1 	bl	80119d8 <pif_DecToString>
 8011c56:	4603      	mov	r3, r0
 8011c58:	b29a      	uxth	r2, r3
 8011c5a:	8abb      	ldrh	r3, [r7, #20]
 8011c5c:	4413      	add	r3, r2
 8011c5e:	82bb      	strh	r3, [r7, #20]
	p_buffer[idx++] = '.';
 8011c60:	8abb      	ldrh	r3, [r7, #20]
 8011c62:	1c5a      	adds	r2, r3, #1
 8011c64:	82ba      	strh	r2, [r7, #20]
 8011c66:	461a      	mov	r2, r3
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	4413      	add	r3, r2
 8011c6c:	222e      	movs	r2, #46	; 0x2e
 8011c6e:	701a      	strb	r2, [r3, #0]

	if (point == 0) point = 6;
 8011c70:	897b      	ldrh	r3, [r7, #10]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d101      	bne.n	8011c7a <pif_FloatToString+0x86>
 8011c76:	2306      	movs	r3, #6
 8011c78:	817b      	strh	r3, [r7, #10]
	value -= num;
 8011c7a:	6938      	ldr	r0, [r7, #16]
 8011c7c:	f7ee fbf6 	bl	800046c <__aeabi_ui2d>
 8011c80:	4602      	mov	r2, r0
 8011c82:	460b      	mov	r3, r1
 8011c84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011c88:	f7ee fab2 	bl	80001f0 <__aeabi_dsub>
 8011c8c:	4602      	mov	r2, r0
 8011c8e:	460b      	mov	r3, r1
 8011c90:	e9c7 2300 	strd	r2, r3, [r7]
	for (i = 0; i < point; i++) value *= 10;
 8011c94:	2300      	movs	r3, #0
 8011c96:	82fb      	strh	r3, [r7, #22]
 8011c98:	e00d      	b.n	8011cb6 <pif_FloatToString+0xc2>
 8011c9a:	f04f 0200 	mov.w	r2, #0
 8011c9e:	4b13      	ldr	r3, [pc, #76]	; (8011cec <pif_FloatToString+0xf8>)
 8011ca0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011ca4:	f7ee fc5c 	bl	8000560 <__aeabi_dmul>
 8011ca8:	4602      	mov	r2, r0
 8011caa:	460b      	mov	r3, r1
 8011cac:	e9c7 2300 	strd	r2, r3, [r7]
 8011cb0:	8afb      	ldrh	r3, [r7, #22]
 8011cb2:	3301      	adds	r3, #1
 8011cb4:	82fb      	strh	r3, [r7, #22]
 8011cb6:	8afa      	ldrh	r2, [r7, #22]
 8011cb8:	897b      	ldrh	r3, [r7, #10]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d3ed      	bcc.n	8011c9a <pif_FloatToString+0xa6>

	idx += pif_DecToString(p_buffer + idx, (uint32_t)value, point);
 8011cbe:	8abb      	ldrh	r3, [r7, #20]
 8011cc0:	68fa      	ldr	r2, [r7, #12]
 8011cc2:	18d4      	adds	r4, r2, r3
 8011cc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011cc8:	f7ee ff0c 	bl	8000ae4 <__aeabi_d2uiz>
 8011ccc:	4601      	mov	r1, r0
 8011cce:	897b      	ldrh	r3, [r7, #10]
 8011cd0:	461a      	mov	r2, r3
 8011cd2:	4620      	mov	r0, r4
 8011cd4:	f7ff fe80 	bl	80119d8 <pif_DecToString>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	b29a      	uxth	r2, r3
 8011cdc:	8abb      	ldrh	r3, [r7, #20]
 8011cde:	4413      	add	r3, r2
 8011ce0:	82bb      	strh	r3, [r7, #20]
    return idx;
 8011ce2:	8abb      	ldrh	r3, [r7, #20]
}
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	3718      	adds	r7, #24
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	bdb0      	pop	{r4, r5, r7, pc}
 8011cec:	40240000 	.word	0x40240000

08011cf0 <pif_PrintFormat>:

void pif_PrintFormat(char* p_buffer, va_list* p_data, const char* p_format)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b08c      	sub	sp, #48	; 0x30
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	60f8      	str	r0, [r7, #12]
 8011cf8:	60b9      	str	r1, [r7, #8]
 8011cfa:	607a      	str	r2, [r7, #4]
	unsigned long ulong_val;
	long long_val;
	uint16_t num_str_cnt;
	BOOL is_long;
	char *p_var_str;
	int offset = 0;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	623b      	str	r3, [r7, #32]
	size_t size;

	while (*p_format) {
 8011d00:	e242      	b.n	8012188 <pif_PrintFormat+0x498>
        if (*p_format == '%') {
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	781b      	ldrb	r3, [r3, #0]
 8011d06:	2b25      	cmp	r3, #37	; 0x25
 8011d08:	f040 8230 	bne.w	801216c <pif_PrintFormat+0x47c>
            num_str_cnt = 0;
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	84fb      	strh	r3, [r7, #38]	; 0x26
        	is_long = FALSE;
 8011d10:	2300      	movs	r3, #0
 8011d12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
NEXT_STR:
			p_format = p_format + 1;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	3301      	adds	r3, #1
 8011d1a:	607b      	str	r3, [r7, #4]
            switch(*p_format) {
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	781b      	ldrb	r3, [r3, #0]
 8011d20:	3b25      	subs	r3, #37	; 0x25
 8011d22:	2b53      	cmp	r3, #83	; 0x53
 8011d24:	f200 822d 	bhi.w	8012182 <pif_PrintFormat+0x492>
 8011d28:	a201      	add	r2, pc, #4	; (adr r2, 8011d30 <pif_PrintFormat+0x40>)
 8011d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d2e:	bf00      	nop
 8011d30:	0801215b 	.word	0x0801215b
 8011d34:	08012183 	.word	0x08012183
 8011d38:	08012183 	.word	0x08012183
 8011d3c:	08012183 	.word	0x08012183
 8011d40:	08012183 	.word	0x08012183
 8011d44:	08012183 	.word	0x08012183
 8011d48:	08012183 	.word	0x08012183
 8011d4c:	08012183 	.word	0x08012183
 8011d50:	08012183 	.word	0x08012183
 8011d54:	08012183 	.word	0x08012183
 8011d58:	08012183 	.word	0x08012183
 8011d5c:	08011e81 	.word	0x08011e81
 8011d60:	08011e81 	.word	0x08011e81
 8011d64:	08011e81 	.word	0x08011e81
 8011d68:	08011e81 	.word	0x08011e81
 8011d6c:	08011e81 	.word	0x08011e81
 8011d70:	08011e81 	.word	0x08011e81
 8011d74:	08011e81 	.word	0x08011e81
 8011d78:	08011e81 	.word	0x08011e81
 8011d7c:	08011e81 	.word	0x08011e81
 8011d80:	08011e81 	.word	0x08011e81
 8011d84:	08012183 	.word	0x08012183
 8011d88:	08012183 	.word	0x08012183
 8011d8c:	08012183 	.word	0x08012183
 8011d90:	08012183 	.word	0x08012183
 8011d94:	08012183 	.word	0x08012183
 8011d98:	08012183 	.word	0x08012183
 8011d9c:	08012183 	.word	0x08012183
 8011da0:	08012183 	.word	0x08012183
 8011da4:	08012183 	.word	0x08012183
 8011da8:	08012183 	.word	0x08012183
 8011dac:	08012183 	.word	0x08012183
 8011db0:	08012183 	.word	0x08012183
 8011db4:	08012183 	.word	0x08012183
 8011db8:	08012183 	.word	0x08012183
 8011dbc:	08012183 	.word	0x08012183
 8011dc0:	08012183 	.word	0x08012183
 8011dc4:	08012183 	.word	0x08012183
 8011dc8:	08012183 	.word	0x08012183
 8011dcc:	08012183 	.word	0x08012183
 8011dd0:	08012183 	.word	0x08012183
 8011dd4:	08012183 	.word	0x08012183
 8011dd8:	08012183 	.word	0x08012183
 8011ddc:	08012183 	.word	0x08012183
 8011de0:	08012183 	.word	0x08012183
 8011de4:	08012183 	.word	0x08012183
 8011de8:	08012183 	.word	0x08012183
 8011dec:	08012183 	.word	0x08012183
 8011df0:	08012183 	.word	0x08012183
 8011df4:	08012183 	.word	0x08012183
 8011df8:	08012183 	.word	0x08012183
 8011dfc:	08012057 	.word	0x08012057
 8011e00:	08012183 	.word	0x08012183
 8011e04:	08012183 	.word	0x08012183
 8011e08:	08012183 	.word	0x08012183
 8011e0c:	08012183 	.word	0x08012183
 8011e10:	08012183 	.word	0x08012183
 8011e14:	08012183 	.word	0x08012183
 8011e18:	08012183 	.word	0x08012183
 8011e1c:	08012183 	.word	0x08012183
 8011e20:	08012183 	.word	0x08012183
 8011e24:	08011ea7 	.word	0x08011ea7
 8011e28:	0801213d 	.word	0x0801213d
 8011e2c:	08011eff 	.word	0x08011eff
 8011e30:	08012183 	.word	0x08012183
 8011e34:	080120af 	.word	0x080120af
 8011e38:	08012183 	.word	0x08012183
 8011e3c:	08012183 	.word	0x08012183
 8011e40:	08011eff 	.word	0x08011eff
 8011e44:	08012183 	.word	0x08012183
 8011e48:	08012183 	.word	0x08012183
 8011e4c:	08011e9f 	.word	0x08011e9f
 8011e50:	08012183 	.word	0x08012183
 8011e54:	08012183 	.word	0x08012183
 8011e58:	08012183 	.word	0x08012183
 8011e5c:	08012183 	.word	0x08012183
 8011e60:	08012183 	.word	0x08012183
 8011e64:	08012183 	.word	0x08012183
 8011e68:	080120e5 	.word	0x080120e5
 8011e6c:	08012183 	.word	0x08012183
 8011e70:	08011fa7 	.word	0x08011fa7
 8011e74:	08012183 	.word	0x08012183
 8011e78:	08012183 	.word	0x08012183
 8011e7c:	08011fff 	.word	0x08011fff
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                    num_str_cnt *= 10;
 8011e80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011e82:	461a      	mov	r2, r3
 8011e84:	0092      	lsls	r2, r2, #2
 8011e86:	4413      	add	r3, r2
 8011e88:	005b      	lsls	r3, r3, #1
 8011e8a:	84fb      	strh	r3, [r7, #38]	; 0x26
                    num_str_cnt += *p_format - '0';
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	781b      	ldrb	r3, [r3, #0]
 8011e90:	b29a      	uxth	r2, r3
 8011e92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011e94:	4413      	add	r3, r2
 8011e96:	b29b      	uxth	r3, r3
 8011e98:	3b30      	subs	r3, #48	; 0x30
 8011e9a:	84fb      	strh	r3, [r7, #38]	; 0x26
                    goto NEXT_STR;
 8011e9c:	e73b      	b.n	8011d16 <pif_PrintFormat+0x26>

                case 'l':
					is_long = TRUE;
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					goto NEXT_STR;
 8011ea4:	e737      	b.n	8011d16 <pif_PrintFormat+0x26>

                case 'b':
                	if (is_long) {
 8011ea6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d013      	beq.n	8011ed6 <pif_PrintFormat+0x1e6>
                		ulong_val = va_arg(*p_data, unsigned long);
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	1d19      	adds	r1, r3, #4
 8011eb4:	68ba      	ldr	r2, [r7, #8]
 8011eb6:	6011      	str	r1, [r2, #0]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	617b      	str	r3, [r7, #20]
						offset += pif_BinToString(p_buffer + offset, ulong_val, num_str_cnt);
 8011ebc:	6a3b      	ldr	r3, [r7, #32]
 8011ebe:	68fa      	ldr	r2, [r7, #12]
 8011ec0:	4413      	add	r3, r2
 8011ec2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011ec4:	6979      	ldr	r1, [r7, #20]
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f7ff fd26 	bl	8011918 <pif_BinToString>
 8011ecc:	4602      	mov	r2, r0
 8011ece:	6a3b      	ldr	r3, [r7, #32]
 8011ed0:	4413      	add	r3, r2
 8011ed2:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_BinToString(p_buffer + offset, uint_val, num_str_cnt);
                	}
                    break;
 8011ed4:	e155      	b.n	8012182 <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	1d19      	adds	r1, r3, #4
 8011edc:	68ba      	ldr	r2, [r7, #8]
 8011ede:	6011      	str	r1, [r2, #0]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	61bb      	str	r3, [r7, #24]
						offset += pif_BinToString(p_buffer + offset, uint_val, num_str_cnt);
 8011ee4:	6a3b      	ldr	r3, [r7, #32]
 8011ee6:	68fa      	ldr	r2, [r7, #12]
 8011ee8:	4413      	add	r3, r2
 8011eea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011eec:	69b9      	ldr	r1, [r7, #24]
 8011eee:	4618      	mov	r0, r3
 8011ef0:	f7ff fd12 	bl	8011918 <pif_BinToString>
 8011ef4:	4602      	mov	r2, r0
 8011ef6:	6a3b      	ldr	r3, [r7, #32]
 8011ef8:	4413      	add	r3, r2
 8011efa:	623b      	str	r3, [r7, #32]
                    break;
 8011efc:	e141      	b.n	8012182 <pif_PrintFormat+0x492>

                case 'd':
                case 'i':
                	if (is_long) {
 8011efe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d027      	beq.n	8011f56 <pif_PrintFormat+0x266>
            			long_val = va_arg(*p_data, long);
 8011f06:	68bb      	ldr	r3, [r7, #8]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	1d19      	adds	r1, r3, #4
 8011f0c:	68ba      	ldr	r2, [r7, #8]
 8011f0e:	6011      	str	r1, [r2, #0]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	62bb      	str	r3, [r7, #40]	; 0x28
            			if (long_val < 0) {
 8011f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	da10      	bge.n	8011f3c <pif_PrintFormat+0x24c>
            				p_buffer[offset++] = '-';
 8011f1a:	6a3b      	ldr	r3, [r7, #32]
 8011f1c:	1c5a      	adds	r2, r3, #1
 8011f1e:	623a      	str	r2, [r7, #32]
 8011f20:	461a      	mov	r2, r3
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	4413      	add	r3, r2
 8011f26:	222d      	movs	r2, #45	; 0x2d
 8011f28:	701a      	strb	r2, [r3, #0]
            				long_val *= -1;
 8011f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f2c:	425b      	negs	r3, r3
 8011f2e:	62bb      	str	r3, [r7, #40]	; 0x28
            				if (num_str_cnt) num_str_cnt--;
 8011f30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d002      	beq.n	8011f3c <pif_PrintFormat+0x24c>
 8011f36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011f38:	3b01      	subs	r3, #1
 8011f3a:	84fb      	strh	r3, [r7, #38]	; 0x26
            			}
            			offset += pif_DecToString(p_buffer + offset, long_val, num_str_cnt);
 8011f3c:	6a3b      	ldr	r3, [r7, #32]
 8011f3e:	68fa      	ldr	r2, [r7, #12]
 8011f40:	4413      	add	r3, r2
 8011f42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011f44:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011f46:	4618      	mov	r0, r3
 8011f48:	f7ff fd46 	bl	80119d8 <pif_DecToString>
 8011f4c:	4602      	mov	r2, r0
 8011f4e:	6a3b      	ldr	r3, [r7, #32]
 8011f50:	4413      	add	r3, r2
 8011f52:	623b      	str	r3, [r7, #32]
                			int_val *= -1;
                			if (num_str_cnt) num_str_cnt--;
            			}
            			offset += pif_DecToString(p_buffer + offset, int_val, num_str_cnt);
                	}
                    break;
 8011f54:	e115      	b.n	8012182 <pif_PrintFormat+0x492>
            			int_val = va_arg(*p_data, int);
 8011f56:	68bb      	ldr	r3, [r7, #8]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	1d19      	adds	r1, r3, #4
 8011f5c:	68ba      	ldr	r2, [r7, #8]
 8011f5e:	6011      	str	r1, [r2, #0]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	62fb      	str	r3, [r7, #44]	; 0x2c
            			if (int_val < 0) {
 8011f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	da10      	bge.n	8011f8c <pif_PrintFormat+0x29c>
            				p_buffer[offset++] = '-';
 8011f6a:	6a3b      	ldr	r3, [r7, #32]
 8011f6c:	1c5a      	adds	r2, r3, #1
 8011f6e:	623a      	str	r2, [r7, #32]
 8011f70:	461a      	mov	r2, r3
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	4413      	add	r3, r2
 8011f76:	222d      	movs	r2, #45	; 0x2d
 8011f78:	701a      	strb	r2, [r3, #0]
                			int_val *= -1;
 8011f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f7c:	425b      	negs	r3, r3
 8011f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                			if (num_str_cnt) num_str_cnt--;
 8011f80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d002      	beq.n	8011f8c <pif_PrintFormat+0x29c>
 8011f86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011f88:	3b01      	subs	r3, #1
 8011f8a:	84fb      	strh	r3, [r7, #38]	; 0x26
            			offset += pif_DecToString(p_buffer + offset, int_val, num_str_cnt);
 8011f8c:	6a3b      	ldr	r3, [r7, #32]
 8011f8e:	68fa      	ldr	r2, [r7, #12]
 8011f90:	4413      	add	r3, r2
 8011f92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011f94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011f96:	4618      	mov	r0, r3
 8011f98:	f7ff fd1e 	bl	80119d8 <pif_DecToString>
 8011f9c:	4602      	mov	r2, r0
 8011f9e:	6a3b      	ldr	r3, [r7, #32]
 8011fa0:	4413      	add	r3, r2
 8011fa2:	623b      	str	r3, [r7, #32]
                    break;
 8011fa4:	e0ed      	b.n	8012182 <pif_PrintFormat+0x492>

                case 'u':
                	if (is_long) {
 8011fa6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d013      	beq.n	8011fd6 <pif_PrintFormat+0x2e6>
						ulong_val = va_arg(*p_data, unsigned long);
 8011fae:	68bb      	ldr	r3, [r7, #8]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	1d19      	adds	r1, r3, #4
 8011fb4:	68ba      	ldr	r2, [r7, #8]
 8011fb6:	6011      	str	r1, [r2, #0]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	617b      	str	r3, [r7, #20]
						offset += pif_DecToString(p_buffer + offset, ulong_val, num_str_cnt);
 8011fbc:	6a3b      	ldr	r3, [r7, #32]
 8011fbe:	68fa      	ldr	r2, [r7, #12]
 8011fc0:	4413      	add	r3, r2
 8011fc2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011fc4:	6979      	ldr	r1, [r7, #20]
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f7ff fd06 	bl	80119d8 <pif_DecToString>
 8011fcc:	4602      	mov	r2, r0
 8011fce:	6a3b      	ldr	r3, [r7, #32]
 8011fd0:	4413      	add	r3, r2
 8011fd2:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_DecToString(p_buffer + offset, uint_val, num_str_cnt);
                	}
                    break;
 8011fd4:	e0d5      	b.n	8012182 <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 8011fd6:	68bb      	ldr	r3, [r7, #8]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	1d19      	adds	r1, r3, #4
 8011fdc:	68ba      	ldr	r2, [r7, #8]
 8011fde:	6011      	str	r1, [r2, #0]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	61bb      	str	r3, [r7, #24]
						offset += pif_DecToString(p_buffer + offset, uint_val, num_str_cnt);
 8011fe4:	6a3b      	ldr	r3, [r7, #32]
 8011fe6:	68fa      	ldr	r2, [r7, #12]
 8011fe8:	4413      	add	r3, r2
 8011fea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011fec:	69b9      	ldr	r1, [r7, #24]
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f7ff fcf2 	bl	80119d8 <pif_DecToString>
 8011ff4:	4602      	mov	r2, r0
 8011ff6:	6a3b      	ldr	r3, [r7, #32]
 8011ff8:	4413      	add	r3, r2
 8011ffa:	623b      	str	r3, [r7, #32]
                    break;
 8011ffc:	e0c1      	b.n	8012182 <pif_PrintFormat+0x492>

                case 'x':
                	if (is_long) {
 8011ffe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8012002:	2b00      	cmp	r3, #0
 8012004:	d013      	beq.n	801202e <pif_PrintFormat+0x33e>
                		ulong_val = va_arg(*p_data, unsigned long);
 8012006:	68bb      	ldr	r3, [r7, #8]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	1d19      	adds	r1, r3, #4
 801200c:	68ba      	ldr	r2, [r7, #8]
 801200e:	6011      	str	r1, [r2, #0]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	617b      	str	r3, [r7, #20]
						offset += pif_HexToString(p_buffer + offset, ulong_val, num_str_cnt, FALSE);
 8012014:	6a3b      	ldr	r3, [r7, #32]
 8012016:	68fa      	ldr	r2, [r7, #12]
 8012018:	18d0      	adds	r0, r2, r3
 801201a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801201c:	2300      	movs	r3, #0
 801201e:	6979      	ldr	r1, [r7, #20]
 8012020:	f7ff fd74 	bl	8011b0c <pif_HexToString>
 8012024:	4602      	mov	r2, r0
 8012026:	6a3b      	ldr	r3, [r7, #32]
 8012028:	4413      	add	r3, r2
 801202a:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, FALSE);
                	}
                    break;
 801202c:	e0a9      	b.n	8012182 <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 801202e:	68bb      	ldr	r3, [r7, #8]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	1d19      	adds	r1, r3, #4
 8012034:	68ba      	ldr	r2, [r7, #8]
 8012036:	6011      	str	r1, [r2, #0]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	61bb      	str	r3, [r7, #24]
						offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, FALSE);
 801203c:	6a3b      	ldr	r3, [r7, #32]
 801203e:	68fa      	ldr	r2, [r7, #12]
 8012040:	18d0      	adds	r0, r2, r3
 8012042:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012044:	2300      	movs	r3, #0
 8012046:	69b9      	ldr	r1, [r7, #24]
 8012048:	f7ff fd60 	bl	8011b0c <pif_HexToString>
 801204c:	4602      	mov	r2, r0
 801204e:	6a3b      	ldr	r3, [r7, #32]
 8012050:	4413      	add	r3, r2
 8012052:	623b      	str	r3, [r7, #32]
                    break;
 8012054:	e095      	b.n	8012182 <pif_PrintFormat+0x492>

                case 'X':
                	if (is_long) {
 8012056:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801205a:	2b00      	cmp	r3, #0
 801205c:	d013      	beq.n	8012086 <pif_PrintFormat+0x396>
                		ulong_val = va_arg(*p_data, unsigned long);
 801205e:	68bb      	ldr	r3, [r7, #8]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	1d19      	adds	r1, r3, #4
 8012064:	68ba      	ldr	r2, [r7, #8]
 8012066:	6011      	str	r1, [r2, #0]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	617b      	str	r3, [r7, #20]
                		offset += pif_HexToString(p_buffer + offset, ulong_val, num_str_cnt, TRUE);
 801206c:	6a3b      	ldr	r3, [r7, #32]
 801206e:	68fa      	ldr	r2, [r7, #12]
 8012070:	18d0      	adds	r0, r2, r3
 8012072:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012074:	2301      	movs	r3, #1
 8012076:	6979      	ldr	r1, [r7, #20]
 8012078:	f7ff fd48 	bl	8011b0c <pif_HexToString>
 801207c:	4602      	mov	r2, r0
 801207e:	6a3b      	ldr	r3, [r7, #32]
 8012080:	4413      	add	r3, r2
 8012082:	623b      	str	r3, [r7, #32]
                	}
                	else {
                		uint_val = va_arg(*p_data, unsigned int);
                		offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, TRUE);
                	}
                    break;
 8012084:	e07d      	b.n	8012182 <pif_PrintFormat+0x492>
                		uint_val = va_arg(*p_data, unsigned int);
 8012086:	68bb      	ldr	r3, [r7, #8]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	1d19      	adds	r1, r3, #4
 801208c:	68ba      	ldr	r2, [r7, #8]
 801208e:	6011      	str	r1, [r2, #0]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	61bb      	str	r3, [r7, #24]
                		offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, TRUE);
 8012094:	6a3b      	ldr	r3, [r7, #32]
 8012096:	68fa      	ldr	r2, [r7, #12]
 8012098:	18d0      	adds	r0, r2, r3
 801209a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801209c:	2301      	movs	r3, #1
 801209e:	69b9      	ldr	r1, [r7, #24]
 80120a0:	f7ff fd34 	bl	8011b0c <pif_HexToString>
 80120a4:	4602      	mov	r2, r0
 80120a6:	6a3b      	ldr	r3, [r7, #32]
 80120a8:	4413      	add	r3, r2
 80120aa:	623b      	str	r3, [r7, #32]
                    break;
 80120ac:	e069      	b.n	8012182 <pif_PrintFormat+0x492>

                case 'f':
					offset += pif_FloatToString(p_buffer + offset, va_arg(*p_data, double), num_str_cnt);
 80120ae:	6a3b      	ldr	r3, [r7, #32]
 80120b0:	68fa      	ldr	r2, [r7, #12]
 80120b2:	18d0      	adds	r0, r2, r3
 80120b4:	68bb      	ldr	r3, [r7, #8]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	3307      	adds	r3, #7
 80120ba:	f023 0307 	bic.w	r3, r3, #7
 80120be:	f103 0108 	add.w	r1, r3, #8
 80120c2:	68ba      	ldr	r2, [r7, #8]
 80120c4:	6011      	str	r1, [r2, #0]
 80120c6:	ed93 7b00 	vldr	d7, [r3]
 80120ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80120cc:	4619      	mov	r1, r3
 80120ce:	eeb0 0a47 	vmov.f32	s0, s14
 80120d2:	eef0 0a67 	vmov.f32	s1, s15
 80120d6:	f7ff fd8d 	bl	8011bf4 <pif_FloatToString>
 80120da:	4602      	mov	r2, r0
 80120dc:	6a3b      	ldr	r3, [r7, #32]
 80120de:	4413      	add	r3, r2
 80120e0:	623b      	str	r3, [r7, #32]
                    break;
 80120e2:	e04e      	b.n	8012182 <pif_PrintFormat+0x492>

                case 's':
                    p_var_str = va_arg(*p_data, char *);
 80120e4:	68bb      	ldr	r3, [r7, #8]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	1d19      	adds	r1, r3, #4
 80120ea:	68ba      	ldr	r2, [r7, #8]
 80120ec:	6011      	str	r1, [r2, #0]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	613b      	str	r3, [r7, #16]
                    if (p_var_str) {
 80120f2:	693b      	ldr	r3, [r7, #16]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d043      	beq.n	8012180 <pif_PrintFormat+0x490>
						size = strlen(p_var_str);
 80120f8:	6938      	ldr	r0, [r7, #16]
 80120fa:	f7ee f86d 	bl	80001d8 <strlen>
 80120fe:	61f8      	str	r0, [r7, #28]
						if (offset + size < PIF_LOG_LINE_SIZE - 1) {
 8012100:	6a3a      	ldr	r2, [r7, #32]
 8012102:	69fb      	ldr	r3, [r7, #28]
 8012104:	4413      	add	r3, r2
 8012106:	2b4e      	cmp	r3, #78	; 0x4e
 8012108:	d807      	bhi.n	801211a <pif_PrintFormat+0x42a>
							strcpy(p_buffer + offset, p_var_str);
 801210a:	6a3b      	ldr	r3, [r7, #32]
 801210c:	68fa      	ldr	r2, [r7, #12]
 801210e:	4413      	add	r3, r2
 8012110:	6939      	ldr	r1, [r7, #16]
 8012112:	4618      	mov	r0, r3
 8012114:	f012 f816 	bl	8024144 <strcpy>
 8012118:	e00b      	b.n	8012132 <pif_PrintFormat+0x442>
						}
						else {
							size = PIF_LOG_LINE_SIZE - 1 - offset;
 801211a:	6a3b      	ldr	r3, [r7, #32]
 801211c:	f1c3 034f 	rsb	r3, r3, #79	; 0x4f
 8012120:	61fb      	str	r3, [r7, #28]
							strncpy(p_buffer + offset, p_var_str, size);
 8012122:	6a3b      	ldr	r3, [r7, #32]
 8012124:	68fa      	ldr	r2, [r7, #12]
 8012126:	4413      	add	r3, r2
 8012128:	69fa      	ldr	r2, [r7, #28]
 801212a:	6939      	ldr	r1, [r7, #16]
 801212c:	4618      	mov	r0, r3
 801212e:	f012 f833 	bl	8024198 <strncpy>
						}
						offset += size;
 8012132:	6a3a      	ldr	r2, [r7, #32]
 8012134:	69fb      	ldr	r3, [r7, #28]
 8012136:	4413      	add	r3, r2
 8012138:	623b      	str	r3, [r7, #32]
                    }
                    break;
 801213a:	e021      	b.n	8012180 <pif_PrintFormat+0x490>

                case 'c':
                	p_buffer[offset++] = va_arg(*p_data, int);
 801213c:	68bb      	ldr	r3, [r7, #8]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	1d19      	adds	r1, r3, #4
 8012142:	68ba      	ldr	r2, [r7, #8]
 8012144:	6011      	str	r1, [r2, #0]
 8012146:	6819      	ldr	r1, [r3, #0]
 8012148:	6a3b      	ldr	r3, [r7, #32]
 801214a:	1c5a      	adds	r2, r3, #1
 801214c:	623a      	str	r2, [r7, #32]
 801214e:	461a      	mov	r2, r3
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	4413      	add	r3, r2
 8012154:	b2ca      	uxtb	r2, r1
 8012156:	701a      	strb	r2, [r3, #0]
                    break;
 8012158:	e013      	b.n	8012182 <pif_PrintFormat+0x492>

                case '%':
                	p_buffer[offset++] = '%';
 801215a:	6a3b      	ldr	r3, [r7, #32]
 801215c:	1c5a      	adds	r2, r3, #1
 801215e:	623a      	str	r2, [r7, #32]
 8012160:	461a      	mov	r2, r3
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	4413      	add	r3, r2
 8012166:	2225      	movs	r2, #37	; 0x25
 8012168:	701a      	strb	r2, [r3, #0]
                    break;
 801216a:	e00a      	b.n	8012182 <pif_PrintFormat+0x492>
            }
        }
        else {
        	p_buffer[offset++] = *p_format;
 801216c:	6a3b      	ldr	r3, [r7, #32]
 801216e:	1c5a      	adds	r2, r3, #1
 8012170:	623a      	str	r2, [r7, #32]
 8012172:	461a      	mov	r2, r3
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	4413      	add	r3, r2
 8012178:	687a      	ldr	r2, [r7, #4]
 801217a:	7812      	ldrb	r2, [r2, #0]
 801217c:	701a      	strb	r2, [r3, #0]
 801217e:	e000      	b.n	8012182 <pif_PrintFormat+0x492>
                    break;
 8012180:	bf00      	nop
        }
        p_format = p_format + 1;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	3301      	adds	r3, #1
 8012186:	607b      	str	r3, [r7, #4]
	while (*p_format) {
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	781b      	ldrb	r3, [r3, #0]
 801218c:	2b00      	cmp	r3, #0
 801218e:	f47f adb8 	bne.w	8011d02 <pif_PrintFormat+0x12>
	}
	p_buffer[offset] = 0;
 8012192:	6a3b      	ldr	r3, [r7, #32]
 8012194:	68fa      	ldr	r2, [r7, #12]
 8012196:	4413      	add	r3, r2
 8012198:	2200      	movs	r2, #0
 801219a:	701a      	strb	r2, [r3, #0]
}
 801219c:	bf00      	nop
 801219e:	3730      	adds	r7, #48	; 0x30
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}

080121a4 <pif_Printf>:

void pif_Printf(char* p_buffer, const char* p_format, ...)
{
 80121a4:	b40e      	push	{r1, r2, r3}
 80121a6:	b580      	push	{r7, lr}
 80121a8:	b085      	sub	sp, #20
 80121aa:	af00      	add	r7, sp, #0
 80121ac:	6078      	str	r0, [r7, #4]
	va_list data;

	va_start(data, p_format);
 80121ae:	f107 0320 	add.w	r3, r7, #32
 80121b2:	60fb      	str	r3, [r7, #12]
	pif_PrintFormat(p_buffer, &data, p_format);
 80121b4:	f107 030c 	add.w	r3, r7, #12
 80121b8:	69fa      	ldr	r2, [r7, #28]
 80121ba:	4619      	mov	r1, r3
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f7ff fd97 	bl	8011cf0 <pif_PrintFormat>
	va_end(data);
}
 80121c2:	bf00      	nop
 80121c4:	3714      	adds	r7, #20
 80121c6:	46bd      	mov	sp, r7
 80121c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80121cc:	b003      	add	sp, #12
 80121ce:	4770      	bx	lr

080121d0 <pifCrc16_Add>:
	}
	return pifCrc7_Result(crc);
}

uint16_t pifCrc16_Add(uint16_t crc, uint8_t data)
{
 80121d0:	b480      	push	{r7}
 80121d2:	b085      	sub	sp, #20
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	4603      	mov	r3, r0
 80121d8:	460a      	mov	r2, r1
 80121da:	80fb      	strh	r3, [r7, #6]
 80121dc:	4613      	mov	r3, r2
 80121de:	717b      	strb	r3, [r7, #5]
	uint16_t i;

    crc ^= (uint16_t)data << 8;
 80121e0:	797b      	ldrb	r3, [r7, #5]
 80121e2:	021b      	lsls	r3, r3, #8
 80121e4:	b21a      	sxth	r2, r3
 80121e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80121ea:	4053      	eors	r3, r2
 80121ec:	b21b      	sxth	r3, r3
 80121ee:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 80121f0:	2300      	movs	r3, #0
 80121f2:	81fb      	strh	r3, [r7, #14]
 80121f4:	e013      	b.n	801221e <pifCrc16_Add+0x4e>
        if (crc & 0x8000) crc = (crc << 1) ^ 0x1021;
 80121f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	da09      	bge.n	8012212 <pifCrc16_Add+0x42>
 80121fe:	88fb      	ldrh	r3, [r7, #6]
 8012200:	005b      	lsls	r3, r3, #1
 8012202:	b21b      	sxth	r3, r3
 8012204:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8012208:	f083 0301 	eor.w	r3, r3, #1
 801220c:	b21b      	sxth	r3, r3
 801220e:	80fb      	strh	r3, [r7, #6]
 8012210:	e002      	b.n	8012218 <pifCrc16_Add+0x48>
        else crc <<= 1;
 8012212:	88fb      	ldrh	r3, [r7, #6]
 8012214:	005b      	lsls	r3, r3, #1
 8012216:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 8012218:	89fb      	ldrh	r3, [r7, #14]
 801221a:	3301      	adds	r3, #1
 801221c:	81fb      	strh	r3, [r7, #14]
 801221e:	89fb      	ldrh	r3, [r7, #14]
 8012220:	2b07      	cmp	r3, #7
 8012222:	d9e8      	bls.n	80121f6 <pifCrc16_Add+0x26>
    }
	return crc;
 8012224:	88fb      	ldrh	r3, [r7, #6]
}
 8012226:	4618      	mov	r0, r3
 8012228:	3714      	adds	r7, #20
 801222a:	46bd      	mov	sp, r7
 801222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012230:	4770      	bx	lr

08012232 <pifCrc16>:

uint16_t pifCrc16(uint8_t* p_data, uint16_t length)
{
 8012232:	b580      	push	{r7, lr}
 8012234:	b084      	sub	sp, #16
 8012236:	af00      	add	r7, sp, #0
 8012238:	6078      	str	r0, [r7, #4]
 801223a:	460b      	mov	r3, r1
 801223c:	807b      	strh	r3, [r7, #2]
	uint16_t i, crc = 0;
 801223e:	2300      	movs	r3, #0
 8012240:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < length; i++) {
 8012242:	2300      	movs	r3, #0
 8012244:	81fb      	strh	r3, [r7, #14]
 8012246:	e00d      	b.n	8012264 <pifCrc16+0x32>
		crc = pifCrc16_Add(crc, p_data[i]);
 8012248:	89fb      	ldrh	r3, [r7, #14]
 801224a:	687a      	ldr	r2, [r7, #4]
 801224c:	4413      	add	r3, r2
 801224e:	781a      	ldrb	r2, [r3, #0]
 8012250:	89bb      	ldrh	r3, [r7, #12]
 8012252:	4611      	mov	r1, r2
 8012254:	4618      	mov	r0, r3
 8012256:	f7ff ffbb 	bl	80121d0 <pifCrc16_Add>
 801225a:	4603      	mov	r3, r0
 801225c:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < length; i++) {
 801225e:	89fb      	ldrh	r3, [r7, #14]
 8012260:	3301      	adds	r3, #1
 8012262:	81fb      	strh	r3, [r7, #14]
 8012264:	89fa      	ldrh	r2, [r7, #14]
 8012266:	887b      	ldrh	r3, [r7, #2]
 8012268:	429a      	cmp	r2, r3
 801226a:	d3ed      	bcc.n	8012248 <pifCrc16+0x16>
	}
	return crc;
 801226c:	89bb      	ldrh	r3, [r7, #12]
}
 801226e:	4618      	mov	r0, r3
 8012270:	3710      	adds	r7, #16
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}

08012276 <pifCheckSum>:

uint32_t pifCheckSum(uint8_t* p_data, uint16_t length)
{
 8012276:	b480      	push	{r7}
 8012278:	b085      	sub	sp, #20
 801227a:	af00      	add	r7, sp, #0
 801227c:	6078      	str	r0, [r7, #4]
 801227e:	460b      	mov	r3, r1
 8012280:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	uint32_t sum = 0UL;
 8012282:	2300      	movs	r3, #0
 8012284:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < length; i++) {
 8012286:	2300      	movs	r3, #0
 8012288:	81fb      	strh	r3, [r7, #14]
 801228a:	e00a      	b.n	80122a2 <pifCheckSum+0x2c>
		sum += p_data[i];
 801228c:	89fb      	ldrh	r3, [r7, #14]
 801228e:	687a      	ldr	r2, [r7, #4]
 8012290:	4413      	add	r3, r2
 8012292:	781b      	ldrb	r3, [r3, #0]
 8012294:	461a      	mov	r2, r3
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	4413      	add	r3, r2
 801229a:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < length; i++) {
 801229c:	89fb      	ldrh	r3, [r7, #14]
 801229e:	3301      	adds	r3, #1
 80122a0:	81fb      	strh	r3, [r7, #14]
 80122a2:	89fa      	ldrh	r2, [r7, #14]
 80122a4:	887b      	ldrh	r3, [r7, #2]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d3f0      	bcc.n	801228c <pifCheckSum+0x16>
	}
	return sum;
 80122aa:	68bb      	ldr	r3, [r7, #8]
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3714      	adds	r7, #20
 80122b0:	46bd      	mov	sp, r7
 80122b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b6:	4770      	bx	lr

080122b8 <pifCheckXor>:

uint8_t pifCheckXor(uint8_t* p_data, uint16_t length)
{
 80122b8:	b480      	push	{r7}
 80122ba:	b085      	sub	sp, #20
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
 80122c0:	460b      	mov	r3, r1
 80122c2:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	uint8_t xor = 0;
 80122c4:	2300      	movs	r3, #0
 80122c6:	737b      	strb	r3, [r7, #13]

	for (i = 0; i < length; i++) {
 80122c8:	2300      	movs	r3, #0
 80122ca:	81fb      	strh	r3, [r7, #14]
 80122cc:	e009      	b.n	80122e2 <pifCheckXor+0x2a>
		xor ^= p_data[i];
 80122ce:	89fb      	ldrh	r3, [r7, #14]
 80122d0:	687a      	ldr	r2, [r7, #4]
 80122d2:	4413      	add	r3, r2
 80122d4:	781a      	ldrb	r2, [r3, #0]
 80122d6:	7b7b      	ldrb	r3, [r7, #13]
 80122d8:	4053      	eors	r3, r2
 80122da:	737b      	strb	r3, [r7, #13]
	for (i = 0; i < length; i++) {
 80122dc:	89fb      	ldrh	r3, [r7, #14]
 80122de:	3301      	adds	r3, #1
 80122e0:	81fb      	strh	r3, [r7, #14]
 80122e2:	89fa      	ldrh	r2, [r7, #14]
 80122e4:	887b      	ldrh	r3, [r7, #2]
 80122e6:	429a      	cmp	r2, r3
 80122e8:	d3f1      	bcc.n	80122ce <pifCheckXor+0x16>
	}
	return xor;
 80122ea:	7b7b      	ldrb	r3, [r7, #13]
}
 80122ec:	4618      	mov	r0, r3
 80122ee:	3714      	adds	r7, #20
 80122f0:	46bd      	mov	sp, r7
 80122f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f6:	4770      	bx	lr

080122f8 <_actReceiveData>:
#include "core/pif_comm.h"


static BOOL _actReceiveData(PifComm* p_owner, uint8_t* p_data)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b082      	sub	sp, #8
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
 8012300:	6039      	str	r1, [r7, #0]
	return pifRingBuffer_GetByte(p_owner->_p_rx_buffer, p_data);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	699b      	ldr	r3, [r3, #24]
 8012306:	6839      	ldr	r1, [r7, #0]
 8012308:	4618      	mov	r0, r3
 801230a:	f002 f857 	bl	80143bc <pifRingBuffer_GetByte>
 801230e:	4603      	mov	r3, r0
}
 8012310:	4618      	mov	r0, r3
 8012312:	3708      	adds	r7, #8
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}

08012318 <_actSendData>:

static uint16_t _actSendData(PifComm* p_owner, uint8_t* p_buffer, uint16_t size)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b086      	sub	sp, #24
 801231c:	af00      	add	r7, sp, #0
 801231e:	60f8      	str	r0, [r7, #12]
 8012320:	60b9      	str	r1, [r7, #8]
 8012322:	4613      	mov	r3, r2
 8012324:	80fb      	strh	r3, [r7, #6]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner->_p_tx_buffer);
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	695b      	ldr	r3, [r3, #20]
 801232a:	4618      	mov	r0, r3
 801232c:	f001 ff03 	bl	8014136 <pifRingBuffer_GetRemainSize>
 8012330:	4603      	mov	r3, r0
 8012332:	82fb      	strh	r3, [r7, #22]

	if (!remain) return 0;
 8012334:	8afb      	ldrh	r3, [r7, #22]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d101      	bne.n	801233e <_actSendData+0x26>
 801233a:	2300      	movs	r3, #0
 801233c:	e012      	b.n	8012364 <_actSendData+0x4c>
	if (size > remain) size = remain;
 801233e:	88fa      	ldrh	r2, [r7, #6]
 8012340:	8afb      	ldrh	r3, [r7, #22]
 8012342:	429a      	cmp	r2, r3
 8012344:	d901      	bls.n	801234a <_actSendData+0x32>
 8012346:	8afb      	ldrh	r3, [r7, #22]
 8012348:	80fb      	strh	r3, [r7, #6]
	if (pifRingBuffer_PutData(p_owner->_p_tx_buffer, p_buffer, size)) {
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	695b      	ldr	r3, [r3, #20]
 801234e:	88fa      	ldrh	r2, [r7, #6]
 8012350:	68b9      	ldr	r1, [r7, #8]
 8012352:	4618      	mov	r0, r3
 8012354:	f001 ff9a 	bl	801428c <pifRingBuffer_PutData>
 8012358:	4603      	mov	r3, r0
 801235a:	2b00      	cmp	r3, #0
 801235c:	d001      	beq.n	8012362 <_actSendData+0x4a>
		return size;
 801235e:	88fb      	ldrh	r3, [r7, #6]
 8012360:	e000      	b.n	8012364 <_actSendData+0x4c>
	}
	return 0;
 8012362:	2300      	movs	r3, #0
}
 8012364:	4618      	mov	r0, r3
 8012366:	3718      	adds	r7, #24
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}

0801236c <_sendData>:

static void _sendData(PifComm* p_owner)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b082      	sub	sp, #8
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
	if (p_owner->act_send_data) {
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	689b      	ldr	r3, [r3, #8]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d008      	beq.n	801238e <_sendData+0x22>
		(*p_owner->__evt_sending)(p_owner->__p_client, p_owner->act_send_data);
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012380:	687a      	ldr	r2, [r7, #4]
 8012382:	6a10      	ldr	r0, [r2, #32]
 8012384:	687a      	ldr	r2, [r7, #4]
 8012386:	6892      	ldr	r2, [r2, #8]
 8012388:	4611      	mov	r1, r2
 801238a:	4798      	blx	r3
					if (!(*p_owner->act_start_transfer)(p_owner)) p_owner->__state = CTS_IDLE;
				}
			}
		}
	}
}
 801238c:	e025      	b.n	80123da <_sendData+0x6e>
	else if (p_owner->_p_tx_buffer) {
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	695b      	ldr	r3, [r3, #20]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d021      	beq.n	80123da <_sendData+0x6e>
		if ((*p_owner->__evt_sending)(p_owner->__p_client, _actSendData)) {
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801239a:	687a      	ldr	r2, [r7, #4]
 801239c:	6a12      	ldr	r2, [r2, #32]
 801239e:	4911      	ldr	r1, [pc, #68]	; (80123e4 <_sendData+0x78>)
 80123a0:	4610      	mov	r0, r2
 80123a2:	4798      	blx	r3
 80123a4:	4603      	mov	r3, r0
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d017      	beq.n	80123da <_sendData+0x6e>
			if (p_owner->__state == CTS_IDLE) {
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d112      	bne.n	80123da <_sendData+0x6e>
				p_owner->__state = CTS_SENDING;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2201      	movs	r2, #1
 80123b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				if (p_owner->act_start_transfer) {
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	68db      	ldr	r3, [r3, #12]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d00a      	beq.n	80123da <_sendData+0x6e>
					if (!(*p_owner->act_start_transfer)(p_owner)) p_owner->__state = CTS_IDLE;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	68db      	ldr	r3, [r3, #12]
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	4798      	blx	r3
 80123cc:	4603      	mov	r3, r0
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d103      	bne.n	80123da <_sendData+0x6e>
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	2200      	movs	r2, #0
 80123d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80123da:	bf00      	nop
 80123dc:	3708      	adds	r7, #8
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
 80123e2:	bf00      	nop
 80123e4:	08012319 	.word	0x08012319

080123e8 <pifComm_Init>:

BOOL pifComm_Init(PifComm* p_owner, PifId id)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b082      	sub	sp, #8
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
 80123f0:	460b      	mov	r3, r1
 80123f2:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d104      	bne.n	8012404 <pifComm_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 80123fa:	4b0e      	ldr	r3, [pc, #56]	; (8012434 <pifComm_Init+0x4c>)
 80123fc:	2201      	movs	r2, #1
 80123fe:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8012400:	2300      	movs	r3, #0
 8012402:	e012      	b.n	801242a <pifComm_Init+0x42>
	}

	memset(p_owner, 0, sizeof(PifComm));
 8012404:	2230      	movs	r2, #48	; 0x30
 8012406:	2100      	movs	r1, #0
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f011 fd57 	bl	8023ebc <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 801240e:	887b      	ldrh	r3, [r7, #2]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d106      	bne.n	8012422 <pifComm_Init+0x3a>
 8012414:	4b08      	ldr	r3, [pc, #32]	; (8012438 <pifComm_Init+0x50>)
 8012416:	881b      	ldrh	r3, [r3, #0]
 8012418:	1c5a      	adds	r2, r3, #1
 801241a:	b291      	uxth	r1, r2
 801241c:	4a06      	ldr	r2, [pc, #24]	; (8012438 <pifComm_Init+0x50>)
 801241e:	8011      	strh	r1, [r2, #0]
 8012420:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	887a      	ldrh	r2, [r7, #2]
 8012426:	821a      	strh	r2, [r3, #16]
    return TRUE;
 8012428:	2301      	movs	r3, #1
}
 801242a:	4618      	mov	r0, r3
 801242c:	3708      	adds	r7, #8
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}
 8012432:	bf00      	nop
 8012434:	20001de0 	.word	0x20001de0
 8012438:	20000128 	.word	0x20000128

0801243c <pifComm_Clear>:

void pifComm_Clear(PifComm* p_owner)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b082      	sub	sp, #8
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_task) {
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	69db      	ldr	r3, [r3, #28]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d007      	beq.n	801245c <pifComm_Clear+0x20>
		pifTaskManager_Remove(p_owner->_p_task);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	69db      	ldr	r3, [r3, #28]
 8012450:	4618      	mov	r0, r3
 8012452:	f002 fd5b 	bl	8014f0c <pifTaskManager_Remove>
		p_owner->_p_task = NULL;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	2200      	movs	r2, #0
 801245a:	61da      	str	r2, [r3, #28]
	}
	if (p_owner->_p_rx_buffer) pifRingBuffer_Destroy(&p_owner->_p_rx_buffer);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	699b      	ldr	r3, [r3, #24]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d004      	beq.n	801246e <pifComm_Clear+0x32>
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	3318      	adds	r3, #24
 8012468:	4618      	mov	r0, r3
 801246a:	f001 fd4f 	bl	8013f0c <pifRingBuffer_Destroy>
	if (p_owner->_p_tx_buffer) pifRingBuffer_Destroy(&p_owner->_p_tx_buffer);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	695b      	ldr	r3, [r3, #20]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d004      	beq.n	8012480 <pifComm_Clear+0x44>
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	3314      	adds	r3, #20
 801247a:	4618      	mov	r0, r3
 801247c:	f001 fd46 	bl	8013f0c <pifRingBuffer_Destroy>
}
 8012480:	bf00      	nop
 8012482:	3708      	adds	r7, #8
 8012484:	46bd      	mov	sp, r7
 8012486:	bd80      	pop	{r7, pc}

08012488 <pifComm_AllocRxBuffer>:

BOOL pifComm_AllocRxBuffer(PifComm* p_owner, uint16_t rx_size, uint8_t threshold)
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b082      	sub	sp, #8
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
 8012490:	460b      	mov	r3, r1
 8012492:	807b      	strh	r3, [r7, #2]
 8012494:	4613      	mov	r3, r2
 8012496:	707b      	strb	r3, [r7, #1]
    if (!rx_size) {
 8012498:	887b      	ldrh	r3, [r7, #2]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d104      	bne.n	80124a8 <pifComm_AllocRxBuffer+0x20>
    	pif_error = E_INVALID_PARAM;
 801249e:	4b1a      	ldr	r3, [pc, #104]	; (8012508 <pifComm_AllocRxBuffer+0x80>)
 80124a0:	2201      	movs	r2, #1
 80124a2:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 80124a4:	2300      	movs	r3, #0
 80124a6:	e02a      	b.n	80124fe <pifComm_AllocRxBuffer+0x76>
    }

    p_owner->_p_rx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, rx_size);
 80124a8:	887b      	ldrh	r3, [r7, #2]
 80124aa:	4619      	mov	r1, r3
 80124ac:	2000      	movs	r0, #0
 80124ae:	f001 fd01 	bl	8013eb4 <pifRingBuffer_CreateHeap>
 80124b2:	4602      	mov	r2, r0
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	619a      	str	r2, [r3, #24]
    if (!p_owner->_p_rx_buffer) return FALSE;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	699b      	ldr	r3, [r3, #24]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d101      	bne.n	80124c4 <pifComm_AllocRxBuffer+0x3c>
 80124c0:	2300      	movs	r3, #0
 80124c2:	e01c      	b.n	80124fe <pifComm_AllocRxBuffer+0x76>
    if (threshold > 100) threshold = 100;
 80124c4:	787b      	ldrb	r3, [r7, #1]
 80124c6:	2b64      	cmp	r3, #100	; 0x64
 80124c8:	d901      	bls.n	80124ce <pifComm_AllocRxBuffer+0x46>
 80124ca:	2364      	movs	r3, #100	; 0x64
 80124cc:	707b      	strb	r3, [r7, #1]
    p_owner->__rx_threshold = rx_size * 100 / threshold;
 80124ce:	887b      	ldrh	r3, [r7, #2]
 80124d0:	2264      	movs	r2, #100	; 0x64
 80124d2:	fb03 f202 	mul.w	r2, r3, r2
 80124d6:	787b      	ldrb	r3, [r7, #1]
 80124d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80124dc:	b29a      	uxth	r2, r3
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	84da      	strh	r2, [r3, #38]	; 0x26
    if (p_owner->__rx_threshold == 0) p_owner->__rx_threshold = 1;
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d102      	bne.n	80124f0 <pifComm_AllocRxBuffer+0x68>
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	2201      	movs	r2, #1
 80124ee:	84da      	strh	r2, [r3, #38]	; 0x26
    pifRingBuffer_SetName(p_owner->_p_rx_buffer, "RB");
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	699b      	ldr	r3, [r3, #24]
 80124f4:	4905      	ldr	r1, [pc, #20]	; (801250c <pifComm_AllocRxBuffer+0x84>)
 80124f6:	4618      	mov	r0, r3
 80124f8:	f001 fd85 	bl	8014006 <pifRingBuffer_SetName>
    return TRUE;
 80124fc:	2301      	movs	r3, #1
}
 80124fe:	4618      	mov	r0, r3
 8012500:	3708      	adds	r7, #8
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}
 8012506:	bf00      	nop
 8012508:	20001de0 	.word	0x20001de0
 801250c:	080286f8 	.word	0x080286f8

08012510 <pifComm_AllocTxBuffer>:

BOOL pifComm_AllocTxBuffer(PifComm* p_owner, uint16_t tx_size)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b082      	sub	sp, #8
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
 8012518:	460b      	mov	r3, r1
 801251a:	807b      	strh	r3, [r7, #2]
	if (!tx_size) {
 801251c:	887b      	ldrh	r3, [r7, #2]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d104      	bne.n	801252c <pifComm_AllocTxBuffer+0x1c>
    	pif_error = E_INVALID_PARAM;
 8012522:	4b0f      	ldr	r3, [pc, #60]	; (8012560 <pifComm_AllocTxBuffer+0x50>)
 8012524:	2201      	movs	r2, #1
 8012526:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8012528:	2300      	movs	r3, #0
 801252a:	e014      	b.n	8012556 <pifComm_AllocTxBuffer+0x46>
    }

    p_owner->_p_tx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, tx_size);
 801252c:	887b      	ldrh	r3, [r7, #2]
 801252e:	4619      	mov	r1, r3
 8012530:	2000      	movs	r0, #0
 8012532:	f001 fcbf 	bl	8013eb4 <pifRingBuffer_CreateHeap>
 8012536:	4602      	mov	r2, r0
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	615a      	str	r2, [r3, #20]
    if (!p_owner->_p_tx_buffer) return FALSE;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	695b      	ldr	r3, [r3, #20]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d101      	bne.n	8012548 <pifComm_AllocTxBuffer+0x38>
 8012544:	2300      	movs	r3, #0
 8012546:	e006      	b.n	8012556 <pifComm_AllocTxBuffer+0x46>
    pifRingBuffer_SetName(p_owner->_p_tx_buffer, "TB");
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	695b      	ldr	r3, [r3, #20]
 801254c:	4905      	ldr	r1, [pc, #20]	; (8012564 <pifComm_AllocTxBuffer+0x54>)
 801254e:	4618      	mov	r0, r3
 8012550:	f001 fd59 	bl	8014006 <pifRingBuffer_SetName>
	return TRUE;
 8012554:	2301      	movs	r3, #1
}
 8012556:	4618      	mov	r0, r3
 8012558:	3708      	adds	r7, #8
 801255a:	46bd      	mov	sp, r7
 801255c:	bd80      	pop	{r7, pc}
 801255e:	bf00      	nop
 8012560:	20001de0 	.word	0x20001de0
 8012564:	080286fc 	.word	0x080286fc

08012568 <pifComm_AttachClient>:

void pifComm_AttachClient(PifComm* p_owner, void* p_client, PifEvtCommParsing evt_parsing, PifEvtCommSending evt_sending)
{
 8012568:	b480      	push	{r7}
 801256a:	b085      	sub	sp, #20
 801256c:	af00      	add	r7, sp, #0
 801256e:	60f8      	str	r0, [r7, #12]
 8012570:	60b9      	str	r1, [r7, #8]
 8012572:	607a      	str	r2, [r7, #4]
 8012574:	603b      	str	r3, [r7, #0]
	p_owner->__p_client = p_client;
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	68ba      	ldr	r2, [r7, #8]
 801257a:	621a      	str	r2, [r3, #32]
	p_owner->__evt_parsing = evt_parsing;
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	687a      	ldr	r2, [r7, #4]
 8012580:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__evt_sending = evt_sending;
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	683a      	ldr	r2, [r7, #0]
 8012586:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8012588:	bf00      	nop
 801258a:	3714      	adds	r7, #20
 801258c:	46bd      	mov	sp, r7
 801258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012592:	4770      	bx	lr

08012594 <pifComm_DetachClient>:

void pifComm_DetachClient(PifComm* p_owner)
{
 8012594:	b480      	push	{r7}
 8012596:	b083      	sub	sp, #12
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
	p_owner->__p_client = NULL;
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	2200      	movs	r2, #0
 80125a0:	621a      	str	r2, [r3, #32]
	p_owner->__evt_parsing = NULL;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	2200      	movs	r2, #0
 80125a6:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__evt_sending = NULL;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2200      	movs	r2, #0
 80125ac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80125ae:	bf00      	nop
 80125b0:	370c      	adds	r7, #12
 80125b2:	46bd      	mov	sp, r7
 80125b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b8:	4770      	bx	lr

080125ba <pifComm_PutRxByte>:
{
	return pifRingBuffer_GetFillSize(p_owner->_p_tx_buffer);
}

BOOL pifComm_PutRxByte(PifComm* p_owner, uint8_t data)
{
 80125ba:	b580      	push	{r7, lr}
 80125bc:	b082      	sub	sp, #8
 80125be:	af00      	add	r7, sp, #0
 80125c0:	6078      	str	r0, [r7, #4]
 80125c2:	460b      	mov	r3, r1
 80125c4:	70fb      	strb	r3, [r7, #3]
	if (!p_owner->_p_rx_buffer) return FALSE;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	699b      	ldr	r3, [r3, #24]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d101      	bne.n	80125d2 <pifComm_PutRxByte+0x18>
 80125ce:	2300      	movs	r3, #0
 80125d0:	e01c      	b.n	801260c <pifComm_PutRxByte+0x52>

	if (!pifRingBuffer_PutByte(p_owner->_p_rx_buffer, data)) return FALSE;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	699b      	ldr	r3, [r3, #24]
 80125d6:	78fa      	ldrb	r2, [r7, #3]
 80125d8:	4611      	mov	r1, r2
 80125da:	4618      	mov	r0, r3
 80125dc:	f001 fe22 	bl	8014224 <pifRingBuffer_PutByte>
 80125e0:	4603      	mov	r3, r0
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d101      	bne.n	80125ea <pifComm_PutRxByte+0x30>
 80125e6:	2300      	movs	r3, #0
 80125e8:	e010      	b.n	801260c <pifComm_PutRxByte+0x52>
	if (pifRingBuffer_GetFillSize(p_owner->_p_rx_buffer) >= p_owner->__rx_threshold) {
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	699b      	ldr	r3, [r3, #24]
 80125ee:	4618      	mov	r0, r3
 80125f0:	f001 fd56 	bl	80140a0 <pifRingBuffer_GetFillSize>
 80125f4:	4603      	mov	r3, r0
 80125f6:	461a      	mov	r2, r3
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80125fc:	429a      	cmp	r2, r3
 80125fe:	d304      	bcc.n	801260a <pifComm_PutRxByte+0x50>
		pifTask_SetTrigger(p_owner->_p_task);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	69db      	ldr	r3, [r3, #28]
 8012604:	4618      	mov	r0, r3
 8012606:	f002 fb93 	bl	8014d30 <pifTask_SetTrigger>
	}
	return TRUE;
 801260a:	2301      	movs	r3, #1
}
 801260c:	4618      	mov	r0, r3
 801260e:	3708      	adds	r7, #8
 8012610:	46bd      	mov	sp, r7
 8012612:	bd80      	pop	{r7, pc}

08012614 <pifComm_StartGetTxData>:
	else ucState |= PIF_COMM_SEND_DATA_STATE_EMPTY;
	return ucState;
}

uint8_t pifComm_StartGetTxData(PifComm* p_owner, uint8_t** pp_data, uint16_t* p_length)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b086      	sub	sp, #24
 8012618:	af00      	add	r7, sp, #0
 801261a:	60f8      	str	r0, [r7, #12]
 801261c:	60b9      	str	r1, [r7, #8]
 801261e:	607a      	str	r2, [r7, #4]
	uint16_t usLength;

    if (!p_owner->_p_tx_buffer) return PIF_COMM_SEND_DATA_STATE_INIT;
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	695b      	ldr	r3, [r3, #20]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d101      	bne.n	801262c <pifComm_StartGetTxData+0x18>
 8012628:	2300      	movs	r3, #0
 801262a:	e027      	b.n	801267c <pifComm_StartGetTxData+0x68>
    if (pifRingBuffer_IsEmpty(p_owner->_p_tx_buffer)) return PIF_COMM_SEND_DATA_STATE_EMPTY;
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	695b      	ldr	r3, [r3, #20]
 8012630:	4618      	mov	r0, r3
 8012632:	f001 fd22 	bl	801407a <pifRingBuffer_IsEmpty>
 8012636:	4603      	mov	r3, r0
 8012638:	2b00      	cmp	r3, #0
 801263a:	d001      	beq.n	8012640 <pifComm_StartGetTxData+0x2c>
 801263c:	2302      	movs	r3, #2
 801263e:	e01d      	b.n	801267c <pifComm_StartGetTxData+0x68>

    *pp_data = pifRingBuffer_GetTailPointer(p_owner->_p_tx_buffer, 0);
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	695b      	ldr	r3, [r3, #20]
 8012644:	2100      	movs	r1, #0
 8012646:	4618      	mov	r0, r3
 8012648:	f001 fceb 	bl	8014022 <pifRingBuffer_GetTailPointer>
 801264c:	4602      	mov	r2, r0
 801264e:	68bb      	ldr	r3, [r7, #8]
 8012650:	601a      	str	r2, [r3, #0]
    usLength = pifRingBuffer_GetLinerSize(p_owner->_p_tx_buffer, 0);
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	695b      	ldr	r3, [r3, #20]
 8012656:	2100      	movs	r1, #0
 8012658:	4618      	mov	r0, r3
 801265a:	f001 fd43 	bl	80140e4 <pifRingBuffer_GetLinerSize>
 801265e:	4603      	mov	r3, r0
 8012660:	82fb      	strh	r3, [r7, #22]
    if (!*p_length || usLength <= *p_length) *p_length = usLength;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	881b      	ldrh	r3, [r3, #0]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d004      	beq.n	8012674 <pifComm_StartGetTxData+0x60>
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	881b      	ldrh	r3, [r3, #0]
 801266e:	8afa      	ldrh	r2, [r7, #22]
 8012670:	429a      	cmp	r2, r3
 8012672:	d802      	bhi.n	801267a <pifComm_StartGetTxData+0x66>
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	8afa      	ldrh	r2, [r7, #22]
 8012678:	801a      	strh	r2, [r3, #0]
	return PIF_COMM_SEND_DATA_STATE_DATA;
 801267a:	2301      	movs	r3, #1
}
 801267c:	4618      	mov	r0, r3
 801267e:	3718      	adds	r7, #24
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}

08012684 <pifComm_EndGetTxData>:

uint8_t pifComm_EndGetTxData(PifComm* p_owner, uint16_t length)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b082      	sub	sp, #8
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
 801268c:	460b      	mov	r3, r1
 801268e:	807b      	strh	r3, [r7, #2]
    pifRingBuffer_Remove(p_owner->_p_tx_buffer, length);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	695b      	ldr	r3, [r3, #20]
 8012694:	887a      	ldrh	r2, [r7, #2]
 8012696:	4611      	mov	r1, r2
 8012698:	4618      	mov	r0, r3
 801269a:	f001 ff00 	bl	801449e <pifRingBuffer_Remove>
	return pifRingBuffer_IsEmpty(p_owner->_p_tx_buffer) << 1;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	695b      	ldr	r3, [r3, #20]
 80126a2:	4618      	mov	r0, r3
 80126a4:	f001 fce9 	bl	801407a <pifRingBuffer_IsEmpty>
 80126a8:	4603      	mov	r3, r0
 80126aa:	005b      	lsls	r3, r3, #1
 80126ac:	b2db      	uxtb	r3, r3
}
 80126ae:	4618      	mov	r0, r3
 80126b0:	3708      	adds	r7, #8
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}

080126b6 <pifComm_FinishTransfer>:
	}
	return FALSE;
}

void pifComm_FinishTransfer(PifComm* p_owner)
{
 80126b6:	b580      	push	{r7, lr}
 80126b8:	b082      	sub	sp, #8
 80126ba:	af00      	add	r7, sp, #0
 80126bc:	6078      	str	r0, [r7, #4]
	p_owner->__state = CTS_IDLE;
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	2200      	movs	r2, #0
 80126c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pifTask_SetTrigger(p_owner->_p_task);
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	69db      	ldr	r3, [r3, #28]
 80126ca:	4618      	mov	r0, r3
 80126cc:	f002 fb30 	bl	8014d30 <pifTask_SetTrigger>
}
 80126d0:	bf00      	nop
 80126d2:	3708      	adds	r7, #8
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bd80      	pop	{r7, pc}

080126d8 <_doTask>:
{
	if (p_owner->__evt_sending) _sendData(p_owner);
}

static uint16_t _doTask(PifTask* p_task)
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	b084      	sub	sp, #16
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
	PifComm *p_owner = p_task->_p_client;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	68db      	ldr	r3, [r3, #12]
 80126e4:	60fb      	str	r3, [r7, #12]

	if (p_owner->__evt_parsing) {
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d017      	beq.n	801271e <_doTask+0x46>
		if (p_owner->act_receive_data) {
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	685b      	ldr	r3, [r3, #4]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d008      	beq.n	8012708 <_doTask+0x30>
			(*p_owner->__evt_parsing)(p_owner->__p_client, p_owner->act_receive_data);
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126fa:	68fa      	ldr	r2, [r7, #12]
 80126fc:	6a10      	ldr	r0, [r2, #32]
 80126fe:	68fa      	ldr	r2, [r7, #12]
 8012700:	6852      	ldr	r2, [r2, #4]
 8012702:	4611      	mov	r1, r2
 8012704:	4798      	blx	r3
 8012706:	e00a      	b.n	801271e <_doTask+0x46>
		}
		else if (p_owner->_p_rx_buffer) {
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	699b      	ldr	r3, [r3, #24]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d006      	beq.n	801271e <_doTask+0x46>
			(*p_owner->__evt_parsing)(p_owner->__p_client, _actReceiveData);
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012714:	68fa      	ldr	r2, [r7, #12]
 8012716:	6a12      	ldr	r2, [r2, #32]
 8012718:	4907      	ldr	r1, [pc, #28]	; (8012738 <_doTask+0x60>)
 801271a:	4610      	mov	r0, r2
 801271c:	4798      	blx	r3
		}
	}

	if (p_owner->__evt_sending) _sendData(p_owner);
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012722:	2b00      	cmp	r3, #0
 8012724:	d002      	beq.n	801272c <_doTask+0x54>
 8012726:	68f8      	ldr	r0, [r7, #12]
 8012728:	f7ff fe20 	bl	801236c <_sendData>
	return 0;
 801272c:	2300      	movs	r3, #0
}
 801272e:	4618      	mov	r0, r3
 8012730:	3710      	adds	r7, #16
 8012732:	46bd      	mov	sp, r7
 8012734:	bd80      	pop	{r7, pc}
 8012736:	bf00      	nop
 8012738:	080122f9 	.word	0x080122f9

0801273c <pifComm_AttachTask>:

PifTask* pifComm_AttachTask(PifComm* p_owner, PifTaskMode mode, uint16_t period, BOOL start, const char* name)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	b084      	sub	sp, #16
 8012740:	af02      	add	r7, sp, #8
 8012742:	6078      	str	r0, [r7, #4]
 8012744:	4608      	mov	r0, r1
 8012746:	4611      	mov	r1, r2
 8012748:	461a      	mov	r2, r3
 801274a:	4603      	mov	r3, r0
 801274c:	70fb      	strb	r3, [r7, #3]
 801274e:	460b      	mov	r3, r1
 8012750:	803b      	strh	r3, [r7, #0]
 8012752:	4613      	mov	r3, r2
 8012754:	70bb      	strb	r3, [r7, #2]
	p_owner->_p_task = pifTaskManager_Add(mode, period, _doTask, p_owner, start);
 8012756:	8839      	ldrh	r1, [r7, #0]
 8012758:	78f8      	ldrb	r0, [r7, #3]
 801275a:	78bb      	ldrb	r3, [r7, #2]
 801275c:	9300      	str	r3, [sp, #0]
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	4a0d      	ldr	r2, [pc, #52]	; (8012798 <pifComm_AttachTask+0x5c>)
 8012762:	f002 fb6b 	bl	8014e3c <pifTaskManager_Add>
 8012766:	4602      	mov	r2, r0
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	61da      	str	r2, [r3, #28]
	if (p_owner->_p_task) {
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	69db      	ldr	r3, [r3, #28]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d00b      	beq.n	801278c <pifComm_AttachTask+0x50>
		if (name) p_owner->_p_task->name = name;
 8012774:	693b      	ldr	r3, [r7, #16]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d004      	beq.n	8012784 <pifComm_AttachTask+0x48>
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	69db      	ldr	r3, [r3, #28]
 801277e:	693a      	ldr	r2, [r7, #16]
 8012780:	601a      	str	r2, [r3, #0]
 8012782:	e003      	b.n	801278c <pifComm_AttachTask+0x50>
		else p_owner->_p_task->name = "Comm";
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	69db      	ldr	r3, [r3, #28]
 8012788:	4a04      	ldr	r2, [pc, #16]	; (801279c <pifComm_AttachTask+0x60>)
 801278a:	601a      	str	r2, [r3, #0]
	}
	return p_owner->_p_task;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	69db      	ldr	r3, [r3, #28]
}
 8012790:	4618      	mov	r0, r3
 8012792:	3708      	adds	r7, #8
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}
 8012798:	080126d9 	.word	0x080126d9
 801279c:	08028700 	.word	0x08028700

080127a0 <pifI2cPort_Init>:
#endif
#include "core/pif_task.h"


BOOL pifI2cPort_Init(PifI2cPort* p_owner, PifId id, uint8_t device_count, uint16_t max_transfer_size)
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b084      	sub	sp, #16
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	60f8      	str	r0, [r7, #12]
 80127a8:	4608      	mov	r0, r1
 80127aa:	4611      	mov	r1, r2
 80127ac:	461a      	mov	r2, r3
 80127ae:	4603      	mov	r3, r0
 80127b0:	817b      	strh	r3, [r7, #10]
 80127b2:	460b      	mov	r3, r1
 80127b4:	727b      	strb	r3, [r7, #9]
 80127b6:	4613      	mov	r3, r2
 80127b8:	80fb      	strh	r3, [r7, #6]
	if (!p_owner || !device_count || !max_transfer_size) {
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d005      	beq.n	80127cc <pifI2cPort_Init+0x2c>
 80127c0:	7a7b      	ldrb	r3, [r7, #9]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d002      	beq.n	80127cc <pifI2cPort_Init+0x2c>
 80127c6:	88fb      	ldrh	r3, [r7, #6]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d104      	bne.n	80127d6 <pifI2cPort_Init+0x36>
		pif_error = E_INVALID_PARAM;
 80127cc:	4b17      	ldr	r3, [pc, #92]	; (801282c <pifI2cPort_Init+0x8c>)
 80127ce:	2201      	movs	r2, #1
 80127d0:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80127d2:	2300      	movs	r3, #0
 80127d4:	e025      	b.n	8012822 <pifI2cPort_Init+0x82>
	}

    memset(p_owner, 0, sizeof(PifI2cPort));
 80127d6:	2230      	movs	r2, #48	; 0x30
 80127d8:	2100      	movs	r1, #0
 80127da:	68f8      	ldr	r0, [r7, #12]
 80127dc:	f011 fb6e 	bl	8023ebc <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 80127e0:	897b      	ldrh	r3, [r7, #10]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d106      	bne.n	80127f4 <pifI2cPort_Init+0x54>
 80127e6:	4b12      	ldr	r3, [pc, #72]	; (8012830 <pifI2cPort_Init+0x90>)
 80127e8:	881b      	ldrh	r3, [r3, #0]
 80127ea:	1c5a      	adds	r2, r3, #1
 80127ec:	b291      	uxth	r1, r2
 80127ee:	4a10      	ldr	r2, [pc, #64]	; (8012830 <pifI2cPort_Init+0x90>)
 80127f0:	8011      	strh	r1, [r2, #0]
 80127f2:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	897a      	ldrh	r2, [r7, #10]
 80127f8:	819a      	strh	r2, [r3, #12]
    p_owner->__max_transfer_size = max_transfer_size;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	88fa      	ldrh	r2, [r7, #6]
 80127fe:	851a      	strh	r2, [r3, #40]	; 0x28
    if (!pifFixList_Init(&p_owner->__devices, sizeof(PifI2cDevice), device_count)) goto fail;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	3310      	adds	r3, #16
 8012804:	7a7a      	ldrb	r2, [r7, #9]
 8012806:	2108      	movs	r1, #8
 8012808:	4618      	mov	r0, r3
 801280a:	f000 fac5 	bl	8012d98 <pifFixList_Init>
 801280e:	4603      	mov	r3, r0
 8012810:	2b00      	cmp	r3, #0
 8012812:	d001      	beq.n	8012818 <pifI2cPort_Init+0x78>
    return TRUE;
 8012814:	2301      	movs	r3, #1
 8012816:	e004      	b.n	8012822 <pifI2cPort_Init+0x82>
    if (!pifFixList_Init(&p_owner->__devices, sizeof(PifI2cDevice), device_count)) goto fail;
 8012818:	bf00      	nop

fail:
	pifI2cPort_Clear(p_owner);
 801281a:	68f8      	ldr	r0, [r7, #12]
 801281c:	f000 f80a 	bl	8012834 <pifI2cPort_Clear>
	return FALSE;
 8012820:	2300      	movs	r3, #0
}
 8012822:	4618      	mov	r0, r3
 8012824:	3710      	adds	r7, #16
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}
 801282a:	bf00      	nop
 801282c:	20001de0 	.word	0x20001de0
 8012830:	20000128 	.word	0x20000128

08012834 <pifI2cPort_Clear>:

void pifI2cPort_Clear(PifI2cPort* p_owner)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b082      	sub	sp, #8
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
	pifFixList_Clear(&p_owner->__devices, NULL);
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	3310      	adds	r3, #16
 8012840:	2100      	movs	r1, #0
 8012842:	4618      	mov	r0, r3
 8012844:	f000 fb08 	bl	8012e58 <pifFixList_Clear>
}
 8012848:	bf00      	nop
 801284a:	3708      	adds	r7, #8
 801284c:	46bd      	mov	sp, r7
 801284e:	bd80      	pop	{r7, pc}

08012850 <pifI2cPort_AddDevice>:

PifI2cDevice* pifI2cPort_AddDevice(PifI2cPort* p_owner)
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b084      	sub	sp, #16
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
	if (!p_owner) {
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d104      	bne.n	8012868 <pifI2cPort_AddDevice+0x18>
		pif_error = E_INVALID_PARAM;
 801285e:	4b0d      	ldr	r3, [pc, #52]	; (8012894 <pifI2cPort_AddDevice+0x44>)
 8012860:	2201      	movs	r2, #1
 8012862:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8012864:	2300      	movs	r3, #0
 8012866:	e011      	b.n	801288c <pifI2cPort_AddDevice+0x3c>
	}

	PifI2cDevice* p_device = (PifI2cDevice*)pifFixList_AddFirst(&p_owner->__devices);
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	3310      	adds	r3, #16
 801286c:	4618      	mov	r0, r3
 801286e:	f000 fb26 	bl	8012ebe <pifFixList_AddFirst>
 8012872:	60f8      	str	r0, [r7, #12]
    if (!p_device) return FALSE;
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d101      	bne.n	801287e <pifI2cPort_AddDevice+0x2e>
 801287a:	2300      	movs	r3, #0
 801287c:	e006      	b.n	801288c <pifI2cPort_AddDevice+0x3c>

    p_device->__p_port = p_owner;
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	687a      	ldr	r2, [r7, #4]
 8012882:	605a      	str	r2, [r3, #4]
    p_device->timeout = 10;		// 10ms
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	220a      	movs	r2, #10
 8012888:	705a      	strb	r2, [r3, #1]
    return p_device;
 801288a:	68fb      	ldr	r3, [r7, #12]
}
 801288c:	4618      	mov	r0, r3
 801288e:	3710      	adds	r7, #16
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}
 8012894:	20001de0 	.word	0x20001de0

08012898 <pifI2cPort_RemoveDevice>:

void pifI2cPort_RemoveDevice(PifI2cPort* p_owner, PifI2cDevice* p_device)
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b082      	sub	sp, #8
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
 80128a0:	6039      	str	r1, [r7, #0]
	if (p_device) {
 80128a2:	683b      	ldr	r3, [r7, #0]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d007      	beq.n	80128b8 <pifI2cPort_RemoveDevice+0x20>
		pifFixList_Remove(&p_owner->__devices, p_device);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	3310      	adds	r3, #16
 80128ac:	6839      	ldr	r1, [r7, #0]
 80128ae:	4618      	mov	r0, r3
 80128b0:	f000 fb39 	bl	8012f26 <pifFixList_Remove>
		p_device = NULL;
 80128b4:	2300      	movs	r3, #0
 80128b6:	603b      	str	r3, [r7, #0]
	}
}
 80128b8:	bf00      	nop
 80128ba:	3708      	adds	r7, #8
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}

080128c0 <pifI2cDevice_Read>:
}

#endif

BOOL pifI2cDevice_Read(PifI2cDevice* p_owner, uint32_t iaddr, uint8_t isize, uint8_t* p_data, size_t size)
{
 80128c0:	b5b0      	push	{r4, r5, r7, lr}
 80128c2:	b08c      	sub	sp, #48	; 0x30
 80128c4:	af02      	add	r7, sp, #8
 80128c6:	60f8      	str	r0, [r7, #12]
 80128c8:	60b9      	str	r1, [r7, #8]
 80128ca:	603b      	str	r3, [r7, #0]
 80128cc:	4613      	mov	r3, r2
 80128ce:	71fb      	strb	r3, [r7, #7]
	PifI2cPort* p_port = p_owner->__p_port;
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	685b      	ldr	r3, [r3, #4]
 80128d4:	61fb      	str	r3, [r7, #28]
	size_t ptr;
#ifndef __PIF_NO_LOG__
	int line;
#endif

	if (!p_port->act_read) return FALSE;
 80128d6:	69fb      	ldr	r3, [r7, #28]
 80128d8:	685b      	ldr	r3, [r3, #4]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d101      	bne.n	80128e2 <pifI2cDevice_Read+0x22>
 80128de:	2300      	movs	r3, #0
 80128e0:	e08e      	b.n	8012a00 <pifI2cDevice_Read+0x140>
	if (p_port->__use_device) {
 80128e2:	69fb      	ldr	r3, [r7, #28]
 80128e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d00f      	beq.n	801290a <pifI2cDevice_Read+0x4a>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_INFO, "I2CR:%u Addr:%Xh Use Addr:%Xh", __LINE__, p_owner->addr, p_port->__use_device->addr);
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	781b      	ldrb	r3, [r3, #0]
 80128ee:	461a      	mov	r2, r3
 80128f0:	69fb      	ldr	r3, [r7, #28]
 80128f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128f4:	781b      	ldrb	r3, [r3, #0]
 80128f6:	b2db      	uxtb	r3, r3
 80128f8:	9300      	str	r3, [sp, #0]
 80128fa:	4613      	mov	r3, r2
 80128fc:	2262      	movs	r2, #98	; 0x62
 80128fe:	4942      	ldr	r1, [pc, #264]	; (8012a08 <pifI2cDevice_Read+0x148>)
 8012900:	2002      	movs	r0, #2
 8012902:	f001 f979 	bl	8013bf8 <pifLog_Printf>
#endif
		return FALSE;
 8012906:	2300      	movs	r3, #0
 8012908:	e07a      	b.n	8012a00 <pifI2cDevice_Read+0x140>
	}

	p_port->__use_device = p_owner;
 801290a:	69fb      	ldr	r3, [r7, #28]
 801290c:	68fa      	ldr	r2, [r7, #12]
 801290e:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_RUN;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	2201      	movs	r2, #1
 8012914:	709a      	strb	r2, [r3, #2]
	ptr = 0;
 8012916:	2300      	movs	r3, #0
 8012918:	627b      	str	r3, [r7, #36]	; 0x24
	while (size) {
 801291a:	e048      	b.n	80129ae <pifI2cDevice_Read+0xee>
		len = size > p_port->__max_transfer_size ? p_port->__max_transfer_size : size;
 801291c:	69fb      	ldr	r3, [r7, #28]
 801291e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012920:	461a      	mov	r2, r3
 8012922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012924:	4293      	cmp	r3, r2
 8012926:	bf28      	it	cs
 8012928:	4613      	movcs	r3, r2
 801292a:	76fb      	strb	r3, [r7, #27]
		switch ((*p_port->act_read)(p_owner->addr, iaddr + ptr, isize, p_data + ptr, len)) {
 801292c:	69fb      	ldr	r3, [r7, #28]
 801292e:	685c      	ldr	r4, [r3, #4]
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	7818      	ldrb	r0, [r3, #0]
 8012934:	68ba      	ldr	r2, [r7, #8]
 8012936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012938:	18d1      	adds	r1, r2, r3
 801293a:	683a      	ldr	r2, [r7, #0]
 801293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801293e:	18d5      	adds	r5, r2, r3
 8012940:	7efb      	ldrb	r3, [r7, #27]
 8012942:	b29b      	uxth	r3, r3
 8012944:	79fa      	ldrb	r2, [r7, #7]
 8012946:	9300      	str	r3, [sp, #0]
 8012948:	462b      	mov	r3, r5
 801294a:	47a0      	blx	r4
 801294c:	4603      	mov	r3, r0
 801294e:	2b02      	cmp	r3, #2
 8012950:	d021      	beq.n	8012996 <pifI2cDevice_Read+0xd6>
 8012952:	2b02      	cmp	r3, #2
 8012954:	dc23      	bgt.n	801299e <pifI2cDevice_Read+0xde>
 8012956:	2b00      	cmp	r3, #0
 8012958:	d001      	beq.n	801295e <pifI2cDevice_Read+0x9e>
 801295a:	2b01      	cmp	r3, #1
				goto fail;
			}
			break;

		case IR_COMPLETE:
			break;
 801295c:	e01f      	b.n	801299e <pifI2cDevice_Read+0xde>
			timer1ms = pif_cumulative_timer1ms;
 801295e:	4b2b      	ldr	r3, [pc, #172]	; (8012a0c <pifI2cDevice_Read+0x14c>)
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	617b      	str	r3, [r7, #20]
			while (p_owner->_state == IS_RUN) {
 8012964:	e00a      	b.n	801297c <pifI2cDevice_Read+0xbc>
				if (pif_cumulative_timer1ms - timer1ms > p_owner->timeout) {
 8012966:	4b29      	ldr	r3, [pc, #164]	; (8012a0c <pifI2cDevice_Read+0x14c>)
 8012968:	681a      	ldr	r2, [r3, #0]
 801296a:	697b      	ldr	r3, [r7, #20]
 801296c:	1ad3      	subs	r3, r2, r3
 801296e:	68fa      	ldr	r2, [r7, #12]
 8012970:	7852      	ldrb	r2, [r2, #1]
 8012972:	4293      	cmp	r3, r2
 8012974:	d902      	bls.n	801297c <pifI2cDevice_Read+0xbc>
					line = __LINE__;
 8012976:	2372      	movs	r3, #114	; 0x72
 8012978:	623b      	str	r3, [r7, #32]
					goto fail;
 801297a:	e023      	b.n	80129c4 <pifI2cDevice_Read+0x104>
			while (p_owner->_state == IS_RUN) {
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	789b      	ldrb	r3, [r3, #2]
 8012980:	b2db      	uxtb	r3, r3
 8012982:	2b01      	cmp	r3, #1
 8012984:	d0ef      	beq.n	8012966 <pifI2cDevice_Read+0xa6>
			if (p_owner->_state == IS_ERROR) {
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	789b      	ldrb	r3, [r3, #2]
 801298a:	b2db      	uxtb	r3, r3
 801298c:	2b03      	cmp	r3, #3
 801298e:	d105      	bne.n	801299c <pifI2cDevice_Read+0xdc>
				line = __LINE__;
 8012990:	2379      	movs	r3, #121	; 0x79
 8012992:	623b      	str	r3, [r7, #32]
				goto fail;
 8012994:	e016      	b.n	80129c4 <pifI2cDevice_Read+0x104>

		case IR_ERROR:
#ifndef __PIF_NO_LOG__
			line = __LINE__;
 8012996:	2384      	movs	r3, #132	; 0x84
 8012998:	623b      	str	r3, [r7, #32]
#endif
			goto fail;
 801299a:	e013      	b.n	80129c4 <pifI2cDevice_Read+0x104>
			break;
 801299c:	bf00      	nop
		}
		ptr += len;
 801299e:	7efb      	ldrb	r3, [r7, #27]
 80129a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129a2:	4413      	add	r3, r2
 80129a4:	627b      	str	r3, [r7, #36]	; 0x24
		size -= len;
 80129a6:	7efb      	ldrb	r3, [r7, #27]
 80129a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80129aa:	1ad3      	subs	r3, r2, r3
 80129ac:	63bb      	str	r3, [r7, #56]	; 0x38
	while (size) {
 80129ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d1b3      	bne.n	801291c <pifI2cDevice_Read+0x5c>
	}
	p_port->__use_device = NULL;
 80129b4:	69fb      	ldr	r3, [r7, #28]
 80129b6:	2200      	movs	r2, #0
 80129b8:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_IDLE;
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	2200      	movs	r2, #0
 80129be:	709a      	strb	r2, [r3, #2]
	return TRUE;
 80129c0:	2301      	movs	r3, #1
 80129c2:	e01d      	b.n	8012a00 <pifI2cDevice_Read+0x140>

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "I2CR:%u A:%Xh R:%Xh E:%u", line, p_owner->addr, iaddr, pif_error);
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	781b      	ldrb	r3, [r3, #0]
 80129c8:	461a      	mov	r2, r3
 80129ca:	4b11      	ldr	r3, [pc, #68]	; (8012a10 <pifI2cDevice_Read+0x150>)
 80129cc:	781b      	ldrb	r3, [r3, #0]
 80129ce:	9301      	str	r3, [sp, #4]
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	9300      	str	r3, [sp, #0]
 80129d4:	4613      	mov	r3, r2
 80129d6:	6a3a      	ldr	r2, [r7, #32]
 80129d8:	490e      	ldr	r1, [pc, #56]	; (8012a14 <pifI2cDevice_Read+0x154>)
 80129da:	2004      	movs	r0, #4
 80129dc:	f001 f90c 	bl	8013bf8 <pifLog_Printf>
#endif
	p_port->__use_device = NULL;
 80129e0:	69fb      	ldr	r3, [r7, #28]
 80129e2:	2200      	movs	r2, #0
 80129e4:	62da      	str	r2, [r3, #44]	; 0x2c
	p_port->error_count++;
 80129e6:	69fb      	ldr	r3, [r7, #28]
 80129e8:	881b      	ldrh	r3, [r3, #0]
 80129ea:	3301      	adds	r3, #1
 80129ec:	b29a      	uxth	r2, r3
 80129ee:	69fb      	ldr	r3, [r7, #28]
 80129f0:	801a      	strh	r2, [r3, #0]
	p_owner->_state = IS_IDLE;
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	2200      	movs	r2, #0
 80129f6:	709a      	strb	r2, [r3, #2]
	pif_error = E_TRANSFER_FAILED;
 80129f8:	4b05      	ldr	r3, [pc, #20]	; (8012a10 <pifI2cDevice_Read+0x150>)
 80129fa:	220a      	movs	r2, #10
 80129fc:	701a      	strb	r2, [r3, #0]
	return FALSE;
 80129fe:	2300      	movs	r3, #0
}
 8012a00:	4618      	mov	r0, r3
 8012a02:	3728      	adds	r7, #40	; 0x28
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bdb0      	pop	{r4, r5, r7, pc}
 8012a08:	08028738 	.word	0x08028738
 8012a0c:	20001df8 	.word	0x20001df8
 8012a10:	20001de0 	.word	0x20001de0
 8012a14:	08028758 	.word	0x08028758

08012a18 <pifI2cDevice_ReadRegByte>:

BOOL pifI2cDevice_ReadRegByte(PifI2cDevice* p_owner, uint8_t reg, uint8_t* p_data)
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b086      	sub	sp, #24
 8012a1c:	af02      	add	r7, sp, #8
 8012a1e:	60f8      	str	r0, [r7, #12]
 8012a20:	460b      	mov	r3, r1
 8012a22:	607a      	str	r2, [r7, #4]
 8012a24:	72fb      	strb	r3, [r7, #11]
	return pifI2cDevice_Read(p_owner, reg, 1, p_data, 1);
 8012a26:	7af9      	ldrb	r1, [r7, #11]
 8012a28:	2301      	movs	r3, #1
 8012a2a:	9300      	str	r3, [sp, #0]
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2201      	movs	r2, #1
 8012a30:	68f8      	ldr	r0, [r7, #12]
 8012a32:	f7ff ff45 	bl	80128c0 <pifI2cDevice_Read>
 8012a36:	4603      	mov	r3, r0
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	3710      	adds	r7, #16
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd80      	pop	{r7, pc}

08012a40 <pifI2cDevice_ReadRegWord>:

BOOL pifI2cDevice_ReadRegWord(PifI2cDevice* p_owner, uint8_t reg, uint16_t* p_data)
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b088      	sub	sp, #32
 8012a44:	af02      	add	r7, sp, #8
 8012a46:	60f8      	str	r0, [r7, #12]
 8012a48:	460b      	mov	r3, r1
 8012a4a:	607a      	str	r2, [r7, #4]
 8012a4c:	72fb      	strb	r3, [r7, #11]
	uint8_t tmp[2];

	if (!pifI2cDevice_Read(p_owner, reg, 1, tmp, 2)) return FALSE;
 8012a4e:	7af9      	ldrb	r1, [r7, #11]
 8012a50:	f107 0314 	add.w	r3, r7, #20
 8012a54:	2202      	movs	r2, #2
 8012a56:	9200      	str	r2, [sp, #0]
 8012a58:	2201      	movs	r2, #1
 8012a5a:	68f8      	ldr	r0, [r7, #12]
 8012a5c:	f7ff ff30 	bl	80128c0 <pifI2cDevice_Read>
 8012a60:	4603      	mov	r3, r0
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d101      	bne.n	8012a6a <pifI2cDevice_ReadRegWord+0x2a>
 8012a66:	2300      	movs	r3, #0
 8012a68:	e00a      	b.n	8012a80 <pifI2cDevice_ReadRegWord+0x40>
	*p_data = (tmp[0] << 8) + tmp[1];
 8012a6a:	7d3b      	ldrb	r3, [r7, #20]
 8012a6c:	b29b      	uxth	r3, r3
 8012a6e:	021b      	lsls	r3, r3, #8
 8012a70:	b29a      	uxth	r2, r3
 8012a72:	7d7b      	ldrb	r3, [r7, #21]
 8012a74:	b29b      	uxth	r3, r3
 8012a76:	4413      	add	r3, r2
 8012a78:	b29a      	uxth	r2, r3
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8012a7e:	2301      	movs	r3, #1
}
 8012a80:	4618      	mov	r0, r3
 8012a82:	3718      	adds	r7, #24
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bd80      	pop	{r7, pc}

08012a88 <pifI2cDevice_ReadRegBytes>:

BOOL pifI2cDevice_ReadRegBytes(PifI2cDevice* p_owner, uint8_t reg, uint8_t* p_data, size_t size)
{
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b086      	sub	sp, #24
 8012a8c:	af02      	add	r7, sp, #8
 8012a8e:	60f8      	str	r0, [r7, #12]
 8012a90:	607a      	str	r2, [r7, #4]
 8012a92:	603b      	str	r3, [r7, #0]
 8012a94:	460b      	mov	r3, r1
 8012a96:	72fb      	strb	r3, [r7, #11]
	return pifI2cDevice_Read(p_owner, reg, 1, p_data, size);
 8012a98:	7af9      	ldrb	r1, [r7, #11]
 8012a9a:	683b      	ldr	r3, [r7, #0]
 8012a9c:	9300      	str	r3, [sp, #0]
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	2201      	movs	r2, #1
 8012aa2:	68f8      	ldr	r0, [r7, #12]
 8012aa4:	f7ff ff0c 	bl	80128c0 <pifI2cDevice_Read>
 8012aa8:	4603      	mov	r3, r0
}
 8012aaa:	4618      	mov	r0, r3
 8012aac:	3710      	adds	r7, #16
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	bd80      	pop	{r7, pc}

08012ab2 <pifI2cDevice_ReadRegBit8>:

BOOL pifI2cDevice_ReadRegBit8(PifI2cDevice* p_owner, uint8_t reg, PifI2cRegField field, uint8_t* p_data)
{
 8012ab2:	b580      	push	{r7, lr}
 8012ab4:	b088      	sub	sp, #32
 8012ab6:	af02      	add	r7, sp, #8
 8012ab8:	60f8      	str	r0, [r7, #12]
 8012aba:	607b      	str	r3, [r7, #4]
 8012abc:	460b      	mov	r3, r1
 8012abe:	72fb      	strb	r3, [r7, #11]
 8012ac0:	4613      	mov	r3, r2
 8012ac2:	813b      	strh	r3, [r7, #8]
	uint8_t tmp, shift, mask;

	shift = field >> 8;
 8012ac4:	893b      	ldrh	r3, [r7, #8]
 8012ac6:	0a1b      	lsrs	r3, r3, #8
 8012ac8:	b29b      	uxth	r3, r3
 8012aca:	75fb      	strb	r3, [r7, #23]
	mask = (1 << (field & 0xFF)) - 1;
 8012acc:	893b      	ldrh	r3, [r7, #8]
 8012ace:	b2db      	uxtb	r3, r3
 8012ad0:	2201      	movs	r2, #1
 8012ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8012ad6:	b2db      	uxtb	r3, r3
 8012ad8:	3b01      	subs	r3, #1
 8012ada:	75bb      	strb	r3, [r7, #22]

	if (!pifI2cDevice_Read(p_owner, reg, 1, &tmp, 1)) return FALSE;
 8012adc:	7af9      	ldrb	r1, [r7, #11]
 8012ade:	f107 0315 	add.w	r3, r7, #21
 8012ae2:	2201      	movs	r2, #1
 8012ae4:	9200      	str	r2, [sp, #0]
 8012ae6:	2201      	movs	r2, #1
 8012ae8:	68f8      	ldr	r0, [r7, #12]
 8012aea:	f7ff fee9 	bl	80128c0 <pifI2cDevice_Read>
 8012aee:	4603      	mov	r3, r0
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d101      	bne.n	8012af8 <pifI2cDevice_ReadRegBit8+0x46>
 8012af4:	2300      	movs	r3, #0
 8012af6:	e00d      	b.n	8012b14 <pifI2cDevice_ReadRegBit8+0x62>
	*p_data = (tmp >> shift) & mask;
 8012af8:	7d7b      	ldrb	r3, [r7, #21]
 8012afa:	461a      	mov	r2, r3
 8012afc:	7dfb      	ldrb	r3, [r7, #23]
 8012afe:	fa42 f303 	asr.w	r3, r2, r3
 8012b02:	b25a      	sxtb	r2, r3
 8012b04:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8012b08:	4013      	ands	r3, r2
 8012b0a:	b25b      	sxtb	r3, r3
 8012b0c:	b2da      	uxtb	r2, r3
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8012b12:	2301      	movs	r3, #1
}
 8012b14:	4618      	mov	r0, r3
 8012b16:	3718      	adds	r7, #24
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}

08012b1c <pifI2cDevice_Write>:
	*p_data = (((tmp[0] << 8) + tmp[1]) >> shift) & mask;
	return TRUE;
}

BOOL pifI2cDevice_Write(PifI2cDevice* p_owner, uint32_t iaddr, uint8_t isize, uint8_t* p_data, size_t size)
{
 8012b1c:	b5b0      	push	{r4, r5, r7, lr}
 8012b1e:	b08c      	sub	sp, #48	; 0x30
 8012b20:	af02      	add	r7, sp, #8
 8012b22:	60f8      	str	r0, [r7, #12]
 8012b24:	60b9      	str	r1, [r7, #8]
 8012b26:	603b      	str	r3, [r7, #0]
 8012b28:	4613      	mov	r3, r2
 8012b2a:	71fb      	strb	r3, [r7, #7]
	PifI2cPort* p_port = p_owner->__p_port;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	685b      	ldr	r3, [r3, #4]
 8012b30:	61fb      	str	r3, [r7, #28]
	size_t ptr;
#ifndef __PIF_NO_LOG__
	int line;
#endif

	if (!p_port->act_write) return FALSE;
 8012b32:	69fb      	ldr	r3, [r7, #28]
 8012b34:	689b      	ldr	r3, [r3, #8]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d101      	bne.n	8012b3e <pifI2cDevice_Write+0x22>
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	e08e      	b.n	8012c5c <pifI2cDevice_Write+0x140>
	if (p_port->__use_device) {
 8012b3e:	69fb      	ldr	r3, [r7, #28]
 8012b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d00f      	beq.n	8012b66 <pifI2cDevice_Write+0x4a>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_INFO, "I2CW:%u Addr:%Xh Use Addr:%Xh", __LINE__, p_owner->addr, p_port->__use_device->addr);
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	781b      	ldrb	r3, [r3, #0]
 8012b4a:	461a      	mov	r2, r3
 8012b4c:	69fb      	ldr	r3, [r7, #28]
 8012b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b50:	781b      	ldrb	r3, [r3, #0]
 8012b52:	b2db      	uxtb	r3, r3
 8012b54:	9300      	str	r3, [sp, #0]
 8012b56:	4613      	mov	r3, r2
 8012b58:	22d3      	movs	r2, #211	; 0xd3
 8012b5a:	4942      	ldr	r1, [pc, #264]	; (8012c64 <pifI2cDevice_Write+0x148>)
 8012b5c:	2002      	movs	r0, #2
 8012b5e:	f001 f84b 	bl	8013bf8 <pifLog_Printf>
#endif
		return FALSE;
 8012b62:	2300      	movs	r3, #0
 8012b64:	e07a      	b.n	8012c5c <pifI2cDevice_Write+0x140>
	}

	p_port->__use_device = p_owner;
 8012b66:	69fb      	ldr	r3, [r7, #28]
 8012b68:	68fa      	ldr	r2, [r7, #12]
 8012b6a:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_RUN;
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	2201      	movs	r2, #1
 8012b70:	709a      	strb	r2, [r3, #2]
	ptr = 0;
 8012b72:	2300      	movs	r3, #0
 8012b74:	627b      	str	r3, [r7, #36]	; 0x24
	while (size) {
 8012b76:	e048      	b.n	8012c0a <pifI2cDevice_Write+0xee>
		len = size > p_port->__max_transfer_size ? p_port->__max_transfer_size : size;
 8012b78:	69fb      	ldr	r3, [r7, #28]
 8012b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b7c:	461a      	mov	r2, r3
 8012b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b80:	4293      	cmp	r3, r2
 8012b82:	bf28      	it	cs
 8012b84:	4613      	movcs	r3, r2
 8012b86:	76fb      	strb	r3, [r7, #27]
		switch ((*p_port->act_write)(p_owner->addr, iaddr + ptr, isize, p_data + ptr, len)) {
 8012b88:	69fb      	ldr	r3, [r7, #28]
 8012b8a:	689c      	ldr	r4, [r3, #8]
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	7818      	ldrb	r0, [r3, #0]
 8012b90:	68ba      	ldr	r2, [r7, #8]
 8012b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b94:	18d1      	adds	r1, r2, r3
 8012b96:	683a      	ldr	r2, [r7, #0]
 8012b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b9a:	18d5      	adds	r5, r2, r3
 8012b9c:	7efb      	ldrb	r3, [r7, #27]
 8012b9e:	b29b      	uxth	r3, r3
 8012ba0:	79fa      	ldrb	r2, [r7, #7]
 8012ba2:	9300      	str	r3, [sp, #0]
 8012ba4:	462b      	mov	r3, r5
 8012ba6:	47a0      	blx	r4
 8012ba8:	4603      	mov	r3, r0
 8012baa:	2b02      	cmp	r3, #2
 8012bac:	d021      	beq.n	8012bf2 <pifI2cDevice_Write+0xd6>
 8012bae:	2b02      	cmp	r3, #2
 8012bb0:	dc23      	bgt.n	8012bfa <pifI2cDevice_Write+0xde>
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d001      	beq.n	8012bba <pifI2cDevice_Write+0x9e>
 8012bb6:	2b01      	cmp	r3, #1
				goto fail;
			}
			break;

		case IR_COMPLETE:
			break;
 8012bb8:	e01f      	b.n	8012bfa <pifI2cDevice_Write+0xde>
			timer1ms = pif_cumulative_timer1ms;
 8012bba:	4b2b      	ldr	r3, [pc, #172]	; (8012c68 <pifI2cDevice_Write+0x14c>)
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	617b      	str	r3, [r7, #20]
			while (p_owner->_state == IS_RUN) {
 8012bc0:	e00a      	b.n	8012bd8 <pifI2cDevice_Write+0xbc>
				if (pif_cumulative_timer1ms - timer1ms > p_owner->timeout) {
 8012bc2:	4b29      	ldr	r3, [pc, #164]	; (8012c68 <pifI2cDevice_Write+0x14c>)
 8012bc4:	681a      	ldr	r2, [r3, #0]
 8012bc6:	697b      	ldr	r3, [r7, #20]
 8012bc8:	1ad3      	subs	r3, r2, r3
 8012bca:	68fa      	ldr	r2, [r7, #12]
 8012bcc:	7852      	ldrb	r2, [r2, #1]
 8012bce:	4293      	cmp	r3, r2
 8012bd0:	d902      	bls.n	8012bd8 <pifI2cDevice_Write+0xbc>
					line = __LINE__;
 8012bd2:	23e3      	movs	r3, #227	; 0xe3
 8012bd4:	623b      	str	r3, [r7, #32]
					goto fail;
 8012bd6:	e023      	b.n	8012c20 <pifI2cDevice_Write+0x104>
			while (p_owner->_state == IS_RUN) {
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	789b      	ldrb	r3, [r3, #2]
 8012bdc:	b2db      	uxtb	r3, r3
 8012bde:	2b01      	cmp	r3, #1
 8012be0:	d0ef      	beq.n	8012bc2 <pifI2cDevice_Write+0xa6>
			if (p_owner->_state == IS_ERROR) {
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	789b      	ldrb	r3, [r3, #2]
 8012be6:	b2db      	uxtb	r3, r3
 8012be8:	2b03      	cmp	r3, #3
 8012bea:	d105      	bne.n	8012bf8 <pifI2cDevice_Write+0xdc>
				line = __LINE__;
 8012bec:	23ea      	movs	r3, #234	; 0xea
 8012bee:	623b      	str	r3, [r7, #32]
				goto fail;
 8012bf0:	e016      	b.n	8012c20 <pifI2cDevice_Write+0x104>

		case IR_ERROR:
#ifndef __PIF_NO_LOG__
			line = __LINE__;
 8012bf2:	23f5      	movs	r3, #245	; 0xf5
 8012bf4:	623b      	str	r3, [r7, #32]
#endif
			goto fail;
 8012bf6:	e013      	b.n	8012c20 <pifI2cDevice_Write+0x104>
			break;
 8012bf8:	bf00      	nop
		}
		ptr += len;
 8012bfa:	7efb      	ldrb	r3, [r7, #27]
 8012bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012bfe:	4413      	add	r3, r2
 8012c00:	627b      	str	r3, [r7, #36]	; 0x24
		size -= len;
 8012c02:	7efb      	ldrb	r3, [r7, #27]
 8012c04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c06:	1ad3      	subs	r3, r2, r3
 8012c08:	63bb      	str	r3, [r7, #56]	; 0x38
	while (size) {
 8012c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d1b3      	bne.n	8012b78 <pifI2cDevice_Write+0x5c>
	}
	p_port->__use_device = NULL;
 8012c10:	69fb      	ldr	r3, [r7, #28]
 8012c12:	2200      	movs	r2, #0
 8012c14:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_IDLE;
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	2200      	movs	r2, #0
 8012c1a:	709a      	strb	r2, [r3, #2]
	return TRUE;
 8012c1c:	2301      	movs	r3, #1
 8012c1e:	e01d      	b.n	8012c5c <pifI2cDevice_Write+0x140>

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "I2CW:%u A:%Xh R:%Xh E:%u", line, p_owner->addr, iaddr, pif_error);
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	781b      	ldrb	r3, [r3, #0]
 8012c24:	461a      	mov	r2, r3
 8012c26:	4b11      	ldr	r3, [pc, #68]	; (8012c6c <pifI2cDevice_Write+0x150>)
 8012c28:	781b      	ldrb	r3, [r3, #0]
 8012c2a:	9301      	str	r3, [sp, #4]
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	9300      	str	r3, [sp, #0]
 8012c30:	4613      	mov	r3, r2
 8012c32:	6a3a      	ldr	r2, [r7, #32]
 8012c34:	490e      	ldr	r1, [pc, #56]	; (8012c70 <pifI2cDevice_Write+0x154>)
 8012c36:	2004      	movs	r0, #4
 8012c38:	f000 ffde 	bl	8013bf8 <pifLog_Printf>
#endif
	p_port->__use_device = NULL;
 8012c3c:	69fb      	ldr	r3, [r7, #28]
 8012c3e:	2200      	movs	r2, #0
 8012c40:	62da      	str	r2, [r3, #44]	; 0x2c
	p_port->error_count++;
 8012c42:	69fb      	ldr	r3, [r7, #28]
 8012c44:	881b      	ldrh	r3, [r3, #0]
 8012c46:	3301      	adds	r3, #1
 8012c48:	b29a      	uxth	r2, r3
 8012c4a:	69fb      	ldr	r3, [r7, #28]
 8012c4c:	801a      	strh	r2, [r3, #0]
	p_owner->_state = IS_IDLE;
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	2200      	movs	r2, #0
 8012c52:	709a      	strb	r2, [r3, #2]
	pif_error = E_TRANSFER_FAILED;
 8012c54:	4b05      	ldr	r3, [pc, #20]	; (8012c6c <pifI2cDevice_Write+0x150>)
 8012c56:	220a      	movs	r2, #10
 8012c58:	701a      	strb	r2, [r3, #0]
	return FALSE;
 8012c5a:	2300      	movs	r3, #0
}
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	3728      	adds	r7, #40	; 0x28
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bdb0      	pop	{r4, r5, r7, pc}
 8012c64:	08028774 	.word	0x08028774
 8012c68:	20001df8 	.word	0x20001df8
 8012c6c:	20001de0 	.word	0x20001de0
 8012c70:	08028794 	.word	0x08028794

08012c74 <pifI2cDevice_WriteRegByte>:

BOOL pifI2cDevice_WriteRegByte(PifI2cDevice* p_owner, uint8_t reg, uint8_t data)
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b084      	sub	sp, #16
 8012c78:	af02      	add	r7, sp, #8
 8012c7a:	6078      	str	r0, [r7, #4]
 8012c7c:	460b      	mov	r3, r1
 8012c7e:	70fb      	strb	r3, [r7, #3]
 8012c80:	4613      	mov	r3, r2
 8012c82:	70bb      	strb	r3, [r7, #2]
	return pifI2cDevice_Write(p_owner, reg, 1, &data, 1);
 8012c84:	78f9      	ldrb	r1, [r7, #3]
 8012c86:	1cbb      	adds	r3, r7, #2
 8012c88:	2201      	movs	r2, #1
 8012c8a:	9200      	str	r2, [sp, #0]
 8012c8c:	2201      	movs	r2, #1
 8012c8e:	6878      	ldr	r0, [r7, #4]
 8012c90:	f7ff ff44 	bl	8012b1c <pifI2cDevice_Write>
 8012c94:	4603      	mov	r3, r0
}
 8012c96:	4618      	mov	r0, r3
 8012c98:	3708      	adds	r7, #8
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bd80      	pop	{r7, pc}
	...

08012ca0 <pifI2cDevice_WriteRegBit8>:
{
	return pifI2cDevice_Write(p_owner, reg, 1, p_data, size);
}

BOOL pifI2cDevice_WriteRegBit8(PifI2cDevice* p_owner, uint8_t reg, PifI2cRegField field, uint8_t data)
{
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b086      	sub	sp, #24
 8012ca4:	af02      	add	r7, sp, #8
 8012ca6:	6078      	str	r0, [r7, #4]
 8012ca8:	4608      	mov	r0, r1
 8012caa:	4611      	mov	r1, r2
 8012cac:	461a      	mov	r2, r3
 8012cae:	4603      	mov	r3, r0
 8012cb0:	70fb      	strb	r3, [r7, #3]
 8012cb2:	460b      	mov	r3, r1
 8012cb4:	803b      	strh	r3, [r7, #0]
 8012cb6:	4613      	mov	r3, r2
 8012cb8:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp, org, shift, mask;

	shift = field >> 8;
 8012cba:	883b      	ldrh	r3, [r7, #0]
 8012cbc:	0a1b      	lsrs	r3, r3, #8
 8012cbe:	b29b      	uxth	r3, r3
 8012cc0:	73fb      	strb	r3, [r7, #15]
	mask = (1 << (field & 0xFF)) - 1;
 8012cc2:	883b      	ldrh	r3, [r7, #0]
 8012cc4:	b2db      	uxtb	r3, r3
 8012cc6:	2201      	movs	r2, #1
 8012cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8012ccc:	b2db      	uxtb	r3, r3
 8012cce:	3b01      	subs	r3, #1
 8012cd0:	73bb      	strb	r3, [r7, #14]

	if (data > mask) {
 8012cd2:	78ba      	ldrb	r2, [r7, #2]
 8012cd4:	7bbb      	ldrb	r3, [r7, #14]
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	d904      	bls.n	8012ce4 <pifI2cDevice_WriteRegBit8+0x44>
		pif_error = E_WRONG_DATA;
 8012cda:	4b21      	ldr	r3, [pc, #132]	; (8012d60 <pifI2cDevice_WriteRegBit8+0xc0>)
 8012cdc:	2206      	movs	r2, #6
 8012cde:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	e039      	b.n	8012d58 <pifI2cDevice_WriteRegBit8+0xb8>
	}
	if (!pifI2cDevice_Read(p_owner, reg, 1, &org, 1)) return FALSE;
 8012ce4:	78f9      	ldrb	r1, [r7, #3]
 8012ce6:	f107 030c 	add.w	r3, r7, #12
 8012cea:	2201      	movs	r2, #1
 8012cec:	9200      	str	r2, [sp, #0]
 8012cee:	2201      	movs	r2, #1
 8012cf0:	6878      	ldr	r0, [r7, #4]
 8012cf2:	f7ff fde5 	bl	80128c0 <pifI2cDevice_Read>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d101      	bne.n	8012d00 <pifI2cDevice_WriteRegBit8+0x60>
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	e02b      	b.n	8012d58 <pifI2cDevice_WriteRegBit8+0xb8>

	if (((org >> shift) & mask) != data) {
 8012d00:	7b3b      	ldrb	r3, [r7, #12]
 8012d02:	461a      	mov	r2, r3
 8012d04:	7bfb      	ldrb	r3, [r7, #15]
 8012d06:	411a      	asrs	r2, r3
 8012d08:	7bbb      	ldrb	r3, [r7, #14]
 8012d0a:	401a      	ands	r2, r3
 8012d0c:	78bb      	ldrb	r3, [r7, #2]
 8012d0e:	429a      	cmp	r2, r3
 8012d10:	d021      	beq.n	8012d56 <pifI2cDevice_WriteRegBit8+0xb6>
		tmp = (org & ~(mask << shift)) | (data << shift);
 8012d12:	7bba      	ldrb	r2, [r7, #14]
 8012d14:	7bfb      	ldrb	r3, [r7, #15]
 8012d16:	fa02 f303 	lsl.w	r3, r2, r3
 8012d1a:	b25b      	sxtb	r3, r3
 8012d1c:	43db      	mvns	r3, r3
 8012d1e:	b25a      	sxtb	r2, r3
 8012d20:	7b3b      	ldrb	r3, [r7, #12]
 8012d22:	b25b      	sxtb	r3, r3
 8012d24:	4013      	ands	r3, r2
 8012d26:	b25a      	sxtb	r2, r3
 8012d28:	78b9      	ldrb	r1, [r7, #2]
 8012d2a:	7bfb      	ldrb	r3, [r7, #15]
 8012d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8012d30:	b25b      	sxtb	r3, r3
 8012d32:	4313      	orrs	r3, r2
 8012d34:	b25b      	sxtb	r3, r3
 8012d36:	b2db      	uxtb	r3, r3
 8012d38:	737b      	strb	r3, [r7, #13]
		if (!pifI2cDevice_Write(p_owner, reg, 1, &tmp, 1)) return FALSE;
 8012d3a:	78f9      	ldrb	r1, [r7, #3]
 8012d3c:	f107 030d 	add.w	r3, r7, #13
 8012d40:	2201      	movs	r2, #1
 8012d42:	9200      	str	r2, [sp, #0]
 8012d44:	2201      	movs	r2, #1
 8012d46:	6878      	ldr	r0, [r7, #4]
 8012d48:	f7ff fee8 	bl	8012b1c <pifI2cDevice_Write>
 8012d4c:	4603      	mov	r3, r0
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d101      	bne.n	8012d56 <pifI2cDevice_WriteRegBit8+0xb6>
 8012d52:	2300      	movs	r3, #0
 8012d54:	e000      	b.n	8012d58 <pifI2cDevice_WriteRegBit8+0xb8>
	}
    return TRUE;
 8012d56:	2301      	movs	r3, #1
}
 8012d58:	4618      	mov	r0, r3
 8012d5a:	3710      	adds	r7, #16
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}
 8012d60:	20001de0 	.word	0x20001de0

08012d64 <pifI2cPort_sigEndTransfer>:
	}
    return TRUE;
}

void pifI2cPort_sigEndTransfer(PifI2cPort* p_owner, BOOL result)
{
 8012d64:	b480      	push	{r7}
 8012d66:	b083      	sub	sp, #12
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	460b      	mov	r3, r1
 8012d6e:	70fb      	strb	r3, [r7, #3]
	if (!p_owner->__use_device) return;
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d009      	beq.n	8012d8c <pifI2cPort_sigEndTransfer+0x28>
	p_owner->__use_device->_state = result ? IS_COMPLETE : IS_ERROR;
 8012d78:	78fb      	ldrb	r3, [r7, #3]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d001      	beq.n	8012d82 <pifI2cPort_sigEndTransfer+0x1e>
 8012d7e:	2202      	movs	r2, #2
 8012d80:	e000      	b.n	8012d84 <pifI2cPort_sigEndTransfer+0x20>
 8012d82:	2203      	movs	r2, #3
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d88:	709a      	strb	r2, [r3, #2]
 8012d8a:	e000      	b.n	8012d8e <pifI2cPort_sigEndTransfer+0x2a>
	if (!p_owner->__use_device) return;
 8012d8c:	bf00      	nop
}
 8012d8e:	370c      	adds	r7, #12
 8012d90:	46bd      	mov	sp, r7
 8012d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d96:	4770      	bx	lr

08012d98 <pifFixList_Init>:
}

// ---------- PIF Fixed Linked List ----------

BOOL pifFixList_Init(PifFixList* p_owner, int size, int max_count)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b088      	sub	sp, #32
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	60f8      	str	r0, [r7, #12]
 8012da0:	60b9      	str	r1, [r7, #8]
 8012da2:	607a      	str	r2, [r7, #4]
	char* p_buffer;
	PifFixListIterator p_node;

	if (!p_owner || !size || !max_count) {
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d005      	beq.n	8012db6 <pifFixList_Init+0x1e>
 8012daa:	68bb      	ldr	r3, [r7, #8]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d002      	beq.n	8012db6 <pifFixList_Init+0x1e>
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d104      	bne.n	8012dc0 <pifFixList_Init+0x28>
		pif_error = E_INVALID_PARAM;
 8012db6:	4b27      	ldr	r3, [pc, #156]	; (8012e54 <pifFixList_Init+0xbc>)
 8012db8:	2201      	movs	r2, #1
 8012dba:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	e045      	b.n	8012e4c <pifFixList_Init+0xb4>
	}

	p_buffer = calloc(2 * sizeof(PifFixListIterator) + size, max_count);
 8012dc0:	68bb      	ldr	r3, [r7, #8]
 8012dc2:	3308      	adds	r3, #8
 8012dc4:	687a      	ldr	r2, [r7, #4]
 8012dc6:	4611      	mov	r1, r2
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f011 f827 	bl	8023e1c <calloc>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	61fb      	str	r3, [r7, #28]
	if (!p_buffer) goto fail;
 8012dd2:	69fb      	ldr	r3, [r7, #28]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d033      	beq.n	8012e40 <pifFixList_Init+0xa8>

	p_owner->p_node = (PifFixListIterator)p_buffer;
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	69fa      	ldr	r2, [r7, #28]
 8012ddc:	60da      	str	r2, [r3, #12]
	p_owner->size = size;
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	68ba      	ldr	r2, [r7, #8]
 8012de2:	601a      	str	r2, [r3, #0]
	p_owner->max_count = max_count;
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	687a      	ldr	r2, [r7, #4]
 8012de8:	605a      	str	r2, [r3, #4]
	p_owner->count = 0;
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	2200      	movs	r2, #0
 8012dee:	609a      	str	r2, [r3, #8]

	p_owner->p_first = NULL;
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	2200      	movs	r2, #0
 8012df4:	611a      	str	r2, [r3, #16]

	p_node = p_owner->p_node;
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	68db      	ldr	r3, [r3, #12]
 8012dfa:	61bb      	str	r3, [r7, #24]
	p_owner->p_free = p_node;
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	69ba      	ldr	r2, [r7, #24]
 8012e00:	615a      	str	r2, [r3, #20]
	for (int i = 1; i < max_count; i++) {
 8012e02:	2301      	movs	r3, #1
 8012e04:	617b      	str	r3, [r7, #20]
 8012e06:	e00f      	b.n	8012e28 <pifFixList_Init+0x90>
		p_buffer += 2 * sizeof(PifFixListIterator) + size;
 8012e08:	68bb      	ldr	r3, [r7, #8]
 8012e0a:	3308      	adds	r3, #8
 8012e0c:	69fa      	ldr	r2, [r7, #28]
 8012e0e:	4413      	add	r3, r2
 8012e10:	61fb      	str	r3, [r7, #28]
		p_node->p_next = (PifFixListIterator)p_buffer;
 8012e12:	69bb      	ldr	r3, [r7, #24]
 8012e14:	69fa      	ldr	r2, [r7, #28]
 8012e16:	601a      	str	r2, [r3, #0]
		p_node->p_prev = NULL;
 8012e18:	69bb      	ldr	r3, [r7, #24]
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	605a      	str	r2, [r3, #4]
		p_node = (PifFixListIterator)p_buffer;
 8012e1e:	69fb      	ldr	r3, [r7, #28]
 8012e20:	61bb      	str	r3, [r7, #24]
	for (int i = 1; i < max_count; i++) {
 8012e22:	697b      	ldr	r3, [r7, #20]
 8012e24:	3301      	adds	r3, #1
 8012e26:	617b      	str	r3, [r7, #20]
 8012e28:	697a      	ldr	r2, [r7, #20]
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	dbeb      	blt.n	8012e08 <pifFixList_Init+0x70>
	}
	p_node->p_next = NULL;
 8012e30:	69bb      	ldr	r3, [r7, #24]
 8012e32:	2200      	movs	r2, #0
 8012e34:	601a      	str	r2, [r3, #0]
	p_node->p_prev = NULL;
 8012e36:	69bb      	ldr	r3, [r7, #24]
 8012e38:	2200      	movs	r2, #0
 8012e3a:	605a      	str	r2, [r3, #4]

	return TRUE;
 8012e3c:	2301      	movs	r3, #1
 8012e3e:	e005      	b.n	8012e4c <pifFixList_Init+0xb4>
	if (!p_buffer) goto fail;
 8012e40:	bf00      	nop

fail:
	pifFixList_Clear(p_owner, NULL);
 8012e42:	2100      	movs	r1, #0
 8012e44:	68f8      	ldr	r0, [r7, #12]
 8012e46:	f000 f807 	bl	8012e58 <pifFixList_Clear>
	return FALSE;
 8012e4a:	2300      	movs	r3, #0
}
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	3720      	adds	r7, #32
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd80      	pop	{r7, pc}
 8012e54:	20001de0 	.word	0x20001de0

08012e58 <pifFixList_Clear>:

void pifFixList_Clear(PifFixList* p_owner, PifEvtFixListClear evt_clear)
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b084      	sub	sp, #16
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
 8012e60:	6039      	str	r1, [r7, #0]
	if (p_owner->p_node) {
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	68db      	ldr	r3, [r3, #12]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d01f      	beq.n	8012eaa <pifFixList_Clear+0x52>
		if (evt_clear) {
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d014      	beq.n	8012e9a <pifFixList_Clear+0x42>
			PifFixListIterator it = p_owner->p_first;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	691b      	ldr	r3, [r3, #16]
 8012e74:	60fb      	str	r3, [r7, #12]
			while (it) {
 8012e76:	e00d      	b.n	8012e94 <pifFixList_Clear+0x3c>
				(*evt_clear)(it->data);
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	f103 0208 	add.w	r2, r3, #8
 8012e7e:	683b      	ldr	r3, [r7, #0]
 8012e80:	4610      	mov	r0, r2
 8012e82:	4798      	blx	r3
				it = it ? it->p_next : NULL;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d002      	beq.n	8012e90 <pifFixList_Clear+0x38>
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	e000      	b.n	8012e92 <pifFixList_Clear+0x3a>
 8012e90:	2300      	movs	r3, #0
 8012e92:	60fb      	str	r3, [r7, #12]
			while (it) {
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d1ee      	bne.n	8012e78 <pifFixList_Clear+0x20>
			}
		}

		free(p_owner->p_node);
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	68db      	ldr	r3, [r3, #12]
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	f010 fff6 	bl	8023e90 <free>
		p_owner->p_node = NULL;
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	60da      	str	r2, [r3, #12]
	}

	p_owner->size = 0;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2200      	movs	r2, #0
 8012eae:	601a      	str	r2, [r3, #0]
	p_owner->max_count = 0;
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	605a      	str	r2, [r3, #4]
}
 8012eb6:	bf00      	nop
 8012eb8:	3710      	adds	r7, #16
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd80      	pop	{r7, pc}

08012ebe <pifFixList_AddFirst>:

void* pifFixList_AddFirst(PifFixList* p_owner)
{
 8012ebe:	b580      	push	{r7, lr}
 8012ec0:	b084      	sub	sp, #16
 8012ec2:	af00      	add	r7, sp, #0
 8012ec4:	6078      	str	r0, [r7, #4]
	char* p;

	if (p_owner->p_free == NULL) return NULL;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	695b      	ldr	r3, [r3, #20]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d101      	bne.n	8012ed2 <pifFixList_AddFirst+0x14>
 8012ece:	2300      	movs	r3, #0
 8012ed0:	e025      	b.n	8012f1e <pifFixList_AddFirst+0x60>

	PifFixListIterator p_node = p_owner->p_free;
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	695b      	ldr	r3, [r3, #20]
 8012ed6:	60fb      	str	r3, [r7, #12]
	p_owner->p_free = p_node->p_next;
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	681a      	ldr	r2, [r3, #0]
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	615a      	str	r2, [r3, #20]

	p_node->p_next = p_owner->p_first;
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	691a      	ldr	r2, [r3, #16]
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	601a      	str	r2, [r3, #0]
	if (p_owner->p_first) {
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	691b      	ldr	r3, [r3, #16]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d003      	beq.n	8012ef8 <pifFixList_AddFirst+0x3a>
		p_owner->p_first->p_prev = p_node;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	691b      	ldr	r3, [r3, #16]
 8012ef4:	68fa      	ldr	r2, [r7, #12]
 8012ef6:	605a      	str	r2, [r3, #4]
	}
	p_owner->p_first = p_node;
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	68fa      	ldr	r2, [r7, #12]
 8012efc:	611a      	str	r2, [r3, #16]
	p_owner->count++;
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	689b      	ldr	r3, [r3, #8]
 8012f02:	1c5a      	adds	r2, r3, #1
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	609a      	str	r2, [r3, #8]

	p = (char*)p_node + 2 * sizeof(PifFixListIterator);
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	3308      	adds	r3, #8
 8012f0c:	60bb      	str	r3, [r7, #8]
	memset(p, 0, p_owner->size);
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	461a      	mov	r2, r3
 8012f14:	2100      	movs	r1, #0
 8012f16:	68b8      	ldr	r0, [r7, #8]
 8012f18:	f010 ffd0 	bl	8023ebc <memset>
    return p;
 8012f1c:	68bb      	ldr	r3, [r7, #8]
}
 8012f1e:	4618      	mov	r0, r3
 8012f20:	3710      	adds	r7, #16
 8012f22:	46bd      	mov	sp, r7
 8012f24:	bd80      	pop	{r7, pc}

08012f26 <pifFixList_Remove>:

void pifFixList_Remove(PifFixList* p_owner, void* p_data)
{
 8012f26:	b480      	push	{r7}
 8012f28:	b085      	sub	sp, #20
 8012f2a:	af00      	add	r7, sp, #0
 8012f2c:	6078      	str	r0, [r7, #4]
 8012f2e:	6039      	str	r1, [r7, #0]
	PifFixListIterator p_node = (PifFixListIterator)((uint8_t*)p_data - 2 * sizeof(PifFixListIterator));
 8012f30:	683b      	ldr	r3, [r7, #0]
 8012f32:	3b08      	subs	r3, #8
 8012f34:	60fb      	str	r3, [r7, #12]

	if (p_node->p_prev) {
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	685b      	ldr	r3, [r3, #4]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d005      	beq.n	8012f4a <pifFixList_Remove+0x24>
		p_node->p_prev->p_next = p_node->p_next;
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	685b      	ldr	r3, [r3, #4]
 8012f42:	68fa      	ldr	r2, [r7, #12]
 8012f44:	6812      	ldr	r2, [r2, #0]
 8012f46:	601a      	str	r2, [r3, #0]
 8012f48:	e003      	b.n	8012f52 <pifFixList_Remove+0x2c>
	}
	else {
		p_owner->p_first = p_node->p_next;
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	681a      	ldr	r2, [r3, #0]
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	611a      	str	r2, [r3, #16]
	}
	if (p_node->p_next) {
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d004      	beq.n	8012f64 <pifFixList_Remove+0x3e>
		p_node->p_next->p_prev = p_node->p_prev;
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	68fa      	ldr	r2, [r7, #12]
 8012f60:	6852      	ldr	r2, [r2, #4]
 8012f62:	605a      	str	r2, [r3, #4]
	}
	p_node->p_next = p_owner->p_free;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	695a      	ldr	r2, [r3, #20]
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	601a      	str	r2, [r3, #0]
	p_node->p_prev = NULL;
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	2200      	movs	r2, #0
 8012f70:	605a      	str	r2, [r3, #4]
	p_owner->p_free = p_node;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	68fa      	ldr	r2, [r7, #12]
 8012f76:	615a      	str	r2, [r3, #20]

	p_owner->count--;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	689b      	ldr	r3, [r3, #8]
 8012f7c:	1e5a      	subs	r2, r3, #1
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	609a      	str	r2, [r3, #8]
}
 8012f82:	bf00      	nop
 8012f84:	3714      	adds	r7, #20
 8012f86:	46bd      	mov	sp, r7
 8012f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8c:	4770      	bx	lr

08012f8e <pifFixList_Count>:

#ifdef __PIF_NO_USE_INLINE__

int pifFixList_Count(PifFixList* p_owner)
{
 8012f8e:	b480      	push	{r7}
 8012f90:	b083      	sub	sp, #12
 8012f92:	af00      	add	r7, sp, #0
 8012f94:	6078      	str	r0, [r7, #4]
	return p_owner->count;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	689b      	ldr	r3, [r3, #8]
}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	370c      	adds	r7, #12
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa4:	4770      	bx	lr

08012fa6 <pifFixList_Begin>:

PifFixListIterator pifFixList_Begin(PifFixList* p_owner)
{
 8012fa6:	b480      	push	{r7}
 8012fa8:	b083      	sub	sp, #12
 8012faa:	af00      	add	r7, sp, #0
 8012fac:	6078      	str	r0, [r7, #4]
	return p_owner->p_first;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	691b      	ldr	r3, [r3, #16]
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	370c      	adds	r7, #12
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbc:	4770      	bx	lr

08012fbe <pifFixList_Next>:

PifFixListIterator pifFixList_Next(PifFixListIterator it)
{
 8012fbe:	b480      	push	{r7}
 8012fc0:	b083      	sub	sp, #12
 8012fc2:	af00      	add	r7, sp, #0
 8012fc4:	6078      	str	r0, [r7, #4]
	return it ? it->p_next : NULL;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d002      	beq.n	8012fd2 <pifFixList_Next+0x14>
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	e000      	b.n	8012fd4 <pifFixList_Next+0x16>
 8012fd2:	2300      	movs	r3, #0
}
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	370c      	adds	r7, #12
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fde:	4770      	bx	lr

08012fe0 <pifLog_CmdHelp>:

#ifdef __PIF_LOG_COMMAND__


int pifLog_CmdHelp(int argc, char *argv[])
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b084      	sub	sp, #16
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]
 8012fe8:	6039      	str	r1, [r7, #0]
    const PifLogCmdEntry* p_entry;

    (void)argc;
    (void)argv;

    pifLog_Print(LT_NONE, "Available commands:\n");
 8012fea:	4916      	ldr	r1, [pc, #88]	; (8013044 <pifLog_CmdHelp+0x64>)
 8012fec:	2000      	movs	r0, #0
 8012fee:	f000 fd75 	bl	8013adc <pifLog_Print>
    i = 0;
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	60fb      	str	r3, [r7, #12]
    while (1) {
        p_entry = &s_log.p_cmd_table[i];
 8012ff6:	4b14      	ldr	r3, [pc, #80]	; (8013048 <pifLog_CmdHelp+0x68>)
 8012ff8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	011b      	lsls	r3, r3, #4
 8012ffe:	4413      	add	r3, r2
 8013000:	60bb      	str	r3, [r7, #8]
        if (!p_entry->p_name) break;
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d016      	beq.n	8013038 <pifLog_CmdHelp+0x58>

        pifLog_Printf(LT_NONE, "  %s - %s\n", p_entry->p_name, p_entry->p_help);
 801300a:	68bb      	ldr	r3, [r7, #8]
 801300c:	681a      	ldr	r2, [r3, #0]
 801300e:	68bb      	ldr	r3, [r7, #8]
 8013010:	689b      	ldr	r3, [r3, #8]
 8013012:	490e      	ldr	r1, [pc, #56]	; (801304c <pifLog_CmdHelp+0x6c>)
 8013014:	2000      	movs	r0, #0
 8013016:	f000 fdef 	bl	8013bf8 <pifLog_Printf>
    	if (p_entry->p_args) {
 801301a:	68bb      	ldr	r3, [r7, #8]
 801301c:	68db      	ldr	r3, [r3, #12]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d006      	beq.n	8013030 <pifLog_CmdHelp+0x50>
            pifLog_Printf(LT_NONE, "\t%s\n", p_entry->p_args);
 8013022:	68bb      	ldr	r3, [r7, #8]
 8013024:	68db      	ldr	r3, [r3, #12]
 8013026:	461a      	mov	r2, r3
 8013028:	4909      	ldr	r1, [pc, #36]	; (8013050 <pifLog_CmdHelp+0x70>)
 801302a:	2000      	movs	r0, #0
 801302c:	f000 fde4 	bl	8013bf8 <pifLog_Printf>
    	}
        i++;
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	3301      	adds	r3, #1
 8013034:	60fb      	str	r3, [r7, #12]
        p_entry = &s_log.p_cmd_table[i];
 8013036:	e7de      	b.n	8012ff6 <pifLog_CmdHelp+0x16>
        if (!p_entry->p_name) break;
 8013038:	bf00      	nop
    }
	return PIF_LOG_CMD_NO_ERROR;
 801303a:	2300      	movs	r3, #0
}
 801303c:	4618      	mov	r0, r3
 801303e:	3710      	adds	r7, #16
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}
 8013044:	08028800 	.word	0x08028800
 8013048:	20001e10 	.word	0x20001e10
 801304c:	08028818 	.word	0x08028818
 8013050:	08028824 	.word	0x08028824

08013054 <pifLog_CmdPrintVersion>:

int pifLog_CmdPrintVersion(int argc, char* argv[])
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b084      	sub	sp, #16
 8013058:	af02      	add	r7, sp, #8
 801305a:	6078      	str	r0, [r7, #4]
 801305c:	6039      	str	r1, [r7, #0]
	(void)argc;
	(void)argv;

	pifLog_Printf(LT_NONE, "PIF Version: %d.%d.%d %s\n", PIF_VERSION_MAJOR, PIF_VERSION_MINOR, PIF_VERSION_PATCH, __DATE__);
 801305e:	4b07      	ldr	r3, [pc, #28]	; (801307c <pifLog_CmdPrintVersion+0x28>)
 8013060:	9301      	str	r3, [sp, #4]
 8013062:	2300      	movs	r3, #0
 8013064:	9300      	str	r3, [sp, #0]
 8013066:	2301      	movs	r3, #1
 8013068:	2200      	movs	r2, #0
 801306a:	4905      	ldr	r1, [pc, #20]	; (8013080 <pifLog_CmdPrintVersion+0x2c>)
 801306c:	2000      	movs	r0, #0
 801306e:	f000 fdc3 	bl	8013bf8 <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 8013072:	2300      	movs	r3, #0
}
 8013074:	4618      	mov	r0, r3
 8013076:	3708      	adds	r7, #8
 8013078:	46bd      	mov	sp, r7
 801307a:	bd80      	pop	{r7, pc}
 801307c:	08028848 	.word	0x08028848
 8013080:	0802882c 	.word	0x0802882c

08013084 <pifLog_CmdPrintTask>:

int pifLog_CmdPrintTask(int argc, char* argv[])
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b082      	sub	sp, #8
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
 801308c:	6039      	str	r1, [r7, #0]
	(void)argc;
	(void)argv;

	pifTaskManager_Print();
 801308e:	f002 fa1f 	bl	80154d0 <pifTaskManager_Print>
	return PIF_LOG_CMD_NO_ERROR;
 8013092:	2300      	movs	r3, #0
}
 8013094:	4618      	mov	r0, r3
 8013096:	3708      	adds	r7, #8
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}

0801309c <pifLog_CmdSetStatus>:

int pifLog_CmdSetStatus(int argc, char* argv[])
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b086      	sub	sp, #24
 80130a0:	af02      	add	r7, sp, #8
 80130a2:	6078      	str	r0, [r7, #4]
 80130a4:	6039      	str	r1, [r7, #0]
	BOOL value;
	int i;

	if (argc == 0) {
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d136      	bne.n	801311a <pifLog_CmdSetStatus+0x7e>
    	pifLog_Printf(LT_NONE, "Use Rate: %u%%\n", pif_performance._use_rate);
 80130ac:	4b4b      	ldr	r3, [pc, #300]	; (80131dc <pifLog_CmdSetStatus+0x140>)
 80130ae:	791b      	ldrb	r3, [r3, #4]
 80130b0:	461a      	mov	r2, r3
 80130b2:	494b      	ldr	r1, [pc, #300]	; (80131e0 <pifLog_CmdSetStatus+0x144>)
 80130b4:	2000      	movs	r0, #0
 80130b6:	f000 fd9f 	bl	8013bf8 <pifLog_Printf>
	   	pifLog_Printf(LT_NONE, "Error: %d\n", pif_error);
 80130ba:	4b4a      	ldr	r3, [pc, #296]	; (80131e4 <pifLog_CmdSetStatus+0x148>)
 80130bc:	781b      	ldrb	r3, [r3, #0]
 80130be:	461a      	mov	r2, r3
 80130c0:	4949      	ldr	r1, [pc, #292]	; (80131e8 <pifLog_CmdSetStatus+0x14c>)
 80130c2:	2000      	movs	r0, #0
 80130c4:	f000 fd98 	bl	8013bf8 <pifLog_Printf>
	   	pifLog_Printf(LT_NONE, "Flag:\n");
 80130c8:	4948      	ldr	r1, [pc, #288]	; (80131ec <pifLog_CmdSetStatus+0x150>)
 80130ca:	2000      	movs	r0, #0
 80130cc:	f000 fd94 	bl	8013bf8 <pifLog_Printf>
	   	i = 0;
 80130d0:	2300      	movs	r3, #0
 80130d2:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 80130d4:	e019      	b.n	801310a <pifLog_CmdSetStatus+0x6e>
			pifLog_Printf(LT_NONE, "  %s(%s): %d\n", c_log_flags[i].p_name, c_log_flags[i].p_command, (pif_log_flag.all >> i) & 1);
 80130d6:	4a46      	ldr	r2, [pc, #280]	; (80131f0 <pifLog_CmdSetStatus+0x154>)
 80130d8:	68bb      	ldr	r3, [r7, #8]
 80130da:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80130de:	4a44      	ldr	r2, [pc, #272]	; (80131f0 <pifLog_CmdSetStatus+0x154>)
 80130e0:	68bb      	ldr	r3, [r7, #8]
 80130e2:	00db      	lsls	r3, r3, #3
 80130e4:	4413      	add	r3, r2
 80130e6:	6858      	ldr	r0, [r3, #4]
 80130e8:	4b42      	ldr	r3, [pc, #264]	; (80131f4 <pifLog_CmdSetStatus+0x158>)
 80130ea:	681a      	ldr	r2, [r3, #0]
 80130ec:	68bb      	ldr	r3, [r7, #8]
 80130ee:	fa22 f303 	lsr.w	r3, r2, r3
 80130f2:	f003 0301 	and.w	r3, r3, #1
 80130f6:	9300      	str	r3, [sp, #0]
 80130f8:	4603      	mov	r3, r0
 80130fa:	460a      	mov	r2, r1
 80130fc:	493e      	ldr	r1, [pc, #248]	; (80131f8 <pifLog_CmdSetStatus+0x15c>)
 80130fe:	2000      	movs	r0, #0
 8013100:	f000 fd7a 	bl	8013bf8 <pifLog_Printf>
			i++;
 8013104:	68bb      	ldr	r3, [r7, #8]
 8013106:	3301      	adds	r3, #1
 8013108:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 801310a:	4a39      	ldr	r2, [pc, #228]	; (80131f0 <pifLog_CmdSetStatus+0x154>)
 801310c:	68bb      	ldr	r3, [r7, #8]
 801310e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d1df      	bne.n	80130d6 <pifLog_CmdSetStatus+0x3a>
		}
		return PIF_LOG_CMD_NO_ERROR;
 8013116:	2300      	movs	r3, #0
 8013118:	e05c      	b.n	80131d4 <pifLog_CmdSetStatus+0x138>
	}
	else if (argc > 1) {
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	2b01      	cmp	r3, #1
 801311e:	dd57      	ble.n	80131d0 <pifLog_CmdSetStatus+0x134>
		switch (argv[1][0]) {
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	3304      	adds	r3, #4
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	781b      	ldrb	r3, [r3, #0]
 8013128:	2b74      	cmp	r3, #116	; 0x74
 801312a:	d015      	beq.n	8013158 <pifLog_CmdSetStatus+0xbc>
 801312c:	2b74      	cmp	r3, #116	; 0x74
 801312e:	dc16      	bgt.n	801315e <pifLog_CmdSetStatus+0xc2>
 8013130:	2b66      	cmp	r3, #102	; 0x66
 8013132:	d00e      	beq.n	8013152 <pifLog_CmdSetStatus+0xb6>
 8013134:	2b66      	cmp	r3, #102	; 0x66
 8013136:	dc12      	bgt.n	801315e <pifLog_CmdSetStatus+0xc2>
 8013138:	2b54      	cmp	r3, #84	; 0x54
 801313a:	d00d      	beq.n	8013158 <pifLog_CmdSetStatus+0xbc>
 801313c:	2b54      	cmp	r3, #84	; 0x54
 801313e:	dc0e      	bgt.n	801315e <pifLog_CmdSetStatus+0xc2>
 8013140:	2b46      	cmp	r3, #70	; 0x46
 8013142:	d006      	beq.n	8013152 <pifLog_CmdSetStatus+0xb6>
 8013144:	2b46      	cmp	r3, #70	; 0x46
 8013146:	dc0a      	bgt.n	801315e <pifLog_CmdSetStatus+0xc2>
 8013148:	2b30      	cmp	r3, #48	; 0x30
 801314a:	d002      	beq.n	8013152 <pifLog_CmdSetStatus+0xb6>
 801314c:	2b31      	cmp	r3, #49	; 0x31
 801314e:	d003      	beq.n	8013158 <pifLog_CmdSetStatus+0xbc>
 8013150:	e005      	b.n	801315e <pifLog_CmdSetStatus+0xc2>
		case '0':
		case 'F':
		case 'f':
			value = FALSE;
 8013152:	2300      	movs	r3, #0
 8013154:	73fb      	strb	r3, [r7, #15]
			break;
 8013156:	e005      	b.n	8013164 <pifLog_CmdSetStatus+0xc8>

		case '1':
		case 'T':
		case 't':
			value = TRUE;
 8013158:	2301      	movs	r3, #1
 801315a:	73fb      	strb	r3, [r7, #15]
			break;
 801315c:	e002      	b.n	8013164 <pifLog_CmdSetStatus+0xc8>

		default:
			return PIF_LOG_CMD_INVALID_ARG;
 801315e:	f06f 0303 	mvn.w	r3, #3
 8013162:	e037      	b.n	80131d4 <pifLog_CmdSetStatus+0x138>
		}
		i = 0;
 8013164:	2300      	movs	r3, #0
 8013166:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8013168:	e029      	b.n	80131be <pifLog_CmdSetStatus+0x122>
			if (!strcasecmp(argv[0], c_log_flags[i].p_command)) {
 801316a:	683b      	ldr	r3, [r7, #0]
 801316c:	681a      	ldr	r2, [r3, #0]
 801316e:	4920      	ldr	r1, [pc, #128]	; (80131f0 <pifLog_CmdSetStatus+0x154>)
 8013170:	68bb      	ldr	r3, [r7, #8]
 8013172:	00db      	lsls	r3, r3, #3
 8013174:	440b      	add	r3, r1
 8013176:	685b      	ldr	r3, [r3, #4]
 8013178:	4619      	mov	r1, r3
 801317a:	4610      	mov	r0, r2
 801317c:	f010 ffac 	bl	80240d8 <strcasecmp>
 8013180:	4603      	mov	r3, r0
 8013182:	2b00      	cmp	r3, #0
 8013184:	d118      	bne.n	80131b8 <pifLog_CmdSetStatus+0x11c>
				if (value) {
 8013186:	7bfb      	ldrb	r3, [r7, #15]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d009      	beq.n	80131a0 <pifLog_CmdSetStatus+0x104>
					pif_log_flag.all |= 1L << i;
 801318c:	4b19      	ldr	r3, [pc, #100]	; (80131f4 <pifLog_CmdSetStatus+0x158>)
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	2101      	movs	r1, #1
 8013192:	68ba      	ldr	r2, [r7, #8]
 8013194:	fa01 f202 	lsl.w	r2, r1, r2
 8013198:	4313      	orrs	r3, r2
 801319a:	4a16      	ldr	r2, [pc, #88]	; (80131f4 <pifLog_CmdSetStatus+0x158>)
 801319c:	6013      	str	r3, [r2, #0]
 801319e:	e009      	b.n	80131b4 <pifLog_CmdSetStatus+0x118>
				}
				else {
					pif_log_flag.all &= ~(1L << i);
 80131a0:	4b14      	ldr	r3, [pc, #80]	; (80131f4 <pifLog_CmdSetStatus+0x158>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	2101      	movs	r1, #1
 80131a6:	68ba      	ldr	r2, [r7, #8]
 80131a8:	fa01 f202 	lsl.w	r2, r1, r2
 80131ac:	43d2      	mvns	r2, r2
 80131ae:	4013      	ands	r3, r2
 80131b0:	4a10      	ldr	r2, [pc, #64]	; (80131f4 <pifLog_CmdSetStatus+0x158>)
 80131b2:	6013      	str	r3, [r2, #0]
				}
				return PIF_LOG_CMD_NO_ERROR;
 80131b4:	2300      	movs	r3, #0
 80131b6:	e00d      	b.n	80131d4 <pifLog_CmdSetStatus+0x138>
			}
			i++;
 80131b8:	68bb      	ldr	r3, [r7, #8]
 80131ba:	3301      	adds	r3, #1
 80131bc:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 80131be:	4a0c      	ldr	r2, [pc, #48]	; (80131f0 <pifLog_CmdSetStatus+0x154>)
 80131c0:	68bb      	ldr	r3, [r7, #8]
 80131c2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d1cf      	bne.n	801316a <pifLog_CmdSetStatus+0xce>
		}
		return PIF_LOG_CMD_INVALID_ARG;
 80131ca:	f06f 0303 	mvn.w	r3, #3
 80131ce:	e001      	b.n	80131d4 <pifLog_CmdSetStatus+0x138>
	}
	return PIF_LOG_CMD_TOO_FEW_ARGS;
 80131d0:	f06f 0302 	mvn.w	r3, #2
}
 80131d4:	4618      	mov	r0, r3
 80131d6:	3710      	adds	r7, #16
 80131d8:	46bd      	mov	sp, r7
 80131da:	bd80      	pop	{r7, pc}
 80131dc:	20001dfc 	.word	0x20001dfc
 80131e0:	08028854 	.word	0x08028854
 80131e4:	20001de0 	.word	0x20001de0
 80131e8:	08028864 	.word	0x08028864
 80131ec:	08028870 	.word	0x08028870
 80131f0:	0802a49c 	.word	0x0802a49c
 80131f4:	20001e0c 	.word	0x20001e0c
 80131f8:	08028878 	.word	0x08028878

080131fc <_getDebugString>:

static BOOL _getDebugString(PifLog* p_owner, PifActCommReceiveData act_receive_data)
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b088      	sub	sp, #32
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
 8013204:	6039      	str	r1, [r7, #0]
    char tmp_char;
    uint8_t i;
    BOOL str_get_done_flag = FALSE;
 8013206:	2300      	movs	r3, #0
 8013208:	77bb      	strb	r3, [r7, #30]
    uint8_t enter;
    static uint8_t pre_enter = 0;
    const PifLogCmdEntry *cmd, *pstart, *pend;

	while ((*act_receive_data)(p_owner->p_comm, (uint8_t*)&tmp_char)) {
 801320a:	e1e2      	b.n	80135d2 <_getDebugString+0x3d6>
		if (tmp_char >= 32 && tmp_char <= 126) {
 801320c:	7bfb      	ldrb	r3, [r7, #15]
 801320e:	2b1f      	cmp	r3, #31
 8013210:	d934      	bls.n	801327c <_getDebugString+0x80>
 8013212:	7bfb      	ldrb	r3, [r7, #15]
 8013214:	2b7e      	cmp	r3, #126	; 0x7e
 8013216:	d831      	bhi.n	801327c <_getDebugString+0x80>
			if (!p_owner->char_idx && tmp_char == ' ') continue;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801321e:	2b00      	cmp	r3, #0
 8013220:	d103      	bne.n	801322a <_getDebugString+0x2e>
 8013222:	7bfb      	ldrb	r3, [r7, #15]
 8013224:	2b20      	cmp	r3, #32
 8013226:	d100      	bne.n	801322a <_getDebugString+0x2e>
 8013228:	e1d3      	b.n	80135d2 <_getDebugString+0x3d6>
			if (p_owner->char_idx < p_owner->rx_buffer_size - 3) {
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013230:	461a      	mov	r2, r3
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013238:	3b03      	subs	r3, #3
 801323a:	429a      	cmp	r2, r3
 801323c:	f280 815d 	bge.w	80134fa <_getDebugString+0x2fe>
				pifRingBuffer_PutByte(p_owner->p_tx_buffer, tmp_char);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013244:	7bfa      	ldrb	r2, [r7, #15]
 8013246:	4611      	mov	r1, r2
 8013248:	4618      	mov	r0, r3
 801324a:	f000 ffeb 	bl	8014224 <pifRingBuffer_PutByte>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	6a1b      	ldr	r3, [r3, #32]
 8013252:	69db      	ldr	r3, [r3, #28]
 8013254:	4618      	mov	r0, r3
 8013256:	f001 fd6b 	bl	8014d30 <pifTask_SetTrigger>
				p_owner->p_rx_buffer[p_owner->char_idx] = tmp_char;
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801325e:	687a      	ldr	r2, [r7, #4]
 8013260:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8013264:	4413      	add	r3, r2
 8013266:	7bfa      	ldrb	r2, [r7, #15]
 8013268:	701a      	strb	r2, [r3, #0]
				p_owner->char_idx++;
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013270:	3301      	adds	r3, #1
 8013272:	b2da      	uxtb	r2, r3
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			if (p_owner->char_idx < p_owner->rx_buffer_size - 3) {
 801327a:	e13e      	b.n	80134fa <_getDebugString+0x2fe>
            }
		}
		else {
			switch (tmp_char) {
 801327c:	7bfb      	ldrb	r3, [r7, #15]
 801327e:	2b0d      	cmp	r3, #13
 8013280:	dc16      	bgt.n	80132b0 <_getDebugString+0xb4>
 8013282:	2b08      	cmp	r3, #8
 8013284:	f2c0 812c 	blt.w	80134e0 <_getDebugString+0x2e4>
 8013288:	3b08      	subs	r3, #8
 801328a:	2b05      	cmp	r3, #5
 801328c:	f200 8128 	bhi.w	80134e0 <_getDebugString+0x2e4>
 8013290:	a201      	add	r2, pc, #4	; (adr r2, 8013298 <_getDebugString+0x9c>)
 8013292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013296:	bf00      	nop
 8013298:	080132b7 	.word	0x080132b7
 801329c:	080132fd 	.word	0x080132fd
 80132a0:	080134ab 	.word	0x080134ab
 80132a4:	080134e1 	.word	0x080134e1
 80132a8:	080134b7 	.word	0x080134b7
 80132ac:	080134b1 	.word	0x080134b1
 80132b0:	2b7f      	cmp	r3, #127	; 0x7f
 80132b2:	f040 8115 	bne.w	80134e0 <_getDebugString+0x2e4>
			case '\b':		// 0x08 / Backspace / CTRL-H
			case 0x7F:		// Delete
				if (p_owner->char_idx) {
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80132bc:	2b00      	cmp	r3, #0
 80132be:	f000 8119 	beq.w	80134f4 <_getDebugString+0x2f8>
					p_owner->char_idx--;
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80132c8:	3b01      	subs	r3, #1
 80132ca:	b2da      	uxtb	r2, r3
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
					p_owner->p_rx_buffer[p_owner->char_idx] = 0;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132d6:	687a      	ldr	r2, [r7, #4]
 80132d8:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80132dc:	4413      	add	r3, r2
 80132de:	2200      	movs	r2, #0
 80132e0:	701a      	strb	r2, [r3, #0]
					pifRingBuffer_PutString(p_owner->p_tx_buffer, "\b \b");
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132e6:	499c      	ldr	r1, [pc, #624]	; (8013558 <_getDebugString+0x35c>)
 80132e8:	4618      	mov	r0, r3
 80132ea:	f001 f819 	bl	8014320 <pifRingBuffer_PutString>
					pifTask_SetTrigger(p_owner->p_comm->_p_task);
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	6a1b      	ldr	r3, [r3, #32]
 80132f2:	69db      	ldr	r3, [r3, #28]
 80132f4:	4618      	mov	r0, r3
 80132f6:	f001 fd1b 	bl	8014d30 <pifTask_SetTrigger>
				}
				break;
 80132fa:	e0fb      	b.n	80134f4 <_getDebugString+0x2f8>

			case '\t':		// 0x09 / Horizontal Tab / CTRL-I
	            // do tab completion
			    pstart = NULL;
 80132fc:	2300      	movs	r3, #0
 80132fe:	617b      	str	r3, [r7, #20]
			    pend = NULL;
 8013300:	2300      	movs	r3, #0
 8013302:	613b      	str	r3, [r7, #16]
	            i = p_owner->char_idx;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801330a:	77fb      	strb	r3, [r7, #31]
	            cmd = p_owner->p_cmd_table;
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013310:	61bb      	str	r3, [r7, #24]
	            while (cmd->p_name) {
 8013312:	e01b      	b.n	801334c <_getDebugString+0x150>
	                if (!(p_owner->char_idx && (strncasecmp(p_owner->p_rx_buffer, cmd->p_name, p_owner->char_idx) != 0))) {
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801331a:	2b00      	cmp	r3, #0
 801331c:	d00c      	beq.n	8013338 <_getDebugString+0x13c>
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013322:	69bb      	ldr	r3, [r7, #24]
 8013324:	6819      	ldr	r1, [r3, #0]
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801332c:	461a      	mov	r2, r3
 801332e:	f010 ff11 	bl	8024154 <strncasecmp>
 8013332:	4603      	mov	r3, r0
 8013334:	2b00      	cmp	r3, #0
 8013336:	d106      	bne.n	8013346 <_getDebugString+0x14a>
						if (!pstart)
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d101      	bne.n	8013342 <_getDebugString+0x146>
							pstart = cmd;
 801333e:	69bb      	ldr	r3, [r7, #24]
 8013340:	617b      	str	r3, [r7, #20]
						pend = cmd;
 8013342:	69bb      	ldr	r3, [r7, #24]
 8013344:	613b      	str	r3, [r7, #16]
	                }
	                cmd++;
 8013346:	69bb      	ldr	r3, [r7, #24]
 8013348:	3310      	adds	r3, #16
 801334a:	61bb      	str	r3, [r7, #24]
	            while (cmd->p_name) {
 801334c:	69bb      	ldr	r3, [r7, #24]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d1df      	bne.n	8013314 <_getDebugString+0x118>
	            }
	            if (pstart) {    /* Buffer matches one or more commands */
 8013354:	697b      	ldr	r3, [r7, #20]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d05b      	beq.n	8013412 <_getDebugString+0x216>
	                for (; ; p_owner->char_idx++) {
	                	if (!pstart->p_name[p_owner->char_idx]) break;
 801335a:	697b      	ldr	r3, [r7, #20]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	687a      	ldr	r2, [r7, #4]
 8013360:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8013364:	4413      	add	r3, r2
 8013366:	781b      	ldrb	r3, [r3, #0]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d04f      	beq.n	801340c <_getDebugString+0x210>
	                    if (pstart->p_name[p_owner->char_idx] != pend->p_name[p_owner->char_idx])
 801336c:	697b      	ldr	r3, [r7, #20]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	687a      	ldr	r2, [r7, #4]
 8013372:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8013376:	4413      	add	r3, r2
 8013378:	781a      	ldrb	r2, [r3, #0]
 801337a:	693b      	ldr	r3, [r7, #16]
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	6879      	ldr	r1, [r7, #4]
 8013380:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
 8013384:	440b      	add	r3, r1
 8013386:	781b      	ldrb	r3, [r3, #0]
 8013388:	429a      	cmp	r2, r3
 801338a:	d141      	bne.n	8013410 <_getDebugString+0x214>
	                        break;
	                    if (!pstart->p_name[p_owner->char_idx] && p_owner->char_idx < p_owner->rx_buffer_size - 2) {
 801338c:	697b      	ldr	r3, [r7, #20]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	687a      	ldr	r2, [r7, #4]
 8013392:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8013396:	4413      	add	r3, r2
 8013398:	781b      	ldrb	r3, [r3, #0]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d11f      	bne.n	80133de <_getDebugString+0x1e2>
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80133a4:	461a      	mov	r2, r3
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80133ac:	3b02      	subs	r3, #2
 80133ae:	429a      	cmp	r2, r3
 80133b0:	da15      	bge.n	80133de <_getDebugString+0x1e2>
	                        /* Unambiguous -- append a space */
	                    	p_owner->p_rx_buffer[p_owner->char_idx++] = ' ';
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80133bc:	1c59      	adds	r1, r3, #1
 80133be:	b2c8      	uxtb	r0, r1
 80133c0:	6879      	ldr	r1, [r7, #4]
 80133c2:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
 80133c6:	4413      	add	r3, r2
 80133c8:	2220      	movs	r2, #32
 80133ca:	701a      	strb	r2, [r3, #0]
	                        p_owner->p_rx_buffer[p_owner->char_idx] = '\0';
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133d0:	687a      	ldr	r2, [r7, #4]
 80133d2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80133d6:	4413      	add	r3, r2
 80133d8:	2200      	movs	r2, #0
 80133da:	701a      	strb	r2, [r3, #0]
	                        break;
 80133dc:	e019      	b.n	8013412 <_getDebugString+0x216>
	                    }
	                    p_owner->p_rx_buffer[p_owner->char_idx] = pstart->p_name[p_owner->char_idx];
 80133de:	697b      	ldr	r3, [r7, #20]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	687a      	ldr	r2, [r7, #4]
 80133e4:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80133e8:	441a      	add	r2, r3
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133ee:	6879      	ldr	r1, [r7, #4]
 80133f0:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
 80133f4:	440b      	add	r3, r1
 80133f6:	7812      	ldrb	r2, [r2, #0]
 80133f8:	701a      	strb	r2, [r3, #0]
	                for (; ; p_owner->char_idx++) {
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013400:	3301      	adds	r3, #1
 8013402:	b2da      	uxtb	r2, r3
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	                	if (!pstart->p_name[p_owner->char_idx]) break;
 801340a:	e7a6      	b.n	801335a <_getDebugString+0x15e>
 801340c:	bf00      	nop
 801340e:	e000      	b.n	8013412 <_getDebugString+0x216>
	                        break;
 8013410:	bf00      	nop
	                }
	            }
	            if (!p_owner->char_idx || pstart != pend) {
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013418:	2b00      	cmp	r3, #0
 801341a:	d003      	beq.n	8013424 <_getDebugString+0x228>
 801341c:	697a      	ldr	r2, [r7, #20]
 801341e:	693b      	ldr	r3, [r7, #16]
 8013420:	429a      	cmp	r2, r3
 8013422:	d035      	beq.n	8013490 <_getDebugString+0x294>
	                /* Print list of ambiguous matches */
	            	pifRingBuffer_PutString(p_owner->p_tx_buffer, "\r\033[K");
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013428:	494c      	ldr	r1, [pc, #304]	; (801355c <_getDebugString+0x360>)
 801342a:	4618      	mov	r0, r3
 801342c:	f000 ff78 	bl	8014320 <pifRingBuffer_PutString>
	                for (cmd = pstart; cmd <= pend; cmd++) {
 8013430:	697b      	ldr	r3, [r7, #20]
 8013432:	61bb      	str	r3, [r7, #24]
 8013434:	e010      	b.n	8013458 <_getDebugString+0x25c>
	                	pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)cmd->p_name);
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801343a:	69bb      	ldr	r3, [r7, #24]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	4619      	mov	r1, r3
 8013440:	4610      	mov	r0, r2
 8013442:	f000 ff6d 	bl	8014320 <pifRingBuffer_PutString>
	                	pifRingBuffer_PutByte(p_owner->p_tx_buffer, '\t');
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801344a:	2109      	movs	r1, #9
 801344c:	4618      	mov	r0, r3
 801344e:	f000 fee9 	bl	8014224 <pifRingBuffer_PutByte>
	                for (cmd = pstart; cmd <= pend; cmd++) {
 8013452:	69bb      	ldr	r3, [r7, #24]
 8013454:	3310      	adds	r3, #16
 8013456:	61bb      	str	r3, [r7, #24]
 8013458:	69ba      	ldr	r2, [r7, #24]
 801345a:	693b      	ldr	r3, [r7, #16]
 801345c:	429a      	cmp	r2, r3
 801345e:	d9ea      	bls.n	8013436 <_getDebugString+0x23a>
	                }
					pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)s_log.p_prompt);
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013464:	4a3e      	ldr	r2, [pc, #248]	; (8013560 <_getDebugString+0x364>)
 8013466:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8013468:	4611      	mov	r1, r2
 801346a:	4618      	mov	r0, r3
 801346c:	f000 ff58 	bl	8014320 <pifRingBuffer_PutString>
	                i = 0;    /* Redraw prompt */
 8013470:	2300      	movs	r3, #0
 8013472:	77fb      	strb	r3, [r7, #31]
	            }
	            for (; i < p_owner->char_idx; i++)
 8013474:	e00c      	b.n	8013490 <_getDebugString+0x294>
	            	pifRingBuffer_PutByte(p_owner->p_tx_buffer, p_owner->p_rx_buffer[i]);
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801347e:	7ffb      	ldrb	r3, [r7, #31]
 8013480:	4413      	add	r3, r2
 8013482:	781b      	ldrb	r3, [r3, #0]
 8013484:	4619      	mov	r1, r3
 8013486:	f000 fecd 	bl	8014224 <pifRingBuffer_PutByte>
	            for (; i < p_owner->char_idx; i++)
 801348a:	7ffb      	ldrb	r3, [r7, #31]
 801348c:	3301      	adds	r3, #1
 801348e:	77fb      	strb	r3, [r7, #31]
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013496:	7ffa      	ldrb	r2, [r7, #31]
 8013498:	429a      	cmp	r2, r3
 801349a:	d3ec      	bcc.n	8013476 <_getDebugString+0x27a>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	6a1b      	ldr	r3, [r3, #32]
 80134a0:	69db      	ldr	r3, [r3, #28]
 80134a2:	4618      	mov	r0, r3
 80134a4:	f001 fc44 	bl	8014d30 <pifTask_SetTrigger>
				break;
 80134a8:	e027      	b.n	80134fa <_getDebugString+0x2fe>

			case '\n':		// 0x0A / Line Feed / CTRL-J
				enter = 1;
 80134aa:	2301      	movs	r3, #1
 80134ac:	777b      	strb	r3, [r7, #29]
				break;
 80134ae:	e024      	b.n	80134fa <_getDebugString+0x2fe>

			case '\r':		// 0x0D / Carriage Return / CTRL-M
				enter = 2;
 80134b0:	2302      	movs	r3, #2
 80134b2:	777b      	strb	r3, [r7, #29]
				break;
 80134b4:	e021      	b.n	80134fa <_getDebugString+0x2fe>

			case 0x0C:		// Form Feed, New Page / CTRL-L
				pifRingBuffer_PutString(p_owner->p_tx_buffer, "\033[2J\033[1;1H");
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134ba:	492a      	ldr	r1, [pc, #168]	; (8013564 <_getDebugString+0x368>)
 80134bc:	4618      	mov	r0, r3
 80134be:	f000 ff2f 	bl	8014320 <pifRingBuffer_PutString>
				pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)s_log.p_prompt);
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134c6:	4a26      	ldr	r2, [pc, #152]	; (8013560 <_getDebugString+0x364>)
 80134c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80134ca:	4611      	mov	r1, r2
 80134cc:	4618      	mov	r0, r3
 80134ce:	f000 ff27 	bl	8014320 <pifRingBuffer_PutString>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	6a1b      	ldr	r3, [r3, #32]
 80134d6:	69db      	ldr	r3, [r3, #28]
 80134d8:	4618      	mov	r0, r3
 80134da:	f001 fc29 	bl	8014d30 <pifTask_SetTrigger>
				break;
 80134de:	e00c      	b.n	80134fa <_getDebugString+0x2fe>

			default:
				if (p_owner->evt_control_char) (*p_owner->evt_control_char)(tmp_char);
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d007      	beq.n	80134f8 <_getDebugString+0x2fc>
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80134ec:	7bfa      	ldrb	r2, [r7, #15]
 80134ee:	4610      	mov	r0, r2
 80134f0:	4798      	blx	r3
            	break;
 80134f2:	e001      	b.n	80134f8 <_getDebugString+0x2fc>
				break;
 80134f4:	bf00      	nop
 80134f6:	e000      	b.n	80134fa <_getDebugString+0x2fe>
            	break;
 80134f8:	bf00      	nop
			}
        }

		if (enter) {
 80134fa:	7f7b      	ldrb	r3, [r7, #29]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d026      	beq.n	801354e <_getDebugString+0x352>
			if (p_owner->char_idx) {
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013506:	2b00      	cmp	r3, #0
 8013508:	d005      	beq.n	8013516 <_getDebugString+0x31a>
				str_get_done_flag = TRUE;
 801350a:	2301      	movs	r3, #1
 801350c:	77bb      	strb	r3, [r7, #30]
				pre_enter = enter;
 801350e:	4a16      	ldr	r2, [pc, #88]	; (8013568 <_getDebugString+0x36c>)
 8013510:	7f7b      	ldrb	r3, [r7, #29]
 8013512:	7013      	strb	r3, [r2, #0]
 8013514:	e019      	b.n	801354a <_getDebugString+0x34e>
			}
			else if (!pre_enter || enter == pre_enter) {
 8013516:	4b14      	ldr	r3, [pc, #80]	; (8013568 <_getDebugString+0x36c>)
 8013518:	781b      	ldrb	r3, [r3, #0]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d004      	beq.n	8013528 <_getDebugString+0x32c>
 801351e:	4b12      	ldr	r3, [pc, #72]	; (8013568 <_getDebugString+0x36c>)
 8013520:	781b      	ldrb	r3, [r3, #0]
 8013522:	7f7a      	ldrb	r2, [r7, #29]
 8013524:	429a      	cmp	r2, r3
 8013526:	d110      	bne.n	801354a <_getDebugString+0x34e>
				pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)s_log.p_prompt);
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801352c:	4a0c      	ldr	r2, [pc, #48]	; (8013560 <_getDebugString+0x364>)
 801352e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8013530:	4611      	mov	r1, r2
 8013532:	4618      	mov	r0, r3
 8013534:	f000 fef4 	bl	8014320 <pifRingBuffer_PutString>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	6a1b      	ldr	r3, [r3, #32]
 801353c:	69db      	ldr	r3, [r3, #28]
 801353e:	4618      	mov	r0, r3
 8013540:	f001 fbf6 	bl	8014d30 <pifTask_SetTrigger>
				pre_enter = enter;
 8013544:	4a08      	ldr	r2, [pc, #32]	; (8013568 <_getDebugString+0x36c>)
 8013546:	7f7b      	ldrb	r3, [r7, #29]
 8013548:	7013      	strb	r3, [r2, #0]
			}
			enter = 0;
 801354a:	2300      	movs	r3, #0
 801354c:	777b      	strb	r3, [r7, #29]
		}

        if (str_get_done_flag == TRUE) {
 801354e:	7fbb      	ldrb	r3, [r7, #30]
 8013550:	2b01      	cmp	r3, #1
 8013552:	d13e      	bne.n	80135d2 <_getDebugString+0x3d6>
        	// Strip trailing whitespace
            while (p_owner->char_idx > 0 && p_owner->p_rx_buffer[p_owner->char_idx - 1] == ' ') {
 8013554:	e012      	b.n	801357c <_getDebugString+0x380>
 8013556:	bf00      	nop
 8013558:	08028888 	.word	0x08028888
 801355c:	0802888c 	.word	0x0802888c
 8013560:	20001e10 	.word	0x20001e10
 8013564:	08028894 	.word	0x08028894
 8013568:	20001e74 	.word	0x20001e74
            	p_owner->char_idx--;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013572:	3b01      	subs	r3, #1
 8013574:	b2da      	uxtb	r2, r3
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            while (p_owner->char_idx > 0 && p_owner->p_rx_buffer[p_owner->char_idx - 1] == ' ') {
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013582:	2b00      	cmp	r3, #0
 8013584:	d009      	beq.n	801359a <_getDebugString+0x39e>
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013590:	3b01      	subs	r3, #1
 8013592:	4413      	add	r3, r2
 8013594:	781b      	ldrb	r3, [r3, #0]
 8013596:	2b20      	cmp	r3, #32
 8013598:	d0e8      	beq.n	801356c <_getDebugString+0x370>
            }
            if (p_owner->char_idx) {
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d014      	beq.n	80135ce <_getDebugString+0x3d2>
				p_owner->p_rx_buffer[p_owner->char_idx] = 0;
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135a8:	687a      	ldr	r2, [r7, #4]
 80135aa:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80135ae:	4413      	add	r3, r2
 80135b0:	2200      	movs	r2, #0
 80135b2:	701a      	strb	r2, [r3, #0]
				pifRingBuffer_PutByte(p_owner->p_tx_buffer, '\n');
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135b8:	210a      	movs	r1, #10
 80135ba:	4618      	mov	r0, r3
 80135bc:	f000 fe32 	bl	8014224 <pifRingBuffer_PutByte>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	6a1b      	ldr	r3, [r3, #32]
 80135c4:	69db      	ldr	r3, [r3, #28]
 80135c6:	4618      	mov	r0, r3
 80135c8:	f001 fbb2 	bl	8014d30 <pifTask_SetTrigger>
	        	break;
 80135cc:	e00c      	b.n	80135e8 <_getDebugString+0x3ec>
            }
            else {
            	str_get_done_flag = FALSE;
 80135ce:	2300      	movs	r3, #0
 80135d0:	77bb      	strb	r3, [r7, #30]
	while ((*act_receive_data)(p_owner->p_comm, (uint8_t*)&tmp_char)) {
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	6a1a      	ldr	r2, [r3, #32]
 80135d6:	f107 010f 	add.w	r1, r7, #15
 80135da:	683b      	ldr	r3, [r7, #0]
 80135dc:	4610      	mov	r0, r2
 80135de:	4798      	blx	r3
 80135e0:	4603      	mov	r3, r0
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	f47f ae12 	bne.w	801320c <_getDebugString+0x10>
        	}
        }
    }
    return str_get_done_flag;
 80135e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80135ea:	4618      	mov	r0, r3
 80135ec:	3720      	adds	r7, #32
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}
 80135f2:	bf00      	nop

080135f4 <_processDebugCmd>:

static int _processDebugCmd(PifLog* p_owner)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b086      	sub	sp, #24
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
    char* p_tmp_cmd;
    BOOL find_arg;
    unsigned int argc;
    const PifLogCmdEntry* p_cmd_entry;

    find_arg = TRUE;
 80135fc:	2301      	movs	r3, #1
 80135fe:	74fb      	strb	r3, [r7, #19]
    argc = 0;
 8013600:	2300      	movs	r3, #0
 8013602:	60fb      	str	r3, [r7, #12]
    p_tmp_cmd = p_owner->p_rx_buffer;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013608:	617b      	str	r3, [r7, #20]

    while (*p_tmp_cmd) {
 801360a:	e022      	b.n	8013652 <_processDebugCmd+0x5e>
        if (*p_tmp_cmd == ' ') {
 801360c:	697b      	ldr	r3, [r7, #20]
 801360e:	781b      	ldrb	r3, [r3, #0]
 8013610:	2b20      	cmp	r3, #32
 8013612:	d105      	bne.n	8013620 <_processDebugCmd+0x2c>
            *p_tmp_cmd = 0;
 8013614:	697b      	ldr	r3, [r7, #20]
 8013616:	2200      	movs	r2, #0
 8013618:	701a      	strb	r2, [r3, #0]
            find_arg = TRUE;
 801361a:	2301      	movs	r3, #1
 801361c:	74fb      	strb	r3, [r7, #19]
 801361e:	e015      	b.n	801364c <_processDebugCmd+0x58>
        }
        else {
            if (find_arg) {
 8013620:	7cfb      	ldrb	r3, [r7, #19]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d012      	beq.n	801364c <_processDebugCmd+0x58>
                if (argc < PIF_LOG_CMD_MAX_ARGS) {
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	2b07      	cmp	r3, #7
 801362a:	d80c      	bhi.n	8013646 <_processDebugCmd+0x52>
                	p_owner->p_argv[argc] = p_tmp_cmd;
 801362c:	687a      	ldr	r2, [r7, #4]
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	330c      	adds	r3, #12
 8013632:	009b      	lsls	r3, r3, #2
 8013634:	4413      	add	r3, r2
 8013636:	697a      	ldr	r2, [r7, #20]
 8013638:	605a      	str	r2, [r3, #4]
                	argc++;
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	3301      	adds	r3, #1
 801363e:	60fb      	str	r3, [r7, #12]
                    find_arg = FALSE;
 8013640:	2300      	movs	r3, #0
 8013642:	74fb      	strb	r3, [r7, #19]
 8013644:	e002      	b.n	801364c <_processDebugCmd+0x58>
                }
                else {
                    return PIF_LOG_CMD_TOO_MANY_ARGS;
 8013646:	f06f 0301 	mvn.w	r3, #1
 801364a:	e02e      	b.n	80136aa <_processDebugCmd+0xb6>
                }
            }
        }

        p_tmp_cmd++;
 801364c:	697b      	ldr	r3, [r7, #20]
 801364e:	3301      	adds	r3, #1
 8013650:	617b      	str	r3, [r7, #20]
    while (*p_tmp_cmd) {
 8013652:	697b      	ldr	r3, [r7, #20]
 8013654:	781b      	ldrb	r3, [r3, #0]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d1d8      	bne.n	801360c <_processDebugCmd+0x18>
    }

    if (argc) {
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d023      	beq.n	80136a8 <_processDebugCmd+0xb4>
		p_cmd_entry = p_owner->p_cmd_table;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013664:	60bb      	str	r3, [r7, #8]
		while (p_cmd_entry->p_name) {
 8013666:	e018      	b.n	801369a <_processDebugCmd+0xa6>
			if (!strcasecmp(p_owner->p_argv[0], p_cmd_entry->p_name)) {
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801366c:	68bb      	ldr	r3, [r7, #8]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	4619      	mov	r1, r3
 8013672:	4610      	mov	r0, r2
 8013674:	f010 fd30 	bl	80240d8 <strcasecmp>
 8013678:	4603      	mov	r3, r0
 801367a:	2b00      	cmp	r3, #0
 801367c:	d10a      	bne.n	8013694 <_processDebugCmd+0xa0>
				return p_cmd_entry->processor(argc - 1, &p_owner->p_argv[1]);
 801367e:	68bb      	ldr	r3, [r7, #8]
 8013680:	685b      	ldr	r3, [r3, #4]
 8013682:	68fa      	ldr	r2, [r7, #12]
 8013684:	3a01      	subs	r2, #1
 8013686:	4610      	mov	r0, r2
 8013688:	687a      	ldr	r2, [r7, #4]
 801368a:	3238      	adds	r2, #56	; 0x38
 801368c:	4611      	mov	r1, r2
 801368e:	4798      	blx	r3
 8013690:	4603      	mov	r3, r0
 8013692:	e00a      	b.n	80136aa <_processDebugCmd+0xb6>
            }

			p_cmd_entry++;
 8013694:	68bb      	ldr	r3, [r7, #8]
 8013696:	3310      	adds	r3, #16
 8013698:	60bb      	str	r3, [r7, #8]
		while (p_cmd_entry->p_name) {
 801369a:	68bb      	ldr	r3, [r7, #8]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d1e2      	bne.n	8013668 <_processDebugCmd+0x74>
    	}
        return PIF_LOG_CMD_BAD_CMD;
 80136a2:	f04f 33ff 	mov.w	r3, #4294967295
 80136a6:	e000      	b.n	80136aa <_processDebugCmd+0xb6>
    }
    return PIF_LOG_CMD_NO_ERROR;
 80136a8:	2300      	movs	r3, #0
}
 80136aa:	4618      	mov	r0, r3
 80136ac:	3718      	adds	r7, #24
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}

080136b2 <_evtParsing>:

static void _evtParsing(void* p_client, PifActCommReceiveData act_receive_data)
{
 80136b2:	b580      	push	{r7, lr}
 80136b4:	b084      	sub	sp, #16
 80136b6:	af00      	add	r7, sp, #0
 80136b8:	6078      	str	r0, [r7, #4]
 80136ba:	6039      	str	r1, [r7, #0]
	PifLog* p_owner = (PifLog*)p_client;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	60fb      	str	r3, [r7, #12]

    if (p_owner->cmd_done == FALSE) {
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d10f      	bne.n	80136ea <_evtParsing+0x38>
        if (_getDebugString(p_owner, act_receive_data)) {
 80136ca:	6839      	ldr	r1, [r7, #0]
 80136cc:	68f8      	ldr	r0, [r7, #12]
 80136ce:	f7ff fd95 	bl	80131fc <_getDebugString>
 80136d2:	4603      	mov	r3, r0
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d008      	beq.n	80136ea <_evtParsing+0x38>
        	p_owner->cmd_done = TRUE;
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	2201      	movs	r2, #1
 80136dc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        	pifTask_SetTrigger(p_owner->p_task);
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136e4:	4618      	mov	r0, r3
 80136e6:	f001 fb23 	bl	8014d30 <pifTask_SetTrigger>
        }
    }
}
 80136ea:	bf00      	nop
 80136ec:	3710      	adds	r7, #16
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}
	...

080136f4 <_doTask>:

static uint16_t _doTask(PifTask* p_task)
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b08e      	sub	sp, #56	; 0x38
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
    int status = PIF_LOG_CMD_NO_ERROR;
 80136fc:	2300      	movs	r3, #0
 80136fe:	633b      	str	r3, [r7, #48]	; 0x30
    char msg[40];

    (void)p_task;

	status = _processDebugCmd(&s_log);
 8013700:	4850      	ldr	r0, [pc, #320]	; (8013844 <_doTask+0x150>)
 8013702:	f7ff ff77 	bl	80135f4 <_processDebugCmd>
 8013706:	6338      	str	r0, [r7, #48]	; 0x30

	while (s_log.char_idx) {
 8013708:	e00f      	b.n	801372a <_doTask+0x36>
		s_log.p_rx_buffer[s_log.char_idx] = 0;
 801370a:	4b4e      	ldr	r3, [pc, #312]	; (8013844 <_doTask+0x150>)
 801370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801370e:	4a4d      	ldr	r2, [pc, #308]	; (8013844 <_doTask+0x150>)
 8013710:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8013714:	4413      	add	r3, r2
 8013716:	2200      	movs	r2, #0
 8013718:	701a      	strb	r2, [r3, #0]
		s_log.char_idx--;
 801371a:	4b4a      	ldr	r3, [pc, #296]	; (8013844 <_doTask+0x150>)
 801371c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013720:	3b01      	subs	r3, #1
 8013722:	b2da      	uxtb	r2, r3
 8013724:	4b47      	ldr	r3, [pc, #284]	; (8013844 <_doTask+0x150>)
 8013726:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	while (s_log.char_idx) {
 801372a:	4b46      	ldr	r3, [pc, #280]	; (8013844 <_doTask+0x150>)
 801372c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013730:	2b00      	cmp	r3, #0
 8013732:	d1ea      	bne.n	801370a <_doTask+0x16>
	}

	for (int i = 0; i < PIF_LOG_CMD_MAX_ARGS; i++) {
 8013734:	2300      	movs	r3, #0
 8013736:	637b      	str	r3, [r7, #52]	; 0x34
 8013738:	e009      	b.n	801374e <_doTask+0x5a>
		s_log.p_argv[i] = 0;
 801373a:	4a42      	ldr	r2, [pc, #264]	; (8013844 <_doTask+0x150>)
 801373c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801373e:	330c      	adds	r3, #12
 8013740:	009b      	lsls	r3, r3, #2
 8013742:	4413      	add	r3, r2
 8013744:	2200      	movs	r2, #0
 8013746:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < PIF_LOG_CMD_MAX_ARGS; i++) {
 8013748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801374a:	3301      	adds	r3, #1
 801374c:	637b      	str	r3, [r7, #52]	; 0x34
 801374e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013750:	2b07      	cmp	r3, #7
 8013752:	ddf2      	ble.n	801373a <_doTask+0x46>
	}

	switch (status) {
 8013754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013756:	3304      	adds	r3, #4
 8013758:	2b03      	cmp	r3, #3
 801375a:	d83f      	bhi.n	80137dc <_doTask+0xe8>
 801375c:	a201      	add	r2, pc, #4	; (adr r2, 8013764 <_doTask+0x70>)
 801375e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013762:	bf00      	nop
 8013764:	080137c3 	.word	0x080137c3
 8013768:	080137a9 	.word	0x080137a9
 801376c:	0801378f 	.word	0x0801378f
 8013770:	08013775 	.word	0x08013775
	case PIF_LOG_CMD_BAD_CMD:
		// Handle the case of bad command.
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Not defined command!\n");
 8013774:	4b33      	ldr	r3, [pc, #204]	; (8013844 <_doTask+0x150>)
 8013776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013778:	4933      	ldr	r1, [pc, #204]	; (8013848 <_doTask+0x154>)
 801377a:	4618      	mov	r0, r3
 801377c:	f000 fdd0 	bl	8014320 <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 8013780:	4b30      	ldr	r3, [pc, #192]	; (8013844 <_doTask+0x150>)
 8013782:	6a1b      	ldr	r3, [r3, #32]
 8013784:	69db      	ldr	r3, [r3, #28]
 8013786:	4618      	mov	r0, r3
 8013788:	f001 fad2 	bl	8014d30 <pifTask_SetTrigger>
		break;
 801378c:	e043      	b.n	8013816 <_doTask+0x122>

	case PIF_LOG_CMD_TOO_MANY_ARGS:
		// Handle the case of too many arguments.
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Too many arguments!\n");
 801378e:	4b2d      	ldr	r3, [pc, #180]	; (8013844 <_doTask+0x150>)
 8013790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013792:	492e      	ldr	r1, [pc, #184]	; (801384c <_doTask+0x158>)
 8013794:	4618      	mov	r0, r3
 8013796:	f000 fdc3 	bl	8014320 <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 801379a:	4b2a      	ldr	r3, [pc, #168]	; (8013844 <_doTask+0x150>)
 801379c:	6a1b      	ldr	r3, [r3, #32]
 801379e:	69db      	ldr	r3, [r3, #28]
 80137a0:	4618      	mov	r0, r3
 80137a2:	f001 fac5 	bl	8014d30 <pifTask_SetTrigger>
		break;
 80137a6:	e036      	b.n	8013816 <_doTask+0x122>

	case PIF_LOG_CMD_TOO_FEW_ARGS:
		// Handle the case of too few arguments.
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Too few arguments!\n");
 80137a8:	4b26      	ldr	r3, [pc, #152]	; (8013844 <_doTask+0x150>)
 80137aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137ac:	4928      	ldr	r1, [pc, #160]	; (8013850 <_doTask+0x15c>)
 80137ae:	4618      	mov	r0, r3
 80137b0:	f000 fdb6 	bl	8014320 <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 80137b4:	4b23      	ldr	r3, [pc, #140]	; (8013844 <_doTask+0x150>)
 80137b6:	6a1b      	ldr	r3, [r3, #32]
 80137b8:	69db      	ldr	r3, [r3, #28]
 80137ba:	4618      	mov	r0, r3
 80137bc:	f001 fab8 	bl	8014d30 <pifTask_SetTrigger>
		break;
 80137c0:	e029      	b.n	8013816 <_doTask+0x122>

	case PIF_LOG_CMD_INVALID_ARG:
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Invalid arguments!\n");
 80137c2:	4b20      	ldr	r3, [pc, #128]	; (8013844 <_doTask+0x150>)
 80137c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137c6:	4923      	ldr	r1, [pc, #140]	; (8013854 <_doTask+0x160>)
 80137c8:	4618      	mov	r0, r3
 80137ca:	f000 fda9 	bl	8014320 <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 80137ce:	4b1d      	ldr	r3, [pc, #116]	; (8013844 <_doTask+0x150>)
 80137d0:	6a1b      	ldr	r3, [r3, #32]
 80137d2:	69db      	ldr	r3, [r3, #28]
 80137d4:	4618      	mov	r0, r3
 80137d6:	f001 faab 	bl	8014d30 <pifTask_SetTrigger>
		break;
 80137da:	e01c      	b.n	8013816 <_doTask+0x122>

	default:
		// Otherwise the command was executed.  Print the error
		// code if one was returned.
		if (status < PIF_LOG_CMD_NO_ERROR && status > PIF_LOG_CMD_USER_ERROR) {
 80137dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137de:	2b00      	cmp	r3, #0
 80137e0:	da18      	bge.n	8013814 <_doTask+0x120>
 80137e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137e4:	f113 0f09 	cmn.w	r3, #9
 80137e8:	db14      	blt.n	8013814 <_doTask+0x120>
			pif_Printf(msg, "Command returned error code: %d\n", status);
 80137ea:	f107 0308 	add.w	r3, r7, #8
 80137ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137f0:	4919      	ldr	r1, [pc, #100]	; (8013858 <_doTask+0x164>)
 80137f2:	4618      	mov	r0, r3
 80137f4:	f7fe fcd6 	bl	80121a4 <pif_Printf>
			pifRingBuffer_PutString(s_log.p_tx_buffer, msg);
 80137f8:	4b12      	ldr	r3, [pc, #72]	; (8013844 <_doTask+0x150>)
 80137fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137fc:	f107 0208 	add.w	r2, r7, #8
 8013800:	4611      	mov	r1, r2
 8013802:	4618      	mov	r0, r3
 8013804:	f000 fd8c 	bl	8014320 <pifRingBuffer_PutString>
			pifTask_SetTrigger(s_log.p_comm->_p_task);
 8013808:	4b0e      	ldr	r3, [pc, #56]	; (8013844 <_doTask+0x150>)
 801380a:	6a1b      	ldr	r3, [r3, #32]
 801380c:	69db      	ldr	r3, [r3, #28]
 801380e:	4618      	mov	r0, r3
 8013810:	f001 fa8e 	bl	8014d30 <pifTask_SetTrigger>
		}
		break;
 8013814:	bf00      	nop
	}

	pifRingBuffer_PutString(s_log.p_tx_buffer, (char *)s_log.p_prompt);
 8013816:	4b0b      	ldr	r3, [pc, #44]	; (8013844 <_doTask+0x150>)
 8013818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801381a:	4a0a      	ldr	r2, [pc, #40]	; (8013844 <_doTask+0x150>)
 801381c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801381e:	4611      	mov	r1, r2
 8013820:	4618      	mov	r0, r3
 8013822:	f000 fd7d 	bl	8014320 <pifRingBuffer_PutString>
	pifTask_SetTrigger(s_log.p_comm->_p_task);
 8013826:	4b07      	ldr	r3, [pc, #28]	; (8013844 <_doTask+0x150>)
 8013828:	6a1b      	ldr	r3, [r3, #32]
 801382a:	69db      	ldr	r3, [r3, #28]
 801382c:	4618      	mov	r0, r3
 801382e:	f001 fa7f 	bl	8014d30 <pifTask_SetTrigger>

	s_log.cmd_done = FALSE;
 8013832:	4b04      	ldr	r3, [pc, #16]	; (8013844 <_doTask+0x150>)
 8013834:	2200      	movs	r2, #0
 8013836:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	return 0;
 801383a:	2300      	movs	r3, #0
}
 801383c:	4618      	mov	r0, r3
 801383e:	3738      	adds	r7, #56	; 0x38
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}
 8013844:	20001e10 	.word	0x20001e10
 8013848:	080288a0 	.word	0x080288a0
 801384c:	080288b8 	.word	0x080288b8
 8013850:	080288d0 	.word	0x080288d0
 8013854:	080288e4 	.word	0x080288e4
 8013858:	080288f8 	.word	0x080288f8

0801385c <_evtSending>:
}

#endif

static BOOL _evtSending(void* p_client, PifActCommSendData act_send_data)
{
 801385c:	b5b0      	push	{r4, r5, r7, lr}
 801385e:	b084      	sub	sp, #16
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
 8013864:	6039      	str	r1, [r7, #0]
	PifLog* p_owner = (PifLog*)p_client;
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	if (!pifRingBuffer_IsEmpty(p_owner->p_tx_buffer)) {
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801386e:	4618      	mov	r0, r3
 8013870:	f000 fc03 	bl	801407a <pifRingBuffer_IsEmpty>
 8013874:	4603      	mov	r3, r0
 8013876:	2b00      	cmp	r3, #0
 8013878:	d11f      	bne.n	80138ba <_evtSending+0x5e>
		length = (*act_send_data)(p_owner->p_comm, pifRingBuffer_GetTailPointer(p_owner->p_tx_buffer, 0),
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	6a1c      	ldr	r4, [r3, #32]
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013882:	2100      	movs	r1, #0
 8013884:	4618      	mov	r0, r3
 8013886:	f000 fbcc 	bl	8014022 <pifRingBuffer_GetTailPointer>
 801388a:	4605      	mov	r5, r0
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013890:	2100      	movs	r1, #0
 8013892:	4618      	mov	r0, r3
 8013894:	f000 fc26 	bl	80140e4 <pifRingBuffer_GetLinerSize>
 8013898:	4603      	mov	r3, r0
 801389a:	461a      	mov	r2, r3
 801389c:	683b      	ldr	r3, [r7, #0]
 801389e:	4629      	mov	r1, r5
 80138a0:	4620      	mov	r0, r4
 80138a2:	4798      	blx	r3
 80138a4:	4603      	mov	r3, r0
 80138a6:	817b      	strh	r3, [r7, #10]
    			pifRingBuffer_GetLinerSize(p_owner->p_tx_buffer, 0));
		pifRingBuffer_Remove(p_owner->p_tx_buffer, length);
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ac:	897a      	ldrh	r2, [r7, #10]
 80138ae:	4611      	mov	r1, r2
 80138b0:	4618      	mov	r0, r3
 80138b2:	f000 fdf4 	bl	801449e <pifRingBuffer_Remove>
		return TRUE;
 80138b6:	2301      	movs	r3, #1
 80138b8:	e000      	b.n	80138bc <_evtSending+0x60>
	}
	return FALSE;
 80138ba:	2300      	movs	r3, #0
}
 80138bc:	4618      	mov	r0, r3
 80138be:	3710      	adds	r7, #16
 80138c0:	46bd      	mov	sp, r7
 80138c2:	bdb0      	pop	{r4, r5, r7, pc}

080138c4 <_printLog>:

static void _printLog(char* p_string, BOOL vcd)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b082      	sub	sp, #8
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
 80138cc:	460b      	mov	r3, r1
 80138ce:	70fb      	strb	r3, [r7, #3]
	if (!vcd && pifRingBuffer_IsBuffer(&s_log.buffer)) {
 80138d0:	78fb      	ldrb	r3, [r7, #3]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d109      	bne.n	80138ea <_printLog+0x26>
 80138d6:	4813      	ldr	r0, [pc, #76]	; (8013924 <_printLog+0x60>)
 80138d8:	f000 fbbe 	bl	8014058 <pifRingBuffer_IsBuffer>
 80138dc:	4603      	mov	r3, r0
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d003      	beq.n	80138ea <_printLog+0x26>
		pifRingBuffer_PutString(&s_log.buffer, p_string);
 80138e2:	6879      	ldr	r1, [r7, #4]
 80138e4:	480f      	ldr	r0, [pc, #60]	; (8013924 <_printLog+0x60>)
 80138e6:	f000 fd1b 	bl	8014320 <pifRingBuffer_PutString>
	}

	if (s_log.enable || vcd) {
 80138ea:	4b0f      	ldr	r3, [pc, #60]	; (8013928 <_printLog+0x64>)
 80138ec:	781b      	ldrb	r3, [r3, #0]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d108      	bne.n	8013904 <_printLog+0x40>
 80138f2:	78fb      	ldrb	r3, [r7, #3]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d010      	beq.n	801391a <_printLog+0x56>
        while (!pifRingBuffer_PutString(s_log.p_tx_buffer, p_string)) {
 80138f8:	e004      	b.n	8013904 <_printLog+0x40>
        	if (!pifTaskManager_Yield()) break;
 80138fa:	f001 fc61 	bl	80151c0 <pifTaskManager_Yield>
 80138fe:	4603      	mov	r3, r0
 8013900:	2b00      	cmp	r3, #0
 8013902:	d009      	beq.n	8013918 <_printLog+0x54>
        while (!pifRingBuffer_PutString(s_log.p_tx_buffer, p_string)) {
 8013904:	4b08      	ldr	r3, [pc, #32]	; (8013928 <_printLog+0x64>)
 8013906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013908:	6879      	ldr	r1, [r7, #4]
 801390a:	4618      	mov	r0, r3
 801390c:	f000 fd08 	bl	8014320 <pifRingBuffer_PutString>
 8013910:	4603      	mov	r3, r0
 8013912:	2b00      	cmp	r3, #0
 8013914:	d0f1      	beq.n	80138fa <_printLog+0x36>
        }
	}
}
 8013916:	e000      	b.n	801391a <_printLog+0x56>
        	if (!pifTaskManager_Yield()) break;
 8013918:	bf00      	nop
}
 801391a:	bf00      	nop
 801391c:	3708      	adds	r7, #8
 801391e:	46bd      	mov	sp, r7
 8013920:	bd80      	pop	{r7, pc}
 8013922:	bf00      	nop
 8013924:	20001e14 	.word	0x20001e14
 8013928:	20001e10 	.word	0x20001e10

0801392c <_printTime>:

static void _printTime()
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b082      	sub	sp, #8
 8013930:	af00      	add	r7, sp, #0
	int offset = 0;
 8013932:	2300      	movs	r3, #0
 8013934:	607b      	str	r3, [r7, #4]
    static char tmp_buf[20];

    tmp_buf[offset++] = '\n';
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	1c5a      	adds	r2, r3, #1
 801393a:	607a      	str	r2, [r7, #4]
 801393c:	4a35      	ldr	r2, [pc, #212]	; (8013a14 <_printTime+0xe8>)
 801393e:	210a      	movs	r1, #10
 8013940:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	4a33      	ldr	r2, [pc, #204]	; (8013a14 <_printTime+0xe8>)
 8013946:	4413      	add	r3, r2
 8013948:	4a33      	ldr	r2, [pc, #204]	; (8013a18 <_printTime+0xec>)
 801394a:	7952      	ldrb	r2, [r2, #5]
 801394c:	b2d2      	uxtb	r2, r2
 801394e:	4611      	mov	r1, r2
 8013950:	2202      	movs	r2, #2
 8013952:	4618      	mov	r0, r3
 8013954:	f7fe f840 	bl	80119d8 <pif_DecToString>
 8013958:	4602      	mov	r2, r0
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	4413      	add	r3, r2
 801395e:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = '.';
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	1c5a      	adds	r2, r3, #1
 8013964:	607a      	str	r2, [r7, #4]
 8013966:	4a2b      	ldr	r2, [pc, #172]	; (8013a14 <_printTime+0xe8>)
 8013968:	212e      	movs	r1, #46	; 0x2e
 801396a:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	4a29      	ldr	r2, [pc, #164]	; (8013a14 <_printTime+0xe8>)
 8013970:	4413      	add	r3, r2
 8013972:	4a2a      	ldr	r2, [pc, #168]	; (8013a1c <_printTime+0xf0>)
 8013974:	8812      	ldrh	r2, [r2, #0]
 8013976:	b292      	uxth	r2, r2
 8013978:	4611      	mov	r1, r2
 801397a:	2203      	movs	r2, #3
 801397c:	4618      	mov	r0, r3
 801397e:	f7fe f82b 	bl	80119d8 <pif_DecToString>
 8013982:	4602      	mov	r2, r0
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	4413      	add	r3, r2
 8013988:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ' ';
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	1c5a      	adds	r2, r3, #1
 801398e:	607a      	str	r2, [r7, #4]
 8013990:	4a20      	ldr	r2, [pc, #128]	; (8013a14 <_printTime+0xe8>)
 8013992:	2120      	movs	r1, #32
 8013994:	54d1      	strb	r1, [r2, r3]
	tmp_buf[offset++] = 'T';
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	1c5a      	adds	r2, r3, #1
 801399a:	607a      	str	r2, [r7, #4]
 801399c:	4a1d      	ldr	r2, [pc, #116]	; (8013a14 <_printTime+0xe8>)
 801399e:	2154      	movs	r1, #84	; 0x54
 80139a0:	54d1      	strb	r1, [r2, r3]
	tmp_buf[offset++] = ' ';
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	1c5a      	adds	r2, r3, #1
 80139a6:	607a      	str	r2, [r7, #4]
 80139a8:	4a1a      	ldr	r2, [pc, #104]	; (8013a14 <_printTime+0xe8>)
 80139aa:	2120      	movs	r1, #32
 80139ac:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.hour, 2);
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	4a18      	ldr	r2, [pc, #96]	; (8013a14 <_printTime+0xe8>)
 80139b2:	4413      	add	r3, r2
 80139b4:	4a18      	ldr	r2, [pc, #96]	; (8013a18 <_printTime+0xec>)
 80139b6:	78d2      	ldrb	r2, [r2, #3]
 80139b8:	b2d2      	uxtb	r2, r2
 80139ba:	4611      	mov	r1, r2
 80139bc:	2202      	movs	r2, #2
 80139be:	4618      	mov	r0, r3
 80139c0:	f7fe f80a 	bl	80119d8 <pif_DecToString>
 80139c4:	4602      	mov	r2, r0
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	4413      	add	r3, r2
 80139ca:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ':';
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	1c5a      	adds	r2, r3, #1
 80139d0:	607a      	str	r2, [r7, #4]
 80139d2:	4a10      	ldr	r2, [pc, #64]	; (8013a14 <_printTime+0xe8>)
 80139d4:	213a      	movs	r1, #58	; 0x3a
 80139d6:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.minute, 2);
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	4a0e      	ldr	r2, [pc, #56]	; (8013a14 <_printTime+0xe8>)
 80139dc:	4413      	add	r3, r2
 80139de:	4a0e      	ldr	r2, [pc, #56]	; (8013a18 <_printTime+0xec>)
 80139e0:	7912      	ldrb	r2, [r2, #4]
 80139e2:	b2d2      	uxtb	r2, r2
 80139e4:	4611      	mov	r1, r2
 80139e6:	2202      	movs	r2, #2
 80139e8:	4618      	mov	r0, r3
 80139ea:	f7fd fff5 	bl	80119d8 <pif_DecToString>
 80139ee:	4602      	mov	r2, r0
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	4413      	add	r3, r2
 80139f4:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ' ';
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	1c5a      	adds	r2, r3, #1
 80139fa:	607a      	str	r2, [r7, #4]
 80139fc:	4a05      	ldr	r2, [pc, #20]	; (8013a14 <_printTime+0xe8>)
 80139fe:	2120      	movs	r1, #32
 8013a00:	54d1      	strb	r1, [r2, r3]

	_printLog(tmp_buf, FALSE);
 8013a02:	2100      	movs	r1, #0
 8013a04:	4803      	ldr	r0, [pc, #12]	; (8013a14 <_printTime+0xe8>)
 8013a06:	f7ff ff5d 	bl	80138c4 <_printLog>
}
 8013a0a:	bf00      	nop
 8013a0c:	3708      	adds	r7, #8
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	bd80      	pop	{r7, pc}
 8013a12:	bf00      	nop
 8013a14:	20001e78 	.word	0x20001e78
 8013a18:	20001df0 	.word	0x20001df0
 8013a1c:	20001de8 	.word	0x20001de8

08013a20 <pifLog_Init>:

BOOL pifLog_Init()
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b082      	sub	sp, #8
 8013a24:	af02      	add	r7, sp, #8
	memset(&s_log, 0, sizeof(PifLog));
 8013a26:	2264      	movs	r2, #100	; 0x64
 8013a28:	2100      	movs	r1, #0
 8013a2a:	480f      	ldr	r0, [pc, #60]	; (8013a68 <pifLog_Init+0x48>)
 8013a2c:	f010 fa46 	bl	8023ebc <memset>

	s_log.enable = TRUE;
 8013a30:	4b0d      	ldr	r3, [pc, #52]	; (8013a68 <pifLog_Init+0x48>)
 8013a32:	2201      	movs	r2, #1
 8013a34:	701a      	strb	r2, [r3, #0]
#ifdef __PIF_LOG_COMMAND__
	s_log.p_task = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, _doTask, &s_log, FALSE);
 8013a36:	2300      	movs	r3, #0
 8013a38:	9300      	str	r3, [sp, #0]
 8013a3a:	4b0b      	ldr	r3, [pc, #44]	; (8013a68 <pifLog_Init+0x48>)
 8013a3c:	4a0b      	ldr	r2, [pc, #44]	; (8013a6c <pifLog_Init+0x4c>)
 8013a3e:	2100      	movs	r1, #0
 8013a40:	2007      	movs	r0, #7
 8013a42:	f001 f9fb 	bl	8014e3c <pifTaskManager_Add>
 8013a46:	4603      	mov	r3, r0
 8013a48:	4a07      	ldr	r2, [pc, #28]	; (8013a68 <pifLog_Init+0x48>)
 8013a4a:	6293      	str	r3, [r2, #40]	; 0x28
	if (!s_log.p_task) return FALSE;
 8013a4c:	4b06      	ldr	r3, [pc, #24]	; (8013a68 <pifLog_Init+0x48>)
 8013a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d101      	bne.n	8013a58 <pifLog_Init+0x38>
 8013a54:	2300      	movs	r3, #0
 8013a56:	e004      	b.n	8013a62 <pifLog_Init+0x42>
	s_log.p_task->name = "Log";
 8013a58:	4b03      	ldr	r3, [pc, #12]	; (8013a68 <pifLog_Init+0x48>)
 8013a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a5c:	4a04      	ldr	r2, [pc, #16]	; (8013a70 <pifLog_Init+0x50>)
 8013a5e:	601a      	str	r2, [r3, #0]
#endif
   	return TRUE;
 8013a60:	2301      	movs	r3, #1
}
 8013a62:	4618      	mov	r0, r3
 8013a64:	46bd      	mov	sp, r7
 8013a66:	bd80      	pop	{r7, pc}
 8013a68:	20001e10 	.word	0x20001e10
 8013a6c:	080136f5 	.word	0x080136f5
 8013a70:	0802891c 	.word	0x0802891c

08013a74 <pifLog_UseCommand>:
}

#ifdef __PIF_LOG_COMMAND__

BOOL pifLog_UseCommand(const PifLogCmdEntry* p_cmd_table, const char* p_prompt)
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b082      	sub	sp, #8
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
 8013a7c:	6039      	str	r1, [r7, #0]
    if (!p_cmd_table || !p_prompt) {
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d002      	beq.n	8013a8a <pifLog_UseCommand+0x16>
 8013a84:	683b      	ldr	r3, [r7, #0]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d104      	bne.n	8013a94 <pifLog_UseCommand+0x20>
    	pif_error = E_INVALID_PARAM;
 8013a8a:	4b12      	ldr	r3, [pc, #72]	; (8013ad4 <pifLog_UseCommand+0x60>)
 8013a8c:	2201      	movs	r2, #1
 8013a8e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013a90:	2300      	movs	r3, #0
 8013a92:	e01b      	b.n	8013acc <pifLog_UseCommand+0x58>
    }

    s_log.p_rx_buffer = calloc(sizeof(char), PIF_LOG_RX_BUFFER_SIZE);
 8013a94:	2120      	movs	r1, #32
 8013a96:	2001      	movs	r0, #1
 8013a98:	f010 f9c0 	bl	8023e1c <calloc>
 8013a9c:	4603      	mov	r3, r0
 8013a9e:	461a      	mov	r2, r3
 8013aa0:	4b0d      	ldr	r3, [pc, #52]	; (8013ad8 <pifLog_UseCommand+0x64>)
 8013aa2:	631a      	str	r2, [r3, #48]	; 0x30
    if (!s_log.p_rx_buffer) {
 8013aa4:	4b0c      	ldr	r3, [pc, #48]	; (8013ad8 <pifLog_UseCommand+0x64>)
 8013aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d104      	bne.n	8013ab6 <pifLog_UseCommand+0x42>
        pif_error = E_OUT_OF_HEAP;
 8013aac:	4b09      	ldr	r3, [pc, #36]	; (8013ad4 <pifLog_UseCommand+0x60>)
 8013aae:	2203      	movs	r2, #3
 8013ab0:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	e00a      	b.n	8013acc <pifLog_UseCommand+0x58>
    }
    s_log.rx_buffer_size = PIF_LOG_RX_BUFFER_SIZE;
 8013ab6:	4b08      	ldr	r3, [pc, #32]	; (8013ad8 <pifLog_UseCommand+0x64>)
 8013ab8:	2220      	movs	r2, #32
 8013aba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    s_log.p_cmd_table = p_cmd_table;
 8013abe:	4a06      	ldr	r2, [pc, #24]	; (8013ad8 <pifLog_UseCommand+0x64>)
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	6593      	str	r3, [r2, #88]	; 0x58
    s_log.p_prompt = p_prompt;
 8013ac4:	4a04      	ldr	r2, [pc, #16]	; (8013ad8 <pifLog_UseCommand+0x64>)
 8013ac6:	683b      	ldr	r3, [r7, #0]
 8013ac8:	65d3      	str	r3, [r2, #92]	; 0x5c
    return TRUE;
 8013aca:	2301      	movs	r3, #1
}
 8013acc:	4618      	mov	r0, r3
 8013ace:	3708      	adds	r7, #8
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd80      	pop	{r7, pc}
 8013ad4:	20001de0 	.word	0x20001de0
 8013ad8:	20001e10 	.word	0x20001e10

08013adc <pifLog_Print>:
{
	return pifRingBuffer_IsEmpty(&s_log.buffer);
}

void pifLog_Print(PifLogType type, const char* p_string)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b098      	sub	sp, #96	; 0x60
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	6039      	str	r1, [r7, #0]
 8013ae6:	71fb      	strb	r3, [r7, #7]
	int offset = 0;
 8013ae8:	2300      	movs	r3, #0
 8013aea:	65fb      	str	r3, [r7, #92]	; 0x5c
    char tmp_buf[PIF_LOG_LINE_SIZE];

    if (type >= LT_INFO) {
 8013aec:	79fb      	ldrb	r3, [r7, #7]
 8013aee:	2b01      	cmp	r3, #1
 8013af0:	d96b      	bls.n	8013bca <pifLog_Print+0xee>
        if (s_minute != pif_datetime.minute) {
 8013af2:	4b3d      	ldr	r3, [pc, #244]	; (8013be8 <pifLog_Print+0x10c>)
 8013af4:	791b      	ldrb	r3, [r3, #4]
 8013af6:	b2da      	uxtb	r2, r3
 8013af8:	4b3c      	ldr	r3, [pc, #240]	; (8013bec <pifLog_Print+0x110>)
 8013afa:	781b      	ldrb	r3, [r3, #0]
 8013afc:	429a      	cmp	r2, r3
 8013afe:	d006      	beq.n	8013b0e <pifLog_Print+0x32>
        	_printTime();
 8013b00:	f7ff ff14 	bl	801392c <_printTime>
        	s_minute = pif_datetime.minute;
 8013b04:	4b38      	ldr	r3, [pc, #224]	; (8013be8 <pifLog_Print+0x10c>)
 8013b06:	791b      	ldrb	r3, [r3, #4]
 8013b08:	b2da      	uxtb	r2, r3
 8013b0a:	4b38      	ldr	r3, [pc, #224]	; (8013bec <pifLog_Print+0x110>)
 8013b0c:	701a      	strb	r2, [r3, #0]
    	}

        tmp_buf[offset++] = '\n';
 8013b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013b10:	1c5a      	adds	r2, r3, #1
 8013b12:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013b14:	3360      	adds	r3, #96	; 0x60
 8013b16:	443b      	add	r3, r7
 8013b18:	220a      	movs	r2, #10
 8013b1a:	f803 2c54 	strb.w	r2, [r3, #-84]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 8013b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013b20:	f107 020c 	add.w	r2, r7, #12
 8013b24:	4413      	add	r3, r2
 8013b26:	4a30      	ldr	r2, [pc, #192]	; (8013be8 <pifLog_Print+0x10c>)
 8013b28:	7952      	ldrb	r2, [r2, #5]
 8013b2a:	b2d2      	uxtb	r2, r2
 8013b2c:	4611      	mov	r1, r2
 8013b2e:	2202      	movs	r2, #2
 8013b30:	4618      	mov	r0, r3
 8013b32:	f7fd ff51 	bl	80119d8 <pif_DecToString>
 8013b36:	4602      	mov	r2, r0
 8013b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013b3a:	4413      	add	r3, r2
 8013b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
    	tmp_buf[offset++] = '.';
 8013b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013b40:	1c5a      	adds	r2, r3, #1
 8013b42:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013b44:	3360      	adds	r3, #96	; 0x60
 8013b46:	443b      	add	r3, r7
 8013b48:	222e      	movs	r2, #46	; 0x2e
 8013b4a:	f803 2c54 	strb.w	r2, [r3, #-84]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 8013b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013b50:	f107 020c 	add.w	r2, r7, #12
 8013b54:	4413      	add	r3, r2
 8013b56:	4a26      	ldr	r2, [pc, #152]	; (8013bf0 <pifLog_Print+0x114>)
 8013b58:	8812      	ldrh	r2, [r2, #0]
 8013b5a:	b292      	uxth	r2, r2
 8013b5c:	4611      	mov	r1, r2
 8013b5e:	2203      	movs	r2, #3
 8013b60:	4618      	mov	r0, r3
 8013b62:	f7fd ff39 	bl	80119d8 <pif_DecToString>
 8013b66:	4602      	mov	r2, r0
 8013b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013b6a:	4413      	add	r3, r2
 8013b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
    	tmp_buf[offset++] = ' ';
 8013b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013b70:	1c5a      	adds	r2, r3, #1
 8013b72:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013b74:	3360      	adds	r3, #96	; 0x60
 8013b76:	443b      	add	r3, r7
 8013b78:	2220      	movs	r2, #32
 8013b7a:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset++] = type_ch[type - LT_INFO];
 8013b7e:	79fb      	ldrb	r3, [r7, #7]
 8013b80:	1e9a      	subs	r2, r3, #2
 8013b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013b84:	1c59      	adds	r1, r3, #1
 8013b86:	65f9      	str	r1, [r7, #92]	; 0x5c
 8013b88:	491a      	ldr	r1, [pc, #104]	; (8013bf4 <pifLog_Print+0x118>)
 8013b8a:	5c8a      	ldrb	r2, [r1, r2]
 8013b8c:	3360      	adds	r3, #96	; 0x60
 8013b8e:	443b      	add	r3, r7
 8013b90:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset++] = ' ';
 8013b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013b96:	1c5a      	adds	r2, r3, #1
 8013b98:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013b9a:	3360      	adds	r3, #96	; 0x60
 8013b9c:	443b      	add	r3, r7
 8013b9e:	2220      	movs	r2, #32
 8013ba0:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset] = 0;
 8013ba4:	f107 020c 	add.w	r2, r7, #12
 8013ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013baa:	4413      	add	r3, r2
 8013bac:	2200      	movs	r2, #0
 8013bae:	701a      	strb	r2, [r3, #0]
    	_printLog(tmp_buf, type == LT_VCD);
 8013bb0:	79fb      	ldrb	r3, [r7, #7]
 8013bb2:	2b01      	cmp	r3, #1
 8013bb4:	bf0c      	ite	eq
 8013bb6:	2301      	moveq	r3, #1
 8013bb8:	2300      	movne	r3, #0
 8013bba:	b2db      	uxtb	r3, r3
 8013bbc:	461a      	mov	r2, r3
 8013bbe:	f107 030c 	add.w	r3, r7, #12
 8013bc2:	4611      	mov	r1, r2
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f7ff fe7d 	bl	80138c4 <_printLog>
    }

	_printLog((char*)p_string, type == LT_VCD);
 8013bca:	79fb      	ldrb	r3, [r7, #7]
 8013bcc:	2b01      	cmp	r3, #1
 8013bce:	bf0c      	ite	eq
 8013bd0:	2301      	moveq	r3, #1
 8013bd2:	2300      	movne	r3, #0
 8013bd4:	b2db      	uxtb	r3, r3
 8013bd6:	4619      	mov	r1, r3
 8013bd8:	6838      	ldr	r0, [r7, #0]
 8013bda:	f7ff fe73 	bl	80138c4 <_printLog>
}
 8013bde:	bf00      	nop
 8013be0:	3760      	adds	r7, #96	; 0x60
 8013be2:	46bd      	mov	sp, r7
 8013be4:	bd80      	pop	{r7, pc}
 8013be6:	bf00      	nop
 8013be8:	20001df0 	.word	0x20001df0
 8013bec:	20000134 	.word	0x20000134
 8013bf0:	20001de8 	.word	0x20001de8
 8013bf4:	0802a4cc 	.word	0x0802a4cc

08013bf8 <pifLog_Printf>:

void pifLog_Printf(PifLogType type, const char* p_format, ...)
{
 8013bf8:	b40e      	push	{r1, r2, r3}
 8013bfa:	b580      	push	{r7, lr}
 8013bfc:	b09b      	sub	sp, #108	; 0x6c
 8013bfe:	af00      	add	r7, sp, #0
 8013c00:	4603      	mov	r3, r0
 8013c02:	71fb      	strb	r3, [r7, #7]
	va_list data;
	int offset = 0;
 8013c04:	2300      	movs	r3, #0
 8013c06:	667b      	str	r3, [r7, #100]	; 0x64
    char tmp_buf[PIF_LOG_LINE_SIZE + 1];

    if (type >= LT_INFO) {
 8013c08:	79fb      	ldrb	r3, [r7, #7]
 8013c0a:	2b01      	cmp	r3, #1
 8013c0c:	d958      	bls.n	8013cc0 <pifLog_Printf+0xc8>
        if (s_minute != pif_datetime.minute) {
 8013c0e:	4b3d      	ldr	r3, [pc, #244]	; (8013d04 <pifLog_Printf+0x10c>)
 8013c10:	791b      	ldrb	r3, [r3, #4]
 8013c12:	b2da      	uxtb	r2, r3
 8013c14:	4b3c      	ldr	r3, [pc, #240]	; (8013d08 <pifLog_Printf+0x110>)
 8013c16:	781b      	ldrb	r3, [r3, #0]
 8013c18:	429a      	cmp	r2, r3
 8013c1a:	d006      	beq.n	8013c2a <pifLog_Printf+0x32>
        	_printTime();
 8013c1c:	f7ff fe86 	bl	801392c <_printTime>
        	s_minute = pif_datetime.minute;
 8013c20:	4b38      	ldr	r3, [pc, #224]	; (8013d04 <pifLog_Printf+0x10c>)
 8013c22:	791b      	ldrb	r3, [r3, #4]
 8013c24:	b2da      	uxtb	r2, r3
 8013c26:	4b38      	ldr	r3, [pc, #224]	; (8013d08 <pifLog_Printf+0x110>)
 8013c28:	701a      	strb	r2, [r3, #0]
    	}

        tmp_buf[offset++] = '\n';
 8013c2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c2c:	1c5a      	adds	r2, r3, #1
 8013c2e:	667a      	str	r2, [r7, #100]	; 0x64
 8013c30:	3368      	adds	r3, #104	; 0x68
 8013c32:	443b      	add	r3, r7
 8013c34:	220a      	movs	r2, #10
 8013c36:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 8013c3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c3c:	f107 020c 	add.w	r2, r7, #12
 8013c40:	4413      	add	r3, r2
 8013c42:	4a30      	ldr	r2, [pc, #192]	; (8013d04 <pifLog_Printf+0x10c>)
 8013c44:	7952      	ldrb	r2, [r2, #5]
 8013c46:	b2d2      	uxtb	r2, r2
 8013c48:	4611      	mov	r1, r2
 8013c4a:	2202      	movs	r2, #2
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	f7fd fec3 	bl	80119d8 <pif_DecToString>
 8013c52:	4602      	mov	r2, r0
 8013c54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c56:	4413      	add	r3, r2
 8013c58:	667b      	str	r3, [r7, #100]	; 0x64
    	tmp_buf[offset++] = '.';
 8013c5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c5c:	1c5a      	adds	r2, r3, #1
 8013c5e:	667a      	str	r2, [r7, #100]	; 0x64
 8013c60:	3368      	adds	r3, #104	; 0x68
 8013c62:	443b      	add	r3, r7
 8013c64:	222e      	movs	r2, #46	; 0x2e
 8013c66:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 8013c6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c6c:	f107 020c 	add.w	r2, r7, #12
 8013c70:	4413      	add	r3, r2
 8013c72:	4a26      	ldr	r2, [pc, #152]	; (8013d0c <pifLog_Printf+0x114>)
 8013c74:	8812      	ldrh	r2, [r2, #0]
 8013c76:	b292      	uxth	r2, r2
 8013c78:	4611      	mov	r1, r2
 8013c7a:	2203      	movs	r2, #3
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	f7fd feab 	bl	80119d8 <pif_DecToString>
 8013c82:	4602      	mov	r2, r0
 8013c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c86:	4413      	add	r3, r2
 8013c88:	667b      	str	r3, [r7, #100]	; 0x64
    	tmp_buf[offset++] = ' ';
 8013c8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c8c:	1c5a      	adds	r2, r3, #1
 8013c8e:	667a      	str	r2, [r7, #100]	; 0x64
 8013c90:	3368      	adds	r3, #104	; 0x68
 8013c92:	443b      	add	r3, r7
 8013c94:	2220      	movs	r2, #32
 8013c96:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	tmp_buf[offset++] = type_ch[type - LT_INFO];
 8013c9a:	79fb      	ldrb	r3, [r7, #7]
 8013c9c:	1e9a      	subs	r2, r3, #2
 8013c9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013ca0:	1c59      	adds	r1, r3, #1
 8013ca2:	6679      	str	r1, [r7, #100]	; 0x64
 8013ca4:	491a      	ldr	r1, [pc, #104]	; (8013d10 <pifLog_Printf+0x118>)
 8013ca6:	5c8a      	ldrb	r2, [r1, r2]
 8013ca8:	3368      	adds	r3, #104	; 0x68
 8013caa:	443b      	add	r3, r7
 8013cac:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	tmp_buf[offset++] = ' ';
 8013cb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013cb2:	1c5a      	adds	r2, r3, #1
 8013cb4:	667a      	str	r2, [r7, #100]	; 0x64
 8013cb6:	3368      	adds	r3, #104	; 0x68
 8013cb8:	443b      	add	r3, r7
 8013cba:	2220      	movs	r2, #32
 8013cbc:	f803 2c5c 	strb.w	r2, [r3, #-92]
    }

	va_start(data, p_format);
 8013cc0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013cc4:	663b      	str	r3, [r7, #96]	; 0x60
	pif_PrintFormat(tmp_buf + offset, &data, p_format);
 8013cc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013cc8:	f107 020c 	add.w	r2, r7, #12
 8013ccc:	4413      	add	r3, r2
 8013cce:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8013cd2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f7fe f80b 	bl	8011cf0 <pif_PrintFormat>
	va_end(data);

	_printLog(tmp_buf, type == LT_VCD);
 8013cda:	79fb      	ldrb	r3, [r7, #7]
 8013cdc:	2b01      	cmp	r3, #1
 8013cde:	bf0c      	ite	eq
 8013ce0:	2301      	moveq	r3, #1
 8013ce2:	2300      	movne	r3, #0
 8013ce4:	b2db      	uxtb	r3, r3
 8013ce6:	461a      	mov	r2, r3
 8013ce8:	f107 030c 	add.w	r3, r7, #12
 8013cec:	4611      	mov	r1, r2
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f7ff fde8 	bl	80138c4 <_printLog>
}
 8013cf4:	bf00      	nop
 8013cf6:	376c      	adds	r7, #108	; 0x6c
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013cfe:	b003      	add	sp, #12
 8013d00:	4770      	bx	lr
 8013d02:	bf00      	nop
 8013d04:	20001df0 	.word	0x20001df0
 8013d08:	20000134 	.word	0x20000134
 8013d0c:	20001de8 	.word	0x20001de8
 8013d10:	0802a4cc 	.word	0x0802a4cc

08013d14 <pifLog_AttachComm>:
{
	return s_log.p_comm->_p_task;
}

BOOL pifLog_AttachComm(PifComm* p_comm)
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b082      	sub	sp, #8
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
    s_log.p_tx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, PIF_LOG_TX_BUFFER_SIZE);
 8013d1c:	2150      	movs	r1, #80	; 0x50
 8013d1e:	2000      	movs	r0, #0
 8013d20:	f000 f8c8 	bl	8013eb4 <pifRingBuffer_CreateHeap>
 8013d24:	4603      	mov	r3, r0
 8013d26:	4a0b      	ldr	r2, [pc, #44]	; (8013d54 <pifLog_AttachComm+0x40>)
 8013d28:	6253      	str	r3, [r2, #36]	; 0x24
    if (!s_log.p_tx_buffer) return FALSE;
 8013d2a:	4b0a      	ldr	r3, [pc, #40]	; (8013d54 <pifLog_AttachComm+0x40>)
 8013d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d101      	bne.n	8013d36 <pifLog_AttachComm+0x22>
 8013d32:	2300      	movs	r3, #0
 8013d34:	e009      	b.n	8013d4a <pifLog_AttachComm+0x36>

	s_log.p_comm = p_comm;
 8013d36:	4a07      	ldr	r2, [pc, #28]	; (8013d54 <pifLog_AttachComm+0x40>)
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	6213      	str	r3, [r2, #32]
	pifComm_AttachClient(p_comm, &s_log, _evtParsing, _evtSending);
 8013d3c:	4b06      	ldr	r3, [pc, #24]	; (8013d58 <pifLog_AttachComm+0x44>)
 8013d3e:	4a07      	ldr	r2, [pc, #28]	; (8013d5c <pifLog_AttachComm+0x48>)
 8013d40:	4904      	ldr	r1, [pc, #16]	; (8013d54 <pifLog_AttachComm+0x40>)
 8013d42:	6878      	ldr	r0, [r7, #4]
 8013d44:	f7fe fc10 	bl	8012568 <pifComm_AttachClient>
    return TRUE;
 8013d48:	2301      	movs	r3, #1
}
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	3708      	adds	r7, #8
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	bd80      	pop	{r7, pc}
 8013d52:	bf00      	nop
 8013d54:	20001e10 	.word	0x20001e10
 8013d58:	0801385d 	.word	0x0801385d
 8013d5c:	080136b3 	.word	0x080136b3

08013d60 <pifLog_DetachComm>:

void pifLog_DetachComm()
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	af00      	add	r7, sp, #0
	pifComm_DetachClient(s_log.p_comm);
 8013d64:	4b06      	ldr	r3, [pc, #24]	; (8013d80 <pifLog_DetachComm+0x20>)
 8013d66:	6a1b      	ldr	r3, [r3, #32]
 8013d68:	4618      	mov	r0, r3
 8013d6a:	f7fe fc13 	bl	8012594 <pifComm_DetachClient>
	s_log.p_comm = NULL;
 8013d6e:	4b04      	ldr	r3, [pc, #16]	; (8013d80 <pifLog_DetachComm+0x20>)
 8013d70:	2200      	movs	r2, #0
 8013d72:	621a      	str	r2, [r3, #32]

	pifRingBuffer_Destroy(&s_log.p_tx_buffer);
 8013d74:	4803      	ldr	r0, [pc, #12]	; (8013d84 <pifLog_DetachComm+0x24>)
 8013d76:	f000 f8c9 	bl	8013f0c <pifRingBuffer_Destroy>
}
 8013d7a:	bf00      	nop
 8013d7c:	bd80      	pop	{r7, pc}
 8013d7e:	bf00      	nop
 8013d80:	20001e10 	.word	0x20001e10
 8013d84:	20001e34 	.word	0x20001e34

08013d88 <pifLog_SendAndExit>:

void pifLog_SendAndExit()
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	af00      	add	r7, sp, #0
	while (pifRingBuffer_GetFillSize(s_log.p_tx_buffer)) {
 8013d8c:	e008      	b.n	8013da0 <pifLog_SendAndExit+0x18>
		s_log.p_comm->_p_task->__evt_loop(s_log.p_comm->_p_task);
 8013d8e:	4b0a      	ldr	r3, [pc, #40]	; (8013db8 <pifLog_SendAndExit+0x30>)
 8013d90:	6a1b      	ldr	r3, [r3, #32]
 8013d92:	69db      	ldr	r3, [r3, #28]
 8013d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d96:	4a08      	ldr	r2, [pc, #32]	; (8013db8 <pifLog_SendAndExit+0x30>)
 8013d98:	6a12      	ldr	r2, [r2, #32]
 8013d9a:	69d2      	ldr	r2, [r2, #28]
 8013d9c:	4610      	mov	r0, r2
 8013d9e:	4798      	blx	r3
	while (pifRingBuffer_GetFillSize(s_log.p_tx_buffer)) {
 8013da0:	4b05      	ldr	r3, [pc, #20]	; (8013db8 <pifLog_SendAndExit+0x30>)
 8013da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013da4:	4618      	mov	r0, r3
 8013da6:	f000 f97b 	bl	80140a0 <pifRingBuffer_GetFillSize>
 8013daa:	4603      	mov	r3, r0
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d1ee      	bne.n	8013d8e <pifLog_SendAndExit+0x6>
	}
}
 8013db0:	bf00      	nop
 8013db2:	bf00      	nop
 8013db4:	bd80      	pop	{r7, pc}
 8013db6:	bf00      	nop
 8013db8:	20001e10 	.word	0x20001e10

08013dbc <_chopOff>:

#include <string.h>


static BOOL _chopOff(PifRingBuffer* p_owner, uint16_t count)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b084      	sub	sp, #16
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
 8013dc4:	460b      	mov	r3, r1
 8013dc6:	807b      	strh	r3, [r7, #2]
	uint16_t length;
	uint16_t size, tail;

	switch (p_owner->_bt.chop_off) {
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	791b      	ldrb	r3, [r3, #4]
 8013dcc:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8013dd0:	b2db      	uxtb	r3, r3
 8013dd2:	2b01      	cmp	r3, #1
 8013dd4:	d002      	beq.n	8013ddc <_chopOff+0x20>
 8013dd6:	2b02      	cmp	r3, #2
 8013dd8:	d02e      	beq.n	8013e38 <_chopOff+0x7c>
 8013dda:	e065      	b.n	8013ea8 <_chopOff+0xec>
	case RB_CHOP_OFF_CHAR:
		size = 0;
 8013ddc:	2300      	movs	r3, #0
 8013dde:	81fb      	strh	r3, [r7, #14]
		tail = p_owner->__tail;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	8adb      	ldrh	r3, [r3, #22]
 8013de4:	81bb      	strh	r3, [r7, #12]
		while (tail != p_owner->__head) {
 8013de6:	e021      	b.n	8013e2c <_chopOff+0x70>
			if (p_owner->__p_buffer[tail] == p_owner->__ui.chop_off_char) {
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	691a      	ldr	r2, [r3, #16]
 8013dec:	89bb      	ldrh	r3, [r7, #12]
 8013dee:	4413      	add	r3, r2
 8013df0:	781a      	ldrb	r2, [r3, #0]
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	7e9b      	ldrb	r3, [r3, #26]
 8013df6:	429a      	cmp	r2, r3
 8013df8:	d108      	bne.n	8013e0c <_chopOff+0x50>
				if (size > count) {
 8013dfa:	89fa      	ldrh	r2, [r7, #14]
 8013dfc:	887b      	ldrh	r3, [r7, #2]
 8013dfe:	429a      	cmp	r2, r3
 8013e00:	d904      	bls.n	8013e0c <_chopOff+0x50>
					p_owner->__tail = tail;
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	89ba      	ldrh	r2, [r7, #12]
 8013e06:	82da      	strh	r2, [r3, #22]
					return TRUE;
 8013e08:	2301      	movs	r3, #1
 8013e0a:	e04e      	b.n	8013eaa <_chopOff+0xee>
				}
			}
			tail++;
 8013e0c:	89bb      	ldrh	r3, [r7, #12]
 8013e0e:	3301      	adds	r3, #1
 8013e10:	81bb      	strh	r3, [r7, #12]
			if (tail >= p_owner->_size) tail -= p_owner->_size;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	891b      	ldrh	r3, [r3, #8]
 8013e16:	89ba      	ldrh	r2, [r7, #12]
 8013e18:	429a      	cmp	r2, r3
 8013e1a:	d304      	bcc.n	8013e26 <_chopOff+0x6a>
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	891b      	ldrh	r3, [r3, #8]
 8013e20:	89ba      	ldrh	r2, [r7, #12]
 8013e22:	1ad3      	subs	r3, r2, r3
 8013e24:	81bb      	strh	r3, [r7, #12]
			size++;
 8013e26:	89fb      	ldrh	r3, [r7, #14]
 8013e28:	3301      	adds	r3, #1
 8013e2a:	81fb      	strh	r3, [r7, #14]
		while (tail != p_owner->__head) {
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	8a9b      	ldrh	r3, [r3, #20]
 8013e30:	89ba      	ldrh	r2, [r7, #12]
 8013e32:	429a      	cmp	r2, r3
 8013e34:	d1d8      	bne.n	8013de8 <_chopOff+0x2c>
		}
		break;
 8013e36:	e037      	b.n	8013ea8 <_chopOff+0xec>

	case RB_CHOP_OFF_LENGTH:
		length = pifRingBuffer_GetFillSize(p_owner);
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f000 f931 	bl	80140a0 <pifRingBuffer_GetFillSize>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	817b      	strh	r3, [r7, #10]
		size = p_owner->__ui.chop_off_length;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	8b5b      	ldrh	r3, [r3, #26]
 8013e46:	81fb      	strh	r3, [r7, #14]
		while (count > size) {
 8013e48:	e004      	b.n	8013e54 <_chopOff+0x98>
			size += p_owner->__ui.chop_off_length;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	8b5a      	ldrh	r2, [r3, #26]
 8013e4e:	89fb      	ldrh	r3, [r7, #14]
 8013e50:	4413      	add	r3, r2
 8013e52:	81fb      	strh	r3, [r7, #14]
		while (count > size) {
 8013e54:	887a      	ldrh	r2, [r7, #2]
 8013e56:	89fb      	ldrh	r3, [r7, #14]
 8013e58:	429a      	cmp	r2, r3
 8013e5a:	d8f6      	bhi.n	8013e4a <_chopOff+0x8e>
		}
		if (size < length) {
 8013e5c:	89fa      	ldrh	r2, [r7, #14]
 8013e5e:	897b      	ldrh	r3, [r7, #10]
 8013e60:	429a      	cmp	r2, r3
 8013e62:	d216      	bcs.n	8013e92 <_chopOff+0xd6>
			p_owner->__tail += size;
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	8ada      	ldrh	r2, [r3, #22]
 8013e68:	89fb      	ldrh	r3, [r7, #14]
 8013e6a:	4413      	add	r3, r2
 8013e6c:	b29a      	uxth	r2, r3
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	82da      	strh	r2, [r3, #22]
			if (p_owner->__tail >= p_owner->_size) p_owner->__tail -= p_owner->_size;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	8ada      	ldrh	r2, [r3, #22]
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	891b      	ldrh	r3, [r3, #8]
 8013e7a:	429a      	cmp	r2, r3
 8013e7c:	d307      	bcc.n	8013e8e <_chopOff+0xd2>
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	8ada      	ldrh	r2, [r3, #22]
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	891b      	ldrh	r3, [r3, #8]
 8013e86:	1ad3      	subs	r3, r2, r3
 8013e88:	b29a      	uxth	r2, r3
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	82da      	strh	r2, [r3, #22]
			return TRUE;
 8013e8e:	2301      	movs	r3, #1
 8013e90:	e00b      	b.n	8013eaa <_chopOff+0xee>
		}
		else if (count <= length) {
 8013e92:	887a      	ldrh	r2, [r7, #2]
 8013e94:	897b      	ldrh	r3, [r7, #10]
 8013e96:	429a      	cmp	r2, r3
 8013e98:	d805      	bhi.n	8013ea6 <_chopOff+0xea>
			p_owner->__tail = p_owner->__head;
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	8a9a      	ldrh	r2, [r3, #20]
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	82da      	strh	r2, [r3, #22]
			return TRUE;
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	e001      	b.n	8013eaa <_chopOff+0xee>
		}
		break;
 8013ea6:	bf00      	nop
	}
	return FALSE;
 8013ea8:	2300      	movs	r3, #0
}
 8013eaa:	4618      	mov	r0, r3
 8013eac:	3710      	adds	r7, #16
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	bd80      	pop	{r7, pc}
	...

08013eb4 <pifRingBuffer_CreateHeap>:

PifRingBuffer* pifRingBuffer_CreateHeap(PifId id, uint16_t size)
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b084      	sub	sp, #16
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	4603      	mov	r3, r0
 8013ebc:	460a      	mov	r2, r1
 8013ebe:	80fb      	strh	r3, [r7, #6]
 8013ec0:	4613      	mov	r3, r2
 8013ec2:	80bb      	strh	r3, [r7, #4]
	PifRingBuffer* p_owner = malloc(sizeof(PifRingBuffer));
 8013ec4:	201c      	movs	r0, #28
 8013ec6:	f00f ffdb 	bl	8023e80 <malloc>
 8013eca:	4603      	mov	r3, r0
 8013ecc:	60fb      	str	r3, [r7, #12]
	if (!p_owner) {
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d104      	bne.n	8013ede <pifRingBuffer_CreateHeap+0x2a>
		pif_error = E_OUT_OF_HEAP;
 8013ed4:	4b0c      	ldr	r3, [pc, #48]	; (8013f08 <pifRingBuffer_CreateHeap+0x54>)
 8013ed6:	2203      	movs	r2, #3
 8013ed8:	701a      	strb	r2, [r3, #0]
		return NULL;
 8013eda:	2300      	movs	r3, #0
 8013edc:	e010      	b.n	8013f00 <pifRingBuffer_CreateHeap+0x4c>
	}

	if (!pifRingBuffer_InitHeap(p_owner, id, size)) {
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	88ba      	ldrh	r2, [r7, #4]
 8013ee2:	88f9      	ldrh	r1, [r7, #6]
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f000 f829 	bl	8013f3c <pifRingBuffer_InitHeap>
 8013eea:	4603      	mov	r3, r0
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d106      	bne.n	8013efe <pifRingBuffer_CreateHeap+0x4a>
		pifRingBuffer_Destroy(&p_owner);
 8013ef0:	f107 030c 	add.w	r3, r7, #12
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f000 f809 	bl	8013f0c <pifRingBuffer_Destroy>
		return NULL;
 8013efa:	2300      	movs	r3, #0
 8013efc:	e000      	b.n	8013f00 <pifRingBuffer_CreateHeap+0x4c>
	}
    return p_owner;
 8013efe:	68fb      	ldr	r3, [r7, #12]
}
 8013f00:	4618      	mov	r0, r3
 8013f02:	3710      	adds	r7, #16
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}
 8013f08:	20001de0 	.word	0x20001de0

08013f0c <pifRingBuffer_Destroy>:
	}
    return p_owner;
}

void pifRingBuffer_Destroy(PifRingBuffer** pp_owner)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b082      	sub	sp, #8
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
	if (pp_owner) {
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d00c      	beq.n	8013f34 <pifRingBuffer_Destroy+0x28>
		pifRingBuffer_Clear(*pp_owner);
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f000 f856 	bl	8013fd0 <pifRingBuffer_Clear>
		free(*pp_owner);
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f00f ffb1 	bl	8023e90 <free>
		*pp_owner = NULL;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	2200      	movs	r2, #0
 8013f32:	601a      	str	r2, [r3, #0]
	}
}
 8013f34:	bf00      	nop
 8013f36:	3708      	adds	r7, #8
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}

08013f3c <pifRingBuffer_InitHeap>:

BOOL pifRingBuffer_InitHeap(PifRingBuffer* p_owner, PifId id, uint16_t size)
{
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b082      	sub	sp, #8
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
 8013f44:	460b      	mov	r3, r1
 8013f46:	807b      	strh	r3, [r7, #2]
 8013f48:	4613      	mov	r3, r2
 8013f4a:	803b      	strh	r3, [r7, #0]
    if (!p_owner || !size) {
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d002      	beq.n	8013f58 <pifRingBuffer_InitHeap+0x1c>
 8013f52:	883b      	ldrh	r3, [r7, #0]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d104      	bne.n	8013f62 <pifRingBuffer_InitHeap+0x26>
		pif_error = E_INVALID_PARAM;
 8013f58:	4b1b      	ldr	r3, [pc, #108]	; (8013fc8 <pifRingBuffer_InitHeap+0x8c>)
 8013f5a:	2201      	movs	r2, #1
 8013f5c:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013f5e:	2300      	movs	r3, #0
 8013f60:	e02e      	b.n	8013fc0 <pifRingBuffer_InitHeap+0x84>
	}

	memset(p_owner, 0, sizeof(PifRingBuffer));
 8013f62:	221c      	movs	r2, #28
 8013f64:	2100      	movs	r1, #0
 8013f66:	6878      	ldr	r0, [r7, #4]
 8013f68:	f00f ffa8 	bl	8023ebc <memset>

	p_owner->__p_buffer = calloc(sizeof(uint8_t), size);
 8013f6c:	883b      	ldrh	r3, [r7, #0]
 8013f6e:	4619      	mov	r1, r3
 8013f70:	2001      	movs	r0, #1
 8013f72:	f00f ff53 	bl	8023e1c <calloc>
 8013f76:	4603      	mov	r3, r0
 8013f78:	461a      	mov	r2, r3
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	611a      	str	r2, [r3, #16]
	if (!p_owner->__p_buffer) {
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	691b      	ldr	r3, [r3, #16]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d108      	bne.n	8013f98 <pifRingBuffer_InitHeap+0x5c>
		pif_error = E_OUT_OF_HEAP;
 8013f86:	4b10      	ldr	r3, [pc, #64]	; (8013fc8 <pifRingBuffer_InitHeap+0x8c>)
 8013f88:	2203      	movs	r2, #3
 8013f8a:	701a      	strb	r2, [r3, #0]
		goto fail;
 8013f8c:	bf00      	nop
    p_owner->_size = size;
	p_owner->__backup_head = size;
    return TRUE;

fail:
	pifRingBuffer_Clear(p_owner);
 8013f8e:	6878      	ldr	r0, [r7, #4]
 8013f90:	f000 f81e 	bl	8013fd0 <pifRingBuffer_Clear>
    return FALSE;
 8013f94:	2300      	movs	r3, #0
 8013f96:	e013      	b.n	8013fc0 <pifRingBuffer_InitHeap+0x84>
	if (id == PIF_ID_AUTO) id = pif_id++;
 8013f98:	887b      	ldrh	r3, [r7, #2]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d106      	bne.n	8013fac <pifRingBuffer_InitHeap+0x70>
 8013f9e:	4b0b      	ldr	r3, [pc, #44]	; (8013fcc <pifRingBuffer_InitHeap+0x90>)
 8013fa0:	881b      	ldrh	r3, [r3, #0]
 8013fa2:	1c5a      	adds	r2, r3, #1
 8013fa4:	b291      	uxth	r1, r2
 8013fa6:	4a09      	ldr	r2, [pc, #36]	; (8013fcc <pifRingBuffer_InitHeap+0x90>)
 8013fa8:	8011      	strh	r1, [r2, #0]
 8013faa:	807b      	strh	r3, [r7, #2]
	p_owner->_id = id;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	887a      	ldrh	r2, [r7, #2]
 8013fb0:	801a      	strh	r2, [r3, #0]
    p_owner->_size = size;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	883a      	ldrh	r2, [r7, #0]
 8013fb6:	811a      	strh	r2, [r3, #8]
	p_owner->__backup_head = size;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	883a      	ldrh	r2, [r7, #0]
 8013fbc:	831a      	strh	r2, [r3, #24]
    return TRUE;
 8013fbe:	2301      	movs	r3, #1
}
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	3708      	adds	r7, #8
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bd80      	pop	{r7, pc}
 8013fc8:	20001de0 	.word	0x20001de0
 8013fcc:	20000128 	.word	0x20000128

08013fd0 <pifRingBuffer_Clear>:
	p_owner->__backup_head = size;
    return TRUE;
}

void pifRingBuffer_Clear(PifRingBuffer* p_owner)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b082      	sub	sp, #8
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
	if (p_owner->_bt.is_static == FALSE && p_owner->__p_buffer) {
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	791b      	ldrb	r3, [r3, #4]
 8013fdc:	f003 0301 	and.w	r3, r3, #1
 8013fe0:	b2db      	uxtb	r3, r3
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d108      	bne.n	8013ff8 <pifRingBuffer_Clear+0x28>
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	691b      	ldr	r3, [r3, #16]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d004      	beq.n	8013ff8 <pifRingBuffer_Clear+0x28>
        free(p_owner->__p_buffer);
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	691b      	ldr	r3, [r3, #16]
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f00f ff4c 	bl	8023e90 <free>
    }
    p_owner->__p_buffer = NULL;
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	611a      	str	r2, [r3, #16]
}
 8013ffe:	bf00      	nop
 8014000:	3708      	adds	r7, #8
 8014002:	46bd      	mov	sp, r7
 8014004:	bd80      	pop	{r7, pc}

08014006 <pifRingBuffer_SetName>:
    p_owner->_size = size;
	return TRUE;
}

void pifRingBuffer_SetName(PifRingBuffer* p_owner, const char* p_name)
{
 8014006:	b480      	push	{r7}
 8014008:	b083      	sub	sp, #12
 801400a:	af00      	add	r7, sp, #0
 801400c:	6078      	str	r0, [r7, #4]
 801400e:	6039      	str	r1, [r7, #0]
	p_owner->__p_name = p_name;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	683a      	ldr	r2, [r7, #0]
 8014014:	60da      	str	r2, [r3, #12]
}
 8014016:	bf00      	nop
 8014018:	370c      	adds	r7, #12
 801401a:	46bd      	mov	sp, r7
 801401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014020:	4770      	bx	lr

08014022 <pifRingBuffer_GetTailPointer>:

uint8_t *pifRingBuffer_GetTailPointer(PifRingBuffer* p_owner, uint16_t pos)
{
 8014022:	b480      	push	{r7}
 8014024:	b083      	sub	sp, #12
 8014026:	af00      	add	r7, sp, #0
 8014028:	6078      	str	r0, [r7, #4]
 801402a:	460b      	mov	r3, r1
 801402c:	807b      	strh	r3, [r7, #2]
	return &p_owner->__p_buffer[(p_owner->__tail + pos) % p_owner->_size];
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	6919      	ldr	r1, [r3, #16]
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	8adb      	ldrh	r3, [r3, #22]
 8014036:	461a      	mov	r2, r3
 8014038:	887b      	ldrh	r3, [r7, #2]
 801403a:	4413      	add	r3, r2
 801403c:	687a      	ldr	r2, [r7, #4]
 801403e:	8912      	ldrh	r2, [r2, #8]
 8014040:	fb93 f0f2 	sdiv	r0, r3, r2
 8014044:	fb00 f202 	mul.w	r2, r0, r2
 8014048:	1a9b      	subs	r3, r3, r2
 801404a:	440b      	add	r3, r1
}
 801404c:	4618      	mov	r0, r3
 801404e:	370c      	adds	r7, #12
 8014050:	46bd      	mov	sp, r7
 8014052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014056:	4770      	bx	lr

08014058 <pifRingBuffer_IsBuffer>:
	p_owner->_bt.chop_off = RB_CHOP_OFF_LENGTH;
	p_owner->__ui.chop_off_length = length;
}

BOOL pifRingBuffer_IsBuffer(PifRingBuffer* p_owner)
{
 8014058:	b480      	push	{r7}
 801405a:	b083      	sub	sp, #12
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
	return p_owner->__p_buffer != NULL;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	691b      	ldr	r3, [r3, #16]
 8014064:	2b00      	cmp	r3, #0
 8014066:	bf14      	ite	ne
 8014068:	2301      	movne	r3, #1
 801406a:	2300      	moveq	r3, #0
 801406c:	b2db      	uxtb	r3, r3
}
 801406e:	4618      	mov	r0, r3
 8014070:	370c      	adds	r7, #12
 8014072:	46bd      	mov	sp, r7
 8014074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014078:	4770      	bx	lr

0801407a <pifRingBuffer_IsEmpty>:

BOOL pifRingBuffer_IsEmpty(PifRingBuffer* p_owner)
{
 801407a:	b480      	push	{r7}
 801407c:	b083      	sub	sp, #12
 801407e:	af00      	add	r7, sp, #0
 8014080:	6078      	str	r0, [r7, #4]
	return p_owner->__head == p_owner->__tail;
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	8a9a      	ldrh	r2, [r3, #20]
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	8adb      	ldrh	r3, [r3, #22]
 801408a:	429a      	cmp	r2, r3
 801408c:	bf0c      	ite	eq
 801408e:	2301      	moveq	r3, #1
 8014090:	2300      	movne	r3, #0
 8014092:	b2db      	uxtb	r3, r3
}
 8014094:	4618      	mov	r0, r3
 8014096:	370c      	adds	r7, #12
 8014098:	46bd      	mov	sp, r7
 801409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409e:	4770      	bx	lr

080140a0 <pifRingBuffer_GetFillSize>:

uint16_t pifRingBuffer_GetFillSize(PifRingBuffer* p_owner)
{
 80140a0:	b480      	push	{r7}
 80140a2:	b085      	sub	sp, #20
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6078      	str	r0, [r7, #4]
	uint16_t usFill;

    if (p_owner->__head >= p_owner->__tail) {
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	8a9a      	ldrh	r2, [r3, #20]
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	8adb      	ldrh	r3, [r3, #22]
 80140b0:	429a      	cmp	r2, r3
 80140b2:	d306      	bcc.n	80140c2 <pifRingBuffer_GetFillSize+0x22>
    	usFill = p_owner->__head - p_owner->__tail;
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	8a9a      	ldrh	r2, [r3, #20]
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	8adb      	ldrh	r3, [r3, #22]
 80140bc:	1ad3      	subs	r3, r2, r3
 80140be:	81fb      	strh	r3, [r7, #14]
 80140c0:	e009      	b.n	80140d6 <pifRingBuffer_GetFillSize+0x36>
    }
    else {
    	usFill = p_owner->_size - p_owner->__tail + p_owner->__head;
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	891a      	ldrh	r2, [r3, #8]
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	8adb      	ldrh	r3, [r3, #22]
 80140ca:	1ad3      	subs	r3, r2, r3
 80140cc:	b29a      	uxth	r2, r3
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	8a9b      	ldrh	r3, [r3, #20]
 80140d2:	4413      	add	r3, r2
 80140d4:	81fb      	strh	r3, [r7, #14]
    }
    return usFill;
 80140d6:	89fb      	ldrh	r3, [r7, #14]
}
 80140d8:	4618      	mov	r0, r3
 80140da:	3714      	adds	r7, #20
 80140dc:	46bd      	mov	sp, r7
 80140de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e2:	4770      	bx	lr

080140e4 <pifRingBuffer_GetLinerSize>:

uint16_t pifRingBuffer_GetLinerSize(PifRingBuffer* p_owner, uint16_t pos)
{
 80140e4:	b480      	push	{r7}
 80140e6:	b085      	sub	sp, #20
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
 80140ec:	460b      	mov	r3, r1
 80140ee:	807b      	strh	r3, [r7, #2]
	uint16_t tail = (p_owner->__tail + pos) % p_owner->_size;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	8adb      	ldrh	r3, [r3, #22]
 80140f4:	461a      	mov	r2, r3
 80140f6:	887b      	ldrh	r3, [r7, #2]
 80140f8:	4413      	add	r3, r2
 80140fa:	687a      	ldr	r2, [r7, #4]
 80140fc:	8912      	ldrh	r2, [r2, #8]
 80140fe:	fb93 f1f2 	sdiv	r1, r3, r2
 8014102:	fb01 f202 	mul.w	r2, r1, r2
 8014106:	1a9b      	subs	r3, r3, r2
 8014108:	81fb      	strh	r3, [r7, #14]

    if (p_owner->__head >= tail) {
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	8a9b      	ldrh	r3, [r3, #20]
 801410e:	89fa      	ldrh	r2, [r7, #14]
 8014110:	429a      	cmp	r2, r3
 8014112:	d805      	bhi.n	8014120 <pifRingBuffer_GetLinerSize+0x3c>
    	return p_owner->__head - tail;
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	8a9a      	ldrh	r2, [r3, #20]
 8014118:	89fb      	ldrh	r3, [r7, #14]
 801411a:	1ad3      	subs	r3, r2, r3
 801411c:	b29b      	uxth	r3, r3
 801411e:	e004      	b.n	801412a <pifRingBuffer_GetLinerSize+0x46>
    }
    else {
    	return p_owner->_size - tail;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	891a      	ldrh	r2, [r3, #8]
 8014124:	89fb      	ldrh	r3, [r7, #14]
 8014126:	1ad3      	subs	r3, r2, r3
 8014128:	b29b      	uxth	r3, r3
    }
}
 801412a:	4618      	mov	r0, r3
 801412c:	3714      	adds	r7, #20
 801412e:	46bd      	mov	sp, r7
 8014130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014134:	4770      	bx	lr

08014136 <pifRingBuffer_GetRemainSize>:

uint16_t pifRingBuffer_GetRemainSize(PifRingBuffer* p_owner)
{
 8014136:	b480      	push	{r7}
 8014138:	b085      	sub	sp, #20
 801413a:	af00      	add	r7, sp, #0
 801413c:	6078      	str	r0, [r7, #4]
	uint16_t remain;

    if (p_owner->__head < p_owner->__tail) {
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	8a9a      	ldrh	r2, [r3, #20]
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	8adb      	ldrh	r3, [r3, #22]
 8014146:	429a      	cmp	r2, r3
 8014148:	d206      	bcs.n	8014158 <pifRingBuffer_GetRemainSize+0x22>
    	remain = p_owner->__tail - p_owner->__head;
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	8ada      	ldrh	r2, [r3, #22]
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	8a9b      	ldrh	r3, [r3, #20]
 8014152:	1ad3      	subs	r3, r2, r3
 8014154:	81fb      	strh	r3, [r7, #14]
 8014156:	e009      	b.n	801416c <pifRingBuffer_GetRemainSize+0x36>
    }
    else {
    	remain = p_owner->_size - p_owner->__head + p_owner->__tail;
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	891a      	ldrh	r2, [r3, #8]
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	8a9b      	ldrh	r3, [r3, #20]
 8014160:	1ad3      	subs	r3, r2, r3
 8014162:	b29a      	uxth	r2, r3
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	8adb      	ldrh	r3, [r3, #22]
 8014168:	4413      	add	r3, r2
 801416a:	81fb      	strh	r3, [r7, #14]
    }
    return remain - 1;
 801416c:	89fb      	ldrh	r3, [r7, #14]
 801416e:	3b01      	subs	r3, #1
 8014170:	b29b      	uxth	r3, r3
}
 8014172:	4618      	mov	r0, r3
 8014174:	3714      	adds	r7, #20
 8014176:	46bd      	mov	sp, r7
 8014178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417c:	4770      	bx	lr

0801417e <pifRingBuffer_BeginPutting>:

void pifRingBuffer_BeginPutting(PifRingBuffer* p_owner)
{
 801417e:	b480      	push	{r7}
 8014180:	b083      	sub	sp, #12
 8014182:	af00      	add	r7, sp, #0
 8014184:	6078      	str	r0, [r7, #4]
	if (p_owner->__backup_head < p_owner->_size) {
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	8b1a      	ldrh	r2, [r3, #24]
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	891b      	ldrh	r3, [r3, #8]
 801418e:	429a      	cmp	r2, r3
 8014190:	d203      	bcs.n	801419a <pifRingBuffer_BeginPutting+0x1c>
		p_owner->__head = p_owner->__backup_head;
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	8b1a      	ldrh	r2, [r3, #24]
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	829a      	strh	r2, [r3, #20]
	}
	p_owner->__backup_head = p_owner->__head;
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	8a9a      	ldrh	r2, [r3, #20]
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	831a      	strh	r2, [r3, #24]
}
 80141a2:	bf00      	nop
 80141a4:	370c      	adds	r7, #12
 80141a6:	46bd      	mov	sp, r7
 80141a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ac:	4770      	bx	lr

080141ae <pifRingBuffer_CommitPutting>:

void pifRingBuffer_CommitPutting(PifRingBuffer* p_owner)
{
 80141ae:	b480      	push	{r7}
 80141b0:	b083      	sub	sp, #12
 80141b2:	af00      	add	r7, sp, #0
 80141b4:	6078      	str	r0, [r7, #4]
	p_owner->__backup_head = p_owner->_size;
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	891a      	ldrh	r2, [r3, #8]
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	831a      	strh	r2, [r3, #24]
}
 80141be:	bf00      	nop
 80141c0:	370c      	adds	r7, #12
 80141c2:	46bd      	mov	sp, r7
 80141c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c8:	4770      	bx	lr

080141ca <pifRingBuffer_RollbackPutting>:

void pifRingBuffer_RollbackPutting(PifRingBuffer* p_owner)
{
 80141ca:	b480      	push	{r7}
 80141cc:	b083      	sub	sp, #12
 80141ce:	af00      	add	r7, sp, #0
 80141d0:	6078      	str	r0, [r7, #4]
	p_owner->__head = p_owner->__backup_head;
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	8b1a      	ldrh	r2, [r3, #24]
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	829a      	strh	r2, [r3, #20]
	p_owner->__backup_head = p_owner->_size;
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	891a      	ldrh	r2, [r3, #8]
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	831a      	strh	r2, [r3, #24]
}
 80141e2:	bf00      	nop
 80141e4:	370c      	adds	r7, #12
 80141e6:	46bd      	mov	sp, r7
 80141e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ec:	4770      	bx	lr

080141ee <pifRingBuffer_GetPointerPutting>:

uint8_t* pifRingBuffer_GetPointerPutting(PifRingBuffer* p_owner, uint16_t pos)
{
 80141ee:	b480      	push	{r7}
 80141f0:	b083      	sub	sp, #12
 80141f2:	af00      	add	r7, sp, #0
 80141f4:	6078      	str	r0, [r7, #4]
 80141f6:	460b      	mov	r3, r1
 80141f8:	807b      	strh	r3, [r7, #2]
	return &p_owner->__p_buffer[(p_owner->__backup_head + pos) % p_owner->_size];
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	6919      	ldr	r1, [r3, #16]
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	8b1b      	ldrh	r3, [r3, #24]
 8014202:	461a      	mov	r2, r3
 8014204:	887b      	ldrh	r3, [r7, #2]
 8014206:	4413      	add	r3, r2
 8014208:	687a      	ldr	r2, [r7, #4]
 801420a:	8912      	ldrh	r2, [r2, #8]
 801420c:	fb93 f0f2 	sdiv	r0, r3, r2
 8014210:	fb00 f202 	mul.w	r2, r0, r2
 8014214:	1a9b      	subs	r3, r3, r2
 8014216:	440b      	add	r3, r1
}
 8014218:	4618      	mov	r0, r3
 801421a:	370c      	adds	r7, #12
 801421c:	46bd      	mov	sp, r7
 801421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014222:	4770      	bx	lr

08014224 <pifRingBuffer_PutByte>:

BOOL pifRingBuffer_PutByte(PifRingBuffer* p_owner, uint8_t data)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b084      	sub	sp, #16
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
 801422c:	460b      	mov	r3, r1
 801422e:	70fb      	strb	r3, [r7, #3]
    uint16_t next;

    next = p_owner->__head + 1;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	8a9b      	ldrh	r3, [r3, #20]
 8014234:	3301      	adds	r3, #1
 8014236:	81fb      	strh	r3, [r7, #14]
	if (next >= p_owner->_size) next = 0;
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	891b      	ldrh	r3, [r3, #8]
 801423c:	89fa      	ldrh	r2, [r7, #14]
 801423e:	429a      	cmp	r2, r3
 8014240:	d301      	bcc.n	8014246 <pifRingBuffer_PutByte+0x22>
 8014242:	2300      	movs	r3, #0
 8014244:	81fb      	strh	r3, [r7, #14]
    if (next == p_owner->__tail) {
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	8adb      	ldrh	r3, [r3, #22]
 801424a:	89fa      	ldrh	r2, [r7, #14]
 801424c:	429a      	cmp	r2, r3
 801424e:	d10b      	bne.n	8014268 <pifRingBuffer_PutByte+0x44>
    	if (!_chopOff(p_owner, 1)) {
 8014250:	2101      	movs	r1, #1
 8014252:	6878      	ldr	r0, [r7, #4]
 8014254:	f7ff fdb2 	bl	8013dbc <_chopOff>
 8014258:	4603      	mov	r3, r0
 801425a:	2b00      	cmp	r3, #0
 801425c:	d104      	bne.n	8014268 <pifRingBuffer_PutByte+0x44>
    		pif_error = E_OVERFLOW_BUFFER;
 801425e:	4b0a      	ldr	r3, [pc, #40]	; (8014288 <pifRingBuffer_PutByte+0x64>)
 8014260:	2204      	movs	r2, #4
 8014262:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8014264:	2300      	movs	r3, #0
 8014266:	e00a      	b.n	801427e <pifRingBuffer_PutByte+0x5a>
    	}
    }

    p_owner->__p_buffer[p_owner->__head] = data;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	691b      	ldr	r3, [r3, #16]
 801426c:	687a      	ldr	r2, [r7, #4]
 801426e:	8a92      	ldrh	r2, [r2, #20]
 8014270:	4413      	add	r3, r2
 8014272:	78fa      	ldrb	r2, [r7, #3]
 8014274:	701a      	strb	r2, [r3, #0]
    p_owner->__head = next;
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	89fa      	ldrh	r2, [r7, #14]
 801427a:	829a      	strh	r2, [r3, #20]
    return TRUE;
 801427c:	2301      	movs	r3, #1
}
 801427e:	4618      	mov	r0, r3
 8014280:	3710      	adds	r7, #16
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}
 8014286:	bf00      	nop
 8014288:	20001de0 	.word	0x20001de0

0801428c <pifRingBuffer_PutData>:

BOOL pifRingBuffer_PutData(PifRingBuffer* p_owner, uint8_t* p_data, uint16_t length)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b086      	sub	sp, #24
 8014290:	af00      	add	r7, sp, #0
 8014292:	60f8      	str	r0, [r7, #12]
 8014294:	60b9      	str	r1, [r7, #8]
 8014296:	4613      	mov	r3, r2
 8014298:	80fb      	strh	r3, [r7, #6]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner);
 801429a:	68f8      	ldr	r0, [r7, #12]
 801429c:	f7ff ff4b 	bl	8014136 <pifRingBuffer_GetRemainSize>
 80142a0:	4603      	mov	r3, r0
 80142a2:	82bb      	strh	r3, [r7, #20]

    if (length > remain) {
 80142a4:	88fa      	ldrh	r2, [r7, #6]
 80142a6:	8abb      	ldrh	r3, [r7, #20]
 80142a8:	429a      	cmp	r2, r3
 80142aa:	d90f      	bls.n	80142cc <pifRingBuffer_PutData+0x40>
    	if (!_chopOff(p_owner, length - remain)) {
 80142ac:	88fa      	ldrh	r2, [r7, #6]
 80142ae:	8abb      	ldrh	r3, [r7, #20]
 80142b0:	1ad3      	subs	r3, r2, r3
 80142b2:	b29b      	uxth	r3, r3
 80142b4:	4619      	mov	r1, r3
 80142b6:	68f8      	ldr	r0, [r7, #12]
 80142b8:	f7ff fd80 	bl	8013dbc <_chopOff>
 80142bc:	4603      	mov	r3, r0
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d104      	bne.n	80142cc <pifRingBuffer_PutData+0x40>
    		pif_error = E_OVERFLOW_BUFFER;
 80142c2:	4b16      	ldr	r3, [pc, #88]	; (801431c <pifRingBuffer_PutData+0x90>)
 80142c4:	2204      	movs	r2, #4
 80142c6:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 80142c8:	2300      	movs	r3, #0
 80142ca:	e023      	b.n	8014314 <pifRingBuffer_PutData+0x88>
    	}
    }

    for (uint16_t i = 0; i < length; i++) {
 80142cc:	2300      	movs	r3, #0
 80142ce:	82fb      	strh	r3, [r7, #22]
 80142d0:	e01b      	b.n	801430a <pifRingBuffer_PutData+0x7e>
    	p_owner->__p_buffer[p_owner->__head] = p_data[i];
 80142d2:	8afb      	ldrh	r3, [r7, #22]
 80142d4:	68ba      	ldr	r2, [r7, #8]
 80142d6:	441a      	add	r2, r3
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	691b      	ldr	r3, [r3, #16]
 80142dc:	68f9      	ldr	r1, [r7, #12]
 80142de:	8a89      	ldrh	r1, [r1, #20]
 80142e0:	440b      	add	r3, r1
 80142e2:	7812      	ldrb	r2, [r2, #0]
 80142e4:	701a      	strb	r2, [r3, #0]
    	p_owner->__head++;
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	8a9b      	ldrh	r3, [r3, #20]
 80142ea:	3301      	adds	r3, #1
 80142ec:	b29a      	uxth	r2, r3
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	829a      	strh	r2, [r3, #20]
    	if (p_owner->__head >= p_owner->_size) p_owner->__head = 0;
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	8a9a      	ldrh	r2, [r3, #20]
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	891b      	ldrh	r3, [r3, #8]
 80142fa:	429a      	cmp	r2, r3
 80142fc:	d302      	bcc.n	8014304 <pifRingBuffer_PutData+0x78>
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	2200      	movs	r2, #0
 8014302:	829a      	strh	r2, [r3, #20]
    for (uint16_t i = 0; i < length; i++) {
 8014304:	8afb      	ldrh	r3, [r7, #22]
 8014306:	3301      	adds	r3, #1
 8014308:	82fb      	strh	r3, [r7, #22]
 801430a:	8afa      	ldrh	r2, [r7, #22]
 801430c:	88fb      	ldrh	r3, [r7, #6]
 801430e:	429a      	cmp	r2, r3
 8014310:	d3df      	bcc.n	80142d2 <pifRingBuffer_PutData+0x46>
    }
    return TRUE;
 8014312:	2301      	movs	r3, #1
}
 8014314:	4618      	mov	r0, r3
 8014316:	3718      	adds	r7, #24
 8014318:	46bd      	mov	sp, r7
 801431a:	bd80      	pop	{r7, pc}
 801431c:	20001de0 	.word	0x20001de0

08014320 <pifRingBuffer_PutString>:

BOOL pifRingBuffer_PutString(PifRingBuffer* p_owner, char* p_string)
{
 8014320:	b580      	push	{r7, lr}
 8014322:	b084      	sub	sp, #16
 8014324:	af00      	add	r7, sp, #0
 8014326:	6078      	str	r0, [r7, #4]
 8014328:	6039      	str	r1, [r7, #0]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner);
 801432a:	6878      	ldr	r0, [r7, #4]
 801432c:	f7ff ff03 	bl	8014136 <pifRingBuffer_GetRemainSize>
 8014330:	4603      	mov	r3, r0
 8014332:	81bb      	strh	r3, [r7, #12]
	uint16_t length = strlen(p_string);
 8014334:	6838      	ldr	r0, [r7, #0]
 8014336:	f7eb ff4f 	bl	80001d8 <strlen>
 801433a:	4603      	mov	r3, r0
 801433c:	817b      	strh	r3, [r7, #10]

    if (length > remain) {
 801433e:	897a      	ldrh	r2, [r7, #10]
 8014340:	89bb      	ldrh	r3, [r7, #12]
 8014342:	429a      	cmp	r2, r3
 8014344:	d90f      	bls.n	8014366 <pifRingBuffer_PutString+0x46>
    	if (!_chopOff(p_owner, length - remain)) {
 8014346:	897a      	ldrh	r2, [r7, #10]
 8014348:	89bb      	ldrh	r3, [r7, #12]
 801434a:	1ad3      	subs	r3, r2, r3
 801434c:	b29b      	uxth	r3, r3
 801434e:	4619      	mov	r1, r3
 8014350:	6878      	ldr	r0, [r7, #4]
 8014352:	f7ff fd33 	bl	8013dbc <_chopOff>
 8014356:	4603      	mov	r3, r0
 8014358:	2b00      	cmp	r3, #0
 801435a:	d104      	bne.n	8014366 <pifRingBuffer_PutString+0x46>
    		pif_error = E_OVERFLOW_BUFFER;
 801435c:	4b16      	ldr	r3, [pc, #88]	; (80143b8 <pifRingBuffer_PutString+0x98>)
 801435e:	2204      	movs	r2, #4
 8014360:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8014362:	2300      	movs	r3, #0
 8014364:	e023      	b.n	80143ae <pifRingBuffer_PutString+0x8e>
    	}
    }

    for (uint16_t i = 0; i < length; i++) {
 8014366:	2300      	movs	r3, #0
 8014368:	81fb      	strh	r3, [r7, #14]
 801436a:	e01b      	b.n	80143a4 <pifRingBuffer_PutString+0x84>
    	p_owner->__p_buffer[p_owner->__head] = p_string[i];
 801436c:	89fb      	ldrh	r3, [r7, #14]
 801436e:	683a      	ldr	r2, [r7, #0]
 8014370:	441a      	add	r2, r3
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	691b      	ldr	r3, [r3, #16]
 8014376:	6879      	ldr	r1, [r7, #4]
 8014378:	8a89      	ldrh	r1, [r1, #20]
 801437a:	440b      	add	r3, r1
 801437c:	7812      	ldrb	r2, [r2, #0]
 801437e:	701a      	strb	r2, [r3, #0]
    	p_owner->__head++;
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	8a9b      	ldrh	r3, [r3, #20]
 8014384:	3301      	adds	r3, #1
 8014386:	b29a      	uxth	r2, r3
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	829a      	strh	r2, [r3, #20]
    	if (p_owner->__head >= p_owner->_size) p_owner->__head = 0;
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	8a9a      	ldrh	r2, [r3, #20]
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	891b      	ldrh	r3, [r3, #8]
 8014394:	429a      	cmp	r2, r3
 8014396:	d302      	bcc.n	801439e <pifRingBuffer_PutString+0x7e>
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2200      	movs	r2, #0
 801439c:	829a      	strh	r2, [r3, #20]
    for (uint16_t i = 0; i < length; i++) {
 801439e:	89fb      	ldrh	r3, [r7, #14]
 80143a0:	3301      	adds	r3, #1
 80143a2:	81fb      	strh	r3, [r7, #14]
 80143a4:	89fa      	ldrh	r2, [r7, #14]
 80143a6:	897b      	ldrh	r3, [r7, #10]
 80143a8:	429a      	cmp	r2, r3
 80143aa:	d3df      	bcc.n	801436c <pifRingBuffer_PutString+0x4c>
    }
    return TRUE;
 80143ac:	2301      	movs	r3, #1
}
 80143ae:	4618      	mov	r0, r3
 80143b0:	3710      	adds	r7, #16
 80143b2:	46bd      	mov	sp, r7
 80143b4:	bd80      	pop	{r7, pc}
 80143b6:	bf00      	nop
 80143b8:	20001de0 	.word	0x20001de0

080143bc <pifRingBuffer_GetByte>:

BOOL pifRingBuffer_GetByte(PifRingBuffer* p_owner, uint8_t* p_data)
{
 80143bc:	b480      	push	{r7}
 80143be:	b083      	sub	sp, #12
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
 80143c4:	6039      	str	r1, [r7, #0]
	if (p_owner->__tail == p_owner->__head) return FALSE;
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	8ada      	ldrh	r2, [r3, #22]
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	8a9b      	ldrh	r3, [r3, #20]
 80143ce:	429a      	cmp	r2, r3
 80143d0:	d101      	bne.n	80143d6 <pifRingBuffer_GetByte+0x1a>
 80143d2:	2300      	movs	r3, #0
 80143d4:	e017      	b.n	8014406 <pifRingBuffer_GetByte+0x4a>

	*p_data = p_owner->__p_buffer[p_owner->__tail];
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	691b      	ldr	r3, [r3, #16]
 80143da:	687a      	ldr	r2, [r7, #4]
 80143dc:	8ad2      	ldrh	r2, [r2, #22]
 80143de:	4413      	add	r3, r2
 80143e0:	781a      	ldrb	r2, [r3, #0]
 80143e2:	683b      	ldr	r3, [r7, #0]
 80143e4:	701a      	strb	r2, [r3, #0]
	p_owner->__tail++;
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	8adb      	ldrh	r3, [r3, #22]
 80143ea:	3301      	adds	r3, #1
 80143ec:	b29a      	uxth	r2, r3
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	82da      	strh	r2, [r3, #22]
	if (p_owner->__tail >= p_owner->_size) p_owner->__tail = 0;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	8ada      	ldrh	r2, [r3, #22]
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	891b      	ldrh	r3, [r3, #8]
 80143fa:	429a      	cmp	r2, r3
 80143fc:	d302      	bcc.n	8014404 <pifRingBuffer_GetByte+0x48>
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	2200      	movs	r2, #0
 8014402:	82da      	strh	r2, [r3, #22]
	return TRUE;
 8014404:	2301      	movs	r3, #1
}
 8014406:	4618      	mov	r0, r3
 8014408:	370c      	adds	r7, #12
 801440a:	46bd      	mov	sp, r7
 801440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014410:	4770      	bx	lr

08014412 <pifRingBuffer_CopyToArray>:

uint16_t pifRingBuffer_CopyToArray(uint8_t* p_dst, uint16_t count, PifRingBuffer* p_src, uint16_t pos)
{
 8014412:	b480      	push	{r7}
 8014414:	b087      	sub	sp, #28
 8014416:	af00      	add	r7, sp, #0
 8014418:	60f8      	str	r0, [r7, #12]
 801441a:	607a      	str	r2, [r7, #4]
 801441c:	461a      	mov	r2, r3
 801441e:	460b      	mov	r3, r1
 8014420:	817b      	strh	r3, [r7, #10]
 8014422:	4613      	mov	r3, r2
 8014424:	813b      	strh	r3, [r7, #8]
	uint16_t tail = p_src->__tail + pos;
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	8ada      	ldrh	r2, [r3, #22]
 801442a:	893b      	ldrh	r3, [r7, #8]
 801442c:	4413      	add	r3, r2
 801442e:	82fb      	strh	r3, [r7, #22]
	if (tail >= p_src->_size) tail -= p_src->_size;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	891b      	ldrh	r3, [r3, #8]
 8014434:	8afa      	ldrh	r2, [r7, #22]
 8014436:	429a      	cmp	r2, r3
 8014438:	d304      	bcc.n	8014444 <pifRingBuffer_CopyToArray+0x32>
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	891b      	ldrh	r3, [r3, #8]
 801443e:	8afa      	ldrh	r2, [r7, #22]
 8014440:	1ad3      	subs	r3, r2, r3
 8014442:	82fb      	strh	r3, [r7, #22]

	for (uint16_t i = 0; i < count; i++) {
 8014444:	2300      	movs	r3, #0
 8014446:	82bb      	strh	r3, [r7, #20]
 8014448:	e01e      	b.n	8014488 <pifRingBuffer_CopyToArray+0x76>
		p_dst[i] = p_src->__p_buffer[tail];
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	691a      	ldr	r2, [r3, #16]
 801444e:	8afb      	ldrh	r3, [r7, #22]
 8014450:	441a      	add	r2, r3
 8014452:	8abb      	ldrh	r3, [r7, #20]
 8014454:	68f9      	ldr	r1, [r7, #12]
 8014456:	440b      	add	r3, r1
 8014458:	7812      	ldrb	r2, [r2, #0]
 801445a:	701a      	strb	r2, [r3, #0]
		tail++;
 801445c:	8afb      	ldrh	r3, [r7, #22]
 801445e:	3301      	adds	r3, #1
 8014460:	82fb      	strh	r3, [r7, #22]
		if (tail >= p_src->_size) tail = 0;
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	891b      	ldrh	r3, [r3, #8]
 8014466:	8afa      	ldrh	r2, [r7, #22]
 8014468:	429a      	cmp	r2, r3
 801446a:	d301      	bcc.n	8014470 <pifRingBuffer_CopyToArray+0x5e>
 801446c:	2300      	movs	r3, #0
 801446e:	82fb      	strh	r3, [r7, #22]
		if (tail == p_src->__head) return i + 1;
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	8a9b      	ldrh	r3, [r3, #20]
 8014474:	8afa      	ldrh	r2, [r7, #22]
 8014476:	429a      	cmp	r2, r3
 8014478:	d103      	bne.n	8014482 <pifRingBuffer_CopyToArray+0x70>
 801447a:	8abb      	ldrh	r3, [r7, #20]
 801447c:	3301      	adds	r3, #1
 801447e:	b29b      	uxth	r3, r3
 8014480:	e007      	b.n	8014492 <pifRingBuffer_CopyToArray+0x80>
	for (uint16_t i = 0; i < count; i++) {
 8014482:	8abb      	ldrh	r3, [r7, #20]
 8014484:	3301      	adds	r3, #1
 8014486:	82bb      	strh	r3, [r7, #20]
 8014488:	8aba      	ldrh	r2, [r7, #20]
 801448a:	897b      	ldrh	r3, [r7, #10]
 801448c:	429a      	cmp	r2, r3
 801448e:	d3dc      	bcc.n	801444a <pifRingBuffer_CopyToArray+0x38>
	}
	return count;
 8014490:	897b      	ldrh	r3, [r7, #10]
}
 8014492:	4618      	mov	r0, r3
 8014494:	371c      	adds	r7, #28
 8014496:	46bd      	mov	sp, r7
 8014498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449c:	4770      	bx	lr

0801449e <pifRingBuffer_Remove>:
	}
	return TRUE;
}

void pifRingBuffer_Remove(PifRingBuffer* p_owner, uint16_t size)
{
 801449e:	b580      	push	{r7, lr}
 80144a0:	b084      	sub	sp, #16
 80144a2:	af00      	add	r7, sp, #0
 80144a4:	6078      	str	r0, [r7, #4]
 80144a6:	460b      	mov	r3, r1
 80144a8:	807b      	strh	r3, [r7, #2]
	uint16_t fill = pifRingBuffer_GetFillSize(p_owner);
 80144aa:	6878      	ldr	r0, [r7, #4]
 80144ac:	f7ff fdf8 	bl	80140a0 <pifRingBuffer_GetFillSize>
 80144b0:	4603      	mov	r3, r0
 80144b2:	81fb      	strh	r3, [r7, #14]

	if (size >= fill) {
 80144b4:	887a      	ldrh	r2, [r7, #2]
 80144b6:	89fb      	ldrh	r3, [r7, #14]
 80144b8:	429a      	cmp	r2, r3
 80144ba:	d304      	bcc.n	80144c6 <pifRingBuffer_Remove+0x28>
		p_owner->__tail = p_owner->__head;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	8a9a      	ldrh	r2, [r3, #20]
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	82da      	strh	r2, [r3, #22]
	}
	else {
		p_owner->__tail = (p_owner->__tail + size) % p_owner->_size;
	}
}
 80144c4:	e00e      	b.n	80144e4 <pifRingBuffer_Remove+0x46>
		p_owner->__tail = (p_owner->__tail + size) % p_owner->_size;
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	8adb      	ldrh	r3, [r3, #22]
 80144ca:	461a      	mov	r2, r3
 80144cc:	887b      	ldrh	r3, [r7, #2]
 80144ce:	4413      	add	r3, r2
 80144d0:	687a      	ldr	r2, [r7, #4]
 80144d2:	8912      	ldrh	r2, [r2, #8]
 80144d4:	fb93 f1f2 	sdiv	r1, r3, r2
 80144d8:	fb01 f202 	mul.w	r2, r1, r2
 80144dc:	1a9b      	subs	r3, r3, r2
 80144de:	b29a      	uxth	r2, r3
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	82da      	strh	r2, [r3, #22]
}
 80144e4:	bf00      	nop
 80144e6:	3710      	adds	r7, #16
 80144e8:	46bd      	mov	sp, r7
 80144ea:	bd80      	pop	{r7, pc}

080144ec <_setTable>:

static uint32_t s_loop_count = 0UL, s_pass_count = 0UL;


static int _setTable(uint16_t period, PifTaskMode* p_mode)
{
 80144ec:	b480      	push	{r7}
 80144ee:	b089      	sub	sp, #36	; 0x24
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	4603      	mov	r3, r0
 80144f4:	6039      	str	r1, [r7, #0]
 80144f6:	80fb      	strh	r3, [r7, #6]
	uint32_t gap, index, bit;
	static int base = 0;
	int i, count, num = -1;
 80144f8:	f04f 33ff 	mov.w	r3, #4294967295
 80144fc:	617b      	str	r3, [r7, #20]

	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 80144fe:	2300      	movs	r3, #0
 8014500:	61bb      	str	r3, [r7, #24]
 8014502:	e00f      	b.n	8014524 <_setTable+0x38>
		if (!(s_table_number & (1 << i))) {
 8014504:	2201      	movs	r2, #1
 8014506:	69bb      	ldr	r3, [r7, #24]
 8014508:	fa02 f303 	lsl.w	r3, r2, r3
 801450c:	461a      	mov	r2, r3
 801450e:	4b34      	ldr	r3, [pc, #208]	; (80145e0 <_setTable+0xf4>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	4013      	ands	r3, r2
 8014514:	2b00      	cmp	r3, #0
 8014516:	d102      	bne.n	801451e <_setTable+0x32>
			num = i;
 8014518:	69bb      	ldr	r3, [r7, #24]
 801451a:	617b      	str	r3, [r7, #20]
			break;
 801451c:	e005      	b.n	801452a <_setTable+0x3e>
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 801451e:	69bb      	ldr	r3, [r7, #24]
 8014520:	3301      	adds	r3, #1
 8014522:	61bb      	str	r3, [r7, #24]
 8014524:	69bb      	ldr	r3, [r7, #24]
 8014526:	2b1f      	cmp	r3, #31
 8014528:	ddec      	ble.n	8014504 <_setTable+0x18>
		}
	}
	if (num == -1) {
 801452a:	697b      	ldr	r3, [r7, #20]
 801452c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014530:	d105      	bne.n	801453e <_setTable+0x52>
		pif_error = E_OVERFLOW_BUFFER;
 8014532:	4b2c      	ldr	r3, [pc, #176]	; (80145e4 <_setTable+0xf8>)
 8014534:	2204      	movs	r2, #4
 8014536:	701a      	strb	r2, [r3, #0]
		return -1;
 8014538:	f04f 33ff 	mov.w	r3, #4294967295
 801453c:	e04a      	b.n	80145d4 <_setTable+0xe8>
	}
	bit = 1 << num;
 801453e:	2201      	movs	r2, #1
 8014540:	697b      	ldr	r3, [r7, #20]
 8014542:	fa02 f303 	lsl.w	r3, r2, r3
 8014546:	613b      	str	r3, [r7, #16]
	s_table_number |= bit;
 8014548:	4b25      	ldr	r3, [pc, #148]	; (80145e0 <_setTable+0xf4>)
 801454a:	681a      	ldr	r2, [r3, #0]
 801454c:	693b      	ldr	r3, [r7, #16]
 801454e:	4313      	orrs	r3, r2
 8014550:	4a23      	ldr	r2, [pc, #140]	; (80145e0 <_setTable+0xf4>)
 8014552:	6013      	str	r3, [r2, #0]

	count = PIF_TASK_TABLE_SIZE * period;
 8014554:	88fb      	ldrh	r3, [r7, #6]
 8014556:	015b      	lsls	r3, r3, #5
 8014558:	60fb      	str	r3, [r7, #12]
	gap = 10000L * PIF_TASK_TABLE_SIZE / count;
 801455a:	4a23      	ldr	r2, [pc, #140]	; (80145e8 <_setTable+0xfc>)
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	fb92 f3f3 	sdiv	r3, r2, r3
 8014562:	60bb      	str	r3, [r7, #8]
	if (gap > 100) {
 8014564:	68bb      	ldr	r3, [r7, #8]
 8014566:	2b64      	cmp	r3, #100	; 0x64
 8014568:	d930      	bls.n	80145cc <_setTable+0xe0>
		index = 100 * base;
 801456a:	4b20      	ldr	r3, [pc, #128]	; (80145ec <_setTable+0x100>)
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	2264      	movs	r2, #100	; 0x64
 8014570:	fb02 f303 	mul.w	r3, r2, r3
 8014574:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < count / 100; i++) {
 8014576:	2300      	movs	r3, #0
 8014578:	61bb      	str	r3, [r7, #24]
 801457a:	e017      	b.n	80145ac <_setTable+0xc0>
			s_table[(index / 100) & PIF_TASK_TABLE_MASK] |= bit;
 801457c:	69fb      	ldr	r3, [r7, #28]
 801457e:	4a1c      	ldr	r2, [pc, #112]	; (80145f0 <_setTable+0x104>)
 8014580:	fba2 2303 	umull	r2, r3, r2, r3
 8014584:	095b      	lsrs	r3, r3, #5
 8014586:	f003 021f 	and.w	r2, r3, #31
 801458a:	491a      	ldr	r1, [pc, #104]	; (80145f4 <_setTable+0x108>)
 801458c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014590:	f003 031f 	and.w	r3, r3, #31
 8014594:	693a      	ldr	r2, [r7, #16]
 8014596:	430a      	orrs	r2, r1
 8014598:	4916      	ldr	r1, [pc, #88]	; (80145f4 <_setTable+0x108>)
 801459a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			index += gap;
 801459e:	69fa      	ldr	r2, [r7, #28]
 80145a0:	68bb      	ldr	r3, [r7, #8]
 80145a2:	4413      	add	r3, r2
 80145a4:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < count / 100; i++) {
 80145a6:	69bb      	ldr	r3, [r7, #24]
 80145a8:	3301      	adds	r3, #1
 80145aa:	61bb      	str	r3, [r7, #24]
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	4a10      	ldr	r2, [pc, #64]	; (80145f0 <_setTable+0x104>)
 80145b0:	fb82 1203 	smull	r1, r2, r2, r3
 80145b4:	1152      	asrs	r2, r2, #5
 80145b6:	17db      	asrs	r3, r3, #31
 80145b8:	1ad3      	subs	r3, r2, r3
 80145ba:	69ba      	ldr	r2, [r7, #24]
 80145bc:	429a      	cmp	r2, r3
 80145be:	dbdd      	blt.n	801457c <_setTable+0x90>
		}
		base++;
 80145c0:	4b0a      	ldr	r3, [pc, #40]	; (80145ec <_setTable+0x100>)
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	3301      	adds	r3, #1
 80145c6:	4a09      	ldr	r2, [pc, #36]	; (80145ec <_setTable+0x100>)
 80145c8:	6013      	str	r3, [r2, #0]
 80145ca:	e002      	b.n	80145d2 <_setTable+0xe6>
	}
	else {
		*p_mode = TM_ALWAYS;
 80145cc:	683b      	ldr	r3, [r7, #0]
 80145ce:	2201      	movs	r2, #1
 80145d0:	701a      	strb	r2, [r3, #0]
	}
	return num;
 80145d2:	697b      	ldr	r3, [r7, #20]
}
 80145d4:	4618      	mov	r0, r3
 80145d6:	3724      	adds	r7, #36	; 0x24
 80145d8:	46bd      	mov	sp, r7
 80145da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145de:	4770      	bx	lr
 80145e0:	20001ec8 	.word	0x20001ec8
 80145e4:	20001de0 	.word	0x20001de0
 80145e8:	0004e200 	.word	0x0004e200
 80145ec:	20001f58 	.word	0x20001f58
 80145f0:	51eb851f 	.word	0x51eb851f
 80145f4:	20001ecc 	.word	0x20001ecc

080145f8 <_resetTable>:

static void _resetTable(int number)
{
 80145f8:	b480      	push	{r7}
 80145fa:	b085      	sub	sp, #20
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	6078      	str	r0, [r7, #4]
	int i;
	uint32_t mask;

	mask = ~((uint32_t)1 << number);
 8014600:	2201      	movs	r2, #1
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	fa02 f303 	lsl.w	r3, r2, r3
 8014608:	43db      	mvns	r3, r3
 801460a:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 801460c:	2300      	movs	r3, #0
 801460e:	60fb      	str	r3, [r7, #12]
 8014610:	e00c      	b.n	801462c <_resetTable+0x34>
		s_table[i] &= mask;
 8014612:	4a0e      	ldr	r2, [pc, #56]	; (801464c <_resetTable+0x54>)
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801461a:	68bb      	ldr	r3, [r7, #8]
 801461c:	401a      	ands	r2, r3
 801461e:	490b      	ldr	r1, [pc, #44]	; (801464c <_resetTable+0x54>)
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	3301      	adds	r3, #1
 801462a:	60fb      	str	r3, [r7, #12]
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	2b1f      	cmp	r3, #31
 8014630:	ddef      	ble.n	8014612 <_resetTable+0x1a>
	}
	s_table_number &= mask;
 8014632:	4b07      	ldr	r3, [pc, #28]	; (8014650 <_resetTable+0x58>)
 8014634:	681a      	ldr	r2, [r3, #0]
 8014636:	68bb      	ldr	r3, [r7, #8]
 8014638:	4013      	ands	r3, r2
 801463a:	4a05      	ldr	r2, [pc, #20]	; (8014650 <_resetTable+0x58>)
 801463c:	6013      	str	r3, [r2, #0]
}
 801463e:	bf00      	nop
 8014640:	3714      	adds	r7, #20
 8014642:	46bd      	mov	sp, r7
 8014644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014648:	4770      	bx	lr
 801464a:	bf00      	nop
 801464c:	20001ecc 	.word	0x20001ecc
 8014650:	20001ec8 	.word	0x20001ec8

08014654 <_processingAlways>:

static PifTask* _processingAlways(PifTask* p_owner)
{
 8014654:	b480      	push	{r7}
 8014656:	b085      	sub	sp, #20
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
	uint32_t gap;

	if (p_owner->__delay_ms) {
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8014660:	2b00      	cmp	r3, #0
 8014662:	d010      	beq.n	8014686 <_processingAlways+0x32>
		gap = pif_cumulative_timer1ms - p_owner->__pretime;
 8014664:	4b0b      	ldr	r3, [pc, #44]	; (8014694 <_processingAlways+0x40>)
 8014666:	681a      	ldr	r2, [r3, #0]
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801466c:	1ad3      	subs	r3, r2, r3
 801466e:	60fb      	str	r3, [r7, #12]
		if (gap >= p_owner->__delay_ms) {
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8014674:	461a      	mov	r2, r3
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	4293      	cmp	r3, r2
 801467a:	d302      	bcc.n	8014682 <_processingAlways+0x2e>
			p_owner->__delay_ms = 0;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	2200      	movs	r2, #0
 8014680:	879a      	strh	r2, [r3, #60]	; 0x3c
		}
		return NULL;
 8014682:	2300      	movs	r3, #0
 8014684:	e000      	b.n	8014688 <_processingAlways+0x34>
	}
	return p_owner;
 8014686:	687b      	ldr	r3, [r7, #4]
}
 8014688:	4618      	mov	r0, r3
 801468a:	3714      	adds	r7, #20
 801468c:	46bd      	mov	sp, r7
 801468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014692:	4770      	bx	lr
 8014694:	20001df8 	.word	0x20001df8

08014698 <_processingPeriodUs>:

static PifTask* _processingPeriodUs(PifTask* p_owner)
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b084      	sub	sp, #16
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
	uint32_t current, gap;

	current = (*pif_act_timer1us)();
 80146a0:	4b0f      	ldr	r3, [pc, #60]	; (80146e0 <_processingPeriodUs+0x48>)
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	4798      	blx	r3
 80146a6:	60f8      	str	r0, [r7, #12]
	gap = current - p_owner->__pretime;
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146ac:	68fa      	ldr	r2, [r7, #12]
 80146ae:	1ad3      	subs	r3, r2, r3
 80146b0:	60bb      	str	r3, [r7, #8]
	if (gap >= p_owner->_period) {
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	895b      	ldrh	r3, [r3, #10]
 80146b6:	461a      	mov	r2, r3
 80146b8:	68bb      	ldr	r3, [r7, #8]
 80146ba:	4293      	cmp	r3, r2
 80146bc:	d30a      	bcc.n	80146d4 <_processingPeriodUs+0x3c>
		p_owner->__pretime = current - (gap - p_owner->_period);
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	895b      	ldrh	r3, [r3, #10]
 80146c2:	461a      	mov	r2, r3
 80146c4:	68bb      	ldr	r3, [r7, #8]
 80146c6:	1ad2      	subs	r2, r2, r3
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	441a      	add	r2, r3
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	641a      	str	r2, [r3, #64]	; 0x40
		return p_owner;
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	e000      	b.n	80146d6 <_processingPeriodUs+0x3e>
	}
	return NULL;
 80146d4:	2300      	movs	r3, #0
}
 80146d6:	4618      	mov	r0, r3
 80146d8:	3710      	adds	r7, #16
 80146da:	46bd      	mov	sp, r7
 80146dc:	bd80      	pop	{r7, pc}
 80146de:	bf00      	nop
 80146e0:	20001e08 	.word	0x20001e08

080146e4 <_processingPeriodMs>:

static PifTask* _processingPeriodMs(PifTask* p_owner)
{
 80146e4:	b480      	push	{r7}
 80146e6:	b085      	sub	sp, #20
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]
	uint32_t current, gap;

	current = pif_cumulative_timer1ms;
 80146ec:	4b0c      	ldr	r3, [pc, #48]	; (8014720 <_processingPeriodMs+0x3c>)
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	60fb      	str	r3, [r7, #12]
	gap = current - p_owner->__pretime;
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146f6:	68fa      	ldr	r2, [r7, #12]
 80146f8:	1ad3      	subs	r3, r2, r3
 80146fa:	60bb      	str	r3, [r7, #8]
	if (gap >= p_owner->_period) {
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	895b      	ldrh	r3, [r3, #10]
 8014700:	461a      	mov	r2, r3
 8014702:	68bb      	ldr	r3, [r7, #8]
 8014704:	4293      	cmp	r3, r2
 8014706:	d304      	bcc.n	8014712 <_processingPeriodMs+0x2e>
		p_owner->__pretime = current;
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	68fa      	ldr	r2, [r7, #12]
 801470c:	641a      	str	r2, [r3, #64]	; 0x40
		return p_owner;
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	e000      	b.n	8014714 <_processingPeriodMs+0x30>
	}
	return NULL;
 8014712:	2300      	movs	r3, #0
}
 8014714:	4618      	mov	r0, r3
 8014716:	3714      	adds	r7, #20
 8014718:	46bd      	mov	sp, r7
 801471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801471e:	4770      	bx	lr
 8014720:	20001df8 	.word	0x20001df8
 8014724:	00000000 	.word	0x00000000

08014728 <_processingRatio>:

static PifTask* _processingRatio(PifTask* p_owner)
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b084      	sub	sp, #16
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
#ifdef __PIF_DEBUG__
	uint32_t time;
	static uint32_t pretime;
#endif

	if (p_owner->__delay_ms) {
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8014734:	2b00      	cmp	r3, #0
 8014736:	d00f      	beq.n	8014758 <_processingRatio+0x30>
		gap = pif_cumulative_timer1ms - p_owner->__pretime;
 8014738:	4b29      	ldr	r3, [pc, #164]	; (80147e0 <_processingRatio+0xb8>)
 801473a:	681a      	ldr	r2, [r3, #0]
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014740:	1ad3      	subs	r3, r2, r3
 8014742:	60bb      	str	r3, [r7, #8]
		if (gap >= p_owner->__delay_ms) {
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8014748:	461a      	mov	r2, r3
 801474a:	68bb      	ldr	r3, [r7, #8]
 801474c:	4293      	cmp	r3, r2
 801474e:	d33b      	bcc.n	80147c8 <_processingRatio+0xa0>
			p_owner->__delay_ms = 0;
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	2200      	movs	r2, #0
 8014754:	879a      	strh	r2, [r3, #60]	; 0x3c
 8014756:	e037      	b.n	80147c8 <_processingRatio+0xa0>
		}
	}
	else if (s_table[s_number] & (1 << p_owner->__table_number)) {
 8014758:	4b22      	ldr	r3, [pc, #136]	; (80147e4 <_processingRatio+0xbc>)
 801475a:	781b      	ldrb	r3, [r3, #0]
 801475c:	461a      	mov	r2, r3
 801475e:	4b22      	ldr	r3, [pc, #136]	; (80147e8 <_processingRatio+0xc0>)
 8014760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014764:	687a      	ldr	r2, [r7, #4]
 8014766:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8014768:	2101      	movs	r1, #1
 801476a:	fa01 f202 	lsl.w	r2, r1, r2
 801476e:	4013      	ands	r3, r2
 8014770:	2b00      	cmp	r3, #0
 8014772:	d029      	beq.n	80147c8 <_processingRatio+0xa0>
#ifdef __PIF_DEBUG__
		time = pif_timer1sec;
 8014774:	4b1d      	ldr	r3, [pc, #116]	; (80147ec <_processingRatio+0xc4>)
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	60fb      	str	r3, [r7, #12]
		if (time != pretime) {
 801477a:	4b1d      	ldr	r3, [pc, #116]	; (80147f0 <_processingRatio+0xc8>)
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	68fa      	ldr	r2, [r7, #12]
 8014780:	429a      	cmp	r2, r3
 8014782:	d01a      	beq.n	80147ba <_processingRatio+0x92>
			p_owner->__period = 1000000.0 / p_owner->__count;
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014788:	4618      	mov	r0, r3
 801478a:	f7eb fe6f 	bl	800046c <__aeabi_ui2d>
 801478e:	4602      	mov	r2, r0
 8014790:	460b      	mov	r3, r1
 8014792:	a111      	add	r1, pc, #68	; (adr r1, 80147d8 <_processingRatio+0xb0>)
 8014794:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014798:	f7ec f80c 	bl	80007b4 <__aeabi_ddiv>
 801479c:	4602      	mov	r2, r0
 801479e:	460b      	mov	r3, r1
 80147a0:	4610      	mov	r0, r2
 80147a2:	4619      	mov	r1, r3
 80147a4:	f7ec f9be 	bl	8000b24 <__aeabi_d2f>
 80147a8:	4602      	mov	r2, r0
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	651a      	str	r2, [r3, #80]	; 0x50
			p_owner->__count = 0;
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	2200      	movs	r2, #0
 80147b2:	64da      	str	r2, [r3, #76]	; 0x4c
			pretime = time;
 80147b4:	4a0e      	ldr	r2, [pc, #56]	; (80147f0 <_processingRatio+0xc8>)
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	6013      	str	r3, [r2, #0]
		}
		p_owner->__count++;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80147be:	1c5a      	adds	r2, r3, #1
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
		return p_owner;
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	e000      	b.n	80147ca <_processingRatio+0xa2>
	}
	return NULL;
 80147c8:	2300      	movs	r3, #0
}
 80147ca:	4618      	mov	r0, r3
 80147cc:	3710      	adds	r7, #16
 80147ce:	46bd      	mov	sp, r7
 80147d0:	bd80      	pop	{r7, pc}
 80147d2:	bf00      	nop
 80147d4:	f3af 8000 	nop.w
 80147d8:	00000000 	.word	0x00000000
 80147dc:	412e8480 	.word	0x412e8480
 80147e0:	20001df8 	.word	0x20001df8
 80147e4:	20001f4c 	.word	0x20001f4c
 80147e8:	20001ecc 	.word	0x20001ecc
 80147ec:	20001dec 	.word	0x20001dec
 80147f0:	20001f5c 	.word	0x20001f5c

080147f4 <_checkParam>:

static BOOL _checkParam(PifTaskMode* p_mode, uint16_t period)
{
 80147f4:	b480      	push	{r7}
 80147f6:	b083      	sub	sp, #12
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	6078      	str	r0, [r7, #4]
 80147fc:	460b      	mov	r3, r1
 80147fe:	807b      	strh	r3, [r7, #2]
	switch (*p_mode) {
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	781b      	ldrb	r3, [r3, #0]
 8014804:	2b09      	cmp	r3, #9
 8014806:	d848      	bhi.n	801489a <_checkParam+0xa6>
 8014808:	a201      	add	r2, pc, #4	; (adr r2, 8014810 <_checkParam+0x1c>)
 801480a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801480e:	bf00      	nop
 8014810:	08014839 	.word	0x08014839
 8014814:	080148a5 	.word	0x080148a5
 8014818:	0801485d 	.word	0x0801485d
 801481c:	0801486d 	.word	0x0801486d
 8014820:	0801485d 	.word	0x0801485d
 8014824:	0801486d 	.word	0x0801486d
 8014828:	0801488f 	.word	0x0801488f
 801482c:	080148a5 	.word	0x080148a5
 8014830:	080148a5 	.word	0x080148a5
 8014834:	0801485d 	.word	0x0801485d
    case TM_RATIO:
    	if (!period || period > 100) {
 8014838:	887b      	ldrh	r3, [r7, #2]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d002      	beq.n	8014844 <_checkParam+0x50>
 801483e:	887b      	ldrh	r3, [r7, #2]
 8014840:	2b64      	cmp	r3, #100	; 0x64
 8014842:	d904      	bls.n	801484e <_checkParam+0x5a>
    		pif_error = E_INVALID_PARAM;
 8014844:	4b1f      	ldr	r3, [pc, #124]	; (80148c4 <_checkParam+0xd0>)
 8014846:	2201      	movs	r2, #1
 8014848:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 801484a:	2300      	movs	r3, #0
 801484c:	e034      	b.n	80148b8 <_checkParam+0xc4>
    	}
    	else if (period == 100) {
 801484e:	887b      	ldrh	r3, [r7, #2]
 8014850:	2b64      	cmp	r3, #100	; 0x64
 8014852:	d129      	bne.n	80148a8 <_checkParam+0xb4>
    		*p_mode = TM_ALWAYS;
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	2201      	movs	r2, #1
 8014858:	701a      	strb	r2, [r3, #0]
    	}
    	break;
 801485a:	e025      	b.n	80148a8 <_checkParam+0xb4>

    case TM_PERIOD_MS:
    case TM_CHANGE_MS:
    case TM_IDLE_MS:
    	if (!period) {
 801485c:	887b      	ldrh	r3, [r7, #2]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d124      	bne.n	80148ac <_checkParam+0xb8>
    		pif_error = E_INVALID_PARAM;
 8014862:	4b18      	ldr	r3, [pc, #96]	; (80148c4 <_checkParam+0xd0>)
 8014864:	2201      	movs	r2, #1
 8014866:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8014868:	2300      	movs	r3, #0
 801486a:	e025      	b.n	80148b8 <_checkParam+0xc4>
    	}
    	break;

    case TM_PERIOD_US:
    case TM_CHANGE_US:
    	if (!period) {
 801486c:	887b      	ldrh	r3, [r7, #2]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d104      	bne.n	801487c <_checkParam+0x88>
    		pif_error = E_INVALID_PARAM;
 8014872:	4b14      	ldr	r3, [pc, #80]	; (80148c4 <_checkParam+0xd0>)
 8014874:	2201      	movs	r2, #1
 8014876:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8014878:	2300      	movs	r3, #0
 801487a:	e01d      	b.n	80148b8 <_checkParam+0xc4>
    	}

    	if (!pif_act_timer1us) {
 801487c:	4b12      	ldr	r3, [pc, #72]	; (80148c8 <_checkParam+0xd4>)
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d115      	bne.n	80148b0 <_checkParam+0xbc>
    		pif_error = E_CANNOT_USE;
 8014884:	4b0f      	ldr	r3, [pc, #60]	; (80148c4 <_checkParam+0xd0>)
 8014886:	2209      	movs	r2, #9
 8014888:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 801488a:	2300      	movs	r3, #0
 801488c:	e014      	b.n	80148b8 <_checkParam+0xc4>
        }
    	break;
    	
	case TM_EXTERNAL_CUTIN:
		if (s_task_cutin) return FALSE;
 801488e:	4b0f      	ldr	r3, [pc, #60]	; (80148cc <_checkParam+0xd8>)
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d00e      	beq.n	80148b4 <_checkParam+0xc0>
 8014896:	2300      	movs	r3, #0
 8014898:	e00e      	b.n	80148b8 <_checkParam+0xc4>
	case TM_ALWAYS:
	case TM_EXTERNAL_ORDER:
		break;

    default:
		pif_error = E_INVALID_PARAM;
 801489a:	4b0a      	ldr	r3, [pc, #40]	; (80148c4 <_checkParam+0xd0>)
 801489c:	2201      	movs	r2, #1
 801489e:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 80148a0:	2300      	movs	r3, #0
 80148a2:	e009      	b.n	80148b8 <_checkParam+0xc4>
		break;
 80148a4:	bf00      	nop
 80148a6:	e006      	b.n	80148b6 <_checkParam+0xc2>
    	break;
 80148a8:	bf00      	nop
 80148aa:	e004      	b.n	80148b6 <_checkParam+0xc2>
    	break;
 80148ac:	bf00      	nop
 80148ae:	e002      	b.n	80148b6 <_checkParam+0xc2>
    	break;
 80148b0:	bf00      	nop
 80148b2:	e000      	b.n	80148b6 <_checkParam+0xc2>
    	break;
 80148b4:	bf00      	nop
    }
	return TRUE;
 80148b6:	2301      	movs	r3, #1
}
 80148b8:	4618      	mov	r0, r3
 80148ba:	370c      	adds	r7, #12
 80148bc:	46bd      	mov	sp, r7
 80148be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c2:	4770      	bx	lr
 80148c4:	20001de0 	.word	0x20001de0
 80148c8:	20001e08 	.word	0x20001e08
 80148cc:	20001ec4 	.word	0x20001ec4

080148d0 <_setParam>:

static BOOL _setParam(PifTask* p_owner, PifTaskMode mode, uint16_t period)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b084      	sub	sp, #16
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
 80148d8:	460b      	mov	r3, r1
 80148da:	70fb      	strb	r3, [r7, #3]
 80148dc:	4613      	mov	r3, r2
 80148de:	803b      	strh	r3, [r7, #0]
	int num = -1;
 80148e0:	f04f 33ff 	mov.w	r3, #4294967295
 80148e4:	60fb      	str	r3, [r7, #12]

	if (mode == TM_RATIO) {
 80148e6:	78fb      	ldrb	r3, [r7, #3]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d10c      	bne.n	8014906 <_setParam+0x36>
    	num = _setTable(period, &mode);
 80148ec:	1cfa      	adds	r2, r7, #3
 80148ee:	883b      	ldrh	r3, [r7, #0]
 80148f0:	4611      	mov	r1, r2
 80148f2:	4618      	mov	r0, r3
 80148f4:	f7ff fdfa 	bl	80144ec <_setTable>
 80148f8:	60f8      	str	r0, [r7, #12]
    	if (num == -1) return FALSE;
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014900:	d101      	bne.n	8014906 <_setParam+0x36>
 8014902:	2300      	movs	r3, #0
 8014904:	e050      	b.n	80149a8 <_setParam+0xd8>
	}

    switch (mode) {
 8014906:	78fb      	ldrb	r3, [r7, #3]
 8014908:	2b09      	cmp	r3, #9
 801490a:	d845      	bhi.n	8014998 <_setParam+0xc8>
 801490c:	a201      	add	r2, pc, #4	; (adr r2, 8014914 <_setParam+0x44>)
 801490e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014912:	bf00      	nop
 8014914:	0801493d 	.word	0x0801493d
 8014918:	0801494b 	.word	0x0801494b
 801491c:	08014957 	.word	0x08014957
 8014920:	08014967 	.word	0x08014967
 8014924:	08014957 	.word	0x08014957
 8014928:	08014967 	.word	0x08014967
 801492c:	0801497b 	.word	0x0801497b
 8014930:	0801498d 	.word	0x0801498d
 8014934:	0801498d 	.word	0x0801498d
 8014938:	08014957 	.word	0x08014957
    case TM_RATIO:
    	p_owner->__table_number = num;
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	68fa      	ldr	r2, [r7, #12]
 8014940:	639a      	str	r2, [r3, #56]	; 0x38
    	p_owner->__processing = _processingRatio;
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	4a1a      	ldr	r2, [pc, #104]	; (80149b0 <_setParam+0xe0>)
 8014946:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 8014948:	e027      	b.n	801499a <_setParam+0xca>

    case TM_ALWAYS:
    	period = 100;
 801494a:	2364      	movs	r3, #100	; 0x64
 801494c:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = _processingAlways;
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	4a18      	ldr	r2, [pc, #96]	; (80149b4 <_setParam+0xe4>)
 8014952:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 8014954:	e021      	b.n	801499a <_setParam+0xca>

    case TM_PERIOD_MS:
    case TM_CHANGE_MS:
    case TM_IDLE_MS:
    	p_owner->__pretime = pif_cumulative_timer1ms;
 8014956:	4b18      	ldr	r3, [pc, #96]	; (80149b8 <_setParam+0xe8>)
 8014958:	681a      	ldr	r2, [r3, #0]
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	641a      	str	r2, [r3, #64]	; 0x40
    	p_owner->__processing = _processingPeriodMs;
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	4a16      	ldr	r2, [pc, #88]	; (80149bc <_setParam+0xec>)
 8014962:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 8014964:	e019      	b.n	801499a <_setParam+0xca>

    case TM_PERIOD_US:
    case TM_CHANGE_US:
    	p_owner->__pretime = (*pif_act_timer1us)();
 8014966:	4b16      	ldr	r3, [pc, #88]	; (80149c0 <_setParam+0xf0>)
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	4798      	blx	r3
 801496c:	4602      	mov	r2, r0
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	641a      	str	r2, [r3, #64]	; 0x40
    	p_owner->__processing = _processingPeriodUs;
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	4a13      	ldr	r2, [pc, #76]	; (80149c4 <_setParam+0xf4>)
 8014976:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 8014978:	e00f      	b.n	801499a <_setParam+0xca>

	case TM_EXTERNAL_CUTIN:
		s_task_cutin = p_owner;
 801497a:	4a13      	ldr	r2, [pc, #76]	; (80149c8 <_setParam+0xf8>)
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	6013      	str	r3, [r2, #0]
    	period = 0;
 8014980:	2300      	movs	r3, #0
 8014982:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = NULL;
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	2200      	movs	r2, #0
 8014988:	631a      	str	r2, [r3, #48]	; 0x30
		break;
 801498a:	e006      	b.n	801499a <_setParam+0xca>

	case TM_TIMER:
    case TM_EXTERNAL_ORDER:
    	period = 0;
 801498c:	2300      	movs	r3, #0
 801498e:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = NULL;
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	2200      	movs	r2, #0
 8014994:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 8014996:	e000      	b.n	801499a <_setParam+0xca>

    default:
    	break;
 8014998:	bf00      	nop
    }

    p_owner->_mode = mode;
 801499a:	78fa      	ldrb	r2, [r7, #3]
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	721a      	strb	r2, [r3, #8]
    p_owner->_period = period;
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	883a      	ldrh	r2, [r7, #0]
 80149a4:	815a      	strh	r2, [r3, #10]
	return TRUE;
 80149a6:	2301      	movs	r3, #1
}
 80149a8:	4618      	mov	r0, r3
 80149aa:	3710      	adds	r7, #16
 80149ac:	46bd      	mov	sp, r7
 80149ae:	bd80      	pop	{r7, pc}
 80149b0:	08014729 	.word	0x08014729
 80149b4:	08014655 	.word	0x08014655
 80149b8:	20001df8 	.word	0x20001df8
 80149bc:	080146e5 	.word	0x080146e5
 80149c0:	20001e08 	.word	0x20001e08
 80149c4:	08014699 	.word	0x08014699
 80149c8:	20001ec4 	.word	0x20001ec4

080149cc <_processingTask>:

static BOOL _processingTask(PifTask* p_owner)
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b086      	sub	sp, #24
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	6078      	str	r0, [r7, #4]
	uint16_t period;
	uint32_t start_time, execute_time;

	if (s_task_stack_ptr >= PIF_TASK_STACK_SIZE) return FALSE;
 80149d4:	4b43      	ldr	r3, [pc, #268]	; (8014ae4 <_processingTask+0x118>)
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	2b04      	cmp	r3, #4
 80149da:	dd01      	ble.n	80149e0 <_processingTask+0x14>
 80149dc:	2300      	movs	r3, #0
 80149de:	e07d      	b.n	8014adc <_processingTask+0x110>

#ifdef __PIF_DEBUG__
    if (pif_act_task_signal) (*pif_act_task_signal)(TRUE);
 80149e0:	4b41      	ldr	r3, [pc, #260]	; (8014ae8 <_processingTask+0x11c>)
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d003      	beq.n	80149f0 <_processingTask+0x24>
 80149e8:	4b3f      	ldr	r3, [pc, #252]	; (8014ae8 <_processingTask+0x11c>)
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	2001      	movs	r0, #1
 80149ee:	4798      	blx	r3
#endif

    s_task_stack[s_task_stack_ptr] = p_owner;
 80149f0:	4b3c      	ldr	r3, [pc, #240]	; (8014ae4 <_processingTask+0x118>)
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	493d      	ldr	r1, [pc, #244]	; (8014aec <_processingTask+0x120>)
 80149f6:	687a      	ldr	r2, [r7, #4]
 80149f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	s_task_stack_ptr++;
 80149fc:	4b39      	ldr	r3, [pc, #228]	; (8014ae4 <_processingTask+0x118>)
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	3301      	adds	r3, #1
 8014a02:	4a38      	ldr	r2, [pc, #224]	; (8014ae4 <_processingTask+0x118>)
 8014a04:	6013      	str	r3, [r2, #0]
	p_owner->_running = TRUE;
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	2201      	movs	r2, #1
 8014a0a:	725a      	strb	r2, [r3, #9]
	if (pif_act_timer1us) {
 8014a0c:	4b38      	ldr	r3, [pc, #224]	; (8014af0 <_processingTask+0x124>)
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d024      	beq.n	8014a5e <_processingTask+0x92>
		start_time = (*pif_act_timer1us)();
 8014a14:	4b36      	ldr	r3, [pc, #216]	; (8014af0 <_processingTask+0x124>)
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	4798      	blx	r3
 8014a1a:	6138      	str	r0, [r7, #16]
		period = (*p_owner->__evt_loop)(p_owner);
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014a20:	6878      	ldr	r0, [r7, #4]
 8014a22:	4798      	blx	r3
 8014a24:	4603      	mov	r3, r0
 8014a26:	82fb      	strh	r3, [r7, #22]
		execute_time = (*pif_act_timer1us)() - start_time;
 8014a28:	4b31      	ldr	r3, [pc, #196]	; (8014af0 <_processingTask+0x124>)
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	4798      	blx	r3
 8014a2e:	4602      	mov	r2, r0
 8014a30:	693b      	ldr	r3, [r7, #16]
 8014a32:	1ad3      	subs	r3, r2, r3
 8014a34:	60fb      	str	r3, [r7, #12]
		p_owner->_execution_count++;
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	699b      	ldr	r3, [r3, #24]
 8014a3a:	1c5a      	adds	r2, r3, #1
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	619a      	str	r2, [r3, #24]
		if (execute_time > p_owner->_max_execution_time) p_owner->_max_execution_time = execute_time;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	691b      	ldr	r3, [r3, #16]
 8014a44:	68fa      	ldr	r2, [r7, #12]
 8014a46:	429a      	cmp	r2, r3
 8014a48:	d902      	bls.n	8014a50 <_processingTask+0x84>
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	68fa      	ldr	r2, [r7, #12]
 8014a4e:	611a      	str	r2, [r3, #16]
		p_owner->_total_execution_time += execute_time;
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	695a      	ldr	r2, [r3, #20]
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	441a      	add	r2, r3
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	615a      	str	r2, [r3, #20]
 8014a5c:	e005      	b.n	8014a6a <_processingTask+0x9e>
	}
	else {
		period = (*p_owner->__evt_loop)(p_owner);
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014a62:	6878      	ldr	r0, [r7, #4]
 8014a64:	4798      	blx	r3
 8014a66:	4603      	mov	r3, r0
 8014a68:	82fb      	strh	r3, [r7, #22]
	}
	p_owner->_running = FALSE;
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	725a      	strb	r2, [r3, #9]
	s_task_stack_ptr--;
 8014a70:	4b1c      	ldr	r3, [pc, #112]	; (8014ae4 <_processingTask+0x118>)
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	3b01      	subs	r3, #1
 8014a76:	4a1b      	ldr	r2, [pc, #108]	; (8014ae4 <_processingTask+0x118>)
 8014a78:	6013      	str	r3, [r2, #0]
	s_task_stack[s_task_stack_ptr] = NULL;
 8014a7a:	4b1a      	ldr	r3, [pc, #104]	; (8014ae4 <_processingTask+0x118>)
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	4a1b      	ldr	r2, [pc, #108]	; (8014aec <_processingTask+0x120>)
 8014a80:	2100      	movs	r1, #0
 8014a82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#ifdef __PIF_DEBUG__
    if (pif_act_task_signal) (*pif_act_task_signal)(FALSE);
 8014a86:	4b18      	ldr	r3, [pc, #96]	; (8014ae8 <_processingTask+0x11c>)
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d003      	beq.n	8014a96 <_processingTask+0xca>
 8014a8e:	4b16      	ldr	r3, [pc, #88]	; (8014ae8 <_processingTask+0x11c>)
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	2000      	movs	r0, #0
 8014a94:	4798      	blx	r3
#endif

	switch (p_owner->_mode) {
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	7a1b      	ldrb	r3, [r3, #8]
 8014a9a:	2b04      	cmp	r3, #4
 8014a9c:	d002      	beq.n	8014aa4 <_processingTask+0xd8>
 8014a9e:	2b05      	cmp	r3, #5
 8014aa0:	d00b      	beq.n	8014aba <_processingTask+0xee>
			p_owner->__pretime = (*pif_act_timer1us)();
		}
		break;

	default:
		break;
 8014aa2:	e01a      	b.n	8014ada <_processingTask+0x10e>
		if (period > 0) {
 8014aa4:	8afb      	ldrh	r3, [r7, #22]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d014      	beq.n	8014ad4 <_processingTask+0x108>
			p_owner->_period = period;
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	8afa      	ldrh	r2, [r7, #22]
 8014aae:	815a      	strh	r2, [r3, #10]
			p_owner->__pretime = pif_cumulative_timer1ms;
 8014ab0:	4b10      	ldr	r3, [pc, #64]	; (8014af4 <_processingTask+0x128>)
 8014ab2:	681a      	ldr	r2, [r3, #0]
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8014ab8:	e00c      	b.n	8014ad4 <_processingTask+0x108>
		if (period > 0) {
 8014aba:	8afb      	ldrh	r3, [r7, #22]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d00b      	beq.n	8014ad8 <_processingTask+0x10c>
			p_owner->_period = period;
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	8afa      	ldrh	r2, [r7, #22]
 8014ac4:	815a      	strh	r2, [r3, #10]
			p_owner->__pretime = (*pif_act_timer1us)();
 8014ac6:	4b0a      	ldr	r3, [pc, #40]	; (8014af0 <_processingTask+0x124>)
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	4798      	blx	r3
 8014acc:	4602      	mov	r2, r0
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8014ad2:	e001      	b.n	8014ad8 <_processingTask+0x10c>
		break;
 8014ad4:	bf00      	nop
 8014ad6:	e000      	b.n	8014ada <_processingTask+0x10e>
		break;
 8014ad8:	bf00      	nop
	}
	return TRUE;
 8014ada:	2301      	movs	r3, #1
}
 8014adc:	4618      	mov	r0, r3
 8014ade:	3718      	adds	r7, #24
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bd80      	pop	{r7, pc}
 8014ae4:	20001ec0 	.word	0x20001ec0
 8014ae8:	20001e8c 	.word	0x20001e8c
 8014aec:	20001eac 	.word	0x20001eac
 8014af0:	20001e08 	.word	0x20001e08
 8014af4:	20001df8 	.word	0x20001df8

08014af8 <_checkLoopTime>:

static void _checkLoopTime()
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b084      	sub	sp, #16
 8014afc:	af02      	add	r7, sp, #8
#endif
#ifdef __PIF_DEBUG__
	static uint32_t pretime = 0UL;
	static uint32_t max_loop = 0UL;

	if (pif_act_timer1us) {
 8014afe:	4b46      	ldr	r3, [pc, #280]	; (8014c18 <_checkLoopTime+0x120>)
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d015      	beq.n	8014b32 <_checkLoopTime+0x3a>
		value = (*pif_act_timer1us)() - pretime;
 8014b06:	4b44      	ldr	r3, [pc, #272]	; (8014c18 <_checkLoopTime+0x120>)
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	4798      	blx	r3
 8014b0c:	4602      	mov	r2, r0
 8014b0e:	4b43      	ldr	r3, [pc, #268]	; (8014c1c <_checkLoopTime+0x124>)
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	1ad3      	subs	r3, r2, r3
 8014b14:	607b      	str	r3, [r7, #4]
		if (value > pif_performance.__max_loop_time1us) {
 8014b16:	4b42      	ldr	r3, [pc, #264]	; (8014c20 <_checkLoopTime+0x128>)
 8014b18:	689b      	ldr	r3, [r3, #8]
 8014b1a:	687a      	ldr	r2, [r7, #4]
 8014b1c:	429a      	cmp	r2, r3
 8014b1e:	d902      	bls.n	8014b26 <_checkLoopTime+0x2e>
			pif_performance.__max_loop_time1us = value;
 8014b20:	4a3f      	ldr	r2, [pc, #252]	; (8014c20 <_checkLoopTime+0x128>)
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	6093      	str	r3, [r2, #8]
		}
		pretime = (*pif_act_timer1us)();
 8014b26:	4b3c      	ldr	r3, [pc, #240]	; (8014c18 <_checkLoopTime+0x120>)
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	4798      	blx	r3
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	4a3b      	ldr	r2, [pc, #236]	; (8014c1c <_checkLoopTime+0x124>)
 8014b30:	6013      	str	r3, [r2, #0]
	}
#endif

	pif_performance._count++;
 8014b32:	4b3b      	ldr	r3, [pc, #236]	; (8014c20 <_checkLoopTime+0x128>)
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	3301      	adds	r3, #1
 8014b38:	4a39      	ldr	r2, [pc, #228]	; (8014c20 <_checkLoopTime+0x128>)
 8014b3a:	6013      	str	r3, [r2, #0]

	if (pif_performance.__state & 1) {		// 1ms
 8014b3c:	4b38      	ldr	r3, [pc, #224]	; (8014c20 <_checkLoopTime+0x128>)
 8014b3e:	795b      	ldrb	r3, [r3, #5]
 8014b40:	f003 0301 	and.w	r3, r3, #1
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d022      	beq.n	8014b8e <_checkLoopTime+0x96>
		if (timer_10ms) timer_10ms--;
 8014b48:	4b36      	ldr	r3, [pc, #216]	; (8014c24 <_checkLoopTime+0x12c>)
 8014b4a:	781b      	ldrb	r3, [r3, #0]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d006      	beq.n	8014b5e <_checkLoopTime+0x66>
 8014b50:	4b34      	ldr	r3, [pc, #208]	; (8014c24 <_checkLoopTime+0x12c>)
 8014b52:	781b      	ldrb	r3, [r3, #0]
 8014b54:	3b01      	subs	r3, #1
 8014b56:	b2da      	uxtb	r2, r3
 8014b58:	4b32      	ldr	r3, [pc, #200]	; (8014c24 <_checkLoopTime+0x12c>)
 8014b5a:	701a      	strb	r2, [r3, #0]
 8014b5c:	e017      	b.n	8014b8e <_checkLoopTime+0x96>
		else {
			timer_10ms = 9;
 8014b5e:	4b31      	ldr	r3, [pc, #196]	; (8014c24 <_checkLoopTime+0x12c>)
 8014b60:	2209      	movs	r2, #9
 8014b62:	701a      	strb	r2, [r3, #0]

			pif_performance._use_rate = 100 - 100 * s_pass_count / s_loop_count;
 8014b64:	4b30      	ldr	r3, [pc, #192]	; (8014c28 <_checkLoopTime+0x130>)
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	2264      	movs	r2, #100	; 0x64
 8014b6a:	fb03 f202 	mul.w	r2, r3, r2
 8014b6e:	4b2f      	ldr	r3, [pc, #188]	; (8014c2c <_checkLoopTime+0x134>)
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8014b76:	b2db      	uxtb	r3, r3
 8014b78:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8014b7c:	b2da      	uxtb	r2, r3
 8014b7e:	4b28      	ldr	r3, [pc, #160]	; (8014c20 <_checkLoopTime+0x128>)
 8014b80:	711a      	strb	r2, [r3, #4]
			s_loop_count = 0UL;
 8014b82:	4b2a      	ldr	r3, [pc, #168]	; (8014c2c <_checkLoopTime+0x134>)
 8014b84:	2200      	movs	r2, #0
 8014b86:	601a      	str	r2, [r3, #0]
			s_pass_count = 0UL;
 8014b88:	4b27      	ldr	r3, [pc, #156]	; (8014c28 <_checkLoopTime+0x130>)
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	601a      	str	r2, [r3, #0]
		}
	}

	if (pif_performance.__state & 2) {		// 1sec
 8014b8e:	4b24      	ldr	r3, [pc, #144]	; (8014c20 <_checkLoopTime+0x128>)
 8014b90:	795b      	ldrb	r3, [r3, #5]
 8014b92:	f003 0302 	and.w	r3, r3, #2
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d027      	beq.n	8014bea <_checkLoopTime+0xf2>
#ifdef __PIF_DEBUG__
		if (pif_performance.__max_loop_time1us > max_loop) max_loop = pif_performance.__max_loop_time1us;
 8014b9a:	4b21      	ldr	r3, [pc, #132]	; (8014c20 <_checkLoopTime+0x128>)
 8014b9c:	689a      	ldr	r2, [r3, #8]
 8014b9e:	4b24      	ldr	r3, [pc, #144]	; (8014c30 <_checkLoopTime+0x138>)
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	429a      	cmp	r2, r3
 8014ba4:	d903      	bls.n	8014bae <_checkLoopTime+0xb6>
 8014ba6:	4b1e      	ldr	r3, [pc, #120]	; (8014c20 <_checkLoopTime+0x128>)
 8014ba8:	689b      	ldr	r3, [r3, #8]
 8014baa:	4a21      	ldr	r2, [pc, #132]	; (8014c30 <_checkLoopTime+0x138>)
 8014bac:	6013      	str	r3, [r2, #0]
	#ifndef __PIF_NO_LOG__
		if (pif_log_flag.bt.performance) {
 8014bae:	4b21      	ldr	r3, [pc, #132]	; (8014c34 <_checkLoopTime+0x13c>)
 8014bb0:	781b      	ldrb	r3, [r3, #0]
 8014bb2:	f003 0301 	and.w	r3, r3, #1
 8014bb6:	b2db      	uxtb	r3, r3
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d010      	beq.n	8014bde <_checkLoopTime+0xe6>
			value = 1000000L / pif_performance._count;
 8014bbc:	4b18      	ldr	r3, [pc, #96]	; (8014c20 <_checkLoopTime+0x128>)
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	4a1d      	ldr	r2, [pc, #116]	; (8014c38 <_checkLoopTime+0x140>)
 8014bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8014bc6:	607b      	str	r3, [r7, #4]
        	pifLog_Printf(LT_INFO, "LT:%uns(%lur/s) MLT=%luus", value, pif_performance._count, pif_performance.__max_loop_time1us);
 8014bc8:	4b15      	ldr	r3, [pc, #84]	; (8014c20 <_checkLoopTime+0x128>)
 8014bca:	681a      	ldr	r2, [r3, #0]
 8014bcc:	4b14      	ldr	r3, [pc, #80]	; (8014c20 <_checkLoopTime+0x128>)
 8014bce:	689b      	ldr	r3, [r3, #8]
 8014bd0:	9300      	str	r3, [sp, #0]
 8014bd2:	4613      	mov	r3, r2
 8014bd4:	687a      	ldr	r2, [r7, #4]
 8014bd6:	4919      	ldr	r1, [pc, #100]	; (8014c3c <_checkLoopTime+0x144>)
 8014bd8:	2002      	movs	r0, #2
 8014bda:	f7ff f80d 	bl	8013bf8 <pifLog_Printf>
		}
	#endif
		pif_performance.__max_loop_time1us = 0UL;
 8014bde:	4b10      	ldr	r3, [pc, #64]	; (8014c20 <_checkLoopTime+0x128>)
 8014be0:	2200      	movs	r2, #0
 8014be2:	609a      	str	r2, [r3, #8]
			value = 1000000L / pif_performance._count;
        	pifLog_Printf(LT_INFO, "LT:%uns(%lur/s)", value, pif_performance._count);
        }
	#endif
#endif
    	pif_performance._count = 0;
 8014be4:	4b0e      	ldr	r3, [pc, #56]	; (8014c20 <_checkLoopTime+0x128>)
 8014be6:	2200      	movs	r2, #0
 8014be8:	601a      	str	r2, [r3, #0]
	}

#ifdef __PIF_DEBUG__
	if (pif_performance.__state & 4) {		// 1min
 8014bea:	4b0d      	ldr	r3, [pc, #52]	; (8014c20 <_checkLoopTime+0x128>)
 8014bec:	795b      	ldrb	r3, [r3, #5]
 8014bee:	f003 0304 	and.w	r3, r3, #4
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d009      	beq.n	8014c0a <_checkLoopTime+0x112>
	#ifndef __PIF_NO_LOG__
    	pifLog_Printf(LT_INFO, "MLT=%luus", max_loop);
 8014bf6:	4b0e      	ldr	r3, [pc, #56]	; (8014c30 <_checkLoopTime+0x138>)
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	461a      	mov	r2, r3
 8014bfc:	4910      	ldr	r1, [pc, #64]	; (8014c40 <_checkLoopTime+0x148>)
 8014bfe:	2002      	movs	r0, #2
 8014c00:	f7fe fffa 	bl	8013bf8 <pifLog_Printf>
	#endif
		max_loop = 0UL;
 8014c04:	4b0a      	ldr	r3, [pc, #40]	; (8014c30 <_checkLoopTime+0x138>)
 8014c06:	2200      	movs	r2, #0
 8014c08:	601a      	str	r2, [r3, #0]
    }
#endif

	pif_performance.__state = 0;
 8014c0a:	4b05      	ldr	r3, [pc, #20]	; (8014c20 <_checkLoopTime+0x128>)
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	715a      	strb	r2, [r3, #5]
}
 8014c10:	bf00      	nop
 8014c12:	3708      	adds	r7, #8
 8014c14:	46bd      	mov	sp, r7
 8014c16:	bd80      	pop	{r7, pc}
 8014c18:	20001e08 	.word	0x20001e08
 8014c1c:	20001f60 	.word	0x20001f60
 8014c20:	20001dfc 	.word	0x20001dfc
 8014c24:	20001f64 	.word	0x20001f64
 8014c28:	20001f54 	.word	0x20001f54
 8014c2c:	20001f50 	.word	0x20001f50
 8014c30:	20001f68 	.word	0x20001f68
 8014c34:	20001e0c 	.word	0x20001e0c
 8014c38:	000f4240 	.word	0x000f4240
 8014c3c:	08028988 	.word	0x08028988
 8014c40:	080289a4 	.word	0x080289a4

08014c44 <pifTask_Init>:


void pifTask_Init(PifTask* p_owner)
{
 8014c44:	b480      	push	{r7}
 8014c46:	b083      	sub	sp, #12
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
    pif_id++;
 8014c4c:	4b07      	ldr	r3, [pc, #28]	; (8014c6c <pifTask_Init+0x28>)
 8014c4e:	881b      	ldrh	r3, [r3, #0]
 8014c50:	3301      	adds	r3, #1
 8014c52:	b29a      	uxth	r2, r3
 8014c54:	4b05      	ldr	r3, [pc, #20]	; (8014c6c <pifTask_Init+0x28>)
 8014c56:	801a      	strh	r2, [r3, #0]
    p_owner->_id = pif_id;
 8014c58:	4b04      	ldr	r3, [pc, #16]	; (8014c6c <pifTask_Init+0x28>)
 8014c5a:	881a      	ldrh	r2, [r3, #0]
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	80da      	strh	r2, [r3, #6]
}
 8014c60:	bf00      	nop
 8014c62:	370c      	adds	r7, #12
 8014c64:	46bd      	mov	sp, r7
 8014c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c6a:	4770      	bx	lr
 8014c6c:	20000128 	.word	0x20000128

08014c70 <pifTask_ChangeMode>:

BOOL pifTask_ChangeMode(PifTask* p_owner, PifTaskMode mode, uint16_t period)
{
 8014c70:	b580      	push	{r7, lr}
 8014c72:	b082      	sub	sp, #8
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	6078      	str	r0, [r7, #4]
 8014c78:	460b      	mov	r3, r1
 8014c7a:	70fb      	strb	r3, [r7, #3]
 8014c7c:	4613      	mov	r3, r2
 8014c7e:	803b      	strh	r3, [r7, #0]
	if (mode == p_owner->_mode) return TRUE;
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	7a1a      	ldrb	r2, [r3, #8]
 8014c84:	78fb      	ldrb	r3, [r7, #3]
 8014c86:	429a      	cmp	r2, r3
 8014c88:	d101      	bne.n	8014c8e <pifTask_ChangeMode+0x1e>
 8014c8a:	2301      	movs	r3, #1
 8014c8c:	e028      	b.n	8014ce0 <pifTask_ChangeMode+0x70>

	if (p_owner->_mode == TM_EXTERNAL_CUTIN) s_task_cutin = NULL;
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	7a1b      	ldrb	r3, [r3, #8]
 8014c92:	2b06      	cmp	r3, #6
 8014c94:	d102      	bne.n	8014c9c <pifTask_ChangeMode+0x2c>
 8014c96:	4b14      	ldr	r3, [pc, #80]	; (8014ce8 <pifTask_ChangeMode+0x78>)
 8014c98:	2200      	movs	r2, #0
 8014c9a:	601a      	str	r2, [r3, #0]

	if (!_checkParam(&mode, period)) return FALSE;
 8014c9c:	883a      	ldrh	r2, [r7, #0]
 8014c9e:	1cfb      	adds	r3, r7, #3
 8014ca0:	4611      	mov	r1, r2
 8014ca2:	4618      	mov	r0, r3
 8014ca4:	f7ff fda6 	bl	80147f4 <_checkParam>
 8014ca8:	4603      	mov	r3, r0
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d101      	bne.n	8014cb2 <pifTask_ChangeMode+0x42>
 8014cae:	2300      	movs	r3, #0
 8014cb0:	e016      	b.n	8014ce0 <pifTask_ChangeMode+0x70>

	switch (p_owner->_mode) {
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	7a1b      	ldrb	r3, [r3, #8]
 8014cb6:	2b01      	cmp	r3, #1
 8014cb8:	d805      	bhi.n	8014cc6 <pifTask_ChangeMode+0x56>
	case TM_RATIO:
	case TM_ALWAYS:
		_resetTable(p_owner->__table_number);
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	f7ff fc9a 	bl	80145f8 <_resetTable>
		break;
 8014cc4:	e000      	b.n	8014cc8 <pifTask_ChangeMode+0x58>

	default:
		break;
 8014cc6:	bf00      	nop
	}

	if (!_setParam(p_owner, mode, period)) return FALSE;
 8014cc8:	78fb      	ldrb	r3, [r7, #3]
 8014cca:	883a      	ldrh	r2, [r7, #0]
 8014ccc:	4619      	mov	r1, r3
 8014cce:	6878      	ldr	r0, [r7, #4]
 8014cd0:	f7ff fdfe 	bl	80148d0 <_setParam>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d101      	bne.n	8014cde <pifTask_ChangeMode+0x6e>
 8014cda:	2300      	movs	r3, #0
 8014cdc:	e000      	b.n	8014ce0 <pifTask_ChangeMode+0x70>

    return TRUE;
 8014cde:	2301      	movs	r3, #1
}
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	3708      	adds	r7, #8
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	bd80      	pop	{r7, pc}
 8014ce8:	20001ec4 	.word	0x20001ec4

08014cec <pifTask_ChangePeriod>:

BOOL pifTask_ChangePeriod(PifTask* p_owner, uint16_t period)
{
 8014cec:	b480      	push	{r7}
 8014cee:	b083      	sub	sp, #12
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
 8014cf4:	460b      	mov	r3, r1
 8014cf6:	807b      	strh	r3, [r7, #2]
	switch (p_owner->_mode) {
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	7a1b      	ldrb	r3, [r3, #8]
 8014cfc:	2b03      	cmp	r3, #3
 8014cfe:	dc02      	bgt.n	8014d06 <pifTask_ChangePeriod+0x1a>
 8014d00:	2b02      	cmp	r3, #2
 8014d02:	da02      	bge.n	8014d0a <pifTask_ChangePeriod+0x1e>
 8014d04:	e007      	b.n	8014d16 <pifTask_ChangePeriod+0x2a>
 8014d06:	2b09      	cmp	r3, #9
 8014d08:	d105      	bne.n	8014d16 <pifTask_ChangePeriod+0x2a>
	case TM_PERIOD_MS:
	case TM_PERIOD_US:
	case TM_IDLE_MS:
		p_owner->_period = period;
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	887a      	ldrh	r2, [r7, #2]
 8014d0e:	815a      	strh	r2, [r3, #10]
		break;
 8014d10:	bf00      	nop

	default:
		pif_error = E_CANNOT_USE;
		return FALSE;
	}
	return TRUE;
 8014d12:	2301      	movs	r3, #1
 8014d14:	e003      	b.n	8014d1e <pifTask_ChangePeriod+0x32>
		pif_error = E_CANNOT_USE;
 8014d16:	4b05      	ldr	r3, [pc, #20]	; (8014d2c <pifTask_ChangePeriod+0x40>)
 8014d18:	2209      	movs	r2, #9
 8014d1a:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8014d1c:	2300      	movs	r3, #0
}
 8014d1e:	4618      	mov	r0, r3
 8014d20:	370c      	adds	r7, #12
 8014d22:	46bd      	mov	sp, r7
 8014d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d28:	4770      	bx	lr
 8014d2a:	bf00      	nop
 8014d2c:	20001de0 	.word	0x20001de0

08014d30 <pifTask_SetTrigger>:

BOOL pifTask_SetTrigger(PifTask* p_owner)
{
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b082      	sub	sp, #8
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	6078      	str	r0, [r7, #4]
	if (p_owner) {
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d014      	beq.n	8014d68 <pifTask_SetTrigger+0x38>
		if (pif_act_timer1us) p_owner->__trigger_time = (*pif_act_timer1us)();
 8014d3e:	4b0d      	ldr	r3, [pc, #52]	; (8014d74 <pifTask_SetTrigger+0x44>)
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d006      	beq.n	8014d54 <pifTask_SetTrigger+0x24>
 8014d46:	4b0b      	ldr	r3, [pc, #44]	; (8014d74 <pifTask_SetTrigger+0x44>)
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	4798      	blx	r3
 8014d4c:	4602      	mov	r2, r0
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	649a      	str	r2, [r3, #72]	; 0x48
 8014d52:	e003      	b.n	8014d5c <pifTask_SetTrigger+0x2c>
		else p_owner->__trigger_time = pif_cumulative_timer1ms;
 8014d54:	4b08      	ldr	r3, [pc, #32]	; (8014d78 <pifTask_SetTrigger+0x48>)
 8014d56:	681a      	ldr	r2, [r3, #0]
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	649a      	str	r2, [r3, #72]	; 0x48
		p_owner->__trigger = TRUE;
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	2201      	movs	r2, #1
 8014d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		return TRUE;
 8014d64:	2301      	movs	r3, #1
 8014d66:	e000      	b.n	8014d6a <pifTask_SetTrigger+0x3a>
	}
	return FALSE;
 8014d68:	2300      	movs	r3, #0
}
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	3708      	adds	r7, #8
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	bd80      	pop	{r7, pc}
 8014d72:	bf00      	nop
 8014d74:	20001e08 	.word	0x20001e08
 8014d78:	20001df8 	.word	0x20001df8

08014d7c <pifTask_GetDeltaTime>:
		break;
	}
}

uint32_t pifTask_GetDeltaTime(PifTask* p_owner, BOOL reset)
{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b084      	sub	sp, #16
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
 8014d84:	460b      	mov	r3, r1
 8014d86:	70fb      	strb	r3, [r7, #3]
	uint32_t currect, delta;

    if (!pif_act_timer1us) {
 8014d88:	4b17      	ldr	r3, [pc, #92]	; (8014de8 <pifTask_GetDeltaTime+0x6c>)
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d107      	bne.n	8014da0 <pifTask_GetDeltaTime+0x24>
		currect = pif_cumulative_timer1ms * 1000;
 8014d90:	4b16      	ldr	r3, [pc, #88]	; (8014dec <pifTask_GetDeltaTime+0x70>)
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014d98:	fb02 f303 	mul.w	r3, r2, r3
 8014d9c:	60fb      	str	r3, [r7, #12]
 8014d9e:	e003      	b.n	8014da8 <pifTask_GetDeltaTime+0x2c>
	}
	else {
		currect = (*pif_act_timer1us)();
 8014da0:	4b11      	ldr	r3, [pc, #68]	; (8014de8 <pifTask_GetDeltaTime+0x6c>)
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	4798      	blx	r3
 8014da6:	60f8      	str	r0, [r7, #12]
	}
	delta = currect - p_owner->__last_execute_time;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014dac:	68fa      	ldr	r2, [r7, #12]
 8014dae:	1ad3      	subs	r3, r2, r3
 8014db0:	60bb      	str	r3, [r7, #8]
	if (reset) {
 8014db2:	78fb      	ldrb	r3, [r7, #3]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d011      	beq.n	8014ddc <pifTask_GetDeltaTime+0x60>
		if (p_owner->__last_execute_time) {
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d00a      	beq.n	8014dd6 <pifTask_GetDeltaTime+0x5a>
			p_owner->_total_period_time += delta;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	69da      	ldr	r2, [r3, #28]
 8014dc4:	68bb      	ldr	r3, [r7, #8]
 8014dc6:	441a      	add	r2, r3
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	61da      	str	r2, [r3, #28]
			p_owner->_period_count++;
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	6a1b      	ldr	r3, [r3, #32]
 8014dd0:	1c5a      	adds	r2, r3, #1
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	621a      	str	r2, [r3, #32]
		}
		p_owner->__last_execute_time = currect;
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	68fa      	ldr	r2, [r7, #12]
 8014dda:	645a      	str	r2, [r3, #68]	; 0x44
	}
	return delta;
 8014ddc:	68bb      	ldr	r3, [r7, #8]
}
 8014dde:	4618      	mov	r0, r3
 8014de0:	3710      	adds	r7, #16
 8014de2:	46bd      	mov	sp, r7
 8014de4:	bd80      	pop	{r7, pc}
 8014de6:	bf00      	nop
 8014de8:	20001e08 	.word	0x20001e08
 8014dec:	20001df8 	.word	0x20001df8

08014df0 <pifTaskManager_Init>:


BOOL pifTaskManager_Init(int max_count)
{
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b082      	sub	sp, #8
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
	if (!pifFixList_Init(&s_tasks, sizeof(PifTask), max_count)) return FALSE;
 8014df8:	687a      	ldr	r2, [r7, #4]
 8014dfa:	2158      	movs	r1, #88	; 0x58
 8014dfc:	480b      	ldr	r0, [pc, #44]	; (8014e2c <pifTaskManager_Init+0x3c>)
 8014dfe:	f7fd ffcb 	bl	8012d98 <pifFixList_Init>
 8014e02:	4603      	mov	r3, r0
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d101      	bne.n	8014e0c <pifTaskManager_Init+0x1c>
 8014e08:	2300      	movs	r3, #0
 8014e0a:	e00b      	b.n	8014e24 <pifTaskManager_Init+0x34>
	s_it_current = NULL;
 8014e0c:	4b08      	ldr	r3, [pc, #32]	; (8014e30 <pifTaskManager_Init+0x40>)
 8014e0e:	2200      	movs	r2, #0
 8014e10:	601a      	str	r2, [r3, #0]

	s_table_number = 0L;
 8014e12:	4b08      	ldr	r3, [pc, #32]	; (8014e34 <pifTaskManager_Init+0x44>)
 8014e14:	2200      	movs	r2, #0
 8014e16:	601a      	str	r2, [r3, #0]
	memset(s_table, 0, sizeof(s_table));
 8014e18:	2280      	movs	r2, #128	; 0x80
 8014e1a:	2100      	movs	r1, #0
 8014e1c:	4806      	ldr	r0, [pc, #24]	; (8014e38 <pifTaskManager_Init+0x48>)
 8014e1e:	f00f f84d 	bl	8023ebc <memset>
	return TRUE;
 8014e22:	2301      	movs	r3, #1
}
 8014e24:	4618      	mov	r0, r3
 8014e26:	3708      	adds	r7, #8
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bd80      	pop	{r7, pc}
 8014e2c:	20001e90 	.word	0x20001e90
 8014e30:	20001ea8 	.word	0x20001ea8
 8014e34:	20001ec8 	.word	0x20001ec8
 8014e38:	20001ecc 	.word	0x20001ecc

08014e3c <pifTaskManager_Add>:
{
	pifFixList_Clear(&s_tasks, NULL);
}

PifTask* pifTaskManager_Add(PifTaskMode mode, uint16_t period, PifEvtTaskLoop evt_loop, void* p_client, BOOL start)
{
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	b086      	sub	sp, #24
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	60ba      	str	r2, [r7, #8]
 8014e44:	607b      	str	r3, [r7, #4]
 8014e46:	4603      	mov	r3, r0
 8014e48:	73fb      	strb	r3, [r7, #15]
 8014e4a:	460b      	mov	r3, r1
 8014e4c:	81bb      	strh	r3, [r7, #12]
	if (!evt_loop) {
 8014e4e:	68bb      	ldr	r3, [r7, #8]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d104      	bne.n	8014e5e <pifTaskManager_Add+0x22>
        pif_error = E_INVALID_PARAM;
 8014e54:	4b2a      	ldr	r3, [pc, #168]	; (8014f00 <pifTaskManager_Add+0xc4>)
 8014e56:	2201      	movs	r2, #1
 8014e58:	701a      	strb	r2, [r3, #0]
	    return NULL;
 8014e5a:	2300      	movs	r3, #0
 8014e5c:	e04b      	b.n	8014ef6 <pifTaskManager_Add+0xba>
	}

	if (!_checkParam(&mode, period)) return NULL;
 8014e5e:	89ba      	ldrh	r2, [r7, #12]
 8014e60:	f107 030f 	add.w	r3, r7, #15
 8014e64:	4611      	mov	r1, r2
 8014e66:	4618      	mov	r0, r3
 8014e68:	f7ff fcc4 	bl	80147f4 <_checkParam>
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d101      	bne.n	8014e76 <pifTaskManager_Add+0x3a>
 8014e72:	2300      	movs	r3, #0
 8014e74:	e03f      	b.n	8014ef6 <pifTaskManager_Add+0xba>

	PifTask* p_owner = (PifTask*)pifFixList_AddFirst(&s_tasks);
 8014e76:	4823      	ldr	r0, [pc, #140]	; (8014f04 <pifTaskManager_Add+0xc8>)
 8014e78:	f7fe f821 	bl	8012ebe <pifFixList_AddFirst>
 8014e7c:	6178      	str	r0, [r7, #20]
	if (!p_owner) return NULL;
 8014e7e:	697b      	ldr	r3, [r7, #20]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d101      	bne.n	8014e88 <pifTaskManager_Add+0x4c>
 8014e84:	2300      	movs	r3, #0
 8014e86:	e036      	b.n	8014ef6 <pifTaskManager_Add+0xba>

	pifTask_Init(p_owner);
 8014e88:	6978      	ldr	r0, [r7, #20]
 8014e8a:	f7ff fedb 	bl	8014c44 <pifTask_Init>

	if (!_setParam(p_owner, mode, period)) goto fail;
 8014e8e:	7bfb      	ldrb	r3, [r7, #15]
 8014e90:	89ba      	ldrh	r2, [r7, #12]
 8014e92:	4619      	mov	r1, r3
 8014e94:	6978      	ldr	r0, [r7, #20]
 8014e96:	f7ff fd1b 	bl	80148d0 <_setParam>
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d021      	beq.n	8014ee4 <pifTaskManager_Add+0xa8>

    p_owner->__evt_loop = evt_loop;
 8014ea0:	697b      	ldr	r3, [r7, #20]
 8014ea2:	68ba      	ldr	r2, [r7, #8]
 8014ea4:	655a      	str	r2, [r3, #84]	; 0x54
    p_owner->_p_client = p_client;
 8014ea6:	697b      	ldr	r3, [r7, #20]
 8014ea8:	687a      	ldr	r2, [r7, #4]
 8014eaa:	60da      	str	r2, [r3, #12]
    p_owner->pause = (mode != TM_EXTERNAL_ORDER && mode != TM_EXTERNAL_CUTIN) ? !start : TRUE;
 8014eac:	7bfb      	ldrb	r3, [r7, #15]
 8014eae:	2b07      	cmp	r3, #7
 8014eb0:	d006      	beq.n	8014ec0 <pifTaskManager_Add+0x84>
 8014eb2:	7bfb      	ldrb	r3, [r7, #15]
 8014eb4:	2b06      	cmp	r3, #6
 8014eb6:	d003      	beq.n	8014ec0 <pifTaskManager_Add+0x84>
 8014eb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d101      	bne.n	8014ec4 <pifTaskManager_Add+0x88>
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	e000      	b.n	8014ec6 <pifTaskManager_Add+0x8a>
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	b2da      	uxtb	r2, r3
 8014ec8:	697b      	ldr	r3, [r7, #20]
 8014eca:	711a      	strb	r2, [r3, #4]
    if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
 8014ecc:	4b0e      	ldr	r3, [pc, #56]	; (8014f08 <pifTaskManager_Add+0xcc>)
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d105      	bne.n	8014ee0 <pifTaskManager_Add+0xa4>
 8014ed4:	480b      	ldr	r0, [pc, #44]	; (8014f04 <pifTaskManager_Add+0xc8>)
 8014ed6:	f7fe f866 	bl	8012fa6 <pifFixList_Begin>
 8014eda:	4603      	mov	r3, r0
 8014edc:	4a0a      	ldr	r2, [pc, #40]	; (8014f08 <pifTaskManager_Add+0xcc>)
 8014ede:	6013      	str	r3, [r2, #0]
    return p_owner;
 8014ee0:	697b      	ldr	r3, [r7, #20]
 8014ee2:	e008      	b.n	8014ef6 <pifTaskManager_Add+0xba>
	if (!_setParam(p_owner, mode, period)) goto fail;
 8014ee4:	bf00      	nop

fail:
	if (p_owner) {
 8014ee6:	697b      	ldr	r3, [r7, #20]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d003      	beq.n	8014ef4 <pifTaskManager_Add+0xb8>
		pifFixList_Remove(&s_tasks, p_owner);
 8014eec:	6979      	ldr	r1, [r7, #20]
 8014eee:	4805      	ldr	r0, [pc, #20]	; (8014f04 <pifTaskManager_Add+0xc8>)
 8014ef0:	f7fe f819 	bl	8012f26 <pifFixList_Remove>
	}
	return NULL;
 8014ef4:	2300      	movs	r3, #0
}
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	3718      	adds	r7, #24
 8014efa:	46bd      	mov	sp, r7
 8014efc:	bd80      	pop	{r7, pc}
 8014efe:	bf00      	nop
 8014f00:	20001de0 	.word	0x20001de0
 8014f04:	20001e90 	.word	0x20001e90
 8014f08:	20001ea8 	.word	0x20001ea8

08014f0c <pifTaskManager_Remove>:

void pifTaskManager_Remove(PifTask* p_task)
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b082      	sub	sp, #8
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]
	if (p_task == (PifTask*)s_it_current->data) s_it_current = NULL;
 8014f14:	4b17      	ldr	r3, [pc, #92]	; (8014f74 <pifTaskManager_Remove+0x68>)
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	3308      	adds	r3, #8
 8014f1a:	687a      	ldr	r2, [r7, #4]
 8014f1c:	429a      	cmp	r2, r3
 8014f1e:	d102      	bne.n	8014f26 <pifTaskManager_Remove+0x1a>
 8014f20:	4b14      	ldr	r3, [pc, #80]	; (8014f74 <pifTaskManager_Remove+0x68>)
 8014f22:	2200      	movs	r2, #0
 8014f24:	601a      	str	r2, [r3, #0]

	switch (p_task->_mode) {
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	7a1b      	ldrb	r3, [r3, #8]
 8014f2a:	2b01      	cmp	r3, #1
 8014f2c:	d805      	bhi.n	8014f3a <pifTaskManager_Remove+0x2e>
	case TM_RATIO:
	case TM_ALWAYS:
		_resetTable(p_task->__table_number);
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f32:	4618      	mov	r0, r3
 8014f34:	f7ff fb60 	bl	80145f8 <_resetTable>
		break;
 8014f38:	e000      	b.n	8014f3c <pifTaskManager_Remove+0x30>

	default:
		break;
 8014f3a:	bf00      	nop
	}
	pifFixList_Remove(&s_tasks, p_task);
 8014f3c:	6879      	ldr	r1, [r7, #4]
 8014f3e:	480e      	ldr	r0, [pc, #56]	; (8014f78 <pifTaskManager_Remove+0x6c>)
 8014f40:	f7fd fff1 	bl	8012f26 <pifFixList_Remove>

	if (!pifFixList_Count(&s_tasks)) s_it_current = NULL;
 8014f44:	480c      	ldr	r0, [pc, #48]	; (8014f78 <pifTaskManager_Remove+0x6c>)
 8014f46:	f7fe f822 	bl	8012f8e <pifFixList_Count>
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d103      	bne.n	8014f58 <pifTaskManager_Remove+0x4c>
 8014f50:	4b08      	ldr	r3, [pc, #32]	; (8014f74 <pifTaskManager_Remove+0x68>)
 8014f52:	2200      	movs	r2, #0
 8014f54:	601a      	str	r2, [r3, #0]
	else if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
}
 8014f56:	e009      	b.n	8014f6c <pifTaskManager_Remove+0x60>
	else if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
 8014f58:	4b06      	ldr	r3, [pc, #24]	; (8014f74 <pifTaskManager_Remove+0x68>)
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d105      	bne.n	8014f6c <pifTaskManager_Remove+0x60>
 8014f60:	4805      	ldr	r0, [pc, #20]	; (8014f78 <pifTaskManager_Remove+0x6c>)
 8014f62:	f7fe f820 	bl	8012fa6 <pifFixList_Begin>
 8014f66:	4603      	mov	r3, r0
 8014f68:	4a02      	ldr	r2, [pc, #8]	; (8014f74 <pifTaskManager_Remove+0x68>)
 8014f6a:	6013      	str	r3, [r2, #0]
}
 8014f6c:	bf00      	nop
 8014f6e:	3708      	adds	r7, #8
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd80      	pop	{r7, pc}
 8014f74:	20001ea8 	.word	0x20001ea8
 8014f78:	20001e90 	.word	0x20001e90

08014f7c <pifTaskManager_Count>:

int pifTaskManager_Count()
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	af00      	add	r7, sp, #0
	return pifFixList_Count(&s_tasks);
 8014f80:	4802      	ldr	r0, [pc, #8]	; (8014f8c <pifTaskManager_Count+0x10>)
 8014f82:	f7fe f804 	bl	8012f8e <pifFixList_Count>
 8014f86:	4603      	mov	r3, r0
}
 8014f88:	4618      	mov	r0, r3
 8014f8a:	bd80      	pop	{r7, pc}
 8014f8c:	20001e90 	.word	0x20001e90

08014f90 <pifTaskManager_Loop>:

void pifTaskManager_Loop()
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b08a      	sub	sp, #40	; 0x28
 8014f94:	af00      	add	r7, sp, #0
	PifTask* p_owner;
	PifTask* p_select = NULL;
 8014f96:	2300      	movs	r3, #0
 8014f98:	627b      	str	r3, [r7, #36]	; 0x24
	PifTask* p_idle = NULL;
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	623b      	str	r3, [r7, #32]
	PifFixListIterator it_idle = NULL;
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	61fb      	str	r3, [r7, #28]
	int i, n, t = 0, count = pifFixList_Count(&s_tasks);
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	613b      	str	r3, [r7, #16]
 8014fa6:	487e      	ldr	r0, [pc, #504]	; (80151a0 <pifTaskManager_Loop+0x210>)
 8014fa8:	f7fd fff1 	bl	8012f8e <pifFixList_Count>
 8014fac:	60b8      	str	r0, [r7, #8]
	BOOL trigger = FALSE;
 8014fae:	2300      	movs	r3, #0
 8014fb0:	73fb      	strb	r3, [r7, #15]

	if (pif_act_timer1us) pif_timer1us = (*pif_act_timer1us)();
 8014fb2:	4b7c      	ldr	r3, [pc, #496]	; (80151a4 <pifTaskManager_Loop+0x214>)
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d005      	beq.n	8014fc6 <pifTaskManager_Loop+0x36>
 8014fba:	4b7a      	ldr	r3, [pc, #488]	; (80151a4 <pifTaskManager_Loop+0x214>)
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	4798      	blx	r3
 8014fc0:	4603      	mov	r3, r0
 8014fc2:	4a79      	ldr	r2, [pc, #484]	; (80151a8 <pifTaskManager_Loop+0x218>)
 8014fc4:	6013      	str	r3, [r2, #0]

	if (!s_it_current) {
 8014fc6:	4b79      	ldr	r3, [pc, #484]	; (80151ac <pifTaskManager_Loop+0x21c>)
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d109      	bne.n	8014fe2 <pifTaskManager_Loop+0x52>
		if (!count) return;
 8014fce:	68bb      	ldr	r3, [r7, #8]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	f000 80e1 	beq.w	8015198 <pifTaskManager_Loop+0x208>
		s_it_current = pifFixList_Begin(&s_tasks);
 8014fd6:	4872      	ldr	r0, [pc, #456]	; (80151a0 <pifTaskManager_Loop+0x210>)
 8014fd8:	f7fd ffe5 	bl	8012fa6 <pifFixList_Begin>
 8014fdc:	4603      	mov	r3, r0
 8014fde:	4a73      	ldr	r2, [pc, #460]	; (80151ac <pifTaskManager_Loop+0x21c>)
 8014fe0:	6013      	str	r3, [r2, #0]
	}

	s_loop_count += count;
 8014fe2:	4b73      	ldr	r3, [pc, #460]	; (80151b0 <pifTaskManager_Loop+0x220>)
 8014fe4:	681a      	ldr	r2, [r3, #0]
 8014fe6:	68bb      	ldr	r3, [r7, #8]
 8014fe8:	4413      	add	r3, r2
 8014fea:	4a71      	ldr	r2, [pc, #452]	; (80151b0 <pifTaskManager_Loop+0x220>)
 8014fec:	6013      	str	r3, [r2, #0]
	if (s_task_cutin && s_task_cutin->__trigger) {
 8014fee:	4b71      	ldr	r3, [pc, #452]	; (80151b4 <pifTaskManager_Loop+0x224>)
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d012      	beq.n	801501c <pifTaskManager_Loop+0x8c>
 8014ff6:	4b6f      	ldr	r3, [pc, #444]	; (80151b4 <pifTaskManager_Loop+0x224>)
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d00c      	beq.n	801501c <pifTaskManager_Loop+0x8c>
		s_task_cutin->__trigger = FALSE;
 8015002:	4b6c      	ldr	r3, [pc, #432]	; (80151b4 <pifTaskManager_Loop+0x224>)
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	2200      	movs	r2, #0
 8015008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		p_select = s_task_cutin;
 801500c:	4b69      	ldr	r3, [pc, #420]	; (80151b4 <pifTaskManager_Loop+0x224>)
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	627b      	str	r3, [r7, #36]	; 0x24
		trigger = TRUE;
 8015012:	2301      	movs	r3, #1
 8015014:	73fb      	strb	r3, [r7, #15]
		i = 1;
 8015016:	2301      	movs	r3, #1
 8015018:	61bb      	str	r3, [r7, #24]
 801501a:	e062      	b.n	80150e2 <pifTaskManager_Loop+0x152>
	}
	else {
		for (i = n = 0; i < count && !p_select; i++) {
 801501c:	2300      	movs	r3, #0
 801501e:	617b      	str	r3, [r7, #20]
 8015020:	697b      	ldr	r3, [r7, #20]
 8015022:	61bb      	str	r3, [r7, #24]
 8015024:	e056      	b.n	80150d4 <pifTaskManager_Loop+0x144>
			p_owner = (PifTask*)s_it_current->data;
 8015026:	4b61      	ldr	r3, [pc, #388]	; (80151ac <pifTaskManager_Loop+0x21c>)
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	3308      	adds	r3, #8
 801502c:	607b      	str	r3, [r7, #4]

			if (p_owner->__trigger) {
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015034:	2b00      	cmp	r3, #0
 8015036:	d008      	beq.n	801504a <pifTaskManager_Loop+0xba>
				p_owner->__trigger = FALSE;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	2200      	movs	r2, #0
 801503c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				p_select = p_owner;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	627b      	str	r3, [r7, #36]	; 0x24
				trigger = TRUE;
 8015044:	2301      	movs	r3, #1
 8015046:	73fb      	strb	r3, [r7, #15]
 8015048:	e02d      	b.n	80150a6 <pifTaskManager_Loop+0x116>
			}
			else if (!p_owner->pause) {
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	791b      	ldrb	r3, [r3, #4]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d129      	bne.n	80150a6 <pifTaskManager_Loop+0x116>
				if (p_owner->_mode == TM_TIMER) {
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	7a1b      	ldrb	r3, [r3, #8]
 8015056:	2b08      	cmp	r3, #8
 8015058:	d107      	bne.n	801506a <pifTaskManager_Loop+0xda>
					(*p_owner->__evt_loop)(p_owner);
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801505e:	6878      	ldr	r0, [r7, #4]
 8015060:	4798      	blx	r3
					t++;
 8015062:	693b      	ldr	r3, [r7, #16]
 8015064:	3301      	adds	r3, #1
 8015066:	613b      	str	r3, [r7, #16]
 8015068:	e01d      	b.n	80150a6 <pifTaskManager_Loop+0x116>
				}
				else if (p_owner->__processing) {
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801506e:	2b00      	cmp	r3, #0
 8015070:	d019      	beq.n	80150a6 <pifTaskManager_Loop+0x116>
					if (p_owner->_mode == TM_IDLE_MS) {
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	7a1b      	ldrb	r3, [r3, #8]
 8015076:	2b09      	cmp	r3, #9
 8015078:	d110      	bne.n	801509c <pifTaskManager_Loop+0x10c>
						if (!p_idle) {
 801507a:	6a3b      	ldr	r3, [r7, #32]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d112      	bne.n	80150a6 <pifTaskManager_Loop+0x116>
							p_idle = (*p_owner->__processing)(p_owner);
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015084:	6878      	ldr	r0, [r7, #4]
 8015086:	4798      	blx	r3
 8015088:	6238      	str	r0, [r7, #32]
							if (p_idle) {
 801508a:	6a3b      	ldr	r3, [r7, #32]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d00a      	beq.n	80150a6 <pifTaskManager_Loop+0x116>
								it_idle = s_it_current;
 8015090:	4b46      	ldr	r3, [pc, #280]	; (80151ac <pifTaskManager_Loop+0x21c>)
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	61fb      	str	r3, [r7, #28]
								n = i;
 8015096:	69bb      	ldr	r3, [r7, #24]
 8015098:	617b      	str	r3, [r7, #20]
 801509a:	e004      	b.n	80150a6 <pifTaskManager_Loop+0x116>
							}
						}
					}
					else {
						p_select = (*p_owner->__processing)(p_owner);
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150a0:	6878      	ldr	r0, [r7, #4]
 80150a2:	4798      	blx	r3
 80150a4:	6278      	str	r0, [r7, #36]	; 0x24
					}
				}
			}

			s_it_current = pifFixList_Next(s_it_current);
 80150a6:	4b41      	ldr	r3, [pc, #260]	; (80151ac <pifTaskManager_Loop+0x21c>)
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	4618      	mov	r0, r3
 80150ac:	f7fd ff87 	bl	8012fbe <pifFixList_Next>
 80150b0:	4603      	mov	r3, r0
 80150b2:	4a3e      	ldr	r2, [pc, #248]	; (80151ac <pifTaskManager_Loop+0x21c>)
 80150b4:	6013      	str	r3, [r2, #0]
			if (!s_it_current) {
 80150b6:	4b3d      	ldr	r3, [pc, #244]	; (80151ac <pifTaskManager_Loop+0x21c>)
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d107      	bne.n	80150ce <pifTaskManager_Loop+0x13e>
				s_it_current = pifFixList_Begin(&s_tasks);
 80150be:	4838      	ldr	r0, [pc, #224]	; (80151a0 <pifTaskManager_Loop+0x210>)
 80150c0:	f7fd ff71 	bl	8012fa6 <pifFixList_Begin>
 80150c4:	4603      	mov	r3, r0
 80150c6:	4a39      	ldr	r2, [pc, #228]	; (80151ac <pifTaskManager_Loop+0x21c>)
 80150c8:	6013      	str	r3, [r2, #0]
				_checkLoopTime();
 80150ca:	f7ff fd15 	bl	8014af8 <_checkLoopTime>
		for (i = n = 0; i < count && !p_select; i++) {
 80150ce:	69bb      	ldr	r3, [r7, #24]
 80150d0:	3301      	adds	r3, #1
 80150d2:	61bb      	str	r3, [r7, #24]
 80150d4:	69ba      	ldr	r2, [r7, #24]
 80150d6:	68bb      	ldr	r3, [r7, #8]
 80150d8:	429a      	cmp	r2, r3
 80150da:	da02      	bge.n	80150e2 <pifTaskManager_Loop+0x152>
 80150dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d0a1      	beq.n	8015026 <pifTaskManager_Loop+0x96>
			}
		}
	}

	if (p_select) {
 80150e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d034      	beq.n	8015152 <pifTaskManager_Loop+0x1c2>
		if (trigger) {
 80150e8:	7bfb      	ldrb	r3, [r7, #15]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d02d      	beq.n	801514a <pifTaskManager_Loop+0x1ba>
			if (pif_act_timer1us) p_select->_trigger_delay = (*pif_act_timer1us)() - p_select->__trigger_time;
 80150ee:	4b2d      	ldr	r3, [pc, #180]	; (80151a4 <pifTaskManager_Loop+0x214>)
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d00c      	beq.n	8015110 <pifTaskManager_Loop+0x180>
 80150f6:	4b2b      	ldr	r3, [pc, #172]	; (80151a4 <pifTaskManager_Loop+0x214>)
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	4798      	blx	r3
 80150fc:	4603      	mov	r3, r0
 80150fe:	b29a      	uxth	r2, r3
 8015100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015104:	b29b      	uxth	r3, r3
 8015106:	1ad3      	subs	r3, r2, r3
 8015108:	b29a      	uxth	r2, r3
 801510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801510c:	859a      	strh	r2, [r3, #44]	; 0x2c
 801510e:	e009      	b.n	8015124 <pifTaskManager_Loop+0x194>
			else p_select->_trigger_delay = pif_cumulative_timer1ms - p_select->__trigger_time;
 8015110:	4b29      	ldr	r3, [pc, #164]	; (80151b8 <pifTaskManager_Loop+0x228>)
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	b29a      	uxth	r2, r3
 8015116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801511a:	b29b      	uxth	r3, r3
 801511c:	1ad3      	subs	r3, r2, r3
 801511e:	b29a      	uxth	r2, r3
 8015120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015122:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (p_select->_trigger_delay > p_select->_max_trigger_delay) p_select->_max_trigger_delay = p_select->_trigger_delay;
 8015124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015126:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8015128:	461a      	mov	r2, r3
 801512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801512e:	429a      	cmp	r2, r3
 8015130:	d904      	bls.n	801513c <pifTaskManager_Loop+0x1ac>
 8015132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015134:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8015136:	461a      	mov	r2, r3
 8015138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801513a:	625a      	str	r2, [r3, #36]	; 0x24
			p_select->_total_trigger_delay += p_select->_trigger_delay;
 801513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801513e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015142:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8015144:	441a      	add	r2, r3
 8015146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015148:	629a      	str	r2, [r3, #40]	; 0x28
		}
	    _processingTask(p_select);
 801514a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801514c:	f7ff fc3e 	bl	80149cc <_processingTask>
 8015150:	e018      	b.n	8015184 <pifTaskManager_Loop+0x1f4>
	}
	else if (p_idle) {
 8015152:	6a3b      	ldr	r3, [r7, #32]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d015      	beq.n	8015184 <pifTaskManager_Loop+0x1f4>
		i = n;
 8015158:	697b      	ldr	r3, [r7, #20]
 801515a:	61bb      	str	r3, [r7, #24]
		it_idle = pifFixList_Next(it_idle);
 801515c:	69f8      	ldr	r0, [r7, #28]
 801515e:	f7fd ff2e 	bl	8012fbe <pifFixList_Next>
 8015162:	61f8      	str	r0, [r7, #28]
		if (!it_idle) {
 8015164:	69fb      	ldr	r3, [r7, #28]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d106      	bne.n	8015178 <pifTaskManager_Loop+0x1e8>
			s_it_current = pifFixList_Begin(&s_tasks);
 801516a:	480d      	ldr	r0, [pc, #52]	; (80151a0 <pifTaskManager_Loop+0x210>)
 801516c:	f7fd ff1b 	bl	8012fa6 <pifFixList_Begin>
 8015170:	4603      	mov	r3, r0
 8015172:	4a0e      	ldr	r2, [pc, #56]	; (80151ac <pifTaskManager_Loop+0x21c>)
 8015174:	6013      	str	r3, [r2, #0]
 8015176:	e002      	b.n	801517e <pifTaskManager_Loop+0x1ee>
		}
		else {
			s_it_current = it_idle;
 8015178:	4a0c      	ldr	r2, [pc, #48]	; (80151ac <pifTaskManager_Loop+0x21c>)
 801517a:	69fb      	ldr	r3, [r7, #28]
 801517c:	6013      	str	r3, [r2, #0]
		}
	    _processingTask(p_idle);
 801517e:	6a38      	ldr	r0, [r7, #32]
 8015180:	f7ff fc24 	bl	80149cc <_processingTask>
	}
	s_pass_count += i - t;
 8015184:	69ba      	ldr	r2, [r7, #24]
 8015186:	693b      	ldr	r3, [r7, #16]
 8015188:	1ad3      	subs	r3, r2, r3
 801518a:	461a      	mov	r2, r3
 801518c:	4b0b      	ldr	r3, [pc, #44]	; (80151bc <pifTaskManager_Loop+0x22c>)
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	4413      	add	r3, r2
 8015192:	4a0a      	ldr	r2, [pc, #40]	; (80151bc <pifTaskManager_Loop+0x22c>)
 8015194:	6013      	str	r3, [r2, #0]
 8015196:	e000      	b.n	801519a <pifTaskManager_Loop+0x20a>
		if (!count) return;
 8015198:	bf00      	nop
}
 801519a:	3728      	adds	r7, #40	; 0x28
 801519c:	46bd      	mov	sp, r7
 801519e:	bd80      	pop	{r7, pc}
 80151a0:	20001e90 	.word	0x20001e90
 80151a4:	20001e08 	.word	0x20001e08
 80151a8:	20001de4 	.word	0x20001de4
 80151ac:	20001ea8 	.word	0x20001ea8
 80151b0:	20001f50 	.word	0x20001f50
 80151b4:	20001ec4 	.word	0x20001ec4
 80151b8:	20001df8 	.word	0x20001df8
 80151bc:	20001f54 	.word	0x20001f54

080151c0 <pifTaskManager_Yield>:

BOOL pifTaskManager_Yield()
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b08a      	sub	sp, #40	; 0x28
 80151c4:	af00      	add	r7, sp, #0
	PifTask* p_owner;
	PifTask* p_select = NULL;
 80151c6:	2300      	movs	r3, #0
 80151c8:	627b      	str	r3, [r7, #36]	; 0x24
	PifTask* p_idle = NULL;
 80151ca:	2300      	movs	r3, #0
 80151cc:	623b      	str	r3, [r7, #32]
	PifFixListIterator it_idle = NULL;
 80151ce:	2300      	movs	r3, #0
 80151d0:	61fb      	str	r3, [r7, #28]
	int i, k, n, t = 0, count = pifFixList_Count(&s_tasks);
 80151d2:	2300      	movs	r3, #0
 80151d4:	60fb      	str	r3, [r7, #12]
 80151d6:	488c      	ldr	r0, [pc, #560]	; (8015408 <pifTaskManager_Yield+0x248>)
 80151d8:	f7fd fed9 	bl	8012f8e <pifFixList_Count>
 80151dc:	6078      	str	r0, [r7, #4]
	BOOL trigger = FALSE;
 80151de:	2300      	movs	r3, #0
 80151e0:	72fb      	strb	r3, [r7, #11]
	BOOL rtn = TRUE;
 80151e2:	2301      	movs	r3, #1
 80151e4:	72bb      	strb	r3, [r7, #10]

	if (pif_act_timer1us) pif_timer1us = (*pif_act_timer1us)();
 80151e6:	4b89      	ldr	r3, [pc, #548]	; (801540c <pifTaskManager_Yield+0x24c>)
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d005      	beq.n	80151fa <pifTaskManager_Yield+0x3a>
 80151ee:	4b87      	ldr	r3, [pc, #540]	; (801540c <pifTaskManager_Yield+0x24c>)
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	4798      	blx	r3
 80151f4:	4603      	mov	r3, r0
 80151f6:	4a86      	ldr	r2, [pc, #536]	; (8015410 <pifTaskManager_Yield+0x250>)
 80151f8:	6013      	str	r3, [r2, #0]

	if (!s_it_current) {
 80151fa:	4b86      	ldr	r3, [pc, #536]	; (8015414 <pifTaskManager_Yield+0x254>)
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d10a      	bne.n	8015218 <pifTaskManager_Yield+0x58>
		if (!count) return FALSE;
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d101      	bne.n	801520c <pifTaskManager_Yield+0x4c>
 8015208:	2300      	movs	r3, #0
 801520a:	e134      	b.n	8015476 <pifTaskManager_Yield+0x2b6>
		s_it_current = pifFixList_Begin(&s_tasks);
 801520c:	487e      	ldr	r0, [pc, #504]	; (8015408 <pifTaskManager_Yield+0x248>)
 801520e:	f7fd feca 	bl	8012fa6 <pifFixList_Begin>
 8015212:	4603      	mov	r3, r0
 8015214:	4a7f      	ldr	r2, [pc, #508]	; (8015414 <pifTaskManager_Yield+0x254>)
 8015216:	6013      	str	r3, [r2, #0]
	}

	s_loop_count += count;
 8015218:	4b7f      	ldr	r3, [pc, #508]	; (8015418 <pifTaskManager_Yield+0x258>)
 801521a:	681a      	ldr	r2, [r3, #0]
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	4413      	add	r3, r2
 8015220:	4a7d      	ldr	r2, [pc, #500]	; (8015418 <pifTaskManager_Yield+0x258>)
 8015222:	6013      	str	r3, [r2, #0]
	if (s_task_cutin && s_task_cutin->__trigger && !s_task_cutin->_running) {
 8015224:	4b7d      	ldr	r3, [pc, #500]	; (801541c <pifTaskManager_Yield+0x25c>)
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d017      	beq.n	801525c <pifTaskManager_Yield+0x9c>
 801522c:	4b7b      	ldr	r3, [pc, #492]	; (801541c <pifTaskManager_Yield+0x25c>)
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015234:	2b00      	cmp	r3, #0
 8015236:	d011      	beq.n	801525c <pifTaskManager_Yield+0x9c>
 8015238:	4b78      	ldr	r3, [pc, #480]	; (801541c <pifTaskManager_Yield+0x25c>)
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	7a5b      	ldrb	r3, [r3, #9]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d10c      	bne.n	801525c <pifTaskManager_Yield+0x9c>
		s_task_cutin->__trigger = FALSE;
 8015242:	4b76      	ldr	r3, [pc, #472]	; (801541c <pifTaskManager_Yield+0x25c>)
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	2200      	movs	r2, #0
 8015248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		p_select = s_task_cutin;
 801524c:	4b73      	ldr	r3, [pc, #460]	; (801541c <pifTaskManager_Yield+0x25c>)
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	627b      	str	r3, [r7, #36]	; 0x24
		trigger = TRUE;
 8015252:	2301      	movs	r3, #1
 8015254:	72fb      	strb	r3, [r7, #11]
		i = 1;
 8015256:	2301      	movs	r3, #1
 8015258:	61bb      	str	r3, [r7, #24]
 801525a:	e097      	b.n	801538c <pifTaskManager_Yield+0x1cc>
	}
	else {
		for (i = n = 0; i < count && !p_select; i++) {
 801525c:	2300      	movs	r3, #0
 801525e:	613b      	str	r3, [r7, #16]
 8015260:	693b      	ldr	r3, [r7, #16]
 8015262:	61bb      	str	r3, [r7, #24]
 8015264:	e08a      	b.n	801537c <pifTaskManager_Yield+0x1bc>
			p_owner = (PifTask*)s_it_current->data;
 8015266:	4b6b      	ldr	r3, [pc, #428]	; (8015414 <pifTaskManager_Yield+0x254>)
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	3308      	adds	r3, #8
 801526c:	603b      	str	r3, [r7, #0]

			if (p_owner->_running) goto next;
 801526e:	683b      	ldr	r3, [r7, #0]
 8015270:	7a5b      	ldrb	r3, [r3, #9]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d162      	bne.n	801533c <pifTaskManager_Yield+0x17c>
			if (s_task_stack_ptr) {
 8015276:	4b6a      	ldr	r3, [pc, #424]	; (8015420 <pifTaskManager_Yield+0x260>)
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d021      	beq.n	80152c2 <pifTaskManager_Yield+0x102>
				for (k = 0; k < s_task_stack_ptr; k++) {
 801527e:	2300      	movs	r3, #0
 8015280:	617b      	str	r3, [r7, #20]
 8015282:	e012      	b.n	80152aa <pifTaskManager_Yield+0xea>
					if (s_task_stack[k]->disallow_yield_id && s_task_stack[k]->disallow_yield_id == p_owner->disallow_yield_id) break;
 8015284:	4a67      	ldr	r2, [pc, #412]	; (8015424 <pifTaskManager_Yield+0x264>)
 8015286:	697b      	ldr	r3, [r7, #20]
 8015288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801528c:	795b      	ldrb	r3, [r3, #5]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d008      	beq.n	80152a4 <pifTaskManager_Yield+0xe4>
 8015292:	4a64      	ldr	r2, [pc, #400]	; (8015424 <pifTaskManager_Yield+0x264>)
 8015294:	697b      	ldr	r3, [r7, #20]
 8015296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801529a:	795a      	ldrb	r2, [r3, #5]
 801529c:	683b      	ldr	r3, [r7, #0]
 801529e:	795b      	ldrb	r3, [r3, #5]
 80152a0:	429a      	cmp	r2, r3
 80152a2:	d008      	beq.n	80152b6 <pifTaskManager_Yield+0xf6>
				for (k = 0; k < s_task_stack_ptr; k++) {
 80152a4:	697b      	ldr	r3, [r7, #20]
 80152a6:	3301      	adds	r3, #1
 80152a8:	617b      	str	r3, [r7, #20]
 80152aa:	4b5d      	ldr	r3, [pc, #372]	; (8015420 <pifTaskManager_Yield+0x260>)
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	697a      	ldr	r2, [r7, #20]
 80152b0:	429a      	cmp	r2, r3
 80152b2:	dbe7      	blt.n	8015284 <pifTaskManager_Yield+0xc4>
 80152b4:	e000      	b.n	80152b8 <pifTaskManager_Yield+0xf8>
					if (s_task_stack[k]->disallow_yield_id && s_task_stack[k]->disallow_yield_id == p_owner->disallow_yield_id) break;
 80152b6:	bf00      	nop
				}
				if (k < s_task_stack_ptr) goto next;
 80152b8:	4b59      	ldr	r3, [pc, #356]	; (8015420 <pifTaskManager_Yield+0x260>)
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	697a      	ldr	r2, [r7, #20]
 80152be:	429a      	cmp	r2, r3
 80152c0:	db3e      	blt.n	8015340 <pifTaskManager_Yield+0x180>
			}

			if (p_owner->__trigger) {
 80152c2:	683b      	ldr	r3, [r7, #0]
 80152c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d008      	beq.n	80152de <pifTaskManager_Yield+0x11e>
				p_owner->__trigger = FALSE;
 80152cc:	683b      	ldr	r3, [r7, #0]
 80152ce:	2200      	movs	r2, #0
 80152d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				p_select = p_owner;
 80152d4:	683b      	ldr	r3, [r7, #0]
 80152d6:	627b      	str	r3, [r7, #36]	; 0x24
				trigger = TRUE;
 80152d8:	2301      	movs	r3, #1
 80152da:	72fb      	strb	r3, [r7, #11]
 80152dc:	e033      	b.n	8015346 <pifTaskManager_Yield+0x186>
			}
			else if (!p_owner->pause) {
 80152de:	683b      	ldr	r3, [r7, #0]
 80152e0:	791b      	ldrb	r3, [r3, #4]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d12e      	bne.n	8015344 <pifTaskManager_Yield+0x184>
				if (p_owner->_mode == TM_TIMER) {
 80152e6:	683b      	ldr	r3, [r7, #0]
 80152e8:	7a1b      	ldrb	r3, [r3, #8]
 80152ea:	2b08      	cmp	r3, #8
 80152ec:	d107      	bne.n	80152fe <pifTaskManager_Yield+0x13e>
					(*p_owner->__evt_loop)(p_owner);
 80152ee:	683b      	ldr	r3, [r7, #0]
 80152f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152f2:	6838      	ldr	r0, [r7, #0]
 80152f4:	4798      	blx	r3
					t++;
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	3301      	adds	r3, #1
 80152fa:	60fb      	str	r3, [r7, #12]
 80152fc:	e023      	b.n	8015346 <pifTaskManager_Yield+0x186>
				}
				else if (p_owner->__processing) {
 80152fe:	683b      	ldr	r3, [r7, #0]
 8015300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015302:	2b00      	cmp	r3, #0
 8015304:	d01e      	beq.n	8015344 <pifTaskManager_Yield+0x184>
					if (p_owner->_mode == TM_IDLE_MS) {
 8015306:	683b      	ldr	r3, [r7, #0]
 8015308:	7a1b      	ldrb	r3, [r3, #8]
 801530a:	2b09      	cmp	r3, #9
 801530c:	d110      	bne.n	8015330 <pifTaskManager_Yield+0x170>
						if (!p_idle) {
 801530e:	6a3b      	ldr	r3, [r7, #32]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d118      	bne.n	8015346 <pifTaskManager_Yield+0x186>
							p_idle = (*p_owner->__processing)(p_owner);
 8015314:	683b      	ldr	r3, [r7, #0]
 8015316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015318:	6838      	ldr	r0, [r7, #0]
 801531a:	4798      	blx	r3
 801531c:	6238      	str	r0, [r7, #32]
							if (p_idle) {
 801531e:	6a3b      	ldr	r3, [r7, #32]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d010      	beq.n	8015346 <pifTaskManager_Yield+0x186>
								it_idle = s_it_current;
 8015324:	4b3b      	ldr	r3, [pc, #236]	; (8015414 <pifTaskManager_Yield+0x254>)
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	61fb      	str	r3, [r7, #28]
								n = i;
 801532a:	69bb      	ldr	r3, [r7, #24]
 801532c:	613b      	str	r3, [r7, #16]
 801532e:	e00a      	b.n	8015346 <pifTaskManager_Yield+0x186>
							}
						}
					}
					else {
						p_select = (*p_owner->__processing)(p_owner);
 8015330:	683b      	ldr	r3, [r7, #0]
 8015332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015334:	6838      	ldr	r0, [r7, #0]
 8015336:	4798      	blx	r3
 8015338:	6278      	str	r0, [r7, #36]	; 0x24
 801533a:	e004      	b.n	8015346 <pifTaskManager_Yield+0x186>
			if (p_owner->_running) goto next;
 801533c:	bf00      	nop
 801533e:	e002      	b.n	8015346 <pifTaskManager_Yield+0x186>
				if (k < s_task_stack_ptr) goto next;
 8015340:	bf00      	nop
 8015342:	e000      	b.n	8015346 <pifTaskManager_Yield+0x186>
					}
				}
			}

next:
 8015344:	bf00      	nop
			s_it_current = pifFixList_Next(s_it_current);
 8015346:	4b33      	ldr	r3, [pc, #204]	; (8015414 <pifTaskManager_Yield+0x254>)
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	4618      	mov	r0, r3
 801534c:	f7fd fe37 	bl	8012fbe <pifFixList_Next>
 8015350:	4603      	mov	r3, r0
 8015352:	4a30      	ldr	r2, [pc, #192]	; (8015414 <pifTaskManager_Yield+0x254>)
 8015354:	6013      	str	r3, [r2, #0]
			if (!s_it_current) {
 8015356:	4b2f      	ldr	r3, [pc, #188]	; (8015414 <pifTaskManager_Yield+0x254>)
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d10b      	bne.n	8015376 <pifTaskManager_Yield+0x1b6>
				s_it_current = pifFixList_Begin(&s_tasks);
 801535e:	482a      	ldr	r0, [pc, #168]	; (8015408 <pifTaskManager_Yield+0x248>)
 8015360:	f7fd fe21 	bl	8012fa6 <pifFixList_Begin>
 8015364:	4603      	mov	r3, r0
 8015366:	4a2b      	ldr	r2, [pc, #172]	; (8015414 <pifTaskManager_Yield+0x254>)
 8015368:	6013      	str	r3, [r2, #0]
				if (s_task_stack_ptr) _checkLoopTime();
 801536a:	4b2d      	ldr	r3, [pc, #180]	; (8015420 <pifTaskManager_Yield+0x260>)
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d001      	beq.n	8015376 <pifTaskManager_Yield+0x1b6>
 8015372:	f7ff fbc1 	bl	8014af8 <_checkLoopTime>
		for (i = n = 0; i < count && !p_select; i++) {
 8015376:	69bb      	ldr	r3, [r7, #24]
 8015378:	3301      	adds	r3, #1
 801537a:	61bb      	str	r3, [r7, #24]
 801537c:	69ba      	ldr	r2, [r7, #24]
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	429a      	cmp	r2, r3
 8015382:	da03      	bge.n	801538c <pifTaskManager_Yield+0x1cc>
 8015384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015386:	2b00      	cmp	r3, #0
 8015388:	f43f af6d 	beq.w	8015266 <pifTaskManager_Yield+0xa6>
			}
		}
	}

	if (p_select) {
 801538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801538e:	2b00      	cmp	r3, #0
 8015390:	d04c      	beq.n	801542c <pifTaskManager_Yield+0x26c>
		if (trigger && s_task_stack_ptr) {
 8015392:	7afb      	ldrb	r3, [r7, #11]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d031      	beq.n	80153fc <pifTaskManager_Yield+0x23c>
 8015398:	4b21      	ldr	r3, [pc, #132]	; (8015420 <pifTaskManager_Yield+0x260>)
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	2b00      	cmp	r3, #0
 801539e:	d02d      	beq.n	80153fc <pifTaskManager_Yield+0x23c>
			if (pif_act_timer1us) p_select->_trigger_delay = (*pif_act_timer1us)() - p_select->__trigger_time;
 80153a0:	4b1a      	ldr	r3, [pc, #104]	; (801540c <pifTaskManager_Yield+0x24c>)
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d00c      	beq.n	80153c2 <pifTaskManager_Yield+0x202>
 80153a8:	4b18      	ldr	r3, [pc, #96]	; (801540c <pifTaskManager_Yield+0x24c>)
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	4798      	blx	r3
 80153ae:	4603      	mov	r3, r0
 80153b0:	b29a      	uxth	r2, r3
 80153b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80153b6:	b29b      	uxth	r3, r3
 80153b8:	1ad3      	subs	r3, r2, r3
 80153ba:	b29a      	uxth	r2, r3
 80153bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153be:	859a      	strh	r2, [r3, #44]	; 0x2c
 80153c0:	e009      	b.n	80153d6 <pifTaskManager_Yield+0x216>
			else p_select->_trigger_delay = pif_cumulative_timer1ms - p_select->__trigger_time;
 80153c2:	4b19      	ldr	r3, [pc, #100]	; (8015428 <pifTaskManager_Yield+0x268>)
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	b29a      	uxth	r2, r3
 80153c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80153cc:	b29b      	uxth	r3, r3
 80153ce:	1ad3      	subs	r3, r2, r3
 80153d0:	b29a      	uxth	r2, r3
 80153d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153d4:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (p_select->_trigger_delay > p_select->_max_trigger_delay) p_select->_max_trigger_delay = p_select->_trigger_delay;
 80153d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80153da:	461a      	mov	r2, r3
 80153dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153e0:	429a      	cmp	r2, r3
 80153e2:	d904      	bls.n	80153ee <pifTaskManager_Yield+0x22e>
 80153e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80153e8:	461a      	mov	r2, r3
 80153ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ec:	625a      	str	r2, [r3, #36]	; 0x24
			p_select->_total_trigger_delay += p_select->_trigger_delay;
 80153ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80153f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153f4:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80153f6:	441a      	add	r2, r3
 80153f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153fa:	629a      	str	r2, [r3, #40]	; 0x28
		}
	    rtn = _processingTask(p_select);
 80153fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80153fe:	f7ff fae5 	bl	80149cc <_processingTask>
 8015402:	4603      	mov	r3, r0
 8015404:	72bb      	strb	r3, [r7, #10]
 8015406:	e02c      	b.n	8015462 <pifTaskManager_Yield+0x2a2>
 8015408:	20001e90 	.word	0x20001e90
 801540c:	20001e08 	.word	0x20001e08
 8015410:	20001de4 	.word	0x20001de4
 8015414:	20001ea8 	.word	0x20001ea8
 8015418:	20001f50 	.word	0x20001f50
 801541c:	20001ec4 	.word	0x20001ec4
 8015420:	20001ec0 	.word	0x20001ec0
 8015424:	20001eac 	.word	0x20001eac
 8015428:	20001df8 	.word	0x20001df8
	}
	else if (p_idle) {
 801542c:	6a3b      	ldr	r3, [r7, #32]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d017      	beq.n	8015462 <pifTaskManager_Yield+0x2a2>
		i = n;
 8015432:	693b      	ldr	r3, [r7, #16]
 8015434:	61bb      	str	r3, [r7, #24]
		it_idle = pifFixList_Next(it_idle);
 8015436:	69f8      	ldr	r0, [r7, #28]
 8015438:	f7fd fdc1 	bl	8012fbe <pifFixList_Next>
 801543c:	61f8      	str	r0, [r7, #28]
		if (!it_idle) {
 801543e:	69fb      	ldr	r3, [r7, #28]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d106      	bne.n	8015452 <pifTaskManager_Yield+0x292>
			s_it_current = pifFixList_Begin(&s_tasks);
 8015444:	480e      	ldr	r0, [pc, #56]	; (8015480 <pifTaskManager_Yield+0x2c0>)
 8015446:	f7fd fdae 	bl	8012fa6 <pifFixList_Begin>
 801544a:	4603      	mov	r3, r0
 801544c:	4a0d      	ldr	r2, [pc, #52]	; (8015484 <pifTaskManager_Yield+0x2c4>)
 801544e:	6013      	str	r3, [r2, #0]
 8015450:	e002      	b.n	8015458 <pifTaskManager_Yield+0x298>
		}
		else {
			s_it_current = it_idle;
 8015452:	4a0c      	ldr	r2, [pc, #48]	; (8015484 <pifTaskManager_Yield+0x2c4>)
 8015454:	69fb      	ldr	r3, [r7, #28]
 8015456:	6013      	str	r3, [r2, #0]
		}
	    rtn = _processingTask(p_idle);
 8015458:	6a38      	ldr	r0, [r7, #32]
 801545a:	f7ff fab7 	bl	80149cc <_processingTask>
 801545e:	4603      	mov	r3, r0
 8015460:	72bb      	strb	r3, [r7, #10]
	}
	s_pass_count += i - t;
 8015462:	69ba      	ldr	r2, [r7, #24]
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	1ad3      	subs	r3, r2, r3
 8015468:	461a      	mov	r2, r3
 801546a:	4b07      	ldr	r3, [pc, #28]	; (8015488 <pifTaskManager_Yield+0x2c8>)
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	4413      	add	r3, r2
 8015470:	4a05      	ldr	r2, [pc, #20]	; (8015488 <pifTaskManager_Yield+0x2c8>)
 8015472:	6013      	str	r3, [r2, #0]
    return rtn;
 8015474:	7abb      	ldrb	r3, [r7, #10]
}
 8015476:	4618      	mov	r0, r3
 8015478:	3728      	adds	r7, #40	; 0x28
 801547a:	46bd      	mov	sp, r7
 801547c:	bd80      	pop	{r7, pc}
 801547e:	bf00      	nop
 8015480:	20001e90 	.word	0x20001e90
 8015484:	20001ea8 	.word	0x20001ea8
 8015488:	20001f54 	.word	0x20001f54

0801548c <pifTaskManager_YieldMs>:

BOOL pifTaskManager_YieldMs(uint32_t time)
{
 801548c:	b580      	push	{r7, lr}
 801548e:	b084      	sub	sp, #16
 8015490:	af00      	add	r7, sp, #0
 8015492:	6078      	str	r0, [r7, #4]
    uint32_t start;

    if (!time) return FALSE;
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d101      	bne.n	801549e <pifTaskManager_YieldMs+0x12>
 801549a:	2300      	movs	r3, #0
 801549c:	e011      	b.n	80154c2 <pifTaskManager_YieldMs+0x36>

    start = pif_cumulative_timer1ms;
 801549e:	4b0b      	ldr	r3, [pc, #44]	; (80154cc <pifTaskManager_YieldMs+0x40>)
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	60fb      	str	r3, [r7, #12]
    do {
		if (!pifTaskManager_Yield()) return FALSE;
 80154a4:	f7ff fe8c 	bl	80151c0 <pifTaskManager_Yield>
 80154a8:	4603      	mov	r3, r0
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d101      	bne.n	80154b2 <pifTaskManager_YieldMs+0x26>
 80154ae:	2300      	movs	r3, #0
 80154b0:	e007      	b.n	80154c2 <pifTaskManager_YieldMs+0x36>
    } while (pif_cumulative_timer1ms - start <= time);
 80154b2:	4b06      	ldr	r3, [pc, #24]	; (80154cc <pifTaskManager_YieldMs+0x40>)
 80154b4:	681a      	ldr	r2, [r3, #0]
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	1ad3      	subs	r3, r2, r3
 80154ba:	687a      	ldr	r2, [r7, #4]
 80154bc:	429a      	cmp	r2, r3
 80154be:	d2f1      	bcs.n	80154a4 <pifTaskManager_YieldMs+0x18>
    return TRUE;
 80154c0:	2301      	movs	r3, #1
}
 80154c2:	4618      	mov	r0, r3
 80154c4:	3710      	adds	r7, #16
 80154c6:	46bd      	mov	sp, r7
 80154c8:	bd80      	pop	{r7, pc}
 80154ca:	bf00      	nop
 80154cc:	20001df8 	.word	0x20001df8

080154d0 <pifTaskManager_Print>:
    }
    return TRUE;
}

void pifTaskManager_Print()
{
 80154d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154d2:	b091      	sub	sp, #68	; 0x44
 80154d4:	af04      	add	r7, sp, #16
	PifFixListIterator it;
	const char* mode[] = { "Ratio", "Always", "PeriodMs", "PeriodUs", "ChangeMs", "ChangeUs", "ExtCutin", "ExtOrder", "Timer", "IdleMs" };
 80154d6:	4b40      	ldr	r3, [pc, #256]	; (80155d8 <pifTaskManager_Print+0x108>)
 80154d8:	463c      	mov	r4, r7
 80154da:	461d      	mov	r5, r3
 80154dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80154de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80154e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80154e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80154e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80154e8:	e884 0003 	stmia.w	r4, {r0, r1}

   	pifLog_Printf(LT_NONE, "Task count: %d\n", pifFixList_Count(&s_tasks));
 80154ec:	483b      	ldr	r0, [pc, #236]	; (80155dc <pifTaskManager_Print+0x10c>)
 80154ee:	f7fd fd4e 	bl	8012f8e <pifFixList_Count>
 80154f2:	4603      	mov	r3, r0
 80154f4:	461a      	mov	r2, r3
 80154f6:	493a      	ldr	r1, [pc, #232]	; (80155e0 <pifTaskManager_Print+0x110>)
 80154f8:	2000      	movs	r0, #0
 80154fa:	f7fe fb7d 	bl	8013bf8 <pifLog_Printf>
	it = pifFixList_Begin(&s_tasks);
 80154fe:	4837      	ldr	r0, [pc, #220]	; (80155dc <pifTaskManager_Print+0x10c>)
 8015500:	f7fd fd51 	bl	8012fa6 <pifFixList_Begin>
 8015504:	62f8      	str	r0, [r7, #44]	; 0x2c
	while (it) {
 8015506:	e05f      	b.n	80155c8 <pifTaskManager_Print+0xf8>
		PifTask* p_owner = (PifTask*)it->data;
 8015508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801550a:	3308      	adds	r3, #8
 801550c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (p_owner->name) {
 801550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d007      	beq.n	8015526 <pifTaskManager_Print+0x56>
			pifLog_Printf(LT_NONE, "  %s", p_owner->name);
 8015516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	461a      	mov	r2, r3
 801551c:	4931      	ldr	r1, [pc, #196]	; (80155e4 <pifTaskManager_Print+0x114>)
 801551e:	2000      	movs	r0, #0
 8015520:	f7fe fb6a 	bl	8013bf8 <pifLog_Printf>
 8015524:	e003      	b.n	801552e <pifTaskManager_Print+0x5e>
		}
		else {
			pifLog_Print(LT_NONE, "  ---");
 8015526:	4930      	ldr	r1, [pc, #192]	; (80155e8 <pifTaskManager_Print+0x118>)
 8015528:	2000      	movs	r0, #0
 801552a:	f7fe fad7 	bl	8013adc <pifLog_Print>
		}
		pifLog_Printf(LT_NONE, " (%d): %s-%d,  proc: M=%dus, A=%dus T=%dms", p_owner->_id, mode[p_owner->_mode], p_owner->_period,
 801552e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015530:	88db      	ldrh	r3, [r3, #6]
 8015532:	461e      	mov	r6, r3
 8015534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015536:	7a1b      	ldrb	r3, [r3, #8]
 8015538:	009b      	lsls	r3, r3, #2
 801553a:	3330      	adds	r3, #48	; 0x30
 801553c:	443b      	add	r3, r7
 801553e:	f853 0c30 	ldr.w	r0, [r3, #-48]
 8015542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015544:	895b      	ldrh	r3, [r3, #10]
 8015546:	461d      	mov	r5, r3
 8015548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801554a:	691b      	ldr	r3, [r3, #16]
				p_owner->_max_execution_time, p_owner->_total_execution_time / p_owner->_execution_count, p_owner->_total_execution_time / 1000);
 801554c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801554e:	6951      	ldr	r1, [r2, #20]
 8015550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015552:	6992      	ldr	r2, [r2, #24]
		pifLog_Printf(LT_NONE, " (%d): %s-%d,  proc: M=%dus, A=%dus T=%dms", p_owner->_id, mode[p_owner->_mode], p_owner->_period,
 8015554:	fbb1 f2f2 	udiv	r2, r1, r2
				p_owner->_max_execution_time, p_owner->_total_execution_time / p_owner->_execution_count, p_owner->_total_execution_time / 1000);
 8015558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801555a:	6949      	ldr	r1, [r1, #20]
		pifLog_Printf(LT_NONE, " (%d): %s-%d,  proc: M=%dus, A=%dus T=%dms", p_owner->_id, mode[p_owner->_mode], p_owner->_period,
 801555c:	4c23      	ldr	r4, [pc, #140]	; (80155ec <pifTaskManager_Print+0x11c>)
 801555e:	fba4 4101 	umull	r4, r1, r4, r1
 8015562:	0989      	lsrs	r1, r1, #6
 8015564:	9103      	str	r1, [sp, #12]
 8015566:	9202      	str	r2, [sp, #8]
 8015568:	9301      	str	r3, [sp, #4]
 801556a:	9500      	str	r5, [sp, #0]
 801556c:	4603      	mov	r3, r0
 801556e:	4632      	mov	r2, r6
 8015570:	491f      	ldr	r1, [pc, #124]	; (80155f0 <pifTaskManager_Print+0x120>)
 8015572:	2000      	movs	r0, #0
 8015574:	f7fe fb40 	bl	8013bf8 <pifLog_Printf>
		if (p_owner->_total_period_time) {
 8015578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801557a:	69db      	ldr	r3, [r3, #28]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d00a      	beq.n	8015596 <pifTaskManager_Print+0xc6>
			pifLog_Printf(LT_NONE, ",  period: %dus", p_owner->_total_period_time / p_owner->_period_count);
 8015580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015582:	69da      	ldr	r2, [r3, #28]
 8015584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015586:	6a1b      	ldr	r3, [r3, #32]
 8015588:	fbb2 f3f3 	udiv	r3, r2, r3
 801558c:	461a      	mov	r2, r3
 801558e:	4919      	ldr	r1, [pc, #100]	; (80155f4 <pifTaskManager_Print+0x124>)
 8015590:	2000      	movs	r0, #0
 8015592:	f7fe fb31 	bl	8013bf8 <pifLog_Printf>
		}
		if (p_owner->_total_trigger_delay) {
 8015596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801559a:	2b00      	cmp	r3, #0
 801559c:	d00c      	beq.n	80155b8 <pifTaskManager_Print+0xe8>
			pifLog_Printf(LT_NONE, ",  delay: M=%dus A=%dus", p_owner->_max_trigger_delay, p_owner->_total_trigger_delay / p_owner->_execution_count);
 801559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80155a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80155a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155a8:	699b      	ldr	r3, [r3, #24]
 80155aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80155ae:	460a      	mov	r2, r1
 80155b0:	4911      	ldr	r1, [pc, #68]	; (80155f8 <pifTaskManager_Print+0x128>)
 80155b2:	2000      	movs	r0, #0
 80155b4:	f7fe fb20 	bl	8013bf8 <pifLog_Printf>
		}
		pifLog_Print(LT_NONE, "\n");
 80155b8:	4910      	ldr	r1, [pc, #64]	; (80155fc <pifTaskManager_Print+0x12c>)
 80155ba:	2000      	movs	r0, #0
 80155bc:	f7fe fa8e 	bl	8013adc <pifLog_Print>
		it = pifFixList_Next(it);
 80155c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80155c2:	f7fd fcfc 	bl	8012fbe <pifFixList_Next>
 80155c6:	62f8      	str	r0, [r7, #44]	; 0x2c
	while (it) {
 80155c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d19c      	bne.n	8015508 <pifTaskManager_Print+0x38>
	}
}
 80155ce:	bf00      	nop
 80155d0:	bf00      	nop
 80155d2:	3734      	adds	r7, #52	; 0x34
 80155d4:	46bd      	mov	sp, r7
 80155d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155d8:	08028a28 	.word	0x08028a28
 80155dc:	20001e90 	.word	0x20001e90
 80155e0:	080289b0 	.word	0x080289b0
 80155e4:	080289c0 	.word	0x080289c0
 80155e8:	080289c8 	.word	0x080289c8
 80155ec:	10624dd3 	.word	0x10624dd3
 80155f0:	080289d0 	.word	0x080289d0
 80155f4:	080289fc 	.word	0x080289fc
 80155f8:	08028a0c 	.word	0x08028a0c
 80155fc:	08028a24 	.word	0x08028a24

08015600 <_doTask>:
#include "core/pif_timer.h"


static uint16_t _doTask(PifTask* p_task)
{
 8015600:	b580      	push	{r7, lr}
 8015602:	b086      	sub	sp, #24
 8015604:	af00      	add	r7, sp, #0
 8015606:	6078      	str	r0, [r7, #4]
	PifTimerManager* p_manager = p_task->_p_client;
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	68db      	ldr	r3, [r3, #12]
 801560c:	613b      	str	r3, [r7, #16]

	PifFixListIterator it = pifFixList_Begin(&p_manager->__timers);
 801560e:	693b      	ldr	r3, [r7, #16]
 8015610:	3308      	adds	r3, #8
 8015612:	4618      	mov	r0, r3
 8015614:	f7fd fcc7 	bl	8012fa6 <pifFixList_Begin>
 8015618:	6178      	str	r0, [r7, #20]
	while (it) {
 801561a:	e017      	b.n	801564c <_doTask+0x4c>
		PifTimer* p_timer = (PifTimer*)it->data;
 801561c:	697b      	ldr	r3, [r7, #20]
 801561e:	3308      	adds	r3, #8
 8015620:	60fb      	str	r3, [r7, #12]

		if (p_timer->__event) {
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	7f1b      	ldrb	r3, [r3, #28]
 8015626:	2b00      	cmp	r3, #0
 8015628:	d00c      	beq.n	8015644 <_doTask+0x44>
			p_timer->__event = FALSE;
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	2200      	movs	r2, #0
 801562e:	771a      	strb	r2, [r3, #28]

			if (p_timer->__evt_finish) (*p_timer->__evt_finish)(p_timer->__p_finish_issuer);
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	6a1b      	ldr	r3, [r3, #32]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d005      	beq.n	8015644 <_doTask+0x44>
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	6a1b      	ldr	r3, [r3, #32]
 801563c:	68fa      	ldr	r2, [r7, #12]
 801563e:	6912      	ldr	r2, [r2, #16]
 8015640:	4610      	mov	r0, r2
 8015642:	4798      	blx	r3
		}

		it = pifFixList_Next(it);
 8015644:	6978      	ldr	r0, [r7, #20]
 8015646:	f7fd fcba 	bl	8012fbe <pifFixList_Next>
 801564a:	6178      	str	r0, [r7, #20]
	while (it) {
 801564c:	697b      	ldr	r3, [r7, #20]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d1e4      	bne.n	801561c <_doTask+0x1c>
	}
	return 0;
 8015652:	2300      	movs	r3, #0
}
 8015654:	4618      	mov	r0, r3
 8015656:	3718      	adds	r7, #24
 8015658:	46bd      	mov	sp, r7
 801565a:	bd80      	pop	{r7, pc}

0801565c <pifTimerManager_Init>:

BOOL pifTimerManager_Init(PifTimerManager* p_manager, PifId id, uint32_t period1us, int max_count)
{
 801565c:	b580      	push	{r7, lr}
 801565e:	b086      	sub	sp, #24
 8015660:	af02      	add	r7, sp, #8
 8015662:	60f8      	str	r0, [r7, #12]
 8015664:	607a      	str	r2, [r7, #4]
 8015666:	603b      	str	r3, [r7, #0]
 8015668:	460b      	mov	r3, r1
 801566a:	817b      	strh	r3, [r7, #10]
    if (!p_manager || !period1us) {
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d002      	beq.n	8015678 <pifTimerManager_Init+0x1c>
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d104      	bne.n	8015682 <pifTimerManager_Init+0x26>
        pif_error = E_INVALID_PARAM;
 8015678:	4b21      	ldr	r3, [pc, #132]	; (8015700 <pifTimerManager_Init+0xa4>)
 801567a:	2201      	movs	r2, #1
 801567c:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801567e:	2300      	movs	r3, #0
 8015680:	e03a      	b.n	80156f8 <pifTimerManager_Init+0x9c>
    }

	memset(p_manager, 0, sizeof(PifTimerManager));
 8015682:	2224      	movs	r2, #36	; 0x24
 8015684:	2100      	movs	r1, #0
 8015686:	68f8      	ldr	r0, [r7, #12]
 8015688:	f00e fc18 	bl	8023ebc <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 801568c:	897b      	ldrh	r3, [r7, #10]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d106      	bne.n	80156a0 <pifTimerManager_Init+0x44>
 8015692:	4b1c      	ldr	r3, [pc, #112]	; (8015704 <pifTimerManager_Init+0xa8>)
 8015694:	881b      	ldrh	r3, [r3, #0]
 8015696:	1c5a      	adds	r2, r3, #1
 8015698:	b291      	uxth	r1, r2
 801569a:	4a1a      	ldr	r2, [pc, #104]	; (8015704 <pifTimerManager_Init+0xa8>)
 801569c:	8011      	strh	r1, [r2, #0]
 801569e:	817b      	strh	r3, [r7, #10]
    p_manager->_id = id;
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	897a      	ldrh	r2, [r7, #10]
 80156a4:	801a      	strh	r2, [r3, #0]
    if (!pifFixList_Init(&p_manager->__timers, sizeof(PifTimer), max_count)) goto fail;
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	3308      	adds	r3, #8
 80156aa:	683a      	ldr	r2, [r7, #0]
 80156ac:	2128      	movs	r1, #40	; 0x28
 80156ae:	4618      	mov	r0, r3
 80156b0:	f7fd fb72 	bl	8012d98 <pifFixList_Init>
 80156b4:	4603      	mov	r3, r0
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d017      	beq.n	80156ea <pifTimerManager_Init+0x8e>
    p_manager->_period1us = period1us;
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	687a      	ldr	r2, [r7, #4]
 80156be:	605a      	str	r2, [r3, #4]

    p_manager->__p_task = pifTaskManager_Add(TM_TIMER, 0, _doTask, p_manager, TRUE);
 80156c0:	2301      	movs	r3, #1
 80156c2:	9300      	str	r3, [sp, #0]
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	4a10      	ldr	r2, [pc, #64]	; (8015708 <pifTimerManager_Init+0xac>)
 80156c8:	2100      	movs	r1, #0
 80156ca:	2008      	movs	r0, #8
 80156cc:	f7ff fbb6 	bl	8014e3c <pifTaskManager_Add>
 80156d0:	4602      	mov	r2, r0
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	621a      	str	r2, [r3, #32]
    if (!p_manager->__p_task) goto fail;
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	6a1b      	ldr	r3, [r3, #32]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d007      	beq.n	80156ee <pifTimerManager_Init+0x92>
    p_manager->__p_task->name = "Timer";
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	6a1b      	ldr	r3, [r3, #32]
 80156e2:	4a0a      	ldr	r2, [pc, #40]	; (801570c <pifTimerManager_Init+0xb0>)
 80156e4:	601a      	str	r2, [r3, #0]
    return TRUE;
 80156e6:	2301      	movs	r3, #1
 80156e8:	e006      	b.n	80156f8 <pifTimerManager_Init+0x9c>
    if (!pifFixList_Init(&p_manager->__timers, sizeof(PifTimer), max_count)) goto fail;
 80156ea:	bf00      	nop
 80156ec:	e000      	b.n	80156f0 <pifTimerManager_Init+0x94>
    if (!p_manager->__p_task) goto fail;
 80156ee:	bf00      	nop

fail:
	pifTimerManager_Clear(p_manager);
 80156f0:	68f8      	ldr	r0, [r7, #12]
 80156f2:	f000 f80d 	bl	8015710 <pifTimerManager_Clear>
    return FALSE;
 80156f6:	2300      	movs	r3, #0
}
 80156f8:	4618      	mov	r0, r3
 80156fa:	3710      	adds	r7, #16
 80156fc:	46bd      	mov	sp, r7
 80156fe:	bd80      	pop	{r7, pc}
 8015700:	20001de0 	.word	0x20001de0
 8015704:	20000128 	.word	0x20000128
 8015708:	08015601 	.word	0x08015601
 801570c:	08028a7c 	.word	0x08028a7c

08015710 <pifTimerManager_Clear>:

void pifTimerManager_Clear(PifTimerManager* p_manager)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b082      	sub	sp, #8
 8015714:	af00      	add	r7, sp, #0
 8015716:	6078      	str	r0, [r7, #4]
	if (p_manager->__p_task) {
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	6a1b      	ldr	r3, [r3, #32]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d007      	beq.n	8015730 <pifTimerManager_Clear+0x20>
		pifTaskManager_Remove(p_manager->__p_task);
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	6a1b      	ldr	r3, [r3, #32]
 8015724:	4618      	mov	r0, r3
 8015726:	f7ff fbf1 	bl	8014f0c <pifTaskManager_Remove>
		p_manager->__p_task = NULL;
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	2200      	movs	r2, #0
 801572e:	621a      	str	r2, [r3, #32]
	}
	pifFixList_Clear(&p_manager->__timers, NULL);
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	3308      	adds	r3, #8
 8015734:	2100      	movs	r1, #0
 8015736:	4618      	mov	r0, r3
 8015738:	f7fd fb8e 	bl	8012e58 <pifFixList_Clear>
}
 801573c:	bf00      	nop
 801573e:	3708      	adds	r7, #8
 8015740:	46bd      	mov	sp, r7
 8015742:	bd80      	pop	{r7, pc}

08015744 <pifTimerManager_Add>:

PifTimer* pifTimerManager_Add(PifTimerManager* p_manager, PifTimerType type)
{
 8015744:	b580      	push	{r7, lr}
 8015746:	b084      	sub	sp, #16
 8015748:	af00      	add	r7, sp, #0
 801574a:	6078      	str	r0, [r7, #4]
 801574c:	460b      	mov	r3, r1
 801574e:	70fb      	strb	r3, [r7, #3]
	PifTimer* p_timer = (PifTimer*)pifFixList_AddFirst(&p_manager->__timers);
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	3308      	adds	r3, #8
 8015754:	4618      	mov	r0, r3
 8015756:	f7fd fbb2 	bl	8012ebe <pifFixList_AddFirst>
 801575a:	60f8      	str	r0, [r7, #12]
    if (!p_timer) return NULL;
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d101      	bne.n	8015766 <pifTimerManager_Add+0x22>
 8015762:	2300      	movs	r3, #0
 8015764:	e006      	b.n	8015774 <pifTimerManager_Add+0x30>

    p_timer->_type = type;
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	78fa      	ldrb	r2, [r7, #3]
 801576a:	721a      	strb	r2, [r3, #8]
    p_timer->_step = TS_STOP;
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	2200      	movs	r2, #0
 8015770:	725a      	strb	r2, [r3, #9]
    return p_timer;
 8015772:	68fb      	ldr	r3, [r7, #12]
}
 8015774:	4618      	mov	r0, r3
 8015776:	3710      	adds	r7, #16
 8015778:	46bd      	mov	sp, r7
 801577a:	bd80      	pop	{r7, pc}

0801577c <pifTimerManager_Remove>:

void pifTimerManager_Remove(PifTimer* p_timer)
{
 801577c:	b480      	push	{r7}
 801577e:	b083      	sub	sp, #12
 8015780:	af00      	add	r7, sp, #0
 8015782:	6078      	str	r0, [r7, #4]
	p_timer->_step = TS_REMOVE;
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	2202      	movs	r2, #2
 8015788:	725a      	strb	r2, [r3, #9]
}
 801578a:	bf00      	nop
 801578c:	370c      	adds	r7, #12
 801578e:	46bd      	mov	sp, r7
 8015790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015794:	4770      	bx	lr

08015796 <pifTimerManager_Count>:

int pifTimerManager_Count(PifTimerManager* p_manager)
{
 8015796:	b580      	push	{r7, lr}
 8015798:	b082      	sub	sp, #8
 801579a:	af00      	add	r7, sp, #0
 801579c:	6078      	str	r0, [r7, #4]
	return pifFixList_Count(&p_manager->__timers);
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	3308      	adds	r3, #8
 80157a2:	4618      	mov	r0, r3
 80157a4:	f7fd fbf3 	bl	8012f8e <pifFixList_Count>
 80157a8:	4603      	mov	r3, r0
}
 80157aa:	4618      	mov	r0, r3
 80157ac:	3708      	adds	r7, #8
 80157ae:	46bd      	mov	sp, r7
 80157b0:	bd80      	pop	{r7, pc}
	...

080157b4 <pifTimer_Start>:

BOOL pifTimer_Start(PifTimer* p_owner, uint32_t target)
{
 80157b4:	b480      	push	{r7}
 80157b6:	b083      	sub	sp, #12
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
 80157bc:	6039      	str	r1, [r7, #0]
	if (!target) {
 80157be:	683b      	ldr	r3, [r7, #0]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d104      	bne.n	80157ce <pifTimer_Start+0x1a>
		pif_error = E_INVALID_PARAM;
 80157c4:	4b11      	ldr	r3, [pc, #68]	; (801580c <pifTimer_Start+0x58>)
 80157c6:	2201      	movs	r2, #1
 80157c8:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 80157ca:	2300      	movs	r3, #0
 80157cc:	e017      	b.n	80157fe <pifTimer_Start+0x4a>
    }

    if (p_owner->_step == TS_STOP) {
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	7a5b      	ldrb	r3, [r3, #9]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d105      	bne.n	80157e2 <pifTimer_Start+0x2e>
    	p_owner->_step = TS_RUNNING;
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	2201      	movs	r2, #1
 80157da:	725a      	strb	r2, [r3, #9]
    	p_owner->__event = FALSE;
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	2200      	movs	r2, #0
 80157e0:	771a      	strb	r2, [r3, #28]
    }
    p_owner->target = target;
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	683a      	ldr	r2, [r7, #0]
 80157e6:	601a      	str	r2, [r3, #0]
    p_owner->__current = target;
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	683a      	ldr	r2, [r7, #0]
 80157ec:	60da      	str	r2, [r3, #12]

    if (p_owner->_type == TT_PWM) {
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	7a1b      	ldrb	r3, [r3, #8]
 80157f2:	2b02      	cmp	r3, #2
 80157f4:	d102      	bne.n	80157fc <pifTimer_Start+0x48>
    	p_owner->__pwm_duty = 0;
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	2200      	movs	r2, #0
 80157fa:	619a      	str	r2, [r3, #24]
    }
    return TRUE;
 80157fc:	2301      	movs	r3, #1
}
 80157fe:	4618      	mov	r0, r3
 8015800:	370c      	adds	r7, #12
 8015802:	46bd      	mov	sp, r7
 8015804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015808:	4770      	bx	lr
 801580a:	bf00      	nop
 801580c:	20001de0 	.word	0x20001de0

08015810 <pifTimer_Stop>:

void pifTimer_Stop(PifTimer* p_owner)
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b082      	sub	sp, #8
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
	p_owner->__current = 0;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	2200      	movs	r2, #0
 801581c:	60da      	str	r2, [r3, #12]
	p_owner->_step = TS_STOP;
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	2200      	movs	r2, #0
 8015822:	725a      	strb	r2, [r3, #9]
	if (p_owner->_type == TT_PWM) {
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	7a1b      	ldrb	r3, [r3, #8]
 8015828:	2b02      	cmp	r3, #2
 801582a:	d103      	bne.n	8015834 <pifTimer_Stop+0x24>
		(*p_owner->act_pwm)(OFF);
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	685b      	ldr	r3, [r3, #4]
 8015830:	2000      	movs	r0, #0
 8015832:	4798      	blx	r3
	}
}
 8015834:	bf00      	nop
 8015836:	3708      	adds	r7, #8
 8015838:	46bd      	mov	sp, r7
 801583a:	bd80      	pop	{r7, pc}

0801583c <pifTimer_Reset>:

void pifTimer_Reset(PifTimer* p_owner)
{
 801583c:	b480      	push	{r7}
 801583e:	b083      	sub	sp, #12
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
	p_owner->__current = p_owner->target;
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	681a      	ldr	r2, [r3, #0]
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	60da      	str	r2, [r3, #12]
	p_owner->_step = TS_RUNNING;
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	2201      	movs	r2, #1
 8015850:	725a      	strb	r2, [r3, #9]
}
 8015852:	bf00      	nop
 8015854:	370c      	adds	r7, #12
 8015856:	46bd      	mov	sp, r7
 8015858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585c:	4770      	bx	lr

0801585e <pifTimerManager_sigTick>:
	if (p_owner->_step != TS_RUNNING) return 0;
	else return p_owner->target - p_owner->__current;
}

void pifTimerManager_sigTick(PifTimerManager* p_manager)
{
 801585e:	b580      	push	{r7, lr}
 8015860:	b086      	sub	sp, #24
 8015862:	af00      	add	r7, sp, #0
 8015864:	6078      	str	r0, [r7, #4]
	PifTimer* p_remove = NULL;
 8015866:	2300      	movs	r3, #0
 8015868:	617b      	str	r3, [r7, #20]

    if (!p_manager) return;
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	2b00      	cmp	r3, #0
 801586e:	f000 8092 	beq.w	8015996 <pifTimerManager_sigTick+0x138>

    PifFixListIterator it = pifFixList_Begin(&p_manager->__timers);
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	3308      	adds	r3, #8
 8015876:	4618      	mov	r0, r3
 8015878:	f7fd fb95 	bl	8012fa6 <pifFixList_Begin>
 801587c:	6138      	str	r0, [r7, #16]
	while (it) {
 801587e:	e07c      	b.n	801597a <pifTimerManager_sigTick+0x11c>
		PifTimer* p_timer = (PifTimer*)it->data;
 8015880:	693b      	ldr	r3, [r7, #16]
 8015882:	3308      	adds	r3, #8
 8015884:	60fb      	str	r3, [r7, #12]

		if (p_timer->_step == TS_REMOVE) {
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	7a5b      	ldrb	r3, [r3, #9]
 801588a:	2b02      	cmp	r3, #2
 801588c:	d105      	bne.n	801589a <pifTimerManager_sigTick+0x3c>
			if (!p_remove) p_remove = p_timer;
 801588e:	697b      	ldr	r3, [r7, #20]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d16e      	bne.n	8015972 <pifTimerManager_sigTick+0x114>
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	617b      	str	r3, [r7, #20]
 8015898:	e06b      	b.n	8015972 <pifTimerManager_sigTick+0x114>
		}
		else if (p_timer->__current) {
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	68db      	ldr	r3, [r3, #12]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d060      	beq.n	8015964 <pifTimerManager_sigTick+0x106>
			p_timer->__current--;
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	68db      	ldr	r3, [r3, #12]
 80158a6:	1e5a      	subs	r2, r3, #1
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	60da      	str	r2, [r3, #12]
			switch (p_timer->_type) {
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	7a1b      	ldrb	r3, [r3, #8]
 80158b0:	2b02      	cmp	r3, #2
 80158b2:	d031      	beq.n	8015918 <pifTimerManager_sigTick+0xba>
 80158b4:	2b02      	cmp	r3, #2
 80158b6:	dc5c      	bgt.n	8015972 <pifTimerManager_sigTick+0x114>
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d002      	beq.n	80158c2 <pifTimerManager_sigTick+0x64>
 80158bc:	2b01      	cmp	r3, #1
 80158be:	d015      	beq.n	80158ec <pifTimerManager_sigTick+0x8e>
 80158c0:	e057      	b.n	8015972 <pifTimerManager_sigTick+0x114>
			case TT_ONCE:
				if (!p_timer->__current) {
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	68db      	ldr	r3, [r3, #12]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d14e      	bne.n	8015968 <pifTimerManager_sigTick+0x10a>
					p_timer->_step = TS_STOP;
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	2200      	movs	r2, #0
 80158ce:	725a      	strb	r2, [r3, #9]
					p_timer->__event = TRUE;
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	2201      	movs	r2, #1
 80158d4:	771a      	strb	r2, [r3, #28]
					if (p_timer->__evt_int_finish) {
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d044      	beq.n	8015968 <pifTimerManager_sigTick+0x10a>
						(*p_timer->__evt_int_finish)(p_timer->__p_int_finish_issuer);
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158e2:	68fa      	ldr	r2, [r7, #12]
 80158e4:	6952      	ldr	r2, [r2, #20]
 80158e6:	4610      	mov	r0, r2
 80158e8:	4798      	blx	r3
					}
				}
				break;
 80158ea:	e03d      	b.n	8015968 <pifTimerManager_sigTick+0x10a>

			case TT_REPEAT:
				if (!p_timer->__current) {
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	68db      	ldr	r3, [r3, #12]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d13b      	bne.n	801596c <pifTimerManager_sigTick+0x10e>
					p_timer->__current = p_timer->target;
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	681a      	ldr	r2, [r3, #0]
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	60da      	str	r2, [r3, #12]
					p_timer->__event = TRUE;
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	2201      	movs	r2, #1
 8015900:	771a      	strb	r2, [r3, #28]
					if (p_timer->__evt_int_finish) {
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015906:	2b00      	cmp	r3, #0
 8015908:	d030      	beq.n	801596c <pifTimerManager_sigTick+0x10e>
						(*p_timer->__evt_int_finish)(p_timer->__p_int_finish_issuer);
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801590e:	68fa      	ldr	r2, [r7, #12]
 8015910:	6952      	ldr	r2, [r2, #20]
 8015912:	4610      	mov	r0, r2
 8015914:	4798      	blx	r3
					}
				}
				break;
 8015916:	e029      	b.n	801596c <pifTimerManager_sigTick+0x10e>

			case TT_PWM:
				if (p_timer->__pwm_duty != p_timer->target) {
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	699a      	ldr	r2, [r3, #24]
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	429a      	cmp	r2, r3
 8015922:	d016      	beq.n	8015952 <pifTimerManager_sigTick+0xf4>
					if (!p_timer->__current) {
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	68db      	ldr	r3, [r3, #12]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d107      	bne.n	801593c <pifTimerManager_sigTick+0xde>
						(*p_timer->act_pwm)(OFF);
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	685b      	ldr	r3, [r3, #4]
 8015930:	2000      	movs	r0, #0
 8015932:	4798      	blx	r3
						p_timer->__current = p_timer->target;
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	681a      	ldr	r2, [r3, #0]
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	60da      	str	r2, [r3, #12]
					}
					if (p_timer->__current == p_timer->__pwm_duty) {
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	68da      	ldr	r2, [r3, #12]
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	699b      	ldr	r3, [r3, #24]
 8015944:	429a      	cmp	r2, r3
 8015946:	d113      	bne.n	8015970 <pifTimerManager_sigTick+0x112>
						(*p_timer->act_pwm)(ON);
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	685b      	ldr	r3, [r3, #4]
 801594c:	2001      	movs	r0, #1
 801594e:	4798      	blx	r3
				else {
					if (!p_timer->__current) {
						p_timer->__current = p_timer->target;
					}
				}
				break;
 8015950:	e00e      	b.n	8015970 <pifTimerManager_sigTick+0x112>
					if (!p_timer->__current) {
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	68db      	ldr	r3, [r3, #12]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d10a      	bne.n	8015970 <pifTimerManager_sigTick+0x112>
						p_timer->__current = p_timer->target;
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	681a      	ldr	r2, [r3, #0]
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	60da      	str	r2, [r3, #12]
				break;
 8015962:	e005      	b.n	8015970 <pifTimerManager_sigTick+0x112>
			}
		}
 8015964:	bf00      	nop
 8015966:	e004      	b.n	8015972 <pifTimerManager_sigTick+0x114>
				break;
 8015968:	bf00      	nop
 801596a:	e002      	b.n	8015972 <pifTimerManager_sigTick+0x114>
				break;
 801596c:	bf00      	nop
 801596e:	e000      	b.n	8015972 <pifTimerManager_sigTick+0x114>
				break;
 8015970:	bf00      	nop

		it = pifFixList_Next(it);
 8015972:	6938      	ldr	r0, [r7, #16]
 8015974:	f7fd fb23 	bl	8012fbe <pifFixList_Next>
 8015978:	6138      	str	r0, [r7, #16]
	while (it) {
 801597a:	693b      	ldr	r3, [r7, #16]
 801597c:	2b00      	cmp	r3, #0
 801597e:	f47f af7f 	bne.w	8015880 <pifTimerManager_sigTick+0x22>
	}

	if (p_remove) pifFixList_Remove(&p_manager->__timers, p_remove);
 8015982:	697b      	ldr	r3, [r7, #20]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d007      	beq.n	8015998 <pifTimerManager_sigTick+0x13a>
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	3308      	adds	r3, #8
 801598c:	6979      	ldr	r1, [r7, #20]
 801598e:	4618      	mov	r0, r3
 8015990:	f7fd fac9 	bl	8012f26 <pifFixList_Remove>
 8015994:	e000      	b.n	8015998 <pifTimerManager_sigTick+0x13a>
    if (!p_manager) return;
 8015996:	bf00      	nop
}
 8015998:	3718      	adds	r7, #24
 801599a:	46bd      	mov	sp, r7
 801599c:	bd80      	pop	{r7, pc}

0801599e <pifTimer_AttachEvtFinish>:

void pifTimer_AttachEvtFinish(PifTimer* p_owner, PifEvtTimerFinish evt_finish, PifIssuerP p_issuer)
{
 801599e:	b480      	push	{r7}
 80159a0:	b085      	sub	sp, #20
 80159a2:	af00      	add	r7, sp, #0
 80159a4:	60f8      	str	r0, [r7, #12]
 80159a6:	60b9      	str	r1, [r7, #8]
 80159a8:	607a      	str	r2, [r7, #4]
	p_owner->__evt_finish = evt_finish;
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	68ba      	ldr	r2, [r7, #8]
 80159ae:	621a      	str	r2, [r3, #32]
	p_owner->__p_finish_issuer = p_issuer;
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	687a      	ldr	r2, [r7, #4]
 80159b4:	611a      	str	r2, [r3, #16]
}
 80159b6:	bf00      	nop
 80159b8:	3714      	adds	r7, #20
 80159ba:	46bd      	mov	sp, r7
 80159bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c0:	4770      	bx	lr
	...

080159c4 <pifNoiseFilter_Init>:
#include "filter/pif_noise_filter.h"


BOOL pifNoiseFilter_Init(PifNoiseFilter* p_owner, PifNoiseFilterType type)
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b082      	sub	sp, #8
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	6078      	str	r0, [r7, #4]
 80159cc:	460b      	mov	r3, r1
 80159ce:	70fb      	strb	r3, [r7, #3]
	if (!p_owner) {
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d104      	bne.n	80159e0 <pifNoiseFilter_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 80159d6:	4b09      	ldr	r3, [pc, #36]	; (80159fc <pifNoiseFilter_Init+0x38>)
 80159d8:	2201      	movs	r2, #1
 80159da:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80159dc:	2300      	movs	r3, #0
 80159de:	e008      	b.n	80159f2 <pifNoiseFilter_Init+0x2e>
	}

    memset(p_owner, 0, sizeof(PifNoiseFilter));
 80159e0:	2208      	movs	r2, #8
 80159e2:	2100      	movs	r1, #0
 80159e4:	6878      	ldr	r0, [r7, #4]
 80159e6:	f00e fa69 	bl	8023ebc <memset>

    p_owner->_type = type;
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	78fa      	ldrb	r2, [r7, #3]
 80159ee:	701a      	strb	r2, [r3, #0]
    return TRUE;
 80159f0:	2301      	movs	r3, #1
}
 80159f2:	4618      	mov	r0, r3
 80159f4:	3708      	adds	r7, #8
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bd80      	pop	{r7, pc}
 80159fa:	bf00      	nop
 80159fc:	20001de0 	.word	0x20001de0

08015a00 <pifNoiseFilter_Process>:

#ifdef __PIF_NO_USE_INLINE__

PifNoiseFilterValueP pifNoiseFilter_Process(PifNoiseFilter* p_owner, PifNoiseFilterValueP p_value)
{
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b082      	sub	sp, #8
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	6078      	str	r0, [r7, #4]
 8015a08:	6039      	str	r1, [r7, #0]
	return (*p_owner->__fn_process)(p_owner, p_value);
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	685b      	ldr	r3, [r3, #4]
 8015a0e:	6839      	ldr	r1, [r7, #0]
 8015a10:	6878      	ldr	r0, [r7, #4]
 8015a12:	4798      	blx	r3
 8015a14:	4603      	mov	r3, r0
}
 8015a16:	4618      	mov	r0, r3
 8015a18:	3708      	adds	r7, #8
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	bd80      	pop	{r7, pc}

08015a1e <_clear>:
#include "filter/pif_noise_filter_int32.h"


static void _clear(PifNoiseFilterInt32* p_owner)
{
 8015a1e:	b580      	push	{r7, lr}
 8015a20:	b082      	sub	sp, #8
 8015a22:	af00      	add	r7, sp, #0
 8015a24:	6078      	str	r0, [r7, #4]
	switch (p_owner->parent._type) {
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	781b      	ldrb	r3, [r3, #0]
 8015a2a:	2b01      	cmp	r3, #1
 8015a2c:	d002      	beq.n	8015a34 <_clear+0x16>
 8015a2e:	2b02      	cmp	r3, #2
 8015a30:	d00d      	beq.n	8015a4e <_clear+0x30>
			p_owner->__nc.diff = NULL;
		}
		break;

	default:
		break;
 8015a32:	e01c      	b.n	8015a6e <_clear+0x50>
		if (p_owner->__wf.value) {
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	699b      	ldr	r3, [r3, #24]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d015      	beq.n	8015a68 <_clear+0x4a>
			free(p_owner->__wf.value);
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	699b      	ldr	r3, [r3, #24]
 8015a40:	4618      	mov	r0, r3
 8015a42:	f00e fa25 	bl	8023e90 <free>
			p_owner->__wf.value = NULL;
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	2200      	movs	r2, #0
 8015a4a:	619a      	str	r2, [r3, #24]
		break;
 8015a4c:	e00c      	b.n	8015a68 <_clear+0x4a>
		if (p_owner->__nc.diff) {
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	69db      	ldr	r3, [r3, #28]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d00a      	beq.n	8015a6c <_clear+0x4e>
			free(p_owner->__nc.diff);
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	69db      	ldr	r3, [r3, #28]
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	f00e fa18 	bl	8023e90 <free>
			p_owner->__nc.diff = NULL;
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	2200      	movs	r2, #0
 8015a64:	61da      	str	r2, [r3, #28]
		break;
 8015a66:	e001      	b.n	8015a6c <_clear+0x4e>
		break;
 8015a68:	bf00      	nop
 8015a6a:	e000      	b.n	8015a6e <_clear+0x50>
		break;
 8015a6c:	bf00      	nop
	}
}
 8015a6e:	bf00      	nop
 8015a70:	3708      	adds	r7, #8
 8015a72:	46bd      	mov	sp, r7
 8015a74:	bd80      	pop	{r7, pc}

08015a76 <_processAverage>:

static PifNoiseFilterValueP _processAverage(PifNoiseFilter* p_parent, PifNoiseFilterValueP p_value)
{
 8015a76:	b480      	push	{r7}
 8015a78:	b085      	sub	sp, #20
 8015a7a:	af00      	add	r7, sp, #0
 8015a7c:	6078      	str	r0, [r7, #4]
 8015a7e:	6039      	str	r1, [r7, #0]
	PifNoiseFilterInt32* p_owner = (PifNoiseFilterInt32*)p_parent;
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	60fb      	str	r3, [r7, #12]

	p_owner->__current = (p_owner->__current + 1) % p_owner->_size;
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015a8a:	3301      	adds	r3, #1
 8015a8c:	68fa      	ldr	r2, [r7, #12]
 8015a8e:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8015a92:	fb93 f1f2 	sdiv	r1, r3, r2
 8015a96:	fb01 f202 	mul.w	r2, r1, r2
 8015a9a:	1a9b      	subs	r3, r3, r2
 8015a9c:	b25a      	sxtb	r2, r3
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	751a      	strb	r2, [r3, #20]
	p_owner->__avg.sum -= p_owner->__buffer[p_owner->__current];
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	699a      	ldr	r2, [r3, #24]
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	6919      	ldr	r1, [r3, #16]
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015ab0:	009b      	lsls	r3, r3, #2
 8015ab2:	440b      	add	r3, r1
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	1ad2      	subs	r2, r2, r3
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	619a      	str	r2, [r3, #24]
	p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	691a      	ldr	r2, [r3, #16]
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015ac6:	009b      	lsls	r3, r3, #2
 8015ac8:	4413      	add	r3, r2
 8015aca:	683a      	ldr	r2, [r7, #0]
 8015acc:	6812      	ldr	r2, [r2, #0]
 8015ace:	601a      	str	r2, [r3, #0]

	p_owner->__avg.sum += p_owner->__buffer[p_owner->__current];
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	699a      	ldr	r2, [r3, #24]
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	6919      	ldr	r1, [r3, #16]
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015ade:	009b      	lsls	r3, r3, #2
 8015ae0:	440b      	add	r3, r1
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	441a      	add	r2, r3
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	619a      	str	r2, [r3, #24]
	p_owner->_result = p_owner->__avg.sum / p_owner->_size;
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	699b      	ldr	r3, [r3, #24]
 8015aee:	68fa      	ldr	r2, [r7, #12]
 8015af0:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8015af4:	fb93 f2f2 	sdiv	r2, r3, r2
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	60da      	str	r2, [r3, #12]
	return &p_owner->_result;
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	330c      	adds	r3, #12
}
 8015b00:	4618      	mov	r0, r3
 8015b02:	3714      	adds	r7, #20
 8015b04:	46bd      	mov	sp, r7
 8015b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b0a:	4770      	bx	lr

08015b0c <_processNoiseCancel>:
	p_owner->_result = sum / p_owner->__wf.total;
	return &p_owner->_result;
}

static PifNoiseFilterValueP _processNoiseCancel(PifNoiseFilter* p_parent, PifNoiseFilterValueP p_value)
{
 8015b0c:	b480      	push	{r7}
 8015b0e:	b08b      	sub	sp, #44	; 0x2c
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	6078      	str	r0, [r7, #4]
 8015b14:	6039      	str	r1, [r7, #0]
	PifNoiseFilterInt32* p_owner = (PifNoiseFilterInt32*)p_parent;
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	61bb      	str	r3, [r7, #24]
	int32_t sum;
	int16_t* p_current;
	int16_t* p_before;
	int16_t current[3];

	p_before = p_owner->__nc.diff + p_owner->__current * 3;
 8015b1a:	69bb      	ldr	r3, [r7, #24]
 8015b1c:	69da      	ldr	r2, [r3, #28]
 8015b1e:	69bb      	ldr	r3, [r7, #24]
 8015b20:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015b24:	4619      	mov	r1, r3
 8015b26:	460b      	mov	r3, r1
 8015b28:	005b      	lsls	r3, r3, #1
 8015b2a:	440b      	add	r3, r1
 8015b2c:	005b      	lsls	r3, r3, #1
 8015b2e:	4413      	add	r3, r2
 8015b30:	617b      	str	r3, [r7, #20]

	current[0] = *(int32_t*)p_value - p_owner->__buffer[p_owner->__current];
 8015b32:	683b      	ldr	r3, [r7, #0]
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	b29a      	uxth	r2, r3
 8015b38:	69bb      	ldr	r3, [r7, #24]
 8015b3a:	6919      	ldr	r1, [r3, #16]
 8015b3c:	69bb      	ldr	r3, [r7, #24]
 8015b3e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015b42:	009b      	lsls	r3, r3, #2
 8015b44:	440b      	add	r3, r1
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	b29b      	uxth	r3, r3
 8015b4a:	1ad3      	subs	r3, r2, r3
 8015b4c:	b29b      	uxth	r3, r3
 8015b4e:	b21b      	sxth	r3, r3
 8015b50:	813b      	strh	r3, [r7, #8]

	current[1] = current[0] - p_before[0];
 8015b52:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015b56:	b29a      	uxth	r2, r3
 8015b58:	697b      	ldr	r3, [r7, #20]
 8015b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b5e:	b29b      	uxth	r3, r3
 8015b60:	1ad3      	subs	r3, r2, r3
 8015b62:	b29b      	uxth	r3, r3
 8015b64:	b21b      	sxth	r3, r3
 8015b66:	817b      	strh	r3, [r7, #10]
	if (current[1] < 0) current[1] = -current[1];
 8015b68:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	da06      	bge.n	8015b7e <_processNoiseCancel+0x72>
 8015b70:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015b74:	b29b      	uxth	r3, r3
 8015b76:	425b      	negs	r3, r3
 8015b78:	b29b      	uxth	r3, r3
 8015b7a:	b21b      	sxth	r3, r3
 8015b7c:	817b      	strh	r3, [r7, #10]

	current[2] = current[0] + p_before[0];
 8015b7e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015b82:	b29a      	uxth	r2, r3
 8015b84:	697b      	ldr	r3, [r7, #20]
 8015b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b8a:	b29b      	uxth	r3, r3
 8015b8c:	4413      	add	r3, r2
 8015b8e:	b29b      	uxth	r3, r3
 8015b90:	b21b      	sxth	r3, r3
 8015b92:	81bb      	strh	r3, [r7, #12]
	if (current[2] < 0) current[2] = -current[2];
 8015b94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	da06      	bge.n	8015baa <_processNoiseCancel+0x9e>
 8015b9c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015ba0:	b29b      	uxth	r3, r3
 8015ba2:	425b      	negs	r3, r3
 8015ba4:	b29b      	uxth	r3, r3
 8015ba6:	b21b      	sxth	r3, r3
 8015ba8:	81bb      	strh	r3, [r7, #12]

	if (current[1] > current[2]) {
 8015baa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8015bae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015bb2:	429a      	cmp	r2, r3
 8015bb4:	dd6d      	ble.n	8015c92 <_processNoiseCancel+0x186>
		p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 8015bb6:	69bb      	ldr	r3, [r7, #24]
 8015bb8:	691a      	ldr	r2, [r3, #16]
 8015bba:	69bb      	ldr	r3, [r7, #24]
 8015bbc:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015bc0:	009b      	lsls	r3, r3, #2
 8015bc2:	4413      	add	r3, r2
 8015bc4:	683a      	ldr	r2, [r7, #0]
 8015bc6:	6812      	ldr	r2, [r2, #0]
 8015bc8:	601a      	str	r2, [r3, #0]

		p_current = p_before;
 8015bca:	697b      	ldr	r3, [r7, #20]
 8015bcc:	613b      	str	r3, [r7, #16]
		p_before = p_owner->__nc.diff + p_owner->__nc.before * 3;
 8015bce:	69bb      	ldr	r3, [r7, #24]
 8015bd0:	69da      	ldr	r2, [r3, #28]
 8015bd2:	69bb      	ldr	r3, [r7, #24]
 8015bd4:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8015bd8:	4619      	mov	r1, r3
 8015bda:	460b      	mov	r3, r1
 8015bdc:	005b      	lsls	r3, r3, #1
 8015bde:	440b      	add	r3, r1
 8015be0:	005b      	lsls	r3, r3, #1
 8015be2:	4413      	add	r3, r2
 8015be4:	617b      	str	r3, [r7, #20]

		p_current[0] = p_owner->__buffer[p_owner->__current] - p_owner->__buffer[p_owner->__nc.before];
 8015be6:	69bb      	ldr	r3, [r7, #24]
 8015be8:	691a      	ldr	r2, [r3, #16]
 8015bea:	69bb      	ldr	r3, [r7, #24]
 8015bec:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015bf0:	009b      	lsls	r3, r3, #2
 8015bf2:	4413      	add	r3, r2
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	b29a      	uxth	r2, r3
 8015bf8:	69bb      	ldr	r3, [r7, #24]
 8015bfa:	6919      	ldr	r1, [r3, #16]
 8015bfc:	69bb      	ldr	r3, [r7, #24]
 8015bfe:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8015c02:	009b      	lsls	r3, r3, #2
 8015c04:	440b      	add	r3, r1
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	b29b      	uxth	r3, r3
 8015c0a:	1ad3      	subs	r3, r2, r3
 8015c0c:	b29b      	uxth	r3, r3
 8015c0e:	b21a      	sxth	r2, r3
 8015c10:	693b      	ldr	r3, [r7, #16]
 8015c12:	801a      	strh	r2, [r3, #0]

		p_current[1] = p_current[0] - p_before[0];
 8015c14:	693b      	ldr	r3, [r7, #16]
 8015c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c1a:	b29a      	uxth	r2, r3
 8015c1c:	697b      	ldr	r3, [r7, #20]
 8015c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c22:	b29b      	uxth	r3, r3
 8015c24:	1ad3      	subs	r3, r2, r3
 8015c26:	b29a      	uxth	r2, r3
 8015c28:	693b      	ldr	r3, [r7, #16]
 8015c2a:	3302      	adds	r3, #2
 8015c2c:	b212      	sxth	r2, r2
 8015c2e:	801a      	strh	r2, [r3, #0]
		if (p_current[1] < 0) p_current[1] = -p_current[1];
 8015c30:	693b      	ldr	r3, [r7, #16]
 8015c32:	3302      	adds	r3, #2
 8015c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	da0a      	bge.n	8015c52 <_processNoiseCancel+0x146>
 8015c3c:	693b      	ldr	r3, [r7, #16]
 8015c3e:	3302      	adds	r3, #2
 8015c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c44:	b29b      	uxth	r3, r3
 8015c46:	425b      	negs	r3, r3
 8015c48:	b29a      	uxth	r2, r3
 8015c4a:	693b      	ldr	r3, [r7, #16]
 8015c4c:	3302      	adds	r3, #2
 8015c4e:	b212      	sxth	r2, r2
 8015c50:	801a      	strh	r2, [r3, #0]

		p_current[2] = p_current[0] + p_before[0];
 8015c52:	693b      	ldr	r3, [r7, #16]
 8015c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c58:	b29a      	uxth	r2, r3
 8015c5a:	697b      	ldr	r3, [r7, #20]
 8015c5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c60:	b29b      	uxth	r3, r3
 8015c62:	4413      	add	r3, r2
 8015c64:	b29a      	uxth	r2, r3
 8015c66:	693b      	ldr	r3, [r7, #16]
 8015c68:	3304      	adds	r3, #4
 8015c6a:	b212      	sxth	r2, r2
 8015c6c:	801a      	strh	r2, [r3, #0]
		if (p_current[2] < 0) p_current[2] = -p_current[2];
 8015c6e:	693b      	ldr	r3, [r7, #16]
 8015c70:	3304      	adds	r3, #4
 8015c72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	da43      	bge.n	8015d02 <_processNoiseCancel+0x1f6>
 8015c7a:	693b      	ldr	r3, [r7, #16]
 8015c7c:	3304      	adds	r3, #4
 8015c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c82:	b29b      	uxth	r3, r3
 8015c84:	425b      	negs	r3, r3
 8015c86:	b29a      	uxth	r2, r3
 8015c88:	693b      	ldr	r3, [r7, #16]
 8015c8a:	3304      	adds	r3, #4
 8015c8c:	b212      	sxth	r2, r2
 8015c8e:	801a      	strh	r2, [r3, #0]
 8015c90:	e037      	b.n	8015d02 <_processNoiseCancel+0x1f6>
	}
	else {
		p_owner->__nc.before = p_owner->__current;
 8015c92:	69bb      	ldr	r3, [r7, #24]
 8015c94:	f993 2014 	ldrsb.w	r2, [r3, #20]
 8015c98:	69bb      	ldr	r3, [r7, #24]
 8015c9a:	761a      	strb	r2, [r3, #24]
		p_owner->__current = (p_owner->__current + 1) % p_owner->_size;
 8015c9c:	69bb      	ldr	r3, [r7, #24]
 8015c9e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015ca2:	3301      	adds	r3, #1
 8015ca4:	69ba      	ldr	r2, [r7, #24]
 8015ca6:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8015caa:	fb93 f1f2 	sdiv	r1, r3, r2
 8015cae:	fb01 f202 	mul.w	r2, r1, r2
 8015cb2:	1a9b      	subs	r3, r3, r2
 8015cb4:	b25a      	sxtb	r2, r3
 8015cb6:	69bb      	ldr	r3, [r7, #24]
 8015cb8:	751a      	strb	r2, [r3, #20]
		p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 8015cba:	69bb      	ldr	r3, [r7, #24]
 8015cbc:	691a      	ldr	r2, [r3, #16]
 8015cbe:	69bb      	ldr	r3, [r7, #24]
 8015cc0:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015cc4:	009b      	lsls	r3, r3, #2
 8015cc6:	4413      	add	r3, r2
 8015cc8:	683a      	ldr	r2, [r7, #0]
 8015cca:	6812      	ldr	r2, [r2, #0]
 8015ccc:	601a      	str	r2, [r3, #0]

		p_current = p_owner->__nc.diff + p_owner->__current * 3;
 8015cce:	69bb      	ldr	r3, [r7, #24]
 8015cd0:	69da      	ldr	r2, [r3, #28]
 8015cd2:	69bb      	ldr	r3, [r7, #24]
 8015cd4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015cd8:	4619      	mov	r1, r3
 8015cda:	460b      	mov	r3, r1
 8015cdc:	005b      	lsls	r3, r3, #1
 8015cde:	440b      	add	r3, r1
 8015ce0:	005b      	lsls	r3, r3, #1
 8015ce2:	4413      	add	r3, r2
 8015ce4:	613b      	str	r3, [r7, #16]

		p_current[0] = current[0];
 8015ce6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8015cea:	693b      	ldr	r3, [r7, #16]
 8015cec:	801a      	strh	r2, [r3, #0]
		p_current[1] = current[1];
 8015cee:	693b      	ldr	r3, [r7, #16]
 8015cf0:	3302      	adds	r3, #2
 8015cf2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8015cf6:	801a      	strh	r2, [r3, #0]
		p_current[2] = current[2];
 8015cf8:	693b      	ldr	r3, [r7, #16]
 8015cfa:	3304      	adds	r3, #4
 8015cfc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8015d00:	801a      	strh	r2, [r3, #0]
	}

	sum = 0;
 8015d02:	2300      	movs	r3, #0
 8015d04:	61fb      	str	r3, [r7, #28]
	count = 0;
 8015d06:	2300      	movs	r3, #0
 8015d08:	623b      	str	r3, [r7, #32]
	for (i = 0; i < p_owner->_size; i++) {
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8015d0e:	e00e      	b.n	8015d2e <_processNoiseCancel+0x222>
		sum += p_owner->__buffer[i];
 8015d10:	69bb      	ldr	r3, [r7, #24]
 8015d12:	691a      	ldr	r2, [r3, #16]
 8015d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d16:	009b      	lsls	r3, r3, #2
 8015d18:	4413      	add	r3, r2
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	69fa      	ldr	r2, [r7, #28]
 8015d1e:	4413      	add	r3, r2
 8015d20:	61fb      	str	r3, [r7, #28]
		count++;
 8015d22:	6a3b      	ldr	r3, [r7, #32]
 8015d24:	3301      	adds	r3, #1
 8015d26:	623b      	str	r3, [r7, #32]
	for (i = 0; i < p_owner->_size; i++) {
 8015d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d2a:	3301      	adds	r3, #1
 8015d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8015d2e:	69bb      	ldr	r3, [r7, #24]
 8015d30:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015d34:	461a      	mov	r2, r3
 8015d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d38:	4293      	cmp	r3, r2
 8015d3a:	dbe9      	blt.n	8015d10 <_processNoiseCancel+0x204>
	}
	if (count > 0) {
 8015d3c:	6a3b      	ldr	r3, [r7, #32]
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	dd05      	ble.n	8015d4e <_processNoiseCancel+0x242>
		p_owner->_result = sum / count;
 8015d42:	69fa      	ldr	r2, [r7, #28]
 8015d44:	6a3b      	ldr	r3, [r7, #32]
 8015d46:	fb92 f2f3 	sdiv	r2, r2, r3
 8015d4a:	69bb      	ldr	r3, [r7, #24]
 8015d4c:	60da      	str	r2, [r3, #12]
	}
	return &p_owner->_result;
 8015d4e:	69bb      	ldr	r3, [r7, #24]
 8015d50:	330c      	adds	r3, #12
}
 8015d52:	4618      	mov	r0, r3
 8015d54:	372c      	adds	r7, #44	; 0x2c
 8015d56:	46bd      	mov	sp, r7
 8015d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d5c:	4770      	bx	lr
	...

08015d60 <pifNoiseFilterInt32_Init>:

BOOL pifNoiseFilterInt32_Init(PifNoiseFilterInt32* p_owner, uint8_t size)
{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b082      	sub	sp, #8
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
 8015d68:	460b      	mov	r3, r1
 8015d6a:	70fb      	strb	r3, [r7, #3]
	if (!p_owner || !size) {
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d002      	beq.n	8015d78 <pifNoiseFilterInt32_Init+0x18>
 8015d72:	78fb      	ldrb	r3, [r7, #3]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d104      	bne.n	8015d82 <pifNoiseFilterInt32_Init+0x22>
		pif_error = E_INVALID_PARAM;
 8015d78:	4b17      	ldr	r3, [pc, #92]	; (8015dd8 <pifNoiseFilterInt32_Init+0x78>)
 8015d7a:	2201      	movs	r2, #1
 8015d7c:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8015d7e:	2300      	movs	r3, #0
 8015d80:	e026      	b.n	8015dd0 <pifNoiseFilterInt32_Init+0x70>
	}

    memset(p_owner, 0, sizeof(PifNoiseFilterInt32));
 8015d82:	2220      	movs	r2, #32
 8015d84:	2100      	movs	r1, #0
 8015d86:	6878      	ldr	r0, [r7, #4]
 8015d88:	f00e f898 	bl	8023ebc <memset>

	p_owner->__buffer = calloc(size, sizeof(int32_t));
 8015d8c:	78fb      	ldrb	r3, [r7, #3]
 8015d8e:	2104      	movs	r1, #4
 8015d90:	4618      	mov	r0, r3
 8015d92:	f00e f843 	bl	8023e1c <calloc>
 8015d96:	4603      	mov	r3, r0
 8015d98:	461a      	mov	r2, r3
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	611a      	str	r2, [r3, #16]
	if (!p_owner->__buffer) {
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	691b      	ldr	r3, [r3, #16]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d104      	bne.n	8015db0 <pifNoiseFilterInt32_Init+0x50>
		pif_error = E_OUT_OF_HEAP;
 8015da6:	4b0c      	ldr	r3, [pc, #48]	; (8015dd8 <pifNoiseFilterInt32_Init+0x78>)
 8015da8:	2203      	movs	r2, #3
 8015daa:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8015dac:	2300      	movs	r3, #0
 8015dae:	e00f      	b.n	8015dd0 <pifNoiseFilterInt32_Init+0x70>
	}

	pifNoiseFilter_Init(&p_owner->parent, NFT_AVERAGE);
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	2100      	movs	r1, #0
 8015db4:	4618      	mov	r0, r3
 8015db6:	f7ff fe05 	bl	80159c4 <pifNoiseFilter_Init>
    p_owner->_size = size;
 8015dba:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	721a      	strb	r2, [r3, #8]
	p_owner->__current = 0;
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	2200      	movs	r2, #0
 8015dc6:	751a      	strb	r2, [r3, #20]

	p_owner->parent.__fn_process = _processAverage;
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	4a04      	ldr	r2, [pc, #16]	; (8015ddc <pifNoiseFilterInt32_Init+0x7c>)
 8015dcc:	605a      	str	r2, [r3, #4]
    return TRUE;
 8015dce:	2301      	movs	r3, #1
}
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	3708      	adds	r7, #8
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	bd80      	pop	{r7, pc}
 8015dd8:	20001de0 	.word	0x20001de0
 8015ddc:	08015a77 	.word	0x08015a77

08015de0 <pifNoiseFilterInt32_SetNoiseCancel>:
	p_owner->parent.__fn_process = _processWeightFactor;
	return TRUE;
}

BOOL pifNoiseFilterInt32_SetNoiseCancel(PifNoiseFilterInt32* p_owner)
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b082      	sub	sp, #8
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	6078      	str	r0, [r7, #4]
	_clear(p_owner);
 8015de8:	6878      	ldr	r0, [r7, #4]
 8015dea:	f7ff fe18 	bl	8015a1e <_clear>

	if (p_owner->_size < 3 || p_owner->_size > 32) {
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015df4:	2b02      	cmp	r3, #2
 8015df6:	dd04      	ble.n	8015e02 <pifNoiseFilterInt32_SetNoiseCancel+0x22>
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015dfe:	2b20      	cmp	r3, #32
 8015e00:	dd04      	ble.n	8015e0c <pifNoiseFilterInt32_SetNoiseCancel+0x2c>
		pif_error = E_INVALID_PARAM;
 8015e02:	4b15      	ldr	r3, [pc, #84]	; (8015e58 <pifNoiseFilterInt32_SetNoiseCancel+0x78>)
 8015e04:	2201      	movs	r2, #1
 8015e06:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8015e08:	2300      	movs	r3, #0
 8015e0a:	e021      	b.n	8015e50 <pifNoiseFilterInt32_SetNoiseCancel+0x70>
	}

	p_owner->__nc.diff = calloc(p_owner->_size * 3, sizeof(int16_t));
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015e12:	461a      	mov	r2, r3
 8015e14:	4613      	mov	r3, r2
 8015e16:	005b      	lsls	r3, r3, #1
 8015e18:	4413      	add	r3, r2
 8015e1a:	2102      	movs	r1, #2
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	f00d fffd 	bl	8023e1c <calloc>
 8015e22:	4603      	mov	r3, r0
 8015e24:	461a      	mov	r2, r3
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	61da      	str	r2, [r3, #28]
	if (!p_owner->__nc.diff) {
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	69db      	ldr	r3, [r3, #28]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d104      	bne.n	8015e3c <pifNoiseFilterInt32_SetNoiseCancel+0x5c>
		pif_error = E_OUT_OF_HEAP;
 8015e32:	4b09      	ldr	r3, [pc, #36]	; (8015e58 <pifNoiseFilterInt32_SetNoiseCancel+0x78>)
 8015e34:	2203      	movs	r2, #3
 8015e36:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8015e38:	2300      	movs	r3, #0
 8015e3a:	e009      	b.n	8015e50 <pifNoiseFilterInt32_SetNoiseCancel+0x70>
	}

	p_owner->__nc.before = 0;
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	2200      	movs	r2, #0
 8015e40:	761a      	strb	r2, [r3, #24]

	p_owner->parent._type = NFT_NOISE_CANCEL;
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	2202      	movs	r2, #2
 8015e46:	701a      	strb	r2, [r3, #0]
	p_owner->parent.__fn_process = _processNoiseCancel;
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	4a04      	ldr	r2, [pc, #16]	; (8015e5c <pifNoiseFilterInt32_SetNoiseCancel+0x7c>)
 8015e4c:	605a      	str	r2, [r3, #4]
	return TRUE;
 8015e4e:	2301      	movs	r3, #1
}
 8015e50:	4618      	mov	r0, r3
 8015e52:	3708      	adds	r7, #8
 8015e54:	46bd      	mov	sp, r7
 8015e56:	bd80      	pop	{r7, pc}
 8015e58:	20001de0 	.word	0x20001de0
 8015e5c:	08015b0d 	.word	0x08015b0d

08015e60 <_convertString2Date>:

#define DIGIT_TO_VAL(_x)        (_x - '0')


static void _convertString2Date(char* str, PifDateTime* p_date_time)
{
 8015e60:	b480      	push	{r7}
 8015e62:	b083      	sub	sp, #12
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	6078      	str	r0, [r7, #4]
 8015e68:	6039      	str	r1, [r7, #0]
	p_date_time->day = DIGIT_TO_VAL(str[0]) * 10 + DIGIT_TO_VAL(str[1]);
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	781b      	ldrb	r3, [r3, #0]
 8015e6e:	3b30      	subs	r3, #48	; 0x30
 8015e70:	b2db      	uxtb	r3, r3
 8015e72:	461a      	mov	r2, r3
 8015e74:	0092      	lsls	r2, r2, #2
 8015e76:	4413      	add	r3, r2
 8015e78:	005b      	lsls	r3, r3, #1
 8015e7a:	b2da      	uxtb	r2, r3
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	3301      	adds	r3, #1
 8015e80:	781b      	ldrb	r3, [r3, #0]
 8015e82:	4413      	add	r3, r2
 8015e84:	b2db      	uxtb	r3, r3
 8015e86:	3b30      	subs	r3, #48	; 0x30
 8015e88:	b2da      	uxtb	r2, r3
 8015e8a:	683b      	ldr	r3, [r7, #0]
 8015e8c:	709a      	strb	r2, [r3, #2]
	p_date_time->month = DIGIT_TO_VAL(str[2]) * 10 + DIGIT_TO_VAL(str[3]);
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	3302      	adds	r3, #2
 8015e92:	781b      	ldrb	r3, [r3, #0]
 8015e94:	3b30      	subs	r3, #48	; 0x30
 8015e96:	b2db      	uxtb	r3, r3
 8015e98:	461a      	mov	r2, r3
 8015e9a:	0092      	lsls	r2, r2, #2
 8015e9c:	4413      	add	r3, r2
 8015e9e:	005b      	lsls	r3, r3, #1
 8015ea0:	b2da      	uxtb	r2, r3
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	3303      	adds	r3, #3
 8015ea6:	781b      	ldrb	r3, [r3, #0]
 8015ea8:	4413      	add	r3, r2
 8015eaa:	b2db      	uxtb	r3, r3
 8015eac:	3b30      	subs	r3, #48	; 0x30
 8015eae:	b2da      	uxtb	r2, r3
 8015eb0:	683b      	ldr	r3, [r7, #0]
 8015eb2:	705a      	strb	r2, [r3, #1]
	p_date_time->year = DIGIT_TO_VAL(str[4]) * 10 + DIGIT_TO_VAL(str[5]);
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	3304      	adds	r3, #4
 8015eb8:	781b      	ldrb	r3, [r3, #0]
 8015eba:	3b30      	subs	r3, #48	; 0x30
 8015ebc:	b2db      	uxtb	r3, r3
 8015ebe:	461a      	mov	r2, r3
 8015ec0:	0092      	lsls	r2, r2, #2
 8015ec2:	4413      	add	r3, r2
 8015ec4:	005b      	lsls	r3, r3, #1
 8015ec6:	b2da      	uxtb	r2, r3
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	3305      	adds	r3, #5
 8015ecc:	781b      	ldrb	r3, [r3, #0]
 8015ece:	4413      	add	r3, r2
 8015ed0:	b2db      	uxtb	r3, r3
 8015ed2:	3b30      	subs	r3, #48	; 0x30
 8015ed4:	b2da      	uxtb	r2, r3
 8015ed6:	683b      	ldr	r3, [r7, #0]
 8015ed8:	701a      	strb	r2, [r3, #0]
}
 8015eda:	bf00      	nop
 8015edc:	370c      	adds	r7, #12
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee4:	4770      	bx	lr
	...

08015ee8 <_convertString2Time>:

static void _convertString2Time(char* str, PifDateTime* p_date_time)
{
 8015ee8:	b480      	push	{r7}
 8015eea:	b085      	sub	sp, #20
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	6078      	str	r0, [r7, #4]
 8015ef0:	6039      	str	r1, [r7, #0]
	int i, digit;

	p_date_time->hour = DIGIT_TO_VAL(str[0]) * 10 + DIGIT_TO_VAL(str[1]);
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	781b      	ldrb	r3, [r3, #0]
 8015ef6:	3b30      	subs	r3, #48	; 0x30
 8015ef8:	b2db      	uxtb	r3, r3
 8015efa:	461a      	mov	r2, r3
 8015efc:	0092      	lsls	r2, r2, #2
 8015efe:	4413      	add	r3, r2
 8015f00:	005b      	lsls	r3, r3, #1
 8015f02:	b2da      	uxtb	r2, r3
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	3301      	adds	r3, #1
 8015f08:	781b      	ldrb	r3, [r3, #0]
 8015f0a:	4413      	add	r3, r2
 8015f0c:	b2db      	uxtb	r3, r3
 8015f0e:	3b30      	subs	r3, #48	; 0x30
 8015f10:	b2da      	uxtb	r2, r3
 8015f12:	683b      	ldr	r3, [r7, #0]
 8015f14:	70da      	strb	r2, [r3, #3]
	p_date_time->minute = DIGIT_TO_VAL(str[2]) * 10 + DIGIT_TO_VAL(str[3]);
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	3302      	adds	r3, #2
 8015f1a:	781b      	ldrb	r3, [r3, #0]
 8015f1c:	3b30      	subs	r3, #48	; 0x30
 8015f1e:	b2db      	uxtb	r3, r3
 8015f20:	461a      	mov	r2, r3
 8015f22:	0092      	lsls	r2, r2, #2
 8015f24:	4413      	add	r3, r2
 8015f26:	005b      	lsls	r3, r3, #1
 8015f28:	b2da      	uxtb	r2, r3
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	3303      	adds	r3, #3
 8015f2e:	781b      	ldrb	r3, [r3, #0]
 8015f30:	4413      	add	r3, r2
 8015f32:	b2db      	uxtb	r3, r3
 8015f34:	3b30      	subs	r3, #48	; 0x30
 8015f36:	b2da      	uxtb	r2, r3
 8015f38:	683b      	ldr	r3, [r7, #0]
 8015f3a:	711a      	strb	r2, [r3, #4]
	p_date_time->second = DIGIT_TO_VAL(str[4]) * 10 + DIGIT_TO_VAL(str[5]);
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	3304      	adds	r3, #4
 8015f40:	781b      	ldrb	r3, [r3, #0]
 8015f42:	3b30      	subs	r3, #48	; 0x30
 8015f44:	b2db      	uxtb	r3, r3
 8015f46:	461a      	mov	r2, r3
 8015f48:	0092      	lsls	r2, r2, #2
 8015f4a:	4413      	add	r3, r2
 8015f4c:	005b      	lsls	r3, r3, #1
 8015f4e:	b2da      	uxtb	r2, r3
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	3305      	adds	r3, #5
 8015f54:	781b      	ldrb	r3, [r3, #0]
 8015f56:	4413      	add	r3, r2
 8015f58:	b2db      	uxtb	r3, r3
 8015f5a:	3b30      	subs	r3, #48	; 0x30
 8015f5c:	b2da      	uxtb	r2, r3
 8015f5e:	683b      	ldr	r3, [r7, #0]
 8015f60:	715a      	strb	r2, [r3, #5]
	if (str[6] == '.') {
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	3306      	adds	r3, #6
 8015f66:	781b      	ldrb	r3, [r3, #0]
 8015f68:	2b2e      	cmp	r3, #46	; 0x2e
 8015f6a:	d134      	bne.n	8015fd6 <_convertString2Time+0xee>
		p_date_time->millisecond = 0;
 8015f6c:	683b      	ldr	r3, [r7, #0]
 8015f6e:	2200      	movs	r2, #0
 8015f70:	80da      	strh	r2, [r3, #6]
		digit = 100;
 8015f72:	2364      	movs	r3, #100	; 0x64
 8015f74:	60bb      	str	r3, [r7, #8]
		for (i = 7; i < 10; i++) {
 8015f76:	2307      	movs	r3, #7
 8015f78:	60fb      	str	r3, [r7, #12]
 8015f7a:	e027      	b.n	8015fcc <_convertString2Time+0xe4>
			if (!isdigit((int)str[i])) break;
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	687a      	ldr	r2, [r7, #4]
 8015f80:	4413      	add	r3, r2
 8015f82:	781b      	ldrb	r3, [r3, #0]
 8015f84:	3301      	adds	r3, #1
 8015f86:	4a17      	ldr	r2, [pc, #92]	; (8015fe4 <_convertString2Time+0xfc>)
 8015f88:	4413      	add	r3, r2
 8015f8a:	781b      	ldrb	r3, [r3, #0]
 8015f8c:	f003 0304 	and.w	r3, r3, #4
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d01f      	beq.n	8015fd4 <_convertString2Time+0xec>
			p_date_time->millisecond += DIGIT_TO_VAL(str[i]) * digit;
 8015f94:	683b      	ldr	r3, [r7, #0]
 8015f96:	88da      	ldrh	r2, [r3, #6]
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	6879      	ldr	r1, [r7, #4]
 8015f9c:	440b      	add	r3, r1
 8015f9e:	781b      	ldrb	r3, [r3, #0]
 8015fa0:	3b30      	subs	r3, #48	; 0x30
 8015fa2:	b299      	uxth	r1, r3
 8015fa4:	68bb      	ldr	r3, [r7, #8]
 8015fa6:	b29b      	uxth	r3, r3
 8015fa8:	fb11 f303 	smulbb	r3, r1, r3
 8015fac:	b29b      	uxth	r3, r3
 8015fae:	4413      	add	r3, r2
 8015fb0:	b29a      	uxth	r2, r3
 8015fb2:	683b      	ldr	r3, [r7, #0]
 8015fb4:	80da      	strh	r2, [r3, #6]
			digit /= 10;
 8015fb6:	68bb      	ldr	r3, [r7, #8]
 8015fb8:	4a0b      	ldr	r2, [pc, #44]	; (8015fe8 <_convertString2Time+0x100>)
 8015fba:	fb82 1203 	smull	r1, r2, r2, r3
 8015fbe:	1092      	asrs	r2, r2, #2
 8015fc0:	17db      	asrs	r3, r3, #31
 8015fc2:	1ad3      	subs	r3, r2, r3
 8015fc4:	60bb      	str	r3, [r7, #8]
		for (i = 7; i < 10; i++) {
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	3301      	adds	r3, #1
 8015fca:	60fb      	str	r3, [r7, #12]
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	2b09      	cmp	r3, #9
 8015fd0:	ddd4      	ble.n	8015f7c <_convertString2Time+0x94>
		}
	}
}
 8015fd2:	e000      	b.n	8015fd6 <_convertString2Time+0xee>
			if (!isdigit((int)str[i])) break;
 8015fd4:	bf00      	nop
}
 8015fd6:	bf00      	nop
 8015fd8:	3714      	adds	r7, #20
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe0:	4770      	bx	lr
 8015fe2:	bf00      	nop
 8015fe4:	0802a4d8 	.word	0x0802a4d8
 8015fe8:	66666667 	.word	0x66666667

08015fec <_convertString2Float>:

static double _convertString2Float(char* str)
{
 8015fec:	b5b0      	push	{r4, r5, r7, lr}
 8015fee:	b088      	sub	sp, #32
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	6078      	str	r0, [r7, #4]
	char* p;
	double value = 0.0, unit;
 8015ff4:	f04f 0200 	mov.w	r2, #0
 8015ff8:	f04f 0300 	mov.w	r3, #0
 8015ffc:	e9c7 2304 	strd	r2, r3, [r7, #16]

	p = str;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	61fb      	str	r3, [r7, #28]
	if (*p == '-') p++;
 8016004:	69fb      	ldr	r3, [r7, #28]
 8016006:	781b      	ldrb	r3, [r3, #0]
 8016008:	2b2d      	cmp	r3, #45	; 0x2d
 801600a:	d120      	bne.n	801604e <_convertString2Float+0x62>
 801600c:	69fb      	ldr	r3, [r7, #28]
 801600e:	3301      	adds	r3, #1
 8016010:	61fb      	str	r3, [r7, #28]
	while (isdigit((int)*p)) {
 8016012:	e01c      	b.n	801604e <_convertString2Float+0x62>
		value *= 10;
 8016014:	f04f 0200 	mov.w	r2, #0
 8016018:	4b38      	ldr	r3, [pc, #224]	; (80160fc <_convertString2Float+0x110>)
 801601a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801601e:	f7ea fa9f 	bl	8000560 <__aeabi_dmul>
 8016022:	4602      	mov	r2, r0
 8016024:	460b      	mov	r3, r1
 8016026:	e9c7 2304 	strd	r2, r3, [r7, #16]
		value += DIGIT_TO_VAL(*p++);
 801602a:	69fb      	ldr	r3, [r7, #28]
 801602c:	1c5a      	adds	r2, r3, #1
 801602e:	61fa      	str	r2, [r7, #28]
 8016030:	781b      	ldrb	r3, [r3, #0]
 8016032:	3b30      	subs	r3, #48	; 0x30
 8016034:	4618      	mov	r0, r3
 8016036:	f7ea fa29 	bl	800048c <__aeabi_i2d>
 801603a:	4602      	mov	r2, r0
 801603c:	460b      	mov	r3, r1
 801603e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016042:	f7ea f8d7 	bl	80001f4 <__adddf3>
 8016046:	4602      	mov	r2, r0
 8016048:	460b      	mov	r3, r1
 801604a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	while (isdigit((int)*p)) {
 801604e:	69fb      	ldr	r3, [r7, #28]
 8016050:	781b      	ldrb	r3, [r3, #0]
 8016052:	3301      	adds	r3, #1
 8016054:	4a2a      	ldr	r2, [pc, #168]	; (8016100 <_convertString2Float+0x114>)
 8016056:	4413      	add	r3, r2
 8016058:	781b      	ldrb	r3, [r3, #0]
 801605a:	f003 0304 	and.w	r3, r3, #4
 801605e:	2b00      	cmp	r3, #0
 8016060:	d1d8      	bne.n	8016014 <_convertString2Float+0x28>
	}
	if (*str == '-') value = -value;
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	781b      	ldrb	r3, [r3, #0]
 8016066:	2b2d      	cmp	r3, #45	; 0x2d
 8016068:	d105      	bne.n	8016076 <_convertString2Float+0x8a>
 801606a:	693c      	ldr	r4, [r7, #16]
 801606c:	697b      	ldr	r3, [r7, #20]
 801606e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8016072:	e9c7 4504 	strd	r4, r5, [r7, #16]

	if (*p == '.') {
 8016076:	69fb      	ldr	r3, [r7, #28]
 8016078:	781b      	ldrb	r3, [r3, #0]
 801607a:	2b2e      	cmp	r3, #46	; 0x2e
 801607c:	d133      	bne.n	80160e6 <_convertString2Float+0xfa>
		p++;
 801607e:	69fb      	ldr	r3, [r7, #28]
 8016080:	3301      	adds	r3, #1
 8016082:	61fb      	str	r3, [r7, #28]
		unit = 10;
 8016084:	f04f 0200 	mov.w	r2, #0
 8016088:	4b1c      	ldr	r3, [pc, #112]	; (80160fc <_convertString2Float+0x110>)
 801608a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (isdigit((int)*p)) {
 801608e:	e020      	b.n	80160d2 <_convertString2Float+0xe6>
			value += DIGIT_TO_VAL(*p++) / unit;
 8016090:	69fb      	ldr	r3, [r7, #28]
 8016092:	1c5a      	adds	r2, r3, #1
 8016094:	61fa      	str	r2, [r7, #28]
 8016096:	781b      	ldrb	r3, [r3, #0]
 8016098:	3b30      	subs	r3, #48	; 0x30
 801609a:	4618      	mov	r0, r3
 801609c:	f7ea f9f6 	bl	800048c <__aeabi_i2d>
 80160a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80160a4:	f7ea fb86 	bl	80007b4 <__aeabi_ddiv>
 80160a8:	4602      	mov	r2, r0
 80160aa:	460b      	mov	r3, r1
 80160ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80160b0:	f7ea f8a0 	bl	80001f4 <__adddf3>
 80160b4:	4602      	mov	r2, r0
 80160b6:	460b      	mov	r3, r1
 80160b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
			unit *= 10;
 80160bc:	f04f 0200 	mov.w	r2, #0
 80160c0:	4b0e      	ldr	r3, [pc, #56]	; (80160fc <_convertString2Float+0x110>)
 80160c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80160c6:	f7ea fa4b 	bl	8000560 <__aeabi_dmul>
 80160ca:	4602      	mov	r2, r0
 80160cc:	460b      	mov	r3, r1
 80160ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (isdigit((int)*p)) {
 80160d2:	69fb      	ldr	r3, [r7, #28]
 80160d4:	781b      	ldrb	r3, [r3, #0]
 80160d6:	3301      	adds	r3, #1
 80160d8:	4a09      	ldr	r2, [pc, #36]	; (8016100 <_convertString2Float+0x114>)
 80160da:	4413      	add	r3, r2
 80160dc:	781b      	ldrb	r3, [r3, #0]
 80160de:	f003 0304 	and.w	r3, r3, #4
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d1d4      	bne.n	8016090 <_convertString2Float+0xa4>
		}
	}
	return value;
 80160e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80160ea:	ec43 2b17 	vmov	d7, r2, r3
}
 80160ee:	eeb0 0a47 	vmov.f32	s0, s14
 80160f2:	eef0 0a67 	vmov.f32	s1, s15
 80160f6:	3720      	adds	r7, #32
 80160f8:	46bd      	mov	sp, r7
 80160fa:	bdb0      	pop	{r4, r5, r7, pc}
 80160fc:	40240000 	.word	0x40240000
 8016100:	0802a4d8 	.word	0x0802a4d8

08016104 <_convertString2Interger>:

static int _convertString2Interger(char* str)
{
 8016104:	b480      	push	{r7}
 8016106:	b085      	sub	sp, #20
 8016108:	af00      	add	r7, sp, #0
 801610a:	6078      	str	r0, [r7, #4]
	char* p;
	int value = 0.0;
 801610c:	2300      	movs	r3, #0
 801610e:	60bb      	str	r3, [r7, #8]

	p = str;
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	60fb      	str	r3, [r7, #12]
	if (*p == '-') p++;
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	781b      	ldrb	r3, [r3, #0]
 8016118:	2b2d      	cmp	r3, #45	; 0x2d
 801611a:	d111      	bne.n	8016140 <_convertString2Interger+0x3c>
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	3301      	adds	r3, #1
 8016120:	60fb      	str	r3, [r7, #12]
	while (isdigit((int)*p)) {
 8016122:	e00d      	b.n	8016140 <_convertString2Interger+0x3c>
		value *= 10;
 8016124:	68ba      	ldr	r2, [r7, #8]
 8016126:	4613      	mov	r3, r2
 8016128:	009b      	lsls	r3, r3, #2
 801612a:	4413      	add	r3, r2
 801612c:	005b      	lsls	r3, r3, #1
 801612e:	60bb      	str	r3, [r7, #8]
		value += DIGIT_TO_VAL(*p++);
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	1c5a      	adds	r2, r3, #1
 8016134:	60fa      	str	r2, [r7, #12]
 8016136:	781b      	ldrb	r3, [r3, #0]
 8016138:	3b30      	subs	r3, #48	; 0x30
 801613a:	68ba      	ldr	r2, [r7, #8]
 801613c:	4413      	add	r3, r2
 801613e:	60bb      	str	r3, [r7, #8]
	while (isdigit((int)*p)) {
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	781b      	ldrb	r3, [r3, #0]
 8016144:	3301      	adds	r3, #1
 8016146:	4a0a      	ldr	r2, [pc, #40]	; (8016170 <_convertString2Interger+0x6c>)
 8016148:	4413      	add	r3, r2
 801614a:	781b      	ldrb	r3, [r3, #0]
 801614c:	f003 0304 	and.w	r3, r3, #4
 8016150:	2b00      	cmp	r3, #0
 8016152:	d1e7      	bne.n	8016124 <_convertString2Interger+0x20>
	}
	if (*str == '-') value = -value;
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	781b      	ldrb	r3, [r3, #0]
 8016158:	2b2d      	cmp	r3, #45	; 0x2d
 801615a:	d102      	bne.n	8016162 <_convertString2Interger+0x5e>
 801615c:	68bb      	ldr	r3, [r7, #8]
 801615e:	425b      	negs	r3, r3
 8016160:	60bb      	str	r3, [r7, #8]
	return value;
 8016162:	68bb      	ldr	r3, [r7, #8]
}
 8016164:	4618      	mov	r0, r3
 8016166:	3714      	adds	r7, #20
 8016168:	46bd      	mov	sp, r7
 801616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801616e:	4770      	bx	lr
 8016170:	0802a4d8 	.word	0x0802a4d8
 8016174:	00000000 	.word	0x00000000

08016178 <_convertString2Degrees>:
 * with 10e7 it's around 1 cm now. Increasing it further is irrelevant, since even 1cm resolution is unrealistic, however increased
 * resolution also increased precision of nav calculations
*/

static double _convertString2Degrees(char* s)
{
 8016178:	b5b0      	push	{r4, r5, r7, lr}
 801617a:	b088      	sub	sp, #32
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]
	char* p;
	char* q;
	uint8_t deg = 0, min = 0;
 8016180:	2300      	movs	r3, #0
 8016182:	75fb      	strb	r3, [r7, #23]
 8016184:	2300      	movs	r3, #0
 8016186:	75bb      	strb	r3, [r7, #22]
	unsigned int frac_min = 0;
 8016188:	2300      	movs	r3, #0
 801618a:	613b      	str	r3, [r7, #16]
	uint8_t i;

	// scan for decimal point or end of field
	for (p = s; isdigit((int)*p); p++);
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	61fb      	str	r3, [r7, #28]
 8016190:	e002      	b.n	8016198 <_convertString2Degrees+0x20>
 8016192:	69fb      	ldr	r3, [r7, #28]
 8016194:	3301      	adds	r3, #1
 8016196:	61fb      	str	r3, [r7, #28]
 8016198:	69fb      	ldr	r3, [r7, #28]
 801619a:	781b      	ldrb	r3, [r3, #0]
 801619c:	3301      	adds	r3, #1
 801619e:	4a46      	ldr	r2, [pc, #280]	; (80162b8 <_convertString2Degrees+0x140>)
 80161a0:	4413      	add	r3, r2
 80161a2:	781b      	ldrb	r3, [r3, #0]
 80161a4:	f003 0304 	and.w	r3, r3, #4
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d1f2      	bne.n	8016192 <_convertString2Degrees+0x1a>
	q = s;
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	61bb      	str	r3, [r7, #24]

	// convert degrees
	while ((p - q) > 2) {
 80161b0:	e011      	b.n	80161d6 <_convertString2Degrees+0x5e>
		if (deg) deg *= 10;
 80161b2:	7dfb      	ldrb	r3, [r7, #23]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d005      	beq.n	80161c4 <_convertString2Degrees+0x4c>
 80161b8:	7dfb      	ldrb	r3, [r7, #23]
 80161ba:	461a      	mov	r2, r3
 80161bc:	0092      	lsls	r2, r2, #2
 80161be:	4413      	add	r3, r2
 80161c0:	005b      	lsls	r3, r3, #1
 80161c2:	75fb      	strb	r3, [r7, #23]
		deg += DIGIT_TO_VAL(*q++);
 80161c4:	69bb      	ldr	r3, [r7, #24]
 80161c6:	1c5a      	adds	r2, r3, #1
 80161c8:	61ba      	str	r2, [r7, #24]
 80161ca:	781b      	ldrb	r3, [r3, #0]
 80161cc:	3b30      	subs	r3, #48	; 0x30
 80161ce:	b2da      	uxtb	r2, r3
 80161d0:	7dfb      	ldrb	r3, [r7, #23]
 80161d2:	4413      	add	r3, r2
 80161d4:	75fb      	strb	r3, [r7, #23]
	while ((p - q) > 2) {
 80161d6:	69fa      	ldr	r2, [r7, #28]
 80161d8:	69bb      	ldr	r3, [r7, #24]
 80161da:	1ad3      	subs	r3, r2, r3
 80161dc:	2b02      	cmp	r3, #2
 80161de:	dce8      	bgt.n	80161b2 <_convertString2Degrees+0x3a>
	}
	// convert minutes
	while (p > q) {
 80161e0:	e011      	b.n	8016206 <_convertString2Degrees+0x8e>
		if (min) min *= 10;
 80161e2:	7dbb      	ldrb	r3, [r7, #22]
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d005      	beq.n	80161f4 <_convertString2Degrees+0x7c>
 80161e8:	7dbb      	ldrb	r3, [r7, #22]
 80161ea:	461a      	mov	r2, r3
 80161ec:	0092      	lsls	r2, r2, #2
 80161ee:	4413      	add	r3, r2
 80161f0:	005b      	lsls	r3, r3, #1
 80161f2:	75bb      	strb	r3, [r7, #22]
		min += DIGIT_TO_VAL(*q++);
 80161f4:	69bb      	ldr	r3, [r7, #24]
 80161f6:	1c5a      	adds	r2, r3, #1
 80161f8:	61ba      	str	r2, [r7, #24]
 80161fa:	781b      	ldrb	r3, [r3, #0]
 80161fc:	3b30      	subs	r3, #48	; 0x30
 80161fe:	b2da      	uxtb	r2, r3
 8016200:	7dbb      	ldrb	r3, [r7, #22]
 8016202:	4413      	add	r3, r2
 8016204:	75bb      	strb	r3, [r7, #22]
	while (p > q) {
 8016206:	69fa      	ldr	r2, [r7, #28]
 8016208:	69bb      	ldr	r3, [r7, #24]
 801620a:	429a      	cmp	r2, r3
 801620c:	d8e9      	bhi.n	80161e2 <_convertString2Degrees+0x6a>
	}
	// convert fractional minutes
	// expect up to four digits, result is in
	// ten-thousandths of a minute
	if (*p == '.') {
 801620e:	69fb      	ldr	r3, [r7, #28]
 8016210:	781b      	ldrb	r3, [r3, #0]
 8016212:	2b2e      	cmp	r3, #46	; 0x2e
 8016214:	d124      	bne.n	8016260 <_convertString2Degrees+0xe8>
		q = p + 1;
 8016216:	69fb      	ldr	r3, [r7, #28]
 8016218:	3301      	adds	r3, #1
 801621a:	61bb      	str	r3, [r7, #24]
		for (i = 0; i < 4; i++) {
 801621c:	2300      	movs	r3, #0
 801621e:	73fb      	strb	r3, [r7, #15]
 8016220:	e01b      	b.n	801625a <_convertString2Degrees+0xe2>
			frac_min *= 10;
 8016222:	693a      	ldr	r2, [r7, #16]
 8016224:	4613      	mov	r3, r2
 8016226:	009b      	lsls	r3, r3, #2
 8016228:	4413      	add	r3, r2
 801622a:	005b      	lsls	r3, r3, #1
 801622c:	613b      	str	r3, [r7, #16]
			if (isdigit((int)*q)) frac_min += *q++ - '0';
 801622e:	69bb      	ldr	r3, [r7, #24]
 8016230:	781b      	ldrb	r3, [r3, #0]
 8016232:	3301      	adds	r3, #1
 8016234:	4a20      	ldr	r2, [pc, #128]	; (80162b8 <_convertString2Degrees+0x140>)
 8016236:	4413      	add	r3, r2
 8016238:	781b      	ldrb	r3, [r3, #0]
 801623a:	f003 0304 	and.w	r3, r3, #4
 801623e:	2b00      	cmp	r3, #0
 8016240:	d008      	beq.n	8016254 <_convertString2Degrees+0xdc>
 8016242:	69bb      	ldr	r3, [r7, #24]
 8016244:	1c5a      	adds	r2, r3, #1
 8016246:	61ba      	str	r2, [r7, #24]
 8016248:	781b      	ldrb	r3, [r3, #0]
 801624a:	3b30      	subs	r3, #48	; 0x30
 801624c:	461a      	mov	r2, r3
 801624e:	693b      	ldr	r3, [r7, #16]
 8016250:	4413      	add	r3, r2
 8016252:	613b      	str	r3, [r7, #16]
		for (i = 0; i < 4; i++) {
 8016254:	7bfb      	ldrb	r3, [r7, #15]
 8016256:	3301      	adds	r3, #1
 8016258:	73fb      	strb	r3, [r7, #15]
 801625a:	7bfb      	ldrb	r3, [r7, #15]
 801625c:	2b03      	cmp	r3, #3
 801625e:	d9e0      	bls.n	8016222 <_convertString2Degrees+0xaa>
		}
	}
	return deg + (min * 10000UL + frac_min) / 600000.0;
 8016260:	7dfb      	ldrb	r3, [r7, #23]
 8016262:	4618      	mov	r0, r3
 8016264:	f7ea f912 	bl	800048c <__aeabi_i2d>
 8016268:	4604      	mov	r4, r0
 801626a:	460d      	mov	r5, r1
 801626c:	7dbb      	ldrb	r3, [r7, #22]
 801626e:	f242 7210 	movw	r2, #10000	; 0x2710
 8016272:	fb03 f202 	mul.w	r2, r3, r2
 8016276:	693b      	ldr	r3, [r7, #16]
 8016278:	4413      	add	r3, r2
 801627a:	4618      	mov	r0, r3
 801627c:	f7ea f8f6 	bl	800046c <__aeabi_ui2d>
 8016280:	a30b      	add	r3, pc, #44	; (adr r3, 80162b0 <_convertString2Degrees+0x138>)
 8016282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016286:	f7ea fa95 	bl	80007b4 <__aeabi_ddiv>
 801628a:	4602      	mov	r2, r0
 801628c:	460b      	mov	r3, r1
 801628e:	4620      	mov	r0, r4
 8016290:	4629      	mov	r1, r5
 8016292:	f7e9 ffaf 	bl	80001f4 <__adddf3>
 8016296:	4602      	mov	r2, r0
 8016298:	460b      	mov	r3, r1
 801629a:	ec43 2b17 	vmov	d7, r2, r3
}
 801629e:	eeb0 0a47 	vmov.f32	s0, s14
 80162a2:	eef0 0a67 	vmov.f32	s1, s15
 80162a6:	3720      	adds	r7, #32
 80162a8:	46bd      	mov	sp, r7
 80162aa:	bdb0      	pop	{r4, r5, r7, pc}
 80162ac:	f3af 8000 	nop.w
 80162b0:	00000000 	.word	0x00000000
 80162b4:	41224f80 	.word	0x41224f80
 80162b8:	0802a4d8 	.word	0x0802a4d8

080162bc <_convertAscii2Hex>:

static uint8_t _convertAscii2Hex(char n)    // convert '0'..'9','A'..'F' to 0..15
{
 80162bc:	b480      	push	{r7}
 80162be:	b083      	sub	sp, #12
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	4603      	mov	r3, r0
 80162c4:	71fb      	strb	r3, [r7, #7]
	n -= '0';
 80162c6:	79fb      	ldrb	r3, [r7, #7]
 80162c8:	3b30      	subs	r3, #48	; 0x30
 80162ca:	71fb      	strb	r3, [r7, #7]
	if (n > 9) n -= 7;
 80162cc:	79fb      	ldrb	r3, [r7, #7]
 80162ce:	2b09      	cmp	r3, #9
 80162d0:	d902      	bls.n	80162d8 <_convertAscii2Hex+0x1c>
 80162d2:	79fb      	ldrb	r3, [r7, #7]
 80162d4:	3b07      	subs	r3, #7
 80162d6:	71fb      	strb	r3, [r7, #7]
	n &= 0x0F;
 80162d8:	79fb      	ldrb	r3, [r7, #7]
 80162da:	f003 030f 	and.w	r3, r3, #15
 80162de:	71fb      	strb	r3, [r7, #7]
	return n;
 80162e0:	79fb      	ldrb	r3, [r7, #7]
}
 80162e2:	4618      	mov	r0, r3
 80162e4:	370c      	adds	r7, #12
 80162e6:	46bd      	mov	sp, r7
 80162e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ec:	4770      	bx	lr

080162ee <_evtTimerFinish>:

static void _evtTimerFinish(PifIssuerP p_issuer)
{
 80162ee:	b580      	push	{r7, lr}
 80162f0:	b084      	sub	sp, #16
 80162f2:	af00      	add	r7, sp, #0
 80162f4:	6078      	str	r0, [r7, #4]
    PifGps* p_owner = (PifGps*)p_issuer;
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	60fb      	str	r3, [r7, #12]

	p_owner->_connect = FALSE;
 80162fa:	68fa      	ldr	r2, [r7, #12]
 80162fc:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016300:	f36f 0341 	bfc	r3, #1, #1
 8016304:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    p_owner->_fix = FALSE;
 8016308:	68fa      	ldr	r2, [r7, #12]
 801630a:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 801630e:	f36f 0300 	bfc	r3, #0, #1
 8016312:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    p_owner->_num_sat = 0;
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	2200      	movs	r2, #0
 801631a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	if (p_owner->__evt_timeout) (*p_owner->__evt_timeout)(p_owner);
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8016324:	2b00      	cmp	r3, #0
 8016326:	d004      	beq.n	8016332 <_evtTimerFinish+0x44>
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801632e:	68f8      	ldr	r0, [r7, #12]
 8016330:	4798      	blx	r3
}
 8016332:	bf00      	nop
 8016334:	3710      	adds	r7, #16
 8016336:	46bd      	mov	sp, r7
 8016338:	bd80      	pop	{r7, pc}
	...

0801633c <pifGps_Init>:

BOOL pifGps_Init(PifGps* p_owner, PifId id)
{
 801633c:	b580      	push	{r7, lr}
 801633e:	b082      	sub	sp, #8
 8016340:	af00      	add	r7, sp, #0
 8016342:	6078      	str	r0, [r7, #4]
 8016344:	460b      	mov	r3, r1
 8016346:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d104      	bne.n	8016358 <pifGps_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 801634e:	4b0e      	ldr	r3, [pc, #56]	; (8016388 <pifGps_Init+0x4c>)
 8016350:	2201      	movs	r2, #1
 8016352:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8016354:	2300      	movs	r3, #0
 8016356:	e012      	b.n	801637e <pifGps_Init+0x42>
	}

    memset(p_owner, 0, sizeof(PifGps));
 8016358:	22b0      	movs	r2, #176	; 0xb0
 801635a:	2100      	movs	r1, #0
 801635c:	6878      	ldr	r0, [r7, #4]
 801635e:	f00d fdad 	bl	8023ebc <memset>

	if (id == PIF_ID_AUTO) id = pif_id++;
 8016362:	887b      	ldrh	r3, [r7, #2]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d106      	bne.n	8016376 <pifGps_Init+0x3a>
 8016368:	4b08      	ldr	r3, [pc, #32]	; (801638c <pifGps_Init+0x50>)
 801636a:	881b      	ldrh	r3, [r3, #0]
 801636c:	1c5a      	adds	r2, r3, #1
 801636e:	b291      	uxth	r1, r2
 8016370:	4a06      	ldr	r2, [pc, #24]	; (801638c <pifGps_Init+0x50>)
 8016372:	8011      	strh	r1, [r2, #0]
 8016374:	807b      	strh	r3, [r7, #2]
	p_owner->_id = id;
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	887a      	ldrh	r2, [r7, #2]
 801637a:	819a      	strh	r2, [r3, #12]
	return TRUE;
 801637c:	2301      	movs	r3, #1
}
 801637e:	4618      	mov	r0, r3
 8016380:	3708      	adds	r7, #8
 8016382:	46bd      	mov	sp, r7
 8016384:	bd80      	pop	{r7, pc}
 8016386:	bf00      	nop
 8016388:	20001de0 	.word	0x20001de0
 801638c:	20000128 	.word	0x20000128

08016390 <pifGps_SetTimeout>:
	}
	p_owner->__evt_text = NULL;
}

BOOL pifGps_SetTimeout(PifGps* p_owner, PifTimerManager* p_timer_manager, uint32_t timeout, PifEvtGpsTimeout evt_timeout)
{
 8016390:	b580      	push	{r7, lr}
 8016392:	b084      	sub	sp, #16
 8016394:	af00      	add	r7, sp, #0
 8016396:	60f8      	str	r0, [r7, #12]
 8016398:	60b9      	str	r1, [r7, #8]
 801639a:	607a      	str	r2, [r7, #4]
 801639c:	603b      	str	r3, [r7, #0]
	if (timeout > 0) {
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d02b      	beq.n	80163fc <pifGps_SetTimeout+0x6c>
		if (!p_owner->__p_timer) {
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d11a      	bne.n	80163e4 <pifGps_SetTimeout+0x54>
			p_owner->__p_timer = pifTimerManager_Add(p_timer_manager, TT_ONCE);
 80163ae:	2100      	movs	r1, #0
 80163b0:	68b8      	ldr	r0, [r7, #8]
 80163b2:	f7ff f9c7 	bl	8015744 <pifTimerManager_Add>
 80163b6:	4602      	mov	r2, r0
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			if (!p_owner->__p_timer) return FALSE;
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d101      	bne.n	80163cc <pifGps_SetTimeout+0x3c>
 80163c8:	2300      	movs	r3, #0
 80163ca:	e023      	b.n	8016414 <pifGps_SetTimeout+0x84>
			pifTimer_AttachEvtFinish(p_owner->__p_timer, _evtTimerFinish, p_owner);
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80163d2:	68fa      	ldr	r2, [r7, #12]
 80163d4:	4911      	ldr	r1, [pc, #68]	; (801641c <pifGps_SetTimeout+0x8c>)
 80163d6:	4618      	mov	r0, r3
 80163d8:	f7ff fae1 	bl	801599e <pifTimer_AttachEvtFinish>
		    p_owner->__evt_timeout = evt_timeout;
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	683a      	ldr	r2, [r7, #0]
 80163e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	    if (!pifTimer_Start(p_owner->__p_timer, timeout)) return FALSE;
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80163ea:	6879      	ldr	r1, [r7, #4]
 80163ec:	4618      	mov	r0, r3
 80163ee:	f7ff f9e1 	bl	80157b4 <pifTimer_Start>
 80163f2:	4603      	mov	r3, r0
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d10c      	bne.n	8016412 <pifGps_SetTimeout+0x82>
 80163f8:	2300      	movs	r3, #0
 80163fa:	e00b      	b.n	8016414 <pifGps_SetTimeout+0x84>
	}
	else {
		if (p_owner->__p_timer) pifTimer_Stop(p_owner->__p_timer);
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016402:	2b00      	cmp	r3, #0
 8016404:	d005      	beq.n	8016412 <pifGps_SetTimeout+0x82>
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801640c:	4618      	mov	r0, r3
 801640e:	f7ff f9ff 	bl	8015810 <pifTimer_Stop>
	}
    return TRUE;
 8016412:	2301      	movs	r3, #1
}
 8016414:	4618      	mov	r0, r3
 8016416:	3710      	adds	r7, #16
 8016418:	46bd      	mov	sp, r7
 801641a:	bd80      	pop	{r7, pc}
 801641c:	080162ef 	.word	0x080162ef

08016420 <pifGps_SendEvent>:

void pifGps_SendEvent(PifGps* p_owner)
{
 8016420:	b580      	push	{r7, lr}
 8016422:	b082      	sub	sp, #8
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]
	p_owner->_connect = TRUE;
 8016428:	687a      	ldr	r2, [r7, #4]
 801642a:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 801642e:	f043 0302 	orr.w	r3, r3, #2
 8016432:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
	if (p_owner->evt_receive) (*p_owner->evt_receive)(p_owner);
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	685b      	ldr	r3, [r3, #4]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d003      	beq.n	8016446 <pifGps_SendEvent+0x26>
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	685b      	ldr	r3, [r3, #4]
 8016442:	6878      	ldr	r0, [r7, #4]
 8016444:	4798      	blx	r3
	if (p_owner->__p_timer) pifTimer_Reset(p_owner->__p_timer);
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801644c:	2b00      	cmp	r3, #0
 801644e:	d005      	beq.n	801645c <pifGps_SendEvent+0x3c>
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016456:	4618      	mov	r0, r3
 8016458:	f7ff f9f0 	bl	801583c <pifTimer_Reset>
}
 801645c:	bf00      	nop
 801645e:	3708      	adds	r7, #8
 8016460:	46bd      	mov	sp, r7
 8016462:	bd80      	pop	{r7, pc}
 8016464:	0000      	movs	r0, r0
	...

08016468 <pifGps_ParsingNmea>:
	p_owner->__evt_text = evt_text;
	return TRUE;
}

BOOL pifGps_ParsingNmea(PifGps* p_owner, uint8_t c)
{
 8016468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801646c:	b090      	sub	sp, #64	; 0x40
 801646e:	af02      	add	r7, sp, #8
 8016470:	62f8      	str	r0, [r7, #44]	; 0x2c
 8016472:	460b      	mov	r3, r1
 8016474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	BOOL rtn = FALSE;
 8016478:	2300      	movs	r3, #0
 801647a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	static uint8_t param = 0, offset = 0, parity = 0;
	static char string[PIF_GPS_NMEA_VALUE_SIZE];
	static uint8_t checksum_param = 0;
	static PifGpsNmeaMsgId msg_id = PIF_GPS_NMEA_MSG_ID_NONE;

	if (c == '$') {
 801647e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016482:	2b24      	cmp	r3, #36	; 0x24
 8016484:	d11a      	bne.n	80164bc <pifGps_ParsingNmea+0x54>
		param = 0;
 8016486:	4b8a      	ldr	r3, [pc, #552]	; (80166b0 <pifGps_ParsingNmea+0x248>)
 8016488:	2200      	movs	r2, #0
 801648a:	701a      	strb	r2, [r3, #0]
		offset = 0;
 801648c:	4b89      	ldr	r3, [pc, #548]	; (80166b4 <pifGps_ParsingNmea+0x24c>)
 801648e:	2200      	movs	r2, #0
 8016490:	701a      	strb	r2, [r3, #0]
		parity = 0;
 8016492:	4b89      	ldr	r3, [pc, #548]	; (80166b8 <pifGps_ParsingNmea+0x250>)
 8016494:	2200      	movs	r2, #0
 8016496:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 8016498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801649a:	689b      	ldr	r3, [r3, #8]
 801649c:	2b00      	cmp	r3, #0
 801649e:	d00a      	beq.n	80164b6 <pifGps_ParsingNmea+0x4e>
			string[0] = c;
 80164a0:	4a86      	ldr	r2, [pc, #536]	; (80166bc <pifGps_ParsingNmea+0x254>)
 80164a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80164a6:	7013      	strb	r3, [r2, #0]
			string[1] = 0;
 80164a8:	4b84      	ldr	r3, [pc, #528]	; (80166bc <pifGps_ParsingNmea+0x254>)
 80164aa:	2200      	movs	r2, #0
 80164ac:	705a      	strb	r2, [r3, #1]
			(p_owner->evt_frame)(string);
 80164ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164b0:	689b      	ldr	r3, [r3, #8]
 80164b2:	4882      	ldr	r0, [pc, #520]	; (80166bc <pifGps_ParsingNmea+0x254>)
 80164b4:	4798      	blx	r3
		}
		return TRUE;
 80164b6:	2301      	movs	r3, #1
 80164b8:	f000 bd44 	b.w	8016f44 <pifGps_ParsingNmea+0xadc>
	}
	else if (c == ',' || c == '*') {
 80164bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80164c0:	2b2c      	cmp	r3, #44	; 0x2c
 80164c2:	d004      	beq.n	80164ce <pifGps_ParsingNmea+0x66>
 80164c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80164c8:	2b2a      	cmp	r3, #42	; 0x2a
 80164ca:	f040 847f 	bne.w	8016dcc <pifGps_ParsingNmea+0x964>
		string[offset] = 0;
 80164ce:	4b79      	ldr	r3, [pc, #484]	; (80166b4 <pifGps_ParsingNmea+0x24c>)
 80164d0:	781b      	ldrb	r3, [r3, #0]
 80164d2:	4619      	mov	r1, r3
 80164d4:	4a79      	ldr	r2, [pc, #484]	; (80166bc <pifGps_ParsingNmea+0x254>)
 80164d6:	2300      	movs	r3, #0
 80164d8:	5453      	strb	r3, [r2, r1]
		if (param == 0) { //frame identification
 80164da:	4b75      	ldr	r3, [pc, #468]	; (80166b0 <pifGps_ParsingNmea+0x248>)
 80164dc:	781b      	ldrb	r3, [r3, #0]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	f040 8103 	bne.w	80166ea <pifGps_ParsingNmea+0x282>
			msg_id = PIF_GPS_NMEA_MSG_ID_NONE;
 80164e4:	4b76      	ldr	r3, [pc, #472]	; (80166c0 <pifGps_ParsingNmea+0x258>)
 80164e6:	2200      	movs	r2, #0
 80164e8:	701a      	strb	r2, [r3, #0]
			if (string[2] == 'D' && string[3] == 'T' && string[4] == 'M') msg_id = PIF_GPS_NMEA_MSG_ID_DTM;
 80164ea:	4b74      	ldr	r3, [pc, #464]	; (80166bc <pifGps_ParsingNmea+0x254>)
 80164ec:	789b      	ldrb	r3, [r3, #2]
 80164ee:	2b44      	cmp	r3, #68	; 0x44
 80164f0:	d10c      	bne.n	801650c <pifGps_ParsingNmea+0xa4>
 80164f2:	4b72      	ldr	r3, [pc, #456]	; (80166bc <pifGps_ParsingNmea+0x254>)
 80164f4:	78db      	ldrb	r3, [r3, #3]
 80164f6:	2b54      	cmp	r3, #84	; 0x54
 80164f8:	d108      	bne.n	801650c <pifGps_ParsingNmea+0xa4>
 80164fa:	4b70      	ldr	r3, [pc, #448]	; (80166bc <pifGps_ParsingNmea+0x254>)
 80164fc:	791b      	ldrb	r3, [r3, #4]
 80164fe:	2b4d      	cmp	r3, #77	; 0x4d
 8016500:	d104      	bne.n	801650c <pifGps_ParsingNmea+0xa4>
 8016502:	4b6f      	ldr	r3, [pc, #444]	; (80166c0 <pifGps_ParsingNmea+0x258>)
 8016504:	2201      	movs	r2, #1
 8016506:	701a      	strb	r2, [r3, #0]
 8016508:	f000 bc29 	b.w	8016d5e <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'B' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GBS;
 801650c:	4b6b      	ldr	r3, [pc, #428]	; (80166bc <pifGps_ParsingNmea+0x254>)
 801650e:	789b      	ldrb	r3, [r3, #2]
 8016510:	2b47      	cmp	r3, #71	; 0x47
 8016512:	d10c      	bne.n	801652e <pifGps_ParsingNmea+0xc6>
 8016514:	4b69      	ldr	r3, [pc, #420]	; (80166bc <pifGps_ParsingNmea+0x254>)
 8016516:	78db      	ldrb	r3, [r3, #3]
 8016518:	2b42      	cmp	r3, #66	; 0x42
 801651a:	d108      	bne.n	801652e <pifGps_ParsingNmea+0xc6>
 801651c:	4b67      	ldr	r3, [pc, #412]	; (80166bc <pifGps_ParsingNmea+0x254>)
 801651e:	791b      	ldrb	r3, [r3, #4]
 8016520:	2b53      	cmp	r3, #83	; 0x53
 8016522:	d104      	bne.n	801652e <pifGps_ParsingNmea+0xc6>
 8016524:	4b66      	ldr	r3, [pc, #408]	; (80166c0 <pifGps_ParsingNmea+0x258>)
 8016526:	2202      	movs	r2, #2
 8016528:	701a      	strb	r2, [r3, #0]
 801652a:	f000 bc18 	b.w	8016d5e <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'G' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_GGA;
 801652e:	4b63      	ldr	r3, [pc, #396]	; (80166bc <pifGps_ParsingNmea+0x254>)
 8016530:	789b      	ldrb	r3, [r3, #2]
 8016532:	2b47      	cmp	r3, #71	; 0x47
 8016534:	d10c      	bne.n	8016550 <pifGps_ParsingNmea+0xe8>
 8016536:	4b61      	ldr	r3, [pc, #388]	; (80166bc <pifGps_ParsingNmea+0x254>)
 8016538:	78db      	ldrb	r3, [r3, #3]
 801653a:	2b47      	cmp	r3, #71	; 0x47
 801653c:	d108      	bne.n	8016550 <pifGps_ParsingNmea+0xe8>
 801653e:	4b5f      	ldr	r3, [pc, #380]	; (80166bc <pifGps_ParsingNmea+0x254>)
 8016540:	791b      	ldrb	r3, [r3, #4]
 8016542:	2b41      	cmp	r3, #65	; 0x41
 8016544:	d104      	bne.n	8016550 <pifGps_ParsingNmea+0xe8>
 8016546:	4b5e      	ldr	r3, [pc, #376]	; (80166c0 <pifGps_ParsingNmea+0x258>)
 8016548:	2203      	movs	r2, #3
 801654a:	701a      	strb	r2, [r3, #0]
 801654c:	f000 bc07 	b.w	8016d5e <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'L' && string[4] == 'L') msg_id = PIF_GPS_NMEA_MSG_ID_GLL;
 8016550:	4b5a      	ldr	r3, [pc, #360]	; (80166bc <pifGps_ParsingNmea+0x254>)
 8016552:	789b      	ldrb	r3, [r3, #2]
 8016554:	2b47      	cmp	r3, #71	; 0x47
 8016556:	d10b      	bne.n	8016570 <pifGps_ParsingNmea+0x108>
 8016558:	4b58      	ldr	r3, [pc, #352]	; (80166bc <pifGps_ParsingNmea+0x254>)
 801655a:	78db      	ldrb	r3, [r3, #3]
 801655c:	2b4c      	cmp	r3, #76	; 0x4c
 801655e:	d107      	bne.n	8016570 <pifGps_ParsingNmea+0x108>
 8016560:	4b56      	ldr	r3, [pc, #344]	; (80166bc <pifGps_ParsingNmea+0x254>)
 8016562:	791b      	ldrb	r3, [r3, #4]
 8016564:	2b4c      	cmp	r3, #76	; 0x4c
 8016566:	d103      	bne.n	8016570 <pifGps_ParsingNmea+0x108>
 8016568:	4b55      	ldr	r3, [pc, #340]	; (80166c0 <pifGps_ParsingNmea+0x258>)
 801656a:	2204      	movs	r2, #4
 801656c:	701a      	strb	r2, [r3, #0]
 801656e:	e3f6      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'N' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GNS;
 8016570:	4b52      	ldr	r3, [pc, #328]	; (80166bc <pifGps_ParsingNmea+0x254>)
 8016572:	789b      	ldrb	r3, [r3, #2]
 8016574:	2b47      	cmp	r3, #71	; 0x47
 8016576:	d10b      	bne.n	8016590 <pifGps_ParsingNmea+0x128>
 8016578:	4b50      	ldr	r3, [pc, #320]	; (80166bc <pifGps_ParsingNmea+0x254>)
 801657a:	78db      	ldrb	r3, [r3, #3]
 801657c:	2b4e      	cmp	r3, #78	; 0x4e
 801657e:	d107      	bne.n	8016590 <pifGps_ParsingNmea+0x128>
 8016580:	4b4e      	ldr	r3, [pc, #312]	; (80166bc <pifGps_ParsingNmea+0x254>)
 8016582:	791b      	ldrb	r3, [r3, #4]
 8016584:	2b53      	cmp	r3, #83	; 0x53
 8016586:	d103      	bne.n	8016590 <pifGps_ParsingNmea+0x128>
 8016588:	4b4d      	ldr	r3, [pc, #308]	; (80166c0 <pifGps_ParsingNmea+0x258>)
 801658a:	2205      	movs	r2, #5
 801658c:	701a      	strb	r2, [r3, #0]
 801658e:	e3e6      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'R' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GRS;
 8016590:	4b4a      	ldr	r3, [pc, #296]	; (80166bc <pifGps_ParsingNmea+0x254>)
 8016592:	789b      	ldrb	r3, [r3, #2]
 8016594:	2b47      	cmp	r3, #71	; 0x47
 8016596:	d10b      	bne.n	80165b0 <pifGps_ParsingNmea+0x148>
 8016598:	4b48      	ldr	r3, [pc, #288]	; (80166bc <pifGps_ParsingNmea+0x254>)
 801659a:	78db      	ldrb	r3, [r3, #3]
 801659c:	2b52      	cmp	r3, #82	; 0x52
 801659e:	d107      	bne.n	80165b0 <pifGps_ParsingNmea+0x148>
 80165a0:	4b46      	ldr	r3, [pc, #280]	; (80166bc <pifGps_ParsingNmea+0x254>)
 80165a2:	791b      	ldrb	r3, [r3, #4]
 80165a4:	2b53      	cmp	r3, #83	; 0x53
 80165a6:	d103      	bne.n	80165b0 <pifGps_ParsingNmea+0x148>
 80165a8:	4b45      	ldr	r3, [pc, #276]	; (80166c0 <pifGps_ParsingNmea+0x258>)
 80165aa:	2206      	movs	r2, #6
 80165ac:	701a      	strb	r2, [r3, #0]
 80165ae:	e3d6      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_GSA;
 80165b0:	4b42      	ldr	r3, [pc, #264]	; (80166bc <pifGps_ParsingNmea+0x254>)
 80165b2:	789b      	ldrb	r3, [r3, #2]
 80165b4:	2b47      	cmp	r3, #71	; 0x47
 80165b6:	d10b      	bne.n	80165d0 <pifGps_ParsingNmea+0x168>
 80165b8:	4b40      	ldr	r3, [pc, #256]	; (80166bc <pifGps_ParsingNmea+0x254>)
 80165ba:	78db      	ldrb	r3, [r3, #3]
 80165bc:	2b53      	cmp	r3, #83	; 0x53
 80165be:	d107      	bne.n	80165d0 <pifGps_ParsingNmea+0x168>
 80165c0:	4b3e      	ldr	r3, [pc, #248]	; (80166bc <pifGps_ParsingNmea+0x254>)
 80165c2:	791b      	ldrb	r3, [r3, #4]
 80165c4:	2b41      	cmp	r3, #65	; 0x41
 80165c6:	d103      	bne.n	80165d0 <pifGps_ParsingNmea+0x168>
 80165c8:	4b3d      	ldr	r3, [pc, #244]	; (80166c0 <pifGps_ParsingNmea+0x258>)
 80165ca:	2207      	movs	r2, #7
 80165cc:	701a      	strb	r2, [r3, #0]
 80165ce:	e3c6      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'T') msg_id = PIF_GPS_NMEA_MSG_ID_GST;
 80165d0:	4b3a      	ldr	r3, [pc, #232]	; (80166bc <pifGps_ParsingNmea+0x254>)
 80165d2:	789b      	ldrb	r3, [r3, #2]
 80165d4:	2b47      	cmp	r3, #71	; 0x47
 80165d6:	d10b      	bne.n	80165f0 <pifGps_ParsingNmea+0x188>
 80165d8:	4b38      	ldr	r3, [pc, #224]	; (80166bc <pifGps_ParsingNmea+0x254>)
 80165da:	78db      	ldrb	r3, [r3, #3]
 80165dc:	2b53      	cmp	r3, #83	; 0x53
 80165de:	d107      	bne.n	80165f0 <pifGps_ParsingNmea+0x188>
 80165e0:	4b36      	ldr	r3, [pc, #216]	; (80166bc <pifGps_ParsingNmea+0x254>)
 80165e2:	791b      	ldrb	r3, [r3, #4]
 80165e4:	2b54      	cmp	r3, #84	; 0x54
 80165e6:	d103      	bne.n	80165f0 <pifGps_ParsingNmea+0x188>
 80165e8:	4b35      	ldr	r3, [pc, #212]	; (80166c0 <pifGps_ParsingNmea+0x258>)
 80165ea:	2208      	movs	r2, #8
 80165ec:	701a      	strb	r2, [r3, #0]
 80165ee:	e3b6      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'V') msg_id = PIF_GPS_NMEA_MSG_ID_GSV;
 80165f0:	4b32      	ldr	r3, [pc, #200]	; (80166bc <pifGps_ParsingNmea+0x254>)
 80165f2:	789b      	ldrb	r3, [r3, #2]
 80165f4:	2b47      	cmp	r3, #71	; 0x47
 80165f6:	d10b      	bne.n	8016610 <pifGps_ParsingNmea+0x1a8>
 80165f8:	4b30      	ldr	r3, [pc, #192]	; (80166bc <pifGps_ParsingNmea+0x254>)
 80165fa:	78db      	ldrb	r3, [r3, #3]
 80165fc:	2b53      	cmp	r3, #83	; 0x53
 80165fe:	d107      	bne.n	8016610 <pifGps_ParsingNmea+0x1a8>
 8016600:	4b2e      	ldr	r3, [pc, #184]	; (80166bc <pifGps_ParsingNmea+0x254>)
 8016602:	791b      	ldrb	r3, [r3, #4]
 8016604:	2b56      	cmp	r3, #86	; 0x56
 8016606:	d103      	bne.n	8016610 <pifGps_ParsingNmea+0x1a8>
 8016608:	4b2d      	ldr	r3, [pc, #180]	; (80166c0 <pifGps_ParsingNmea+0x258>)
 801660a:	2209      	movs	r2, #9
 801660c:	701a      	strb	r2, [r3, #0]
 801660e:	e3a6      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'R' && string[3] == 'M' && string[4] == 'C') msg_id = PIF_GPS_NMEA_MSG_ID_RMC;
 8016610:	4b2a      	ldr	r3, [pc, #168]	; (80166bc <pifGps_ParsingNmea+0x254>)
 8016612:	789b      	ldrb	r3, [r3, #2]
 8016614:	2b52      	cmp	r3, #82	; 0x52
 8016616:	d10b      	bne.n	8016630 <pifGps_ParsingNmea+0x1c8>
 8016618:	4b28      	ldr	r3, [pc, #160]	; (80166bc <pifGps_ParsingNmea+0x254>)
 801661a:	78db      	ldrb	r3, [r3, #3]
 801661c:	2b4d      	cmp	r3, #77	; 0x4d
 801661e:	d107      	bne.n	8016630 <pifGps_ParsingNmea+0x1c8>
 8016620:	4b26      	ldr	r3, [pc, #152]	; (80166bc <pifGps_ParsingNmea+0x254>)
 8016622:	791b      	ldrb	r3, [r3, #4]
 8016624:	2b43      	cmp	r3, #67	; 0x43
 8016626:	d103      	bne.n	8016630 <pifGps_ParsingNmea+0x1c8>
 8016628:	4b25      	ldr	r3, [pc, #148]	; (80166c0 <pifGps_ParsingNmea+0x258>)
 801662a:	220a      	movs	r2, #10
 801662c:	701a      	strb	r2, [r3, #0]
 801662e:	e396      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'T' && string[3] == 'H' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_THS;
 8016630:	4b22      	ldr	r3, [pc, #136]	; (80166bc <pifGps_ParsingNmea+0x254>)
 8016632:	789b      	ldrb	r3, [r3, #2]
 8016634:	2b54      	cmp	r3, #84	; 0x54
 8016636:	d10b      	bne.n	8016650 <pifGps_ParsingNmea+0x1e8>
 8016638:	4b20      	ldr	r3, [pc, #128]	; (80166bc <pifGps_ParsingNmea+0x254>)
 801663a:	78db      	ldrb	r3, [r3, #3]
 801663c:	2b48      	cmp	r3, #72	; 0x48
 801663e:	d107      	bne.n	8016650 <pifGps_ParsingNmea+0x1e8>
 8016640:	4b1e      	ldr	r3, [pc, #120]	; (80166bc <pifGps_ParsingNmea+0x254>)
 8016642:	791b      	ldrb	r3, [r3, #4]
 8016644:	2b53      	cmp	r3, #83	; 0x53
 8016646:	d103      	bne.n	8016650 <pifGps_ParsingNmea+0x1e8>
 8016648:	4b1d      	ldr	r3, [pc, #116]	; (80166c0 <pifGps_ParsingNmea+0x258>)
 801664a:	220b      	movs	r2, #11
 801664c:	701a      	strb	r2, [r3, #0]
 801664e:	e386      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'T' && string[3] == 'X' && string[4] == 'T') msg_id = PIF_GPS_NMEA_MSG_ID_TXT;
 8016650:	4b1a      	ldr	r3, [pc, #104]	; (80166bc <pifGps_ParsingNmea+0x254>)
 8016652:	789b      	ldrb	r3, [r3, #2]
 8016654:	2b54      	cmp	r3, #84	; 0x54
 8016656:	d10b      	bne.n	8016670 <pifGps_ParsingNmea+0x208>
 8016658:	4b18      	ldr	r3, [pc, #96]	; (80166bc <pifGps_ParsingNmea+0x254>)
 801665a:	78db      	ldrb	r3, [r3, #3]
 801665c:	2b58      	cmp	r3, #88	; 0x58
 801665e:	d107      	bne.n	8016670 <pifGps_ParsingNmea+0x208>
 8016660:	4b16      	ldr	r3, [pc, #88]	; (80166bc <pifGps_ParsingNmea+0x254>)
 8016662:	791b      	ldrb	r3, [r3, #4]
 8016664:	2b54      	cmp	r3, #84	; 0x54
 8016666:	d103      	bne.n	8016670 <pifGps_ParsingNmea+0x208>
 8016668:	4b15      	ldr	r3, [pc, #84]	; (80166c0 <pifGps_ParsingNmea+0x258>)
 801666a:	220c      	movs	r2, #12
 801666c:	701a      	strb	r2, [r3, #0]
 801666e:	e376      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'V' && string[3] == 'L' && string[4] == 'W') msg_id = PIF_GPS_NMEA_MSG_ID_VLW;
 8016670:	4b12      	ldr	r3, [pc, #72]	; (80166bc <pifGps_ParsingNmea+0x254>)
 8016672:	789b      	ldrb	r3, [r3, #2]
 8016674:	2b56      	cmp	r3, #86	; 0x56
 8016676:	d10b      	bne.n	8016690 <pifGps_ParsingNmea+0x228>
 8016678:	4b10      	ldr	r3, [pc, #64]	; (80166bc <pifGps_ParsingNmea+0x254>)
 801667a:	78db      	ldrb	r3, [r3, #3]
 801667c:	2b4c      	cmp	r3, #76	; 0x4c
 801667e:	d107      	bne.n	8016690 <pifGps_ParsingNmea+0x228>
 8016680:	4b0e      	ldr	r3, [pc, #56]	; (80166bc <pifGps_ParsingNmea+0x254>)
 8016682:	791b      	ldrb	r3, [r3, #4]
 8016684:	2b57      	cmp	r3, #87	; 0x57
 8016686:	d103      	bne.n	8016690 <pifGps_ParsingNmea+0x228>
 8016688:	4b0d      	ldr	r3, [pc, #52]	; (80166c0 <pifGps_ParsingNmea+0x258>)
 801668a:	220d      	movs	r2, #13
 801668c:	701a      	strb	r2, [r3, #0]
 801668e:	e366      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'V' && string[3] == 'T' && string[4] == 'G') msg_id = PIF_GPS_NMEA_MSG_ID_VTG;
 8016690:	4b0a      	ldr	r3, [pc, #40]	; (80166bc <pifGps_ParsingNmea+0x254>)
 8016692:	789b      	ldrb	r3, [r3, #2]
 8016694:	2b56      	cmp	r3, #86	; 0x56
 8016696:	d115      	bne.n	80166c4 <pifGps_ParsingNmea+0x25c>
 8016698:	4b08      	ldr	r3, [pc, #32]	; (80166bc <pifGps_ParsingNmea+0x254>)
 801669a:	78db      	ldrb	r3, [r3, #3]
 801669c:	2b54      	cmp	r3, #84	; 0x54
 801669e:	d111      	bne.n	80166c4 <pifGps_ParsingNmea+0x25c>
 80166a0:	4b06      	ldr	r3, [pc, #24]	; (80166bc <pifGps_ParsingNmea+0x254>)
 80166a2:	791b      	ldrb	r3, [r3, #4]
 80166a4:	2b47      	cmp	r3, #71	; 0x47
 80166a6:	d10d      	bne.n	80166c4 <pifGps_ParsingNmea+0x25c>
 80166a8:	4b05      	ldr	r3, [pc, #20]	; (80166c0 <pifGps_ParsingNmea+0x258>)
 80166aa:	220e      	movs	r2, #14
 80166ac:	701a      	strb	r2, [r3, #0]
 80166ae:	e356      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>
 80166b0:	20001f6c 	.word	0x20001f6c
 80166b4:	20001f6d 	.word	0x20001f6d
 80166b8:	20001f6e 	.word	0x20001f6e
 80166bc:	20001f70 	.word	0x20001f70
 80166c0:	20001f90 	.word	0x20001f90
			else if (string[2] == 'Z' && string[3] == 'D' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_ZDA;
 80166c4:	4bb0      	ldr	r3, [pc, #704]	; (8016988 <pifGps_ParsingNmea+0x520>)
 80166c6:	789b      	ldrb	r3, [r3, #2]
 80166c8:	2b5a      	cmp	r3, #90	; 0x5a
 80166ca:	f040 8348 	bne.w	8016d5e <pifGps_ParsingNmea+0x8f6>
 80166ce:	4bae      	ldr	r3, [pc, #696]	; (8016988 <pifGps_ParsingNmea+0x520>)
 80166d0:	78db      	ldrb	r3, [r3, #3]
 80166d2:	2b44      	cmp	r3, #68	; 0x44
 80166d4:	f040 8343 	bne.w	8016d5e <pifGps_ParsingNmea+0x8f6>
 80166d8:	4bab      	ldr	r3, [pc, #684]	; (8016988 <pifGps_ParsingNmea+0x520>)
 80166da:	791b      	ldrb	r3, [r3, #4]
 80166dc:	2b41      	cmp	r3, #65	; 0x41
 80166de:	f040 833e 	bne.w	8016d5e <pifGps_ParsingNmea+0x8f6>
 80166e2:	4baa      	ldr	r3, [pc, #680]	; (801698c <pifGps_ParsingNmea+0x524>)
 80166e4:	220f      	movs	r2, #15
 80166e6:	701a      	strb	r2, [r3, #0]
 80166e8:	e339      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>
		}
		else if (offset) {
 80166ea:	4ba9      	ldr	r3, [pc, #676]	; (8016990 <pifGps_ParsingNmea+0x528>)
 80166ec:	781b      	ldrb	r3, [r3, #0]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	f000 8324 	beq.w	8016d3c <pifGps_ParsingNmea+0x8d4>
			switch (msg_id) {
 80166f4:	4ba5      	ldr	r3, [pc, #660]	; (801698c <pifGps_ParsingNmea+0x524>)
 80166f6:	781b      	ldrb	r3, [r3, #0]
 80166f8:	3b01      	subs	r3, #1
 80166fa:	2b0e      	cmp	r3, #14
 80166fc:	f200 832f 	bhi.w	8016d5e <pifGps_ParsingNmea+0x8f6>
 8016700:	a201      	add	r2, pc, #4	; (adr r2, 8016708 <pifGps_ParsingNmea+0x2a0>)
 8016702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016706:	bf00      	nop
 8016708:	08016d5f 	.word	0x08016d5f
 801670c:	08016d5f 	.word	0x08016d5f
 8016710:	08016745 	.word	0x08016745
 8016714:	08016849 	.word	0x08016849
 8016718:	080168f7 	.word	0x080168f7
 801671c:	08016d5f 	.word	0x08016d5f
 8016720:	08016d5f 	.word	0x08016d5f
 8016724:	08016d5f 	.word	0x08016d5f
 8016728:	080169e5 	.word	0x080169e5
 801672c:	08016b07 	.word	0x08016b07
 8016730:	08016d5f 	.word	0x08016d5f
 8016734:	08016bfb 	.word	0x08016bfb
 8016738:	08016d5f 	.word	0x08016d5f
 801673c:	08016c91 	.word	0x08016c91
 8016740:	08016cd7 	.word	0x08016cd7

			case PIF_GPS_NMEA_MSG_ID_GBS:
				break;

			case PIF_GPS_NMEA_MSG_ID_GGA:
				switch (param) {
 8016744:	4b93      	ldr	r3, [pc, #588]	; (8016994 <pifGps_ParsingNmea+0x52c>)
 8016746:	781b      	ldrb	r3, [r3, #0]
 8016748:	3b01      	subs	r3, #1
 801674a:	2b08      	cmp	r3, #8
 801674c:	f200 82f8 	bhi.w	8016d40 <pifGps_ParsingNmea+0x8d8>
 8016750:	a201      	add	r2, pc, #4	; (adr r2, 8016758 <pifGps_ParsingNmea+0x2f0>)
 8016752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016756:	bf00      	nop
 8016758:	0801677d 	.word	0x0801677d
 801675c:	0801678b 	.word	0x0801678b
 8016760:	080167a1 	.word	0x080167a1
 8016764:	080167c3 	.word	0x080167c3
 8016768:	080167d9 	.word	0x080167d9
 801676c:	080167fb 	.word	0x080167fb
 8016770:	08016819 	.word	0x08016819
 8016774:	08016d41 	.word	0x08016d41
 8016778:	0801682b 	.word	0x0801682b
				case 1: 
					_convertString2Time(string, &p_owner->_utc); 
 801677c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801677e:	330e      	adds	r3, #14
 8016780:	4619      	mov	r1, r3
 8016782:	4881      	ldr	r0, [pc, #516]	; (8016988 <pifGps_ParsingNmea+0x520>)
 8016784:	f7ff fbb0 	bl	8015ee8 <_convertString2Time>
					break;
 8016788:	e05d      	b.n	8016846 <pifGps_ParsingNmea+0x3de>
				case 2: 
					p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 801678a:	487f      	ldr	r0, [pc, #508]	; (8016988 <pifGps_ParsingNmea+0x520>)
 801678c:	f7ff fcf4 	bl	8016178 <_convertString2Degrees>
 8016790:	eeb0 7a40 	vmov.f32	s14, s0
 8016794:	eef0 7a60 	vmov.f32	s15, s1
 8016798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801679a:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 801679e:	e052      	b.n	8016846 <pifGps_ParsingNmea+0x3de>
				case 3: 
					if (string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 80167a0:	4b79      	ldr	r3, [pc, #484]	; (8016988 <pifGps_ParsingNmea+0x520>)
 80167a2:	781b      	ldrb	r3, [r3, #0]
 80167a4:	2b53      	cmp	r3, #83	; 0x53
 80167a6:	d14b      	bne.n	8016840 <pifGps_ParsingNmea+0x3d8>
 80167a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167aa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80167ae:	623a      	str	r2, [r7, #32]
 80167b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80167b4:	627b      	str	r3, [r7, #36]	; 0x24
 80167b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167b8:	ed97 7b08 	vldr	d7, [r7, #32]
 80167bc:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 80167c0:	e03e      	b.n	8016840 <pifGps_ParsingNmea+0x3d8>
				case 4: 
					p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 80167c2:	4871      	ldr	r0, [pc, #452]	; (8016988 <pifGps_ParsingNmea+0x520>)
 80167c4:	f7ff fcd8 	bl	8016178 <_convertString2Degrees>
 80167c8:	eeb0 7a40 	vmov.f32	s14, s0
 80167cc:	eef0 7a60 	vmov.f32	s15, s1
 80167d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167d2:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 80167d6:	e036      	b.n	8016846 <pifGps_ParsingNmea+0x3de>
				case 5: 
					if (string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 80167d8:	4b6b      	ldr	r3, [pc, #428]	; (8016988 <pifGps_ParsingNmea+0x520>)
 80167da:	781b      	ldrb	r3, [r3, #0]
 80167dc:	2b57      	cmp	r3, #87	; 0x57
 80167de:	d131      	bne.n	8016844 <pifGps_ParsingNmea+0x3dc>
 80167e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80167e6:	61ba      	str	r2, [r7, #24]
 80167e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80167ec:	61fb      	str	r3, [r7, #28]
 80167ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167f0:	ed97 7b06 	vldr	d7, [r7, #24]
 80167f4:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 80167f8:	e024      	b.n	8016844 <pifGps_ParsingNmea+0x3dc>
				case 6: 
					p_owner->_fix = (string[0]  > '0');
 80167fa:	4b63      	ldr	r3, [pc, #396]	; (8016988 <pifGps_ParsingNmea+0x520>)
 80167fc:	781b      	ldrb	r3, [r3, #0]
 80167fe:	2b30      	cmp	r3, #48	; 0x30
 8016800:	bf8c      	ite	hi
 8016802:	2301      	movhi	r3, #1
 8016804:	2300      	movls	r3, #0
 8016806:	b2d9      	uxtb	r1, r3
 8016808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801680a:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 801680e:	f361 0300 	bfi	r3, r1, #0, #1
 8016812:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
					break;
 8016816:	e016      	b.n	8016846 <pifGps_ParsingNmea+0x3de>
				case 7: 
					p_owner->_num_sat = _convertString2Interger(string);
 8016818:	485b      	ldr	r0, [pc, #364]	; (8016988 <pifGps_ParsingNmea+0x520>)
 801681a:	f7ff fc73 	bl	8016104 <_convertString2Interger>
 801681e:	4603      	mov	r3, r0
 8016820:	b2da      	uxtb	r2, r3
 8016822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
					break;
 8016828:	e00d      	b.n	8016846 <pifGps_ParsingNmea+0x3de>
				case 9: 
					p_owner->_altitude = _convertString2Float(string);
 801682a:	4857      	ldr	r0, [pc, #348]	; (8016988 <pifGps_ParsingNmea+0x520>)
 801682c:	f7ff fbde 	bl	8015fec <_convertString2Float>
 8016830:	eeb0 7a40 	vmov.f32	s14, s0
 8016834:	eef0 7a60 	vmov.f32	s15, s1
 8016838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801683a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
					break;
 801683e:	e002      	b.n	8016846 <pifGps_ParsingNmea+0x3de>
					break;
 8016840:	bf00      	nop
 8016842:	e27d      	b.n	8016d40 <pifGps_ParsingNmea+0x8d8>
					break;
 8016844:	bf00      	nop
				}
				break;
 8016846:	e27b      	b.n	8016d40 <pifGps_ParsingNmea+0x8d8>

			case PIF_GPS_NMEA_MSG_ID_GLL:
				switch (param) {
 8016848:	4b52      	ldr	r3, [pc, #328]	; (8016994 <pifGps_ParsingNmea+0x52c>)
 801684a:	781b      	ldrb	r3, [r3, #0]
 801684c:	3b01      	subs	r3, #1
 801684e:	2b04      	cmp	r3, #4
 8016850:	f200 8278 	bhi.w	8016d44 <pifGps_ParsingNmea+0x8dc>
 8016854:	a201      	add	r2, pc, #4	; (adr r2, 801685c <pifGps_ParsingNmea+0x3f4>)
 8016856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801685a:	bf00      	nop
 801685c:	08016871 	.word	0x08016871
 8016860:	08016887 	.word	0x08016887
 8016864:	080168a9 	.word	0x080168a9
 8016868:	080168bf 	.word	0x080168bf
 801686c:	080168e1 	.word	0x080168e1
				case 1: 
					p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8016870:	4845      	ldr	r0, [pc, #276]	; (8016988 <pifGps_ParsingNmea+0x520>)
 8016872:	f7ff fc81 	bl	8016178 <_convertString2Degrees>
 8016876:	eeb0 7a40 	vmov.f32	s14, s0
 801687a:	eef0 7a60 	vmov.f32	s15, s1
 801687e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016880:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 8016884:	e036      	b.n	80168f4 <pifGps_ParsingNmea+0x48c>
				case 2:
					if (string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8016886:	4b40      	ldr	r3, [pc, #256]	; (8016988 <pifGps_ParsingNmea+0x520>)
 8016888:	781b      	ldrb	r3, [r3, #0]
 801688a:	2b53      	cmp	r3, #83	; 0x53
 801688c:	d12f      	bne.n	80168ee <pifGps_ParsingNmea+0x486>
 801688e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016890:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016894:	613a      	str	r2, [r7, #16]
 8016896:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801689a:	617b      	str	r3, [r7, #20]
 801689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801689e:	ed97 7b04 	vldr	d7, [r7, #16]
 80168a2:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 80168a6:	e022      	b.n	80168ee <pifGps_ParsingNmea+0x486>
				case 3:
					p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 80168a8:	4837      	ldr	r0, [pc, #220]	; (8016988 <pifGps_ParsingNmea+0x520>)
 80168aa:	f7ff fc65 	bl	8016178 <_convertString2Degrees>
 80168ae:	eeb0 7a40 	vmov.f32	s14, s0
 80168b2:	eef0 7a60 	vmov.f32	s15, s1
 80168b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168b8:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 80168bc:	e01a      	b.n	80168f4 <pifGps_ParsingNmea+0x48c>
				case 4:
					if (string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 80168be:	4b32      	ldr	r3, [pc, #200]	; (8016988 <pifGps_ParsingNmea+0x520>)
 80168c0:	781b      	ldrb	r3, [r3, #0]
 80168c2:	2b57      	cmp	r3, #87	; 0x57
 80168c4:	d115      	bne.n	80168f2 <pifGps_ParsingNmea+0x48a>
 80168c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80168cc:	60ba      	str	r2, [r7, #8]
 80168ce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80168d2:	60fb      	str	r3, [r7, #12]
 80168d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168d6:	ed97 7b02 	vldr	d7, [r7, #8]
 80168da:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 80168de:	e008      	b.n	80168f2 <pifGps_ParsingNmea+0x48a>
				case 5:
					 _convertString2Time(string, &p_owner->_utc);
 80168e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168e2:	330e      	adds	r3, #14
 80168e4:	4619      	mov	r1, r3
 80168e6:	4828      	ldr	r0, [pc, #160]	; (8016988 <pifGps_ParsingNmea+0x520>)
 80168e8:	f7ff fafe 	bl	8015ee8 <_convertString2Time>
					break;
 80168ec:	e002      	b.n	80168f4 <pifGps_ParsingNmea+0x48c>
					break;
 80168ee:	bf00      	nop
 80168f0:	e228      	b.n	8016d44 <pifGps_ParsingNmea+0x8dc>
					break;
 80168f2:	bf00      	nop
				}
				break;
 80168f4:	e226      	b.n	8016d44 <pifGps_ParsingNmea+0x8dc>

			case PIF_GPS_NMEA_MSG_ID_GNS:
				switch (param) {
 80168f6:	4b27      	ldr	r3, [pc, #156]	; (8016994 <pifGps_ParsingNmea+0x52c>)
 80168f8:	781b      	ldrb	r3, [r3, #0]
 80168fa:	3b01      	subs	r3, #1
 80168fc:	2b08      	cmp	r3, #8
 80168fe:	f200 8223 	bhi.w	8016d48 <pifGps_ParsingNmea+0x8e0>
 8016902:	a201      	add	r2, pc, #4	; (adr r2, 8016908 <pifGps_ParsingNmea+0x4a0>)
 8016904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016908:	0801692d 	.word	0x0801692d
 801690c:	0801693b 	.word	0x0801693b
 8016910:	08016951 	.word	0x08016951
 8016914:	08016973 	.word	0x08016973
 8016918:	08016999 	.word	0x08016999
 801691c:	08016d49 	.word	0x08016d49
 8016920:	080169b5 	.word	0x080169b5
 8016924:	08016d49 	.word	0x08016d49
 8016928:	080169c7 	.word	0x080169c7
				case 1:
					_convertString2Time(string, &p_owner->_utc);
 801692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801692e:	330e      	adds	r3, #14
 8016930:	4619      	mov	r1, r3
 8016932:	4815      	ldr	r0, [pc, #84]	; (8016988 <pifGps_ParsingNmea+0x520>)
 8016934:	f7ff fad8 	bl	8015ee8 <_convertString2Time>
					break;
 8016938:	e053      	b.n	80169e2 <pifGps_ParsingNmea+0x57a>
				case 2:
					p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 801693a:	4813      	ldr	r0, [pc, #76]	; (8016988 <pifGps_ParsingNmea+0x520>)
 801693c:	f7ff fc1c 	bl	8016178 <_convertString2Degrees>
 8016940:	eeb0 7a40 	vmov.f32	s14, s0
 8016944:	eef0 7a60 	vmov.f32	s15, s1
 8016948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801694a:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 801694e:	e048      	b.n	80169e2 <pifGps_ParsingNmea+0x57a>
				case 3:
					if (string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8016950:	4b0d      	ldr	r3, [pc, #52]	; (8016988 <pifGps_ParsingNmea+0x520>)
 8016952:	781b      	ldrb	r3, [r3, #0]
 8016954:	2b53      	cmp	r3, #83	; 0x53
 8016956:	d141      	bne.n	80169dc <pifGps_ParsingNmea+0x574>
 8016958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801695a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801695e:	603a      	str	r2, [r7, #0]
 8016960:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8016964:	607b      	str	r3, [r7, #4]
 8016966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016968:	ed97 7b00 	vldr	d7, [r7]
 801696c:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 8016970:	e034      	b.n	80169dc <pifGps_ParsingNmea+0x574>
				case 4:
					p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8016972:	4805      	ldr	r0, [pc, #20]	; (8016988 <pifGps_ParsingNmea+0x520>)
 8016974:	f7ff fc00 	bl	8016178 <_convertString2Degrees>
 8016978:	eeb0 7a40 	vmov.f32	s14, s0
 801697c:	eef0 7a60 	vmov.f32	s15, s1
 8016980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016982:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 8016986:	e02c      	b.n	80169e2 <pifGps_ParsingNmea+0x57a>
 8016988:	20001f70 	.word	0x20001f70
 801698c:	20001f90 	.word	0x20001f90
 8016990:	20001f6d 	.word	0x20001f6d
 8016994:	20001f6c 	.word	0x20001f6c
				case 5:
					if (string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8016998:	4bb5      	ldr	r3, [pc, #724]	; (8016c70 <pifGps_ParsingNmea+0x808>)
 801699a:	781b      	ldrb	r3, [r3, #0]
 801699c:	2b57      	cmp	r3, #87	; 0x57
 801699e:	d11f      	bne.n	80169e0 <pifGps_ParsingNmea+0x578>
 80169a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80169a6:	4692      	mov	sl, r2
 80169a8:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80169ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ae:	e9c3 ab08 	strd	sl, fp, [r3, #32]
					break;
 80169b2:	e015      	b.n	80169e0 <pifGps_ParsingNmea+0x578>
				case 7:
					p_owner->_num_sat = _convertString2Interger(string);
 80169b4:	48ae      	ldr	r0, [pc, #696]	; (8016c70 <pifGps_ParsingNmea+0x808>)
 80169b6:	f7ff fba5 	bl	8016104 <_convertString2Interger>
 80169ba:	4603      	mov	r3, r0
 80169bc:	b2da      	uxtb	r2, r3
 80169be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
					break;
 80169c4:	e00d      	b.n	80169e2 <pifGps_ParsingNmea+0x57a>
				case 9:
					p_owner->_altitude = _convertString2Float(string);
 80169c6:	48aa      	ldr	r0, [pc, #680]	; (8016c70 <pifGps_ParsingNmea+0x808>)
 80169c8:	f7ff fb10 	bl	8015fec <_convertString2Float>
 80169cc:	eeb0 7a40 	vmov.f32	s14, s0
 80169d0:	eef0 7a60 	vmov.f32	s15, s1
 80169d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169d6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
					break;
 80169da:	e002      	b.n	80169e2 <pifGps_ParsingNmea+0x57a>
					break;
 80169dc:	bf00      	nop
 80169de:	e1b3      	b.n	8016d48 <pifGps_ParsingNmea+0x8e0>
					break;
 80169e0:	bf00      	nop
				}
				break;
 80169e2:	e1b1      	b.n	8016d48 <pifGps_ParsingNmea+0x8e0>

			case PIF_GPS_NMEA_MSG_ID_GST:
				break;

			case PIF_GPS_NMEA_MSG_ID_GSV:
				switch (param) {
 80169e4:	4ba3      	ldr	r3, [pc, #652]	; (8016c74 <pifGps_ParsingNmea+0x80c>)
 80169e6:	781b      	ldrb	r3, [r3, #0]
 80169e8:	2b03      	cmp	r3, #3
 80169ea:	d00e      	beq.n	8016a0a <pifGps_ParsingNmea+0x5a2>
 80169ec:	2b03      	cmp	r3, #3
 80169ee:	dc16      	bgt.n	8016a1e <pifGps_ParsingNmea+0x5b6>
 80169f0:	2b01      	cmp	r3, #1
 80169f2:	d013      	beq.n	8016a1c <pifGps_ParsingNmea+0x5b4>
 80169f4:	2b02      	cmp	r3, #2
 80169f6:	d112      	bne.n	8016a1e <pifGps_ParsingNmea+0x5b6>
				case 1:
                    // Total number of messages of this type in this cycle
					break;
				case 2:
                    // Message number
					p_owner->__sv_msg_num = _convertString2Interger(string);
 80169f8:	489d      	ldr	r0, [pc, #628]	; (8016c70 <pifGps_ParsingNmea+0x808>)
 80169fa:	f7ff fb83 	bl	8016104 <_convertString2Interger>
 80169fe:	4603      	mov	r3, r0
 8016a00:	b2da      	uxtb	r2, r3
 8016a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a04:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
					break;
 8016a08:	e009      	b.n	8016a1e <pifGps_ParsingNmea+0x5b6>
				case 3:
                    // Total number of SVs visible
					p_owner->_sv_num_sv = _convertString2Interger(string);
 8016a0a:	4899      	ldr	r0, [pc, #612]	; (8016c70 <pifGps_ParsingNmea+0x808>)
 8016a0c:	f7ff fb7a 	bl	8016104 <_convertString2Interger>
 8016a10:	4603      	mov	r3, r0
 8016a12:	b2da      	uxtb	r2, r3
 8016a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a16:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
					break;
 8016a1a:	e000      	b.n	8016a1e <pifGps_ParsingNmea+0x5b6>
					break;
 8016a1c:	bf00      	nop
				}
				if (param < 4) break;
 8016a1e:	4b95      	ldr	r3, [pc, #596]	; (8016c74 <pifGps_ParsingNmea+0x80c>)
 8016a20:	781b      	ldrb	r3, [r3, #0]
 8016a22:	2b03      	cmp	r3, #3
 8016a24:	f240 8192 	bls.w	8016d4c <pifGps_ParsingNmea+0x8e4>

				sv_packet_idx = (param - 4) / 4 + 1; // satellite number in packet, 1-4
 8016a28:	4b92      	ldr	r3, [pc, #584]	; (8016c74 <pifGps_ParsingNmea+0x80c>)
 8016a2a:	781b      	ldrb	r3, [r3, #0]
 8016a2c:	3b04      	subs	r3, #4
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	da00      	bge.n	8016a34 <pifGps_ParsingNmea+0x5cc>
 8016a32:	3303      	adds	r3, #3
 8016a34:	109b      	asrs	r3, r3, #2
 8016a36:	b2db      	uxtb	r3, r3
 8016a38:	3301      	adds	r3, #1
 8016a3a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				sv_sat_num    = sv_packet_idx + (4 * (p_owner->__sv_msg_num - 1)); // global satellite number
 8016a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a40:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8016a44:	3b01      	subs	r3, #1
 8016a46:	b2db      	uxtb	r3, r3
 8016a48:	009b      	lsls	r3, r3, #2
 8016a4a:	b2da      	uxtb	r2, r3
 8016a4c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8016a50:	4413      	add	r3, r2
 8016a52:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				sv_sat_param  = param - 3 - (4 * (sv_packet_idx - 1)); // parameter number for satellite
 8016a56:	4b87      	ldr	r3, [pc, #540]	; (8016c74 <pifGps_ParsingNmea+0x80c>)
 8016a58:	781a      	ldrb	r2, [r3, #0]
 8016a5a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8016a5e:	3b01      	subs	r3, #1
 8016a60:	b2db      	uxtb	r3, r3
 8016a62:	009b      	lsls	r3, r3, #2
 8016a64:	b2db      	uxtb	r3, r3
 8016a66:	1ad3      	subs	r3, r2, r3
 8016a68:	b2db      	uxtb	r3, r3
 8016a6a:	3b03      	subs	r3, #3
 8016a6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

				if (sv_sat_num > PIF_GPS_SV_MAXSATS) break;
 8016a70:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016a74:	2b10      	cmp	r3, #16
 8016a76:	f200 816b 	bhi.w	8016d50 <pifGps_ParsingNmea+0x8e8>

				switch (sv_sat_param) {
 8016a7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016a7e:	3b01      	subs	r3, #1
 8016a80:	2b03      	cmp	r3, #3
 8016a82:	d838      	bhi.n	8016af6 <pifGps_ParsingNmea+0x68e>
 8016a84:	a201      	add	r2, pc, #4	; (adr r2, 8016a8c <pifGps_ParsingNmea+0x624>)
 8016a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a8a:	bf00      	nop
 8016a8c:	08016a9d 	.word	0x08016a9d
 8016a90:	08016af7 	.word	0x08016af7
 8016a94:	08016af7 	.word	0x08016af7
 8016a98:	08016acb 	.word	0x08016acb
				case 1:
					// SV PRN number
					p_owner->_sv_chn[sv_sat_num - 1]  = sv_sat_num;
 8016a9c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016aa0:	3b01      	subs	r3, #1
 8016aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016aa4:	4413      	add	r3, r2
 8016aa6:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8016aaa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
					p_owner->_sv_svid[sv_sat_num - 1] = _convertString2Interger(string);
 8016aae:	4870      	ldr	r0, [pc, #448]	; (8016c70 <pifGps_ParsingNmea+0x808>)
 8016ab0:	f7ff fb28 	bl	8016104 <_convertString2Interger>
 8016ab4:	4602      	mov	r2, r0
 8016ab6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016aba:	3b01      	subs	r3, #1
 8016abc:	b2d1      	uxtb	r1, r2
 8016abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016ac0:	4413      	add	r3, r2
 8016ac2:	460a      	mov	r2, r1
 8016ac4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
					break;
 8016ac8:	e015      	b.n	8016af6 <pifGps_ParsingNmea+0x68e>
				case 3:
					// Azimuth, degrees from True North, 000 through 359
					break;
				case 4:
					// SNR, 00 through 99 dB (null when not tracking)
					p_owner->_sv_cno[sv_sat_num - 1] = _convertString2Interger(string);
 8016aca:	4869      	ldr	r0, [pc, #420]	; (8016c70 <pifGps_ParsingNmea+0x808>)
 8016acc:	f7ff fb1a 	bl	8016104 <_convertString2Interger>
 8016ad0:	4602      	mov	r2, r0
 8016ad2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016ad6:	3b01      	subs	r3, #1
 8016ad8:	b2d1      	uxtb	r1, r2
 8016ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016adc:	4413      	add	r3, r2
 8016ade:	460a      	mov	r2, r1
 8016ae0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					p_owner->_sv_quality[sv_sat_num - 1] = 0; // only used by ublox
 8016ae4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016ae8:	3b01      	subs	r3, #1
 8016aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016aec:	4413      	add	r3, r2
 8016aee:	2200      	movs	r2, #0
 8016af0:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
					break;
 8016af4:	bf00      	nop
				}

				p_owner->_sv_received_count++;
 8016af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016afc:	1c5a      	adds	r2, r3, #1
 8016afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
				break;
 8016b04:	e12b      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>

			case PIF_GPS_NMEA_MSG_ID_RMC:
				switch (param) {
 8016b06:	4b5b      	ldr	r3, [pc, #364]	; (8016c74 <pifGps_ParsingNmea+0x80c>)
 8016b08:	781b      	ldrb	r3, [r3, #0]
 8016b0a:	3b01      	subs	r3, #1
 8016b0c:	2b08      	cmp	r3, #8
 8016b0e:	f200 8121 	bhi.w	8016d54 <pifGps_ParsingNmea+0x8ec>
 8016b12:	a201      	add	r2, pc, #4	; (adr r2, 8016b18 <pifGps_ParsingNmea+0x6b0>)
 8016b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b18:	08016b3d 	.word	0x08016b3d
 8016b1c:	08016d55 	.word	0x08016d55
 8016b20:	08016b4b 	.word	0x08016b4b
 8016b24:	08016b61 	.word	0x08016b61
 8016b28:	08016b7d 	.word	0x08016b7d
 8016b2c:	08016b93 	.word	0x08016b93
 8016b30:	08016baf 	.word	0x08016baf
 8016b34:	08016bcf 	.word	0x08016bcf
 8016b38:	08016be5 	.word	0x08016be5
				case 1:
					_convertString2Time(string, &p_owner->_utc);
 8016b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b3e:	330e      	adds	r3, #14
 8016b40:	4619      	mov	r1, r3
 8016b42:	484b      	ldr	r0, [pc, #300]	; (8016c70 <pifGps_ParsingNmea+0x808>)
 8016b44:	f7ff f9d0 	bl	8015ee8 <_convertString2Time>
					break;
 8016b48:	e056      	b.n	8016bf8 <pifGps_ParsingNmea+0x790>
				case 3:
					p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8016b4a:	4849      	ldr	r0, [pc, #292]	; (8016c70 <pifGps_ParsingNmea+0x808>)
 8016b4c:	f7ff fb14 	bl	8016178 <_convertString2Degrees>
 8016b50:	eeb0 7a40 	vmov.f32	s14, s0
 8016b54:	eef0 7a60 	vmov.f32	s15, s1
 8016b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b5a:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 8016b5e:	e04b      	b.n	8016bf8 <pifGps_ParsingNmea+0x790>
				case 4:
					if (string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8016b60:	4b43      	ldr	r3, [pc, #268]	; (8016c70 <pifGps_ParsingNmea+0x808>)
 8016b62:	781b      	ldrb	r3, [r3, #0]
 8016b64:	2b53      	cmp	r3, #83	; 0x53
 8016b66:	d144      	bne.n	8016bf2 <pifGps_ParsingNmea+0x78a>
 8016b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b6a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016b6e:	4690      	mov	r8, r2
 8016b70:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8016b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b76:	e9c3 8906 	strd	r8, r9, [r3, #24]
					break;
 8016b7a:	e03a      	b.n	8016bf2 <pifGps_ParsingNmea+0x78a>
				case 5:
					p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8016b7c:	483c      	ldr	r0, [pc, #240]	; (8016c70 <pifGps_ParsingNmea+0x808>)
 8016b7e:	f7ff fafb 	bl	8016178 <_convertString2Degrees>
 8016b82:	eeb0 7a40 	vmov.f32	s14, s0
 8016b86:	eef0 7a60 	vmov.f32	s15, s1
 8016b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b8c:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 8016b90:	e032      	b.n	8016bf8 <pifGps_ParsingNmea+0x790>
				case 6:
					if (string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8016b92:	4b37      	ldr	r3, [pc, #220]	; (8016c70 <pifGps_ParsingNmea+0x808>)
 8016b94:	781b      	ldrb	r3, [r3, #0]
 8016b96:	2b57      	cmp	r3, #87	; 0x57
 8016b98:	d12d      	bne.n	8016bf6 <pifGps_ParsingNmea+0x78e>
 8016b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016ba0:	4614      	mov	r4, r2
 8016ba2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8016ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ba8:	e9c3 4508 	strd	r4, r5, [r3, #32]
					break;
 8016bac:	e023      	b.n	8016bf6 <pifGps_ParsingNmea+0x78e>
				case 7:
					p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
 8016bae:	4830      	ldr	r0, [pc, #192]	; (8016c70 <pifGps_ParsingNmea+0x808>)
 8016bb0:	f7ff fa1c 	bl	8015fec <_convertString2Float>
 8016bb4:	ec51 0b10 	vmov	r0, r1, d0
 8016bb8:	a32b      	add	r3, pc, #172	; (adr r3, 8016c68 <pifGps_ParsingNmea+0x800>)
 8016bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bbe:	f7e9 fccf 	bl	8000560 <__aeabi_dmul>
 8016bc2:	4602      	mov	r2, r0
 8016bc4:	460b      	mov	r3, r1
 8016bc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016bc8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
					break;
 8016bcc:	e014      	b.n	8016bf8 <pifGps_ParsingNmea+0x790>
				case 8:
					p_owner->_ground_course = _convertString2Float(string);
 8016bce:	4828      	ldr	r0, [pc, #160]	; (8016c70 <pifGps_ParsingNmea+0x808>)
 8016bd0:	f7ff fa0c 	bl	8015fec <_convertString2Float>
 8016bd4:	eeb0 7a40 	vmov.f32	s14, s0
 8016bd8:	eef0 7a60 	vmov.f32	s15, s1
 8016bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bde:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
					break;
 8016be2:	e009      	b.n	8016bf8 <pifGps_ParsingNmea+0x790>
				case 9:
					_convertString2Date(string, &p_owner->_utc);
 8016be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016be6:	330e      	adds	r3, #14
 8016be8:	4619      	mov	r1, r3
 8016bea:	4821      	ldr	r0, [pc, #132]	; (8016c70 <pifGps_ParsingNmea+0x808>)
 8016bec:	f7ff f938 	bl	8015e60 <_convertString2Date>
					break;
 8016bf0:	e002      	b.n	8016bf8 <pifGps_ParsingNmea+0x790>
					break;
 8016bf2:	bf00      	nop
 8016bf4:	e0ae      	b.n	8016d54 <pifGps_ParsingNmea+0x8ec>
					break;
 8016bf6:	bf00      	nop
				}
				break;
 8016bf8:	e0ac      	b.n	8016d54 <pifGps_ParsingNmea+0x8ec>

			case PIF_GPS_NMEA_MSG_ID_THS:
				break;

			case PIF_GPS_NMEA_MSG_ID_TXT:
				if (p_owner->__evt_text) {
 8016bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bfc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d043      	beq.n	8016c8c <pifGps_ParsingNmea+0x824>
					switch (param) {
 8016c04:	4b1b      	ldr	r3, [pc, #108]	; (8016c74 <pifGps_ParsingNmea+0x80c>)
 8016c06:	781b      	ldrb	r3, [r3, #0]
 8016c08:	3b01      	subs	r3, #1
 8016c0a:	2b03      	cmp	r3, #3
 8016c0c:	f200 80a4 	bhi.w	8016d58 <pifGps_ParsingNmea+0x8f0>
 8016c10:	a201      	add	r2, pc, #4	; (adr r2, 8016c18 <pifGps_ParsingNmea+0x7b0>)
 8016c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c16:	bf00      	nop
 8016c18:	08016c29 	.word	0x08016c29
 8016c1c:	08016c3d 	.word	0x08016c3d
 8016c20:	08016c51 	.word	0x08016c51
 8016c24:	08016c79 	.word	0x08016c79
					case 1:
						p_owner->__p_txt->total = _convertString2Interger(string);
 8016c28:	4811      	ldr	r0, [pc, #68]	; (8016c70 <pifGps_ParsingNmea+0x808>)
 8016c2a:	f7ff fa6b 	bl	8016104 <_convertString2Interger>
 8016c2e:	4602      	mov	r2, r0
 8016c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016c36:	b2d2      	uxtb	r2, r2
 8016c38:	701a      	strb	r2, [r3, #0]
						break;
 8016c3a:	e028      	b.n	8016c8e <pifGps_ParsingNmea+0x826>
					case 2:
						p_owner->__p_txt->num = _convertString2Interger(string);
 8016c3c:	480c      	ldr	r0, [pc, #48]	; (8016c70 <pifGps_ParsingNmea+0x808>)
 8016c3e:	f7ff fa61 	bl	8016104 <_convertString2Interger>
 8016c42:	4602      	mov	r2, r0
 8016c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016c4a:	b2d2      	uxtb	r2, r2
 8016c4c:	705a      	strb	r2, [r3, #1]
						break;
 8016c4e:	e01e      	b.n	8016c8e <pifGps_ParsingNmea+0x826>
					case 3:
						p_owner->__p_txt->type = _convertString2Interger(string);
 8016c50:	4807      	ldr	r0, [pc, #28]	; (8016c70 <pifGps_ParsingNmea+0x808>)
 8016c52:	f7ff fa57 	bl	8016104 <_convertString2Interger>
 8016c56:	4602      	mov	r2, r0
 8016c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016c5e:	b2d2      	uxtb	r2, r2
 8016c60:	709a      	strb	r2, [r3, #2]
						break;
 8016c62:	e014      	b.n	8016c8e <pifGps_ParsingNmea+0x826>
 8016c64:	f3af 8000 	nop.w
 8016c68:	00000000 	.word	0x00000000
 8016c6c:	40e91e80 	.word	0x40e91e80
 8016c70:	20001f70 	.word	0x20001f70
 8016c74:	20001f6c 	.word	0x20001f6c
					case 4:
						strncpy(p_owner->__p_txt->text, string, PIF_GPS_NMEA_TEXT_SIZE - 1);
 8016c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016c7e:	3303      	adds	r3, #3
 8016c80:	223f      	movs	r2, #63	; 0x3f
 8016c82:	499b      	ldr	r1, [pc, #620]	; (8016ef0 <pifGps_ParsingNmea+0xa88>)
 8016c84:	4618      	mov	r0, r3
 8016c86:	f00d fa87 	bl	8024198 <strncpy>
						break;
 8016c8a:	e000      	b.n	8016c8e <pifGps_ParsingNmea+0x826>
					}
				}
 8016c8c:	bf00      	nop
				break;
 8016c8e:	e063      	b.n	8016d58 <pifGps_ParsingNmea+0x8f0>

			case PIF_GPS_NMEA_MSG_ID_VLW:
				break;

			case PIF_GPS_NMEA_MSG_ID_VTG:
				switch (param) {
 8016c90:	4b98      	ldr	r3, [pc, #608]	; (8016ef4 <pifGps_ParsingNmea+0xa8c>)
 8016c92:	781b      	ldrb	r3, [r3, #0]
 8016c94:	2b01      	cmp	r3, #1
 8016c96:	d002      	beq.n	8016c9e <pifGps_ParsingNmea+0x836>
 8016c98:	2b05      	cmp	r3, #5
 8016c9a:	d00b      	beq.n	8016cb4 <pifGps_ParsingNmea+0x84c>
					break;
				case 5:
					p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
					break;
				}
				break;
 8016c9c:	e05f      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>
					p_owner->_ground_course = _convertString2Float(string);
 8016c9e:	4894      	ldr	r0, [pc, #592]	; (8016ef0 <pifGps_ParsingNmea+0xa88>)
 8016ca0:	f7ff f9a4 	bl	8015fec <_convertString2Float>
 8016ca4:	eeb0 7a40 	vmov.f32	s14, s0
 8016ca8:	eef0 7a60 	vmov.f32	s15, s1
 8016cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cae:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
					break;
 8016cb2:	e00f      	b.n	8016cd4 <pifGps_ParsingNmea+0x86c>
					p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
 8016cb4:	488e      	ldr	r0, [pc, #568]	; (8016ef0 <pifGps_ParsingNmea+0xa88>)
 8016cb6:	f7ff f999 	bl	8015fec <_convertString2Float>
 8016cba:	ec51 0b10 	vmov	r0, r1, d0
 8016cbe:	a38a      	add	r3, pc, #552	; (adr r3, 8016ee8 <pifGps_ParsingNmea+0xa80>)
 8016cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cc4:	f7e9 fc4c 	bl	8000560 <__aeabi_dmul>
 8016cc8:	4602      	mov	r2, r0
 8016cca:	460b      	mov	r3, r1
 8016ccc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016cce:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
					break;
 8016cd2:	bf00      	nop
				break;
 8016cd4:	e043      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>

			case PIF_GPS_NMEA_MSG_ID_ZDA:
				switch (param) {
 8016cd6:	4b87      	ldr	r3, [pc, #540]	; (8016ef4 <pifGps_ParsingNmea+0xa8c>)
 8016cd8:	781b      	ldrb	r3, [r3, #0]
 8016cda:	3b01      	subs	r3, #1
 8016cdc:	2b03      	cmp	r3, #3
 8016cde:	d83d      	bhi.n	8016d5c <pifGps_ParsingNmea+0x8f4>
 8016ce0:	a201      	add	r2, pc, #4	; (adr r2, 8016ce8 <pifGps_ParsingNmea+0x880>)
 8016ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ce6:	bf00      	nop
 8016ce8:	08016cf9 	.word	0x08016cf9
 8016cec:	08016d07 	.word	0x08016d07
 8016cf0:	08016d17 	.word	0x08016d17
 8016cf4:	08016d27 	.word	0x08016d27
				case 1:
					_convertString2Time(string, &p_owner->_utc);
 8016cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cfa:	330e      	adds	r3, #14
 8016cfc:	4619      	mov	r1, r3
 8016cfe:	487c      	ldr	r0, [pc, #496]	; (8016ef0 <pifGps_ParsingNmea+0xa88>)
 8016d00:	f7ff f8f2 	bl	8015ee8 <_convertString2Time>
					break;
 8016d04:	e019      	b.n	8016d3a <pifGps_ParsingNmea+0x8d2>
				case 2:
					p_owner->_utc.day = _convertString2Interger(string);
 8016d06:	487a      	ldr	r0, [pc, #488]	; (8016ef0 <pifGps_ParsingNmea+0xa88>)
 8016d08:	f7ff f9fc 	bl	8016104 <_convertString2Interger>
 8016d0c:	4603      	mov	r3, r0
 8016d0e:	b2da      	uxtb	r2, r3
 8016d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d12:	741a      	strb	r2, [r3, #16]
					break;
 8016d14:	e011      	b.n	8016d3a <pifGps_ParsingNmea+0x8d2>
				case 3:
					p_owner->_utc.month = _convertString2Interger(string);
 8016d16:	4876      	ldr	r0, [pc, #472]	; (8016ef0 <pifGps_ParsingNmea+0xa88>)
 8016d18:	f7ff f9f4 	bl	8016104 <_convertString2Interger>
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	b2da      	uxtb	r2, r3
 8016d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d22:	73da      	strb	r2, [r3, #15]
					break;
 8016d24:	e009      	b.n	8016d3a <pifGps_ParsingNmea+0x8d2>
				case 4:
					p_owner->_utc.year = _convertString2Interger(string) - 2000;
 8016d26:	4872      	ldr	r0, [pc, #456]	; (8016ef0 <pifGps_ParsingNmea+0xa88>)
 8016d28:	f7ff f9ec 	bl	8016104 <_convertString2Interger>
 8016d2c:	4603      	mov	r3, r0
 8016d2e:	b2db      	uxtb	r3, r3
 8016d30:	3330      	adds	r3, #48	; 0x30
 8016d32:	b2da      	uxtb	r2, r3
 8016d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d36:	739a      	strb	r2, [r3, #14]
					break;
 8016d38:	bf00      	nop
				}
				break;
 8016d3a:	e00f      	b.n	8016d5c <pifGps_ParsingNmea+0x8f4>
			}
		}
 8016d3c:	bf00      	nop
 8016d3e:	e00e      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>
				break;
 8016d40:	bf00      	nop
 8016d42:	e00c      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>
				break;
 8016d44:	bf00      	nop
 8016d46:	e00a      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>
				break;
 8016d48:	bf00      	nop
 8016d4a:	e008      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>
				if (param < 4) break;
 8016d4c:	bf00      	nop
 8016d4e:	e006      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>
				if (sv_sat_num > PIF_GPS_SV_MAXSATS) break;
 8016d50:	bf00      	nop
 8016d52:	e004      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>
				break;
 8016d54:	bf00      	nop
 8016d56:	e002      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>
				break;
 8016d58:	bf00      	nop
 8016d5a:	e000      	b.n	8016d5e <pifGps_ParsingNmea+0x8f6>
				break;
 8016d5c:	bf00      	nop
		param++;
 8016d5e:	4b65      	ldr	r3, [pc, #404]	; (8016ef4 <pifGps_ParsingNmea+0xa8c>)
 8016d60:	781b      	ldrb	r3, [r3, #0]
 8016d62:	3301      	adds	r3, #1
 8016d64:	b2da      	uxtb	r2, r3
 8016d66:	4b63      	ldr	r3, [pc, #396]	; (8016ef4 <pifGps_ParsingNmea+0xa8c>)
 8016d68:	701a      	strb	r2, [r3, #0]
		if (c == '*') checksum_param = 1;
 8016d6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016d6e:	2b2a      	cmp	r3, #42	; 0x2a
 8016d70:	d103      	bne.n	8016d7a <pifGps_ParsingNmea+0x912>
 8016d72:	4b61      	ldr	r3, [pc, #388]	; (8016ef8 <pifGps_ParsingNmea+0xa90>)
 8016d74:	2201      	movs	r2, #1
 8016d76:	701a      	strb	r2, [r3, #0]
 8016d78:	e007      	b.n	8016d8a <pifGps_ParsingNmea+0x922>
		else parity ^= c;
 8016d7a:	4b60      	ldr	r3, [pc, #384]	; (8016efc <pifGps_ParsingNmea+0xa94>)
 8016d7c:	781a      	ldrb	r2, [r3, #0]
 8016d7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016d82:	4053      	eors	r3, r2
 8016d84:	b2da      	uxtb	r2, r3
 8016d86:	4b5d      	ldr	r3, [pc, #372]	; (8016efc <pifGps_ParsingNmea+0xa94>)
 8016d88:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 8016d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d8c:	689b      	ldr	r3, [r3, #8]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d018      	beq.n	8016dc4 <pifGps_ParsingNmea+0x95c>
			string[offset++] = c;
 8016d92:	4b5b      	ldr	r3, [pc, #364]	; (8016f00 <pifGps_ParsingNmea+0xa98>)
 8016d94:	781b      	ldrb	r3, [r3, #0]
 8016d96:	1c5a      	adds	r2, r3, #1
 8016d98:	b2d1      	uxtb	r1, r2
 8016d9a:	4a59      	ldr	r2, [pc, #356]	; (8016f00 <pifGps_ParsingNmea+0xa98>)
 8016d9c:	7011      	strb	r1, [r2, #0]
 8016d9e:	4619      	mov	r1, r3
 8016da0:	4a53      	ldr	r2, [pc, #332]	; (8016ef0 <pifGps_ParsingNmea+0xa88>)
 8016da2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016da6:	5453      	strb	r3, [r2, r1]
			string[offset++] = 0;
 8016da8:	4b55      	ldr	r3, [pc, #340]	; (8016f00 <pifGps_ParsingNmea+0xa98>)
 8016daa:	781b      	ldrb	r3, [r3, #0]
 8016dac:	1c5a      	adds	r2, r3, #1
 8016dae:	b2d1      	uxtb	r1, r2
 8016db0:	4a53      	ldr	r2, [pc, #332]	; (8016f00 <pifGps_ParsingNmea+0xa98>)
 8016db2:	7011      	strb	r1, [r2, #0]
 8016db4:	461a      	mov	r2, r3
 8016db6:	4b4e      	ldr	r3, [pc, #312]	; (8016ef0 <pifGps_ParsingNmea+0xa88>)
 8016db8:	2100      	movs	r1, #0
 8016dba:	5499      	strb	r1, [r3, r2]
			(p_owner->evt_frame)(string);
 8016dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dbe:	689b      	ldr	r3, [r3, #8]
 8016dc0:	484b      	ldr	r0, [pc, #300]	; (8016ef0 <pifGps_ParsingNmea+0xa88>)
 8016dc2:	4798      	blx	r3
		}
		offset = 0;
 8016dc4:	4b4e      	ldr	r3, [pc, #312]	; (8016f00 <pifGps_ParsingNmea+0xa98>)
 8016dc6:	2200      	movs	r2, #0
 8016dc8:	701a      	strb	r2, [r3, #0]
 8016dca:	e0ba      	b.n	8016f42 <pifGps_ParsingNmea+0xada>
	}
	else if (c == '\r' || c == '\n') {
 8016dcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016dd0:	2b0d      	cmp	r3, #13
 8016dd2:	d004      	beq.n	8016dde <pifGps_ParsingNmea+0x976>
 8016dd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016dd8:	2b0a      	cmp	r3, #10
 8016dda:	f040 8097 	bne.w	8016f0c <pifGps_ParsingNmea+0xaa4>
		if (msg_id && checksum_param) { //parity checksum
 8016dde:	4b49      	ldr	r3, [pc, #292]	; (8016f04 <pifGps_ParsingNmea+0xa9c>)
 8016de0:	781b      	ldrb	r3, [r3, #0]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d058      	beq.n	8016e98 <pifGps_ParsingNmea+0xa30>
 8016de6:	4b44      	ldr	r3, [pc, #272]	; (8016ef8 <pifGps_ParsingNmea+0xa90>)
 8016de8:	781b      	ldrb	r3, [r3, #0]
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d054      	beq.n	8016e98 <pifGps_ParsingNmea+0xa30>
			uint8_t checksum = _convertAscii2Hex(string[0]);
 8016dee:	4b40      	ldr	r3, [pc, #256]	; (8016ef0 <pifGps_ParsingNmea+0xa88>)
 8016df0:	781b      	ldrb	r3, [r3, #0]
 8016df2:	4618      	mov	r0, r3
 8016df4:	f7ff fa62 	bl	80162bc <_convertAscii2Hex>
 8016df8:	4603      	mov	r3, r0
 8016dfa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			checksum <<= 4;
 8016dfe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8016e02:	011b      	lsls	r3, r3, #4
 8016e04:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			checksum += _convertAscii2Hex(string[1]);
 8016e08:	4b39      	ldr	r3, [pc, #228]	; (8016ef0 <pifGps_ParsingNmea+0xa88>)
 8016e0a:	785b      	ldrb	r3, [r3, #1]
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	f7ff fa55 	bl	80162bc <_convertAscii2Hex>
 8016e12:	4603      	mov	r3, r0
 8016e14:	461a      	mov	r2, r3
 8016e16:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8016e1a:	4413      	add	r3, r2
 8016e1c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			if (checksum == parity) {
 8016e20:	4b36      	ldr	r3, [pc, #216]	; (8016efc <pifGps_ParsingNmea+0xa94>)
 8016e22:	781b      	ldrb	r3, [r3, #0]
 8016e24:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8016e28:	429a      	cmp	r2, r3
 8016e2a:	d122      	bne.n	8016e72 <pifGps_ParsingNmea+0xa0a>
				if (p_owner->evt_nmea_receive) {
 8016e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d00c      	beq.n	8016e4e <pifGps_ParsingNmea+0x9e6>
					if ((p_owner->evt_nmea_receive)(p_owner, msg_id)) pifGps_SendEvent(p_owner);
 8016e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	4a32      	ldr	r2, [pc, #200]	; (8016f04 <pifGps_ParsingNmea+0xa9c>)
 8016e3a:	7812      	ldrb	r2, [r2, #0]
 8016e3c:	4611      	mov	r1, r2
 8016e3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016e40:	4798      	blx	r3
 8016e42:	4603      	mov	r3, r0
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d002      	beq.n	8016e4e <pifGps_ParsingNmea+0x9e6>
 8016e48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016e4a:	f7ff fae9 	bl	8016420 <pifGps_SendEvent>
				}
				if (msg_id == PIF_GPS_NMEA_MSG_ID_TXT && p_owner->__evt_text) {
 8016e4e:	4b2d      	ldr	r3, [pc, #180]	; (8016f04 <pifGps_ParsingNmea+0xa9c>)
 8016e50:	781b      	ldrb	r3, [r3, #0]
 8016e52:	2b0c      	cmp	r3, #12
 8016e54:	d11d      	bne.n	8016e92 <pifGps_ParsingNmea+0xa2a>
 8016e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d018      	beq.n	8016e92 <pifGps_ParsingNmea+0xa2a>
					(p_owner->__evt_text)(p_owner->__p_txt);
 8016e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016e66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016e68:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 8016e6c:	4610      	mov	r0, r2
 8016e6e:	4798      	blx	r3
 8016e70:	e00f      	b.n	8016e92 <pifGps_ParsingNmea+0xa2a>
				}
			}
#ifndef __PIF_NO_LOG__
			else {
				pifLog_Printf(LT_ERROR, "GN(%u): MsgId=%u CS=%x:%x", __LINE__, msg_id, checksum, parity);
 8016e72:	4b24      	ldr	r3, [pc, #144]	; (8016f04 <pifGps_ParsingNmea+0xa9c>)
 8016e74:	781b      	ldrb	r3, [r3, #0]
 8016e76:	4619      	mov	r1, r3
 8016e78:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8016e7c:	4a1f      	ldr	r2, [pc, #124]	; (8016efc <pifGps_ParsingNmea+0xa94>)
 8016e7e:	7812      	ldrb	r2, [r2, #0]
 8016e80:	9201      	str	r2, [sp, #4]
 8016e82:	9300      	str	r3, [sp, #0]
 8016e84:	460b      	mov	r3, r1
 8016e86:	f240 12df 	movw	r2, #479	; 0x1df
 8016e8a:	491f      	ldr	r1, [pc, #124]	; (8016f08 <pifGps_ParsingNmea+0xaa0>)
 8016e8c:	2004      	movs	r0, #4
 8016e8e:	f7fc feb3 	bl	8013bf8 <pifLog_Printf>
			}
#endif
			rtn = TRUE;
 8016e92:	2301      	movs	r3, #1
 8016e94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
		checksum_param = 0;
 8016e98:	4b17      	ldr	r3, [pc, #92]	; (8016ef8 <pifGps_ParsingNmea+0xa90>)
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 8016e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ea0:	689b      	ldr	r3, [r3, #8]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d018      	beq.n	8016ed8 <pifGps_ParsingNmea+0xa70>
			string[offset++] = c;
 8016ea6:	4b16      	ldr	r3, [pc, #88]	; (8016f00 <pifGps_ParsingNmea+0xa98>)
 8016ea8:	781b      	ldrb	r3, [r3, #0]
 8016eaa:	1c5a      	adds	r2, r3, #1
 8016eac:	b2d1      	uxtb	r1, r2
 8016eae:	4a14      	ldr	r2, [pc, #80]	; (8016f00 <pifGps_ParsingNmea+0xa98>)
 8016eb0:	7011      	strb	r1, [r2, #0]
 8016eb2:	4619      	mov	r1, r3
 8016eb4:	4a0e      	ldr	r2, [pc, #56]	; (8016ef0 <pifGps_ParsingNmea+0xa88>)
 8016eb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016eba:	5453      	strb	r3, [r2, r1]
			string[offset++] = 0;
 8016ebc:	4b10      	ldr	r3, [pc, #64]	; (8016f00 <pifGps_ParsingNmea+0xa98>)
 8016ebe:	781b      	ldrb	r3, [r3, #0]
 8016ec0:	1c5a      	adds	r2, r3, #1
 8016ec2:	b2d1      	uxtb	r1, r2
 8016ec4:	4a0e      	ldr	r2, [pc, #56]	; (8016f00 <pifGps_ParsingNmea+0xa98>)
 8016ec6:	7011      	strb	r1, [r2, #0]
 8016ec8:	461a      	mov	r2, r3
 8016eca:	4b09      	ldr	r3, [pc, #36]	; (8016ef0 <pifGps_ParsingNmea+0xa88>)
 8016ecc:	2100      	movs	r1, #0
 8016ece:	5499      	strb	r1, [r3, r2]
			(p_owner->evt_frame)(string);
 8016ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ed2:	689b      	ldr	r3, [r3, #8]
 8016ed4:	4806      	ldr	r0, [pc, #24]	; (8016ef0 <pifGps_ParsingNmea+0xa88>)
 8016ed6:	4798      	blx	r3
		}
		offset = 0;
 8016ed8:	4b09      	ldr	r3, [pc, #36]	; (8016f00 <pifGps_ParsingNmea+0xa98>)
 8016eda:	2200      	movs	r2, #0
 8016edc:	701a      	strb	r2, [r3, #0]
		return rtn;
 8016ede:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016ee2:	e02f      	b.n	8016f44 <pifGps_ParsingNmea+0xadc>
 8016ee4:	f3af 8000 	nop.w
 8016ee8:	00000000 	.word	0x00000000
 8016eec:	40e91e80 	.word	0x40e91e80
 8016ef0:	20001f70 	.word	0x20001f70
 8016ef4:	20001f6c 	.word	0x20001f6c
 8016ef8:	20001f91 	.word	0x20001f91
 8016efc:	20001f6e 	.word	0x20001f6e
 8016f00:	20001f6d 	.word	0x20001f6d
 8016f04:	20001f90 	.word	0x20001f90
 8016f08:	08028a84 	.word	0x08028a84
	}
	else {
		if (offset < PIF_GPS_NMEA_VALUE_SIZE) string[offset++] = c;
 8016f0c:	4b10      	ldr	r3, [pc, #64]	; (8016f50 <pifGps_ParsingNmea+0xae8>)
 8016f0e:	781b      	ldrb	r3, [r3, #0]
 8016f10:	2b1f      	cmp	r3, #31
 8016f12:	d80a      	bhi.n	8016f2a <pifGps_ParsingNmea+0xac2>
 8016f14:	4b0e      	ldr	r3, [pc, #56]	; (8016f50 <pifGps_ParsingNmea+0xae8>)
 8016f16:	781b      	ldrb	r3, [r3, #0]
 8016f18:	1c5a      	adds	r2, r3, #1
 8016f1a:	b2d1      	uxtb	r1, r2
 8016f1c:	4a0c      	ldr	r2, [pc, #48]	; (8016f50 <pifGps_ParsingNmea+0xae8>)
 8016f1e:	7011      	strb	r1, [r2, #0]
 8016f20:	4619      	mov	r1, r3
 8016f22:	4a0c      	ldr	r2, [pc, #48]	; (8016f54 <pifGps_ParsingNmea+0xaec>)
 8016f24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016f28:	5453      	strb	r3, [r2, r1]
		if (!checksum_param) parity ^= c;
 8016f2a:	4b0b      	ldr	r3, [pc, #44]	; (8016f58 <pifGps_ParsingNmea+0xaf0>)
 8016f2c:	781b      	ldrb	r3, [r3, #0]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d107      	bne.n	8016f42 <pifGps_ParsingNmea+0xada>
 8016f32:	4b0a      	ldr	r3, [pc, #40]	; (8016f5c <pifGps_ParsingNmea+0xaf4>)
 8016f34:	781a      	ldrb	r2, [r3, #0]
 8016f36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016f3a:	4053      	eors	r3, r2
 8016f3c:	b2da      	uxtb	r2, r3
 8016f3e:	4b07      	ldr	r3, [pc, #28]	; (8016f5c <pifGps_ParsingNmea+0xaf4>)
 8016f40:	701a      	strb	r2, [r3, #0]
	}
	return FALSE;
 8016f42:	2300      	movs	r3, #0
}
 8016f44:	4618      	mov	r0, r3
 8016f46:	3738      	adds	r7, #56	; 0x38
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016f4e:	bf00      	nop
 8016f50:	20001f6d 	.word	0x20001f6d
 8016f54:	20001f70 	.word	0x20001f70
 8016f58:	20001f91 	.word	0x20001f91
 8016f5c:	20001f6e 	.word	0x20001f6e

08016f60 <_checksumUbx>:

#endif


static uint16_t _checksumUbx(uint8_t* p_header, uint8_t* p_payload, uint16_t len)
{
 8016f60:	b480      	push	{r7}
 8016f62:	b087      	sub	sp, #28
 8016f64:	af00      	add	r7, sp, #0
 8016f66:	60f8      	str	r0, [r7, #12]
 8016f68:	60b9      	str	r1, [r7, #8]
 8016f6a:	4613      	mov	r3, r2
 8016f6c:	80fb      	strh	r3, [r7, #6]
	uint8_t ck_a = 0, ck_b = 0;
 8016f6e:	2300      	movs	r3, #0
 8016f70:	75fb      	strb	r3, [r7, #23]
 8016f72:	2300      	movs	r3, #0
 8016f74:	75bb      	strb	r3, [r7, #22]
	uint16_t i;

	for (i = 0; i < 4; i++) {
 8016f76:	2300      	movs	r3, #0
 8016f78:	82bb      	strh	r3, [r7, #20]
 8016f7a:	e00d      	b.n	8016f98 <_checksumUbx+0x38>
		ck_a += p_header[i];
 8016f7c:	8abb      	ldrh	r3, [r7, #20]
 8016f7e:	68fa      	ldr	r2, [r7, #12]
 8016f80:	4413      	add	r3, r2
 8016f82:	781a      	ldrb	r2, [r3, #0]
 8016f84:	7dfb      	ldrb	r3, [r7, #23]
 8016f86:	4413      	add	r3, r2
 8016f88:	75fb      	strb	r3, [r7, #23]
		ck_b += ck_a;
 8016f8a:	7dba      	ldrb	r2, [r7, #22]
 8016f8c:	7dfb      	ldrb	r3, [r7, #23]
 8016f8e:	4413      	add	r3, r2
 8016f90:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < 4; i++) {
 8016f92:	8abb      	ldrh	r3, [r7, #20]
 8016f94:	3301      	adds	r3, #1
 8016f96:	82bb      	strh	r3, [r7, #20]
 8016f98:	8abb      	ldrh	r3, [r7, #20]
 8016f9a:	2b03      	cmp	r3, #3
 8016f9c:	d9ee      	bls.n	8016f7c <_checksumUbx+0x1c>
	}
	for (i = 0; i < len; i++) {
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	82bb      	strh	r3, [r7, #20]
 8016fa2:	e00d      	b.n	8016fc0 <_checksumUbx+0x60>
		ck_a += p_payload[i];
 8016fa4:	8abb      	ldrh	r3, [r7, #20]
 8016fa6:	68ba      	ldr	r2, [r7, #8]
 8016fa8:	4413      	add	r3, r2
 8016faa:	781a      	ldrb	r2, [r3, #0]
 8016fac:	7dfb      	ldrb	r3, [r7, #23]
 8016fae:	4413      	add	r3, r2
 8016fb0:	75fb      	strb	r3, [r7, #23]
		ck_b += ck_a;
 8016fb2:	7dba      	ldrb	r2, [r7, #22]
 8016fb4:	7dfb      	ldrb	r3, [r7, #23]
 8016fb6:	4413      	add	r3, r2
 8016fb8:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < len; i++) {
 8016fba:	8abb      	ldrh	r3, [r7, #20]
 8016fbc:	3301      	adds	r3, #1
 8016fbe:	82bb      	strh	r3, [r7, #20]
 8016fc0:	8aba      	ldrh	r2, [r7, #20]
 8016fc2:	88fb      	ldrh	r3, [r7, #6]
 8016fc4:	429a      	cmp	r2, r3
 8016fc6:	d3ed      	bcc.n	8016fa4 <_checksumUbx+0x44>
	}
	return ck_a + (ck_b << 8);
 8016fc8:	7dfb      	ldrb	r3, [r7, #23]
 8016fca:	b29a      	uxth	r2, r3
 8016fcc:	7dbb      	ldrb	r3, [r7, #22]
 8016fce:	b29b      	uxth	r3, r3
 8016fd0:	021b      	lsls	r3, r3, #8
 8016fd2:	b29b      	uxth	r3, r3
 8016fd4:	4413      	add	r3, r2
 8016fd6:	b29b      	uxth	r3, r3
}
 8016fd8:	4618      	mov	r0, r3
 8016fda:	371c      	adds	r7, #28
 8016fdc:	46bd      	mov	sp, r7
 8016fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe2:	4770      	bx	lr

08016fe4 <_parsingPacket>:

static void _parsingPacket(PifGpsUblox *p_owner, PifActCommReceiveData act_receive_data)
{
 8016fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fe6:	b08d      	sub	sp, #52	; 0x34
 8016fe8:	af06      	add	r7, sp, #24
 8016fea:	6078      	str	r0, [r7, #4]
 8016fec:	6039      	str	r1, [r7, #0]
	PifGpsUbxPacket* p_packet = &p_owner->__rx.packet;
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8016ff4:	60fb      	str	r3, [r7, #12]
	uint8_t pkt_err;
	int line;
	static uint8_t pre_err = PKT_ERR_NONE;
#endif

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8016ff6:	e0db      	b.n	80171b0 <_parsingPacket+0x1cc>
		switch (p_owner->__rx.state) {
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8016ffe:	2b09      	cmp	r3, #9
 8017000:	f200 80d5 	bhi.w	80171ae <_parsingPacket+0x1ca>
 8017004:	a201      	add	r2, pc, #4	; (adr r2, 801700c <_parsingPacket+0x28>)
 8017006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801700a:	bf00      	nop
 801700c:	08017035 	.word	0x08017035
 8017010:	08017071 	.word	0x08017071
 8017014:	0801708b 	.word	0x0801708b
 8017018:	0801709b 	.word	0x0801709b
 801701c:	080170ab 	.word	0x080170ab
 8017020:	080170bd 	.word	0x080170bd
 8017024:	080170f9 	.word	0x080170f9
 8017028:	08017133 	.word	0x08017133
 801702c:	08017147 	.word	0x08017147
 8017030:	08017191 	.word	0x08017191
		case GURS_SYNC_CHAR_1:
			if (data == 0xB5) {
 8017034:	7afb      	ldrb	r3, [r7, #11]
 8017036:	2bb5      	cmp	r3, #181	; 0xb5
 8017038:	d107      	bne.n	801704a <_parsingPacket+0x66>
				p_owner->__rx.state = GURS_SYNC_CHAR_2;
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	2201      	movs	r2, #1
 801703e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
#ifndef __PIF_NO_LOG__
				pre_err = PKT_ERR_NONE;
 8017042:	4b85      	ldr	r3, [pc, #532]	; (8017258 <_parsingPacket+0x274>)
 8017044:	2204      	movs	r2, #4
 8017046:	701a      	strb	r2, [r3, #0]
 8017048:	e0b2      	b.n	80171b0 <_parsingPacket+0x1cc>
#endif
			}
			else if (pifGps_ParsingNmea(&p_owner->_gps, data)) {
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	3308      	adds	r3, #8
 801704e:	7afa      	ldrb	r2, [r7, #11]
 8017050:	4611      	mov	r1, r2
 8017052:	4618      	mov	r0, r3
 8017054:	f7ff fa08 	bl	8016468 <pifGps_ParsingNmea>
 8017058:	4603      	mov	r3, r0
 801705a:	2b00      	cmp	r3, #0
 801705c:	f000 80a8 	beq.w	80171b0 <_parsingPacket+0x1cc>
				p_owner->__rx.state = GURS_NMEA;
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	2209      	movs	r2, #9
 8017064:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
#ifndef __PIF_NO_LOG__
				pre_err = PKT_ERR_NONE;
 8017068:	4b7b      	ldr	r3, [pc, #492]	; (8017258 <_parsingPacket+0x274>)
 801706a:	2204      	movs	r2, #4
 801706c:	701a      	strb	r2, [r3, #0]
#endif
			}
			break;
 801706e:	e09f      	b.n	80171b0 <_parsingPacket+0x1cc>

		case GURS_SYNC_CHAR_2:
			if (data == 0x62) {
 8017070:	7afb      	ldrb	r3, [r7, #11]
 8017072:	2b62      	cmp	r3, #98	; 0x62
 8017074:	d104      	bne.n	8017080 <_parsingPacket+0x9c>
				p_owner->__rx.state = GURS_CLASS;
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	2202      	movs	r2, #2
 801707a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
				pkt_err = PKT_ERR_INVALID_DATA;
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 801707e:	e097      	b.n	80171b0 <_parsingPacket+0x1cc>
				pkt_err = PKT_ERR_INVALID_DATA;
 8017080:	2301      	movs	r3, #1
 8017082:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 8017084:	2361      	movs	r3, #97	; 0x61
 8017086:	613b      	str	r3, [r7, #16]
				goto fail;
 8017088:	e09f      	b.n	80171ca <_parsingPacket+0x1e6>

		case GURS_CLASS:
			p_packet->class_id = data;
 801708a:	7afa      	ldrb	r2, [r7, #11]
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.state = GURS_ID;
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	2203      	movs	r2, #3
 8017094:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
			break;
 8017098:	e08a      	b.n	80171b0 <_parsingPacket+0x1cc>

		case GURS_ID:
			p_packet->msg_id = data;
 801709a:	7afa      	ldrb	r2, [r7, #11]
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	705a      	strb	r2, [r3, #1]
			p_owner->__rx.state = GURS_LENGTH_LOW;
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	2204      	movs	r2, #4
 80170a4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
			break;
 80170a8:	e082      	b.n	80171b0 <_parsingPacket+0x1cc>

		case GURS_LENGTH_LOW:
			p_packet->length = data;
 80170aa:	7afb      	ldrb	r3, [r7, #11]
 80170ac:	b29a      	uxth	r2, r3
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	805a      	strh	r2, [r3, #2]
			p_owner->__rx.state = GURS_LENGTH_HIGH;
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	2205      	movs	r2, #5
 80170b6:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
			break;
 80170ba:	e079      	b.n	80171b0 <_parsingPacket+0x1cc>

		case GURS_LENGTH_HIGH:
			p_packet->length |= data << 8;
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	885b      	ldrh	r3, [r3, #2]
 80170c0:	b21a      	sxth	r2, r3
 80170c2:	7afb      	ldrb	r3, [r7, #11]
 80170c4:	021b      	lsls	r3, r3, #8
 80170c6:	b21b      	sxth	r3, r3
 80170c8:	4313      	orrs	r3, r2
 80170ca:	b21b      	sxth	r3, r3
 80170cc:	b29a      	uxth	r2, r3
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	805a      	strh	r2, [r3, #2]
			if (p_packet->length < sizeof(PifGpsUbxPacket) - 4) {
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	885b      	ldrh	r3, [r3, #2]
 80170d6:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 80170da:	d208      	bcs.n	80170ee <_parsingPacket+0x10a>
				p_owner->__rx.payload_count = 0;
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	2200      	movs	r2, #0
 80170e0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
				p_owner->__rx.state = GURS_PAYLOAD;
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	2206      	movs	r2, #6
 80170e8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
				pkt_err = PKT_ERR_BIG_LENGHT;
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 80170ec:	e060      	b.n	80171b0 <_parsingPacket+0x1cc>
				pkt_err = PKT_ERR_BIG_LENGHT;
 80170ee:	2300      	movs	r3, #0
 80170f0:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 80170f2:	237f      	movs	r3, #127	; 0x7f
 80170f4:	613b      	str	r3, [r7, #16]
				goto fail;
 80170f6:	e068      	b.n	80171ca <_parsingPacket+0x1e6>

		case GURS_PAYLOAD:
			p_packet->payload.bytes[p_owner->__rx.payload_count] = data;
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 80170fe:	4619      	mov	r1, r3
 8017100:	7afa      	ldrb	r2, [r7, #11]
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	440b      	add	r3, r1
 8017106:	711a      	strb	r2, [r3, #4]
			p_owner->__rx.payload_count++;
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 801710e:	3301      	adds	r3, #1
 8017110:	b2da      	uxtb	r2, r3
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
			if (p_owner->__rx.payload_count >= p_packet->length) {
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 801711e:	b29a      	uxth	r2, r3
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	885b      	ldrh	r3, [r3, #2]
 8017124:	429a      	cmp	r2, r3
 8017126:	d343      	bcc.n	80171b0 <_parsingPacket+0x1cc>
				p_owner->__rx.state = GURS_CK_A;
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	2207      	movs	r2, #7
 801712c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
			}
			break;
 8017130:	e03e      	b.n	80171b0 <_parsingPacket+0x1cc>

		case GURS_CK_A:
			p_owner->__rx.checksum = data;
 8017132:	7afb      	ldrb	r3, [r7, #11]
 8017134:	b29a      	uxth	r2, r3
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	f8a3 2298 	strh.w	r2, [r3, #664]	; 0x298
			p_owner->__rx.state = GURS_CK_B;
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	2208      	movs	r2, #8
 8017140:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
			break;
 8017144:	e034      	b.n	80171b0 <_parsingPacket+0x1cc>

		case GURS_CK_B:
			p_owner->__rx.checksum |= data << 8;
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	f8b3 3298 	ldrh.w	r3, [r3, #664]	; 0x298
 801714c:	b21a      	sxth	r2, r3
 801714e:	7afb      	ldrb	r3, [r7, #11]
 8017150:	021b      	lsls	r3, r3, #8
 8017152:	b21b      	sxth	r3, r3
 8017154:	4313      	orrs	r3, r2
 8017156:	b21b      	sxth	r3, r3
 8017158:	b29a      	uxth	r2, r3
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	f8a3 2298 	strh.w	r2, [r3, #664]	; 0x298
			if (p_owner->__rx.checksum == _checksumUbx((uint8_t*)p_packet, p_packet->payload.bytes, p_packet->length)) {
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	f8b3 4298 	ldrh.w	r4, [r3, #664]	; 0x298
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	1d19      	adds	r1, r3, #4
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	885b      	ldrh	r3, [r3, #2]
 801716e:	461a      	mov	r2, r3
 8017170:	68f8      	ldr	r0, [r7, #12]
 8017172:	f7ff fef5 	bl	8016f60 <_checksumUbx>
 8017176:	4603      	mov	r3, r0
 8017178:	429c      	cmp	r4, r3
 801717a:	d104      	bne.n	8017186 <_parsingPacket+0x1a2>
				p_owner->__rx.state = GURS_DONE;
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	220a      	movs	r2, #10
 8017180:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
				return;
 8017184:	e064      	b.n	8017250 <_parsingPacket+0x26c>
			}
			else {
#ifndef __PIF_NO_LOG__
				pkt_err = PKT_ERR_WRONG_CRC;
 8017186:	2302      	movs	r3, #2
 8017188:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 801718a:	239b      	movs	r3, #155	; 0x9b
 801718c:	613b      	str	r3, [r7, #16]
#endif
				goto fail;
 801718e:	e01c      	b.n	80171ca <_parsingPacket+0x1e6>
			}
			break;

		case GURS_NMEA:
			if (pifGps_ParsingNmea(&p_owner->_gps, data))	{
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	3308      	adds	r3, #8
 8017194:	7afa      	ldrb	r2, [r7, #11]
 8017196:	4611      	mov	r1, r2
 8017198:	4618      	mov	r0, r3
 801719a:	f7ff f965 	bl	8016468 <pifGps_ParsingNmea>
 801719e:	4603      	mov	r3, r0
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d005      	beq.n	80171b0 <_parsingPacket+0x1cc>
				p_owner->__rx.state = GURS_SYNC_CHAR_1;
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	2200      	movs	r2, #0
 80171a8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
				return;
 80171ac:	e050      	b.n	8017250 <_parsingPacket+0x26c>
			}
			break;

		default:
			break;
 80171ae:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80171b6:	f107 010b 	add.w	r1, r7, #11
 80171ba:	683b      	ldr	r3, [r7, #0]
 80171bc:	4610      	mov	r0, r2
 80171be:	4798      	blx	r3
 80171c0:	4603      	mov	r3, r0
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	f47f af18 	bne.w	8016ff8 <_parsingPacket+0x14>
		}
	}
	return;
 80171c8:	e042      	b.n	8017250 <_parsingPacket+0x26c>

fail:
#ifndef __PIF_NO_LOG__
	if (pkt_err != pre_err) {
 80171ca:	4b23      	ldr	r3, [pc, #140]	; (8017258 <_parsingPacket+0x274>)
 80171cc:	781b      	ldrb	r3, [r3, #0]
 80171ce:	7dfa      	ldrb	r2, [r7, #23]
 80171d0:	429a      	cmp	r2, r3
 80171d2:	d039      	beq.n	8017248 <_parsingPacket+0x264>
		if (p_owner->__rx.state) {
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d021      	beq.n	8017222 <_parsingPacket+0x23e>
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	8a9b      	ldrh	r3, [r3, #20]
 80171e2:	461e      	mov	r6, r3
 80171e4:	7dfb      	ldrb	r3, [r7, #23]
 80171e6:	4a1d      	ldr	r2, [pc, #116]	; (801725c <_parsingPacket+0x278>)
 80171e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80171ec:	7afa      	ldrb	r2, [r7, #11]
 80171ee:	4611      	mov	r1, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 80171f0:	687a      	ldr	r2, [r7, #4]
 80171f2:	f892 2108 	ldrb.w	r2, [r2, #264]	; 0x108
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 80171f6:	4610      	mov	r0, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 80171f8:	68fa      	ldr	r2, [r7, #12]
 80171fa:	7812      	ldrb	r2, [r2, #0]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 80171fc:	4614      	mov	r4, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 80171fe:	68fa      	ldr	r2, [r7, #12]
 8017200:	7852      	ldrb	r2, [r2, #1]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8017202:	4615      	mov	r5, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 8017204:	68fa      	ldr	r2, [r7, #12]
 8017206:	8852      	ldrh	r2, [r2, #2]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8017208:	9205      	str	r2, [sp, #20]
 801720a:	9504      	str	r5, [sp, #16]
 801720c:	9403      	str	r4, [sp, #12]
 801720e:	9002      	str	r0, [sp, #8]
 8017210:	9101      	str	r1, [sp, #4]
 8017212:	9300      	str	r3, [sp, #0]
 8017214:	4633      	mov	r3, r6
 8017216:	693a      	ldr	r2, [r7, #16]
 8017218:	4911      	ldr	r1, [pc, #68]	; (8017260 <_parsingPacket+0x27c>)
 801721a:	2004      	movs	r0, #4
 801721c:	f7fc fcec 	bl	8013bf8 <pifLog_Printf>
 8017220:	e00f      	b.n	8017242 <_parsingPacket+0x25e>
		}
		else {
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh", line, p_owner->_gps._id, kPktErr[pkt_err], data);
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	8a9b      	ldrh	r3, [r3, #20]
 8017226:	4619      	mov	r1, r3
 8017228:	7dfb      	ldrb	r3, [r7, #23]
 801722a:	4a0c      	ldr	r2, [pc, #48]	; (801725c <_parsingPacket+0x278>)
 801722c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017230:	7afa      	ldrb	r2, [r7, #11]
 8017232:	9201      	str	r2, [sp, #4]
 8017234:	9300      	str	r3, [sp, #0]
 8017236:	460b      	mov	r3, r1
 8017238:	693a      	ldr	r2, [r7, #16]
 801723a:	490a      	ldr	r1, [pc, #40]	; (8017264 <_parsingPacket+0x280>)
 801723c:	2004      	movs	r0, #4
 801723e:	f7fc fcdb 	bl	8013bf8 <pifLog_Printf>
		}
		pre_err = pkt_err;
 8017242:	4a05      	ldr	r2, [pc, #20]	; (8017258 <_parsingPacket+0x274>)
 8017244:	7dfb      	ldrb	r3, [r7, #23]
 8017246:	7013      	strb	r3, [r2, #0]
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x %x %x %x", p_packet->payload.bytes[0], p_packet->payload.bytes[1],	p_packet->payload.bytes[2],
			p_packet->payload.bytes[3], p_packet->payload.bytes[4], p_packet->payload.bytes[5], p_packet->payload.bytes[6], p_packet->payload.bytes[7]);
#endif
#endif

	p_owner->__rx.state = GURS_SYNC_CHAR_1;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	2200      	movs	r2, #0
 801724c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
}
 8017250:	371c      	adds	r7, #28
 8017252:	46bd      	mov	sp, r7
 8017254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017256:	bf00      	nop
 8017258:	20000148 	.word	0x20000148
 801725c:	20000138 	.word	0x20000138
 8017260:	08028ad4 	.word	0x08028ad4
 8017264:	08028b04 	.word	0x08028b04

08017268 <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 8017268:	b580      	push	{r7, lr}
 801726a:	b08a      	sub	sp, #40	; 0x28
 801726c:	af04      	add	r7, sp, #16
 801726e:	6078      	str	r0, [r7, #4]
 8017270:	6039      	str	r1, [r7, #0]
	PifGpsUblox *p_owner = (PifGpsUblox *)p_client;
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	613b      	str	r3, [r7, #16]
	PifGpsUbxPacket* p_packet = &p_owner->__rx.packet;
 8017276:	693b      	ldr	r3, [r7, #16]
 8017278:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801727c:	60fb      	str	r3, [r7, #12]
	PifGps *p_parent = &p_owner->_gps;
 801727e:	693b      	ldr	r3, [r7, #16]
 8017280:	3308      	adds	r3, #8
 8017282:	60bb      	str	r3, [r7, #8]
    int i;
    static BOOL next_fix = FALSE;

    if (!p_owner->_gps.evt_receive) return;
 8017284:	693b      	ldr	r3, [r7, #16]
 8017286:	68db      	ldr	r3, [r3, #12]
 8017288:	2b00      	cmp	r3, #0
 801728a:	f000 8241 	beq.w	8017710 <_evtParsing+0x4a8>

    if (p_owner->__rx.state < GURS_DONE) {
 801728e:	693b      	ldr	r3, [r7, #16]
 8017290:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8017294:	2b09      	cmp	r3, #9
 8017296:	d803      	bhi.n	80172a0 <_evtParsing+0x38>
    	_parsingPacket(p_owner, act_receive_data);
 8017298:	6839      	ldr	r1, [r7, #0]
 801729a:	6938      	ldr	r0, [r7, #16]
 801729c:	f7ff fea2 	bl	8016fe4 <_parsingPacket>
    }

    if (p_owner->__rx.state == GURS_DONE) {
 80172a0:	693b      	ldr	r3, [r7, #16]
 80172a2:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80172a6:	2b0a      	cmp	r3, #10
 80172a8:	f040 8233 	bne.w	8017712 <_evtParsing+0x4aa>
    	pifLog_Printf(LT_NONE, "\n%u> %x %x %x %x %x %x %x %x", p_owner->_gps._id, p_packet->class_id, p_packet->msg_id, p_packet->length,
    			p_packet->payload.bytes[0], p_packet->payload.bytes[1], p_packet->payload.bytes[2], p_packet->payload.bytes[3], p_packet->payload.bytes[4]);
#endif
#endif

        switch (p_packet->class_id) {
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	781b      	ldrb	r3, [r3, #0]
 80172b0:	2b01      	cmp	r3, #1
 80172b2:	d01c      	beq.n	80172ee <_evtParsing+0x86>
 80172b4:	2b05      	cmp	r3, #5
 80172b6:	f040 8204 	bne.w	80176c2 <_evtParsing+0x45a>
        case GUCI_ACK:
        	switch (p_packet->msg_id) {
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	785b      	ldrb	r3, [r3, #1]
 80172be:	2b01      	cmp	r3, #1
 80172c0:	d913      	bls.n	80172ea <_evtParsing+0x82>
        	case GUMI_ACK_NAK:
        		break;

            default:
#ifndef __PIF_NO_LOG__
        		pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x MID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id, p_packet->msg_id);
 80172c2:	693b      	ldr	r3, [r7, #16]
 80172c4:	8a9b      	ldrh	r3, [r3, #20]
 80172c6:	4618      	mov	r0, r3
 80172c8:	4b9f      	ldr	r3, [pc, #636]	; (8017548 <_evtParsing+0x2e0>)
 80172ca:	68db      	ldr	r3, [r3, #12]
 80172cc:	68fa      	ldr	r2, [r7, #12]
 80172ce:	7812      	ldrb	r2, [r2, #0]
 80172d0:	4611      	mov	r1, r2
 80172d2:	68fa      	ldr	r2, [r7, #12]
 80172d4:	7852      	ldrb	r2, [r2, #1]
 80172d6:	9202      	str	r2, [sp, #8]
 80172d8:	9101      	str	r1, [sp, #4]
 80172da:	9300      	str	r3, [sp, #0]
 80172dc:	4603      	mov	r3, r0
 80172de:	22e2      	movs	r2, #226	; 0xe2
 80172e0:	499a      	ldr	r1, [pc, #616]	; (801754c <_evtParsing+0x2e4>)
 80172e2:	2004      	movs	r0, #4
 80172e4:	f7fc fc88 	bl	8013bf8 <pifLog_Printf>
#endif
                break;
 80172e8:	e000      	b.n	80172ec <_evtParsing+0x84>
        		break;
 80172ea:	bf00      	nop
        	}
        	break;
 80172ec:	e1fa      	b.n	80176e4 <_evtParsing+0x47c>

        case GUCI_NAV:
            switch (p_packet->msg_id) {
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	785b      	ldrb	r3, [r3, #1]
 80172f2:	3b02      	subs	r3, #2
 80172f4:	2b2e      	cmp	r3, #46	; 0x2e
 80172f6:	f200 81cb 	bhi.w	8017690 <_evtParsing+0x428>
 80172fa:	a201      	add	r2, pc, #4	; (adr r2, 8017300 <_evtParsing+0x98>)
 80172fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017300:	080173bd 	.word	0x080173bd
 8017304:	080174e1 	.word	0x080174e1
 8017308:	08017691 	.word	0x08017691
 801730c:	08017691 	.word	0x08017691
 8017310:	0801749d 	.word	0x0801749d
 8017314:	08017451 	.word	0x08017451
 8017318:	08017691 	.word	0x08017691
 801731c:	08017691 	.word	0x08017691
 8017320:	08017691 	.word	0x08017691
 8017324:	08017691 	.word	0x08017691
 8017328:	08017691 	.word	0x08017691
 801732c:	08017691 	.word	0x08017691
 8017330:	08017691 	.word	0x08017691
 8017334:	08017691 	.word	0x08017691
 8017338:	08017691 	.word	0x08017691
 801733c:	08017691 	.word	0x08017691
 8017340:	0801765d 	.word	0x0801765d
 8017344:	08017691 	.word	0x08017691
 8017348:	08017691 	.word	0x08017691
 801734c:	08017691 	.word	0x08017691
 8017350:	08017691 	.word	0x08017691
 8017354:	08017691 	.word	0x08017691
 8017358:	08017691 	.word	0x08017691
 801735c:	08017691 	.word	0x08017691
 8017360:	08017691 	.word	0x08017691
 8017364:	08017691 	.word	0x08017691
 8017368:	08017691 	.word	0x08017691
 801736c:	08017691 	.word	0x08017691
 8017370:	08017691 	.word	0x08017691
 8017374:	08017691 	.word	0x08017691
 8017378:	08017691 	.word	0x08017691
 801737c:	08017605 	.word	0x08017605
 8017380:	08017691 	.word	0x08017691
 8017384:	08017691 	.word	0x08017691
 8017388:	08017691 	.word	0x08017691
 801738c:	08017691 	.word	0x08017691
 8017390:	08017691 	.word	0x08017691
 8017394:	08017691 	.word	0x08017691
 8017398:	08017691 	.word	0x08017691
 801739c:	08017691 	.word	0x08017691
 80173a0:	08017691 	.word	0x08017691
 80173a4:	08017691 	.word	0x08017691
 80173a8:	08017691 	.word	0x08017691
 80173ac:	08017691 	.word	0x08017691
 80173b0:	08017691 	.word	0x08017691
 80173b4:	08017691 	.word	0x08017691
 80173b8:	0801751b 	.word	0x0801751b
                case GUMI_NAV_POSLLH:
                	p_parent->_coord_deg[PIF_GPS_LON] = p_packet->payload.posllh.lon / 10000000.0;
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	689b      	ldr	r3, [r3, #8]
 80173c0:	4618      	mov	r0, r3
 80173c2:	f7e9 f863 	bl	800048c <__aeabi_i2d>
 80173c6:	a35e      	add	r3, pc, #376	; (adr r3, 8017540 <_evtParsing+0x2d8>)
 80173c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173cc:	f7e9 f9f2 	bl	80007b4 <__aeabi_ddiv>
 80173d0:	4602      	mov	r2, r0
 80173d2:	460b      	mov	r3, r1
 80173d4:	68b9      	ldr	r1, [r7, #8]
 80173d6:	e9c1 2308 	strd	r2, r3, [r1, #32]
                	p_parent->_coord_deg[PIF_GPS_LAT] = p_packet->payload.posllh.lat / 10000000.0;
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	68db      	ldr	r3, [r3, #12]
 80173de:	4618      	mov	r0, r3
 80173e0:	f7e9 f854 	bl	800048c <__aeabi_i2d>
 80173e4:	a356      	add	r3, pc, #344	; (adr r3, 8017540 <_evtParsing+0x2d8>)
 80173e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173ea:	f7e9 f9e3 	bl	80007b4 <__aeabi_ddiv>
 80173ee:	4602      	mov	r2, r0
 80173f0:	460b      	mov	r3, r1
 80173f2:	68b9      	ldr	r1, [r7, #8]
 80173f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
                	p_parent->_altitude = p_packet->payload.posllh.h_msl / 1000.0;
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	695b      	ldr	r3, [r3, #20]
 80173fc:	4618      	mov	r0, r3
 80173fe:	f7e9 f845 	bl	800048c <__aeabi_i2d>
 8017402:	f04f 0200 	mov.w	r2, #0
 8017406:	4b52      	ldr	r3, [pc, #328]	; (8017550 <_evtParsing+0x2e8>)
 8017408:	f7e9 f9d4 	bl	80007b4 <__aeabi_ddiv>
 801740c:	4602      	mov	r2, r0
 801740e:	460b      	mov	r3, r1
 8017410:	68b9      	ldr	r1, [r7, #8]
 8017412:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
                	p_parent->_horizontal_acc = p_packet->payload.posllh.h_acc;
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	699a      	ldr	r2, [r3, #24]
 801741a:	68bb      	ldr	r3, [r7, #8]
 801741c:	641a      	str	r2, [r3, #64]	; 0x40
                	p_parent->_vertical_acc = p_packet->payload.posllh.v_acc;
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	69da      	ldr	r2, [r3, #28]
 8017422:	68bb      	ldr	r3, [r7, #8]
 8017424:	645a      	str	r2, [r3, #68]	; 0x44
                    p_parent->_fix = next_fix;
 8017426:	4b4b      	ldr	r3, [pc, #300]	; (8017554 <_evtParsing+0x2ec>)
 8017428:	781b      	ldrb	r3, [r3, #0]
 801742a:	f003 0301 	and.w	r3, r3, #1
 801742e:	b2d9      	uxtb	r1, r3
 8017430:	68ba      	ldr	r2, [r7, #8]
 8017432:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8017436:	f361 0300 	bfi	r3, r1, #0, #1
 801743a:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    // Update GPS update rate table.
                    p_parent->_update_rate[0] = p_parent->_update_rate[1];
 801743e:	68bb      	ldr	r3, [r7, #8]
 8017440:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017442:	68bb      	ldr	r3, [r7, #8]
 8017444:	649a      	str	r2, [r3, #72]	; 0x48
                    p_parent->_update_rate[1] = pif_cumulative_timer1ms;
 8017446:	4b44      	ldr	r3, [pc, #272]	; (8017558 <_evtParsing+0x2f0>)
 8017448:	681a      	ldr	r2, [r3, #0]
 801744a:	68bb      	ldr	r3, [r7, #8]
 801744c:	64da      	str	r2, [r3, #76]	; 0x4c
                    break;
 801744e:	e137      	b.n	80176c0 <_evtParsing+0x458>

                case GUMI_NAV_PVT:
                	p_parent->_utc.year = 20 + p_packet->payload.pvt.year - 2000;
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	891b      	ldrh	r3, [r3, #8]
 8017454:	b2db      	uxtb	r3, r3
 8017456:	3344      	adds	r3, #68	; 0x44
 8017458:	b2da      	uxtb	r2, r3
 801745a:	68bb      	ldr	r3, [r7, #8]
 801745c:	739a      	strb	r2, [r3, #14]
                	p_parent->_utc.month = p_packet->payload.pvt.month;
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	7a9a      	ldrb	r2, [r3, #10]
 8017462:	68bb      	ldr	r3, [r7, #8]
 8017464:	73da      	strb	r2, [r3, #15]
                	p_parent->_utc.day = p_packet->payload.pvt.day;
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	7ada      	ldrb	r2, [r3, #11]
 801746a:	68bb      	ldr	r3, [r7, #8]
 801746c:	741a      	strb	r2, [r3, #16]
                	p_parent->_utc.hour = p_packet->payload.pvt.hour;
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	7b1a      	ldrb	r2, [r3, #12]
 8017472:	68bb      	ldr	r3, [r7, #8]
 8017474:	745a      	strb	r2, [r3, #17]
                	p_parent->_utc.minute = p_packet->payload.pvt.min;
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	7b5a      	ldrb	r2, [r3, #13]
 801747a:	68bb      	ldr	r3, [r7, #8]
 801747c:	749a      	strb	r2, [r3, #18]
                	p_parent->_utc.second = p_packet->payload.pvt.sec;
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	7b9a      	ldrb	r2, [r3, #14]
 8017482:	68bb      	ldr	r3, [r7, #8]
 8017484:	74da      	strb	r2, [r3, #19]
                	p_parent->_utc.millisecond = p_packet->payload.pvt.nano / 1000000UL;
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	695b      	ldr	r3, [r3, #20]
 801748a:	461a      	mov	r2, r3
 801748c:	4b33      	ldr	r3, [pc, #204]	; (801755c <_evtParsing+0x2f4>)
 801748e:	fba3 2302 	umull	r2, r3, r3, r2
 8017492:	0c9b      	lsrs	r3, r3, #18
 8017494:	b29a      	uxth	r2, r3
 8017496:	68bb      	ldr	r3, [r7, #8]
 8017498:	829a      	strh	r2, [r3, #20]
                    break;
 801749a:	e111      	b.n	80176c0 <_evtParsing+0x458>

                case GUMI_NAV_SOL:
                    next_fix = (p_packet->payload.sol.flags & NAV_STATUS_FIX_VALID) && (p_packet->payload.sol.gps_fix == FIX_3D);
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	7bdb      	ldrb	r3, [r3, #15]
 80174a0:	f003 0301 	and.w	r3, r3, #1
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d005      	beq.n	80174b4 <_evtParsing+0x24c>
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	7b9b      	ldrb	r3, [r3, #14]
 80174ac:	2b03      	cmp	r3, #3
 80174ae:	d101      	bne.n	80174b4 <_evtParsing+0x24c>
 80174b0:	2301      	movs	r3, #1
 80174b2:	e000      	b.n	80174b6 <_evtParsing+0x24e>
 80174b4:	2300      	movs	r3, #0
 80174b6:	b2da      	uxtb	r2, r3
 80174b8:	4b26      	ldr	r3, [pc, #152]	; (8017554 <_evtParsing+0x2ec>)
 80174ba:	701a      	strb	r2, [r3, #0]
                    if (!next_fix)
 80174bc:	4b25      	ldr	r3, [pc, #148]	; (8017554 <_evtParsing+0x2ec>)
 80174be:	781b      	ldrb	r3, [r3, #0]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d106      	bne.n	80174d2 <_evtParsing+0x26a>
                    	p_parent->_fix = FALSE;
 80174c4:	68ba      	ldr	r2, [r7, #8]
 80174c6:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 80174ca:	f36f 0300 	bfc	r3, #0, #1
 80174ce:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    p_parent->_num_sat = p_packet->payload.sol.num_sv;
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80174d8:	68bb      	ldr	r3, [r7, #8]
 80174da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    break;
 80174de:	e0ef      	b.n	80176c0 <_evtParsing+0x458>

                case GUMI_NAV_STATUS:
                    next_fix = (p_packet->payload.status.flags & NAV_STATUS_FIX_VALID) && (p_packet->payload.status.gps_fix == FIX_3D);
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	7a5b      	ldrb	r3, [r3, #9]
 80174e4:	f003 0301 	and.w	r3, r3, #1
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d005      	beq.n	80174f8 <_evtParsing+0x290>
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	7a1b      	ldrb	r3, [r3, #8]
 80174f0:	2b03      	cmp	r3, #3
 80174f2:	d101      	bne.n	80174f8 <_evtParsing+0x290>
 80174f4:	2301      	movs	r3, #1
 80174f6:	e000      	b.n	80174fa <_evtParsing+0x292>
 80174f8:	2300      	movs	r3, #0
 80174fa:	b2da      	uxtb	r2, r3
 80174fc:	4b15      	ldr	r3, [pc, #84]	; (8017554 <_evtParsing+0x2ec>)
 80174fe:	701a      	strb	r2, [r3, #0]
                    if (!next_fix)
 8017500:	4b14      	ldr	r3, [pc, #80]	; (8017554 <_evtParsing+0x2ec>)
 8017502:	781b      	ldrb	r3, [r3, #0]
 8017504:	2b00      	cmp	r3, #0
 8017506:	f040 80d8 	bne.w	80176ba <_evtParsing+0x452>
                    	p_parent->_fix = FALSE;
 801750a:	68ba      	ldr	r2, [r7, #8]
 801750c:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8017510:	f36f 0300 	bfc	r3, #0, #1
 8017514:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    break;
 8017518:	e0cf      	b.n	80176ba <_evtParsing+0x452>

                case GUMI_NAV_SVINFO:
                	p_owner->_num_ch = p_packet->payload.sv_info.num_ch;
 801751a:	68fb      	ldr	r3, [r7, #12]
 801751c:	7a1a      	ldrb	r2, [r3, #8]
 801751e:	693b      	ldr	r3, [r7, #16]
 8017520:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
                    if (p_owner->_num_ch > 16)
 8017524:	693b      	ldr	r3, [r7, #16]
 8017526:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 801752a:	2b10      	cmp	r3, #16
 801752c:	d903      	bls.n	8017536 <_evtParsing+0x2ce>
                    	p_owner->_num_ch = 16;
 801752e:	693b      	ldr	r3, [r7, #16]
 8017530:	2210      	movs	r2, #16
 8017532:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
                    for (i = 0; i < p_owner->_num_ch; i++) {
 8017536:	2300      	movs	r3, #0
 8017538:	617b      	str	r3, [r7, #20]
 801753a:	e050      	b.n	80175de <_evtParsing+0x376>
 801753c:	f3af 8000 	nop.w
 8017540:	00000000 	.word	0x00000000
 8017544:	416312d0 	.word	0x416312d0
 8017548:	20000138 	.word	0x20000138
 801754c:	08028b18 	.word	0x08028b18
 8017550:	408f4000 	.word	0x408f4000
 8017554:	20001f92 	.word	0x20001f92
 8017558:	20001df8 	.word	0x20001df8
 801755c:	431bde83 	.word	0x431bde83
                    	p_owner->_svinfo_chn[i] = p_packet->payload.sv_info.channel[i].chn;
 8017560:	68f9      	ldr	r1, [r7, #12]
 8017562:	697a      	ldr	r2, [r7, #20]
 8017564:	4613      	mov	r3, r2
 8017566:	005b      	lsls	r3, r3, #1
 8017568:	4413      	add	r3, r2
 801756a:	009b      	lsls	r3, r3, #2
 801756c:	440b      	add	r3, r1
 801756e:	330c      	adds	r3, #12
 8017570:	7819      	ldrb	r1, [r3, #0]
 8017572:	693a      	ldr	r2, [r7, #16]
 8017574:	697b      	ldr	r3, [r7, #20]
 8017576:	4413      	add	r3, r2
 8017578:	33b9      	adds	r3, #185	; 0xb9
 801757a:	460a      	mov	r2, r1
 801757c:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_svid[i] = p_packet->payload.sv_info.channel[i].svid;
 801757e:	68f9      	ldr	r1, [r7, #12]
 8017580:	697a      	ldr	r2, [r7, #20]
 8017582:	4613      	mov	r3, r2
 8017584:	005b      	lsls	r3, r3, #1
 8017586:	4413      	add	r3, r2
 8017588:	009b      	lsls	r3, r3, #2
 801758a:	440b      	add	r3, r1
 801758c:	330d      	adds	r3, #13
 801758e:	7819      	ldrb	r1, [r3, #0]
 8017590:	693a      	ldr	r2, [r7, #16]
 8017592:	697b      	ldr	r3, [r7, #20]
 8017594:	4413      	add	r3, r2
 8017596:	33c9      	adds	r3, #201	; 0xc9
 8017598:	460a      	mov	r2, r1
 801759a:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_quality[i] = p_packet->payload.sv_info.channel[i].quality;
 801759c:	68f9      	ldr	r1, [r7, #12]
 801759e:	697a      	ldr	r2, [r7, #20]
 80175a0:	4613      	mov	r3, r2
 80175a2:	005b      	lsls	r3, r3, #1
 80175a4:	4413      	add	r3, r2
 80175a6:	009b      	lsls	r3, r3, #2
 80175a8:	440b      	add	r3, r1
 80175aa:	330f      	adds	r3, #15
 80175ac:	7819      	ldrb	r1, [r3, #0]
 80175ae:	693a      	ldr	r2, [r7, #16]
 80175b0:	697b      	ldr	r3, [r7, #20]
 80175b2:	4413      	add	r3, r2
 80175b4:	33d9      	adds	r3, #217	; 0xd9
 80175b6:	460a      	mov	r2, r1
 80175b8:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_cno[i] = p_packet->payload.sv_info.channel[i].cno;
 80175ba:	68f9      	ldr	r1, [r7, #12]
 80175bc:	697a      	ldr	r2, [r7, #20]
 80175be:	4613      	mov	r3, r2
 80175c0:	005b      	lsls	r3, r3, #1
 80175c2:	4413      	add	r3, r2
 80175c4:	009b      	lsls	r3, r3, #2
 80175c6:	440b      	add	r3, r1
 80175c8:	3310      	adds	r3, #16
 80175ca:	7819      	ldrb	r1, [r3, #0]
 80175cc:	693a      	ldr	r2, [r7, #16]
 80175ce:	697b      	ldr	r3, [r7, #20]
 80175d0:	4413      	add	r3, r2
 80175d2:	33e9      	adds	r3, #233	; 0xe9
 80175d4:	460a      	mov	r2, r1
 80175d6:	701a      	strb	r2, [r3, #0]
                    for (i = 0; i < p_owner->_num_ch; i++) {
 80175d8:	697b      	ldr	r3, [r7, #20]
 80175da:	3301      	adds	r3, #1
 80175dc:	617b      	str	r3, [r7, #20]
 80175de:	693b      	ldr	r3, [r7, #16]
 80175e0:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80175e4:	461a      	mov	r2, r3
 80175e6:	697b      	ldr	r3, [r7, #20]
 80175e8:	4293      	cmp	r3, r2
 80175ea:	dbb9      	blt.n	8017560 <_evtParsing+0x2f8>
                    }
                    // Update GPS SVIFO update rate table.
                    p_owner->_svinfo_rate[0] = p_owner->_svinfo_rate[1];
 80175ec:	693b      	ldr	r3, [r7, #16]
 80175ee:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80175f2:	693b      	ldr	r3, [r7, #16]
 80175f4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
                    p_owner->_svinfo_rate[1] = pif_cumulative_timer1ms;
 80175f8:	4b49      	ldr	r3, [pc, #292]	; (8017720 <_evtParsing+0x4b8>)
 80175fa:	681a      	ldr	r2, [r3, #0]
 80175fc:	693b      	ldr	r3, [r7, #16]
 80175fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                    break;
 8017602:	e05d      	b.n	80176c0 <_evtParsing+0x458>

                case GUMI_NAV_TIMEUTC:
                	if (p_packet->payload.time_utc.valid & 4) {
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	7ddb      	ldrb	r3, [r3, #23]
 8017608:	f003 0304 	and.w	r3, r3, #4
 801760c:	2b00      	cmp	r3, #0
 801760e:	d056      	beq.n	80176be <_evtParsing+0x456>
						p_parent->_utc.year = p_packet->payload.time_utc.year - 2000;
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	8a1b      	ldrh	r3, [r3, #16]
 8017614:	b2db      	uxtb	r3, r3
 8017616:	3330      	adds	r3, #48	; 0x30
 8017618:	b2da      	uxtb	r2, r3
 801761a:	68bb      	ldr	r3, [r7, #8]
 801761c:	739a      	strb	r2, [r3, #14]
						p_parent->_utc.month = p_packet->payload.time_utc.month;
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	7c9a      	ldrb	r2, [r3, #18]
 8017622:	68bb      	ldr	r3, [r7, #8]
 8017624:	73da      	strb	r2, [r3, #15]
						p_parent->_utc.day = p_packet->payload.time_utc.day;
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	7cda      	ldrb	r2, [r3, #19]
 801762a:	68bb      	ldr	r3, [r7, #8]
 801762c:	741a      	strb	r2, [r3, #16]
						p_parent->_utc.hour = p_packet->payload.time_utc.hour;
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	7d1a      	ldrb	r2, [r3, #20]
 8017632:	68bb      	ldr	r3, [r7, #8]
 8017634:	745a      	strb	r2, [r3, #17]
						p_parent->_utc.minute = p_packet->payload.time_utc.min;
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	7d5a      	ldrb	r2, [r3, #21]
 801763a:	68bb      	ldr	r3, [r7, #8]
 801763c:	749a      	strb	r2, [r3, #18]
						p_parent->_utc.second = p_packet->payload.time_utc.sec;
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	7d9a      	ldrb	r2, [r3, #22]
 8017642:	68bb      	ldr	r3, [r7, #8]
 8017644:	74da      	strb	r2, [r3, #19]
						p_parent->_utc.millisecond = p_packet->payload.time_utc.nano / 1000000UL;
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	68db      	ldr	r3, [r3, #12]
 801764a:	461a      	mov	r2, r3
 801764c:	4b35      	ldr	r3, [pc, #212]	; (8017724 <_evtParsing+0x4bc>)
 801764e:	fba3 2302 	umull	r2, r3, r3, r2
 8017652:	0c9b      	lsrs	r3, r3, #18
 8017654:	b29a      	uxth	r2, r3
 8017656:	68bb      	ldr	r3, [r7, #8]
 8017658:	829a      	strh	r2, [r3, #20]
                	}
                	break;
 801765a:	e030      	b.n	80176be <_evtParsing+0x456>

                case GUMI_NAV_VELNED:
                	p_parent->_ground_speed = p_packet->payload.velned.speed;
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	695b      	ldr	r3, [r3, #20]
 8017660:	4618      	mov	r0, r3
 8017662:	f7e8 ff03 	bl	800046c <__aeabi_ui2d>
 8017666:	4602      	mov	r2, r0
 8017668:	460b      	mov	r3, r1
 801766a:	68b9      	ldr	r1, [r7, #8]
 801766c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
                	p_parent->_ground_course = p_packet->payload.velned.heading / 100000.0;
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	69db      	ldr	r3, [r3, #28]
 8017674:	4618      	mov	r0, r3
 8017676:	f7e8 ff09 	bl	800048c <__aeabi_i2d>
 801767a:	a327      	add	r3, pc, #156	; (adr r3, 8017718 <_evtParsing+0x4b0>)
 801767c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017680:	f7e9 f898 	bl	80007b4 <__aeabi_ddiv>
 8017684:	4602      	mov	r2, r0
 8017686:	460b      	mov	r3, r1
 8017688:	68b9      	ldr	r1, [r7, #8]
 801768a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
                    break;
 801768e:	e017      	b.n	80176c0 <_evtParsing+0x458>

                default:
#ifndef __PIF_NO_LOG__
            		pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x MID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id, p_packet->msg_id);
 8017690:	693b      	ldr	r3, [r7, #16]
 8017692:	8a9b      	ldrh	r3, [r3, #20]
 8017694:	4618      	mov	r0, r3
 8017696:	4b24      	ldr	r3, [pc, #144]	; (8017728 <_evtParsing+0x4c0>)
 8017698:	68db      	ldr	r3, [r3, #12]
 801769a:	68fa      	ldr	r2, [r7, #12]
 801769c:	7812      	ldrb	r2, [r2, #0]
 801769e:	4611      	mov	r1, r2
 80176a0:	68fa      	ldr	r2, [r7, #12]
 80176a2:	7852      	ldrb	r2, [r2, #1]
 80176a4:	9202      	str	r2, [sp, #8]
 80176a6:	9101      	str	r1, [sp, #4]
 80176a8:	9300      	str	r3, [sp, #0]
 80176aa:	4603      	mov	r3, r0
 80176ac:	f240 122f 	movw	r2, #303	; 0x12f
 80176b0:	491e      	ldr	r1, [pc, #120]	; (801772c <_evtParsing+0x4c4>)
 80176b2:	2004      	movs	r0, #4
 80176b4:	f7fc faa0 	bl	8013bf8 <pifLog_Printf>
#endif
                    break;
 80176b8:	e002      	b.n	80176c0 <_evtParsing+0x458>
                    break;
 80176ba:	bf00      	nop
 80176bc:	e012      	b.n	80176e4 <_evtParsing+0x47c>
                	break;
 80176be:	bf00      	nop
            }
        	break;
 80176c0:	e010      	b.n	80176e4 <_evtParsing+0x47c>

		default:
#ifndef __PIF_NO_LOG__
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id);
 80176c2:	693b      	ldr	r3, [r7, #16]
 80176c4:	8a9b      	ldrh	r3, [r3, #20]
 80176c6:	4619      	mov	r1, r3
 80176c8:	4b17      	ldr	r3, [pc, #92]	; (8017728 <_evtParsing+0x4c0>)
 80176ca:	68db      	ldr	r3, [r3, #12]
 80176cc:	68fa      	ldr	r2, [r7, #12]
 80176ce:	7812      	ldrb	r2, [r2, #0]
 80176d0:	9201      	str	r2, [sp, #4]
 80176d2:	9300      	str	r3, [sp, #0]
 80176d4:	460b      	mov	r3, r1
 80176d6:	f240 1237 	movw	r2, #311	; 0x137
 80176da:	4915      	ldr	r1, [pc, #84]	; (8017730 <_evtParsing+0x4c8>)
 80176dc:	2004      	movs	r0, #4
 80176de:	f7fc fa8b 	bl	8013bf8 <pifLog_Printf>
#endif
			break;
 80176e2:	bf00      	nop
        }

		if (p_owner->evt_ubx_receive) {
 80176e4:	693b      	ldr	r3, [r7, #16]
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d00c      	beq.n	8017706 <_evtParsing+0x49e>
			if ((*p_owner->evt_ubx_receive)(p_owner, p_packet)) pifGps_SendEvent(&p_owner->_gps);
 80176ec:	693b      	ldr	r3, [r7, #16]
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	68f9      	ldr	r1, [r7, #12]
 80176f2:	6938      	ldr	r0, [r7, #16]
 80176f4:	4798      	blx	r3
 80176f6:	4603      	mov	r3, r0
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d004      	beq.n	8017706 <_evtParsing+0x49e>
 80176fc:	693b      	ldr	r3, [r7, #16]
 80176fe:	3308      	adds	r3, #8
 8017700:	4618      	mov	r0, r3
 8017702:	f7fe fe8d 	bl	8016420 <pifGps_SendEvent>
		}

    	p_owner->__rx.state = GURS_SYNC_CHAR_1;
 8017706:	693b      	ldr	r3, [r7, #16]
 8017708:	2200      	movs	r2, #0
 801770a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 801770e:	e000      	b.n	8017712 <_evtParsing+0x4aa>
    if (!p_owner->_gps.evt_receive) return;
 8017710:	bf00      	nop
    }
}
 8017712:	3718      	adds	r7, #24
 8017714:	46bd      	mov	sp, r7
 8017716:	bd80      	pop	{r7, pc}
 8017718:	00000000 	.word	0x00000000
 801771c:	40f86a00 	.word	0x40f86a00
 8017720:	20001df8 	.word	0x20001df8
 8017724:	431bde83 	.word	0x431bde83
 8017728:	20000138 	.word	0x20000138
 801772c:	08028b18 	.word	0x08028b18
 8017730:	08028b34 	.word	0x08028b34

08017734 <_makeNmeaPacket>:

static BOOL _makeNmeaPacket(PifGpsUblox* p_owner, char* p_data, BOOL blocking)
{
 8017734:	b580      	push	{r7, lr}
 8017736:	b088      	sub	sp, #32
 8017738:	af00      	add	r7, sp, #0
 801773a:	60f8      	str	r0, [r7, #12]
 801773c:	60b9      	str	r1, [r7, #8]
 801773e:	4613      	mov	r3, r2
 8017740:	71fb      	strb	r3, [r7, #7]
	uint8_t header[4];
	uint8_t parity = 0;
 8017742:	2300      	movs	r3, #0
 8017744:	77fb      	strb	r3, [r7, #31]
	int i;

	i = 1;
 8017746:	2301      	movs	r3, #1
 8017748:	61bb      	str	r3, [r7, #24]
	while (TRUE) {
		if (p_data[i] == '*') {
 801774a:	69bb      	ldr	r3, [r7, #24]
 801774c:	68ba      	ldr	r2, [r7, #8]
 801774e:	4413      	add	r3, r2
 8017750:	781b      	ldrb	r3, [r3, #0]
 8017752:	2b2a      	cmp	r3, #42	; 0x2a
 8017754:	d13a      	bne.n	80177cc <_makeNmeaPacket+0x98>
			i++;
 8017756:	69bb      	ldr	r3, [r7, #24]
 8017758:	3301      	adds	r3, #1
 801775a:	61bb      	str	r3, [r7, #24]
			break;
 801775c:	bf00      	nop
		else {
			parity ^= p_data[i];
			i++;
		}
	}
	p_data[i] = kPifHexUpperChar[(parity >> 4) & 0x0F]; i++;
 801775e:	4b4b      	ldr	r3, [pc, #300]	; (801788c <_makeNmeaPacket+0x158>)
 8017760:	681a      	ldr	r2, [r3, #0]
 8017762:	7ffb      	ldrb	r3, [r7, #31]
 8017764:	091b      	lsrs	r3, r3, #4
 8017766:	b2db      	uxtb	r3, r3
 8017768:	f003 030f 	and.w	r3, r3, #15
 801776c:	441a      	add	r2, r3
 801776e:	69bb      	ldr	r3, [r7, #24]
 8017770:	68b9      	ldr	r1, [r7, #8]
 8017772:	440b      	add	r3, r1
 8017774:	7812      	ldrb	r2, [r2, #0]
 8017776:	701a      	strb	r2, [r3, #0]
 8017778:	69bb      	ldr	r3, [r7, #24]
 801777a:	3301      	adds	r3, #1
 801777c:	61bb      	str	r3, [r7, #24]
	p_data[i] = kPifHexUpperChar[parity & 0x0F]; i++;
 801777e:	4b43      	ldr	r3, [pc, #268]	; (801788c <_makeNmeaPacket+0x158>)
 8017780:	681a      	ldr	r2, [r3, #0]
 8017782:	7ffb      	ldrb	r3, [r7, #31]
 8017784:	f003 030f 	and.w	r3, r3, #15
 8017788:	441a      	add	r2, r3
 801778a:	69bb      	ldr	r3, [r7, #24]
 801778c:	68b9      	ldr	r1, [r7, #8]
 801778e:	440b      	add	r3, r1
 8017790:	7812      	ldrb	r2, [r2, #0]
 8017792:	701a      	strb	r2, [r3, #0]
 8017794:	69bb      	ldr	r3, [r7, #24]
 8017796:	3301      	adds	r3, #1
 8017798:	61bb      	str	r3, [r7, #24]
	p_data[i] = '\r'; i++;
 801779a:	69bb      	ldr	r3, [r7, #24]
 801779c:	68ba      	ldr	r2, [r7, #8]
 801779e:	4413      	add	r3, r2
 80177a0:	220d      	movs	r2, #13
 80177a2:	701a      	strb	r2, [r3, #0]
 80177a4:	69bb      	ldr	r3, [r7, #24]
 80177a6:	3301      	adds	r3, #1
 80177a8:	61bb      	str	r3, [r7, #24]
	p_data[i] = '\n'; i++;
 80177aa:	69bb      	ldr	r3, [r7, #24]
 80177ac:	68ba      	ldr	r2, [r7, #8]
 80177ae:	4413      	add	r3, r2
 80177b0:	220a      	movs	r2, #10
 80177b2:	701a      	strb	r2, [r3, #0]
 80177b4:	69bb      	ldr	r3, [r7, #24]
 80177b6:	3301      	adds	r3, #1
 80177b8:	61bb      	str	r3, [r7, #24]
	p_data[i] = 0;
 80177ba:	69bb      	ldr	r3, [r7, #24]
 80177bc:	68ba      	ldr	r2, [r7, #8]
 80177be:	4413      	add	r3, r2
 80177c0:	2200      	movs	r2, #0
 80177c2:	701a      	strb	r2, [r3, #0]

	if (blocking) {
 80177c4:	79fb      	ldrb	r3, [r7, #7]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d01b      	beq.n	8017802 <_makeNmeaPacket+0xce>
 80177ca:	e00f      	b.n	80177ec <_makeNmeaPacket+0xb8>
			parity ^= p_data[i];
 80177cc:	69bb      	ldr	r3, [r7, #24]
 80177ce:	68ba      	ldr	r2, [r7, #8]
 80177d0:	4413      	add	r3, r2
 80177d2:	781a      	ldrb	r2, [r3, #0]
 80177d4:	7ffb      	ldrb	r3, [r7, #31]
 80177d6:	4053      	eors	r3, r2
 80177d8:	77fb      	strb	r3, [r7, #31]
			i++;
 80177da:	69bb      	ldr	r3, [r7, #24]
 80177dc:	3301      	adds	r3, #1
 80177de:	61bb      	str	r3, [r7, #24]
		if (p_data[i] == '*') {
 80177e0:	e7b3      	b.n	801774a <_makeNmeaPacket+0x16>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
			if (!pifTaskManager_Yield()) break;
 80177e2:	f7fd fced 	bl	80151c0 <pifTaskManager_Yield>
 80177e6:	4603      	mov	r3, r0
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d009      	beq.n	8017800 <_makeNmeaPacket+0xcc>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80177f2:	4618      	mov	r0, r3
 80177f4:	f7fc fc41 	bl	801407a <pifRingBuffer_IsEmpty>
 80177f8:	4603      	mov	r3, r0
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d0f1      	beq.n	80177e2 <_makeNmeaPacket+0xae>
 80177fe:	e000      	b.n	8017802 <_makeNmeaPacket+0xce>
			if (!pifTaskManager_Yield()) break;
 8017800:	bf00      	nop
		}
	}

	pifRingBuffer_BeginPutting(&p_owner->__tx.buffer);
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017808:	4618      	mov	r0, r3
 801780a:	f7fc fcb8 	bl	801417e <pifRingBuffer_BeginPutting>

	header[0] = i;
 801780e:	69bb      	ldr	r3, [r7, #24]
 8017810:	b2db      	uxtb	r3, r3
 8017812:	753b      	strb	r3, [r7, #20]
	header[1] = 0;
 8017814:	2300      	movs	r3, #0
 8017816:	757b      	strb	r3, [r7, #21]
	header[2] = 0;
 8017818:	2300      	movs	r3, #0
 801781a:	75bb      	strb	r3, [r7, #22]
	header[3] = 0;
 801781c:	2300      	movs	r3, #0
 801781e:	75fb      	strb	r3, [r7, #23]
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, header, 4)) goto fail;
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017826:	f107 0114 	add.w	r1, r7, #20
 801782a:	2204      	movs	r2, #4
 801782c:	4618      	mov	r0, r3
 801782e:	f7fc fd2d 	bl	801428c <pifRingBuffer_PutData>
 8017832:	4603      	mov	r3, r0
 8017834:	2b00      	cmp	r3, #0
 8017836:	d01a      	beq.n	801786e <_makeNmeaPacket+0x13a>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t *)p_data, header[0])) goto fail;
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801783e:	7d3a      	ldrb	r2, [r7, #20]
 8017840:	b292      	uxth	r2, r2
 8017842:	68b9      	ldr	r1, [r7, #8]
 8017844:	4618      	mov	r0, r3
 8017846:	f7fc fd21 	bl	801428c <pifRingBuffer_PutData>
 801784a:	4603      	mov	r3, r0
 801784c:	2b00      	cmp	r3, #0
 801784e:	d010      	beq.n	8017872 <_makeNmeaPacket+0x13e>

	pifRingBuffer_CommitPutting(&p_owner->__tx.buffer);
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017856:	4618      	mov	r0, r3
 8017858:	f7fc fca9 	bl	80141ae <pifRingBuffer_CommitPutting>

	pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8017862:	69db      	ldr	r3, [r3, #28]
 8017864:	4618      	mov	r0, r3
 8017866:	f7fd fa63 	bl	8014d30 <pifTask_SetTrigger>
	return TRUE;
 801786a:	2301      	movs	r3, #1
 801786c:	e009      	b.n	8017882 <_makeNmeaPacket+0x14e>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, header, 4)) goto fail;
 801786e:	bf00      	nop
 8017870:	e000      	b.n	8017874 <_makeNmeaPacket+0x140>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t *)p_data, header[0])) goto fail;
 8017872:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.buffer);
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801787a:	4618      	mov	r0, r3
 801787c:	f7fc fca5 	bl	80141ca <pifRingBuffer_RollbackPutting>
	return FALSE;
 8017880:	2300      	movs	r3, #0
}
 8017882:	4618      	mov	r0, r3
 8017884:	3720      	adds	r7, #32
 8017886:	46bd      	mov	sp, r7
 8017888:	bd80      	pop	{r7, pc}
 801788a:	bf00      	nop
 801788c:	2000012c 	.word	0x2000012c

08017890 <_makeUbxPacket>:

static BOOL _makeUbxPacket(PifGpsUblox* p_owner, uint8_t* p_header, uint16_t length, uint8_t* p_payload, BOOL blocking)
{
 8017890:	b580      	push	{r7, lr}
 8017892:	b088      	sub	sp, #32
 8017894:	af00      	add	r7, sp, #0
 8017896:	60f8      	str	r0, [r7, #12]
 8017898:	60b9      	str	r1, [r7, #8]
 801789a:	603b      	str	r3, [r7, #0]
 801789c:	4613      	mov	r3, r2
 801789e:	80fb      	strh	r3, [r7, #6]
	uint8_t info[4];
	uint8_t tailer[2];
	uint16_t checksum;

	checksum = _checksumUbx(p_header + 2, p_payload, length);
 80178a0:	68bb      	ldr	r3, [r7, #8]
 80178a2:	3302      	adds	r3, #2
 80178a4:	88fa      	ldrh	r2, [r7, #6]
 80178a6:	6839      	ldr	r1, [r7, #0]
 80178a8:	4618      	mov	r0, r3
 80178aa:	f7ff fb59 	bl	8016f60 <_checksumUbx>
 80178ae:	4603      	mov	r3, r0
 80178b0:	83fb      	strh	r3, [r7, #30]
	tailer[0] = checksum & 0xFF;
 80178b2:	8bfb      	ldrh	r3, [r7, #30]
 80178b4:	b2db      	uxtb	r3, r3
 80178b6:	753b      	strb	r3, [r7, #20]
	tailer[1] = checksum >> 8;
 80178b8:	8bfb      	ldrh	r3, [r7, #30]
 80178ba:	0a1b      	lsrs	r3, r3, #8
 80178bc:	b29b      	uxth	r3, r3
 80178be:	b2db      	uxtb	r3, r3
 80178c0:	757b      	strb	r3, [r7, #21]

	if (blocking) {
 80178c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d010      	beq.n	80178ec <_makeUbxPacket+0x5c>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 80178ca:	e004      	b.n	80178d6 <_makeUbxPacket+0x46>
			if (!pifTaskManager_Yield()) break;
 80178cc:	f7fd fc78 	bl	80151c0 <pifTaskManager_Yield>
 80178d0:	4603      	mov	r3, r0
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d009      	beq.n	80178ea <_makeUbxPacket+0x5a>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80178dc:	4618      	mov	r0, r3
 80178de:	f7fc fbcc 	bl	801407a <pifRingBuffer_IsEmpty>
 80178e2:	4603      	mov	r3, r0
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d0f1      	beq.n	80178cc <_makeUbxPacket+0x3c>
 80178e8:	e000      	b.n	80178ec <_makeUbxPacket+0x5c>
			if (!pifTaskManager_Yield()) break;
 80178ea:	bf00      	nop
		}
	}

	pifRingBuffer_BeginPutting(&p_owner->__tx.buffer);
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80178f2:	4618      	mov	r0, r3
 80178f4:	f7fc fc43 	bl	801417e <pifRingBuffer_BeginPutting>

	info[0] = length + 8;
 80178f8:	88fb      	ldrh	r3, [r7, #6]
 80178fa:	b2db      	uxtb	r3, r3
 80178fc:	3308      	adds	r3, #8
 80178fe:	b2db      	uxtb	r3, r3
 8017900:	763b      	strb	r3, [r7, #24]
	info[1] = 0;
 8017902:	2300      	movs	r3, #0
 8017904:	767b      	strb	r3, [r7, #25]
	info[2] = 0;
 8017906:	2300      	movs	r3, #0
 8017908:	76bb      	strb	r3, [r7, #26]
	info[3] = 0;
 801790a:	2300      	movs	r3, #0
 801790c:	76fb      	strb	r3, [r7, #27]
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, info, 4)) goto fail;
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017914:	f107 0118 	add.w	r1, r7, #24
 8017918:	2204      	movs	r2, #4
 801791a:	4618      	mov	r0, r3
 801791c:	f7fc fcb6 	bl	801428c <pifRingBuffer_PutData>
 8017920:	4603      	mov	r3, r0
 8017922:	2b00      	cmp	r3, #0
 8017924:	d033      	beq.n	801798e <_makeUbxPacket+0xfe>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_header, 6)) goto fail;
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801792c:	2206      	movs	r2, #6
 801792e:	68b9      	ldr	r1, [r7, #8]
 8017930:	4618      	mov	r0, r3
 8017932:	f7fc fcab 	bl	801428c <pifRingBuffer_PutData>
 8017936:	4603      	mov	r3, r0
 8017938:	2b00      	cmp	r3, #0
 801793a:	d02a      	beq.n	8017992 <_makeUbxPacket+0x102>
	if (length > 0) {
 801793c:	88fb      	ldrh	r3, [r7, #6]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d00a      	beq.n	8017958 <_makeUbxPacket+0xc8>
		if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_payload, length)) goto fail;
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017948:	88fa      	ldrh	r2, [r7, #6]
 801794a:	6839      	ldr	r1, [r7, #0]
 801794c:	4618      	mov	r0, r3
 801794e:	f7fc fc9d 	bl	801428c <pifRingBuffer_PutData>
 8017952:	4603      	mov	r3, r0
 8017954:	2b00      	cmp	r3, #0
 8017956:	d01e      	beq.n	8017996 <_makeUbxPacket+0x106>
	}
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, tailer, 2)) goto fail;
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801795e:	f107 0114 	add.w	r1, r7, #20
 8017962:	2202      	movs	r2, #2
 8017964:	4618      	mov	r0, r3
 8017966:	f7fc fc91 	bl	801428c <pifRingBuffer_PutData>
 801796a:	4603      	mov	r3, r0
 801796c:	2b00      	cmp	r3, #0
 801796e:	d014      	beq.n	801799a <_makeUbxPacket+0x10a>

	pifRingBuffer_CommitPutting(&p_owner->__tx.buffer);
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017976:	4618      	mov	r0, r3
 8017978:	f7fc fc19 	bl	80141ae <pifRingBuffer_CommitPutting>

	pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8017982:	69db      	ldr	r3, [r3, #28]
 8017984:	4618      	mov	r0, r3
 8017986:	f7fd f9d3 	bl	8014d30 <pifTask_SetTrigger>
	return TRUE;
 801798a:	2301      	movs	r3, #1
 801798c:	e00d      	b.n	80179aa <_makeUbxPacket+0x11a>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, info, 4)) goto fail;
 801798e:	bf00      	nop
 8017990:	e004      	b.n	801799c <_makeUbxPacket+0x10c>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_header, 6)) goto fail;
 8017992:	bf00      	nop
 8017994:	e002      	b.n	801799c <_makeUbxPacket+0x10c>
		if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_payload, length)) goto fail;
 8017996:	bf00      	nop
 8017998:	e000      	b.n	801799c <_makeUbxPacket+0x10c>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, tailer, 2)) goto fail;
 801799a:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.buffer);
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80179a2:	4618      	mov	r0, r3
 80179a4:	f7fc fc11 	bl	80141ca <pifRingBuffer_RollbackPutting>
	return FALSE;
 80179a8:	2300      	movs	r3, #0
}
 80179aa:	4618      	mov	r0, r3
 80179ac:	3720      	adds	r7, #32
 80179ae:	46bd      	mov	sp, r7
 80179b0:	bd80      	pop	{r7, pc}

080179b2 <_evtSending>:

BOOL _evtSending(void* p_client, PifActCommSendData act_send_data)
{
 80179b2:	b5b0      	push	{r4, r5, r7, lr}
 80179b4:	b084      	sub	sp, #16
 80179b6:	af00      	add	r7, sp, #0
 80179b8:	6078      	str	r0, [r7, #4]
 80179ba:	6039      	str	r1, [r7, #0]
	PifGpsUblox *p_owner = (PifGpsUblox *)p_client;
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	switch (p_owner->__tx.state) {
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80179c6:	2b02      	cmp	r3, #2
 80179c8:	d05d      	beq.n	8017a86 <_evtSending+0xd4>
 80179ca:	2b02      	cmp	r3, #2
 80179cc:	dc72      	bgt.n	8017ab4 <_evtSending+0x102>
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d002      	beq.n	80179d8 <_evtSending+0x26>
 80179d2:	2b01      	cmp	r3, #1
 80179d4:	d01c      	beq.n	8017a10 <_evtSending+0x5e>
			p_owner->__tx.state = GUTS_IDLE;
		}
		break;

	default:
		break;
 80179d6:	e06d      	b.n	8017ab4 <_evtSending+0x102>
		if (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80179de:	4618      	mov	r0, r3
 80179e0:	f7fc fb4b 	bl	801407a <pifRingBuffer_IsEmpty>
 80179e4:	4603      	mov	r3, r0
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d166      	bne.n	8017ab8 <_evtSending+0x106>
			pifRingBuffer_CopyToArray(p_owner->__tx.ui.info, 4, &p_owner->__tx.buffer, 0);
 80179ea:	68fb      	ldr	r3, [r7, #12]
 80179ec:	f203 20ba 	addw	r0, r3, #698	; 0x2ba
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 80179f6:	2300      	movs	r3, #0
 80179f8:	2104      	movs	r1, #4
 80179fa:	f7fc fd0a 	bl	8014412 <pifRingBuffer_CopyToArray>
			p_owner->__tx.pos = 4;
 80179fe:	68fb      	ldr	r3, [r7, #12]
 8017a00:	2204      	movs	r2, #4
 8017a02:	f883 22be 	strb.w	r2, [r3, #702]	; 0x2be
			p_owner->__tx.state = GUTS_SENDING;
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	2201      	movs	r2, #1
 8017a0a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
		break;
 8017a0e:	e053      	b.n	8017ab8 <_evtSending+0x106>
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, p_owner->__tx.pos),
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	f893 32be 	ldrb.w	r3, [r3, #702]	; 0x2be
 8017a22:	b29b      	uxth	r3, r3
 8017a24:	4619      	mov	r1, r3
 8017a26:	4610      	mov	r0, r2
 8017a28:	f7fc fafb 	bl	8014022 <pifRingBuffer_GetTailPointer>
 8017a2c:	4605      	mov	r5, r0
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	f503 7227 	add.w	r2, r3, #668	; 0x29c
				pifRingBuffer_GetLinerSize(&p_owner->__tx.buffer, p_owner->__tx.pos));
 8017a34:	68fb      	ldr	r3, [r7, #12]
 8017a36:	f893 32be 	ldrb.w	r3, [r3, #702]	; 0x2be
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, p_owner->__tx.pos),
 8017a3a:	b29b      	uxth	r3, r3
 8017a3c:	4619      	mov	r1, r3
 8017a3e:	4610      	mov	r0, r2
 8017a40:	f7fc fb50 	bl	80140e4 <pifRingBuffer_GetLinerSize>
 8017a44:	4603      	mov	r3, r0
 8017a46:	461a      	mov	r2, r3
 8017a48:	683b      	ldr	r3, [r7, #0]
 8017a4a:	4629      	mov	r1, r5
 8017a4c:	4620      	mov	r0, r4
 8017a4e:	4798      	blx	r3
 8017a50:	4603      	mov	r3, r0
 8017a52:	817b      	strh	r3, [r7, #10]
		p_owner->__tx.pos += length;
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	f893 22be 	ldrb.w	r2, [r3, #702]	; 0x2be
 8017a5a:	897b      	ldrh	r3, [r7, #10]
 8017a5c:	b2db      	uxtb	r3, r3
 8017a5e:	4413      	add	r3, r2
 8017a60:	b2da      	uxtb	r2, r3
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	f883 22be 	strb.w	r2, [r3, #702]	; 0x2be
		if (p_owner->__tx.pos >= 4 + p_owner->__tx.ui.st.length) {
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 8017a6e:	3303      	adds	r3, #3
 8017a70:	68fa      	ldr	r2, [r7, #12]
 8017a72:	f892 22be 	ldrb.w	r2, [r2, #702]	; 0x2be
 8017a76:	4293      	cmp	r3, r2
 8017a78:	da03      	bge.n	8017a82 <_evtSending+0xd0>
			p_owner->__tx.state = GUTS_WAIT_SENDED;
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	2202      	movs	r2, #2
 8017a7e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
		return TRUE;
 8017a82:	2301      	movs	r3, #1
 8017a84:	e01c      	b.n	8017ac0 <_evtSending+0x10e>
		if (!p_owner->__tx.ui.st.response) {
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d115      	bne.n	8017abc <_evtSending+0x10a>
			pifRingBuffer_Remove(&p_owner->__tx.buffer, 4 + p_owner->__tx.ui.st.length);
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 8017a9c:	b29b      	uxth	r3, r3
 8017a9e:	3304      	adds	r3, #4
 8017aa0:	b29b      	uxth	r3, r3
 8017aa2:	4619      	mov	r1, r3
 8017aa4:	4610      	mov	r0, r2
 8017aa6:	f7fc fcfa 	bl	801449e <pifRingBuffer_Remove>
			p_owner->__tx.state = GUTS_IDLE;
 8017aaa:	68fb      	ldr	r3, [r7, #12]
 8017aac:	2200      	movs	r2, #0
 8017aae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
		break;
 8017ab2:	e003      	b.n	8017abc <_evtSending+0x10a>
		break;
 8017ab4:	bf00      	nop
 8017ab6:	e002      	b.n	8017abe <_evtSending+0x10c>
		break;
 8017ab8:	bf00      	nop
 8017aba:	e000      	b.n	8017abe <_evtSending+0x10c>
		break;
 8017abc:	bf00      	nop
	}
	return FALSE;
 8017abe:	2300      	movs	r3, #0
}
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	3710      	adds	r7, #16
 8017ac4:	46bd      	mov	sp, r7
 8017ac6:	bdb0      	pop	{r4, r5, r7, pc}

08017ac8 <pifGpsUblox_Init>:

BOOL pifGpsUblox_Init(PifGpsUblox* p_owner, PifId id)
{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b084      	sub	sp, #16
 8017acc:	af02      	add	r7, sp, #8
 8017ace:	6078      	str	r0, [r7, #4]
 8017ad0:	460b      	mov	r3, r1
 8017ad2:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d103      	bne.n	8017ae2 <pifGpsUblox_Init+0x1a>
		pif_error = E_INVALID_PARAM;
 8017ada:	4b1e      	ldr	r3, [pc, #120]	; (8017b54 <pifGpsUblox_Init+0x8c>)
 8017adc:	2201      	movs	r2, #1
 8017ade:	701a      	strb	r2, [r3, #0]
		goto fail;
 8017ae0:	e026      	b.n	8017b30 <pifGpsUblox_Init+0x68>
	}

	memset(p_owner, 0, sizeof(PifGpsUblox));
 8017ae2:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8017ae6:	2100      	movs	r1, #0
 8017ae8:	6878      	ldr	r0, [r7, #4]
 8017aea:	f00c f9e7 	bl	8023ebc <memset>

    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	3308      	adds	r3, #8
 8017af2:	887a      	ldrh	r2, [r7, #2]
 8017af4:	4611      	mov	r1, r2
 8017af6:	4618      	mov	r0, r3
 8017af8:	f7fe fc20 	bl	801633c <pifGps_Init>
 8017afc:	4603      	mov	r3, r0
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d013      	beq.n	8017b2a <pifGpsUblox_Init+0x62>

    if (!pifRingBuffer_InitHeap(&p_owner->__tx.buffer, PIF_ID_AUTO, PIF_GPS_UBLOX_TX_SIZE)) goto fail;
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017b08:	2240      	movs	r2, #64	; 0x40
 8017b0a:	2100      	movs	r1, #0
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	f7fc fa15 	bl	8013f3c <pifRingBuffer_InitHeap>
 8017b12:	4603      	mov	r3, r0
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d00a      	beq.n	8017b2e <pifGpsUblox_Init+0x66>
    pifRingBuffer_SetName(&p_owner->__tx.buffer, "TxB");
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017b1e:	490e      	ldr	r1, [pc, #56]	; (8017b58 <pifGpsUblox_Init+0x90>)
 8017b20:	4618      	mov	r0, r3
 8017b22:	f7fc fa70 	bl	8014006 <pifRingBuffer_SetName>
    return TRUE;
 8017b26:	2301      	movs	r3, #1
 8017b28:	e010      	b.n	8017b4c <pifGpsUblox_Init+0x84>
    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 8017b2a:	bf00      	nop
 8017b2c:	e000      	b.n	8017b30 <pifGpsUblox_Init+0x68>
    if (!pifRingBuffer_InitHeap(&p_owner->__tx.buffer, PIF_ID_AUTO, PIF_GPS_UBLOX_TX_SIZE)) goto fail;
 8017b2e:	bf00      	nop

fail:
	pifGpsUblox_Clear(p_owner);
 8017b30:	6878      	ldr	r0, [r7, #4]
 8017b32:	f000 f815 	bl	8017b60 <pifGpsUblox_Clear>
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, id, pif_error);
 8017b36:	887b      	ldrh	r3, [r7, #2]
 8017b38:	4a06      	ldr	r2, [pc, #24]	; (8017b54 <pifGpsUblox_Init+0x8c>)
 8017b3a:	7812      	ldrb	r2, [r2, #0]
 8017b3c:	9200      	str	r2, [sp, #0]
 8017b3e:	f240 12d1 	movw	r2, #465	; 0x1d1
 8017b42:	4906      	ldr	r1, [pc, #24]	; (8017b5c <pifGpsUblox_Init+0x94>)
 8017b44:	2004      	movs	r0, #4
 8017b46:	f7fc f857 	bl	8013bf8 <pifLog_Printf>
#endif
    return FALSE;
 8017b4a:	2300      	movs	r3, #0
}
 8017b4c:	4618      	mov	r0, r3
 8017b4e:	3708      	adds	r7, #8
 8017b50:	46bd      	mov	sp, r7
 8017b52:	bd80      	pop	{r7, pc}
 8017b54:	20001de0 	.word	0x20001de0
 8017b58:	08028b48 	.word	0x08028b48
 8017b5c:	08028b4c 	.word	0x08028b4c

08017b60 <pifGpsUblox_Clear>:

void pifGpsUblox_Clear(PifGpsUblox* p_owner)
{
 8017b60:	b580      	push	{r7, lr}
 8017b62:	b082      	sub	sp, #8
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]
	pifRingBuffer_Clear(&p_owner->__tx.buffer);
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017b6e:	4618      	mov	r0, r3
 8017b70:	f7fc fa2e 	bl	8013fd0 <pifRingBuffer_Clear>
}
 8017b74:	bf00      	nop
 8017b76:	3708      	adds	r7, #8
 8017b78:	46bd      	mov	sp, r7
 8017b7a:	bd80      	pop	{r7, pc}

08017b7c <pifGpsUblox_AttachComm>:

void pifGpsUblox_AttachComm(PifGpsUblox* p_owner, PifComm *p_comm)
{
 8017b7c:	b580      	push	{r7, lr}
 8017b7e:	b082      	sub	sp, #8
 8017b80:	af00      	add	r7, sp, #0
 8017b82:	6078      	str	r0, [r7, #4]
 8017b84:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	683a      	ldr	r2, [r7, #0]
 8017b8a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, _evtSending);
 8017b8e:	4b05      	ldr	r3, [pc, #20]	; (8017ba4 <pifGpsUblox_AttachComm+0x28>)
 8017b90:	4a05      	ldr	r2, [pc, #20]	; (8017ba8 <pifGpsUblox_AttachComm+0x2c>)
 8017b92:	6879      	ldr	r1, [r7, #4]
 8017b94:	6838      	ldr	r0, [r7, #0]
 8017b96:	f7fa fce7 	bl	8012568 <pifComm_AttachClient>
}
 8017b9a:	bf00      	nop
 8017b9c:	3708      	adds	r7, #8
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	bd80      	pop	{r7, pc}
 8017ba2:	bf00      	nop
 8017ba4:	080179b3 	.word	0x080179b3
 8017ba8:	08017269 	.word	0x08017269

08017bac <pifGpsUblox_SetPubxConfig>:

	return _makeNmeaPacket(p_owner, data, blocking);
}

BOOL pifGpsUblox_SetPubxConfig(PifGpsUblox* p_owner, uint8_t port_id, uint16_t in_proto, uint16_t out_proto, uint32_t baudrate, BOOL blocking)
{
 8017bac:	b590      	push	{r4, r7, lr}
 8017bae:	b091      	sub	sp, #68	; 0x44
 8017bb0:	af02      	add	r7, sp, #8
 8017bb2:	60f8      	str	r0, [r7, #12]
 8017bb4:	4608      	mov	r0, r1
 8017bb6:	4611      	mov	r1, r2
 8017bb8:	461a      	mov	r2, r3
 8017bba:	4603      	mov	r3, r0
 8017bbc:	72fb      	strb	r3, [r7, #11]
 8017bbe:	460b      	mov	r3, r1
 8017bc0:	813b      	strh	r3, [r7, #8]
 8017bc2:	4613      	mov	r3, r2
 8017bc4:	80fb      	strh	r3, [r7, #6]
	char data[40];

	if (p_owner->__tx.state != GUTS_IDLE) {
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d004      	beq.n	8017bda <pifGpsUblox_SetPubxConfig+0x2e>
		pif_error = E_INVALID_STATE;
 8017bd0:	4b0f      	ldr	r3, [pc, #60]	; (8017c10 <pifGpsUblox_SetPubxConfig+0x64>)
 8017bd2:	2202      	movs	r2, #2
 8017bd4:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8017bd6:	2300      	movs	r3, #0
 8017bd8:	e015      	b.n	8017c06 <pifGpsUblox_SetPubxConfig+0x5a>
	}

	pif_Printf(data, "$PUBX,41,%u,%4X,%4X,%lu,0*", port_id, in_proto, out_proto, baudrate);
 8017bda:	7af9      	ldrb	r1, [r7, #11]
 8017bdc:	893c      	ldrh	r4, [r7, #8]
 8017bde:	88fb      	ldrh	r3, [r7, #6]
 8017be0:	f107 0010 	add.w	r0, r7, #16
 8017be4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017be6:	9201      	str	r2, [sp, #4]
 8017be8:	9300      	str	r3, [sp, #0]
 8017bea:	4623      	mov	r3, r4
 8017bec:	460a      	mov	r2, r1
 8017bee:	4909      	ldr	r1, [pc, #36]	; (8017c14 <pifGpsUblox_SetPubxConfig+0x68>)
 8017bf0:	f7fa fad8 	bl	80121a4 <pif_Printf>

	return _makeNmeaPacket(p_owner, data, blocking);
 8017bf4:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8017bf8:	f107 0310 	add.w	r3, r7, #16
 8017bfc:	4619      	mov	r1, r3
 8017bfe:	68f8      	ldr	r0, [r7, #12]
 8017c00:	f7ff fd98 	bl	8017734 <_makeNmeaPacket>
 8017c04:	4603      	mov	r3, r0
}
 8017c06:	4618      	mov	r0, r3
 8017c08:	373c      	adds	r7, #60	; 0x3c
 8017c0a:	46bd      	mov	sp, r7
 8017c0c:	bd90      	pop	{r4, r7, pc}
 8017c0e:	bf00      	nop
 8017c10:	20001de0 	.word	0x20001de0
 8017c14:	08028ba0 	.word	0x08028ba0

08017c18 <pifGpsUblox_SendUbxMsg>:

	return _makeNmeaPacket(p_owner, data, blocking);
}

BOOL pifGpsUblox_SendUbxMsg(PifGpsUblox* p_owner, uint8_t class_id, uint8_t msg_id, uint16_t length, uint8_t* payload, BOOL blocking)
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b086      	sub	sp, #24
 8017c1c:	af02      	add	r7, sp, #8
 8017c1e:	6078      	str	r0, [r7, #4]
 8017c20:	4608      	mov	r0, r1
 8017c22:	4611      	mov	r1, r2
 8017c24:	461a      	mov	r2, r3
 8017c26:	4603      	mov	r3, r0
 8017c28:	70fb      	strb	r3, [r7, #3]
 8017c2a:	460b      	mov	r3, r1
 8017c2c:	70bb      	strb	r3, [r7, #2]
 8017c2e:	4613      	mov	r3, r2
 8017c30:	803b      	strh	r3, [r7, #0]
	uint8_t header[6] = { 0xB5, 0x62 };
 8017c32:	f246 23b5 	movw	r3, #25269	; 0x62b5
 8017c36:	60bb      	str	r3, [r7, #8]
 8017c38:	2300      	movs	r3, #0
 8017c3a:	81bb      	strh	r3, [r7, #12]

	if (p_owner->__tx.state != GUTS_IDLE) {
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d004      	beq.n	8017c50 <pifGpsUblox_SendUbxMsg+0x38>
		pif_error = E_INVALID_STATE;
 8017c46:	4b0f      	ldr	r3, [pc, #60]	; (8017c84 <pifGpsUblox_SendUbxMsg+0x6c>)
 8017c48:	2202      	movs	r2, #2
 8017c4a:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	e015      	b.n	8017c7c <pifGpsUblox_SendUbxMsg+0x64>
	}

	header[2] = class_id;
 8017c50:	78fb      	ldrb	r3, [r7, #3]
 8017c52:	72bb      	strb	r3, [r7, #10]
	header[3] = msg_id;
 8017c54:	78bb      	ldrb	r3, [r7, #2]
 8017c56:	72fb      	strb	r3, [r7, #11]
	header[4] = length & 0xFF;
 8017c58:	883b      	ldrh	r3, [r7, #0]
 8017c5a:	b2db      	uxtb	r3, r3
 8017c5c:	733b      	strb	r3, [r7, #12]
	header[5] = length >> 8;
 8017c5e:	883b      	ldrh	r3, [r7, #0]
 8017c60:	0a1b      	lsrs	r3, r3, #8
 8017c62:	b29b      	uxth	r3, r3
 8017c64:	b2db      	uxtb	r3, r3
 8017c66:	737b      	strb	r3, [r7, #13]

	return _makeUbxPacket(p_owner, header, length, payload, blocking);
 8017c68:	883a      	ldrh	r2, [r7, #0]
 8017c6a:	f107 0108 	add.w	r1, r7, #8
 8017c6e:	7f3b      	ldrb	r3, [r7, #28]
 8017c70:	9300      	str	r3, [sp, #0]
 8017c72:	69bb      	ldr	r3, [r7, #24]
 8017c74:	6878      	ldr	r0, [r7, #4]
 8017c76:	f7ff fe0b 	bl	8017890 <_makeUbxPacket>
 8017c7a:	4603      	mov	r3, r0
}
 8017c7c:	4618      	mov	r0, r3
 8017c7e:	3710      	adds	r7, #16
 8017c80:	46bd      	mov	sp, r7
 8017c82:	bd80      	pop	{r7, pc}
 8017c84:	20001de0 	.word	0x20001de0

08017c88 <_evtTimerRxTimeout>:

#if PIF_MSP_RECEIVE_TIMEOUT


static void _evtTimerRxTimeout(PifIssuerP p_issuer)
{
 8017c88:	b580      	push	{r7, lr}
 8017c8a:	b086      	sub	sp, #24
 8017c8c:	af02      	add	r7, sp, #8
 8017c8e:	6078      	str	r0, [r7, #4]
	if (!p_issuer) {
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d103      	bne.n	8017c9e <_evtTimerRxTimeout+0x16>
		pif_error = E_INVALID_PARAM;
 8017c96:	4b0e      	ldr	r3, [pc, #56]	; (8017cd0 <_evtTimerRxTimeout+0x48>)
 8017c98:	2201      	movs	r2, #1
 8017c9a:	701a      	strb	r2, [r3, #0]
		return;
 8017c9c:	e014      	b.n	8017cc8 <_evtTimerRxTimeout+0x40>
	}

	PifMsp* p_owner = (PifMsp *)p_issuer;
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	60fb      	str	r3, [r7, #12]

#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 8017ca2:	68fb      	ldr	r3, [r7, #12]
 8017ca4:	881b      	ldrh	r3, [r3, #0]
 8017ca6:	4619      	mov	r1, r3
			p_owner->__rx.state, p_owner->__rx.packet.data_count);
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	7a1b      	ldrb	r3, [r3, #8]
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 8017cac:	461a      	mov	r2, r3
			p_owner->__rx.state, p_owner->__rx.packet.data_count);
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	7d5b      	ldrb	r3, [r3, #21]
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 8017cb2:	9301      	str	r3, [sp, #4]
 8017cb4:	9200      	str	r2, [sp, #0]
 8017cb6:	460b      	mov	r3, r1
 8017cb8:	2216      	movs	r2, #22
 8017cba:	4906      	ldr	r1, [pc, #24]	; (8017cd4 <_evtTimerRxTimeout+0x4c>)
 8017cbc:	2004      	movs	r0, #4
 8017cbe:	f7fb ff9b 	bl	8013bf8 <pifLog_Printf>
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x %x %x %x", p_owner->__rx.p_packet[0], p_owner->__rx.p_packet[1],
			p_owner->__rx.p_packet[2], p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4], p_owner->__rx.p_packet[5],
			p_owner->__rx.p_packet[6], p_owner->__rx.p_packet[7]);
#endif
#endif
	p_owner->__rx.state = MRS_IDLE;
 8017cc2:	68fb      	ldr	r3, [r7, #12]
 8017cc4:	2200      	movs	r2, #0
 8017cc6:	721a      	strb	r2, [r3, #8]
}
 8017cc8:	3710      	adds	r7, #16
 8017cca:	46bd      	mov	sp, r7
 8017ccc:	bd80      	pop	{r7, pc}
 8017cce:	bf00      	nop
 8017cd0:	20001de0 	.word	0x20001de0
 8017cd4:	08028bdc 	.word	0x08028bdc

08017cd8 <_parsingPacket>:
};

#endif

static void _parsingPacket(PifMsp *p_owner, PifActCommReceiveData act_receive_data)
{
 8017cd8:	b590      	push	{r4, r7, lr}
 8017cda:	b08b      	sub	sp, #44	; 0x2c
 8017cdc:	af04      	add	r7, sp, #16
 8017cde:	6078      	str	r0, [r7, #4]
 8017ce0:	6039      	str	r1, [r7, #0]
	PifMspPacket* p_packet = &p_owner->__rx.packet;
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	3314      	adds	r3, #20
 8017ce6:	60fb      	str	r3, [r7, #12]
#ifndef __PIF_NO_LOG__
	int line;
#endif
	static uint8_t pre_error = PKT_ERR_NONE;

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8017ce8:	e0b1      	b.n	8017e4e <_parsingPacket+0x176>
		switch (p_owner->__rx.state) {
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	7a1b      	ldrb	r3, [r3, #8]
 8017cee:	2b05      	cmp	r3, #5
 8017cf0:	f200 80ac 	bhi.w	8017e4c <_parsingPacket+0x174>
 8017cf4:	a201      	add	r2, pc, #4	; (adr r2, 8017cfc <_parsingPacket+0x24>)
 8017cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017cfa:	bf00      	nop
 8017cfc:	08017d15 	.word	0x08017d15
 8017d00:	08017d5b 	.word	0x08017d5b
 8017d04:	08017d73 	.word	0x08017d73
 8017d08:	08017d8b 	.word	0x08017d8b
 8017d0c:	08017db7 	.word	0x08017db7
 8017d10:	08017ddf 	.word	0x08017ddf
		case MRS_IDLE:
			if (data == '$') {
 8017d14:	7afb      	ldrb	r3, [r7, #11]
 8017d16:	2b24      	cmp	r3, #36	; 0x24
 8017d18:	d109      	bne.n	8017d2e <_parsingPacket+0x56>
				p_owner->__rx.state = MRS_HEADER_CHAR_1;
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	2201      	movs	r2, #1
 8017d1e:	721a      	strb	r2, [r3, #8]
#if PIF_MSP_RECEIVE_TIMEOUT
				pifTimer_Start(p_owner->__rx.p_timer, PIF_MSP_RECEIVE_TIMEOUT);
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	6a1b      	ldr	r3, [r3, #32]
 8017d24:	21c8      	movs	r1, #200	; 0xc8
 8017d26:	4618      	mov	r0, r3
 8017d28:	f7fd fd44 	bl	80157b4 <pifTimer_Start>
 8017d2c:	e08f      	b.n	8017e4e <_parsingPacket+0x176>
#endif
			}
			else if (pre_error == PKT_ERR_NONE && p_owner->__evt_other_packet) {
 8017d2e:	4b65      	ldr	r3, [pc, #404]	; (8017ec4 <_parsingPacket+0x1ec>)
 8017d30:	781b      	ldrb	r3, [r3, #0]
 8017d32:	2b03      	cmp	r3, #3
 8017d34:	d10b      	bne.n	8017d4e <_parsingPacket+0x76>
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d007      	beq.n	8017d4e <_parsingPacket+0x76>
				(*p_owner->__evt_other_packet)(p_owner, data, p_owner->__p_issuer);
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017d42:	7af9      	ldrb	r1, [r7, #11]
 8017d44:	687a      	ldr	r2, [r7, #4]
 8017d46:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8017d48:	6878      	ldr	r0, [r7, #4]
 8017d4a:	4798      	blx	r3
 8017d4c:	e004      	b.n	8017d58 <_parsingPacket+0x80>
			}
			else {
				pkt_err = PKT_ERR_INVALID_DATA;
 8017d4e:	2301      	movs	r3, #1
 8017d50:	75fb      	strb	r3, [r7, #23]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
 8017d52:	234b      	movs	r3, #75	; 0x4b
 8017d54:	613b      	str	r3, [r7, #16]
#endif
				goto fail;
 8017d56:	e089      	b.n	8017e6c <_parsingPacket+0x194>
			}
			break;
 8017d58:	e079      	b.n	8017e4e <_parsingPacket+0x176>

		case MRS_HEADER_CHAR_1:
			if (data == 'M') {
 8017d5a:	7afb      	ldrb	r3, [r7, #11]
 8017d5c:	2b4d      	cmp	r3, #77	; 0x4d
 8017d5e:	d103      	bne.n	8017d68 <_parsingPacket+0x90>
				p_owner->__rx.state = MRS_HEADER_CHAR_2;
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	2202      	movs	r2, #2
 8017d64:	721a      	strb	r2, [r3, #8]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8017d66:	e072      	b.n	8017e4e <_parsingPacket+0x176>
				pkt_err = PKT_ERR_INVALID_DATA;
 8017d68:	2301      	movs	r3, #1
 8017d6a:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 8017d6c:	2358      	movs	r3, #88	; 0x58
 8017d6e:	613b      	str	r3, [r7, #16]
				goto fail;
 8017d70:	e07c      	b.n	8017e6c <_parsingPacket+0x194>

		case MRS_HEADER_CHAR_2:
			if (data == '<') {
 8017d72:	7afb      	ldrb	r3, [r7, #11]
 8017d74:	2b3c      	cmp	r3, #60	; 0x3c
 8017d76:	d103      	bne.n	8017d80 <_parsingPacket+0xa8>
				p_owner->__rx.state = MRS_DIRECTION;
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	2203      	movs	r2, #3
 8017d7c:	721a      	strb	r2, [r3, #8]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8017d7e:	e066      	b.n	8017e4e <_parsingPacket+0x176>
				pkt_err = PKT_ERR_INVALID_DATA;
 8017d80:	2301      	movs	r3, #1
 8017d82:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 8017d84:	2365      	movs	r3, #101	; 0x65
 8017d86:	613b      	str	r3, [r7, #16]
				goto fail;
 8017d88:	e070      	b.n	8017e6c <_parsingPacket+0x194>

		case MRS_DIRECTION:
			if (data < PIF_MSP_RX_PACKET_SIZE - 3) {
 8017d8a:	7afb      	ldrb	r3, [r7, #11]
 8017d8c:	2b7c      	cmp	r3, #124	; 0x7c
 8017d8e:	d80d      	bhi.n	8017dac <_parsingPacket+0xd4>
				p_packet->data_count = data;
 8017d90:	7afa      	ldrb	r2, [r7, #11]
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	705a      	strb	r2, [r3, #1]
				p_owner->__rx.p_packet[0] = data;
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	68db      	ldr	r3, [r3, #12]
 8017d9a:	7afa      	ldrb	r2, [r7, #11]
 8017d9c:	701a      	strb	r2, [r3, #0]
				p_owner->__rx.packet_count = 1;
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	2201      	movs	r2, #1
 8017da2:	741a      	strb	r2, [r3, #16]
				p_owner->__rx.state = MRS_LENGTH;
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	2204      	movs	r2, #4
 8017da8:	721a      	strb	r2, [r3, #8]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8017daa:	e050      	b.n	8017e4e <_parsingPacket+0x176>
				pkt_err = PKT_ERR_BIG_LENGHT;
 8017dac:	2300      	movs	r3, #0
 8017dae:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 8017db0:	2375      	movs	r3, #117	; 0x75
 8017db2:	613b      	str	r3, [r7, #16]
				goto fail;
 8017db4:	e05a      	b.n	8017e6c <_parsingPacket+0x194>

		case MRS_LENGTH:
			p_packet->command = data;
 8017db6:	7afa      	ldrb	r2, [r7, #11]
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.p_packet[p_owner->__rx.packet_count] = data;
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	68db      	ldr	r3, [r3, #12]
 8017dc0:	687a      	ldr	r2, [r7, #4]
 8017dc2:	7c12      	ldrb	r2, [r2, #16]
 8017dc4:	4413      	add	r3, r2
 8017dc6:	7afa      	ldrb	r2, [r7, #11]
 8017dc8:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.packet_count++;
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	7c1b      	ldrb	r3, [r3, #16]
 8017dce:	3301      	adds	r3, #1
 8017dd0:	b2da      	uxtb	r2, r3
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	741a      	strb	r2, [r3, #16]
			p_owner->__rx.state = MRS_MESSAGE_TYPE;
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	2205      	movs	r2, #5
 8017dda:	721a      	strb	r2, [r3, #8]
			break;
 8017ddc:	e037      	b.n	8017e4e <_parsingPacket+0x176>

		case MRS_MESSAGE_TYPE:
			p_owner->__rx.p_packet[p_owner->__rx.packet_count] = data;
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	68db      	ldr	r3, [r3, #12]
 8017de2:	687a      	ldr	r2, [r7, #4]
 8017de4:	7c12      	ldrb	r2, [r2, #16]
 8017de6:	4413      	add	r3, r2
 8017de8:	7afa      	ldrb	r2, [r7, #11]
 8017dea:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.packet_count++;
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	7c1b      	ldrb	r3, [r3, #16]
 8017df0:	3301      	adds	r3, #1
 8017df2:	b2da      	uxtb	r2, r3
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	741a      	strb	r2, [r3, #16]
			if (p_owner->__rx.packet_count >= 3 + p_packet->data_count) {
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	785b      	ldrb	r3, [r3, #1]
 8017dfc:	3302      	adds	r3, #2
 8017dfe:	687a      	ldr	r2, [r7, #4]
 8017e00:	7c12      	ldrb	r2, [r2, #16]
 8017e02:	4293      	cmp	r3, r2
 8017e04:	da23      	bge.n	8017e4e <_parsingPacket+0x176>
				if (data == pifCheckXor(p_owner->__rx.p_packet, 2 + p_packet->data_count)) {
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	68da      	ldr	r2, [r3, #12]
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	785b      	ldrb	r3, [r3, #1]
 8017e0e:	b29b      	uxth	r3, r3
 8017e10:	3302      	adds	r3, #2
 8017e12:	b29b      	uxth	r3, r3
 8017e14:	4619      	mov	r1, r3
 8017e16:	4610      	mov	r0, r2
 8017e18:	f7fa fa4e 	bl	80122b8 <pifCheckXor>
 8017e1c:	4603      	mov	r3, r0
 8017e1e:	461a      	mov	r2, r3
 8017e20:	7afb      	ldrb	r3, [r7, #11]
 8017e22:	429a      	cmp	r2, r3
 8017e24:	d10d      	bne.n	8017e42 <_parsingPacket+0x16a>
#if PIF_MSP_RECEIVE_TIMEOUT
					pifTimer_Stop(p_owner->__rx.p_timer);
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	6a1b      	ldr	r3, [r3, #32]
 8017e2a:	4618      	mov	r0, r3
 8017e2c:	f7fd fcf0 	bl	8015810 <pifTimer_Stop>
#endif
					p_packet->p_data = p_owner->__rx.p_packet + 2;
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	68db      	ldr	r3, [r3, #12]
 8017e34:	1c9a      	adds	r2, r3, #2
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	605a      	str	r2, [r3, #4]
					p_owner->__rx.state = MRS_DONE;
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	2206      	movs	r2, #6
 8017e3e:	721a      	strb	r2, [r3, #8]
					return;
 8017e40:	e03c      	b.n	8017ebc <_parsingPacket+0x1e4>
				}
				else {
					pkt_err = PKT_ERR_WRONG_CRC;
 8017e42:	2302      	movs	r3, #2
 8017e44:	75fb      	strb	r3, [r7, #23]
#ifndef __PIF_NO_LOG__
					line = __LINE__;
 8017e46:	2391      	movs	r3, #145	; 0x91
 8017e48:	613b      	str	r3, [r7, #16]
#endif
					goto fail;
 8017e4a:	e00f      	b.n	8017e6c <_parsingPacket+0x194>
				}
			}
			break;

		default:
			break;
 8017e4c:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	685a      	ldr	r2, [r3, #4]
 8017e52:	f107 010b 	add.w	r1, r7, #11
 8017e56:	683b      	ldr	r3, [r7, #0]
 8017e58:	4610      	mov	r0, r2
 8017e5a:	4798      	blx	r3
 8017e5c:	4603      	mov	r3, r0
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	f47f af43 	bne.w	8017cea <_parsingPacket+0x12>
		}
	}
	pre_error = PKT_ERR_NONE;
 8017e64:	4b17      	ldr	r3, [pc, #92]	; (8017ec4 <_parsingPacket+0x1ec>)
 8017e66:	2203      	movs	r2, #3
 8017e68:	701a      	strb	r2, [r3, #0]
	return;
 8017e6a:	e027      	b.n	8017ebc <_parsingPacket+0x1e4>

fail:
	if (pkt_err != pre_error) {
 8017e6c:	4b15      	ldr	r3, [pc, #84]	; (8017ec4 <_parsingPacket+0x1ec>)
 8017e6e:	781b      	ldrb	r3, [r3, #0]
 8017e70:	7dfa      	ldrb	r2, [r7, #23]
 8017e72:	429a      	cmp	r2, r3
 8017e74:	d01a      	beq.n	8017eac <_parsingPacket+0x1d4>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	881b      	ldrh	r3, [r3, #0]
 8017e7a:	461c      	mov	r4, r3
 8017e7c:	7dfb      	ldrb	r3, [r7, #23]
 8017e7e:	4a12      	ldr	r2, [pc, #72]	; (8017ec8 <_parsingPacket+0x1f0>)
 8017e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017e84:	7afa      	ldrb	r2, [r7, #11]
 8017e86:	4611      	mov	r1, r2
				p_owner->__rx.state, p_packet->data_count);
 8017e88:	687a      	ldr	r2, [r7, #4]
 8017e8a:	7a12      	ldrb	r2, [r2, #8]
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 8017e8c:	4610      	mov	r0, r2
				p_owner->__rx.state, p_packet->data_count);
 8017e8e:	68fa      	ldr	r2, [r7, #12]
 8017e90:	7852      	ldrb	r2, [r2, #1]
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 8017e92:	9203      	str	r2, [sp, #12]
 8017e94:	9002      	str	r0, [sp, #8]
 8017e96:	9101      	str	r1, [sp, #4]
 8017e98:	9300      	str	r3, [sp, #0]
 8017e9a:	4623      	mov	r3, r4
 8017e9c:	693a      	ldr	r2, [r7, #16]
 8017e9e:	490b      	ldr	r1, [pc, #44]	; (8017ecc <_parsingPacket+0x1f4>)
 8017ea0:	2004      	movs	r0, #4
 8017ea2:	f7fb fea9 	bl	8013bf8 <pifLog_Printf>
#endif
		pre_error = pkt_err;
 8017ea6:	4a07      	ldr	r2, [pc, #28]	; (8017ec4 <_parsingPacket+0x1ec>)
 8017ea8:	7dfb      	ldrb	r3, [r7, #23]
 8017eaa:	7013      	strb	r3, [r2, #0]
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x", p_owner->__rx.p_packet[0], p_owner->__rx.p_packet[1], p_owner->__rx.p_packet[2],
			p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4]);
#endif

#if PIF_MSP_RECEIVE_TIMEOUT
   	pifTimer_Stop(p_owner->__rx.p_timer);
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	6a1b      	ldr	r3, [r3, #32]
 8017eb0:	4618      	mov	r0, r3
 8017eb2:	f7fd fcad 	bl	8015810 <pifTimer_Stop>
#endif
	p_owner->__rx.state = MRS_IDLE;
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	2200      	movs	r2, #0
 8017eba:	721a      	strb	r2, [r3, #8]
}
 8017ebc:	371c      	adds	r7, #28
 8017ebe:	46bd      	mov	sp, r7
 8017ec0:	bd90      	pop	{r4, r7, pc}
 8017ec2:	bf00      	nop
 8017ec4:	20000158 	.word	0x20000158
 8017ec8:	2000014c 	.word	0x2000014c
 8017ecc:	08028c38 	.word	0x08028c38

08017ed0 <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 8017ed0:	b580      	push	{r7, lr}
 8017ed2:	b084      	sub	sp, #16
 8017ed4:	af00      	add	r7, sp, #0
 8017ed6:	6078      	str	r0, [r7, #4]
 8017ed8:	6039      	str	r1, [r7, #0]
	PifMsp *p_owner = (PifMsp *)p_client;
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	60fb      	str	r3, [r7, #12]

    if (p_owner->__rx.state < MRS_DONE) {
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	7a1b      	ldrb	r3, [r3, #8]
 8017ee2:	2b05      	cmp	r3, #5
 8017ee4:	d803      	bhi.n	8017eee <_evtParsing+0x1e>
    	_parsingPacket(p_owner, act_receive_data);
 8017ee6:	6839      	ldr	r1, [r7, #0]
 8017ee8:	68f8      	ldr	r0, [r7, #12]
 8017eea:	f7ff fef5 	bl	8017cd8 <_parsingPacket>
    }

    if (p_owner->__rx.state == MRS_DONE) {
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	7a1b      	ldrb	r3, [r3, #8]
 8017ef2:	2b06      	cmp	r3, #6
 8017ef4:	d119      	bne.n	8017f2a <_evtParsing+0x5a>
    	pifLog_Printf(LT_NONE, "\n%u> %x %x %x %x %x", p_owner->_id, p_owner->__rx.p_packet[0],	p_owner->__rx.p_packet[1],
    			p_owner->__rx.p_packet[2], p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4]);
#endif
#endif

		p_owner->__rx.packet.p_pointer = p_owner->__rx.packet.p_data;
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	699a      	ldr	r2, [r3, #24]
 8017efa:	68fb      	ldr	r3, [r7, #12]
 8017efc:	61da      	str	r2, [r3, #28]
    	if (p_owner->__evt_receive) (*p_owner->__evt_receive)(p_owner, &p_owner->__rx.packet, p_owner->__p_issuer);
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d008      	beq.n	8017f18 <_evtParsing+0x48>
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017f0a:	68fa      	ldr	r2, [r7, #12]
 8017f0c:	f102 0114 	add.w	r1, r2, #20
 8017f10:	68fa      	ldr	r2, [r7, #12]
 8017f12:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8017f14:	68f8      	ldr	r0, [r7, #12]
 8017f16:	4798      	blx	r3
    	pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 8017f18:	68fb      	ldr	r3, [r7, #12]
 8017f1a:	685b      	ldr	r3, [r3, #4]
 8017f1c:	69db      	ldr	r3, [r3, #28]
 8017f1e:	4618      	mov	r0, r3
 8017f20:	f7fc ff06 	bl	8014d30 <pifTask_SetTrigger>
    	p_owner->__rx.state = MRS_IDLE;
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	2200      	movs	r2, #0
 8017f28:	721a      	strb	r2, [r3, #8]
    }
}
 8017f2a:	bf00      	nop
 8017f2c:	3710      	adds	r7, #16
 8017f2e:	46bd      	mov	sp, r7
 8017f30:	bd80      	pop	{r7, pc}

08017f32 <_evtSending>:

static BOOL _evtSending(void *p_client, PifActCommSendData act_send_data)
{
 8017f32:	b5b0      	push	{r4, r5, r7, lr}
 8017f34:	b084      	sub	sp, #16
 8017f36:	af00      	add	r7, sp, #0
 8017f38:	6078      	str	r0, [r7, #4]
 8017f3a:	6039      	str	r1, [r7, #0]
	PifMsp *p_owner = (PifMsp *)p_client;
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	if (p_owner->__rx.state != MRS_IDLE) return FALSE;
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	7a1b      	ldrb	r3, [r3, #8]
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d001      	beq.n	8017f4c <_evtSending+0x1a>
 8017f48:	2300      	movs	r3, #0
 8017f4a:	e06f      	b.n	801802c <_evtSending+0xfa>

	switch (p_owner->__tx.state) {
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d002      	beq.n	8017f5c <_evtSending+0x2a>
 8017f56:	2b01      	cmp	r3, #1
 8017f58:	d021      	beq.n	8017f9e <_evtSending+0x6c>
			p_owner->__tx.state = MTS_IDLE;
		}
		return TRUE;

	default:
		break;
 8017f5a:	e066      	b.n	801802a <_evtSending+0xf8>
		if (!pifRingBuffer_IsEmpty(&p_owner->__tx.answer_buffer)) {
 8017f5c:	68fb      	ldr	r3, [r7, #12]
 8017f5e:	3324      	adds	r3, #36	; 0x24
 8017f60:	4618      	mov	r0, r3
 8017f62:	f7fc f88a 	bl	801407a <pifRingBuffer_IsEmpty>
 8017f66:	4603      	mov	r3, r0
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d15d      	bne.n	8018028 <_evtSending+0xf6>
			p_owner->__tx.length = pifRingBuffer_GetFillSize(&p_owner->__tx.answer_buffer);
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	3324      	adds	r3, #36	; 0x24
 8017f70:	4618      	mov	r0, r3
 8017f72:	f7fc f895 	bl	80140a0 <pifRingBuffer_GetFillSize>
 8017f76:	4603      	mov	r3, r0
 8017f78:	461a      	mov	r2, r3
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			p_owner->__tx.pos = 0;
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	2200      	movs	r2, #0
 8017f84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			p_owner->__tx.state = MTS_SENDING;
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	2201      	movs	r2, #1
 8017f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	685b      	ldr	r3, [r3, #4]
 8017f94:	69db      	ldr	r3, [r3, #28]
 8017f96:	4618      	mov	r0, r3
 8017f98:	f7fc feca 	bl	8014d30 <pifTask_SetTrigger>
		break;
 8017f9c:	e044      	b.n	8018028 <_evtSending+0xf6>
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.answer_buffer, p_owner->__tx.pos),
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	685c      	ldr	r4, [r3, #4]
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8017fae:	4619      	mov	r1, r3
 8017fb0:	4610      	mov	r0, r2
 8017fb2:	f7fc f836 	bl	8014022 <pifRingBuffer_GetTailPointer>
 8017fb6:	4605      	mov	r5, r0
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8017fbe:	68fb      	ldr	r3, [r7, #12]
 8017fc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8017fc4:	4619      	mov	r1, r3
 8017fc6:	4610      	mov	r0, r2
 8017fc8:	f7fc f88c 	bl	80140e4 <pifRingBuffer_GetLinerSize>
 8017fcc:	4603      	mov	r3, r0
 8017fce:	461a      	mov	r2, r3
 8017fd0:	683b      	ldr	r3, [r7, #0]
 8017fd2:	4629      	mov	r1, r5
 8017fd4:	4620      	mov	r0, r4
 8017fd6:	4798      	blx	r3
 8017fd8:	4603      	mov	r3, r0
 8017fda:	817b      	strh	r3, [r7, #10]
		if (!length) return FALSE;
 8017fdc:	897b      	ldrh	r3, [r7, #10]
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d101      	bne.n	8017fe6 <_evtSending+0xb4>
 8017fe2:	2300      	movs	r3, #0
 8017fe4:	e022      	b.n	801802c <_evtSending+0xfa>
		p_owner->__tx.pos += length;
 8017fe6:	68fb      	ldr	r3, [r7, #12]
 8017fe8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8017fec:	897b      	ldrh	r3, [r7, #10]
 8017fee:	4413      	add	r3, r2
 8017ff0:	b29a      	uxth	r2, r3
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (p_owner->__tx.pos >= p_owner->__tx.length) {
 8017ff8:	68fb      	ldr	r3, [r7, #12]
 8017ffa:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8018004:	429a      	cmp	r2, r3
 8018006:	d30d      	bcc.n	8018024 <_evtSending+0xf2>
			pifRingBuffer_Remove(&p_owner->__tx.answer_buffer, p_owner->__tx.pos);
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8018014:	4619      	mov	r1, r3
 8018016:	4610      	mov	r0, r2
 8018018:	f7fc fa41 	bl	801449e <pifRingBuffer_Remove>
			p_owner->__tx.state = MTS_IDLE;
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	2200      	movs	r2, #0
 8018020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return TRUE;
 8018024:	2301      	movs	r3, #1
 8018026:	e001      	b.n	801802c <_evtSending+0xfa>
		break;
 8018028:	bf00      	nop
	}
	return FALSE;
 801802a:	2300      	movs	r3, #0
}
 801802c:	4618      	mov	r0, r3
 801802e:	3710      	adds	r7, #16
 8018030:	46bd      	mov	sp, r7
 8018032:	bdb0      	pop	{r4, r5, r7, pc}

08018034 <pifMsp_Init>:

BOOL pifMsp_Init(PifMsp* p_owner, PifTimerManager* p_timer, PifId id)
{
 8018034:	b580      	push	{r7, lr}
 8018036:	b086      	sub	sp, #24
 8018038:	af02      	add	r7, sp, #8
 801803a:	60f8      	str	r0, [r7, #12]
 801803c:	60b9      	str	r1, [r7, #8]
 801803e:	4613      	mov	r3, r2
 8018040:	80fb      	strh	r3, [r7, #6]
    if (!p_timer) {
 8018042:	68bb      	ldr	r3, [r7, #8]
 8018044:	2b00      	cmp	r3, #0
 8018046:	d103      	bne.n	8018050 <pifMsp_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8018048:	4b2c      	ldr	r3, [pc, #176]	; (80180fc <pifMsp_Init+0xc8>)
 801804a:	2201      	movs	r2, #1
 801804c:	701a      	strb	r2, [r3, #0]
		goto fail;
 801804e:	e042      	b.n	80180d6 <pifMsp_Init+0xa2>
	}

	memset(p_owner, 0, sizeof(PifMsp));
 8018050:	2258      	movs	r2, #88	; 0x58
 8018052:	2100      	movs	r1, #0
 8018054:	68f8      	ldr	r0, [r7, #12]
 8018056:	f00b ff31 	bl	8023ebc <memset>

    p_owner->__rx.p_packet = calloc(sizeof(uint8_t), PIF_MSP_RX_PACKET_SIZE);
 801805a:	2180      	movs	r1, #128	; 0x80
 801805c:	2001      	movs	r0, #1
 801805e:	f00b fedd 	bl	8023e1c <calloc>
 8018062:	4603      	mov	r3, r0
 8018064:	461a      	mov	r2, r3
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	60da      	str	r2, [r3, #12]
    if (!p_owner->__rx.p_packet) {
 801806a:	68fb      	ldr	r3, [r7, #12]
 801806c:	68db      	ldr	r3, [r3, #12]
 801806e:	2b00      	cmp	r3, #0
 8018070:	d103      	bne.n	801807a <pifMsp_Init+0x46>
        pif_error = E_OUT_OF_HEAP;
 8018072:	4b22      	ldr	r3, [pc, #136]	; (80180fc <pifMsp_Init+0xc8>)
 8018074:	2203      	movs	r2, #3
 8018076:	701a      	strb	r2, [r3, #0]
        goto fail;
 8018078:	e02d      	b.n	80180d6 <pifMsp_Init+0xa2>
    }

    if (!pifRingBuffer_InitHeap(&p_owner->__tx.answer_buffer, PIF_ID_AUTO, PIF_MSP_TX_ANSWER_SIZE)) goto fail;
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	3324      	adds	r3, #36	; 0x24
 801807e:	2280      	movs	r2, #128	; 0x80
 8018080:	2100      	movs	r1, #0
 8018082:	4618      	mov	r0, r3
 8018084:	f7fb ff5a 	bl	8013f3c <pifRingBuffer_InitHeap>
 8018088:	4603      	mov	r3, r0
 801808a:	2b00      	cmp	r3, #0
 801808c:	d020      	beq.n	80180d0 <pifMsp_Init+0x9c>

#if PIF_MSP_RECEIVE_TIMEOUT
    p_owner->__rx.p_timer = pifTimerManager_Add(p_timer, TT_ONCE);
 801808e:	2100      	movs	r1, #0
 8018090:	68b8      	ldr	r0, [r7, #8]
 8018092:	f7fd fb57 	bl	8015744 <pifTimerManager_Add>
 8018096:	4602      	mov	r2, r0
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	621a      	str	r2, [r3, #32]
    if (!p_owner->__rx.p_timer) goto fail;
 801809c:	68fb      	ldr	r3, [r7, #12]
 801809e:	6a1b      	ldr	r3, [r3, #32]
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d017      	beq.n	80180d4 <pifMsp_Init+0xa0>
    pifTimer_AttachEvtFinish(p_owner->__rx.p_timer, _evtTimerRxTimeout, p_owner);
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	6a1b      	ldr	r3, [r3, #32]
 80180a8:	68fa      	ldr	r2, [r7, #12]
 80180aa:	4915      	ldr	r1, [pc, #84]	; (8018100 <pifMsp_Init+0xcc>)
 80180ac:	4618      	mov	r0, r3
 80180ae:	f7fd fc76 	bl	801599e <pifTimer_AttachEvtFinish>
#endif

    if (id == PIF_ID_AUTO) id = pif_id++;
 80180b2:	88fb      	ldrh	r3, [r7, #6]
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d106      	bne.n	80180c6 <pifMsp_Init+0x92>
 80180b8:	4b12      	ldr	r3, [pc, #72]	; (8018104 <pifMsp_Init+0xd0>)
 80180ba:	881b      	ldrh	r3, [r3, #0]
 80180bc:	1c5a      	adds	r2, r3, #1
 80180be:	b291      	uxth	r1, r2
 80180c0:	4a10      	ldr	r2, [pc, #64]	; (8018104 <pifMsp_Init+0xd0>)
 80180c2:	8011      	strh	r1, [r2, #0]
 80180c4:	80fb      	strh	r3, [r7, #6]
    p_owner->_id = id;
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	88fa      	ldrh	r2, [r7, #6]
 80180ca:	801a      	strh	r2, [r3, #0]
    return TRUE;
 80180cc:	2301      	movs	r3, #1
 80180ce:	e010      	b.n	80180f2 <pifMsp_Init+0xbe>
    if (!pifRingBuffer_InitHeap(&p_owner->__tx.answer_buffer, PIF_ID_AUTO, PIF_MSP_TX_ANSWER_SIZE)) goto fail;
 80180d0:	bf00      	nop
 80180d2:	e000      	b.n	80180d6 <pifMsp_Init+0xa2>
    if (!p_owner->__rx.p_timer) goto fail;
 80180d4:	bf00      	nop

fail:
	pifMsp_Clear(p_owner);
 80180d6:	68f8      	ldr	r0, [r7, #12]
 80180d8:	f000 f818 	bl	801810c <pifMsp_Clear>
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, id, pif_error);
 80180dc:	88fb      	ldrh	r3, [r7, #6]
 80180de:	4a07      	ldr	r2, [pc, #28]	; (80180fc <pifMsp_Init+0xc8>)
 80180e0:	7812      	ldrb	r2, [r2, #0]
 80180e2:	9200      	str	r2, [sp, #0]
 80180e4:	f44f 7285 	mov.w	r2, #266	; 0x10a
 80180e8:	4907      	ldr	r1, [pc, #28]	; (8018108 <pifMsp_Init+0xd4>)
 80180ea:	2004      	movs	r0, #4
 80180ec:	f7fb fd84 	bl	8013bf8 <pifLog_Printf>
#endif
    return FALSE;
 80180f0:	2300      	movs	r3, #0
}
 80180f2:	4618      	mov	r0, r3
 80180f4:	3710      	adds	r7, #16
 80180f6:	46bd      	mov	sp, r7
 80180f8:	bd80      	pop	{r7, pc}
 80180fa:	bf00      	nop
 80180fc:	20001de0 	.word	0x20001de0
 8018100:	08017c89 	.word	0x08017c89
 8018104:	20000128 	.word	0x20000128
 8018108:	08028c5c 	.word	0x08028c5c

0801810c <pifMsp_Clear>:

void pifMsp_Clear(PifMsp* p_owner)
{
 801810c:	b580      	push	{r7, lr}
 801810e:	b082      	sub	sp, #8
 8018110:	af00      	add	r7, sp, #0
 8018112:	6078      	str	r0, [r7, #4]
	if (p_owner->__rx.p_packet) {
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	68db      	ldr	r3, [r3, #12]
 8018118:	2b00      	cmp	r3, #0
 801811a:	d007      	beq.n	801812c <pifMsp_Clear+0x20>
		free(p_owner->__rx.p_packet);
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	68db      	ldr	r3, [r3, #12]
 8018120:	4618      	mov	r0, r3
 8018122:	f00b feb5 	bl	8023e90 <free>
		p_owner->__rx.p_packet = NULL;
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	2200      	movs	r2, #0
 801812a:	60da      	str	r2, [r3, #12]
	}
	pifRingBuffer_Clear(&p_owner->__tx.answer_buffer);
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	3324      	adds	r3, #36	; 0x24
 8018130:	4618      	mov	r0, r3
 8018132:	f7fb ff4d 	bl	8013fd0 <pifRingBuffer_Clear>
#if PIF_MSP_RECEIVE_TIMEOUT
	if (p_owner->__rx.p_timer) {
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	6a1b      	ldr	r3, [r3, #32]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d004      	beq.n	8018148 <pifMsp_Clear+0x3c>
		pifTimerManager_Remove(p_owner->__rx.p_timer);
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	6a1b      	ldr	r3, [r3, #32]
 8018142:	4618      	mov	r0, r3
 8018144:	f7fd fb1a 	bl	801577c <pifTimerManager_Remove>
	}
#endif
}
 8018148:	bf00      	nop
 801814a:	3708      	adds	r7, #8
 801814c:	46bd      	mov	sp, r7
 801814e:	bd80      	pop	{r7, pc}

08018150 <pifMsp_AttachComm>:

void pifMsp_AttachComm(PifMsp* p_owner, PifComm *p_comm)
{
 8018150:	b580      	push	{r7, lr}
 8018152:	b082      	sub	sp, #8
 8018154:	af00      	add	r7, sp, #0
 8018156:	6078      	str	r0, [r7, #4]
 8018158:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	683a      	ldr	r2, [r7, #0]
 801815e:	605a      	str	r2, [r3, #4]
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, _evtSending);
 8018160:	4b04      	ldr	r3, [pc, #16]	; (8018174 <pifMsp_AttachComm+0x24>)
 8018162:	4a05      	ldr	r2, [pc, #20]	; (8018178 <pifMsp_AttachComm+0x28>)
 8018164:	6879      	ldr	r1, [r7, #4]
 8018166:	6838      	ldr	r0, [r7, #0]
 8018168:	f7fa f9fe 	bl	8012568 <pifComm_AttachClient>
}
 801816c:	bf00      	nop
 801816e:	3708      	adds	r7, #8
 8018170:	46bd      	mov	sp, r7
 8018172:	bd80      	pop	{r7, pc}
 8018174:	08017f33 	.word	0x08017f33
 8018178:	08017ed1 	.word	0x08017ed1

0801817c <pifMsp_DetachComm>:

void pifMsp_DetachComm(PifMsp* p_owner)
{
 801817c:	b580      	push	{r7, lr}
 801817e:	b082      	sub	sp, #8
 8018180:	af00      	add	r7, sp, #0
 8018182:	6078      	str	r0, [r7, #4]
	pifComm_DetachClient(p_owner->__p_comm);
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	685b      	ldr	r3, [r3, #4]
 8018188:	4618      	mov	r0, r3
 801818a:	f7fa fa03 	bl	8012594 <pifComm_DetachClient>
	p_owner->__p_comm = NULL;
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	2200      	movs	r2, #0
 8018192:	605a      	str	r2, [r3, #4]
}
 8018194:	bf00      	nop
 8018196:	3708      	adds	r7, #8
 8018198:	46bd      	mov	sp, r7
 801819a:	bd80      	pop	{r7, pc}

0801819c <pifMsp_AttachEvtReceive>:

void pifMsp_AttachEvtReceive(PifMsp* p_owner, PifEvtMspReceive evt_receive, PifEvtMspOtherPacket evt_other_packet, PifIssuerP p_issuer)
{
 801819c:	b480      	push	{r7}
 801819e:	b085      	sub	sp, #20
 80181a0:	af00      	add	r7, sp, #0
 80181a2:	60f8      	str	r0, [r7, #12]
 80181a4:	60b9      	str	r1, [r7, #8]
 80181a6:	607a      	str	r2, [r7, #4]
 80181a8:	603b      	str	r3, [r7, #0]
	p_owner->__evt_receive = evt_receive;
 80181aa:	68fb      	ldr	r3, [r7, #12]
 80181ac:	68ba      	ldr	r2, [r7, #8]
 80181ae:	651a      	str	r2, [r3, #80]	; 0x50
	p_owner->__evt_other_packet = evt_other_packet;
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	687a      	ldr	r2, [r7, #4]
 80181b4:	655a      	str	r2, [r3, #84]	; 0x54
	p_owner->__p_issuer = p_issuer;
 80181b6:	68fb      	ldr	r3, [r7, #12]
 80181b8:	683a      	ldr	r2, [r7, #0]
 80181ba:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80181bc:	bf00      	nop
 80181be:	3714      	adds	r7, #20
 80181c0:	46bd      	mov	sp, r7
 80181c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181c6:	4770      	bx	lr

080181c8 <pifMsp_ReadData8>:

uint8_t pifMsp_ReadData8(PifMspPacket* p_packet)
{
 80181c8:	b480      	push	{r7}
 80181ca:	b085      	sub	sp, #20
 80181cc:	af00      	add	r7, sp, #0
 80181ce:	6078      	str	r0, [r7, #4]
	uint8_t data;

	data = p_packet->p_pointer[0];
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	689b      	ldr	r3, [r3, #8]
 80181d4:	781b      	ldrb	r3, [r3, #0]
 80181d6:	73fb      	strb	r3, [r7, #15]
	p_packet->p_pointer++;
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	689b      	ldr	r3, [r3, #8]
 80181dc:	1c5a      	adds	r2, r3, #1
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	609a      	str	r2, [r3, #8]
	return data;
 80181e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80181e4:	4618      	mov	r0, r3
 80181e6:	3714      	adds	r7, #20
 80181e8:	46bd      	mov	sp, r7
 80181ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ee:	4770      	bx	lr

080181f0 <pifMsp_ReadData16>:

uint16_t pifMsp_ReadData16(PifMspPacket* p_packet)
{
 80181f0:	b480      	push	{r7}
 80181f2:	b085      	sub	sp, #20
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	6078      	str	r0, [r7, #4]
	uint16_t data;

	data = p_packet->p_pointer[0] | (p_packet->p_pointer[1] << 8);
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	689b      	ldr	r3, [r3, #8]
 80181fc:	781b      	ldrb	r3, [r3, #0]
 80181fe:	b21a      	sxth	r2, r3
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	689b      	ldr	r3, [r3, #8]
 8018204:	3301      	adds	r3, #1
 8018206:	781b      	ldrb	r3, [r3, #0]
 8018208:	021b      	lsls	r3, r3, #8
 801820a:	b21b      	sxth	r3, r3
 801820c:	4313      	orrs	r3, r2
 801820e:	b21b      	sxth	r3, r3
 8018210:	81fb      	strh	r3, [r7, #14]
	p_packet->p_pointer += 2;
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	689b      	ldr	r3, [r3, #8]
 8018216:	1c9a      	adds	r2, r3, #2
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	609a      	str	r2, [r3, #8]
	return data;
 801821c:	89fb      	ldrh	r3, [r7, #14]
}
 801821e:	4618      	mov	r0, r3
 8018220:	3714      	adds	r7, #20
 8018222:	46bd      	mov	sp, r7
 8018224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018228:	4770      	bx	lr

0801822a <pifMsp_ReadData32>:

uint32_t pifMsp_ReadData32(PifMspPacket* p_packet)
{
 801822a:	b480      	push	{r7}
 801822c:	b085      	sub	sp, #20
 801822e:	af00      	add	r7, sp, #0
 8018230:	6078      	str	r0, [r7, #4]
	uint32_t data;

	data = p_packet->p_pointer[0] | (p_packet->p_pointer[1] << 8) | (p_packet->p_pointer[2] << 16) | (p_packet->p_pointer[3] << 24);
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	689b      	ldr	r3, [r3, #8]
 8018236:	781b      	ldrb	r3, [r3, #0]
 8018238:	461a      	mov	r2, r3
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	689b      	ldr	r3, [r3, #8]
 801823e:	3301      	adds	r3, #1
 8018240:	781b      	ldrb	r3, [r3, #0]
 8018242:	021b      	lsls	r3, r3, #8
 8018244:	431a      	orrs	r2, r3
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	689b      	ldr	r3, [r3, #8]
 801824a:	3302      	adds	r3, #2
 801824c:	781b      	ldrb	r3, [r3, #0]
 801824e:	041b      	lsls	r3, r3, #16
 8018250:	431a      	orrs	r2, r3
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	689b      	ldr	r3, [r3, #8]
 8018256:	3303      	adds	r3, #3
 8018258:	781b      	ldrb	r3, [r3, #0]
 801825a:	061b      	lsls	r3, r3, #24
 801825c:	4313      	orrs	r3, r2
 801825e:	60fb      	str	r3, [r7, #12]
	p_packet->p_pointer += 4;
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	689b      	ldr	r3, [r3, #8]
 8018264:	1d1a      	adds	r2, r3, #4
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	609a      	str	r2, [r3, #8]
	return data;
 801826a:	68fb      	ldr	r3, [r7, #12]
}
 801826c:	4618      	mov	r0, r3
 801826e:	3714      	adds	r7, #20
 8018270:	46bd      	mov	sp, r7
 8018272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018276:	4770      	bx	lr

08018278 <pifMsp_MakeAnswer>:
	}
	p_packet->p_pointer += size;
}

BOOL pifMsp_MakeAnswer(PifMsp* p_owner, PifMspPacket* p_question)
{
 8018278:	b580      	push	{r7, lr}
 801827a:	b086      	sub	sp, #24
 801827c:	af02      	add	r7, sp, #8
 801827e:	6078      	str	r0, [r7, #4]
 8018280:	6039      	str	r1, [r7, #0]
	uint8_t header[5];

	pifRingBuffer_BeginPutting(&p_owner->__tx.answer_buffer);
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	3324      	adds	r3, #36	; 0x24
 8018286:	4618      	mov	r0, r3
 8018288:	f7fb ff79 	bl	801417e <pifRingBuffer_BeginPutting>

	header[0] = '$';
 801828c:	2324      	movs	r3, #36	; 0x24
 801828e:	723b      	strb	r3, [r7, #8]
	header[1] = 'M';
 8018290:	234d      	movs	r3, #77	; 0x4d
 8018292:	727b      	strb	r3, [r7, #9]
	header[2] = '>';
 8018294:	233e      	movs	r3, #62	; 0x3e
 8018296:	72bb      	strb	r3, [r7, #10]
	header[3] = 0;
 8018298:	2300      	movs	r3, #0
 801829a:	72fb      	strb	r3, [r7, #11]
	header[4] = p_question->command;
 801829c:	683b      	ldr	r3, [r7, #0]
 801829e:	781b      	ldrb	r3, [r3, #0]
 80182a0:	733b      	strb	r3, [r7, #12]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	3324      	adds	r3, #36	; 0x24
 80182a6:	f107 0108 	add.w	r1, r7, #8
 80182aa:	2205      	movs	r2, #5
 80182ac:	4618      	mov	r0, r3
 80182ae:	f7fb ffed 	bl	801428c <pifRingBuffer_PutData>
 80182b2:	4603      	mov	r3, r0
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d009      	beq.n	80182cc <pifMsp_MakeAnswer+0x54>
	p_owner->__check_xor = header[4];
 80182b8:	7b3a      	ldrb	r2, [r7, #12]
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size = 0;
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	2200      	movs	r2, #0
 80182c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 80182c8:	2301      	movs	r3, #1
 80182ca:	e01e      	b.n	801830a <pifMsp_MakeAnswer+0x92>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 80182cc:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	3324      	adds	r3, #36	; 0x24
 80182d2:	4618      	mov	r0, r3
 80182d4:	f7fb ff79 	bl	80141ca <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 80182d8:	4b0e      	ldr	r3, [pc, #56]	; (8018314 <pifMsp_MakeAnswer+0x9c>)
 80182da:	781b      	ldrb	r3, [r3, #0]
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d102      	bne.n	80182e6 <pifMsp_MakeAnswer+0x6e>
 80182e0:	4b0c      	ldr	r3, [pc, #48]	; (8018314 <pifMsp_MakeAnswer+0x9c>)
 80182e2:	2204      	movs	r2, #4
 80182e4:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) C:%u EC:%d", __LINE__, p_owner->_id, p_question->command, pif_error);
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	881b      	ldrh	r3, [r3, #0]
 80182ea:	4619      	mov	r1, r3
 80182ec:	683b      	ldr	r3, [r7, #0]
 80182ee:	781b      	ldrb	r3, [r3, #0]
 80182f0:	461a      	mov	r2, r3
 80182f2:	4b08      	ldr	r3, [pc, #32]	; (8018314 <pifMsp_MakeAnswer+0x9c>)
 80182f4:	781b      	ldrb	r3, [r3, #0]
 80182f6:	9301      	str	r3, [sp, #4]
 80182f8:	9200      	str	r2, [sp, #0]
 80182fa:	460b      	mov	r3, r1
 80182fc:	f240 1269 	movw	r2, #361	; 0x169
 8018300:	4905      	ldr	r1, [pc, #20]	; (8018318 <pifMsp_MakeAnswer+0xa0>)
 8018302:	2004      	movs	r0, #4
 8018304:	f7fb fc78 	bl	8013bf8 <pifLog_Printf>
#endif
	return FALSE;
 8018308:	2300      	movs	r3, #0
}
 801830a:	4618      	mov	r0, r3
 801830c:	3710      	adds	r7, #16
 801830e:	46bd      	mov	sp, r7
 8018310:	bd80      	pop	{r7, pc}
 8018312:	bf00      	nop
 8018314:	20001de0 	.word	0x20001de0
 8018318:	08028c70 	.word	0x08028c70

0801831c <pifMsp_AddAnswer8>:

BOOL pifMsp_AddAnswer8(PifMsp* p_owner, uint8_t data)
{
 801831c:	b580      	push	{r7, lr}
 801831e:	b084      	sub	sp, #16
 8018320:	af02      	add	r7, sp, #8
 8018322:	6078      	str	r0, [r7, #4]
 8018324:	460b      	mov	r3, r1
 8018326:	70fb      	strb	r3, [r7, #3]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, &data, 1)) goto fail;
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	3324      	adds	r3, #36	; 0x24
 801832c:	1cf9      	adds	r1, r7, #3
 801832e:	2201      	movs	r2, #1
 8018330:	4618      	mov	r0, r3
 8018332:	f7fb ffab 	bl	801428c <pifRingBuffer_PutData>
 8018336:	4603      	mov	r3, r0
 8018338:	2b00      	cmp	r3, #0
 801833a:	d012      	beq.n	8018362 <pifMsp_AddAnswer8+0x46>
	p_owner->__check_xor ^= data;
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8018342:	78fb      	ldrb	r3, [r7, #3]
 8018344:	4053      	eors	r3, r2
 8018346:	b2da      	uxtb	r2, r3
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size += 1;
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018354:	3301      	adds	r3, #1
 8018356:	b29a      	uxth	r2, r3
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 801835e:	2301      	movs	r3, #1
 8018360:	e01a      	b.n	8018398 <pifMsp_AddAnswer8+0x7c>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, &data, 1)) goto fail;
 8018362:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	3324      	adds	r3, #36	; 0x24
 8018368:	4618      	mov	r0, r3
 801836a:	f7fb ff2e 	bl	80141ca <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 801836e:	4b0c      	ldr	r3, [pc, #48]	; (80183a0 <pifMsp_AddAnswer8+0x84>)
 8018370:	781b      	ldrb	r3, [r3, #0]
 8018372:	2b00      	cmp	r3, #0
 8018374:	d102      	bne.n	801837c <pifMsp_AddAnswer8+0x60>
 8018376:	4b0a      	ldr	r3, [pc, #40]	; (80183a0 <pifMsp_AddAnswer8+0x84>)
 8018378:	2204      	movs	r2, #4
 801837a:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	881b      	ldrh	r3, [r3, #0]
 8018380:	461a      	mov	r2, r3
 8018382:	4b07      	ldr	r3, [pc, #28]	; (80183a0 <pifMsp_AddAnswer8+0x84>)
 8018384:	781b      	ldrb	r3, [r3, #0]
 8018386:	9300      	str	r3, [sp, #0]
 8018388:	4613      	mov	r3, r2
 801838a:	f240 1279 	movw	r2, #377	; 0x179
 801838e:	4905      	ldr	r1, [pc, #20]	; (80183a4 <pifMsp_AddAnswer8+0x88>)
 8018390:	2004      	movs	r0, #4
 8018392:	f7fb fc31 	bl	8013bf8 <pifLog_Printf>
#endif
	return FALSE;
 8018396:	2300      	movs	r3, #0
}
 8018398:	4618      	mov	r0, r3
 801839a:	3708      	adds	r7, #8
 801839c:	46bd      	mov	sp, r7
 801839e:	bd80      	pop	{r7, pc}
 80183a0:	20001de0 	.word	0x20001de0
 80183a4:	08028c5c 	.word	0x08028c5c

080183a8 <pifMsp_AddAnswer16>:

BOOL pifMsp_AddAnswer16(PifMsp* p_owner, uint16_t data)
{
 80183a8:	b580      	push	{r7, lr}
 80183aa:	b084      	sub	sp, #16
 80183ac:	af02      	add	r7, sp, #8
 80183ae:	6078      	str	r0, [r7, #4]
 80183b0:	460b      	mov	r3, r1
 80183b2:	807b      	strh	r3, [r7, #2]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 2)) goto fail;
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	3324      	adds	r3, #36	; 0x24
 80183b8:	1cb9      	adds	r1, r7, #2
 80183ba:	2202      	movs	r2, #2
 80183bc:	4618      	mov	r0, r3
 80183be:	f7fb ff65 	bl	801428c <pifRingBuffer_PutData>
 80183c2:	4603      	mov	r3, r0
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d018      	beq.n	80183fa <pifMsp_AddAnswer16+0x52>
	p_owner->__check_xor ^= pifCheckXor((uint8_t*)&data, 2);
 80183c8:	1cbb      	adds	r3, r7, #2
 80183ca:	2102      	movs	r1, #2
 80183cc:	4618      	mov	r0, r3
 80183ce:	f7f9 ff73 	bl	80122b8 <pifCheckXor>
 80183d2:	4603      	mov	r3, r0
 80183d4:	461a      	mov	r2, r3
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80183dc:	4053      	eors	r3, r2
 80183de:	b2da      	uxtb	r2, r3
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size += 2;
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80183ec:	3302      	adds	r3, #2
 80183ee:	b29a      	uxth	r2, r3
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 80183f6:	2301      	movs	r3, #1
 80183f8:	e01a      	b.n	8018430 <pifMsp_AddAnswer16+0x88>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 2)) goto fail;
 80183fa:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	3324      	adds	r3, #36	; 0x24
 8018400:	4618      	mov	r0, r3
 8018402:	f7fb fee2 	bl	80141ca <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8018406:	4b0c      	ldr	r3, [pc, #48]	; (8018438 <pifMsp_AddAnswer16+0x90>)
 8018408:	781b      	ldrb	r3, [r3, #0]
 801840a:	2b00      	cmp	r3, #0
 801840c:	d102      	bne.n	8018414 <pifMsp_AddAnswer16+0x6c>
 801840e:	4b0a      	ldr	r3, [pc, #40]	; (8018438 <pifMsp_AddAnswer16+0x90>)
 8018410:	2204      	movs	r2, #4
 8018412:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	881b      	ldrh	r3, [r3, #0]
 8018418:	461a      	mov	r2, r3
 801841a:	4b07      	ldr	r3, [pc, #28]	; (8018438 <pifMsp_AddAnswer16+0x90>)
 801841c:	781b      	ldrb	r3, [r3, #0]
 801841e:	9300      	str	r3, [sp, #0]
 8018420:	4613      	mov	r3, r2
 8018422:	f240 1289 	movw	r2, #393	; 0x189
 8018426:	4905      	ldr	r1, [pc, #20]	; (801843c <pifMsp_AddAnswer16+0x94>)
 8018428:	2004      	movs	r0, #4
 801842a:	f7fb fbe5 	bl	8013bf8 <pifLog_Printf>
#endif
	return FALSE;
 801842e:	2300      	movs	r3, #0
}
 8018430:	4618      	mov	r0, r3
 8018432:	3708      	adds	r7, #8
 8018434:	46bd      	mov	sp, r7
 8018436:	bd80      	pop	{r7, pc}
 8018438:	20001de0 	.word	0x20001de0
 801843c:	08028c5c 	.word	0x08028c5c

08018440 <pifMsp_AddAnswer32>:

BOOL pifMsp_AddAnswer32(PifMsp* p_owner, uint32_t data)
{
 8018440:	b580      	push	{r7, lr}
 8018442:	b084      	sub	sp, #16
 8018444:	af02      	add	r7, sp, #8
 8018446:	6078      	str	r0, [r7, #4]
 8018448:	6039      	str	r1, [r7, #0]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 4)) goto fail;
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	3324      	adds	r3, #36	; 0x24
 801844e:	4639      	mov	r1, r7
 8018450:	2204      	movs	r2, #4
 8018452:	4618      	mov	r0, r3
 8018454:	f7fb ff1a 	bl	801428c <pifRingBuffer_PutData>
 8018458:	4603      	mov	r3, r0
 801845a:	2b00      	cmp	r3, #0
 801845c:	d018      	beq.n	8018490 <pifMsp_AddAnswer32+0x50>
	p_owner->__check_xor ^= pifCheckXor((uint8_t*)&data, 4);
 801845e:	463b      	mov	r3, r7
 8018460:	2104      	movs	r1, #4
 8018462:	4618      	mov	r0, r3
 8018464:	f7f9 ff28 	bl	80122b8 <pifCheckXor>
 8018468:	4603      	mov	r3, r0
 801846a:	461a      	mov	r2, r3
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018472:	4053      	eors	r3, r2
 8018474:	b2da      	uxtb	r2, r3
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size += 4;
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018482:	3304      	adds	r3, #4
 8018484:	b29a      	uxth	r2, r3
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 801848c:	2301      	movs	r3, #1
 801848e:	e01a      	b.n	80184c6 <pifMsp_AddAnswer32+0x86>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 4)) goto fail;
 8018490:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	3324      	adds	r3, #36	; 0x24
 8018496:	4618      	mov	r0, r3
 8018498:	f7fb fe97 	bl	80141ca <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 801849c:	4b0c      	ldr	r3, [pc, #48]	; (80184d0 <pifMsp_AddAnswer32+0x90>)
 801849e:	781b      	ldrb	r3, [r3, #0]
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d102      	bne.n	80184aa <pifMsp_AddAnswer32+0x6a>
 80184a4:	4b0a      	ldr	r3, [pc, #40]	; (80184d0 <pifMsp_AddAnswer32+0x90>)
 80184a6:	2204      	movs	r2, #4
 80184a8:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	881b      	ldrh	r3, [r3, #0]
 80184ae:	461a      	mov	r2, r3
 80184b0:	4b07      	ldr	r3, [pc, #28]	; (80184d0 <pifMsp_AddAnswer32+0x90>)
 80184b2:	781b      	ldrb	r3, [r3, #0]
 80184b4:	9300      	str	r3, [sp, #0]
 80184b6:	4613      	mov	r3, r2
 80184b8:	f240 1299 	movw	r2, #409	; 0x199
 80184bc:	4905      	ldr	r1, [pc, #20]	; (80184d4 <pifMsp_AddAnswer32+0x94>)
 80184be:	2004      	movs	r0, #4
 80184c0:	f7fb fb9a 	bl	8013bf8 <pifLog_Printf>
#endif
	return FALSE;
 80184c4:	2300      	movs	r3, #0
}
 80184c6:	4618      	mov	r0, r3
 80184c8:	3708      	adds	r7, #8
 80184ca:	46bd      	mov	sp, r7
 80184cc:	bd80      	pop	{r7, pc}
 80184ce:	bf00      	nop
 80184d0:	20001de0 	.word	0x20001de0
 80184d4:	08028c5c 	.word	0x08028c5c

080184d8 <pifMsp_AddAnswer>:

BOOL pifMsp_AddAnswer(PifMsp* p_owner, uint8_t* p_data, uint16_t size)
{
 80184d8:	b580      	push	{r7, lr}
 80184da:	b086      	sub	sp, #24
 80184dc:	af02      	add	r7, sp, #8
 80184de:	60f8      	str	r0, [r7, #12]
 80184e0:	60b9      	str	r1, [r7, #8]
 80184e2:	4613      	mov	r3, r2
 80184e4:	80fb      	strh	r3, [r7, #6]
	if (size > 0) {
 80184e6:	88fb      	ldrh	r3, [r7, #6]
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d021      	beq.n	8018530 <pifMsp_AddAnswer+0x58>
		if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, p_data, size)) goto fail;
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	3324      	adds	r3, #36	; 0x24
 80184f0:	88fa      	ldrh	r2, [r7, #6]
 80184f2:	68b9      	ldr	r1, [r7, #8]
 80184f4:	4618      	mov	r0, r3
 80184f6:	f7fb fec9 	bl	801428c <pifRingBuffer_PutData>
 80184fa:	4603      	mov	r3, r0
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d019      	beq.n	8018534 <pifMsp_AddAnswer+0x5c>
		p_owner->__check_xor ^= pifCheckXor(p_data, size);
 8018500:	88fb      	ldrh	r3, [r7, #6]
 8018502:	4619      	mov	r1, r3
 8018504:	68b8      	ldr	r0, [r7, #8]
 8018506:	f7f9 fed7 	bl	80122b8 <pifCheckXor>
 801850a:	4603      	mov	r3, r0
 801850c:	461a      	mov	r2, r3
 801850e:	68fb      	ldr	r3, [r7, #12]
 8018510:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018514:	4053      	eors	r3, r2
 8018516:	b2da      	uxtb	r2, r3
 8018518:	68fb      	ldr	r3, [r7, #12]
 801851a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		p_owner->__data_size += size;
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018524:	88fb      	ldrh	r3, [r7, #6]
 8018526:	4413      	add	r3, r2
 8018528:	b29a      	uxth	r2, r3
 801852a:	68fb      	ldr	r3, [r7, #12]
 801852c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	}
	return TRUE;
 8018530:	2301      	movs	r3, #1
 8018532:	e01a      	b.n	801856a <pifMsp_AddAnswer+0x92>
		if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, p_data, size)) goto fail;
 8018534:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8018536:	68fb      	ldr	r3, [r7, #12]
 8018538:	3324      	adds	r3, #36	; 0x24
 801853a:	4618      	mov	r0, r3
 801853c:	f7fb fe45 	bl	80141ca <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8018540:	4b0c      	ldr	r3, [pc, #48]	; (8018574 <pifMsp_AddAnswer+0x9c>)
 8018542:	781b      	ldrb	r3, [r3, #0]
 8018544:	2b00      	cmp	r3, #0
 8018546:	d102      	bne.n	801854e <pifMsp_AddAnswer+0x76>
 8018548:	4b0a      	ldr	r3, [pc, #40]	; (8018574 <pifMsp_AddAnswer+0x9c>)
 801854a:	2204      	movs	r2, #4
 801854c:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
 801854e:	68fb      	ldr	r3, [r7, #12]
 8018550:	881b      	ldrh	r3, [r3, #0]
 8018552:	461a      	mov	r2, r3
 8018554:	4b07      	ldr	r3, [pc, #28]	; (8018574 <pifMsp_AddAnswer+0x9c>)
 8018556:	781b      	ldrb	r3, [r3, #0]
 8018558:	9300      	str	r3, [sp, #0]
 801855a:	4613      	mov	r3, r2
 801855c:	f240 12ab 	movw	r2, #427	; 0x1ab
 8018560:	4905      	ldr	r1, [pc, #20]	; (8018578 <pifMsp_AddAnswer+0xa0>)
 8018562:	2004      	movs	r0, #4
 8018564:	f7fb fb48 	bl	8013bf8 <pifLog_Printf>
#endif
	return FALSE;
 8018568:	2300      	movs	r3, #0
}
 801856a:	4618      	mov	r0, r3
 801856c:	3710      	adds	r7, #16
 801856e:	46bd      	mov	sp, r7
 8018570:	bd80      	pop	{r7, pc}
 8018572:	bf00      	nop
 8018574:	20001de0 	.word	0x20001de0
 8018578:	08028c5c 	.word	0x08028c5c

0801857c <pifMsp_MakeError>:

BOOL pifMsp_MakeError(PifMsp* p_owner, PifMspPacket* p_question)
{
 801857c:	b580      	push	{r7, lr}
 801857e:	b086      	sub	sp, #24
 8018580:	af02      	add	r7, sp, #8
 8018582:	6078      	str	r0, [r7, #4]
 8018584:	6039      	str	r1, [r7, #0]
	uint8_t header[5];

	pifRingBuffer_BeginPutting(&p_owner->__tx.answer_buffer);
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	3324      	adds	r3, #36	; 0x24
 801858a:	4618      	mov	r0, r3
 801858c:	f7fb fdf7 	bl	801417e <pifRingBuffer_BeginPutting>

	header[0] = '$';
 8018590:	2324      	movs	r3, #36	; 0x24
 8018592:	723b      	strb	r3, [r7, #8]
	header[1] = 'M';
 8018594:	234d      	movs	r3, #77	; 0x4d
 8018596:	727b      	strb	r3, [r7, #9]
	header[2] = '!';
 8018598:	2321      	movs	r3, #33	; 0x21
 801859a:	72bb      	strb	r3, [r7, #10]
	header[3] = 0;
 801859c:	2300      	movs	r3, #0
 801859e:	72fb      	strb	r3, [r7, #11]
	header[4] = p_question->command;
 80185a0:	683b      	ldr	r3, [r7, #0]
 80185a2:	781b      	ldrb	r3, [r3, #0]
 80185a4:	733b      	strb	r3, [r7, #12]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	3324      	adds	r3, #36	; 0x24
 80185aa:	f107 0108 	add.w	r1, r7, #8
 80185ae:	2205      	movs	r2, #5
 80185b0:	4618      	mov	r0, r3
 80185b2:	f7fb fe6b 	bl	801428c <pifRingBuffer_PutData>
 80185b6:	4603      	mov	r3, r0
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d009      	beq.n	80185d0 <pifMsp_MakeError+0x54>
	p_owner->__check_xor = header[4];
 80185bc:	7b3a      	ldrb	r2, [r7, #12]
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size = 0;
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	2200      	movs	r2, #0
 80185c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 80185cc:	2301      	movs	r3, #1
 80185ce:	e01e      	b.n	801860e <pifMsp_MakeError+0x92>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 80185d0:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	3324      	adds	r3, #36	; 0x24
 80185d6:	4618      	mov	r0, r3
 80185d8:	f7fb fdf7 	bl	80141ca <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 80185dc:	4b0e      	ldr	r3, [pc, #56]	; (8018618 <pifMsp_MakeError+0x9c>)
 80185de:	781b      	ldrb	r3, [r3, #0]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d102      	bne.n	80185ea <pifMsp_MakeError+0x6e>
 80185e4:	4b0c      	ldr	r3, [pc, #48]	; (8018618 <pifMsp_MakeError+0x9c>)
 80185e6:	2204      	movs	r2, #4
 80185e8:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) C:%u EC:%d", __LINE__, p_owner->_id, p_question->command, pif_error);
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	881b      	ldrh	r3, [r3, #0]
 80185ee:	4619      	mov	r1, r3
 80185f0:	683b      	ldr	r3, [r7, #0]
 80185f2:	781b      	ldrb	r3, [r3, #0]
 80185f4:	461a      	mov	r2, r3
 80185f6:	4b08      	ldr	r3, [pc, #32]	; (8018618 <pifMsp_MakeError+0x9c>)
 80185f8:	781b      	ldrb	r3, [r3, #0]
 80185fa:	9301      	str	r3, [sp, #4]
 80185fc:	9200      	str	r2, [sp, #0]
 80185fe:	460b      	mov	r3, r1
 8018600:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8018604:	4905      	ldr	r1, [pc, #20]	; (801861c <pifMsp_MakeError+0xa0>)
 8018606:	2004      	movs	r0, #4
 8018608:	f7fb faf6 	bl	8013bf8 <pifLog_Printf>
#endif
	return FALSE;
 801860c:	2300      	movs	r3, #0
}
 801860e:	4618      	mov	r0, r3
 8018610:	3710      	adds	r7, #16
 8018612:	46bd      	mov	sp, r7
 8018614:	bd80      	pop	{r7, pc}
 8018616:	bf00      	nop
 8018618:	20001de0 	.word	0x20001de0
 801861c:	08028c70 	.word	0x08028c70

08018620 <pifMsp_SendAnswer>:

BOOL pifMsp_SendAnswer(PifMsp* p_owner)
{
 8018620:	b590      	push	{r4, r7, lr}
 8018622:	b085      	sub	sp, #20
 8018624:	af02      	add	r7, sp, #8
 8018626:	6078      	str	r0, [r7, #4]
	*pifRingBuffer_GetPointerPutting(&p_owner->__tx.answer_buffer, 3) = p_owner->__data_size;
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	f8b3 404a 	ldrh.w	r4, [r3, #74]	; 0x4a
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	3324      	adds	r3, #36	; 0x24
 8018632:	2103      	movs	r1, #3
 8018634:	4618      	mov	r0, r3
 8018636:	f7fb fdda 	bl	80141ee <pifRingBuffer_GetPointerPutting>
 801863a:	4603      	mov	r3, r0
 801863c:	b2e2      	uxtb	r2, r4
 801863e:	701a      	strb	r2, [r3, #0]
	p_owner->__check_xor ^= p_owner->__data_size;
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801864c:	b2db      	uxtb	r3, r3
 801864e:	4053      	eors	r3, r2
 8018650:	b2da      	uxtb	r2, r3
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	if (!pifRingBuffer_PutByte(&p_owner->__tx.answer_buffer, p_owner->__check_xor)) goto fail;
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018664:	4619      	mov	r1, r3
 8018666:	4610      	mov	r0, r2
 8018668:	f7fb fddc 	bl	8014224 <pifRingBuffer_PutByte>
 801866c:	4603      	mov	r3, r0
 801866e:	2b00      	cmp	r3, #0
 8018670:	d00c      	beq.n	801868c <pifMsp_SendAnswer+0x6c>

	pifRingBuffer_CommitPutting(&p_owner->__tx.answer_buffer);
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	3324      	adds	r3, #36	; 0x24
 8018676:	4618      	mov	r0, r3
 8018678:	f7fb fd99 	bl	80141ae <pifRingBuffer_CommitPutting>

	pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	685b      	ldr	r3, [r3, #4]
 8018680:	69db      	ldr	r3, [r3, #28]
 8018682:	4618      	mov	r0, r3
 8018684:	f7fc fb54 	bl	8014d30 <pifTask_SetTrigger>
	return TRUE;
 8018688:	2301      	movs	r3, #1
 801868a:	e01a      	b.n	80186c2 <pifMsp_SendAnswer+0xa2>
	if (!pifRingBuffer_PutByte(&p_owner->__tx.answer_buffer, p_owner->__check_xor)) goto fail;
 801868c:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	3324      	adds	r3, #36	; 0x24
 8018692:	4618      	mov	r0, r3
 8018694:	f7fb fd99 	bl	80141ca <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8018698:	4b0c      	ldr	r3, [pc, #48]	; (80186cc <pifMsp_SendAnswer+0xac>)
 801869a:	781b      	ldrb	r3, [r3, #0]
 801869c:	2b00      	cmp	r3, #0
 801869e:	d102      	bne.n	80186a6 <pifMsp_SendAnswer+0x86>
 80186a0:	4b0a      	ldr	r3, [pc, #40]	; (80186cc <pifMsp_SendAnswer+0xac>)
 80186a2:	2204      	movs	r2, #4
 80186a4:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	881b      	ldrh	r3, [r3, #0]
 80186aa:	461a      	mov	r2, r3
 80186ac:	4b07      	ldr	r3, [pc, #28]	; (80186cc <pifMsp_SendAnswer+0xac>)
 80186ae:	781b      	ldrb	r3, [r3, #0]
 80186b0:	9300      	str	r3, [sp, #0]
 80186b2:	4613      	mov	r3, r2
 80186b4:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80186b8:	4905      	ldr	r1, [pc, #20]	; (80186d0 <pifMsp_SendAnswer+0xb0>)
 80186ba:	2004      	movs	r0, #4
 80186bc:	f7fb fa9c 	bl	8013bf8 <pifLog_Printf>
#endif
	return FALSE;
 80186c0:	2300      	movs	r3, #0
}
 80186c2:	4618      	mov	r0, r3
 80186c4:	370c      	adds	r7, #12
 80186c6:	46bd      	mov	sp, r7
 80186c8:	bd90      	pop	{r4, r7, pc}
 80186ca:	bf00      	nop
 80186cc:	20001de0 	.word	0x20001de0
 80186d0:	08028c5c 	.word	0x08028c5c

080186d4 <pifRc_AttachEvtReceive>:
#include "rc/pif_rc.h"


void pifRc_AttachEvtReceive(PifRc* p_owner, PifEvtRcReceive evt_receive, PifIssuerP p_issuer)
{
 80186d4:	b480      	push	{r7}
 80186d6:	b085      	sub	sp, #20
 80186d8:	af00      	add	r7, sp, #0
 80186da:	60f8      	str	r0, [r7, #12]
 80186dc:	60b9      	str	r1, [r7, #8]
 80186de:	607a      	str	r2, [r7, #4]
	p_owner->__evt_receive = evt_receive;
 80186e0:	68fb      	ldr	r3, [r7, #12]
 80186e2:	68ba      	ldr	r2, [r7, #8]
 80186e4:	619a      	str	r2, [r3, #24]
	p_owner->__p_issuer = p_issuer;
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	687a      	ldr	r2, [r7, #4]
 80186ea:	61da      	str	r2, [r3, #28]
}
 80186ec:	bf00      	nop
 80186ee:	3714      	adds	r7, #20
 80186f0:	46bd      	mov	sp, r7
 80186f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186f6:	4770      	bx	lr

080186f8 <pifRc_CheckFailSafe>:
	long loss_frames = p_owner->_lost_frames + p_owner->_error_frames;
	return (int)(loss_frames * 100 / (p_owner->_good_frames + loss_frames));
}

BOOL pifRc_CheckFailSafe(PifRc* p_owner) 
{
 80186f8:	b480      	push	{r7}
 80186fa:	b085      	sub	sp, #20
 80186fc:	af00      	add	r7, sp, #0
 80186fe:	6078      	str	r0, [r7, #4]
	BOOL timeout = FALSE;
 8018700:	2300      	movs	r3, #0
 8018702:	73fb      	strb	r3, [r7, #15]

	if (p_owner->_max_frame_period) {
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	889b      	ldrh	r3, [r3, #4]
 8018708:	2b00      	cmp	r3, #0
 801870a:	d00c      	beq.n	8018726 <pifRc_CheckFailSafe+0x2e>
		timeout = (pif_cumulative_timer1ms - p_owner->_last_frame_time) > p_owner->_max_frame_period;
 801870c:	4b0e      	ldr	r3, [pc, #56]	; (8018748 <pifRc_CheckFailSafe+0x50>)
 801870e:	681a      	ldr	r2, [r3, #0]
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	689b      	ldr	r3, [r3, #8]
 8018714:	1ad3      	subs	r3, r2, r3
 8018716:	687a      	ldr	r2, [r7, #4]
 8018718:	8892      	ldrh	r2, [r2, #4]
 801871a:	4293      	cmp	r3, r2
 801871c:	bf8c      	ite	hi
 801871e:	2301      	movhi	r3, #1
 8018720:	2300      	movls	r3, #0
 8018722:	b2db      	uxtb	r3, r3
 8018724:	73fb      	strb	r3, [r7, #15]
	}
	return p_owner->_failsafe || timeout;
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	78db      	ldrb	r3, [r3, #3]
 801872a:	2b00      	cmp	r3, #0
 801872c:	d102      	bne.n	8018734 <pifRc_CheckFailSafe+0x3c>
 801872e:	7bfb      	ldrb	r3, [r7, #15]
 8018730:	2b00      	cmp	r3, #0
 8018732:	d001      	beq.n	8018738 <pifRc_CheckFailSafe+0x40>
 8018734:	2301      	movs	r3, #1
 8018736:	e000      	b.n	801873a <pifRc_CheckFailSafe+0x42>
 8018738:	2300      	movs	r3, #0
 801873a:	b2db      	uxtb	r3, r3
}
 801873c:	4618      	mov	r0, r3
 801873e:	3714      	adds	r7, #20
 8018740:	46bd      	mov	sp, r7
 8018742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018746:	4770      	bx	lr
 8018748:	20001df8 	.word	0x20001df8

0801874c <_ParsingPacket>:

#define IBUS_RETRY_TIMEOUT		3		// 3ms, Packets are received very ~7ms so use ~half that for the gap


static void _ParsingPacket(PifRcIbus *p_owner, PifActCommReceiveData act_receive_data)
{
 801874c:	b580      	push	{r7, lr}
 801874e:	b084      	sub	sp, #16
 8018750:	af00      	add	r7, sp, #0
 8018752:	6078      	str	r0, [r7, #4]
 8018754:	6039      	str	r1, [r7, #0]
	uint8_t data;
	static uint8_t ptr;                      // pointer in buffer
	static uint16_t chksum;                  // checksum calculation
	static uint8_t lchksum;                  // checksum lower byte received

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8018756:	e070      	b.n	801883a <_ParsingPacket+0xee>
		switch (p_owner->__rx_state) {
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 801875e:	2b03      	cmp	r3, #3
 8018760:	d86a      	bhi.n	8018838 <_ParsingPacket+0xec>
 8018762:	a201      	add	r2, pc, #4	; (adr r2, 8018768 <_ParsingPacket+0x1c>)
 8018764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018768:	08018779 	.word	0x08018779
 801876c:	080187ad 	.word	0x080187ad
 8018770:	080187ed 	.word	0x080187ed
 8018774:	080187fd 	.word	0x080187fd
		case IRS_GET_LENGTH:
			if (data <= IBUS_FRAME_SIZE && data > IBUS_OVERHEAD) {
 8018778:	7bfb      	ldrb	r3, [r7, #15]
 801877a:	2b20      	cmp	r3, #32
 801877c:	d85d      	bhi.n	801883a <_ParsingPacket+0xee>
 801877e:	7bfb      	ldrb	r3, [r7, #15]
 8018780:	2b03      	cmp	r3, #3
 8018782:	d95a      	bls.n	801883a <_ParsingPacket+0xee>
				ptr = 0;
 8018784:	4b34      	ldr	r3, [pc, #208]	; (8018858 <_ParsingPacket+0x10c>)
 8018786:	2200      	movs	r2, #0
 8018788:	701a      	strb	r2, [r3, #0]
				p_owner->__rx_length = data - IBUS_OVERHEAD;
 801878a:	7bfb      	ldrb	r3, [r7, #15]
 801878c:	3b03      	subs	r3, #3
 801878e:	b2da      	uxtb	r2, r3
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
				chksum = 0xFFFF - data;
 8018796:	7bfb      	ldrb	r3, [r7, #15]
 8018798:	b29b      	uxth	r3, r3
 801879a:	43db      	mvns	r3, r3
 801879c:	b29a      	uxth	r2, r3
 801879e:	4b2f      	ldr	r3, [pc, #188]	; (801885c <_ParsingPacket+0x110>)
 80187a0:	801a      	strh	r2, [r3, #0]
				p_owner->__rx_state = IRS_GET_DATA;
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	2201      	movs	r2, #1
 80187a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			}
			break;
 80187aa:	e046      	b.n	801883a <_ParsingPacket+0xee>

		case IRS_GET_DATA:
			p_owner->__rx_buffer[ptr++] = data;
 80187ac:	4b2a      	ldr	r3, [pc, #168]	; (8018858 <_ParsingPacket+0x10c>)
 80187ae:	781b      	ldrb	r3, [r3, #0]
 80187b0:	1c5a      	adds	r2, r3, #1
 80187b2:	b2d1      	uxtb	r1, r2
 80187b4:	4a28      	ldr	r2, [pc, #160]	; (8018858 <_ParsingPacket+0x10c>)
 80187b6:	7011      	strb	r1, [r2, #0]
 80187b8:	4619      	mov	r1, r3
 80187ba:	7bfa      	ldrb	r2, [r7, #15]
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	440b      	add	r3, r1
 80187c0:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
			chksum -= data;
 80187c4:	4b25      	ldr	r3, [pc, #148]	; (801885c <_ParsingPacket+0x110>)
 80187c6:	881a      	ldrh	r2, [r3, #0]
 80187c8:	7bfb      	ldrb	r3, [r7, #15]
 80187ca:	b29b      	uxth	r3, r3
 80187cc:	1ad3      	subs	r3, r2, r3
 80187ce:	b29a      	uxth	r2, r3
 80187d0:	4b22      	ldr	r3, [pc, #136]	; (801885c <_ParsingPacket+0x110>)
 80187d2:	801a      	strh	r2, [r3, #0]
			if (ptr == p_owner->__rx_length) {
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	f893 2079 	ldrb.w	r2, [r3, #121]	; 0x79
 80187da:	4b1f      	ldr	r3, [pc, #124]	; (8018858 <_ParsingPacket+0x10c>)
 80187dc:	781b      	ldrb	r3, [r3, #0]
 80187de:	429a      	cmp	r2, r3
 80187e0:	d12b      	bne.n	801883a <_ParsingPacket+0xee>
				p_owner->__rx_state = IRS_GET_CHKSUML;
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	2202      	movs	r2, #2
 80187e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			}
			break;
 80187ea:	e026      	b.n	801883a <_ParsingPacket+0xee>

		case IRS_GET_CHKSUML:
			lchksum = data;
 80187ec:	7bfa      	ldrb	r2, [r7, #15]
 80187ee:	4b1c      	ldr	r3, [pc, #112]	; (8018860 <_ParsingPacket+0x114>)
 80187f0:	701a      	strb	r2, [r3, #0]
			p_owner->__rx_state = IRS_GET_CHKSUMH;
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	2203      	movs	r2, #3
 80187f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			break;
 80187fa:	e01e      	b.n	801883a <_ParsingPacket+0xee>

		case IRS_GET_CHKSUMH:
			// Validate checksum
			if (chksum == ((uint16_t)data << 8) + lchksum) {
 80187fc:	4b17      	ldr	r3, [pc, #92]	; (801885c <_ParsingPacket+0x110>)
 80187fe:	881b      	ldrh	r3, [r3, #0]
 8018800:	4619      	mov	r1, r3
 8018802:	7bfb      	ldrb	r3, [r7, #15]
 8018804:	021b      	lsls	r3, r3, #8
 8018806:	4a16      	ldr	r2, [pc, #88]	; (8018860 <_ParsingPacket+0x114>)
 8018808:	7812      	ldrb	r2, [r2, #0]
 801880a:	4413      	add	r3, r2
 801880c:	4299      	cmp	r1, r3
 801880e:	d109      	bne.n	8018824 <_ParsingPacket+0xd8>
				p_owner->parent._good_frames++;
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	68db      	ldr	r3, [r3, #12]
 8018814:	1c5a      	adds	r2, r3, #1
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	60da      	str	r2, [r3, #12]
				p_owner->__rx_state = IRS_DONE;
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	2204      	movs	r2, #4
 801881e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8018822:	e00a      	b.n	801883a <_ParsingPacket+0xee>
			}
			else {
				p_owner->parent._error_frames++;
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	691b      	ldr	r3, [r3, #16]
 8018828:	1c5a      	adds	r2, r3, #1
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	611a      	str	r2, [r3, #16]
				p_owner->__rx_state = IRS_GET_LENGTH;
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	2200      	movs	r2, #0
 8018832:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			}
			break;
 8018836:	e000      	b.n	801883a <_ParsingPacket+0xee>

		default:
			break;
 8018838:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801883e:	f107 010f 	add.w	r1, r7, #15
 8018842:	683b      	ldr	r3, [r7, #0]
 8018844:	4610      	mov	r0, r2
 8018846:	4798      	blx	r3
 8018848:	4603      	mov	r3, r0
 801884a:	2b00      	cmp	r3, #0
 801884c:	d184      	bne.n	8018758 <_ParsingPacket+0xc>
		}
	}
}
 801884e:	bf00      	nop
 8018850:	bf00      	nop
 8018852:	3710      	adds	r7, #16
 8018854:	46bd      	mov	sp, r7
 8018856:	bd80      	pop	{r7, pc}
 8018858:	20001f93 	.word	0x20001f93
 801885c:	20001f94 	.word	0x20001f94
 8018860:	20001f96 	.word	0x20001f96

08018864 <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 8018864:	b580      	push	{r7, lr}
 8018866:	b090      	sub	sp, #64	; 0x40
 8018868:	af00      	add	r7, sp, #0
 801886a:	6078      	str	r0, [r7, #4]
 801886c:	6039      	str	r1, [r7, #0]
	PifRcIbus *p_owner = (PifRcIbus *)p_client;
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	637b      	str	r3, [r7, #52]	; 0x34
	PifRcIbusSensorinfo* p_sensor;
    int i;
	uint16_t p = 0;
 8018872:	2300      	movs	r3, #0
 8018874:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint8_t tx_buffer[8];					// tx message buffer
	uint16_t channel[PIF_IBUS_CHANNEL_COUNT]; 	// servo data received
	uint16_t chksum;

    if (!p_owner->parent.__evt_receive) return;
 8018876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018878:	699b      	ldr	r3, [r3, #24]
 801887a:	2b00      	cmp	r3, #0
 801887c:	f000 8151 	beq.w	8018b22 <_evtParsing+0x2be>

	if (pif_cumulative_timer1ms - p_owner->__last_time >= IBUS_RETRY_TIMEOUT) {
 8018880:	4baa      	ldr	r3, [pc, #680]	; (8018b2c <_evtParsing+0x2c8>)
 8018882:	681a      	ldr	r2, [r3, #0]
 8018884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018886:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801888a:	1ad3      	subs	r3, r2, r3
 801888c:	2b02      	cmp	r3, #2
 801888e:	d903      	bls.n	8018898 <_evtParsing+0x34>
		p_owner->__rx_state = IRS_GET_LENGTH;
 8018890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018892:	2200      	movs	r2, #0
 8018894:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	}
	p_owner->__last_time = pif_cumulative_timer1ms;
 8018898:	4ba4      	ldr	r3, [pc, #656]	; (8018b2c <_evtParsing+0x2c8>)
 801889a:	681a      	ldr	r2, [r3, #0]
 801889c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801889e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    if (p_owner->__rx_state < IRS_DONE) {
 80188a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188a4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80188a8:	2b03      	cmp	r3, #3
 80188aa:	d803      	bhi.n	80188b4 <_evtParsing+0x50>
    	_ParsingPacket(p_owner, act_receive_data);
 80188ac:	6839      	ldr	r1, [r7, #0]
 80188ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80188b0:	f7ff ff4c 	bl	801874c <_ParsingPacket>
    }

    if (p_owner->__rx_state == IRS_DONE) {
 80188b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188b6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80188ba:	2b04      	cmp	r3, #4
 80188bc:	f040 8132 	bne.w	8018b24 <_evtParsing+0x2c0>
		p_owner->parent._last_frame_time = pif_cumulative_timer1ms;
 80188c0:	4b9a      	ldr	r3, [pc, #616]	; (8018b2c <_evtParsing+0x2c8>)
 80188c2:	681a      	ldr	r2, [r3, #0]
 80188c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188c6:	609a      	str	r2, [r3, #8]

		// Checksum is all fine Execute command - 
		uint8_t adr = p_owner->__rx_buffer[0] & 0x0f;
 80188c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188ca:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80188ce:	f003 030f 	and.w	r3, r3, #15
 80188d2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		if (p_owner->__rx_buffer[0] == IBUS_COMMAND_SERVO) {
 80188d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188d8:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80188dc:	2b40      	cmp	r3, #64	; 0x40
 80188de:	d130      	bne.n	8018942 <_evtParsing+0xde>
			// Valid servo command received - extract channel data
			for (i = 1; i < PIF_IBUS_CHANNEL_COUNT * 2 + 1; i += 2) {
 80188e0:	2301      	movs	r3, #1
 80188e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80188e4:	e01c      	b.n	8018920 <_evtParsing+0xbc>
				channel[i / 2] = p_owner->__rx_buffer[i] | (p_owner->__rx_buffer[i + 1] << 8);
 80188e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80188e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80188ea:	4413      	add	r3, r2
 80188ec:	337a      	adds	r3, #122	; 0x7a
 80188ee:	781b      	ldrb	r3, [r3, #0]
 80188f0:	b21a      	sxth	r2, r3
 80188f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80188f4:	3301      	adds	r3, #1
 80188f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80188f8:	440b      	add	r3, r1
 80188fa:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80188fe:	021b      	lsls	r3, r3, #8
 8018900:	b21b      	sxth	r3, r3
 8018902:	4313      	orrs	r3, r2
 8018904:	b219      	sxth	r1, r3
 8018906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018908:	0fda      	lsrs	r2, r3, #31
 801890a:	4413      	add	r3, r2
 801890c:	105b      	asrs	r3, r3, #1
 801890e:	b28a      	uxth	r2, r1
 8018910:	005b      	lsls	r3, r3, #1
 8018912:	3340      	adds	r3, #64	; 0x40
 8018914:	443b      	add	r3, r7
 8018916:	f823 2c38 	strh.w	r2, [r3, #-56]
			for (i = 1; i < PIF_IBUS_CHANNEL_COUNT * 2 + 1; i += 2) {
 801891a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801891c:	3302      	adds	r3, #2
 801891e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018922:	2b1c      	cmp	r3, #28
 8018924:	dddf      	ble.n	80188e6 <_evtParsing+0x82>
			}

	    	if (p_owner->parent.__evt_receive) (*p_owner->parent.__evt_receive)(&p_owner->parent, channel, p_owner->parent.__p_issuer);
 8018926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018928:	699b      	ldr	r3, [r3, #24]
 801892a:	2b00      	cmp	r3, #0
 801892c:	f000 80f4 	beq.w	8018b18 <_evtParsing+0x2b4>
 8018930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018932:	699b      	ldr	r3, [r3, #24]
 8018934:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018938:	69d2      	ldr	r2, [r2, #28]
 801893a:	f107 0108 	add.w	r1, r7, #8
 801893e:	4798      	blx	r3
 8018940:	e0ea      	b.n	8018b18 <_evtParsing+0x2b4>
		} 
		else if (p_owner->__p_comm->_p_tx_buffer && adr <= p_owner->_number_sensors && adr > 0 && p_owner->__rx_length == 1) {
 8018942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018946:	695b      	ldr	r3, [r3, #20]
 8018948:	2b00      	cmp	r3, #0
 801894a:	f000 80e5 	beq.w	8018b18 <_evtParsing+0x2b4>
 801894e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018954:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8018958:	429a      	cmp	r2, r3
 801895a:	f200 80dd 	bhi.w	8018b18 <_evtParsing+0x2b4>
 801895e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8018962:	2b00      	cmp	r3, #0
 8018964:	f000 80d8 	beq.w	8018b18 <_evtParsing+0x2b4>
 8018968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801896a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 801896e:	2b01      	cmp	r3, #1
 8018970:	f040 80d2 	bne.w	8018b18 <_evtParsing+0x2b4>
			// all sensor data commands go here
			// we only process the length==1 commands (=message length is 4 bytes incl overhead) to prevent the case the
			// return messages from the UART TX port loop back to the RX port and are processed again. This is extra
			// precaution as it will also be prevented by the IBUS_TIMEGAP required
			p_sensor = &p_owner->__sensors[adr - 1];
 8018974:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8018978:	3b01      	subs	r3, #1
 801897a:	3305      	adds	r3, #5
 801897c:	00db      	lsls	r3, r3, #3
 801897e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018980:	4413      	add	r3, r2
 8018982:	633b      	str	r3, [r7, #48]	; 0x30
			switch (p_owner->__rx_buffer[0] & 0x0f0) {
 8018984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018986:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 801898a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801898e:	2ba0      	cmp	r3, #160	; 0xa0
 8018990:	d049      	beq.n	8018a26 <_evtParsing+0x1c2>
 8018992:	2ba0      	cmp	r3, #160	; 0xa0
 8018994:	f300 808f 	bgt.w	8018ab6 <_evtParsing+0x252>
 8018998:	2b80      	cmp	r3, #128	; 0x80
 801899a:	d002      	beq.n	80189a2 <_evtParsing+0x13e>
 801899c:	2b90      	cmp	r3, #144	; 0x90
 801899e:	d016      	beq.n	80189ce <_evtParsing+0x16a>
 80189a0:	e089      	b.n	8018ab6 <_evtParsing+0x252>
			case IBUS_COMMAND_DISCOVER:
				// echo discover command: 0x04, 0x81, 0x7A, 0xFF 
				tx_buffer[p++] = 0x04;
 80189a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80189a4:	1c5a      	adds	r2, r3, #1
 80189a6:	877a      	strh	r2, [r7, #58]	; 0x3a
 80189a8:	3340      	adds	r3, #64	; 0x40
 80189aa:	443b      	add	r3, r7
 80189ac:	2204      	movs	r2, #4
 80189ae:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = IBUS_COMMAND_DISCOVER + adr;
 80189b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80189b4:	1c5a      	adds	r2, r3, #1
 80189b6:	877a      	strh	r2, [r7, #58]	; 0x3a
 80189b8:	4619      	mov	r1, r3
 80189ba:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80189be:	3b80      	subs	r3, #128	; 0x80
 80189c0:	b2da      	uxtb	r2, r3
 80189c2:	f101 0340 	add.w	r3, r1, #64	; 0x40
 80189c6:	443b      	add	r3, r7
 80189c8:	f803 2c1c 	strb.w	r2, [r3, #-28]
				break;
 80189cc:	e078      	b.n	8018ac0 <_evtParsing+0x25c>

			case IBUS_COMMAND_TYPE:
				// echo sensor type command: 0x06 0x91 0x00 0x02 0x66 0xFF 
				tx_buffer[p++] = 0x06;
 80189ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80189d0:	1c5a      	adds	r2, r3, #1
 80189d2:	877a      	strh	r2, [r7, #58]	; 0x3a
 80189d4:	3340      	adds	r3, #64	; 0x40
 80189d6:	443b      	add	r3, r7
 80189d8:	2206      	movs	r2, #6
 80189da:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = IBUS_COMMAND_TYPE + adr;
 80189de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80189e0:	1c5a      	adds	r2, r3, #1
 80189e2:	877a      	strh	r2, [r7, #58]	; 0x3a
 80189e4:	4619      	mov	r1, r3
 80189e6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80189ea:	3b70      	subs	r3, #112	; 0x70
 80189ec:	b2da      	uxtb	r2, r3
 80189ee:	f101 0340 	add.w	r3, r1, #64	; 0x40
 80189f2:	443b      	add	r3, r7
 80189f4:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = p_sensor->type;
 80189f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80189fa:	1c5a      	adds	r2, r3, #1
 80189fc:	877a      	strh	r2, [r7, #58]	; 0x3a
 80189fe:	4619      	mov	r1, r3
 8018a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a02:	781a      	ldrb	r2, [r3, #0]
 8018a04:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8018a08:	443b      	add	r3, r7
 8018a0a:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = p_sensor->length;
 8018a0e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018a10:	1c5a      	adds	r2, r3, #1
 8018a12:	877a      	strh	r2, [r7, #58]	; 0x3a
 8018a14:	4619      	mov	r1, r3
 8018a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a18:	785a      	ldrb	r2, [r3, #1]
 8018a1a:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8018a1e:	443b      	add	r3, r7
 8018a20:	f803 2c1c 	strb.w	r2, [r3, #-28]
				break;
 8018a24:	e04c      	b.n	8018ac0 <_evtParsing+0x25c>

			case IBUS_COMMAND_VALUE:
				// echo sensor value command: 0x06 0x91 0x00 0x02 0x66 0xFF 
				tx_buffer[p++] = 0x04 + p_sensor->length;
 8018a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a28:	785a      	ldrb	r2, [r3, #1]
 8018a2a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018a2c:	1c59      	adds	r1, r3, #1
 8018a2e:	8779      	strh	r1, [r7, #58]	; 0x3a
 8018a30:	3204      	adds	r2, #4
 8018a32:	b2d2      	uxtb	r2, r2
 8018a34:	3340      	adds	r3, #64	; 0x40
 8018a36:	443b      	add	r3, r7
 8018a38:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = IBUS_COMMAND_VALUE + adr;
 8018a3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018a3e:	1c5a      	adds	r2, r3, #1
 8018a40:	877a      	strh	r2, [r7, #58]	; 0x3a
 8018a42:	4619      	mov	r1, r3
 8018a44:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8018a48:	3b60      	subs	r3, #96	; 0x60
 8018a4a:	b2da      	uxtb	r2, r3
 8018a4c:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8018a50:	443b      	add	r3, r7
 8018a52:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = p_sensor->value & 0x0ff;
 8018a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a58:	685a      	ldr	r2, [r3, #4]
 8018a5a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018a5c:	1c59      	adds	r1, r3, #1
 8018a5e:	8779      	strh	r1, [r7, #58]	; 0x3a
 8018a60:	b2d2      	uxtb	r2, r2
 8018a62:	3340      	adds	r3, #64	; 0x40
 8018a64:	443b      	add	r3, r7
 8018a66:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = (p_sensor->value >> 8) & 0x0ff; 
 8018a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a6c:	685b      	ldr	r3, [r3, #4]
 8018a6e:	121a      	asrs	r2, r3, #8
 8018a70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018a72:	1c59      	adds	r1, r3, #1
 8018a74:	8779      	strh	r1, [r7, #58]	; 0x3a
 8018a76:	b2d2      	uxtb	r2, r2
 8018a78:	3340      	adds	r3, #64	; 0x40
 8018a7a:	443b      	add	r3, r7
 8018a7c:	f803 2c1c 	strb.w	r2, [r3, #-28]
				if (p_sensor->length == 4) {
 8018a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a82:	785b      	ldrb	r3, [r3, #1]
 8018a84:	2b04      	cmp	r3, #4
 8018a86:	d11a      	bne.n	8018abe <_evtParsing+0x25a>
					tx_buffer[p++] = (p_sensor->value >> 16) & 0x0ff; 
 8018a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a8a:	685b      	ldr	r3, [r3, #4]
 8018a8c:	141a      	asrs	r2, r3, #16
 8018a8e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018a90:	1c59      	adds	r1, r3, #1
 8018a92:	8779      	strh	r1, [r7, #58]	; 0x3a
 8018a94:	b2d2      	uxtb	r2, r2
 8018a96:	3340      	adds	r3, #64	; 0x40
 8018a98:	443b      	add	r3, r7
 8018a9a:	f803 2c1c 	strb.w	r2, [r3, #-28]
					tx_buffer[p++] = (p_sensor->value >> 24) & 0x0ff; 
 8018a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aa0:	685b      	ldr	r3, [r3, #4]
 8018aa2:	0e1a      	lsrs	r2, r3, #24
 8018aa4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018aa6:	1c59      	adds	r1, r3, #1
 8018aa8:	8779      	strh	r1, [r7, #58]	; 0x3a
 8018aaa:	b2d2      	uxtb	r2, r2
 8018aac:	3340      	adds	r3, #64	; 0x40
 8018aae:	443b      	add	r3, r7
 8018ab0:	f803 2c1c 	strb.w	r2, [r3, #-28]
				}
				break;
 8018ab4:	e003      	b.n	8018abe <_evtParsing+0x25a>

			default:
				adr = 0; // unknown command, prevent sending chksum
 8018ab6:	2300      	movs	r3, #0
 8018ab8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				break;
 8018abc:	e000      	b.n	8018ac0 <_evtParsing+0x25c>
				break;
 8018abe:	bf00      	nop
			}
			if (adr > 0) {
 8018ac0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d027      	beq.n	8018b18 <_evtParsing+0x2b4>
				chksum = 0xFFFF - pifCheckSum(tx_buffer, p);
 8018ac8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018ace:	4611      	mov	r1, r2
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	f7f9 fbd0 	bl	8012276 <pifCheckSum>
 8018ad6:	4603      	mov	r3, r0
 8018ad8:	b29b      	uxth	r3, r3
 8018ada:	43db      	mvns	r3, r3
 8018adc:	85fb      	strh	r3, [r7, #46]	; 0x2e
				tx_buffer[p++] = chksum & 0x0ff;
 8018ade:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018ae0:	1c5a      	adds	r2, r3, #1
 8018ae2:	877a      	strh	r2, [r7, #58]	; 0x3a
 8018ae4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018ae6:	b2d2      	uxtb	r2, r2
 8018ae8:	3340      	adds	r3, #64	; 0x40
 8018aea:	443b      	add	r3, r7
 8018aec:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = chksum >> 8;
 8018af0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018af2:	0a1b      	lsrs	r3, r3, #8
 8018af4:	b29a      	uxth	r2, r3
 8018af6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018af8:	1c59      	adds	r1, r3, #1
 8018afa:	8779      	strh	r1, [r7, #58]	; 0x3a
 8018afc:	b2d2      	uxtb	r2, r2
 8018afe:	3340      	adds	r3, #64	; 0x40
 8018b00:	443b      	add	r3, r7
 8018b02:	f803 2c1c 	strb.w	r2, [r3, #-28]

				pifRingBuffer_PutData(p_owner->__p_comm->_p_tx_buffer, tx_buffer, p);
 8018b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b0a:	695b      	ldr	r3, [r3, #20]
 8018b0c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018b0e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8018b12:	4618      	mov	r0, r3
 8018b14:	f7fb fbba 	bl	801428c <pifRingBuffer_PutData>
			}
		}

    	p_owner->__rx_state = IRS_GET_LENGTH;
 8018b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b1a:	2200      	movs	r2, #0
 8018b1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8018b20:	e000      	b.n	8018b24 <_evtParsing+0x2c0>
    if (!p_owner->parent.__evt_receive) return;
 8018b22:	bf00      	nop
    }
}
 8018b24:	3740      	adds	r7, #64	; 0x40
 8018b26:	46bd      	mov	sp, r7
 8018b28:	bd80      	pop	{r7, pc}
 8018b2a:	bf00      	nop
 8018b2c:	20001df8 	.word	0x20001df8

08018b30 <pifRcIbus_Init>:

BOOL pifRcIbus_Init(PifRcIbus* p_owner, PifId id)
{
 8018b30:	b580      	push	{r7, lr}
 8018b32:	b082      	sub	sp, #8
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	6078      	str	r0, [r7, #4]
 8018b38:	460b      	mov	r3, r1
 8018b3a:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d104      	bne.n	8018b4c <pifRcIbus_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8018b42:	4b11      	ldr	r3, [pc, #68]	; (8018b88 <pifRcIbus_Init+0x58>)
 8018b44:	2201      	movs	r2, #1
 8018b46:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8018b48:	2300      	movs	r3, #0
 8018b4a:	e018      	b.n	8018b7e <pifRcIbus_Init+0x4e>
	}

	memset(p_owner, 0, sizeof(PifRcIbus));
 8018b4c:	22a0      	movs	r2, #160	; 0xa0
 8018b4e:	2100      	movs	r1, #0
 8018b50:	6878      	ldr	r0, [r7, #4]
 8018b52:	f00b f9b3 	bl	8023ebc <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8018b56:	887b      	ldrh	r3, [r7, #2]
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d106      	bne.n	8018b6a <pifRcIbus_Init+0x3a>
 8018b5c:	4b0b      	ldr	r3, [pc, #44]	; (8018b8c <pifRcIbus_Init+0x5c>)
 8018b5e:	881b      	ldrh	r3, [r3, #0]
 8018b60:	1c5a      	adds	r2, r3, #1
 8018b62:	b291      	uxth	r1, r2
 8018b64:	4a09      	ldr	r2, [pc, #36]	; (8018b8c <pifRcIbus_Init+0x5c>)
 8018b66:	8011      	strh	r1, [r2, #0]
 8018b68:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	887a      	ldrh	r2, [r7, #2]
 8018b6e:	801a      	strh	r2, [r3, #0]
	p_owner->parent._channel_count = PIF_IBUS_CHANNEL_COUNT;
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	220e      	movs	r2, #14
 8018b74:	709a      	strb	r2, [r3, #2]
	p_owner->parent._failsafe = FALSE;
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	2200      	movs	r2, #0
 8018b7a:	70da      	strb	r2, [r3, #3]
    return TRUE;
 8018b7c:	2301      	movs	r3, #1
}
 8018b7e:	4618      	mov	r0, r3
 8018b80:	3708      	adds	r7, #8
 8018b82:	46bd      	mov	sp, r7
 8018b84:	bd80      	pop	{r7, pc}
 8018b86:	bf00      	nop
 8018b88:	20001de0 	.word	0x20001de0
 8018b8c:	20000128 	.word	0x20000128

08018b90 <pifRcIbus_AttachComm>:

void pifRcIbus_AttachComm(PifRcIbus* p_owner, PifComm *p_comm)
{
 8018b90:	b580      	push	{r7, lr}
 8018b92:	b082      	sub	sp, #8
 8018b94:	af00      	add	r7, sp, #0
 8018b96:	6078      	str	r0, [r7, #4]
 8018b98:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	683a      	ldr	r2, [r7, #0]
 8018b9e:	625a      	str	r2, [r3, #36]	; 0x24
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, NULL);
 8018ba0:	2300      	movs	r3, #0
 8018ba2:	4a04      	ldr	r2, [pc, #16]	; (8018bb4 <pifRcIbus_AttachComm+0x24>)
 8018ba4:	6879      	ldr	r1, [r7, #4]
 8018ba6:	6838      	ldr	r0, [r7, #0]
 8018ba8:	f7f9 fcde 	bl	8012568 <pifComm_AttachClient>
}
 8018bac:	bf00      	nop
 8018bae:	3708      	adds	r7, #8
 8018bb0:	46bd      	mov	sp, r7
 8018bb2:	bd80      	pop	{r7, pc}
 8018bb4:	08018865 	.word	0x08018865

08018bb8 <_processRcPpm>:
#include "core/pif_list.h"
#include "rc/pif_rc_ppm.h"


static uint16_t _processRcPpm(PifRcPpm* p_owner, uint16_t diff)
{
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b084      	sub	sp, #16
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	6078      	str	r0, [r7, #4]
 8018bc0:	460b      	mov	r3, r1
 8018bc2:	807b      	strh	r3, [r7, #2]
	uint16_t rtn = 0;
 8018bc4:	2300      	movs	r3, #0
 8018bc6:	81fb      	strh	r3, [r7, #14]

	switch (p_owner->__process_step) {
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8018bce:	2b02      	cmp	r3, #2
 8018bd0:	d04f      	beq.n	8018c72 <_processRcPpm+0xba>
 8018bd2:	2b02      	cmp	r3, #2
 8018bd4:	f300 80b5 	bgt.w	8018d42 <_processRcPpm+0x18a>
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d002      	beq.n	8018be2 <_processRcPpm+0x2a>
 8018bdc:	2b01      	cmp	r3, #1
 8018bde:	d010      	beq.n	8018c02 <_processRcPpm+0x4a>
 8018be0:	e0af      	b.n	8018d42 <_processRcPpm+0x18a>
	case 0:
		if (diff >= p_owner->__threshold_1us) p_owner->__process_step++;
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8018be8:	887a      	ldrh	r2, [r7, #2]
 8018bea:	429a      	cmp	r2, r3
 8018bec:	f0c0 80a4 	bcc.w	8018d38 <_processRcPpm+0x180>
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8018bf6:	3301      	adds	r3, #1
 8018bf8:	b2da      	uxtb	r2, r3
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8018c00:	e09a      	b.n	8018d38 <_processRcPpm+0x180>

	case 1:
		if (diff < p_owner->__threshold_1us) {
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8018c08:	887a      	ldrh	r2, [r7, #2]
 8018c0a:	429a      	cmp	r2, r3
 8018c0c:	d224      	bcs.n	8018c58 <_processRcPpm+0xa0>
			p_owner->_channel++;
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8018c14:	b2db      	uxtb	r3, r3
 8018c16:	3301      	adds	r3, #1
 8018c18:	b2db      	uxtb	r3, r3
 8018c1a:	b25a      	sxtb	r2, r3
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	f883 2020 	strb.w	r2, [r3, #32]
			if (p_owner->_channel < p_owner->__max_channel) {
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8018c28:	461a      	mov	r2, r3
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8018c30:	429a      	cmp	r2, r3
 8018c32:	f280 8083 	bge.w	8018d3c <_processRcPpm+0x184>
				if (p_owner->_channel + 1 > p_owner->parent._channel_count) p_owner->parent._channel_count = p_owner->_channel + 1;
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8018c3c:	461a      	mov	r2, r3
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	789b      	ldrb	r3, [r3, #2]
 8018c42:	429a      	cmp	r2, r3
 8018c44:	db7a      	blt.n	8018d3c <_processRcPpm+0x184>
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8018c4c:	b2db      	uxtb	r3, r3
 8018c4e:	3301      	adds	r3, #1
 8018c50:	b2da      	uxtb	r2, r3
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	709a      	strb	r2, [r3, #2]
		}
		else {
			p_owner->_channel = -1;
			p_owner->__process_step++;
		}
		break;
 8018c56:	e071      	b.n	8018d3c <_processRcPpm+0x184>
			p_owner->_channel = -1;
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	22ff      	movs	r2, #255	; 0xff
 8018c5c:	f883 2020 	strb.w	r2, [r3, #32]
			p_owner->__process_step++;
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8018c66:	3301      	adds	r3, #1
 8018c68:	b2da      	uxtb	r2, r3
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8018c70:	e064      	b.n	8018d3c <_processRcPpm+0x184>

	case 2:
		if (diff < p_owner->__threshold_1us) {
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8018c78:	887a      	ldrh	r2, [r7, #2]
 8018c7a:	429a      	cmp	r2, r3
 8018c7c:	d257      	bcs.n	8018d2e <_processRcPpm+0x176>
			p_owner->_channel++;
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8018c84:	b2db      	uxtb	r3, r3
 8018c86:	3301      	adds	r3, #1
 8018c88:	b2db      	uxtb	r3, r3
 8018c8a:	b25a      	sxtb	r2, r3
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	f883 2020 	strb.w	r2, [r3, #32]
			if (p_owner->_channel < p_owner->__max_channel) {
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8018c98:	461a      	mov	r2, r3
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8018ca0:	429a      	cmp	r2, r3
 8018ca2:	da4d      	bge.n	8018d40 <_processRcPpm+0x188>
				if (p_owner->__valid_range.check) {
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8018caa:	f003 0301 	and.w	r3, r3, #1
 8018cae:	b2db      	uxtb	r3, r3
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d019      	beq.n	8018ce8 <_processRcPpm+0x130>
					if (diff >= p_owner->__valid_range.min && diff <= p_owner->__valid_range.max) {
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8018cb8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8018cbc:	b29b      	uxth	r3, r3
 8018cbe:	461a      	mov	r2, r3
 8018cc0:	887b      	ldrh	r3, [r7, #2]
 8018cc2:	4293      	cmp	r3, r2
 8018cc4:	d31b      	bcc.n	8018cfe <_processRcPpm+0x146>
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018cca:	887a      	ldrh	r2, [r7, #2]
 8018ccc:	429a      	cmp	r2, r3
 8018cce:	d816      	bhi.n	8018cfe <_processRcPpm+0x146>
						p_owner->__p_channel[p_owner->_channel] = diff;
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8018cda:	005b      	lsls	r3, r3, #1
 8018cdc:	4413      	add	r3, r2
 8018cde:	887a      	ldrh	r2, [r7, #2]
 8018ce0:	801a      	strh	r2, [r3, #0]
						rtn = diff;
 8018ce2:	887b      	ldrh	r3, [r7, #2]
 8018ce4:	81fb      	strh	r3, [r7, #14]
 8018ce6:	e00a      	b.n	8018cfe <_processRcPpm+0x146>
					}
				}
				else {
					p_owner->__p_channel[p_owner->_channel] = diff;
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8018cf2:	005b      	lsls	r3, r3, #1
 8018cf4:	4413      	add	r3, r2
 8018cf6:	887a      	ldrh	r2, [r7, #2]
 8018cf8:	801a      	strh	r2, [r3, #0]
					rtn = diff;
 8018cfa:	887b      	ldrh	r3, [r7, #2]
 8018cfc:	81fb      	strh	r3, [r7, #14]
				}

				if (rtn && p_owner->_channel + 1 >= p_owner->parent._channel_count) {
 8018cfe:	89fb      	ldrh	r3, [r7, #14]
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d01d      	beq.n	8018d40 <_processRcPpm+0x188>
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8018d0a:	3301      	adds	r3, #1
 8018d0c:	687a      	ldr	r2, [r7, #4]
 8018d0e:	7892      	ldrb	r2, [r2, #2]
 8018d10:	4293      	cmp	r3, r2
 8018d12:	db15      	blt.n	8018d40 <_processRcPpm+0x188>
					if (p_owner->parent.__evt_receive) {
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	699b      	ldr	r3, [r3, #24]
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d011      	beq.n	8018d40 <_processRcPpm+0x188>
						(*p_owner->parent.__evt_receive)(&p_owner->parent, p_owner->__p_channel, p_owner->parent.__p_issuer);
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	699b      	ldr	r3, [r3, #24]
 8018d20:	6878      	ldr	r0, [r7, #4]
 8018d22:	687a      	ldr	r2, [r7, #4]
 8018d24:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8018d26:	687a      	ldr	r2, [r7, #4]
 8018d28:	69d2      	ldr	r2, [r2, #28]
 8018d2a:	4798      	blx	r3
			}
		}
		else {
			p_owner->_channel = -1;
		}
		break;
 8018d2c:	e008      	b.n	8018d40 <_processRcPpm+0x188>
			p_owner->_channel = -1;
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	22ff      	movs	r2, #255	; 0xff
 8018d32:	f883 2020 	strb.w	r2, [r3, #32]
		break;
 8018d36:	e003      	b.n	8018d40 <_processRcPpm+0x188>
		break;
 8018d38:	bf00      	nop
 8018d3a:	e002      	b.n	8018d42 <_processRcPpm+0x18a>
		break;
 8018d3c:	bf00      	nop
 8018d3e:	e000      	b.n	8018d42 <_processRcPpm+0x18a>
		break;
 8018d40:	bf00      	nop
	}
	return rtn;
 8018d42:	89fb      	ldrh	r3, [r7, #14]
}
 8018d44:	4618      	mov	r0, r3
 8018d46:	3710      	adds	r7, #16
 8018d48:	46bd      	mov	sp, r7
 8018d4a:	bd80      	pop	{r7, pc}

08018d4c <pifRcPpm_Init>:


BOOL pifRcPpm_Init(PifRcPpm* p_owner, PifId id, uint8_t channel_count, uint16_t threshold_1us)
{
 8018d4c:	b580      	push	{r7, lr}
 8018d4e:	b084      	sub	sp, #16
 8018d50:	af00      	add	r7, sp, #0
 8018d52:	60f8      	str	r0, [r7, #12]
 8018d54:	4608      	mov	r0, r1
 8018d56:	4611      	mov	r1, r2
 8018d58:	461a      	mov	r2, r3
 8018d5a:	4603      	mov	r3, r0
 8018d5c:	817b      	strh	r3, [r7, #10]
 8018d5e:	460b      	mov	r3, r1
 8018d60:	727b      	strb	r3, [r7, #9]
 8018d62:	4613      	mov	r3, r2
 8018d64:	80fb      	strh	r3, [r7, #6]
    if (!p_owner) {
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d104      	bne.n	8018d76 <pifRcPpm_Init+0x2a>
        pif_error = E_INVALID_PARAM;
 8018d6c:	4b1e      	ldr	r3, [pc, #120]	; (8018de8 <pifRcPpm_Init+0x9c>)
 8018d6e:	2201      	movs	r2, #1
 8018d70:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8018d72:	2300      	movs	r3, #0
 8018d74:	e033      	b.n	8018dde <pifRcPpm_Init+0x92>
    }

	memset(p_owner, 0, sizeof(PifRcPpm));
 8018d76:	2254      	movs	r2, #84	; 0x54
 8018d78:	2100      	movs	r1, #0
 8018d7a:	68f8      	ldr	r0, [r7, #12]
 8018d7c:	f00b f89e 	bl	8023ebc <memset>

    p_owner->__p_channel = calloc(sizeof(uint16_t), channel_count);
 8018d80:	7a7b      	ldrb	r3, [r7, #9]
 8018d82:	4619      	mov	r1, r3
 8018d84:	2002      	movs	r0, #2
 8018d86:	f00b f849 	bl	8023e1c <calloc>
 8018d8a:	4603      	mov	r3, r0
 8018d8c:	461a      	mov	r2, r3
 8018d8e:	68fb      	ldr	r3, [r7, #12]
 8018d90:	651a      	str	r2, [r3, #80]	; 0x50
    if (!p_owner->__p_channel) {
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d104      	bne.n	8018da4 <pifRcPpm_Init+0x58>
		pif_error = E_OUT_OF_HEAP;
 8018d9a:	4b13      	ldr	r3, [pc, #76]	; (8018de8 <pifRcPpm_Init+0x9c>)
 8018d9c:	2203      	movs	r2, #3
 8018d9e:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8018da0:	2300      	movs	r3, #0
 8018da2:	e01c      	b.n	8018dde <pifRcPpm_Init+0x92>
	}

    if (id == PIF_ID_AUTO) id = pif_id++;
 8018da4:	897b      	ldrh	r3, [r7, #10]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d106      	bne.n	8018db8 <pifRcPpm_Init+0x6c>
 8018daa:	4b10      	ldr	r3, [pc, #64]	; (8018dec <pifRcPpm_Init+0xa0>)
 8018dac:	881b      	ldrh	r3, [r3, #0]
 8018dae:	1c5a      	adds	r2, r3, #1
 8018db0:	b291      	uxth	r1, r2
 8018db2:	4a0e      	ldr	r2, [pc, #56]	; (8018dec <pifRcPpm_Init+0xa0>)
 8018db4:	8011      	strh	r1, [r2, #0]
 8018db6:	817b      	strh	r3, [r7, #10]
    p_owner->parent._id = id;
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	897a      	ldrh	r2, [r7, #10]
 8018dbc:	801a      	strh	r2, [r3, #0]
	p_owner->parent._failsafe = FALSE;
 8018dbe:	68fb      	ldr	r3, [r7, #12]
 8018dc0:	2200      	movs	r2, #0
 8018dc2:	70da      	strb	r2, [r3, #3]
	p_owner->_channel = -1;
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	22ff      	movs	r2, #255	; 0xff
 8018dc8:	f883 2020 	strb.w	r2, [r3, #32]
	p_owner->__max_channel = channel_count;
 8018dcc:	68fb      	ldr	r3, [r7, #12]
 8018dce:	7a7a      	ldrb	r2, [r7, #9]
 8018dd0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    p_owner->__threshold_1us = threshold_1us;
 8018dd4:	68fb      	ldr	r3, [r7, #12]
 8018dd6:	88fa      	ldrh	r2, [r7, #6]
 8018dd8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    return TRUE;
 8018ddc:	2301      	movs	r3, #1
}
 8018dde:	4618      	mov	r0, r3
 8018de0:	3710      	adds	r7, #16
 8018de2:	46bd      	mov	sp, r7
 8018de4:	bd80      	pop	{r7, pc}
 8018de6:	bf00      	nop
 8018de8:	20001de0 	.word	0x20001de0
 8018dec:	20000128 	.word	0x20000128

08018df0 <pifRcPpm_SetValidRange>:
		p_owner->__p_channel = NULL;
	}
}

BOOL pifRcPpm_SetValidRange(PifRcPpm* p_owner, uint32_t min, uint32_t max)
{
 8018df0:	b480      	push	{r7}
 8018df2:	b085      	sub	sp, #20
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	60f8      	str	r0, [r7, #12]
 8018df8:	60b9      	str	r1, [r7, #8]
 8018dfa:	607a      	str	r2, [r7, #4]
	p_owner->__valid_range.check = TRUE;
 8018dfc:	68fa      	ldr	r2, [r7, #12]
 8018dfe:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8018e02:	f043 0301 	orr.w	r3, r3, #1
 8018e06:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
	p_owner->__valid_range.min = min;
 8018e0a:	68bb      	ldr	r3, [r7, #8]
 8018e0c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8018e10:	b299      	uxth	r1, r3
 8018e12:	68fa      	ldr	r2, [r7, #12]
 8018e14:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 8018e16:	f361 034f 	bfi	r3, r1, #1, #15
 8018e1a:	8453      	strh	r3, [r2, #34]	; 0x22
	p_owner->__valid_range.max = max;
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	b29a      	uxth	r2, r3
 8018e20:	68fb      	ldr	r3, [r7, #12]
 8018e22:	849a      	strh	r2, [r3, #36]	; 0x24
	return TRUE;
 8018e24:	2301      	movs	r3, #1
}
 8018e26:	4618      	mov	r0, r3
 8018e28:	3714      	adds	r7, #20
 8018e2a:	46bd      	mov	sp, r7
 8018e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e30:	4770      	bx	lr

08018e32 <pifRcPpm_sigTick>:
	p_owner->__last_ptr = 0;
	p_owner->__count = 0;
}

uint16_t pifRcPpm_sigTick(PifRcPpm* p_owner, uint32_t time_us)
{
 8018e32:	b580      	push	{r7, lr}
 8018e34:	b084      	sub	sp, #16
 8018e36:	af00      	add	r7, sp, #0
 8018e38:	6078      	str	r0, [r7, #4]
 8018e3a:	6039      	str	r1, [r7, #0]
	uint16_t rtn = 0;
 8018e3c:	2300      	movs	r3, #0
 8018e3e:	81fb      	strh	r3, [r7, #14]

	p_owner->__pulse[p_owner->__ptr].falling = time_us;
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018e46:	687a      	ldr	r2, [r7, #4]
 8018e48:	3305      	adds	r3, #5
 8018e4a:	00db      	lsls	r3, r3, #3
 8018e4c:	4413      	add	r3, r2
 8018e4e:	683a      	ldr	r2, [r7, #0]
 8018e50:	605a      	str	r2, [r3, #4]
	rtn = _processRcPpm(p_owner, p_owner->__pulse[p_owner->__ptr].falling - p_owner->__pulse[p_owner->__last_ptr].falling);
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018e58:	687a      	ldr	r2, [r7, #4]
 8018e5a:	3305      	adds	r3, #5
 8018e5c:	00db      	lsls	r3, r3, #3
 8018e5e:	4413      	add	r3, r2
 8018e60:	685b      	ldr	r3, [r3, #4]
 8018e62:	b29a      	uxth	r2, r3
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8018e6a:	6879      	ldr	r1, [r7, #4]
 8018e6c:	3305      	adds	r3, #5
 8018e6e:	00db      	lsls	r3, r3, #3
 8018e70:	440b      	add	r3, r1
 8018e72:	685b      	ldr	r3, [r3, #4]
 8018e74:	b29b      	uxth	r3, r3
 8018e76:	1ad3      	subs	r3, r2, r3
 8018e78:	b29b      	uxth	r3, r3
 8018e7a:	4619      	mov	r1, r3
 8018e7c:	6878      	ldr	r0, [r7, #4]
 8018e7e:	f7ff fe9b 	bl	8018bb8 <_processRcPpm>
 8018e82:	4603      	mov	r3, r0
 8018e84:	81fb      	strh	r3, [r7, #14]
	p_owner->__last_ptr = p_owner->__ptr;
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	p_owner->__ptr = (p_owner->__ptr + 1) & PIF_RC_PPM_DATA_MASK;
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018e98:	3301      	adds	r3, #1
 8018e9a:	b2db      	uxtb	r3, r3
 8018e9c:	f003 0303 	and.w	r3, r3, #3
 8018ea0:	b2da      	uxtb	r2, r3
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	if (p_owner->__count < PIF_RC_PPM_DATA_SIZE) p_owner->__count++;
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8018eae:	2b03      	cmp	r3, #3
 8018eb0:	d807      	bhi.n	8018ec2 <pifRcPpm_sigTick+0x90>
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8018eb8:	3301      	adds	r3, #1
 8018eba:	b2da      	uxtb	r2, r3
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	return rtn;
 8018ec2:	89fb      	ldrh	r3, [r7, #14]
}
 8018ec4:	4618      	mov	r0, r3
 8018ec6:	3710      	adds	r7, #16
 8018ec8:	46bd      	mov	sp, r7
 8018eca:	bd80      	pop	{r7, pc}

08018ecc <pifRcPwm_Init>:
	return rtn;
}


BOOL pifRcPwm_Init(PifRcPwm* p_owner, PifId id, uint8_t channel_count)
{
 8018ecc:	b580      	push	{r7, lr}
 8018ece:	b082      	sub	sp, #8
 8018ed0:	af00      	add	r7, sp, #0
 8018ed2:	6078      	str	r0, [r7, #4]
 8018ed4:	460b      	mov	r3, r1
 8018ed6:	807b      	strh	r3, [r7, #2]
 8018ed8:	4613      	mov	r3, r2
 8018eda:	707b      	strb	r3, [r7, #1]
    if (!p_owner) {
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d104      	bne.n	8018eec <pifRcPwm_Init+0x20>
        pif_error = E_INVALID_PARAM;
 8018ee2:	4b25      	ldr	r3, [pc, #148]	; (8018f78 <pifRcPwm_Init+0xac>)
 8018ee4:	2201      	movs	r2, #1
 8018ee6:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8018ee8:	2300      	movs	r3, #0
 8018eea:	e041      	b.n	8018f70 <pifRcPwm_Init+0xa4>
    }

	memset(p_owner, 0, sizeof(PifRcPwm));
 8018eec:	2230      	movs	r2, #48	; 0x30
 8018eee:	2100      	movs	r1, #0
 8018ef0:	6878      	ldr	r0, [r7, #4]
 8018ef2:	f00a ffe3 	bl	8023ebc <memset>

	p_owner->__p_data = calloc(sizeof(PifRcPwmData), channel_count);
 8018ef6:	787b      	ldrb	r3, [r7, #1]
 8018ef8:	4619      	mov	r1, r3
 8018efa:	2024      	movs	r0, #36	; 0x24
 8018efc:	f00a ff8e 	bl	8023e1c <calloc>
 8018f00:	4603      	mov	r3, r0
 8018f02:	461a      	mov	r2, r3
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	629a      	str	r2, [r3, #40]	; 0x28
    if (!p_owner->__p_data) {
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	d108      	bne.n	8018f22 <pifRcPwm_Init+0x56>
		pif_error = E_OUT_OF_HEAP;
 8018f10:	4b19      	ldr	r3, [pc, #100]	; (8018f78 <pifRcPwm_Init+0xac>)
 8018f12:	2203      	movs	r2, #3
 8018f14:	701a      	strb	r2, [r3, #0]
        goto fail;
 8018f16:	bf00      	nop
	p_owner->parent._failsafe = FALSE;
	p_owner->__max_channel = channel_count;
    return TRUE;

fail:
	pifRcPwm_Clear(p_owner);
 8018f18:	6878      	ldr	r0, [r7, #4]
 8018f1a:	f000 f831 	bl	8018f80 <pifRcPwm_Clear>
	return FALSE;
 8018f1e:	2300      	movs	r3, #0
 8018f20:	e026      	b.n	8018f70 <pifRcPwm_Init+0xa4>
    p_owner->__p_channel = calloc(sizeof(uint16_t), channel_count);
 8018f22:	787b      	ldrb	r3, [r7, #1]
 8018f24:	4619      	mov	r1, r3
 8018f26:	2002      	movs	r0, #2
 8018f28:	f00a ff78 	bl	8023e1c <calloc>
 8018f2c:	4603      	mov	r3, r0
 8018f2e:	461a      	mov	r2, r3
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	62da      	str	r2, [r3, #44]	; 0x2c
    if (!p_owner->__p_channel) {
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	d104      	bne.n	8018f46 <pifRcPwm_Init+0x7a>
		pif_error = E_OUT_OF_HEAP;
 8018f3c:	4b0e      	ldr	r3, [pc, #56]	; (8018f78 <pifRcPwm_Init+0xac>)
 8018f3e:	2203      	movs	r2, #3
 8018f40:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8018f42:	2300      	movs	r3, #0
 8018f44:	e014      	b.n	8018f70 <pifRcPwm_Init+0xa4>
    if (id == PIF_ID_AUTO) id = pif_id++;
 8018f46:	887b      	ldrh	r3, [r7, #2]
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d106      	bne.n	8018f5a <pifRcPwm_Init+0x8e>
 8018f4c:	4b0b      	ldr	r3, [pc, #44]	; (8018f7c <pifRcPwm_Init+0xb0>)
 8018f4e:	881b      	ldrh	r3, [r3, #0]
 8018f50:	1c5a      	adds	r2, r3, #1
 8018f52:	b291      	uxth	r1, r2
 8018f54:	4a09      	ldr	r2, [pc, #36]	; (8018f7c <pifRcPwm_Init+0xb0>)
 8018f56:	8011      	strh	r1, [r2, #0]
 8018f58:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	887a      	ldrh	r2, [r7, #2]
 8018f5e:	801a      	strh	r2, [r3, #0]
	p_owner->parent._failsafe = FALSE;
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	2200      	movs	r2, #0
 8018f64:	70da      	strb	r2, [r3, #3]
	p_owner->__max_channel = channel_count;
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	787a      	ldrb	r2, [r7, #1]
 8018f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    return TRUE;
 8018f6e:	2301      	movs	r3, #1
}
 8018f70:	4618      	mov	r0, r3
 8018f72:	3708      	adds	r7, #8
 8018f74:	46bd      	mov	sp, r7
 8018f76:	bd80      	pop	{r7, pc}
 8018f78:	20001de0 	.word	0x20001de0
 8018f7c:	20000128 	.word	0x20000128

08018f80 <pifRcPwm_Clear>:

void pifRcPwm_Clear(PifRcPwm* p_owner)
{
 8018f80:	b580      	push	{r7, lr}
 8018f82:	b082      	sub	sp, #8
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	6078      	str	r0, [r7, #4]
	if (p_owner->__p_channel) {
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d007      	beq.n	8018fa0 <pifRcPwm_Clear+0x20>
		free(p_owner->__p_channel);
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f94:	4618      	mov	r0, r3
 8018f96:	f00a ff7b 	bl	8023e90 <free>
		p_owner->__p_channel = NULL;
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	2200      	movs	r2, #0
 8018f9e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	if (p_owner->__p_data) {
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d007      	beq.n	8018fb8 <pifRcPwm_Clear+0x38>
		free(p_owner->__p_data);
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018fac:	4618      	mov	r0, r3
 8018fae:	f00a ff6f 	bl	8023e90 <free>
		p_owner->__p_data = NULL;
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	2200      	movs	r2, #0
 8018fb6:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 8018fb8:	bf00      	nop
 8018fba:	3708      	adds	r7, #8
 8018fbc:	46bd      	mov	sp, r7
 8018fbe:	bd80      	pop	{r7, pc}

08018fc0 <pifRcPwm_SetValidRange>:

BOOL pifRcPwm_SetValidRange(PifRcPwm* p_owner, uint32_t min, uint32_t max)
{
 8018fc0:	b480      	push	{r7}
 8018fc2:	b085      	sub	sp, #20
 8018fc4:	af00      	add	r7, sp, #0
 8018fc6:	60f8      	str	r0, [r7, #12]
 8018fc8:	60b9      	str	r1, [r7, #8]
 8018fca:	607a      	str	r2, [r7, #4]
	p_owner->__valid_range.check = TRUE;
 8018fcc:	68fa      	ldr	r2, [r7, #12]
 8018fce:	f892 3020 	ldrb.w	r3, [r2, #32]
 8018fd2:	f043 0301 	orr.w	r3, r3, #1
 8018fd6:	f882 3020 	strb.w	r3, [r2, #32]
	p_owner->__valid_range.min = min;
 8018fda:	68bb      	ldr	r3, [r7, #8]
 8018fdc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8018fe0:	b299      	uxth	r1, r3
 8018fe2:	68fa      	ldr	r2, [r7, #12]
 8018fe4:	8c13      	ldrh	r3, [r2, #32]
 8018fe6:	f361 034f 	bfi	r3, r1, #1, #15
 8018fea:	8413      	strh	r3, [r2, #32]
	p_owner->__valid_range.max = max;
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	b29a      	uxth	r2, r3
 8018ff0:	68fb      	ldr	r3, [r7, #12]
 8018ff2:	845a      	strh	r2, [r3, #34]	; 0x22
	return TRUE;
 8018ff4:	2301      	movs	r3, #1
}
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	3714      	adds	r7, #20
 8018ffa:	46bd      	mov	sp, r7
 8018ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019000:	4770      	bx	lr
	...

08019004 <_evtParsing>:

#define SBUS_RETRY_TIMEOUT		3		// 3ms


static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 8019004:	b580      	push	{r7, lr}
 8019006:	b090      	sub	sp, #64	; 0x40
 8019008:	af00      	add	r7, sp, #0
 801900a:	6078      	str	r0, [r7, #4]
 801900c:	6039      	str	r1, [r7, #0]
	PifRcSbus *p_owner = (PifRcSbus *)p_client;
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t i, data;
	uint8_t* p_buffer;
	uint16_t channels[PIF_SBUS_CHANNEL_COUNT]; 	// servo data received

    if (!p_owner->parent.__evt_receive) return;
 8019012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019014:	699b      	ldr	r3, [r3, #24]
 8019016:	2b00      	cmp	r3, #0
 8019018:	f000 8206 	beq.w	8019428 <_evtParsing+0x424>

	if (pif_cumulative_timer1ms - p_owner->__last_time >= SBUS_RETRY_TIMEOUT) {
 801901c:	4b1f      	ldr	r3, [pc, #124]	; (801909c <_evtParsing+0x98>)
 801901e:	681a      	ldr	r2, [r3, #0]
 8019020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019024:	1ad3      	subs	r3, r2, r3
 8019026:	2b02      	cmp	r3, #2
 8019028:	d903      	bls.n	8019032 <_evtParsing+0x2e>
		p_owner->__index = 0;
 801902a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801902c:	2200      	movs	r2, #0
 801902e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	p_owner->__last_time = pif_cumulative_timer1ms;
 8019032:	4b1a      	ldr	r3, [pc, #104]	; (801909c <_evtParsing+0x98>)
 8019034:	681a      	ldr	r2, [r3, #0]
 8019036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019038:	641a      	str	r2, [r3, #64]	; 0x40

	p_buffer = p_owner->__buffer;
 801903a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801903c:	3325      	adds	r3, #37	; 0x25
 801903e:	637b      	str	r3, [r7, #52]	; 0x34

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8019040:	e1e6      	b.n	8019410 <_evtParsing+0x40c>
		if (p_owner->__index == 0 && data != SBUS_STARTBYTE) {
 8019042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019044:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019048:	2b00      	cmp	r3, #0
 801904a:	d104      	bne.n	8019056 <_evtParsing+0x52>
 801904c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8019050:	2b0f      	cmp	r3, #15
 8019052:	d000      	beq.n	8019056 <_evtParsing+0x52>
			continue;
 8019054:	e1dc      	b.n	8019410 <_evtParsing+0x40c>
		}

		p_buffer[p_owner->__index++] = data;
 8019056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019058:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801905c:	1c5a      	adds	r2, r3, #1
 801905e:	b2d1      	uxtb	r1, r2
 8019060:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019062:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
 8019066:	461a      	mov	r2, r3
 8019068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801906a:	4413      	add	r3, r2
 801906c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8019070:	701a      	strb	r2, [r3, #0]

	    if (p_owner->__index == SBUS_FRAME_SIZE) {
 8019072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019074:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019078:	2b19      	cmp	r3, #25
 801907a:	f040 81c9 	bne.w	8019410 <_evtParsing+0x40c>
			p_owner->__index = 0;
 801907e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019080:	2200      	movs	r2, #0
 8019082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if (p_buffer[24] != SBUS_ENDBYTE) {
 8019086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019088:	3318      	adds	r3, #24
 801908a:	781b      	ldrb	r3, [r3, #0]
 801908c:	2b00      	cmp	r3, #0
 801908e:	d007      	beq.n	80190a0 <_evtParsing+0x9c>
				//incorrect end byte, out of sync
				p_owner->parent._error_frames++;
 8019090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019092:	691b      	ldr	r3, [r3, #16]
 8019094:	1c5a      	adds	r2, r3, #1
 8019096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019098:	611a      	str	r2, [r3, #16]
				continue;
 801909a:	e1b9      	b.n	8019410 <_evtParsing+0x40c>
 801909c:	20001df8 	.word	0x20001df8
			}

			p_owner->parent._last_frame_time = pif_cumulative_timer1ms;
 80190a0:	4b9d      	ldr	r3, [pc, #628]	; (8019318 <_evtParsing+0x314>)
 80190a2:	681a      	ldr	r2, [r3, #0]
 80190a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190a6:	609a      	str	r2, [r3, #8]

			channels[0]  = (p_buffer[1]       | p_buffer[2] << 8)                       & 0x07FF;
 80190a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190aa:	3301      	adds	r3, #1
 80190ac:	781b      	ldrb	r3, [r3, #0]
 80190ae:	b21a      	sxth	r2, r3
 80190b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190b2:	3302      	adds	r3, #2
 80190b4:	781b      	ldrb	r3, [r3, #0]
 80190b6:	021b      	lsls	r3, r3, #8
 80190b8:	b21b      	sxth	r3, r3
 80190ba:	4313      	orrs	r3, r2
 80190bc:	b21b      	sxth	r3, r3
 80190be:	b29b      	uxth	r3, r3
 80190c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80190c4:	b29b      	uxth	r3, r3
 80190c6:	81bb      	strh	r3, [r7, #12]
			channels[1]  = (p_buffer[2] >> 3  | p_buffer[3] << 5)                 	    & 0x07FF;
 80190c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190ca:	3302      	adds	r3, #2
 80190cc:	781b      	ldrb	r3, [r3, #0]
 80190ce:	08db      	lsrs	r3, r3, #3
 80190d0:	b2db      	uxtb	r3, r3
 80190d2:	b21a      	sxth	r2, r3
 80190d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190d6:	3303      	adds	r3, #3
 80190d8:	781b      	ldrb	r3, [r3, #0]
 80190da:	015b      	lsls	r3, r3, #5
 80190dc:	b21b      	sxth	r3, r3
 80190de:	4313      	orrs	r3, r2
 80190e0:	b21b      	sxth	r3, r3
 80190e2:	b29b      	uxth	r3, r3
 80190e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80190e8:	b29b      	uxth	r3, r3
 80190ea:	81fb      	strh	r3, [r7, #14]
			channels[2]  = (p_buffer[3] >> 6  | p_buffer[4] << 2  | p_buffer[5] << 10)  & 0x07FF;
 80190ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190ee:	3303      	adds	r3, #3
 80190f0:	781b      	ldrb	r3, [r3, #0]
 80190f2:	099b      	lsrs	r3, r3, #6
 80190f4:	b2db      	uxtb	r3, r3
 80190f6:	b21a      	sxth	r2, r3
 80190f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190fa:	3304      	adds	r3, #4
 80190fc:	781b      	ldrb	r3, [r3, #0]
 80190fe:	009b      	lsls	r3, r3, #2
 8019100:	b21b      	sxth	r3, r3
 8019102:	4313      	orrs	r3, r2
 8019104:	b21a      	sxth	r2, r3
 8019106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019108:	3305      	adds	r3, #5
 801910a:	781b      	ldrb	r3, [r3, #0]
 801910c:	029b      	lsls	r3, r3, #10
 801910e:	b21b      	sxth	r3, r3
 8019110:	4313      	orrs	r3, r2
 8019112:	b21b      	sxth	r3, r3
 8019114:	b29b      	uxth	r3, r3
 8019116:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801911a:	b29b      	uxth	r3, r3
 801911c:	823b      	strh	r3, [r7, #16]
			channels[3]  = (p_buffer[5] >> 1  | p_buffer[6] << 7)                 	    & 0x07FF;
 801911e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019120:	3305      	adds	r3, #5
 8019122:	781b      	ldrb	r3, [r3, #0]
 8019124:	085b      	lsrs	r3, r3, #1
 8019126:	b2db      	uxtb	r3, r3
 8019128:	b21a      	sxth	r2, r3
 801912a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801912c:	3306      	adds	r3, #6
 801912e:	781b      	ldrb	r3, [r3, #0]
 8019130:	01db      	lsls	r3, r3, #7
 8019132:	b21b      	sxth	r3, r3
 8019134:	4313      	orrs	r3, r2
 8019136:	b21b      	sxth	r3, r3
 8019138:	b29b      	uxth	r3, r3
 801913a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801913e:	b29b      	uxth	r3, r3
 8019140:	827b      	strh	r3, [r7, #18]
			channels[4]  = (p_buffer[6] >> 4  | p_buffer[7] << 4)                 	    & 0x07FF;
 8019142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019144:	3306      	adds	r3, #6
 8019146:	781b      	ldrb	r3, [r3, #0]
 8019148:	091b      	lsrs	r3, r3, #4
 801914a:	b2db      	uxtb	r3, r3
 801914c:	b21a      	sxth	r2, r3
 801914e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019150:	3307      	adds	r3, #7
 8019152:	781b      	ldrb	r3, [r3, #0]
 8019154:	011b      	lsls	r3, r3, #4
 8019156:	b21b      	sxth	r3, r3
 8019158:	4313      	orrs	r3, r2
 801915a:	b21b      	sxth	r3, r3
 801915c:	b29b      	uxth	r3, r3
 801915e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019162:	b29b      	uxth	r3, r3
 8019164:	82bb      	strh	r3, [r7, #20]
			channels[5]  = (p_buffer[7] >> 7  | p_buffer[8] << 1  | p_buffer[9] << 9)   & 0x07FF;
 8019166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019168:	3307      	adds	r3, #7
 801916a:	781b      	ldrb	r3, [r3, #0]
 801916c:	09db      	lsrs	r3, r3, #7
 801916e:	b2db      	uxtb	r3, r3
 8019170:	b21a      	sxth	r2, r3
 8019172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019174:	3308      	adds	r3, #8
 8019176:	781b      	ldrb	r3, [r3, #0]
 8019178:	005b      	lsls	r3, r3, #1
 801917a:	b21b      	sxth	r3, r3
 801917c:	4313      	orrs	r3, r2
 801917e:	b21a      	sxth	r2, r3
 8019180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019182:	3309      	adds	r3, #9
 8019184:	781b      	ldrb	r3, [r3, #0]
 8019186:	025b      	lsls	r3, r3, #9
 8019188:	b21b      	sxth	r3, r3
 801918a:	4313      	orrs	r3, r2
 801918c:	b21b      	sxth	r3, r3
 801918e:	b29b      	uxth	r3, r3
 8019190:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019194:	b29b      	uxth	r3, r3
 8019196:	82fb      	strh	r3, [r7, #22]
			channels[6]  = (p_buffer[9] >> 2  | p_buffer[10] << 6)                	    & 0x07FF;
 8019198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801919a:	3309      	adds	r3, #9
 801919c:	781b      	ldrb	r3, [r3, #0]
 801919e:	089b      	lsrs	r3, r3, #2
 80191a0:	b2db      	uxtb	r3, r3
 80191a2:	b21a      	sxth	r2, r3
 80191a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191a6:	330a      	adds	r3, #10
 80191a8:	781b      	ldrb	r3, [r3, #0]
 80191aa:	019b      	lsls	r3, r3, #6
 80191ac:	b21b      	sxth	r3, r3
 80191ae:	4313      	orrs	r3, r2
 80191b0:	b21b      	sxth	r3, r3
 80191b2:	b29b      	uxth	r3, r3
 80191b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80191b8:	b29b      	uxth	r3, r3
 80191ba:	833b      	strh	r3, [r7, #24]
			channels[7]  = (p_buffer[10] >> 5 | p_buffer[11] << 3)                	    & 0x07FF;
 80191bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191be:	330a      	adds	r3, #10
 80191c0:	781b      	ldrb	r3, [r3, #0]
 80191c2:	095b      	lsrs	r3, r3, #5
 80191c4:	b2db      	uxtb	r3, r3
 80191c6:	b21a      	sxth	r2, r3
 80191c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191ca:	330b      	adds	r3, #11
 80191cc:	781b      	ldrb	r3, [r3, #0]
 80191ce:	00db      	lsls	r3, r3, #3
 80191d0:	b21b      	sxth	r3, r3
 80191d2:	4313      	orrs	r3, r2
 80191d4:	b21b      	sxth	r3, r3
 80191d6:	b29b      	uxth	r3, r3
 80191d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80191dc:	b29b      	uxth	r3, r3
 80191de:	837b      	strh	r3, [r7, #26]
			channels[8]  = (p_buffer[12]      | p_buffer[13] << 8)                	    & 0x07FF;
 80191e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191e2:	330c      	adds	r3, #12
 80191e4:	781b      	ldrb	r3, [r3, #0]
 80191e6:	b21a      	sxth	r2, r3
 80191e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191ea:	330d      	adds	r3, #13
 80191ec:	781b      	ldrb	r3, [r3, #0]
 80191ee:	021b      	lsls	r3, r3, #8
 80191f0:	b21b      	sxth	r3, r3
 80191f2:	4313      	orrs	r3, r2
 80191f4:	b21b      	sxth	r3, r3
 80191f6:	b29b      	uxth	r3, r3
 80191f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80191fc:	b29b      	uxth	r3, r3
 80191fe:	83bb      	strh	r3, [r7, #28]
			channels[9]  = (p_buffer[13] >> 3 | p_buffer[14] << 5)                	    & 0x07FF;
 8019200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019202:	330d      	adds	r3, #13
 8019204:	781b      	ldrb	r3, [r3, #0]
 8019206:	08db      	lsrs	r3, r3, #3
 8019208:	b2db      	uxtb	r3, r3
 801920a:	b21a      	sxth	r2, r3
 801920c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801920e:	330e      	adds	r3, #14
 8019210:	781b      	ldrb	r3, [r3, #0]
 8019212:	015b      	lsls	r3, r3, #5
 8019214:	b21b      	sxth	r3, r3
 8019216:	4313      	orrs	r3, r2
 8019218:	b21b      	sxth	r3, r3
 801921a:	b29b      	uxth	r3, r3
 801921c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019220:	b29b      	uxth	r3, r3
 8019222:	83fb      	strh	r3, [r7, #30]
			channels[10] = (p_buffer[14] >> 6 | p_buffer[15] << 2 | p_buffer[16] << 10) & 0x07FF;
 8019224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019226:	330e      	adds	r3, #14
 8019228:	781b      	ldrb	r3, [r3, #0]
 801922a:	099b      	lsrs	r3, r3, #6
 801922c:	b2db      	uxtb	r3, r3
 801922e:	b21a      	sxth	r2, r3
 8019230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019232:	330f      	adds	r3, #15
 8019234:	781b      	ldrb	r3, [r3, #0]
 8019236:	009b      	lsls	r3, r3, #2
 8019238:	b21b      	sxth	r3, r3
 801923a:	4313      	orrs	r3, r2
 801923c:	b21a      	sxth	r2, r3
 801923e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019240:	3310      	adds	r3, #16
 8019242:	781b      	ldrb	r3, [r3, #0]
 8019244:	029b      	lsls	r3, r3, #10
 8019246:	b21b      	sxth	r3, r3
 8019248:	4313      	orrs	r3, r2
 801924a:	b21b      	sxth	r3, r3
 801924c:	b29b      	uxth	r3, r3
 801924e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019252:	b29b      	uxth	r3, r3
 8019254:	843b      	strh	r3, [r7, #32]
			channels[11] = (p_buffer[16] >> 1 | p_buffer[17] << 7)                	    & 0x07FF;
 8019256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019258:	3310      	adds	r3, #16
 801925a:	781b      	ldrb	r3, [r3, #0]
 801925c:	085b      	lsrs	r3, r3, #1
 801925e:	b2db      	uxtb	r3, r3
 8019260:	b21a      	sxth	r2, r3
 8019262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019264:	3311      	adds	r3, #17
 8019266:	781b      	ldrb	r3, [r3, #0]
 8019268:	01db      	lsls	r3, r3, #7
 801926a:	b21b      	sxth	r3, r3
 801926c:	4313      	orrs	r3, r2
 801926e:	b21b      	sxth	r3, r3
 8019270:	b29b      	uxth	r3, r3
 8019272:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019276:	b29b      	uxth	r3, r3
 8019278:	847b      	strh	r3, [r7, #34]	; 0x22
			channels[12] = (p_buffer[17] >> 4 | p_buffer[18] << 4)                	    & 0x07FF;
 801927a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801927c:	3311      	adds	r3, #17
 801927e:	781b      	ldrb	r3, [r3, #0]
 8019280:	091b      	lsrs	r3, r3, #4
 8019282:	b2db      	uxtb	r3, r3
 8019284:	b21a      	sxth	r2, r3
 8019286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019288:	3312      	adds	r3, #18
 801928a:	781b      	ldrb	r3, [r3, #0]
 801928c:	011b      	lsls	r3, r3, #4
 801928e:	b21b      	sxth	r3, r3
 8019290:	4313      	orrs	r3, r2
 8019292:	b21b      	sxth	r3, r3
 8019294:	b29b      	uxth	r3, r3
 8019296:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801929a:	b29b      	uxth	r3, r3
 801929c:	84bb      	strh	r3, [r7, #36]	; 0x24
			channels[13] = (p_buffer[18] >> 7 | p_buffer[19] << 1 | p_buffer[20] << 9)  & 0x07FF;
 801929e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192a0:	3312      	adds	r3, #18
 80192a2:	781b      	ldrb	r3, [r3, #0]
 80192a4:	09db      	lsrs	r3, r3, #7
 80192a6:	b2db      	uxtb	r3, r3
 80192a8:	b21a      	sxth	r2, r3
 80192aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192ac:	3313      	adds	r3, #19
 80192ae:	781b      	ldrb	r3, [r3, #0]
 80192b0:	005b      	lsls	r3, r3, #1
 80192b2:	b21b      	sxth	r3, r3
 80192b4:	4313      	orrs	r3, r2
 80192b6:	b21a      	sxth	r2, r3
 80192b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192ba:	3314      	adds	r3, #20
 80192bc:	781b      	ldrb	r3, [r3, #0]
 80192be:	025b      	lsls	r3, r3, #9
 80192c0:	b21b      	sxth	r3, r3
 80192c2:	4313      	orrs	r3, r2
 80192c4:	b21b      	sxth	r3, r3
 80192c6:	b29b      	uxth	r3, r3
 80192c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80192cc:	b29b      	uxth	r3, r3
 80192ce:	84fb      	strh	r3, [r7, #38]	; 0x26
			channels[14] = (p_buffer[20] >> 2 | p_buffer[21] << 6)                	    & 0x07FF;
 80192d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192d2:	3314      	adds	r3, #20
 80192d4:	781b      	ldrb	r3, [r3, #0]
 80192d6:	089b      	lsrs	r3, r3, #2
 80192d8:	b2db      	uxtb	r3, r3
 80192da:	b21a      	sxth	r2, r3
 80192dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192de:	3315      	adds	r3, #21
 80192e0:	781b      	ldrb	r3, [r3, #0]
 80192e2:	019b      	lsls	r3, r3, #6
 80192e4:	b21b      	sxth	r3, r3
 80192e6:	4313      	orrs	r3, r2
 80192e8:	b21b      	sxth	r3, r3
 80192ea:	b29b      	uxth	r3, r3
 80192ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80192f0:	b29b      	uxth	r3, r3
 80192f2:	853b      	strh	r3, [r7, #40]	; 0x28
			channels[15] = (p_buffer[21] >> 5 | p_buffer[22] << 3)                	    & 0x07FF;
 80192f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192f6:	3315      	adds	r3, #21
 80192f8:	781b      	ldrb	r3, [r3, #0]
 80192fa:	095b      	lsrs	r3, r3, #5
 80192fc:	b2db      	uxtb	r3, r3
 80192fe:	b21a      	sxth	r2, r3
 8019300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019302:	3316      	adds	r3, #22
 8019304:	781b      	ldrb	r3, [r3, #0]
 8019306:	00db      	lsls	r3, r3, #3
 8019308:	b21b      	sxth	r3, r3
 801930a:	4313      	orrs	r3, r2
 801930c:	b21b      	sxth	r3, r3
 801930e:	b29b      	uxth	r3, r3
 8019310:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019314:	b29b      	uxth	r3, r3
 8019316:	e003      	b.n	8019320 <_evtParsing+0x31c>
 8019318:	20001df8 	.word	0x20001df8
 801931c:	445c0000 	.word	0x445c0000
 8019320:	857b      	strh	r3, [r7, #42]	; 0x2a

			channels[16] = ((p_buffer[23])      & 0x0001) ? 2047 : 0;
 8019322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019324:	3317      	adds	r3, #23
 8019326:	781b      	ldrb	r3, [r3, #0]
 8019328:	f003 0301 	and.w	r3, r3, #1
 801932c:	2b00      	cmp	r3, #0
 801932e:	d002      	beq.n	8019336 <_evtParsing+0x332>
 8019330:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8019334:	e000      	b.n	8019338 <_evtParsing+0x334>
 8019336:	2300      	movs	r3, #0
 8019338:	85bb      	strh	r3, [r7, #44]	; 0x2c
			channels[17] = ((p_buffer[23] >> 1) & 0x0001) ? 2047 : 0;
 801933a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801933c:	3317      	adds	r3, #23
 801933e:	781b      	ldrb	r3, [r3, #0]
 8019340:	085b      	lsrs	r3, r3, #1
 8019342:	b2db      	uxtb	r3, r3
 8019344:	f003 0301 	and.w	r3, r3, #1
 8019348:	2b00      	cmp	r3, #0
 801934a:	d002      	beq.n	8019352 <_evtParsing+0x34e>
 801934c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8019350:	e000      	b.n	8019354 <_evtParsing+0x350>
 8019352:	2300      	movs	r3, #0
 8019354:	85fb      	strh	r3, [r7, #46]	; 0x2e

			if ((p_buffer[23] >> 3) & 0x0001) {
 8019356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019358:	3317      	adds	r3, #23
 801935a:	781b      	ldrb	r3, [r3, #0]
 801935c:	08db      	lsrs	r3, r3, #3
 801935e:	b2db      	uxtb	r3, r3
 8019360:	f003 0301 	and.w	r3, r3, #1
 8019364:	2b00      	cmp	r3, #0
 8019366:	d003      	beq.n	8019370 <_evtParsing+0x36c>
				p_owner->parent._failsafe = TRUE;
 8019368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801936a:	2201      	movs	r2, #1
 801936c:	70da      	strb	r2, [r3, #3]
 801936e:	e002      	b.n	8019376 <_evtParsing+0x372>
			} else {
				p_owner->parent._failsafe = FALSE;
 8019370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019372:	2200      	movs	r2, #0
 8019374:	70da      	strb	r2, [r3, #3]
			}

			if ((p_buffer[23] >> 2) & 0x0001) {
 8019376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019378:	3317      	adds	r3, #23
 801937a:	781b      	ldrb	r3, [r3, #0]
 801937c:	089b      	lsrs	r3, r3, #2
 801937e:	b2db      	uxtb	r3, r3
 8019380:	f003 0301 	and.w	r3, r3, #1
 8019384:	2b00      	cmp	r3, #0
 8019386:	d005      	beq.n	8019394 <_evtParsing+0x390>
				p_owner->parent._lost_frames++;
 8019388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801938a:	695b      	ldr	r3, [r3, #20]
 801938c:	1c5a      	adds	r2, r3, #1
 801938e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019390:	615a      	str	r2, [r3, #20]
				for (i = 0; i < PIF_SBUS_CHANNEL_COUNT; i++) {
					channels[i] = 0.625f * channels[i] + 880;
				}
		    	if (p_owner->parent.__evt_receive) (*p_owner->parent.__evt_receive)(&p_owner->parent, channels, p_owner->parent.__p_issuer);
			}
			break;
 8019392:	e04b      	b.n	801942c <_evtParsing+0x428>
				p_owner->parent._good_frames++;
 8019394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019396:	68db      	ldr	r3, [r3, #12]
 8019398:	1c5a      	adds	r2, r3, #1
 801939a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801939c:	60da      	str	r2, [r3, #12]
				for (i = 0; i < PIF_SBUS_CHANNEL_COUNT; i++) {
 801939e:	2300      	movs	r3, #0
 80193a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80193a4:	e023      	b.n	80193ee <_evtParsing+0x3ea>
					channels[i] = 0.625f * channels[i] + 880;
 80193a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80193aa:	005b      	lsls	r3, r3, #1
 80193ac:	3340      	adds	r3, #64	; 0x40
 80193ae:	443b      	add	r3, r7
 80193b0:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 80193b4:	ee07 3a90 	vmov	s15, r3
 80193b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80193bc:	eeb6 7a04 	vmov.f32	s14, #100	; 0x3f200000  0.625
 80193c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80193c4:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 801931c <_evtParsing+0x318>
 80193c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80193cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80193d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80193d4:	ee17 2a90 	vmov	r2, s15
 80193d8:	b292      	uxth	r2, r2
 80193da:	005b      	lsls	r3, r3, #1
 80193dc:	3340      	adds	r3, #64	; 0x40
 80193de:	443b      	add	r3, r7
 80193e0:	f823 2c34 	strh.w	r2, [r3, #-52]
				for (i = 0; i < PIF_SBUS_CHANNEL_COUNT; i++) {
 80193e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80193e8:	3301      	adds	r3, #1
 80193ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80193ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80193f2:	2b11      	cmp	r3, #17
 80193f4:	d9d7      	bls.n	80193a6 <_evtParsing+0x3a2>
		    	if (p_owner->parent.__evt_receive) (*p_owner->parent.__evt_receive)(&p_owner->parent, channels, p_owner->parent.__p_issuer);
 80193f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193f8:	699b      	ldr	r3, [r3, #24]
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d016      	beq.n	801942c <_evtParsing+0x428>
 80193fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019400:	699b      	ldr	r3, [r3, #24]
 8019402:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019406:	69d2      	ldr	r2, [r2, #28]
 8019408:	f107 010c 	add.w	r1, r7, #12
 801940c:	4798      	blx	r3
			break;
 801940e:	e00d      	b.n	801942c <_evtParsing+0x428>
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8019410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019412:	6a1a      	ldr	r2, [r3, #32]
 8019414:	f107 0133 	add.w	r1, r7, #51	; 0x33
 8019418:	683b      	ldr	r3, [r7, #0]
 801941a:	4610      	mov	r0, r2
 801941c:	4798      	blx	r3
 801941e:	4603      	mov	r3, r0
 8019420:	2b00      	cmp	r3, #0
 8019422:	f47f ae0e 	bne.w	8019042 <_evtParsing+0x3e>
 8019426:	e002      	b.n	801942e <_evtParsing+0x42a>
    if (!p_owner->parent.__evt_receive) return;
 8019428:	bf00      	nop
 801942a:	e000      	b.n	801942e <_evtParsing+0x42a>
			break;
 801942c:	bf00      	nop
		}
	}
}
 801942e:	3740      	adds	r7, #64	; 0x40
 8019430:	46bd      	mov	sp, r7
 8019432:	bd80      	pop	{r7, pc}

08019434 <pifRcSbus_Init>:

BOOL pifRcSbus_Init(PifRcSbus* p_owner, PifId id)
{
 8019434:	b580      	push	{r7, lr}
 8019436:	b082      	sub	sp, #8
 8019438:	af00      	add	r7, sp, #0
 801943a:	6078      	str	r0, [r7, #4]
 801943c:	460b      	mov	r3, r1
 801943e:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	2b00      	cmp	r3, #0
 8019444:	d104      	bne.n	8019450 <pifRcSbus_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8019446:	4b11      	ldr	r3, [pc, #68]	; (801948c <pifRcSbus_Init+0x58>)
 8019448:	2201      	movs	r2, #1
 801944a:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801944c:	2300      	movs	r3, #0
 801944e:	e018      	b.n	8019482 <pifRcSbus_Init+0x4e>
	}

	memset(p_owner, 0, sizeof(PifRcSbus));
 8019450:	2244      	movs	r2, #68	; 0x44
 8019452:	2100      	movs	r1, #0
 8019454:	6878      	ldr	r0, [r7, #4]
 8019456:	f00a fd31 	bl	8023ebc <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 801945a:	887b      	ldrh	r3, [r7, #2]
 801945c:	2b00      	cmp	r3, #0
 801945e:	d106      	bne.n	801946e <pifRcSbus_Init+0x3a>
 8019460:	4b0b      	ldr	r3, [pc, #44]	; (8019490 <pifRcSbus_Init+0x5c>)
 8019462:	881b      	ldrh	r3, [r3, #0]
 8019464:	1c5a      	adds	r2, r3, #1
 8019466:	b291      	uxth	r1, r2
 8019468:	4a09      	ldr	r2, [pc, #36]	; (8019490 <pifRcSbus_Init+0x5c>)
 801946a:	8011      	strh	r1, [r2, #0]
 801946c:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	887a      	ldrh	r2, [r7, #2]
 8019472:	801a      	strh	r2, [r3, #0]
	p_owner->parent._channel_count = PIF_SBUS_CHANNEL_COUNT;
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	2212      	movs	r2, #18
 8019478:	709a      	strb	r2, [r3, #2]
	p_owner->parent._failsafe = TRUE;
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	2201      	movs	r2, #1
 801947e:	70da      	strb	r2, [r3, #3]
    return TRUE;
 8019480:	2301      	movs	r3, #1
}
 8019482:	4618      	mov	r0, r3
 8019484:	3708      	adds	r7, #8
 8019486:	46bd      	mov	sp, r7
 8019488:	bd80      	pop	{r7, pc}
 801948a:	bf00      	nop
 801948c:	20001de0 	.word	0x20001de0
 8019490:	20000128 	.word	0x20000128

08019494 <pifRcSbus_AttachComm>:

void pifRcSbus_AttachComm(PifRcSbus* p_owner, PifComm *p_comm)
{
 8019494:	b580      	push	{r7, lr}
 8019496:	b082      	sub	sp, #8
 8019498:	af00      	add	r7, sp, #0
 801949a:	6078      	str	r0, [r7, #4]
 801949c:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	683a      	ldr	r2, [r7, #0]
 80194a2:	621a      	str	r2, [r3, #32]
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, NULL);
 80194a4:	2300      	movs	r3, #0
 80194a6:	4a04      	ldr	r2, [pc, #16]	; (80194b8 <pifRcSbus_AttachComm+0x24>)
 80194a8:	6879      	ldr	r1, [r7, #4]
 80194aa:	6838      	ldr	r0, [r7, #0]
 80194ac:	f7f9 f85c 	bl	8012568 <pifComm_AttachClient>
}
 80194b0:	bf00      	nop
 80194b2:	3708      	adds	r7, #8
 80194b4:	46bd      	mov	sp, r7
 80194b6:	bd80      	pop	{r7, pc}
 80194b8:	08019005 	.word	0x08019005

080194bc <_evtParsing>:

#define SPEKTRUM_RETRY_TIMEOUT		5	// 5ms


static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 80194bc:	b590      	push	{r4, r7, lr}
 80194be:	b087      	sub	sp, #28
 80194c0:	af00      	add	r7, sp, #0
 80194c2:	6078      	str	r0, [r7, #4]
 80194c4:	6039      	str	r1, [r7, #0]
	PifRcSpektrum *p_owner = (PifRcSpektrum *)p_client;
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	613b      	str	r3, [r7, #16]
	uint8_t data, id;
	uint8_t* p_buffer;
	int index;

    if (!p_owner->parent.__evt_receive) return;
 80194ca:	693b      	ldr	r3, [r7, #16]
 80194cc:	699b      	ldr	r3, [r3, #24]
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	f000 80b9 	beq.w	8019646 <_evtParsing+0x18a>

	if (pif_cumulative_timer1ms - p_owner->__last_time >= SPEKTRUM_RETRY_TIMEOUT) {
 80194d4:	4b5e      	ldr	r3, [pc, #376]	; (8019650 <_evtParsing+0x194>)
 80194d6:	681a      	ldr	r2, [r3, #0]
 80194d8:	693b      	ldr	r3, [r7, #16]
 80194da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80194dc:	1ad3      	subs	r3, r2, r3
 80194de:	2b04      	cmp	r3, #4
 80194e0:	d903      	bls.n	80194ea <_evtParsing+0x2e>
		p_owner->__index = 0;
 80194e2:	693b      	ldr	r3, [r7, #16]
 80194e4:	2200      	movs	r2, #0
 80194e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	p_owner->__last_time = pif_cumulative_timer1ms;
 80194ea:	4b59      	ldr	r3, [pc, #356]	; (8019650 <_evtParsing+0x194>)
 80194ec:	681a      	ldr	r2, [r3, #0]
 80194ee:	693b      	ldr	r3, [r7, #16]
 80194f0:	659a      	str	r2, [r3, #88]	; 0x58

	p_buffer = p_owner->__p_buffer;
 80194f2:	693b      	ldr	r3, [r7, #16]
 80194f4:	3334      	adds	r3, #52	; 0x34
 80194f6:	60fb      	str	r3, [r7, #12]

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 80194f8:	e099      	b.n	801962e <_evtParsing+0x172>
		p_buffer[p_owner->__index++] = data;
 80194fa:	693b      	ldr	r3, [r7, #16]
 80194fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019500:	1c5a      	adds	r2, r3, #1
 8019502:	b2d1      	uxtb	r1, r2
 8019504:	693a      	ldr	r2, [r7, #16]
 8019506:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
 801950a:	461a      	mov	r2, r3
 801950c:	68fb      	ldr	r3, [r7, #12]
 801950e:	4413      	add	r3, r2
 8019510:	7aba      	ldrb	r2, [r7, #10]
 8019512:	701a      	strb	r2, [r3, #0]

		if (p_owner->__index == 2) {
 8019514:	693b      	ldr	r3, [r7, #16]
 8019516:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801951a:	2b02      	cmp	r3, #2
 801951c:	d119      	bne.n	8019552 <_evtParsing+0x96>
			if (p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_22MS_1024_DSM2 && 
 801951e:	68fb      	ldr	r3, [r7, #12]
 8019520:	3301      	adds	r3, #1
 8019522:	781b      	ldrb	r3, [r3, #0]
 8019524:	2b01      	cmp	r3, #1
 8019526:	f000 8082 	beq.w	801962e <_evtParsing+0x172>
					p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSM2 && 
 801952a:	68fb      	ldr	r3, [r7, #12]
 801952c:	3301      	adds	r3, #1
 801952e:	781b      	ldrb	r3, [r3, #0]
			if (p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_22MS_1024_DSM2 && 
 8019530:	2b12      	cmp	r3, #18
 8019532:	d07c      	beq.n	801962e <_evtParsing+0x172>
					p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSMX && 
 8019534:	68fb      	ldr	r3, [r7, #12]
 8019536:	3301      	adds	r3, #1
 8019538:	781b      	ldrb	r3, [r3, #0]
					p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSM2 && 
 801953a:	2bb2      	cmp	r3, #178	; 0xb2
 801953c:	d077      	beq.n	801962e <_evtParsing+0x172>
					p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_22MS_2048_DSMS) {
 801953e:	68fb      	ldr	r3, [r7, #12]
 8019540:	3301      	adds	r3, #1
 8019542:	781b      	ldrb	r3, [r3, #0]
					p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSMX && 
 8019544:	2ba2      	cmp	r3, #162	; 0xa2
 8019546:	d072      	beq.n	801962e <_evtParsing+0x172>
				p_owner->__index = 0;
 8019548:	693b      	ldr	r3, [r7, #16]
 801954a:	2200      	movs	r2, #0
 801954c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				continue;
 8019550:	e06d      	b.n	801962e <_evtParsing+0x172>
			}
		}
		else if (p_owner->__index >= SPEKTRUM_FRAME_SIZE) {
 8019552:	693b      	ldr	r3, [r7, #16]
 8019554:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019558:	2b0f      	cmp	r3, #15
 801955a:	d968      	bls.n	801962e <_evtParsing+0x172>
			p_owner->parent._good_frames++;
 801955c:	693b      	ldr	r3, [r7, #16]
 801955e:	68db      	ldr	r3, [r3, #12]
 8019560:	1c5a      	adds	r2, r3, #1
 8019562:	693b      	ldr	r3, [r7, #16]
 8019564:	60da      	str	r2, [r3, #12]

			for (index = 2; index < SPEKTRUM_FRAME_SIZE; index += 2) {
 8019566:	2302      	movs	r3, #2
 8019568:	617b      	str	r3, [r7, #20]
 801956a:	e048      	b.n	80195fe <_evtParsing+0x142>
				id = (p_buffer[index] >> p_owner->__id_shift) & p_owner->__id_mask;
 801956c:	697b      	ldr	r3, [r7, #20]
 801956e:	68fa      	ldr	r2, [r7, #12]
 8019570:	4413      	add	r3, r2
 8019572:	781b      	ldrb	r3, [r3, #0]
 8019574:	461a      	mov	r2, r3
 8019576:	693b      	ldr	r3, [r7, #16]
 8019578:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801957c:	fa42 f303 	asr.w	r3, r2, r3
 8019580:	b25a      	sxtb	r2, r3
 8019582:	693b      	ldr	r3, [r7, #16]
 8019584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019588:	b25b      	sxtb	r3, r3
 801958a:	4013      	ands	r3, r2
 801958c:	b25b      	sxtb	r3, r3
 801958e:	72fb      	strb	r3, [r7, #11]
				if (id < p_owner->parent._channel_count) {
 8019590:	693b      	ldr	r3, [r7, #16]
 8019592:	789b      	ldrb	r3, [r3, #2]
 8019594:	7afa      	ldrb	r2, [r7, #11]
 8019596:	429a      	cmp	r2, r3
 8019598:	d22e      	bcs.n	80195f8 <_evtParsing+0x13c>
					p_owner->__channel[id] = 988 + (((uint16_t)(p_buffer[index] & p_owner->__pos_mask) << 8) + p_buffer[index + 1]) / p_owner->_pos_factor;
 801959a:	697b      	ldr	r3, [r7, #20]
 801959c:	68fa      	ldr	r2, [r7, #12]
 801959e:	4413      	add	r3, r2
 80195a0:	781a      	ldrb	r2, [r3, #0]
 80195a2:	693b      	ldr	r3, [r7, #16]
 80195a4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80195a8:	4013      	ands	r3, r2
 80195aa:	b2db      	uxtb	r3, r3
 80195ac:	021b      	lsls	r3, r3, #8
 80195ae:	697a      	ldr	r2, [r7, #20]
 80195b0:	3201      	adds	r2, #1
 80195b2:	68f9      	ldr	r1, [r7, #12]
 80195b4:	440a      	add	r2, r1
 80195b6:	7812      	ldrb	r2, [r2, #0]
 80195b8:	4413      	add	r3, r2
 80195ba:	4618      	mov	r0, r3
 80195bc:	f7e6 ff66 	bl	800048c <__aeabi_i2d>
 80195c0:	693b      	ldr	r3, [r7, #16]
 80195c2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80195c6:	f7e7 f8f5 	bl	80007b4 <__aeabi_ddiv>
 80195ca:	4602      	mov	r2, r0
 80195cc:	460b      	mov	r3, r1
 80195ce:	4610      	mov	r0, r2
 80195d0:	4619      	mov	r1, r3
 80195d2:	f04f 0200 	mov.w	r2, #0
 80195d6:	4b1f      	ldr	r3, [pc, #124]	; (8019654 <_evtParsing+0x198>)
 80195d8:	f7e6 fe0c 	bl	80001f4 <__adddf3>
 80195dc:	4602      	mov	r2, r0
 80195de:	460b      	mov	r3, r1
 80195e0:	7afc      	ldrb	r4, [r7, #11]
 80195e2:	4610      	mov	r0, r2
 80195e4:	4619      	mov	r1, r3
 80195e6:	f7e7 fa7d 	bl	8000ae4 <__aeabi_d2uiz>
 80195ea:	4603      	mov	r3, r0
 80195ec:	b299      	uxth	r1, r3
 80195ee:	693b      	ldr	r3, [r7, #16]
 80195f0:	f104 0224 	add.w	r2, r4, #36	; 0x24
 80195f4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (index = 2; index < SPEKTRUM_FRAME_SIZE; index += 2) {
 80195f8:	697b      	ldr	r3, [r7, #20]
 80195fa:	3302      	adds	r3, #2
 80195fc:	617b      	str	r3, [r7, #20]
 80195fe:	697b      	ldr	r3, [r7, #20]
 8019600:	2b0f      	cmp	r3, #15
 8019602:	ddb3      	ble.n	801956c <_evtParsing+0xb0>
				}
			}
			p_owner->parent._last_frame_time = pif_cumulative_timer1ms;
 8019604:	4b12      	ldr	r3, [pc, #72]	; (8019650 <_evtParsing+0x194>)
 8019606:	681a      	ldr	r2, [r3, #0]
 8019608:	693b      	ldr	r3, [r7, #16]
 801960a:	609a      	str	r2, [r3, #8]

			p_owner->__index = 0;
 801960c:	693b      	ldr	r3, [r7, #16]
 801960e:	2200      	movs	r2, #0
 8019610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

			if (p_owner->parent.__evt_receive) (*p_owner->parent.__evt_receive)(&p_owner->parent, p_owner->__channel, p_owner->parent.__p_issuer);
 8019614:	693b      	ldr	r3, [r7, #16]
 8019616:	699b      	ldr	r3, [r3, #24]
 8019618:	2b00      	cmp	r3, #0
 801961a:	d008      	beq.n	801962e <_evtParsing+0x172>
 801961c:	693b      	ldr	r3, [r7, #16]
 801961e:	699b      	ldr	r3, [r3, #24]
 8019620:	6938      	ldr	r0, [r7, #16]
 8019622:	693a      	ldr	r2, [r7, #16]
 8019624:	f102 0148 	add.w	r1, r2, #72	; 0x48
 8019628:	693a      	ldr	r2, [r7, #16]
 801962a:	69d2      	ldr	r2, [r2, #28]
 801962c:	4798      	blx	r3
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 801962e:	693b      	ldr	r3, [r7, #16]
 8019630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019632:	f107 010a 	add.w	r1, r7, #10
 8019636:	683b      	ldr	r3, [r7, #0]
 8019638:	4610      	mov	r0, r2
 801963a:	4798      	blx	r3
 801963c:	4603      	mov	r3, r0
 801963e:	2b00      	cmp	r3, #0
 8019640:	f47f af5b 	bne.w	80194fa <_evtParsing+0x3e>
 8019644:	e000      	b.n	8019648 <_evtParsing+0x18c>
    if (!p_owner->parent.__evt_receive) return;
 8019646:	bf00      	nop
		}
	}
}
 8019648:	371c      	adds	r7, #28
 801964a:	46bd      	mov	sp, r7
 801964c:	bd90      	pop	{r4, r7, pc}
 801964e:	bf00      	nop
 8019650:	20001df8 	.word	0x20001df8
 8019654:	408ee000 	.word	0x408ee000

08019658 <pifRcSpektrum_Init>:

BOOL pifRcSpektrum_Init(PifRcSpektrum* p_owner, PifId id, uint8_t protocol_id)
{
 8019658:	b580      	push	{r7, lr}
 801965a:	b082      	sub	sp, #8
 801965c:	af00      	add	r7, sp, #0
 801965e:	6078      	str	r0, [r7, #4]
 8019660:	460b      	mov	r3, r1
 8019662:	807b      	strh	r3, [r7, #2]
 8019664:	4613      	mov	r3, r2
 8019666:	707b      	strb	r3, [r7, #1]
    if (!p_owner) {
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	2b00      	cmp	r3, #0
 801966c:	d104      	bne.n	8019678 <pifRcSpektrum_Init+0x20>
		pif_error = E_INVALID_PARAM;
 801966e:	4b41      	ldr	r3, [pc, #260]	; (8019774 <pifRcSpektrum_Init+0x11c>)
 8019670:	2201      	movs	r2, #1
 8019672:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8019674:	2300      	movs	r3, #0
 8019676:	e079      	b.n	801976c <pifRcSpektrum_Init+0x114>
	}

	memset(p_owner, 0, sizeof(PifRcSpektrum));
 8019678:	2260      	movs	r2, #96	; 0x60
 801967a:	2100      	movs	r1, #0
 801967c:	6878      	ldr	r0, [r7, #4]
 801967e:	f00a fc1d 	bl	8023ebc <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8019682:	887b      	ldrh	r3, [r7, #2]
 8019684:	2b00      	cmp	r3, #0
 8019686:	d106      	bne.n	8019696 <pifRcSpektrum_Init+0x3e>
 8019688:	4b3b      	ldr	r3, [pc, #236]	; (8019778 <pifRcSpektrum_Init+0x120>)
 801968a:	881b      	ldrh	r3, [r3, #0]
 801968c:	1c5a      	adds	r2, r3, #1
 801968e:	b291      	uxth	r1, r2
 8019690:	4a39      	ldr	r2, [pc, #228]	; (8019778 <pifRcSpektrum_Init+0x120>)
 8019692:	8011      	strh	r1, [r2, #0]
 8019694:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	887a      	ldrh	r2, [r7, #2]
 801969a:	801a      	strh	r2, [r3, #0]
	p_owner->parent._failsafe = FALSE;
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	2200      	movs	r2, #0
 80196a0:	70da      	strb	r2, [r3, #3]
	p_owner->_protocol_id = protocol_id;
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	787a      	ldrb	r2, [r7, #1]
 80196a6:	f883 2020 	strb.w	r2, [r3, #32]
	switch (protocol_id) {
 80196aa:	787b      	ldrb	r3, [r7, #1]
 80196ac:	2bb2      	cmp	r3, #178	; 0xb2
 80196ae:	d023      	beq.n	80196f8 <pifRcSpektrum_Init+0xa0>
 80196b0:	2bb2      	cmp	r3, #178	; 0xb2
 80196b2:	dc55      	bgt.n	8019760 <pifRcSpektrum_Init+0x108>
 80196b4:	2ba2      	cmp	r3, #162	; 0xa2
 80196b6:	d039      	beq.n	801972c <pifRcSpektrum_Init+0xd4>
 80196b8:	2ba2      	cmp	r3, #162	; 0xa2
 80196ba:	dc51      	bgt.n	8019760 <pifRcSpektrum_Init+0x108>
 80196bc:	2b01      	cmp	r3, #1
 80196be:	d002      	beq.n	80196c6 <pifRcSpektrum_Init+0x6e>
 80196c0:	2b12      	cmp	r3, #18
 80196c2:	d019      	beq.n	80196f8 <pifRcSpektrum_Init+0xa0>
 80196c4:	e04c      	b.n	8019760 <pifRcSpektrum_Init+0x108>
	case PIF_SPEKTRUM_PROTOCOL_ID_22MS_1024_DSM2:
		p_owner->parent._channel_count = 7;
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	2207      	movs	r2, #7
 80196ca:	709a      	strb	r2, [r3, #2]
		p_owner->parent._max_frame_period = 25;
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	2219      	movs	r2, #25
 80196d0:	809a      	strh	r2, [r3, #4]
		p_owner->__id_mask = 0x3F;
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	223f      	movs	r2, #63	; 0x3f
 80196d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		p_owner->__id_shift = 2;
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	2202      	movs	r2, #2
 80196de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		p_owner->__pos_mask = 0x03;
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	2203      	movs	r2, #3
 80196e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		p_owner->_pos_factor = 1;
 80196ea:	6879      	ldr	r1, [r7, #4]
 80196ec:	f04f 0200 	mov.w	r2, #0
 80196f0:	4b22      	ldr	r3, [pc, #136]	; (801977c <pifRcSpektrum_Init+0x124>)
 80196f2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		break;
 80196f6:	e038      	b.n	801976a <pifRcSpektrum_Init+0x112>

	case PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSM2:
	case PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSMX:
		p_owner->parent._channel_count = 8;
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	2208      	movs	r2, #8
 80196fc:	709a      	strb	r2, [r3, #2]
		p_owner->parent._max_frame_period = 15;
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	220f      	movs	r2, #15
 8019702:	809a      	strh	r2, [r3, #4]
		p_owner->__id_mask = 0x0F;
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	220f      	movs	r2, #15
 8019708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		p_owner->__id_shift = 3;
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	2203      	movs	r2, #3
 8019710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		p_owner->__pos_mask = 0x07;
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	2207      	movs	r2, #7
 8019718:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		p_owner->_pos_factor = 2;
 801971c:	6879      	ldr	r1, [r7, #4]
 801971e:	f04f 0200 	mov.w	r2, #0
 8019722:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019726:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		break;
 801972a:	e01e      	b.n	801976a <pifRcSpektrum_Init+0x112>

	case PIF_SPEKTRUM_PROTOCOL_ID_22MS_2048_DSMS:
		p_owner->parent._channel_count = 8;
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	2208      	movs	r2, #8
 8019730:	709a      	strb	r2, [r3, #2]
		p_owner->parent._max_frame_period = 25;
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	2219      	movs	r2, #25
 8019736:	809a      	strh	r2, [r3, #4]
		p_owner->__id_mask = 0x0F;
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	220f      	movs	r2, #15
 801973c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		p_owner->__id_shift = 3;
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	2203      	movs	r2, #3
 8019744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		p_owner->__pos_mask = 0x07;
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	2207      	movs	r2, #7
 801974c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		p_owner->_pos_factor = 2;
 8019750:	6879      	ldr	r1, [r7, #4]
 8019752:	f04f 0200 	mov.w	r2, #0
 8019756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801975a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		break;
 801975e:	e004      	b.n	801976a <pifRcSpektrum_Init+0x112>

	default:
		pif_error = E_INVALID_PARAM;
 8019760:	4b04      	ldr	r3, [pc, #16]	; (8019774 <pifRcSpektrum_Init+0x11c>)
 8019762:	2201      	movs	r2, #1
 8019764:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8019766:	2300      	movs	r3, #0
 8019768:	e000      	b.n	801976c <pifRcSpektrum_Init+0x114>
	}
	return TRUE;
 801976a:	2301      	movs	r3, #1
}
 801976c:	4618      	mov	r0, r3
 801976e:	3708      	adds	r7, #8
 8019770:	46bd      	mov	sp, r7
 8019772:	bd80      	pop	{r7, pc}
 8019774:	20001de0 	.word	0x20001de0
 8019778:	20000128 	.word	0x20000128
 801977c:	3ff00000 	.word	0x3ff00000

08019780 <pifRcSpektrum_AttachComm>:

void pifRcSpektrum_AttachComm(PifRcSpektrum* p_owner, PifComm *p_comm)
{
 8019780:	b580      	push	{r7, lr}
 8019782:	b082      	sub	sp, #8
 8019784:	af00      	add	r7, sp, #0
 8019786:	6078      	str	r0, [r7, #4]
 8019788:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	683a      	ldr	r2, [r7, #0]
 801978e:	631a      	str	r2, [r3, #48]	; 0x30
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, NULL);
 8019790:	2300      	movs	r3, #0
 8019792:	4a04      	ldr	r2, [pc, #16]	; (80197a4 <pifRcSpektrum_AttachComm+0x24>)
 8019794:	6879      	ldr	r1, [r7, #4]
 8019796:	6838      	ldr	r0, [r7, #0]
 8019798:	f7f8 fee6 	bl	8012568 <pifComm_AttachClient>
}
 801979c:	bf00      	nop
 801979e:	3708      	adds	r7, #8
 80197a0:	46bd      	mov	sp, r7
 80197a2:	bd80      	pop	{r7, pc}
 80197a4:	080194bd 	.word	0x080194bd

080197a8 <_evtParsing>:
#define SUMD_MAX_FRAME_PERIOD   750 	// 750ms, above this delay, switch to failsafe
#define SUMD_RETRY_TIMEOUT		4		// 4ms


static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 80197a8:	b580      	push	{r7, lr}
 80197aa:	b096      	sub	sp, #88	; 0x58
 80197ac:	af00      	add	r7, sp, #0
 80197ae:	6078      	str	r0, [r7, #4]
 80197b0:	6039      	str	r1, [r7, #0]
	PifRcSumd *p_owner = (PifRcSumd *)p_client;
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t* p_buffer;
    uint16_t channel[PIF_SUMD_CHANNEL_COUNT];
	uint16_t crc;
	int index;

    if (!p_owner->parent.__evt_receive) return;
 80197b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80197b8:	699b      	ldr	r3, [r3, #24]
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	f000 80e4 	beq.w	8019988 <_evtParsing+0x1e0>

	if (pif_cumulative_timer1ms - p_owner->__last_time >= SUMD_RETRY_TIMEOUT) {
 80197c0:	4b73      	ldr	r3, [pc, #460]	; (8019990 <_evtParsing+0x1e8>)
 80197c2:	681a      	ldr	r2, [r3, #0]
 80197c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80197c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80197c8:	1ad3      	subs	r3, r2, r3
 80197ca:	2b03      	cmp	r3, #3
 80197cc:	d903      	bls.n	80197d6 <_evtParsing+0x2e>
		p_owner->__index = 0;
 80197ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80197d0:	2200      	movs	r2, #0
 80197d2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	}
	p_owner->__last_time = pif_cumulative_timer1ms;
 80197d6:	4b6e      	ldr	r3, [pc, #440]	; (8019990 <_evtParsing+0x1e8>)
 80197d8:	681a      	ldr	r2, [r3, #0]
 80197da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80197dc:	66da      	str	r2, [r3, #108]	; 0x6c

	p_buffer = p_owner->__p_buffer;
 80197de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80197e0:	3324      	adds	r3, #36	; 0x24
 80197e2:	64fb      	str	r3, [r7, #76]	; 0x4c

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 80197e4:	e0c4      	b.n	8019970 <_evtParsing+0x1c8>
		//add byte to the ring buffer
		p_buffer[p_owner->__index++] = data;
 80197e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80197e8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80197ec:	1c5a      	adds	r2, r3, #1
 80197ee:	b2d1      	uxtb	r1, r2
 80197f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80197f2:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
 80197f6:	461a      	mov	r2, r3
 80197f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80197fa:	4413      	add	r3, r2
 80197fc:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8019800:	701a      	strb	r2, [r3, #0]

		if (p_owner->__index == 1) {
 8019802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019804:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8019808:	2b01      	cmp	r3, #1
 801980a:	d109      	bne.n	8019820 <_evtParsing+0x78>
			if (p_buffer[0] != SUMD_VENDOR_ID) {
 801980c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801980e:	781b      	ldrb	r3, [r3, #0]
 8019810:	2ba8      	cmp	r3, #168	; 0xa8
 8019812:	f000 80ad 	beq.w	8019970 <_evtParsing+0x1c8>
				p_owner->__index = 0;
 8019816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019818:	2200      	movs	r2, #0
 801981a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				continue;
 801981e:	e0a7      	b.n	8019970 <_evtParsing+0x1c8>
			}
		}
		else if (p_owner->__index == 2) {
 8019820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019822:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8019826:	2b02      	cmp	r3, #2
 8019828:	d11f      	bne.n	801986a <_evtParsing+0xc2>
			if (p_buffer[1] != SUMD_STATUS_VALID && p_buffer[1] != SUMD_STATUS_FAILSAFE) {
 801982a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801982c:	3301      	adds	r3, #1
 801982e:	781b      	ldrb	r3, [r3, #0]
 8019830:	2b01      	cmp	r3, #1
 8019832:	d00e      	beq.n	8019852 <_evtParsing+0xaa>
 8019834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019836:	3301      	adds	r3, #1
 8019838:	781b      	ldrb	r3, [r3, #0]
 801983a:	2b81      	cmp	r3, #129	; 0x81
 801983c:	d009      	beq.n	8019852 <_evtParsing+0xaa>
				p_owner->parent._error_frames++;
 801983e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019840:	691b      	ldr	r3, [r3, #16]
 8019842:	1c5a      	adds	r2, r3, #1
 8019844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019846:	611a      	str	r2, [r3, #16]
				p_owner->__index = 0;
 8019848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801984a:	2200      	movs	r2, #0
 801984c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				continue;
 8019850:	e08e      	b.n	8019970 <_evtParsing+0x1c8>
			}
			else {
				p_owner->parent._failsafe = (p_buffer[1] == SUMD_STATUS_FAILSAFE);
 8019852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019854:	3301      	adds	r3, #1
 8019856:	781b      	ldrb	r3, [r3, #0]
 8019858:	2b81      	cmp	r3, #129	; 0x81
 801985a:	bf0c      	ite	eq
 801985c:	2301      	moveq	r3, #1
 801985e:	2300      	movne	r3, #0
 8019860:	b2db      	uxtb	r3, r3
 8019862:	461a      	mov	r2, r3
 8019864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019866:	70da      	strb	r2, [r3, #3]
 8019868:	e082      	b.n	8019970 <_evtParsing+0x1c8>
			}
		}
		else if (p_owner->__index == 3) {
 801986a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801986c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8019870:	2b03      	cmp	r3, #3
 8019872:	d118      	bne.n	80198a6 <_evtParsing+0xfe>
			if (p_buffer[2] < 2 || p_buffer[2] > PIF_SUMD_CHANNEL_COUNT) {		// 2 < channels < PIF_SUMD_CHANNEL_COUNT
 8019874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019876:	3302      	adds	r3, #2
 8019878:	781b      	ldrb	r3, [r3, #0]
 801987a:	2b01      	cmp	r3, #1
 801987c:	d904      	bls.n	8019888 <_evtParsing+0xe0>
 801987e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019880:	3302      	adds	r3, #2
 8019882:	781b      	ldrb	r3, [r3, #0]
 8019884:	2b20      	cmp	r3, #32
 8019886:	d909      	bls.n	801989c <_evtParsing+0xf4>
				p_owner->parent._error_frames++;
 8019888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801988a:	691b      	ldr	r3, [r3, #16]
 801988c:	1c5a      	adds	r2, r3, #1
 801988e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019890:	611a      	str	r2, [r3, #16]
				p_owner->__index = 0;
 8019892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019894:	2200      	movs	r2, #0
 8019896:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				continue;
 801989a:	e069      	b.n	8019970 <_evtParsing+0x1c8>
			}
			else {
				p_owner->parent._channel_count = p_buffer[2];
 801989c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801989e:	789a      	ldrb	r2, [r3, #2]
 80198a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80198a2:	709a      	strb	r2, [r3, #2]
 80198a4:	e064      	b.n	8019970 <_evtParsing+0x1c8>
			}
		}
		else if (p_owner->__index >= SUMD_HEADER_SIZE + p_buffer[2] * 2 + SUMD_CRC_SIZE) {
 80198a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80198a8:	3302      	adds	r3, #2
 80198aa:	781b      	ldrb	r3, [r3, #0]
 80198ac:	3302      	adds	r3, #2
 80198ae:	005b      	lsls	r3, r3, #1
 80198b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80198b2:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
 80198b6:	4293      	cmp	r3, r2
 80198b8:	da5a      	bge.n	8019970 <_evtParsing+0x1c8>
			//compute CRC with header and data
			crc = pifCrc16(p_buffer, SUMD_HEADER_SIZE + 2 * p_owner->parent._channel_count + SUMD_CRC_SIZE);
 80198ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80198bc:	789b      	ldrb	r3, [r3, #2]
 80198be:	b29b      	uxth	r3, r3
 80198c0:	005b      	lsls	r3, r3, #1
 80198c2:	b29b      	uxth	r3, r3
 80198c4:	3305      	adds	r3, #5
 80198c6:	b29b      	uxth	r3, r3
 80198c8:	4619      	mov	r1, r3
 80198ca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80198cc:	f7f8 fcb1 	bl	8012232 <pifCrc16>
 80198d0:	4603      	mov	r3, r0
 80198d2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			//if frame is valid
			if (crc == 0) {
 80198d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80198da:	2b00      	cmp	r3, #0
 80198dc:	d13f      	bne.n	801995e <_evtParsing+0x1b6>
				p_owner->parent._good_frames++;
 80198de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80198e0:	68db      	ldr	r3, [r3, #12]
 80198e2:	1c5a      	adds	r2, r3, #1
 80198e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80198e6:	60da      	str	r2, [r3, #12]

				//update channel output values
				for (index = 0; index < p_owner->parent._channel_count; index++) {
 80198e8:	2300      	movs	r3, #0
 80198ea:	657b      	str	r3, [r7, #84]	; 0x54
 80198ec:	e01c      	b.n	8019928 <_evtParsing+0x180>
					channel[index] = ((p_buffer[SUMD_HEADER_SIZE + 2 * index] << 8) + p_buffer[SUMD_HEADER_SIZE + 2 * index + 1]) / 8;
 80198ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80198f0:	005b      	lsls	r3, r3, #1
 80198f2:	3303      	adds	r3, #3
 80198f4:	461a      	mov	r2, r3
 80198f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80198f8:	4413      	add	r3, r2
 80198fa:	781b      	ldrb	r3, [r3, #0]
 80198fc:	021b      	lsls	r3, r3, #8
 80198fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019900:	0052      	lsls	r2, r2, #1
 8019902:	3204      	adds	r2, #4
 8019904:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019906:	440a      	add	r2, r1
 8019908:	7812      	ldrb	r2, [r2, #0]
 801990a:	4413      	add	r3, r2
 801990c:	2b00      	cmp	r3, #0
 801990e:	da00      	bge.n	8019912 <_evtParsing+0x16a>
 8019910:	3307      	adds	r3, #7
 8019912:	10db      	asrs	r3, r3, #3
 8019914:	b29a      	uxth	r2, r3
 8019916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019918:	005b      	lsls	r3, r3, #1
 801991a:	3358      	adds	r3, #88	; 0x58
 801991c:	443b      	add	r3, r7
 801991e:	f823 2c50 	strh.w	r2, [r3, #-80]
				for (index = 0; index < p_owner->parent._channel_count; index++) {
 8019922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019924:	3301      	adds	r3, #1
 8019926:	657b      	str	r3, [r7, #84]	; 0x54
 8019928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801992a:	789b      	ldrb	r3, [r3, #2]
 801992c:	461a      	mov	r2, r3
 801992e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019930:	4293      	cmp	r3, r2
 8019932:	dbdc      	blt.n	80198ee <_evtParsing+0x146>
				}
				p_owner->parent._last_frame_time = pif_cumulative_timer1ms;
 8019934:	4b16      	ldr	r3, [pc, #88]	; (8019990 <_evtParsing+0x1e8>)
 8019936:	681a      	ldr	r2, [r3, #0]
 8019938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801993a:	609a      	str	r2, [r3, #8]

				//forgot decoded bytes from the ring buffer
				p_owner->__index = 0;
 801993c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801993e:	2200      	movs	r2, #0
 8019940:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

		    	if (p_owner->parent.__evt_receive) (*p_owner->parent.__evt_receive)(&p_owner->parent, channel, p_owner->parent.__p_issuer);
 8019944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019946:	699b      	ldr	r3, [r3, #24]
 8019948:	2b00      	cmp	r3, #0
 801994a:	d011      	beq.n	8019970 <_evtParsing+0x1c8>
 801994c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801994e:	699b      	ldr	r3, [r3, #24]
 8019950:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8019952:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019954:	69d2      	ldr	r2, [r2, #28]
 8019956:	f107 0108 	add.w	r1, r7, #8
 801995a:	4798      	blx	r3
 801995c:	e008      	b.n	8019970 <_evtParsing+0x1c8>
			}
			else {
				p_owner->parent._error_frames++;
 801995e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019960:	691b      	ldr	r3, [r3, #16]
 8019962:	1c5a      	adds	r2, r3, #1
 8019964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019966:	611a      	str	r2, [r3, #16]
				p_owner->__index = 0;
 8019968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801996a:	2200      	movs	r2, #0
 801996c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8019970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019972:	6a1a      	ldr	r2, [r3, #32]
 8019974:	f107 0149 	add.w	r1, r7, #73	; 0x49
 8019978:	683b      	ldr	r3, [r7, #0]
 801997a:	4610      	mov	r0, r2
 801997c:	4798      	blx	r3
 801997e:	4603      	mov	r3, r0
 8019980:	2b00      	cmp	r3, #0
 8019982:	f47f af30 	bne.w	80197e6 <_evtParsing+0x3e>
 8019986:	e000      	b.n	801998a <_evtParsing+0x1e2>
    if (!p_owner->parent.__evt_receive) return;
 8019988:	bf00      	nop
			}
		}
	}
}
 801998a:	3758      	adds	r7, #88	; 0x58
 801998c:	46bd      	mov	sp, r7
 801998e:	bd80      	pop	{r7, pc}
 8019990:	20001df8 	.word	0x20001df8

08019994 <pifRcSumd_Init>:

BOOL pifRcSumd_Init(PifRcSumd* p_owner, PifId id)
{
 8019994:	b580      	push	{r7, lr}
 8019996:	b082      	sub	sp, #8
 8019998:	af00      	add	r7, sp, #0
 801999a:	6078      	str	r0, [r7, #4]
 801999c:	460b      	mov	r3, r1
 801999e:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	2b00      	cmp	r3, #0
 80199a4:	d104      	bne.n	80199b0 <pifRcSumd_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 80199a6:	4b13      	ldr	r3, [pc, #76]	; (80199f4 <pifRcSumd_Init+0x60>)
 80199a8:	2201      	movs	r2, #1
 80199aa:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 80199ac:	2300      	movs	r3, #0
 80199ae:	e01c      	b.n	80199ea <pifRcSumd_Init+0x56>
	}

	memset(p_owner, 0, sizeof(PifRcSumd));
 80199b0:	2270      	movs	r2, #112	; 0x70
 80199b2:	2100      	movs	r1, #0
 80199b4:	6878      	ldr	r0, [r7, #4]
 80199b6:	f00a fa81 	bl	8023ebc <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 80199ba:	887b      	ldrh	r3, [r7, #2]
 80199bc:	2b00      	cmp	r3, #0
 80199be:	d106      	bne.n	80199ce <pifRcSumd_Init+0x3a>
 80199c0:	4b0d      	ldr	r3, [pc, #52]	; (80199f8 <pifRcSumd_Init+0x64>)
 80199c2:	881b      	ldrh	r3, [r3, #0]
 80199c4:	1c5a      	adds	r2, r3, #1
 80199c6:	b291      	uxth	r1, r2
 80199c8:	4a0b      	ldr	r2, [pc, #44]	; (80199f8 <pifRcSumd_Init+0x64>)
 80199ca:	8011      	strh	r1, [r2, #0]
 80199cc:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	887a      	ldrh	r2, [r7, #2]
 80199d2:	801a      	strh	r2, [r3, #0]
	p_owner->parent._channel_count = PIF_SUMD_CHANNEL_COUNT;
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	2220      	movs	r2, #32
 80199d8:	709a      	strb	r2, [r3, #2]
	p_owner->parent._failsafe = TRUE;
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	2201      	movs	r2, #1
 80199de:	70da      	strb	r2, [r3, #3]
	p_owner->parent._max_frame_period = SUMD_MAX_FRAME_PERIOD;
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80199e6:	809a      	strh	r2, [r3, #4]
    return TRUE;
 80199e8:	2301      	movs	r3, #1
}
 80199ea:	4618      	mov	r0, r3
 80199ec:	3708      	adds	r7, #8
 80199ee:	46bd      	mov	sp, r7
 80199f0:	bd80      	pop	{r7, pc}
 80199f2:	bf00      	nop
 80199f4:	20001de0 	.word	0x20001de0
 80199f8:	20000128 	.word	0x20000128

080199fc <pifRcSumd_AttachComm>:

void pifRcSumd_AttachComm(PifRcSumd* p_owner, PifComm *p_comm)
{
 80199fc:	b580      	push	{r7, lr}
 80199fe:	b082      	sub	sp, #8
 8019a00:	af00      	add	r7, sp, #0
 8019a02:	6078      	str	r0, [r7, #4]
 8019a04:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	683a      	ldr	r2, [r7, #0]
 8019a0a:	621a      	str	r2, [r3, #32]
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, NULL);
 8019a0c:	2300      	movs	r3, #0
 8019a0e:	4a04      	ldr	r2, [pc, #16]	; (8019a20 <pifRcSumd_AttachComm+0x24>)
 8019a10:	6879      	ldr	r1, [r7, #4]
 8019a12:	6838      	ldr	r0, [r7, #0]
 8019a14:	f7f8 fda8 	bl	8012568 <pifComm_AttachClient>
}
 8019a18:	bf00      	nop
 8019a1a:	3708      	adds	r7, #8
 8019a1c:	46bd      	mov	sp, r7
 8019a1e:	bd80      	pop	{r7, pc}
 8019a20:	080197a9 	.word	0x080197a9

08019a24 <pifGy86_Init>:
#include "core/pif_log.h"
#include "sensor/pif_gy86.h"


BOOL pifGy86_Init(PifGy86* p_owner, PifId id, PifI2cPort* p_i2c, PifImuSensor* p_imu_sensor, PifGy86Config* p_config)
{
 8019a24:	b580      	push	{r7, lr}
 8019a26:	b090      	sub	sp, #64	; 0x40
 8019a28:	af02      	add	r7, sp, #8
 8019a2a:	60f8      	str	r0, [r7, #12]
 8019a2c:	607a      	str	r2, [r7, #4]
 8019a2e:	603b      	str	r3, [r7, #0]
 8019a30:	460b      	mov	r3, r1
 8019a32:	817b      	strh	r3, [r7, #10]
	PifMpu60x0IntEnable int_enable;
	PifMpu60x0IntPinCfg int_pin_cfg;
    PifMpu60x0PwrMgmt1 pwr_mgmt_1;
	PifHmc5883ConfigA config_a;

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 8019a34:	68fb      	ldr	r3, [r7, #12]
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d005      	beq.n	8019a46 <pifGy86_Init+0x22>
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	d002      	beq.n	8019a46 <pifGy86_Init+0x22>
 8019a40:	683b      	ldr	r3, [r7, #0]
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d104      	bne.n	8019a50 <pifGy86_Init+0x2c>
		pif_error = E_INVALID_PARAM;
 8019a46:	4b48      	ldr	r3, [pc, #288]	; (8019b68 <pifGy86_Init+0x144>)
 8019a48:	2201      	movs	r2, #1
 8019a4a:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8019a4c:	2300      	movs	r3, #0
 8019a4e:	e1dd      	b.n	8019e0c <pifGy86_Init+0x3e8>
	}

	memset(p_owner, 0, sizeof(PifGy86));
 8019a50:	2264      	movs	r2, #100	; 0x64
 8019a52:	2100      	movs	r1, #0
 8019a54:	68f8      	ldr	r0, [r7, #12]
 8019a56:	f00a fa31 	bl	8023ebc <memset>

    if (!pifMpu60x0_Init(&p_owner->_mpu6050, PIF_ID_AUTO, p_i2c, MPU60X0_I2C_ADDR(0), p_imu_sensor)) goto fail;
 8019a5a:	68fb      	ldr	r3, [r7, #12]
 8019a5c:	1d18      	adds	r0, r3, #4
 8019a5e:	683b      	ldr	r3, [r7, #0]
 8019a60:	9300      	str	r3, [sp, #0]
 8019a62:	2368      	movs	r3, #104	; 0x68
 8019a64:	687a      	ldr	r2, [r7, #4]
 8019a66:	2100      	movs	r1, #0
 8019a68:	f001 f8b8 	bl	801abdc <pifMpu60x0_Init>
 8019a6c:	4603      	mov	r3, r0
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	f000 81a5 	beq.w	8019dbe <pifGy86_Init+0x39a>

    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_SMPLRT_DIV, 0)) goto fail;
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	68db      	ldr	r3, [r3, #12]
 8019a78:	2200      	movs	r2, #0
 8019a7a:	2119      	movs	r1, #25
 8019a7c:	4618      	mov	r0, r3
 8019a7e:	f7f9 f8f9 	bl	8012c74 <pifI2cDevice_WriteRegByte>
 8019a82:	4603      	mov	r3, r0
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	f000 819c 	beq.w	8019dc2 <pifGy86_Init+0x39e>

    pwr_mgmt_1.byte = 0;
 8019a8a:	2300      	movs	r3, #0
 8019a8c:	753b      	strb	r3, [r7, #20]
    pwr_mgmt_1.bit.clksel = p_config ? p_config->mpu60x0_clksel : MPU60X0_CLKSEL_PLL_ZGYRO;
 8019a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d005      	beq.n	8019aa0 <pifGy86_Init+0x7c>
 8019a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019a96:	789b      	ldrb	r3, [r3, #2]
 8019a98:	f003 0307 	and.w	r3, r3, #7
 8019a9c:	b2da      	uxtb	r2, r3
 8019a9e:	e000      	b.n	8019aa2 <pifGy86_Init+0x7e>
 8019aa0:	2203      	movs	r2, #3
 8019aa2:	7d3b      	ldrb	r3, [r7, #20]
 8019aa4:	f362 0302 	bfi	r3, r2, #0, #3
 8019aa8:	753b      	strb	r3, [r7, #20]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	68db      	ldr	r3, [r3, #12]
 8019aae:	7d3a      	ldrb	r2, [r7, #20]
 8019ab0:	216b      	movs	r1, #107	; 0x6b
 8019ab2:	4618      	mov	r0, r3
 8019ab4:	f7f9 f8de 	bl	8012c74 <pifI2cDevice_WriteRegByte>
 8019ab8:	4603      	mov	r3, r0
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	f000 8183 	beq.w	8019dc6 <pifGy86_Init+0x3a2>

    if (p_config) {
 8019ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d043      	beq.n	8019b4e <pifGy86_Init+0x12a>
    	config.byte = 0;
 8019ac6:	2300      	movs	r3, #0
 8019ac8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   		config.bit.dlpf_cfg = p_config->mpu60x0_dlpf_cfg;
 8019acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019ace:	78db      	ldrb	r3, [r3, #3]
 8019ad0:	f003 0307 	and.w	r3, r3, #7
 8019ad4:	b2da      	uxtb	r2, r3
 8019ad6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019ada:	f362 0302 	bfi	r3, r2, #0, #3
 8019ade:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    	if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_CONFIG, config.byte)) goto fail;
 8019ae2:	68fb      	ldr	r3, [r7, #12]
 8019ae4:	68db      	ldr	r3, [r3, #12]
 8019ae6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8019aea:	211a      	movs	r1, #26
 8019aec:	4618      	mov	r0, r3
 8019aee:	f7f9 f8c1 	bl	8012c74 <pifI2cDevice_WriteRegByte>
 8019af2:	4603      	mov	r3, r0
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	f000 8168 	beq.w	8019dca <pifGy86_Init+0x3a6>

        gyro_config.byte = 0;
 8019afa:	2300      	movs	r3, #0
 8019afc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        gyro_config.bit.fs_sel = p_config->mpu60x0_fs_sel;
 8019b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019b02:	791b      	ldrb	r3, [r3, #4]
 8019b04:	f003 0303 	and.w	r3, r3, #3
 8019b08:	b2da      	uxtb	r2, r3
 8019b0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019b0e:	f362 03c4 	bfi	r3, r2, #3, #2
 8019b12:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        pifMpu60x0_SetGyroConfig(&p_owner->_mpu6050, gyro_config);
 8019b16:	68fb      	ldr	r3, [r7, #12]
 8019b18:	3304      	adds	r3, #4
 8019b1a:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8019b1e:	4618      	mov	r0, r3
 8019b20:	f001 f978 	bl	801ae14 <pifMpu60x0_SetGyroConfig>

        accel_config.byte = 0;
 8019b24:	2300      	movs	r3, #0
 8019b26:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        accel_config.bit.afs_sel = p_config->mpu60x0_afs_sel;
 8019b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019b2c:	785b      	ldrb	r3, [r3, #1]
 8019b2e:	f003 0303 	and.w	r3, r3, #3
 8019b32:	b2da      	uxtb	r2, r3
 8019b34:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8019b38:	f362 03c4 	bfi	r3, r2, #3, #2
 8019b3c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        pifMpu60x0_SetAccelConfig(&p_owner->_mpu6050, accel_config);
 8019b40:	68fb      	ldr	r3, [r7, #12]
 8019b42:	3304      	adds	r3, #4
 8019b44:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8019b48:	4618      	mov	r0, r3
 8019b4a:	f001 f983 	bl	801ae54 <pifMpu60x0_SetAccelConfig>
    }

    i2c_mst_ctrl.byte = 0;
 8019b4e:	2300      	movs	r3, #0
 8019b50:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    i2c_mst_ctrl.bit.i2c_mst_clk = p_config ? p_config->mpu60x0_i2c_mst_clk : MPU60X0_I2C_MST_CLK_400KHZ;
 8019b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	d008      	beq.n	8019b6c <pifGy86_Init+0x148>
 8019b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019b5c:	795b      	ldrb	r3, [r3, #5]
 8019b5e:	f003 030f 	and.w	r3, r3, #15
 8019b62:	b2da      	uxtb	r2, r3
 8019b64:	e003      	b.n	8019b6e <pifGy86_Init+0x14a>
 8019b66:	bf00      	nop
 8019b68:	20001de0 	.word	0x20001de0
 8019b6c:	220d      	movs	r2, #13
 8019b6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019b72:	f362 0303 	bfi	r3, r2, #0, #4
 8019b76:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_MST_CTRL, i2c_mst_ctrl.byte)) goto fail;
 8019b7a:	68fb      	ldr	r3, [r7, #12]
 8019b7c:	68db      	ldr	r3, [r3, #12]
 8019b7e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019b82:	2124      	movs	r1, #36	; 0x24
 8019b84:	4618      	mov	r0, r3
 8019b86:	f7f9 f875 	bl	8012c74 <pifI2cDevice_WriteRegByte>
 8019b8a:	4603      	mov	r3, r0
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	f000 811e 	beq.w	8019dce <pifGy86_Init+0x3aa>

    int_pin_cfg.byte = 0;
 8019b92:	2300      	movs	r3, #0
 8019b94:	763b      	strb	r3, [r7, #24]
    int_pin_cfg.bit.int_rd_clear = TRUE;
 8019b96:	7e3b      	ldrb	r3, [r7, #24]
 8019b98:	f043 0310 	orr.w	r3, r3, #16
 8019b9c:	763b      	strb	r3, [r7, #24]
    int_pin_cfg.bit.i2c_bypass_en = TRUE;
 8019b9e:	7e3b      	ldrb	r3, [r7, #24]
 8019ba0:	f043 0302 	orr.w	r3, r3, #2
 8019ba4:	763b      	strb	r3, [r7, #24]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, int_pin_cfg.byte)) goto fail;
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	68db      	ldr	r3, [r3, #12]
 8019baa:	7e3a      	ldrb	r2, [r7, #24]
 8019bac:	2137      	movs	r1, #55	; 0x37
 8019bae:	4618      	mov	r0, r3
 8019bb0:	f7f9 f860 	bl	8012c74 <pifI2cDevice_WriteRegByte>
 8019bb4:	4603      	mov	r3, r0
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	f000 810b 	beq.w	8019dd2 <pifGy86_Init+0x3ae>

    int_enable.byte = 0;
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	773b      	strb	r3, [r7, #28]
    int_enable.bit.data_rdy_en = TRUE;
 8019bc0:	7f3b      	ldrb	r3, [r7, #28]
 8019bc2:	f043 0301 	orr.w	r3, r3, #1
 8019bc6:	773b      	strb	r3, [r7, #28]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, int_enable.byte)) goto fail;
 8019bc8:	68fb      	ldr	r3, [r7, #12]
 8019bca:	68db      	ldr	r3, [r3, #12]
 8019bcc:	7f3a      	ldrb	r2, [r7, #28]
 8019bce:	2138      	movs	r1, #56	; 0x38
 8019bd0:	4618      	mov	r0, r3
 8019bd2:	f7f9 f84f 	bl	8012c74 <pifI2cDevice_WriteRegByte>
 8019bd6:	4603      	mov	r3, r0
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	f000 80fc 	beq.w	8019dd6 <pifGy86_Init+0x3b2>

    if (!pifHmc5883_Init(&p_owner->_hmc5883, PIF_ID_AUTO, p_i2c, p_imu_sensor)) goto fail;
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	f103 0014 	add.w	r0, r3, #20
 8019be4:	683b      	ldr	r3, [r7, #0]
 8019be6:	687a      	ldr	r2, [r7, #4]
 8019be8:	2100      	movs	r1, #0
 8019bea:	f000 faff 	bl	801a1ec <pifHmc5883_Init>
 8019bee:	4603      	mov	r3, r0
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	f000 80f2 	beq.w	8019dda <pifGy86_Init+0x3b6>

    if (p_config) {
 8019bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d039      	beq.n	8019c70 <pifGy86_Init+0x24c>
        config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NORMAL;
 8019bfc:	7c3b      	ldrb	r3, [r7, #16]
 8019bfe:	f36f 0301 	bfc	r3, #0, #2
 8019c02:	743b      	strb	r3, [r7, #16]
   		config_a.bit.samples = p_config->hmc5883_samples;
 8019c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019c06:	7a5b      	ldrb	r3, [r3, #9]
 8019c08:	f003 0303 	and.w	r3, r3, #3
 8019c0c:	b2da      	uxtb	r2, r3
 8019c0e:	7c3b      	ldrb	r3, [r7, #16]
 8019c10:	f362 1346 	bfi	r3, r2, #5, #2
 8019c14:	743b      	strb	r3, [r7, #16]
   		config_a.bit.data_rate = p_config->hmc5883_data_rate;
 8019c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019c18:	799b      	ldrb	r3, [r3, #6]
 8019c1a:	f003 0307 	and.w	r3, r3, #7
 8019c1e:	b2da      	uxtb	r2, r3
 8019c20:	7c3b      	ldrb	r3, [r7, #16]
 8019c22:	f362 0384 	bfi	r3, r2, #2, #3
 8019c26:	743b      	strb	r3, [r7, #16]
        if (!pifI2cDevice_WriteRegByte(p_owner->_hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) goto fail;
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c2c:	7c3a      	ldrb	r2, [r7, #16]
 8019c2e:	2100      	movs	r1, #0
 8019c30:	4618      	mov	r0, r3
 8019c32:	f7f9 f81f 	bl	8012c74 <pifI2cDevice_WriteRegByte>
 8019c36:	4603      	mov	r3, r0
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	f000 80d0 	beq.w	8019dde <pifGy86_Init+0x3ba>

        if (!pifHmc5883_SetGain(&p_owner->_hmc5883, p_config->hmc5883_gain)) goto fail;
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	f103 0214 	add.w	r2, r3, #20
 8019c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019c46:	79db      	ldrb	r3, [r3, #7]
 8019c48:	4619      	mov	r1, r3
 8019c4a:	4610      	mov	r0, r2
 8019c4c:	f000 fba4 	bl	801a398 <pifHmc5883_SetGain>
 8019c50:	4603      	mov	r3, r0
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	f000 80c5 	beq.w	8019de2 <pifGy86_Init+0x3be>

        if (!pifI2cDevice_WriteRegBit8(p_owner->_hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_MODE, p_config->hmc5883_mode)) goto fail;
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8019c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019c5e:	7a1b      	ldrb	r3, [r3, #8]
 8019c60:	2202      	movs	r2, #2
 8019c62:	2102      	movs	r1, #2
 8019c64:	f7f9 f81c 	bl	8012ca0 <pifI2cDevice_WriteRegBit8>
 8019c68:	4603      	mov	r3, r0
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	f000 80bb 	beq.w	8019de6 <pifGy86_Init+0x3c2>
    }

    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) goto fail;
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	68d8      	ldr	r0, [r3, #12]
 8019c74:	2300      	movs	r3, #0
 8019c76:	f240 1201 	movw	r2, #257	; 0x101
 8019c7a:	2137      	movs	r1, #55	; 0x37
 8019c7c:	f7f9 f810 	bl	8012ca0 <pifI2cDevice_WriteRegBit8>
 8019c80:	4603      	mov	r3, r0
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	f000 80b1 	beq.w	8019dea <pifGy86_Init+0x3c6>

    pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, 0x01); // DATA_RDY_EN interrupt enable
 8019c88:	68fb      	ldr	r3, [r7, #12]
 8019c8a:	68db      	ldr	r3, [r3, #12]
 8019c8c:	2201      	movs	r2, #1
 8019c8e:	2138      	movs	r1, #56	; 0x38
 8019c90:	4618      	mov	r0, r3
 8019c92:	f7f8 ffef 	bl	8012c74 <pifI2cDevice_WriteRegByte>

    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) goto fail;
 8019c96:	68fb      	ldr	r3, [r7, #12]
 8019c98:	68d8      	ldr	r0, [r3, #12]
 8019c9a:	2301      	movs	r3, #1
 8019c9c:	f240 5201 	movw	r2, #1281	; 0x501
 8019ca0:	216a      	movs	r1, #106	; 0x6a
 8019ca2:	f7f8 fffd 	bl	8012ca0 <pifI2cDevice_WriteRegBit8>
 8019ca6:	4603      	mov	r3, r0
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	f000 80a0 	beq.w	8019dee <pifGy86_Init+0x3ca>

    i2c_slv_addr.byte = 0;
 8019cae:	2300      	movs	r3, #0
 8019cb0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    i2c_slv_addr.bit.i2c_slv_addr = HMC5883_I2C_ADDR;
 8019cb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019cb8:	221e      	movs	r2, #30
 8019cba:	f362 0306 	bfi	r3, r2, #0, #7
 8019cbe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    i2c_slv_addr.bit.i2c_slv_rw = TRUE;
 8019cc2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019cca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_ADDR, i2c_slv_addr.byte)) goto fail;
 8019cce:	68fb      	ldr	r3, [r7, #12]
 8019cd0:	68db      	ldr	r3, [r3, #12]
 8019cd2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8019cd6:	2125      	movs	r1, #37	; 0x25
 8019cd8:	4618      	mov	r0, r3
 8019cda:	f7f8 ffcb 	bl	8012c74 <pifI2cDevice_WriteRegByte>
 8019cde:	4603      	mov	r3, r0
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	f000 8086 	beq.w	8019df2 <pifGy86_Init+0x3ce>

    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_REG, HMC5883_REG_OUT_X_M)) goto fail;
 8019ce6:	68fb      	ldr	r3, [r7, #12]
 8019ce8:	68db      	ldr	r3, [r3, #12]
 8019cea:	2203      	movs	r2, #3
 8019cec:	2126      	movs	r1, #38	; 0x26
 8019cee:	4618      	mov	r0, r3
 8019cf0:	f7f8 ffc0 	bl	8012c74 <pifI2cDevice_WriteRegByte>
 8019cf4:	4603      	mov	r3, r0
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d07d      	beq.n	8019df6 <pifGy86_Init+0x3d2>

    i2c_slv_ctrl.byte = 0;
 8019cfa:	2300      	movs	r3, #0
 8019cfc:	f887 3020 	strb.w	r3, [r7, #32]
    i2c_slv_ctrl.bit.i2c_slv_len = 6;
 8019d00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019d04:	2206      	movs	r2, #6
 8019d06:	f362 0303 	bfi	r3, r2, #0, #4
 8019d0a:	f887 3020 	strb.w	r3, [r7, #32]
    i2c_slv_ctrl.bit.i2c_slv_en = TRUE;
 8019d0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019d16:	f887 3020 	strb.w	r3, [r7, #32]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_CTRL, i2c_slv_ctrl.byte)) goto fail;
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	68db      	ldr	r3, [r3, #12]
 8019d1e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8019d22:	2127      	movs	r1, #39	; 0x27
 8019d24:	4618      	mov	r0, r3
 8019d26:	f7f8 ffa5 	bl	8012c74 <pifI2cDevice_WriteRegByte>
 8019d2a:	4603      	mov	r3, r0
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	d064      	beq.n	8019dfa <pifGy86_Init+0x3d6>

    if (p_config && p_config->ms5611_evt_read) {
 8019d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d02a      	beq.n	8019d8c <pifGy86_Init+0x368>
 8019d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d38:	691b      	ldr	r3, [r3, #16]
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d026      	beq.n	8019d8c <pifGy86_Init+0x368>
    	if (!pifMs5611_Init(&p_owner->_ms5611, PIF_ID_AUTO, p_i2c, MS5611_I2C_ADDR(1))) goto fail;
 8019d3e:	68fb      	ldr	r3, [r7, #12]
 8019d40:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8019d44:	2377      	movs	r3, #119	; 0x77
 8019d46:	687a      	ldr	r2, [r7, #4]
 8019d48:	2100      	movs	r1, #0
 8019d4a:	f001 fd5d 	bl	801b808 <pifMs5611_Init>
 8019d4e:	4603      	mov	r3, r0
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d054      	beq.n	8019dfe <pifGy86_Init+0x3da>

        pifMs5611_SetOverSamplingRate(&p_owner->_ms5611, p_config->ms5611_osr);
 8019d54:	68fb      	ldr	r3, [r7, #12]
 8019d56:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8019d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d5c:	7a9b      	ldrb	r3, [r3, #10]
 8019d5e:	b29b      	uxth	r3, r3
 8019d60:	4619      	mov	r1, r3
 8019d62:	4610      	mov	r0, r2
 8019d64:	f001 fdf0 	bl	801b948 <pifMs5611_SetOverSamplingRate>

        if (!pifMs5611_AddTaskForReading(&p_owner->_ms5611, p_config->ms5611_read_period, p_config->ms5611_evt_read, FALSE)) goto fail;
 8019d68:	68fb      	ldr	r3, [r7, #12]
 8019d6a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8019d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d70:	8999      	ldrh	r1, [r3, #12]
 8019d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d74:	691a      	ldr	r2, [r3, #16]
 8019d76:	2300      	movs	r3, #0
 8019d78:	f001 fe22 	bl	801b9c0 <pifMs5611_AddTaskForReading>
 8019d7c:	4603      	mov	r3, r0
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d03f      	beq.n	8019e02 <pifGy86_Init+0x3de>
        p_owner->_ms5611._p_task->disallow_yield_id = p_config->disallow_yield_id;
 8019d82:	68fb      	ldr	r3, [r7, #12]
 8019d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019d86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019d88:	7812      	ldrb	r2, [r2, #0]
 8019d8a:	715a      	strb	r2, [r3, #5]
    }

	if (id == PIF_ID_AUTO) id = pif_id++;
 8019d8c:	897b      	ldrh	r3, [r7, #10]
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d106      	bne.n	8019da0 <pifGy86_Init+0x37c>
 8019d92:	4b20      	ldr	r3, [pc, #128]	; (8019e14 <pifGy86_Init+0x3f0>)
 8019d94:	881b      	ldrh	r3, [r3, #0]
 8019d96:	1c5a      	adds	r2, r3, #1
 8019d98:	b291      	uxth	r1, r2
 8019d9a:	4a1e      	ldr	r2, [pc, #120]	; (8019e14 <pifGy86_Init+0x3f0>)
 8019d9c:	8011      	strh	r1, [r2, #0]
 8019d9e:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	897a      	ldrh	r2, [r7, #10]
 8019da4:	801a      	strh	r2, [r3, #0]
    p_owner->__mag_start_reg = 0;
 8019da6:	68fb      	ldr	r3, [r7, #12]
 8019da8:	2200      	movs	r2, #0
 8019daa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

	p_imu_sensor->__mag_info.read = (PifImuSensorRead)pifGy86_ReadMag;
 8019dae:	683b      	ldr	r3, [r7, #0]
 8019db0:	4a19      	ldr	r2, [pc, #100]	; (8019e18 <pifGy86_Init+0x3f4>)
 8019db2:	631a      	str	r2, [r3, #48]	; 0x30
	p_imu_sensor->__mag_info.p_issuer = p_owner;
 8019db4:	683b      	ldr	r3, [r7, #0]
 8019db6:	68fa      	ldr	r2, [r7, #12]
 8019db8:	635a      	str	r2, [r3, #52]	; 0x34
    return TRUE;
 8019dba:	2301      	movs	r3, #1
 8019dbc:	e026      	b.n	8019e0c <pifGy86_Init+0x3e8>
    if (!pifMpu60x0_Init(&p_owner->_mpu6050, PIF_ID_AUTO, p_i2c, MPU60X0_I2C_ADDR(0), p_imu_sensor)) goto fail;
 8019dbe:	bf00      	nop
 8019dc0:	e020      	b.n	8019e04 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_SMPLRT_DIV, 0)) goto fail;
 8019dc2:	bf00      	nop
 8019dc4:	e01e      	b.n	8019e04 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8019dc6:	bf00      	nop
 8019dc8:	e01c      	b.n	8019e04 <pifGy86_Init+0x3e0>
    	if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_CONFIG, config.byte)) goto fail;
 8019dca:	bf00      	nop
 8019dcc:	e01a      	b.n	8019e04 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_MST_CTRL, i2c_mst_ctrl.byte)) goto fail;
 8019dce:	bf00      	nop
 8019dd0:	e018      	b.n	8019e04 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, int_pin_cfg.byte)) goto fail;
 8019dd2:	bf00      	nop
 8019dd4:	e016      	b.n	8019e04 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, int_enable.byte)) goto fail;
 8019dd6:	bf00      	nop
 8019dd8:	e014      	b.n	8019e04 <pifGy86_Init+0x3e0>
    if (!pifHmc5883_Init(&p_owner->_hmc5883, PIF_ID_AUTO, p_i2c, p_imu_sensor)) goto fail;
 8019dda:	bf00      	nop
 8019ddc:	e012      	b.n	8019e04 <pifGy86_Init+0x3e0>
        if (!pifI2cDevice_WriteRegByte(p_owner->_hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) goto fail;
 8019dde:	bf00      	nop
 8019de0:	e010      	b.n	8019e04 <pifGy86_Init+0x3e0>
        if (!pifHmc5883_SetGain(&p_owner->_hmc5883, p_config->hmc5883_gain)) goto fail;
 8019de2:	bf00      	nop
 8019de4:	e00e      	b.n	8019e04 <pifGy86_Init+0x3e0>
        if (!pifI2cDevice_WriteRegBit8(p_owner->_hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_MODE, p_config->hmc5883_mode)) goto fail;
 8019de6:	bf00      	nop
 8019de8:	e00c      	b.n	8019e04 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) goto fail;
 8019dea:	bf00      	nop
 8019dec:	e00a      	b.n	8019e04 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) goto fail;
 8019dee:	bf00      	nop
 8019df0:	e008      	b.n	8019e04 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_ADDR, i2c_slv_addr.byte)) goto fail;
 8019df2:	bf00      	nop
 8019df4:	e006      	b.n	8019e04 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_REG, HMC5883_REG_OUT_X_M)) goto fail;
 8019df6:	bf00      	nop
 8019df8:	e004      	b.n	8019e04 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_CTRL, i2c_slv_ctrl.byte)) goto fail;
 8019dfa:	bf00      	nop
 8019dfc:	e002      	b.n	8019e04 <pifGy86_Init+0x3e0>
    	if (!pifMs5611_Init(&p_owner->_ms5611, PIF_ID_AUTO, p_i2c, MS5611_I2C_ADDR(1))) goto fail;
 8019dfe:	bf00      	nop
 8019e00:	e000      	b.n	8019e04 <pifGy86_Init+0x3e0>
        if (!pifMs5611_AddTaskForReading(&p_owner->_ms5611, p_config->ms5611_read_period, p_config->ms5611_evt_read, FALSE)) goto fail;
 8019e02:	bf00      	nop

fail:
	pifGy86_Clear(p_owner);
 8019e04:	68f8      	ldr	r0, [r7, #12]
 8019e06:	f000 f809 	bl	8019e1c <pifGy86_Clear>
	return FALSE;
 8019e0a:	2300      	movs	r3, #0
}
 8019e0c:	4618      	mov	r0, r3
 8019e0e:	3738      	adds	r7, #56	; 0x38
 8019e10:	46bd      	mov	sp, r7
 8019e12:	bd80      	pop	{r7, pc}
 8019e14:	20000128 	.word	0x20000128
 8019e18:	08019e4b 	.word	0x08019e4b

08019e1c <pifGy86_Clear>:

void pifGy86_Clear(PifGy86* p_owner)
{
 8019e1c:	b580      	push	{r7, lr}
 8019e1e:	b082      	sub	sp, #8
 8019e20:	af00      	add	r7, sp, #0
 8019e22:	6078      	str	r0, [r7, #4]
    pifMs5611_Clear(&p_owner->_ms5611);
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	332c      	adds	r3, #44	; 0x2c
 8019e28:	4618      	mov	r0, r3
 8019e2a:	f001 fd69 	bl	801b900 <pifMs5611_Clear>
    pifHmc5883_Clear(&p_owner->_hmc5883);
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	3314      	adds	r3, #20
 8019e32:	4618      	mov	r0, r3
 8019e34:	f000 fa98 	bl	801a368 <pifHmc5883_Clear>
    pifMpu60x0_Clear(&p_owner->_mpu6050);
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	3304      	adds	r3, #4
 8019e3c:	4618      	mov	r0, r3
 8019e3e:	f000 ffd1 	bl	801ade4 <pifMpu60x0_Clear>
}
 8019e42:	bf00      	nop
 8019e44:	3708      	adds	r7, #8
 8019e46:	46bd      	mov	sp, r7
 8019e48:	bd80      	pop	{r7, pc}

08019e4a <pifGy86_ReadMag>:

BOOL pifGy86_ReadMag(PifGy86* p_owner, int16_t* p_mag)
{
 8019e4a:	b580      	push	{r7, lr}
 8019e4c:	b084      	sub	sp, #16
 8019e4e:	af00      	add	r7, sp, #0
 8019e50:	6078      	str	r0, [r7, #4]
 8019e52:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegBytes(p_owner->_mpu6050._p_i2c, MPU60X0_REG_EXT_SENS_DATA_00 + p_owner->__mag_start_reg, data, 6)) return FALSE;
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	68d8      	ldr	r0, [r3, #12]
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8019e5e:	3349      	adds	r3, #73	; 0x49
 8019e60:	b2d9      	uxtb	r1, r3
 8019e62:	f107 0208 	add.w	r2, r7, #8
 8019e66:	2306      	movs	r3, #6
 8019e68:	f7f8 fe0e 	bl	8012a88 <pifI2cDevice_ReadRegBytes>
 8019e6c:	4603      	mov	r3, r0
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d101      	bne.n	8019e76 <pifGy86_ReadMag+0x2c>
 8019e72:	2300      	movs	r3, #0
 8019e74:	e04d      	b.n	8019f12 <pifGy86_ReadMag+0xc8>

	p_mag[AXIS_X] = (int16_t)((data[0] << 8) + data[1]) * p_owner->_hmc5883.scale[AXIS_X];
 8019e76:	7a3b      	ldrb	r3, [r7, #8]
 8019e78:	b29b      	uxth	r3, r3
 8019e7a:	021b      	lsls	r3, r3, #8
 8019e7c:	b29a      	uxth	r2, r3
 8019e7e:	7a7b      	ldrb	r3, [r7, #9]
 8019e80:	b29b      	uxth	r3, r3
 8019e82:	4413      	add	r3, r2
 8019e84:	b29b      	uxth	r3, r3
 8019e86:	b21b      	sxth	r3, r3
 8019e88:	ee07 3a90 	vmov	s15, r3
 8019e8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	edd3 7a05 	vldr	s15, [r3, #20]
 8019e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019e9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019e9e:	ee17 3a90 	vmov	r3, s15
 8019ea2:	b21a      	sxth	r2, r3
 8019ea4:	683b      	ldr	r3, [r7, #0]
 8019ea6:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Z] = (int16_t)((data[2] << 8) + data[3]) * p_owner->_hmc5883.scale[AXIS_Z];
 8019ea8:	7abb      	ldrb	r3, [r7, #10]
 8019eaa:	b29b      	uxth	r3, r3
 8019eac:	021b      	lsls	r3, r3, #8
 8019eae:	b29a      	uxth	r2, r3
 8019eb0:	7afb      	ldrb	r3, [r7, #11]
 8019eb2:	b29b      	uxth	r3, r3
 8019eb4:	4413      	add	r3, r2
 8019eb6:	b29b      	uxth	r3, r3
 8019eb8:	b21b      	sxth	r3, r3
 8019eba:	ee07 3a90 	vmov	s15, r3
 8019ebe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	edd3 7a07 	vldr	s15, [r3, #28]
 8019ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019ecc:	683b      	ldr	r3, [r7, #0]
 8019ece:	3304      	adds	r3, #4
 8019ed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019ed4:	ee17 2a90 	vmov	r2, s15
 8019ed8:	b212      	sxth	r2, r2
 8019eda:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Y] = (int16_t)((data[4] << 8) + data[5]) * p_owner->_hmc5883.scale[AXIS_Y];
 8019edc:	7b3b      	ldrb	r3, [r7, #12]
 8019ede:	b29b      	uxth	r3, r3
 8019ee0:	021b      	lsls	r3, r3, #8
 8019ee2:	b29a      	uxth	r2, r3
 8019ee4:	7b7b      	ldrb	r3, [r7, #13]
 8019ee6:	b29b      	uxth	r3, r3
 8019ee8:	4413      	add	r3, r2
 8019eea:	b29b      	uxth	r3, r3
 8019eec:	b21b      	sxth	r3, r3
 8019eee:	ee07 3a90 	vmov	s15, r3
 8019ef2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	edd3 7a06 	vldr	s15, [r3, #24]
 8019efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019f00:	683b      	ldr	r3, [r7, #0]
 8019f02:	3302      	adds	r3, #2
 8019f04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019f08:	ee17 2a90 	vmov	r2, s15
 8019f0c:	b212      	sxth	r2, r2
 8019f0e:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8019f10:	2301      	movs	r3, #1
}
 8019f12:	4618      	mov	r0, r3
 8019f14:	3710      	adds	r7, #16
 8019f16:	46bd      	mov	sp, r7
 8019f18:	bd80      	pop	{r7, pc}

08019f1a <_doTask>:
#include "core/pif_task.h"
#include "sensor/pif_hc_sr04.h"


static uint16_t _doTask(PifTask* p_task)
{
 8019f1a:	b580      	push	{r7, lr}
 8019f1c:	b084      	sub	sp, #16
 8019f1e:	af00      	add	r7, sp, #0
 8019f20:	6078      	str	r0, [r7, #4]
	PifHcSr04* p_owner = (PifHcSr04*)p_task->_p_client;
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	68db      	ldr	r3, [r3, #12]
 8019f26:	60fb      	str	r3, [r7, #12]

	switch (p_owner->__state) {
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	7d1b      	ldrb	r3, [r3, #20]
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d002      	beq.n	8019f36 <_doTask+0x1c>
 8019f30:	2b03      	cmp	r3, #3
 8019f32:	d004      	beq.n	8019f3e <_doTask+0x24>
		if (p_owner->evt_read) (*p_owner->evt_read)(p_owner->__distance);
		p_owner->__state = HSS_READY;
		break;

	default:
		break;
 8019f34:	e011      	b.n	8019f5a <_doTask+0x40>
		pifHcSr04_Trigger(p_owner);
 8019f36:	68f8      	ldr	r0, [r7, #12]
 8019f38:	f000 f866 	bl	801a008 <pifHcSr04_Trigger>
		break;
 8019f3c:	e00d      	b.n	8019f5a <_doTask+0x40>
		if (p_owner->evt_read) (*p_owner->evt_read)(p_owner->__distance);
 8019f3e:	68fb      	ldr	r3, [r7, #12]
 8019f40:	685b      	ldr	r3, [r3, #4]
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d005      	beq.n	8019f52 <_doTask+0x38>
 8019f46:	68fb      	ldr	r3, [r7, #12]
 8019f48:	685b      	ldr	r3, [r3, #4]
 8019f4a:	68fa      	ldr	r2, [r7, #12]
 8019f4c:	69d2      	ldr	r2, [r2, #28]
 8019f4e:	4610      	mov	r0, r2
 8019f50:	4798      	blx	r3
		p_owner->__state = HSS_READY;
 8019f52:	68fb      	ldr	r3, [r7, #12]
 8019f54:	2200      	movs	r2, #0
 8019f56:	751a      	strb	r2, [r3, #20]
		break;
 8019f58:	bf00      	nop
	}
	return 0;
 8019f5a:	2300      	movs	r3, #0
}
 8019f5c:	4618      	mov	r0, r3
 8019f5e:	3710      	adds	r7, #16
 8019f60:	46bd      	mov	sp, r7
 8019f62:	bd80      	pop	{r7, pc}

08019f64 <pifHcSr04_Init>:

BOOL pifHcSr04_Init(PifHcSr04* p_owner, PifId id)
{
 8019f64:	b580      	push	{r7, lr}
 8019f66:	b084      	sub	sp, #16
 8019f68:	af02      	add	r7, sp, #8
 8019f6a:	6078      	str	r0, [r7, #4]
 8019f6c:	460b      	mov	r3, r1
 8019f6e:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d104      	bne.n	8019f80 <pifHcSr04_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8019f76:	4b1f      	ldr	r3, [pc, #124]	; (8019ff4 <pifHcSr04_Init+0x90>)
 8019f78:	2201      	movs	r2, #1
 8019f7a:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8019f7c:	2300      	movs	r3, #0
 8019f7e:	e035      	b.n	8019fec <pifHcSr04_Init+0x88>
	}

	if (!pif_act_timer1us) {
 8019f80:	4b1d      	ldr	r3, [pc, #116]	; (8019ff8 <pifHcSr04_Init+0x94>)
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d104      	bne.n	8019f92 <pifHcSr04_Init+0x2e>
		pif_error = E_CANNOT_USE;
 8019f88:	4b1a      	ldr	r3, [pc, #104]	; (8019ff4 <pifHcSr04_Init+0x90>)
 8019f8a:	2209      	movs	r2, #9
 8019f8c:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8019f8e:	2300      	movs	r3, #0
 8019f90:	e02c      	b.n	8019fec <pifHcSr04_Init+0x88>
	}

	memset(p_owner, 0, sizeof(PifHcSr04));
 8019f92:	2220      	movs	r2, #32
 8019f94:	2100      	movs	r1, #0
 8019f96:	6878      	ldr	r0, [r7, #4]
 8019f98:	f009 ff90 	bl	8023ebc <memset>

	p_owner->_p_task = pifTaskManager_Add(TM_PERIOD_MS, 50, _doTask, p_owner, FALSE);
 8019f9c:	2300      	movs	r3, #0
 8019f9e:	9300      	str	r3, [sp, #0]
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	4a16      	ldr	r2, [pc, #88]	; (8019ffc <pifHcSr04_Init+0x98>)
 8019fa4:	2132      	movs	r1, #50	; 0x32
 8019fa6:	2002      	movs	r0, #2
 8019fa8:	f7fa ff48 	bl	8014e3c <pifTaskManager_Add>
 8019fac:	4602      	mov	r2, r0
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	60da      	str	r2, [r3, #12]
	if (!p_owner->_p_task) return FALSE;
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	68db      	ldr	r3, [r3, #12]
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d101      	bne.n	8019fbe <pifHcSr04_Init+0x5a>
 8019fba:	2300      	movs	r3, #0
 8019fbc:	e016      	b.n	8019fec <pifHcSr04_Init+0x88>
	p_owner->_p_task->name = "HC_SR04";
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	68db      	ldr	r3, [r3, #12]
 8019fc2:	4a0f      	ldr	r2, [pc, #60]	; (801a000 <pifHcSr04_Init+0x9c>)
 8019fc4:	601a      	str	r2, [r3, #0]

	if (id == PIF_ID_AUTO) id = pif_id++;
 8019fc6:	887b      	ldrh	r3, [r7, #2]
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d106      	bne.n	8019fda <pifHcSr04_Init+0x76>
 8019fcc:	4b0d      	ldr	r3, [pc, #52]	; (801a004 <pifHcSr04_Init+0xa0>)
 8019fce:	881b      	ldrh	r3, [r3, #0]
 8019fd0:	1c5a      	adds	r2, r3, #1
 8019fd2:	b291      	uxth	r1, r2
 8019fd4:	4a0b      	ldr	r2, [pc, #44]	; (801a004 <pifHcSr04_Init+0xa0>)
 8019fd6:	8011      	strh	r1, [r2, #0]
 8019fd8:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	887a      	ldrh	r2, [r7, #2]
 8019fde:	811a      	strh	r2, [r3, #8]

    pifHcSr04_SetTemperature(p_owner, 20);
 8019fe0:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8019fe4:	6878      	ldr	r0, [r7, #4]
 8019fe6:	f000 f849 	bl	801a07c <pifHcSr04_SetTemperature>

    return TRUE;
 8019fea:	2301      	movs	r3, #1
}
 8019fec:	4618      	mov	r0, r3
 8019fee:	3708      	adds	r7, #8
 8019ff0:	46bd      	mov	sp, r7
 8019ff2:	bd80      	pop	{r7, pc}
 8019ff4:	20001de0 	.word	0x20001de0
 8019ff8:	20001e08 	.word	0x20001e08
 8019ffc:	08019f1b 	.word	0x08019f1b
 801a000:	08028c88 	.word	0x08028c88
 801a004:	20000128 	.word	0x20000128

0801a008 <pifHcSr04_Trigger>:
		p_owner->_p_task = NULL;
	}
}

void pifHcSr04_Trigger(PifHcSr04* p_owner)
{
 801a008:	b580      	push	{r7, lr}
 801a00a:	b082      	sub	sp, #8
 801a00c:	af00      	add	r7, sp, #0
 801a00e:	6078      	str	r0, [r7, #4]
	(*p_owner->act_trigger)(ON);
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	681b      	ldr	r3, [r3, #0]
 801a014:	2001      	movs	r0, #1
 801a016:	4798      	blx	r3
	pif_Delay1us(11);
 801a018:	200b      	movs	r0, #11
 801a01a:	f7f7 fc5f 	bl	80118dc <pif_Delay1us>
	(*p_owner->act_trigger)(OFF);
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	2000      	movs	r0, #0
 801a024:	4798      	blx	r3
	p_owner->__state = HSS_TRIGGER;
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	2201      	movs	r2, #1
 801a02a:	751a      	strb	r2, [r3, #20]
}
 801a02c:	bf00      	nop
 801a02e:	3708      	adds	r7, #8
 801a030:	46bd      	mov	sp, r7
 801a032:	bd80      	pop	{r7, pc}

0801a034 <pifHcSr04_StartTrigger>:

BOOL pifHcSr04_StartTrigger(PifHcSr04* p_owner, uint16_t period)
{
 801a034:	b580      	push	{r7, lr}
 801a036:	b082      	sub	sp, #8
 801a038:	af00      	add	r7, sp, #0
 801a03a:	6078      	str	r0, [r7, #4]
 801a03c:	460b      	mov	r3, r1
 801a03e:	807b      	strh	r3, [r7, #2]
	if (!p_owner || !period) {
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	2b00      	cmp	r3, #0
 801a044:	d002      	beq.n	801a04c <pifHcSr04_StartTrigger+0x18>
 801a046:	887b      	ldrh	r3, [r7, #2]
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d104      	bne.n	801a056 <pifHcSr04_StartTrigger+0x22>
		pif_error = E_INVALID_PARAM;
 801a04c:	4b0a      	ldr	r3, [pc, #40]	; (801a078 <pifHcSr04_StartTrigger+0x44>)
 801a04e:	2201      	movs	r2, #1
 801a050:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 801a052:	2300      	movs	r3, #0
 801a054:	e00b      	b.n	801a06e <pifHcSr04_StartTrigger+0x3a>
	}

	pifTask_ChangePeriod(p_owner->_p_task, period);
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	68db      	ldr	r3, [r3, #12]
 801a05a:	887a      	ldrh	r2, [r7, #2]
 801a05c:	4611      	mov	r1, r2
 801a05e:	4618      	mov	r0, r3
 801a060:	f7fa fe44 	bl	8014cec <pifTask_ChangePeriod>
	p_owner->_p_task->pause = FALSE;
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	68db      	ldr	r3, [r3, #12]
 801a068:	2200      	movs	r2, #0
 801a06a:	711a      	strb	r2, [r3, #4]
	return TRUE;
 801a06c:	2301      	movs	r3, #1
}
 801a06e:	4618      	mov	r0, r3
 801a070:	3708      	adds	r7, #8
 801a072:	46bd      	mov	sp, r7
 801a074:	bd80      	pop	{r7, pc}
 801a076:	bf00      	nop
 801a078:	20001de0 	.word	0x20001de0

0801a07c <pifHcSr04_SetTemperature>:
{
	p_owner->_p_task->pause = TRUE;
}

void pifHcSr04_SetTemperature(PifHcSr04* p_owner, float temperature)
{
 801a07c:	b480      	push	{r7}
 801a07e:	b083      	sub	sp, #12
 801a080:	af00      	add	r7, sp, #0
 801a082:	6078      	str	r0, [r7, #4]
 801a084:	ed87 0a00 	vstr	s0, [r7]
	p_owner->_transform_const = 2.0f / ((331.6f + 0.6f * temperature) / 10000.0f);		// 2 : 왕복, 10000 : m/s -> cm/ms
 801a088:	edd7 7a00 	vldr	s15, [r7]
 801a08c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801a0c0 <pifHcSr04_SetTemperature+0x44>
 801a090:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a094:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 801a0c4 <pifHcSr04_SetTemperature+0x48>
 801a098:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a09c:	eddf 6a0a 	vldr	s13, [pc, #40]	; 801a0c8 <pifHcSr04_SetTemperature+0x4c>
 801a0a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a0a4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801a0a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	edc3 7a04 	vstr	s15, [r3, #16]
}
 801a0b2:	bf00      	nop
 801a0b4:	370c      	adds	r7, #12
 801a0b6:	46bd      	mov	sp, r7
 801a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0bc:	4770      	bx	lr
 801a0be:	bf00      	nop
 801a0c0:	3f19999a 	.word	0x3f19999a
 801a0c4:	43a5cccd 	.word	0x43a5cccd
 801a0c8:	461c4000 	.word	0x461c4000

0801a0cc <pifHcSr04_sigReceiveEcho>:

void pifHcSr04_sigReceiveEcho(PifHcSr04* p_owner, SWITCH state)
{
 801a0cc:	b580      	push	{r7, lr}
 801a0ce:	b082      	sub	sp, #8
 801a0d0:	af00      	add	r7, sp, #0
 801a0d2:	6078      	str	r0, [r7, #4]
 801a0d4:	460b      	mov	r3, r1
 801a0d6:	70fb      	strb	r3, [r7, #3]
	switch (p_owner->__state) {
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	7d1b      	ldrb	r3, [r3, #20]
 801a0dc:	2b01      	cmp	r3, #1
 801a0de:	d002      	beq.n	801a0e6 <pifHcSr04_sigReceiveEcho+0x1a>
 801a0e0:	2b02      	cmp	r3, #2
 801a0e2:	d00d      	beq.n	801a100 <pifHcSr04_sigReceiveEcho+0x34>
			pifTask_SetTrigger(p_owner->_p_task);
		}
		break;

	default:
		break;
 801a0e4:	e031      	b.n	801a14a <pifHcSr04_sigReceiveEcho+0x7e>
		if (state) {
 801a0e6:	78fb      	ldrb	r3, [r7, #3]
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d02b      	beq.n	801a144 <pifHcSr04_sigReceiveEcho+0x78>
			p_owner->__tigger_time_us = (*pif_act_timer1us)();
 801a0ec:	4b19      	ldr	r3, [pc, #100]	; (801a154 <pifHcSr04_sigReceiveEcho+0x88>)
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	4798      	blx	r3
 801a0f2:	4602      	mov	r2, r0
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	619a      	str	r2, [r3, #24]
			p_owner->__state = HSS_HIGH;
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	2202      	movs	r2, #2
 801a0fc:	751a      	strb	r2, [r3, #20]
		break;
 801a0fe:	e021      	b.n	801a144 <pifHcSr04_sigReceiveEcho+0x78>
		if (!state) {
 801a100:	78fb      	ldrb	r3, [r7, #3]
 801a102:	2b00      	cmp	r3, #0
 801a104:	d120      	bne.n	801a148 <pifHcSr04_sigReceiveEcho+0x7c>
			p_owner->__distance = ((*pif_act_timer1us)() - p_owner->__tigger_time_us) / p_owner->_transform_const;
 801a106:	4b13      	ldr	r3, [pc, #76]	; (801a154 <pifHcSr04_sigReceiveEcho+0x88>)
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	4798      	blx	r3
 801a10c:	4602      	mov	r2, r0
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	699b      	ldr	r3, [r3, #24]
 801a112:	1ad3      	subs	r3, r2, r3
 801a114:	ee07 3a90 	vmov	s15, r3
 801a118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	ed93 7a04 	vldr	s14, [r3, #16]
 801a122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801a126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a12a:	ee17 2a90 	vmov	r2, s15
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	61da      	str	r2, [r3, #28]
			p_owner->__state = HSS_LOW;
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	2203      	movs	r2, #3
 801a136:	751a      	strb	r2, [r3, #20]
			pifTask_SetTrigger(p_owner->_p_task);
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	68db      	ldr	r3, [r3, #12]
 801a13c:	4618      	mov	r0, r3
 801a13e:	f7fa fdf7 	bl	8014d30 <pifTask_SetTrigger>
		break;
 801a142:	e001      	b.n	801a148 <pifHcSr04_sigReceiveEcho+0x7c>
		break;
 801a144:	bf00      	nop
 801a146:	e000      	b.n	801a14a <pifHcSr04_sigReceiveEcho+0x7e>
		break;
 801a148:	bf00      	nop
	}
}
 801a14a:	bf00      	nop
 801a14c:	3708      	adds	r7, #8
 801a14e:	46bd      	mov	sp, r7
 801a150:	bd80      	pop	{r7, pc}
 801a152:	bf00      	nop
 801a154:	20001e08 	.word	0x20001e08

0801a158 <_changeGain>:
#include "core/pif_log.h"
#include "sensor/pif_hmc5883.h"


static void _changeGain(PifImuSensor* p_imu_sensor, PifHmc5883Gain gain)
{
 801a158:	b480      	push	{r7}
 801a15a:	b083      	sub	sp, #12
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	6078      	str	r0, [r7, #4]
 801a160:	460b      	mov	r3, r1
 801a162:	70fb      	strb	r3, [r7, #3]
	switch (gain) {
 801a164:	78fb      	ldrb	r3, [r7, #3]
 801a166:	2b07      	cmp	r3, #7
 801a168:	d839      	bhi.n	801a1de <_changeGain+0x86>
 801a16a:	a201      	add	r2, pc, #4	; (adr r2, 801a170 <_changeGain+0x18>)
 801a16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a170:	0801a191 	.word	0x0801a191
 801a174:	0801a19b 	.word	0x0801a19b
 801a178:	0801a1a5 	.word	0x0801a1a5
 801a17c:	0801a1af 	.word	0x0801a1af
 801a180:	0801a1b9 	.word	0x0801a1b9
 801a184:	0801a1c3 	.word	0x0801a1c3
 801a188:	0801a1cd 	.word	0x0801a1cd
 801a18c:	0801a1d7 	.word	0x0801a1d7
	case HMC5883_GAIN_0_88GA:	p_imu_sensor->_mag_gain = 1370; break;
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	f240 525a 	movw	r2, #1370	; 0x55a
 801a196:	825a      	strh	r2, [r3, #18]
 801a198:	e021      	b.n	801a1de <_changeGain+0x86>
	case HMC5883_GAIN_1_3GA:	p_imu_sensor->_mag_gain = 1090; break;
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	f240 4242 	movw	r2, #1090	; 0x442
 801a1a0:	825a      	strh	r2, [r3, #18]
 801a1a2:	e01c      	b.n	801a1de <_changeGain+0x86>
	case HMC5883_GAIN_1_9GA:	p_imu_sensor->_mag_gain = 820; break;
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	f44f 724d 	mov.w	r2, #820	; 0x334
 801a1aa:	825a      	strh	r2, [r3, #18]
 801a1ac:	e017      	b.n	801a1de <_changeGain+0x86>
	case HMC5883_GAIN_2_5GA:	p_imu_sensor->_mag_gain = 660; break;
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	f44f 7225 	mov.w	r2, #660	; 0x294
 801a1b4:	825a      	strh	r2, [r3, #18]
 801a1b6:	e012      	b.n	801a1de <_changeGain+0x86>
	case HMC5883_GAIN_4GA:		p_imu_sensor->_mag_gain = 440; break;
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801a1be:	825a      	strh	r2, [r3, #18]
 801a1c0:	e00d      	b.n	801a1de <_changeGain+0x86>
	case HMC5883_GAIN_4_7GA:	p_imu_sensor->_mag_gain = 390; break;
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	f44f 72c3 	mov.w	r2, #390	; 0x186
 801a1c8:	825a      	strh	r2, [r3, #18]
 801a1ca:	e008      	b.n	801a1de <_changeGain+0x86>
	case HMC5883_GAIN_5_6GA:	p_imu_sensor->_mag_gain = 330; break;
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801a1d2:	825a      	strh	r2, [r3, #18]
 801a1d4:	e003      	b.n	801a1de <_changeGain+0x86>
	case HMC5883_GAIN_8_1GA:	p_imu_sensor->_mag_gain = 230; break;
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	22e6      	movs	r2, #230	; 0xe6
 801a1da:	825a      	strh	r2, [r3, #18]
 801a1dc:	bf00      	nop
	}
}
 801a1de:	bf00      	nop
 801a1e0:	370c      	adds	r7, #12
 801a1e2:	46bd      	mov	sp, r7
 801a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1e8:	4770      	bx	lr
 801a1ea:	bf00      	nop

0801a1ec <pifHmc5883_Init>:

BOOL pifHmc5883_Init(PifHmc5883* p_owner, PifId id, PifI2cPort* p_i2c, PifImuSensor* p_imu_sensor)
{
 801a1ec:	b590      	push	{r4, r7, lr}
 801a1ee:	b08d      	sub	sp, #52	; 0x34
 801a1f0:	af02      	add	r7, sp, #8
 801a1f2:	60f8      	str	r0, [r7, #12]
 801a1f4:	607a      	str	r2, [r7, #4]
 801a1f6:	603b      	str	r3, [r7, #0]
 801a1f8:	460b      	mov	r3, r1
 801a1fa:	817b      	strh	r3, [r7, #10]
#ifndef __PIF_NO_LOG__	
	const char ident[] = "HMC5883 Ident: ";
 801a1fc:	4b54      	ldr	r3, [pc, #336]	; (801a350 <pifHmc5883_Init+0x164>)
 801a1fe:	f107 0418 	add.w	r4, r7, #24
 801a202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif	
	uint8_t data[4];

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 801a208:	68fb      	ldr	r3, [r7, #12]
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	d005      	beq.n	801a21a <pifHmc5883_Init+0x2e>
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	2b00      	cmp	r3, #0
 801a212:	d002      	beq.n	801a21a <pifHmc5883_Init+0x2e>
 801a214:	683b      	ldr	r3, [r7, #0]
 801a216:	2b00      	cmp	r3, #0
 801a218:	d104      	bne.n	801a224 <pifHmc5883_Init+0x38>
		pif_error = E_INVALID_PARAM;
 801a21a:	4b4e      	ldr	r3, [pc, #312]	; (801a354 <pifHmc5883_Init+0x168>)
 801a21c:	2201      	movs	r2, #1
 801a21e:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 801a220:	2300      	movs	r3, #0
 801a222:	e091      	b.n	801a348 <pifHmc5883_Init+0x15c>
	}

	memset(p_owner, 0, sizeof(PifHmc5883));
 801a224:	2218      	movs	r2, #24
 801a226:	2100      	movs	r1, #0
 801a228:	68f8      	ldr	r0, [r7, #12]
 801a22a:	f009 fe47 	bl	8023ebc <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 801a22e:	6878      	ldr	r0, [r7, #4]
 801a230:	f7f8 fb0e 	bl	8012850 <pifI2cPort_AddDevice>
 801a234:	4602      	mov	r2, r0
 801a236:	68fb      	ldr	r3, [r7, #12]
 801a238:	611a      	str	r2, [r3, #16]
    if (!p_owner->_p_i2c) return FALSE;
 801a23a:	68fb      	ldr	r3, [r7, #12]
 801a23c:	691b      	ldr	r3, [r3, #16]
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d101      	bne.n	801a246 <pifHmc5883_Init+0x5a>
 801a242:	2300      	movs	r3, #0
 801a244:	e080      	b.n	801a348 <pifHmc5883_Init+0x15c>

    p_owner->_p_i2c->addr = HMC5883_I2C_ADDR;
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	691b      	ldr	r3, [r3, #16]
 801a24a:	221e      	movs	r2, #30
 801a24c:	701a      	strb	r2, [r3, #0]

    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_IDENT_A, data, 3)) goto fail;
 801a24e:	68fb      	ldr	r3, [r7, #12]
 801a250:	6918      	ldr	r0, [r3, #16]
 801a252:	f107 0214 	add.w	r2, r7, #20
 801a256:	2303      	movs	r3, #3
 801a258:	210a      	movs	r1, #10
 801a25a:	f7f8 fc15 	bl	8012a88 <pifI2cDevice_ReadRegBytes>
 801a25e:	4603      	mov	r3, r0
 801a260:	2b00      	cmp	r3, #0
 801a262:	d06a      	beq.n	801a33a <pifHmc5883_Init+0x14e>
	if (data[0] != 'H') {
 801a264:	7d3b      	ldrb	r3, [r7, #20]
 801a266:	2b48      	cmp	r3, #72	; 0x48
 801a268:	d003      	beq.n	801a272 <pifHmc5883_Init+0x86>
		pif_error = E_INVALID_ID;
 801a26a:	4b3a      	ldr	r3, [pc, #232]	; (801a354 <pifHmc5883_Init+0x168>)
 801a26c:	2211      	movs	r2, #17
 801a26e:	701a      	strb	r2, [r3, #0]
		goto fail;
 801a270:	e066      	b.n	801a340 <pifHmc5883_Init+0x154>
	}
#ifndef __PIF_NO_LOG__	
    if (data[0] < 32 || data[1] < 32 || data[2] < 32) {
 801a272:	7d3b      	ldrb	r3, [r7, #20]
 801a274:	2b1f      	cmp	r3, #31
 801a276:	d905      	bls.n	801a284 <pifHmc5883_Init+0x98>
 801a278:	7d7b      	ldrb	r3, [r7, #21]
 801a27a:	2b1f      	cmp	r3, #31
 801a27c:	d902      	bls.n	801a284 <pifHmc5883_Init+0x98>
 801a27e:	7dbb      	ldrb	r3, [r7, #22]
 801a280:	2b1f      	cmp	r3, #31
 801a282:	d80e      	bhi.n	801a2a2 <pifHmc5883_Init+0xb6>
    	pifLog_Printf(LT_INFO, "%s%2Xh %2Xh %2Xh", ident, data[0], data[1], data[2]);
 801a284:	7d3b      	ldrb	r3, [r7, #20]
 801a286:	4618      	mov	r0, r3
 801a288:	7d7b      	ldrb	r3, [r7, #21]
 801a28a:	7dba      	ldrb	r2, [r7, #22]
 801a28c:	4611      	mov	r1, r2
 801a28e:	f107 0218 	add.w	r2, r7, #24
 801a292:	9101      	str	r1, [sp, #4]
 801a294:	9300      	str	r3, [sp, #0]
 801a296:	4603      	mov	r3, r0
 801a298:	492f      	ldr	r1, [pc, #188]	; (801a358 <pifHmc5883_Init+0x16c>)
 801a29a:	2002      	movs	r0, #2
 801a29c:	f7f9 fcac 	bl	8013bf8 <pifLog_Printf>
 801a2a0:	e00d      	b.n	801a2be <pifHmc5883_Init+0xd2>
    }
    else {
    	pifLog_Printf(LT_INFO, "%s%c%c%c", ident, data[0], data[1], data[2]);
 801a2a2:	7d3b      	ldrb	r3, [r7, #20]
 801a2a4:	4618      	mov	r0, r3
 801a2a6:	7d7b      	ldrb	r3, [r7, #21]
 801a2a8:	7dba      	ldrb	r2, [r7, #22]
 801a2aa:	4611      	mov	r1, r2
 801a2ac:	f107 0218 	add.w	r2, r7, #24
 801a2b0:	9101      	str	r1, [sp, #4]
 801a2b2:	9300      	str	r3, [sp, #0]
 801a2b4:	4603      	mov	r3, r0
 801a2b6:	4929      	ldr	r1, [pc, #164]	; (801a35c <pifHmc5883_Init+0x170>)
 801a2b8:	2002      	movs	r0, #2
 801a2ba:	f7f9 fc9d 	bl	8013bf8 <pifLog_Printf>
    }
#endif

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, data)) goto fail;
 801a2be:	68fb      	ldr	r3, [r7, #12]
 801a2c0:	6918      	ldr	r0, [r3, #16]
 801a2c2:	f107 0314 	add.w	r3, r7, #20
 801a2c6:	f240 5203 	movw	r2, #1283	; 0x503
 801a2ca:	2101      	movs	r1, #1
 801a2cc:	f7f8 fbf1 	bl	8012ab2 <pifI2cDevice_ReadRegBit8>
 801a2d0:	4603      	mov	r3, r0
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	d033      	beq.n	801a33e <pifHmc5883_Init+0x152>
    _changeGain(p_imu_sensor, (PifHmc5883Gain)data);
 801a2d6:	f107 0314 	add.w	r3, r7, #20
 801a2da:	b2db      	uxtb	r3, r3
 801a2dc:	4619      	mov	r1, r3
 801a2de:	6838      	ldr	r0, [r7, #0]
 801a2e0:	f7ff ff3a 	bl	801a158 <_changeGain>

	if (id == PIF_ID_AUTO) id = pif_id++;
 801a2e4:	897b      	ldrh	r3, [r7, #10]
 801a2e6:	2b00      	cmp	r3, #0
 801a2e8:	d106      	bne.n	801a2f8 <pifHmc5883_Init+0x10c>
 801a2ea:	4b1d      	ldr	r3, [pc, #116]	; (801a360 <pifHmc5883_Init+0x174>)
 801a2ec:	881b      	ldrh	r3, [r3, #0]
 801a2ee:	1c5a      	adds	r2, r3, #1
 801a2f0:	b291      	uxth	r1, r2
 801a2f2:	4a1b      	ldr	r2, [pc, #108]	; (801a360 <pifHmc5883_Init+0x174>)
 801a2f4:	8011      	strh	r1, [r2, #0]
 801a2f6:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 801a2f8:	68fb      	ldr	r3, [r7, #12]
 801a2fa:	897a      	ldrh	r2, [r7, #10]
 801a2fc:	819a      	strh	r2, [r3, #12]
	p_owner->scale[AXIS_X] = 1.0f;
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a304:	601a      	str	r2, [r3, #0]
	p_owner->scale[AXIS_Y] = 1.0f;
 801a306:	68fb      	ldr	r3, [r7, #12]
 801a308:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a30c:	605a      	str	r2, [r3, #4]
	p_owner->scale[AXIS_Z] = 1.0f;
 801a30e:	68fb      	ldr	r3, [r7, #12]
 801a310:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a314:	609a      	str	r2, [r3, #8]
	p_owner->__p_imu_sensor = p_imu_sensor;
 801a316:	68fb      	ldr	r3, [r7, #12]
 801a318:	683a      	ldr	r2, [r7, #0]
 801a31a:	615a      	str	r2, [r3, #20]

	p_imu_sensor->_measure |= IMU_MEASURE_MAGNETO;
 801a31c:	683b      	ldr	r3, [r7, #0]
 801a31e:	781b      	ldrb	r3, [r3, #0]
 801a320:	f043 0304 	orr.w	r3, r3, #4
 801a324:	b2da      	uxtb	r2, r3
 801a326:	683b      	ldr	r3, [r7, #0]
 801a328:	701a      	strb	r2, [r3, #0]

	p_imu_sensor->__mag_info.read = (PifImuSensorRead)pifHmc5883_ReadMag;
 801a32a:	683b      	ldr	r3, [r7, #0]
 801a32c:	4a0d      	ldr	r2, [pc, #52]	; (801a364 <pifHmc5883_Init+0x178>)
 801a32e:	631a      	str	r2, [r3, #48]	; 0x30
	p_imu_sensor->__mag_info.p_issuer = p_owner;
 801a330:	683b      	ldr	r3, [r7, #0]
 801a332:	68fa      	ldr	r2, [r7, #12]
 801a334:	635a      	str	r2, [r3, #52]	; 0x34
    return TRUE;
 801a336:	2301      	movs	r3, #1
 801a338:	e006      	b.n	801a348 <pifHmc5883_Init+0x15c>
    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_IDENT_A, data, 3)) goto fail;
 801a33a:	bf00      	nop
 801a33c:	e000      	b.n	801a340 <pifHmc5883_Init+0x154>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, data)) goto fail;
 801a33e:	bf00      	nop

fail:
	pifHmc5883_Clear(p_owner);
 801a340:	68f8      	ldr	r0, [r7, #12]
 801a342:	f000 f811 	bl	801a368 <pifHmc5883_Clear>
	return FALSE;
 801a346:	2300      	movs	r3, #0
}
 801a348:	4618      	mov	r0, r3
 801a34a:	372c      	adds	r7, #44	; 0x2c
 801a34c:	46bd      	mov	sp, r7
 801a34e:	bd90      	pop	{r4, r7, pc}
 801a350:	08028cb0 	.word	0x08028cb0
 801a354:	20001de0 	.word	0x20001de0
 801a358:	08028c90 	.word	0x08028c90
 801a35c:	08028ca4 	.word	0x08028ca4
 801a360:	20000128 	.word	0x20000128
 801a364:	0801a3d7 	.word	0x0801a3d7

0801a368 <pifHmc5883_Clear>:

void pifHmc5883_Clear(PifHmc5883* p_owner)
{
 801a368:	b580      	push	{r7, lr}
 801a36a:	b082      	sub	sp, #8
 801a36c:	af00      	add	r7, sp, #0
 801a36e:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_i2c) {
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	691b      	ldr	r3, [r3, #16]
 801a374:	2b00      	cmp	r3, #0
 801a376:	d00b      	beq.n	801a390 <pifHmc5883_Clear+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	691b      	ldr	r3, [r3, #16]
 801a37c:	685a      	ldr	r2, [r3, #4]
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	691b      	ldr	r3, [r3, #16]
 801a382:	4619      	mov	r1, r3
 801a384:	4610      	mov	r0, r2
 801a386:	f7f8 fa87 	bl	8012898 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	2200      	movs	r2, #0
 801a38e:	611a      	str	r2, [r3, #16]
	}
}
 801a390:	bf00      	nop
 801a392:	3708      	adds	r7, #8
 801a394:	46bd      	mov	sp, r7
 801a396:	bd80      	pop	{r7, pc}

0801a398 <pifHmc5883_SetGain>:

BOOL pifHmc5883_SetGain(PifHmc5883* p_owner, PifHmc5883Gain gain)
{
 801a398:	b580      	push	{r7, lr}
 801a39a:	b082      	sub	sp, #8
 801a39c:	af00      	add	r7, sp, #0
 801a39e:	6078      	str	r0, [r7, #4]
 801a3a0:	460b      	mov	r3, r1
 801a3a2:	70fb      	strb	r3, [r7, #3]
    if (!pifI2cDevice_WriteRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, gain)) return FALSE;
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	6918      	ldr	r0, [r3, #16]
 801a3a8:	78fb      	ldrb	r3, [r7, #3]
 801a3aa:	f240 5203 	movw	r2, #1283	; 0x503
 801a3ae:	2101      	movs	r1, #1
 801a3b0:	f7f8 fc76 	bl	8012ca0 <pifI2cDevice_WriteRegBit8>
 801a3b4:	4603      	mov	r3, r0
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d101      	bne.n	801a3be <pifHmc5883_SetGain+0x26>
 801a3ba:	2300      	movs	r3, #0
 801a3bc:	e007      	b.n	801a3ce <pifHmc5883_SetGain+0x36>
	_changeGain(p_owner->__p_imu_sensor, gain);
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	695b      	ldr	r3, [r3, #20]
 801a3c2:	78fa      	ldrb	r2, [r7, #3]
 801a3c4:	4611      	mov	r1, r2
 801a3c6:	4618      	mov	r0, r3
 801a3c8:	f7ff fec6 	bl	801a158 <_changeGain>
    return TRUE;
 801a3cc:	2301      	movs	r3, #1
}
 801a3ce:	4618      	mov	r0, r3
 801a3d0:	3708      	adds	r7, #8
 801a3d2:	46bd      	mov	sp, r7
 801a3d4:	bd80      	pop	{r7, pc}

0801a3d6 <pifHmc5883_ReadMag>:

BOOL pifHmc5883_ReadMag(PifHmc5883* p_owner, int16_t* p_mag)
{
 801a3d6:	b580      	push	{r7, lr}
 801a3d8:	b084      	sub	sp, #16
 801a3da:	af00      	add	r7, sp, #0
 801a3dc:	6078      	str	r0, [r7, #4]
 801a3de:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, HMC5883_REG_STATUS, data)) return FALSE;
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	691b      	ldr	r3, [r3, #16]
 801a3e4:	f107 0208 	add.w	r2, r7, #8
 801a3e8:	2109      	movs	r1, #9
 801a3ea:	4618      	mov	r0, r3
 801a3ec:	f7f8 fb14 	bl	8012a18 <pifI2cDevice_ReadRegByte>
 801a3f0:	4603      	mov	r3, r0
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	d101      	bne.n	801a3fa <pifHmc5883_ReadMag+0x24>
 801a3f6:	2300      	movs	r3, #0
 801a3f8:	e061      	b.n	801a4be <pifHmc5883_ReadMag+0xe8>
	if (!(data[0] & 1)) return FALSE;
 801a3fa:	7a3b      	ldrb	r3, [r7, #8]
 801a3fc:	f003 0301 	and.w	r3, r3, #1
 801a400:	2b00      	cmp	r3, #0
 801a402:	d101      	bne.n	801a408 <pifHmc5883_ReadMag+0x32>
 801a404:	2300      	movs	r3, #0
 801a406:	e05a      	b.n	801a4be <pifHmc5883_ReadMag+0xe8>

	if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_OUT_X_M, data, 6)) return FALSE;
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	6918      	ldr	r0, [r3, #16]
 801a40c:	f107 0208 	add.w	r2, r7, #8
 801a410:	2306      	movs	r3, #6
 801a412:	2103      	movs	r1, #3
 801a414:	f7f8 fb38 	bl	8012a88 <pifI2cDevice_ReadRegBytes>
 801a418:	4603      	mov	r3, r0
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	d101      	bne.n	801a422 <pifHmc5883_ReadMag+0x4c>
 801a41e:	2300      	movs	r3, #0
 801a420:	e04d      	b.n	801a4be <pifHmc5883_ReadMag+0xe8>

	p_mag[AXIS_X] = (int16_t)((data[0] << 8) + data[1]) * p_owner->scale[AXIS_X];
 801a422:	7a3b      	ldrb	r3, [r7, #8]
 801a424:	b29b      	uxth	r3, r3
 801a426:	021b      	lsls	r3, r3, #8
 801a428:	b29a      	uxth	r2, r3
 801a42a:	7a7b      	ldrb	r3, [r7, #9]
 801a42c:	b29b      	uxth	r3, r3
 801a42e:	4413      	add	r3, r2
 801a430:	b29b      	uxth	r3, r3
 801a432:	b21b      	sxth	r3, r3
 801a434:	ee07 3a90 	vmov	s15, r3
 801a438:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	edd3 7a00 	vldr	s15, [r3]
 801a442:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a446:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a44a:	ee17 3a90 	vmov	r3, s15
 801a44e:	b21a      	sxth	r2, r3
 801a450:	683b      	ldr	r3, [r7, #0]
 801a452:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Z] = (int16_t)((data[2] << 8) + data[3]) * p_owner->scale[AXIS_Z];
 801a454:	7abb      	ldrb	r3, [r7, #10]
 801a456:	b29b      	uxth	r3, r3
 801a458:	021b      	lsls	r3, r3, #8
 801a45a:	b29a      	uxth	r2, r3
 801a45c:	7afb      	ldrb	r3, [r7, #11]
 801a45e:	b29b      	uxth	r3, r3
 801a460:	4413      	add	r3, r2
 801a462:	b29b      	uxth	r3, r3
 801a464:	b21b      	sxth	r3, r3
 801a466:	ee07 3a90 	vmov	s15, r3
 801a46a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	edd3 7a02 	vldr	s15, [r3, #8]
 801a474:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a478:	683b      	ldr	r3, [r7, #0]
 801a47a:	3304      	adds	r3, #4
 801a47c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a480:	ee17 2a90 	vmov	r2, s15
 801a484:	b212      	sxth	r2, r2
 801a486:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Y] = (int16_t)((data[4] << 8) + data[5]) * p_owner->scale[AXIS_Y];
 801a488:	7b3b      	ldrb	r3, [r7, #12]
 801a48a:	b29b      	uxth	r3, r3
 801a48c:	021b      	lsls	r3, r3, #8
 801a48e:	b29a      	uxth	r2, r3
 801a490:	7b7b      	ldrb	r3, [r7, #13]
 801a492:	b29b      	uxth	r3, r3
 801a494:	4413      	add	r3, r2
 801a496:	b29b      	uxth	r3, r3
 801a498:	b21b      	sxth	r3, r3
 801a49a:	ee07 3a90 	vmov	s15, r3
 801a49e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	edd3 7a01 	vldr	s15, [r3, #4]
 801a4a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a4ac:	683b      	ldr	r3, [r7, #0]
 801a4ae:	3302      	adds	r3, #2
 801a4b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a4b4:	ee17 2a90 	vmov	r2, s15
 801a4b8:	b212      	sxth	r2, r2
 801a4ba:	801a      	strh	r2, [r3, #0]
	return TRUE;
 801a4bc:	2301      	movs	r3, #1
}
 801a4be:	4618      	mov	r0, r3
 801a4c0:	3710      	adds	r7, #16
 801a4c2:	46bd      	mov	sp, r7
 801a4c4:	bd80      	pop	{r7, pc}

0801a4c6 <_alignBoard2>:

#include <math.h>


static void _alignBoard2(PifImuSensor* p_owner, int16_t *vec)
{
 801a4c6:	b580      	push	{r7, lr}
 801a4c8:	b084      	sub	sp, #16
 801a4ca:	af00      	add	r7, sp, #0
 801a4cc:	6078      	str	r0, [r7, #4]
 801a4ce:	6039      	str	r1, [r7, #0]
    int16_t x = vec[AXIS_X];
 801a4d0:	683b      	ldr	r3, [r7, #0]
 801a4d2:	881b      	ldrh	r3, [r3, #0]
 801a4d4:	81fb      	strh	r3, [r7, #14]
    int16_t y = vec[AXIS_Y];
 801a4d6:	683b      	ldr	r3, [r7, #0]
 801a4d8:	885b      	ldrh	r3, [r3, #2]
 801a4da:	81bb      	strh	r3, [r7, #12]
    int16_t z = vec[AXIS_Z];
 801a4dc:	683b      	ldr	r3, [r7, #0]
 801a4de:	889b      	ldrh	r3, [r3, #4]
 801a4e0:	817b      	strh	r3, [r7, #10]

    vec[AXIS_X] = lrintf(p_owner->__board_rotation[0][0] * x + p_owner->__board_rotation[1][0] * y + p_owner->__board_rotation[2][0] * z);
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 801a4e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a4ec:	ee07 3a90 	vmov	s15, r3
 801a4f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a4f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 801a4fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801a502:	ee07 3a90 	vmov	s15, r3
 801a506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a50a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a50e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 801a518:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801a51c:	ee07 3a90 	vmov	s15, r3
 801a520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a528:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a52c:	eeb0 0a67 	vmov.f32	s0, s15
 801a530:	f009 ffe6 	bl	8024500 <lrintf>
 801a534:	4603      	mov	r3, r0
 801a536:	b21a      	sxth	r2, r3
 801a538:	683b      	ldr	r3, [r7, #0]
 801a53a:	801a      	strh	r2, [r3, #0]
    vec[AXIS_Y] = lrintf(p_owner->__board_rotation[0][1] * x + p_owner->__board_rotation[1][1] * y + p_owner->__board_rotation[2][1] * z);
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 801a542:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a546:	ee07 3a90 	vmov	s15, r3
 801a54a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a54e:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 801a558:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801a55c:	ee07 3a90 	vmov	s15, r3
 801a560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a568:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 801a572:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801a576:	ee07 3a90 	vmov	s15, r3
 801a57a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a57e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a582:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a586:	eeb0 0a67 	vmov.f32	s0, s15
 801a58a:	f009 ffb9 	bl	8024500 <lrintf>
 801a58e:	4602      	mov	r2, r0
 801a590:	683b      	ldr	r3, [r7, #0]
 801a592:	3302      	adds	r3, #2
 801a594:	b212      	sxth	r2, r2
 801a596:	801a      	strh	r2, [r3, #0]
    vec[AXIS_Z] = lrintf(p_owner->__board_rotation[0][2] * x + p_owner->__board_rotation[1][2] * y + p_owner->__board_rotation[2][2] * z);
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 801a59e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a5a2:	ee07 3a90 	vmov	s15, r3
 801a5a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a5aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 801a5b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801a5b8:	ee07 3a90 	vmov	s15, r3
 801a5bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a5c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a5c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 801a5ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801a5d2:	ee07 3a90 	vmov	s15, r3
 801a5d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a5da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a5de:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a5e2:	eeb0 0a67 	vmov.f32	s0, s15
 801a5e6:	f009 ff8b 	bl	8024500 <lrintf>
 801a5ea:	4602      	mov	r2, r0
 801a5ec:	683b      	ldr	r3, [r7, #0]
 801a5ee:	3304      	adds	r3, #4
 801a5f0:	b212      	sxth	r2, r2
 801a5f2:	801a      	strh	r2, [r3, #0]
}
 801a5f4:	bf00      	nop
 801a5f6:	3710      	adds	r7, #16
 801a5f8:	46bd      	mov	sp, r7
 801a5fa:	bd80      	pop	{r7, pc}

0801a5fc <_alignSensors2>:

static void _alignSensors2(PifImuSensor* p_owner, int16_t* src, int16_t* dest, uint8_t rotation)
{
 801a5fc:	b580      	push	{r7, lr}
 801a5fe:	b084      	sub	sp, #16
 801a600:	af00      	add	r7, sp, #0
 801a602:	60f8      	str	r0, [r7, #12]
 801a604:	60b9      	str	r1, [r7, #8]
 801a606:	607a      	str	r2, [r7, #4]
 801a608:	70fb      	strb	r3, [r7, #3]
    switch (rotation) {
 801a60a:	78fb      	ldrb	r3, [r7, #3]
 801a60c:	3b02      	subs	r3, #2
 801a60e:	2b06      	cmp	r3, #6
 801a610:	f200 80c8 	bhi.w	801a7a4 <_alignSensors2+0x1a8>
 801a614:	a201      	add	r2, pc, #4	; (adr r2, 801a61c <_alignSensors2+0x20>)
 801a616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a61a:	bf00      	nop
 801a61c:	0801a639 	.word	0x0801a639
 801a620:	0801a665 	.word	0x0801a665
 801a624:	0801a69b 	.word	0x0801a69b
 801a628:	0801a6c9 	.word	0x0801a6c9
 801a62c:	0801a6ff 	.word	0x0801a6ff
 801a630:	0801a72d 	.word	0x0801a72d
 801a634:	0801a765 	.word	0x0801a765
        case IMUS_ALIGN_CW90_DEG:
            dest[AXIS_X] = src[AXIS_Y];
 801a638:	68bb      	ldr	r3, [r7, #8]
 801a63a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_X];
 801a642:	68bb      	ldr	r3, [r7, #8]
 801a644:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a648:	b29b      	uxth	r3, r3
 801a64a:	425b      	negs	r3, r3
 801a64c:	b29a      	uxth	r2, r3
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	3302      	adds	r3, #2
 801a652:	b212      	sxth	r2, r2
 801a654:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	3304      	adds	r3, #4
 801a65a:	68ba      	ldr	r2, [r7, #8]
 801a65c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801a660:	801a      	strh	r2, [r3, #0]
            break;
 801a662:	e0b1      	b.n	801a7c8 <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW180_DEG:
            dest[AXIS_X] = -src[AXIS_X];
 801a664:	68bb      	ldr	r3, [r7, #8]
 801a666:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a66a:	b29b      	uxth	r3, r3
 801a66c:	425b      	negs	r3, r3
 801a66e:	b29b      	uxth	r3, r3
 801a670:	b21a      	sxth	r2, r3
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_Y];
 801a676:	68bb      	ldr	r3, [r7, #8]
 801a678:	3302      	adds	r3, #2
 801a67a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a67e:	b29b      	uxth	r3, r3
 801a680:	425b      	negs	r3, r3
 801a682:	b29a      	uxth	r2, r3
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	3302      	adds	r3, #2
 801a688:	b212      	sxth	r2, r2
 801a68a:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	3304      	adds	r3, #4
 801a690:	68ba      	ldr	r2, [r7, #8]
 801a692:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801a696:	801a      	strh	r2, [r3, #0]
            break;
 801a698:	e096      	b.n	801a7c8 <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW270_DEG:
            dest[AXIS_X] = -src[AXIS_Y];
 801a69a:	68bb      	ldr	r3, [r7, #8]
 801a69c:	3302      	adds	r3, #2
 801a69e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a6a2:	b29b      	uxth	r3, r3
 801a6a4:	425b      	negs	r3, r3
 801a6a6:	b29b      	uxth	r3, r3
 801a6a8:	b21a      	sxth	r2, r3
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_X];
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	3302      	adds	r3, #2
 801a6b2:	68ba      	ldr	r2, [r7, #8]
 801a6b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a6b8:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	3304      	adds	r3, #4
 801a6be:	68ba      	ldr	r2, [r7, #8]
 801a6c0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801a6c4:	801a      	strh	r2, [r3, #0]
            break;
 801a6c6:	e07f      	b.n	801a7c8 <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW0_DEG_FLIP:
            dest[AXIS_X] = -src[AXIS_X];
 801a6c8:	68bb      	ldr	r3, [r7, #8]
 801a6ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a6ce:	b29b      	uxth	r3, r3
 801a6d0:	425b      	negs	r3, r3
 801a6d2:	b29b      	uxth	r3, r3
 801a6d4:	b21a      	sxth	r2, r3
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_Y];
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	3302      	adds	r3, #2
 801a6de:	68ba      	ldr	r2, [r7, #8]
 801a6e0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801a6e4:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 801a6e6:	68bb      	ldr	r3, [r7, #8]
 801a6e8:	3304      	adds	r3, #4
 801a6ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a6ee:	b29b      	uxth	r3, r3
 801a6f0:	425b      	negs	r3, r3
 801a6f2:	b29a      	uxth	r2, r3
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	3304      	adds	r3, #4
 801a6f8:	b212      	sxth	r2, r2
 801a6fa:	801a      	strh	r2, [r3, #0]
            break;
 801a6fc:	e064      	b.n	801a7c8 <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW90_DEG_FLIP:
            dest[AXIS_X] = src[AXIS_Y];
 801a6fe:	68bb      	ldr	r3, [r7, #8]
 801a700:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_X];
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	3302      	adds	r3, #2
 801a70c:	68ba      	ldr	r2, [r7, #8]
 801a70e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a712:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 801a714:	68bb      	ldr	r3, [r7, #8]
 801a716:	3304      	adds	r3, #4
 801a718:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a71c:	b29b      	uxth	r3, r3
 801a71e:	425b      	negs	r3, r3
 801a720:	b29a      	uxth	r2, r3
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	3304      	adds	r3, #4
 801a726:	b212      	sxth	r2, r2
 801a728:	801a      	strh	r2, [r3, #0]
            break;
 801a72a:	e04d      	b.n	801a7c8 <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW180_DEG_FLIP:
            dest[AXIS_X] = src[AXIS_X];
 801a72c:	68bb      	ldr	r3, [r7, #8]
 801a72e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_Y];
 801a736:	68bb      	ldr	r3, [r7, #8]
 801a738:	3302      	adds	r3, #2
 801a73a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a73e:	b29b      	uxth	r3, r3
 801a740:	425b      	negs	r3, r3
 801a742:	b29a      	uxth	r2, r3
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	3302      	adds	r3, #2
 801a748:	b212      	sxth	r2, r2
 801a74a:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 801a74c:	68bb      	ldr	r3, [r7, #8]
 801a74e:	3304      	adds	r3, #4
 801a750:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a754:	b29b      	uxth	r3, r3
 801a756:	425b      	negs	r3, r3
 801a758:	b29a      	uxth	r2, r3
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	3304      	adds	r3, #4
 801a75e:	b212      	sxth	r2, r2
 801a760:	801a      	strh	r2, [r3, #0]
            break;
 801a762:	e031      	b.n	801a7c8 <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW270_DEG_FLIP:
            dest[AXIS_X] = -src[AXIS_Y];
 801a764:	68bb      	ldr	r3, [r7, #8]
 801a766:	3302      	adds	r3, #2
 801a768:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a76c:	b29b      	uxth	r3, r3
 801a76e:	425b      	negs	r3, r3
 801a770:	b29b      	uxth	r3, r3
 801a772:	b21a      	sxth	r2, r3
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_X];
 801a778:	68bb      	ldr	r3, [r7, #8]
 801a77a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a77e:	b29b      	uxth	r3, r3
 801a780:	425b      	negs	r3, r3
 801a782:	b29a      	uxth	r2, r3
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	3302      	adds	r3, #2
 801a788:	b212      	sxth	r2, r2
 801a78a:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 801a78c:	68bb      	ldr	r3, [r7, #8]
 801a78e:	3304      	adds	r3, #4
 801a790:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a794:	b29b      	uxth	r3, r3
 801a796:	425b      	negs	r3, r3
 801a798:	b29a      	uxth	r2, r3
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	3304      	adds	r3, #4
 801a79e:	b212      	sxth	r2, r2
 801a7a0:	801a      	strh	r2, [r3, #0]
            break;
 801a7a2:	e011      	b.n	801a7c8 <_alignSensors2+0x1cc>
        default:	// IMUS_ALIGN_CW0_DEG:
            dest[AXIS_X] = src[AXIS_X];
 801a7a4:	68bb      	ldr	r3, [r7, #8]
 801a7a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_Y];
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	3302      	adds	r3, #2
 801a7b2:	68ba      	ldr	r2, [r7, #8]
 801a7b4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801a7b8:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	3304      	adds	r3, #4
 801a7be:	68ba      	ldr	r2, [r7, #8]
 801a7c0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801a7c4:	801a      	strh	r2, [r3, #0]
            break;
 801a7c6:	bf00      	nop
    }

    if (p_owner->__board_alignment)
 801a7c8:	68fb      	ldr	r3, [r7, #12]
 801a7ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	d003      	beq.n	801a7da <_alignSensors2+0x1de>
        _alignBoard2(p_owner, dest);
 801a7d2:	6879      	ldr	r1, [r7, #4]
 801a7d4:	68f8      	ldr	r0, [r7, #12]
 801a7d6:	f7ff fe76 	bl	801a4c6 <_alignBoard2>
}
 801a7da:	bf00      	nop
 801a7dc:	3710      	adds	r7, #16
 801a7de:	46bd      	mov	sp, r7
 801a7e0:	bd80      	pop	{r7, pc}
 801a7e2:	bf00      	nop

0801a7e4 <pifImuSensor_Init>:
    if (p_owner->__board_alignment)
        _alignBoard4(p_owner, dest);
}

void pifImuSensor_Init(PifImuSensor* p_owner)
{
 801a7e4:	b580      	push	{r7, lr}
 801a7e6:	b082      	sub	sp, #8
 801a7e8:	af00      	add	r7, sp, #0
 801a7ea:	6078      	str	r0, [r7, #4]
	memset(p_owner, 0, sizeof(PifImuSensor));
 801a7ec:	2278      	movs	r2, #120	; 0x78
 801a7ee:	2100      	movs	r1, #0
 801a7f0:	6878      	ldr	r0, [r7, #4]
 801a7f2:	f009 fb63 	bl	8023ebc <memset>
}
 801a7f6:	bf00      	nop
 801a7f8:	3708      	adds	r7, #8
 801a7fa:	46bd      	mov	sp, r7
 801a7fc:	bd80      	pop	{r7, pc}
	...

0801a800 <pifImuSensor_InitBoardAlignment>:

void pifImuSensor_InitBoardAlignment(PifImuSensor* p_owner, int16_t board_align_roll, int16_t board_align_pitch, int16_t board_align_yaw)
{
 801a800:	b580      	push	{r7, lr}
 801a802:	b092      	sub	sp, #72	; 0x48
 801a804:	af00      	add	r7, sp, #0
 801a806:	60f8      	str	r0, [r7, #12]
 801a808:	4608      	mov	r0, r1
 801a80a:	4611      	mov	r1, r2
 801a80c:	461a      	mov	r2, r3
 801a80e:	4603      	mov	r3, r0
 801a810:	817b      	strh	r3, [r7, #10]
 801a812:	460b      	mov	r3, r1
 801a814:	813b      	strh	r3, [r7, #8]
 801a816:	4613      	mov	r3, r2
 801a818:	80fb      	strh	r3, [r7, #6]
    float roll, pitch, yaw;
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, coszcosy, sinzcosx, coszsinx, sinzsinx;

    // standard alignment, nothing to calculate
    if (!board_align_roll && !board_align_pitch && !board_align_yaw) return;
 801a81a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d108      	bne.n	801a834 <pifImuSensor_InitBoardAlignment+0x34>
 801a822:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a826:	2b00      	cmp	r3, #0
 801a828:	d104      	bne.n	801a834 <pifImuSensor_InitBoardAlignment+0x34>
 801a82a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a82e:	2b00      	cmp	r3, #0
 801a830:	f000 80da 	beq.w	801a9e8 <pifImuSensor_InitBoardAlignment+0x1e8>

    p_owner->__board_alignment = TRUE;
 801a834:	68fb      	ldr	r3, [r7, #12]
 801a836:	2201      	movs	r2, #1
 801a838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    // deg2rad
    roll = board_align_roll * PIF_PI / 180.0f;
 801a83c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801a840:	ee07 3a90 	vmov	s15, r3
 801a844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a848:	ed9f 7a69 	vldr	s14, [pc, #420]	; 801a9f0 <pifImuSensor_InitBoardAlignment+0x1f0>
 801a84c:	ee27 7a87 	vmul.f32	s14, s15, s14
 801a850:	eddf 6a68 	vldr	s13, [pc, #416]	; 801a9f4 <pifImuSensor_InitBoardAlignment+0x1f4>
 801a854:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801a858:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    pitch = board_align_pitch * PIF_PI / 180.0f;
 801a85c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a860:	ee07 3a90 	vmov	s15, r3
 801a864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a868:	ed9f 7a61 	vldr	s14, [pc, #388]	; 801a9f0 <pifImuSensor_InitBoardAlignment+0x1f0>
 801a86c:	ee27 7a87 	vmul.f32	s14, s15, s14
 801a870:	eddf 6a60 	vldr	s13, [pc, #384]	; 801a9f4 <pifImuSensor_InitBoardAlignment+0x1f4>
 801a874:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801a878:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    yaw = board_align_yaw * PIF_PI / 180.0f;
 801a87c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a880:	ee07 3a90 	vmov	s15, r3
 801a884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a888:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801a9f0 <pifImuSensor_InitBoardAlignment+0x1f0>
 801a88c:	ee27 7a87 	vmul.f32	s14, s15, s14
 801a890:	eddf 6a58 	vldr	s13, [pc, #352]	; 801a9f4 <pifImuSensor_InitBoardAlignment+0x1f4>
 801a894:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801a898:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    cosx = cosf(roll);
 801a89c:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 801a8a0:	f009 fdea 	bl	8024478 <cosf>
 801a8a4:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    sinx = sinf(roll);
 801a8a8:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 801a8ac:	f009 fe68 	bl	8024580 <sinf>
 801a8b0:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    cosy = cosf(pitch);
 801a8b4:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 801a8b8:	f009 fdde 	bl	8024478 <cosf>
 801a8bc:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    siny = sinf(pitch);
 801a8c0:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 801a8c4:	f009 fe5c 	bl	8024580 <sinf>
 801a8c8:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    cosz = cosf(yaw);
 801a8cc:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 801a8d0:	f009 fdd2 	bl	8024478 <cosf>
 801a8d4:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    sinz = sinf(yaw);
 801a8d8:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 801a8dc:	f009 fe50 	bl	8024580 <sinf>
 801a8e0:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    coszcosx = cosz * cosx;
 801a8e4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801a8e8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801a8ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a8f0:	edc7 7a08 	vstr	s15, [r7, #32]
    coszcosy = cosz * cosy;
 801a8f4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801a8f8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801a8fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a900:	edc7 7a07 	vstr	s15, [r7, #28]
    sinzcosx = sinz * cosx;
 801a904:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801a908:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801a90c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a910:	edc7 7a06 	vstr	s15, [r7, #24]
    coszsinx = sinx * cosz;
 801a914:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801a918:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801a91c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a920:	edc7 7a05 	vstr	s15, [r7, #20]
    sinzsinx = sinx * sinz;
 801a924:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801a928:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801a92c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a930:	edc7 7a04 	vstr	s15, [r7, #16]

    // define rotation matrix
    p_owner->__board_rotation[0][0] = coszcosy;
 801a934:	68fb      	ldr	r3, [r7, #12]
 801a936:	69fa      	ldr	r2, [r7, #28]
 801a938:	655a      	str	r2, [r3, #84]	; 0x54
    p_owner->__board_rotation[0][1] = -cosy * sinz;
 801a93a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801a93e:	eeb1 7a67 	vneg.f32	s14, s15
 801a942:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801a946:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    p_owner->__board_rotation[0][2] = siny;
 801a950:	68fb      	ldr	r3, [r7, #12]
 801a952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a954:	65da      	str	r2, [r3, #92]	; 0x5c

    p_owner->__board_rotation[1][0] = sinzcosx + (coszsinx * siny);
 801a956:	ed97 7a05 	vldr	s14, [r7, #20]
 801a95a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801a95e:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a962:	edd7 7a06 	vldr	s15, [r7, #24]
 801a966:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a96a:	68fb      	ldr	r3, [r7, #12]
 801a96c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    p_owner->__board_rotation[1][1] = coszcosx - (sinzsinx * siny);
 801a970:	ed97 7a04 	vldr	s14, [r7, #16]
 801a974:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801a978:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a97c:	ed97 7a08 	vldr	s14, [r7, #32]
 801a980:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a984:	68fb      	ldr	r3, [r7, #12]
 801a986:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
    p_owner->__board_rotation[1][2] = -sinx * cosy;
 801a98a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801a98e:	eeb1 7a67 	vneg.f32	s14, s15
 801a992:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801a996:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a99a:	68fb      	ldr	r3, [r7, #12]
 801a99c:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

    p_owner->__board_rotation[2][0] = (sinzsinx) - (coszcosx * siny);
 801a9a0:	ed97 7a08 	vldr	s14, [r7, #32]
 801a9a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801a9a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a9ac:	ed97 7a04 	vldr	s14, [r7, #16]
 801a9b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a9b4:	68fb      	ldr	r3, [r7, #12]
 801a9b6:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
    p_owner->__board_rotation[2][1] = (coszsinx) + (sinzcosx * siny);
 801a9ba:	ed97 7a06 	vldr	s14, [r7, #24]
 801a9be:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801a9c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a9c6:	edd7 7a05 	vldr	s15, [r7, #20]
 801a9ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a9ce:	68fb      	ldr	r3, [r7, #12]
 801a9d0:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    p_owner->__board_rotation[2][2] = cosy * cosx;
 801a9d4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801a9d8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801a9dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a9e0:	68fb      	ldr	r3, [r7, #12]
 801a9e2:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
 801a9e6:	e000      	b.n	801a9ea <pifImuSensor_InitBoardAlignment+0x1ea>
    if (!board_align_roll && !board_align_pitch && !board_align_yaw) return;
 801a9e8:	bf00      	nop
}
 801a9ea:	3748      	adds	r7, #72	; 0x48
 801a9ec:	46bd      	mov	sp, r7
 801a9ee:	bd80      	pop	{r7, pc}
 801a9f0:	40490fdb 	.word	0x40490fdb
 801a9f4:	43340000 	.word	0x43340000

0801a9f8 <pifImuSensor_SetGyroAlign>:

void pifImuSensor_SetGyroAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 801a9f8:	b480      	push	{r7}
 801a9fa:	b083      	sub	sp, #12
 801a9fc:	af00      	add	r7, sp, #0
 801a9fe:	6078      	str	r0, [r7, #4]
 801aa00:	460b      	mov	r3, r1
 801aa02:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 801aa04:	78fb      	ldrb	r3, [r7, #3]
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d002      	beq.n	801aa10 <pifImuSensor_SetGyroAlign+0x18>
        p_owner->__gyro_info.align = align;
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	78fa      	ldrb	r2, [r7, #3]
 801aa0e:	751a      	strb	r2, [r3, #20]
}
 801aa10:	bf00      	nop
 801aa12:	370c      	adds	r7, #12
 801aa14:	46bd      	mov	sp, r7
 801aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa1a:	4770      	bx	lr

0801aa1c <pifImuSensor_ReadGyro2>:

BOOL pifImuSensor_ReadGyro2(PifImuSensor* p_owner, int16_t* p_gyro)
{
 801aa1c:	b580      	push	{r7, lr}
 801aa1e:	b084      	sub	sp, #16
 801aa20:	af00      	add	r7, sp, #0
 801aa22:	6078      	str	r0, [r7, #4]
 801aa24:	6039      	str	r1, [r7, #0]
	int16_t gyro[AXIS_COUNT];

	if (p_owner->_measure & IMU_MEASURE_GYROSCOPE) {
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	781b      	ldrb	r3, [r3, #0]
 801aa2a:	f003 0301 	and.w	r3, r3, #1
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d016      	beq.n	801aa60 <pifImuSensor_ReadGyro2+0x44>
		if (!(*p_owner->__gyro_info.read)(p_owner->__gyro_info.p_issuer, gyro)) return FALSE;
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	699b      	ldr	r3, [r3, #24]
 801aa36:	687a      	ldr	r2, [r7, #4]
 801aa38:	69d2      	ldr	r2, [r2, #28]
 801aa3a:	f107 0108 	add.w	r1, r7, #8
 801aa3e:	4610      	mov	r0, r2
 801aa40:	4798      	blx	r3
 801aa42:	4603      	mov	r3, r0
 801aa44:	2b00      	cmp	r3, #0
 801aa46:	d101      	bne.n	801aa4c <pifImuSensor_ReadGyro2+0x30>
 801aa48:	2300      	movs	r3, #0
 801aa4a:	e00a      	b.n	801aa62 <pifImuSensor_ReadGyro2+0x46>

		_alignSensors2(p_owner, gyro, p_gyro, p_owner->__gyro_info.align);
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	7d1b      	ldrb	r3, [r3, #20]
 801aa50:	f107 0108 	add.w	r1, r7, #8
 801aa54:	683a      	ldr	r2, [r7, #0]
 801aa56:	6878      	ldr	r0, [r7, #4]
 801aa58:	f7ff fdd0 	bl	801a5fc <_alignSensors2>
		return TRUE;
 801aa5c:	2301      	movs	r3, #1
 801aa5e:	e000      	b.n	801aa62 <pifImuSensor_ReadGyro2+0x46>
	}
	return FALSE;
 801aa60:	2300      	movs	r3, #0
}
 801aa62:	4618      	mov	r0, r3
 801aa64:	3710      	adds	r7, #16
 801aa66:	46bd      	mov	sp, r7
 801aa68:	bd80      	pop	{r7, pc}

0801aa6a <pifImuSensor_SetAccelAlign>:
	}
	return TRUE;
}

void pifImuSensor_SetAccelAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 801aa6a:	b480      	push	{r7}
 801aa6c:	b083      	sub	sp, #12
 801aa6e:	af00      	add	r7, sp, #0
 801aa70:	6078      	str	r0, [r7, #4]
 801aa72:	460b      	mov	r3, r1
 801aa74:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 801aa76:	78fb      	ldrb	r3, [r7, #3]
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	d003      	beq.n	801aa84 <pifImuSensor_SetAccelAlign+0x1a>
        p_owner->__accel_info.align = align;
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	78fa      	ldrb	r2, [r7, #3]
 801aa80:	f883 2020 	strb.w	r2, [r3, #32]
}
 801aa84:	bf00      	nop
 801aa86:	370c      	adds	r7, #12
 801aa88:	46bd      	mov	sp, r7
 801aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa8e:	4770      	bx	lr

0801aa90 <pifImuSensor_ReadAccel2>:

BOOL pifImuSensor_ReadAccel2(PifImuSensor* p_owner, int16_t* p_accel)
{
 801aa90:	b580      	push	{r7, lr}
 801aa92:	b084      	sub	sp, #16
 801aa94:	af00      	add	r7, sp, #0
 801aa96:	6078      	str	r0, [r7, #4]
 801aa98:	6039      	str	r1, [r7, #0]
	int16_t accel[AXIS_COUNT];

	if (p_owner->_measure & IMU_MEASURE_ACCELERO) {
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	781b      	ldrb	r3, [r3, #0]
 801aa9e:	f003 0302 	and.w	r3, r3, #2
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	d017      	beq.n	801aad6 <pifImuSensor_ReadAccel2+0x46>
		if (!(*p_owner->__accel_info.read)(p_owner->__accel_info.p_issuer, accel)) return FALSE;
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aaaa:	687a      	ldr	r2, [r7, #4]
 801aaac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801aaae:	f107 0108 	add.w	r1, r7, #8
 801aab2:	4610      	mov	r0, r2
 801aab4:	4798      	blx	r3
 801aab6:	4603      	mov	r3, r0
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	d101      	bne.n	801aac0 <pifImuSensor_ReadAccel2+0x30>
 801aabc:	2300      	movs	r3, #0
 801aabe:	e00b      	b.n	801aad8 <pifImuSensor_ReadAccel2+0x48>

		_alignSensors2(p_owner, accel, p_accel, p_owner->__accel_info.align);
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 801aac6:	f107 0108 	add.w	r1, r7, #8
 801aaca:	683a      	ldr	r2, [r7, #0]
 801aacc:	6878      	ldr	r0, [r7, #4]
 801aace:	f7ff fd95 	bl	801a5fc <_alignSensors2>
		return TRUE;
 801aad2:	2301      	movs	r3, #1
 801aad4:	e000      	b.n	801aad8 <pifImuSensor_ReadAccel2+0x48>
	}
	return FALSE;
 801aad6:	2300      	movs	r3, #0
}
 801aad8:	4618      	mov	r0, r3
 801aada:	3710      	adds	r7, #16
 801aadc:	46bd      	mov	sp, r7
 801aade:	bd80      	pop	{r7, pc}

0801aae0 <pifImuSensor_SetMagAlign>:
	p_accel[AXIS_Z] = 9.80665f * accel[AXIS_Z] / p_owner->_accel_gain;
	return TRUE;
}

void pifImuSensor_SetMagAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 801aae0:	b480      	push	{r7}
 801aae2:	b083      	sub	sp, #12
 801aae4:	af00      	add	r7, sp, #0
 801aae6:	6078      	str	r0, [r7, #4]
 801aae8:	460b      	mov	r3, r1
 801aaea:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 801aaec:	78fb      	ldrb	r3, [r7, #3]
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d003      	beq.n	801aafa <pifImuSensor_SetMagAlign+0x1a>
        p_owner->__mag_info.align = align;
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	78fa      	ldrb	r2, [r7, #3]
 801aaf6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 801aafa:	bf00      	nop
 801aafc:	370c      	adds	r7, #12
 801aafe:	46bd      	mov	sp, r7
 801ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab04:	4770      	bx	lr

0801ab06 <pifImuSensor_ReadMag2>:

BOOL pifImuSensor_ReadMag2(PifImuSensor* p_owner, int16_t* p_mag)
{
 801ab06:	b580      	push	{r7, lr}
 801ab08:	b084      	sub	sp, #16
 801ab0a:	af00      	add	r7, sp, #0
 801ab0c:	6078      	str	r0, [r7, #4]
 801ab0e:	6039      	str	r1, [r7, #0]
	int16_t mag[AXIS_COUNT];

	if (p_owner->_measure & IMU_MEASURE_MAGNETO) {
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	781b      	ldrb	r3, [r3, #0]
 801ab14:	f003 0304 	and.w	r3, r3, #4
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	d017      	beq.n	801ab4c <pifImuSensor_ReadMag2+0x46>
		if (!(*p_owner->__mag_info.read)(p_owner->__mag_info.p_issuer, mag)) return FALSE;
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ab20:	687a      	ldr	r2, [r7, #4]
 801ab22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801ab24:	f107 0108 	add.w	r1, r7, #8
 801ab28:	4610      	mov	r0, r2
 801ab2a:	4798      	blx	r3
 801ab2c:	4603      	mov	r3, r0
 801ab2e:	2b00      	cmp	r3, #0
 801ab30:	d101      	bne.n	801ab36 <pifImuSensor_ReadMag2+0x30>
 801ab32:	2300      	movs	r3, #0
 801ab34:	e00b      	b.n	801ab4e <pifImuSensor_ReadMag2+0x48>

		_alignSensors2(p_owner, mag, p_mag, p_owner->__mag_info.align);
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801ab3c:	f107 0108 	add.w	r1, r7, #8
 801ab40:	683a      	ldr	r2, [r7, #0]
 801ab42:	6878      	ldr	r0, [r7, #4]
 801ab44:	f7ff fd5a 	bl	801a5fc <_alignSensors2>
		return TRUE;
 801ab48:	2301      	movs	r3, #1
 801ab4a:	e000      	b.n	801ab4e <pifImuSensor_ReadMag2+0x48>
	}
	return FALSE;
 801ab4c:	2300      	movs	r3, #0
}
 801ab4e:	4618      	mov	r0, r3
 801ab50:	3710      	adds	r7, #16
 801ab52:	46bd      	mov	sp, r7
 801ab54:	bd80      	pop	{r7, pc}
	...

0801ab58 <_changeFsSel>:

#include <math.h>


static BOOL _changeFsSel(PifImuSensor* p_imu_sensor, PifMpu60x0FsSel fs_sel)
{
 801ab58:	b580      	push	{r7, lr}
 801ab5a:	b082      	sub	sp, #8
 801ab5c:	af00      	add	r7, sp, #0
 801ab5e:	6078      	str	r0, [r7, #4]
 801ab60:	460b      	mov	r3, r1
 801ab62:	70fb      	strb	r3, [r7, #3]
	if (!p_imu_sensor) return FALSE;
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	2b00      	cmp	r3, #0
 801ab68:	d101      	bne.n	801ab6e <_changeFsSel+0x16>
 801ab6a:	2300      	movs	r3, #0
 801ab6c:	e013      	b.n	801ab96 <_changeFsSel+0x3e>
	p_imu_sensor->_gyro_gain = 131.0 / (1 << fs_sel);
 801ab6e:	78fb      	ldrb	r3, [r7, #3]
 801ab70:	2201      	movs	r2, #1
 801ab72:	fa02 f303 	lsl.w	r3, r2, r3
 801ab76:	4618      	mov	r0, r3
 801ab78:	f7e5 fc88 	bl	800048c <__aeabi_i2d>
 801ab7c:	4602      	mov	r2, r0
 801ab7e:	460b      	mov	r3, r1
 801ab80:	a107      	add	r1, pc, #28	; (adr r1, 801aba0 <_changeFsSel+0x48>)
 801ab82:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab86:	f7e5 fe15 	bl	80007b4 <__aeabi_ddiv>
 801ab8a:	4602      	mov	r2, r0
 801ab8c:	460b      	mov	r3, r1
 801ab8e:	6879      	ldr	r1, [r7, #4]
 801ab90:	e9c1 2302 	strd	r2, r3, [r1, #8]
	return TRUE;
 801ab94:	2301      	movs	r3, #1
}
 801ab96:	4618      	mov	r0, r3
 801ab98:	3708      	adds	r7, #8
 801ab9a:	46bd      	mov	sp, r7
 801ab9c:	bd80      	pop	{r7, pc}
 801ab9e:	bf00      	nop
 801aba0:	00000000 	.word	0x00000000
 801aba4:	40606000 	.word	0x40606000

0801aba8 <_changeAfsSel>:

static BOOL _changeAfsSel(PifImuSensor* p_imu_sensor, PifMpu60x0AfsSel afs_sel)
{
 801aba8:	b480      	push	{r7}
 801abaa:	b083      	sub	sp, #12
 801abac:	af00      	add	r7, sp, #0
 801abae:	6078      	str	r0, [r7, #4]
 801abb0:	460b      	mov	r3, r1
 801abb2:	70fb      	strb	r3, [r7, #3]
	if (!p_imu_sensor) return FALSE;
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	d101      	bne.n	801abbe <_changeAfsSel+0x16>
 801abba:	2300      	movs	r3, #0
 801abbc:	e008      	b.n	801abd0 <_changeAfsSel+0x28>
	p_imu_sensor->_accel_gain = 16384 >> afs_sel;
 801abbe:	78fb      	ldrb	r3, [r7, #3]
 801abc0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801abc4:	fa42 f303 	asr.w	r3, r2, r3
 801abc8:	b29a      	uxth	r2, r3
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	821a      	strh	r2, [r3, #16]
	return TRUE;
 801abce:	2301      	movs	r3, #1
}
 801abd0:	4618      	mov	r0, r3
 801abd2:	370c      	adds	r7, #12
 801abd4:	46bd      	mov	sp, r7
 801abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abda:	4770      	bx	lr

0801abdc <pifMpu60x0_Init>:

BOOL pifMpu60x0_Init(PifMpu60x0* p_owner, PifId id, PifI2cPort* p_i2c, uint8_t addr, PifImuSensor* p_imu_sensor)
{
 801abdc:	b590      	push	{r4, r7, lr}
 801abde:	b08b      	sub	sp, #44	; 0x2c
 801abe0:	af00      	add	r7, sp, #0
 801abe2:	60f8      	str	r0, [r7, #12]
 801abe4:	607a      	str	r2, [r7, #4]
 801abe6:	461a      	mov	r2, r3
 801abe8:	460b      	mov	r3, r1
 801abea:	817b      	strh	r3, [r7, #10]
 801abec:	4613      	mov	r3, r2
 801abee:	727b      	strb	r3, [r7, #9]
#ifndef __PIF_NO_LOG__	
	const char ident[] = "MPU60X0 Ident: ";
 801abf0:	4b75      	ldr	r3, [pc, #468]	; (801adc8 <pifMpu60x0_Init+0x1ec>)
 801abf2:	f107 0418 	add.w	r4, r7, #24
 801abf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801abf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif	
	uint8_t data;
	PifMpu60x0PwrMgmt1 pwr_mgmt_1;

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 801abfc:	68fb      	ldr	r3, [r7, #12]
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d005      	beq.n	801ac0e <pifMpu60x0_Init+0x32>
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	d002      	beq.n	801ac0e <pifMpu60x0_Init+0x32>
 801ac08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d104      	bne.n	801ac18 <pifMpu60x0_Init+0x3c>
		pif_error = E_INVALID_PARAM;
 801ac0e:	4b6f      	ldr	r3, [pc, #444]	; (801adcc <pifMpu60x0_Init+0x1f0>)
 801ac10:	2201      	movs	r2, #1
 801ac12:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 801ac14:	2300      	movs	r3, #0
 801ac16:	e0d3      	b.n	801adc0 <pifMpu60x0_Init+0x1e4>
	}

	memset(p_owner, 0, sizeof(PifMpu60x0));
 801ac18:	2210      	movs	r2, #16
 801ac1a:	2100      	movs	r1, #0
 801ac1c:	68f8      	ldr	r0, [r7, #12]
 801ac1e:	f009 f94d 	bl	8023ebc <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 801ac22:	6878      	ldr	r0, [r7, #4]
 801ac24:	f7f7 fe14 	bl	8012850 <pifI2cPort_AddDevice>
 801ac28:	4602      	mov	r2, r0
 801ac2a:	68fb      	ldr	r3, [r7, #12]
 801ac2c:	609a      	str	r2, [r3, #8]
    if (!p_owner->_p_i2c) return FALSE;
 801ac2e:	68fb      	ldr	r3, [r7, #12]
 801ac30:	689b      	ldr	r3, [r3, #8]
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	d101      	bne.n	801ac3a <pifMpu60x0_Init+0x5e>
 801ac36:	2300      	movs	r3, #0
 801ac38:	e0c2      	b.n	801adc0 <pifMpu60x0_Init+0x1e4>

    p_owner->_p_i2c->addr = addr;
 801ac3a:	68fb      	ldr	r3, [r7, #12]
 801ac3c:	689b      	ldr	r3, [r3, #8]
 801ac3e:	7a7a      	ldrb	r2, [r7, #9]
 801ac40:	701a      	strb	r2, [r3, #0]

	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, MPU60X0_REG_WHO_AM_I, &data)) goto fail;
 801ac42:	68fb      	ldr	r3, [r7, #12]
 801ac44:	689b      	ldr	r3, [r3, #8]
 801ac46:	f107 0217 	add.w	r2, r7, #23
 801ac4a:	2175      	movs	r1, #117	; 0x75
 801ac4c:	4618      	mov	r0, r3
 801ac4e:	f7f7 fee3 	bl	8012a18 <pifI2cDevice_ReadRegByte>
 801ac52:	4603      	mov	r3, r0
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	f000 80a4 	beq.w	801ada2 <pifMpu60x0_Init+0x1c6>
	if (data != addr) {
 801ac5a:	7dfb      	ldrb	r3, [r7, #23]
 801ac5c:	7a7a      	ldrb	r2, [r7, #9]
 801ac5e:	429a      	cmp	r2, r3
 801ac60:	d003      	beq.n	801ac6a <pifMpu60x0_Init+0x8e>
		pif_error = E_INVALID_ID;
 801ac62:	4b5a      	ldr	r3, [pc, #360]	; (801adcc <pifMpu60x0_Init+0x1f0>)
 801ac64:	2211      	movs	r2, #17
 801ac66:	701a      	strb	r2, [r3, #0]
		goto fail;
 801ac68:	e0a6      	b.n	801adb8 <pifMpu60x0_Init+0x1dc>
	}
#ifndef __PIF_NO_LOG__	
	if (data < 32) {
 801ac6a:	7dfb      	ldrb	r3, [r7, #23]
 801ac6c:	2b1f      	cmp	r3, #31
 801ac6e:	d809      	bhi.n	801ac84 <pifMpu60x0_Init+0xa8>
		pifLog_Printf(LT_INFO, "%s%Xh", ident, data >> 1);
 801ac70:	7dfb      	ldrb	r3, [r7, #23]
 801ac72:	085b      	lsrs	r3, r3, #1
 801ac74:	b2db      	uxtb	r3, r3
 801ac76:	f107 0218 	add.w	r2, r7, #24
 801ac7a:	4955      	ldr	r1, [pc, #340]	; (801add0 <pifMpu60x0_Init+0x1f4>)
 801ac7c:	2002      	movs	r0, #2
 801ac7e:	f7f8 ffbb 	bl	8013bf8 <pifLog_Printf>
 801ac82:	e008      	b.n	801ac96 <pifMpu60x0_Init+0xba>
	}
	else {
		pifLog_Printf(LT_INFO, "%s%c", ident, data >> 1);
 801ac84:	7dfb      	ldrb	r3, [r7, #23]
 801ac86:	085b      	lsrs	r3, r3, #1
 801ac88:	b2db      	uxtb	r3, r3
 801ac8a:	f107 0218 	add.w	r2, r7, #24
 801ac8e:	4951      	ldr	r1, [pc, #324]	; (801add4 <pifMpu60x0_Init+0x1f8>)
 801ac90:	2002      	movs	r0, #2
 801ac92:	f7f8 ffb1 	bl	8013bf8 <pifLog_Printf>
	}
#endif

   	pwr_mgmt_1.byte = 0;
 801ac96:	2300      	movs	r3, #0
 801ac98:	753b      	strb	r3, [r7, #20]
	pwr_mgmt_1.bit.device_reset = TRUE;
 801ac9a:	7d3b      	ldrb	r3, [r7, #20]
 801ac9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aca0:	753b      	strb	r3, [r7, #20]
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 801aca2:	68fb      	ldr	r3, [r7, #12]
 801aca4:	689b      	ldr	r3, [r3, #8]
 801aca6:	7d3a      	ldrb	r2, [r7, #20]
 801aca8:	216b      	movs	r1, #107	; 0x6b
 801acaa:	4618      	mov	r0, r3
 801acac:	f7f7 ffe2 	bl	8012c74 <pifI2cDevice_WriteRegByte>
 801acb0:	4603      	mov	r3, r0
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	d077      	beq.n	801ada6 <pifMpu60x0_Init+0x1ca>
	pifTaskManager_YieldMs(100);
 801acb6:	2064      	movs	r0, #100	; 0x64
 801acb8:	f7fa fbe8 	bl	801548c <pifTaskManager_YieldMs>

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, MPU60X0_GYRO_CONFIG_FS_SEL, &data)) goto fail;
 801acbc:	68fb      	ldr	r3, [r7, #12]
 801acbe:	6898      	ldr	r0, [r3, #8]
 801acc0:	f107 0317 	add.w	r3, r7, #23
 801acc4:	f240 3202 	movw	r2, #770	; 0x302
 801acc8:	211b      	movs	r1, #27
 801acca:	f7f7 fef2 	bl	8012ab2 <pifI2cDevice_ReadRegBit8>
 801acce:	4603      	mov	r3, r0
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d06a      	beq.n	801adaa <pifMpu60x0_Init+0x1ce>
    if (!_changeFsSel(p_imu_sensor, data)) goto fail;
 801acd4:	7dfb      	ldrb	r3, [r7, #23]
 801acd6:	4619      	mov	r1, r3
 801acd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801acda:	f7ff ff3d 	bl	801ab58 <_changeFsSel>
 801acde:	4603      	mov	r3, r0
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d064      	beq.n	801adae <pifMpu60x0_Init+0x1d2>

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, MPU60X0_ACCEL_CONFIG_AFS_SEL, &data)) goto fail;
 801ace4:	68fb      	ldr	r3, [r7, #12]
 801ace6:	6898      	ldr	r0, [r3, #8]
 801ace8:	f107 0317 	add.w	r3, r7, #23
 801acec:	f240 3202 	movw	r2, #770	; 0x302
 801acf0:	211c      	movs	r1, #28
 801acf2:	f7f7 fede 	bl	8012ab2 <pifI2cDevice_ReadRegBit8>
 801acf6:	4603      	mov	r3, r0
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	d05a      	beq.n	801adb2 <pifMpu60x0_Init+0x1d6>
    if (!_changeAfsSel(p_imu_sensor, data)) goto fail;
 801acfc:	7dfb      	ldrb	r3, [r7, #23]
 801acfe:	4619      	mov	r1, r3
 801ad00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801ad02:	f7ff ff51 	bl	801aba8 <_changeAfsSel>
 801ad06:	4603      	mov	r3, r0
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d054      	beq.n	801adb6 <pifMpu60x0_Init+0x1da>

	if (id == PIF_ID_AUTO) id = pif_id++;
 801ad0c:	897b      	ldrh	r3, [r7, #10]
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	d106      	bne.n	801ad20 <pifMpu60x0_Init+0x144>
 801ad12:	4b31      	ldr	r3, [pc, #196]	; (801add8 <pifMpu60x0_Init+0x1fc>)
 801ad14:	881b      	ldrh	r3, [r3, #0]
 801ad16:	1c5a      	adds	r2, r3, #1
 801ad18:	b291      	uxth	r1, r2
 801ad1a:	4a2f      	ldr	r2, [pc, #188]	; (801add8 <pifMpu60x0_Init+0x1fc>)
 801ad1c:	8011      	strh	r1, [r2, #0]
 801ad1e:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 801ad20:	68fb      	ldr	r3, [r7, #12]
 801ad22:	897a      	ldrh	r2, [r7, #10]
 801ad24:	809a      	strh	r2, [r3, #4]
	p_owner->temp_scale = 1;
 801ad26:	68fb      	ldr	r3, [r7, #12]
 801ad28:	2201      	movs	r2, #1
 801ad2a:	709a      	strb	r2, [r3, #2]
	p_owner->__p_imu_sensor = p_imu_sensor;
 801ad2c:	68fb      	ldr	r3, [r7, #12]
 801ad2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ad30:	60da      	str	r2, [r3, #12]

	p_imu_sensor->_measure |= IMU_MEASURE_GYROSCOPE | IMU_MEASURE_ACCELERO;
 801ad32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad34:	781b      	ldrb	r3, [r3, #0]
 801ad36:	f043 0303 	orr.w	r3, r3, #3
 801ad3a:	b2da      	uxtb	r2, r3
 801ad3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad3e:	701a      	strb	r2, [r3, #0]

	p_imu_sensor->__gyro_info.align = IMUS_ALIGN_CW0_DEG;
 801ad40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad42:	2201      	movs	r2, #1
 801ad44:	751a      	strb	r2, [r3, #20]
	p_imu_sensor->__gyro_info.read = (PifImuSensorRead)pifMpu60x0_ReadGyro;
 801ad46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad48:	4a24      	ldr	r2, [pc, #144]	; (801addc <pifMpu60x0_Init+0x200>)
 801ad4a:	619a      	str	r2, [r3, #24]
	p_imu_sensor->__gyro_info.p_issuer = p_owner;
 801ad4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad4e:	68fa      	ldr	r2, [r7, #12]
 801ad50:	61da      	str	r2, [r3, #28]

	p_imu_sensor->__accel_info.align = IMUS_ALIGN_CW0_DEG;
 801ad52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad54:	2201      	movs	r2, #1
 801ad56:	f883 2020 	strb.w	r2, [r3, #32]
	p_imu_sensor->__accel_info.read = (PifImuSensorRead)pifMpu60x0_ReadAccel;
 801ad5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad5c:	4a20      	ldr	r2, [pc, #128]	; (801ade0 <pifMpu60x0_Init+0x204>)
 801ad5e:	625a      	str	r2, [r3, #36]	; 0x24
	p_imu_sensor->__accel_info.p_issuer = p_owner;
 801ad60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad62:	68fa      	ldr	r2, [r7, #12]
 801ad64:	629a      	str	r2, [r3, #40]	; 0x28

    // Reset calibrate values
    p_imu_sensor->__delta_gyro[AXIS_X] = 0;
 801ad66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad68:	2200      	movs	r2, #0
 801ad6a:	871a      	strh	r2, [r3, #56]	; 0x38
    p_imu_sensor->__delta_gyro[AXIS_Y] = 0;
 801ad6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad6e:	2200      	movs	r2, #0
 801ad70:	875a      	strh	r2, [r3, #58]	; 0x3a
    p_imu_sensor->__delta_gyro[AXIS_Z] = 0;
 801ad72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad74:	2200      	movs	r2, #0
 801ad76:	879a      	strh	r2, [r3, #60]	; 0x3c
    p_imu_sensor->__use_calibrate = FALSE;
 801ad78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad7a:	2200      	movs	r2, #0
 801ad7c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

    // Reset threshold values
    p_imu_sensor->__threshold_gyro[AXIS_X] = 0;
 801ad80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad82:	2200      	movs	r2, #0
 801ad84:	87da      	strh	r2, [r3, #62]	; 0x3e
    p_imu_sensor->__threshold_gyro[AXIS_Y] = 0;
 801ad86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad88:	2200      	movs	r2, #0
 801ad8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    p_imu_sensor->__threshold_gyro[AXIS_Z] = 0;
 801ad8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad90:	2200      	movs	r2, #0
 801ad92:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    p_imu_sensor->__actual_threshold = 0;
 801ad96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad98:	f04f 0200 	mov.w	r2, #0
 801ad9c:	64da      	str	r2, [r3, #76]	; 0x4c
    return TRUE;
 801ad9e:	2301      	movs	r3, #1
 801ada0:	e00e      	b.n	801adc0 <pifMpu60x0_Init+0x1e4>
	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, MPU60X0_REG_WHO_AM_I, &data)) goto fail;
 801ada2:	bf00      	nop
 801ada4:	e008      	b.n	801adb8 <pifMpu60x0_Init+0x1dc>
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 801ada6:	bf00      	nop
 801ada8:	e006      	b.n	801adb8 <pifMpu60x0_Init+0x1dc>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, MPU60X0_GYRO_CONFIG_FS_SEL, &data)) goto fail;
 801adaa:	bf00      	nop
 801adac:	e004      	b.n	801adb8 <pifMpu60x0_Init+0x1dc>
    if (!_changeFsSel(p_imu_sensor, data)) goto fail;
 801adae:	bf00      	nop
 801adb0:	e002      	b.n	801adb8 <pifMpu60x0_Init+0x1dc>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, MPU60X0_ACCEL_CONFIG_AFS_SEL, &data)) goto fail;
 801adb2:	bf00      	nop
 801adb4:	e000      	b.n	801adb8 <pifMpu60x0_Init+0x1dc>
    if (!_changeAfsSel(p_imu_sensor, data)) goto fail;
 801adb6:	bf00      	nop

fail:
	pifMpu60x0_Clear(p_owner);
 801adb8:	68f8      	ldr	r0, [r7, #12]
 801adba:	f000 f813 	bl	801ade4 <pifMpu60x0_Clear>
	return FALSE;
 801adbe:	2300      	movs	r3, #0
}
 801adc0:	4618      	mov	r0, r3
 801adc2:	372c      	adds	r7, #44	; 0x2c
 801adc4:	46bd      	mov	sp, r7
 801adc6:	bd90      	pop	{r4, r7, pc}
 801adc8:	08028cd0 	.word	0x08028cd0
 801adcc:	20001de0 	.word	0x20001de0
 801add0:	08028cc0 	.word	0x08028cc0
 801add4:	08028cc8 	.word	0x08028cc8
 801add8:	20000128 	.word	0x20000128
 801addc:	0801ae95 	.word	0x0801ae95
 801ade0:	0801af5b 	.word	0x0801af5b

0801ade4 <pifMpu60x0_Clear>:

void pifMpu60x0_Clear(PifMpu60x0* p_owner)
{
 801ade4:	b580      	push	{r7, lr}
 801ade6:	b082      	sub	sp, #8
 801ade8:	af00      	add	r7, sp, #0
 801adea:	6078      	str	r0, [r7, #4]
    if (p_owner->_p_i2c) {
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	689b      	ldr	r3, [r3, #8]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d00b      	beq.n	801ae0c <pifMpu60x0_Clear+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	689b      	ldr	r3, [r3, #8]
 801adf8:	685a      	ldr	r2, [r3, #4]
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	689b      	ldr	r3, [r3, #8]
 801adfe:	4619      	mov	r1, r3
 801ae00:	4610      	mov	r0, r2
 801ae02:	f7f7 fd49 	bl	8012898 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	2200      	movs	r2, #0
 801ae0a:	609a      	str	r2, [r3, #8]
    }
}
 801ae0c:	bf00      	nop
 801ae0e:	3708      	adds	r7, #8
 801ae10:	46bd      	mov	sp, r7
 801ae12:	bd80      	pop	{r7, pc}

0801ae14 <pifMpu60x0_SetGyroConfig>:

BOOL pifMpu60x0_SetGyroConfig(PifMpu60x0* p_owner, PifMpu60x0GyroConfig gyro_config)
{
 801ae14:	b580      	push	{r7, lr}
 801ae16:	b082      	sub	sp, #8
 801ae18:	af00      	add	r7, sp, #0
 801ae1a:	6078      	str	r0, [r7, #4]
 801ae1c:	7039      	strb	r1, [r7, #0]
    if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, gyro_config.byte)) return FALSE;
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	689b      	ldr	r3, [r3, #8]
 801ae22:	783a      	ldrb	r2, [r7, #0]
 801ae24:	211b      	movs	r1, #27
 801ae26:	4618      	mov	r0, r3
 801ae28:	f7f7 ff24 	bl	8012c74 <pifI2cDevice_WriteRegByte>
 801ae2c:	4603      	mov	r3, r0
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d101      	bne.n	801ae36 <pifMpu60x0_SetGyroConfig+0x22>
 801ae32:	2300      	movs	r3, #0
 801ae34:	e00a      	b.n	801ae4c <pifMpu60x0_SetGyroConfig+0x38>
    _changeFsSel(p_owner->__p_imu_sensor, gyro_config.bit.fs_sel);
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	68da      	ldr	r2, [r3, #12]
 801ae3a:	783b      	ldrb	r3, [r7, #0]
 801ae3c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 801ae40:	b2db      	uxtb	r3, r3
 801ae42:	4619      	mov	r1, r3
 801ae44:	4610      	mov	r0, r2
 801ae46:	f7ff fe87 	bl	801ab58 <_changeFsSel>
	return TRUE;
 801ae4a:	2301      	movs	r3, #1
}
 801ae4c:	4618      	mov	r0, r3
 801ae4e:	3708      	adds	r7, #8
 801ae50:	46bd      	mov	sp, r7
 801ae52:	bd80      	pop	{r7, pc}

0801ae54 <pifMpu60x0_SetAccelConfig>:
    _changeFsSel(p_owner->__p_imu_sensor, fs_sel);
	return TRUE;
}

BOOL pifMpu60x0_SetAccelConfig(PifMpu60x0* p_owner, PifMpu60x0AccelConfig accel_config)
{
 801ae54:	b580      	push	{r7, lr}
 801ae56:	b082      	sub	sp, #8
 801ae58:	af00      	add	r7, sp, #0
 801ae5a:	6078      	str	r0, [r7, #4]
 801ae5c:	7039      	strb	r1, [r7, #0]
    if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, accel_config.byte)) return FALSE;
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	689b      	ldr	r3, [r3, #8]
 801ae62:	783a      	ldrb	r2, [r7, #0]
 801ae64:	211c      	movs	r1, #28
 801ae66:	4618      	mov	r0, r3
 801ae68:	f7f7 ff04 	bl	8012c74 <pifI2cDevice_WriteRegByte>
 801ae6c:	4603      	mov	r3, r0
 801ae6e:	2b00      	cmp	r3, #0
 801ae70:	d101      	bne.n	801ae76 <pifMpu60x0_SetAccelConfig+0x22>
 801ae72:	2300      	movs	r3, #0
 801ae74:	e00a      	b.n	801ae8c <pifMpu60x0_SetAccelConfig+0x38>
    _changeAfsSel(p_owner->__p_imu_sensor, accel_config.bit.afs_sel);
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	68da      	ldr	r2, [r3, #12]
 801ae7a:	783b      	ldrb	r3, [r7, #0]
 801ae7c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 801ae80:	b2db      	uxtb	r3, r3
 801ae82:	4619      	mov	r1, r3
 801ae84:	4610      	mov	r0, r2
 801ae86:	f7ff fe8f 	bl	801aba8 <_changeAfsSel>
	return TRUE;
 801ae8a:	2301      	movs	r3, #1
}
 801ae8c:	4618      	mov	r0, r3
 801ae8e:	3708      	adds	r7, #8
 801ae90:	46bd      	mov	sp, r7
 801ae92:	bd80      	pop	{r7, pc}

0801ae94 <pifMpu60x0_ReadGyro>:
    _changeAfsSel(p_owner->__p_imu_sensor, afs_sel);
	return TRUE;
}

BOOL pifMpu60x0_ReadGyro(PifMpu60x0* p_owner, int16_t* p_gyro)
{
 801ae94:	b580      	push	{r7, lr}
 801ae96:	b084      	sub	sp, #16
 801ae98:	af00      	add	r7, sp, #0
 801ae9a:	6078      	str	r0, [r7, #4]
 801ae9c:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MPU60X0_REG_GYRO_XOUT_H, data, 6)) return FALSE;
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	6898      	ldr	r0, [r3, #8]
 801aea2:	f107 0208 	add.w	r2, r7, #8
 801aea6:	2306      	movs	r3, #6
 801aea8:	2143      	movs	r1, #67	; 0x43
 801aeaa:	f7f7 fded 	bl	8012a88 <pifI2cDevice_ReadRegBytes>
 801aeae:	4603      	mov	r3, r0
 801aeb0:	2b00      	cmp	r3, #0
 801aeb2:	d101      	bne.n	801aeb8 <pifMpu60x0_ReadGyro+0x24>
 801aeb4:	2300      	movs	r3, #0
 801aeb6:	e04c      	b.n	801af52 <pifMpu60x0_ReadGyro+0xbe>

	p_gyro[AXIS_X] = (data[0] << 8) + data[1];
 801aeb8:	7a3b      	ldrb	r3, [r7, #8]
 801aeba:	b29b      	uxth	r3, r3
 801aebc:	021b      	lsls	r3, r3, #8
 801aebe:	b29a      	uxth	r2, r3
 801aec0:	7a7b      	ldrb	r3, [r7, #9]
 801aec2:	b29b      	uxth	r3, r3
 801aec4:	4413      	add	r3, r2
 801aec6:	b29b      	uxth	r3, r3
 801aec8:	b21a      	sxth	r2, r3
 801aeca:	683b      	ldr	r3, [r7, #0]
 801aecc:	801a      	strh	r2, [r3, #0]
	p_gyro[AXIS_Y] = (data[2] << 8) + data[3];
 801aece:	7abb      	ldrb	r3, [r7, #10]
 801aed0:	b29b      	uxth	r3, r3
 801aed2:	021b      	lsls	r3, r3, #8
 801aed4:	b29a      	uxth	r2, r3
 801aed6:	7afb      	ldrb	r3, [r7, #11]
 801aed8:	b29b      	uxth	r3, r3
 801aeda:	4413      	add	r3, r2
 801aedc:	b29a      	uxth	r2, r3
 801aede:	683b      	ldr	r3, [r7, #0]
 801aee0:	3302      	adds	r3, #2
 801aee2:	b212      	sxth	r2, r2
 801aee4:	801a      	strh	r2, [r3, #0]
	p_gyro[AXIS_Z] = (data[4] << 8) + data[5];
 801aee6:	7b3b      	ldrb	r3, [r7, #12]
 801aee8:	b29b      	uxth	r3, r3
 801aeea:	021b      	lsls	r3, r3, #8
 801aeec:	b29a      	uxth	r2, r3
 801aeee:	7b7b      	ldrb	r3, [r7, #13]
 801aef0:	b29b      	uxth	r3, r3
 801aef2:	4413      	add	r3, r2
 801aef4:	b29a      	uxth	r2, r3
 801aef6:	683b      	ldr	r3, [r7, #0]
 801aef8:	3304      	adds	r3, #4
 801aefa:	b212      	sxth	r2, r2
 801aefc:	801a      	strh	r2, [r3, #0]
	if (p_owner->gyro_scale > 0) {
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	781b      	ldrb	r3, [r3, #0]
 801af02:	2b00      	cmp	r3, #0
 801af04:	d024      	beq.n	801af50 <pifMpu60x0_ReadGyro+0xbc>
		p_gyro[AXIS_X] /= p_owner->gyro_scale;
 801af06:	683b      	ldr	r3, [r7, #0]
 801af08:	f9b3 3000 	ldrsh.w	r3, [r3]
 801af0c:	461a      	mov	r2, r3
 801af0e:	687b      	ldr	r3, [r7, #4]
 801af10:	781b      	ldrb	r3, [r3, #0]
 801af12:	fb92 f3f3 	sdiv	r3, r2, r3
 801af16:	b21a      	sxth	r2, r3
 801af18:	683b      	ldr	r3, [r7, #0]
 801af1a:	801a      	strh	r2, [r3, #0]
		p_gyro[AXIS_Y] /= p_owner->gyro_scale;
 801af1c:	683b      	ldr	r3, [r7, #0]
 801af1e:	3302      	adds	r3, #2
 801af20:	f9b3 3000 	ldrsh.w	r3, [r3]
 801af24:	461a      	mov	r2, r3
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	781b      	ldrb	r3, [r3, #0]
 801af2a:	fb92 f2f3 	sdiv	r2, r2, r3
 801af2e:	683b      	ldr	r3, [r7, #0]
 801af30:	3302      	adds	r3, #2
 801af32:	b212      	sxth	r2, r2
 801af34:	801a      	strh	r2, [r3, #0]
		p_gyro[AXIS_Z] /= p_owner->gyro_scale;
 801af36:	683b      	ldr	r3, [r7, #0]
 801af38:	3304      	adds	r3, #4
 801af3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801af3e:	461a      	mov	r2, r3
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	781b      	ldrb	r3, [r3, #0]
 801af44:	fb92 f2f3 	sdiv	r2, r2, r3
 801af48:	683b      	ldr	r3, [r7, #0]
 801af4a:	3304      	adds	r3, #4
 801af4c:	b212      	sxth	r2, r2
 801af4e:	801a      	strh	r2, [r3, #0]
	}
	return TRUE;
 801af50:	2301      	movs	r3, #1
}
 801af52:	4618      	mov	r0, r3
 801af54:	3710      	adds	r7, #16
 801af56:	46bd      	mov	sp, r7
 801af58:	bd80      	pop	{r7, pc}

0801af5a <pifMpu60x0_ReadAccel>:

BOOL pifMpu60x0_ReadAccel(PifMpu60x0* p_owner, int16_t* p_accel)
{
 801af5a:	b580      	push	{r7, lr}
 801af5c:	b084      	sub	sp, #16
 801af5e:	af00      	add	r7, sp, #0
 801af60:	6078      	str	r0, [r7, #4]
 801af62:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MPU60X0_REG_ACCEL_XOUT_H, data, 6)) return FALSE;
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	6898      	ldr	r0, [r3, #8]
 801af68:	f107 0208 	add.w	r2, r7, #8
 801af6c:	2306      	movs	r3, #6
 801af6e:	213b      	movs	r1, #59	; 0x3b
 801af70:	f7f7 fd8a 	bl	8012a88 <pifI2cDevice_ReadRegBytes>
 801af74:	4603      	mov	r3, r0
 801af76:	2b00      	cmp	r3, #0
 801af78:	d101      	bne.n	801af7e <pifMpu60x0_ReadAccel+0x24>
 801af7a:	2300      	movs	r3, #0
 801af7c:	e04c      	b.n	801b018 <pifMpu60x0_ReadAccel+0xbe>

	p_accel[AXIS_X] = (data[0] << 8) + data[1];
 801af7e:	7a3b      	ldrb	r3, [r7, #8]
 801af80:	b29b      	uxth	r3, r3
 801af82:	021b      	lsls	r3, r3, #8
 801af84:	b29a      	uxth	r2, r3
 801af86:	7a7b      	ldrb	r3, [r7, #9]
 801af88:	b29b      	uxth	r3, r3
 801af8a:	4413      	add	r3, r2
 801af8c:	b29b      	uxth	r3, r3
 801af8e:	b21a      	sxth	r2, r3
 801af90:	683b      	ldr	r3, [r7, #0]
 801af92:	801a      	strh	r2, [r3, #0]
	p_accel[AXIS_Y] = (data[2] << 8) + data[3];
 801af94:	7abb      	ldrb	r3, [r7, #10]
 801af96:	b29b      	uxth	r3, r3
 801af98:	021b      	lsls	r3, r3, #8
 801af9a:	b29a      	uxth	r2, r3
 801af9c:	7afb      	ldrb	r3, [r7, #11]
 801af9e:	b29b      	uxth	r3, r3
 801afa0:	4413      	add	r3, r2
 801afa2:	b29a      	uxth	r2, r3
 801afa4:	683b      	ldr	r3, [r7, #0]
 801afa6:	3302      	adds	r3, #2
 801afa8:	b212      	sxth	r2, r2
 801afaa:	801a      	strh	r2, [r3, #0]
	p_accel[AXIS_Z] = (data[4] << 8) + data[5];
 801afac:	7b3b      	ldrb	r3, [r7, #12]
 801afae:	b29b      	uxth	r3, r3
 801afb0:	021b      	lsls	r3, r3, #8
 801afb2:	b29a      	uxth	r2, r3
 801afb4:	7b7b      	ldrb	r3, [r7, #13]
 801afb6:	b29b      	uxth	r3, r3
 801afb8:	4413      	add	r3, r2
 801afba:	b29a      	uxth	r2, r3
 801afbc:	683b      	ldr	r3, [r7, #0]
 801afbe:	3304      	adds	r3, #4
 801afc0:	b212      	sxth	r2, r2
 801afc2:	801a      	strh	r2, [r3, #0]
	if (p_owner->accel_scale > 0) {
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	785b      	ldrb	r3, [r3, #1]
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d024      	beq.n	801b016 <pifMpu60x0_ReadAccel+0xbc>
		p_accel[AXIS_X] /= p_owner->accel_scale;
 801afcc:	683b      	ldr	r3, [r7, #0]
 801afce:	f9b3 3000 	ldrsh.w	r3, [r3]
 801afd2:	461a      	mov	r2, r3
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	785b      	ldrb	r3, [r3, #1]
 801afd8:	fb92 f3f3 	sdiv	r3, r2, r3
 801afdc:	b21a      	sxth	r2, r3
 801afde:	683b      	ldr	r3, [r7, #0]
 801afe0:	801a      	strh	r2, [r3, #0]
		p_accel[AXIS_Y] /= p_owner->accel_scale;
 801afe2:	683b      	ldr	r3, [r7, #0]
 801afe4:	3302      	adds	r3, #2
 801afe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801afea:	461a      	mov	r2, r3
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	785b      	ldrb	r3, [r3, #1]
 801aff0:	fb92 f2f3 	sdiv	r2, r2, r3
 801aff4:	683b      	ldr	r3, [r7, #0]
 801aff6:	3302      	adds	r3, #2
 801aff8:	b212      	sxth	r2, r2
 801affa:	801a      	strh	r2, [r3, #0]
		p_accel[AXIS_Z] /= p_owner->accel_scale;
 801affc:	683b      	ldr	r3, [r7, #0]
 801affe:	3304      	adds	r3, #4
 801b000:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b004:	461a      	mov	r2, r3
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	785b      	ldrb	r3, [r3, #1]
 801b00a:	fb92 f2f3 	sdiv	r2, r2, r3
 801b00e:	683b      	ldr	r3, [r7, #0]
 801b010:	3304      	adds	r3, #4
 801b012:	b212      	sxth	r2, r2
 801b014:	801a      	strh	r2, [r3, #0]
	}
	return TRUE;
 801b016:	2301      	movs	r3, #1
}
 801b018:	4618      	mov	r0, r3
 801b01a:	3710      	adds	r7, #16
 801b01c:	46bd      	mov	sp, r7
 801b01e:	bd80      	pop	{r7, pc}

0801b020 <_checkPromCrc>:

#include <math.h>


static BOOL _checkPromCrc(PifMs5611* p_owner)
{
 801b020:	b480      	push	{r7}
 801b022:	b087      	sub	sp, #28
 801b024:	af00      	add	r7, sp, #0
 801b026:	6078      	str	r0, [r7, #4]
    int32_t i, j;
    uint32_t res = 0;
 801b028:	2300      	movs	r3, #0
 801b02a:	60fb      	str	r3, [r7, #12]
    uint8_t zero = 1;
 801b02c:	2301      	movs	r3, #1
 801b02e:	72fb      	strb	r3, [r7, #11]
    uint8_t crc = p_owner->_prom[7] & 0xF;
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	8adb      	ldrh	r3, [r3, #22]
 801b034:	b2db      	uxtb	r3, r3
 801b036:	f003 030f 	and.w	r3, r3, #15
 801b03a:	72bb      	strb	r3, [r7, #10]
    p_owner->_prom[7] &= 0xFF00;
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	8adb      	ldrh	r3, [r3, #22]
 801b040:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801b044:	b29a      	uxth	r2, r3
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	82da      	strh	r2, [r3, #22]

    for (i = 0; i < 8; i++) {
 801b04a:	2300      	movs	r3, #0
 801b04c:	617b      	str	r3, [r7, #20]
 801b04e:	e00b      	b.n	801b068 <_checkPromCrc+0x48>
        if (p_owner->_prom[i] != 0)
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	697a      	ldr	r2, [r7, #20]
 801b054:	3204      	adds	r2, #4
 801b056:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d001      	beq.n	801b062 <_checkPromCrc+0x42>
            zero = 0;
 801b05e:	2300      	movs	r3, #0
 801b060:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < 8; i++) {
 801b062:	697b      	ldr	r3, [r7, #20]
 801b064:	3301      	adds	r3, #1
 801b066:	617b      	str	r3, [r7, #20]
 801b068:	697b      	ldr	r3, [r7, #20]
 801b06a:	2b07      	cmp	r3, #7
 801b06c:	ddf0      	ble.n	801b050 <_checkPromCrc+0x30>
    }
    if (zero)
 801b06e:	7afb      	ldrb	r3, [r7, #11]
 801b070:	2b00      	cmp	r3, #0
 801b072:	d001      	beq.n	801b078 <_checkPromCrc+0x58>
        return FALSE;
 801b074:	2300      	movs	r3, #0
 801b076:	e04b      	b.n	801b110 <_checkPromCrc+0xf0>

    for (i = 0; i < 16; i++) {
 801b078:	2300      	movs	r3, #0
 801b07a:	617b      	str	r3, [r7, #20]
 801b07c:	e033      	b.n	801b0e6 <_checkPromCrc+0xc6>
        if (i & 1)
 801b07e:	697b      	ldr	r3, [r7, #20]
 801b080:	f003 0301 	and.w	r3, r3, #1
 801b084:	2b00      	cmp	r3, #0
 801b086:	d00a      	beq.n	801b09e <_checkPromCrc+0x7e>
            res ^= ((p_owner->_prom[i >> 1]) & 0x00FF);
 801b088:	697b      	ldr	r3, [r7, #20]
 801b08a:	105a      	asrs	r2, r3, #1
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	3204      	adds	r2, #4
 801b090:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801b094:	b2db      	uxtb	r3, r3
 801b096:	68fa      	ldr	r2, [r7, #12]
 801b098:	4053      	eors	r3, r2
 801b09a:	60fb      	str	r3, [r7, #12]
 801b09c:	e00b      	b.n	801b0b6 <_checkPromCrc+0x96>
        else
            res ^= (p_owner->_prom[i >> 1] >> 8);
 801b09e:	697b      	ldr	r3, [r7, #20]
 801b0a0:	105a      	asrs	r2, r3, #1
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	3204      	adds	r2, #4
 801b0a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801b0aa:	0a1b      	lsrs	r3, r3, #8
 801b0ac:	b29b      	uxth	r3, r3
 801b0ae:	461a      	mov	r2, r3
 801b0b0:	68fb      	ldr	r3, [r7, #12]
 801b0b2:	4053      	eors	r3, r2
 801b0b4:	60fb      	str	r3, [r7, #12]
        for (j = 8; j > 0; j--) {
 801b0b6:	2308      	movs	r3, #8
 801b0b8:	613b      	str	r3, [r7, #16]
 801b0ba:	e00e      	b.n	801b0da <_checkPromCrc+0xba>
            if (res & 0x8000)
 801b0bc:	68fb      	ldr	r3, [r7, #12]
 801b0be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d003      	beq.n	801b0ce <_checkPromCrc+0xae>
                res ^= 0x1800;
 801b0c6:	68fb      	ldr	r3, [r7, #12]
 801b0c8:	f483 53c0 	eor.w	r3, r3, #6144	; 0x1800
 801b0cc:	60fb      	str	r3, [r7, #12]
            res <<= 1;
 801b0ce:	68fb      	ldr	r3, [r7, #12]
 801b0d0:	005b      	lsls	r3, r3, #1
 801b0d2:	60fb      	str	r3, [r7, #12]
        for (j = 8; j > 0; j--) {
 801b0d4:	693b      	ldr	r3, [r7, #16]
 801b0d6:	3b01      	subs	r3, #1
 801b0d8:	613b      	str	r3, [r7, #16]
 801b0da:	693b      	ldr	r3, [r7, #16]
 801b0dc:	2b00      	cmp	r3, #0
 801b0de:	dced      	bgt.n	801b0bc <_checkPromCrc+0x9c>
    for (i = 0; i < 16; i++) {
 801b0e0:	697b      	ldr	r3, [r7, #20]
 801b0e2:	3301      	adds	r3, #1
 801b0e4:	617b      	str	r3, [r7, #20]
 801b0e6:	697b      	ldr	r3, [r7, #20]
 801b0e8:	2b0f      	cmp	r3, #15
 801b0ea:	ddc8      	ble.n	801b07e <_checkPromCrc+0x5e>
        }
    }
    p_owner->_prom[7] |= crc;
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	8ada      	ldrh	r2, [r3, #22]
 801b0f0:	7abb      	ldrb	r3, [r7, #10]
 801b0f2:	b29b      	uxth	r3, r3
 801b0f4:	4313      	orrs	r3, r2
 801b0f6:	b29a      	uxth	r2, r3
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	82da      	strh	r2, [r3, #22]
    if (crc == ((res >> 12) & 0xF))
 801b0fc:	7aba      	ldrb	r2, [r7, #10]
 801b0fe:	68fb      	ldr	r3, [r7, #12]
 801b100:	0b1b      	lsrs	r3, r3, #12
 801b102:	f003 030f 	and.w	r3, r3, #15
 801b106:	429a      	cmp	r2, r3
 801b108:	d101      	bne.n	801b10e <_checkPromCrc+0xee>
        return TRUE;
 801b10a:	2301      	movs	r3, #1
 801b10c:	e000      	b.n	801b110 <_checkPromCrc+0xf0>

    return FALSE;
 801b10e:	2300      	movs	r3, #0
}
 801b110:	4618      	mov	r0, r3
 801b112:	371c      	adds	r7, #28
 801b114:	46bd      	mov	sp, r7
 801b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b11a:	4770      	bx	lr

0801b11c <_calcurateBarometric>:

static void _calcurateBarometric(PifMs5611* p_owner, float* p_pressure, float* p_temperature)
{
 801b11c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b120:	b0d2      	sub	sp, #328	; 0x148
 801b122:	af00      	add	r7, sp, #0
 801b124:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 801b128:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 801b12c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
	int32_t dT;
	int64_t temp;
	int64_t off, sens;
	int64_t delt;

	dT = (int64_t)p_owner->__D2 - ((int64_t)p_owner->_prom[5] * 256);
 801b130:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801b136:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b13a:	8a5b      	ldrh	r3, [r3, #18]
 801b13c:	021b      	lsls	r3, r3, #8
 801b13e:	1ad3      	subs	r3, r2, r3
 801b140:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	temp = 2000 + ((dT * (int64_t)p_owner->_prom[6]) >> 23);
 801b144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801b148:	17da      	asrs	r2, r3, #31
 801b14a:	469a      	mov	sl, r3
 801b14c:	4693      	mov	fp, r2
 801b14e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b152:	8a9b      	ldrh	r3, [r3, #20]
 801b154:	b29b      	uxth	r3, r3
 801b156:	2200      	movs	r2, #0
 801b158:	4698      	mov	r8, r3
 801b15a:	4691      	mov	r9, r2
 801b15c:	fb08 f20b 	mul.w	r2, r8, fp
 801b160:	fb0a f309 	mul.w	r3, sl, r9
 801b164:	4413      	add	r3, r2
 801b166:	fbaa 4508 	umull	r4, r5, sl, r8
 801b16a:	442b      	add	r3, r5
 801b16c:	461d      	mov	r5, r3
 801b16e:	f04f 0200 	mov.w	r2, #0
 801b172:	f04f 0300 	mov.w	r3, #0
 801b176:	0de2      	lsrs	r2, r4, #23
 801b178:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 801b17c:	15eb      	asrs	r3, r5, #23
 801b17e:	f512 61fa 	adds.w	r1, r2, #2000	; 0x7d0
 801b182:	6739      	str	r1, [r7, #112]	; 0x70
 801b184:	f143 0300 	adc.w	r3, r3, #0
 801b188:	677b      	str	r3, [r7, #116]	; 0x74
 801b18a:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 801b18e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140

	off = ((int64_t)p_owner->_prom[2] << 16) + (((int64_t)p_owner->_prom[4] * dT) >> 7);
 801b192:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b196:	899b      	ldrh	r3, [r3, #12]
 801b198:	b29b      	uxth	r3, r3
 801b19a:	2200      	movs	r2, #0
 801b19c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801b1a0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801b1a4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801b1a8:	460b      	mov	r3, r1
 801b1aa:	0c1b      	lsrs	r3, r3, #16
 801b1ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801b1b0:	460b      	mov	r3, r1
 801b1b2:	041b      	lsls	r3, r3, #16
 801b1b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801b1b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b1bc:	8a1b      	ldrh	r3, [r3, #16]
 801b1be:	b29b      	uxth	r3, r3
 801b1c0:	2200      	movs	r2, #0
 801b1c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801b1c6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 801b1ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801b1ce:	17da      	asrs	r2, r3, #31
 801b1d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801b1d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801b1d8:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 801b1dc:	462b      	mov	r3, r5
 801b1de:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 801b1e2:	4642      	mov	r2, r8
 801b1e4:	fb02 f203 	mul.w	r2, r2, r3
 801b1e8:	464b      	mov	r3, r9
 801b1ea:	4621      	mov	r1, r4
 801b1ec:	fb01 f303 	mul.w	r3, r1, r3
 801b1f0:	4413      	add	r3, r2
 801b1f2:	4622      	mov	r2, r4
 801b1f4:	4641      	mov	r1, r8
 801b1f6:	fba2 1201 	umull	r1, r2, r2, r1
 801b1fa:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 801b1fe:	460a      	mov	r2, r1
 801b200:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 801b204:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b208:	4413      	add	r3, r2
 801b20a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b20e:	f04f 0200 	mov.w	r2, #0
 801b212:	f04f 0300 	mov.w	r3, #0
 801b216:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 801b21a:	4621      	mov	r1, r4
 801b21c:	09ca      	lsrs	r2, r1, #7
 801b21e:	4629      	mov	r1, r5
 801b220:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 801b224:	4629      	mov	r1, r5
 801b226:	11cb      	asrs	r3, r1, #7
 801b228:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 801b22c:	4621      	mov	r1, r4
 801b22e:	1889      	adds	r1, r1, r2
 801b230:	66b9      	str	r1, [r7, #104]	; 0x68
 801b232:	4629      	mov	r1, r5
 801b234:	eb43 0101 	adc.w	r1, r3, r1
 801b238:	66f9      	str	r1, [r7, #108]	; 0x6c
 801b23a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 801b23e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
	sens = ((int64_t)p_owner->_prom[1] << 15) + (((int64_t)p_owner->_prom[3] * dT) >> 8);
 801b242:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b246:	895b      	ldrh	r3, [r3, #10]
 801b248:	b29b      	uxth	r3, r3
 801b24a:	2200      	movs	r2, #0
 801b24c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801b250:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801b254:	f04f 0000 	mov.w	r0, #0
 801b258:	f04f 0100 	mov.w	r1, #0
 801b25c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 801b260:	462b      	mov	r3, r5
 801b262:	03d9      	lsls	r1, r3, #15
 801b264:	4623      	mov	r3, r4
 801b266:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
 801b26a:	4623      	mov	r3, r4
 801b26c:	03d8      	lsls	r0, r3, #15
 801b26e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b272:	89db      	ldrh	r3, [r3, #14]
 801b274:	b29b      	uxth	r3, r3
 801b276:	2200      	movs	r2, #0
 801b278:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801b27c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801b280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801b284:	17da      	asrs	r2, r3, #31
 801b286:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801b28a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801b28e:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 801b292:	464b      	mov	r3, r9
 801b294:	e9d7 ab2a 	ldrd	sl, fp, [r7, #168]	; 0xa8
 801b298:	4652      	mov	r2, sl
 801b29a:	fb02 f203 	mul.w	r2, r2, r3
 801b29e:	465b      	mov	r3, fp
 801b2a0:	4644      	mov	r4, r8
 801b2a2:	fb04 f303 	mul.w	r3, r4, r3
 801b2a6:	4413      	add	r3, r2
 801b2a8:	4642      	mov	r2, r8
 801b2aa:	4654      	mov	r4, sl
 801b2ac:	fba2 4204 	umull	r4, r2, r2, r4
 801b2b0:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 801b2b4:	4622      	mov	r2, r4
 801b2b6:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 801b2ba:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801b2be:	4413      	add	r3, r2
 801b2c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801b2c4:	f04f 0200 	mov.w	r2, #0
 801b2c8:	f04f 0300 	mov.w	r3, #0
 801b2cc:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 801b2d0:	4644      	mov	r4, r8
 801b2d2:	0a22      	lsrs	r2, r4, #8
 801b2d4:	464c      	mov	r4, r9
 801b2d6:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 801b2da:	464c      	mov	r4, r9
 801b2dc:	1223      	asrs	r3, r4, #8
 801b2de:	1884      	adds	r4, r0, r2
 801b2e0:	663c      	str	r4, [r7, #96]	; 0x60
 801b2e2:	eb41 0303 	adc.w	r3, r1, r3
 801b2e6:	667b      	str	r3, [r7, #100]	; 0x64
 801b2e8:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 801b2ec:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130

	if (temp < 2000) {
 801b2f0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801b2f4:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 801b2f8:	f173 0300 	sbcs.w	r3, r3, #0
 801b2fc:	f280 8150 	bge.w	801b5a0 <_calcurateBarometric+0x484>
		temp -= ((int64_t)dT * dT) / 2147483648L;
 801b300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801b304:	17da      	asrs	r2, r3, #31
 801b306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801b30a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801b30e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801b312:	17da      	asrs	r2, r3, #31
 801b314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801b318:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 801b31c:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 801b320:	462b      	mov	r3, r5
 801b322:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 801b326:	4642      	mov	r2, r8
 801b328:	fb02 f203 	mul.w	r2, r2, r3
 801b32c:	464b      	mov	r3, r9
 801b32e:	4621      	mov	r1, r4
 801b330:	fb01 f303 	mul.w	r3, r1, r3
 801b334:	4413      	add	r3, r2
 801b336:	4622      	mov	r2, r4
 801b338:	4641      	mov	r1, r8
 801b33a:	fba2 1201 	umull	r1, r2, r2, r1
 801b33e:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 801b342:	460a      	mov	r2, r1
 801b344:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 801b348:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801b34c:	4413      	add	r3, r2
 801b34e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801b352:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 801b356:	2b00      	cmp	r3, #0
 801b358:	da08      	bge.n	801b36c <_calcurateBarometric+0x250>
 801b35a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b35e:	1851      	adds	r1, r2, r1
 801b360:	65b9      	str	r1, [r7, #88]	; 0x58
 801b362:	f143 0300 	adc.w	r3, r3, #0
 801b366:	65fb      	str	r3, [r7, #92]	; 0x5c
 801b368:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801b36c:	f04f 0000 	mov.w	r0, #0
 801b370:	f04f 0100 	mov.w	r1, #0
 801b374:	0fd0      	lsrs	r0, r2, #31
 801b376:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801b37a:	17d9      	asrs	r1, r3, #31
 801b37c:	2300      	movs	r3, #0
 801b37e:	4242      	negs	r2, r0
 801b380:	653a      	str	r2, [r7, #80]	; 0x50
 801b382:	eb63 0301 	sbc.w	r3, r3, r1
 801b386:	657b      	str	r3, [r7, #84]	; 0x54
 801b388:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801b38c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801b390:	1814      	adds	r4, r2, r0
 801b392:	64bc      	str	r4, [r7, #72]	; 0x48
 801b394:	414b      	adcs	r3, r1
 801b396:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b398:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 801b39c:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140

		delt = temp - 2000;
 801b3a0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801b3a4:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 801b3a8:	6439      	str	r1, [r7, #64]	; 0x40
 801b3aa:	f143 33ff 	adc.w	r3, r3, #4294967295
 801b3ae:	647b      	str	r3, [r7, #68]	; 0x44
 801b3b0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 801b3b4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		delt = 5 * delt * delt;
 801b3b8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801b3bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801b3c0:	fb03 f102 	mul.w	r1, r3, r2
 801b3c4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801b3c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801b3cc:	fb02 f303 	mul.w	r3, r2, r3
 801b3d0:	18ca      	adds	r2, r1, r3
 801b3d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801b3d6:	fba3 1303 	umull	r1, r3, r3, r3
 801b3da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801b3de:	460b      	mov	r3, r1
 801b3e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801b3e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801b3e8:	18d3      	adds	r3, r2, r3
 801b3ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801b3ee:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 801b3f2:	4622      	mov	r2, r4
 801b3f4:	462b      	mov	r3, r5
 801b3f6:	f04f 0000 	mov.w	r0, #0
 801b3fa:	f04f 0100 	mov.w	r1, #0
 801b3fe:	0099      	lsls	r1, r3, #2
 801b400:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 801b404:	0090      	lsls	r0, r2, #2
 801b406:	4602      	mov	r2, r0
 801b408:	460b      	mov	r3, r1
 801b40a:	4621      	mov	r1, r4
 801b40c:	1851      	adds	r1, r2, r1
 801b40e:	63b9      	str	r1, [r7, #56]	; 0x38
 801b410:	4629      	mov	r1, r5
 801b412:	eb43 0101 	adc.w	r1, r3, r1
 801b416:	63f9      	str	r1, [r7, #60]	; 0x3c
 801b418:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 801b41c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		off -= delt >> 1;
 801b420:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801b424:	f04f 0000 	mov.w	r0, #0
 801b428:	f04f 0100 	mov.w	r1, #0
 801b42c:	0850      	lsrs	r0, r2, #1
 801b42e:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 801b432:	1059      	asrs	r1, r3, #1
 801b434:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801b438:	1a14      	subs	r4, r2, r0
 801b43a:	633c      	str	r4, [r7, #48]	; 0x30
 801b43c:	eb63 0301 	sbc.w	r3, r3, r1
 801b440:	637b      	str	r3, [r7, #52]	; 0x34
 801b442:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 801b446:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		sens -= delt >> 2;
 801b44a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801b44e:	f04f 0000 	mov.w	r0, #0
 801b452:	f04f 0100 	mov.w	r1, #0
 801b456:	0890      	lsrs	r0, r2, #2
 801b458:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 801b45c:	1099      	asrs	r1, r3, #2
 801b45e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 801b462:	1a14      	subs	r4, r2, r0
 801b464:	62bc      	str	r4, [r7, #40]	; 0x28
 801b466:	eb63 0301 	sbc.w	r3, r3, r1
 801b46a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b46c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801b470:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130

		if (temp < -1500) {
 801b474:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801b478:	497c      	ldr	r1, [pc, #496]	; (801b66c <_calcurateBarometric+0x550>)
 801b47a:	428a      	cmp	r2, r1
 801b47c:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 801b480:	f280 808e 	bge.w	801b5a0 <_calcurateBarometric+0x484>
			delt = temp + 1500;
 801b484:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801b488:	f240 51dc 	movw	r1, #1500	; 0x5dc
 801b48c:	1851      	adds	r1, r2, r1
 801b48e:	6239      	str	r1, [r7, #32]
 801b490:	f143 0300 	adc.w	r3, r3, #0
 801b494:	627b      	str	r3, [r7, #36]	; 0x24
 801b496:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801b49a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			delt = delt * delt;
 801b49e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801b4a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801b4a6:	fb03 f102 	mul.w	r1, r3, r2
 801b4aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801b4ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801b4b2:	fb02 f303 	mul.w	r3, r2, r3
 801b4b6:	18ca      	adds	r2, r1, r3
 801b4b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801b4bc:	fba3 1303 	umull	r1, r3, r3, r3
 801b4c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801b4c4:	460b      	mov	r3, r1
 801b4c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801b4ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b4ce:	18d3      	adds	r3, r2, r3
 801b4d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801b4d4:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 801b4d8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 801b4dc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			off -= 7 * delt;
 801b4e0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801b4e4:	4614      	mov	r4, r2
 801b4e6:	461d      	mov	r5, r3
 801b4e8:	f04f 0000 	mov.w	r0, #0
 801b4ec:	f04f 0100 	mov.w	r1, #0
 801b4f0:	00d9      	lsls	r1, r3, #3
 801b4f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801b4f6:	00d0      	lsls	r0, r2, #3
 801b4f8:	1a23      	subs	r3, r4, r0
 801b4fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801b4fe:	eb65 0301 	sbc.w	r3, r5, r1
 801b502:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b506:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801b50a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801b50e:	4621      	mov	r1, r4
 801b510:	1851      	adds	r1, r2, r1
 801b512:	61b9      	str	r1, [r7, #24]
 801b514:	4629      	mov	r1, r5
 801b516:	eb43 0101 	adc.w	r1, r3, r1
 801b51a:	61f9      	str	r1, [r7, #28]
 801b51c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801b520:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			sens -= (11 * delt) >> 1;
 801b524:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 801b528:	4602      	mov	r2, r0
 801b52a:	460b      	mov	r3, r1
 801b52c:	1894      	adds	r4, r2, r2
 801b52e:	613c      	str	r4, [r7, #16]
 801b530:	415b      	adcs	r3, r3
 801b532:	617b      	str	r3, [r7, #20]
 801b534:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801b538:	1814      	adds	r4, r2, r0
 801b53a:	60bc      	str	r4, [r7, #8]
 801b53c:	414b      	adcs	r3, r1
 801b53e:	60fb      	str	r3, [r7, #12]
 801b540:	f04f 0200 	mov.w	r2, #0
 801b544:	f04f 0300 	mov.w	r3, #0
 801b548:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 801b54c:	464c      	mov	r4, r9
 801b54e:	00a3      	lsls	r3, r4, #2
 801b550:	4644      	mov	r4, r8
 801b552:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 801b556:	4644      	mov	r4, r8
 801b558:	00a2      	lsls	r2, r4, #2
 801b55a:	4614      	mov	r4, r2
 801b55c:	461d      	mov	r5, r3
 801b55e:	4623      	mov	r3, r4
 801b560:	1a1b      	subs	r3, r3, r0
 801b562:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801b566:	462b      	mov	r3, r5
 801b568:	eb63 0301 	sbc.w	r3, r3, r1
 801b56c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801b570:	f04f 0200 	mov.w	r2, #0
 801b574:	f04f 0300 	mov.w	r3, #0
 801b578:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 801b57c:	4621      	mov	r1, r4
 801b57e:	084a      	lsrs	r2, r1, #1
 801b580:	4629      	mov	r1, r5
 801b582:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801b586:	4629      	mov	r1, r5
 801b588:	104b      	asrs	r3, r1, #1
 801b58a:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 801b58e:	1a84      	subs	r4, r0, r2
 801b590:	603c      	str	r4, [r7, #0]
 801b592:	eb61 0303 	sbc.w	r3, r1, r3
 801b596:	607b      	str	r3, [r7, #4]
 801b598:	e9d7 3400 	ldrd	r3, r4, [r7]
 801b59c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
		}
	}

    *p_temperature = temp / 100.0;
 801b5a0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801b5a4:	f7e4 ffae 	bl	8000504 <__aeabi_l2d>
 801b5a8:	f04f 0200 	mov.w	r2, #0
 801b5ac:	4b30      	ldr	r3, [pc, #192]	; (801b670 <_calcurateBarometric+0x554>)
 801b5ae:	f7e5 f901 	bl	80007b4 <__aeabi_ddiv>
 801b5b2:	4602      	mov	r2, r0
 801b5b4:	460b      	mov	r3, r1
 801b5b6:	4610      	mov	r0, r2
 801b5b8:	4619      	mov	r1, r3
 801b5ba:	f7e5 fab3 	bl	8000b24 <__aeabi_d2f>
 801b5be:	4602      	mov	r2, r0
 801b5c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b5c4:	601a      	str	r2, [r3, #0]
	*p_pressure = (float)(((((int64_t)p_owner->__D1 * sens) >> 21) - off) >> 15);
 801b5c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b5cc:	2200      	movs	r2, #0
 801b5ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801b5d2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 801b5d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801b5da:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 801b5de:	462a      	mov	r2, r5
 801b5e0:	fb02 f203 	mul.w	r2, r2, r3
 801b5e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801b5e8:	4621      	mov	r1, r4
 801b5ea:	fb01 f303 	mul.w	r3, r1, r3
 801b5ee:	4413      	add	r3, r2
 801b5f0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801b5f4:	4621      	mov	r1, r4
 801b5f6:	fba2 1201 	umull	r1, r2, r2, r1
 801b5fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801b5fe:	460a      	mov	r2, r1
 801b600:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 801b604:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801b608:	4413      	add	r3, r2
 801b60a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801b60e:	f04f 0200 	mov.w	r2, #0
 801b612:	f04f 0300 	mov.w	r3, #0
 801b616:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801b61a:	4621      	mov	r1, r4
 801b61c:	0d4a      	lsrs	r2, r1, #21
 801b61e:	4629      	mov	r1, r5
 801b620:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 801b624:	4629      	mov	r1, r5
 801b626:	154b      	asrs	r3, r1, #21
 801b628:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 801b62c:	1a14      	subs	r4, r2, r0
 801b62e:	67bc      	str	r4, [r7, #120]	; 0x78
 801b630:	eb63 0301 	sbc.w	r3, r3, r1
 801b634:	67fb      	str	r3, [r7, #124]	; 0x7c
 801b636:	f04f 0200 	mov.w	r2, #0
 801b63a:	f04f 0300 	mov.w	r3, #0
 801b63e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 801b642:	4621      	mov	r1, r4
 801b644:	0bca      	lsrs	r2, r1, #15
 801b646:	4629      	mov	r1, r5
 801b648:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 801b64c:	4629      	mov	r1, r5
 801b64e:	13cb      	asrs	r3, r1, #15
 801b650:	4610      	mov	r0, r2
 801b652:	4619      	mov	r1, r3
 801b654:	f7e5 fb86 	bl	8000d64 <__aeabi_l2f>
 801b658:	4602      	mov	r2, r0
 801b65a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801b65e:	601a      	str	r2, [r3, #0]
}
 801b660:	bf00      	nop
 801b662:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 801b666:	46bd      	mov	sp, r7
 801b668:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801b66c:	fffffa24 	.word	0xfffffa24
 801b670:	40590000 	.word	0x40590000

0801b674 <_doTask>:

static uint16_t _doTask(PifTask* p_task)
{
 801b674:	b580      	push	{r7, lr}
 801b676:	b08a      	sub	sp, #40	; 0x28
 801b678:	af02      	add	r7, sp, #8
 801b67a:	6078      	str	r0, [r7, #4]
	PifMs5611* p_owner = p_task->_p_client;
 801b67c:	687b      	ldr	r3, [r7, #4]
 801b67e:	68db      	ldr	r3, [r3, #12]
 801b680:	61bb      	str	r3, [r7, #24]
	uint8_t value[3];
	uint16_t delay = 1;
 801b682:	2301      	movs	r3, #1
 801b684:	83fb      	strh	r3, [r7, #30]
	uint16_t gap;
	float pressure;
	float temperature;

	switch (p_owner->__state) {
 801b686:	69bb      	ldr	r3, [r7, #24]
 801b688:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b68c:	3b01      	subs	r3, #1
 801b68e:	2b04      	cmp	r3, #4
 801b690:	f200 80a9 	bhi.w	801b7e6 <_doTask+0x172>
 801b694:	a201      	add	r2, pc, #4	; (adr r2, 801b69c <_doTask+0x28>)
 801b696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b69a:	bf00      	nop
 801b69c:	0801b6b1 	.word	0x0801b6b1
 801b6a0:	0801b6f1 	.word	0x0801b6f1
 801b6a4:	0801b723 	.word	0x0801b723
 801b6a8:	0801b759 	.word	0x0801b759
 801b6ac:	0801b78b 	.word	0x0801b78b
	case MS5611_STATE_TEMPERATURE_START:
		p_owner->__start_time = pif_cumulative_timer1ms;
 801b6b0:	4b54      	ldr	r3, [pc, #336]	; (801b804 <_doTask+0x190>)
 801b6b2:	681a      	ldr	r2, [r3, #0]
 801b6b4:	69bb      	ldr	r3, [r7, #24]
 801b6b6:	62da      	str	r2, [r3, #44]	; 0x2c
		value[0] = MS5611_REG_CONV_D2 + p_owner->_over_sampling_rate;
 801b6b8:	69bb      	ldr	r3, [r7, #24]
 801b6ba:	8b1b      	ldrh	r3, [r3, #24]
 801b6bc:	b2db      	uxtb	r3, r3
 801b6be:	3350      	adds	r3, #80	; 0x50
 801b6c0:	b2db      	uxtb	r3, r3
 801b6c2:	743b      	strb	r3, [r7, #16]
		if (pifI2cDevice_Write(p_owner->_p_i2c, 0, 0, value, 1)) {
 801b6c4:	69bb      	ldr	r3, [r7, #24]
 801b6c6:	6858      	ldr	r0, [r3, #4]
 801b6c8:	f107 0310 	add.w	r3, r7, #16
 801b6cc:	2201      	movs	r2, #1
 801b6ce:	9200      	str	r2, [sp, #0]
 801b6d0:	2200      	movs	r2, #0
 801b6d2:	2100      	movs	r1, #0
 801b6d4:	f7f7 fa22 	bl	8012b1c <pifI2cDevice_Write>
 801b6d8:	4603      	mov	r3, r0
 801b6da:	2b00      	cmp	r3, #0
 801b6dc:	f000 8085 	beq.w	801b7ea <_doTask+0x176>
			p_owner->__state = MS5611_STATE_TEMPERATURE_WAIT;
 801b6e0:	69bb      	ldr	r3, [r7, #24]
 801b6e2:	2202      	movs	r2, #2
 801b6e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			delay = p_owner->_conversion_time;
 801b6e8:	69bb      	ldr	r3, [r7, #24]
 801b6ea:	7e9b      	ldrb	r3, [r3, #26]
 801b6ec:	83fb      	strh	r3, [r7, #30]
		}
		break;
 801b6ee:	e07c      	b.n	801b7ea <_doTask+0x176>

	case MS5611_STATE_TEMPERATURE_WAIT:
		if (pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MS5611_REG_ADC_READ, value, 3)) {
 801b6f0:	69bb      	ldr	r3, [r7, #24]
 801b6f2:	6858      	ldr	r0, [r3, #4]
 801b6f4:	f107 0210 	add.w	r2, r7, #16
 801b6f8:	2303      	movs	r3, #3
 801b6fa:	2100      	movs	r1, #0
 801b6fc:	f7f7 f9c4 	bl	8012a88 <pifI2cDevice_ReadRegBytes>
 801b700:	4603      	mov	r3, r0
 801b702:	2b00      	cmp	r3, #0
 801b704:	d073      	beq.n	801b7ee <_doTask+0x17a>
			p_owner->__D2 = ((uint32_t)value[0] << 16) + (value[1] << 8) + value[2];
 801b706:	7c3b      	ldrb	r3, [r7, #16]
 801b708:	041b      	lsls	r3, r3, #16
 801b70a:	7c7a      	ldrb	r2, [r7, #17]
 801b70c:	0212      	lsls	r2, r2, #8
 801b70e:	4413      	add	r3, r2
 801b710:	7cba      	ldrb	r2, [r7, #18]
 801b712:	441a      	add	r2, r3
 801b714:	69bb      	ldr	r3, [r7, #24]
 801b716:	629a      	str	r2, [r3, #40]	; 0x28
			p_owner->__state = MS5611_STATE_PRESSURE_START;
 801b718:	69bb      	ldr	r3, [r7, #24]
 801b71a:	2203      	movs	r2, #3
 801b71c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		}
		break;
 801b720:	e065      	b.n	801b7ee <_doTask+0x17a>

	case MS5611_STATE_PRESSURE_START:
		value[0] = MS5611_REG_CONV_D1 + p_owner->_over_sampling_rate;
 801b722:	69bb      	ldr	r3, [r7, #24]
 801b724:	8b1b      	ldrh	r3, [r3, #24]
 801b726:	b2db      	uxtb	r3, r3
 801b728:	3340      	adds	r3, #64	; 0x40
 801b72a:	b2db      	uxtb	r3, r3
 801b72c:	743b      	strb	r3, [r7, #16]
		if (pifI2cDevice_Write(p_owner->_p_i2c, 0, 0, value, 1)) {
 801b72e:	69bb      	ldr	r3, [r7, #24]
 801b730:	6858      	ldr	r0, [r3, #4]
 801b732:	f107 0310 	add.w	r3, r7, #16
 801b736:	2201      	movs	r2, #1
 801b738:	9200      	str	r2, [sp, #0]
 801b73a:	2200      	movs	r2, #0
 801b73c:	2100      	movs	r1, #0
 801b73e:	f7f7 f9ed 	bl	8012b1c <pifI2cDevice_Write>
 801b742:	4603      	mov	r3, r0
 801b744:	2b00      	cmp	r3, #0
 801b746:	d054      	beq.n	801b7f2 <_doTask+0x17e>
			p_owner->__state = MS5611_STATE_PRESSURE_WAIT;
 801b748:	69bb      	ldr	r3, [r7, #24]
 801b74a:	2204      	movs	r2, #4
 801b74c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			delay = p_owner->_conversion_time;
 801b750:	69bb      	ldr	r3, [r7, #24]
 801b752:	7e9b      	ldrb	r3, [r3, #26]
 801b754:	83fb      	strh	r3, [r7, #30]
		}
		break;
 801b756:	e04c      	b.n	801b7f2 <_doTask+0x17e>

	case MS5611_STATE_PRESSURE_WAIT:
		if (pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MS5611_REG_ADC_READ, value, 3)) {
 801b758:	69bb      	ldr	r3, [r7, #24]
 801b75a:	6858      	ldr	r0, [r3, #4]
 801b75c:	f107 0210 	add.w	r2, r7, #16
 801b760:	2303      	movs	r3, #3
 801b762:	2100      	movs	r1, #0
 801b764:	f7f7 f990 	bl	8012a88 <pifI2cDevice_ReadRegBytes>
 801b768:	4603      	mov	r3, r0
 801b76a:	2b00      	cmp	r3, #0
 801b76c:	d043      	beq.n	801b7f6 <_doTask+0x182>
			p_owner->__D1 = ((uint32_t)value[0] << 16) + (value[1] << 8) + value[2];
 801b76e:	7c3b      	ldrb	r3, [r7, #16]
 801b770:	041b      	lsls	r3, r3, #16
 801b772:	7c7a      	ldrb	r2, [r7, #17]
 801b774:	0212      	lsls	r2, r2, #8
 801b776:	4413      	add	r3, r2
 801b778:	7cba      	ldrb	r2, [r7, #18]
 801b77a:	441a      	add	r2, r3
 801b77c:	69bb      	ldr	r3, [r7, #24]
 801b77e:	625a      	str	r2, [r3, #36]	; 0x24
			p_owner->__state = MS5611_STATE_CALCURATE;
 801b780:	69bb      	ldr	r3, [r7, #24]
 801b782:	2205      	movs	r2, #5
 801b784:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		}
		break;
 801b788:	e035      	b.n	801b7f6 <_doTask+0x182>

	case MS5611_STATE_CALCURATE:
		_calcurateBarometric(p_owner, &pressure, &temperature);
 801b78a:	f107 0208 	add.w	r2, r7, #8
 801b78e:	f107 030c 	add.w	r3, r7, #12
 801b792:	4619      	mov	r1, r3
 801b794:	69b8      	ldr	r0, [r7, #24]
 801b796:	f7ff fcc1 	bl	801b11c <_calcurateBarometric>
		if (p_owner->__evt_read) (*p_owner->__evt_read)(pressure, temperature);
 801b79a:	69bb      	ldr	r3, [r7, #24]
 801b79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b79e:	2b00      	cmp	r3, #0
 801b7a0:	d00a      	beq.n	801b7b8 <_doTask+0x144>
 801b7a2:	69bb      	ldr	r3, [r7, #24]
 801b7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b7a6:	edd7 7a03 	vldr	s15, [r7, #12]
 801b7aa:	ed97 7a02 	vldr	s14, [r7, #8]
 801b7ae:	eef0 0a47 	vmov.f32	s1, s14
 801b7b2:	eeb0 0a67 	vmov.f32	s0, s15
 801b7b6:	4798      	blx	r3
		gap = pif_cumulative_timer1ms - p_owner->__start_time;
 801b7b8:	4b12      	ldr	r3, [pc, #72]	; (801b804 <_doTask+0x190>)
 801b7ba:	681b      	ldr	r3, [r3, #0]
 801b7bc:	b29a      	uxth	r2, r3
 801b7be:	69bb      	ldr	r3, [r7, #24]
 801b7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b7c2:	b29b      	uxth	r3, r3
 801b7c4:	1ad3      	subs	r3, r2, r3
 801b7c6:	82fb      	strh	r3, [r7, #22]
		if (gap < p_owner->__read_period) {
 801b7c8:	69bb      	ldr	r3, [r7, #24]
 801b7ca:	8c1b      	ldrh	r3, [r3, #32]
 801b7cc:	8afa      	ldrh	r2, [r7, #22]
 801b7ce:	429a      	cmp	r2, r3
 801b7d0:	d204      	bcs.n	801b7dc <_doTask+0x168>
			delay = p_owner->__read_period - gap;
 801b7d2:	69bb      	ldr	r3, [r7, #24]
 801b7d4:	8c1a      	ldrh	r2, [r3, #32]
 801b7d6:	8afb      	ldrh	r3, [r7, #22]
 801b7d8:	1ad3      	subs	r3, r2, r3
 801b7da:	83fb      	strh	r3, [r7, #30]
		}
		p_owner->__state = MS5611_STATE_TEMPERATURE_START;
 801b7dc:	69bb      	ldr	r3, [r7, #24]
 801b7de:	2201      	movs	r2, #1
 801b7e0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 801b7e4:	e008      	b.n	801b7f8 <_doTask+0x184>

	default:
		break;
 801b7e6:	bf00      	nop
 801b7e8:	e006      	b.n	801b7f8 <_doTask+0x184>
		break;
 801b7ea:	bf00      	nop
 801b7ec:	e004      	b.n	801b7f8 <_doTask+0x184>
		break;
 801b7ee:	bf00      	nop
 801b7f0:	e002      	b.n	801b7f8 <_doTask+0x184>
		break;
 801b7f2:	bf00      	nop
 801b7f4:	e000      	b.n	801b7f8 <_doTask+0x184>
		break;
 801b7f6:	bf00      	nop
	}
	return delay;
 801b7f8:	8bfb      	ldrh	r3, [r7, #30]
}
 801b7fa:	4618      	mov	r0, r3
 801b7fc:	3720      	adds	r7, #32
 801b7fe:	46bd      	mov	sp, r7
 801b800:	bd80      	pop	{r7, pc}
 801b802:	bf00      	nop
 801b804:	20001df8 	.word	0x20001df8

0801b808 <pifMs5611_Init>:

BOOL pifMs5611_Init(PifMs5611* p_owner, PifId id, PifI2cPort* p_i2c, uint8_t addr)
{
 801b808:	b580      	push	{r7, lr}
 801b80a:	b086      	sub	sp, #24
 801b80c:	af00      	add	r7, sp, #0
 801b80e:	60f8      	str	r0, [r7, #12]
 801b810:	607a      	str	r2, [r7, #4]
 801b812:	461a      	mov	r2, r3
 801b814:	460b      	mov	r3, r1
 801b816:	817b      	strh	r3, [r7, #10]
 801b818:	4613      	mov	r3, r2
 801b81a:	727b      	strb	r3, [r7, #9]
	int i;

	if (!p_owner || !p_i2c) {
 801b81c:	68fb      	ldr	r3, [r7, #12]
 801b81e:	2b00      	cmp	r3, #0
 801b820:	d002      	beq.n	801b828 <pifMs5611_Init+0x20>
 801b822:	687b      	ldr	r3, [r7, #4]
 801b824:	2b00      	cmp	r3, #0
 801b826:	d104      	bne.n	801b832 <pifMs5611_Init+0x2a>
		pif_error = E_INVALID_PARAM;
 801b828:	4b33      	ldr	r3, [pc, #204]	; (801b8f8 <pifMs5611_Init+0xf0>)
 801b82a:	2201      	movs	r2, #1
 801b82c:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 801b82e:	2300      	movs	r3, #0
 801b830:	e05e      	b.n	801b8f0 <pifMs5611_Init+0xe8>
	}

	memset(p_owner, 0, sizeof(PifMs5611));
 801b832:	2234      	movs	r2, #52	; 0x34
 801b834:	2100      	movs	r1, #0
 801b836:	68f8      	ldr	r0, [r7, #12]
 801b838:	f008 fb40 	bl	8023ebc <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 801b83c:	6878      	ldr	r0, [r7, #4]
 801b83e:	f7f7 f807 	bl	8012850 <pifI2cPort_AddDevice>
 801b842:	4602      	mov	r2, r0
 801b844:	68fb      	ldr	r3, [r7, #12]
 801b846:	605a      	str	r2, [r3, #4]
    if (!p_owner->_p_i2c) return FALSE;
 801b848:	68fb      	ldr	r3, [r7, #12]
 801b84a:	685b      	ldr	r3, [r3, #4]
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d101      	bne.n	801b854 <pifMs5611_Init+0x4c>
 801b850:	2300      	movs	r3, #0
 801b852:	e04d      	b.n	801b8f0 <pifMs5611_Init+0xe8>

    p_owner->_p_i2c->addr = addr;
 801b854:	68fb      	ldr	r3, [r7, #12]
 801b856:	685b      	ldr	r3, [r3, #4]
 801b858:	7a7a      	ldrb	r2, [r7, #9]
 801b85a:	701a      	strb	r2, [r3, #0]

	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MS5611_REG_RESET, 0)) goto fail;
 801b85c:	68fb      	ldr	r3, [r7, #12]
 801b85e:	685b      	ldr	r3, [r3, #4]
 801b860:	2200      	movs	r2, #0
 801b862:	211e      	movs	r1, #30
 801b864:	4618      	mov	r0, r3
 801b866:	f7f7 fa05 	bl	8012c74 <pifI2cDevice_WriteRegByte>
 801b86a:	4603      	mov	r3, r0
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	d036      	beq.n	801b8de <pifMs5611_Init+0xd6>
	pifTaskManager_YieldMs(100);
 801b870:	2064      	movs	r0, #100	; 0x64
 801b872:	f7f9 fe0b 	bl	801548c <pifTaskManager_YieldMs>

	for (i = 0; i < 8; i++) {
 801b876:	2300      	movs	r3, #0
 801b878:	617b      	str	r3, [r7, #20]
 801b87a:	e014      	b.n	801b8a6 <pifMs5611_Init+0x9e>
		if (!pifI2cDevice_ReadRegWord(p_owner->_p_i2c, MS5611_REG_READ_PROM + i * 2, (uint16_t*)&p_owner->_prom[i])) goto fail;
 801b87c:	68fb      	ldr	r3, [r7, #12]
 801b87e:	6858      	ldr	r0, [r3, #4]
 801b880:	697b      	ldr	r3, [r7, #20]
 801b882:	3350      	adds	r3, #80	; 0x50
 801b884:	b2db      	uxtb	r3, r3
 801b886:	005b      	lsls	r3, r3, #1
 801b888:	b2d9      	uxtb	r1, r3
 801b88a:	697b      	ldr	r3, [r7, #20]
 801b88c:	3304      	adds	r3, #4
 801b88e:	005b      	lsls	r3, r3, #1
 801b890:	68fa      	ldr	r2, [r7, #12]
 801b892:	4413      	add	r3, r2
 801b894:	461a      	mov	r2, r3
 801b896:	f7f7 f8d3 	bl	8012a40 <pifI2cDevice_ReadRegWord>
 801b89a:	4603      	mov	r3, r0
 801b89c:	2b00      	cmp	r3, #0
 801b89e:	d020      	beq.n	801b8e2 <pifMs5611_Init+0xda>
	for (i = 0; i < 8; i++) {
 801b8a0:	697b      	ldr	r3, [r7, #20]
 801b8a2:	3301      	adds	r3, #1
 801b8a4:	617b      	str	r3, [r7, #20]
 801b8a6:	697b      	ldr	r3, [r7, #20]
 801b8a8:	2b07      	cmp	r3, #7
 801b8aa:	dde7      	ble.n	801b87c <pifMs5611_Init+0x74>
	}
	if (!_checkPromCrc(p_owner)) goto fail;
 801b8ac:	68f8      	ldr	r0, [r7, #12]
 801b8ae:	f7ff fbb7 	bl	801b020 <_checkPromCrc>
 801b8b2:	4603      	mov	r3, r0
 801b8b4:	2b00      	cmp	r3, #0
 801b8b6:	d016      	beq.n	801b8e6 <pifMs5611_Init+0xde>

    pifMs5611_SetOverSamplingRate(p_owner, MS5611_OSR_1024);
 801b8b8:	2104      	movs	r1, #4
 801b8ba:	68f8      	ldr	r0, [r7, #12]
 801b8bc:	f000 f844 	bl	801b948 <pifMs5611_SetOverSamplingRate>

	if (id == PIF_ID_AUTO) id = pif_id++;
 801b8c0:	897b      	ldrh	r3, [r7, #10]
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	d106      	bne.n	801b8d4 <pifMs5611_Init+0xcc>
 801b8c6:	4b0d      	ldr	r3, [pc, #52]	; (801b8fc <pifMs5611_Init+0xf4>)
 801b8c8:	881b      	ldrh	r3, [r3, #0]
 801b8ca:	1c5a      	adds	r2, r3, #1
 801b8cc:	b291      	uxth	r1, r2
 801b8ce:	4a0b      	ldr	r2, [pc, #44]	; (801b8fc <pifMs5611_Init+0xf4>)
 801b8d0:	8011      	strh	r1, [r2, #0]
 801b8d2:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 801b8d4:	68fb      	ldr	r3, [r7, #12]
 801b8d6:	897a      	ldrh	r2, [r7, #10]
 801b8d8:	801a      	strh	r2, [r3, #0]
    return TRUE;
 801b8da:	2301      	movs	r3, #1
 801b8dc:	e008      	b.n	801b8f0 <pifMs5611_Init+0xe8>
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MS5611_REG_RESET, 0)) goto fail;
 801b8de:	bf00      	nop
 801b8e0:	e002      	b.n	801b8e8 <pifMs5611_Init+0xe0>
		if (!pifI2cDevice_ReadRegWord(p_owner->_p_i2c, MS5611_REG_READ_PROM + i * 2, (uint16_t*)&p_owner->_prom[i])) goto fail;
 801b8e2:	bf00      	nop
 801b8e4:	e000      	b.n	801b8e8 <pifMs5611_Init+0xe0>
	if (!_checkPromCrc(p_owner)) goto fail;
 801b8e6:	bf00      	nop

fail:
	pifMs5611_Clear(p_owner);
 801b8e8:	68f8      	ldr	r0, [r7, #12]
 801b8ea:	f000 f809 	bl	801b900 <pifMs5611_Clear>
	return FALSE;
 801b8ee:	2300      	movs	r3, #0
}
 801b8f0:	4618      	mov	r0, r3
 801b8f2:	3718      	adds	r7, #24
 801b8f4:	46bd      	mov	sp, r7
 801b8f6:	bd80      	pop	{r7, pc}
 801b8f8:	20001de0 	.word	0x20001de0
 801b8fc:	20000128 	.word	0x20000128

0801b900 <pifMs5611_Clear>:

void pifMs5611_Clear(PifMs5611* p_owner)
{
 801b900:	b580      	push	{r7, lr}
 801b902:	b082      	sub	sp, #8
 801b904:	af00      	add	r7, sp, #0
 801b906:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_task) {
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	69db      	ldr	r3, [r3, #28]
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d007      	beq.n	801b920 <pifMs5611_Clear+0x20>
		pifTaskManager_Remove(p_owner->_p_task);
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	69db      	ldr	r3, [r3, #28]
 801b914:	4618      	mov	r0, r3
 801b916:	f7f9 faf9 	bl	8014f0c <pifTaskManager_Remove>
		p_owner->_p_task = NULL;
 801b91a:	687b      	ldr	r3, [r7, #4]
 801b91c:	2200      	movs	r2, #0
 801b91e:	61da      	str	r2, [r3, #28]
	}
	if (p_owner->_p_i2c) {
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	685b      	ldr	r3, [r3, #4]
 801b924:	2b00      	cmp	r3, #0
 801b926:	d00b      	beq.n	801b940 <pifMs5611_Clear+0x40>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	685b      	ldr	r3, [r3, #4]
 801b92c:	685a      	ldr	r2, [r3, #4]
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	685b      	ldr	r3, [r3, #4]
 801b932:	4619      	mov	r1, r3
 801b934:	4610      	mov	r0, r2
 801b936:	f7f6 ffaf 	bl	8012898 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	2200      	movs	r2, #0
 801b93e:	605a      	str	r2, [r3, #4]
	}
}
 801b940:	bf00      	nop
 801b942:	3708      	adds	r7, #8
 801b944:	46bd      	mov	sp, r7
 801b946:	bd80      	pop	{r7, pc}

0801b948 <pifMs5611_SetOverSamplingRate>:

void pifMs5611_SetOverSamplingRate(PifMs5611* p_owner, uint16_t osr)
{
 801b948:	b480      	push	{r7}
 801b94a:	b083      	sub	sp, #12
 801b94c:	af00      	add	r7, sp, #0
 801b94e:	6078      	str	r0, [r7, #4]
 801b950:	460b      	mov	r3, r1
 801b952:	807b      	strh	r3, [r7, #2]
	p_owner->_over_sampling_rate = osr;
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	887a      	ldrh	r2, [r7, #2]
 801b958:	831a      	strh	r2, [r3, #24]
	switch (osr) {
 801b95a:	887b      	ldrh	r3, [r7, #2]
 801b95c:	2b08      	cmp	r3, #8
 801b95e:	d829      	bhi.n	801b9b4 <pifMs5611_SetOverSamplingRate+0x6c>
 801b960:	a201      	add	r2, pc, #4	; (adr r2, 801b968 <pifMs5611_SetOverSamplingRate+0x20>)
 801b962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b966:	bf00      	nop
 801b968:	0801b98d 	.word	0x0801b98d
 801b96c:	0801b9b5 	.word	0x0801b9b5
 801b970:	0801b995 	.word	0x0801b995
 801b974:	0801b9b5 	.word	0x0801b9b5
 801b978:	0801b99d 	.word	0x0801b99d
 801b97c:	0801b9b5 	.word	0x0801b9b5
 801b980:	0801b9a5 	.word	0x0801b9a5
 801b984:	0801b9b5 	.word	0x0801b9b5
 801b988:	0801b9ad 	.word	0x0801b9ad
	case MS5611_OSR_256: p_owner->_conversion_time = 1 + 1; break;
 801b98c:	687b      	ldr	r3, [r7, #4]
 801b98e:	2202      	movs	r2, #2
 801b990:	769a      	strb	r2, [r3, #26]
 801b992:	e00f      	b.n	801b9b4 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_512: p_owner->_conversion_time = 2 + 1; break;
 801b994:	687b      	ldr	r3, [r7, #4]
 801b996:	2203      	movs	r2, #3
 801b998:	769a      	strb	r2, [r3, #26]
 801b99a:	e00b      	b.n	801b9b4 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_1024: p_owner->_conversion_time = 3 + 1; break;
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	2204      	movs	r2, #4
 801b9a0:	769a      	strb	r2, [r3, #26]
 801b9a2:	e007      	b.n	801b9b4 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_2048: p_owner->_conversion_time = 5 + 1; break;
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	2206      	movs	r2, #6
 801b9a8:	769a      	strb	r2, [r3, #26]
 801b9aa:	e003      	b.n	801b9b4 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_4096: p_owner->_conversion_time = 10 + 1; break;
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	220b      	movs	r2, #11
 801b9b0:	769a      	strb	r2, [r3, #26]
 801b9b2:	bf00      	nop
	}
}
 801b9b4:	bf00      	nop
 801b9b6:	370c      	adds	r7, #12
 801b9b8:	46bd      	mov	sp, r7
 801b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9be:	4770      	bx	lr

0801b9c0 <pifMs5611_AddTaskForReading>:
	_calcurateBarometric(p_owner, p_pressure, p_temperature);
	return TRUE;
}

BOOL pifMs5611_AddTaskForReading(PifMs5611* p_owner, uint16_t read_period, PifEvtBaroRead evt_read, BOOL start)
{
 801b9c0:	b580      	push	{r7, lr}
 801b9c2:	b086      	sub	sp, #24
 801b9c4:	af02      	add	r7, sp, #8
 801b9c6:	60f8      	str	r0, [r7, #12]
 801b9c8:	607a      	str	r2, [r7, #4]
 801b9ca:	461a      	mov	r2, r3
 801b9cc:	460b      	mov	r3, r1
 801b9ce:	817b      	strh	r3, [r7, #10]
 801b9d0:	4613      	mov	r3, r2
 801b9d2:	727b      	strb	r3, [r7, #9]
	p_owner->_p_task = pifTaskManager_Add(TM_CHANGE_MS, read_period, _doTask, p_owner, start);
 801b9d4:	8979      	ldrh	r1, [r7, #10]
 801b9d6:	7a7b      	ldrb	r3, [r7, #9]
 801b9d8:	9300      	str	r3, [sp, #0]
 801b9da:	68fb      	ldr	r3, [r7, #12]
 801b9dc:	4a0f      	ldr	r2, [pc, #60]	; (801ba1c <pifMs5611_AddTaskForReading+0x5c>)
 801b9de:	2004      	movs	r0, #4
 801b9e0:	f7f9 fa2c 	bl	8014e3c <pifTaskManager_Add>
 801b9e4:	4602      	mov	r2, r0
 801b9e6:	68fb      	ldr	r3, [r7, #12]
 801b9e8:	61da      	str	r2, [r3, #28]
    if (!p_owner->_p_task) return FALSE;
 801b9ea:	68fb      	ldr	r3, [r7, #12]
 801b9ec:	69db      	ldr	r3, [r3, #28]
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	d101      	bne.n	801b9f6 <pifMs5611_AddTaskForReading+0x36>
 801b9f2:	2300      	movs	r3, #0
 801b9f4:	e00e      	b.n	801ba14 <pifMs5611_AddTaskForReading+0x54>
    p_owner->_p_task->name = "MS5611";
 801b9f6:	68fb      	ldr	r3, [r7, #12]
 801b9f8:	69db      	ldr	r3, [r3, #28]
 801b9fa:	4a09      	ldr	r2, [pc, #36]	; (801ba20 <pifMs5611_AddTaskForReading+0x60>)
 801b9fc:	601a      	str	r2, [r3, #0]

    p_owner->__read_period = read_period;
 801b9fe:	68fb      	ldr	r3, [r7, #12]
 801ba00:	897a      	ldrh	r2, [r7, #10]
 801ba02:	841a      	strh	r2, [r3, #32]
    p_owner->__evt_read = evt_read;
 801ba04:	68fb      	ldr	r3, [r7, #12]
 801ba06:	687a      	ldr	r2, [r7, #4]
 801ba08:	631a      	str	r2, [r3, #48]	; 0x30
    p_owner->__state = MS5611_STATE_TEMPERATURE_START;
 801ba0a:	68fb      	ldr	r3, [r7, #12]
 801ba0c:	2201      	movs	r2, #1
 801ba0e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    return TRUE;
 801ba12:	2301      	movs	r3, #1
}
 801ba14:	4618      	mov	r0, r3
 801ba16:	3710      	adds	r7, #16
 801ba18:	46bd      	mov	sp, r7
 801ba1a:	bd80      	pop	{r7, pc}
 801ba1c:	0801b675 	.word	0x0801b675
 801ba20:	08028ce0 	.word	0x08028ce0

0801ba24 <_doTask>:
#include "sound/pif_buzzer.h"


static uint16_t _doTask(PifTask* p_task)
{
 801ba24:	b580      	push	{r7, lr}
 801ba26:	b086      	sub	sp, #24
 801ba28:	af00      	add	r7, sp, #0
 801ba2a:	6078      	str	r0, [r7, #4]
	PifBuzzer* p_owner = (PifBuzzer*)p_task->_p_client;
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	68db      	ldr	r3, [r3, #12]
 801ba30:	613b      	str	r3, [r7, #16]
	uint8_t repeat;
	uint16_t sound_10ms, delay = 0;
 801ba32:	2300      	movs	r3, #0
 801ba34:	82fb      	strh	r3, [r7, #22]

	sound_10ms = p_owner->__p_sound_10ms[p_owner->__pos];
 801ba36:	693b      	ldr	r3, [r7, #16]
 801ba38:	691b      	ldr	r3, [r3, #16]
 801ba3a:	693a      	ldr	r2, [r7, #16]
 801ba3c:	7d12      	ldrb	r2, [r2, #20]
 801ba3e:	4413      	add	r3, r2
 801ba40:	781b      	ldrb	r3, [r3, #0]
 801ba42:	81fb      	strh	r3, [r7, #14]
	switch (p_owner->_state) {
 801ba44:	693b      	ldr	r3, [r7, #16]
 801ba46:	7b1b      	ldrb	r3, [r3, #12]
 801ba48:	3b01      	subs	r3, #1
 801ba4a:	2b03      	cmp	r3, #3
 801ba4c:	d87f      	bhi.n	801bb4e <_doTask+0x12a>
 801ba4e:	a201      	add	r2, pc, #4	; (adr r2, 801ba54 <_doTask+0x30>)
 801ba50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba54:	0801ba65 	.word	0x0801ba65
 801ba58:	0801ba87 	.word	0x0801ba87
 801ba5c:	0801baa9 	.word	0x0801baa9
 801ba60:	0801bb1b 	.word	0x0801bb1b
	case BS_START:
		(*p_owner->__act_action)(p_owner->_id, ON);
 801ba64:	693b      	ldr	r3, [r7, #16]
 801ba66:	699b      	ldr	r3, [r3, #24]
 801ba68:	693a      	ldr	r2, [r7, #16]
 801ba6a:	8892      	ldrh	r2, [r2, #4]
 801ba6c:	2101      	movs	r1, #1
 801ba6e:	4610      	mov	r0, r2
 801ba70:	4798      	blx	r3
		p_owner->__pos++;
 801ba72:	693b      	ldr	r3, [r7, #16]
 801ba74:	7d1b      	ldrb	r3, [r3, #20]
 801ba76:	3301      	adds	r3, #1
 801ba78:	b2da      	uxtb	r2, r3
 801ba7a:	693b      	ldr	r3, [r7, #16]
 801ba7c:	751a      	strb	r2, [r3, #20]
		p_owner->_state = BS_ON;
 801ba7e:	693b      	ldr	r3, [r7, #16]
 801ba80:	2202      	movs	r2, #2
 801ba82:	731a      	strb	r2, [r3, #12]
		break;
 801ba84:	e064      	b.n	801bb50 <_doTask+0x12c>

	case BS_ON:
		(*p_owner->__act_action)(p_owner->_id, OFF);
 801ba86:	693b      	ldr	r3, [r7, #16]
 801ba88:	699b      	ldr	r3, [r3, #24]
 801ba8a:	693a      	ldr	r2, [r7, #16]
 801ba8c:	8892      	ldrh	r2, [r2, #4]
 801ba8e:	2100      	movs	r1, #0
 801ba90:	4610      	mov	r0, r2
 801ba92:	4798      	blx	r3
		p_owner->__pos++;
 801ba94:	693b      	ldr	r3, [r7, #16]
 801ba96:	7d1b      	ldrb	r3, [r3, #20]
 801ba98:	3301      	adds	r3, #1
 801ba9a:	b2da      	uxtb	r2, r3
 801ba9c:	693b      	ldr	r3, [r7, #16]
 801ba9e:	751a      	strb	r2, [r3, #20]
		p_owner->_state = BS_OFF;
 801baa0:	693b      	ldr	r3, [r7, #16]
 801baa2:	2203      	movs	r2, #3
 801baa4:	731a      	strb	r2, [r3, #12]
		break;
 801baa6:	e053      	b.n	801bb50 <_doTask+0x12c>

	case BS_OFF:
		if (sound_10ms < 0xF0) {
 801baa8:	89fb      	ldrh	r3, [r7, #14]
 801baaa:	2bef      	cmp	r3, #239	; 0xef
 801baac:	d810      	bhi.n	801bad0 <_doTask+0xac>
			(*p_owner->__act_action)(p_owner->_id, ON);
 801baae:	693b      	ldr	r3, [r7, #16]
 801bab0:	699b      	ldr	r3, [r3, #24]
 801bab2:	693a      	ldr	r2, [r7, #16]
 801bab4:	8892      	ldrh	r2, [r2, #4]
 801bab6:	2101      	movs	r1, #1
 801bab8:	4610      	mov	r0, r2
 801baba:	4798      	blx	r3
			p_owner->__pos++;
 801babc:	693b      	ldr	r3, [r7, #16]
 801babe:	7d1b      	ldrb	r3, [r3, #20]
 801bac0:	3301      	adds	r3, #1
 801bac2:	b2da      	uxtb	r2, r3
 801bac4:	693b      	ldr	r3, [r7, #16]
 801bac6:	751a      	strb	r2, [r3, #20]
			p_owner->_state = BS_ON;
 801bac8:	693b      	ldr	r3, [r7, #16]
 801baca:	2202      	movs	r2, #2
 801bacc:	731a      	strb	r2, [r3, #12]
			else {
				p_owner->_state = BS_STOP;
			}
			delay = 1;
		}
		break;
 801bace:	e03f      	b.n	801bb50 <_doTask+0x12c>
		else if (sound_10ms == 0xF0) {
 801bad0:	89fb      	ldrh	r3, [r7, #14]
 801bad2:	2bf0      	cmp	r3, #240	; 0xf0
 801bad4:	d105      	bne.n	801bae2 <_doTask+0xbe>
			p_owner->_state = BS_STOP;
 801bad6:	693b      	ldr	r3, [r7, #16]
 801bad8:	2204      	movs	r2, #4
 801bada:	731a      	strb	r2, [r3, #12]
			delay = 1;
 801badc:	2301      	movs	r3, #1
 801bade:	82fb      	strh	r3, [r7, #22]
		break;
 801bae0:	e036      	b.n	801bb50 <_doTask+0x12c>
			repeat = sound_10ms - 0xF0;
 801bae2:	89fb      	ldrh	r3, [r7, #14]
 801bae4:	b2db      	uxtb	r3, r3
 801bae6:	3310      	adds	r3, #16
 801bae8:	737b      	strb	r3, [r7, #13]
			if (p_owner->__repeat < repeat) {
 801baea:	693b      	ldr	r3, [r7, #16]
 801baec:	7d5b      	ldrb	r3, [r3, #21]
 801baee:	7b7a      	ldrb	r2, [r7, #13]
 801baf0:	429a      	cmp	r2, r3
 801baf2:	d90c      	bls.n	801bb0e <_doTask+0xea>
				p_owner->__pos = 0;
 801baf4:	693b      	ldr	r3, [r7, #16]
 801baf6:	2200      	movs	r2, #0
 801baf8:	751a      	strb	r2, [r3, #20]
				p_owner->__repeat++;
 801bafa:	693b      	ldr	r3, [r7, #16]
 801bafc:	7d5b      	ldrb	r3, [r3, #21]
 801bafe:	3301      	adds	r3, #1
 801bb00:	b2da      	uxtb	r2, r3
 801bb02:	693b      	ldr	r3, [r7, #16]
 801bb04:	755a      	strb	r2, [r3, #21]
				p_owner->_state = BS_START;
 801bb06:	693b      	ldr	r3, [r7, #16]
 801bb08:	2201      	movs	r2, #1
 801bb0a:	731a      	strb	r2, [r3, #12]
 801bb0c:	e002      	b.n	801bb14 <_doTask+0xf0>
				p_owner->_state = BS_STOP;
 801bb0e:	693b      	ldr	r3, [r7, #16]
 801bb10:	2204      	movs	r2, #4
 801bb12:	731a      	strb	r2, [r3, #12]
			delay = 1;
 801bb14:	2301      	movs	r3, #1
 801bb16:	82fb      	strh	r3, [r7, #22]
		break;
 801bb18:	e01a      	b.n	801bb50 <_doTask+0x12c>

	case BS_STOP:
		(*p_owner->__act_action)(p_owner->_id, OFF);
 801bb1a:	693b      	ldr	r3, [r7, #16]
 801bb1c:	699b      	ldr	r3, [r3, #24]
 801bb1e:	693a      	ldr	r2, [r7, #16]
 801bb20:	8892      	ldrh	r2, [r2, #4]
 801bb22:	2100      	movs	r1, #0
 801bb24:	4610      	mov	r0, r2
 801bb26:	4798      	blx	r3
		p_owner->_state = BS_IDLE;
 801bb28:	693b      	ldr	r3, [r7, #16]
 801bb2a:	2200      	movs	r2, #0
 801bb2c:	731a      	strb	r2, [r3, #12]
		if (p_owner->evt_finish) (*p_owner->evt_finish)(p_owner->_id);
 801bb2e:	693b      	ldr	r3, [r7, #16]
 801bb30:	681b      	ldr	r3, [r3, #0]
 801bb32:	2b00      	cmp	r3, #0
 801bb34:	d005      	beq.n	801bb42 <_doTask+0x11e>
 801bb36:	693b      	ldr	r3, [r7, #16]
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	693a      	ldr	r2, [r7, #16]
 801bb3c:	8892      	ldrh	r2, [r2, #4]
 801bb3e:	4610      	mov	r0, r2
 801bb40:	4798      	blx	r3
		delay = 1;
 801bb42:	2301      	movs	r3, #1
 801bb44:	82fb      	strh	r3, [r7, #22]
		p_task->pause = TRUE;
 801bb46:	687b      	ldr	r3, [r7, #4]
 801bb48:	2201      	movs	r2, #1
 801bb4a:	711a      	strb	r2, [r3, #4]
		break;
 801bb4c:	e000      	b.n	801bb50 <_doTask+0x12c>

	default:
		break;
 801bb4e:	bf00      	nop
	}
	return delay ? delay : sound_10ms * 10;
 801bb50:	8afb      	ldrh	r3, [r7, #22]
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	d106      	bne.n	801bb64 <_doTask+0x140>
 801bb56:	89fb      	ldrh	r3, [r7, #14]
 801bb58:	461a      	mov	r2, r3
 801bb5a:	0092      	lsls	r2, r2, #2
 801bb5c:	4413      	add	r3, r2
 801bb5e:	005b      	lsls	r3, r3, #1
 801bb60:	b29b      	uxth	r3, r3
 801bb62:	e000      	b.n	801bb66 <_doTask+0x142>
 801bb64:	8afb      	ldrh	r3, [r7, #22]
}
 801bb66:	4618      	mov	r0, r3
 801bb68:	3718      	adds	r7, #24
 801bb6a:	46bd      	mov	sp, r7
 801bb6c:	bd80      	pop	{r7, pc}
 801bb6e:	bf00      	nop

0801bb70 <pifBuzzer_Init>:

BOOL pifBuzzer_Init(PifBuzzer* p_owner, PifId id, PifActBuzzerAction act_action)
{
 801bb70:	b580      	push	{r7, lr}
 801bb72:	b086      	sub	sp, #24
 801bb74:	af02      	add	r7, sp, #8
 801bb76:	60f8      	str	r0, [r7, #12]
 801bb78:	460b      	mov	r3, r1
 801bb7a:	607a      	str	r2, [r7, #4]
 801bb7c:	817b      	strh	r3, [r7, #10]
	if (!p_owner || !act_action) {
 801bb7e:	68fb      	ldr	r3, [r7, #12]
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	d002      	beq.n	801bb8a <pifBuzzer_Init+0x1a>
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d104      	bne.n	801bb94 <pifBuzzer_Init+0x24>
		pif_error = E_INVALID_PARAM;
 801bb8a:	4b1a      	ldr	r3, [pc, #104]	; (801bbf4 <pifBuzzer_Init+0x84>)
 801bb8c:	2201      	movs	r2, #1
 801bb8e:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801bb90:	2300      	movs	r3, #0
 801bb92:	e02a      	b.n	801bbea <pifBuzzer_Init+0x7a>
	}

	memset(p_owner, 0, sizeof(PifBuzzer));
 801bb94:	221c      	movs	r2, #28
 801bb96:	2100      	movs	r1, #0
 801bb98:	68f8      	ldr	r0, [r7, #12]
 801bb9a:	f008 f98f 	bl	8023ebc <memset>

	p_owner->_p_task = pifTaskManager_Add(TM_CHANGE_MS, 1, _doTask, p_owner, FALSE);
 801bb9e:	2300      	movs	r3, #0
 801bba0:	9300      	str	r3, [sp, #0]
 801bba2:	68fb      	ldr	r3, [r7, #12]
 801bba4:	4a14      	ldr	r2, [pc, #80]	; (801bbf8 <pifBuzzer_Init+0x88>)
 801bba6:	2101      	movs	r1, #1
 801bba8:	2004      	movs	r0, #4
 801bbaa:	f7f9 f947 	bl	8014e3c <pifTaskManager_Add>
 801bbae:	4602      	mov	r2, r0
 801bbb0:	68fb      	ldr	r3, [r7, #12]
 801bbb2:	609a      	str	r2, [r3, #8]
	if (!p_owner->_p_task) return FALSE;
 801bbb4:	68fb      	ldr	r3, [r7, #12]
 801bbb6:	689b      	ldr	r3, [r3, #8]
 801bbb8:	2b00      	cmp	r3, #0
 801bbba:	d101      	bne.n	801bbc0 <pifBuzzer_Init+0x50>
 801bbbc:	2300      	movs	r3, #0
 801bbbe:	e014      	b.n	801bbea <pifBuzzer_Init+0x7a>
	p_owner->_p_task->name = "Buzzer";
 801bbc0:	68fb      	ldr	r3, [r7, #12]
 801bbc2:	689b      	ldr	r3, [r3, #8]
 801bbc4:	4a0d      	ldr	r2, [pc, #52]	; (801bbfc <pifBuzzer_Init+0x8c>)
 801bbc6:	601a      	str	r2, [r3, #0]

    if (id == PIF_ID_AUTO) id = pif_id++;
 801bbc8:	897b      	ldrh	r3, [r7, #10]
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	d106      	bne.n	801bbdc <pifBuzzer_Init+0x6c>
 801bbce:	4b0c      	ldr	r3, [pc, #48]	; (801bc00 <pifBuzzer_Init+0x90>)
 801bbd0:	881b      	ldrh	r3, [r3, #0]
 801bbd2:	1c5a      	adds	r2, r3, #1
 801bbd4:	b291      	uxth	r1, r2
 801bbd6:	4a0a      	ldr	r2, [pc, #40]	; (801bc00 <pifBuzzer_Init+0x90>)
 801bbd8:	8011      	strh	r1, [r2, #0]
 801bbda:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 801bbdc:	68fb      	ldr	r3, [r7, #12]
 801bbde:	897a      	ldrh	r2, [r7, #10]
 801bbe0:	809a      	strh	r2, [r3, #4]
    p_owner->__act_action = act_action;
 801bbe2:	68fb      	ldr	r3, [r7, #12]
 801bbe4:	687a      	ldr	r2, [r7, #4]
 801bbe6:	619a      	str	r2, [r3, #24]
    return TRUE;
 801bbe8:	2301      	movs	r3, #1
}
 801bbea:	4618      	mov	r0, r3
 801bbec:	3710      	adds	r7, #16
 801bbee:	46bd      	mov	sp, r7
 801bbf0:	bd80      	pop	{r7, pc}
 801bbf2:	bf00      	nop
 801bbf4:	20001de0 	.word	0x20001de0
 801bbf8:	0801ba25 	.word	0x0801ba25
 801bbfc:	08028ce8 	.word	0x08028ce8
 801bc00:	20000128 	.word	0x20000128

0801bc04 <pifBuzzer_Start>:
		p_owner->_p_task = NULL;
	}
}

BOOL pifBuzzer_Start(PifBuzzer* p_owner, const uint8_t* p_sound_10ms)
{
 801bc04:	b480      	push	{r7}
 801bc06:	b083      	sub	sp, #12
 801bc08:	af00      	add	r7, sp, #0
 801bc0a:	6078      	str	r0, [r7, #4]
 801bc0c:	6039      	str	r1, [r7, #0]
	if (!p_owner->_p_task) return FALSE;
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	689b      	ldr	r3, [r3, #8]
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d101      	bne.n	801bc1a <pifBuzzer_Start+0x16>
 801bc16:	2300      	movs	r3, #0
 801bc18:	e010      	b.n	801bc3c <pifBuzzer_Start+0x38>

	p_owner->__p_sound_10ms = p_sound_10ms;
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	683a      	ldr	r2, [r7, #0]
 801bc1e:	611a      	str	r2, [r3, #16]
	p_owner->__pos = 0;
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	2200      	movs	r2, #0
 801bc24:	751a      	strb	r2, [r3, #20]
	p_owner->__repeat = 0;
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	2200      	movs	r2, #0
 801bc2a:	755a      	strb	r2, [r3, #21]
	p_owner->_state = BS_START;
 801bc2c:	687b      	ldr	r3, [r7, #4]
 801bc2e:	2201      	movs	r2, #1
 801bc30:	731a      	strb	r2, [r3, #12]
	p_owner->_p_task->pause = FALSE;
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	689b      	ldr	r3, [r3, #8]
 801bc36:	2200      	movs	r2, #0
 801bc38:	711a      	strb	r2, [r3, #4]
	return TRUE;
 801bc3a:	2301      	movs	r3, #1
}
 801bc3c:	4618      	mov	r0, r3
 801bc3e:	370c      	adds	r7, #12
 801bc40:	46bd      	mov	sp, r7
 801bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc46:	4770      	bx	lr

0801bc48 <pifBuzzer_Stop>:

void pifBuzzer_Stop(PifBuzzer* p_owner)
{
 801bc48:	b480      	push	{r7}
 801bc4a:	b083      	sub	sp, #12
 801bc4c:	af00      	add	r7, sp, #0
 801bc4e:	6078      	str	r0, [r7, #4]
	p_owner->_state = BS_STOP;
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	2204      	movs	r2, #4
 801bc54:	731a      	strb	r2, [r3, #12]
}
 801bc56:	bf00      	nop
 801bc58:	370c      	adds	r7, #12
 801bc5a:	46bd      	mov	sp, r7
 801bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc60:	4770      	bx	lr

0801bc62 <_actStorageI2c_Read_1>:
#include "core/pif_task.h"
#include "storage/pif_storage.h"


static BOOL _actStorageI2c_Read_1(PifStorage* p_owner, uint8_t* dst, uint32_t src, size_t size)
{
 801bc62:	b580      	push	{r7, lr}
 801bc64:	b086      	sub	sp, #24
 801bc66:	af02      	add	r7, sp, #8
 801bc68:	60f8      	str	r0, [r7, #12]
 801bc6a:	60b9      	str	r1, [r7, #8]
 801bc6c:	607a      	str	r2, [r7, #4]
 801bc6e:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (src >> 8);
 801bc70:	68fb      	ldr	r3, [r7, #12]
 801bc72:	7a19      	ldrb	r1, [r3, #8]
 801bc74:	687b      	ldr	r3, [r7, #4]
 801bc76:	0a1b      	lsrs	r3, r3, #8
 801bc78:	b2da      	uxtb	r2, r3
 801bc7a:	68fb      	ldr	r3, [r7, #12]
 801bc7c:	685b      	ldr	r3, [r3, #4]
 801bc7e:	430a      	orrs	r2, r1
 801bc80:	b2d2      	uxtb	r2, r2
 801bc82:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Read(p_owner->_p_i2c, src & 0xFF, 1, dst, size)) return FALSE;
 801bc84:	68fb      	ldr	r3, [r7, #12]
 801bc86:	6858      	ldr	r0, [r3, #4]
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	b2d9      	uxtb	r1, r3
 801bc8c:	683b      	ldr	r3, [r7, #0]
 801bc8e:	9300      	str	r3, [sp, #0]
 801bc90:	68bb      	ldr	r3, [r7, #8]
 801bc92:	2201      	movs	r2, #1
 801bc94:	f7f6 fe14 	bl	80128c0 <pifI2cDevice_Read>
 801bc98:	4603      	mov	r3, r0
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	d101      	bne.n	801bca2 <_actStorageI2c_Read_1+0x40>
 801bc9e:	2300      	movs	r3, #0
 801bca0:	e000      	b.n	801bca4 <_actStorageI2c_Read_1+0x42>
	return TRUE;
 801bca2:	2301      	movs	r3, #1
}
 801bca4:	4618      	mov	r0, r3
 801bca6:	3710      	adds	r7, #16
 801bca8:	46bd      	mov	sp, r7
 801bcaa:	bd80      	pop	{r7, pc}

0801bcac <_actStorageI2c_Write_1>:

static BOOL _actStorageI2c_Write_1(PifStorage* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 801bcac:	b580      	push	{r7, lr}
 801bcae:	b086      	sub	sp, #24
 801bcb0:	af02      	add	r7, sp, #8
 801bcb2:	60f8      	str	r0, [r7, #12]
 801bcb4:	60b9      	str	r1, [r7, #8]
 801bcb6:	607a      	str	r2, [r7, #4]
 801bcb8:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (dst >> 8);
 801bcba:	68fb      	ldr	r3, [r7, #12]
 801bcbc:	7a19      	ldrb	r1, [r3, #8]
 801bcbe:	68bb      	ldr	r3, [r7, #8]
 801bcc0:	0a1b      	lsrs	r3, r3, #8
 801bcc2:	b2da      	uxtb	r2, r3
 801bcc4:	68fb      	ldr	r3, [r7, #12]
 801bcc6:	685b      	ldr	r3, [r3, #4]
 801bcc8:	430a      	orrs	r2, r1
 801bcca:	b2d2      	uxtb	r2, r2
 801bccc:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Write(p_owner->_p_i2c, dst & 0xFF, 1, src, size)) return FALSE;
 801bcce:	68fb      	ldr	r3, [r7, #12]
 801bcd0:	6858      	ldr	r0, [r3, #4]
 801bcd2:	68bb      	ldr	r3, [r7, #8]
 801bcd4:	b2d9      	uxtb	r1, r3
 801bcd6:	683b      	ldr	r3, [r7, #0]
 801bcd8:	9300      	str	r3, [sp, #0]
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	2201      	movs	r2, #1
 801bcde:	f7f6 ff1d 	bl	8012b1c <pifI2cDevice_Write>
 801bce2:	4603      	mov	r3, r0
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	d101      	bne.n	801bcec <_actStorageI2c_Write_1+0x40>
 801bce8:	2300      	movs	r3, #0
 801bcea:	e009      	b.n	801bd00 <_actStorageI2c_Write_1+0x54>
	if (p_owner->__write_delay_ms) pifTaskManager_YieldMs(p_owner->__write_delay_ms);
 801bcec:	68fb      	ldr	r3, [r7, #12]
 801bcee:	7a5b      	ldrb	r3, [r3, #9]
 801bcf0:	2b00      	cmp	r3, #0
 801bcf2:	d004      	beq.n	801bcfe <_actStorageI2c_Write_1+0x52>
 801bcf4:	68fb      	ldr	r3, [r7, #12]
 801bcf6:	7a5b      	ldrb	r3, [r3, #9]
 801bcf8:	4618      	mov	r0, r3
 801bcfa:	f7f9 fbc7 	bl	801548c <pifTaskManager_YieldMs>
	return TRUE;
 801bcfe:	2301      	movs	r3, #1
}
 801bd00:	4618      	mov	r0, r3
 801bd02:	3710      	adds	r7, #16
 801bd04:	46bd      	mov	sp, r7
 801bd06:	bd80      	pop	{r7, pc}

0801bd08 <_actStorageI2c_Read_2>:

static BOOL _actStorageI2c_Read_2(PifStorage* p_owner, uint8_t* dst, uint32_t src, size_t size)
{
 801bd08:	b580      	push	{r7, lr}
 801bd0a:	b086      	sub	sp, #24
 801bd0c:	af02      	add	r7, sp, #8
 801bd0e:	60f8      	str	r0, [r7, #12]
 801bd10:	60b9      	str	r1, [r7, #8]
 801bd12:	607a      	str	r2, [r7, #4]
 801bd14:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (src >> 16);
 801bd16:	68fb      	ldr	r3, [r7, #12]
 801bd18:	7a19      	ldrb	r1, [r3, #8]
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	0c1b      	lsrs	r3, r3, #16
 801bd1e:	b2da      	uxtb	r2, r3
 801bd20:	68fb      	ldr	r3, [r7, #12]
 801bd22:	685b      	ldr	r3, [r3, #4]
 801bd24:	430a      	orrs	r2, r1
 801bd26:	b2d2      	uxtb	r2, r2
 801bd28:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Read(p_owner->_p_i2c, src & 0xFFFF, 2, dst, size)) return FALSE;
 801bd2a:	68fb      	ldr	r3, [r7, #12]
 801bd2c:	6858      	ldr	r0, [r3, #4]
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	b299      	uxth	r1, r3
 801bd32:	683b      	ldr	r3, [r7, #0]
 801bd34:	9300      	str	r3, [sp, #0]
 801bd36:	68bb      	ldr	r3, [r7, #8]
 801bd38:	2202      	movs	r2, #2
 801bd3a:	f7f6 fdc1 	bl	80128c0 <pifI2cDevice_Read>
 801bd3e:	4603      	mov	r3, r0
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	d101      	bne.n	801bd48 <_actStorageI2c_Read_2+0x40>
 801bd44:	2300      	movs	r3, #0
 801bd46:	e000      	b.n	801bd4a <_actStorageI2c_Read_2+0x42>
	return TRUE;
 801bd48:	2301      	movs	r3, #1
}
 801bd4a:	4618      	mov	r0, r3
 801bd4c:	3710      	adds	r7, #16
 801bd4e:	46bd      	mov	sp, r7
 801bd50:	bd80      	pop	{r7, pc}

0801bd52 <_actStorageI2c_Write_2>:

static BOOL _actStorageI2c_Write_2(PifStorage* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 801bd52:	b580      	push	{r7, lr}
 801bd54:	b086      	sub	sp, #24
 801bd56:	af02      	add	r7, sp, #8
 801bd58:	60f8      	str	r0, [r7, #12]
 801bd5a:	60b9      	str	r1, [r7, #8]
 801bd5c:	607a      	str	r2, [r7, #4]
 801bd5e:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (dst >> 16);
 801bd60:	68fb      	ldr	r3, [r7, #12]
 801bd62:	7a19      	ldrb	r1, [r3, #8]
 801bd64:	68bb      	ldr	r3, [r7, #8]
 801bd66:	0c1b      	lsrs	r3, r3, #16
 801bd68:	b2da      	uxtb	r2, r3
 801bd6a:	68fb      	ldr	r3, [r7, #12]
 801bd6c:	685b      	ldr	r3, [r3, #4]
 801bd6e:	430a      	orrs	r2, r1
 801bd70:	b2d2      	uxtb	r2, r2
 801bd72:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Write(p_owner->_p_i2c, dst & 0xFFFF, 2, src, size)) return FALSE;
 801bd74:	68fb      	ldr	r3, [r7, #12]
 801bd76:	6858      	ldr	r0, [r3, #4]
 801bd78:	68bb      	ldr	r3, [r7, #8]
 801bd7a:	b299      	uxth	r1, r3
 801bd7c:	683b      	ldr	r3, [r7, #0]
 801bd7e:	9300      	str	r3, [sp, #0]
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	2202      	movs	r2, #2
 801bd84:	f7f6 feca 	bl	8012b1c <pifI2cDevice_Write>
 801bd88:	4603      	mov	r3, r0
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	d101      	bne.n	801bd92 <_actStorageI2c_Write_2+0x40>
 801bd8e:	2300      	movs	r3, #0
 801bd90:	e009      	b.n	801bda6 <_actStorageI2c_Write_2+0x54>
	if (p_owner->__write_delay_ms) pifTaskManager_YieldMs(p_owner->__write_delay_ms);
 801bd92:	68fb      	ldr	r3, [r7, #12]
 801bd94:	7a5b      	ldrb	r3, [r3, #9]
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	d004      	beq.n	801bda4 <_actStorageI2c_Write_2+0x52>
 801bd9a:	68fb      	ldr	r3, [r7, #12]
 801bd9c:	7a5b      	ldrb	r3, [r3, #9]
 801bd9e:	4618      	mov	r0, r3
 801bda0:	f7f9 fb74 	bl	801548c <pifTaskManager_YieldMs>
	return TRUE;
 801bda4:	2301      	movs	r3, #1
}
 801bda6:	4618      	mov	r0, r3
 801bda8:	3710      	adds	r7, #16
 801bdaa:	46bd      	mov	sp, r7
 801bdac:	bd80      	pop	{r7, pc}
	...

0801bdb0 <pifStorage_AttachI2c>:
	p_owner->__act_write = act_write;
	return TRUE;
}

BOOL pifStorage_AttachI2c(PifStorage* p_owner, PifI2cPort* p_port, uint8_t addr, PifStorageI2cIAddrSize i_addr_size, uint8_t write_delay_ms)
{
 801bdb0:	b580      	push	{r7, lr}
 801bdb2:	b084      	sub	sp, #16
 801bdb4:	af00      	add	r7, sp, #0
 801bdb6:	60f8      	str	r0, [r7, #12]
 801bdb8:	60b9      	str	r1, [r7, #8]
 801bdba:	4611      	mov	r1, r2
 801bdbc:	461a      	mov	r2, r3
 801bdbe:	460b      	mov	r3, r1
 801bdc0:	71fb      	strb	r3, [r7, #7]
 801bdc2:	4613      	mov	r3, r2
 801bdc4:	71bb      	strb	r3, [r7, #6]
    if (!p_owner || !p_port) {
 801bdc6:	68fb      	ldr	r3, [r7, #12]
 801bdc8:	2b00      	cmp	r3, #0
 801bdca:	d002      	beq.n	801bdd2 <pifStorage_AttachI2c+0x22>
 801bdcc:	68bb      	ldr	r3, [r7, #8]
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	d104      	bne.n	801bddc <pifStorage_AttachI2c+0x2c>
    	pif_error = E_INVALID_PARAM;
 801bdd2:	4b1c      	ldr	r3, [pc, #112]	; (801be44 <pifStorage_AttachI2c+0x94>)
 801bdd4:	2201      	movs	r2, #1
 801bdd6:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801bdd8:	2300      	movs	r3, #0
 801bdda:	e02f      	b.n	801be3c <pifStorage_AttachI2c+0x8c>
    }

	p_owner->_p_i2c = pifI2cPort_AddDevice(p_port);
 801bddc:	68b8      	ldr	r0, [r7, #8]
 801bdde:	f7f6 fd37 	bl	8012850 <pifI2cPort_AddDevice>
 801bde2:	4602      	mov	r2, r0
 801bde4:	68fb      	ldr	r3, [r7, #12]
 801bde6:	605a      	str	r2, [r3, #4]
    if (!p_owner->_p_i2c) return FALSE;
 801bde8:	68fb      	ldr	r3, [r7, #12]
 801bdea:	685b      	ldr	r3, [r3, #4]
 801bdec:	2b00      	cmp	r3, #0
 801bdee:	d101      	bne.n	801bdf4 <pifStorage_AttachI2c+0x44>
 801bdf0:	2300      	movs	r3, #0
 801bdf2:	e023      	b.n	801be3c <pifStorage_AttachI2c+0x8c>

    p_owner->__addr = addr;
 801bdf4:	68fb      	ldr	r3, [r7, #12]
 801bdf6:	79fa      	ldrb	r2, [r7, #7]
 801bdf8:	721a      	strb	r2, [r3, #8]
    p_owner->_p_i2c->addr = addr;
 801bdfa:	68fb      	ldr	r3, [r7, #12]
 801bdfc:	685b      	ldr	r3, [r3, #4]
 801bdfe:	79fa      	ldrb	r2, [r7, #7]
 801be00:	701a      	strb	r2, [r3, #0]
    p_owner->__write_delay_ms = write_delay_ms;
 801be02:	68fb      	ldr	r3, [r7, #12]
 801be04:	7e3a      	ldrb	r2, [r7, #24]
 801be06:	725a      	strb	r2, [r3, #9]

    switch (i_addr_size) {
 801be08:	79bb      	ldrb	r3, [r7, #6]
 801be0a:	2b01      	cmp	r3, #1
 801be0c:	d007      	beq.n	801be1e <pifStorage_AttachI2c+0x6e>
 801be0e:	2b02      	cmp	r3, #2
 801be10:	d00c      	beq.n	801be2c <pifStorage_AttachI2c+0x7c>
		p_owner->__act_read = _actStorageI2c_Read_2;
		p_owner->__act_write = _actStorageI2c_Write_2;
    	break;

    default:
    	goto fail;
 801be12:	bf00      	nop
    }
	return TRUE;

fail:
	pifStorage_DetachI2c(p_owner);
 801be14:	68f8      	ldr	r0, [r7, #12]
 801be16:	f000 f81f 	bl	801be58 <pifStorage_DetachI2c>
	return FALSE;
 801be1a:	2300      	movs	r3, #0
 801be1c:	e00e      	b.n	801be3c <pifStorage_AttachI2c+0x8c>
		p_owner->__act_read = _actStorageI2c_Read_1;
 801be1e:	68fb      	ldr	r3, [r7, #12]
 801be20:	4a09      	ldr	r2, [pc, #36]	; (801be48 <pifStorage_AttachI2c+0x98>)
 801be22:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__act_write = _actStorageI2c_Write_1;
 801be24:	68fb      	ldr	r3, [r7, #12]
 801be26:	4a09      	ldr	r2, [pc, #36]	; (801be4c <pifStorage_AttachI2c+0x9c>)
 801be28:	62da      	str	r2, [r3, #44]	; 0x2c
    	break;
 801be2a:	e006      	b.n	801be3a <pifStorage_AttachI2c+0x8a>
		p_owner->__act_read = _actStorageI2c_Read_2;
 801be2c:	68fb      	ldr	r3, [r7, #12]
 801be2e:	4a08      	ldr	r2, [pc, #32]	; (801be50 <pifStorage_AttachI2c+0xa0>)
 801be30:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__act_write = _actStorageI2c_Write_2;
 801be32:	68fb      	ldr	r3, [r7, #12]
 801be34:	4a07      	ldr	r2, [pc, #28]	; (801be54 <pifStorage_AttachI2c+0xa4>)
 801be36:	62da      	str	r2, [r3, #44]	; 0x2c
    	break;
 801be38:	bf00      	nop
	return TRUE;
 801be3a:	2301      	movs	r3, #1
}
 801be3c:	4618      	mov	r0, r3
 801be3e:	3710      	adds	r7, #16
 801be40:	46bd      	mov	sp, r7
 801be42:	bd80      	pop	{r7, pc}
 801be44:	20001de0 	.word	0x20001de0
 801be48:	0801bc63 	.word	0x0801bc63
 801be4c:	0801bcad 	.word	0x0801bcad
 801be50:	0801bd09 	.word	0x0801bd09
 801be54:	0801bd53 	.word	0x0801bd53

0801be58 <pifStorage_DetachI2c>:

void pifStorage_DetachI2c(PifStorage* p_owner)
{
 801be58:	b580      	push	{r7, lr}
 801be5a:	b082      	sub	sp, #8
 801be5c:	af00      	add	r7, sp, #0
 801be5e:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_i2c) {
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	685b      	ldr	r3, [r3, #4]
 801be64:	2b00      	cmp	r3, #0
 801be66:	d00b      	beq.n	801be80 <pifStorage_DetachI2c+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	685b      	ldr	r3, [r3, #4]
 801be6c:	685a      	ldr	r2, [r3, #4]
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	685b      	ldr	r3, [r3, #4]
 801be72:	4619      	mov	r1, r3
 801be74:	4610      	mov	r0, r2
 801be76:	f7f6 fd0f 	bl	8012898 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	2200      	movs	r2, #0
 801be7e:	605a      	str	r2, [r3, #4]
	}
	p_owner->__act_read = NULL;
 801be80:	687b      	ldr	r3, [r7, #4]
 801be82:	2200      	movs	r2, #0
 801be84:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__act_write = NULL;
 801be86:	687b      	ldr	r3, [r7, #4]
 801be88:	2200      	movs	r2, #0
 801be8a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801be8c:	bf00      	nop
 801be8e:	3708      	adds	r7, #8
 801be90:	46bd      	mov	sp, r7
 801be92:	bd80      	pop	{r7, pc}

0801be94 <pifStorage_IsFormat>:

#ifdef __PIF_NO_USE_INLINE__

BOOL pifStorage_IsFormat(PifStorage* p_owner)
{
 801be94:	b580      	push	{r7, lr}
 801be96:	b082      	sub	sp, #8
 801be98:	af00      	add	r7, sp, #0
 801be9a:	6078      	str	r0, [r7, #4]
	return (*p_owner->__fn_is_format)(p_owner);
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	68db      	ldr	r3, [r3, #12]
 801bea0:	6878      	ldr	r0, [r7, #4]
 801bea2:	4798      	blx	r3
 801bea4:	4603      	mov	r3, r0
}
 801bea6:	4618      	mov	r0, r3
 801bea8:	3708      	adds	r7, #8
 801beaa:	46bd      	mov	sp, r7
 801beac:	bd80      	pop	{r7, pc}

0801beae <pifStorage_Format>:

BOOL pifStorage_Format(PifStorage* p_owner)
{
 801beae:	b580      	push	{r7, lr}
 801beb0:	b082      	sub	sp, #8
 801beb2:	af00      	add	r7, sp, #0
 801beb4:	6078      	str	r0, [r7, #4]
	return (*p_owner->__fn_format)(p_owner);
 801beb6:	687b      	ldr	r3, [r7, #4]
 801beb8:	691b      	ldr	r3, [r3, #16]
 801beba:	6878      	ldr	r0, [r7, #4]
 801bebc:	4798      	blx	r3
 801bebe:	4603      	mov	r3, r0
}
 801bec0:	4618      	mov	r0, r3
 801bec2:	3708      	adds	r7, #8
 801bec4:	46bd      	mov	sp, r7
 801bec6:	bd80      	pop	{r7, pc}

0801bec8 <pifStorage_Create>:

PifStorageDataInfoP pifStorage_Create(PifStorage* p_owner, uint16_t id, uint16_t size)
{
 801bec8:	b580      	push	{r7, lr}
 801beca:	b082      	sub	sp, #8
 801becc:	af00      	add	r7, sp, #0
 801bece:	6078      	str	r0, [r7, #4]
 801bed0:	460b      	mov	r3, r1
 801bed2:	807b      	strh	r3, [r7, #2]
 801bed4:	4613      	mov	r3, r2
 801bed6:	803b      	strh	r3, [r7, #0]
	return (*p_owner->__fn_create)(p_owner, id, size);
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	695b      	ldr	r3, [r3, #20]
 801bedc:	883a      	ldrh	r2, [r7, #0]
 801bede:	8879      	ldrh	r1, [r7, #2]
 801bee0:	6878      	ldr	r0, [r7, #4]
 801bee2:	4798      	blx	r3
 801bee4:	4603      	mov	r3, r0
}
 801bee6:	4618      	mov	r0, r3
 801bee8:	3708      	adds	r7, #8
 801beea:	46bd      	mov	sp, r7
 801beec:	bd80      	pop	{r7, pc}

0801beee <pifStorage_Open>:
{
	return (*p_owner->__fn_delete)(p_owner, id);
}

PifStorageDataInfoP pifStorage_Open(PifStorage* p_owner, uint16_t id)
{
 801beee:	b580      	push	{r7, lr}
 801bef0:	b082      	sub	sp, #8
 801bef2:	af00      	add	r7, sp, #0
 801bef4:	6078      	str	r0, [r7, #4]
 801bef6:	460b      	mov	r3, r1
 801bef8:	807b      	strh	r3, [r7, #2]
	return (*p_owner->__fn_open)(p_owner, id);
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	69db      	ldr	r3, [r3, #28]
 801befe:	887a      	ldrh	r2, [r7, #2]
 801bf00:	4611      	mov	r1, r2
 801bf02:	6878      	ldr	r0, [r7, #4]
 801bf04:	4798      	blx	r3
 801bf06:	4603      	mov	r3, r0
}
 801bf08:	4618      	mov	r0, r3
 801bf0a:	3708      	adds	r7, #8
 801bf0c:	46bd      	mov	sp, r7
 801bf0e:	bd80      	pop	{r7, pc}

0801bf10 <pifStorage_Read>:

BOOL pifStorage_Read(PifStorage* p_owner, uint8_t* p_dst, PifStorageDataInfoP p_src, size_t size)
{
 801bf10:	b590      	push	{r4, r7, lr}
 801bf12:	b085      	sub	sp, #20
 801bf14:	af00      	add	r7, sp, #0
 801bf16:	60f8      	str	r0, [r7, #12]
 801bf18:	60b9      	str	r1, [r7, #8]
 801bf1a:	607a      	str	r2, [r7, #4]
 801bf1c:	603b      	str	r3, [r7, #0]
	return (*p_owner->__fn_read)(p_owner, p_dst, p_src, size);
 801bf1e:	68fb      	ldr	r3, [r7, #12]
 801bf20:	6a1c      	ldr	r4, [r3, #32]
 801bf22:	683b      	ldr	r3, [r7, #0]
 801bf24:	687a      	ldr	r2, [r7, #4]
 801bf26:	68b9      	ldr	r1, [r7, #8]
 801bf28:	68f8      	ldr	r0, [r7, #12]
 801bf2a:	47a0      	blx	r4
 801bf2c:	4603      	mov	r3, r0
}
 801bf2e:	4618      	mov	r0, r3
 801bf30:	3714      	adds	r7, #20
 801bf32:	46bd      	mov	sp, r7
 801bf34:	bd90      	pop	{r4, r7, pc}

0801bf36 <pifStorage_Write>:

BOOL pifStorage_Write(PifStorage* p_owner, PifStorageDataInfoP p_dst, uint8_t* p_src, size_t size)
{
 801bf36:	b590      	push	{r4, r7, lr}
 801bf38:	b085      	sub	sp, #20
 801bf3a:	af00      	add	r7, sp, #0
 801bf3c:	60f8      	str	r0, [r7, #12]
 801bf3e:	60b9      	str	r1, [r7, #8]
 801bf40:	607a      	str	r2, [r7, #4]
 801bf42:	603b      	str	r3, [r7, #0]
	return (*p_owner->__fn_write)(p_owner, p_dst, p_src, size);
 801bf44:	68fb      	ldr	r3, [r7, #12]
 801bf46:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801bf48:	683b      	ldr	r3, [r7, #0]
 801bf4a:	687a      	ldr	r2, [r7, #4]
 801bf4c:	68b9      	ldr	r1, [r7, #8]
 801bf4e:	68f8      	ldr	r0, [r7, #12]
 801bf50:	47a0      	blx	r4
 801bf52:	4603      	mov	r3, r0
}
 801bf54:	4618      	mov	r0, r3
 801bf56:	3714      	adds	r7, #20
 801bf58:	46bd      	mov	sp, r7
 801bf5a:	bd90      	pop	{r4, r7, pc}

0801bf5c <_getNewDataNode>:

#define DATA_NODE_NULL	0xFFFF


static uint16_t _getNewDataNode(PifStorageVar* p_owner)
{
 801bf5c:	b480      	push	{r7}
 801bf5e:	b085      	sub	sp, #20
 801bf60:	af00      	add	r7, sp, #0
 801bf62:	6078      	str	r0, [r7, #4]
	uint16_t node;

	node = p_owner->_p_info->free_node;
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf68:	899b      	ldrh	r3, [r3, #12]
 801bf6a:	81fb      	strh	r3, [r7, #14]
	if (node == DATA_NODE_NULL) {
 801bf6c:	89fb      	ldrh	r3, [r7, #14]
 801bf6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bf72:	4293      	cmp	r3, r2
 801bf74:	d105      	bne.n	801bf82 <_getNewDataNode+0x26>
		pif_error = E_OVERFLOW_BUFFER;
 801bf76:	4b0c      	ldr	r3, [pc, #48]	; (801bfa8 <_getNewDataNode+0x4c>)
 801bf78:	2204      	movs	r2, #4
 801bf7a:	701a      	strb	r2, [r3, #0]
		return DATA_NODE_NULL;
 801bf7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bf80:	e00c      	b.n	801bf9c <_getNewDataNode+0x40>
	}

	p_owner->_p_info->free_node = p_owner->__p_data_info[node].next_node;
 801bf82:	687b      	ldr	r3, [r7, #4]
 801bf84:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801bf86:	89fa      	ldrh	r2, [r7, #14]
 801bf88:	4613      	mov	r3, r2
 801bf8a:	005b      	lsls	r3, r3, #1
 801bf8c:	4413      	add	r3, r2
 801bf8e:	009b      	lsls	r3, r3, #2
 801bf90:	18ca      	adds	r2, r1, r3
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf96:	88d2      	ldrh	r2, [r2, #6]
 801bf98:	819a      	strh	r2, [r3, #12]
	return node;
 801bf9a:	89fb      	ldrh	r3, [r7, #14]
}
 801bf9c:	4618      	mov	r0, r3
 801bf9e:	3714      	adds	r7, #20
 801bfa0:	46bd      	mov	sp, r7
 801bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfa6:	4770      	bx	lr
 801bfa8:	20001de0 	.word	0x20001de0

0801bfac <_readData>:

static BOOL _readData(PifStorageVar* p_owner, uint8_t* dst, uint32_t src, size_t size, uint16_t sector_size)
{
 801bfac:	b590      	push	{r4, r7, lr}
 801bfae:	b087      	sub	sp, #28
 801bfb0:	af00      	add	r7, sp, #0
 801bfb2:	60f8      	str	r0, [r7, #12]
 801bfb4:	60b9      	str	r1, [r7, #8]
 801bfb6:	607a      	str	r2, [r7, #4]
 801bfb8:	603b      	str	r3, [r7, #0]
	uint32_t ptr, len;

	ptr = 0;
 801bfba:	2300      	movs	r3, #0
 801bfbc:	617b      	str	r3, [r7, #20]
	while (size) {
 801bfbe:	e01d      	b.n	801bffc <_readData+0x50>
		len = size > sector_size ? sector_size : size;
 801bfc0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801bfc2:	683a      	ldr	r2, [r7, #0]
 801bfc4:	4293      	cmp	r3, r2
 801bfc6:	bf28      	it	cs
 801bfc8:	4613      	movcs	r3, r2
 801bfca:	613b      	str	r3, [r7, #16]
		if (!(*p_owner->parent.__act_read)(&p_owner->parent, dst + ptr, src + ptr, len)) return FALSE;
 801bfcc:	68fb      	ldr	r3, [r7, #12]
 801bfce:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801bfd0:	68f8      	ldr	r0, [r7, #12]
 801bfd2:	68ba      	ldr	r2, [r7, #8]
 801bfd4:	697b      	ldr	r3, [r7, #20]
 801bfd6:	18d1      	adds	r1, r2, r3
 801bfd8:	687a      	ldr	r2, [r7, #4]
 801bfda:	697b      	ldr	r3, [r7, #20]
 801bfdc:	441a      	add	r2, r3
 801bfde:	693b      	ldr	r3, [r7, #16]
 801bfe0:	47a0      	blx	r4
 801bfe2:	4603      	mov	r3, r0
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d101      	bne.n	801bfec <_readData+0x40>
 801bfe8:	2300      	movs	r3, #0
 801bfea:	e00b      	b.n	801c004 <_readData+0x58>

		ptr += len;
 801bfec:	697a      	ldr	r2, [r7, #20]
 801bfee:	693b      	ldr	r3, [r7, #16]
 801bff0:	4413      	add	r3, r2
 801bff2:	617b      	str	r3, [r7, #20]
		size -= len;
 801bff4:	683a      	ldr	r2, [r7, #0]
 801bff6:	693b      	ldr	r3, [r7, #16]
 801bff8:	1ad3      	subs	r3, r2, r3
 801bffa:	603b      	str	r3, [r7, #0]
	while (size) {
 801bffc:	683b      	ldr	r3, [r7, #0]
 801bffe:	2b00      	cmp	r3, #0
 801c000:	d1de      	bne.n	801bfc0 <_readData+0x14>
	}
	return TRUE;
 801c002:	2301      	movs	r3, #1
}
 801c004:	4618      	mov	r0, r3
 801c006:	371c      	adds	r7, #28
 801c008:	46bd      	mov	sp, r7
 801c00a:	bd90      	pop	{r4, r7, pc}

0801c00c <_writeData>:

static BOOL _writeData(PifStorageVar* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 801c00c:	b590      	push	{r4, r7, lr}
 801c00e:	b089      	sub	sp, #36	; 0x24
 801c010:	af00      	add	r7, sp, #0
 801c012:	60f8      	str	r0, [r7, #12]
 801c014:	60b9      	str	r1, [r7, #8]
 801c016:	607a      	str	r2, [r7, #4]
 801c018:	603b      	str	r3, [r7, #0]
	uint16_t sector_size = p_owner->_p_info->sector_size;
 801c01a:	68fb      	ldr	r3, [r7, #12]
 801c01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c01e:	88db      	ldrh	r3, [r3, #6]
 801c020:	837b      	strh	r3, [r7, #26]
	uint32_t ptr, len;

	ptr = 0;
 801c022:	2300      	movs	r3, #0
 801c024:	61fb      	str	r3, [r7, #28]
	while (size) {
 801c026:	e01d      	b.n	801c064 <_writeData+0x58>
		len = size > sector_size ? sector_size : size;
 801c028:	8b7b      	ldrh	r3, [r7, #26]
 801c02a:	683a      	ldr	r2, [r7, #0]
 801c02c:	4293      	cmp	r3, r2
 801c02e:	bf28      	it	cs
 801c030:	4613      	movcs	r3, r2
 801c032:	617b      	str	r3, [r7, #20]
		if (!(*p_owner->parent.__act_write)(&p_owner->parent, dst + ptr, src + ptr, len)) return FALSE;
 801c034:	68fb      	ldr	r3, [r7, #12]
 801c036:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801c038:	68f8      	ldr	r0, [r7, #12]
 801c03a:	68ba      	ldr	r2, [r7, #8]
 801c03c:	69fb      	ldr	r3, [r7, #28]
 801c03e:	18d1      	adds	r1, r2, r3
 801c040:	687a      	ldr	r2, [r7, #4]
 801c042:	69fb      	ldr	r3, [r7, #28]
 801c044:	441a      	add	r2, r3
 801c046:	697b      	ldr	r3, [r7, #20]
 801c048:	47a0      	blx	r4
 801c04a:	4603      	mov	r3, r0
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	d101      	bne.n	801c054 <_writeData+0x48>
 801c050:	2300      	movs	r3, #0
 801c052:	e00b      	b.n	801c06c <_writeData+0x60>

		ptr += len;
 801c054:	69fa      	ldr	r2, [r7, #28]
 801c056:	697b      	ldr	r3, [r7, #20]
 801c058:	4413      	add	r3, r2
 801c05a:	61fb      	str	r3, [r7, #28]
		size -= len;
 801c05c:	683a      	ldr	r2, [r7, #0]
 801c05e:	697b      	ldr	r3, [r7, #20]
 801c060:	1ad3      	subs	r3, r2, r3
 801c062:	603b      	str	r3, [r7, #0]
	while (size) {
 801c064:	683b      	ldr	r3, [r7, #0]
 801c066:	2b00      	cmp	r3, #0
 801c068:	d1de      	bne.n	801c028 <_writeData+0x1c>
	}
	return TRUE;
 801c06a:	2301      	movs	r3, #1
}
 801c06c:	4618      	mov	r0, r3
 801c06e:	3724      	adds	r7, #36	; 0x24
 801c070:	46bd      	mov	sp, r7
 801c072:	bd90      	pop	{r4, r7, pc}

0801c074 <pifStorageVar_Init>:

BOOL pifStorageVar_Init(PifStorageVar* p_owner, PifId id)
{
 801c074:	b580      	push	{r7, lr}
 801c076:	b082      	sub	sp, #8
 801c078:	af00      	add	r7, sp, #0
 801c07a:	6078      	str	r0, [r7, #4]
 801c07c:	460b      	mov	r3, r1
 801c07e:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	2b00      	cmp	r3, #0
 801c084:	d104      	bne.n	801c090 <pifStorageVar_Init+0x1c>
    	pif_error = E_INVALID_PARAM;
 801c086:	4b18      	ldr	r3, [pc, #96]	; (801c0e8 <pifStorageVar_Init+0x74>)
 801c088:	2201      	movs	r2, #1
 801c08a:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801c08c:	2300      	movs	r3, #0
 801c08e:	e027      	b.n	801c0e0 <pifStorageVar_Init+0x6c>
    }

	memset(p_owner, 0, sizeof(PifStorageVar));
 801c090:	2248      	movs	r2, #72	; 0x48
 801c092:	2100      	movs	r1, #0
 801c094:	6878      	ldr	r0, [r7, #4]
 801c096:	f007 ff11 	bl	8023ebc <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 801c09a:	887b      	ldrh	r3, [r7, #2]
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	d106      	bne.n	801c0ae <pifStorageVar_Init+0x3a>
 801c0a0:	4b12      	ldr	r3, [pc, #72]	; (801c0ec <pifStorageVar_Init+0x78>)
 801c0a2:	881b      	ldrh	r3, [r3, #0]
 801c0a4:	1c5a      	adds	r2, r3, #1
 801c0a6:	b291      	uxth	r1, r2
 801c0a8:	4a10      	ldr	r2, [pc, #64]	; (801c0ec <pifStorageVar_Init+0x78>)
 801c0aa:	8011      	strh	r1, [r2, #0]
 801c0ac:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	887a      	ldrh	r2, [r7, #2]
 801c0b2:	801a      	strh	r2, [r3, #0]

	p_owner->parent.__fn_is_format = pifStorageVar_IsFormat;
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	4a0e      	ldr	r2, [pc, #56]	; (801c0f0 <pifStorageVar_Init+0x7c>)
 801c0b8:	60da      	str	r2, [r3, #12]
	p_owner->parent.__fn_format = pifStorageVar_Format;
 801c0ba:	687b      	ldr	r3, [r7, #4]
 801c0bc:	4a0d      	ldr	r2, [pc, #52]	; (801c0f4 <pifStorageVar_Init+0x80>)
 801c0be:	611a      	str	r2, [r3, #16]
	p_owner->parent.__fn_create = pifStorageVar_Create;
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	4a0d      	ldr	r2, [pc, #52]	; (801c0f8 <pifStorageVar_Init+0x84>)
 801c0c4:	615a      	str	r2, [r3, #20]
	p_owner->parent.__fn_delete = pifStorageVar_Delete;
 801c0c6:	687b      	ldr	r3, [r7, #4]
 801c0c8:	4a0c      	ldr	r2, [pc, #48]	; (801c0fc <pifStorageVar_Init+0x88>)
 801c0ca:	619a      	str	r2, [r3, #24]
	p_owner->parent.__fn_open = pifStorageVar_Open;
 801c0cc:	687b      	ldr	r3, [r7, #4]
 801c0ce:	4a0c      	ldr	r2, [pc, #48]	; (801c100 <pifStorageVar_Init+0x8c>)
 801c0d0:	61da      	str	r2, [r3, #28]
	p_owner->parent.__fn_read = pifStorageVar_Read;
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	4a0b      	ldr	r2, [pc, #44]	; (801c104 <pifStorageVar_Init+0x90>)
 801c0d6:	621a      	str	r2, [r3, #32]
	p_owner->parent.__fn_write = pifStorageVar_Write;
 801c0d8:	687b      	ldr	r3, [r7, #4]
 801c0da:	4a0b      	ldr	r2, [pc, #44]	; (801c108 <pifStorageVar_Init+0x94>)
 801c0dc:	625a      	str	r2, [r3, #36]	; 0x24
	return TRUE;
 801c0de:	2301      	movs	r3, #1
}
 801c0e0:	4618      	mov	r0, r3
 801c0e2:	3708      	adds	r7, #8
 801c0e4:	46bd      	mov	sp, r7
 801c0e6:	bd80      	pop	{r7, pc}
 801c0e8:	20001de0 	.word	0x20001de0
 801c0ec:	20000128 	.word	0x20000128
 801c0f0:	0801c337 	.word	0x0801c337
 801c0f4:	0801c351 	.word	0x0801c351
 801c0f8:	0801c4f1 	.word	0x0801c4f1
 801c0fc:	0801c79d 	.word	0x0801c79d
 801c100:	0801c8b9 	.word	0x0801c8b9
 801c104:	0801c94d 	.word	0x0801c94d
 801c108:	0801c9a5 	.word	0x0801c9a5

0801c10c <pifStorageVar_Clear>:

void pifStorageVar_Clear(PifStorageVar* p_owner)
{
 801c10c:	b580      	push	{r7, lr}
 801c10e:	b082      	sub	sp, #8
 801c110:	af00      	add	r7, sp, #0
 801c112:	6078      	str	r0, [r7, #4]
    if (p_owner->__p_info_buffer) {
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c118:	2b00      	cmp	r3, #0
 801c11a:	d007      	beq.n	801c12c <pifStorageVar_Clear+0x20>
        free(p_owner->__p_info_buffer);
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c120:	4618      	mov	r0, r3
 801c122:	f007 feb5 	bl	8023e90 <free>
        p_owner->__p_info_buffer = NULL;
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	2200      	movs	r2, #0
 801c12a:	641a      	str	r2, [r3, #64]	; 0x40
    }
	p_owner->parent.__fn_is_format = NULL;
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	2200      	movs	r2, #0
 801c130:	60da      	str	r2, [r3, #12]
	p_owner->parent.__fn_format = NULL;
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	2200      	movs	r2, #0
 801c136:	611a      	str	r2, [r3, #16]
	p_owner->parent.__fn_create = NULL;
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	2200      	movs	r2, #0
 801c13c:	615a      	str	r2, [r3, #20]
	p_owner->parent.__fn_delete = NULL;
 801c13e:	687b      	ldr	r3, [r7, #4]
 801c140:	2200      	movs	r2, #0
 801c142:	619a      	str	r2, [r3, #24]
	p_owner->parent.__fn_open = NULL;
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	2200      	movs	r2, #0
 801c148:	61da      	str	r2, [r3, #28]
	p_owner->parent.__fn_read = NULL;
 801c14a:	687b      	ldr	r3, [r7, #4]
 801c14c:	2200      	movs	r2, #0
 801c14e:	621a      	str	r2, [r3, #32]
	p_owner->parent.__fn_write = NULL;
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	2200      	movs	r2, #0
 801c154:	625a      	str	r2, [r3, #36]	; 0x24
}
 801c156:	bf00      	nop
 801c158:	3708      	adds	r7, #8
 801c15a:	46bd      	mov	sp, r7
 801c15c:	bd80      	pop	{r7, pc}
	...

0801c160 <pifStorageVar_SetMedia>:

BOOL pifStorageVar_SetMedia(PifStorageVar* p_owner, uint16_t sector_size, uint32_t storage_volume, uint8_t data_info_count)
{
 801c160:	b590      	push	{r4, r7, lr}
 801c162:	b089      	sub	sp, #36	; 0x24
 801c164:	af02      	add	r7, sp, #8
 801c166:	60f8      	str	r0, [r7, #12]
 801c168:	607a      	str	r2, [r7, #4]
 801c16a:	461a      	mov	r2, r3
 801c16c:	460b      	mov	r3, r1
 801c16e:	817b      	strh	r3, [r7, #10]
 801c170:	4613      	mov	r3, r2
 801c172:	727b      	strb	r3, [r7, #9]
    PifStorageVarInfo* p_info;

    if (!p_owner || sector_size < 16 || !storage_volume || !data_info_count) {
 801c174:	68fb      	ldr	r3, [r7, #12]
 801c176:	2b00      	cmp	r3, #0
 801c178:	d008      	beq.n	801c18c <pifStorageVar_SetMedia+0x2c>
 801c17a:	897b      	ldrh	r3, [r7, #10]
 801c17c:	2b0f      	cmp	r3, #15
 801c17e:	d905      	bls.n	801c18c <pifStorageVar_SetMedia+0x2c>
 801c180:	687b      	ldr	r3, [r7, #4]
 801c182:	2b00      	cmp	r3, #0
 801c184:	d002      	beq.n	801c18c <pifStorageVar_SetMedia+0x2c>
 801c186:	7a7b      	ldrb	r3, [r7, #9]
 801c188:	2b00      	cmp	r3, #0
 801c18a:	d104      	bne.n	801c196 <pifStorageVar_SetMedia+0x36>
    	pif_error = E_INVALID_PARAM;
 801c18c:	4b5c      	ldr	r3, [pc, #368]	; (801c300 <pifStorageVar_SetMedia+0x1a0>)
 801c18e:	2201      	movs	r2, #1
 801c190:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801c192:	2300      	movs	r3, #0
 801c194:	e0af      	b.n	801c2f6 <pifStorageVar_SetMedia+0x196>
    }

    uint32_t max_sector_count = storage_volume / sector_size;
 801c196:	897b      	ldrh	r3, [r7, #10]
 801c198:	687a      	ldr	r2, [r7, #4]
 801c19a:	fbb2 f3f3 	udiv	r3, r2, r3
 801c19e:	617b      	str	r3, [r7, #20]
    if (!max_sector_count || max_sector_count > 65535) {
 801c1a0:	697b      	ldr	r3, [r7, #20]
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d003      	beq.n	801c1ae <pifStorageVar_SetMedia+0x4e>
 801c1a6:	697b      	ldr	r3, [r7, #20]
 801c1a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c1ac:	d304      	bcc.n	801c1b8 <pifStorageVar_SetMedia+0x58>
    	pif_error = E_INVALID_PARAM;
 801c1ae:	4b54      	ldr	r3, [pc, #336]	; (801c300 <pifStorageVar_SetMedia+0x1a0>)
 801c1b0:	2201      	movs	r2, #1
 801c1b2:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801c1b4:	2300      	movs	r3, #0
 801c1b6:	e09e      	b.n	801c2f6 <pifStorageVar_SetMedia+0x196>
    }

	p_owner->__info_sectors = (sizeof(PifStorageVarInfo) + sizeof(PifStorageVarDataInfo) * data_info_count + sector_size - 1) / sector_size;
 801c1b8:	7a7a      	ldrb	r2, [r7, #9]
 801c1ba:	4613      	mov	r3, r2
 801c1bc:	005b      	lsls	r3, r3, #1
 801c1be:	4413      	add	r3, r2
 801c1c0:	009b      	lsls	r3, r3, #2
 801c1c2:	461a      	mov	r2, r3
 801c1c4:	897b      	ldrh	r3, [r7, #10]
 801c1c6:	4413      	add	r3, r2
 801c1c8:	f103 020f 	add.w	r2, r3, #15
 801c1cc:	897b      	ldrh	r3, [r7, #10]
 801c1ce:	fbb2 f3f3 	udiv	r3, r2, r3
 801c1d2:	b29a      	uxth	r2, r3
 801c1d4:	68fb      	ldr	r3, [r7, #12]
 801c1d6:	879a      	strh	r2, [r3, #60]	; 0x3c
	p_owner->__info_bytes = p_owner->__info_sectors * sector_size;
 801c1d8:	68fb      	ldr	r3, [r7, #12]
 801c1da:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801c1dc:	461a      	mov	r2, r3
 801c1de:	897b      	ldrh	r3, [r7, #10]
 801c1e0:	fb02 f303 	mul.w	r3, r2, r3
 801c1e4:	461a      	mov	r2, r3
 801c1e6:	68fb      	ldr	r3, [r7, #12]
 801c1e8:	639a      	str	r2, [r3, #56]	; 0x38

    p_owner->__p_info_buffer = calloc(1, p_owner->__info_bytes);
 801c1ea:	68fb      	ldr	r3, [r7, #12]
 801c1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c1ee:	4619      	mov	r1, r3
 801c1f0:	2001      	movs	r0, #1
 801c1f2:	f007 fe13 	bl	8023e1c <calloc>
 801c1f6:	4603      	mov	r3, r0
 801c1f8:	461a      	mov	r2, r3
 801c1fa:	68fb      	ldr	r3, [r7, #12]
 801c1fc:	641a      	str	r2, [r3, #64]	; 0x40
    if (!p_owner->__p_info_buffer) {
 801c1fe:	68fb      	ldr	r3, [r7, #12]
 801c200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c202:	2b00      	cmp	r3, #0
 801c204:	d104      	bne.n	801c210 <pifStorageVar_SetMedia+0xb0>
		pif_error = E_OUT_OF_HEAP;
 801c206:	4b3e      	ldr	r3, [pc, #248]	; (801c300 <pifStorageVar_SetMedia+0x1a0>)
 801c208:	2203      	movs	r2, #3
 801c20a:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801c20c:	2300      	movs	r3, #0
 801c20e:	e072      	b.n	801c2f6 <pifStorageVar_SetMedia+0x196>
	}

    if (!_readData(p_owner, p_owner->__p_info_buffer, 0, p_owner->__info_bytes, sector_size)) {
 801c210:	68fb      	ldr	r3, [r7, #12]
 801c212:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801c214:	68fb      	ldr	r3, [r7, #12]
 801c216:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c218:	897b      	ldrh	r3, [r7, #10]
 801c21a:	9300      	str	r3, [sp, #0]
 801c21c:	4613      	mov	r3, r2
 801c21e:	2200      	movs	r2, #0
 801c220:	68f8      	ldr	r0, [r7, #12]
 801c222:	f7ff fec3 	bl	801bfac <_readData>
 801c226:	4603      	mov	r3, r0
 801c228:	2b00      	cmp	r3, #0
 801c22a:	d108      	bne.n	801c23e <pifStorageVar_SetMedia+0xde>
    	pif_error = E_ACCESS_FAILED;
 801c22c:	4b34      	ldr	r3, [pc, #208]	; (801c300 <pifStorageVar_SetMedia+0x1a0>)
 801c22e:	220d      	movs	r2, #13
 801c230:	701a      	strb	r2, [r3, #0]
    	goto fail;
 801c232:	bf00      	nop
	p_info->sector_size = sector_size;
	p_info->max_sector_count = max_sector_count;
	return TRUE;

fail:
	if (p_owner->__p_info_buffer) {
 801c234:	68fb      	ldr	r3, [r7, #12]
 801c236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c238:	2b00      	cmp	r3, #0
 801c23a:	d05b      	beq.n	801c2f4 <pifStorageVar_SetMedia+0x194>
 801c23c:	e052      	b.n	801c2e4 <pifStorageVar_SetMedia+0x184>
    p_owner->_p_info = (PifStorageVarInfo*)p_owner->__p_info_buffer;
 801c23e:	68fb      	ldr	r3, [r7, #12]
 801c240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801c242:	68fb      	ldr	r3, [r7, #12]
 801c244:	631a      	str	r2, [r3, #48]	; 0x30
    p_owner->__p_data_info = (PifStorageVarDataInfo*)(p_owner->__p_info_buffer + sizeof(PifStorageVarInfo));
 801c246:	68fb      	ldr	r3, [r7, #12]
 801c248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c24a:	f103 0210 	add.w	r2, r3, #16
 801c24e:	68fb      	ldr	r3, [r7, #12]
 801c250:	645a      	str	r2, [r3, #68]	; 0x44
    p_info = p_owner->_p_info;
 801c252:	68fb      	ldr	r3, [r7, #12]
 801c254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c256:	613b      	str	r3, [r7, #16]
    if (p_info->magin_code[0] != 'p' || p_info->magin_code[1] != 'i' ||
 801c258:	693b      	ldr	r3, [r7, #16]
 801c25a:	781b      	ldrb	r3, [r3, #0]
 801c25c:	2b70      	cmp	r3, #112	; 0x70
 801c25e:	d121      	bne.n	801c2a4 <pifStorageVar_SetMedia+0x144>
 801c260:	693b      	ldr	r3, [r7, #16]
 801c262:	785b      	ldrb	r3, [r3, #1]
 801c264:	2b69      	cmp	r3, #105	; 0x69
 801c266:	d11d      	bne.n	801c2a4 <pifStorageVar_SetMedia+0x144>
            p_info->magin_code[2] != 'f' || p_info->magin_code[3] != 's') {
 801c268:	693b      	ldr	r3, [r7, #16]
 801c26a:	789b      	ldrb	r3, [r3, #2]
    if (p_info->magin_code[0] != 'p' || p_info->magin_code[1] != 'i' ||
 801c26c:	2b66      	cmp	r3, #102	; 0x66
 801c26e:	d119      	bne.n	801c2a4 <pifStorageVar_SetMedia+0x144>
            p_info->magin_code[2] != 'f' || p_info->magin_code[3] != 's') {
 801c270:	693b      	ldr	r3, [r7, #16]
 801c272:	78db      	ldrb	r3, [r3, #3]
 801c274:	2b73      	cmp	r3, #115	; 0x73
 801c276:	d115      	bne.n	801c2a4 <pifStorageVar_SetMedia+0x144>
    if (p_info->data_info_count != data_info_count) {
 801c278:	693b      	ldr	r3, [r7, #16]
 801c27a:	795b      	ldrb	r3, [r3, #5]
 801c27c:	7a7a      	ldrb	r2, [r7, #9]
 801c27e:	429a      	cmp	r2, r3
 801c280:	d112      	bne.n	801c2a8 <pifStorageVar_SetMedia+0x148>
    if (p_info->crc_16 != pifCrc16(p_owner->__p_info_buffer, sizeof(PifStorageVarInfo) - 6)) {
 801c282:	693b      	ldr	r3, [r7, #16]
 801c284:	89dc      	ldrh	r4, [r3, #14]
 801c286:	68fb      	ldr	r3, [r7, #12]
 801c288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c28a:	210a      	movs	r1, #10
 801c28c:	4618      	mov	r0, r3
 801c28e:	f7f5 ffd0 	bl	8012232 <pifCrc16>
 801c292:	4603      	mov	r3, r0
 801c294:	429c      	cmp	r4, r3
 801c296:	d109      	bne.n	801c2ac <pifStorageVar_SetMedia+0x14c>
	p_owner->__is_format = TRUE;
 801c298:	68fb      	ldr	r3, [r7, #12]
 801c29a:	2201      	movs	r2, #1
 801c29c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	return TRUE;
 801c2a0:	2301      	movs	r3, #1
 801c2a2:	e028      	b.n	801c2f6 <pifStorageVar_SetMedia+0x196>
        goto set;
 801c2a4:	bf00      	nop
 801c2a6:	e002      	b.n	801c2ae <pifStorageVar_SetMedia+0x14e>
        goto set;
 801c2a8:	bf00      	nop
 801c2aa:	e000      	b.n	801c2ae <pifStorageVar_SetMedia+0x14e>
        goto set;
 801c2ac:	bf00      	nop
	p_info->magin_code[0] = 'p';
 801c2ae:	693b      	ldr	r3, [r7, #16]
 801c2b0:	2270      	movs	r2, #112	; 0x70
 801c2b2:	701a      	strb	r2, [r3, #0]
	p_info->magin_code[1] = 'i';
 801c2b4:	693b      	ldr	r3, [r7, #16]
 801c2b6:	2269      	movs	r2, #105	; 0x69
 801c2b8:	705a      	strb	r2, [r3, #1]
	p_info->magin_code[2] = 'f';
 801c2ba:	693b      	ldr	r3, [r7, #16]
 801c2bc:	2266      	movs	r2, #102	; 0x66
 801c2be:	709a      	strb	r2, [r3, #2]
	p_info->magin_code[3] = 's';
 801c2c0:	693b      	ldr	r3, [r7, #16]
 801c2c2:	2273      	movs	r2, #115	; 0x73
 801c2c4:	70da      	strb	r2, [r3, #3]
	p_info->verion = 1;
 801c2c6:	693b      	ldr	r3, [r7, #16]
 801c2c8:	2201      	movs	r2, #1
 801c2ca:	711a      	strb	r2, [r3, #4]
	p_info->data_info_count = data_info_count;
 801c2cc:	693b      	ldr	r3, [r7, #16]
 801c2ce:	7a7a      	ldrb	r2, [r7, #9]
 801c2d0:	715a      	strb	r2, [r3, #5]
	p_info->sector_size = sector_size;
 801c2d2:	693b      	ldr	r3, [r7, #16]
 801c2d4:	897a      	ldrh	r2, [r7, #10]
 801c2d6:	80da      	strh	r2, [r3, #6]
	p_info->max_sector_count = max_sector_count;
 801c2d8:	697b      	ldr	r3, [r7, #20]
 801c2da:	b29a      	uxth	r2, r3
 801c2dc:	693b      	ldr	r3, [r7, #16]
 801c2de:	811a      	strh	r2, [r3, #8]
	return TRUE;
 801c2e0:	2301      	movs	r3, #1
 801c2e2:	e008      	b.n	801c2f6 <pifStorageVar_SetMedia+0x196>
		free(p_owner->__p_info_buffer);
 801c2e4:	68fb      	ldr	r3, [r7, #12]
 801c2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c2e8:	4618      	mov	r0, r3
 801c2ea:	f007 fdd1 	bl	8023e90 <free>
		p_owner->__p_info_buffer = NULL;
 801c2ee:	68fb      	ldr	r3, [r7, #12]
 801c2f0:	2200      	movs	r2, #0
 801c2f2:	641a      	str	r2, [r3, #64]	; 0x40
	}
    return FALSE;
 801c2f4:	2300      	movs	r3, #0
}
 801c2f6:	4618      	mov	r0, r3
 801c2f8:	371c      	adds	r7, #28
 801c2fa:	46bd      	mov	sp, r7
 801c2fc:	bd90      	pop	{r4, r7, pc}
 801c2fe:	bf00      	nop
 801c300:	20001de0 	.word	0x20001de0

0801c304 <pifStorageVar_AttachI2c>:
{
	return pifStorage_AttachActStorage(&p_owner->parent, act_read, act_write);
}

BOOL pifStorageVar_AttachI2c(PifStorageVar* p_owner, PifI2cPort* p_port, uint8_t addr, PifStorageI2cIAddrSize i_addr_size, uint8_t write_delay_ms)
{
 801c304:	b580      	push	{r7, lr}
 801c306:	b086      	sub	sp, #24
 801c308:	af02      	add	r7, sp, #8
 801c30a:	60f8      	str	r0, [r7, #12]
 801c30c:	60b9      	str	r1, [r7, #8]
 801c30e:	4611      	mov	r1, r2
 801c310:	461a      	mov	r2, r3
 801c312:	460b      	mov	r3, r1
 801c314:	71fb      	strb	r3, [r7, #7]
 801c316:	4613      	mov	r3, r2
 801c318:	71bb      	strb	r3, [r7, #6]
	return pifStorage_AttachI2c(&p_owner->parent, p_port, addr, i_addr_size, write_delay_ms);
 801c31a:	68f8      	ldr	r0, [r7, #12]
 801c31c:	79b9      	ldrb	r1, [r7, #6]
 801c31e:	79fa      	ldrb	r2, [r7, #7]
 801c320:	7e3b      	ldrb	r3, [r7, #24]
 801c322:	9300      	str	r3, [sp, #0]
 801c324:	460b      	mov	r3, r1
 801c326:	68b9      	ldr	r1, [r7, #8]
 801c328:	f7ff fd42 	bl	801bdb0 <pifStorage_AttachI2c>
 801c32c:	4603      	mov	r3, r0
}
 801c32e:	4618      	mov	r0, r3
 801c330:	3710      	adds	r7, #16
 801c332:	46bd      	mov	sp, r7
 801c334:	bd80      	pop	{r7, pc}

0801c336 <pifStorageVar_IsFormat>:

#endif

BOOL pifStorageVar_IsFormat(PifStorage* p_parent)
{
 801c336:	b480      	push	{r7}
 801c338:	b083      	sub	sp, #12
 801c33a:	af00      	add	r7, sp, #0
 801c33c:	6078      	str	r0, [r7, #4]
	return ((PifStorageVar*)p_parent)->__is_format;
 801c33e:	687b      	ldr	r3, [r7, #4]
 801c340:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801c344:	4618      	mov	r0, r3
 801c346:	370c      	adds	r7, #12
 801c348:	46bd      	mov	sp, r7
 801c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c34e:	4770      	bx	lr

0801c350 <pifStorageVar_Format>:

BOOL pifStorageVar_Format(PifStorage* p_parent)
{
 801c350:	b590      	push	{r4, r7, lr}
 801c352:	b08d      	sub	sp, #52	; 0x34
 801c354:	af00      	add	r7, sp, #0
 801c356:	6078      	str	r0, [r7, #4]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	627b      	str	r3, [r7, #36]	; 0x24
    PifStorageVarInfo* p_info = p_owner->_p_info;
 801c35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c360:	623b      	str	r3, [r7, #32]
    PifStorageVarDataInfo* p_data_info;
    uint8_t ptr, remain, k, len, data[16];

    if (!p_owner) {
 801c362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c364:	2b00      	cmp	r3, #0
 801c366:	d104      	bne.n	801c372 <pifStorageVar_Format+0x22>
    	pif_error = E_INVALID_PARAM;
 801c368:	4b60      	ldr	r3, [pc, #384]	; (801c4ec <pifStorageVar_Format+0x19c>)
 801c36a:	2201      	movs	r2, #1
 801c36c:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801c36e:	2300      	movs	r3, #0
 801c370:	e0b8      	b.n	801c4e4 <pifStorageVar_Format+0x194>
    }

	p_info->first_node = DATA_NODE_NULL;
 801c372:	6a3b      	ldr	r3, [r7, #32]
 801c374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c378:	815a      	strh	r2, [r3, #10]
	p_info->free_node = 0;
 801c37a:	6a3b      	ldr	r3, [r7, #32]
 801c37c:	2200      	movs	r2, #0
 801c37e:	819a      	strh	r2, [r3, #12]
    p_info->crc_16 = pifCrc16((uint8_t*)p_info, sizeof(PifStorageVarInfo) - 6);
 801c380:	210a      	movs	r1, #10
 801c382:	6a38      	ldr	r0, [r7, #32]
 801c384:	f7f5 ff55 	bl	8012232 <pifCrc16>
 801c388:	4603      	mov	r3, r0
 801c38a:	461a      	mov	r2, r3
 801c38c:	6a3b      	ldr	r3, [r7, #32]
 801c38e:	81da      	strh	r2, [r3, #14]

    memset(p_owner->__p_info_buffer + sizeof(PifStorageVarInfo), 0xFF, p_owner->__info_bytes - sizeof(PifStorageVarInfo));
 801c390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c394:	f103 0010 	add.w	r0, r3, #16
 801c398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c39c:	3b10      	subs	r3, #16
 801c39e:	461a      	mov	r2, r3
 801c3a0:	21ff      	movs	r1, #255	; 0xff
 801c3a2:	f007 fd8b 	bl	8023ebc <memset>

    for (int i = 0; i < p_info->data_info_count - 1; i++) {
 801c3a6:	2300      	movs	r3, #0
 801c3a8:	62bb      	str	r3, [r7, #40]	; 0x28
 801c3aa:	e019      	b.n	801c3e0 <pifStorageVar_Format+0x90>
    	p_data_info = &p_owner->__p_data_info[i];
 801c3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3ae:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801c3b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c3b2:	4613      	mov	r3, r2
 801c3b4:	005b      	lsls	r3, r3, #1
 801c3b6:	4413      	add	r3, r2
 801c3b8:	009b      	lsls	r3, r3, #2
 801c3ba:	440b      	add	r3, r1
 801c3bc:	61fb      	str	r3, [r7, #28]
    	p_data_info->next_node = i + 1;
 801c3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c3c0:	b29b      	uxth	r3, r3
 801c3c2:	3301      	adds	r3, #1
 801c3c4:	b29a      	uxth	r2, r3
 801c3c6:	69fb      	ldr	r3, [r7, #28]
 801c3c8:	80da      	strh	r2, [r3, #6]
    	p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801c3ca:	2106      	movs	r1, #6
 801c3cc:	69f8      	ldr	r0, [r7, #28]
 801c3ce:	f7f5 ff30 	bl	8012232 <pifCrc16>
 801c3d2:	4603      	mov	r3, r0
 801c3d4:	461a      	mov	r2, r3
 801c3d6:	69fb      	ldr	r3, [r7, #28]
 801c3d8:	815a      	strh	r2, [r3, #10]
    for (int i = 0; i < p_info->data_info_count - 1; i++) {
 801c3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c3dc:	3301      	adds	r3, #1
 801c3de:	62bb      	str	r3, [r7, #40]	; 0x28
 801c3e0:	6a3b      	ldr	r3, [r7, #32]
 801c3e2:	795b      	ldrb	r3, [r3, #5]
 801c3e4:	3b01      	subs	r3, #1
 801c3e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c3e8:	429a      	cmp	r2, r3
 801c3ea:	dbdf      	blt.n	801c3ac <pifStorageVar_Format+0x5c>
	}
	p_data_info = &p_owner->__p_data_info[p_info->data_info_count - 1];
 801c3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c3f0:	6a3b      	ldr	r3, [r7, #32]
 801c3f2:	795b      	ldrb	r3, [r3, #5]
 801c3f4:	4619      	mov	r1, r3
 801c3f6:	460b      	mov	r3, r1
 801c3f8:	005b      	lsls	r3, r3, #1
 801c3fa:	440b      	add	r3, r1
 801c3fc:	009b      	lsls	r3, r3, #2
 801c3fe:	3b0c      	subs	r3, #12
 801c400:	4413      	add	r3, r2
 801c402:	61fb      	str	r3, [r7, #28]
	p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801c404:	2106      	movs	r1, #6
 801c406:	69f8      	ldr	r0, [r7, #28]
 801c408:	f7f5 ff13 	bl	8012232 <pifCrc16>
 801c40c:	4603      	mov	r3, r0
 801c40e:	461a      	mov	r2, r3
 801c410:	69fb      	ldr	r3, [r7, #28]
 801c412:	815a      	strh	r2, [r3, #10]

    if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801c414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801c418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c41a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c41c:	2100      	movs	r1, #0
 801c41e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c420:	f7ff fdf4 	bl	801c00c <_writeData>
 801c424:	4603      	mov	r3, r0
 801c426:	2b00      	cmp	r3, #0
 801c428:	d104      	bne.n	801c434 <pifStorageVar_Format+0xe4>
    	pif_error = E_ACCESS_FAILED;
 801c42a:	4b30      	ldr	r3, [pc, #192]	; (801c4ec <pifStorageVar_Format+0x19c>)
 801c42c:	220d      	movs	r2, #13
 801c42e:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801c430:	2300      	movs	r3, #0
 801c432:	e057      	b.n	801c4e4 <pifStorageVar_Format+0x194>
    }

    ptr = 0;
 801c434:	2300      	movs	r3, #0
 801c436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    remain = p_owner->__info_bytes;
 801c43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c43e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    while (remain) {
 801c442:	e046      	b.n	801c4d2 <pifStorageVar_Format+0x182>
    	len = remain > 16 ? 16 : remain;
 801c444:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801c448:	2b10      	cmp	r3, #16
 801c44a:	bf28      	it	cs
 801c44c:	2310      	movcs	r3, #16
 801c44e:	76fb      	strb	r3, [r7, #27]
        if (!(*p_owner->parent.__act_read)(p_parent, data, ptr, len)) {
 801c450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c452:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801c454:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801c458:	7efb      	ldrb	r3, [r7, #27]
 801c45a:	f107 0108 	add.w	r1, r7, #8
 801c45e:	6878      	ldr	r0, [r7, #4]
 801c460:	47a0      	blx	r4
 801c462:	4603      	mov	r3, r0
 801c464:	2b00      	cmp	r3, #0
 801c466:	d104      	bne.n	801c472 <pifStorageVar_Format+0x122>
        	pif_error = E_ACCESS_FAILED;
 801c468:	4b20      	ldr	r3, [pc, #128]	; (801c4ec <pifStorageVar_Format+0x19c>)
 801c46a:	220d      	movs	r2, #13
 801c46c:	701a      	strb	r2, [r3, #0]
            return FALSE;
 801c46e:	2300      	movs	r3, #0
 801c470:	e038      	b.n	801c4e4 <pifStorageVar_Format+0x194>
        }
        for (k = 0; k < len; k++) {
 801c472:	2300      	movs	r3, #0
 801c474:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801c478:	e01a      	b.n	801c4b0 <pifStorageVar_Format+0x160>
        	if (p_owner->__p_info_buffer[ptr + k] != data[k]) {
 801c47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c47e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 801c482:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801c486:	440a      	add	r2, r1
 801c488:	4413      	add	r3, r2
 801c48a:	781a      	ldrb	r2, [r3, #0]
 801c48c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801c490:	3330      	adds	r3, #48	; 0x30
 801c492:	443b      	add	r3, r7
 801c494:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801c498:	429a      	cmp	r2, r3
 801c49a:	d004      	beq.n	801c4a6 <pifStorageVar_Format+0x156>
            	pif_error = E_IS_NOT_FORMATED;
 801c49c:	4b13      	ldr	r3, [pc, #76]	; (801c4ec <pifStorageVar_Format+0x19c>)
 801c49e:	220f      	movs	r2, #15
 801c4a0:	701a      	strb	r2, [r3, #0]
        		return FALSE;
 801c4a2:	2300      	movs	r3, #0
 801c4a4:	e01e      	b.n	801c4e4 <pifStorageVar_Format+0x194>
        for (k = 0; k < len; k++) {
 801c4a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801c4aa:	3301      	adds	r3, #1
 801c4ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801c4b0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801c4b4:	7efb      	ldrb	r3, [r7, #27]
 801c4b6:	429a      	cmp	r2, r3
 801c4b8:	d3df      	bcc.n	801c47a <pifStorageVar_Format+0x12a>
        	}
        }
        ptr += len;
 801c4ba:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801c4be:	7efb      	ldrb	r3, [r7, #27]
 801c4c0:	4413      	add	r3, r2
 801c4c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        remain -= len;
 801c4c6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801c4ca:	7efb      	ldrb	r3, [r7, #27]
 801c4cc:	1ad3      	subs	r3, r2, r3
 801c4ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    while (remain) {
 801c4d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	d1b4      	bne.n	801c444 <pifStorageVar_Format+0xf4>
    }

    p_owner->__is_format = TRUE;
 801c4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4dc:	2201      	movs	r2, #1
 801c4de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	return TRUE;
 801c4e2:	2301      	movs	r3, #1
}
 801c4e4:	4618      	mov	r0, r3
 801c4e6:	3734      	adds	r7, #52	; 0x34
 801c4e8:	46bd      	mov	sp, r7
 801c4ea:	bd90      	pop	{r4, r7, pc}
 801c4ec:	20001de0 	.word	0x20001de0

0801c4f0 <pifStorageVar_Create>:

PifStorageDataInfoP pifStorageVar_Create(PifStorage* p_parent, uint16_t id, uint16_t size)
{
 801c4f0:	b580      	push	{r7, lr}
 801c4f2:	b08a      	sub	sp, #40	; 0x28
 801c4f4:	af00      	add	r7, sp, #0
 801c4f6:	6078      	str	r0, [r7, #4]
 801c4f8:	460b      	mov	r3, r1
 801c4fa:	807b      	strh	r3, [r7, #2]
 801c4fc:	4613      	mov	r3, r2
 801c4fe:	803b      	strh	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	61fb      	str	r3, [r7, #28]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801c504:	69fb      	ldr	r3, [r7, #28]
 801c506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c508:	61bb      	str	r3, [r7, #24]
	PifStorageVarDataInfo* p_cur_data;
	PifStorageVarDataInfo* p_new_data;
	uint16_t cur_node, new_node, last, sector_size = p_info->sector_size;
 801c50a:	69bb      	ldr	r3, [r7, #24]
 801c50c:	88db      	ldrh	r3, [r3, #6]
 801c50e:	82fb      	strh	r3, [r7, #22]
	uint16_t sectors = (size + sector_size - 1) / sector_size;
 801c510:	883a      	ldrh	r2, [r7, #0]
 801c512:	8afb      	ldrh	r3, [r7, #22]
 801c514:	4413      	add	r3, r2
 801c516:	1e5a      	subs	r2, r3, #1
 801c518:	8afb      	ldrh	r3, [r7, #22]
 801c51a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c51e:	82bb      	strh	r3, [r7, #20]

    if (!p_owner || id == 0xFF) {
 801c520:	69fb      	ldr	r3, [r7, #28]
 801c522:	2b00      	cmp	r3, #0
 801c524:	d002      	beq.n	801c52c <pifStorageVar_Create+0x3c>
 801c526:	887b      	ldrh	r3, [r7, #2]
 801c528:	2bff      	cmp	r3, #255	; 0xff
 801c52a:	d104      	bne.n	801c536 <pifStorageVar_Create+0x46>
    	pif_error = E_INVALID_PARAM;
 801c52c:	4b9a      	ldr	r3, [pc, #616]	; (801c798 <pifStorageVar_Create+0x2a8>)
 801c52e:	2201      	movs	r2, #1
 801c530:	701a      	strb	r2, [r3, #0]
	    return NULL;
 801c532:	2300      	movs	r3, #0
 801c534:	e12b      	b.n	801c78e <pifStorageVar_Create+0x29e>
    }

	if (!p_owner->__is_format) {
 801c536:	69fb      	ldr	r3, [r7, #28]
 801c538:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d104      	bne.n	801c54a <pifStorageVar_Create+0x5a>
		pif_error = E_IS_NOT_FORMATED;
 801c540:	4b95      	ldr	r3, [pc, #596]	; (801c798 <pifStorageVar_Create+0x2a8>)
 801c542:	220f      	movs	r2, #15
 801c544:	701a      	strb	r2, [r3, #0]
		return NULL;
 801c546:	2300      	movs	r3, #0
 801c548:	e121      	b.n	801c78e <pifStorageVar_Create+0x29e>
	}

	if (p_info->first_node == DATA_NODE_NULL) {
 801c54a:	69bb      	ldr	r3, [r7, #24]
 801c54c:	895b      	ldrh	r3, [r3, #10]
 801c54e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c552:	4293      	cmp	r3, r2
 801c554:	d127      	bne.n	801c5a6 <pifStorageVar_Create+0xb6>
		if (sectors > p_owner->_p_info->max_sector_count) {
 801c556:	69fb      	ldr	r3, [r7, #28]
 801c558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c55a:	891b      	ldrh	r3, [r3, #8]
 801c55c:	8aba      	ldrh	r2, [r7, #20]
 801c55e:	429a      	cmp	r2, r3
 801c560:	d904      	bls.n	801c56c <pifStorageVar_Create+0x7c>
			pif_error = E_OVERFLOW_BUFFER;
 801c562:	4b8d      	ldr	r3, [pc, #564]	; (801c798 <pifStorageVar_Create+0x2a8>)
 801c564:	2204      	movs	r2, #4
 801c566:	701a      	strb	r2, [r3, #0]
			return NULL;
 801c568:	2300      	movs	r3, #0
 801c56a:	e110      	b.n	801c78e <pifStorageVar_Create+0x29e>
		}

		last = p_owner->__info_sectors;
 801c56c:	69fb      	ldr	r3, [r7, #28]
 801c56e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801c570:	843b      	strh	r3, [r7, #32]

		new_node = _getNewDataNode(p_owner);
 801c572:	69f8      	ldr	r0, [r7, #28]
 801c574:	f7ff fcf2 	bl	801bf5c <_getNewDataNode>
 801c578:	4603      	mov	r3, r0
 801c57a:	81fb      	strh	r3, [r7, #14]

		p_new_data = &p_owner->__p_data_info[new_node];
 801c57c:	69fb      	ldr	r3, [r7, #28]
 801c57e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801c580:	89fa      	ldrh	r2, [r7, #14]
 801c582:	4613      	mov	r3, r2
 801c584:	005b      	lsls	r3, r3, #1
 801c586:	4413      	add	r3, r2
 801c588:	009b      	lsls	r3, r3, #2
 801c58a:	440b      	add	r3, r1
 801c58c:	627b      	str	r3, [r7, #36]	; 0x24
		p_new_data->next_node = p_info->first_node;
 801c58e:	69bb      	ldr	r3, [r7, #24]
 801c590:	895a      	ldrh	r2, [r3, #10]
 801c592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c594:	80da      	strh	r2, [r3, #6]
		p_new_data->prev_node = DATA_NODE_NULL;
 801c596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c59c:	811a      	strh	r2, [r3, #8]

		p_info->first_node = new_node;
 801c59e:	69bb      	ldr	r3, [r7, #24]
 801c5a0:	89fa      	ldrh	r2, [r7, #14]
 801c5a2:	815a      	strh	r2, [r3, #10]
		goto save;
 801c5a4:	e0d1      	b.n	801c74a <pifStorageVar_Create+0x25a>
	}
	else {
		cur_node = p_info->first_node;
 801c5a6:	69bb      	ldr	r3, [r7, #24]
 801c5a8:	895b      	ldrh	r3, [r3, #10]
 801c5aa:	847b      	strh	r3, [r7, #34]	; 0x22
		p_cur_data = &p_owner->__p_data_info[cur_node];
 801c5ac:	69fb      	ldr	r3, [r7, #28]
 801c5ae:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801c5b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c5b2:	4613      	mov	r3, r2
 801c5b4:	005b      	lsls	r3, r3, #1
 801c5b6:	4413      	add	r3, r2
 801c5b8:	009b      	lsls	r3, r3, #2
 801c5ba:	440b      	add	r3, r1
 801c5bc:	613b      	str	r3, [r7, #16]
		last = p_owner->__info_sectors;
 801c5be:	69fb      	ldr	r3, [r7, #28]
 801c5c0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801c5c2:	843b      	strh	r3, [r7, #32]
		if (p_cur_data->first_sector != last) {
 801c5c4:	693b      	ldr	r3, [r7, #16]
 801c5c6:	889b      	ldrh	r3, [r3, #4]
 801c5c8:	8c3a      	ldrh	r2, [r7, #32]
 801c5ca:	429a      	cmp	r2, r3
 801c5cc:	f000 80b2 	beq.w	801c734 <pifStorageVar_Create+0x244>
			if (p_cur_data->first_sector - last >= sectors) {
 801c5d0:	693b      	ldr	r3, [r7, #16]
 801c5d2:	889b      	ldrh	r3, [r3, #4]
 801c5d4:	461a      	mov	r2, r3
 801c5d6:	8c3b      	ldrh	r3, [r7, #32]
 801c5d8:	1ad2      	subs	r2, r2, r3
 801c5da:	8abb      	ldrh	r3, [r7, #20]
 801c5dc:	429a      	cmp	r2, r3
 801c5de:	f2c0 80a9 	blt.w	801c734 <pifStorageVar_Create+0x244>
				new_node = _getNewDataNode(p_owner);
 801c5e2:	69f8      	ldr	r0, [r7, #28]
 801c5e4:	f7ff fcba 	bl	801bf5c <_getNewDataNode>
 801c5e8:	4603      	mov	r3, r0
 801c5ea:	81fb      	strh	r3, [r7, #14]
				if (new_node == DATA_NODE_NULL) return NULL;
 801c5ec:	89fb      	ldrh	r3, [r7, #14]
 801c5ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c5f2:	4293      	cmp	r3, r2
 801c5f4:	d101      	bne.n	801c5fa <pifStorageVar_Create+0x10a>
 801c5f6:	2300      	movs	r3, #0
 801c5f8:	e0c9      	b.n	801c78e <pifStorageVar_Create+0x29e>

				p_new_data = &p_owner->__p_data_info[new_node];
 801c5fa:	69fb      	ldr	r3, [r7, #28]
 801c5fc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801c5fe:	89fa      	ldrh	r2, [r7, #14]
 801c600:	4613      	mov	r3, r2
 801c602:	005b      	lsls	r3, r3, #1
 801c604:	4413      	add	r3, r2
 801c606:	009b      	lsls	r3, r3, #2
 801c608:	440b      	add	r3, r1
 801c60a:	627b      	str	r3, [r7, #36]	; 0x24
				p_new_data->next_node = p_info->first_node;
 801c60c:	69bb      	ldr	r3, [r7, #24]
 801c60e:	895a      	ldrh	r2, [r3, #10]
 801c610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c612:	80da      	strh	r2, [r3, #6]
				p_new_data->prev_node = DATA_NODE_NULL;
 801c614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c61a:	811a      	strh	r2, [r3, #8]

				p_info->first_node = new_node;
 801c61c:	69bb      	ldr	r3, [r7, #24]
 801c61e:	89fa      	ldrh	r2, [r7, #14]
 801c620:	815a      	strh	r2, [r3, #10]
				p_cur_data->prev_node = new_node;
 801c622:	693b      	ldr	r3, [r7, #16]
 801c624:	89fa      	ldrh	r2, [r7, #14]
 801c626:	811a      	strh	r2, [r3, #8]
				goto save;
 801c628:	e08f      	b.n	801c74a <pifStorageVar_Create+0x25a>
			}
		}
		while (cur_node != DATA_NODE_NULL) {
			p_cur_data = &p_owner->__p_data_info[cur_node];
 801c62a:	69fb      	ldr	r3, [r7, #28]
 801c62c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801c62e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c630:	4613      	mov	r3, r2
 801c632:	005b      	lsls	r3, r3, #1
 801c634:	4413      	add	r3, r2
 801c636:	009b      	lsls	r3, r3, #2
 801c638:	440b      	add	r3, r1
 801c63a:	613b      	str	r3, [r7, #16]
			last = p_cur_data->first_sector + (p_cur_data->size + sector_size - 1) / sector_size;
 801c63c:	693b      	ldr	r3, [r7, #16]
 801c63e:	889a      	ldrh	r2, [r3, #4]
 801c640:	693b      	ldr	r3, [r7, #16]
 801c642:	885b      	ldrh	r3, [r3, #2]
 801c644:	4619      	mov	r1, r3
 801c646:	8afb      	ldrh	r3, [r7, #22]
 801c648:	440b      	add	r3, r1
 801c64a:	1e59      	subs	r1, r3, #1
 801c64c:	8afb      	ldrh	r3, [r7, #22]
 801c64e:	fb91 f3f3 	sdiv	r3, r1, r3
 801c652:	b29b      	uxth	r3, r3
 801c654:	4413      	add	r3, r2
 801c656:	843b      	strh	r3, [r7, #32]
			if (p_cur_data->next_node == DATA_NODE_NULL) {
 801c658:	693b      	ldr	r3, [r7, #16]
 801c65a:	88db      	ldrh	r3, [r3, #6]
 801c65c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c660:	4293      	cmp	r3, r2
 801c662:	d127      	bne.n	801c6b4 <pifStorageVar_Create+0x1c4>
				if (p_info->max_sector_count - last >= sectors) {
 801c664:	69bb      	ldr	r3, [r7, #24]
 801c666:	891b      	ldrh	r3, [r3, #8]
 801c668:	461a      	mov	r2, r3
 801c66a:	8c3b      	ldrh	r3, [r7, #32]
 801c66c:	1ad2      	subs	r2, r2, r3
 801c66e:	8abb      	ldrh	r3, [r7, #20]
 801c670:	429a      	cmp	r2, r3
 801c672:	db5c      	blt.n	801c72e <pifStorageVar_Create+0x23e>
					new_node = _getNewDataNode(p_owner);
 801c674:	69f8      	ldr	r0, [r7, #28]
 801c676:	f7ff fc71 	bl	801bf5c <_getNewDataNode>
 801c67a:	4603      	mov	r3, r0
 801c67c:	81fb      	strh	r3, [r7, #14]
					if (new_node == DATA_NODE_NULL) return NULL;
 801c67e:	89fb      	ldrh	r3, [r7, #14]
 801c680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c684:	4293      	cmp	r3, r2
 801c686:	d101      	bne.n	801c68c <pifStorageVar_Create+0x19c>
 801c688:	2300      	movs	r3, #0
 801c68a:	e080      	b.n	801c78e <pifStorageVar_Create+0x29e>

					p_new_data = &p_owner->__p_data_info[new_node];
 801c68c:	69fb      	ldr	r3, [r7, #28]
 801c68e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801c690:	89fa      	ldrh	r2, [r7, #14]
 801c692:	4613      	mov	r3, r2
 801c694:	005b      	lsls	r3, r3, #1
 801c696:	4413      	add	r3, r2
 801c698:	009b      	lsls	r3, r3, #2
 801c69a:	440b      	add	r3, r1
 801c69c:	627b      	str	r3, [r7, #36]	; 0x24
					p_new_data->next_node = p_cur_data->next_node;
 801c69e:	693b      	ldr	r3, [r7, #16]
 801c6a0:	88da      	ldrh	r2, [r3, #6]
 801c6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6a4:	80da      	strh	r2, [r3, #6]
					p_new_data->prev_node = cur_node;
 801c6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6a8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c6aa:	811a      	strh	r2, [r3, #8]

					p_cur_data->next_node = new_node;
 801c6ac:	693b      	ldr	r3, [r7, #16]
 801c6ae:	89fa      	ldrh	r2, [r7, #14]
 801c6b0:	80da      	strh	r2, [r3, #6]
					goto save;
 801c6b2:	e04a      	b.n	801c74a <pifStorageVar_Create+0x25a>
				}
			}
			else {
				if (p_owner->__p_data_info[p_cur_data->next_node].first_sector - last >= sectors) {
 801c6b4:	69fb      	ldr	r3, [r7, #28]
 801c6b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c6b8:	693b      	ldr	r3, [r7, #16]
 801c6ba:	88db      	ldrh	r3, [r3, #6]
 801c6bc:	4619      	mov	r1, r3
 801c6be:	460b      	mov	r3, r1
 801c6c0:	005b      	lsls	r3, r3, #1
 801c6c2:	440b      	add	r3, r1
 801c6c4:	009b      	lsls	r3, r3, #2
 801c6c6:	4413      	add	r3, r2
 801c6c8:	889b      	ldrh	r3, [r3, #4]
 801c6ca:	461a      	mov	r2, r3
 801c6cc:	8c3b      	ldrh	r3, [r7, #32]
 801c6ce:	1ad2      	subs	r2, r2, r3
 801c6d0:	8abb      	ldrh	r3, [r7, #20]
 801c6d2:	429a      	cmp	r2, r3
 801c6d4:	db2b      	blt.n	801c72e <pifStorageVar_Create+0x23e>
					new_node = _getNewDataNode(p_owner);
 801c6d6:	69f8      	ldr	r0, [r7, #28]
 801c6d8:	f7ff fc40 	bl	801bf5c <_getNewDataNode>
 801c6dc:	4603      	mov	r3, r0
 801c6de:	81fb      	strh	r3, [r7, #14]
					if (new_node == DATA_NODE_NULL) return NULL;
 801c6e0:	89fb      	ldrh	r3, [r7, #14]
 801c6e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c6e6:	4293      	cmp	r3, r2
 801c6e8:	d101      	bne.n	801c6ee <pifStorageVar_Create+0x1fe>
 801c6ea:	2300      	movs	r3, #0
 801c6ec:	e04f      	b.n	801c78e <pifStorageVar_Create+0x29e>

					p_new_data = &p_owner->__p_data_info[new_node];
 801c6ee:	69fb      	ldr	r3, [r7, #28]
 801c6f0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801c6f2:	89fa      	ldrh	r2, [r7, #14]
 801c6f4:	4613      	mov	r3, r2
 801c6f6:	005b      	lsls	r3, r3, #1
 801c6f8:	4413      	add	r3, r2
 801c6fa:	009b      	lsls	r3, r3, #2
 801c6fc:	440b      	add	r3, r1
 801c6fe:	627b      	str	r3, [r7, #36]	; 0x24
					p_new_data->next_node = p_cur_data->next_node;
 801c700:	693b      	ldr	r3, [r7, #16]
 801c702:	88da      	ldrh	r2, [r3, #6]
 801c704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c706:	80da      	strh	r2, [r3, #6]
					p_new_data->prev_node = cur_node;
 801c708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c70a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c70c:	811a      	strh	r2, [r3, #8]

					p_owner->__p_data_info[p_cur_data->next_node].prev_node = new_node;
 801c70e:	69fb      	ldr	r3, [r7, #28]
 801c710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c712:	693b      	ldr	r3, [r7, #16]
 801c714:	88db      	ldrh	r3, [r3, #6]
 801c716:	4619      	mov	r1, r3
 801c718:	460b      	mov	r3, r1
 801c71a:	005b      	lsls	r3, r3, #1
 801c71c:	440b      	add	r3, r1
 801c71e:	009b      	lsls	r3, r3, #2
 801c720:	4413      	add	r3, r2
 801c722:	89fa      	ldrh	r2, [r7, #14]
 801c724:	811a      	strh	r2, [r3, #8]
					p_cur_data->next_node = new_node;
 801c726:	693b      	ldr	r3, [r7, #16]
 801c728:	89fa      	ldrh	r2, [r7, #14]
 801c72a:	80da      	strh	r2, [r3, #6]
					goto save;
 801c72c:	e00d      	b.n	801c74a <pifStorageVar_Create+0x25a>
				}
			}
			cur_node = p_cur_data->next_node;
 801c72e:	693b      	ldr	r3, [r7, #16]
 801c730:	88db      	ldrh	r3, [r3, #6]
 801c732:	847b      	strh	r3, [r7, #34]	; 0x22
		while (cur_node != DATA_NODE_NULL) {
 801c734:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c73a:	4293      	cmp	r3, r2
 801c73c:	f47f af75 	bne.w	801c62a <pifStorageVar_Create+0x13a>
		}
	}
	pif_error = E_OVERFLOW_BUFFER;
 801c740:	4b15      	ldr	r3, [pc, #84]	; (801c798 <pifStorageVar_Create+0x2a8>)
 801c742:	2204      	movs	r2, #4
 801c744:	701a      	strb	r2, [r3, #0]
	return NULL;
 801c746:	2300      	movs	r3, #0
 801c748:	e021      	b.n	801c78e <pifStorageVar_Create+0x29e>

save:
	p_new_data->id = id;
 801c74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c74c:	887a      	ldrh	r2, [r7, #2]
 801c74e:	801a      	strh	r2, [r3, #0]
	p_new_data->size = size;
 801c750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c752:	883a      	ldrh	r2, [r7, #0]
 801c754:	805a      	strh	r2, [r3, #2]
	p_new_data->first_sector = last;
 801c756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c758:	8c3a      	ldrh	r2, [r7, #32]
 801c75a:	809a      	strh	r2, [r3, #4]
	p_new_data->crc_16 = pifCrc16((uint8_t*)p_new_data, sizeof(PifStorageVarDataInfo) - 6);
 801c75c:	2106      	movs	r1, #6
 801c75e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c760:	f7f5 fd67 	bl	8012232 <pifCrc16>
 801c764:	4603      	mov	r3, r0
 801c766:	461a      	mov	r2, r3
 801c768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c76a:	815a      	strh	r2, [r3, #10]

    if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801c76c:	69fb      	ldr	r3, [r7, #28]
 801c76e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801c770:	69fb      	ldr	r3, [r7, #28]
 801c772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c774:	2100      	movs	r1, #0
 801c776:	69f8      	ldr	r0, [r7, #28]
 801c778:	f7ff fc48 	bl	801c00c <_writeData>
 801c77c:	4603      	mov	r3, r0
 801c77e:	2b00      	cmp	r3, #0
 801c780:	d104      	bne.n	801c78c <pifStorageVar_Create+0x29c>
    	pif_error = E_ACCESS_FAILED;
 801c782:	4b05      	ldr	r3, [pc, #20]	; (801c798 <pifStorageVar_Create+0x2a8>)
 801c784:	220d      	movs	r2, #13
 801c786:	701a      	strb	r2, [r3, #0]
        return NULL;
 801c788:	2300      	movs	r3, #0
 801c78a:	e000      	b.n	801c78e <pifStorageVar_Create+0x29e>
    }
	return (PifStorageDataInfoP)p_new_data;
 801c78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801c78e:	4618      	mov	r0, r3
 801c790:	3728      	adds	r7, #40	; 0x28
 801c792:	46bd      	mov	sp, r7
 801c794:	bd80      	pop	{r7, pc}
 801c796:	bf00      	nop
 801c798:	20001de0 	.word	0x20001de0

0801c79c <pifStorageVar_Delete>:

BOOL pifStorageVar_Delete(PifStorage* p_parent, uint16_t id)
{
 801c79c:	b580      	push	{r7, lr}
 801c79e:	b086      	sub	sp, #24
 801c7a0:	af00      	add	r7, sp, #0
 801c7a2:	6078      	str	r0, [r7, #4]
 801c7a4:	460b      	mov	r3, r1
 801c7a6:	807b      	strh	r3, [r7, #2]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	613b      	str	r3, [r7, #16]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801c7ac:	693b      	ldr	r3, [r7, #16]
 801c7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c7b0:	60fb      	str	r3, [r7, #12]
	PifStorageVarDataInfo* p_data_info;
	uint16_t node;

	if (!p_owner->__is_format) {
 801c7b2:	693b      	ldr	r3, [r7, #16]
 801c7b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c7b8:	2b00      	cmp	r3, #0
 801c7ba:	d104      	bne.n	801c7c6 <pifStorageVar_Delete+0x2a>
		pif_error = E_IS_NOT_FORMATED;
 801c7bc:	4b3d      	ldr	r3, [pc, #244]	; (801c8b4 <pifStorageVar_Delete+0x118>)
 801c7be:	220f      	movs	r2, #15
 801c7c0:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801c7c2:	2300      	movs	r3, #0
 801c7c4:	e072      	b.n	801c8ac <pifStorageVar_Delete+0x110>
	}

	node = p_info->first_node;
 801c7c6:	68fb      	ldr	r3, [r7, #12]
 801c7c8:	895b      	ldrh	r3, [r3, #10]
 801c7ca:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801c7cc:	e065      	b.n	801c89a <pifStorageVar_Delete+0xfe>
		p_data_info = &p_owner->__p_data_info[node];
 801c7ce:	693b      	ldr	r3, [r7, #16]
 801c7d0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801c7d2:	8afa      	ldrh	r2, [r7, #22]
 801c7d4:	4613      	mov	r3, r2
 801c7d6:	005b      	lsls	r3, r3, #1
 801c7d8:	4413      	add	r3, r2
 801c7da:	009b      	lsls	r3, r3, #2
 801c7dc:	440b      	add	r3, r1
 801c7de:	60bb      	str	r3, [r7, #8]
		if (id == p_data_info->id) {
 801c7e0:	68bb      	ldr	r3, [r7, #8]
 801c7e2:	881b      	ldrh	r3, [r3, #0]
 801c7e4:	887a      	ldrh	r2, [r7, #2]
 801c7e6:	429a      	cmp	r2, r3
 801c7e8:	d154      	bne.n	801c894 <pifStorageVar_Delete+0xf8>
			memset(p_data_info, 0xFF, sizeof(PifStorageVarDataInfo) - 6);
 801c7ea:	2206      	movs	r2, #6
 801c7ec:	21ff      	movs	r1, #255	; 0xff
 801c7ee:	68b8      	ldr	r0, [r7, #8]
 801c7f0:	f007 fb64 	bl	8023ebc <memset>
			if (p_data_info->prev_node != DATA_NODE_NULL) {
 801c7f4:	68bb      	ldr	r3, [r7, #8]
 801c7f6:	891b      	ldrh	r3, [r3, #8]
 801c7f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c7fc:	4293      	cmp	r3, r2
 801c7fe:	d00d      	beq.n	801c81c <pifStorageVar_Delete+0x80>
				p_owner->__p_data_info[p_data_info->prev_node].next_node = p_data_info->next_node;
 801c800:	693b      	ldr	r3, [r7, #16]
 801c802:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c804:	68bb      	ldr	r3, [r7, #8]
 801c806:	891b      	ldrh	r3, [r3, #8]
 801c808:	4619      	mov	r1, r3
 801c80a:	460b      	mov	r3, r1
 801c80c:	005b      	lsls	r3, r3, #1
 801c80e:	440b      	add	r3, r1
 801c810:	009b      	lsls	r3, r3, #2
 801c812:	4413      	add	r3, r2
 801c814:	68ba      	ldr	r2, [r7, #8]
 801c816:	88d2      	ldrh	r2, [r2, #6]
 801c818:	80da      	strh	r2, [r3, #6]
 801c81a:	e003      	b.n	801c824 <pifStorageVar_Delete+0x88>
			}
			else {
				p_info->first_node = p_data_info->next_node;
 801c81c:	68bb      	ldr	r3, [r7, #8]
 801c81e:	88da      	ldrh	r2, [r3, #6]
 801c820:	68fb      	ldr	r3, [r7, #12]
 801c822:	815a      	strh	r2, [r3, #10]
			}
			if (p_data_info->next_node != DATA_NODE_NULL) {
 801c824:	68bb      	ldr	r3, [r7, #8]
 801c826:	88db      	ldrh	r3, [r3, #6]
 801c828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c82c:	4293      	cmp	r3, r2
 801c82e:	d00c      	beq.n	801c84a <pifStorageVar_Delete+0xae>
				p_owner->__p_data_info[p_data_info->next_node].prev_node = p_data_info->prev_node;
 801c830:	693b      	ldr	r3, [r7, #16]
 801c832:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c834:	68bb      	ldr	r3, [r7, #8]
 801c836:	88db      	ldrh	r3, [r3, #6]
 801c838:	4619      	mov	r1, r3
 801c83a:	460b      	mov	r3, r1
 801c83c:	005b      	lsls	r3, r3, #1
 801c83e:	440b      	add	r3, r1
 801c840:	009b      	lsls	r3, r3, #2
 801c842:	4413      	add	r3, r2
 801c844:	68ba      	ldr	r2, [r7, #8]
 801c846:	8912      	ldrh	r2, [r2, #8]
 801c848:	811a      	strh	r2, [r3, #8]
			}
			p_data_info->next_node = p_info->free_node;
 801c84a:	68fb      	ldr	r3, [r7, #12]
 801c84c:	899a      	ldrh	r2, [r3, #12]
 801c84e:	68bb      	ldr	r3, [r7, #8]
 801c850:	80da      	strh	r2, [r3, #6]
			p_data_info->prev_node = DATA_NODE_NULL;
 801c852:	68bb      	ldr	r3, [r7, #8]
 801c854:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c858:	811a      	strh	r2, [r3, #8]
			p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801c85a:	2106      	movs	r1, #6
 801c85c:	68b8      	ldr	r0, [r7, #8]
 801c85e:	f7f5 fce8 	bl	8012232 <pifCrc16>
 801c862:	4603      	mov	r3, r0
 801c864:	461a      	mov	r2, r3
 801c866:	68bb      	ldr	r3, [r7, #8]
 801c868:	815a      	strh	r2, [r3, #10]
			p_info->free_node = node;
 801c86a:	68fb      	ldr	r3, [r7, #12]
 801c86c:	8afa      	ldrh	r2, [r7, #22]
 801c86e:	819a      	strh	r2, [r3, #12]

			if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801c870:	693b      	ldr	r3, [r7, #16]
 801c872:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801c874:	693b      	ldr	r3, [r7, #16]
 801c876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c878:	2100      	movs	r1, #0
 801c87a:	6938      	ldr	r0, [r7, #16]
 801c87c:	f7ff fbc6 	bl	801c00c <_writeData>
 801c880:	4603      	mov	r3, r0
 801c882:	2b00      	cmp	r3, #0
 801c884:	d104      	bne.n	801c890 <pifStorageVar_Delete+0xf4>
		    	pif_error = E_ACCESS_FAILED;
 801c886:	4b0b      	ldr	r3, [pc, #44]	; (801c8b4 <pifStorageVar_Delete+0x118>)
 801c888:	220d      	movs	r2, #13
 801c88a:	701a      	strb	r2, [r3, #0]
				return FALSE;
 801c88c:	2300      	movs	r3, #0
 801c88e:	e00d      	b.n	801c8ac <pifStorageVar_Delete+0x110>
			}
			return TRUE;
 801c890:	2301      	movs	r3, #1
 801c892:	e00b      	b.n	801c8ac <pifStorageVar_Delete+0x110>
		}
		node = p_data_info->next_node;
 801c894:	68bb      	ldr	r3, [r7, #8]
 801c896:	88db      	ldrh	r3, [r3, #6]
 801c898:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801c89a:	8afb      	ldrh	r3, [r7, #22]
 801c89c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c8a0:	4293      	cmp	r3, r2
 801c8a2:	d194      	bne.n	801c7ce <pifStorageVar_Delete+0x32>
	}
	pif_error = E_CANNOT_FOUND;
 801c8a4:	4b03      	ldr	r3, [pc, #12]	; (801c8b4 <pifStorageVar_Delete+0x118>)
 801c8a6:	220e      	movs	r2, #14
 801c8a8:	701a      	strb	r2, [r3, #0]
	return FALSE;
 801c8aa:	2300      	movs	r3, #0
}
 801c8ac:	4618      	mov	r0, r3
 801c8ae:	3718      	adds	r7, #24
 801c8b0:	46bd      	mov	sp, r7
 801c8b2:	bd80      	pop	{r7, pc}
 801c8b4:	20001de0 	.word	0x20001de0

0801c8b8 <pifStorageVar_Open>:

PifStorageDataInfoP pifStorageVar_Open(PifStorage* p_parent, uint16_t id)
{
 801c8b8:	b590      	push	{r4, r7, lr}
 801c8ba:	b087      	sub	sp, #28
 801c8bc:	af00      	add	r7, sp, #0
 801c8be:	6078      	str	r0, [r7, #4]
 801c8c0:	460b      	mov	r3, r1
 801c8c2:	807b      	strh	r3, [r7, #2]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	613b      	str	r3, [r7, #16]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801c8c8:	693b      	ldr	r3, [r7, #16]
 801c8ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c8cc:	60fb      	str	r3, [r7, #12]
	PifStorageVarDataInfo* p_data_info;
	uint16_t node;

	if (!p_owner->__is_format) {
 801c8ce:	693b      	ldr	r3, [r7, #16]
 801c8d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c8d4:	2b00      	cmp	r3, #0
 801c8d6:	d104      	bne.n	801c8e2 <pifStorageVar_Open+0x2a>
		pif_error = E_IS_NOT_FORMATED;
 801c8d8:	4b1b      	ldr	r3, [pc, #108]	; (801c948 <pifStorageVar_Open+0x90>)
 801c8da:	220f      	movs	r2, #15
 801c8dc:	701a      	strb	r2, [r3, #0]
		return NULL;
 801c8de:	2300      	movs	r3, #0
 801c8e0:	e02d      	b.n	801c93e <pifStorageVar_Open+0x86>
	}

	node = p_info->first_node;
 801c8e2:	68fb      	ldr	r3, [r7, #12]
 801c8e4:	895b      	ldrh	r3, [r3, #10]
 801c8e6:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801c8e8:	e020      	b.n	801c92c <pifStorageVar_Open+0x74>
		p_data_info = &p_owner->__p_data_info[node];
 801c8ea:	693b      	ldr	r3, [r7, #16]
 801c8ec:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801c8ee:	8afa      	ldrh	r2, [r7, #22]
 801c8f0:	4613      	mov	r3, r2
 801c8f2:	005b      	lsls	r3, r3, #1
 801c8f4:	4413      	add	r3, r2
 801c8f6:	009b      	lsls	r3, r3, #2
 801c8f8:	440b      	add	r3, r1
 801c8fa:	60bb      	str	r3, [r7, #8]
		if (id == p_data_info->id) {
 801c8fc:	68bb      	ldr	r3, [r7, #8]
 801c8fe:	881b      	ldrh	r3, [r3, #0]
 801c900:	887a      	ldrh	r2, [r7, #2]
 801c902:	429a      	cmp	r2, r3
 801c904:	d10f      	bne.n	801c926 <pifStorageVar_Open+0x6e>
			if (p_data_info->crc_16 != pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6)) {
 801c906:	68bb      	ldr	r3, [r7, #8]
 801c908:	895c      	ldrh	r4, [r3, #10]
 801c90a:	2106      	movs	r1, #6
 801c90c:	68b8      	ldr	r0, [r7, #8]
 801c90e:	f7f5 fc90 	bl	8012232 <pifCrc16>
 801c912:	4603      	mov	r3, r0
 801c914:	429c      	cmp	r4, r3
 801c916:	d004      	beq.n	801c922 <pifStorageVar_Open+0x6a>
		        pif_error = E_MISMATCH_CRC;
 801c918:	4b0b      	ldr	r3, [pc, #44]	; (801c948 <pifStorageVar_Open+0x90>)
 801c91a:	220c      	movs	r2, #12
 801c91c:	701a      	strb	r2, [r3, #0]
				return NULL;
 801c91e:	2300      	movs	r3, #0
 801c920:	e00d      	b.n	801c93e <pifStorageVar_Open+0x86>
			}
			return (PifStorageDataInfoP)p_data_info;
 801c922:	68bb      	ldr	r3, [r7, #8]
 801c924:	e00b      	b.n	801c93e <pifStorageVar_Open+0x86>
		}
		node = p_data_info->next_node;
 801c926:	68bb      	ldr	r3, [r7, #8]
 801c928:	88db      	ldrh	r3, [r3, #6]
 801c92a:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801c92c:	8afb      	ldrh	r3, [r7, #22]
 801c92e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c932:	4293      	cmp	r3, r2
 801c934:	d1d9      	bne.n	801c8ea <pifStorageVar_Open+0x32>
	}
	pif_error = E_CANNOT_FOUND;
 801c936:	4b04      	ldr	r3, [pc, #16]	; (801c948 <pifStorageVar_Open+0x90>)
 801c938:	220e      	movs	r2, #14
 801c93a:	701a      	strb	r2, [r3, #0]
	return NULL;
 801c93c:	2300      	movs	r3, #0
}
 801c93e:	4618      	mov	r0, r3
 801c940:	371c      	adds	r7, #28
 801c942:	46bd      	mov	sp, r7
 801c944:	bd90      	pop	{r4, r7, pc}
 801c946:	bf00      	nop
 801c948:	20001de0 	.word	0x20001de0

0801c94c <pifStorageVar_Read>:

BOOL pifStorageVar_Read(PifStorage* p_parent, uint8_t* p_dst, PifStorageDataInfoP p_src, size_t size)
{
 801c94c:	b580      	push	{r7, lr}
 801c94e:	b088      	sub	sp, #32
 801c950:	af02      	add	r7, sp, #8
 801c952:	60f8      	str	r0, [r7, #12]
 801c954:	60b9      	str	r1, [r7, #8]
 801c956:	607a      	str	r2, [r7, #4]
 801c958:	603b      	str	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801c95a:	68fb      	ldr	r3, [r7, #12]
 801c95c:	617b      	str	r3, [r7, #20]

	if (!p_owner->__is_format) {
 801c95e:	697b      	ldr	r3, [r7, #20]
 801c960:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c964:	2b00      	cmp	r3, #0
 801c966:	d104      	bne.n	801c972 <pifStorageVar_Read+0x26>
		pif_error = E_IS_NOT_FORMATED;
 801c968:	4b0d      	ldr	r3, [pc, #52]	; (801c9a0 <pifStorageVar_Read+0x54>)
 801c96a:	220f      	movs	r2, #15
 801c96c:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801c96e:	2300      	movs	r3, #0
 801c970:	e012      	b.n	801c998 <pifStorageVar_Read+0x4c>
	}

	return _readData(p_owner, p_dst, ((PifStorageVarDataInfo*)p_src)->first_sector * p_owner->_p_info->sector_size, size, p_owner->_p_info->sector_size);
 801c972:	687b      	ldr	r3, [r7, #4]
 801c974:	889b      	ldrh	r3, [r3, #4]
 801c976:	461a      	mov	r2, r3
 801c978:	697b      	ldr	r3, [r7, #20]
 801c97a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c97c:	88db      	ldrh	r3, [r3, #6]
 801c97e:	fb02 f303 	mul.w	r3, r2, r3
 801c982:	461a      	mov	r2, r3
 801c984:	697b      	ldr	r3, [r7, #20]
 801c986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c988:	88db      	ldrh	r3, [r3, #6]
 801c98a:	9300      	str	r3, [sp, #0]
 801c98c:	683b      	ldr	r3, [r7, #0]
 801c98e:	68b9      	ldr	r1, [r7, #8]
 801c990:	6978      	ldr	r0, [r7, #20]
 801c992:	f7ff fb0b 	bl	801bfac <_readData>
 801c996:	4603      	mov	r3, r0
}
 801c998:	4618      	mov	r0, r3
 801c99a:	3718      	adds	r7, #24
 801c99c:	46bd      	mov	sp, r7
 801c99e:	bd80      	pop	{r7, pc}
 801c9a0:	20001de0 	.word	0x20001de0

0801c9a4 <pifStorageVar_Write>:

BOOL pifStorageVar_Write(PifStorage* p_parent, PifStorageDataInfoP p_dst, uint8_t* p_src, size_t size)
{
 801c9a4:	b580      	push	{r7, lr}
 801c9a6:	b086      	sub	sp, #24
 801c9a8:	af00      	add	r7, sp, #0
 801c9aa:	60f8      	str	r0, [r7, #12]
 801c9ac:	60b9      	str	r1, [r7, #8]
 801c9ae:	607a      	str	r2, [r7, #4]
 801c9b0:	603b      	str	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801c9b2:	68fb      	ldr	r3, [r7, #12]
 801c9b4:	617b      	str	r3, [r7, #20]

	if (!p_owner->__is_format) {
 801c9b6:	697b      	ldr	r3, [r7, #20]
 801c9b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	d104      	bne.n	801c9ca <pifStorageVar_Write+0x26>
		pif_error = E_IS_NOT_FORMATED;
 801c9c0:	4b0b      	ldr	r3, [pc, #44]	; (801c9f0 <pifStorageVar_Write+0x4c>)
 801c9c2:	220f      	movs	r2, #15
 801c9c4:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801c9c6:	2300      	movs	r3, #0
 801c9c8:	e00e      	b.n	801c9e8 <pifStorageVar_Write+0x44>
	}

	return _writeData(p_owner, ((PifStorageVarDataInfo*)p_dst)->first_sector * p_owner->_p_info->sector_size, p_src, size);
 801c9ca:	68bb      	ldr	r3, [r7, #8]
 801c9cc:	889b      	ldrh	r3, [r3, #4]
 801c9ce:	461a      	mov	r2, r3
 801c9d0:	697b      	ldr	r3, [r7, #20]
 801c9d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c9d4:	88db      	ldrh	r3, [r3, #6]
 801c9d6:	fb02 f303 	mul.w	r3, r2, r3
 801c9da:	4619      	mov	r1, r3
 801c9dc:	683b      	ldr	r3, [r7, #0]
 801c9de:	687a      	ldr	r2, [r7, #4]
 801c9e0:	6978      	ldr	r0, [r7, #20]
 801c9e2:	f7ff fb13 	bl	801c00c <_writeData>
 801c9e6:	4603      	mov	r3, r0
}
 801c9e8:	4618      	mov	r0, r3
 801c9ea:	3718      	adds	r7, #24
 801c9ec:	46bd      	mov	sp, r7
 801c9ee:	bd80      	pop	{r7, pc}
 801c9f0:	20001de0 	.word	0x20001de0

0801c9f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801c9f4:	b580      	push	{r7, lr}
 801c9f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801c9f8:	4b0e      	ldr	r3, [pc, #56]	; (801ca34 <HAL_Init+0x40>)
 801c9fa:	681b      	ldr	r3, [r3, #0]
 801c9fc:	4a0d      	ldr	r2, [pc, #52]	; (801ca34 <HAL_Init+0x40>)
 801c9fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801ca02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801ca04:	4b0b      	ldr	r3, [pc, #44]	; (801ca34 <HAL_Init+0x40>)
 801ca06:	681b      	ldr	r3, [r3, #0]
 801ca08:	4a0a      	ldr	r2, [pc, #40]	; (801ca34 <HAL_Init+0x40>)
 801ca0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801ca0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801ca10:	4b08      	ldr	r3, [pc, #32]	; (801ca34 <HAL_Init+0x40>)
 801ca12:	681b      	ldr	r3, [r3, #0]
 801ca14:	4a07      	ldr	r2, [pc, #28]	; (801ca34 <HAL_Init+0x40>)
 801ca16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801ca1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801ca1c:	2003      	movs	r0, #3
 801ca1e:	f000 fd51 	bl	801d4c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801ca22:	2000      	movs	r0, #0
 801ca24:	f000 f808 	bl	801ca38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801ca28:	f7e6 fdae 	bl	8003588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801ca2c:	2300      	movs	r3, #0
}
 801ca2e:	4618      	mov	r0, r3
 801ca30:	bd80      	pop	{r7, pc}
 801ca32:	bf00      	nop
 801ca34:	40023c00 	.word	0x40023c00

0801ca38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801ca38:	b580      	push	{r7, lr}
 801ca3a:	b082      	sub	sp, #8
 801ca3c:	af00      	add	r7, sp, #0
 801ca3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801ca40:	4b12      	ldr	r3, [pc, #72]	; (801ca8c <HAL_InitTick+0x54>)
 801ca42:	681a      	ldr	r2, [r3, #0]
 801ca44:	4b12      	ldr	r3, [pc, #72]	; (801ca90 <HAL_InitTick+0x58>)
 801ca46:	781b      	ldrb	r3, [r3, #0]
 801ca48:	4619      	mov	r1, r3
 801ca4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801ca4e:	fbb3 f3f1 	udiv	r3, r3, r1
 801ca52:	fbb2 f3f3 	udiv	r3, r2, r3
 801ca56:	4618      	mov	r0, r3
 801ca58:	f000 fd77 	bl	801d54a <HAL_SYSTICK_Config>
 801ca5c:	4603      	mov	r3, r0
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	d001      	beq.n	801ca66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801ca62:	2301      	movs	r3, #1
 801ca64:	e00e      	b.n	801ca84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801ca66:	687b      	ldr	r3, [r7, #4]
 801ca68:	2b0f      	cmp	r3, #15
 801ca6a:	d80a      	bhi.n	801ca82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801ca6c:	2200      	movs	r2, #0
 801ca6e:	6879      	ldr	r1, [r7, #4]
 801ca70:	f04f 30ff 	mov.w	r0, #4294967295
 801ca74:	f000 fd31 	bl	801d4da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801ca78:	4a06      	ldr	r2, [pc, #24]	; (801ca94 <HAL_InitTick+0x5c>)
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801ca7e:	2300      	movs	r3, #0
 801ca80:	e000      	b.n	801ca84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801ca82:	2301      	movs	r3, #1
}
 801ca84:	4618      	mov	r0, r3
 801ca86:	3708      	adds	r7, #8
 801ca88:	46bd      	mov	sp, r7
 801ca8a:	bd80      	pop	{r7, pc}
 801ca8c:	20000020 	.word	0x20000020
 801ca90:	20000160 	.word	0x20000160
 801ca94:	2000015c 	.word	0x2000015c

0801ca98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801ca98:	b480      	push	{r7}
 801ca9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801ca9c:	4b06      	ldr	r3, [pc, #24]	; (801cab8 <HAL_IncTick+0x20>)
 801ca9e:	781b      	ldrb	r3, [r3, #0]
 801caa0:	461a      	mov	r2, r3
 801caa2:	4b06      	ldr	r3, [pc, #24]	; (801cabc <HAL_IncTick+0x24>)
 801caa4:	681b      	ldr	r3, [r3, #0]
 801caa6:	4413      	add	r3, r2
 801caa8:	4a04      	ldr	r2, [pc, #16]	; (801cabc <HAL_IncTick+0x24>)
 801caaa:	6013      	str	r3, [r2, #0]
}
 801caac:	bf00      	nop
 801caae:	46bd      	mov	sp, r7
 801cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cab4:	4770      	bx	lr
 801cab6:	bf00      	nop
 801cab8:	20000160 	.word	0x20000160
 801cabc:	20001f98 	.word	0x20001f98

0801cac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801cac0:	b480      	push	{r7}
 801cac2:	af00      	add	r7, sp, #0
  return uwTick;
 801cac4:	4b03      	ldr	r3, [pc, #12]	; (801cad4 <HAL_GetTick+0x14>)
 801cac6:	681b      	ldr	r3, [r3, #0]
}
 801cac8:	4618      	mov	r0, r3
 801caca:	46bd      	mov	sp, r7
 801cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cad0:	4770      	bx	lr
 801cad2:	bf00      	nop
 801cad4:	20001f98 	.word	0x20001f98

0801cad8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 801cad8:	b580      	push	{r7, lr}
 801cada:	b084      	sub	sp, #16
 801cadc:	af00      	add	r7, sp, #0
 801cade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801cae0:	2300      	movs	r3, #0
 801cae2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 801cae4:	687b      	ldr	r3, [r7, #4]
 801cae6:	2b00      	cmp	r3, #0
 801cae8:	d101      	bne.n	801caee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 801caea:	2301      	movs	r3, #1
 801caec:	e033      	b.n	801cb56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801caf2:	2b00      	cmp	r3, #0
 801caf4:	d109      	bne.n	801cb0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801caf6:	6878      	ldr	r0, [r7, #4]
 801caf8:	f7e6 fd6e 	bl	80035d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	2200      	movs	r2, #0
 801cb00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801cb02:	687b      	ldr	r3, [r7, #4]
 801cb04:	2200      	movs	r2, #0
 801cb06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb0e:	f003 0310 	and.w	r3, r3, #16
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	d118      	bne.n	801cb48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801cb1e:	f023 0302 	bic.w	r3, r3, #2
 801cb22:	f043 0202 	orr.w	r2, r3, #2
 801cb26:	687b      	ldr	r3, [r7, #4]
 801cb28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 801cb2a:	6878      	ldr	r0, [r7, #4]
 801cb2c:	f000 fa58 	bl	801cfe0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801cb30:	687b      	ldr	r3, [r7, #4]
 801cb32:	2200      	movs	r2, #0
 801cb34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb3a:	f023 0303 	bic.w	r3, r3, #3
 801cb3e:	f043 0201 	orr.w	r2, r3, #1
 801cb42:	687b      	ldr	r3, [r7, #4]
 801cb44:	641a      	str	r2, [r3, #64]	; 0x40
 801cb46:	e001      	b.n	801cb4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 801cb48:	2301      	movs	r3, #1
 801cb4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	2200      	movs	r2, #0
 801cb50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 801cb54:	7bfb      	ldrb	r3, [r7, #15]
}
 801cb56:	4618      	mov	r0, r3
 801cb58:	3710      	adds	r7, #16
 801cb5a:	46bd      	mov	sp, r7
 801cb5c:	bd80      	pop	{r7, pc}
	...

0801cb60 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 801cb60:	b580      	push	{r7, lr}
 801cb62:	b086      	sub	sp, #24
 801cb64:	af00      	add	r7, sp, #0
 801cb66:	60f8      	str	r0, [r7, #12]
 801cb68:	60b9      	str	r1, [r7, #8]
 801cb6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 801cb6c:	2300      	movs	r3, #0
 801cb6e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801cb70:	68fb      	ldr	r3, [r7, #12]
 801cb72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801cb76:	2b01      	cmp	r3, #1
 801cb78:	d101      	bne.n	801cb7e <HAL_ADC_Start_DMA+0x1e>
 801cb7a:	2302      	movs	r3, #2
 801cb7c:	e0ce      	b.n	801cd1c <HAL_ADC_Start_DMA+0x1bc>
 801cb7e:	68fb      	ldr	r3, [r7, #12]
 801cb80:	2201      	movs	r2, #1
 801cb82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 801cb86:	68fb      	ldr	r3, [r7, #12]
 801cb88:	681b      	ldr	r3, [r3, #0]
 801cb8a:	689b      	ldr	r3, [r3, #8]
 801cb8c:	f003 0301 	and.w	r3, r3, #1
 801cb90:	2b01      	cmp	r3, #1
 801cb92:	d018      	beq.n	801cbc6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 801cb94:	68fb      	ldr	r3, [r7, #12]
 801cb96:	681b      	ldr	r3, [r3, #0]
 801cb98:	689a      	ldr	r2, [r3, #8]
 801cb9a:	68fb      	ldr	r3, [r7, #12]
 801cb9c:	681b      	ldr	r3, [r3, #0]
 801cb9e:	f042 0201 	orr.w	r2, r2, #1
 801cba2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 801cba4:	4b5f      	ldr	r3, [pc, #380]	; (801cd24 <HAL_ADC_Start_DMA+0x1c4>)
 801cba6:	681b      	ldr	r3, [r3, #0]
 801cba8:	4a5f      	ldr	r2, [pc, #380]	; (801cd28 <HAL_ADC_Start_DMA+0x1c8>)
 801cbaa:	fba2 2303 	umull	r2, r3, r2, r3
 801cbae:	0c9a      	lsrs	r2, r3, #18
 801cbb0:	4613      	mov	r3, r2
 801cbb2:	005b      	lsls	r3, r3, #1
 801cbb4:	4413      	add	r3, r2
 801cbb6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801cbb8:	e002      	b.n	801cbc0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 801cbba:	693b      	ldr	r3, [r7, #16]
 801cbbc:	3b01      	subs	r3, #1
 801cbbe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801cbc0:	693b      	ldr	r3, [r7, #16]
 801cbc2:	2b00      	cmp	r3, #0
 801cbc4:	d1f9      	bne.n	801cbba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 801cbc6:	68fb      	ldr	r3, [r7, #12]
 801cbc8:	681b      	ldr	r3, [r3, #0]
 801cbca:	689b      	ldr	r3, [r3, #8]
 801cbcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cbd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cbd4:	d107      	bne.n	801cbe6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 801cbd6:	68fb      	ldr	r3, [r7, #12]
 801cbd8:	681b      	ldr	r3, [r3, #0]
 801cbda:	689a      	ldr	r2, [r3, #8]
 801cbdc:	68fb      	ldr	r3, [r7, #12]
 801cbde:	681b      	ldr	r3, [r3, #0]
 801cbe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801cbe4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 801cbe6:	68fb      	ldr	r3, [r7, #12]
 801cbe8:	681b      	ldr	r3, [r3, #0]
 801cbea:	689b      	ldr	r3, [r3, #8]
 801cbec:	f003 0301 	and.w	r3, r3, #1
 801cbf0:	2b01      	cmp	r3, #1
 801cbf2:	f040 8086 	bne.w	801cd02 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 801cbf6:	68fb      	ldr	r3, [r7, #12]
 801cbf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cbfa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 801cbfe:	f023 0301 	bic.w	r3, r3, #1
 801cc02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801cc06:	68fb      	ldr	r3, [r7, #12]
 801cc08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801cc0a:	68fb      	ldr	r3, [r7, #12]
 801cc0c:	681b      	ldr	r3, [r3, #0]
 801cc0e:	685b      	ldr	r3, [r3, #4]
 801cc10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cc14:	2b00      	cmp	r3, #0
 801cc16:	d007      	beq.n	801cc28 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 801cc18:	68fb      	ldr	r3, [r7, #12]
 801cc1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cc1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801cc20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801cc24:	68fb      	ldr	r3, [r7, #12]
 801cc26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801cc28:	68fb      	ldr	r3, [r7, #12]
 801cc2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cc2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801cc30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cc34:	d106      	bne.n	801cc44 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 801cc36:	68fb      	ldr	r3, [r7, #12]
 801cc38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cc3a:	f023 0206 	bic.w	r2, r3, #6
 801cc3e:	68fb      	ldr	r3, [r7, #12]
 801cc40:	645a      	str	r2, [r3, #68]	; 0x44
 801cc42:	e002      	b.n	801cc4a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 801cc44:	68fb      	ldr	r3, [r7, #12]
 801cc46:	2200      	movs	r2, #0
 801cc48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 801cc4a:	68fb      	ldr	r3, [r7, #12]
 801cc4c:	2200      	movs	r2, #0
 801cc4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801cc52:	4b36      	ldr	r3, [pc, #216]	; (801cd2c <HAL_ADC_Start_DMA+0x1cc>)
 801cc54:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801cc56:	68fb      	ldr	r3, [r7, #12]
 801cc58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc5a:	4a35      	ldr	r2, [pc, #212]	; (801cd30 <HAL_ADC_Start_DMA+0x1d0>)
 801cc5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 801cc5e:	68fb      	ldr	r3, [r7, #12]
 801cc60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc62:	4a34      	ldr	r2, [pc, #208]	; (801cd34 <HAL_ADC_Start_DMA+0x1d4>)
 801cc64:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801cc66:	68fb      	ldr	r3, [r7, #12]
 801cc68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc6a:	4a33      	ldr	r2, [pc, #204]	; (801cd38 <HAL_ADC_Start_DMA+0x1d8>)
 801cc6c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 801cc6e:	68fb      	ldr	r3, [r7, #12]
 801cc70:	681b      	ldr	r3, [r3, #0]
 801cc72:	f06f 0222 	mvn.w	r2, #34	; 0x22
 801cc76:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801cc78:	68fb      	ldr	r3, [r7, #12]
 801cc7a:	681b      	ldr	r3, [r3, #0]
 801cc7c:	685a      	ldr	r2, [r3, #4]
 801cc7e:	68fb      	ldr	r3, [r7, #12]
 801cc80:	681b      	ldr	r3, [r3, #0]
 801cc82:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801cc86:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 801cc88:	68fb      	ldr	r3, [r7, #12]
 801cc8a:	681b      	ldr	r3, [r3, #0]
 801cc8c:	689a      	ldr	r2, [r3, #8]
 801cc8e:	68fb      	ldr	r3, [r7, #12]
 801cc90:	681b      	ldr	r3, [r3, #0]
 801cc92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801cc96:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801cc98:	68fb      	ldr	r3, [r7, #12]
 801cc9a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801cc9c:	68fb      	ldr	r3, [r7, #12]
 801cc9e:	681b      	ldr	r3, [r3, #0]
 801cca0:	334c      	adds	r3, #76	; 0x4c
 801cca2:	4619      	mov	r1, r3
 801cca4:	68ba      	ldr	r2, [r7, #8]
 801cca6:	687b      	ldr	r3, [r7, #4]
 801cca8:	f000 fd0a 	bl	801d6c0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 801ccac:	697b      	ldr	r3, [r7, #20]
 801ccae:	685b      	ldr	r3, [r3, #4]
 801ccb0:	f003 031f 	and.w	r3, r3, #31
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	d10f      	bne.n	801ccd8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 801ccb8:	68fb      	ldr	r3, [r7, #12]
 801ccba:	681b      	ldr	r3, [r3, #0]
 801ccbc:	689b      	ldr	r3, [r3, #8]
 801ccbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801ccc2:	2b00      	cmp	r3, #0
 801ccc4:	d129      	bne.n	801cd1a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801ccc6:	68fb      	ldr	r3, [r7, #12]
 801ccc8:	681b      	ldr	r3, [r3, #0]
 801ccca:	689a      	ldr	r2, [r3, #8]
 801cccc:	68fb      	ldr	r3, [r7, #12]
 801ccce:	681b      	ldr	r3, [r3, #0]
 801ccd0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801ccd4:	609a      	str	r2, [r3, #8]
 801ccd6:	e020      	b.n	801cd1a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 801ccd8:	68fb      	ldr	r3, [r7, #12]
 801ccda:	681b      	ldr	r3, [r3, #0]
 801ccdc:	4a17      	ldr	r2, [pc, #92]	; (801cd3c <HAL_ADC_Start_DMA+0x1dc>)
 801ccde:	4293      	cmp	r3, r2
 801cce0:	d11b      	bne.n	801cd1a <HAL_ADC_Start_DMA+0x1ba>
 801cce2:	68fb      	ldr	r3, [r7, #12]
 801cce4:	681b      	ldr	r3, [r3, #0]
 801cce6:	689b      	ldr	r3, [r3, #8]
 801cce8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801ccec:	2b00      	cmp	r3, #0
 801ccee:	d114      	bne.n	801cd1a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801ccf0:	68fb      	ldr	r3, [r7, #12]
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	689a      	ldr	r2, [r3, #8]
 801ccf6:	68fb      	ldr	r3, [r7, #12]
 801ccf8:	681b      	ldr	r3, [r3, #0]
 801ccfa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801ccfe:	609a      	str	r2, [r3, #8]
 801cd00:	e00b      	b.n	801cd1a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801cd02:	68fb      	ldr	r3, [r7, #12]
 801cd04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cd06:	f043 0210 	orr.w	r2, r3, #16
 801cd0a:	68fb      	ldr	r3, [r7, #12]
 801cd0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801cd0e:	68fb      	ldr	r3, [r7, #12]
 801cd10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cd12:	f043 0201 	orr.w	r2, r3, #1
 801cd16:	68fb      	ldr	r3, [r7, #12]
 801cd18:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 801cd1a:	2300      	movs	r3, #0
}
 801cd1c:	4618      	mov	r0, r3
 801cd1e:	3718      	adds	r7, #24
 801cd20:	46bd      	mov	sp, r7
 801cd22:	bd80      	pop	{r7, pc}
 801cd24:	20000020 	.word	0x20000020
 801cd28:	431bde83 	.word	0x431bde83
 801cd2c:	40012300 	.word	0x40012300
 801cd30:	0801d1d9 	.word	0x0801d1d9
 801cd34:	0801d293 	.word	0x0801d293
 801cd38:	0801d2af 	.word	0x0801d2af
 801cd3c:	40012000 	.word	0x40012000

0801cd40 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801cd40:	b480      	push	{r7}
 801cd42:	b083      	sub	sp, #12
 801cd44:	af00      	add	r7, sp, #0
 801cd46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 801cd48:	bf00      	nop
 801cd4a:	370c      	adds	r7, #12
 801cd4c:	46bd      	mov	sp, r7
 801cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd52:	4770      	bx	lr

0801cd54 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 801cd54:	b480      	push	{r7}
 801cd56:	b083      	sub	sp, #12
 801cd58:	af00      	add	r7, sp, #0
 801cd5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 801cd5c:	bf00      	nop
 801cd5e:	370c      	adds	r7, #12
 801cd60:	46bd      	mov	sp, r7
 801cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd66:	4770      	bx	lr

0801cd68 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801cd68:	b480      	push	{r7}
 801cd6a:	b083      	sub	sp, #12
 801cd6c:	af00      	add	r7, sp, #0
 801cd6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 801cd70:	bf00      	nop
 801cd72:	370c      	adds	r7, #12
 801cd74:	46bd      	mov	sp, r7
 801cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd7a:	4770      	bx	lr

0801cd7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 801cd7c:	b480      	push	{r7}
 801cd7e:	b085      	sub	sp, #20
 801cd80:	af00      	add	r7, sp, #0
 801cd82:	6078      	str	r0, [r7, #4]
 801cd84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 801cd86:	2300      	movs	r3, #0
 801cd88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801cd8a:	687b      	ldr	r3, [r7, #4]
 801cd8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801cd90:	2b01      	cmp	r3, #1
 801cd92:	d101      	bne.n	801cd98 <HAL_ADC_ConfigChannel+0x1c>
 801cd94:	2302      	movs	r3, #2
 801cd96:	e113      	b.n	801cfc0 <HAL_ADC_ConfigChannel+0x244>
 801cd98:	687b      	ldr	r3, [r7, #4]
 801cd9a:	2201      	movs	r2, #1
 801cd9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 801cda0:	683b      	ldr	r3, [r7, #0]
 801cda2:	681b      	ldr	r3, [r3, #0]
 801cda4:	2b09      	cmp	r3, #9
 801cda6:	d925      	bls.n	801cdf4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	681b      	ldr	r3, [r3, #0]
 801cdac:	68d9      	ldr	r1, [r3, #12]
 801cdae:	683b      	ldr	r3, [r7, #0]
 801cdb0:	681b      	ldr	r3, [r3, #0]
 801cdb2:	b29b      	uxth	r3, r3
 801cdb4:	461a      	mov	r2, r3
 801cdb6:	4613      	mov	r3, r2
 801cdb8:	005b      	lsls	r3, r3, #1
 801cdba:	4413      	add	r3, r2
 801cdbc:	3b1e      	subs	r3, #30
 801cdbe:	2207      	movs	r2, #7
 801cdc0:	fa02 f303 	lsl.w	r3, r2, r3
 801cdc4:	43da      	mvns	r2, r3
 801cdc6:	687b      	ldr	r3, [r7, #4]
 801cdc8:	681b      	ldr	r3, [r3, #0]
 801cdca:	400a      	ands	r2, r1
 801cdcc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 801cdce:	687b      	ldr	r3, [r7, #4]
 801cdd0:	681b      	ldr	r3, [r3, #0]
 801cdd2:	68d9      	ldr	r1, [r3, #12]
 801cdd4:	683b      	ldr	r3, [r7, #0]
 801cdd6:	689a      	ldr	r2, [r3, #8]
 801cdd8:	683b      	ldr	r3, [r7, #0]
 801cdda:	681b      	ldr	r3, [r3, #0]
 801cddc:	b29b      	uxth	r3, r3
 801cdde:	4618      	mov	r0, r3
 801cde0:	4603      	mov	r3, r0
 801cde2:	005b      	lsls	r3, r3, #1
 801cde4:	4403      	add	r3, r0
 801cde6:	3b1e      	subs	r3, #30
 801cde8:	409a      	lsls	r2, r3
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	681b      	ldr	r3, [r3, #0]
 801cdee:	430a      	orrs	r2, r1
 801cdf0:	60da      	str	r2, [r3, #12]
 801cdf2:	e022      	b.n	801ce3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	6919      	ldr	r1, [r3, #16]
 801cdfa:	683b      	ldr	r3, [r7, #0]
 801cdfc:	681b      	ldr	r3, [r3, #0]
 801cdfe:	b29b      	uxth	r3, r3
 801ce00:	461a      	mov	r2, r3
 801ce02:	4613      	mov	r3, r2
 801ce04:	005b      	lsls	r3, r3, #1
 801ce06:	4413      	add	r3, r2
 801ce08:	2207      	movs	r2, #7
 801ce0a:	fa02 f303 	lsl.w	r3, r2, r3
 801ce0e:	43da      	mvns	r2, r3
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	681b      	ldr	r3, [r3, #0]
 801ce14:	400a      	ands	r2, r1
 801ce16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 801ce18:	687b      	ldr	r3, [r7, #4]
 801ce1a:	681b      	ldr	r3, [r3, #0]
 801ce1c:	6919      	ldr	r1, [r3, #16]
 801ce1e:	683b      	ldr	r3, [r7, #0]
 801ce20:	689a      	ldr	r2, [r3, #8]
 801ce22:	683b      	ldr	r3, [r7, #0]
 801ce24:	681b      	ldr	r3, [r3, #0]
 801ce26:	b29b      	uxth	r3, r3
 801ce28:	4618      	mov	r0, r3
 801ce2a:	4603      	mov	r3, r0
 801ce2c:	005b      	lsls	r3, r3, #1
 801ce2e:	4403      	add	r3, r0
 801ce30:	409a      	lsls	r2, r3
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	681b      	ldr	r3, [r3, #0]
 801ce36:	430a      	orrs	r2, r1
 801ce38:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801ce3a:	683b      	ldr	r3, [r7, #0]
 801ce3c:	685b      	ldr	r3, [r3, #4]
 801ce3e:	2b06      	cmp	r3, #6
 801ce40:	d824      	bhi.n	801ce8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801ce42:	687b      	ldr	r3, [r7, #4]
 801ce44:	681b      	ldr	r3, [r3, #0]
 801ce46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801ce48:	683b      	ldr	r3, [r7, #0]
 801ce4a:	685a      	ldr	r2, [r3, #4]
 801ce4c:	4613      	mov	r3, r2
 801ce4e:	009b      	lsls	r3, r3, #2
 801ce50:	4413      	add	r3, r2
 801ce52:	3b05      	subs	r3, #5
 801ce54:	221f      	movs	r2, #31
 801ce56:	fa02 f303 	lsl.w	r3, r2, r3
 801ce5a:	43da      	mvns	r2, r3
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	681b      	ldr	r3, [r3, #0]
 801ce60:	400a      	ands	r2, r1
 801ce62:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	681b      	ldr	r3, [r3, #0]
 801ce68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801ce6a:	683b      	ldr	r3, [r7, #0]
 801ce6c:	681b      	ldr	r3, [r3, #0]
 801ce6e:	b29b      	uxth	r3, r3
 801ce70:	4618      	mov	r0, r3
 801ce72:	683b      	ldr	r3, [r7, #0]
 801ce74:	685a      	ldr	r2, [r3, #4]
 801ce76:	4613      	mov	r3, r2
 801ce78:	009b      	lsls	r3, r3, #2
 801ce7a:	4413      	add	r3, r2
 801ce7c:	3b05      	subs	r3, #5
 801ce7e:	fa00 f203 	lsl.w	r2, r0, r3
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	681b      	ldr	r3, [r3, #0]
 801ce86:	430a      	orrs	r2, r1
 801ce88:	635a      	str	r2, [r3, #52]	; 0x34
 801ce8a:	e04c      	b.n	801cf26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 801ce8c:	683b      	ldr	r3, [r7, #0]
 801ce8e:	685b      	ldr	r3, [r3, #4]
 801ce90:	2b0c      	cmp	r3, #12
 801ce92:	d824      	bhi.n	801cede <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	681b      	ldr	r3, [r3, #0]
 801ce98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801ce9a:	683b      	ldr	r3, [r7, #0]
 801ce9c:	685a      	ldr	r2, [r3, #4]
 801ce9e:	4613      	mov	r3, r2
 801cea0:	009b      	lsls	r3, r3, #2
 801cea2:	4413      	add	r3, r2
 801cea4:	3b23      	subs	r3, #35	; 0x23
 801cea6:	221f      	movs	r2, #31
 801cea8:	fa02 f303 	lsl.w	r3, r2, r3
 801ceac:	43da      	mvns	r2, r3
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	681b      	ldr	r3, [r3, #0]
 801ceb2:	400a      	ands	r2, r1
 801ceb4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 801ceb6:	687b      	ldr	r3, [r7, #4]
 801ceb8:	681b      	ldr	r3, [r3, #0]
 801ceba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801cebc:	683b      	ldr	r3, [r7, #0]
 801cebe:	681b      	ldr	r3, [r3, #0]
 801cec0:	b29b      	uxth	r3, r3
 801cec2:	4618      	mov	r0, r3
 801cec4:	683b      	ldr	r3, [r7, #0]
 801cec6:	685a      	ldr	r2, [r3, #4]
 801cec8:	4613      	mov	r3, r2
 801ceca:	009b      	lsls	r3, r3, #2
 801cecc:	4413      	add	r3, r2
 801cece:	3b23      	subs	r3, #35	; 0x23
 801ced0:	fa00 f203 	lsl.w	r2, r0, r3
 801ced4:	687b      	ldr	r3, [r7, #4]
 801ced6:	681b      	ldr	r3, [r3, #0]
 801ced8:	430a      	orrs	r2, r1
 801ceda:	631a      	str	r2, [r3, #48]	; 0x30
 801cedc:	e023      	b.n	801cf26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801cede:	687b      	ldr	r3, [r7, #4]
 801cee0:	681b      	ldr	r3, [r3, #0]
 801cee2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801cee4:	683b      	ldr	r3, [r7, #0]
 801cee6:	685a      	ldr	r2, [r3, #4]
 801cee8:	4613      	mov	r3, r2
 801ceea:	009b      	lsls	r3, r3, #2
 801ceec:	4413      	add	r3, r2
 801ceee:	3b41      	subs	r3, #65	; 0x41
 801cef0:	221f      	movs	r2, #31
 801cef2:	fa02 f303 	lsl.w	r3, r2, r3
 801cef6:	43da      	mvns	r2, r3
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	681b      	ldr	r3, [r3, #0]
 801cefc:	400a      	ands	r2, r1
 801cefe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	681b      	ldr	r3, [r3, #0]
 801cf04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801cf06:	683b      	ldr	r3, [r7, #0]
 801cf08:	681b      	ldr	r3, [r3, #0]
 801cf0a:	b29b      	uxth	r3, r3
 801cf0c:	4618      	mov	r0, r3
 801cf0e:	683b      	ldr	r3, [r7, #0]
 801cf10:	685a      	ldr	r2, [r3, #4]
 801cf12:	4613      	mov	r3, r2
 801cf14:	009b      	lsls	r3, r3, #2
 801cf16:	4413      	add	r3, r2
 801cf18:	3b41      	subs	r3, #65	; 0x41
 801cf1a:	fa00 f203 	lsl.w	r2, r0, r3
 801cf1e:	687b      	ldr	r3, [r7, #4]
 801cf20:	681b      	ldr	r3, [r3, #0]
 801cf22:	430a      	orrs	r2, r1
 801cf24:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801cf26:	4b29      	ldr	r3, [pc, #164]	; (801cfcc <HAL_ADC_ConfigChannel+0x250>)
 801cf28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	681b      	ldr	r3, [r3, #0]
 801cf2e:	4a28      	ldr	r2, [pc, #160]	; (801cfd0 <HAL_ADC_ConfigChannel+0x254>)
 801cf30:	4293      	cmp	r3, r2
 801cf32:	d10f      	bne.n	801cf54 <HAL_ADC_ConfigChannel+0x1d8>
 801cf34:	683b      	ldr	r3, [r7, #0]
 801cf36:	681b      	ldr	r3, [r3, #0]
 801cf38:	2b12      	cmp	r3, #18
 801cf3a:	d10b      	bne.n	801cf54 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 801cf3c:	68fb      	ldr	r3, [r7, #12]
 801cf3e:	685b      	ldr	r3, [r3, #4]
 801cf40:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 801cf44:	68fb      	ldr	r3, [r7, #12]
 801cf46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 801cf48:	68fb      	ldr	r3, [r7, #12]
 801cf4a:	685b      	ldr	r3, [r3, #4]
 801cf4c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 801cf50:	68fb      	ldr	r3, [r7, #12]
 801cf52:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 801cf54:	687b      	ldr	r3, [r7, #4]
 801cf56:	681b      	ldr	r3, [r3, #0]
 801cf58:	4a1d      	ldr	r2, [pc, #116]	; (801cfd0 <HAL_ADC_ConfigChannel+0x254>)
 801cf5a:	4293      	cmp	r3, r2
 801cf5c:	d12b      	bne.n	801cfb6 <HAL_ADC_ConfigChannel+0x23a>
 801cf5e:	683b      	ldr	r3, [r7, #0]
 801cf60:	681b      	ldr	r3, [r3, #0]
 801cf62:	4a1c      	ldr	r2, [pc, #112]	; (801cfd4 <HAL_ADC_ConfigChannel+0x258>)
 801cf64:	4293      	cmp	r3, r2
 801cf66:	d003      	beq.n	801cf70 <HAL_ADC_ConfigChannel+0x1f4>
 801cf68:	683b      	ldr	r3, [r7, #0]
 801cf6a:	681b      	ldr	r3, [r3, #0]
 801cf6c:	2b11      	cmp	r3, #17
 801cf6e:	d122      	bne.n	801cfb6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 801cf70:	68fb      	ldr	r3, [r7, #12]
 801cf72:	685b      	ldr	r3, [r3, #4]
 801cf74:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 801cf78:	68fb      	ldr	r3, [r7, #12]
 801cf7a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801cf7c:	68fb      	ldr	r3, [r7, #12]
 801cf7e:	685b      	ldr	r3, [r3, #4]
 801cf80:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801cf84:	68fb      	ldr	r3, [r7, #12]
 801cf86:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 801cf88:	683b      	ldr	r3, [r7, #0]
 801cf8a:	681b      	ldr	r3, [r3, #0]
 801cf8c:	4a11      	ldr	r2, [pc, #68]	; (801cfd4 <HAL_ADC_ConfigChannel+0x258>)
 801cf8e:	4293      	cmp	r3, r2
 801cf90:	d111      	bne.n	801cfb6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801cf92:	4b11      	ldr	r3, [pc, #68]	; (801cfd8 <HAL_ADC_ConfigChannel+0x25c>)
 801cf94:	681b      	ldr	r3, [r3, #0]
 801cf96:	4a11      	ldr	r2, [pc, #68]	; (801cfdc <HAL_ADC_ConfigChannel+0x260>)
 801cf98:	fba2 2303 	umull	r2, r3, r2, r3
 801cf9c:	0c9a      	lsrs	r2, r3, #18
 801cf9e:	4613      	mov	r3, r2
 801cfa0:	009b      	lsls	r3, r3, #2
 801cfa2:	4413      	add	r3, r2
 801cfa4:	005b      	lsls	r3, r3, #1
 801cfa6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801cfa8:	e002      	b.n	801cfb0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 801cfaa:	68bb      	ldr	r3, [r7, #8]
 801cfac:	3b01      	subs	r3, #1
 801cfae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801cfb0:	68bb      	ldr	r3, [r7, #8]
 801cfb2:	2b00      	cmp	r3, #0
 801cfb4:	d1f9      	bne.n	801cfaa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801cfb6:	687b      	ldr	r3, [r7, #4]
 801cfb8:	2200      	movs	r2, #0
 801cfba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801cfbe:	2300      	movs	r3, #0
}
 801cfc0:	4618      	mov	r0, r3
 801cfc2:	3714      	adds	r7, #20
 801cfc4:	46bd      	mov	sp, r7
 801cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfca:	4770      	bx	lr
 801cfcc:	40012300 	.word	0x40012300
 801cfd0:	40012000 	.word	0x40012000
 801cfd4:	10000012 	.word	0x10000012
 801cfd8:	20000020 	.word	0x20000020
 801cfdc:	431bde83 	.word	0x431bde83

0801cfe0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 801cfe0:	b480      	push	{r7}
 801cfe2:	b085      	sub	sp, #20
 801cfe4:	af00      	add	r7, sp, #0
 801cfe6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801cfe8:	4b79      	ldr	r3, [pc, #484]	; (801d1d0 <ADC_Init+0x1f0>)
 801cfea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 801cfec:	68fb      	ldr	r3, [r7, #12]
 801cfee:	685b      	ldr	r3, [r3, #4]
 801cff0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801cff4:	68fb      	ldr	r3, [r7, #12]
 801cff6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 801cff8:	68fb      	ldr	r3, [r7, #12]
 801cffa:	685a      	ldr	r2, [r3, #4]
 801cffc:	687b      	ldr	r3, [r7, #4]
 801cffe:	685b      	ldr	r3, [r3, #4]
 801d000:	431a      	orrs	r2, r3
 801d002:	68fb      	ldr	r3, [r7, #12]
 801d004:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	681b      	ldr	r3, [r3, #0]
 801d00a:	685a      	ldr	r2, [r3, #4]
 801d00c:	687b      	ldr	r3, [r7, #4]
 801d00e:	681b      	ldr	r3, [r3, #0]
 801d010:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801d014:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	681b      	ldr	r3, [r3, #0]
 801d01a:	6859      	ldr	r1, [r3, #4]
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	691b      	ldr	r3, [r3, #16]
 801d020:	021a      	lsls	r2, r3, #8
 801d022:	687b      	ldr	r3, [r7, #4]
 801d024:	681b      	ldr	r3, [r3, #0]
 801d026:	430a      	orrs	r2, r1
 801d028:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801d02a:	687b      	ldr	r3, [r7, #4]
 801d02c:	681b      	ldr	r3, [r3, #0]
 801d02e:	685a      	ldr	r2, [r3, #4]
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 801d038:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801d03a:	687b      	ldr	r3, [r7, #4]
 801d03c:	681b      	ldr	r3, [r3, #0]
 801d03e:	6859      	ldr	r1, [r3, #4]
 801d040:	687b      	ldr	r3, [r7, #4]
 801d042:	689a      	ldr	r2, [r3, #8]
 801d044:	687b      	ldr	r3, [r7, #4]
 801d046:	681b      	ldr	r3, [r3, #0]
 801d048:	430a      	orrs	r2, r1
 801d04a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 801d04c:	687b      	ldr	r3, [r7, #4]
 801d04e:	681b      	ldr	r3, [r3, #0]
 801d050:	689a      	ldr	r2, [r3, #8]
 801d052:	687b      	ldr	r3, [r7, #4]
 801d054:	681b      	ldr	r3, [r3, #0]
 801d056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801d05a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	681b      	ldr	r3, [r3, #0]
 801d060:	6899      	ldr	r1, [r3, #8]
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	68da      	ldr	r2, [r3, #12]
 801d066:	687b      	ldr	r3, [r7, #4]
 801d068:	681b      	ldr	r3, [r3, #0]
 801d06a:	430a      	orrs	r2, r1
 801d06c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d072:	4a58      	ldr	r2, [pc, #352]	; (801d1d4 <ADC_Init+0x1f4>)
 801d074:	4293      	cmp	r3, r2
 801d076:	d022      	beq.n	801d0be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	681b      	ldr	r3, [r3, #0]
 801d07c:	689a      	ldr	r2, [r3, #8]
 801d07e:	687b      	ldr	r3, [r7, #4]
 801d080:	681b      	ldr	r3, [r3, #0]
 801d082:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801d086:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 801d088:	687b      	ldr	r3, [r7, #4]
 801d08a:	681b      	ldr	r3, [r3, #0]
 801d08c:	6899      	ldr	r1, [r3, #8]
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801d092:	687b      	ldr	r3, [r7, #4]
 801d094:	681b      	ldr	r3, [r3, #0]
 801d096:	430a      	orrs	r2, r1
 801d098:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	681b      	ldr	r3, [r3, #0]
 801d09e:	689a      	ldr	r2, [r3, #8]
 801d0a0:	687b      	ldr	r3, [r7, #4]
 801d0a2:	681b      	ldr	r3, [r3, #0]
 801d0a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801d0a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 801d0aa:	687b      	ldr	r3, [r7, #4]
 801d0ac:	681b      	ldr	r3, [r3, #0]
 801d0ae:	6899      	ldr	r1, [r3, #8]
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d0b4:	687b      	ldr	r3, [r7, #4]
 801d0b6:	681b      	ldr	r3, [r3, #0]
 801d0b8:	430a      	orrs	r2, r1
 801d0ba:	609a      	str	r2, [r3, #8]
 801d0bc:	e00f      	b.n	801d0de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801d0be:	687b      	ldr	r3, [r7, #4]
 801d0c0:	681b      	ldr	r3, [r3, #0]
 801d0c2:	689a      	ldr	r2, [r3, #8]
 801d0c4:	687b      	ldr	r3, [r7, #4]
 801d0c6:	681b      	ldr	r3, [r3, #0]
 801d0c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801d0cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801d0ce:	687b      	ldr	r3, [r7, #4]
 801d0d0:	681b      	ldr	r3, [r3, #0]
 801d0d2:	689a      	ldr	r2, [r3, #8]
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	681b      	ldr	r3, [r3, #0]
 801d0d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801d0dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801d0de:	687b      	ldr	r3, [r7, #4]
 801d0e0:	681b      	ldr	r3, [r3, #0]
 801d0e2:	689a      	ldr	r2, [r3, #8]
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	681b      	ldr	r3, [r3, #0]
 801d0e8:	f022 0202 	bic.w	r2, r2, #2
 801d0ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	681b      	ldr	r3, [r3, #0]
 801d0f2:	6899      	ldr	r1, [r3, #8]
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	7e1b      	ldrb	r3, [r3, #24]
 801d0f8:	005a      	lsls	r2, r3, #1
 801d0fa:	687b      	ldr	r3, [r7, #4]
 801d0fc:	681b      	ldr	r3, [r3, #0]
 801d0fe:	430a      	orrs	r2, r1
 801d100:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 801d102:	687b      	ldr	r3, [r7, #4]
 801d104:	f893 3020 	ldrb.w	r3, [r3, #32]
 801d108:	2b00      	cmp	r3, #0
 801d10a:	d01b      	beq.n	801d144 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	681b      	ldr	r3, [r3, #0]
 801d110:	685a      	ldr	r2, [r3, #4]
 801d112:	687b      	ldr	r3, [r7, #4]
 801d114:	681b      	ldr	r3, [r3, #0]
 801d116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d11a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 801d11c:	687b      	ldr	r3, [r7, #4]
 801d11e:	681b      	ldr	r3, [r3, #0]
 801d120:	685a      	ldr	r2, [r3, #4]
 801d122:	687b      	ldr	r3, [r7, #4]
 801d124:	681b      	ldr	r3, [r3, #0]
 801d126:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801d12a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 801d12c:	687b      	ldr	r3, [r7, #4]
 801d12e:	681b      	ldr	r3, [r3, #0]
 801d130:	6859      	ldr	r1, [r3, #4]
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d136:	3b01      	subs	r3, #1
 801d138:	035a      	lsls	r2, r3, #13
 801d13a:	687b      	ldr	r3, [r7, #4]
 801d13c:	681b      	ldr	r3, [r3, #0]
 801d13e:	430a      	orrs	r2, r1
 801d140:	605a      	str	r2, [r3, #4]
 801d142:	e007      	b.n	801d154 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 801d144:	687b      	ldr	r3, [r7, #4]
 801d146:	681b      	ldr	r3, [r3, #0]
 801d148:	685a      	ldr	r2, [r3, #4]
 801d14a:	687b      	ldr	r3, [r7, #4]
 801d14c:	681b      	ldr	r3, [r3, #0]
 801d14e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801d152:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 801d154:	687b      	ldr	r3, [r7, #4]
 801d156:	681b      	ldr	r3, [r3, #0]
 801d158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	681b      	ldr	r3, [r3, #0]
 801d15e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801d162:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	681b      	ldr	r3, [r3, #0]
 801d168:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801d16a:	687b      	ldr	r3, [r7, #4]
 801d16c:	69db      	ldr	r3, [r3, #28]
 801d16e:	3b01      	subs	r3, #1
 801d170:	051a      	lsls	r2, r3, #20
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	681b      	ldr	r3, [r3, #0]
 801d176:	430a      	orrs	r2, r1
 801d178:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 801d17a:	687b      	ldr	r3, [r7, #4]
 801d17c:	681b      	ldr	r3, [r3, #0]
 801d17e:	689a      	ldr	r2, [r3, #8]
 801d180:	687b      	ldr	r3, [r7, #4]
 801d182:	681b      	ldr	r3, [r3, #0]
 801d184:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801d188:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801d18a:	687b      	ldr	r3, [r7, #4]
 801d18c:	681b      	ldr	r3, [r3, #0]
 801d18e:	6899      	ldr	r1, [r3, #8]
 801d190:	687b      	ldr	r3, [r7, #4]
 801d192:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d196:	025a      	lsls	r2, r3, #9
 801d198:	687b      	ldr	r3, [r7, #4]
 801d19a:	681b      	ldr	r3, [r3, #0]
 801d19c:	430a      	orrs	r2, r1
 801d19e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 801d1a0:	687b      	ldr	r3, [r7, #4]
 801d1a2:	681b      	ldr	r3, [r3, #0]
 801d1a4:	689a      	ldr	r2, [r3, #8]
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	681b      	ldr	r3, [r3, #0]
 801d1aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d1ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801d1b0:	687b      	ldr	r3, [r7, #4]
 801d1b2:	681b      	ldr	r3, [r3, #0]
 801d1b4:	6899      	ldr	r1, [r3, #8]
 801d1b6:	687b      	ldr	r3, [r7, #4]
 801d1b8:	695b      	ldr	r3, [r3, #20]
 801d1ba:	029a      	lsls	r2, r3, #10
 801d1bc:	687b      	ldr	r3, [r7, #4]
 801d1be:	681b      	ldr	r3, [r3, #0]
 801d1c0:	430a      	orrs	r2, r1
 801d1c2:	609a      	str	r2, [r3, #8]
}
 801d1c4:	bf00      	nop
 801d1c6:	3714      	adds	r7, #20
 801d1c8:	46bd      	mov	sp, r7
 801d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1ce:	4770      	bx	lr
 801d1d0:	40012300 	.word	0x40012300
 801d1d4:	0f000001 	.word	0x0f000001

0801d1d8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 801d1d8:	b580      	push	{r7, lr}
 801d1da:	b084      	sub	sp, #16
 801d1dc:	af00      	add	r7, sp, #0
 801d1de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801d1e0:	687b      	ldr	r3, [r7, #4]
 801d1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d1e4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 801d1e6:	68fb      	ldr	r3, [r7, #12]
 801d1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d1ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801d1ee:	2b00      	cmp	r3, #0
 801d1f0:	d13c      	bne.n	801d26c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801d1f2:	68fb      	ldr	r3, [r7, #12]
 801d1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d1f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801d1fa:	68fb      	ldr	r3, [r7, #12]
 801d1fc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801d1fe:	68fb      	ldr	r3, [r7, #12]
 801d200:	681b      	ldr	r3, [r3, #0]
 801d202:	689b      	ldr	r3, [r3, #8]
 801d204:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d208:	2b00      	cmp	r3, #0
 801d20a:	d12b      	bne.n	801d264 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801d20c:	68fb      	ldr	r3, [r7, #12]
 801d20e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801d210:	2b00      	cmp	r3, #0
 801d212:	d127      	bne.n	801d264 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801d214:	68fb      	ldr	r3, [r7, #12]
 801d216:	681b      	ldr	r3, [r3, #0]
 801d218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d21a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801d21e:	2b00      	cmp	r3, #0
 801d220:	d006      	beq.n	801d230 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801d222:	68fb      	ldr	r3, [r7, #12]
 801d224:	681b      	ldr	r3, [r3, #0]
 801d226:	689b      	ldr	r3, [r3, #8]
 801d228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801d22c:	2b00      	cmp	r3, #0
 801d22e:	d119      	bne.n	801d264 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801d230:	68fb      	ldr	r3, [r7, #12]
 801d232:	681b      	ldr	r3, [r3, #0]
 801d234:	685a      	ldr	r2, [r3, #4]
 801d236:	68fb      	ldr	r3, [r7, #12]
 801d238:	681b      	ldr	r3, [r3, #0]
 801d23a:	f022 0220 	bic.w	r2, r2, #32
 801d23e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 801d240:	68fb      	ldr	r3, [r7, #12]
 801d242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d244:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801d248:	68fb      	ldr	r3, [r7, #12]
 801d24a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801d24c:	68fb      	ldr	r3, [r7, #12]
 801d24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801d254:	2b00      	cmp	r3, #0
 801d256:	d105      	bne.n	801d264 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801d258:	68fb      	ldr	r3, [r7, #12]
 801d25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d25c:	f043 0201 	orr.w	r2, r3, #1
 801d260:	68fb      	ldr	r3, [r7, #12]
 801d262:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801d264:	68f8      	ldr	r0, [r7, #12]
 801d266:	f7ff fd6b 	bl	801cd40 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801d26a:	e00e      	b.n	801d28a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801d26c:	68fb      	ldr	r3, [r7, #12]
 801d26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d270:	f003 0310 	and.w	r3, r3, #16
 801d274:	2b00      	cmp	r3, #0
 801d276:	d003      	beq.n	801d280 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 801d278:	68f8      	ldr	r0, [r7, #12]
 801d27a:	f7ff fd75 	bl	801cd68 <HAL_ADC_ErrorCallback>
}
 801d27e:	e004      	b.n	801d28a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801d280:	68fb      	ldr	r3, [r7, #12]
 801d282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d286:	6878      	ldr	r0, [r7, #4]
 801d288:	4798      	blx	r3
}
 801d28a:	bf00      	nop
 801d28c:	3710      	adds	r7, #16
 801d28e:	46bd      	mov	sp, r7
 801d290:	bd80      	pop	{r7, pc}

0801d292 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 801d292:	b580      	push	{r7, lr}
 801d294:	b084      	sub	sp, #16
 801d296:	af00      	add	r7, sp, #0
 801d298:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801d29a:	687b      	ldr	r3, [r7, #4]
 801d29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d29e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801d2a0:	68f8      	ldr	r0, [r7, #12]
 801d2a2:	f7ff fd57 	bl	801cd54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801d2a6:	bf00      	nop
 801d2a8:	3710      	adds	r7, #16
 801d2aa:	46bd      	mov	sp, r7
 801d2ac:	bd80      	pop	{r7, pc}

0801d2ae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 801d2ae:	b580      	push	{r7, lr}
 801d2b0:	b084      	sub	sp, #16
 801d2b2:	af00      	add	r7, sp, #0
 801d2b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801d2b6:	687b      	ldr	r3, [r7, #4]
 801d2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d2ba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 801d2bc:	68fb      	ldr	r3, [r7, #12]
 801d2be:	2240      	movs	r2, #64	; 0x40
 801d2c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 801d2c2:	68fb      	ldr	r3, [r7, #12]
 801d2c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d2c6:	f043 0204 	orr.w	r2, r3, #4
 801d2ca:	68fb      	ldr	r3, [r7, #12]
 801d2cc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801d2ce:	68f8      	ldr	r0, [r7, #12]
 801d2d0:	f7ff fd4a 	bl	801cd68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801d2d4:	bf00      	nop
 801d2d6:	3710      	adds	r7, #16
 801d2d8:	46bd      	mov	sp, r7
 801d2da:	bd80      	pop	{r7, pc}

0801d2dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801d2dc:	b480      	push	{r7}
 801d2de:	b085      	sub	sp, #20
 801d2e0:	af00      	add	r7, sp, #0
 801d2e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	f003 0307 	and.w	r3, r3, #7
 801d2ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801d2ec:	4b0c      	ldr	r3, [pc, #48]	; (801d320 <__NVIC_SetPriorityGrouping+0x44>)
 801d2ee:	68db      	ldr	r3, [r3, #12]
 801d2f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801d2f2:	68ba      	ldr	r2, [r7, #8]
 801d2f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801d2f8:	4013      	ands	r3, r2
 801d2fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801d2fc:	68fb      	ldr	r3, [r7, #12]
 801d2fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801d300:	68bb      	ldr	r3, [r7, #8]
 801d302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801d304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801d308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801d30c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801d30e:	4a04      	ldr	r2, [pc, #16]	; (801d320 <__NVIC_SetPriorityGrouping+0x44>)
 801d310:	68bb      	ldr	r3, [r7, #8]
 801d312:	60d3      	str	r3, [r2, #12]
}
 801d314:	bf00      	nop
 801d316:	3714      	adds	r7, #20
 801d318:	46bd      	mov	sp, r7
 801d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d31e:	4770      	bx	lr
 801d320:	e000ed00 	.word	0xe000ed00

0801d324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801d324:	b480      	push	{r7}
 801d326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801d328:	4b04      	ldr	r3, [pc, #16]	; (801d33c <__NVIC_GetPriorityGrouping+0x18>)
 801d32a:	68db      	ldr	r3, [r3, #12]
 801d32c:	0a1b      	lsrs	r3, r3, #8
 801d32e:	f003 0307 	and.w	r3, r3, #7
}
 801d332:	4618      	mov	r0, r3
 801d334:	46bd      	mov	sp, r7
 801d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d33a:	4770      	bx	lr
 801d33c:	e000ed00 	.word	0xe000ed00

0801d340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801d340:	b480      	push	{r7}
 801d342:	b083      	sub	sp, #12
 801d344:	af00      	add	r7, sp, #0
 801d346:	4603      	mov	r3, r0
 801d348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801d34a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d34e:	2b00      	cmp	r3, #0
 801d350:	db0b      	blt.n	801d36a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801d352:	79fb      	ldrb	r3, [r7, #7]
 801d354:	f003 021f 	and.w	r2, r3, #31
 801d358:	4907      	ldr	r1, [pc, #28]	; (801d378 <__NVIC_EnableIRQ+0x38>)
 801d35a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d35e:	095b      	lsrs	r3, r3, #5
 801d360:	2001      	movs	r0, #1
 801d362:	fa00 f202 	lsl.w	r2, r0, r2
 801d366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801d36a:	bf00      	nop
 801d36c:	370c      	adds	r7, #12
 801d36e:	46bd      	mov	sp, r7
 801d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d374:	4770      	bx	lr
 801d376:	bf00      	nop
 801d378:	e000e100 	.word	0xe000e100

0801d37c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801d37c:	b480      	push	{r7}
 801d37e:	b083      	sub	sp, #12
 801d380:	af00      	add	r7, sp, #0
 801d382:	4603      	mov	r3, r0
 801d384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801d386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d38a:	2b00      	cmp	r3, #0
 801d38c:	db12      	blt.n	801d3b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801d38e:	79fb      	ldrb	r3, [r7, #7]
 801d390:	f003 021f 	and.w	r2, r3, #31
 801d394:	490a      	ldr	r1, [pc, #40]	; (801d3c0 <__NVIC_DisableIRQ+0x44>)
 801d396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d39a:	095b      	lsrs	r3, r3, #5
 801d39c:	2001      	movs	r0, #1
 801d39e:	fa00 f202 	lsl.w	r2, r0, r2
 801d3a2:	3320      	adds	r3, #32
 801d3a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801d3a8:	f3bf 8f4f 	dsb	sy
}
 801d3ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801d3ae:	f3bf 8f6f 	isb	sy
}
 801d3b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 801d3b4:	bf00      	nop
 801d3b6:	370c      	adds	r7, #12
 801d3b8:	46bd      	mov	sp, r7
 801d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3be:	4770      	bx	lr
 801d3c0:	e000e100 	.word	0xe000e100

0801d3c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801d3c4:	b480      	push	{r7}
 801d3c6:	b083      	sub	sp, #12
 801d3c8:	af00      	add	r7, sp, #0
 801d3ca:	4603      	mov	r3, r0
 801d3cc:	6039      	str	r1, [r7, #0]
 801d3ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801d3d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d3d4:	2b00      	cmp	r3, #0
 801d3d6:	db0a      	blt.n	801d3ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801d3d8:	683b      	ldr	r3, [r7, #0]
 801d3da:	b2da      	uxtb	r2, r3
 801d3dc:	490c      	ldr	r1, [pc, #48]	; (801d410 <__NVIC_SetPriority+0x4c>)
 801d3de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d3e2:	0112      	lsls	r2, r2, #4
 801d3e4:	b2d2      	uxtb	r2, r2
 801d3e6:	440b      	add	r3, r1
 801d3e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801d3ec:	e00a      	b.n	801d404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801d3ee:	683b      	ldr	r3, [r7, #0]
 801d3f0:	b2da      	uxtb	r2, r3
 801d3f2:	4908      	ldr	r1, [pc, #32]	; (801d414 <__NVIC_SetPriority+0x50>)
 801d3f4:	79fb      	ldrb	r3, [r7, #7]
 801d3f6:	f003 030f 	and.w	r3, r3, #15
 801d3fa:	3b04      	subs	r3, #4
 801d3fc:	0112      	lsls	r2, r2, #4
 801d3fe:	b2d2      	uxtb	r2, r2
 801d400:	440b      	add	r3, r1
 801d402:	761a      	strb	r2, [r3, #24]
}
 801d404:	bf00      	nop
 801d406:	370c      	adds	r7, #12
 801d408:	46bd      	mov	sp, r7
 801d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d40e:	4770      	bx	lr
 801d410:	e000e100 	.word	0xe000e100
 801d414:	e000ed00 	.word	0xe000ed00

0801d418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801d418:	b480      	push	{r7}
 801d41a:	b089      	sub	sp, #36	; 0x24
 801d41c:	af00      	add	r7, sp, #0
 801d41e:	60f8      	str	r0, [r7, #12]
 801d420:	60b9      	str	r1, [r7, #8]
 801d422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801d424:	68fb      	ldr	r3, [r7, #12]
 801d426:	f003 0307 	and.w	r3, r3, #7
 801d42a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801d42c:	69fb      	ldr	r3, [r7, #28]
 801d42e:	f1c3 0307 	rsb	r3, r3, #7
 801d432:	2b04      	cmp	r3, #4
 801d434:	bf28      	it	cs
 801d436:	2304      	movcs	r3, #4
 801d438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801d43a:	69fb      	ldr	r3, [r7, #28]
 801d43c:	3304      	adds	r3, #4
 801d43e:	2b06      	cmp	r3, #6
 801d440:	d902      	bls.n	801d448 <NVIC_EncodePriority+0x30>
 801d442:	69fb      	ldr	r3, [r7, #28]
 801d444:	3b03      	subs	r3, #3
 801d446:	e000      	b.n	801d44a <NVIC_EncodePriority+0x32>
 801d448:	2300      	movs	r3, #0
 801d44a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801d44c:	f04f 32ff 	mov.w	r2, #4294967295
 801d450:	69bb      	ldr	r3, [r7, #24]
 801d452:	fa02 f303 	lsl.w	r3, r2, r3
 801d456:	43da      	mvns	r2, r3
 801d458:	68bb      	ldr	r3, [r7, #8]
 801d45a:	401a      	ands	r2, r3
 801d45c:	697b      	ldr	r3, [r7, #20]
 801d45e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801d460:	f04f 31ff 	mov.w	r1, #4294967295
 801d464:	697b      	ldr	r3, [r7, #20]
 801d466:	fa01 f303 	lsl.w	r3, r1, r3
 801d46a:	43d9      	mvns	r1, r3
 801d46c:	687b      	ldr	r3, [r7, #4]
 801d46e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801d470:	4313      	orrs	r3, r2
         );
}
 801d472:	4618      	mov	r0, r3
 801d474:	3724      	adds	r7, #36	; 0x24
 801d476:	46bd      	mov	sp, r7
 801d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d47c:	4770      	bx	lr
	...

0801d480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801d480:	b580      	push	{r7, lr}
 801d482:	b082      	sub	sp, #8
 801d484:	af00      	add	r7, sp, #0
 801d486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801d488:	687b      	ldr	r3, [r7, #4]
 801d48a:	3b01      	subs	r3, #1
 801d48c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801d490:	d301      	bcc.n	801d496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801d492:	2301      	movs	r3, #1
 801d494:	e00f      	b.n	801d4b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801d496:	4a0a      	ldr	r2, [pc, #40]	; (801d4c0 <SysTick_Config+0x40>)
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	3b01      	subs	r3, #1
 801d49c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801d49e:	210f      	movs	r1, #15
 801d4a0:	f04f 30ff 	mov.w	r0, #4294967295
 801d4a4:	f7ff ff8e 	bl	801d3c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801d4a8:	4b05      	ldr	r3, [pc, #20]	; (801d4c0 <SysTick_Config+0x40>)
 801d4aa:	2200      	movs	r2, #0
 801d4ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801d4ae:	4b04      	ldr	r3, [pc, #16]	; (801d4c0 <SysTick_Config+0x40>)
 801d4b0:	2207      	movs	r2, #7
 801d4b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801d4b4:	2300      	movs	r3, #0
}
 801d4b6:	4618      	mov	r0, r3
 801d4b8:	3708      	adds	r7, #8
 801d4ba:	46bd      	mov	sp, r7
 801d4bc:	bd80      	pop	{r7, pc}
 801d4be:	bf00      	nop
 801d4c0:	e000e010 	.word	0xe000e010

0801d4c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801d4c4:	b580      	push	{r7, lr}
 801d4c6:	b082      	sub	sp, #8
 801d4c8:	af00      	add	r7, sp, #0
 801d4ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801d4cc:	6878      	ldr	r0, [r7, #4]
 801d4ce:	f7ff ff05 	bl	801d2dc <__NVIC_SetPriorityGrouping>
}
 801d4d2:	bf00      	nop
 801d4d4:	3708      	adds	r7, #8
 801d4d6:	46bd      	mov	sp, r7
 801d4d8:	bd80      	pop	{r7, pc}

0801d4da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801d4da:	b580      	push	{r7, lr}
 801d4dc:	b086      	sub	sp, #24
 801d4de:	af00      	add	r7, sp, #0
 801d4e0:	4603      	mov	r3, r0
 801d4e2:	60b9      	str	r1, [r7, #8]
 801d4e4:	607a      	str	r2, [r7, #4]
 801d4e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801d4e8:	2300      	movs	r3, #0
 801d4ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801d4ec:	f7ff ff1a 	bl	801d324 <__NVIC_GetPriorityGrouping>
 801d4f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801d4f2:	687a      	ldr	r2, [r7, #4]
 801d4f4:	68b9      	ldr	r1, [r7, #8]
 801d4f6:	6978      	ldr	r0, [r7, #20]
 801d4f8:	f7ff ff8e 	bl	801d418 <NVIC_EncodePriority>
 801d4fc:	4602      	mov	r2, r0
 801d4fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d502:	4611      	mov	r1, r2
 801d504:	4618      	mov	r0, r3
 801d506:	f7ff ff5d 	bl	801d3c4 <__NVIC_SetPriority>
}
 801d50a:	bf00      	nop
 801d50c:	3718      	adds	r7, #24
 801d50e:	46bd      	mov	sp, r7
 801d510:	bd80      	pop	{r7, pc}

0801d512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801d512:	b580      	push	{r7, lr}
 801d514:	b082      	sub	sp, #8
 801d516:	af00      	add	r7, sp, #0
 801d518:	4603      	mov	r3, r0
 801d51a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801d51c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d520:	4618      	mov	r0, r3
 801d522:	f7ff ff0d 	bl	801d340 <__NVIC_EnableIRQ>
}
 801d526:	bf00      	nop
 801d528:	3708      	adds	r7, #8
 801d52a:	46bd      	mov	sp, r7
 801d52c:	bd80      	pop	{r7, pc}

0801d52e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801d52e:	b580      	push	{r7, lr}
 801d530:	b082      	sub	sp, #8
 801d532:	af00      	add	r7, sp, #0
 801d534:	4603      	mov	r3, r0
 801d536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801d538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d53c:	4618      	mov	r0, r3
 801d53e:	f7ff ff1d 	bl	801d37c <__NVIC_DisableIRQ>
}
 801d542:	bf00      	nop
 801d544:	3708      	adds	r7, #8
 801d546:	46bd      	mov	sp, r7
 801d548:	bd80      	pop	{r7, pc}

0801d54a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801d54a:	b580      	push	{r7, lr}
 801d54c:	b082      	sub	sp, #8
 801d54e:	af00      	add	r7, sp, #0
 801d550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801d552:	6878      	ldr	r0, [r7, #4]
 801d554:	f7ff ff94 	bl	801d480 <SysTick_Config>
 801d558:	4603      	mov	r3, r0
}
 801d55a:	4618      	mov	r0, r3
 801d55c:	3708      	adds	r7, #8
 801d55e:	46bd      	mov	sp, r7
 801d560:	bd80      	pop	{r7, pc}
	...

0801d564 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801d564:	b580      	push	{r7, lr}
 801d566:	b086      	sub	sp, #24
 801d568:	af00      	add	r7, sp, #0
 801d56a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801d56c:	2300      	movs	r3, #0
 801d56e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801d570:	f7ff faa6 	bl	801cac0 <HAL_GetTick>
 801d574:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801d576:	687b      	ldr	r3, [r7, #4]
 801d578:	2b00      	cmp	r3, #0
 801d57a:	d101      	bne.n	801d580 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801d57c:	2301      	movs	r3, #1
 801d57e:	e099      	b.n	801d6b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801d580:	687b      	ldr	r3, [r7, #4]
 801d582:	2202      	movs	r2, #2
 801d584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801d588:	687b      	ldr	r3, [r7, #4]
 801d58a:	2200      	movs	r2, #0
 801d58c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801d590:	687b      	ldr	r3, [r7, #4]
 801d592:	681b      	ldr	r3, [r3, #0]
 801d594:	681a      	ldr	r2, [r3, #0]
 801d596:	687b      	ldr	r3, [r7, #4]
 801d598:	681b      	ldr	r3, [r3, #0]
 801d59a:	f022 0201 	bic.w	r2, r2, #1
 801d59e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801d5a0:	e00f      	b.n	801d5c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801d5a2:	f7ff fa8d 	bl	801cac0 <HAL_GetTick>
 801d5a6:	4602      	mov	r2, r0
 801d5a8:	693b      	ldr	r3, [r7, #16]
 801d5aa:	1ad3      	subs	r3, r2, r3
 801d5ac:	2b05      	cmp	r3, #5
 801d5ae:	d908      	bls.n	801d5c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801d5b0:	687b      	ldr	r3, [r7, #4]
 801d5b2:	2220      	movs	r2, #32
 801d5b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801d5b6:	687b      	ldr	r3, [r7, #4]
 801d5b8:	2203      	movs	r2, #3
 801d5ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801d5be:	2303      	movs	r3, #3
 801d5c0:	e078      	b.n	801d6b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801d5c2:	687b      	ldr	r3, [r7, #4]
 801d5c4:	681b      	ldr	r3, [r3, #0]
 801d5c6:	681b      	ldr	r3, [r3, #0]
 801d5c8:	f003 0301 	and.w	r3, r3, #1
 801d5cc:	2b00      	cmp	r3, #0
 801d5ce:	d1e8      	bne.n	801d5a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801d5d0:	687b      	ldr	r3, [r7, #4]
 801d5d2:	681b      	ldr	r3, [r3, #0]
 801d5d4:	681b      	ldr	r3, [r3, #0]
 801d5d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801d5d8:	697a      	ldr	r2, [r7, #20]
 801d5da:	4b38      	ldr	r3, [pc, #224]	; (801d6bc <HAL_DMA_Init+0x158>)
 801d5dc:	4013      	ands	r3, r2
 801d5de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801d5e0:	687b      	ldr	r3, [r7, #4]
 801d5e2:	685a      	ldr	r2, [r3, #4]
 801d5e4:	687b      	ldr	r3, [r7, #4]
 801d5e6:	689b      	ldr	r3, [r3, #8]
 801d5e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801d5ea:	687b      	ldr	r3, [r7, #4]
 801d5ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801d5ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801d5f0:	687b      	ldr	r3, [r7, #4]
 801d5f2:	691b      	ldr	r3, [r3, #16]
 801d5f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801d5f6:	687b      	ldr	r3, [r7, #4]
 801d5f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801d5fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801d5fc:	687b      	ldr	r3, [r7, #4]
 801d5fe:	699b      	ldr	r3, [r3, #24]
 801d600:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801d602:	687b      	ldr	r3, [r7, #4]
 801d604:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801d606:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801d608:	687b      	ldr	r3, [r7, #4]
 801d60a:	6a1b      	ldr	r3, [r3, #32]
 801d60c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801d60e:	697a      	ldr	r2, [r7, #20]
 801d610:	4313      	orrs	r3, r2
 801d612:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d618:	2b04      	cmp	r3, #4
 801d61a:	d107      	bne.n	801d62c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801d61c:	687b      	ldr	r3, [r7, #4]
 801d61e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d624:	4313      	orrs	r3, r2
 801d626:	697a      	ldr	r2, [r7, #20]
 801d628:	4313      	orrs	r3, r2
 801d62a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801d62c:	687b      	ldr	r3, [r7, #4]
 801d62e:	681b      	ldr	r3, [r3, #0]
 801d630:	697a      	ldr	r2, [r7, #20]
 801d632:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801d634:	687b      	ldr	r3, [r7, #4]
 801d636:	681b      	ldr	r3, [r3, #0]
 801d638:	695b      	ldr	r3, [r3, #20]
 801d63a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801d63c:	697b      	ldr	r3, [r7, #20]
 801d63e:	f023 0307 	bic.w	r3, r3, #7
 801d642:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801d644:	687b      	ldr	r3, [r7, #4]
 801d646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d648:	697a      	ldr	r2, [r7, #20]
 801d64a:	4313      	orrs	r3, r2
 801d64c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801d64e:	687b      	ldr	r3, [r7, #4]
 801d650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d652:	2b04      	cmp	r3, #4
 801d654:	d117      	bne.n	801d686 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d65a:	697a      	ldr	r2, [r7, #20]
 801d65c:	4313      	orrs	r3, r2
 801d65e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801d660:	687b      	ldr	r3, [r7, #4]
 801d662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d664:	2b00      	cmp	r3, #0
 801d666:	d00e      	beq.n	801d686 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801d668:	6878      	ldr	r0, [r7, #4]
 801d66a:	f000 fb1b 	bl	801dca4 <DMA_CheckFifoParam>
 801d66e:	4603      	mov	r3, r0
 801d670:	2b00      	cmp	r3, #0
 801d672:	d008      	beq.n	801d686 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801d674:	687b      	ldr	r3, [r7, #4]
 801d676:	2240      	movs	r2, #64	; 0x40
 801d678:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801d67a:	687b      	ldr	r3, [r7, #4]
 801d67c:	2201      	movs	r2, #1
 801d67e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801d682:	2301      	movs	r3, #1
 801d684:	e016      	b.n	801d6b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801d686:	687b      	ldr	r3, [r7, #4]
 801d688:	681b      	ldr	r3, [r3, #0]
 801d68a:	697a      	ldr	r2, [r7, #20]
 801d68c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801d68e:	6878      	ldr	r0, [r7, #4]
 801d690:	f000 fad2 	bl	801dc38 <DMA_CalcBaseAndBitshift>
 801d694:	4603      	mov	r3, r0
 801d696:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801d698:	687b      	ldr	r3, [r7, #4]
 801d69a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d69c:	223f      	movs	r2, #63	; 0x3f
 801d69e:	409a      	lsls	r2, r3
 801d6a0:	68fb      	ldr	r3, [r7, #12]
 801d6a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801d6a4:	687b      	ldr	r3, [r7, #4]
 801d6a6:	2200      	movs	r2, #0
 801d6a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801d6aa:	687b      	ldr	r3, [r7, #4]
 801d6ac:	2201      	movs	r2, #1
 801d6ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801d6b2:	2300      	movs	r3, #0
}
 801d6b4:	4618      	mov	r0, r3
 801d6b6:	3718      	adds	r7, #24
 801d6b8:	46bd      	mov	sp, r7
 801d6ba:	bd80      	pop	{r7, pc}
 801d6bc:	f010803f 	.word	0xf010803f

0801d6c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801d6c0:	b580      	push	{r7, lr}
 801d6c2:	b086      	sub	sp, #24
 801d6c4:	af00      	add	r7, sp, #0
 801d6c6:	60f8      	str	r0, [r7, #12]
 801d6c8:	60b9      	str	r1, [r7, #8]
 801d6ca:	607a      	str	r2, [r7, #4]
 801d6cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801d6ce:	2300      	movs	r3, #0
 801d6d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801d6d2:	68fb      	ldr	r3, [r7, #12]
 801d6d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d6d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801d6d8:	68fb      	ldr	r3, [r7, #12]
 801d6da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801d6de:	2b01      	cmp	r3, #1
 801d6e0:	d101      	bne.n	801d6e6 <HAL_DMA_Start_IT+0x26>
 801d6e2:	2302      	movs	r3, #2
 801d6e4:	e040      	b.n	801d768 <HAL_DMA_Start_IT+0xa8>
 801d6e6:	68fb      	ldr	r3, [r7, #12]
 801d6e8:	2201      	movs	r2, #1
 801d6ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801d6ee:	68fb      	ldr	r3, [r7, #12]
 801d6f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801d6f4:	b2db      	uxtb	r3, r3
 801d6f6:	2b01      	cmp	r3, #1
 801d6f8:	d12f      	bne.n	801d75a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801d6fa:	68fb      	ldr	r3, [r7, #12]
 801d6fc:	2202      	movs	r2, #2
 801d6fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801d702:	68fb      	ldr	r3, [r7, #12]
 801d704:	2200      	movs	r2, #0
 801d706:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801d708:	683b      	ldr	r3, [r7, #0]
 801d70a:	687a      	ldr	r2, [r7, #4]
 801d70c:	68b9      	ldr	r1, [r7, #8]
 801d70e:	68f8      	ldr	r0, [r7, #12]
 801d710:	f000 fa64 	bl	801dbdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801d714:	68fb      	ldr	r3, [r7, #12]
 801d716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d718:	223f      	movs	r2, #63	; 0x3f
 801d71a:	409a      	lsls	r2, r3
 801d71c:	693b      	ldr	r3, [r7, #16]
 801d71e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 801d720:	68fb      	ldr	r3, [r7, #12]
 801d722:	681b      	ldr	r3, [r3, #0]
 801d724:	681a      	ldr	r2, [r3, #0]
 801d726:	68fb      	ldr	r3, [r7, #12]
 801d728:	681b      	ldr	r3, [r3, #0]
 801d72a:	f042 0216 	orr.w	r2, r2, #22
 801d72e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 801d730:	68fb      	ldr	r3, [r7, #12]
 801d732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d734:	2b00      	cmp	r3, #0
 801d736:	d007      	beq.n	801d748 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801d738:	68fb      	ldr	r3, [r7, #12]
 801d73a:	681b      	ldr	r3, [r3, #0]
 801d73c:	681a      	ldr	r2, [r3, #0]
 801d73e:	68fb      	ldr	r3, [r7, #12]
 801d740:	681b      	ldr	r3, [r3, #0]
 801d742:	f042 0208 	orr.w	r2, r2, #8
 801d746:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801d748:	68fb      	ldr	r3, [r7, #12]
 801d74a:	681b      	ldr	r3, [r3, #0]
 801d74c:	681a      	ldr	r2, [r3, #0]
 801d74e:	68fb      	ldr	r3, [r7, #12]
 801d750:	681b      	ldr	r3, [r3, #0]
 801d752:	f042 0201 	orr.w	r2, r2, #1
 801d756:	601a      	str	r2, [r3, #0]
 801d758:	e005      	b.n	801d766 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801d75a:	68fb      	ldr	r3, [r7, #12]
 801d75c:	2200      	movs	r2, #0
 801d75e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801d762:	2302      	movs	r3, #2
 801d764:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801d766:	7dfb      	ldrb	r3, [r7, #23]
}
 801d768:	4618      	mov	r0, r3
 801d76a:	3718      	adds	r7, #24
 801d76c:	46bd      	mov	sp, r7
 801d76e:	bd80      	pop	{r7, pc}

0801d770 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801d770:	b580      	push	{r7, lr}
 801d772:	b084      	sub	sp, #16
 801d774:	af00      	add	r7, sp, #0
 801d776:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801d778:	687b      	ldr	r3, [r7, #4]
 801d77a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d77c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801d77e:	f7ff f99f 	bl	801cac0 <HAL_GetTick>
 801d782:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801d784:	687b      	ldr	r3, [r7, #4]
 801d786:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801d78a:	b2db      	uxtb	r3, r3
 801d78c:	2b02      	cmp	r3, #2
 801d78e:	d008      	beq.n	801d7a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801d790:	687b      	ldr	r3, [r7, #4]
 801d792:	2280      	movs	r2, #128	; 0x80
 801d794:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801d796:	687b      	ldr	r3, [r7, #4]
 801d798:	2200      	movs	r2, #0
 801d79a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801d79e:	2301      	movs	r3, #1
 801d7a0:	e052      	b.n	801d848 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801d7a2:	687b      	ldr	r3, [r7, #4]
 801d7a4:	681b      	ldr	r3, [r3, #0]
 801d7a6:	681a      	ldr	r2, [r3, #0]
 801d7a8:	687b      	ldr	r3, [r7, #4]
 801d7aa:	681b      	ldr	r3, [r3, #0]
 801d7ac:	f022 0216 	bic.w	r2, r2, #22
 801d7b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801d7b2:	687b      	ldr	r3, [r7, #4]
 801d7b4:	681b      	ldr	r3, [r3, #0]
 801d7b6:	695a      	ldr	r2, [r3, #20]
 801d7b8:	687b      	ldr	r3, [r7, #4]
 801d7ba:	681b      	ldr	r3, [r3, #0]
 801d7bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801d7c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801d7c2:	687b      	ldr	r3, [r7, #4]
 801d7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d7c6:	2b00      	cmp	r3, #0
 801d7c8:	d103      	bne.n	801d7d2 <HAL_DMA_Abort+0x62>
 801d7ca:	687b      	ldr	r3, [r7, #4]
 801d7cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d7ce:	2b00      	cmp	r3, #0
 801d7d0:	d007      	beq.n	801d7e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801d7d2:	687b      	ldr	r3, [r7, #4]
 801d7d4:	681b      	ldr	r3, [r3, #0]
 801d7d6:	681a      	ldr	r2, [r3, #0]
 801d7d8:	687b      	ldr	r3, [r7, #4]
 801d7da:	681b      	ldr	r3, [r3, #0]
 801d7dc:	f022 0208 	bic.w	r2, r2, #8
 801d7e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801d7e2:	687b      	ldr	r3, [r7, #4]
 801d7e4:	681b      	ldr	r3, [r3, #0]
 801d7e6:	681a      	ldr	r2, [r3, #0]
 801d7e8:	687b      	ldr	r3, [r7, #4]
 801d7ea:	681b      	ldr	r3, [r3, #0]
 801d7ec:	f022 0201 	bic.w	r2, r2, #1
 801d7f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801d7f2:	e013      	b.n	801d81c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801d7f4:	f7ff f964 	bl	801cac0 <HAL_GetTick>
 801d7f8:	4602      	mov	r2, r0
 801d7fa:	68bb      	ldr	r3, [r7, #8]
 801d7fc:	1ad3      	subs	r3, r2, r3
 801d7fe:	2b05      	cmp	r3, #5
 801d800:	d90c      	bls.n	801d81c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801d802:	687b      	ldr	r3, [r7, #4]
 801d804:	2220      	movs	r2, #32
 801d806:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 801d808:	687b      	ldr	r3, [r7, #4]
 801d80a:	2203      	movs	r2, #3
 801d80c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	2200      	movs	r2, #0
 801d814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 801d818:	2303      	movs	r3, #3
 801d81a:	e015      	b.n	801d848 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801d81c:	687b      	ldr	r3, [r7, #4]
 801d81e:	681b      	ldr	r3, [r3, #0]
 801d820:	681b      	ldr	r3, [r3, #0]
 801d822:	f003 0301 	and.w	r3, r3, #1
 801d826:	2b00      	cmp	r3, #0
 801d828:	d1e4      	bne.n	801d7f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801d82a:	687b      	ldr	r3, [r7, #4]
 801d82c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d82e:	223f      	movs	r2, #63	; 0x3f
 801d830:	409a      	lsls	r2, r3
 801d832:	68fb      	ldr	r3, [r7, #12]
 801d834:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	2201      	movs	r2, #1
 801d83a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801d83e:	687b      	ldr	r3, [r7, #4]
 801d840:	2200      	movs	r2, #0
 801d842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 801d846:	2300      	movs	r3, #0
}
 801d848:	4618      	mov	r0, r3
 801d84a:	3710      	adds	r7, #16
 801d84c:	46bd      	mov	sp, r7
 801d84e:	bd80      	pop	{r7, pc}

0801d850 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801d850:	b480      	push	{r7}
 801d852:	b083      	sub	sp, #12
 801d854:	af00      	add	r7, sp, #0
 801d856:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801d858:	687b      	ldr	r3, [r7, #4]
 801d85a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801d85e:	b2db      	uxtb	r3, r3
 801d860:	2b02      	cmp	r3, #2
 801d862:	d004      	beq.n	801d86e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801d864:	687b      	ldr	r3, [r7, #4]
 801d866:	2280      	movs	r2, #128	; 0x80
 801d868:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801d86a:	2301      	movs	r3, #1
 801d86c:	e00c      	b.n	801d888 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801d86e:	687b      	ldr	r3, [r7, #4]
 801d870:	2205      	movs	r2, #5
 801d872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801d876:	687b      	ldr	r3, [r7, #4]
 801d878:	681b      	ldr	r3, [r3, #0]
 801d87a:	681a      	ldr	r2, [r3, #0]
 801d87c:	687b      	ldr	r3, [r7, #4]
 801d87e:	681b      	ldr	r3, [r3, #0]
 801d880:	f022 0201 	bic.w	r2, r2, #1
 801d884:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801d886:	2300      	movs	r3, #0
}
 801d888:	4618      	mov	r0, r3
 801d88a:	370c      	adds	r7, #12
 801d88c:	46bd      	mov	sp, r7
 801d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d892:	4770      	bx	lr

0801d894 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801d894:	b580      	push	{r7, lr}
 801d896:	b086      	sub	sp, #24
 801d898:	af00      	add	r7, sp, #0
 801d89a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801d89c:	2300      	movs	r3, #0
 801d89e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801d8a0:	4b8e      	ldr	r3, [pc, #568]	; (801dadc <HAL_DMA_IRQHandler+0x248>)
 801d8a2:	681b      	ldr	r3, [r3, #0]
 801d8a4:	4a8e      	ldr	r2, [pc, #568]	; (801dae0 <HAL_DMA_IRQHandler+0x24c>)
 801d8a6:	fba2 2303 	umull	r2, r3, r2, r3
 801d8aa:	0a9b      	lsrs	r3, r3, #10
 801d8ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801d8ae:	687b      	ldr	r3, [r7, #4]
 801d8b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d8b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801d8b4:	693b      	ldr	r3, [r7, #16]
 801d8b6:	681b      	ldr	r3, [r3, #0]
 801d8b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d8be:	2208      	movs	r2, #8
 801d8c0:	409a      	lsls	r2, r3
 801d8c2:	68fb      	ldr	r3, [r7, #12]
 801d8c4:	4013      	ands	r3, r2
 801d8c6:	2b00      	cmp	r3, #0
 801d8c8:	d01a      	beq.n	801d900 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801d8ca:	687b      	ldr	r3, [r7, #4]
 801d8cc:	681b      	ldr	r3, [r3, #0]
 801d8ce:	681b      	ldr	r3, [r3, #0]
 801d8d0:	f003 0304 	and.w	r3, r3, #4
 801d8d4:	2b00      	cmp	r3, #0
 801d8d6:	d013      	beq.n	801d900 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	681b      	ldr	r3, [r3, #0]
 801d8dc:	681a      	ldr	r2, [r3, #0]
 801d8de:	687b      	ldr	r3, [r7, #4]
 801d8e0:	681b      	ldr	r3, [r3, #0]
 801d8e2:	f022 0204 	bic.w	r2, r2, #4
 801d8e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801d8e8:	687b      	ldr	r3, [r7, #4]
 801d8ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d8ec:	2208      	movs	r2, #8
 801d8ee:	409a      	lsls	r2, r3
 801d8f0:	693b      	ldr	r3, [r7, #16]
 801d8f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801d8f4:	687b      	ldr	r3, [r7, #4]
 801d8f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d8f8:	f043 0201 	orr.w	r2, r3, #1
 801d8fc:	687b      	ldr	r3, [r7, #4]
 801d8fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d904:	2201      	movs	r2, #1
 801d906:	409a      	lsls	r2, r3
 801d908:	68fb      	ldr	r3, [r7, #12]
 801d90a:	4013      	ands	r3, r2
 801d90c:	2b00      	cmp	r3, #0
 801d90e:	d012      	beq.n	801d936 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801d910:	687b      	ldr	r3, [r7, #4]
 801d912:	681b      	ldr	r3, [r3, #0]
 801d914:	695b      	ldr	r3, [r3, #20]
 801d916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d91a:	2b00      	cmp	r3, #0
 801d91c:	d00b      	beq.n	801d936 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801d91e:	687b      	ldr	r3, [r7, #4]
 801d920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d922:	2201      	movs	r2, #1
 801d924:	409a      	lsls	r2, r3
 801d926:	693b      	ldr	r3, [r7, #16]
 801d928:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801d92a:	687b      	ldr	r3, [r7, #4]
 801d92c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d92e:	f043 0202 	orr.w	r2, r3, #2
 801d932:	687b      	ldr	r3, [r7, #4]
 801d934:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801d936:	687b      	ldr	r3, [r7, #4]
 801d938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d93a:	2204      	movs	r2, #4
 801d93c:	409a      	lsls	r2, r3
 801d93e:	68fb      	ldr	r3, [r7, #12]
 801d940:	4013      	ands	r3, r2
 801d942:	2b00      	cmp	r3, #0
 801d944:	d012      	beq.n	801d96c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	681b      	ldr	r3, [r3, #0]
 801d94a:	681b      	ldr	r3, [r3, #0]
 801d94c:	f003 0302 	and.w	r3, r3, #2
 801d950:	2b00      	cmp	r3, #0
 801d952:	d00b      	beq.n	801d96c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 801d954:	687b      	ldr	r3, [r7, #4]
 801d956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d958:	2204      	movs	r2, #4
 801d95a:	409a      	lsls	r2, r3
 801d95c:	693b      	ldr	r3, [r7, #16]
 801d95e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801d960:	687b      	ldr	r3, [r7, #4]
 801d962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d964:	f043 0204 	orr.w	r2, r3, #4
 801d968:	687b      	ldr	r3, [r7, #4]
 801d96a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d970:	2210      	movs	r2, #16
 801d972:	409a      	lsls	r2, r3
 801d974:	68fb      	ldr	r3, [r7, #12]
 801d976:	4013      	ands	r3, r2
 801d978:	2b00      	cmp	r3, #0
 801d97a:	d043      	beq.n	801da04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801d97c:	687b      	ldr	r3, [r7, #4]
 801d97e:	681b      	ldr	r3, [r3, #0]
 801d980:	681b      	ldr	r3, [r3, #0]
 801d982:	f003 0308 	and.w	r3, r3, #8
 801d986:	2b00      	cmp	r3, #0
 801d988:	d03c      	beq.n	801da04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801d98a:	687b      	ldr	r3, [r7, #4]
 801d98c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d98e:	2210      	movs	r2, #16
 801d990:	409a      	lsls	r2, r3
 801d992:	693b      	ldr	r3, [r7, #16]
 801d994:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801d996:	687b      	ldr	r3, [r7, #4]
 801d998:	681b      	ldr	r3, [r3, #0]
 801d99a:	681b      	ldr	r3, [r3, #0]
 801d99c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801d9a0:	2b00      	cmp	r3, #0
 801d9a2:	d018      	beq.n	801d9d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801d9a4:	687b      	ldr	r3, [r7, #4]
 801d9a6:	681b      	ldr	r3, [r3, #0]
 801d9a8:	681b      	ldr	r3, [r3, #0]
 801d9aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801d9ae:	2b00      	cmp	r3, #0
 801d9b0:	d108      	bne.n	801d9c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801d9b2:	687b      	ldr	r3, [r7, #4]
 801d9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9b6:	2b00      	cmp	r3, #0
 801d9b8:	d024      	beq.n	801da04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801d9ba:	687b      	ldr	r3, [r7, #4]
 801d9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9be:	6878      	ldr	r0, [r7, #4]
 801d9c0:	4798      	blx	r3
 801d9c2:	e01f      	b.n	801da04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801d9c4:	687b      	ldr	r3, [r7, #4]
 801d9c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d9c8:	2b00      	cmp	r3, #0
 801d9ca:	d01b      	beq.n	801da04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801d9cc:	687b      	ldr	r3, [r7, #4]
 801d9ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d9d0:	6878      	ldr	r0, [r7, #4]
 801d9d2:	4798      	blx	r3
 801d9d4:	e016      	b.n	801da04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801d9d6:	687b      	ldr	r3, [r7, #4]
 801d9d8:	681b      	ldr	r3, [r3, #0]
 801d9da:	681b      	ldr	r3, [r3, #0]
 801d9dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d9e0:	2b00      	cmp	r3, #0
 801d9e2:	d107      	bne.n	801d9f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801d9e4:	687b      	ldr	r3, [r7, #4]
 801d9e6:	681b      	ldr	r3, [r3, #0]
 801d9e8:	681a      	ldr	r2, [r3, #0]
 801d9ea:	687b      	ldr	r3, [r7, #4]
 801d9ec:	681b      	ldr	r3, [r3, #0]
 801d9ee:	f022 0208 	bic.w	r2, r2, #8
 801d9f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801d9f4:	687b      	ldr	r3, [r7, #4]
 801d9f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9f8:	2b00      	cmp	r3, #0
 801d9fa:	d003      	beq.n	801da04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801d9fc:	687b      	ldr	r3, [r7, #4]
 801d9fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801da00:	6878      	ldr	r0, [r7, #4]
 801da02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801da04:	687b      	ldr	r3, [r7, #4]
 801da06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801da08:	2220      	movs	r2, #32
 801da0a:	409a      	lsls	r2, r3
 801da0c:	68fb      	ldr	r3, [r7, #12]
 801da0e:	4013      	ands	r3, r2
 801da10:	2b00      	cmp	r3, #0
 801da12:	f000 808f 	beq.w	801db34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801da16:	687b      	ldr	r3, [r7, #4]
 801da18:	681b      	ldr	r3, [r3, #0]
 801da1a:	681b      	ldr	r3, [r3, #0]
 801da1c:	f003 0310 	and.w	r3, r3, #16
 801da20:	2b00      	cmp	r3, #0
 801da22:	f000 8087 	beq.w	801db34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801da26:	687b      	ldr	r3, [r7, #4]
 801da28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801da2a:	2220      	movs	r2, #32
 801da2c:	409a      	lsls	r2, r3
 801da2e:	693b      	ldr	r3, [r7, #16]
 801da30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801da32:	687b      	ldr	r3, [r7, #4]
 801da34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801da38:	b2db      	uxtb	r3, r3
 801da3a:	2b05      	cmp	r3, #5
 801da3c:	d136      	bne.n	801daac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801da3e:	687b      	ldr	r3, [r7, #4]
 801da40:	681b      	ldr	r3, [r3, #0]
 801da42:	681a      	ldr	r2, [r3, #0]
 801da44:	687b      	ldr	r3, [r7, #4]
 801da46:	681b      	ldr	r3, [r3, #0]
 801da48:	f022 0216 	bic.w	r2, r2, #22
 801da4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801da4e:	687b      	ldr	r3, [r7, #4]
 801da50:	681b      	ldr	r3, [r3, #0]
 801da52:	695a      	ldr	r2, [r3, #20]
 801da54:	687b      	ldr	r3, [r7, #4]
 801da56:	681b      	ldr	r3, [r3, #0]
 801da58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801da5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801da5e:	687b      	ldr	r3, [r7, #4]
 801da60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801da62:	2b00      	cmp	r3, #0
 801da64:	d103      	bne.n	801da6e <HAL_DMA_IRQHandler+0x1da>
 801da66:	687b      	ldr	r3, [r7, #4]
 801da68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801da6a:	2b00      	cmp	r3, #0
 801da6c:	d007      	beq.n	801da7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801da6e:	687b      	ldr	r3, [r7, #4]
 801da70:	681b      	ldr	r3, [r3, #0]
 801da72:	681a      	ldr	r2, [r3, #0]
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	681b      	ldr	r3, [r3, #0]
 801da78:	f022 0208 	bic.w	r2, r2, #8
 801da7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801da7e:	687b      	ldr	r3, [r7, #4]
 801da80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801da82:	223f      	movs	r2, #63	; 0x3f
 801da84:	409a      	lsls	r2, r3
 801da86:	693b      	ldr	r3, [r7, #16]
 801da88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801da8a:	687b      	ldr	r3, [r7, #4]
 801da8c:	2201      	movs	r2, #1
 801da8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801da92:	687b      	ldr	r3, [r7, #4]
 801da94:	2200      	movs	r2, #0
 801da96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 801da9a:	687b      	ldr	r3, [r7, #4]
 801da9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801da9e:	2b00      	cmp	r3, #0
 801daa0:	d07e      	beq.n	801dba0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 801daa2:	687b      	ldr	r3, [r7, #4]
 801daa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801daa6:	6878      	ldr	r0, [r7, #4]
 801daa8:	4798      	blx	r3
        }
        return;
 801daaa:	e079      	b.n	801dba0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	681b      	ldr	r3, [r3, #0]
 801dab0:	681b      	ldr	r3, [r3, #0]
 801dab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801dab6:	2b00      	cmp	r3, #0
 801dab8:	d01d      	beq.n	801daf6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801daba:	687b      	ldr	r3, [r7, #4]
 801dabc:	681b      	ldr	r3, [r3, #0]
 801dabe:	681b      	ldr	r3, [r3, #0]
 801dac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801dac4:	2b00      	cmp	r3, #0
 801dac6:	d10d      	bne.n	801dae4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801dac8:	687b      	ldr	r3, [r7, #4]
 801daca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dacc:	2b00      	cmp	r3, #0
 801dace:	d031      	beq.n	801db34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801dad0:	687b      	ldr	r3, [r7, #4]
 801dad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dad4:	6878      	ldr	r0, [r7, #4]
 801dad6:	4798      	blx	r3
 801dad8:	e02c      	b.n	801db34 <HAL_DMA_IRQHandler+0x2a0>
 801dada:	bf00      	nop
 801dadc:	20000020 	.word	0x20000020
 801dae0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801dae4:	687b      	ldr	r3, [r7, #4]
 801dae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dae8:	2b00      	cmp	r3, #0
 801daea:	d023      	beq.n	801db34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801daec:	687b      	ldr	r3, [r7, #4]
 801daee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801daf0:	6878      	ldr	r0, [r7, #4]
 801daf2:	4798      	blx	r3
 801daf4:	e01e      	b.n	801db34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801daf6:	687b      	ldr	r3, [r7, #4]
 801daf8:	681b      	ldr	r3, [r3, #0]
 801dafa:	681b      	ldr	r3, [r3, #0]
 801dafc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801db00:	2b00      	cmp	r3, #0
 801db02:	d10f      	bne.n	801db24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801db04:	687b      	ldr	r3, [r7, #4]
 801db06:	681b      	ldr	r3, [r3, #0]
 801db08:	681a      	ldr	r2, [r3, #0]
 801db0a:	687b      	ldr	r3, [r7, #4]
 801db0c:	681b      	ldr	r3, [r3, #0]
 801db0e:	f022 0210 	bic.w	r2, r2, #16
 801db12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801db14:	687b      	ldr	r3, [r7, #4]
 801db16:	2201      	movs	r2, #1
 801db18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	2200      	movs	r2, #0
 801db20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801db24:	687b      	ldr	r3, [r7, #4]
 801db26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801db28:	2b00      	cmp	r3, #0
 801db2a:	d003      	beq.n	801db34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801db30:	6878      	ldr	r0, [r7, #4]
 801db32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801db38:	2b00      	cmp	r3, #0
 801db3a:	d032      	beq.n	801dba2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801db3c:	687b      	ldr	r3, [r7, #4]
 801db3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801db40:	f003 0301 	and.w	r3, r3, #1
 801db44:	2b00      	cmp	r3, #0
 801db46:	d022      	beq.n	801db8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801db48:	687b      	ldr	r3, [r7, #4]
 801db4a:	2205      	movs	r2, #5
 801db4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801db50:	687b      	ldr	r3, [r7, #4]
 801db52:	681b      	ldr	r3, [r3, #0]
 801db54:	681a      	ldr	r2, [r3, #0]
 801db56:	687b      	ldr	r3, [r7, #4]
 801db58:	681b      	ldr	r3, [r3, #0]
 801db5a:	f022 0201 	bic.w	r2, r2, #1
 801db5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801db60:	68bb      	ldr	r3, [r7, #8]
 801db62:	3301      	adds	r3, #1
 801db64:	60bb      	str	r3, [r7, #8]
 801db66:	697a      	ldr	r2, [r7, #20]
 801db68:	429a      	cmp	r2, r3
 801db6a:	d307      	bcc.n	801db7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801db6c:	687b      	ldr	r3, [r7, #4]
 801db6e:	681b      	ldr	r3, [r3, #0]
 801db70:	681b      	ldr	r3, [r3, #0]
 801db72:	f003 0301 	and.w	r3, r3, #1
 801db76:	2b00      	cmp	r3, #0
 801db78:	d1f2      	bne.n	801db60 <HAL_DMA_IRQHandler+0x2cc>
 801db7a:	e000      	b.n	801db7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 801db7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801db7e:	687b      	ldr	r3, [r7, #4]
 801db80:	2201      	movs	r2, #1
 801db82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801db86:	687b      	ldr	r3, [r7, #4]
 801db88:	2200      	movs	r2, #0
 801db8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 801db8e:	687b      	ldr	r3, [r7, #4]
 801db90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801db92:	2b00      	cmp	r3, #0
 801db94:	d005      	beq.n	801dba2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801db9a:	6878      	ldr	r0, [r7, #4]
 801db9c:	4798      	blx	r3
 801db9e:	e000      	b.n	801dba2 <HAL_DMA_IRQHandler+0x30e>
        return;
 801dba0:	bf00      	nop
    }
  }
}
 801dba2:	3718      	adds	r7, #24
 801dba4:	46bd      	mov	sp, r7
 801dba6:	bd80      	pop	{r7, pc}

0801dba8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 801dba8:	b480      	push	{r7}
 801dbaa:	b083      	sub	sp, #12
 801dbac:	af00      	add	r7, sp, #0
 801dbae:	6078      	str	r0, [r7, #4]
  return hdma->State;
 801dbb0:	687b      	ldr	r3, [r7, #4]
 801dbb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801dbb6:	b2db      	uxtb	r3, r3
}
 801dbb8:	4618      	mov	r0, r3
 801dbba:	370c      	adds	r7, #12
 801dbbc:	46bd      	mov	sp, r7
 801dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbc2:	4770      	bx	lr

0801dbc4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 801dbc4:	b480      	push	{r7}
 801dbc6:	b083      	sub	sp, #12
 801dbc8:	af00      	add	r7, sp, #0
 801dbca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 801dbcc:	687b      	ldr	r3, [r7, #4]
 801dbce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 801dbd0:	4618      	mov	r0, r3
 801dbd2:	370c      	adds	r7, #12
 801dbd4:	46bd      	mov	sp, r7
 801dbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbda:	4770      	bx	lr

0801dbdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801dbdc:	b480      	push	{r7}
 801dbde:	b085      	sub	sp, #20
 801dbe0:	af00      	add	r7, sp, #0
 801dbe2:	60f8      	str	r0, [r7, #12]
 801dbe4:	60b9      	str	r1, [r7, #8]
 801dbe6:	607a      	str	r2, [r7, #4]
 801dbe8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801dbea:	68fb      	ldr	r3, [r7, #12]
 801dbec:	681b      	ldr	r3, [r3, #0]
 801dbee:	681a      	ldr	r2, [r3, #0]
 801dbf0:	68fb      	ldr	r3, [r7, #12]
 801dbf2:	681b      	ldr	r3, [r3, #0]
 801dbf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801dbf8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801dbfa:	68fb      	ldr	r3, [r7, #12]
 801dbfc:	681b      	ldr	r3, [r3, #0]
 801dbfe:	683a      	ldr	r2, [r7, #0]
 801dc00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801dc02:	68fb      	ldr	r3, [r7, #12]
 801dc04:	689b      	ldr	r3, [r3, #8]
 801dc06:	2b40      	cmp	r3, #64	; 0x40
 801dc08:	d108      	bne.n	801dc1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801dc0a:	68fb      	ldr	r3, [r7, #12]
 801dc0c:	681b      	ldr	r3, [r3, #0]
 801dc0e:	687a      	ldr	r2, [r7, #4]
 801dc10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801dc12:	68fb      	ldr	r3, [r7, #12]
 801dc14:	681b      	ldr	r3, [r3, #0]
 801dc16:	68ba      	ldr	r2, [r7, #8]
 801dc18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801dc1a:	e007      	b.n	801dc2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801dc1c:	68fb      	ldr	r3, [r7, #12]
 801dc1e:	681b      	ldr	r3, [r3, #0]
 801dc20:	68ba      	ldr	r2, [r7, #8]
 801dc22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801dc24:	68fb      	ldr	r3, [r7, #12]
 801dc26:	681b      	ldr	r3, [r3, #0]
 801dc28:	687a      	ldr	r2, [r7, #4]
 801dc2a:	60da      	str	r2, [r3, #12]
}
 801dc2c:	bf00      	nop
 801dc2e:	3714      	adds	r7, #20
 801dc30:	46bd      	mov	sp, r7
 801dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc36:	4770      	bx	lr

0801dc38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801dc38:	b480      	push	{r7}
 801dc3a:	b085      	sub	sp, #20
 801dc3c:	af00      	add	r7, sp, #0
 801dc3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801dc40:	687b      	ldr	r3, [r7, #4]
 801dc42:	681b      	ldr	r3, [r3, #0]
 801dc44:	b2db      	uxtb	r3, r3
 801dc46:	3b10      	subs	r3, #16
 801dc48:	4a14      	ldr	r2, [pc, #80]	; (801dc9c <DMA_CalcBaseAndBitshift+0x64>)
 801dc4a:	fba2 2303 	umull	r2, r3, r2, r3
 801dc4e:	091b      	lsrs	r3, r3, #4
 801dc50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801dc52:	4a13      	ldr	r2, [pc, #76]	; (801dca0 <DMA_CalcBaseAndBitshift+0x68>)
 801dc54:	68fb      	ldr	r3, [r7, #12]
 801dc56:	4413      	add	r3, r2
 801dc58:	781b      	ldrb	r3, [r3, #0]
 801dc5a:	461a      	mov	r2, r3
 801dc5c:	687b      	ldr	r3, [r7, #4]
 801dc5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801dc60:	68fb      	ldr	r3, [r7, #12]
 801dc62:	2b03      	cmp	r3, #3
 801dc64:	d909      	bls.n	801dc7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801dc66:	687b      	ldr	r3, [r7, #4]
 801dc68:	681b      	ldr	r3, [r3, #0]
 801dc6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801dc6e:	f023 0303 	bic.w	r3, r3, #3
 801dc72:	1d1a      	adds	r2, r3, #4
 801dc74:	687b      	ldr	r3, [r7, #4]
 801dc76:	659a      	str	r2, [r3, #88]	; 0x58
 801dc78:	e007      	b.n	801dc8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801dc7a:	687b      	ldr	r3, [r7, #4]
 801dc7c:	681b      	ldr	r3, [r3, #0]
 801dc7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801dc82:	f023 0303 	bic.w	r3, r3, #3
 801dc86:	687a      	ldr	r2, [r7, #4]
 801dc88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801dc8a:	687b      	ldr	r3, [r7, #4]
 801dc8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801dc8e:	4618      	mov	r0, r3
 801dc90:	3714      	adds	r7, #20
 801dc92:	46bd      	mov	sp, r7
 801dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc98:	4770      	bx	lr
 801dc9a:	bf00      	nop
 801dc9c:	aaaaaaab 	.word	0xaaaaaaab
 801dca0:	0802a4d0 	.word	0x0802a4d0

0801dca4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801dca4:	b480      	push	{r7}
 801dca6:	b085      	sub	sp, #20
 801dca8:	af00      	add	r7, sp, #0
 801dcaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801dcac:	2300      	movs	r3, #0
 801dcae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801dcb0:	687b      	ldr	r3, [r7, #4]
 801dcb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dcb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801dcb6:	687b      	ldr	r3, [r7, #4]
 801dcb8:	699b      	ldr	r3, [r3, #24]
 801dcba:	2b00      	cmp	r3, #0
 801dcbc:	d11f      	bne.n	801dcfe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801dcbe:	68bb      	ldr	r3, [r7, #8]
 801dcc0:	2b03      	cmp	r3, #3
 801dcc2:	d856      	bhi.n	801dd72 <DMA_CheckFifoParam+0xce>
 801dcc4:	a201      	add	r2, pc, #4	; (adr r2, 801dccc <DMA_CheckFifoParam+0x28>)
 801dcc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dcca:	bf00      	nop
 801dccc:	0801dcdd 	.word	0x0801dcdd
 801dcd0:	0801dcef 	.word	0x0801dcef
 801dcd4:	0801dcdd 	.word	0x0801dcdd
 801dcd8:	0801dd73 	.word	0x0801dd73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801dcdc:	687b      	ldr	r3, [r7, #4]
 801dcde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dce0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801dce4:	2b00      	cmp	r3, #0
 801dce6:	d046      	beq.n	801dd76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801dce8:	2301      	movs	r3, #1
 801dcea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801dcec:	e043      	b.n	801dd76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801dcee:	687b      	ldr	r3, [r7, #4]
 801dcf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dcf2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801dcf6:	d140      	bne.n	801dd7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 801dcf8:	2301      	movs	r3, #1
 801dcfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801dcfc:	e03d      	b.n	801dd7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801dcfe:	687b      	ldr	r3, [r7, #4]
 801dd00:	699b      	ldr	r3, [r3, #24]
 801dd02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801dd06:	d121      	bne.n	801dd4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 801dd08:	68bb      	ldr	r3, [r7, #8]
 801dd0a:	2b03      	cmp	r3, #3
 801dd0c:	d837      	bhi.n	801dd7e <DMA_CheckFifoParam+0xda>
 801dd0e:	a201      	add	r2, pc, #4	; (adr r2, 801dd14 <DMA_CheckFifoParam+0x70>)
 801dd10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dd14:	0801dd25 	.word	0x0801dd25
 801dd18:	0801dd2b 	.word	0x0801dd2b
 801dd1c:	0801dd25 	.word	0x0801dd25
 801dd20:	0801dd3d 	.word	0x0801dd3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801dd24:	2301      	movs	r3, #1
 801dd26:	73fb      	strb	r3, [r7, #15]
      break;
 801dd28:	e030      	b.n	801dd8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801dd2a:	687b      	ldr	r3, [r7, #4]
 801dd2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dd2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801dd32:	2b00      	cmp	r3, #0
 801dd34:	d025      	beq.n	801dd82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801dd36:	2301      	movs	r3, #1
 801dd38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801dd3a:	e022      	b.n	801dd82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801dd3c:	687b      	ldr	r3, [r7, #4]
 801dd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dd40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801dd44:	d11f      	bne.n	801dd86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801dd46:	2301      	movs	r3, #1
 801dd48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801dd4a:	e01c      	b.n	801dd86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801dd4c:	68bb      	ldr	r3, [r7, #8]
 801dd4e:	2b02      	cmp	r3, #2
 801dd50:	d903      	bls.n	801dd5a <DMA_CheckFifoParam+0xb6>
 801dd52:	68bb      	ldr	r3, [r7, #8]
 801dd54:	2b03      	cmp	r3, #3
 801dd56:	d003      	beq.n	801dd60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 801dd58:	e018      	b.n	801dd8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801dd5a:	2301      	movs	r3, #1
 801dd5c:	73fb      	strb	r3, [r7, #15]
      break;
 801dd5e:	e015      	b.n	801dd8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801dd60:	687b      	ldr	r3, [r7, #4]
 801dd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dd64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801dd68:	2b00      	cmp	r3, #0
 801dd6a:	d00e      	beq.n	801dd8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 801dd6c:	2301      	movs	r3, #1
 801dd6e:	73fb      	strb	r3, [r7, #15]
      break;
 801dd70:	e00b      	b.n	801dd8a <DMA_CheckFifoParam+0xe6>
      break;
 801dd72:	bf00      	nop
 801dd74:	e00a      	b.n	801dd8c <DMA_CheckFifoParam+0xe8>
      break;
 801dd76:	bf00      	nop
 801dd78:	e008      	b.n	801dd8c <DMA_CheckFifoParam+0xe8>
      break;
 801dd7a:	bf00      	nop
 801dd7c:	e006      	b.n	801dd8c <DMA_CheckFifoParam+0xe8>
      break;
 801dd7e:	bf00      	nop
 801dd80:	e004      	b.n	801dd8c <DMA_CheckFifoParam+0xe8>
      break;
 801dd82:	bf00      	nop
 801dd84:	e002      	b.n	801dd8c <DMA_CheckFifoParam+0xe8>
      break;   
 801dd86:	bf00      	nop
 801dd88:	e000      	b.n	801dd8c <DMA_CheckFifoParam+0xe8>
      break;
 801dd8a:	bf00      	nop
    }
  } 
  
  return status; 
 801dd8c:	7bfb      	ldrb	r3, [r7, #15]
}
 801dd8e:	4618      	mov	r0, r3
 801dd90:	3714      	adds	r7, #20
 801dd92:	46bd      	mov	sp, r7
 801dd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd98:	4770      	bx	lr
 801dd9a:	bf00      	nop

0801dd9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801dd9c:	b480      	push	{r7}
 801dd9e:	b089      	sub	sp, #36	; 0x24
 801dda0:	af00      	add	r7, sp, #0
 801dda2:	6078      	str	r0, [r7, #4]
 801dda4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801dda6:	2300      	movs	r3, #0
 801dda8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801ddaa:	2300      	movs	r3, #0
 801ddac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801ddae:	2300      	movs	r3, #0
 801ddb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801ddb2:	2300      	movs	r3, #0
 801ddb4:	61fb      	str	r3, [r7, #28]
 801ddb6:	e159      	b.n	801e06c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801ddb8:	2201      	movs	r2, #1
 801ddba:	69fb      	ldr	r3, [r7, #28]
 801ddbc:	fa02 f303 	lsl.w	r3, r2, r3
 801ddc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801ddc2:	683b      	ldr	r3, [r7, #0]
 801ddc4:	681b      	ldr	r3, [r3, #0]
 801ddc6:	697a      	ldr	r2, [r7, #20]
 801ddc8:	4013      	ands	r3, r2
 801ddca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801ddcc:	693a      	ldr	r2, [r7, #16]
 801ddce:	697b      	ldr	r3, [r7, #20]
 801ddd0:	429a      	cmp	r2, r3
 801ddd2:	f040 8148 	bne.w	801e066 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801ddd6:	683b      	ldr	r3, [r7, #0]
 801ddd8:	685b      	ldr	r3, [r3, #4]
 801ddda:	f003 0303 	and.w	r3, r3, #3
 801ddde:	2b01      	cmp	r3, #1
 801dde0:	d005      	beq.n	801ddee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801dde2:	683b      	ldr	r3, [r7, #0]
 801dde4:	685b      	ldr	r3, [r3, #4]
 801dde6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801ddea:	2b02      	cmp	r3, #2
 801ddec:	d130      	bne.n	801de50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801ddee:	687b      	ldr	r3, [r7, #4]
 801ddf0:	689b      	ldr	r3, [r3, #8]
 801ddf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801ddf4:	69fb      	ldr	r3, [r7, #28]
 801ddf6:	005b      	lsls	r3, r3, #1
 801ddf8:	2203      	movs	r2, #3
 801ddfa:	fa02 f303 	lsl.w	r3, r2, r3
 801ddfe:	43db      	mvns	r3, r3
 801de00:	69ba      	ldr	r2, [r7, #24]
 801de02:	4013      	ands	r3, r2
 801de04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801de06:	683b      	ldr	r3, [r7, #0]
 801de08:	68da      	ldr	r2, [r3, #12]
 801de0a:	69fb      	ldr	r3, [r7, #28]
 801de0c:	005b      	lsls	r3, r3, #1
 801de0e:	fa02 f303 	lsl.w	r3, r2, r3
 801de12:	69ba      	ldr	r2, [r7, #24]
 801de14:	4313      	orrs	r3, r2
 801de16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801de18:	687b      	ldr	r3, [r7, #4]
 801de1a:	69ba      	ldr	r2, [r7, #24]
 801de1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801de1e:	687b      	ldr	r3, [r7, #4]
 801de20:	685b      	ldr	r3, [r3, #4]
 801de22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801de24:	2201      	movs	r2, #1
 801de26:	69fb      	ldr	r3, [r7, #28]
 801de28:	fa02 f303 	lsl.w	r3, r2, r3
 801de2c:	43db      	mvns	r3, r3
 801de2e:	69ba      	ldr	r2, [r7, #24]
 801de30:	4013      	ands	r3, r2
 801de32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801de34:	683b      	ldr	r3, [r7, #0]
 801de36:	685b      	ldr	r3, [r3, #4]
 801de38:	091b      	lsrs	r3, r3, #4
 801de3a:	f003 0201 	and.w	r2, r3, #1
 801de3e:	69fb      	ldr	r3, [r7, #28]
 801de40:	fa02 f303 	lsl.w	r3, r2, r3
 801de44:	69ba      	ldr	r2, [r7, #24]
 801de46:	4313      	orrs	r3, r2
 801de48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801de4a:	687b      	ldr	r3, [r7, #4]
 801de4c:	69ba      	ldr	r2, [r7, #24]
 801de4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801de50:	683b      	ldr	r3, [r7, #0]
 801de52:	685b      	ldr	r3, [r3, #4]
 801de54:	f003 0303 	and.w	r3, r3, #3
 801de58:	2b03      	cmp	r3, #3
 801de5a:	d017      	beq.n	801de8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801de5c:	687b      	ldr	r3, [r7, #4]
 801de5e:	68db      	ldr	r3, [r3, #12]
 801de60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801de62:	69fb      	ldr	r3, [r7, #28]
 801de64:	005b      	lsls	r3, r3, #1
 801de66:	2203      	movs	r2, #3
 801de68:	fa02 f303 	lsl.w	r3, r2, r3
 801de6c:	43db      	mvns	r3, r3
 801de6e:	69ba      	ldr	r2, [r7, #24]
 801de70:	4013      	ands	r3, r2
 801de72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801de74:	683b      	ldr	r3, [r7, #0]
 801de76:	689a      	ldr	r2, [r3, #8]
 801de78:	69fb      	ldr	r3, [r7, #28]
 801de7a:	005b      	lsls	r3, r3, #1
 801de7c:	fa02 f303 	lsl.w	r3, r2, r3
 801de80:	69ba      	ldr	r2, [r7, #24]
 801de82:	4313      	orrs	r3, r2
 801de84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801de86:	687b      	ldr	r3, [r7, #4]
 801de88:	69ba      	ldr	r2, [r7, #24]
 801de8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801de8c:	683b      	ldr	r3, [r7, #0]
 801de8e:	685b      	ldr	r3, [r3, #4]
 801de90:	f003 0303 	and.w	r3, r3, #3
 801de94:	2b02      	cmp	r3, #2
 801de96:	d123      	bne.n	801dee0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801de98:	69fb      	ldr	r3, [r7, #28]
 801de9a:	08da      	lsrs	r2, r3, #3
 801de9c:	687b      	ldr	r3, [r7, #4]
 801de9e:	3208      	adds	r2, #8
 801dea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801dea6:	69fb      	ldr	r3, [r7, #28]
 801dea8:	f003 0307 	and.w	r3, r3, #7
 801deac:	009b      	lsls	r3, r3, #2
 801deae:	220f      	movs	r2, #15
 801deb0:	fa02 f303 	lsl.w	r3, r2, r3
 801deb4:	43db      	mvns	r3, r3
 801deb6:	69ba      	ldr	r2, [r7, #24]
 801deb8:	4013      	ands	r3, r2
 801deba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801debc:	683b      	ldr	r3, [r7, #0]
 801debe:	691a      	ldr	r2, [r3, #16]
 801dec0:	69fb      	ldr	r3, [r7, #28]
 801dec2:	f003 0307 	and.w	r3, r3, #7
 801dec6:	009b      	lsls	r3, r3, #2
 801dec8:	fa02 f303 	lsl.w	r3, r2, r3
 801decc:	69ba      	ldr	r2, [r7, #24]
 801dece:	4313      	orrs	r3, r2
 801ded0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801ded2:	69fb      	ldr	r3, [r7, #28]
 801ded4:	08da      	lsrs	r2, r3, #3
 801ded6:	687b      	ldr	r3, [r7, #4]
 801ded8:	3208      	adds	r2, #8
 801deda:	69b9      	ldr	r1, [r7, #24]
 801dedc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801dee0:	687b      	ldr	r3, [r7, #4]
 801dee2:	681b      	ldr	r3, [r3, #0]
 801dee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801dee6:	69fb      	ldr	r3, [r7, #28]
 801dee8:	005b      	lsls	r3, r3, #1
 801deea:	2203      	movs	r2, #3
 801deec:	fa02 f303 	lsl.w	r3, r2, r3
 801def0:	43db      	mvns	r3, r3
 801def2:	69ba      	ldr	r2, [r7, #24]
 801def4:	4013      	ands	r3, r2
 801def6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801def8:	683b      	ldr	r3, [r7, #0]
 801defa:	685b      	ldr	r3, [r3, #4]
 801defc:	f003 0203 	and.w	r2, r3, #3
 801df00:	69fb      	ldr	r3, [r7, #28]
 801df02:	005b      	lsls	r3, r3, #1
 801df04:	fa02 f303 	lsl.w	r3, r2, r3
 801df08:	69ba      	ldr	r2, [r7, #24]
 801df0a:	4313      	orrs	r3, r2
 801df0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801df0e:	687b      	ldr	r3, [r7, #4]
 801df10:	69ba      	ldr	r2, [r7, #24]
 801df12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801df14:	683b      	ldr	r3, [r7, #0]
 801df16:	685b      	ldr	r3, [r3, #4]
 801df18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801df1c:	2b00      	cmp	r3, #0
 801df1e:	f000 80a2 	beq.w	801e066 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801df22:	2300      	movs	r3, #0
 801df24:	60fb      	str	r3, [r7, #12]
 801df26:	4b57      	ldr	r3, [pc, #348]	; (801e084 <HAL_GPIO_Init+0x2e8>)
 801df28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801df2a:	4a56      	ldr	r2, [pc, #344]	; (801e084 <HAL_GPIO_Init+0x2e8>)
 801df2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801df30:	6453      	str	r3, [r2, #68]	; 0x44
 801df32:	4b54      	ldr	r3, [pc, #336]	; (801e084 <HAL_GPIO_Init+0x2e8>)
 801df34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801df36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801df3a:	60fb      	str	r3, [r7, #12]
 801df3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801df3e:	4a52      	ldr	r2, [pc, #328]	; (801e088 <HAL_GPIO_Init+0x2ec>)
 801df40:	69fb      	ldr	r3, [r7, #28]
 801df42:	089b      	lsrs	r3, r3, #2
 801df44:	3302      	adds	r3, #2
 801df46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801df4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801df4c:	69fb      	ldr	r3, [r7, #28]
 801df4e:	f003 0303 	and.w	r3, r3, #3
 801df52:	009b      	lsls	r3, r3, #2
 801df54:	220f      	movs	r2, #15
 801df56:	fa02 f303 	lsl.w	r3, r2, r3
 801df5a:	43db      	mvns	r3, r3
 801df5c:	69ba      	ldr	r2, [r7, #24]
 801df5e:	4013      	ands	r3, r2
 801df60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801df62:	687b      	ldr	r3, [r7, #4]
 801df64:	4a49      	ldr	r2, [pc, #292]	; (801e08c <HAL_GPIO_Init+0x2f0>)
 801df66:	4293      	cmp	r3, r2
 801df68:	d019      	beq.n	801df9e <HAL_GPIO_Init+0x202>
 801df6a:	687b      	ldr	r3, [r7, #4]
 801df6c:	4a48      	ldr	r2, [pc, #288]	; (801e090 <HAL_GPIO_Init+0x2f4>)
 801df6e:	4293      	cmp	r3, r2
 801df70:	d013      	beq.n	801df9a <HAL_GPIO_Init+0x1fe>
 801df72:	687b      	ldr	r3, [r7, #4]
 801df74:	4a47      	ldr	r2, [pc, #284]	; (801e094 <HAL_GPIO_Init+0x2f8>)
 801df76:	4293      	cmp	r3, r2
 801df78:	d00d      	beq.n	801df96 <HAL_GPIO_Init+0x1fa>
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	4a46      	ldr	r2, [pc, #280]	; (801e098 <HAL_GPIO_Init+0x2fc>)
 801df7e:	4293      	cmp	r3, r2
 801df80:	d007      	beq.n	801df92 <HAL_GPIO_Init+0x1f6>
 801df82:	687b      	ldr	r3, [r7, #4]
 801df84:	4a45      	ldr	r2, [pc, #276]	; (801e09c <HAL_GPIO_Init+0x300>)
 801df86:	4293      	cmp	r3, r2
 801df88:	d101      	bne.n	801df8e <HAL_GPIO_Init+0x1f2>
 801df8a:	2304      	movs	r3, #4
 801df8c:	e008      	b.n	801dfa0 <HAL_GPIO_Init+0x204>
 801df8e:	2307      	movs	r3, #7
 801df90:	e006      	b.n	801dfa0 <HAL_GPIO_Init+0x204>
 801df92:	2303      	movs	r3, #3
 801df94:	e004      	b.n	801dfa0 <HAL_GPIO_Init+0x204>
 801df96:	2302      	movs	r3, #2
 801df98:	e002      	b.n	801dfa0 <HAL_GPIO_Init+0x204>
 801df9a:	2301      	movs	r3, #1
 801df9c:	e000      	b.n	801dfa0 <HAL_GPIO_Init+0x204>
 801df9e:	2300      	movs	r3, #0
 801dfa0:	69fa      	ldr	r2, [r7, #28]
 801dfa2:	f002 0203 	and.w	r2, r2, #3
 801dfa6:	0092      	lsls	r2, r2, #2
 801dfa8:	4093      	lsls	r3, r2
 801dfaa:	69ba      	ldr	r2, [r7, #24]
 801dfac:	4313      	orrs	r3, r2
 801dfae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801dfb0:	4935      	ldr	r1, [pc, #212]	; (801e088 <HAL_GPIO_Init+0x2ec>)
 801dfb2:	69fb      	ldr	r3, [r7, #28]
 801dfb4:	089b      	lsrs	r3, r3, #2
 801dfb6:	3302      	adds	r3, #2
 801dfb8:	69ba      	ldr	r2, [r7, #24]
 801dfba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801dfbe:	4b38      	ldr	r3, [pc, #224]	; (801e0a0 <HAL_GPIO_Init+0x304>)
 801dfc0:	689b      	ldr	r3, [r3, #8]
 801dfc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801dfc4:	693b      	ldr	r3, [r7, #16]
 801dfc6:	43db      	mvns	r3, r3
 801dfc8:	69ba      	ldr	r2, [r7, #24]
 801dfca:	4013      	ands	r3, r2
 801dfcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801dfce:	683b      	ldr	r3, [r7, #0]
 801dfd0:	685b      	ldr	r3, [r3, #4]
 801dfd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801dfd6:	2b00      	cmp	r3, #0
 801dfd8:	d003      	beq.n	801dfe2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801dfda:	69ba      	ldr	r2, [r7, #24]
 801dfdc:	693b      	ldr	r3, [r7, #16]
 801dfde:	4313      	orrs	r3, r2
 801dfe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801dfe2:	4a2f      	ldr	r2, [pc, #188]	; (801e0a0 <HAL_GPIO_Init+0x304>)
 801dfe4:	69bb      	ldr	r3, [r7, #24]
 801dfe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801dfe8:	4b2d      	ldr	r3, [pc, #180]	; (801e0a0 <HAL_GPIO_Init+0x304>)
 801dfea:	68db      	ldr	r3, [r3, #12]
 801dfec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801dfee:	693b      	ldr	r3, [r7, #16]
 801dff0:	43db      	mvns	r3, r3
 801dff2:	69ba      	ldr	r2, [r7, #24]
 801dff4:	4013      	ands	r3, r2
 801dff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801dff8:	683b      	ldr	r3, [r7, #0]
 801dffa:	685b      	ldr	r3, [r3, #4]
 801dffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801e000:	2b00      	cmp	r3, #0
 801e002:	d003      	beq.n	801e00c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801e004:	69ba      	ldr	r2, [r7, #24]
 801e006:	693b      	ldr	r3, [r7, #16]
 801e008:	4313      	orrs	r3, r2
 801e00a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801e00c:	4a24      	ldr	r2, [pc, #144]	; (801e0a0 <HAL_GPIO_Init+0x304>)
 801e00e:	69bb      	ldr	r3, [r7, #24]
 801e010:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801e012:	4b23      	ldr	r3, [pc, #140]	; (801e0a0 <HAL_GPIO_Init+0x304>)
 801e014:	685b      	ldr	r3, [r3, #4]
 801e016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801e018:	693b      	ldr	r3, [r7, #16]
 801e01a:	43db      	mvns	r3, r3
 801e01c:	69ba      	ldr	r2, [r7, #24]
 801e01e:	4013      	ands	r3, r2
 801e020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801e022:	683b      	ldr	r3, [r7, #0]
 801e024:	685b      	ldr	r3, [r3, #4]
 801e026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801e02a:	2b00      	cmp	r3, #0
 801e02c:	d003      	beq.n	801e036 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801e02e:	69ba      	ldr	r2, [r7, #24]
 801e030:	693b      	ldr	r3, [r7, #16]
 801e032:	4313      	orrs	r3, r2
 801e034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801e036:	4a1a      	ldr	r2, [pc, #104]	; (801e0a0 <HAL_GPIO_Init+0x304>)
 801e038:	69bb      	ldr	r3, [r7, #24]
 801e03a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801e03c:	4b18      	ldr	r3, [pc, #96]	; (801e0a0 <HAL_GPIO_Init+0x304>)
 801e03e:	681b      	ldr	r3, [r3, #0]
 801e040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801e042:	693b      	ldr	r3, [r7, #16]
 801e044:	43db      	mvns	r3, r3
 801e046:	69ba      	ldr	r2, [r7, #24]
 801e048:	4013      	ands	r3, r2
 801e04a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801e04c:	683b      	ldr	r3, [r7, #0]
 801e04e:	685b      	ldr	r3, [r3, #4]
 801e050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801e054:	2b00      	cmp	r3, #0
 801e056:	d003      	beq.n	801e060 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 801e058:	69ba      	ldr	r2, [r7, #24]
 801e05a:	693b      	ldr	r3, [r7, #16]
 801e05c:	4313      	orrs	r3, r2
 801e05e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801e060:	4a0f      	ldr	r2, [pc, #60]	; (801e0a0 <HAL_GPIO_Init+0x304>)
 801e062:	69bb      	ldr	r3, [r7, #24]
 801e064:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801e066:	69fb      	ldr	r3, [r7, #28]
 801e068:	3301      	adds	r3, #1
 801e06a:	61fb      	str	r3, [r7, #28]
 801e06c:	69fb      	ldr	r3, [r7, #28]
 801e06e:	2b0f      	cmp	r3, #15
 801e070:	f67f aea2 	bls.w	801ddb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801e074:	bf00      	nop
 801e076:	bf00      	nop
 801e078:	3724      	adds	r7, #36	; 0x24
 801e07a:	46bd      	mov	sp, r7
 801e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e080:	4770      	bx	lr
 801e082:	bf00      	nop
 801e084:	40023800 	.word	0x40023800
 801e088:	40013800 	.word	0x40013800
 801e08c:	40020000 	.word	0x40020000
 801e090:	40020400 	.word	0x40020400
 801e094:	40020800 	.word	0x40020800
 801e098:	40020c00 	.word	0x40020c00
 801e09c:	40021000 	.word	0x40021000
 801e0a0:	40013c00 	.word	0x40013c00

0801e0a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801e0a4:	b480      	push	{r7}
 801e0a6:	b087      	sub	sp, #28
 801e0a8:	af00      	add	r7, sp, #0
 801e0aa:	6078      	str	r0, [r7, #4]
 801e0ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801e0ae:	2300      	movs	r3, #0
 801e0b0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 801e0b2:	2300      	movs	r3, #0
 801e0b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801e0b6:	2300      	movs	r3, #0
 801e0b8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801e0ba:	2300      	movs	r3, #0
 801e0bc:	617b      	str	r3, [r7, #20]
 801e0be:	e0bb      	b.n	801e238 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801e0c0:	2201      	movs	r2, #1
 801e0c2:	697b      	ldr	r3, [r7, #20]
 801e0c4:	fa02 f303 	lsl.w	r3, r2, r3
 801e0c8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801e0ca:	683a      	ldr	r2, [r7, #0]
 801e0cc:	693b      	ldr	r3, [r7, #16]
 801e0ce:	4013      	ands	r3, r2
 801e0d0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801e0d2:	68fa      	ldr	r2, [r7, #12]
 801e0d4:	693b      	ldr	r3, [r7, #16]
 801e0d6:	429a      	cmp	r2, r3
 801e0d8:	f040 80ab 	bne.w	801e232 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 801e0dc:	4a5c      	ldr	r2, [pc, #368]	; (801e250 <HAL_GPIO_DeInit+0x1ac>)
 801e0de:	697b      	ldr	r3, [r7, #20]
 801e0e0:	089b      	lsrs	r3, r3, #2
 801e0e2:	3302      	adds	r3, #2
 801e0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e0e8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 801e0ea:	697b      	ldr	r3, [r7, #20]
 801e0ec:	f003 0303 	and.w	r3, r3, #3
 801e0f0:	009b      	lsls	r3, r3, #2
 801e0f2:	220f      	movs	r2, #15
 801e0f4:	fa02 f303 	lsl.w	r3, r2, r3
 801e0f8:	68ba      	ldr	r2, [r7, #8]
 801e0fa:	4013      	ands	r3, r2
 801e0fc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801e0fe:	687b      	ldr	r3, [r7, #4]
 801e100:	4a54      	ldr	r2, [pc, #336]	; (801e254 <HAL_GPIO_DeInit+0x1b0>)
 801e102:	4293      	cmp	r3, r2
 801e104:	d019      	beq.n	801e13a <HAL_GPIO_DeInit+0x96>
 801e106:	687b      	ldr	r3, [r7, #4]
 801e108:	4a53      	ldr	r2, [pc, #332]	; (801e258 <HAL_GPIO_DeInit+0x1b4>)
 801e10a:	4293      	cmp	r3, r2
 801e10c:	d013      	beq.n	801e136 <HAL_GPIO_DeInit+0x92>
 801e10e:	687b      	ldr	r3, [r7, #4]
 801e110:	4a52      	ldr	r2, [pc, #328]	; (801e25c <HAL_GPIO_DeInit+0x1b8>)
 801e112:	4293      	cmp	r3, r2
 801e114:	d00d      	beq.n	801e132 <HAL_GPIO_DeInit+0x8e>
 801e116:	687b      	ldr	r3, [r7, #4]
 801e118:	4a51      	ldr	r2, [pc, #324]	; (801e260 <HAL_GPIO_DeInit+0x1bc>)
 801e11a:	4293      	cmp	r3, r2
 801e11c:	d007      	beq.n	801e12e <HAL_GPIO_DeInit+0x8a>
 801e11e:	687b      	ldr	r3, [r7, #4]
 801e120:	4a50      	ldr	r2, [pc, #320]	; (801e264 <HAL_GPIO_DeInit+0x1c0>)
 801e122:	4293      	cmp	r3, r2
 801e124:	d101      	bne.n	801e12a <HAL_GPIO_DeInit+0x86>
 801e126:	2304      	movs	r3, #4
 801e128:	e008      	b.n	801e13c <HAL_GPIO_DeInit+0x98>
 801e12a:	2307      	movs	r3, #7
 801e12c:	e006      	b.n	801e13c <HAL_GPIO_DeInit+0x98>
 801e12e:	2303      	movs	r3, #3
 801e130:	e004      	b.n	801e13c <HAL_GPIO_DeInit+0x98>
 801e132:	2302      	movs	r3, #2
 801e134:	e002      	b.n	801e13c <HAL_GPIO_DeInit+0x98>
 801e136:	2301      	movs	r3, #1
 801e138:	e000      	b.n	801e13c <HAL_GPIO_DeInit+0x98>
 801e13a:	2300      	movs	r3, #0
 801e13c:	697a      	ldr	r2, [r7, #20]
 801e13e:	f002 0203 	and.w	r2, r2, #3
 801e142:	0092      	lsls	r2, r2, #2
 801e144:	4093      	lsls	r3, r2
 801e146:	68ba      	ldr	r2, [r7, #8]
 801e148:	429a      	cmp	r2, r3
 801e14a:	d132      	bne.n	801e1b2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 801e14c:	4b46      	ldr	r3, [pc, #280]	; (801e268 <HAL_GPIO_DeInit+0x1c4>)
 801e14e:	681a      	ldr	r2, [r3, #0]
 801e150:	68fb      	ldr	r3, [r7, #12]
 801e152:	43db      	mvns	r3, r3
 801e154:	4944      	ldr	r1, [pc, #272]	; (801e268 <HAL_GPIO_DeInit+0x1c4>)
 801e156:	4013      	ands	r3, r2
 801e158:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801e15a:	4b43      	ldr	r3, [pc, #268]	; (801e268 <HAL_GPIO_DeInit+0x1c4>)
 801e15c:	685a      	ldr	r2, [r3, #4]
 801e15e:	68fb      	ldr	r3, [r7, #12]
 801e160:	43db      	mvns	r3, r3
 801e162:	4941      	ldr	r1, [pc, #260]	; (801e268 <HAL_GPIO_DeInit+0x1c4>)
 801e164:	4013      	ands	r3, r2
 801e166:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801e168:	4b3f      	ldr	r3, [pc, #252]	; (801e268 <HAL_GPIO_DeInit+0x1c4>)
 801e16a:	68da      	ldr	r2, [r3, #12]
 801e16c:	68fb      	ldr	r3, [r7, #12]
 801e16e:	43db      	mvns	r3, r3
 801e170:	493d      	ldr	r1, [pc, #244]	; (801e268 <HAL_GPIO_DeInit+0x1c4>)
 801e172:	4013      	ands	r3, r2
 801e174:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801e176:	4b3c      	ldr	r3, [pc, #240]	; (801e268 <HAL_GPIO_DeInit+0x1c4>)
 801e178:	689a      	ldr	r2, [r3, #8]
 801e17a:	68fb      	ldr	r3, [r7, #12]
 801e17c:	43db      	mvns	r3, r3
 801e17e:	493a      	ldr	r1, [pc, #232]	; (801e268 <HAL_GPIO_DeInit+0x1c4>)
 801e180:	4013      	ands	r3, r2
 801e182:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 801e184:	697b      	ldr	r3, [r7, #20]
 801e186:	f003 0303 	and.w	r3, r3, #3
 801e18a:	009b      	lsls	r3, r3, #2
 801e18c:	220f      	movs	r2, #15
 801e18e:	fa02 f303 	lsl.w	r3, r2, r3
 801e192:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801e194:	4a2e      	ldr	r2, [pc, #184]	; (801e250 <HAL_GPIO_DeInit+0x1ac>)
 801e196:	697b      	ldr	r3, [r7, #20]
 801e198:	089b      	lsrs	r3, r3, #2
 801e19a:	3302      	adds	r3, #2
 801e19c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801e1a0:	68bb      	ldr	r3, [r7, #8]
 801e1a2:	43da      	mvns	r2, r3
 801e1a4:	482a      	ldr	r0, [pc, #168]	; (801e250 <HAL_GPIO_DeInit+0x1ac>)
 801e1a6:	697b      	ldr	r3, [r7, #20]
 801e1a8:	089b      	lsrs	r3, r3, #2
 801e1aa:	400a      	ands	r2, r1
 801e1ac:	3302      	adds	r3, #2
 801e1ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801e1b2:	687b      	ldr	r3, [r7, #4]
 801e1b4:	681a      	ldr	r2, [r3, #0]
 801e1b6:	697b      	ldr	r3, [r7, #20]
 801e1b8:	005b      	lsls	r3, r3, #1
 801e1ba:	2103      	movs	r1, #3
 801e1bc:	fa01 f303 	lsl.w	r3, r1, r3
 801e1c0:	43db      	mvns	r3, r3
 801e1c2:	401a      	ands	r2, r3
 801e1c4:	687b      	ldr	r3, [r7, #4]
 801e1c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801e1c8:	697b      	ldr	r3, [r7, #20]
 801e1ca:	08da      	lsrs	r2, r3, #3
 801e1cc:	687b      	ldr	r3, [r7, #4]
 801e1ce:	3208      	adds	r2, #8
 801e1d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e1d4:	697b      	ldr	r3, [r7, #20]
 801e1d6:	f003 0307 	and.w	r3, r3, #7
 801e1da:	009b      	lsls	r3, r3, #2
 801e1dc:	220f      	movs	r2, #15
 801e1de:	fa02 f303 	lsl.w	r3, r2, r3
 801e1e2:	43db      	mvns	r3, r3
 801e1e4:	697a      	ldr	r2, [r7, #20]
 801e1e6:	08d2      	lsrs	r2, r2, #3
 801e1e8:	4019      	ands	r1, r3
 801e1ea:	687b      	ldr	r3, [r7, #4]
 801e1ec:	3208      	adds	r2, #8
 801e1ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801e1f2:	687b      	ldr	r3, [r7, #4]
 801e1f4:	68da      	ldr	r2, [r3, #12]
 801e1f6:	697b      	ldr	r3, [r7, #20]
 801e1f8:	005b      	lsls	r3, r3, #1
 801e1fa:	2103      	movs	r1, #3
 801e1fc:	fa01 f303 	lsl.w	r3, r1, r3
 801e200:	43db      	mvns	r3, r3
 801e202:	401a      	ands	r2, r3
 801e204:	687b      	ldr	r3, [r7, #4]
 801e206:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 801e208:	687b      	ldr	r3, [r7, #4]
 801e20a:	685a      	ldr	r2, [r3, #4]
 801e20c:	2101      	movs	r1, #1
 801e20e:	697b      	ldr	r3, [r7, #20]
 801e210:	fa01 f303 	lsl.w	r3, r1, r3
 801e214:	43db      	mvns	r3, r3
 801e216:	401a      	ands	r2, r3
 801e218:	687b      	ldr	r3, [r7, #4]
 801e21a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801e21c:	687b      	ldr	r3, [r7, #4]
 801e21e:	689a      	ldr	r2, [r3, #8]
 801e220:	697b      	ldr	r3, [r7, #20]
 801e222:	005b      	lsls	r3, r3, #1
 801e224:	2103      	movs	r1, #3
 801e226:	fa01 f303 	lsl.w	r3, r1, r3
 801e22a:	43db      	mvns	r3, r3
 801e22c:	401a      	ands	r2, r3
 801e22e:	687b      	ldr	r3, [r7, #4]
 801e230:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801e232:	697b      	ldr	r3, [r7, #20]
 801e234:	3301      	adds	r3, #1
 801e236:	617b      	str	r3, [r7, #20]
 801e238:	697b      	ldr	r3, [r7, #20]
 801e23a:	2b0f      	cmp	r3, #15
 801e23c:	f67f af40 	bls.w	801e0c0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 801e240:	bf00      	nop
 801e242:	bf00      	nop
 801e244:	371c      	adds	r7, #28
 801e246:	46bd      	mov	sp, r7
 801e248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e24c:	4770      	bx	lr
 801e24e:	bf00      	nop
 801e250:	40013800 	.word	0x40013800
 801e254:	40020000 	.word	0x40020000
 801e258:	40020400 	.word	0x40020400
 801e25c:	40020800 	.word	0x40020800
 801e260:	40020c00 	.word	0x40020c00
 801e264:	40021000 	.word	0x40021000
 801e268:	40013c00 	.word	0x40013c00

0801e26c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801e26c:	b480      	push	{r7}
 801e26e:	b083      	sub	sp, #12
 801e270:	af00      	add	r7, sp, #0
 801e272:	6078      	str	r0, [r7, #4]
 801e274:	460b      	mov	r3, r1
 801e276:	807b      	strh	r3, [r7, #2]
 801e278:	4613      	mov	r3, r2
 801e27a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801e27c:	787b      	ldrb	r3, [r7, #1]
 801e27e:	2b00      	cmp	r3, #0
 801e280:	d003      	beq.n	801e28a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801e282:	887a      	ldrh	r2, [r7, #2]
 801e284:	687b      	ldr	r3, [r7, #4]
 801e286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801e288:	e003      	b.n	801e292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801e28a:	887b      	ldrh	r3, [r7, #2]
 801e28c:	041a      	lsls	r2, r3, #16
 801e28e:	687b      	ldr	r3, [r7, #4]
 801e290:	619a      	str	r2, [r3, #24]
}
 801e292:	bf00      	nop
 801e294:	370c      	adds	r7, #12
 801e296:	46bd      	mov	sp, r7
 801e298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e29c:	4770      	bx	lr
	...

0801e2a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801e2a0:	b580      	push	{r7, lr}
 801e2a2:	b082      	sub	sp, #8
 801e2a4:	af00      	add	r7, sp, #0
 801e2a6:	4603      	mov	r3, r0
 801e2a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801e2aa:	4b08      	ldr	r3, [pc, #32]	; (801e2cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801e2ac:	695a      	ldr	r2, [r3, #20]
 801e2ae:	88fb      	ldrh	r3, [r7, #6]
 801e2b0:	4013      	ands	r3, r2
 801e2b2:	2b00      	cmp	r3, #0
 801e2b4:	d006      	beq.n	801e2c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801e2b6:	4a05      	ldr	r2, [pc, #20]	; (801e2cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801e2b8:	88fb      	ldrh	r3, [r7, #6]
 801e2ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801e2bc:	88fb      	ldrh	r3, [r7, #6]
 801e2be:	4618      	mov	r0, r3
 801e2c0:	f7e3 ff53 	bl	800216a <HAL_GPIO_EXTI_Callback>
  }
}
 801e2c4:	bf00      	nop
 801e2c6:	3708      	adds	r7, #8
 801e2c8:	46bd      	mov	sp, r7
 801e2ca:	bd80      	pop	{r7, pc}
 801e2cc:	40013c00 	.word	0x40013c00

0801e2d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801e2d0:	b580      	push	{r7, lr}
 801e2d2:	b084      	sub	sp, #16
 801e2d4:	af00      	add	r7, sp, #0
 801e2d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801e2d8:	687b      	ldr	r3, [r7, #4]
 801e2da:	2b00      	cmp	r3, #0
 801e2dc:	d101      	bne.n	801e2e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801e2de:	2301      	movs	r3, #1
 801e2e0:	e12b      	b.n	801e53a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801e2e2:	687b      	ldr	r3, [r7, #4]
 801e2e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e2e8:	b2db      	uxtb	r3, r3
 801e2ea:	2b00      	cmp	r3, #0
 801e2ec:	d106      	bne.n	801e2fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801e2ee:	687b      	ldr	r3, [r7, #4]
 801e2f0:	2200      	movs	r2, #0
 801e2f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801e2f6:	6878      	ldr	r0, [r7, #4]
 801e2f8:	f7e5 fa1e 	bl	8003738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801e2fc:	687b      	ldr	r3, [r7, #4]
 801e2fe:	2224      	movs	r2, #36	; 0x24
 801e300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801e304:	687b      	ldr	r3, [r7, #4]
 801e306:	681b      	ldr	r3, [r3, #0]
 801e308:	681a      	ldr	r2, [r3, #0]
 801e30a:	687b      	ldr	r3, [r7, #4]
 801e30c:	681b      	ldr	r3, [r3, #0]
 801e30e:	f022 0201 	bic.w	r2, r2, #1
 801e312:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801e314:	687b      	ldr	r3, [r7, #4]
 801e316:	681b      	ldr	r3, [r3, #0]
 801e318:	681a      	ldr	r2, [r3, #0]
 801e31a:	687b      	ldr	r3, [r7, #4]
 801e31c:	681b      	ldr	r3, [r3, #0]
 801e31e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801e322:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801e324:	687b      	ldr	r3, [r7, #4]
 801e326:	681b      	ldr	r3, [r3, #0]
 801e328:	681a      	ldr	r2, [r3, #0]
 801e32a:	687b      	ldr	r3, [r7, #4]
 801e32c:	681b      	ldr	r3, [r3, #0]
 801e32e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801e332:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801e334:	f003 fb62 	bl	80219fc <HAL_RCC_GetPCLK1Freq>
 801e338:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801e33a:	687b      	ldr	r3, [r7, #4]
 801e33c:	685b      	ldr	r3, [r3, #4]
 801e33e:	4a81      	ldr	r2, [pc, #516]	; (801e544 <HAL_I2C_Init+0x274>)
 801e340:	4293      	cmp	r3, r2
 801e342:	d807      	bhi.n	801e354 <HAL_I2C_Init+0x84>
 801e344:	68fb      	ldr	r3, [r7, #12]
 801e346:	4a80      	ldr	r2, [pc, #512]	; (801e548 <HAL_I2C_Init+0x278>)
 801e348:	4293      	cmp	r3, r2
 801e34a:	bf94      	ite	ls
 801e34c:	2301      	movls	r3, #1
 801e34e:	2300      	movhi	r3, #0
 801e350:	b2db      	uxtb	r3, r3
 801e352:	e006      	b.n	801e362 <HAL_I2C_Init+0x92>
 801e354:	68fb      	ldr	r3, [r7, #12]
 801e356:	4a7d      	ldr	r2, [pc, #500]	; (801e54c <HAL_I2C_Init+0x27c>)
 801e358:	4293      	cmp	r3, r2
 801e35a:	bf94      	ite	ls
 801e35c:	2301      	movls	r3, #1
 801e35e:	2300      	movhi	r3, #0
 801e360:	b2db      	uxtb	r3, r3
 801e362:	2b00      	cmp	r3, #0
 801e364:	d001      	beq.n	801e36a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801e366:	2301      	movs	r3, #1
 801e368:	e0e7      	b.n	801e53a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801e36a:	68fb      	ldr	r3, [r7, #12]
 801e36c:	4a78      	ldr	r2, [pc, #480]	; (801e550 <HAL_I2C_Init+0x280>)
 801e36e:	fba2 2303 	umull	r2, r3, r2, r3
 801e372:	0c9b      	lsrs	r3, r3, #18
 801e374:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801e376:	687b      	ldr	r3, [r7, #4]
 801e378:	681b      	ldr	r3, [r3, #0]
 801e37a:	685b      	ldr	r3, [r3, #4]
 801e37c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801e380:	687b      	ldr	r3, [r7, #4]
 801e382:	681b      	ldr	r3, [r3, #0]
 801e384:	68ba      	ldr	r2, [r7, #8]
 801e386:	430a      	orrs	r2, r1
 801e388:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801e38a:	687b      	ldr	r3, [r7, #4]
 801e38c:	681b      	ldr	r3, [r3, #0]
 801e38e:	6a1b      	ldr	r3, [r3, #32]
 801e390:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801e394:	687b      	ldr	r3, [r7, #4]
 801e396:	685b      	ldr	r3, [r3, #4]
 801e398:	4a6a      	ldr	r2, [pc, #424]	; (801e544 <HAL_I2C_Init+0x274>)
 801e39a:	4293      	cmp	r3, r2
 801e39c:	d802      	bhi.n	801e3a4 <HAL_I2C_Init+0xd4>
 801e39e:	68bb      	ldr	r3, [r7, #8]
 801e3a0:	3301      	adds	r3, #1
 801e3a2:	e009      	b.n	801e3b8 <HAL_I2C_Init+0xe8>
 801e3a4:	68bb      	ldr	r3, [r7, #8]
 801e3a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801e3aa:	fb02 f303 	mul.w	r3, r2, r3
 801e3ae:	4a69      	ldr	r2, [pc, #420]	; (801e554 <HAL_I2C_Init+0x284>)
 801e3b0:	fba2 2303 	umull	r2, r3, r2, r3
 801e3b4:	099b      	lsrs	r3, r3, #6
 801e3b6:	3301      	adds	r3, #1
 801e3b8:	687a      	ldr	r2, [r7, #4]
 801e3ba:	6812      	ldr	r2, [r2, #0]
 801e3bc:	430b      	orrs	r3, r1
 801e3be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801e3c0:	687b      	ldr	r3, [r7, #4]
 801e3c2:	681b      	ldr	r3, [r3, #0]
 801e3c4:	69db      	ldr	r3, [r3, #28]
 801e3c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801e3ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801e3ce:	687b      	ldr	r3, [r7, #4]
 801e3d0:	685b      	ldr	r3, [r3, #4]
 801e3d2:	495c      	ldr	r1, [pc, #368]	; (801e544 <HAL_I2C_Init+0x274>)
 801e3d4:	428b      	cmp	r3, r1
 801e3d6:	d819      	bhi.n	801e40c <HAL_I2C_Init+0x13c>
 801e3d8:	68fb      	ldr	r3, [r7, #12]
 801e3da:	1e59      	subs	r1, r3, #1
 801e3dc:	687b      	ldr	r3, [r7, #4]
 801e3de:	685b      	ldr	r3, [r3, #4]
 801e3e0:	005b      	lsls	r3, r3, #1
 801e3e2:	fbb1 f3f3 	udiv	r3, r1, r3
 801e3e6:	1c59      	adds	r1, r3, #1
 801e3e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 801e3ec:	400b      	ands	r3, r1
 801e3ee:	2b00      	cmp	r3, #0
 801e3f0:	d00a      	beq.n	801e408 <HAL_I2C_Init+0x138>
 801e3f2:	68fb      	ldr	r3, [r7, #12]
 801e3f4:	1e59      	subs	r1, r3, #1
 801e3f6:	687b      	ldr	r3, [r7, #4]
 801e3f8:	685b      	ldr	r3, [r3, #4]
 801e3fa:	005b      	lsls	r3, r3, #1
 801e3fc:	fbb1 f3f3 	udiv	r3, r1, r3
 801e400:	3301      	adds	r3, #1
 801e402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801e406:	e051      	b.n	801e4ac <HAL_I2C_Init+0x1dc>
 801e408:	2304      	movs	r3, #4
 801e40a:	e04f      	b.n	801e4ac <HAL_I2C_Init+0x1dc>
 801e40c:	687b      	ldr	r3, [r7, #4]
 801e40e:	689b      	ldr	r3, [r3, #8]
 801e410:	2b00      	cmp	r3, #0
 801e412:	d111      	bne.n	801e438 <HAL_I2C_Init+0x168>
 801e414:	68fb      	ldr	r3, [r7, #12]
 801e416:	1e58      	subs	r0, r3, #1
 801e418:	687b      	ldr	r3, [r7, #4]
 801e41a:	6859      	ldr	r1, [r3, #4]
 801e41c:	460b      	mov	r3, r1
 801e41e:	005b      	lsls	r3, r3, #1
 801e420:	440b      	add	r3, r1
 801e422:	fbb0 f3f3 	udiv	r3, r0, r3
 801e426:	3301      	adds	r3, #1
 801e428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801e42c:	2b00      	cmp	r3, #0
 801e42e:	bf0c      	ite	eq
 801e430:	2301      	moveq	r3, #1
 801e432:	2300      	movne	r3, #0
 801e434:	b2db      	uxtb	r3, r3
 801e436:	e012      	b.n	801e45e <HAL_I2C_Init+0x18e>
 801e438:	68fb      	ldr	r3, [r7, #12]
 801e43a:	1e58      	subs	r0, r3, #1
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	6859      	ldr	r1, [r3, #4]
 801e440:	460b      	mov	r3, r1
 801e442:	009b      	lsls	r3, r3, #2
 801e444:	440b      	add	r3, r1
 801e446:	0099      	lsls	r1, r3, #2
 801e448:	440b      	add	r3, r1
 801e44a:	fbb0 f3f3 	udiv	r3, r0, r3
 801e44e:	3301      	adds	r3, #1
 801e450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801e454:	2b00      	cmp	r3, #0
 801e456:	bf0c      	ite	eq
 801e458:	2301      	moveq	r3, #1
 801e45a:	2300      	movne	r3, #0
 801e45c:	b2db      	uxtb	r3, r3
 801e45e:	2b00      	cmp	r3, #0
 801e460:	d001      	beq.n	801e466 <HAL_I2C_Init+0x196>
 801e462:	2301      	movs	r3, #1
 801e464:	e022      	b.n	801e4ac <HAL_I2C_Init+0x1dc>
 801e466:	687b      	ldr	r3, [r7, #4]
 801e468:	689b      	ldr	r3, [r3, #8]
 801e46a:	2b00      	cmp	r3, #0
 801e46c:	d10e      	bne.n	801e48c <HAL_I2C_Init+0x1bc>
 801e46e:	68fb      	ldr	r3, [r7, #12]
 801e470:	1e58      	subs	r0, r3, #1
 801e472:	687b      	ldr	r3, [r7, #4]
 801e474:	6859      	ldr	r1, [r3, #4]
 801e476:	460b      	mov	r3, r1
 801e478:	005b      	lsls	r3, r3, #1
 801e47a:	440b      	add	r3, r1
 801e47c:	fbb0 f3f3 	udiv	r3, r0, r3
 801e480:	3301      	adds	r3, #1
 801e482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801e486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e48a:	e00f      	b.n	801e4ac <HAL_I2C_Init+0x1dc>
 801e48c:	68fb      	ldr	r3, [r7, #12]
 801e48e:	1e58      	subs	r0, r3, #1
 801e490:	687b      	ldr	r3, [r7, #4]
 801e492:	6859      	ldr	r1, [r3, #4]
 801e494:	460b      	mov	r3, r1
 801e496:	009b      	lsls	r3, r3, #2
 801e498:	440b      	add	r3, r1
 801e49a:	0099      	lsls	r1, r3, #2
 801e49c:	440b      	add	r3, r1
 801e49e:	fbb0 f3f3 	udiv	r3, r0, r3
 801e4a2:	3301      	adds	r3, #1
 801e4a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801e4a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801e4ac:	6879      	ldr	r1, [r7, #4]
 801e4ae:	6809      	ldr	r1, [r1, #0]
 801e4b0:	4313      	orrs	r3, r2
 801e4b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801e4b4:	687b      	ldr	r3, [r7, #4]
 801e4b6:	681b      	ldr	r3, [r3, #0]
 801e4b8:	681b      	ldr	r3, [r3, #0]
 801e4ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801e4be:	687b      	ldr	r3, [r7, #4]
 801e4c0:	69da      	ldr	r2, [r3, #28]
 801e4c2:	687b      	ldr	r3, [r7, #4]
 801e4c4:	6a1b      	ldr	r3, [r3, #32]
 801e4c6:	431a      	orrs	r2, r3
 801e4c8:	687b      	ldr	r3, [r7, #4]
 801e4ca:	681b      	ldr	r3, [r3, #0]
 801e4cc:	430a      	orrs	r2, r1
 801e4ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801e4d0:	687b      	ldr	r3, [r7, #4]
 801e4d2:	681b      	ldr	r3, [r3, #0]
 801e4d4:	689b      	ldr	r3, [r3, #8]
 801e4d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801e4da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801e4de:	687a      	ldr	r2, [r7, #4]
 801e4e0:	6911      	ldr	r1, [r2, #16]
 801e4e2:	687a      	ldr	r2, [r7, #4]
 801e4e4:	68d2      	ldr	r2, [r2, #12]
 801e4e6:	4311      	orrs	r1, r2
 801e4e8:	687a      	ldr	r2, [r7, #4]
 801e4ea:	6812      	ldr	r2, [r2, #0]
 801e4ec:	430b      	orrs	r3, r1
 801e4ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801e4f0:	687b      	ldr	r3, [r7, #4]
 801e4f2:	681b      	ldr	r3, [r3, #0]
 801e4f4:	68db      	ldr	r3, [r3, #12]
 801e4f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801e4fa:	687b      	ldr	r3, [r7, #4]
 801e4fc:	695a      	ldr	r2, [r3, #20]
 801e4fe:	687b      	ldr	r3, [r7, #4]
 801e500:	699b      	ldr	r3, [r3, #24]
 801e502:	431a      	orrs	r2, r3
 801e504:	687b      	ldr	r3, [r7, #4]
 801e506:	681b      	ldr	r3, [r3, #0]
 801e508:	430a      	orrs	r2, r1
 801e50a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801e50c:	687b      	ldr	r3, [r7, #4]
 801e50e:	681b      	ldr	r3, [r3, #0]
 801e510:	681a      	ldr	r2, [r3, #0]
 801e512:	687b      	ldr	r3, [r7, #4]
 801e514:	681b      	ldr	r3, [r3, #0]
 801e516:	f042 0201 	orr.w	r2, r2, #1
 801e51a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801e51c:	687b      	ldr	r3, [r7, #4]
 801e51e:	2200      	movs	r2, #0
 801e520:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801e522:	687b      	ldr	r3, [r7, #4]
 801e524:	2220      	movs	r2, #32
 801e526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801e52a:	687b      	ldr	r3, [r7, #4]
 801e52c:	2200      	movs	r2, #0
 801e52e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801e530:	687b      	ldr	r3, [r7, #4]
 801e532:	2200      	movs	r2, #0
 801e534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801e538:	2300      	movs	r3, #0
}
 801e53a:	4618      	mov	r0, r3
 801e53c:	3710      	adds	r7, #16
 801e53e:	46bd      	mov	sp, r7
 801e540:	bd80      	pop	{r7, pc}
 801e542:	bf00      	nop
 801e544:	000186a0 	.word	0x000186a0
 801e548:	001e847f 	.word	0x001e847f
 801e54c:	003d08ff 	.word	0x003d08ff
 801e550:	431bde83 	.word	0x431bde83
 801e554:	10624dd3 	.word	0x10624dd3

0801e558 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 801e558:	b580      	push	{r7, lr}
 801e55a:	b086      	sub	sp, #24
 801e55c:	af00      	add	r7, sp, #0
 801e55e:	60f8      	str	r0, [r7, #12]
 801e560:	607a      	str	r2, [r7, #4]
 801e562:	461a      	mov	r2, r3
 801e564:	460b      	mov	r3, r1
 801e566:	817b      	strh	r3, [r7, #10]
 801e568:	4613      	mov	r3, r2
 801e56a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 801e56c:	2300      	movs	r3, #0
 801e56e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801e570:	68fb      	ldr	r3, [r7, #12]
 801e572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e576:	b2db      	uxtb	r3, r3
 801e578:	2b20      	cmp	r3, #32
 801e57a:	f040 810d 	bne.w	801e798 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801e57e:	4b89      	ldr	r3, [pc, #548]	; (801e7a4 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 801e580:	681b      	ldr	r3, [r3, #0]
 801e582:	08db      	lsrs	r3, r3, #3
 801e584:	4a88      	ldr	r2, [pc, #544]	; (801e7a8 <HAL_I2C_Master_Transmit_DMA+0x250>)
 801e586:	fba2 2303 	umull	r2, r3, r2, r3
 801e58a:	0a1a      	lsrs	r2, r3, #8
 801e58c:	4613      	mov	r3, r2
 801e58e:	009b      	lsls	r3, r3, #2
 801e590:	4413      	add	r3, r2
 801e592:	009a      	lsls	r2, r3, #2
 801e594:	4413      	add	r3, r2
 801e596:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 801e598:	693b      	ldr	r3, [r7, #16]
 801e59a:	3b01      	subs	r3, #1
 801e59c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 801e59e:	693b      	ldr	r3, [r7, #16]
 801e5a0:	2b00      	cmp	r3, #0
 801e5a2:	d116      	bne.n	801e5d2 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801e5a4:	68fb      	ldr	r3, [r7, #12]
 801e5a6:	2200      	movs	r2, #0
 801e5a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801e5aa:	68fb      	ldr	r3, [r7, #12]
 801e5ac:	2220      	movs	r2, #32
 801e5ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801e5b2:	68fb      	ldr	r3, [r7, #12]
 801e5b4:	2200      	movs	r2, #0
 801e5b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801e5ba:	68fb      	ldr	r3, [r7, #12]
 801e5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e5be:	f043 0220 	orr.w	r2, r3, #32
 801e5c2:	68fb      	ldr	r3, [r7, #12]
 801e5c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801e5c6:	68fb      	ldr	r3, [r7, #12]
 801e5c8:	2200      	movs	r2, #0
 801e5ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801e5ce:	2301      	movs	r3, #1
 801e5d0:	e0e3      	b.n	801e79a <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801e5d2:	68fb      	ldr	r3, [r7, #12]
 801e5d4:	681b      	ldr	r3, [r3, #0]
 801e5d6:	699b      	ldr	r3, [r3, #24]
 801e5d8:	f003 0302 	and.w	r3, r3, #2
 801e5dc:	2b02      	cmp	r3, #2
 801e5de:	d0db      	beq.n	801e598 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801e5e0:	68fb      	ldr	r3, [r7, #12]
 801e5e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e5e6:	2b01      	cmp	r3, #1
 801e5e8:	d101      	bne.n	801e5ee <HAL_I2C_Master_Transmit_DMA+0x96>
 801e5ea:	2302      	movs	r3, #2
 801e5ec:	e0d5      	b.n	801e79a <HAL_I2C_Master_Transmit_DMA+0x242>
 801e5ee:	68fb      	ldr	r3, [r7, #12]
 801e5f0:	2201      	movs	r2, #1
 801e5f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801e5f6:	68fb      	ldr	r3, [r7, #12]
 801e5f8:	681b      	ldr	r3, [r3, #0]
 801e5fa:	681b      	ldr	r3, [r3, #0]
 801e5fc:	f003 0301 	and.w	r3, r3, #1
 801e600:	2b01      	cmp	r3, #1
 801e602:	d007      	beq.n	801e614 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801e604:	68fb      	ldr	r3, [r7, #12]
 801e606:	681b      	ldr	r3, [r3, #0]
 801e608:	681a      	ldr	r2, [r3, #0]
 801e60a:	68fb      	ldr	r3, [r7, #12]
 801e60c:	681b      	ldr	r3, [r3, #0]
 801e60e:	f042 0201 	orr.w	r2, r2, #1
 801e612:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801e614:	68fb      	ldr	r3, [r7, #12]
 801e616:	681b      	ldr	r3, [r3, #0]
 801e618:	681a      	ldr	r2, [r3, #0]
 801e61a:	68fb      	ldr	r3, [r7, #12]
 801e61c:	681b      	ldr	r3, [r3, #0]
 801e61e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e622:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801e624:	68fb      	ldr	r3, [r7, #12]
 801e626:	2221      	movs	r2, #33	; 0x21
 801e628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801e62c:	68fb      	ldr	r3, [r7, #12]
 801e62e:	2210      	movs	r2, #16
 801e630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801e634:	68fb      	ldr	r3, [r7, #12]
 801e636:	2200      	movs	r2, #0
 801e638:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801e63a:	68fb      	ldr	r3, [r7, #12]
 801e63c:	687a      	ldr	r2, [r7, #4]
 801e63e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801e640:	68fb      	ldr	r3, [r7, #12]
 801e642:	893a      	ldrh	r2, [r7, #8]
 801e644:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801e646:	68fb      	ldr	r3, [r7, #12]
 801e648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e64a:	b29a      	uxth	r2, r3
 801e64c:	68fb      	ldr	r3, [r7, #12]
 801e64e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801e650:	68fb      	ldr	r3, [r7, #12]
 801e652:	4a56      	ldr	r2, [pc, #344]	; (801e7ac <HAL_I2C_Master_Transmit_DMA+0x254>)
 801e654:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801e656:	897a      	ldrh	r2, [r7, #10]
 801e658:	68fb      	ldr	r3, [r7, #12]
 801e65a:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 801e65c:	68fb      	ldr	r3, [r7, #12]
 801e65e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e660:	2b00      	cmp	r3, #0
 801e662:	d07b      	beq.n	801e75c <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 801e664:	68fb      	ldr	r3, [r7, #12]
 801e666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e668:	2b00      	cmp	r3, #0
 801e66a:	d02a      	beq.n	801e6c2 <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 801e66c:	68fb      	ldr	r3, [r7, #12]
 801e66e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e670:	4a4f      	ldr	r2, [pc, #316]	; (801e7b0 <HAL_I2C_Master_Transmit_DMA+0x258>)
 801e672:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801e674:	68fb      	ldr	r3, [r7, #12]
 801e676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e678:	4a4e      	ldr	r2, [pc, #312]	; (801e7b4 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 801e67a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801e67c:	68fb      	ldr	r3, [r7, #12]
 801e67e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e680:	2200      	movs	r2, #0
 801e682:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 801e684:	68fb      	ldr	r3, [r7, #12]
 801e686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e688:	2200      	movs	r2, #0
 801e68a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 801e68c:	68fb      	ldr	r3, [r7, #12]
 801e68e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e690:	2200      	movs	r2, #0
 801e692:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 801e694:	68fb      	ldr	r3, [r7, #12]
 801e696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e698:	2200      	movs	r2, #0
 801e69a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 801e69c:	68fb      	ldr	r3, [r7, #12]
 801e69e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801e6a0:	68fb      	ldr	r3, [r7, #12]
 801e6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e6a4:	4619      	mov	r1, r3
 801e6a6:	68fb      	ldr	r3, [r7, #12]
 801e6a8:	681b      	ldr	r3, [r3, #0]
 801e6aa:	3310      	adds	r3, #16
 801e6ac:	461a      	mov	r2, r3
 801e6ae:	68fb      	ldr	r3, [r7, #12]
 801e6b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e6b2:	f7ff f805 	bl	801d6c0 <HAL_DMA_Start_IT>
 801e6b6:	4603      	mov	r3, r0
 801e6b8:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801e6ba:	7dfb      	ldrb	r3, [r7, #23]
 801e6bc:	2b00      	cmp	r3, #0
 801e6be:	d139      	bne.n	801e734 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 801e6c0:	e013      	b.n	801e6ea <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 801e6c2:	68fb      	ldr	r3, [r7, #12]
 801e6c4:	2220      	movs	r2, #32
 801e6c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801e6ca:	68fb      	ldr	r3, [r7, #12]
 801e6cc:	2200      	movs	r2, #0
 801e6ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801e6d2:	68fb      	ldr	r3, [r7, #12]
 801e6d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e6d6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801e6da:	68fb      	ldr	r3, [r7, #12]
 801e6dc:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801e6de:	68fb      	ldr	r3, [r7, #12]
 801e6e0:	2200      	movs	r2, #0
 801e6e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801e6e6:	2301      	movs	r3, #1
 801e6e8:	e057      	b.n	801e79a <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801e6ea:	68fb      	ldr	r3, [r7, #12]
 801e6ec:	2200      	movs	r2, #0
 801e6ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801e6f2:	68fb      	ldr	r3, [r7, #12]
 801e6f4:	681b      	ldr	r3, [r3, #0]
 801e6f6:	685a      	ldr	r2, [r3, #4]
 801e6f8:	68fb      	ldr	r3, [r7, #12]
 801e6fa:	681b      	ldr	r3, [r3, #0]
 801e6fc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801e700:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801e702:	68fb      	ldr	r3, [r7, #12]
 801e704:	681b      	ldr	r3, [r3, #0]
 801e706:	685a      	ldr	r2, [r3, #4]
 801e708:	68fb      	ldr	r3, [r7, #12]
 801e70a:	681b      	ldr	r3, [r3, #0]
 801e70c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e710:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e712:	68fb      	ldr	r3, [r7, #12]
 801e714:	681b      	ldr	r3, [r3, #0]
 801e716:	681a      	ldr	r2, [r3, #0]
 801e718:	68fb      	ldr	r3, [r7, #12]
 801e71a:	681b      	ldr	r3, [r3, #0]
 801e71c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801e720:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801e722:	68fb      	ldr	r3, [r7, #12]
 801e724:	681b      	ldr	r3, [r3, #0]
 801e726:	681a      	ldr	r2, [r3, #0]
 801e728:	68fb      	ldr	r3, [r7, #12]
 801e72a:	681b      	ldr	r3, [r3, #0]
 801e72c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e730:	601a      	str	r2, [r3, #0]
 801e732:	e02f      	b.n	801e794 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801e734:	68fb      	ldr	r3, [r7, #12]
 801e736:	2220      	movs	r2, #32
 801e738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801e73c:	68fb      	ldr	r3, [r7, #12]
 801e73e:	2200      	movs	r2, #0
 801e740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801e744:	68fb      	ldr	r3, [r7, #12]
 801e746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e748:	f043 0210 	orr.w	r2, r3, #16
 801e74c:	68fb      	ldr	r3, [r7, #12]
 801e74e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801e750:	68fb      	ldr	r3, [r7, #12]
 801e752:	2200      	movs	r2, #0
 801e754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801e758:	2301      	movs	r3, #1
 801e75a:	e01e      	b.n	801e79a <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e75c:	68fb      	ldr	r3, [r7, #12]
 801e75e:	681b      	ldr	r3, [r3, #0]
 801e760:	681a      	ldr	r2, [r3, #0]
 801e762:	68fb      	ldr	r3, [r7, #12]
 801e764:	681b      	ldr	r3, [r3, #0]
 801e766:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801e76a:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801e76c:	68fb      	ldr	r3, [r7, #12]
 801e76e:	681b      	ldr	r3, [r3, #0]
 801e770:	681a      	ldr	r2, [r3, #0]
 801e772:	68fb      	ldr	r3, [r7, #12]
 801e774:	681b      	ldr	r3, [r3, #0]
 801e776:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e77a:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801e77c:	68fb      	ldr	r3, [r7, #12]
 801e77e:	2200      	movs	r2, #0
 801e780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e784:	68fb      	ldr	r3, [r7, #12]
 801e786:	681b      	ldr	r3, [r3, #0]
 801e788:	685a      	ldr	r2, [r3, #4]
 801e78a:	68fb      	ldr	r3, [r7, #12]
 801e78c:	681b      	ldr	r3, [r3, #0]
 801e78e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801e792:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 801e794:	2300      	movs	r3, #0
 801e796:	e000      	b.n	801e79a <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 801e798:	2302      	movs	r3, #2
  }
}
 801e79a:	4618      	mov	r0, r3
 801e79c:	3718      	adds	r7, #24
 801e79e:	46bd      	mov	sp, r7
 801e7a0:	bd80      	pop	{r7, pc}
 801e7a2:	bf00      	nop
 801e7a4:	20000020 	.word	0x20000020
 801e7a8:	14f8b589 	.word	0x14f8b589
 801e7ac:	ffff0000 	.word	0xffff0000
 801e7b0:	08020a81 	.word	0x08020a81
 801e7b4:	08020c2b 	.word	0x08020c2b

0801e7b8 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 801e7b8:	b580      	push	{r7, lr}
 801e7ba:	b086      	sub	sp, #24
 801e7bc:	af00      	add	r7, sp, #0
 801e7be:	60f8      	str	r0, [r7, #12]
 801e7c0:	607a      	str	r2, [r7, #4]
 801e7c2:	461a      	mov	r2, r3
 801e7c4:	460b      	mov	r3, r1
 801e7c6:	817b      	strh	r3, [r7, #10]
 801e7c8:	4613      	mov	r3, r2
 801e7ca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 801e7cc:	2300      	movs	r3, #0
 801e7ce:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801e7d0:	68fb      	ldr	r3, [r7, #12]
 801e7d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e7d6:	b2db      	uxtb	r3, r3
 801e7d8:	2b20      	cmp	r3, #32
 801e7da:	f040 810d 	bne.w	801e9f8 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801e7de:	4b89      	ldr	r3, [pc, #548]	; (801ea04 <HAL_I2C_Master_Receive_DMA+0x24c>)
 801e7e0:	681b      	ldr	r3, [r3, #0]
 801e7e2:	08db      	lsrs	r3, r3, #3
 801e7e4:	4a88      	ldr	r2, [pc, #544]	; (801ea08 <HAL_I2C_Master_Receive_DMA+0x250>)
 801e7e6:	fba2 2303 	umull	r2, r3, r2, r3
 801e7ea:	0a1a      	lsrs	r2, r3, #8
 801e7ec:	4613      	mov	r3, r2
 801e7ee:	009b      	lsls	r3, r3, #2
 801e7f0:	4413      	add	r3, r2
 801e7f2:	009a      	lsls	r2, r3, #2
 801e7f4:	4413      	add	r3, r2
 801e7f6:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 801e7f8:	693b      	ldr	r3, [r7, #16]
 801e7fa:	3b01      	subs	r3, #1
 801e7fc:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 801e7fe:	693b      	ldr	r3, [r7, #16]
 801e800:	2b00      	cmp	r3, #0
 801e802:	d116      	bne.n	801e832 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801e804:	68fb      	ldr	r3, [r7, #12]
 801e806:	2200      	movs	r2, #0
 801e808:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801e80a:	68fb      	ldr	r3, [r7, #12]
 801e80c:	2220      	movs	r2, #32
 801e80e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801e812:	68fb      	ldr	r3, [r7, #12]
 801e814:	2200      	movs	r2, #0
 801e816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801e81a:	68fb      	ldr	r3, [r7, #12]
 801e81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e81e:	f043 0220 	orr.w	r2, r3, #32
 801e822:	68fb      	ldr	r3, [r7, #12]
 801e824:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801e826:	68fb      	ldr	r3, [r7, #12]
 801e828:	2200      	movs	r2, #0
 801e82a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801e82e:	2301      	movs	r3, #1
 801e830:	e0e3      	b.n	801e9fa <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801e832:	68fb      	ldr	r3, [r7, #12]
 801e834:	681b      	ldr	r3, [r3, #0]
 801e836:	699b      	ldr	r3, [r3, #24]
 801e838:	f003 0302 	and.w	r3, r3, #2
 801e83c:	2b02      	cmp	r3, #2
 801e83e:	d0db      	beq.n	801e7f8 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801e840:	68fb      	ldr	r3, [r7, #12]
 801e842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e846:	2b01      	cmp	r3, #1
 801e848:	d101      	bne.n	801e84e <HAL_I2C_Master_Receive_DMA+0x96>
 801e84a:	2302      	movs	r3, #2
 801e84c:	e0d5      	b.n	801e9fa <HAL_I2C_Master_Receive_DMA+0x242>
 801e84e:	68fb      	ldr	r3, [r7, #12]
 801e850:	2201      	movs	r2, #1
 801e852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801e856:	68fb      	ldr	r3, [r7, #12]
 801e858:	681b      	ldr	r3, [r3, #0]
 801e85a:	681b      	ldr	r3, [r3, #0]
 801e85c:	f003 0301 	and.w	r3, r3, #1
 801e860:	2b01      	cmp	r3, #1
 801e862:	d007      	beq.n	801e874 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801e864:	68fb      	ldr	r3, [r7, #12]
 801e866:	681b      	ldr	r3, [r3, #0]
 801e868:	681a      	ldr	r2, [r3, #0]
 801e86a:	68fb      	ldr	r3, [r7, #12]
 801e86c:	681b      	ldr	r3, [r3, #0]
 801e86e:	f042 0201 	orr.w	r2, r2, #1
 801e872:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801e874:	68fb      	ldr	r3, [r7, #12]
 801e876:	681b      	ldr	r3, [r3, #0]
 801e878:	681a      	ldr	r2, [r3, #0]
 801e87a:	68fb      	ldr	r3, [r7, #12]
 801e87c:	681b      	ldr	r3, [r3, #0]
 801e87e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e882:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801e884:	68fb      	ldr	r3, [r7, #12]
 801e886:	2222      	movs	r2, #34	; 0x22
 801e888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801e88c:	68fb      	ldr	r3, [r7, #12]
 801e88e:	2210      	movs	r2, #16
 801e890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801e894:	68fb      	ldr	r3, [r7, #12]
 801e896:	2200      	movs	r2, #0
 801e898:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801e89a:	68fb      	ldr	r3, [r7, #12]
 801e89c:	687a      	ldr	r2, [r7, #4]
 801e89e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801e8a0:	68fb      	ldr	r3, [r7, #12]
 801e8a2:	893a      	ldrh	r2, [r7, #8]
 801e8a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801e8a6:	68fb      	ldr	r3, [r7, #12]
 801e8a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e8aa:	b29a      	uxth	r2, r3
 801e8ac:	68fb      	ldr	r3, [r7, #12]
 801e8ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801e8b0:	68fb      	ldr	r3, [r7, #12]
 801e8b2:	4a56      	ldr	r2, [pc, #344]	; (801ea0c <HAL_I2C_Master_Receive_DMA+0x254>)
 801e8b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801e8b6:	897a      	ldrh	r2, [r7, #10]
 801e8b8:	68fb      	ldr	r3, [r7, #12]
 801e8ba:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 801e8bc:	68fb      	ldr	r3, [r7, #12]
 801e8be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e8c0:	2b00      	cmp	r3, #0
 801e8c2:	d07b      	beq.n	801e9bc <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 801e8c4:	68fb      	ldr	r3, [r7, #12]
 801e8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e8c8:	2b00      	cmp	r3, #0
 801e8ca:	d02a      	beq.n	801e922 <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 801e8cc:	68fb      	ldr	r3, [r7, #12]
 801e8ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e8d0:	4a4f      	ldr	r2, [pc, #316]	; (801ea10 <HAL_I2C_Master_Receive_DMA+0x258>)
 801e8d2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801e8d4:	68fb      	ldr	r3, [r7, #12]
 801e8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e8d8:	4a4e      	ldr	r2, [pc, #312]	; (801ea14 <HAL_I2C_Master_Receive_DMA+0x25c>)
 801e8da:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801e8dc:	68fb      	ldr	r3, [r7, #12]
 801e8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e8e0:	2200      	movs	r2, #0
 801e8e2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 801e8e4:	68fb      	ldr	r3, [r7, #12]
 801e8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e8e8:	2200      	movs	r2, #0
 801e8ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 801e8ec:	68fb      	ldr	r3, [r7, #12]
 801e8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e8f0:	2200      	movs	r2, #0
 801e8f2:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 801e8f4:	68fb      	ldr	r3, [r7, #12]
 801e8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e8f8:	2200      	movs	r2, #0
 801e8fa:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 801e8fc:	68fb      	ldr	r3, [r7, #12]
 801e8fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801e900:	68fb      	ldr	r3, [r7, #12]
 801e902:	681b      	ldr	r3, [r3, #0]
 801e904:	3310      	adds	r3, #16
 801e906:	4619      	mov	r1, r3
 801e908:	68fb      	ldr	r3, [r7, #12]
 801e90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e90c:	461a      	mov	r2, r3
 801e90e:	68fb      	ldr	r3, [r7, #12]
 801e910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e912:	f7fe fed5 	bl	801d6c0 <HAL_DMA_Start_IT>
 801e916:	4603      	mov	r3, r0
 801e918:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801e91a:	7dfb      	ldrb	r3, [r7, #23]
 801e91c:	2b00      	cmp	r3, #0
 801e91e:	d139      	bne.n	801e994 <HAL_I2C_Master_Receive_DMA+0x1dc>
 801e920:	e013      	b.n	801e94a <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 801e922:	68fb      	ldr	r3, [r7, #12]
 801e924:	2220      	movs	r2, #32
 801e926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801e92a:	68fb      	ldr	r3, [r7, #12]
 801e92c:	2200      	movs	r2, #0
 801e92e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801e932:	68fb      	ldr	r3, [r7, #12]
 801e934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e936:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801e93a:	68fb      	ldr	r3, [r7, #12]
 801e93c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801e93e:	68fb      	ldr	r3, [r7, #12]
 801e940:	2200      	movs	r2, #0
 801e942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801e946:	2301      	movs	r3, #1
 801e948:	e057      	b.n	801e9fa <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e94a:	68fb      	ldr	r3, [r7, #12]
 801e94c:	681b      	ldr	r3, [r3, #0]
 801e94e:	681a      	ldr	r2, [r3, #0]
 801e950:	68fb      	ldr	r3, [r7, #12]
 801e952:	681b      	ldr	r3, [r3, #0]
 801e954:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801e958:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801e95a:	68fb      	ldr	r3, [r7, #12]
 801e95c:	681b      	ldr	r3, [r3, #0]
 801e95e:	681a      	ldr	r2, [r3, #0]
 801e960:	68fb      	ldr	r3, [r7, #12]
 801e962:	681b      	ldr	r3, [r3, #0]
 801e964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e968:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801e96a:	68fb      	ldr	r3, [r7, #12]
 801e96c:	2200      	movs	r2, #0
 801e96e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801e972:	68fb      	ldr	r3, [r7, #12]
 801e974:	681b      	ldr	r3, [r3, #0]
 801e976:	685a      	ldr	r2, [r3, #4]
 801e978:	68fb      	ldr	r3, [r7, #12]
 801e97a:	681b      	ldr	r3, [r3, #0]
 801e97c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801e980:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801e982:	68fb      	ldr	r3, [r7, #12]
 801e984:	681b      	ldr	r3, [r3, #0]
 801e986:	685a      	ldr	r2, [r3, #4]
 801e988:	68fb      	ldr	r3, [r7, #12]
 801e98a:	681b      	ldr	r3, [r3, #0]
 801e98c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e990:	605a      	str	r2, [r3, #4]
 801e992:	e02f      	b.n	801e9f4 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801e994:	68fb      	ldr	r3, [r7, #12]
 801e996:	2220      	movs	r2, #32
 801e998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801e99c:	68fb      	ldr	r3, [r7, #12]
 801e99e:	2200      	movs	r2, #0
 801e9a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801e9a4:	68fb      	ldr	r3, [r7, #12]
 801e9a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e9a8:	f043 0210 	orr.w	r2, r3, #16
 801e9ac:	68fb      	ldr	r3, [r7, #12]
 801e9ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801e9b0:	68fb      	ldr	r3, [r7, #12]
 801e9b2:	2200      	movs	r2, #0
 801e9b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801e9b8:	2301      	movs	r3, #1
 801e9ba:	e01e      	b.n	801e9fa <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801e9bc:	68fb      	ldr	r3, [r7, #12]
 801e9be:	2200      	movs	r2, #0
 801e9c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e9c4:	68fb      	ldr	r3, [r7, #12]
 801e9c6:	681b      	ldr	r3, [r3, #0]
 801e9c8:	685a      	ldr	r2, [r3, #4]
 801e9ca:	68fb      	ldr	r3, [r7, #12]
 801e9cc:	681b      	ldr	r3, [r3, #0]
 801e9ce:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801e9d2:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e9d4:	68fb      	ldr	r3, [r7, #12]
 801e9d6:	681b      	ldr	r3, [r3, #0]
 801e9d8:	681a      	ldr	r2, [r3, #0]
 801e9da:	68fb      	ldr	r3, [r7, #12]
 801e9dc:	681b      	ldr	r3, [r3, #0]
 801e9de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801e9e2:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801e9e4:	68fb      	ldr	r3, [r7, #12]
 801e9e6:	681b      	ldr	r3, [r3, #0]
 801e9e8:	681a      	ldr	r2, [r3, #0]
 801e9ea:	68fb      	ldr	r3, [r7, #12]
 801e9ec:	681b      	ldr	r3, [r3, #0]
 801e9ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e9f2:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 801e9f4:	2300      	movs	r3, #0
 801e9f6:	e000      	b.n	801e9fa <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 801e9f8:	2302      	movs	r3, #2
  }
}
 801e9fa:	4618      	mov	r0, r3
 801e9fc:	3718      	adds	r7, #24
 801e9fe:	46bd      	mov	sp, r7
 801ea00:	bd80      	pop	{r7, pc}
 801ea02:	bf00      	nop
 801ea04:	20000020 	.word	0x20000020
 801ea08:	14f8b589 	.word	0x14f8b589
 801ea0c:	ffff0000 	.word	0xffff0000
 801ea10:	08020a81 	.word	0x08020a81
 801ea14:	08020c2b 	.word	0x08020c2b

0801ea18 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801ea18:	b580      	push	{r7, lr}
 801ea1a:	b08a      	sub	sp, #40	; 0x28
 801ea1c:	af02      	add	r7, sp, #8
 801ea1e:	60f8      	str	r0, [r7, #12]
 801ea20:	4608      	mov	r0, r1
 801ea22:	4611      	mov	r1, r2
 801ea24:	461a      	mov	r2, r3
 801ea26:	4603      	mov	r3, r0
 801ea28:	817b      	strh	r3, [r7, #10]
 801ea2a:	460b      	mov	r3, r1
 801ea2c:	813b      	strh	r3, [r7, #8]
 801ea2e:	4613      	mov	r3, r2
 801ea30:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 801ea32:	2300      	movs	r3, #0
 801ea34:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801ea36:	f7fe f843 	bl	801cac0 <HAL_GetTick>
 801ea3a:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801ea3c:	68fb      	ldr	r3, [r7, #12]
 801ea3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ea42:	b2db      	uxtb	r3, r3
 801ea44:	2b20      	cmp	r3, #32
 801ea46:	f040 8145 	bne.w	801ecd4 <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801ea4a:	4b9d      	ldr	r3, [pc, #628]	; (801ecc0 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 801ea4c:	681b      	ldr	r3, [r3, #0]
 801ea4e:	08db      	lsrs	r3, r3, #3
 801ea50:	4a9c      	ldr	r2, [pc, #624]	; (801ecc4 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 801ea52:	fba2 2303 	umull	r2, r3, r2, r3
 801ea56:	0a1a      	lsrs	r2, r3, #8
 801ea58:	4613      	mov	r3, r2
 801ea5a:	009b      	lsls	r3, r3, #2
 801ea5c:	4413      	add	r3, r2
 801ea5e:	009a      	lsls	r2, r3, #2
 801ea60:	4413      	add	r3, r2
 801ea62:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 801ea64:	697b      	ldr	r3, [r7, #20]
 801ea66:	3b01      	subs	r3, #1
 801ea68:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801ea6a:	697b      	ldr	r3, [r7, #20]
 801ea6c:	2b00      	cmp	r3, #0
 801ea6e:	d116      	bne.n	801ea9e <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801ea70:	68fb      	ldr	r3, [r7, #12]
 801ea72:	2200      	movs	r2, #0
 801ea74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801ea76:	68fb      	ldr	r3, [r7, #12]
 801ea78:	2220      	movs	r2, #32
 801ea7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801ea7e:	68fb      	ldr	r3, [r7, #12]
 801ea80:	2200      	movs	r2, #0
 801ea82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801ea86:	68fb      	ldr	r3, [r7, #12]
 801ea88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ea8a:	f043 0220 	orr.w	r2, r3, #32
 801ea8e:	68fb      	ldr	r3, [r7, #12]
 801ea90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ea92:	68fb      	ldr	r3, [r7, #12]
 801ea94:	2200      	movs	r2, #0
 801ea96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801ea9a:	2301      	movs	r3, #1
 801ea9c:	e11b      	b.n	801ecd6 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801ea9e:	68fb      	ldr	r3, [r7, #12]
 801eaa0:	681b      	ldr	r3, [r3, #0]
 801eaa2:	699b      	ldr	r3, [r3, #24]
 801eaa4:	f003 0302 	and.w	r3, r3, #2
 801eaa8:	2b02      	cmp	r3, #2
 801eaaa:	d0db      	beq.n	801ea64 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801eaac:	68fb      	ldr	r3, [r7, #12]
 801eaae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801eab2:	2b01      	cmp	r3, #1
 801eab4:	d101      	bne.n	801eaba <HAL_I2C_Mem_Write_DMA+0xa2>
 801eab6:	2302      	movs	r3, #2
 801eab8:	e10d      	b.n	801ecd6 <HAL_I2C_Mem_Write_DMA+0x2be>
 801eaba:	68fb      	ldr	r3, [r7, #12]
 801eabc:	2201      	movs	r2, #1
 801eabe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801eac2:	68fb      	ldr	r3, [r7, #12]
 801eac4:	681b      	ldr	r3, [r3, #0]
 801eac6:	681b      	ldr	r3, [r3, #0]
 801eac8:	f003 0301 	and.w	r3, r3, #1
 801eacc:	2b01      	cmp	r3, #1
 801eace:	d007      	beq.n	801eae0 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801ead0:	68fb      	ldr	r3, [r7, #12]
 801ead2:	681b      	ldr	r3, [r3, #0]
 801ead4:	681a      	ldr	r2, [r3, #0]
 801ead6:	68fb      	ldr	r3, [r7, #12]
 801ead8:	681b      	ldr	r3, [r3, #0]
 801eada:	f042 0201 	orr.w	r2, r2, #1
 801eade:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801eae0:	68fb      	ldr	r3, [r7, #12]
 801eae2:	681b      	ldr	r3, [r3, #0]
 801eae4:	681a      	ldr	r2, [r3, #0]
 801eae6:	68fb      	ldr	r3, [r7, #12]
 801eae8:	681b      	ldr	r3, [r3, #0]
 801eaea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801eaee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801eaf0:	68fb      	ldr	r3, [r7, #12]
 801eaf2:	2221      	movs	r2, #33	; 0x21
 801eaf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801eaf8:	68fb      	ldr	r3, [r7, #12]
 801eafa:	2240      	movs	r2, #64	; 0x40
 801eafc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801eb00:	68fb      	ldr	r3, [r7, #12]
 801eb02:	2200      	movs	r2, #0
 801eb04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801eb06:	68fb      	ldr	r3, [r7, #12]
 801eb08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801eb0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801eb0c:	68fb      	ldr	r3, [r7, #12]
 801eb0e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801eb10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801eb12:	68fb      	ldr	r3, [r7, #12]
 801eb14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eb16:	b29a      	uxth	r2, r3
 801eb18:	68fb      	ldr	r3, [r7, #12]
 801eb1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801eb1c:	68fb      	ldr	r3, [r7, #12]
 801eb1e:	4a6a      	ldr	r2, [pc, #424]	; (801ecc8 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 801eb20:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801eb22:	897a      	ldrh	r2, [r7, #10]
 801eb24:	68fb      	ldr	r3, [r7, #12]
 801eb26:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 801eb28:	893a      	ldrh	r2, [r7, #8]
 801eb2a:	68fb      	ldr	r3, [r7, #12]
 801eb2c:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 801eb2e:	88fa      	ldrh	r2, [r7, #6]
 801eb30:	68fb      	ldr	r3, [r7, #12]
 801eb32:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 801eb34:	68fb      	ldr	r3, [r7, #12]
 801eb36:	2200      	movs	r2, #0
 801eb38:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 801eb3a:	68fb      	ldr	r3, [r7, #12]
 801eb3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801eb3e:	2b00      	cmp	r3, #0
 801eb40:	f000 80a9 	beq.w	801ec96 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 801eb44:	68fb      	ldr	r3, [r7, #12]
 801eb46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eb48:	2b00      	cmp	r3, #0
 801eb4a:	d02a      	beq.n	801eba2 <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 801eb4c:	68fb      	ldr	r3, [r7, #12]
 801eb4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eb50:	4a5e      	ldr	r2, [pc, #376]	; (801eccc <HAL_I2C_Mem_Write_DMA+0x2b4>)
 801eb52:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801eb54:	68fb      	ldr	r3, [r7, #12]
 801eb56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eb58:	4a5d      	ldr	r2, [pc, #372]	; (801ecd0 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 801eb5a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801eb5c:	68fb      	ldr	r3, [r7, #12]
 801eb5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eb60:	2200      	movs	r2, #0
 801eb62:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 801eb64:	68fb      	ldr	r3, [r7, #12]
 801eb66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eb68:	2200      	movs	r2, #0
 801eb6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 801eb6c:	68fb      	ldr	r3, [r7, #12]
 801eb6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eb70:	2200      	movs	r2, #0
 801eb72:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 801eb74:	68fb      	ldr	r3, [r7, #12]
 801eb76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eb78:	2200      	movs	r2, #0
 801eb7a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 801eb7c:	68fb      	ldr	r3, [r7, #12]
 801eb7e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801eb80:	68fb      	ldr	r3, [r7, #12]
 801eb82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb84:	4619      	mov	r1, r3
 801eb86:	68fb      	ldr	r3, [r7, #12]
 801eb88:	681b      	ldr	r3, [r3, #0]
 801eb8a:	3310      	adds	r3, #16
 801eb8c:	461a      	mov	r2, r3
 801eb8e:	68fb      	ldr	r3, [r7, #12]
 801eb90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801eb92:	f7fe fd95 	bl	801d6c0 <HAL_DMA_Start_IT>
 801eb96:	4603      	mov	r3, r0
 801eb98:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801eb9a:	7efb      	ldrb	r3, [r7, #27]
 801eb9c:	2b00      	cmp	r3, #0
 801eb9e:	d166      	bne.n	801ec6e <HAL_I2C_Mem_Write_DMA+0x256>
 801eba0:	e013      	b.n	801ebca <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 801eba2:	68fb      	ldr	r3, [r7, #12]
 801eba4:	2220      	movs	r2, #32
 801eba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801ebaa:	68fb      	ldr	r3, [r7, #12]
 801ebac:	2200      	movs	r2, #0
 801ebae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801ebb2:	68fb      	ldr	r3, [r7, #12]
 801ebb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ebb6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801ebba:	68fb      	ldr	r3, [r7, #12]
 801ebbc:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801ebbe:	68fb      	ldr	r3, [r7, #12]
 801ebc0:	2200      	movs	r2, #0
 801ebc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801ebc6:	2301      	movs	r3, #1
 801ebc8:	e085      	b.n	801ecd6 <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801ebca:	88f8      	ldrh	r0, [r7, #6]
 801ebcc:	893a      	ldrh	r2, [r7, #8]
 801ebce:	8979      	ldrh	r1, [r7, #10]
 801ebd0:	69fb      	ldr	r3, [r7, #28]
 801ebd2:	9301      	str	r3, [sp, #4]
 801ebd4:	2323      	movs	r3, #35	; 0x23
 801ebd6:	9300      	str	r3, [sp, #0]
 801ebd8:	4603      	mov	r3, r0
 801ebda:	68f8      	ldr	r0, [r7, #12]
 801ebdc:	f001 fdd2 	bl	8020784 <I2C_RequestMemoryWrite>
 801ebe0:	4603      	mov	r3, r0
 801ebe2:	2b00      	cmp	r3, #0
 801ebe4:	d022      	beq.n	801ec2c <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 801ebe6:	68fb      	ldr	r3, [r7, #12]
 801ebe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ebea:	4618      	mov	r0, r3
 801ebec:	f7fe fe30 	bl	801d850 <HAL_DMA_Abort_IT>
 801ebf0:	4603      	mov	r3, r0
 801ebf2:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 801ebf4:	68fb      	ldr	r3, [r7, #12]
 801ebf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ebf8:	2200      	movs	r2, #0
 801ebfa:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ebfc:	68fb      	ldr	r3, [r7, #12]
 801ebfe:	681b      	ldr	r3, [r3, #0]
 801ec00:	681a      	ldr	r2, [r3, #0]
 801ec02:	68fb      	ldr	r3, [r7, #12]
 801ec04:	681b      	ldr	r3, [r3, #0]
 801ec06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ec0a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 801ec0c:	68fb      	ldr	r3, [r7, #12]
 801ec0e:	2200      	movs	r2, #0
 801ec10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 801ec12:	68fb      	ldr	r3, [r7, #12]
 801ec14:	2200      	movs	r2, #0
 801ec16:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 801ec18:	68fb      	ldr	r3, [r7, #12]
 801ec1a:	681b      	ldr	r3, [r3, #0]
 801ec1c:	681a      	ldr	r2, [r3, #0]
 801ec1e:	68fb      	ldr	r3, [r7, #12]
 801ec20:	681b      	ldr	r3, [r3, #0]
 801ec22:	f022 0201 	bic.w	r2, r2, #1
 801ec26:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 801ec28:	2301      	movs	r3, #1
 801ec2a:	e054      	b.n	801ecd6 <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ec2c:	2300      	movs	r3, #0
 801ec2e:	613b      	str	r3, [r7, #16]
 801ec30:	68fb      	ldr	r3, [r7, #12]
 801ec32:	681b      	ldr	r3, [r3, #0]
 801ec34:	695b      	ldr	r3, [r3, #20]
 801ec36:	613b      	str	r3, [r7, #16]
 801ec38:	68fb      	ldr	r3, [r7, #12]
 801ec3a:	681b      	ldr	r3, [r3, #0]
 801ec3c:	699b      	ldr	r3, [r3, #24]
 801ec3e:	613b      	str	r3, [r7, #16]
 801ec40:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ec42:	68fb      	ldr	r3, [r7, #12]
 801ec44:	2200      	movs	r2, #0
 801ec46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 801ec4a:	68fb      	ldr	r3, [r7, #12]
 801ec4c:	681b      	ldr	r3, [r3, #0]
 801ec4e:	685a      	ldr	r2, [r3, #4]
 801ec50:	68fb      	ldr	r3, [r7, #12]
 801ec52:	681b      	ldr	r3, [r3, #0]
 801ec54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ec58:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801ec5a:	68fb      	ldr	r3, [r7, #12]
 801ec5c:	681b      	ldr	r3, [r3, #0]
 801ec5e:	685a      	ldr	r2, [r3, #4]
 801ec60:	68fb      	ldr	r3, [r7, #12]
 801ec62:	681b      	ldr	r3, [r3, #0]
 801ec64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801ec68:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 801ec6a:	2300      	movs	r3, #0
 801ec6c:	e033      	b.n	801ecd6 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801ec6e:	68fb      	ldr	r3, [r7, #12]
 801ec70:	2220      	movs	r2, #32
 801ec72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801ec76:	68fb      	ldr	r3, [r7, #12]
 801ec78:	2200      	movs	r2, #0
 801ec7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801ec7e:	68fb      	ldr	r3, [r7, #12]
 801ec80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ec82:	f043 0210 	orr.w	r2, r3, #16
 801ec86:	68fb      	ldr	r3, [r7, #12]
 801ec88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ec8a:	68fb      	ldr	r3, [r7, #12]
 801ec8c:	2200      	movs	r2, #0
 801ec8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801ec92:	2301      	movs	r3, #1
 801ec94:	e01f      	b.n	801ecd6 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 801ec96:	68fb      	ldr	r3, [r7, #12]
 801ec98:	2220      	movs	r2, #32
 801ec9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 801ec9e:	68fb      	ldr	r3, [r7, #12]
 801eca0:	2200      	movs	r2, #0
 801eca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 801eca6:	68fb      	ldr	r3, [r7, #12]
 801eca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ecaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801ecae:	68fb      	ldr	r3, [r7, #12]
 801ecb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801ecb2:	68fb      	ldr	r3, [r7, #12]
 801ecb4:	2200      	movs	r2, #0
 801ecb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801ecba:	2301      	movs	r3, #1
 801ecbc:	e00b      	b.n	801ecd6 <HAL_I2C_Mem_Write_DMA+0x2be>
 801ecbe:	bf00      	nop
 801ecc0:	20000020 	.word	0x20000020
 801ecc4:	14f8b589 	.word	0x14f8b589
 801ecc8:	ffff0000 	.word	0xffff0000
 801eccc:	08020a81 	.word	0x08020a81
 801ecd0:	08020c2b 	.word	0x08020c2b
    }
  }
  else
  {
    return HAL_BUSY;
 801ecd4:	2302      	movs	r3, #2
  }
}
 801ecd6:	4618      	mov	r0, r3
 801ecd8:	3720      	adds	r7, #32
 801ecda:	46bd      	mov	sp, r7
 801ecdc:	bd80      	pop	{r7, pc}
 801ecde:	bf00      	nop

0801ece0 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801ece0:	b580      	push	{r7, lr}
 801ece2:	b08c      	sub	sp, #48	; 0x30
 801ece4:	af02      	add	r7, sp, #8
 801ece6:	60f8      	str	r0, [r7, #12]
 801ece8:	4608      	mov	r0, r1
 801ecea:	4611      	mov	r1, r2
 801ecec:	461a      	mov	r2, r3
 801ecee:	4603      	mov	r3, r0
 801ecf0:	817b      	strh	r3, [r7, #10]
 801ecf2:	460b      	mov	r3, r1
 801ecf4:	813b      	strh	r3, [r7, #8]
 801ecf6:	4613      	mov	r3, r2
 801ecf8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801ecfa:	f7fd fee1 	bl	801cac0 <HAL_GetTick>
 801ecfe:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 801ed00:	2300      	movs	r3, #0
 801ed02:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801ed04:	68fb      	ldr	r3, [r7, #12]
 801ed06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ed0a:	b2db      	uxtb	r3, r3
 801ed0c:	2b20      	cmp	r3, #32
 801ed0e:	f040 8176 	bne.w	801effe <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801ed12:	4b95      	ldr	r3, [pc, #596]	; (801ef68 <HAL_I2C_Mem_Read_DMA+0x288>)
 801ed14:	681b      	ldr	r3, [r3, #0]
 801ed16:	08db      	lsrs	r3, r3, #3
 801ed18:	4a94      	ldr	r2, [pc, #592]	; (801ef6c <HAL_I2C_Mem_Read_DMA+0x28c>)
 801ed1a:	fba2 2303 	umull	r2, r3, r2, r3
 801ed1e:	0a1a      	lsrs	r2, r3, #8
 801ed20:	4613      	mov	r3, r2
 801ed22:	009b      	lsls	r3, r3, #2
 801ed24:	4413      	add	r3, r2
 801ed26:	009a      	lsls	r2, r3, #2
 801ed28:	4413      	add	r3, r2
 801ed2a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 801ed2c:	69fb      	ldr	r3, [r7, #28]
 801ed2e:	3b01      	subs	r3, #1
 801ed30:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 801ed32:	69fb      	ldr	r3, [r7, #28]
 801ed34:	2b00      	cmp	r3, #0
 801ed36:	d116      	bne.n	801ed66 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801ed38:	68fb      	ldr	r3, [r7, #12]
 801ed3a:	2200      	movs	r2, #0
 801ed3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801ed3e:	68fb      	ldr	r3, [r7, #12]
 801ed40:	2220      	movs	r2, #32
 801ed42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801ed46:	68fb      	ldr	r3, [r7, #12]
 801ed48:	2200      	movs	r2, #0
 801ed4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801ed4e:	68fb      	ldr	r3, [r7, #12]
 801ed50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ed52:	f043 0220 	orr.w	r2, r3, #32
 801ed56:	68fb      	ldr	r3, [r7, #12]
 801ed58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ed5a:	68fb      	ldr	r3, [r7, #12]
 801ed5c:	2200      	movs	r2, #0
 801ed5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801ed62:	2301      	movs	r3, #1
 801ed64:	e14c      	b.n	801f000 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801ed66:	68fb      	ldr	r3, [r7, #12]
 801ed68:	681b      	ldr	r3, [r3, #0]
 801ed6a:	699b      	ldr	r3, [r3, #24]
 801ed6c:	f003 0302 	and.w	r3, r3, #2
 801ed70:	2b02      	cmp	r3, #2
 801ed72:	d0db      	beq.n	801ed2c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801ed74:	68fb      	ldr	r3, [r7, #12]
 801ed76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ed7a:	2b01      	cmp	r3, #1
 801ed7c:	d101      	bne.n	801ed82 <HAL_I2C_Mem_Read_DMA+0xa2>
 801ed7e:	2302      	movs	r3, #2
 801ed80:	e13e      	b.n	801f000 <HAL_I2C_Mem_Read_DMA+0x320>
 801ed82:	68fb      	ldr	r3, [r7, #12]
 801ed84:	2201      	movs	r2, #1
 801ed86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801ed8a:	68fb      	ldr	r3, [r7, #12]
 801ed8c:	681b      	ldr	r3, [r3, #0]
 801ed8e:	681b      	ldr	r3, [r3, #0]
 801ed90:	f003 0301 	and.w	r3, r3, #1
 801ed94:	2b01      	cmp	r3, #1
 801ed96:	d007      	beq.n	801eda8 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801ed98:	68fb      	ldr	r3, [r7, #12]
 801ed9a:	681b      	ldr	r3, [r3, #0]
 801ed9c:	681a      	ldr	r2, [r3, #0]
 801ed9e:	68fb      	ldr	r3, [r7, #12]
 801eda0:	681b      	ldr	r3, [r3, #0]
 801eda2:	f042 0201 	orr.w	r2, r2, #1
 801eda6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801eda8:	68fb      	ldr	r3, [r7, #12]
 801edaa:	681b      	ldr	r3, [r3, #0]
 801edac:	681a      	ldr	r2, [r3, #0]
 801edae:	68fb      	ldr	r3, [r7, #12]
 801edb0:	681b      	ldr	r3, [r3, #0]
 801edb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801edb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801edb8:	68fb      	ldr	r3, [r7, #12]
 801edba:	2222      	movs	r2, #34	; 0x22
 801edbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801edc0:	68fb      	ldr	r3, [r7, #12]
 801edc2:	2240      	movs	r2, #64	; 0x40
 801edc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801edc8:	68fb      	ldr	r3, [r7, #12]
 801edca:	2200      	movs	r2, #0
 801edcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801edce:	68fb      	ldr	r3, [r7, #12]
 801edd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801edd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801edd4:	68fb      	ldr	r3, [r7, #12]
 801edd6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801edd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801edda:	68fb      	ldr	r3, [r7, #12]
 801eddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801edde:	b29a      	uxth	r2, r3
 801ede0:	68fb      	ldr	r3, [r7, #12]
 801ede2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801ede4:	68fb      	ldr	r3, [r7, #12]
 801ede6:	4a62      	ldr	r2, [pc, #392]	; (801ef70 <HAL_I2C_Mem_Read_DMA+0x290>)
 801ede8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801edea:	897a      	ldrh	r2, [r7, #10]
 801edec:	68fb      	ldr	r3, [r7, #12]
 801edee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 801edf0:	893a      	ldrh	r2, [r7, #8]
 801edf2:	68fb      	ldr	r3, [r7, #12]
 801edf4:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 801edf6:	88fa      	ldrh	r2, [r7, #6]
 801edf8:	68fb      	ldr	r3, [r7, #12]
 801edfa:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 801edfc:	68fb      	ldr	r3, [r7, #12]
 801edfe:	2200      	movs	r2, #0
 801ee00:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 801ee02:	68fb      	ldr	r3, [r7, #12]
 801ee04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ee06:	2b00      	cmp	r3, #0
 801ee08:	f000 80cc 	beq.w	801efa4 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 801ee0c:	68fb      	ldr	r3, [r7, #12]
 801ee0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ee10:	2b00      	cmp	r3, #0
 801ee12:	d02d      	beq.n	801ee70 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 801ee14:	68fb      	ldr	r3, [r7, #12]
 801ee16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ee18:	4a56      	ldr	r2, [pc, #344]	; (801ef74 <HAL_I2C_Mem_Read_DMA+0x294>)
 801ee1a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801ee1c:	68fb      	ldr	r3, [r7, #12]
 801ee1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ee20:	4a55      	ldr	r2, [pc, #340]	; (801ef78 <HAL_I2C_Mem_Read_DMA+0x298>)
 801ee22:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801ee24:	68fb      	ldr	r3, [r7, #12]
 801ee26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ee28:	2200      	movs	r2, #0
 801ee2a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 801ee2c:	68fb      	ldr	r3, [r7, #12]
 801ee2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ee30:	2200      	movs	r2, #0
 801ee32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 801ee34:	68fb      	ldr	r3, [r7, #12]
 801ee36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ee38:	2200      	movs	r2, #0
 801ee3a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 801ee3c:	68fb      	ldr	r3, [r7, #12]
 801ee3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ee40:	2200      	movs	r2, #0
 801ee42:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 801ee44:	68fb      	ldr	r3, [r7, #12]
 801ee46:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801ee48:	68fb      	ldr	r3, [r7, #12]
 801ee4a:	681b      	ldr	r3, [r3, #0]
 801ee4c:	3310      	adds	r3, #16
 801ee4e:	4619      	mov	r1, r3
 801ee50:	68fb      	ldr	r3, [r7, #12]
 801ee52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee54:	461a      	mov	r2, r3
 801ee56:	68fb      	ldr	r3, [r7, #12]
 801ee58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ee5a:	f7fe fc31 	bl	801d6c0 <HAL_DMA_Start_IT>
 801ee5e:	4603      	mov	r3, r0
 801ee60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801ee64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ee68:	2b00      	cmp	r3, #0
 801ee6a:	f040 8087 	bne.w	801ef7c <HAL_I2C_Mem_Read_DMA+0x29c>
 801ee6e:	e013      	b.n	801ee98 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 801ee70:	68fb      	ldr	r3, [r7, #12]
 801ee72:	2220      	movs	r2, #32
 801ee74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801ee78:	68fb      	ldr	r3, [r7, #12]
 801ee7a:	2200      	movs	r2, #0
 801ee7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801ee80:	68fb      	ldr	r3, [r7, #12]
 801ee82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ee84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801ee88:	68fb      	ldr	r3, [r7, #12]
 801ee8a:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801ee8c:	68fb      	ldr	r3, [r7, #12]
 801ee8e:	2200      	movs	r2, #0
 801ee90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801ee94:	2301      	movs	r3, #1
 801ee96:	e0b3      	b.n	801f000 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801ee98:	88f8      	ldrh	r0, [r7, #6]
 801ee9a:	893a      	ldrh	r2, [r7, #8]
 801ee9c:	8979      	ldrh	r1, [r7, #10]
 801ee9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eea0:	9301      	str	r3, [sp, #4]
 801eea2:	2323      	movs	r3, #35	; 0x23
 801eea4:	9300      	str	r3, [sp, #0]
 801eea6:	4603      	mov	r3, r0
 801eea8:	68f8      	ldr	r0, [r7, #12]
 801eeaa:	f001 fd01 	bl	80208b0 <I2C_RequestMemoryRead>
 801eeae:	4603      	mov	r3, r0
 801eeb0:	2b00      	cmp	r3, #0
 801eeb2:	d023      	beq.n	801eefc <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 801eeb4:	68fb      	ldr	r3, [r7, #12]
 801eeb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eeb8:	4618      	mov	r0, r3
 801eeba:	f7fe fcc9 	bl	801d850 <HAL_DMA_Abort_IT>
 801eebe:	4603      	mov	r3, r0
 801eec0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 801eec4:	68fb      	ldr	r3, [r7, #12]
 801eec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eec8:	2200      	movs	r2, #0
 801eeca:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801eecc:	68fb      	ldr	r3, [r7, #12]
 801eece:	681b      	ldr	r3, [r3, #0]
 801eed0:	681a      	ldr	r2, [r3, #0]
 801eed2:	68fb      	ldr	r3, [r7, #12]
 801eed4:	681b      	ldr	r3, [r3, #0]
 801eed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801eeda:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 801eedc:	68fb      	ldr	r3, [r7, #12]
 801eede:	2200      	movs	r2, #0
 801eee0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 801eee2:	68fb      	ldr	r3, [r7, #12]
 801eee4:	2200      	movs	r2, #0
 801eee6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 801eee8:	68fb      	ldr	r3, [r7, #12]
 801eeea:	681b      	ldr	r3, [r3, #0]
 801eeec:	681a      	ldr	r2, [r3, #0]
 801eeee:	68fb      	ldr	r3, [r7, #12]
 801eef0:	681b      	ldr	r3, [r3, #0]
 801eef2:	f022 0201 	bic.w	r2, r2, #1
 801eef6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 801eef8:	2301      	movs	r3, #1
 801eefa:	e081      	b.n	801f000 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 801eefc:	68fb      	ldr	r3, [r7, #12]
 801eefe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ef00:	2b01      	cmp	r3, #1
 801ef02:	d108      	bne.n	801ef16 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ef04:	68fb      	ldr	r3, [r7, #12]
 801ef06:	681b      	ldr	r3, [r3, #0]
 801ef08:	681a      	ldr	r2, [r3, #0]
 801ef0a:	68fb      	ldr	r3, [r7, #12]
 801ef0c:	681b      	ldr	r3, [r3, #0]
 801ef0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ef12:	601a      	str	r2, [r3, #0]
 801ef14:	e007      	b.n	801ef26 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801ef16:	68fb      	ldr	r3, [r7, #12]
 801ef18:	681b      	ldr	r3, [r3, #0]
 801ef1a:	685a      	ldr	r2, [r3, #4]
 801ef1c:	68fb      	ldr	r3, [r7, #12]
 801ef1e:	681b      	ldr	r3, [r3, #0]
 801ef20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801ef24:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ef26:	2300      	movs	r3, #0
 801ef28:	61bb      	str	r3, [r7, #24]
 801ef2a:	68fb      	ldr	r3, [r7, #12]
 801ef2c:	681b      	ldr	r3, [r3, #0]
 801ef2e:	695b      	ldr	r3, [r3, #20]
 801ef30:	61bb      	str	r3, [r7, #24]
 801ef32:	68fb      	ldr	r3, [r7, #12]
 801ef34:	681b      	ldr	r3, [r3, #0]
 801ef36:	699b      	ldr	r3, [r3, #24]
 801ef38:	61bb      	str	r3, [r7, #24]
 801ef3a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ef3c:	68fb      	ldr	r3, [r7, #12]
 801ef3e:	2200      	movs	r2, #0
 801ef40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 801ef44:	68fb      	ldr	r3, [r7, #12]
 801ef46:	681b      	ldr	r3, [r3, #0]
 801ef48:	685a      	ldr	r2, [r3, #4]
 801ef4a:	68fb      	ldr	r3, [r7, #12]
 801ef4c:	681b      	ldr	r3, [r3, #0]
 801ef4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ef52:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 801ef54:	68fb      	ldr	r3, [r7, #12]
 801ef56:	681b      	ldr	r3, [r3, #0]
 801ef58:	685a      	ldr	r2, [r3, #4]
 801ef5a:	68fb      	ldr	r3, [r7, #12]
 801ef5c:	681b      	ldr	r3, [r3, #0]
 801ef5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801ef62:	605a      	str	r2, [r3, #4]
 801ef64:	e049      	b.n	801effa <HAL_I2C_Mem_Read_DMA+0x31a>
 801ef66:	bf00      	nop
 801ef68:	20000020 	.word	0x20000020
 801ef6c:	14f8b589 	.word	0x14f8b589
 801ef70:	ffff0000 	.word	0xffff0000
 801ef74:	08020a81 	.word	0x08020a81
 801ef78:	08020c2b 	.word	0x08020c2b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801ef7c:	68fb      	ldr	r3, [r7, #12]
 801ef7e:	2220      	movs	r2, #32
 801ef80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801ef84:	68fb      	ldr	r3, [r7, #12]
 801ef86:	2200      	movs	r2, #0
 801ef88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801ef8c:	68fb      	ldr	r3, [r7, #12]
 801ef8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ef90:	f043 0210 	orr.w	r2, r3, #16
 801ef94:	68fb      	ldr	r3, [r7, #12]
 801ef96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ef98:	68fb      	ldr	r3, [r7, #12]
 801ef9a:	2200      	movs	r2, #0
 801ef9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801efa0:	2301      	movs	r3, #1
 801efa2:	e02d      	b.n	801f000 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801efa4:	88f8      	ldrh	r0, [r7, #6]
 801efa6:	893a      	ldrh	r2, [r7, #8]
 801efa8:	8979      	ldrh	r1, [r7, #10]
 801efaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801efac:	9301      	str	r3, [sp, #4]
 801efae:	2323      	movs	r3, #35	; 0x23
 801efb0:	9300      	str	r3, [sp, #0]
 801efb2:	4603      	mov	r3, r0
 801efb4:	68f8      	ldr	r0, [r7, #12]
 801efb6:	f001 fc7b 	bl	80208b0 <I2C_RequestMemoryRead>
 801efba:	4603      	mov	r3, r0
 801efbc:	2b00      	cmp	r3, #0
 801efbe:	d001      	beq.n	801efc4 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 801efc0:	2301      	movs	r3, #1
 801efc2:	e01d      	b.n	801f000 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801efc4:	2300      	movs	r3, #0
 801efc6:	617b      	str	r3, [r7, #20]
 801efc8:	68fb      	ldr	r3, [r7, #12]
 801efca:	681b      	ldr	r3, [r3, #0]
 801efcc:	695b      	ldr	r3, [r3, #20]
 801efce:	617b      	str	r3, [r7, #20]
 801efd0:	68fb      	ldr	r3, [r7, #12]
 801efd2:	681b      	ldr	r3, [r3, #0]
 801efd4:	699b      	ldr	r3, [r3, #24]
 801efd6:	617b      	str	r3, [r7, #20]
 801efd8:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801efda:	68fb      	ldr	r3, [r7, #12]
 801efdc:	681b      	ldr	r3, [r3, #0]
 801efde:	681a      	ldr	r2, [r3, #0]
 801efe0:	68fb      	ldr	r3, [r7, #12]
 801efe2:	681b      	ldr	r3, [r3, #0]
 801efe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801efe8:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 801efea:	68fb      	ldr	r3, [r7, #12]
 801efec:	2220      	movs	r2, #32
 801efee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801eff2:	68fb      	ldr	r3, [r7, #12]
 801eff4:	2200      	movs	r2, #0
 801eff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 801effa:	2300      	movs	r3, #0
 801effc:	e000      	b.n	801f000 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 801effe:	2302      	movs	r3, #2
  }
}
 801f000:	4618      	mov	r0, r3
 801f002:	3728      	adds	r7, #40	; 0x28
 801f004:	46bd      	mov	sp, r7
 801f006:	bd80      	pop	{r7, pc}

0801f008 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801f008:	b580      	push	{r7, lr}
 801f00a:	b088      	sub	sp, #32
 801f00c:	af00      	add	r7, sp, #0
 801f00e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 801f010:	2300      	movs	r3, #0
 801f012:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 801f014:	687b      	ldr	r3, [r7, #4]
 801f016:	681b      	ldr	r3, [r3, #0]
 801f018:	685b      	ldr	r3, [r3, #4]
 801f01a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801f01c:	687b      	ldr	r3, [r7, #4]
 801f01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f020:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801f022:	687b      	ldr	r3, [r7, #4]
 801f024:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f028:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f02a:	687b      	ldr	r3, [r7, #4]
 801f02c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f030:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801f032:	7bfb      	ldrb	r3, [r7, #15]
 801f034:	2b10      	cmp	r3, #16
 801f036:	d003      	beq.n	801f040 <HAL_I2C_EV_IRQHandler+0x38>
 801f038:	7bfb      	ldrb	r3, [r7, #15]
 801f03a:	2b40      	cmp	r3, #64	; 0x40
 801f03c:	f040 80c1 	bne.w	801f1c2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801f040:	687b      	ldr	r3, [r7, #4]
 801f042:	681b      	ldr	r3, [r3, #0]
 801f044:	699b      	ldr	r3, [r3, #24]
 801f046:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801f048:	687b      	ldr	r3, [r7, #4]
 801f04a:	681b      	ldr	r3, [r3, #0]
 801f04c:	695b      	ldr	r3, [r3, #20]
 801f04e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 801f050:	69fb      	ldr	r3, [r7, #28]
 801f052:	f003 0301 	and.w	r3, r3, #1
 801f056:	2b00      	cmp	r3, #0
 801f058:	d10d      	bne.n	801f076 <HAL_I2C_EV_IRQHandler+0x6e>
 801f05a:	693b      	ldr	r3, [r7, #16]
 801f05c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801f060:	d003      	beq.n	801f06a <HAL_I2C_EV_IRQHandler+0x62>
 801f062:	693b      	ldr	r3, [r7, #16]
 801f064:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801f068:	d101      	bne.n	801f06e <HAL_I2C_EV_IRQHandler+0x66>
 801f06a:	2301      	movs	r3, #1
 801f06c:	e000      	b.n	801f070 <HAL_I2C_EV_IRQHandler+0x68>
 801f06e:	2300      	movs	r3, #0
 801f070:	2b01      	cmp	r3, #1
 801f072:	f000 8132 	beq.w	801f2da <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801f076:	69fb      	ldr	r3, [r7, #28]
 801f078:	f003 0301 	and.w	r3, r3, #1
 801f07c:	2b00      	cmp	r3, #0
 801f07e:	d00c      	beq.n	801f09a <HAL_I2C_EV_IRQHandler+0x92>
 801f080:	697b      	ldr	r3, [r7, #20]
 801f082:	0a5b      	lsrs	r3, r3, #9
 801f084:	f003 0301 	and.w	r3, r3, #1
 801f088:	2b00      	cmp	r3, #0
 801f08a:	d006      	beq.n	801f09a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 801f08c:	6878      	ldr	r0, [r7, #4]
 801f08e:	f002 f82a 	bl	80210e6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 801f092:	6878      	ldr	r0, [r7, #4]
 801f094:	f000 fd5b 	bl	801fb4e <I2C_Master_SB>
 801f098:	e092      	b.n	801f1c0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801f09a:	69fb      	ldr	r3, [r7, #28]
 801f09c:	08db      	lsrs	r3, r3, #3
 801f09e:	f003 0301 	and.w	r3, r3, #1
 801f0a2:	2b00      	cmp	r3, #0
 801f0a4:	d009      	beq.n	801f0ba <HAL_I2C_EV_IRQHandler+0xb2>
 801f0a6:	697b      	ldr	r3, [r7, #20]
 801f0a8:	0a5b      	lsrs	r3, r3, #9
 801f0aa:	f003 0301 	and.w	r3, r3, #1
 801f0ae:	2b00      	cmp	r3, #0
 801f0b0:	d003      	beq.n	801f0ba <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 801f0b2:	6878      	ldr	r0, [r7, #4]
 801f0b4:	f000 fdd1 	bl	801fc5a <I2C_Master_ADD10>
 801f0b8:	e082      	b.n	801f1c0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801f0ba:	69fb      	ldr	r3, [r7, #28]
 801f0bc:	085b      	lsrs	r3, r3, #1
 801f0be:	f003 0301 	and.w	r3, r3, #1
 801f0c2:	2b00      	cmp	r3, #0
 801f0c4:	d009      	beq.n	801f0da <HAL_I2C_EV_IRQHandler+0xd2>
 801f0c6:	697b      	ldr	r3, [r7, #20]
 801f0c8:	0a5b      	lsrs	r3, r3, #9
 801f0ca:	f003 0301 	and.w	r3, r3, #1
 801f0ce:	2b00      	cmp	r3, #0
 801f0d0:	d003      	beq.n	801f0da <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 801f0d2:	6878      	ldr	r0, [r7, #4]
 801f0d4:	f000 fdeb 	bl	801fcae <I2C_Master_ADDR>
 801f0d8:	e072      	b.n	801f1c0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 801f0da:	69bb      	ldr	r3, [r7, #24]
 801f0dc:	089b      	lsrs	r3, r3, #2
 801f0de:	f003 0301 	and.w	r3, r3, #1
 801f0e2:	2b00      	cmp	r3, #0
 801f0e4:	d03b      	beq.n	801f15e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801f0e6:	687b      	ldr	r3, [r7, #4]
 801f0e8:	681b      	ldr	r3, [r3, #0]
 801f0ea:	685b      	ldr	r3, [r3, #4]
 801f0ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f0f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f0f4:	f000 80f3 	beq.w	801f2de <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801f0f8:	69fb      	ldr	r3, [r7, #28]
 801f0fa:	09db      	lsrs	r3, r3, #7
 801f0fc:	f003 0301 	and.w	r3, r3, #1
 801f100:	2b00      	cmp	r3, #0
 801f102:	d00f      	beq.n	801f124 <HAL_I2C_EV_IRQHandler+0x11c>
 801f104:	697b      	ldr	r3, [r7, #20]
 801f106:	0a9b      	lsrs	r3, r3, #10
 801f108:	f003 0301 	and.w	r3, r3, #1
 801f10c:	2b00      	cmp	r3, #0
 801f10e:	d009      	beq.n	801f124 <HAL_I2C_EV_IRQHandler+0x11c>
 801f110:	69fb      	ldr	r3, [r7, #28]
 801f112:	089b      	lsrs	r3, r3, #2
 801f114:	f003 0301 	and.w	r3, r3, #1
 801f118:	2b00      	cmp	r3, #0
 801f11a:	d103      	bne.n	801f124 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 801f11c:	6878      	ldr	r0, [r7, #4]
 801f11e:	f000 f9cb 	bl	801f4b8 <I2C_MasterTransmit_TXE>
 801f122:	e04d      	b.n	801f1c0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801f124:	69fb      	ldr	r3, [r7, #28]
 801f126:	089b      	lsrs	r3, r3, #2
 801f128:	f003 0301 	and.w	r3, r3, #1
 801f12c:	2b00      	cmp	r3, #0
 801f12e:	f000 80d6 	beq.w	801f2de <HAL_I2C_EV_IRQHandler+0x2d6>
 801f132:	697b      	ldr	r3, [r7, #20]
 801f134:	0a5b      	lsrs	r3, r3, #9
 801f136:	f003 0301 	and.w	r3, r3, #1
 801f13a:	2b00      	cmp	r3, #0
 801f13c:	f000 80cf 	beq.w	801f2de <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801f140:	7bbb      	ldrb	r3, [r7, #14]
 801f142:	2b21      	cmp	r3, #33	; 0x21
 801f144:	d103      	bne.n	801f14e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 801f146:	6878      	ldr	r0, [r7, #4]
 801f148:	f000 fa52 	bl	801f5f0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801f14c:	e0c7      	b.n	801f2de <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 801f14e:	7bfb      	ldrb	r3, [r7, #15]
 801f150:	2b40      	cmp	r3, #64	; 0x40
 801f152:	f040 80c4 	bne.w	801f2de <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 801f156:	6878      	ldr	r0, [r7, #4]
 801f158:	f000 fac0 	bl	801f6dc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801f15c:	e0bf      	b.n	801f2de <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801f15e:	687b      	ldr	r3, [r7, #4]
 801f160:	681b      	ldr	r3, [r3, #0]
 801f162:	685b      	ldr	r3, [r3, #4]
 801f164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f16c:	f000 80b7 	beq.w	801f2de <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801f170:	69fb      	ldr	r3, [r7, #28]
 801f172:	099b      	lsrs	r3, r3, #6
 801f174:	f003 0301 	and.w	r3, r3, #1
 801f178:	2b00      	cmp	r3, #0
 801f17a:	d00f      	beq.n	801f19c <HAL_I2C_EV_IRQHandler+0x194>
 801f17c:	697b      	ldr	r3, [r7, #20]
 801f17e:	0a9b      	lsrs	r3, r3, #10
 801f180:	f003 0301 	and.w	r3, r3, #1
 801f184:	2b00      	cmp	r3, #0
 801f186:	d009      	beq.n	801f19c <HAL_I2C_EV_IRQHandler+0x194>
 801f188:	69fb      	ldr	r3, [r7, #28]
 801f18a:	089b      	lsrs	r3, r3, #2
 801f18c:	f003 0301 	and.w	r3, r3, #1
 801f190:	2b00      	cmp	r3, #0
 801f192:	d103      	bne.n	801f19c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 801f194:	6878      	ldr	r0, [r7, #4]
 801f196:	f000 fb35 	bl	801f804 <I2C_MasterReceive_RXNE>
 801f19a:	e011      	b.n	801f1c0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801f19c:	69fb      	ldr	r3, [r7, #28]
 801f19e:	089b      	lsrs	r3, r3, #2
 801f1a0:	f003 0301 	and.w	r3, r3, #1
 801f1a4:	2b00      	cmp	r3, #0
 801f1a6:	f000 809a 	beq.w	801f2de <HAL_I2C_EV_IRQHandler+0x2d6>
 801f1aa:	697b      	ldr	r3, [r7, #20]
 801f1ac:	0a5b      	lsrs	r3, r3, #9
 801f1ae:	f003 0301 	and.w	r3, r3, #1
 801f1b2:	2b00      	cmp	r3, #0
 801f1b4:	f000 8093 	beq.w	801f2de <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 801f1b8:	6878      	ldr	r0, [r7, #4]
 801f1ba:	f000 fbde 	bl	801f97a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801f1be:	e08e      	b.n	801f2de <HAL_I2C_EV_IRQHandler+0x2d6>
 801f1c0:	e08d      	b.n	801f2de <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801f1c2:	687b      	ldr	r3, [r7, #4]
 801f1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f1c6:	2b00      	cmp	r3, #0
 801f1c8:	d004      	beq.n	801f1d4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801f1ca:	687b      	ldr	r3, [r7, #4]
 801f1cc:	681b      	ldr	r3, [r3, #0]
 801f1ce:	695b      	ldr	r3, [r3, #20]
 801f1d0:	61fb      	str	r3, [r7, #28]
 801f1d2:	e007      	b.n	801f1e4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801f1d4:	687b      	ldr	r3, [r7, #4]
 801f1d6:	681b      	ldr	r3, [r3, #0]
 801f1d8:	699b      	ldr	r3, [r3, #24]
 801f1da:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801f1dc:	687b      	ldr	r3, [r7, #4]
 801f1de:	681b      	ldr	r3, [r3, #0]
 801f1e0:	695b      	ldr	r3, [r3, #20]
 801f1e2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801f1e4:	69fb      	ldr	r3, [r7, #28]
 801f1e6:	085b      	lsrs	r3, r3, #1
 801f1e8:	f003 0301 	and.w	r3, r3, #1
 801f1ec:	2b00      	cmp	r3, #0
 801f1ee:	d012      	beq.n	801f216 <HAL_I2C_EV_IRQHandler+0x20e>
 801f1f0:	697b      	ldr	r3, [r7, #20]
 801f1f2:	0a5b      	lsrs	r3, r3, #9
 801f1f4:	f003 0301 	and.w	r3, r3, #1
 801f1f8:	2b00      	cmp	r3, #0
 801f1fa:	d00c      	beq.n	801f216 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801f1fc:	687b      	ldr	r3, [r7, #4]
 801f1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f200:	2b00      	cmp	r3, #0
 801f202:	d003      	beq.n	801f20c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801f204:	687b      	ldr	r3, [r7, #4]
 801f206:	681b      	ldr	r3, [r3, #0]
 801f208:	699b      	ldr	r3, [r3, #24]
 801f20a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 801f20c:	69b9      	ldr	r1, [r7, #24]
 801f20e:	6878      	ldr	r0, [r7, #4]
 801f210:	f000 ff9c 	bl	802014c <I2C_Slave_ADDR>
 801f214:	e066      	b.n	801f2e4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801f216:	69fb      	ldr	r3, [r7, #28]
 801f218:	091b      	lsrs	r3, r3, #4
 801f21a:	f003 0301 	and.w	r3, r3, #1
 801f21e:	2b00      	cmp	r3, #0
 801f220:	d009      	beq.n	801f236 <HAL_I2C_EV_IRQHandler+0x22e>
 801f222:	697b      	ldr	r3, [r7, #20]
 801f224:	0a5b      	lsrs	r3, r3, #9
 801f226:	f003 0301 	and.w	r3, r3, #1
 801f22a:	2b00      	cmp	r3, #0
 801f22c:	d003      	beq.n	801f236 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 801f22e:	6878      	ldr	r0, [r7, #4]
 801f230:	f000 ffd6 	bl	80201e0 <I2C_Slave_STOPF>
 801f234:	e056      	b.n	801f2e4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801f236:	7bbb      	ldrb	r3, [r7, #14]
 801f238:	2b21      	cmp	r3, #33	; 0x21
 801f23a:	d002      	beq.n	801f242 <HAL_I2C_EV_IRQHandler+0x23a>
 801f23c:	7bbb      	ldrb	r3, [r7, #14]
 801f23e:	2b29      	cmp	r3, #41	; 0x29
 801f240:	d125      	bne.n	801f28e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801f242:	69fb      	ldr	r3, [r7, #28]
 801f244:	09db      	lsrs	r3, r3, #7
 801f246:	f003 0301 	and.w	r3, r3, #1
 801f24a:	2b00      	cmp	r3, #0
 801f24c:	d00f      	beq.n	801f26e <HAL_I2C_EV_IRQHandler+0x266>
 801f24e:	697b      	ldr	r3, [r7, #20]
 801f250:	0a9b      	lsrs	r3, r3, #10
 801f252:	f003 0301 	and.w	r3, r3, #1
 801f256:	2b00      	cmp	r3, #0
 801f258:	d009      	beq.n	801f26e <HAL_I2C_EV_IRQHandler+0x266>
 801f25a:	69fb      	ldr	r3, [r7, #28]
 801f25c:	089b      	lsrs	r3, r3, #2
 801f25e:	f003 0301 	and.w	r3, r3, #1
 801f262:	2b00      	cmp	r3, #0
 801f264:	d103      	bne.n	801f26e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 801f266:	6878      	ldr	r0, [r7, #4]
 801f268:	f000 feb2 	bl	801ffd0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801f26c:	e039      	b.n	801f2e2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801f26e:	69fb      	ldr	r3, [r7, #28]
 801f270:	089b      	lsrs	r3, r3, #2
 801f272:	f003 0301 	and.w	r3, r3, #1
 801f276:	2b00      	cmp	r3, #0
 801f278:	d033      	beq.n	801f2e2 <HAL_I2C_EV_IRQHandler+0x2da>
 801f27a:	697b      	ldr	r3, [r7, #20]
 801f27c:	0a5b      	lsrs	r3, r3, #9
 801f27e:	f003 0301 	and.w	r3, r3, #1
 801f282:	2b00      	cmp	r3, #0
 801f284:	d02d      	beq.n	801f2e2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 801f286:	6878      	ldr	r0, [r7, #4]
 801f288:	f000 fedf 	bl	802004a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801f28c:	e029      	b.n	801f2e2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801f28e:	69fb      	ldr	r3, [r7, #28]
 801f290:	099b      	lsrs	r3, r3, #6
 801f292:	f003 0301 	and.w	r3, r3, #1
 801f296:	2b00      	cmp	r3, #0
 801f298:	d00f      	beq.n	801f2ba <HAL_I2C_EV_IRQHandler+0x2b2>
 801f29a:	697b      	ldr	r3, [r7, #20]
 801f29c:	0a9b      	lsrs	r3, r3, #10
 801f29e:	f003 0301 	and.w	r3, r3, #1
 801f2a2:	2b00      	cmp	r3, #0
 801f2a4:	d009      	beq.n	801f2ba <HAL_I2C_EV_IRQHandler+0x2b2>
 801f2a6:	69fb      	ldr	r3, [r7, #28]
 801f2a8:	089b      	lsrs	r3, r3, #2
 801f2aa:	f003 0301 	and.w	r3, r3, #1
 801f2ae:	2b00      	cmp	r3, #0
 801f2b0:	d103      	bne.n	801f2ba <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 801f2b2:	6878      	ldr	r0, [r7, #4]
 801f2b4:	f000 feea 	bl	802008c <I2C_SlaveReceive_RXNE>
 801f2b8:	e014      	b.n	801f2e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801f2ba:	69fb      	ldr	r3, [r7, #28]
 801f2bc:	089b      	lsrs	r3, r3, #2
 801f2be:	f003 0301 	and.w	r3, r3, #1
 801f2c2:	2b00      	cmp	r3, #0
 801f2c4:	d00e      	beq.n	801f2e4 <HAL_I2C_EV_IRQHandler+0x2dc>
 801f2c6:	697b      	ldr	r3, [r7, #20]
 801f2c8:	0a5b      	lsrs	r3, r3, #9
 801f2ca:	f003 0301 	and.w	r3, r3, #1
 801f2ce:	2b00      	cmp	r3, #0
 801f2d0:	d008      	beq.n	801f2e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 801f2d2:	6878      	ldr	r0, [r7, #4]
 801f2d4:	f000 ff18 	bl	8020108 <I2C_SlaveReceive_BTF>
 801f2d8:	e004      	b.n	801f2e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 801f2da:	bf00      	nop
 801f2dc:	e002      	b.n	801f2e4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801f2de:	bf00      	nop
 801f2e0:	e000      	b.n	801f2e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801f2e2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 801f2e4:	3720      	adds	r7, #32
 801f2e6:	46bd      	mov	sp, r7
 801f2e8:	bd80      	pop	{r7, pc}

0801f2ea <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801f2ea:	b580      	push	{r7, lr}
 801f2ec:	b08a      	sub	sp, #40	; 0x28
 801f2ee:	af00      	add	r7, sp, #0
 801f2f0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 801f2f2:	687b      	ldr	r3, [r7, #4]
 801f2f4:	681b      	ldr	r3, [r3, #0]
 801f2f6:	695b      	ldr	r3, [r3, #20]
 801f2f8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 801f2fa:	687b      	ldr	r3, [r7, #4]
 801f2fc:	681b      	ldr	r3, [r3, #0]
 801f2fe:	685b      	ldr	r3, [r3, #4]
 801f300:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 801f302:	2300      	movs	r3, #0
 801f304:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801f306:	687b      	ldr	r3, [r7, #4]
 801f308:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f30c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801f30e:	6a3b      	ldr	r3, [r7, #32]
 801f310:	0a1b      	lsrs	r3, r3, #8
 801f312:	f003 0301 	and.w	r3, r3, #1
 801f316:	2b00      	cmp	r3, #0
 801f318:	d00e      	beq.n	801f338 <HAL_I2C_ER_IRQHandler+0x4e>
 801f31a:	69fb      	ldr	r3, [r7, #28]
 801f31c:	0a1b      	lsrs	r3, r3, #8
 801f31e:	f003 0301 	and.w	r3, r3, #1
 801f322:	2b00      	cmp	r3, #0
 801f324:	d008      	beq.n	801f338 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 801f326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f328:	f043 0301 	orr.w	r3, r3, #1
 801f32c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801f32e:	687b      	ldr	r3, [r7, #4]
 801f330:	681b      	ldr	r3, [r3, #0]
 801f332:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801f336:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801f338:	6a3b      	ldr	r3, [r7, #32]
 801f33a:	0a5b      	lsrs	r3, r3, #9
 801f33c:	f003 0301 	and.w	r3, r3, #1
 801f340:	2b00      	cmp	r3, #0
 801f342:	d00e      	beq.n	801f362 <HAL_I2C_ER_IRQHandler+0x78>
 801f344:	69fb      	ldr	r3, [r7, #28]
 801f346:	0a1b      	lsrs	r3, r3, #8
 801f348:	f003 0301 	and.w	r3, r3, #1
 801f34c:	2b00      	cmp	r3, #0
 801f34e:	d008      	beq.n	801f362 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 801f350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f352:	f043 0302 	orr.w	r3, r3, #2
 801f356:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801f358:	687b      	ldr	r3, [r7, #4]
 801f35a:	681b      	ldr	r3, [r3, #0]
 801f35c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 801f360:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801f362:	6a3b      	ldr	r3, [r7, #32]
 801f364:	0a9b      	lsrs	r3, r3, #10
 801f366:	f003 0301 	and.w	r3, r3, #1
 801f36a:	2b00      	cmp	r3, #0
 801f36c:	d03f      	beq.n	801f3ee <HAL_I2C_ER_IRQHandler+0x104>
 801f36e:	69fb      	ldr	r3, [r7, #28]
 801f370:	0a1b      	lsrs	r3, r3, #8
 801f372:	f003 0301 	and.w	r3, r3, #1
 801f376:	2b00      	cmp	r3, #0
 801f378:	d039      	beq.n	801f3ee <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 801f37a:	7efb      	ldrb	r3, [r7, #27]
 801f37c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 801f37e:	687b      	ldr	r3, [r7, #4]
 801f380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f382:	b29b      	uxth	r3, r3
 801f384:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 801f386:	687b      	ldr	r3, [r7, #4]
 801f388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f38c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 801f38e:	687b      	ldr	r3, [r7, #4]
 801f390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f392:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 801f394:	7ebb      	ldrb	r3, [r7, #26]
 801f396:	2b20      	cmp	r3, #32
 801f398:	d112      	bne.n	801f3c0 <HAL_I2C_ER_IRQHandler+0xd6>
 801f39a:	697b      	ldr	r3, [r7, #20]
 801f39c:	2b00      	cmp	r3, #0
 801f39e:	d10f      	bne.n	801f3c0 <HAL_I2C_ER_IRQHandler+0xd6>
 801f3a0:	7cfb      	ldrb	r3, [r7, #19]
 801f3a2:	2b21      	cmp	r3, #33	; 0x21
 801f3a4:	d008      	beq.n	801f3b8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 801f3a6:	7cfb      	ldrb	r3, [r7, #19]
 801f3a8:	2b29      	cmp	r3, #41	; 0x29
 801f3aa:	d005      	beq.n	801f3b8 <HAL_I2C_ER_IRQHandler+0xce>
 801f3ac:	7cfb      	ldrb	r3, [r7, #19]
 801f3ae:	2b28      	cmp	r3, #40	; 0x28
 801f3b0:	d106      	bne.n	801f3c0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 801f3b2:	68fb      	ldr	r3, [r7, #12]
 801f3b4:	2b21      	cmp	r3, #33	; 0x21
 801f3b6:	d103      	bne.n	801f3c0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 801f3b8:	6878      	ldr	r0, [r7, #4]
 801f3ba:	f001 f841 	bl	8020440 <I2C_Slave_AF>
 801f3be:	e016      	b.n	801f3ee <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f3c0:	687b      	ldr	r3, [r7, #4]
 801f3c2:	681b      	ldr	r3, [r3, #0]
 801f3c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f3c8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 801f3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f3cc:	f043 0304 	orr.w	r3, r3, #4
 801f3d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801f3d2:	7efb      	ldrb	r3, [r7, #27]
 801f3d4:	2b10      	cmp	r3, #16
 801f3d6:	d002      	beq.n	801f3de <HAL_I2C_ER_IRQHandler+0xf4>
 801f3d8:	7efb      	ldrb	r3, [r7, #27]
 801f3da:	2b40      	cmp	r3, #64	; 0x40
 801f3dc:	d107      	bne.n	801f3ee <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f3de:	687b      	ldr	r3, [r7, #4]
 801f3e0:	681b      	ldr	r3, [r3, #0]
 801f3e2:	681a      	ldr	r2, [r3, #0]
 801f3e4:	687b      	ldr	r3, [r7, #4]
 801f3e6:	681b      	ldr	r3, [r3, #0]
 801f3e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f3ec:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801f3ee:	6a3b      	ldr	r3, [r7, #32]
 801f3f0:	0adb      	lsrs	r3, r3, #11
 801f3f2:	f003 0301 	and.w	r3, r3, #1
 801f3f6:	2b00      	cmp	r3, #0
 801f3f8:	d00e      	beq.n	801f418 <HAL_I2C_ER_IRQHandler+0x12e>
 801f3fa:	69fb      	ldr	r3, [r7, #28]
 801f3fc:	0a1b      	lsrs	r3, r3, #8
 801f3fe:	f003 0301 	and.w	r3, r3, #1
 801f402:	2b00      	cmp	r3, #0
 801f404:	d008      	beq.n	801f418 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 801f406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f408:	f043 0308 	orr.w	r3, r3, #8
 801f40c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801f40e:	687b      	ldr	r3, [r7, #4]
 801f410:	681b      	ldr	r3, [r3, #0]
 801f412:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 801f416:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 801f418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f41a:	2b00      	cmp	r3, #0
 801f41c:	d008      	beq.n	801f430 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 801f41e:	687b      	ldr	r3, [r7, #4]
 801f420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801f422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f424:	431a      	orrs	r2, r3
 801f426:	687b      	ldr	r3, [r7, #4]
 801f428:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 801f42a:	6878      	ldr	r0, [r7, #4]
 801f42c:	f001 f878 	bl	8020520 <I2C_ITError>
  }
}
 801f430:	bf00      	nop
 801f432:	3728      	adds	r7, #40	; 0x28
 801f434:	46bd      	mov	sp, r7
 801f436:	bd80      	pop	{r7, pc}

0801f438 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f438:	b480      	push	{r7}
 801f43a:	b083      	sub	sp, #12
 801f43c:	af00      	add	r7, sp, #0
 801f43e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801f440:	bf00      	nop
 801f442:	370c      	adds	r7, #12
 801f444:	46bd      	mov	sp, r7
 801f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f44a:	4770      	bx	lr

0801f44c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f44c:	b480      	push	{r7}
 801f44e:	b083      	sub	sp, #12
 801f450:	af00      	add	r7, sp, #0
 801f452:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801f454:	bf00      	nop
 801f456:	370c      	adds	r7, #12
 801f458:	46bd      	mov	sp, r7
 801f45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f45e:	4770      	bx	lr

0801f460 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801f460:	b480      	push	{r7}
 801f462:	b083      	sub	sp, #12
 801f464:	af00      	add	r7, sp, #0
 801f466:	6078      	str	r0, [r7, #4]
 801f468:	460b      	mov	r3, r1
 801f46a:	70fb      	strb	r3, [r7, #3]
 801f46c:	4613      	mov	r3, r2
 801f46e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801f470:	bf00      	nop
 801f472:	370c      	adds	r7, #12
 801f474:	46bd      	mov	sp, r7
 801f476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f47a:	4770      	bx	lr

0801f47c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f47c:	b480      	push	{r7}
 801f47e:	b083      	sub	sp, #12
 801f480:	af00      	add	r7, sp, #0
 801f482:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 801f484:	bf00      	nop
 801f486:	370c      	adds	r7, #12
 801f488:	46bd      	mov	sp, r7
 801f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f48e:	4770      	bx	lr

0801f490 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801f490:	b480      	push	{r7}
 801f492:	b083      	sub	sp, #12
 801f494:	af00      	add	r7, sp, #0
 801f496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 801f498:	bf00      	nop
 801f49a:	370c      	adds	r7, #12
 801f49c:	46bd      	mov	sp, r7
 801f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4a2:	4770      	bx	lr

0801f4a4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f4a4:	b480      	push	{r7}
 801f4a6:	b083      	sub	sp, #12
 801f4a8:	af00      	add	r7, sp, #0
 801f4aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 801f4ac:	bf00      	nop
 801f4ae:	370c      	adds	r7, #12
 801f4b0:	46bd      	mov	sp, r7
 801f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4b6:	4770      	bx	lr

0801f4b8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801f4b8:	b580      	push	{r7, lr}
 801f4ba:	b084      	sub	sp, #16
 801f4bc:	af00      	add	r7, sp, #0
 801f4be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f4c0:	687b      	ldr	r3, [r7, #4]
 801f4c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f4c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801f4c8:	687b      	ldr	r3, [r7, #4]
 801f4ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f4ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801f4d0:	687b      	ldr	r3, [r7, #4]
 801f4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f4d4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801f4d6:	687b      	ldr	r3, [r7, #4]
 801f4d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801f4da:	2b00      	cmp	r3, #0
 801f4dc:	d150      	bne.n	801f580 <I2C_MasterTransmit_TXE+0xc8>
 801f4de:	7bfb      	ldrb	r3, [r7, #15]
 801f4e0:	2b21      	cmp	r3, #33	; 0x21
 801f4e2:	d14d      	bne.n	801f580 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801f4e4:	68bb      	ldr	r3, [r7, #8]
 801f4e6:	2b08      	cmp	r3, #8
 801f4e8:	d01d      	beq.n	801f526 <I2C_MasterTransmit_TXE+0x6e>
 801f4ea:	68bb      	ldr	r3, [r7, #8]
 801f4ec:	2b20      	cmp	r3, #32
 801f4ee:	d01a      	beq.n	801f526 <I2C_MasterTransmit_TXE+0x6e>
 801f4f0:	68bb      	ldr	r3, [r7, #8]
 801f4f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801f4f6:	d016      	beq.n	801f526 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f4f8:	687b      	ldr	r3, [r7, #4]
 801f4fa:	681b      	ldr	r3, [r3, #0]
 801f4fc:	685a      	ldr	r2, [r3, #4]
 801f4fe:	687b      	ldr	r3, [r7, #4]
 801f500:	681b      	ldr	r3, [r3, #0]
 801f502:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f506:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801f508:	687b      	ldr	r3, [r7, #4]
 801f50a:	2211      	movs	r2, #17
 801f50c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801f50e:	687b      	ldr	r3, [r7, #4]
 801f510:	2200      	movs	r2, #0
 801f512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 801f516:	687b      	ldr	r3, [r7, #4]
 801f518:	2220      	movs	r2, #32
 801f51a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801f51e:	6878      	ldr	r0, [r7, #4]
 801f520:	f7e2 fac8 	bl	8001ab4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801f524:	e060      	b.n	801f5e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f526:	687b      	ldr	r3, [r7, #4]
 801f528:	681b      	ldr	r3, [r3, #0]
 801f52a:	685a      	ldr	r2, [r3, #4]
 801f52c:	687b      	ldr	r3, [r7, #4]
 801f52e:	681b      	ldr	r3, [r3, #0]
 801f530:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f534:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f536:	687b      	ldr	r3, [r7, #4]
 801f538:	681b      	ldr	r3, [r3, #0]
 801f53a:	681a      	ldr	r2, [r3, #0]
 801f53c:	687b      	ldr	r3, [r7, #4]
 801f53e:	681b      	ldr	r3, [r3, #0]
 801f540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f544:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 801f546:	687b      	ldr	r3, [r7, #4]
 801f548:	2200      	movs	r2, #0
 801f54a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801f54c:	687b      	ldr	r3, [r7, #4]
 801f54e:	2220      	movs	r2, #32
 801f550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801f554:	687b      	ldr	r3, [r7, #4]
 801f556:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f55a:	b2db      	uxtb	r3, r3
 801f55c:	2b40      	cmp	r3, #64	; 0x40
 801f55e:	d107      	bne.n	801f570 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801f560:	687b      	ldr	r3, [r7, #4]
 801f562:	2200      	movs	r2, #0
 801f564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 801f568:	6878      	ldr	r0, [r7, #4]
 801f56a:	f7e2 fa8d 	bl	8001a88 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801f56e:	e03b      	b.n	801f5e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801f570:	687b      	ldr	r3, [r7, #4]
 801f572:	2200      	movs	r2, #0
 801f574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801f578:	6878      	ldr	r0, [r7, #4]
 801f57a:	f7e2 fa9b 	bl	8001ab4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801f57e:	e033      	b.n	801f5e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 801f580:	7bfb      	ldrb	r3, [r7, #15]
 801f582:	2b21      	cmp	r3, #33	; 0x21
 801f584:	d005      	beq.n	801f592 <I2C_MasterTransmit_TXE+0xda>
 801f586:	7bbb      	ldrb	r3, [r7, #14]
 801f588:	2b40      	cmp	r3, #64	; 0x40
 801f58a:	d12d      	bne.n	801f5e8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 801f58c:	7bfb      	ldrb	r3, [r7, #15]
 801f58e:	2b22      	cmp	r3, #34	; 0x22
 801f590:	d12a      	bne.n	801f5e8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 801f592:	687b      	ldr	r3, [r7, #4]
 801f594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f596:	b29b      	uxth	r3, r3
 801f598:	2b00      	cmp	r3, #0
 801f59a:	d108      	bne.n	801f5ae <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801f59c:	687b      	ldr	r3, [r7, #4]
 801f59e:	681b      	ldr	r3, [r3, #0]
 801f5a0:	685a      	ldr	r2, [r3, #4]
 801f5a2:	687b      	ldr	r3, [r7, #4]
 801f5a4:	681b      	ldr	r3, [r3, #0]
 801f5a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f5aa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801f5ac:	e01c      	b.n	801f5e8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801f5ae:	687b      	ldr	r3, [r7, #4]
 801f5b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f5b4:	b2db      	uxtb	r3, r3
 801f5b6:	2b40      	cmp	r3, #64	; 0x40
 801f5b8:	d103      	bne.n	801f5c2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 801f5ba:	6878      	ldr	r0, [r7, #4]
 801f5bc:	f000 f88e 	bl	801f6dc <I2C_MemoryTransmit_TXE_BTF>
}
 801f5c0:	e012      	b.n	801f5e8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801f5c2:	687b      	ldr	r3, [r7, #4]
 801f5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f5c6:	781a      	ldrb	r2, [r3, #0]
 801f5c8:	687b      	ldr	r3, [r7, #4]
 801f5ca:	681b      	ldr	r3, [r3, #0]
 801f5cc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 801f5ce:	687b      	ldr	r3, [r7, #4]
 801f5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f5d2:	1c5a      	adds	r2, r3, #1
 801f5d4:	687b      	ldr	r3, [r7, #4]
 801f5d6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801f5d8:	687b      	ldr	r3, [r7, #4]
 801f5da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f5dc:	b29b      	uxth	r3, r3
 801f5de:	3b01      	subs	r3, #1
 801f5e0:	b29a      	uxth	r2, r3
 801f5e2:	687b      	ldr	r3, [r7, #4]
 801f5e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801f5e6:	e7ff      	b.n	801f5e8 <I2C_MasterTransmit_TXE+0x130>
 801f5e8:	bf00      	nop
 801f5ea:	3710      	adds	r7, #16
 801f5ec:	46bd      	mov	sp, r7
 801f5ee:	bd80      	pop	{r7, pc}

0801f5f0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801f5f0:	b580      	push	{r7, lr}
 801f5f2:	b084      	sub	sp, #16
 801f5f4:	af00      	add	r7, sp, #0
 801f5f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801f5f8:	687b      	ldr	r3, [r7, #4]
 801f5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f5fc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801f5fe:	687b      	ldr	r3, [r7, #4]
 801f600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f604:	b2db      	uxtb	r3, r3
 801f606:	2b21      	cmp	r3, #33	; 0x21
 801f608:	d164      	bne.n	801f6d4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 801f60a:	687b      	ldr	r3, [r7, #4]
 801f60c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f60e:	b29b      	uxth	r3, r3
 801f610:	2b00      	cmp	r3, #0
 801f612:	d012      	beq.n	801f63a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801f614:	687b      	ldr	r3, [r7, #4]
 801f616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f618:	781a      	ldrb	r2, [r3, #0]
 801f61a:	687b      	ldr	r3, [r7, #4]
 801f61c:	681b      	ldr	r3, [r3, #0]
 801f61e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801f620:	687b      	ldr	r3, [r7, #4]
 801f622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f624:	1c5a      	adds	r2, r3, #1
 801f626:	687b      	ldr	r3, [r7, #4]
 801f628:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801f62a:	687b      	ldr	r3, [r7, #4]
 801f62c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f62e:	b29b      	uxth	r3, r3
 801f630:	3b01      	subs	r3, #1
 801f632:	b29a      	uxth	r2, r3
 801f634:	687b      	ldr	r3, [r7, #4]
 801f636:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 801f638:	e04c      	b.n	801f6d4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801f63a:	68fb      	ldr	r3, [r7, #12]
 801f63c:	2b08      	cmp	r3, #8
 801f63e:	d01d      	beq.n	801f67c <I2C_MasterTransmit_BTF+0x8c>
 801f640:	68fb      	ldr	r3, [r7, #12]
 801f642:	2b20      	cmp	r3, #32
 801f644:	d01a      	beq.n	801f67c <I2C_MasterTransmit_BTF+0x8c>
 801f646:	68fb      	ldr	r3, [r7, #12]
 801f648:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801f64c:	d016      	beq.n	801f67c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f64e:	687b      	ldr	r3, [r7, #4]
 801f650:	681b      	ldr	r3, [r3, #0]
 801f652:	685a      	ldr	r2, [r3, #4]
 801f654:	687b      	ldr	r3, [r7, #4]
 801f656:	681b      	ldr	r3, [r3, #0]
 801f658:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f65c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801f65e:	687b      	ldr	r3, [r7, #4]
 801f660:	2211      	movs	r2, #17
 801f662:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801f664:	687b      	ldr	r3, [r7, #4]
 801f666:	2200      	movs	r2, #0
 801f668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 801f66c:	687b      	ldr	r3, [r7, #4]
 801f66e:	2220      	movs	r2, #32
 801f670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801f674:	6878      	ldr	r0, [r7, #4]
 801f676:	f7e2 fa1d 	bl	8001ab4 <HAL_I2C_MasterTxCpltCallback>
}
 801f67a:	e02b      	b.n	801f6d4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f67c:	687b      	ldr	r3, [r7, #4]
 801f67e:	681b      	ldr	r3, [r3, #0]
 801f680:	685a      	ldr	r2, [r3, #4]
 801f682:	687b      	ldr	r3, [r7, #4]
 801f684:	681b      	ldr	r3, [r3, #0]
 801f686:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f68a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f68c:	687b      	ldr	r3, [r7, #4]
 801f68e:	681b      	ldr	r3, [r3, #0]
 801f690:	681a      	ldr	r2, [r3, #0]
 801f692:	687b      	ldr	r3, [r7, #4]
 801f694:	681b      	ldr	r3, [r3, #0]
 801f696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f69a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 801f69c:	687b      	ldr	r3, [r7, #4]
 801f69e:	2200      	movs	r2, #0
 801f6a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801f6a2:	687b      	ldr	r3, [r7, #4]
 801f6a4:	2220      	movs	r2, #32
 801f6a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801f6aa:	687b      	ldr	r3, [r7, #4]
 801f6ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f6b0:	b2db      	uxtb	r3, r3
 801f6b2:	2b40      	cmp	r3, #64	; 0x40
 801f6b4:	d107      	bne.n	801f6c6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801f6b6:	687b      	ldr	r3, [r7, #4]
 801f6b8:	2200      	movs	r2, #0
 801f6ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 801f6be:	6878      	ldr	r0, [r7, #4]
 801f6c0:	f7e2 f9e2 	bl	8001a88 <HAL_I2C_MemTxCpltCallback>
}
 801f6c4:	e006      	b.n	801f6d4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801f6c6:	687b      	ldr	r3, [r7, #4]
 801f6c8:	2200      	movs	r2, #0
 801f6ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 801f6ce:	6878      	ldr	r0, [r7, #4]
 801f6d0:	f7e2 f9f0 	bl	8001ab4 <HAL_I2C_MasterTxCpltCallback>
}
 801f6d4:	bf00      	nop
 801f6d6:	3710      	adds	r7, #16
 801f6d8:	46bd      	mov	sp, r7
 801f6da:	bd80      	pop	{r7, pc}

0801f6dc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 801f6dc:	b580      	push	{r7, lr}
 801f6de:	b084      	sub	sp, #16
 801f6e0:	af00      	add	r7, sp, #0
 801f6e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f6e4:	687b      	ldr	r3, [r7, #4]
 801f6e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f6ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 801f6ec:	687b      	ldr	r3, [r7, #4]
 801f6ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f6f0:	2b00      	cmp	r3, #0
 801f6f2:	d11d      	bne.n	801f730 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 801f6f4:	687b      	ldr	r3, [r7, #4]
 801f6f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f6f8:	2b01      	cmp	r3, #1
 801f6fa:	d10b      	bne.n	801f714 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801f6fc:	687b      	ldr	r3, [r7, #4]
 801f6fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f700:	b2da      	uxtb	r2, r3
 801f702:	687b      	ldr	r3, [r7, #4]
 801f704:	681b      	ldr	r3, [r3, #0]
 801f706:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 801f708:	687b      	ldr	r3, [r7, #4]
 801f70a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f70c:	1c9a      	adds	r2, r3, #2
 801f70e:	687b      	ldr	r3, [r7, #4]
 801f710:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 801f712:	e073      	b.n	801f7fc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 801f714:	687b      	ldr	r3, [r7, #4]
 801f716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f718:	b29b      	uxth	r3, r3
 801f71a:	121b      	asrs	r3, r3, #8
 801f71c:	b2da      	uxtb	r2, r3
 801f71e:	687b      	ldr	r3, [r7, #4]
 801f720:	681b      	ldr	r3, [r3, #0]
 801f722:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 801f724:	687b      	ldr	r3, [r7, #4]
 801f726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f728:	1c5a      	adds	r2, r3, #1
 801f72a:	687b      	ldr	r3, [r7, #4]
 801f72c:	651a      	str	r2, [r3, #80]	; 0x50
}
 801f72e:	e065      	b.n	801f7fc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 801f730:	687b      	ldr	r3, [r7, #4]
 801f732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f734:	2b01      	cmp	r3, #1
 801f736:	d10b      	bne.n	801f750 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801f738:	687b      	ldr	r3, [r7, #4]
 801f73a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f73c:	b2da      	uxtb	r2, r3
 801f73e:	687b      	ldr	r3, [r7, #4]
 801f740:	681b      	ldr	r3, [r3, #0]
 801f742:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 801f744:	687b      	ldr	r3, [r7, #4]
 801f746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f748:	1c5a      	adds	r2, r3, #1
 801f74a:	687b      	ldr	r3, [r7, #4]
 801f74c:	651a      	str	r2, [r3, #80]	; 0x50
}
 801f74e:	e055      	b.n	801f7fc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 801f750:	687b      	ldr	r3, [r7, #4]
 801f752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f754:	2b02      	cmp	r3, #2
 801f756:	d151      	bne.n	801f7fc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 801f758:	7bfb      	ldrb	r3, [r7, #15]
 801f75a:	2b22      	cmp	r3, #34	; 0x22
 801f75c:	d10d      	bne.n	801f77a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 801f75e:	687b      	ldr	r3, [r7, #4]
 801f760:	681b      	ldr	r3, [r3, #0]
 801f762:	681a      	ldr	r2, [r3, #0]
 801f764:	687b      	ldr	r3, [r7, #4]
 801f766:	681b      	ldr	r3, [r3, #0]
 801f768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f76c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 801f76e:	687b      	ldr	r3, [r7, #4]
 801f770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f772:	1c5a      	adds	r2, r3, #1
 801f774:	687b      	ldr	r3, [r7, #4]
 801f776:	651a      	str	r2, [r3, #80]	; 0x50
}
 801f778:	e040      	b.n	801f7fc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801f77a:	687b      	ldr	r3, [r7, #4]
 801f77c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f77e:	b29b      	uxth	r3, r3
 801f780:	2b00      	cmp	r3, #0
 801f782:	d015      	beq.n	801f7b0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 801f784:	7bfb      	ldrb	r3, [r7, #15]
 801f786:	2b21      	cmp	r3, #33	; 0x21
 801f788:	d112      	bne.n	801f7b0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801f78a:	687b      	ldr	r3, [r7, #4]
 801f78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f78e:	781a      	ldrb	r2, [r3, #0]
 801f790:	687b      	ldr	r3, [r7, #4]
 801f792:	681b      	ldr	r3, [r3, #0]
 801f794:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 801f796:	687b      	ldr	r3, [r7, #4]
 801f798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f79a:	1c5a      	adds	r2, r3, #1
 801f79c:	687b      	ldr	r3, [r7, #4]
 801f79e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 801f7a0:	687b      	ldr	r3, [r7, #4]
 801f7a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f7a4:	b29b      	uxth	r3, r3
 801f7a6:	3b01      	subs	r3, #1
 801f7a8:	b29a      	uxth	r2, r3
 801f7aa:	687b      	ldr	r3, [r7, #4]
 801f7ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801f7ae:	e025      	b.n	801f7fc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801f7b0:	687b      	ldr	r3, [r7, #4]
 801f7b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f7b4:	b29b      	uxth	r3, r3
 801f7b6:	2b00      	cmp	r3, #0
 801f7b8:	d120      	bne.n	801f7fc <I2C_MemoryTransmit_TXE_BTF+0x120>
 801f7ba:	7bfb      	ldrb	r3, [r7, #15]
 801f7bc:	2b21      	cmp	r3, #33	; 0x21
 801f7be:	d11d      	bne.n	801f7fc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f7c0:	687b      	ldr	r3, [r7, #4]
 801f7c2:	681b      	ldr	r3, [r3, #0]
 801f7c4:	685a      	ldr	r2, [r3, #4]
 801f7c6:	687b      	ldr	r3, [r7, #4]
 801f7c8:	681b      	ldr	r3, [r3, #0]
 801f7ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f7ce:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f7d0:	687b      	ldr	r3, [r7, #4]
 801f7d2:	681b      	ldr	r3, [r3, #0]
 801f7d4:	681a      	ldr	r2, [r3, #0]
 801f7d6:	687b      	ldr	r3, [r7, #4]
 801f7d8:	681b      	ldr	r3, [r3, #0]
 801f7da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f7de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801f7e0:	687b      	ldr	r3, [r7, #4]
 801f7e2:	2200      	movs	r2, #0
 801f7e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801f7e6:	687b      	ldr	r3, [r7, #4]
 801f7e8:	2220      	movs	r2, #32
 801f7ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801f7ee:	687b      	ldr	r3, [r7, #4]
 801f7f0:	2200      	movs	r2, #0
 801f7f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 801f7f6:	6878      	ldr	r0, [r7, #4]
 801f7f8:	f7e2 f946 	bl	8001a88 <HAL_I2C_MemTxCpltCallback>
}
 801f7fc:	bf00      	nop
 801f7fe:	3710      	adds	r7, #16
 801f800:	46bd      	mov	sp, r7
 801f802:	bd80      	pop	{r7, pc}

0801f804 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801f804:	b580      	push	{r7, lr}
 801f806:	b084      	sub	sp, #16
 801f808:	af00      	add	r7, sp, #0
 801f80a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801f80c:	687b      	ldr	r3, [r7, #4]
 801f80e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f812:	b2db      	uxtb	r3, r3
 801f814:	2b22      	cmp	r3, #34	; 0x22
 801f816:	f040 80ac 	bne.w	801f972 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 801f81a:	687b      	ldr	r3, [r7, #4]
 801f81c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f81e:	b29b      	uxth	r3, r3
 801f820:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 801f822:	68fb      	ldr	r3, [r7, #12]
 801f824:	2b03      	cmp	r3, #3
 801f826:	d921      	bls.n	801f86c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f828:	687b      	ldr	r3, [r7, #4]
 801f82a:	681b      	ldr	r3, [r3, #0]
 801f82c:	691a      	ldr	r2, [r3, #16]
 801f82e:	687b      	ldr	r3, [r7, #4]
 801f830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f832:	b2d2      	uxtb	r2, r2
 801f834:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801f836:	687b      	ldr	r3, [r7, #4]
 801f838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f83a:	1c5a      	adds	r2, r3, #1
 801f83c:	687b      	ldr	r3, [r7, #4]
 801f83e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801f840:	687b      	ldr	r3, [r7, #4]
 801f842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f844:	b29b      	uxth	r3, r3
 801f846:	3b01      	subs	r3, #1
 801f848:	b29a      	uxth	r2, r3
 801f84a:	687b      	ldr	r3, [r7, #4]
 801f84c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 801f84e:	687b      	ldr	r3, [r7, #4]
 801f850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f852:	b29b      	uxth	r3, r3
 801f854:	2b03      	cmp	r3, #3
 801f856:	f040 808c 	bne.w	801f972 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801f85a:	687b      	ldr	r3, [r7, #4]
 801f85c:	681b      	ldr	r3, [r3, #0]
 801f85e:	685a      	ldr	r2, [r3, #4]
 801f860:	687b      	ldr	r3, [r7, #4]
 801f862:	681b      	ldr	r3, [r3, #0]
 801f864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f868:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 801f86a:	e082      	b.n	801f972 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 801f86c:	687b      	ldr	r3, [r7, #4]
 801f86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f870:	2b02      	cmp	r3, #2
 801f872:	d075      	beq.n	801f960 <I2C_MasterReceive_RXNE+0x15c>
 801f874:	68fb      	ldr	r3, [r7, #12]
 801f876:	2b01      	cmp	r3, #1
 801f878:	d002      	beq.n	801f880 <I2C_MasterReceive_RXNE+0x7c>
 801f87a:	68fb      	ldr	r3, [r7, #12]
 801f87c:	2b00      	cmp	r3, #0
 801f87e:	d16f      	bne.n	801f960 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801f880:	6878      	ldr	r0, [r7, #4]
 801f882:	f001 fbcf 	bl	8021024 <I2C_WaitOnSTOPRequestThroughIT>
 801f886:	4603      	mov	r3, r0
 801f888:	2b00      	cmp	r3, #0
 801f88a:	d142      	bne.n	801f912 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f88c:	687b      	ldr	r3, [r7, #4]
 801f88e:	681b      	ldr	r3, [r3, #0]
 801f890:	681a      	ldr	r2, [r3, #0]
 801f892:	687b      	ldr	r3, [r7, #4]
 801f894:	681b      	ldr	r3, [r3, #0]
 801f896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f89a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f89c:	687b      	ldr	r3, [r7, #4]
 801f89e:	681b      	ldr	r3, [r3, #0]
 801f8a0:	685a      	ldr	r2, [r3, #4]
 801f8a2:	687b      	ldr	r3, [r7, #4]
 801f8a4:	681b      	ldr	r3, [r3, #0]
 801f8a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f8aa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f8ac:	687b      	ldr	r3, [r7, #4]
 801f8ae:	681b      	ldr	r3, [r3, #0]
 801f8b0:	691a      	ldr	r2, [r3, #16]
 801f8b2:	687b      	ldr	r3, [r7, #4]
 801f8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f8b6:	b2d2      	uxtb	r2, r2
 801f8b8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801f8ba:	687b      	ldr	r3, [r7, #4]
 801f8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f8be:	1c5a      	adds	r2, r3, #1
 801f8c0:	687b      	ldr	r3, [r7, #4]
 801f8c2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801f8c4:	687b      	ldr	r3, [r7, #4]
 801f8c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f8c8:	b29b      	uxth	r3, r3
 801f8ca:	3b01      	subs	r3, #1
 801f8cc:	b29a      	uxth	r2, r3
 801f8ce:	687b      	ldr	r3, [r7, #4]
 801f8d0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801f8d2:	687b      	ldr	r3, [r7, #4]
 801f8d4:	2220      	movs	r2, #32
 801f8d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801f8da:	687b      	ldr	r3, [r7, #4]
 801f8dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f8e0:	b2db      	uxtb	r3, r3
 801f8e2:	2b40      	cmp	r3, #64	; 0x40
 801f8e4:	d10a      	bne.n	801f8fc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801f8e6:	687b      	ldr	r3, [r7, #4]
 801f8e8:	2200      	movs	r2, #0
 801f8ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 801f8ee:	687b      	ldr	r3, [r7, #4]
 801f8f0:	2200      	movs	r2, #0
 801f8f2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 801f8f4:	6878      	ldr	r0, [r7, #4]
 801f8f6:	f7e2 f89b 	bl	8001a30 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801f8fa:	e03a      	b.n	801f972 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801f8fc:	687b      	ldr	r3, [r7, #4]
 801f8fe:	2200      	movs	r2, #0
 801f900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801f904:	687b      	ldr	r3, [r7, #4]
 801f906:	2212      	movs	r2, #18
 801f908:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 801f90a:	6878      	ldr	r0, [r7, #4]
 801f90c:	f7e2 f8a6 	bl	8001a5c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801f910:	e02f      	b.n	801f972 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f912:	687b      	ldr	r3, [r7, #4]
 801f914:	681b      	ldr	r3, [r3, #0]
 801f916:	685a      	ldr	r2, [r3, #4]
 801f918:	687b      	ldr	r3, [r7, #4]
 801f91a:	681b      	ldr	r3, [r3, #0]
 801f91c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f920:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f922:	687b      	ldr	r3, [r7, #4]
 801f924:	681b      	ldr	r3, [r3, #0]
 801f926:	691a      	ldr	r2, [r3, #16]
 801f928:	687b      	ldr	r3, [r7, #4]
 801f92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f92c:	b2d2      	uxtb	r2, r2
 801f92e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801f930:	687b      	ldr	r3, [r7, #4]
 801f932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f934:	1c5a      	adds	r2, r3, #1
 801f936:	687b      	ldr	r3, [r7, #4]
 801f938:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801f93a:	687b      	ldr	r3, [r7, #4]
 801f93c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f93e:	b29b      	uxth	r3, r3
 801f940:	3b01      	subs	r3, #1
 801f942:	b29a      	uxth	r2, r3
 801f944:	687b      	ldr	r3, [r7, #4]
 801f946:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801f948:	687b      	ldr	r3, [r7, #4]
 801f94a:	2220      	movs	r2, #32
 801f94c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801f950:	687b      	ldr	r3, [r7, #4]
 801f952:	2200      	movs	r2, #0
 801f954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 801f958:	6878      	ldr	r0, [r7, #4]
 801f95a:	f7ff fd99 	bl	801f490 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801f95e:	e008      	b.n	801f972 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801f960:	687b      	ldr	r3, [r7, #4]
 801f962:	681b      	ldr	r3, [r3, #0]
 801f964:	685a      	ldr	r2, [r3, #4]
 801f966:	687b      	ldr	r3, [r7, #4]
 801f968:	681b      	ldr	r3, [r3, #0]
 801f96a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f96e:	605a      	str	r2, [r3, #4]
}
 801f970:	e7ff      	b.n	801f972 <I2C_MasterReceive_RXNE+0x16e>
 801f972:	bf00      	nop
 801f974:	3710      	adds	r7, #16
 801f976:	46bd      	mov	sp, r7
 801f978:	bd80      	pop	{r7, pc}

0801f97a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801f97a:	b580      	push	{r7, lr}
 801f97c:	b084      	sub	sp, #16
 801f97e:	af00      	add	r7, sp, #0
 801f980:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801f982:	687b      	ldr	r3, [r7, #4]
 801f984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f986:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 801f988:	687b      	ldr	r3, [r7, #4]
 801f98a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f98c:	b29b      	uxth	r3, r3
 801f98e:	2b04      	cmp	r3, #4
 801f990:	d11b      	bne.n	801f9ca <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801f992:	687b      	ldr	r3, [r7, #4]
 801f994:	681b      	ldr	r3, [r3, #0]
 801f996:	685a      	ldr	r2, [r3, #4]
 801f998:	687b      	ldr	r3, [r7, #4]
 801f99a:	681b      	ldr	r3, [r3, #0]
 801f99c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f9a0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f9a2:	687b      	ldr	r3, [r7, #4]
 801f9a4:	681b      	ldr	r3, [r3, #0]
 801f9a6:	691a      	ldr	r2, [r3, #16]
 801f9a8:	687b      	ldr	r3, [r7, #4]
 801f9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f9ac:	b2d2      	uxtb	r2, r2
 801f9ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801f9b0:	687b      	ldr	r3, [r7, #4]
 801f9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f9b4:	1c5a      	adds	r2, r3, #1
 801f9b6:	687b      	ldr	r3, [r7, #4]
 801f9b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801f9ba:	687b      	ldr	r3, [r7, #4]
 801f9bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f9be:	b29b      	uxth	r3, r3
 801f9c0:	3b01      	subs	r3, #1
 801f9c2:	b29a      	uxth	r2, r3
 801f9c4:	687b      	ldr	r3, [r7, #4]
 801f9c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 801f9c8:	e0bd      	b.n	801fb46 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 801f9ca:	687b      	ldr	r3, [r7, #4]
 801f9cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f9ce:	b29b      	uxth	r3, r3
 801f9d0:	2b03      	cmp	r3, #3
 801f9d2:	d129      	bne.n	801fa28 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801f9d4:	687b      	ldr	r3, [r7, #4]
 801f9d6:	681b      	ldr	r3, [r3, #0]
 801f9d8:	685a      	ldr	r2, [r3, #4]
 801f9da:	687b      	ldr	r3, [r7, #4]
 801f9dc:	681b      	ldr	r3, [r3, #0]
 801f9de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f9e2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 801f9e4:	68fb      	ldr	r3, [r7, #12]
 801f9e6:	2b04      	cmp	r3, #4
 801f9e8:	d00a      	beq.n	801fa00 <I2C_MasterReceive_BTF+0x86>
 801f9ea:	68fb      	ldr	r3, [r7, #12]
 801f9ec:	2b02      	cmp	r3, #2
 801f9ee:	d007      	beq.n	801fa00 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f9f0:	687b      	ldr	r3, [r7, #4]
 801f9f2:	681b      	ldr	r3, [r3, #0]
 801f9f4:	681a      	ldr	r2, [r3, #0]
 801f9f6:	687b      	ldr	r3, [r7, #4]
 801f9f8:	681b      	ldr	r3, [r3, #0]
 801f9fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f9fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801fa00:	687b      	ldr	r3, [r7, #4]
 801fa02:	681b      	ldr	r3, [r3, #0]
 801fa04:	691a      	ldr	r2, [r3, #16]
 801fa06:	687b      	ldr	r3, [r7, #4]
 801fa08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa0a:	b2d2      	uxtb	r2, r2
 801fa0c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801fa0e:	687b      	ldr	r3, [r7, #4]
 801fa10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa12:	1c5a      	adds	r2, r3, #1
 801fa14:	687b      	ldr	r3, [r7, #4]
 801fa16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801fa18:	687b      	ldr	r3, [r7, #4]
 801fa1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801fa1c:	b29b      	uxth	r3, r3
 801fa1e:	3b01      	subs	r3, #1
 801fa20:	b29a      	uxth	r2, r3
 801fa22:	687b      	ldr	r3, [r7, #4]
 801fa24:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801fa26:	e08e      	b.n	801fb46 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 801fa28:	687b      	ldr	r3, [r7, #4]
 801fa2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801fa2c:	b29b      	uxth	r3, r3
 801fa2e:	2b02      	cmp	r3, #2
 801fa30:	d176      	bne.n	801fb20 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 801fa32:	68fb      	ldr	r3, [r7, #12]
 801fa34:	2b01      	cmp	r3, #1
 801fa36:	d002      	beq.n	801fa3e <I2C_MasterReceive_BTF+0xc4>
 801fa38:	68fb      	ldr	r3, [r7, #12]
 801fa3a:	2b10      	cmp	r3, #16
 801fa3c:	d108      	bne.n	801fa50 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801fa3e:	687b      	ldr	r3, [r7, #4]
 801fa40:	681b      	ldr	r3, [r3, #0]
 801fa42:	681a      	ldr	r2, [r3, #0]
 801fa44:	687b      	ldr	r3, [r7, #4]
 801fa46:	681b      	ldr	r3, [r3, #0]
 801fa48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801fa4c:	601a      	str	r2, [r3, #0]
 801fa4e:	e019      	b.n	801fa84 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 801fa50:	68fb      	ldr	r3, [r7, #12]
 801fa52:	2b04      	cmp	r3, #4
 801fa54:	d002      	beq.n	801fa5c <I2C_MasterReceive_BTF+0xe2>
 801fa56:	68fb      	ldr	r3, [r7, #12]
 801fa58:	2b02      	cmp	r3, #2
 801fa5a:	d108      	bne.n	801fa6e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801fa5c:	687b      	ldr	r3, [r7, #4]
 801fa5e:	681b      	ldr	r3, [r3, #0]
 801fa60:	681a      	ldr	r2, [r3, #0]
 801fa62:	687b      	ldr	r3, [r7, #4]
 801fa64:	681b      	ldr	r3, [r3, #0]
 801fa66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801fa6a:	601a      	str	r2, [r3, #0]
 801fa6c:	e00a      	b.n	801fa84 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 801fa6e:	68fb      	ldr	r3, [r7, #12]
 801fa70:	2b10      	cmp	r3, #16
 801fa72:	d007      	beq.n	801fa84 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801fa74:	687b      	ldr	r3, [r7, #4]
 801fa76:	681b      	ldr	r3, [r3, #0]
 801fa78:	681a      	ldr	r2, [r3, #0]
 801fa7a:	687b      	ldr	r3, [r7, #4]
 801fa7c:	681b      	ldr	r3, [r3, #0]
 801fa7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fa82:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801fa84:	687b      	ldr	r3, [r7, #4]
 801fa86:	681b      	ldr	r3, [r3, #0]
 801fa88:	691a      	ldr	r2, [r3, #16]
 801fa8a:	687b      	ldr	r3, [r7, #4]
 801fa8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa8e:	b2d2      	uxtb	r2, r2
 801fa90:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801fa92:	687b      	ldr	r3, [r7, #4]
 801fa94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa96:	1c5a      	adds	r2, r3, #1
 801fa98:	687b      	ldr	r3, [r7, #4]
 801fa9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801fa9c:	687b      	ldr	r3, [r7, #4]
 801fa9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801faa0:	b29b      	uxth	r3, r3
 801faa2:	3b01      	subs	r3, #1
 801faa4:	b29a      	uxth	r2, r3
 801faa6:	687b      	ldr	r3, [r7, #4]
 801faa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801faaa:	687b      	ldr	r3, [r7, #4]
 801faac:	681b      	ldr	r3, [r3, #0]
 801faae:	691a      	ldr	r2, [r3, #16]
 801fab0:	687b      	ldr	r3, [r7, #4]
 801fab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fab4:	b2d2      	uxtb	r2, r2
 801fab6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801fab8:	687b      	ldr	r3, [r7, #4]
 801faba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fabc:	1c5a      	adds	r2, r3, #1
 801fabe:	687b      	ldr	r3, [r7, #4]
 801fac0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801fac2:	687b      	ldr	r3, [r7, #4]
 801fac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801fac6:	b29b      	uxth	r3, r3
 801fac8:	3b01      	subs	r3, #1
 801faca:	b29a      	uxth	r2, r3
 801facc:	687b      	ldr	r3, [r7, #4]
 801face:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801fad0:	687b      	ldr	r3, [r7, #4]
 801fad2:	681b      	ldr	r3, [r3, #0]
 801fad4:	685a      	ldr	r2, [r3, #4]
 801fad6:	687b      	ldr	r3, [r7, #4]
 801fad8:	681b      	ldr	r3, [r3, #0]
 801fada:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801fade:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801fae0:	687b      	ldr	r3, [r7, #4]
 801fae2:	2220      	movs	r2, #32
 801fae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801fae8:	687b      	ldr	r3, [r7, #4]
 801faea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801faee:	b2db      	uxtb	r3, r3
 801faf0:	2b40      	cmp	r3, #64	; 0x40
 801faf2:	d10a      	bne.n	801fb0a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801faf4:	687b      	ldr	r3, [r7, #4]
 801faf6:	2200      	movs	r2, #0
 801faf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 801fafc:	687b      	ldr	r3, [r7, #4]
 801fafe:	2200      	movs	r2, #0
 801fb00:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 801fb02:	6878      	ldr	r0, [r7, #4]
 801fb04:	f7e1 ff94 	bl	8001a30 <HAL_I2C_MemRxCpltCallback>
}
 801fb08:	e01d      	b.n	801fb46 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801fb0a:	687b      	ldr	r3, [r7, #4]
 801fb0c:	2200      	movs	r2, #0
 801fb0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801fb12:	687b      	ldr	r3, [r7, #4]
 801fb14:	2212      	movs	r2, #18
 801fb16:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801fb18:	6878      	ldr	r0, [r7, #4]
 801fb1a:	f7e1 ff9f 	bl	8001a5c <HAL_I2C_MasterRxCpltCallback>
}
 801fb1e:	e012      	b.n	801fb46 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801fb20:	687b      	ldr	r3, [r7, #4]
 801fb22:	681b      	ldr	r3, [r3, #0]
 801fb24:	691a      	ldr	r2, [r3, #16]
 801fb26:	687b      	ldr	r3, [r7, #4]
 801fb28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb2a:	b2d2      	uxtb	r2, r2
 801fb2c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801fb2e:	687b      	ldr	r3, [r7, #4]
 801fb30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb32:	1c5a      	adds	r2, r3, #1
 801fb34:	687b      	ldr	r3, [r7, #4]
 801fb36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801fb38:	687b      	ldr	r3, [r7, #4]
 801fb3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801fb3c:	b29b      	uxth	r3, r3
 801fb3e:	3b01      	subs	r3, #1
 801fb40:	b29a      	uxth	r2, r3
 801fb42:	687b      	ldr	r3, [r7, #4]
 801fb44:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801fb46:	bf00      	nop
 801fb48:	3710      	adds	r7, #16
 801fb4a:	46bd      	mov	sp, r7
 801fb4c:	bd80      	pop	{r7, pc}

0801fb4e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 801fb4e:	b480      	push	{r7}
 801fb50:	b083      	sub	sp, #12
 801fb52:	af00      	add	r7, sp, #0
 801fb54:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801fb56:	687b      	ldr	r3, [r7, #4]
 801fb58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801fb5c:	b2db      	uxtb	r3, r3
 801fb5e:	2b40      	cmp	r3, #64	; 0x40
 801fb60:	d117      	bne.n	801fb92 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 801fb62:	687b      	ldr	r3, [r7, #4]
 801fb64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fb66:	2b00      	cmp	r3, #0
 801fb68:	d109      	bne.n	801fb7e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801fb6a:	687b      	ldr	r3, [r7, #4]
 801fb6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fb6e:	b2db      	uxtb	r3, r3
 801fb70:	461a      	mov	r2, r3
 801fb72:	687b      	ldr	r3, [r7, #4]
 801fb74:	681b      	ldr	r3, [r3, #0]
 801fb76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801fb7a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 801fb7c:	e067      	b.n	801fc4e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801fb7e:	687b      	ldr	r3, [r7, #4]
 801fb80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fb82:	b2db      	uxtb	r3, r3
 801fb84:	f043 0301 	orr.w	r3, r3, #1
 801fb88:	b2da      	uxtb	r2, r3
 801fb8a:	687b      	ldr	r3, [r7, #4]
 801fb8c:	681b      	ldr	r3, [r3, #0]
 801fb8e:	611a      	str	r2, [r3, #16]
}
 801fb90:	e05d      	b.n	801fc4e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801fb92:	687b      	ldr	r3, [r7, #4]
 801fb94:	691b      	ldr	r3, [r3, #16]
 801fb96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801fb9a:	d133      	bne.n	801fc04 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801fb9c:	687b      	ldr	r3, [r7, #4]
 801fb9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fba2:	b2db      	uxtb	r3, r3
 801fba4:	2b21      	cmp	r3, #33	; 0x21
 801fba6:	d109      	bne.n	801fbbc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801fba8:	687b      	ldr	r3, [r7, #4]
 801fbaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fbac:	b2db      	uxtb	r3, r3
 801fbae:	461a      	mov	r2, r3
 801fbb0:	687b      	ldr	r3, [r7, #4]
 801fbb2:	681b      	ldr	r3, [r3, #0]
 801fbb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801fbb8:	611a      	str	r2, [r3, #16]
 801fbba:	e008      	b.n	801fbce <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801fbbc:	687b      	ldr	r3, [r7, #4]
 801fbbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fbc0:	b2db      	uxtb	r3, r3
 801fbc2:	f043 0301 	orr.w	r3, r3, #1
 801fbc6:	b2da      	uxtb	r2, r3
 801fbc8:	687b      	ldr	r3, [r7, #4]
 801fbca:	681b      	ldr	r3, [r3, #0]
 801fbcc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801fbce:	687b      	ldr	r3, [r7, #4]
 801fbd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fbd2:	2b00      	cmp	r3, #0
 801fbd4:	d004      	beq.n	801fbe0 <I2C_Master_SB+0x92>
 801fbd6:	687b      	ldr	r3, [r7, #4]
 801fbd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fbda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fbdc:	2b00      	cmp	r3, #0
 801fbde:	d108      	bne.n	801fbf2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801fbe0:	687b      	ldr	r3, [r7, #4]
 801fbe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fbe4:	2b00      	cmp	r3, #0
 801fbe6:	d032      	beq.n	801fc4e <I2C_Master_SB+0x100>
 801fbe8:	687b      	ldr	r3, [r7, #4]
 801fbea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fbec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fbee:	2b00      	cmp	r3, #0
 801fbf0:	d02d      	beq.n	801fc4e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801fbf2:	687b      	ldr	r3, [r7, #4]
 801fbf4:	681b      	ldr	r3, [r3, #0]
 801fbf6:	685a      	ldr	r2, [r3, #4]
 801fbf8:	687b      	ldr	r3, [r7, #4]
 801fbfa:	681b      	ldr	r3, [r3, #0]
 801fbfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801fc00:	605a      	str	r2, [r3, #4]
}
 801fc02:	e024      	b.n	801fc4e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 801fc04:	687b      	ldr	r3, [r7, #4]
 801fc06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fc08:	2b00      	cmp	r3, #0
 801fc0a:	d10e      	bne.n	801fc2a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 801fc0c:	687b      	ldr	r3, [r7, #4]
 801fc0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fc10:	b29b      	uxth	r3, r3
 801fc12:	11db      	asrs	r3, r3, #7
 801fc14:	b2db      	uxtb	r3, r3
 801fc16:	f003 0306 	and.w	r3, r3, #6
 801fc1a:	b2db      	uxtb	r3, r3
 801fc1c:	f063 030f 	orn	r3, r3, #15
 801fc20:	b2da      	uxtb	r2, r3
 801fc22:	687b      	ldr	r3, [r7, #4]
 801fc24:	681b      	ldr	r3, [r3, #0]
 801fc26:	611a      	str	r2, [r3, #16]
}
 801fc28:	e011      	b.n	801fc4e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 801fc2a:	687b      	ldr	r3, [r7, #4]
 801fc2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fc2e:	2b01      	cmp	r3, #1
 801fc30:	d10d      	bne.n	801fc4e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 801fc32:	687b      	ldr	r3, [r7, #4]
 801fc34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fc36:	b29b      	uxth	r3, r3
 801fc38:	11db      	asrs	r3, r3, #7
 801fc3a:	b2db      	uxtb	r3, r3
 801fc3c:	f003 0306 	and.w	r3, r3, #6
 801fc40:	b2db      	uxtb	r3, r3
 801fc42:	f063 030e 	orn	r3, r3, #14
 801fc46:	b2da      	uxtb	r2, r3
 801fc48:	687b      	ldr	r3, [r7, #4]
 801fc4a:	681b      	ldr	r3, [r3, #0]
 801fc4c:	611a      	str	r2, [r3, #16]
}
 801fc4e:	bf00      	nop
 801fc50:	370c      	adds	r7, #12
 801fc52:	46bd      	mov	sp, r7
 801fc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc58:	4770      	bx	lr

0801fc5a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 801fc5a:	b480      	push	{r7}
 801fc5c:	b083      	sub	sp, #12
 801fc5e:	af00      	add	r7, sp, #0
 801fc60:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 801fc62:	687b      	ldr	r3, [r7, #4]
 801fc64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fc66:	b2da      	uxtb	r2, r3
 801fc68:	687b      	ldr	r3, [r7, #4]
 801fc6a:	681b      	ldr	r3, [r3, #0]
 801fc6c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801fc6e:	687b      	ldr	r3, [r7, #4]
 801fc70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fc72:	2b00      	cmp	r3, #0
 801fc74:	d004      	beq.n	801fc80 <I2C_Master_ADD10+0x26>
 801fc76:	687b      	ldr	r3, [r7, #4]
 801fc78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fc7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fc7c:	2b00      	cmp	r3, #0
 801fc7e:	d108      	bne.n	801fc92 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801fc80:	687b      	ldr	r3, [r7, #4]
 801fc82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fc84:	2b00      	cmp	r3, #0
 801fc86:	d00c      	beq.n	801fca2 <I2C_Master_ADD10+0x48>
 801fc88:	687b      	ldr	r3, [r7, #4]
 801fc8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fc8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fc8e:	2b00      	cmp	r3, #0
 801fc90:	d007      	beq.n	801fca2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801fc92:	687b      	ldr	r3, [r7, #4]
 801fc94:	681b      	ldr	r3, [r3, #0]
 801fc96:	685a      	ldr	r2, [r3, #4]
 801fc98:	687b      	ldr	r3, [r7, #4]
 801fc9a:	681b      	ldr	r3, [r3, #0]
 801fc9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801fca0:	605a      	str	r2, [r3, #4]
  }
}
 801fca2:	bf00      	nop
 801fca4:	370c      	adds	r7, #12
 801fca6:	46bd      	mov	sp, r7
 801fca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcac:	4770      	bx	lr

0801fcae <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 801fcae:	b480      	push	{r7}
 801fcb0:	b091      	sub	sp, #68	; 0x44
 801fcb2:	af00      	add	r7, sp, #0
 801fcb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 801fcb6:	687b      	ldr	r3, [r7, #4]
 801fcb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801fcbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 801fcc0:	687b      	ldr	r3, [r7, #4]
 801fcc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fcc4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 801fcc6:	687b      	ldr	r3, [r7, #4]
 801fcc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fcca:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801fccc:	687b      	ldr	r3, [r7, #4]
 801fcce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fcd2:	b2db      	uxtb	r3, r3
 801fcd4:	2b22      	cmp	r3, #34	; 0x22
 801fcd6:	f040 8169 	bne.w	801ffac <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 801fcda:	687b      	ldr	r3, [r7, #4]
 801fcdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fcde:	2b00      	cmp	r3, #0
 801fce0:	d10f      	bne.n	801fd02 <I2C_Master_ADDR+0x54>
 801fce2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801fce6:	2b40      	cmp	r3, #64	; 0x40
 801fce8:	d10b      	bne.n	801fd02 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801fcea:	2300      	movs	r3, #0
 801fcec:	633b      	str	r3, [r7, #48]	; 0x30
 801fcee:	687b      	ldr	r3, [r7, #4]
 801fcf0:	681b      	ldr	r3, [r3, #0]
 801fcf2:	695b      	ldr	r3, [r3, #20]
 801fcf4:	633b      	str	r3, [r7, #48]	; 0x30
 801fcf6:	687b      	ldr	r3, [r7, #4]
 801fcf8:	681b      	ldr	r3, [r3, #0]
 801fcfa:	699b      	ldr	r3, [r3, #24]
 801fcfc:	633b      	str	r3, [r7, #48]	; 0x30
 801fcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd00:	e160      	b.n	801ffc4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 801fd02:	687b      	ldr	r3, [r7, #4]
 801fd04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fd06:	2b00      	cmp	r3, #0
 801fd08:	d11d      	bne.n	801fd46 <I2C_Master_ADDR+0x98>
 801fd0a:	687b      	ldr	r3, [r7, #4]
 801fd0c:	691b      	ldr	r3, [r3, #16]
 801fd0e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801fd12:	d118      	bne.n	801fd46 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801fd14:	2300      	movs	r3, #0
 801fd16:	62fb      	str	r3, [r7, #44]	; 0x2c
 801fd18:	687b      	ldr	r3, [r7, #4]
 801fd1a:	681b      	ldr	r3, [r3, #0]
 801fd1c:	695b      	ldr	r3, [r3, #20]
 801fd1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801fd20:	687b      	ldr	r3, [r7, #4]
 801fd22:	681b      	ldr	r3, [r3, #0]
 801fd24:	699b      	ldr	r3, [r3, #24]
 801fd26:	62fb      	str	r3, [r7, #44]	; 0x2c
 801fd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801fd2a:	687b      	ldr	r3, [r7, #4]
 801fd2c:	681b      	ldr	r3, [r3, #0]
 801fd2e:	681a      	ldr	r2, [r3, #0]
 801fd30:	687b      	ldr	r3, [r7, #4]
 801fd32:	681b      	ldr	r3, [r3, #0]
 801fd34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801fd38:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 801fd3a:	687b      	ldr	r3, [r7, #4]
 801fd3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fd3e:	1c5a      	adds	r2, r3, #1
 801fd40:	687b      	ldr	r3, [r7, #4]
 801fd42:	651a      	str	r2, [r3, #80]	; 0x50
 801fd44:	e13e      	b.n	801ffc4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 801fd46:	687b      	ldr	r3, [r7, #4]
 801fd48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801fd4a:	b29b      	uxth	r3, r3
 801fd4c:	2b00      	cmp	r3, #0
 801fd4e:	d113      	bne.n	801fd78 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801fd50:	2300      	movs	r3, #0
 801fd52:	62bb      	str	r3, [r7, #40]	; 0x28
 801fd54:	687b      	ldr	r3, [r7, #4]
 801fd56:	681b      	ldr	r3, [r3, #0]
 801fd58:	695b      	ldr	r3, [r3, #20]
 801fd5a:	62bb      	str	r3, [r7, #40]	; 0x28
 801fd5c:	687b      	ldr	r3, [r7, #4]
 801fd5e:	681b      	ldr	r3, [r3, #0]
 801fd60:	699b      	ldr	r3, [r3, #24]
 801fd62:	62bb      	str	r3, [r7, #40]	; 0x28
 801fd64:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801fd66:	687b      	ldr	r3, [r7, #4]
 801fd68:	681b      	ldr	r3, [r3, #0]
 801fd6a:	681a      	ldr	r2, [r3, #0]
 801fd6c:	687b      	ldr	r3, [r7, #4]
 801fd6e:	681b      	ldr	r3, [r3, #0]
 801fd70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fd74:	601a      	str	r2, [r3, #0]
 801fd76:	e115      	b.n	801ffa4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 801fd78:	687b      	ldr	r3, [r7, #4]
 801fd7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801fd7c:	b29b      	uxth	r3, r3
 801fd7e:	2b01      	cmp	r3, #1
 801fd80:	f040 808a 	bne.w	801fe98 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 801fd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fd86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801fd8a:	d137      	bne.n	801fdfc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801fd8c:	687b      	ldr	r3, [r7, #4]
 801fd8e:	681b      	ldr	r3, [r3, #0]
 801fd90:	681a      	ldr	r2, [r3, #0]
 801fd92:	687b      	ldr	r3, [r7, #4]
 801fd94:	681b      	ldr	r3, [r3, #0]
 801fd96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801fd9a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801fd9c:	687b      	ldr	r3, [r7, #4]
 801fd9e:	681b      	ldr	r3, [r3, #0]
 801fda0:	685b      	ldr	r3, [r3, #4]
 801fda2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801fda6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801fdaa:	d113      	bne.n	801fdd4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801fdac:	687b      	ldr	r3, [r7, #4]
 801fdae:	681b      	ldr	r3, [r3, #0]
 801fdb0:	681a      	ldr	r2, [r3, #0]
 801fdb2:	687b      	ldr	r3, [r7, #4]
 801fdb4:	681b      	ldr	r3, [r3, #0]
 801fdb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801fdba:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801fdbc:	2300      	movs	r3, #0
 801fdbe:	627b      	str	r3, [r7, #36]	; 0x24
 801fdc0:	687b      	ldr	r3, [r7, #4]
 801fdc2:	681b      	ldr	r3, [r3, #0]
 801fdc4:	695b      	ldr	r3, [r3, #20]
 801fdc6:	627b      	str	r3, [r7, #36]	; 0x24
 801fdc8:	687b      	ldr	r3, [r7, #4]
 801fdca:	681b      	ldr	r3, [r3, #0]
 801fdcc:	699b      	ldr	r3, [r3, #24]
 801fdce:	627b      	str	r3, [r7, #36]	; 0x24
 801fdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fdd2:	e0e7      	b.n	801ffa4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801fdd4:	2300      	movs	r3, #0
 801fdd6:	623b      	str	r3, [r7, #32]
 801fdd8:	687b      	ldr	r3, [r7, #4]
 801fdda:	681b      	ldr	r3, [r3, #0]
 801fddc:	695b      	ldr	r3, [r3, #20]
 801fdde:	623b      	str	r3, [r7, #32]
 801fde0:	687b      	ldr	r3, [r7, #4]
 801fde2:	681b      	ldr	r3, [r3, #0]
 801fde4:	699b      	ldr	r3, [r3, #24]
 801fde6:	623b      	str	r3, [r7, #32]
 801fde8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801fdea:	687b      	ldr	r3, [r7, #4]
 801fdec:	681b      	ldr	r3, [r3, #0]
 801fdee:	681a      	ldr	r2, [r3, #0]
 801fdf0:	687b      	ldr	r3, [r7, #4]
 801fdf2:	681b      	ldr	r3, [r3, #0]
 801fdf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fdf8:	601a      	str	r2, [r3, #0]
 801fdfa:	e0d3      	b.n	801ffa4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 801fdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fdfe:	2b08      	cmp	r3, #8
 801fe00:	d02e      	beq.n	801fe60 <I2C_Master_ADDR+0x1b2>
 801fe02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fe04:	2b20      	cmp	r3, #32
 801fe06:	d02b      	beq.n	801fe60 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 801fe08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fe0a:	2b12      	cmp	r3, #18
 801fe0c:	d102      	bne.n	801fe14 <I2C_Master_ADDR+0x166>
 801fe0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fe10:	2b01      	cmp	r3, #1
 801fe12:	d125      	bne.n	801fe60 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801fe14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fe16:	2b04      	cmp	r3, #4
 801fe18:	d00e      	beq.n	801fe38 <I2C_Master_ADDR+0x18a>
 801fe1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fe1c:	2b02      	cmp	r3, #2
 801fe1e:	d00b      	beq.n	801fe38 <I2C_Master_ADDR+0x18a>
 801fe20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fe22:	2b10      	cmp	r3, #16
 801fe24:	d008      	beq.n	801fe38 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801fe26:	687b      	ldr	r3, [r7, #4]
 801fe28:	681b      	ldr	r3, [r3, #0]
 801fe2a:	681a      	ldr	r2, [r3, #0]
 801fe2c:	687b      	ldr	r3, [r7, #4]
 801fe2e:	681b      	ldr	r3, [r3, #0]
 801fe30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801fe34:	601a      	str	r2, [r3, #0]
 801fe36:	e007      	b.n	801fe48 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801fe38:	687b      	ldr	r3, [r7, #4]
 801fe3a:	681b      	ldr	r3, [r3, #0]
 801fe3c:	681a      	ldr	r2, [r3, #0]
 801fe3e:	687b      	ldr	r3, [r7, #4]
 801fe40:	681b      	ldr	r3, [r3, #0]
 801fe42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801fe46:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801fe48:	2300      	movs	r3, #0
 801fe4a:	61fb      	str	r3, [r7, #28]
 801fe4c:	687b      	ldr	r3, [r7, #4]
 801fe4e:	681b      	ldr	r3, [r3, #0]
 801fe50:	695b      	ldr	r3, [r3, #20]
 801fe52:	61fb      	str	r3, [r7, #28]
 801fe54:	687b      	ldr	r3, [r7, #4]
 801fe56:	681b      	ldr	r3, [r3, #0]
 801fe58:	699b      	ldr	r3, [r3, #24]
 801fe5a:	61fb      	str	r3, [r7, #28]
 801fe5c:	69fb      	ldr	r3, [r7, #28]
 801fe5e:	e0a1      	b.n	801ffa4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801fe60:	687b      	ldr	r3, [r7, #4]
 801fe62:	681b      	ldr	r3, [r3, #0]
 801fe64:	681a      	ldr	r2, [r3, #0]
 801fe66:	687b      	ldr	r3, [r7, #4]
 801fe68:	681b      	ldr	r3, [r3, #0]
 801fe6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801fe6e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801fe70:	2300      	movs	r3, #0
 801fe72:	61bb      	str	r3, [r7, #24]
 801fe74:	687b      	ldr	r3, [r7, #4]
 801fe76:	681b      	ldr	r3, [r3, #0]
 801fe78:	695b      	ldr	r3, [r3, #20]
 801fe7a:	61bb      	str	r3, [r7, #24]
 801fe7c:	687b      	ldr	r3, [r7, #4]
 801fe7e:	681b      	ldr	r3, [r3, #0]
 801fe80:	699b      	ldr	r3, [r3, #24]
 801fe82:	61bb      	str	r3, [r7, #24]
 801fe84:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801fe86:	687b      	ldr	r3, [r7, #4]
 801fe88:	681b      	ldr	r3, [r3, #0]
 801fe8a:	681a      	ldr	r2, [r3, #0]
 801fe8c:	687b      	ldr	r3, [r7, #4]
 801fe8e:	681b      	ldr	r3, [r3, #0]
 801fe90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fe94:	601a      	str	r2, [r3, #0]
 801fe96:	e085      	b.n	801ffa4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 801fe98:	687b      	ldr	r3, [r7, #4]
 801fe9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801fe9c:	b29b      	uxth	r3, r3
 801fe9e:	2b02      	cmp	r3, #2
 801fea0:	d14d      	bne.n	801ff3e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801fea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fea4:	2b04      	cmp	r3, #4
 801fea6:	d016      	beq.n	801fed6 <I2C_Master_ADDR+0x228>
 801fea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801feaa:	2b02      	cmp	r3, #2
 801feac:	d013      	beq.n	801fed6 <I2C_Master_ADDR+0x228>
 801feae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801feb0:	2b10      	cmp	r3, #16
 801feb2:	d010      	beq.n	801fed6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801feb4:	687b      	ldr	r3, [r7, #4]
 801feb6:	681b      	ldr	r3, [r3, #0]
 801feb8:	681a      	ldr	r2, [r3, #0]
 801feba:	687b      	ldr	r3, [r7, #4]
 801febc:	681b      	ldr	r3, [r3, #0]
 801febe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801fec2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801fec4:	687b      	ldr	r3, [r7, #4]
 801fec6:	681b      	ldr	r3, [r3, #0]
 801fec8:	681a      	ldr	r2, [r3, #0]
 801feca:	687b      	ldr	r3, [r7, #4]
 801fecc:	681b      	ldr	r3, [r3, #0]
 801fece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801fed2:	601a      	str	r2, [r3, #0]
 801fed4:	e007      	b.n	801fee6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801fed6:	687b      	ldr	r3, [r7, #4]
 801fed8:	681b      	ldr	r3, [r3, #0]
 801feda:	681a      	ldr	r2, [r3, #0]
 801fedc:	687b      	ldr	r3, [r7, #4]
 801fede:	681b      	ldr	r3, [r3, #0]
 801fee0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801fee4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801fee6:	687b      	ldr	r3, [r7, #4]
 801fee8:	681b      	ldr	r3, [r3, #0]
 801feea:	685b      	ldr	r3, [r3, #4]
 801feec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801fef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801fef4:	d117      	bne.n	801ff26 <I2C_Master_ADDR+0x278>
 801fef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fef8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801fefc:	d00b      	beq.n	801ff16 <I2C_Master_ADDR+0x268>
 801fefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ff00:	2b01      	cmp	r3, #1
 801ff02:	d008      	beq.n	801ff16 <I2C_Master_ADDR+0x268>
 801ff04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ff06:	2b08      	cmp	r3, #8
 801ff08:	d005      	beq.n	801ff16 <I2C_Master_ADDR+0x268>
 801ff0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ff0c:	2b10      	cmp	r3, #16
 801ff0e:	d002      	beq.n	801ff16 <I2C_Master_ADDR+0x268>
 801ff10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ff12:	2b20      	cmp	r3, #32
 801ff14:	d107      	bne.n	801ff26 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801ff16:	687b      	ldr	r3, [r7, #4]
 801ff18:	681b      	ldr	r3, [r3, #0]
 801ff1a:	685a      	ldr	r2, [r3, #4]
 801ff1c:	687b      	ldr	r3, [r7, #4]
 801ff1e:	681b      	ldr	r3, [r3, #0]
 801ff20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801ff24:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ff26:	2300      	movs	r3, #0
 801ff28:	617b      	str	r3, [r7, #20]
 801ff2a:	687b      	ldr	r3, [r7, #4]
 801ff2c:	681b      	ldr	r3, [r3, #0]
 801ff2e:	695b      	ldr	r3, [r3, #20]
 801ff30:	617b      	str	r3, [r7, #20]
 801ff32:	687b      	ldr	r3, [r7, #4]
 801ff34:	681b      	ldr	r3, [r3, #0]
 801ff36:	699b      	ldr	r3, [r3, #24]
 801ff38:	617b      	str	r3, [r7, #20]
 801ff3a:	697b      	ldr	r3, [r7, #20]
 801ff3c:	e032      	b.n	801ffa4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ff3e:	687b      	ldr	r3, [r7, #4]
 801ff40:	681b      	ldr	r3, [r3, #0]
 801ff42:	681a      	ldr	r2, [r3, #0]
 801ff44:	687b      	ldr	r3, [r7, #4]
 801ff46:	681b      	ldr	r3, [r3, #0]
 801ff48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801ff4c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801ff4e:	687b      	ldr	r3, [r7, #4]
 801ff50:	681b      	ldr	r3, [r3, #0]
 801ff52:	685b      	ldr	r3, [r3, #4]
 801ff54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ff58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ff5c:	d117      	bne.n	801ff8e <I2C_Master_ADDR+0x2e0>
 801ff5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ff60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801ff64:	d00b      	beq.n	801ff7e <I2C_Master_ADDR+0x2d0>
 801ff66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ff68:	2b01      	cmp	r3, #1
 801ff6a:	d008      	beq.n	801ff7e <I2C_Master_ADDR+0x2d0>
 801ff6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ff6e:	2b08      	cmp	r3, #8
 801ff70:	d005      	beq.n	801ff7e <I2C_Master_ADDR+0x2d0>
 801ff72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ff74:	2b10      	cmp	r3, #16
 801ff76:	d002      	beq.n	801ff7e <I2C_Master_ADDR+0x2d0>
 801ff78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ff7a:	2b20      	cmp	r3, #32
 801ff7c:	d107      	bne.n	801ff8e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801ff7e:	687b      	ldr	r3, [r7, #4]
 801ff80:	681b      	ldr	r3, [r3, #0]
 801ff82:	685a      	ldr	r2, [r3, #4]
 801ff84:	687b      	ldr	r3, [r7, #4]
 801ff86:	681b      	ldr	r3, [r3, #0]
 801ff88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801ff8c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ff8e:	2300      	movs	r3, #0
 801ff90:	613b      	str	r3, [r7, #16]
 801ff92:	687b      	ldr	r3, [r7, #4]
 801ff94:	681b      	ldr	r3, [r3, #0]
 801ff96:	695b      	ldr	r3, [r3, #20]
 801ff98:	613b      	str	r3, [r7, #16]
 801ff9a:	687b      	ldr	r3, [r7, #4]
 801ff9c:	681b      	ldr	r3, [r3, #0]
 801ff9e:	699b      	ldr	r3, [r3, #24]
 801ffa0:	613b      	str	r3, [r7, #16]
 801ffa2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 801ffa4:	687b      	ldr	r3, [r7, #4]
 801ffa6:	2200      	movs	r2, #0
 801ffa8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 801ffaa:	e00b      	b.n	801ffc4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ffac:	2300      	movs	r3, #0
 801ffae:	60fb      	str	r3, [r7, #12]
 801ffb0:	687b      	ldr	r3, [r7, #4]
 801ffb2:	681b      	ldr	r3, [r3, #0]
 801ffb4:	695b      	ldr	r3, [r3, #20]
 801ffb6:	60fb      	str	r3, [r7, #12]
 801ffb8:	687b      	ldr	r3, [r7, #4]
 801ffba:	681b      	ldr	r3, [r3, #0]
 801ffbc:	699b      	ldr	r3, [r3, #24]
 801ffbe:	60fb      	str	r3, [r7, #12]
 801ffc0:	68fb      	ldr	r3, [r7, #12]
}
 801ffc2:	e7ff      	b.n	801ffc4 <I2C_Master_ADDR+0x316>
 801ffc4:	bf00      	nop
 801ffc6:	3744      	adds	r7, #68	; 0x44
 801ffc8:	46bd      	mov	sp, r7
 801ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffce:	4770      	bx	lr

0801ffd0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801ffd0:	b580      	push	{r7, lr}
 801ffd2:	b084      	sub	sp, #16
 801ffd4:	af00      	add	r7, sp, #0
 801ffd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801ffd8:	687b      	ldr	r3, [r7, #4]
 801ffda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ffde:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801ffe0:	687b      	ldr	r3, [r7, #4]
 801ffe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ffe4:	b29b      	uxth	r3, r3
 801ffe6:	2b00      	cmp	r3, #0
 801ffe8:	d02b      	beq.n	8020042 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801ffea:	687b      	ldr	r3, [r7, #4]
 801ffec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ffee:	781a      	ldrb	r2, [r3, #0]
 801fff0:	687b      	ldr	r3, [r7, #4]
 801fff2:	681b      	ldr	r3, [r3, #0]
 801fff4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801fff6:	687b      	ldr	r3, [r7, #4]
 801fff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fffa:	1c5a      	adds	r2, r3, #1
 801fffc:	687b      	ldr	r3, [r7, #4]
 801fffe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8020000:	687b      	ldr	r3, [r7, #4]
 8020002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8020004:	b29b      	uxth	r3, r3
 8020006:	3b01      	subs	r3, #1
 8020008:	b29a      	uxth	r2, r3
 802000a:	687b      	ldr	r3, [r7, #4]
 802000c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 802000e:	687b      	ldr	r3, [r7, #4]
 8020010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8020012:	b29b      	uxth	r3, r3
 8020014:	2b00      	cmp	r3, #0
 8020016:	d114      	bne.n	8020042 <I2C_SlaveTransmit_TXE+0x72>
 8020018:	7bfb      	ldrb	r3, [r7, #15]
 802001a:	2b29      	cmp	r3, #41	; 0x29
 802001c:	d111      	bne.n	8020042 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 802001e:	687b      	ldr	r3, [r7, #4]
 8020020:	681b      	ldr	r3, [r3, #0]
 8020022:	685a      	ldr	r2, [r3, #4]
 8020024:	687b      	ldr	r3, [r7, #4]
 8020026:	681b      	ldr	r3, [r3, #0]
 8020028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802002c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 802002e:	687b      	ldr	r3, [r7, #4]
 8020030:	2221      	movs	r2, #33	; 0x21
 8020032:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8020034:	687b      	ldr	r3, [r7, #4]
 8020036:	2228      	movs	r2, #40	; 0x28
 8020038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 802003c:	6878      	ldr	r0, [r7, #4]
 802003e:	f7ff f9fb 	bl	801f438 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8020042:	bf00      	nop
 8020044:	3710      	adds	r7, #16
 8020046:	46bd      	mov	sp, r7
 8020048:	bd80      	pop	{r7, pc}

0802004a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 802004a:	b480      	push	{r7}
 802004c:	b083      	sub	sp, #12
 802004e:	af00      	add	r7, sp, #0
 8020050:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8020052:	687b      	ldr	r3, [r7, #4]
 8020054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8020056:	b29b      	uxth	r3, r3
 8020058:	2b00      	cmp	r3, #0
 802005a:	d011      	beq.n	8020080 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 802005c:	687b      	ldr	r3, [r7, #4]
 802005e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020060:	781a      	ldrb	r2, [r3, #0]
 8020062:	687b      	ldr	r3, [r7, #4]
 8020064:	681b      	ldr	r3, [r3, #0]
 8020066:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8020068:	687b      	ldr	r3, [r7, #4]
 802006a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802006c:	1c5a      	adds	r2, r3, #1
 802006e:	687b      	ldr	r3, [r7, #4]
 8020070:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8020072:	687b      	ldr	r3, [r7, #4]
 8020074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8020076:	b29b      	uxth	r3, r3
 8020078:	3b01      	subs	r3, #1
 802007a:	b29a      	uxth	r2, r3
 802007c:	687b      	ldr	r3, [r7, #4]
 802007e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8020080:	bf00      	nop
 8020082:	370c      	adds	r7, #12
 8020084:	46bd      	mov	sp, r7
 8020086:	f85d 7b04 	ldr.w	r7, [sp], #4
 802008a:	4770      	bx	lr

0802008c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 802008c:	b580      	push	{r7, lr}
 802008e:	b084      	sub	sp, #16
 8020090:	af00      	add	r7, sp, #0
 8020092:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8020094:	687b      	ldr	r3, [r7, #4]
 8020096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802009a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 802009c:	687b      	ldr	r3, [r7, #4]
 802009e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80200a0:	b29b      	uxth	r3, r3
 80200a2:	2b00      	cmp	r3, #0
 80200a4:	d02c      	beq.n	8020100 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80200a6:	687b      	ldr	r3, [r7, #4]
 80200a8:	681b      	ldr	r3, [r3, #0]
 80200aa:	691a      	ldr	r2, [r3, #16]
 80200ac:	687b      	ldr	r3, [r7, #4]
 80200ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80200b0:	b2d2      	uxtb	r2, r2
 80200b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80200b4:	687b      	ldr	r3, [r7, #4]
 80200b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80200b8:	1c5a      	adds	r2, r3, #1
 80200ba:	687b      	ldr	r3, [r7, #4]
 80200bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80200be:	687b      	ldr	r3, [r7, #4]
 80200c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80200c2:	b29b      	uxth	r3, r3
 80200c4:	3b01      	subs	r3, #1
 80200c6:	b29a      	uxth	r2, r3
 80200c8:	687b      	ldr	r3, [r7, #4]
 80200ca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80200cc:	687b      	ldr	r3, [r7, #4]
 80200ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80200d0:	b29b      	uxth	r3, r3
 80200d2:	2b00      	cmp	r3, #0
 80200d4:	d114      	bne.n	8020100 <I2C_SlaveReceive_RXNE+0x74>
 80200d6:	7bfb      	ldrb	r3, [r7, #15]
 80200d8:	2b2a      	cmp	r3, #42	; 0x2a
 80200da:	d111      	bne.n	8020100 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80200dc:	687b      	ldr	r3, [r7, #4]
 80200de:	681b      	ldr	r3, [r3, #0]
 80200e0:	685a      	ldr	r2, [r3, #4]
 80200e2:	687b      	ldr	r3, [r7, #4]
 80200e4:	681b      	ldr	r3, [r3, #0]
 80200e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80200ea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80200ec:	687b      	ldr	r3, [r7, #4]
 80200ee:	2222      	movs	r2, #34	; 0x22
 80200f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80200f2:	687b      	ldr	r3, [r7, #4]
 80200f4:	2228      	movs	r2, #40	; 0x28
 80200f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80200fa:	6878      	ldr	r0, [r7, #4]
 80200fc:	f7ff f9a6 	bl	801f44c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8020100:	bf00      	nop
 8020102:	3710      	adds	r7, #16
 8020104:	46bd      	mov	sp, r7
 8020106:	bd80      	pop	{r7, pc}

08020108 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8020108:	b480      	push	{r7}
 802010a:	b083      	sub	sp, #12
 802010c:	af00      	add	r7, sp, #0
 802010e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8020110:	687b      	ldr	r3, [r7, #4]
 8020112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8020114:	b29b      	uxth	r3, r3
 8020116:	2b00      	cmp	r3, #0
 8020118:	d012      	beq.n	8020140 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802011a:	687b      	ldr	r3, [r7, #4]
 802011c:	681b      	ldr	r3, [r3, #0]
 802011e:	691a      	ldr	r2, [r3, #16]
 8020120:	687b      	ldr	r3, [r7, #4]
 8020122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020124:	b2d2      	uxtb	r2, r2
 8020126:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8020128:	687b      	ldr	r3, [r7, #4]
 802012a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802012c:	1c5a      	adds	r2, r3, #1
 802012e:	687b      	ldr	r3, [r7, #4]
 8020130:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8020132:	687b      	ldr	r3, [r7, #4]
 8020134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8020136:	b29b      	uxth	r3, r3
 8020138:	3b01      	subs	r3, #1
 802013a:	b29a      	uxth	r2, r3
 802013c:	687b      	ldr	r3, [r7, #4]
 802013e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8020140:	bf00      	nop
 8020142:	370c      	adds	r7, #12
 8020144:	46bd      	mov	sp, r7
 8020146:	f85d 7b04 	ldr.w	r7, [sp], #4
 802014a:	4770      	bx	lr

0802014c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 802014c:	b580      	push	{r7, lr}
 802014e:	b084      	sub	sp, #16
 8020150:	af00      	add	r7, sp, #0
 8020152:	6078      	str	r0, [r7, #4]
 8020154:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8020156:	2300      	movs	r3, #0
 8020158:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 802015a:	687b      	ldr	r3, [r7, #4]
 802015c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8020160:	b2db      	uxtb	r3, r3
 8020162:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8020166:	2b28      	cmp	r3, #40	; 0x28
 8020168:	d127      	bne.n	80201ba <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 802016a:	687b      	ldr	r3, [r7, #4]
 802016c:	681b      	ldr	r3, [r3, #0]
 802016e:	685a      	ldr	r2, [r3, #4]
 8020170:	687b      	ldr	r3, [r7, #4]
 8020172:	681b      	ldr	r3, [r3, #0]
 8020174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020178:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 802017a:	683b      	ldr	r3, [r7, #0]
 802017c:	089b      	lsrs	r3, r3, #2
 802017e:	f003 0301 	and.w	r3, r3, #1
 8020182:	2b00      	cmp	r3, #0
 8020184:	d101      	bne.n	802018a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8020186:	2301      	movs	r3, #1
 8020188:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 802018a:	683b      	ldr	r3, [r7, #0]
 802018c:	09db      	lsrs	r3, r3, #7
 802018e:	f003 0301 	and.w	r3, r3, #1
 8020192:	2b00      	cmp	r3, #0
 8020194:	d103      	bne.n	802019e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8020196:	687b      	ldr	r3, [r7, #4]
 8020198:	68db      	ldr	r3, [r3, #12]
 802019a:	81bb      	strh	r3, [r7, #12]
 802019c:	e002      	b.n	80201a4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 802019e:	687b      	ldr	r3, [r7, #4]
 80201a0:	699b      	ldr	r3, [r3, #24]
 80201a2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80201a4:	687b      	ldr	r3, [r7, #4]
 80201a6:	2200      	movs	r2, #0
 80201a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80201ac:	89ba      	ldrh	r2, [r7, #12]
 80201ae:	7bfb      	ldrb	r3, [r7, #15]
 80201b0:	4619      	mov	r1, r3
 80201b2:	6878      	ldr	r0, [r7, #4]
 80201b4:	f7ff f954 	bl	801f460 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80201b8:	e00e      	b.n	80201d8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80201ba:	2300      	movs	r3, #0
 80201bc:	60bb      	str	r3, [r7, #8]
 80201be:	687b      	ldr	r3, [r7, #4]
 80201c0:	681b      	ldr	r3, [r3, #0]
 80201c2:	695b      	ldr	r3, [r3, #20]
 80201c4:	60bb      	str	r3, [r7, #8]
 80201c6:	687b      	ldr	r3, [r7, #4]
 80201c8:	681b      	ldr	r3, [r3, #0]
 80201ca:	699b      	ldr	r3, [r3, #24]
 80201cc:	60bb      	str	r3, [r7, #8]
 80201ce:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80201d0:	687b      	ldr	r3, [r7, #4]
 80201d2:	2200      	movs	r2, #0
 80201d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80201d8:	bf00      	nop
 80201da:	3710      	adds	r7, #16
 80201dc:	46bd      	mov	sp, r7
 80201de:	bd80      	pop	{r7, pc}

080201e0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80201e0:	b580      	push	{r7, lr}
 80201e2:	b084      	sub	sp, #16
 80201e4:	af00      	add	r7, sp, #0
 80201e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80201e8:	687b      	ldr	r3, [r7, #4]
 80201ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80201ee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80201f0:	687b      	ldr	r3, [r7, #4]
 80201f2:	681b      	ldr	r3, [r3, #0]
 80201f4:	685a      	ldr	r2, [r3, #4]
 80201f6:	687b      	ldr	r3, [r7, #4]
 80201f8:	681b      	ldr	r3, [r3, #0]
 80201fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80201fe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8020200:	2300      	movs	r3, #0
 8020202:	60bb      	str	r3, [r7, #8]
 8020204:	687b      	ldr	r3, [r7, #4]
 8020206:	681b      	ldr	r3, [r3, #0]
 8020208:	695b      	ldr	r3, [r3, #20]
 802020a:	60bb      	str	r3, [r7, #8]
 802020c:	687b      	ldr	r3, [r7, #4]
 802020e:	681b      	ldr	r3, [r3, #0]
 8020210:	681a      	ldr	r2, [r3, #0]
 8020212:	687b      	ldr	r3, [r7, #4]
 8020214:	681b      	ldr	r3, [r3, #0]
 8020216:	f042 0201 	orr.w	r2, r2, #1
 802021a:	601a      	str	r2, [r3, #0]
 802021c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802021e:	687b      	ldr	r3, [r7, #4]
 8020220:	681b      	ldr	r3, [r3, #0]
 8020222:	681a      	ldr	r2, [r3, #0]
 8020224:	687b      	ldr	r3, [r7, #4]
 8020226:	681b      	ldr	r3, [r3, #0]
 8020228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802022c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 802022e:	687b      	ldr	r3, [r7, #4]
 8020230:	681b      	ldr	r3, [r3, #0]
 8020232:	685b      	ldr	r3, [r3, #4]
 8020234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8020238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802023c:	d172      	bne.n	8020324 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 802023e:	7bfb      	ldrb	r3, [r7, #15]
 8020240:	2b22      	cmp	r3, #34	; 0x22
 8020242:	d002      	beq.n	802024a <I2C_Slave_STOPF+0x6a>
 8020244:	7bfb      	ldrb	r3, [r7, #15]
 8020246:	2b2a      	cmp	r3, #42	; 0x2a
 8020248:	d135      	bne.n	80202b6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 802024a:	687b      	ldr	r3, [r7, #4]
 802024c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802024e:	681b      	ldr	r3, [r3, #0]
 8020250:	685b      	ldr	r3, [r3, #4]
 8020252:	b29a      	uxth	r2, r3
 8020254:	687b      	ldr	r3, [r7, #4]
 8020256:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8020258:	687b      	ldr	r3, [r7, #4]
 802025a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802025c:	b29b      	uxth	r3, r3
 802025e:	2b00      	cmp	r3, #0
 8020260:	d005      	beq.n	802026e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8020262:	687b      	ldr	r3, [r7, #4]
 8020264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020266:	f043 0204 	orr.w	r2, r3, #4
 802026a:	687b      	ldr	r3, [r7, #4]
 802026c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 802026e:	687b      	ldr	r3, [r7, #4]
 8020270:	681b      	ldr	r3, [r3, #0]
 8020272:	685a      	ldr	r2, [r3, #4]
 8020274:	687b      	ldr	r3, [r7, #4]
 8020276:	681b      	ldr	r3, [r3, #0]
 8020278:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802027c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802027e:	687b      	ldr	r3, [r7, #4]
 8020280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020282:	4618      	mov	r0, r3
 8020284:	f7fd fc90 	bl	801dba8 <HAL_DMA_GetState>
 8020288:	4603      	mov	r3, r0
 802028a:	2b01      	cmp	r3, #1
 802028c:	d049      	beq.n	8020322 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 802028e:	687b      	ldr	r3, [r7, #4]
 8020290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020292:	4a69      	ldr	r2, [pc, #420]	; (8020438 <I2C_Slave_STOPF+0x258>)
 8020294:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8020296:	687b      	ldr	r3, [r7, #4]
 8020298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802029a:	4618      	mov	r0, r3
 802029c:	f7fd fad8 	bl	801d850 <HAL_DMA_Abort_IT>
 80202a0:	4603      	mov	r3, r0
 80202a2:	2b00      	cmp	r3, #0
 80202a4:	d03d      	beq.n	8020322 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80202a6:	687b      	ldr	r3, [r7, #4]
 80202a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80202aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80202ac:	687a      	ldr	r2, [r7, #4]
 80202ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80202b0:	4610      	mov	r0, r2
 80202b2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80202b4:	e035      	b.n	8020322 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80202b6:	687b      	ldr	r3, [r7, #4]
 80202b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80202ba:	681b      	ldr	r3, [r3, #0]
 80202bc:	685b      	ldr	r3, [r3, #4]
 80202be:	b29a      	uxth	r2, r3
 80202c0:	687b      	ldr	r3, [r7, #4]
 80202c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80202c4:	687b      	ldr	r3, [r7, #4]
 80202c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80202c8:	b29b      	uxth	r3, r3
 80202ca:	2b00      	cmp	r3, #0
 80202cc:	d005      	beq.n	80202da <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80202ce:	687b      	ldr	r3, [r7, #4]
 80202d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80202d2:	f043 0204 	orr.w	r2, r3, #4
 80202d6:	687b      	ldr	r3, [r7, #4]
 80202d8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80202da:	687b      	ldr	r3, [r7, #4]
 80202dc:	681b      	ldr	r3, [r3, #0]
 80202de:	685a      	ldr	r2, [r3, #4]
 80202e0:	687b      	ldr	r3, [r7, #4]
 80202e2:	681b      	ldr	r3, [r3, #0]
 80202e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80202e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80202ea:	687b      	ldr	r3, [r7, #4]
 80202ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80202ee:	4618      	mov	r0, r3
 80202f0:	f7fd fc5a 	bl	801dba8 <HAL_DMA_GetState>
 80202f4:	4603      	mov	r3, r0
 80202f6:	2b01      	cmp	r3, #1
 80202f8:	d014      	beq.n	8020324 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80202fa:	687b      	ldr	r3, [r7, #4]
 80202fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80202fe:	4a4e      	ldr	r2, [pc, #312]	; (8020438 <I2C_Slave_STOPF+0x258>)
 8020300:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8020302:	687b      	ldr	r3, [r7, #4]
 8020304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020306:	4618      	mov	r0, r3
 8020308:	f7fd faa2 	bl	801d850 <HAL_DMA_Abort_IT>
 802030c:	4603      	mov	r3, r0
 802030e:	2b00      	cmp	r3, #0
 8020310:	d008      	beq.n	8020324 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8020312:	687b      	ldr	r3, [r7, #4]
 8020314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8020318:	687a      	ldr	r2, [r7, #4]
 802031a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 802031c:	4610      	mov	r0, r2
 802031e:	4798      	blx	r3
 8020320:	e000      	b.n	8020324 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8020322:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8020324:	687b      	ldr	r3, [r7, #4]
 8020326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8020328:	b29b      	uxth	r3, r3
 802032a:	2b00      	cmp	r3, #0
 802032c:	d03e      	beq.n	80203ac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 802032e:	687b      	ldr	r3, [r7, #4]
 8020330:	681b      	ldr	r3, [r3, #0]
 8020332:	695b      	ldr	r3, [r3, #20]
 8020334:	f003 0304 	and.w	r3, r3, #4
 8020338:	2b04      	cmp	r3, #4
 802033a:	d112      	bne.n	8020362 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802033c:	687b      	ldr	r3, [r7, #4]
 802033e:	681b      	ldr	r3, [r3, #0]
 8020340:	691a      	ldr	r2, [r3, #16]
 8020342:	687b      	ldr	r3, [r7, #4]
 8020344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020346:	b2d2      	uxtb	r2, r2
 8020348:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802034a:	687b      	ldr	r3, [r7, #4]
 802034c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802034e:	1c5a      	adds	r2, r3, #1
 8020350:	687b      	ldr	r3, [r7, #4]
 8020352:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8020354:	687b      	ldr	r3, [r7, #4]
 8020356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8020358:	b29b      	uxth	r3, r3
 802035a:	3b01      	subs	r3, #1
 802035c:	b29a      	uxth	r2, r3
 802035e:	687b      	ldr	r3, [r7, #4]
 8020360:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8020362:	687b      	ldr	r3, [r7, #4]
 8020364:	681b      	ldr	r3, [r3, #0]
 8020366:	695b      	ldr	r3, [r3, #20]
 8020368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802036c:	2b40      	cmp	r3, #64	; 0x40
 802036e:	d112      	bne.n	8020396 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8020370:	687b      	ldr	r3, [r7, #4]
 8020372:	681b      	ldr	r3, [r3, #0]
 8020374:	691a      	ldr	r2, [r3, #16]
 8020376:	687b      	ldr	r3, [r7, #4]
 8020378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802037a:	b2d2      	uxtb	r2, r2
 802037c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802037e:	687b      	ldr	r3, [r7, #4]
 8020380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020382:	1c5a      	adds	r2, r3, #1
 8020384:	687b      	ldr	r3, [r7, #4]
 8020386:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8020388:	687b      	ldr	r3, [r7, #4]
 802038a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802038c:	b29b      	uxth	r3, r3
 802038e:	3b01      	subs	r3, #1
 8020390:	b29a      	uxth	r2, r3
 8020392:	687b      	ldr	r3, [r7, #4]
 8020394:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8020396:	687b      	ldr	r3, [r7, #4]
 8020398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802039a:	b29b      	uxth	r3, r3
 802039c:	2b00      	cmp	r3, #0
 802039e:	d005      	beq.n	80203ac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80203a0:	687b      	ldr	r3, [r7, #4]
 80203a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80203a4:	f043 0204 	orr.w	r2, r3, #4
 80203a8:	687b      	ldr	r3, [r7, #4]
 80203aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80203ac:	687b      	ldr	r3, [r7, #4]
 80203ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80203b0:	2b00      	cmp	r3, #0
 80203b2:	d003      	beq.n	80203bc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80203b4:	6878      	ldr	r0, [r7, #4]
 80203b6:	f000 f8b3 	bl	8020520 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80203ba:	e039      	b.n	8020430 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80203bc:	7bfb      	ldrb	r3, [r7, #15]
 80203be:	2b2a      	cmp	r3, #42	; 0x2a
 80203c0:	d109      	bne.n	80203d6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80203c2:	687b      	ldr	r3, [r7, #4]
 80203c4:	2200      	movs	r2, #0
 80203c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80203c8:	687b      	ldr	r3, [r7, #4]
 80203ca:	2228      	movs	r2, #40	; 0x28
 80203cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80203d0:	6878      	ldr	r0, [r7, #4]
 80203d2:	f7ff f83b 	bl	801f44c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80203d6:	687b      	ldr	r3, [r7, #4]
 80203d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80203dc:	b2db      	uxtb	r3, r3
 80203de:	2b28      	cmp	r3, #40	; 0x28
 80203e0:	d111      	bne.n	8020406 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80203e2:	687b      	ldr	r3, [r7, #4]
 80203e4:	4a15      	ldr	r2, [pc, #84]	; (802043c <I2C_Slave_STOPF+0x25c>)
 80203e6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80203e8:	687b      	ldr	r3, [r7, #4]
 80203ea:	2200      	movs	r2, #0
 80203ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80203ee:	687b      	ldr	r3, [r7, #4]
 80203f0:	2220      	movs	r2, #32
 80203f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80203f6:	687b      	ldr	r3, [r7, #4]
 80203f8:	2200      	movs	r2, #0
 80203fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80203fe:	6878      	ldr	r0, [r7, #4]
 8020400:	f7ff f83c 	bl	801f47c <HAL_I2C_ListenCpltCallback>
}
 8020404:	e014      	b.n	8020430 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8020406:	687b      	ldr	r3, [r7, #4]
 8020408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802040a:	2b22      	cmp	r3, #34	; 0x22
 802040c:	d002      	beq.n	8020414 <I2C_Slave_STOPF+0x234>
 802040e:	7bfb      	ldrb	r3, [r7, #15]
 8020410:	2b22      	cmp	r3, #34	; 0x22
 8020412:	d10d      	bne.n	8020430 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8020414:	687b      	ldr	r3, [r7, #4]
 8020416:	2200      	movs	r2, #0
 8020418:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 802041a:	687b      	ldr	r3, [r7, #4]
 802041c:	2220      	movs	r2, #32
 802041e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8020422:	687b      	ldr	r3, [r7, #4]
 8020424:	2200      	movs	r2, #0
 8020426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 802042a:	6878      	ldr	r0, [r7, #4]
 802042c:	f7ff f80e 	bl	801f44c <HAL_I2C_SlaveRxCpltCallback>
}
 8020430:	bf00      	nop
 8020432:	3710      	adds	r7, #16
 8020434:	46bd      	mov	sp, r7
 8020436:	bd80      	pop	{r7, pc}
 8020438:	08020ca5 	.word	0x08020ca5
 802043c:	ffff0000 	.word	0xffff0000

08020440 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8020440:	b580      	push	{r7, lr}
 8020442:	b084      	sub	sp, #16
 8020444:	af00      	add	r7, sp, #0
 8020446:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8020448:	687b      	ldr	r3, [r7, #4]
 802044a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802044e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8020450:	687b      	ldr	r3, [r7, #4]
 8020452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020454:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8020456:	68bb      	ldr	r3, [r7, #8]
 8020458:	2b08      	cmp	r3, #8
 802045a:	d002      	beq.n	8020462 <I2C_Slave_AF+0x22>
 802045c:	68bb      	ldr	r3, [r7, #8]
 802045e:	2b20      	cmp	r3, #32
 8020460:	d129      	bne.n	80204b6 <I2C_Slave_AF+0x76>
 8020462:	7bfb      	ldrb	r3, [r7, #15]
 8020464:	2b28      	cmp	r3, #40	; 0x28
 8020466:	d126      	bne.n	80204b6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8020468:	687b      	ldr	r3, [r7, #4]
 802046a:	4a2c      	ldr	r2, [pc, #176]	; (802051c <I2C_Slave_AF+0xdc>)
 802046c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802046e:	687b      	ldr	r3, [r7, #4]
 8020470:	681b      	ldr	r3, [r3, #0]
 8020472:	685a      	ldr	r2, [r3, #4]
 8020474:	687b      	ldr	r3, [r7, #4]
 8020476:	681b      	ldr	r3, [r3, #0]
 8020478:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 802047c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802047e:	687b      	ldr	r3, [r7, #4]
 8020480:	681b      	ldr	r3, [r3, #0]
 8020482:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8020486:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8020488:	687b      	ldr	r3, [r7, #4]
 802048a:	681b      	ldr	r3, [r3, #0]
 802048c:	681a      	ldr	r2, [r3, #0]
 802048e:	687b      	ldr	r3, [r7, #4]
 8020490:	681b      	ldr	r3, [r3, #0]
 8020492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020496:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8020498:	687b      	ldr	r3, [r7, #4]
 802049a:	2200      	movs	r2, #0
 802049c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 802049e:	687b      	ldr	r3, [r7, #4]
 80204a0:	2220      	movs	r2, #32
 80204a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80204a6:	687b      	ldr	r3, [r7, #4]
 80204a8:	2200      	movs	r2, #0
 80204aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80204ae:	6878      	ldr	r0, [r7, #4]
 80204b0:	f7fe ffe4 	bl	801f47c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80204b4:	e02e      	b.n	8020514 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80204b6:	7bfb      	ldrb	r3, [r7, #15]
 80204b8:	2b21      	cmp	r3, #33	; 0x21
 80204ba:	d126      	bne.n	802050a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80204bc:	687b      	ldr	r3, [r7, #4]
 80204be:	4a17      	ldr	r2, [pc, #92]	; (802051c <I2C_Slave_AF+0xdc>)
 80204c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80204c2:	687b      	ldr	r3, [r7, #4]
 80204c4:	2221      	movs	r2, #33	; 0x21
 80204c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80204c8:	687b      	ldr	r3, [r7, #4]
 80204ca:	2220      	movs	r2, #32
 80204cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80204d0:	687b      	ldr	r3, [r7, #4]
 80204d2:	2200      	movs	r2, #0
 80204d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80204d8:	687b      	ldr	r3, [r7, #4]
 80204da:	681b      	ldr	r3, [r3, #0]
 80204dc:	685a      	ldr	r2, [r3, #4]
 80204de:	687b      	ldr	r3, [r7, #4]
 80204e0:	681b      	ldr	r3, [r3, #0]
 80204e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80204e6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80204e8:	687b      	ldr	r3, [r7, #4]
 80204ea:	681b      	ldr	r3, [r3, #0]
 80204ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80204f0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80204f2:	687b      	ldr	r3, [r7, #4]
 80204f4:	681b      	ldr	r3, [r3, #0]
 80204f6:	681a      	ldr	r2, [r3, #0]
 80204f8:	687b      	ldr	r3, [r7, #4]
 80204fa:	681b      	ldr	r3, [r3, #0]
 80204fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020500:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8020502:	6878      	ldr	r0, [r7, #4]
 8020504:	f7fe ff98 	bl	801f438 <HAL_I2C_SlaveTxCpltCallback>
}
 8020508:	e004      	b.n	8020514 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802050a:	687b      	ldr	r3, [r7, #4]
 802050c:	681b      	ldr	r3, [r3, #0]
 802050e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8020512:	615a      	str	r2, [r3, #20]
}
 8020514:	bf00      	nop
 8020516:	3710      	adds	r7, #16
 8020518:	46bd      	mov	sp, r7
 802051a:	bd80      	pop	{r7, pc}
 802051c:	ffff0000 	.word	0xffff0000

08020520 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8020520:	b580      	push	{r7, lr}
 8020522:	b084      	sub	sp, #16
 8020524:	af00      	add	r7, sp, #0
 8020526:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8020528:	687b      	ldr	r3, [r7, #4]
 802052a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802052e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8020530:	687b      	ldr	r3, [r7, #4]
 8020532:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8020536:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8020538:	7bbb      	ldrb	r3, [r7, #14]
 802053a:	2b10      	cmp	r3, #16
 802053c:	d002      	beq.n	8020544 <I2C_ITError+0x24>
 802053e:	7bbb      	ldrb	r3, [r7, #14]
 8020540:	2b40      	cmp	r3, #64	; 0x40
 8020542:	d10a      	bne.n	802055a <I2C_ITError+0x3a>
 8020544:	7bfb      	ldrb	r3, [r7, #15]
 8020546:	2b22      	cmp	r3, #34	; 0x22
 8020548:	d107      	bne.n	802055a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 802054a:	687b      	ldr	r3, [r7, #4]
 802054c:	681b      	ldr	r3, [r3, #0]
 802054e:	681a      	ldr	r2, [r3, #0]
 8020550:	687b      	ldr	r3, [r7, #4]
 8020552:	681b      	ldr	r3, [r3, #0]
 8020554:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8020558:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 802055a:	7bfb      	ldrb	r3, [r7, #15]
 802055c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8020560:	2b28      	cmp	r3, #40	; 0x28
 8020562:	d107      	bne.n	8020574 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8020564:	687b      	ldr	r3, [r7, #4]
 8020566:	2200      	movs	r2, #0
 8020568:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 802056a:	687b      	ldr	r3, [r7, #4]
 802056c:	2228      	movs	r2, #40	; 0x28
 802056e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8020572:	e015      	b.n	80205a0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8020574:	687b      	ldr	r3, [r7, #4]
 8020576:	681b      	ldr	r3, [r3, #0]
 8020578:	685b      	ldr	r3, [r3, #4]
 802057a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802057e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8020582:	d00a      	beq.n	802059a <I2C_ITError+0x7a>
 8020584:	7bfb      	ldrb	r3, [r7, #15]
 8020586:	2b60      	cmp	r3, #96	; 0x60
 8020588:	d007      	beq.n	802059a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 802058a:	687b      	ldr	r3, [r7, #4]
 802058c:	2220      	movs	r2, #32
 802058e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8020592:	687b      	ldr	r3, [r7, #4]
 8020594:	2200      	movs	r2, #0
 8020596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 802059a:	687b      	ldr	r3, [r7, #4]
 802059c:	2200      	movs	r2, #0
 802059e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80205a0:	687b      	ldr	r3, [r7, #4]
 80205a2:	681b      	ldr	r3, [r3, #0]
 80205a4:	685b      	ldr	r3, [r3, #4]
 80205a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80205aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80205ae:	d162      	bne.n	8020676 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80205b0:	687b      	ldr	r3, [r7, #4]
 80205b2:	681b      	ldr	r3, [r3, #0]
 80205b4:	685a      	ldr	r2, [r3, #4]
 80205b6:	687b      	ldr	r3, [r7, #4]
 80205b8:	681b      	ldr	r3, [r3, #0]
 80205ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80205be:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80205c0:	687b      	ldr	r3, [r7, #4]
 80205c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80205c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80205c8:	b2db      	uxtb	r3, r3
 80205ca:	2b01      	cmp	r3, #1
 80205cc:	d020      	beq.n	8020610 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80205ce:	687b      	ldr	r3, [r7, #4]
 80205d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80205d2:	4a6a      	ldr	r2, [pc, #424]	; (802077c <I2C_ITError+0x25c>)
 80205d4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80205d6:	687b      	ldr	r3, [r7, #4]
 80205d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80205da:	4618      	mov	r0, r3
 80205dc:	f7fd f938 	bl	801d850 <HAL_DMA_Abort_IT>
 80205e0:	4603      	mov	r3, r0
 80205e2:	2b00      	cmp	r3, #0
 80205e4:	f000 8089 	beq.w	80206fa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80205e8:	687b      	ldr	r3, [r7, #4]
 80205ea:	681b      	ldr	r3, [r3, #0]
 80205ec:	681a      	ldr	r2, [r3, #0]
 80205ee:	687b      	ldr	r3, [r7, #4]
 80205f0:	681b      	ldr	r3, [r3, #0]
 80205f2:	f022 0201 	bic.w	r2, r2, #1
 80205f6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80205f8:	687b      	ldr	r3, [r7, #4]
 80205fa:	2220      	movs	r2, #32
 80205fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8020600:	687b      	ldr	r3, [r7, #4]
 8020602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8020606:	687a      	ldr	r2, [r7, #4]
 8020608:	6b52      	ldr	r2, [r2, #52]	; 0x34
 802060a:	4610      	mov	r0, r2
 802060c:	4798      	blx	r3
 802060e:	e074      	b.n	80206fa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8020610:	687b      	ldr	r3, [r7, #4]
 8020612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020614:	4a59      	ldr	r2, [pc, #356]	; (802077c <I2C_ITError+0x25c>)
 8020616:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8020618:	687b      	ldr	r3, [r7, #4]
 802061a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802061c:	4618      	mov	r0, r3
 802061e:	f7fd f917 	bl	801d850 <HAL_DMA_Abort_IT>
 8020622:	4603      	mov	r3, r0
 8020624:	2b00      	cmp	r3, #0
 8020626:	d068      	beq.n	80206fa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8020628:	687b      	ldr	r3, [r7, #4]
 802062a:	681b      	ldr	r3, [r3, #0]
 802062c:	695b      	ldr	r3, [r3, #20]
 802062e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020632:	2b40      	cmp	r3, #64	; 0x40
 8020634:	d10b      	bne.n	802064e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8020636:	687b      	ldr	r3, [r7, #4]
 8020638:	681b      	ldr	r3, [r3, #0]
 802063a:	691a      	ldr	r2, [r3, #16]
 802063c:	687b      	ldr	r3, [r7, #4]
 802063e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020640:	b2d2      	uxtb	r2, r2
 8020642:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8020644:	687b      	ldr	r3, [r7, #4]
 8020646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020648:	1c5a      	adds	r2, r3, #1
 802064a:	687b      	ldr	r3, [r7, #4]
 802064c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 802064e:	687b      	ldr	r3, [r7, #4]
 8020650:	681b      	ldr	r3, [r3, #0]
 8020652:	681a      	ldr	r2, [r3, #0]
 8020654:	687b      	ldr	r3, [r7, #4]
 8020656:	681b      	ldr	r3, [r3, #0]
 8020658:	f022 0201 	bic.w	r2, r2, #1
 802065c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 802065e:	687b      	ldr	r3, [r7, #4]
 8020660:	2220      	movs	r2, #32
 8020662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8020666:	687b      	ldr	r3, [r7, #4]
 8020668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802066a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802066c:	687a      	ldr	r2, [r7, #4]
 802066e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8020670:	4610      	mov	r0, r2
 8020672:	4798      	blx	r3
 8020674:	e041      	b.n	80206fa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8020676:	687b      	ldr	r3, [r7, #4]
 8020678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802067c:	b2db      	uxtb	r3, r3
 802067e:	2b60      	cmp	r3, #96	; 0x60
 8020680:	d125      	bne.n	80206ce <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8020682:	687b      	ldr	r3, [r7, #4]
 8020684:	2220      	movs	r2, #32
 8020686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802068a:	687b      	ldr	r3, [r7, #4]
 802068c:	2200      	movs	r2, #0
 802068e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8020690:	687b      	ldr	r3, [r7, #4]
 8020692:	681b      	ldr	r3, [r3, #0]
 8020694:	695b      	ldr	r3, [r3, #20]
 8020696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802069a:	2b40      	cmp	r3, #64	; 0x40
 802069c:	d10b      	bne.n	80206b6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802069e:	687b      	ldr	r3, [r7, #4]
 80206a0:	681b      	ldr	r3, [r3, #0]
 80206a2:	691a      	ldr	r2, [r3, #16]
 80206a4:	687b      	ldr	r3, [r7, #4]
 80206a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80206a8:	b2d2      	uxtb	r2, r2
 80206aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80206ac:	687b      	ldr	r3, [r7, #4]
 80206ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80206b0:	1c5a      	adds	r2, r3, #1
 80206b2:	687b      	ldr	r3, [r7, #4]
 80206b4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80206b6:	687b      	ldr	r3, [r7, #4]
 80206b8:	681b      	ldr	r3, [r3, #0]
 80206ba:	681a      	ldr	r2, [r3, #0]
 80206bc:	687b      	ldr	r3, [r7, #4]
 80206be:	681b      	ldr	r3, [r3, #0]
 80206c0:	f022 0201 	bic.w	r2, r2, #1
 80206c4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80206c6:	6878      	ldr	r0, [r7, #4]
 80206c8:	f7fe feec 	bl	801f4a4 <HAL_I2C_AbortCpltCallback>
 80206cc:	e015      	b.n	80206fa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80206ce:	687b      	ldr	r3, [r7, #4]
 80206d0:	681b      	ldr	r3, [r3, #0]
 80206d2:	695b      	ldr	r3, [r3, #20]
 80206d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80206d8:	2b40      	cmp	r3, #64	; 0x40
 80206da:	d10b      	bne.n	80206f4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80206dc:	687b      	ldr	r3, [r7, #4]
 80206de:	681b      	ldr	r3, [r3, #0]
 80206e0:	691a      	ldr	r2, [r3, #16]
 80206e2:	687b      	ldr	r3, [r7, #4]
 80206e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80206e6:	b2d2      	uxtb	r2, r2
 80206e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80206ea:	687b      	ldr	r3, [r7, #4]
 80206ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80206ee:	1c5a      	adds	r2, r3, #1
 80206f0:	687b      	ldr	r3, [r7, #4]
 80206f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80206f4:	6878      	ldr	r0, [r7, #4]
 80206f6:	f7fe fecb 	bl	801f490 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80206fa:	687b      	ldr	r3, [r7, #4]
 80206fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80206fe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8020700:	68bb      	ldr	r3, [r7, #8]
 8020702:	f003 0301 	and.w	r3, r3, #1
 8020706:	2b00      	cmp	r3, #0
 8020708:	d10e      	bne.n	8020728 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 802070a:	68bb      	ldr	r3, [r7, #8]
 802070c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8020710:	2b00      	cmp	r3, #0
 8020712:	d109      	bne.n	8020728 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8020714:	68bb      	ldr	r3, [r7, #8]
 8020716:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 802071a:	2b00      	cmp	r3, #0
 802071c:	d104      	bne.n	8020728 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 802071e:	68bb      	ldr	r3, [r7, #8]
 8020720:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8020724:	2b00      	cmp	r3, #0
 8020726:	d007      	beq.n	8020738 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8020728:	687b      	ldr	r3, [r7, #4]
 802072a:	681b      	ldr	r3, [r3, #0]
 802072c:	685a      	ldr	r2, [r3, #4]
 802072e:	687b      	ldr	r3, [r7, #4]
 8020730:	681b      	ldr	r3, [r3, #0]
 8020732:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8020736:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8020738:	687b      	ldr	r3, [r7, #4]
 802073a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802073e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8020740:	687b      	ldr	r3, [r7, #4]
 8020742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020744:	f003 0304 	and.w	r3, r3, #4
 8020748:	2b04      	cmp	r3, #4
 802074a:	d113      	bne.n	8020774 <I2C_ITError+0x254>
 802074c:	7bfb      	ldrb	r3, [r7, #15]
 802074e:	2b28      	cmp	r3, #40	; 0x28
 8020750:	d110      	bne.n	8020774 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8020752:	687b      	ldr	r3, [r7, #4]
 8020754:	4a0a      	ldr	r2, [pc, #40]	; (8020780 <I2C_ITError+0x260>)
 8020756:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8020758:	687b      	ldr	r3, [r7, #4]
 802075a:	2200      	movs	r2, #0
 802075c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 802075e:	687b      	ldr	r3, [r7, #4]
 8020760:	2220      	movs	r2, #32
 8020762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8020766:	687b      	ldr	r3, [r7, #4]
 8020768:	2200      	movs	r2, #0
 802076a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 802076e:	6878      	ldr	r0, [r7, #4]
 8020770:	f7fe fe84 	bl	801f47c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8020774:	bf00      	nop
 8020776:	3710      	adds	r7, #16
 8020778:	46bd      	mov	sp, r7
 802077a:	bd80      	pop	{r7, pc}
 802077c:	08020ca5 	.word	0x08020ca5
 8020780:	ffff0000 	.word	0xffff0000

08020784 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8020784:	b580      	push	{r7, lr}
 8020786:	b088      	sub	sp, #32
 8020788:	af02      	add	r7, sp, #8
 802078a:	60f8      	str	r0, [r7, #12]
 802078c:	4608      	mov	r0, r1
 802078e:	4611      	mov	r1, r2
 8020790:	461a      	mov	r2, r3
 8020792:	4603      	mov	r3, r0
 8020794:	817b      	strh	r3, [r7, #10]
 8020796:	460b      	mov	r3, r1
 8020798:	813b      	strh	r3, [r7, #8]
 802079a:	4613      	mov	r3, r2
 802079c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802079e:	68fb      	ldr	r3, [r7, #12]
 80207a0:	681b      	ldr	r3, [r3, #0]
 80207a2:	681a      	ldr	r2, [r3, #0]
 80207a4:	68fb      	ldr	r3, [r7, #12]
 80207a6:	681b      	ldr	r3, [r3, #0]
 80207a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80207ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80207ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80207b0:	9300      	str	r3, [sp, #0]
 80207b2:	6a3b      	ldr	r3, [r7, #32]
 80207b4:	2200      	movs	r2, #0
 80207b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80207ba:	68f8      	ldr	r0, [r7, #12]
 80207bc:	f000 fb1a 	bl	8020df4 <I2C_WaitOnFlagUntilTimeout>
 80207c0:	4603      	mov	r3, r0
 80207c2:	2b00      	cmp	r3, #0
 80207c4:	d00d      	beq.n	80207e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80207c6:	68fb      	ldr	r3, [r7, #12]
 80207c8:	681b      	ldr	r3, [r3, #0]
 80207ca:	681b      	ldr	r3, [r3, #0]
 80207cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80207d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80207d4:	d103      	bne.n	80207de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80207d6:	68fb      	ldr	r3, [r7, #12]
 80207d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80207dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80207de:	2303      	movs	r3, #3
 80207e0:	e05f      	b.n	80208a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80207e2:	897b      	ldrh	r3, [r7, #10]
 80207e4:	b2db      	uxtb	r3, r3
 80207e6:	461a      	mov	r2, r3
 80207e8:	68fb      	ldr	r3, [r7, #12]
 80207ea:	681b      	ldr	r3, [r3, #0]
 80207ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80207f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80207f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80207f4:	6a3a      	ldr	r2, [r7, #32]
 80207f6:	492d      	ldr	r1, [pc, #180]	; (80208ac <I2C_RequestMemoryWrite+0x128>)
 80207f8:	68f8      	ldr	r0, [r7, #12]
 80207fa:	f000 fb52 	bl	8020ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80207fe:	4603      	mov	r3, r0
 8020800:	2b00      	cmp	r3, #0
 8020802:	d001      	beq.n	8020808 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8020804:	2301      	movs	r3, #1
 8020806:	e04c      	b.n	80208a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8020808:	2300      	movs	r3, #0
 802080a:	617b      	str	r3, [r7, #20]
 802080c:	68fb      	ldr	r3, [r7, #12]
 802080e:	681b      	ldr	r3, [r3, #0]
 8020810:	695b      	ldr	r3, [r3, #20]
 8020812:	617b      	str	r3, [r7, #20]
 8020814:	68fb      	ldr	r3, [r7, #12]
 8020816:	681b      	ldr	r3, [r3, #0]
 8020818:	699b      	ldr	r3, [r3, #24]
 802081a:	617b      	str	r3, [r7, #20]
 802081c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 802081e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020820:	6a39      	ldr	r1, [r7, #32]
 8020822:	68f8      	ldr	r0, [r7, #12]
 8020824:	f000 fbbc 	bl	8020fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8020828:	4603      	mov	r3, r0
 802082a:	2b00      	cmp	r3, #0
 802082c:	d00d      	beq.n	802084a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 802082e:	68fb      	ldr	r3, [r7, #12]
 8020830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020832:	2b04      	cmp	r3, #4
 8020834:	d107      	bne.n	8020846 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8020836:	68fb      	ldr	r3, [r7, #12]
 8020838:	681b      	ldr	r3, [r3, #0]
 802083a:	681a      	ldr	r2, [r3, #0]
 802083c:	68fb      	ldr	r3, [r7, #12]
 802083e:	681b      	ldr	r3, [r3, #0]
 8020840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020844:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8020846:	2301      	movs	r3, #1
 8020848:	e02b      	b.n	80208a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 802084a:	88fb      	ldrh	r3, [r7, #6]
 802084c:	2b01      	cmp	r3, #1
 802084e:	d105      	bne.n	802085c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8020850:	893b      	ldrh	r3, [r7, #8]
 8020852:	b2da      	uxtb	r2, r3
 8020854:	68fb      	ldr	r3, [r7, #12]
 8020856:	681b      	ldr	r3, [r3, #0]
 8020858:	611a      	str	r2, [r3, #16]
 802085a:	e021      	b.n	80208a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 802085c:	893b      	ldrh	r3, [r7, #8]
 802085e:	0a1b      	lsrs	r3, r3, #8
 8020860:	b29b      	uxth	r3, r3
 8020862:	b2da      	uxtb	r2, r3
 8020864:	68fb      	ldr	r3, [r7, #12]
 8020866:	681b      	ldr	r3, [r3, #0]
 8020868:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 802086a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802086c:	6a39      	ldr	r1, [r7, #32]
 802086e:	68f8      	ldr	r0, [r7, #12]
 8020870:	f000 fb96 	bl	8020fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8020874:	4603      	mov	r3, r0
 8020876:	2b00      	cmp	r3, #0
 8020878:	d00d      	beq.n	8020896 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 802087a:	68fb      	ldr	r3, [r7, #12]
 802087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802087e:	2b04      	cmp	r3, #4
 8020880:	d107      	bne.n	8020892 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8020882:	68fb      	ldr	r3, [r7, #12]
 8020884:	681b      	ldr	r3, [r3, #0]
 8020886:	681a      	ldr	r2, [r3, #0]
 8020888:	68fb      	ldr	r3, [r7, #12]
 802088a:	681b      	ldr	r3, [r3, #0]
 802088c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020890:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8020892:	2301      	movs	r3, #1
 8020894:	e005      	b.n	80208a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8020896:	893b      	ldrh	r3, [r7, #8]
 8020898:	b2da      	uxtb	r2, r3
 802089a:	68fb      	ldr	r3, [r7, #12]
 802089c:	681b      	ldr	r3, [r3, #0]
 802089e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80208a0:	2300      	movs	r3, #0
}
 80208a2:	4618      	mov	r0, r3
 80208a4:	3718      	adds	r7, #24
 80208a6:	46bd      	mov	sp, r7
 80208a8:	bd80      	pop	{r7, pc}
 80208aa:	bf00      	nop
 80208ac:	00010002 	.word	0x00010002

080208b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80208b0:	b580      	push	{r7, lr}
 80208b2:	b088      	sub	sp, #32
 80208b4:	af02      	add	r7, sp, #8
 80208b6:	60f8      	str	r0, [r7, #12]
 80208b8:	4608      	mov	r0, r1
 80208ba:	4611      	mov	r1, r2
 80208bc:	461a      	mov	r2, r3
 80208be:	4603      	mov	r3, r0
 80208c0:	817b      	strh	r3, [r7, #10]
 80208c2:	460b      	mov	r3, r1
 80208c4:	813b      	strh	r3, [r7, #8]
 80208c6:	4613      	mov	r3, r2
 80208c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80208ca:	68fb      	ldr	r3, [r7, #12]
 80208cc:	681b      	ldr	r3, [r3, #0]
 80208ce:	681a      	ldr	r2, [r3, #0]
 80208d0:	68fb      	ldr	r3, [r7, #12]
 80208d2:	681b      	ldr	r3, [r3, #0]
 80208d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80208d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80208da:	68fb      	ldr	r3, [r7, #12]
 80208dc:	681b      	ldr	r3, [r3, #0]
 80208de:	681a      	ldr	r2, [r3, #0]
 80208e0:	68fb      	ldr	r3, [r7, #12]
 80208e2:	681b      	ldr	r3, [r3, #0]
 80208e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80208e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80208ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80208ec:	9300      	str	r3, [sp, #0]
 80208ee:	6a3b      	ldr	r3, [r7, #32]
 80208f0:	2200      	movs	r2, #0
 80208f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80208f6:	68f8      	ldr	r0, [r7, #12]
 80208f8:	f000 fa7c 	bl	8020df4 <I2C_WaitOnFlagUntilTimeout>
 80208fc:	4603      	mov	r3, r0
 80208fe:	2b00      	cmp	r3, #0
 8020900:	d00d      	beq.n	802091e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8020902:	68fb      	ldr	r3, [r7, #12]
 8020904:	681b      	ldr	r3, [r3, #0]
 8020906:	681b      	ldr	r3, [r3, #0]
 8020908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802090c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020910:	d103      	bne.n	802091a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8020912:	68fb      	ldr	r3, [r7, #12]
 8020914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020918:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 802091a:	2303      	movs	r3, #3
 802091c:	e0aa      	b.n	8020a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 802091e:	897b      	ldrh	r3, [r7, #10]
 8020920:	b2db      	uxtb	r3, r3
 8020922:	461a      	mov	r2, r3
 8020924:	68fb      	ldr	r3, [r7, #12]
 8020926:	681b      	ldr	r3, [r3, #0]
 8020928:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 802092c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 802092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020930:	6a3a      	ldr	r2, [r7, #32]
 8020932:	4952      	ldr	r1, [pc, #328]	; (8020a7c <I2C_RequestMemoryRead+0x1cc>)
 8020934:	68f8      	ldr	r0, [r7, #12]
 8020936:	f000 fab4 	bl	8020ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 802093a:	4603      	mov	r3, r0
 802093c:	2b00      	cmp	r3, #0
 802093e:	d001      	beq.n	8020944 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8020940:	2301      	movs	r3, #1
 8020942:	e097      	b.n	8020a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8020944:	2300      	movs	r3, #0
 8020946:	617b      	str	r3, [r7, #20]
 8020948:	68fb      	ldr	r3, [r7, #12]
 802094a:	681b      	ldr	r3, [r3, #0]
 802094c:	695b      	ldr	r3, [r3, #20]
 802094e:	617b      	str	r3, [r7, #20]
 8020950:	68fb      	ldr	r3, [r7, #12]
 8020952:	681b      	ldr	r3, [r3, #0]
 8020954:	699b      	ldr	r3, [r3, #24]
 8020956:	617b      	str	r3, [r7, #20]
 8020958:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 802095a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802095c:	6a39      	ldr	r1, [r7, #32]
 802095e:	68f8      	ldr	r0, [r7, #12]
 8020960:	f000 fb1e 	bl	8020fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8020964:	4603      	mov	r3, r0
 8020966:	2b00      	cmp	r3, #0
 8020968:	d00d      	beq.n	8020986 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 802096a:	68fb      	ldr	r3, [r7, #12]
 802096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802096e:	2b04      	cmp	r3, #4
 8020970:	d107      	bne.n	8020982 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8020972:	68fb      	ldr	r3, [r7, #12]
 8020974:	681b      	ldr	r3, [r3, #0]
 8020976:	681a      	ldr	r2, [r3, #0]
 8020978:	68fb      	ldr	r3, [r7, #12]
 802097a:	681b      	ldr	r3, [r3, #0]
 802097c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020980:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8020982:	2301      	movs	r3, #1
 8020984:	e076      	b.n	8020a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8020986:	88fb      	ldrh	r3, [r7, #6]
 8020988:	2b01      	cmp	r3, #1
 802098a:	d105      	bne.n	8020998 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 802098c:	893b      	ldrh	r3, [r7, #8]
 802098e:	b2da      	uxtb	r2, r3
 8020990:	68fb      	ldr	r3, [r7, #12]
 8020992:	681b      	ldr	r3, [r3, #0]
 8020994:	611a      	str	r2, [r3, #16]
 8020996:	e021      	b.n	80209dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8020998:	893b      	ldrh	r3, [r7, #8]
 802099a:	0a1b      	lsrs	r3, r3, #8
 802099c:	b29b      	uxth	r3, r3
 802099e:	b2da      	uxtb	r2, r3
 80209a0:	68fb      	ldr	r3, [r7, #12]
 80209a2:	681b      	ldr	r3, [r3, #0]
 80209a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80209a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80209a8:	6a39      	ldr	r1, [r7, #32]
 80209aa:	68f8      	ldr	r0, [r7, #12]
 80209ac:	f000 faf8 	bl	8020fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 80209b0:	4603      	mov	r3, r0
 80209b2:	2b00      	cmp	r3, #0
 80209b4:	d00d      	beq.n	80209d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80209b6:	68fb      	ldr	r3, [r7, #12]
 80209b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80209ba:	2b04      	cmp	r3, #4
 80209bc:	d107      	bne.n	80209ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80209be:	68fb      	ldr	r3, [r7, #12]
 80209c0:	681b      	ldr	r3, [r3, #0]
 80209c2:	681a      	ldr	r2, [r3, #0]
 80209c4:	68fb      	ldr	r3, [r7, #12]
 80209c6:	681b      	ldr	r3, [r3, #0]
 80209c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80209cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80209ce:	2301      	movs	r3, #1
 80209d0:	e050      	b.n	8020a74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80209d2:	893b      	ldrh	r3, [r7, #8]
 80209d4:	b2da      	uxtb	r2, r3
 80209d6:	68fb      	ldr	r3, [r7, #12]
 80209d8:	681b      	ldr	r3, [r3, #0]
 80209da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80209dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80209de:	6a39      	ldr	r1, [r7, #32]
 80209e0:	68f8      	ldr	r0, [r7, #12]
 80209e2:	f000 fadd 	bl	8020fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 80209e6:	4603      	mov	r3, r0
 80209e8:	2b00      	cmp	r3, #0
 80209ea:	d00d      	beq.n	8020a08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80209ec:	68fb      	ldr	r3, [r7, #12]
 80209ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80209f0:	2b04      	cmp	r3, #4
 80209f2:	d107      	bne.n	8020a04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80209f4:	68fb      	ldr	r3, [r7, #12]
 80209f6:	681b      	ldr	r3, [r3, #0]
 80209f8:	681a      	ldr	r2, [r3, #0]
 80209fa:	68fb      	ldr	r3, [r7, #12]
 80209fc:	681b      	ldr	r3, [r3, #0]
 80209fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020a02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8020a04:	2301      	movs	r3, #1
 8020a06:	e035      	b.n	8020a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8020a08:	68fb      	ldr	r3, [r7, #12]
 8020a0a:	681b      	ldr	r3, [r3, #0]
 8020a0c:	681a      	ldr	r2, [r3, #0]
 8020a0e:	68fb      	ldr	r3, [r7, #12]
 8020a10:	681b      	ldr	r3, [r3, #0]
 8020a12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8020a16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8020a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020a1a:	9300      	str	r3, [sp, #0]
 8020a1c:	6a3b      	ldr	r3, [r7, #32]
 8020a1e:	2200      	movs	r2, #0
 8020a20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8020a24:	68f8      	ldr	r0, [r7, #12]
 8020a26:	f000 f9e5 	bl	8020df4 <I2C_WaitOnFlagUntilTimeout>
 8020a2a:	4603      	mov	r3, r0
 8020a2c:	2b00      	cmp	r3, #0
 8020a2e:	d00d      	beq.n	8020a4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8020a30:	68fb      	ldr	r3, [r7, #12]
 8020a32:	681b      	ldr	r3, [r3, #0]
 8020a34:	681b      	ldr	r3, [r3, #0]
 8020a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020a3e:	d103      	bne.n	8020a48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8020a40:	68fb      	ldr	r3, [r7, #12]
 8020a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020a46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8020a48:	2303      	movs	r3, #3
 8020a4a:	e013      	b.n	8020a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8020a4c:	897b      	ldrh	r3, [r7, #10]
 8020a4e:	b2db      	uxtb	r3, r3
 8020a50:	f043 0301 	orr.w	r3, r3, #1
 8020a54:	b2da      	uxtb	r2, r3
 8020a56:	68fb      	ldr	r3, [r7, #12]
 8020a58:	681b      	ldr	r3, [r3, #0]
 8020a5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8020a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020a5e:	6a3a      	ldr	r2, [r7, #32]
 8020a60:	4906      	ldr	r1, [pc, #24]	; (8020a7c <I2C_RequestMemoryRead+0x1cc>)
 8020a62:	68f8      	ldr	r0, [r7, #12]
 8020a64:	f000 fa1d 	bl	8020ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8020a68:	4603      	mov	r3, r0
 8020a6a:	2b00      	cmp	r3, #0
 8020a6c:	d001      	beq.n	8020a72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8020a6e:	2301      	movs	r3, #1
 8020a70:	e000      	b.n	8020a74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8020a72:	2300      	movs	r3, #0
}
 8020a74:	4618      	mov	r0, r3
 8020a76:	3718      	adds	r7, #24
 8020a78:	46bd      	mov	sp, r7
 8020a7a:	bd80      	pop	{r7, pc}
 8020a7c:	00010002 	.word	0x00010002

08020a80 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8020a80:	b580      	push	{r7, lr}
 8020a82:	b086      	sub	sp, #24
 8020a84:	af00      	add	r7, sp, #0
 8020a86:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8020a88:	687b      	ldr	r3, [r7, #4]
 8020a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020a8c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8020a8e:	697b      	ldr	r3, [r7, #20]
 8020a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8020a94:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8020a96:	697b      	ldr	r3, [r7, #20]
 8020a98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8020a9c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8020a9e:	697b      	ldr	r3, [r7, #20]
 8020aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020aa2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8020aa4:	697b      	ldr	r3, [r7, #20]
 8020aa6:	681b      	ldr	r3, [r3, #0]
 8020aa8:	685a      	ldr	r2, [r3, #4]
 8020aaa:	697b      	ldr	r3, [r7, #20]
 8020aac:	681b      	ldr	r3, [r3, #0]
 8020aae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8020ab2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8020ab4:	697b      	ldr	r3, [r7, #20]
 8020ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020ab8:	2b00      	cmp	r3, #0
 8020aba:	d003      	beq.n	8020ac4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8020abc:	697b      	ldr	r3, [r7, #20]
 8020abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020ac0:	2200      	movs	r2, #0
 8020ac2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8020ac4:	697b      	ldr	r3, [r7, #20]
 8020ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020ac8:	2b00      	cmp	r3, #0
 8020aca:	d003      	beq.n	8020ad4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8020acc:	697b      	ldr	r3, [r7, #20]
 8020ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020ad0:	2200      	movs	r2, #0
 8020ad2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8020ad4:	7cfb      	ldrb	r3, [r7, #19]
 8020ad6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8020ada:	2b21      	cmp	r3, #33	; 0x21
 8020adc:	d007      	beq.n	8020aee <I2C_DMAXferCplt+0x6e>
 8020ade:	7cfb      	ldrb	r3, [r7, #19]
 8020ae0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8020ae4:	2b22      	cmp	r3, #34	; 0x22
 8020ae6:	d131      	bne.n	8020b4c <I2C_DMAXferCplt+0xcc>
 8020ae8:	7cbb      	ldrb	r3, [r7, #18]
 8020aea:	2b20      	cmp	r3, #32
 8020aec:	d12e      	bne.n	8020b4c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8020aee:	697b      	ldr	r3, [r7, #20]
 8020af0:	681b      	ldr	r3, [r3, #0]
 8020af2:	685a      	ldr	r2, [r3, #4]
 8020af4:	697b      	ldr	r3, [r7, #20]
 8020af6:	681b      	ldr	r3, [r3, #0]
 8020af8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8020afc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8020afe:	697b      	ldr	r3, [r7, #20]
 8020b00:	2200      	movs	r2, #0
 8020b02:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8020b04:	7cfb      	ldrb	r3, [r7, #19]
 8020b06:	2b29      	cmp	r3, #41	; 0x29
 8020b08:	d10a      	bne.n	8020b20 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8020b0a:	697b      	ldr	r3, [r7, #20]
 8020b0c:	2221      	movs	r2, #33	; 0x21
 8020b0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8020b10:	697b      	ldr	r3, [r7, #20]
 8020b12:	2228      	movs	r2, #40	; 0x28
 8020b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8020b18:	6978      	ldr	r0, [r7, #20]
 8020b1a:	f7fe fc8d 	bl	801f438 <HAL_I2C_SlaveTxCpltCallback>
 8020b1e:	e00c      	b.n	8020b3a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8020b20:	7cfb      	ldrb	r3, [r7, #19]
 8020b22:	2b2a      	cmp	r3, #42	; 0x2a
 8020b24:	d109      	bne.n	8020b3a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8020b26:	697b      	ldr	r3, [r7, #20]
 8020b28:	2222      	movs	r2, #34	; 0x22
 8020b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8020b2c:	697b      	ldr	r3, [r7, #20]
 8020b2e:	2228      	movs	r2, #40	; 0x28
 8020b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8020b34:	6978      	ldr	r0, [r7, #20]
 8020b36:	f7fe fc89 	bl	801f44c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8020b3a:	697b      	ldr	r3, [r7, #20]
 8020b3c:	681b      	ldr	r3, [r3, #0]
 8020b3e:	685a      	ldr	r2, [r3, #4]
 8020b40:	697b      	ldr	r3, [r7, #20]
 8020b42:	681b      	ldr	r3, [r3, #0]
 8020b44:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8020b48:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8020b4a:	e06a      	b.n	8020c22 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8020b4c:	697b      	ldr	r3, [r7, #20]
 8020b4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8020b52:	b2db      	uxtb	r3, r3
 8020b54:	2b00      	cmp	r3, #0
 8020b56:	d064      	beq.n	8020c22 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8020b58:	697b      	ldr	r3, [r7, #20]
 8020b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8020b5c:	b29b      	uxth	r3, r3
 8020b5e:	2b01      	cmp	r3, #1
 8020b60:	d107      	bne.n	8020b72 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8020b62:	697b      	ldr	r3, [r7, #20]
 8020b64:	681b      	ldr	r3, [r3, #0]
 8020b66:	681a      	ldr	r2, [r3, #0]
 8020b68:	697b      	ldr	r3, [r7, #20]
 8020b6a:	681b      	ldr	r3, [r3, #0]
 8020b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020b70:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8020b72:	697b      	ldr	r3, [r7, #20]
 8020b74:	681b      	ldr	r3, [r3, #0]
 8020b76:	685a      	ldr	r2, [r3, #4]
 8020b78:	697b      	ldr	r3, [r7, #20]
 8020b7a:	681b      	ldr	r3, [r3, #0]
 8020b7c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8020b80:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8020b82:	68fb      	ldr	r3, [r7, #12]
 8020b84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8020b88:	d009      	beq.n	8020b9e <I2C_DMAXferCplt+0x11e>
 8020b8a:	68fb      	ldr	r3, [r7, #12]
 8020b8c:	2b08      	cmp	r3, #8
 8020b8e:	d006      	beq.n	8020b9e <I2C_DMAXferCplt+0x11e>
 8020b90:	68fb      	ldr	r3, [r7, #12]
 8020b92:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8020b96:	d002      	beq.n	8020b9e <I2C_DMAXferCplt+0x11e>
 8020b98:	68fb      	ldr	r3, [r7, #12]
 8020b9a:	2b20      	cmp	r3, #32
 8020b9c:	d107      	bne.n	8020bae <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8020b9e:	697b      	ldr	r3, [r7, #20]
 8020ba0:	681b      	ldr	r3, [r3, #0]
 8020ba2:	681a      	ldr	r2, [r3, #0]
 8020ba4:	697b      	ldr	r3, [r7, #20]
 8020ba6:	681b      	ldr	r3, [r3, #0]
 8020ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020bac:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8020bae:	697b      	ldr	r3, [r7, #20]
 8020bb0:	681b      	ldr	r3, [r3, #0]
 8020bb2:	685a      	ldr	r2, [r3, #4]
 8020bb4:	697b      	ldr	r3, [r7, #20]
 8020bb6:	681b      	ldr	r3, [r3, #0]
 8020bb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8020bbc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8020bbe:	697b      	ldr	r3, [r7, #20]
 8020bc0:	681b      	ldr	r3, [r3, #0]
 8020bc2:	685a      	ldr	r2, [r3, #4]
 8020bc4:	697b      	ldr	r3, [r7, #20]
 8020bc6:	681b      	ldr	r3, [r3, #0]
 8020bc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8020bcc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8020bce:	697b      	ldr	r3, [r7, #20]
 8020bd0:	2200      	movs	r2, #0
 8020bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8020bd4:	697b      	ldr	r3, [r7, #20]
 8020bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020bd8:	2b00      	cmp	r3, #0
 8020bda:	d003      	beq.n	8020be4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8020bdc:	6978      	ldr	r0, [r7, #20]
 8020bde:	f7fe fc57 	bl	801f490 <HAL_I2C_ErrorCallback>
}
 8020be2:	e01e      	b.n	8020c22 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8020be4:	697b      	ldr	r3, [r7, #20]
 8020be6:	2220      	movs	r2, #32
 8020be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8020bec:	697b      	ldr	r3, [r7, #20]
 8020bee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8020bf2:	b2db      	uxtb	r3, r3
 8020bf4:	2b40      	cmp	r3, #64	; 0x40
 8020bf6:	d10a      	bne.n	8020c0e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8020bf8:	697b      	ldr	r3, [r7, #20]
 8020bfa:	2200      	movs	r2, #0
 8020bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8020c00:	697b      	ldr	r3, [r7, #20]
 8020c02:	2200      	movs	r2, #0
 8020c04:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8020c06:	6978      	ldr	r0, [r7, #20]
 8020c08:	f7e0 ff12 	bl	8001a30 <HAL_I2C_MemRxCpltCallback>
}
 8020c0c:	e009      	b.n	8020c22 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8020c0e:	697b      	ldr	r3, [r7, #20]
 8020c10:	2200      	movs	r2, #0
 8020c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8020c16:	697b      	ldr	r3, [r7, #20]
 8020c18:	2212      	movs	r2, #18
 8020c1a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8020c1c:	6978      	ldr	r0, [r7, #20]
 8020c1e:	f7e0 ff1d 	bl	8001a5c <HAL_I2C_MasterRxCpltCallback>
}
 8020c22:	bf00      	nop
 8020c24:	3718      	adds	r7, #24
 8020c26:	46bd      	mov	sp, r7
 8020c28:	bd80      	pop	{r7, pc}

08020c2a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8020c2a:	b580      	push	{r7, lr}
 8020c2c:	b084      	sub	sp, #16
 8020c2e:	af00      	add	r7, sp, #0
 8020c30:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8020c32:	687b      	ldr	r3, [r7, #4]
 8020c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020c36:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8020c38:	68fb      	ldr	r3, [r7, #12]
 8020c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020c3c:	2b00      	cmp	r3, #0
 8020c3e:	d003      	beq.n	8020c48 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8020c40:	68fb      	ldr	r3, [r7, #12]
 8020c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020c44:	2200      	movs	r2, #0
 8020c46:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8020c48:	68fb      	ldr	r3, [r7, #12]
 8020c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020c4c:	2b00      	cmp	r3, #0
 8020c4e:	d003      	beq.n	8020c58 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8020c50:	68fb      	ldr	r3, [r7, #12]
 8020c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020c54:	2200      	movs	r2, #0
 8020c56:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8020c58:	6878      	ldr	r0, [r7, #4]
 8020c5a:	f7fc ffb3 	bl	801dbc4 <HAL_DMA_GetError>
 8020c5e:	4603      	mov	r3, r0
 8020c60:	2b02      	cmp	r3, #2
 8020c62:	d01b      	beq.n	8020c9c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8020c64:	68fb      	ldr	r3, [r7, #12]
 8020c66:	681b      	ldr	r3, [r3, #0]
 8020c68:	681a      	ldr	r2, [r3, #0]
 8020c6a:	68fb      	ldr	r3, [r7, #12]
 8020c6c:	681b      	ldr	r3, [r3, #0]
 8020c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020c72:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8020c74:	68fb      	ldr	r3, [r7, #12]
 8020c76:	2200      	movs	r2, #0
 8020c78:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8020c7a:	68fb      	ldr	r3, [r7, #12]
 8020c7c:	2220      	movs	r2, #32
 8020c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8020c82:	68fb      	ldr	r3, [r7, #12]
 8020c84:	2200      	movs	r2, #0
 8020c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8020c8a:	68fb      	ldr	r3, [r7, #12]
 8020c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020c8e:	f043 0210 	orr.w	r2, r3, #16
 8020c92:	68fb      	ldr	r3, [r7, #12]
 8020c94:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8020c96:	68f8      	ldr	r0, [r7, #12]
 8020c98:	f7fe fbfa 	bl	801f490 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8020c9c:	bf00      	nop
 8020c9e:	3710      	adds	r7, #16
 8020ca0:	46bd      	mov	sp, r7
 8020ca2:	bd80      	pop	{r7, pc}

08020ca4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8020ca4:	b580      	push	{r7, lr}
 8020ca6:	b086      	sub	sp, #24
 8020ca8:	af00      	add	r7, sp, #0
 8020caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8020cac:	2300      	movs	r3, #0
 8020cae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8020cb0:	687b      	ldr	r3, [r7, #4]
 8020cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020cb4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8020cb6:	697b      	ldr	r3, [r7, #20]
 8020cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8020cbc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8020cbe:	4b4b      	ldr	r3, [pc, #300]	; (8020dec <I2C_DMAAbort+0x148>)
 8020cc0:	681b      	ldr	r3, [r3, #0]
 8020cc2:	08db      	lsrs	r3, r3, #3
 8020cc4:	4a4a      	ldr	r2, [pc, #296]	; (8020df0 <I2C_DMAAbort+0x14c>)
 8020cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8020cca:	0a1a      	lsrs	r2, r3, #8
 8020ccc:	4613      	mov	r3, r2
 8020cce:	009b      	lsls	r3, r3, #2
 8020cd0:	4413      	add	r3, r2
 8020cd2:	00da      	lsls	r2, r3, #3
 8020cd4:	1ad3      	subs	r3, r2, r3
 8020cd6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8020cd8:	68fb      	ldr	r3, [r7, #12]
 8020cda:	2b00      	cmp	r3, #0
 8020cdc:	d106      	bne.n	8020cec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8020cde:	697b      	ldr	r3, [r7, #20]
 8020ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020ce2:	f043 0220 	orr.w	r2, r3, #32
 8020ce6:	697b      	ldr	r3, [r7, #20]
 8020ce8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8020cea:	e00a      	b.n	8020d02 <I2C_DMAAbort+0x5e>
    }
    count--;
 8020cec:	68fb      	ldr	r3, [r7, #12]
 8020cee:	3b01      	subs	r3, #1
 8020cf0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8020cf2:	697b      	ldr	r3, [r7, #20]
 8020cf4:	681b      	ldr	r3, [r3, #0]
 8020cf6:	681b      	ldr	r3, [r3, #0]
 8020cf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8020cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020d00:	d0ea      	beq.n	8020cd8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8020d02:	697b      	ldr	r3, [r7, #20]
 8020d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020d06:	2b00      	cmp	r3, #0
 8020d08:	d003      	beq.n	8020d12 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8020d0a:	697b      	ldr	r3, [r7, #20]
 8020d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020d0e:	2200      	movs	r2, #0
 8020d10:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8020d12:	697b      	ldr	r3, [r7, #20]
 8020d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020d16:	2b00      	cmp	r3, #0
 8020d18:	d003      	beq.n	8020d22 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8020d1a:	697b      	ldr	r3, [r7, #20]
 8020d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020d1e:	2200      	movs	r2, #0
 8020d20:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8020d22:	697b      	ldr	r3, [r7, #20]
 8020d24:	681b      	ldr	r3, [r3, #0]
 8020d26:	681a      	ldr	r2, [r3, #0]
 8020d28:	697b      	ldr	r3, [r7, #20]
 8020d2a:	681b      	ldr	r3, [r3, #0]
 8020d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020d30:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8020d32:	697b      	ldr	r3, [r7, #20]
 8020d34:	2200      	movs	r2, #0
 8020d36:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8020d38:	697b      	ldr	r3, [r7, #20]
 8020d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020d3c:	2b00      	cmp	r3, #0
 8020d3e:	d003      	beq.n	8020d48 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8020d40:	697b      	ldr	r3, [r7, #20]
 8020d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020d44:	2200      	movs	r2, #0
 8020d46:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8020d48:	697b      	ldr	r3, [r7, #20]
 8020d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020d4c:	2b00      	cmp	r3, #0
 8020d4e:	d003      	beq.n	8020d58 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8020d50:	697b      	ldr	r3, [r7, #20]
 8020d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020d54:	2200      	movs	r2, #0
 8020d56:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8020d58:	697b      	ldr	r3, [r7, #20]
 8020d5a:	681b      	ldr	r3, [r3, #0]
 8020d5c:	681a      	ldr	r2, [r3, #0]
 8020d5e:	697b      	ldr	r3, [r7, #20]
 8020d60:	681b      	ldr	r3, [r3, #0]
 8020d62:	f022 0201 	bic.w	r2, r2, #1
 8020d66:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8020d68:	697b      	ldr	r3, [r7, #20]
 8020d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8020d6e:	b2db      	uxtb	r3, r3
 8020d70:	2b60      	cmp	r3, #96	; 0x60
 8020d72:	d10e      	bne.n	8020d92 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8020d74:	697b      	ldr	r3, [r7, #20]
 8020d76:	2220      	movs	r2, #32
 8020d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8020d7c:	697b      	ldr	r3, [r7, #20]
 8020d7e:	2200      	movs	r2, #0
 8020d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8020d84:	697b      	ldr	r3, [r7, #20]
 8020d86:	2200      	movs	r2, #0
 8020d88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8020d8a:	6978      	ldr	r0, [r7, #20]
 8020d8c:	f7fe fb8a 	bl	801f4a4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8020d90:	e027      	b.n	8020de2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8020d92:	7cfb      	ldrb	r3, [r7, #19]
 8020d94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8020d98:	2b28      	cmp	r3, #40	; 0x28
 8020d9a:	d117      	bne.n	8020dcc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8020d9c:	697b      	ldr	r3, [r7, #20]
 8020d9e:	681b      	ldr	r3, [r3, #0]
 8020da0:	681a      	ldr	r2, [r3, #0]
 8020da2:	697b      	ldr	r3, [r7, #20]
 8020da4:	681b      	ldr	r3, [r3, #0]
 8020da6:	f042 0201 	orr.w	r2, r2, #1
 8020daa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8020dac:	697b      	ldr	r3, [r7, #20]
 8020dae:	681b      	ldr	r3, [r3, #0]
 8020db0:	681a      	ldr	r2, [r3, #0]
 8020db2:	697b      	ldr	r3, [r7, #20]
 8020db4:	681b      	ldr	r3, [r3, #0]
 8020db6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8020dba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8020dbc:	697b      	ldr	r3, [r7, #20]
 8020dbe:	2200      	movs	r2, #0
 8020dc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8020dc2:	697b      	ldr	r3, [r7, #20]
 8020dc4:	2228      	movs	r2, #40	; 0x28
 8020dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8020dca:	e007      	b.n	8020ddc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8020dcc:	697b      	ldr	r3, [r7, #20]
 8020dce:	2220      	movs	r2, #32
 8020dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8020dd4:	697b      	ldr	r3, [r7, #20]
 8020dd6:	2200      	movs	r2, #0
 8020dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8020ddc:	6978      	ldr	r0, [r7, #20]
 8020dde:	f7fe fb57 	bl	801f490 <HAL_I2C_ErrorCallback>
}
 8020de2:	bf00      	nop
 8020de4:	3718      	adds	r7, #24
 8020de6:	46bd      	mov	sp, r7
 8020de8:	bd80      	pop	{r7, pc}
 8020dea:	bf00      	nop
 8020dec:	20000020 	.word	0x20000020
 8020df0:	14f8b589 	.word	0x14f8b589

08020df4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8020df4:	b580      	push	{r7, lr}
 8020df6:	b084      	sub	sp, #16
 8020df8:	af00      	add	r7, sp, #0
 8020dfa:	60f8      	str	r0, [r7, #12]
 8020dfc:	60b9      	str	r1, [r7, #8]
 8020dfe:	603b      	str	r3, [r7, #0]
 8020e00:	4613      	mov	r3, r2
 8020e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8020e04:	e025      	b.n	8020e52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8020e06:	683b      	ldr	r3, [r7, #0]
 8020e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020e0c:	d021      	beq.n	8020e52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8020e0e:	f7fb fe57 	bl	801cac0 <HAL_GetTick>
 8020e12:	4602      	mov	r2, r0
 8020e14:	69bb      	ldr	r3, [r7, #24]
 8020e16:	1ad3      	subs	r3, r2, r3
 8020e18:	683a      	ldr	r2, [r7, #0]
 8020e1a:	429a      	cmp	r2, r3
 8020e1c:	d302      	bcc.n	8020e24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8020e1e:	683b      	ldr	r3, [r7, #0]
 8020e20:	2b00      	cmp	r3, #0
 8020e22:	d116      	bne.n	8020e52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8020e24:	68fb      	ldr	r3, [r7, #12]
 8020e26:	2200      	movs	r2, #0
 8020e28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8020e2a:	68fb      	ldr	r3, [r7, #12]
 8020e2c:	2220      	movs	r2, #32
 8020e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8020e32:	68fb      	ldr	r3, [r7, #12]
 8020e34:	2200      	movs	r2, #0
 8020e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8020e3a:	68fb      	ldr	r3, [r7, #12]
 8020e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020e3e:	f043 0220 	orr.w	r2, r3, #32
 8020e42:	68fb      	ldr	r3, [r7, #12]
 8020e44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8020e46:	68fb      	ldr	r3, [r7, #12]
 8020e48:	2200      	movs	r2, #0
 8020e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8020e4e:	2301      	movs	r3, #1
 8020e50:	e023      	b.n	8020e9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8020e52:	68bb      	ldr	r3, [r7, #8]
 8020e54:	0c1b      	lsrs	r3, r3, #16
 8020e56:	b2db      	uxtb	r3, r3
 8020e58:	2b01      	cmp	r3, #1
 8020e5a:	d10d      	bne.n	8020e78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8020e5c:	68fb      	ldr	r3, [r7, #12]
 8020e5e:	681b      	ldr	r3, [r3, #0]
 8020e60:	695b      	ldr	r3, [r3, #20]
 8020e62:	43da      	mvns	r2, r3
 8020e64:	68bb      	ldr	r3, [r7, #8]
 8020e66:	4013      	ands	r3, r2
 8020e68:	b29b      	uxth	r3, r3
 8020e6a:	2b00      	cmp	r3, #0
 8020e6c:	bf0c      	ite	eq
 8020e6e:	2301      	moveq	r3, #1
 8020e70:	2300      	movne	r3, #0
 8020e72:	b2db      	uxtb	r3, r3
 8020e74:	461a      	mov	r2, r3
 8020e76:	e00c      	b.n	8020e92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8020e78:	68fb      	ldr	r3, [r7, #12]
 8020e7a:	681b      	ldr	r3, [r3, #0]
 8020e7c:	699b      	ldr	r3, [r3, #24]
 8020e7e:	43da      	mvns	r2, r3
 8020e80:	68bb      	ldr	r3, [r7, #8]
 8020e82:	4013      	ands	r3, r2
 8020e84:	b29b      	uxth	r3, r3
 8020e86:	2b00      	cmp	r3, #0
 8020e88:	bf0c      	ite	eq
 8020e8a:	2301      	moveq	r3, #1
 8020e8c:	2300      	movne	r3, #0
 8020e8e:	b2db      	uxtb	r3, r3
 8020e90:	461a      	mov	r2, r3
 8020e92:	79fb      	ldrb	r3, [r7, #7]
 8020e94:	429a      	cmp	r2, r3
 8020e96:	d0b6      	beq.n	8020e06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8020e98:	2300      	movs	r3, #0
}
 8020e9a:	4618      	mov	r0, r3
 8020e9c:	3710      	adds	r7, #16
 8020e9e:	46bd      	mov	sp, r7
 8020ea0:	bd80      	pop	{r7, pc}

08020ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8020ea2:	b580      	push	{r7, lr}
 8020ea4:	b084      	sub	sp, #16
 8020ea6:	af00      	add	r7, sp, #0
 8020ea8:	60f8      	str	r0, [r7, #12]
 8020eaa:	60b9      	str	r1, [r7, #8]
 8020eac:	607a      	str	r2, [r7, #4]
 8020eae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8020eb0:	e051      	b.n	8020f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8020eb2:	68fb      	ldr	r3, [r7, #12]
 8020eb4:	681b      	ldr	r3, [r3, #0]
 8020eb6:	695b      	ldr	r3, [r3, #20]
 8020eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8020ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8020ec0:	d123      	bne.n	8020f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8020ec2:	68fb      	ldr	r3, [r7, #12]
 8020ec4:	681b      	ldr	r3, [r3, #0]
 8020ec6:	681a      	ldr	r2, [r3, #0]
 8020ec8:	68fb      	ldr	r3, [r7, #12]
 8020eca:	681b      	ldr	r3, [r3, #0]
 8020ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020ed0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8020ed2:	68fb      	ldr	r3, [r7, #12]
 8020ed4:	681b      	ldr	r3, [r3, #0]
 8020ed6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8020eda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8020edc:	68fb      	ldr	r3, [r7, #12]
 8020ede:	2200      	movs	r2, #0
 8020ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8020ee2:	68fb      	ldr	r3, [r7, #12]
 8020ee4:	2220      	movs	r2, #32
 8020ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8020eea:	68fb      	ldr	r3, [r7, #12]
 8020eec:	2200      	movs	r2, #0
 8020eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8020ef2:	68fb      	ldr	r3, [r7, #12]
 8020ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020ef6:	f043 0204 	orr.w	r2, r3, #4
 8020efa:	68fb      	ldr	r3, [r7, #12]
 8020efc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8020efe:	68fb      	ldr	r3, [r7, #12]
 8020f00:	2200      	movs	r2, #0
 8020f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8020f06:	2301      	movs	r3, #1
 8020f08:	e046      	b.n	8020f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8020f0a:	687b      	ldr	r3, [r7, #4]
 8020f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020f10:	d021      	beq.n	8020f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8020f12:	f7fb fdd5 	bl	801cac0 <HAL_GetTick>
 8020f16:	4602      	mov	r2, r0
 8020f18:	683b      	ldr	r3, [r7, #0]
 8020f1a:	1ad3      	subs	r3, r2, r3
 8020f1c:	687a      	ldr	r2, [r7, #4]
 8020f1e:	429a      	cmp	r2, r3
 8020f20:	d302      	bcc.n	8020f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8020f22:	687b      	ldr	r3, [r7, #4]
 8020f24:	2b00      	cmp	r3, #0
 8020f26:	d116      	bne.n	8020f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8020f28:	68fb      	ldr	r3, [r7, #12]
 8020f2a:	2200      	movs	r2, #0
 8020f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8020f2e:	68fb      	ldr	r3, [r7, #12]
 8020f30:	2220      	movs	r2, #32
 8020f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8020f36:	68fb      	ldr	r3, [r7, #12]
 8020f38:	2200      	movs	r2, #0
 8020f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8020f3e:	68fb      	ldr	r3, [r7, #12]
 8020f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020f42:	f043 0220 	orr.w	r2, r3, #32
 8020f46:	68fb      	ldr	r3, [r7, #12]
 8020f48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8020f4a:	68fb      	ldr	r3, [r7, #12]
 8020f4c:	2200      	movs	r2, #0
 8020f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8020f52:	2301      	movs	r3, #1
 8020f54:	e020      	b.n	8020f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8020f56:	68bb      	ldr	r3, [r7, #8]
 8020f58:	0c1b      	lsrs	r3, r3, #16
 8020f5a:	b2db      	uxtb	r3, r3
 8020f5c:	2b01      	cmp	r3, #1
 8020f5e:	d10c      	bne.n	8020f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8020f60:	68fb      	ldr	r3, [r7, #12]
 8020f62:	681b      	ldr	r3, [r3, #0]
 8020f64:	695b      	ldr	r3, [r3, #20]
 8020f66:	43da      	mvns	r2, r3
 8020f68:	68bb      	ldr	r3, [r7, #8]
 8020f6a:	4013      	ands	r3, r2
 8020f6c:	b29b      	uxth	r3, r3
 8020f6e:	2b00      	cmp	r3, #0
 8020f70:	bf14      	ite	ne
 8020f72:	2301      	movne	r3, #1
 8020f74:	2300      	moveq	r3, #0
 8020f76:	b2db      	uxtb	r3, r3
 8020f78:	e00b      	b.n	8020f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8020f7a:	68fb      	ldr	r3, [r7, #12]
 8020f7c:	681b      	ldr	r3, [r3, #0]
 8020f7e:	699b      	ldr	r3, [r3, #24]
 8020f80:	43da      	mvns	r2, r3
 8020f82:	68bb      	ldr	r3, [r7, #8]
 8020f84:	4013      	ands	r3, r2
 8020f86:	b29b      	uxth	r3, r3
 8020f88:	2b00      	cmp	r3, #0
 8020f8a:	bf14      	ite	ne
 8020f8c:	2301      	movne	r3, #1
 8020f8e:	2300      	moveq	r3, #0
 8020f90:	b2db      	uxtb	r3, r3
 8020f92:	2b00      	cmp	r3, #0
 8020f94:	d18d      	bne.n	8020eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8020f96:	2300      	movs	r3, #0
}
 8020f98:	4618      	mov	r0, r3
 8020f9a:	3710      	adds	r7, #16
 8020f9c:	46bd      	mov	sp, r7
 8020f9e:	bd80      	pop	{r7, pc}

08020fa0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8020fa0:	b580      	push	{r7, lr}
 8020fa2:	b084      	sub	sp, #16
 8020fa4:	af00      	add	r7, sp, #0
 8020fa6:	60f8      	str	r0, [r7, #12]
 8020fa8:	60b9      	str	r1, [r7, #8]
 8020faa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8020fac:	e02d      	b.n	802100a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8020fae:	68f8      	ldr	r0, [r7, #12]
 8020fb0:	f000 f86a 	bl	8021088 <I2C_IsAcknowledgeFailed>
 8020fb4:	4603      	mov	r3, r0
 8020fb6:	2b00      	cmp	r3, #0
 8020fb8:	d001      	beq.n	8020fbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8020fba:	2301      	movs	r3, #1
 8020fbc:	e02d      	b.n	802101a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8020fbe:	68bb      	ldr	r3, [r7, #8]
 8020fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020fc4:	d021      	beq.n	802100a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8020fc6:	f7fb fd7b 	bl	801cac0 <HAL_GetTick>
 8020fca:	4602      	mov	r2, r0
 8020fcc:	687b      	ldr	r3, [r7, #4]
 8020fce:	1ad3      	subs	r3, r2, r3
 8020fd0:	68ba      	ldr	r2, [r7, #8]
 8020fd2:	429a      	cmp	r2, r3
 8020fd4:	d302      	bcc.n	8020fdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8020fd6:	68bb      	ldr	r3, [r7, #8]
 8020fd8:	2b00      	cmp	r3, #0
 8020fda:	d116      	bne.n	802100a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8020fdc:	68fb      	ldr	r3, [r7, #12]
 8020fde:	2200      	movs	r2, #0
 8020fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8020fe2:	68fb      	ldr	r3, [r7, #12]
 8020fe4:	2220      	movs	r2, #32
 8020fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8020fea:	68fb      	ldr	r3, [r7, #12]
 8020fec:	2200      	movs	r2, #0
 8020fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8020ff2:	68fb      	ldr	r3, [r7, #12]
 8020ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020ff6:	f043 0220 	orr.w	r2, r3, #32
 8020ffa:	68fb      	ldr	r3, [r7, #12]
 8020ffc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8020ffe:	68fb      	ldr	r3, [r7, #12]
 8021000:	2200      	movs	r2, #0
 8021002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8021006:	2301      	movs	r3, #1
 8021008:	e007      	b.n	802101a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 802100a:	68fb      	ldr	r3, [r7, #12]
 802100c:	681b      	ldr	r3, [r3, #0]
 802100e:	695b      	ldr	r3, [r3, #20]
 8021010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021014:	2b80      	cmp	r3, #128	; 0x80
 8021016:	d1ca      	bne.n	8020fae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8021018:	2300      	movs	r3, #0
}
 802101a:	4618      	mov	r0, r3
 802101c:	3710      	adds	r7, #16
 802101e:	46bd      	mov	sp, r7
 8021020:	bd80      	pop	{r7, pc}
	...

08021024 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8021024:	b480      	push	{r7}
 8021026:	b085      	sub	sp, #20
 8021028:	af00      	add	r7, sp, #0
 802102a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802102c:	2300      	movs	r3, #0
 802102e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8021030:	4b13      	ldr	r3, [pc, #76]	; (8021080 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8021032:	681b      	ldr	r3, [r3, #0]
 8021034:	08db      	lsrs	r3, r3, #3
 8021036:	4a13      	ldr	r2, [pc, #76]	; (8021084 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8021038:	fba2 2303 	umull	r2, r3, r2, r3
 802103c:	0a1a      	lsrs	r2, r3, #8
 802103e:	4613      	mov	r3, r2
 8021040:	009b      	lsls	r3, r3, #2
 8021042:	4413      	add	r3, r2
 8021044:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8021046:	68fb      	ldr	r3, [r7, #12]
 8021048:	3b01      	subs	r3, #1
 802104a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 802104c:	68fb      	ldr	r3, [r7, #12]
 802104e:	2b00      	cmp	r3, #0
 8021050:	d107      	bne.n	8021062 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8021052:	687b      	ldr	r3, [r7, #4]
 8021054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021056:	f043 0220 	orr.w	r2, r3, #32
 802105a:	687b      	ldr	r3, [r7, #4]
 802105c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 802105e:	2301      	movs	r3, #1
 8021060:	e008      	b.n	8021074 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8021062:	687b      	ldr	r3, [r7, #4]
 8021064:	681b      	ldr	r3, [r3, #0]
 8021066:	681b      	ldr	r3, [r3, #0]
 8021068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802106c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021070:	d0e9      	beq.n	8021046 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8021072:	2300      	movs	r3, #0
}
 8021074:	4618      	mov	r0, r3
 8021076:	3714      	adds	r7, #20
 8021078:	46bd      	mov	sp, r7
 802107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802107e:	4770      	bx	lr
 8021080:	20000020 	.word	0x20000020
 8021084:	14f8b589 	.word	0x14f8b589

08021088 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8021088:	b480      	push	{r7}
 802108a:	b083      	sub	sp, #12
 802108c:	af00      	add	r7, sp, #0
 802108e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8021090:	687b      	ldr	r3, [r7, #4]
 8021092:	681b      	ldr	r3, [r3, #0]
 8021094:	695b      	ldr	r3, [r3, #20]
 8021096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802109a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802109e:	d11b      	bne.n	80210d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80210a0:	687b      	ldr	r3, [r7, #4]
 80210a2:	681b      	ldr	r3, [r3, #0]
 80210a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80210a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80210aa:	687b      	ldr	r3, [r7, #4]
 80210ac:	2200      	movs	r2, #0
 80210ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80210b0:	687b      	ldr	r3, [r7, #4]
 80210b2:	2220      	movs	r2, #32
 80210b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80210b8:	687b      	ldr	r3, [r7, #4]
 80210ba:	2200      	movs	r2, #0
 80210bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80210c0:	687b      	ldr	r3, [r7, #4]
 80210c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80210c4:	f043 0204 	orr.w	r2, r3, #4
 80210c8:	687b      	ldr	r3, [r7, #4]
 80210ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80210cc:	687b      	ldr	r3, [r7, #4]
 80210ce:	2200      	movs	r2, #0
 80210d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80210d4:	2301      	movs	r3, #1
 80210d6:	e000      	b.n	80210da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80210d8:	2300      	movs	r3, #0
}
 80210da:	4618      	mov	r0, r3
 80210dc:	370c      	adds	r7, #12
 80210de:	46bd      	mov	sp, r7
 80210e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210e4:	4770      	bx	lr

080210e6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80210e6:	b480      	push	{r7}
 80210e8:	b083      	sub	sp, #12
 80210ea:	af00      	add	r7, sp, #0
 80210ec:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80210ee:	687b      	ldr	r3, [r7, #4]
 80210f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80210f2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80210f6:	d103      	bne.n	8021100 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80210f8:	687b      	ldr	r3, [r7, #4]
 80210fa:	2201      	movs	r2, #1
 80210fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80210fe:	e007      	b.n	8021110 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8021100:	687b      	ldr	r3, [r7, #4]
 8021102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021104:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8021108:	d102      	bne.n	8021110 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 802110a:	687b      	ldr	r3, [r7, #4]
 802110c:	2208      	movs	r2, #8
 802110e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8021110:	bf00      	nop
 8021112:	370c      	adds	r7, #12
 8021114:	46bd      	mov	sp, r7
 8021116:	f85d 7b04 	ldr.w	r7, [sp], #4
 802111a:	4770      	bx	lr

0802111c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802111c:	b580      	push	{r7, lr}
 802111e:	b086      	sub	sp, #24
 8021120:	af00      	add	r7, sp, #0
 8021122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8021124:	687b      	ldr	r3, [r7, #4]
 8021126:	2b00      	cmp	r3, #0
 8021128:	d101      	bne.n	802112e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802112a:	2301      	movs	r3, #1
 802112c:	e267      	b.n	80215fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802112e:	687b      	ldr	r3, [r7, #4]
 8021130:	681b      	ldr	r3, [r3, #0]
 8021132:	f003 0301 	and.w	r3, r3, #1
 8021136:	2b00      	cmp	r3, #0
 8021138:	d075      	beq.n	8021226 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802113a:	4b88      	ldr	r3, [pc, #544]	; (802135c <HAL_RCC_OscConfig+0x240>)
 802113c:	689b      	ldr	r3, [r3, #8]
 802113e:	f003 030c 	and.w	r3, r3, #12
 8021142:	2b04      	cmp	r3, #4
 8021144:	d00c      	beq.n	8021160 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8021146:	4b85      	ldr	r3, [pc, #532]	; (802135c <HAL_RCC_OscConfig+0x240>)
 8021148:	689b      	ldr	r3, [r3, #8]
 802114a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802114e:	2b08      	cmp	r3, #8
 8021150:	d112      	bne.n	8021178 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8021152:	4b82      	ldr	r3, [pc, #520]	; (802135c <HAL_RCC_OscConfig+0x240>)
 8021154:	685b      	ldr	r3, [r3, #4]
 8021156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802115a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802115e:	d10b      	bne.n	8021178 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021160:	4b7e      	ldr	r3, [pc, #504]	; (802135c <HAL_RCC_OscConfig+0x240>)
 8021162:	681b      	ldr	r3, [r3, #0]
 8021164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021168:	2b00      	cmp	r3, #0
 802116a:	d05b      	beq.n	8021224 <HAL_RCC_OscConfig+0x108>
 802116c:	687b      	ldr	r3, [r7, #4]
 802116e:	685b      	ldr	r3, [r3, #4]
 8021170:	2b00      	cmp	r3, #0
 8021172:	d157      	bne.n	8021224 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8021174:	2301      	movs	r3, #1
 8021176:	e242      	b.n	80215fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021178:	687b      	ldr	r3, [r7, #4]
 802117a:	685b      	ldr	r3, [r3, #4]
 802117c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021180:	d106      	bne.n	8021190 <HAL_RCC_OscConfig+0x74>
 8021182:	4b76      	ldr	r3, [pc, #472]	; (802135c <HAL_RCC_OscConfig+0x240>)
 8021184:	681b      	ldr	r3, [r3, #0]
 8021186:	4a75      	ldr	r2, [pc, #468]	; (802135c <HAL_RCC_OscConfig+0x240>)
 8021188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802118c:	6013      	str	r3, [r2, #0]
 802118e:	e01d      	b.n	80211cc <HAL_RCC_OscConfig+0xb0>
 8021190:	687b      	ldr	r3, [r7, #4]
 8021192:	685b      	ldr	r3, [r3, #4]
 8021194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8021198:	d10c      	bne.n	80211b4 <HAL_RCC_OscConfig+0x98>
 802119a:	4b70      	ldr	r3, [pc, #448]	; (802135c <HAL_RCC_OscConfig+0x240>)
 802119c:	681b      	ldr	r3, [r3, #0]
 802119e:	4a6f      	ldr	r2, [pc, #444]	; (802135c <HAL_RCC_OscConfig+0x240>)
 80211a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80211a4:	6013      	str	r3, [r2, #0]
 80211a6:	4b6d      	ldr	r3, [pc, #436]	; (802135c <HAL_RCC_OscConfig+0x240>)
 80211a8:	681b      	ldr	r3, [r3, #0]
 80211aa:	4a6c      	ldr	r2, [pc, #432]	; (802135c <HAL_RCC_OscConfig+0x240>)
 80211ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80211b0:	6013      	str	r3, [r2, #0]
 80211b2:	e00b      	b.n	80211cc <HAL_RCC_OscConfig+0xb0>
 80211b4:	4b69      	ldr	r3, [pc, #420]	; (802135c <HAL_RCC_OscConfig+0x240>)
 80211b6:	681b      	ldr	r3, [r3, #0]
 80211b8:	4a68      	ldr	r2, [pc, #416]	; (802135c <HAL_RCC_OscConfig+0x240>)
 80211ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80211be:	6013      	str	r3, [r2, #0]
 80211c0:	4b66      	ldr	r3, [pc, #408]	; (802135c <HAL_RCC_OscConfig+0x240>)
 80211c2:	681b      	ldr	r3, [r3, #0]
 80211c4:	4a65      	ldr	r2, [pc, #404]	; (802135c <HAL_RCC_OscConfig+0x240>)
 80211c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80211ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80211cc:	687b      	ldr	r3, [r7, #4]
 80211ce:	685b      	ldr	r3, [r3, #4]
 80211d0:	2b00      	cmp	r3, #0
 80211d2:	d013      	beq.n	80211fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80211d4:	f7fb fc74 	bl	801cac0 <HAL_GetTick>
 80211d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80211da:	e008      	b.n	80211ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80211dc:	f7fb fc70 	bl	801cac0 <HAL_GetTick>
 80211e0:	4602      	mov	r2, r0
 80211e2:	693b      	ldr	r3, [r7, #16]
 80211e4:	1ad3      	subs	r3, r2, r3
 80211e6:	2b64      	cmp	r3, #100	; 0x64
 80211e8:	d901      	bls.n	80211ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80211ea:	2303      	movs	r3, #3
 80211ec:	e207      	b.n	80215fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80211ee:	4b5b      	ldr	r3, [pc, #364]	; (802135c <HAL_RCC_OscConfig+0x240>)
 80211f0:	681b      	ldr	r3, [r3, #0]
 80211f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80211f6:	2b00      	cmp	r3, #0
 80211f8:	d0f0      	beq.n	80211dc <HAL_RCC_OscConfig+0xc0>
 80211fa:	e014      	b.n	8021226 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80211fc:	f7fb fc60 	bl	801cac0 <HAL_GetTick>
 8021200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8021202:	e008      	b.n	8021216 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8021204:	f7fb fc5c 	bl	801cac0 <HAL_GetTick>
 8021208:	4602      	mov	r2, r0
 802120a:	693b      	ldr	r3, [r7, #16]
 802120c:	1ad3      	subs	r3, r2, r3
 802120e:	2b64      	cmp	r3, #100	; 0x64
 8021210:	d901      	bls.n	8021216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8021212:	2303      	movs	r3, #3
 8021214:	e1f3      	b.n	80215fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8021216:	4b51      	ldr	r3, [pc, #324]	; (802135c <HAL_RCC_OscConfig+0x240>)
 8021218:	681b      	ldr	r3, [r3, #0]
 802121a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802121e:	2b00      	cmp	r3, #0
 8021220:	d1f0      	bne.n	8021204 <HAL_RCC_OscConfig+0xe8>
 8021222:	e000      	b.n	8021226 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8021226:	687b      	ldr	r3, [r7, #4]
 8021228:	681b      	ldr	r3, [r3, #0]
 802122a:	f003 0302 	and.w	r3, r3, #2
 802122e:	2b00      	cmp	r3, #0
 8021230:	d063      	beq.n	80212fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8021232:	4b4a      	ldr	r3, [pc, #296]	; (802135c <HAL_RCC_OscConfig+0x240>)
 8021234:	689b      	ldr	r3, [r3, #8]
 8021236:	f003 030c 	and.w	r3, r3, #12
 802123a:	2b00      	cmp	r3, #0
 802123c:	d00b      	beq.n	8021256 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802123e:	4b47      	ldr	r3, [pc, #284]	; (802135c <HAL_RCC_OscConfig+0x240>)
 8021240:	689b      	ldr	r3, [r3, #8]
 8021242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8021246:	2b08      	cmp	r3, #8
 8021248:	d11c      	bne.n	8021284 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802124a:	4b44      	ldr	r3, [pc, #272]	; (802135c <HAL_RCC_OscConfig+0x240>)
 802124c:	685b      	ldr	r3, [r3, #4]
 802124e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8021252:	2b00      	cmp	r3, #0
 8021254:	d116      	bne.n	8021284 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8021256:	4b41      	ldr	r3, [pc, #260]	; (802135c <HAL_RCC_OscConfig+0x240>)
 8021258:	681b      	ldr	r3, [r3, #0]
 802125a:	f003 0302 	and.w	r3, r3, #2
 802125e:	2b00      	cmp	r3, #0
 8021260:	d005      	beq.n	802126e <HAL_RCC_OscConfig+0x152>
 8021262:	687b      	ldr	r3, [r7, #4]
 8021264:	68db      	ldr	r3, [r3, #12]
 8021266:	2b01      	cmp	r3, #1
 8021268:	d001      	beq.n	802126e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 802126a:	2301      	movs	r3, #1
 802126c:	e1c7      	b.n	80215fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802126e:	4b3b      	ldr	r3, [pc, #236]	; (802135c <HAL_RCC_OscConfig+0x240>)
 8021270:	681b      	ldr	r3, [r3, #0]
 8021272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8021276:	687b      	ldr	r3, [r7, #4]
 8021278:	691b      	ldr	r3, [r3, #16]
 802127a:	00db      	lsls	r3, r3, #3
 802127c:	4937      	ldr	r1, [pc, #220]	; (802135c <HAL_RCC_OscConfig+0x240>)
 802127e:	4313      	orrs	r3, r2
 8021280:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8021282:	e03a      	b.n	80212fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8021284:	687b      	ldr	r3, [r7, #4]
 8021286:	68db      	ldr	r3, [r3, #12]
 8021288:	2b00      	cmp	r3, #0
 802128a:	d020      	beq.n	80212ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 802128c:	4b34      	ldr	r3, [pc, #208]	; (8021360 <HAL_RCC_OscConfig+0x244>)
 802128e:	2201      	movs	r2, #1
 8021290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021292:	f7fb fc15 	bl	801cac0 <HAL_GetTick>
 8021296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021298:	e008      	b.n	80212ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802129a:	f7fb fc11 	bl	801cac0 <HAL_GetTick>
 802129e:	4602      	mov	r2, r0
 80212a0:	693b      	ldr	r3, [r7, #16]
 80212a2:	1ad3      	subs	r3, r2, r3
 80212a4:	2b02      	cmp	r3, #2
 80212a6:	d901      	bls.n	80212ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80212a8:	2303      	movs	r3, #3
 80212aa:	e1a8      	b.n	80215fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80212ac:	4b2b      	ldr	r3, [pc, #172]	; (802135c <HAL_RCC_OscConfig+0x240>)
 80212ae:	681b      	ldr	r3, [r3, #0]
 80212b0:	f003 0302 	and.w	r3, r3, #2
 80212b4:	2b00      	cmp	r3, #0
 80212b6:	d0f0      	beq.n	802129a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80212b8:	4b28      	ldr	r3, [pc, #160]	; (802135c <HAL_RCC_OscConfig+0x240>)
 80212ba:	681b      	ldr	r3, [r3, #0]
 80212bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80212c0:	687b      	ldr	r3, [r7, #4]
 80212c2:	691b      	ldr	r3, [r3, #16]
 80212c4:	00db      	lsls	r3, r3, #3
 80212c6:	4925      	ldr	r1, [pc, #148]	; (802135c <HAL_RCC_OscConfig+0x240>)
 80212c8:	4313      	orrs	r3, r2
 80212ca:	600b      	str	r3, [r1, #0]
 80212cc:	e015      	b.n	80212fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80212ce:	4b24      	ldr	r3, [pc, #144]	; (8021360 <HAL_RCC_OscConfig+0x244>)
 80212d0:	2200      	movs	r2, #0
 80212d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80212d4:	f7fb fbf4 	bl	801cac0 <HAL_GetTick>
 80212d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80212da:	e008      	b.n	80212ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80212dc:	f7fb fbf0 	bl	801cac0 <HAL_GetTick>
 80212e0:	4602      	mov	r2, r0
 80212e2:	693b      	ldr	r3, [r7, #16]
 80212e4:	1ad3      	subs	r3, r2, r3
 80212e6:	2b02      	cmp	r3, #2
 80212e8:	d901      	bls.n	80212ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80212ea:	2303      	movs	r3, #3
 80212ec:	e187      	b.n	80215fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80212ee:	4b1b      	ldr	r3, [pc, #108]	; (802135c <HAL_RCC_OscConfig+0x240>)
 80212f0:	681b      	ldr	r3, [r3, #0]
 80212f2:	f003 0302 	and.w	r3, r3, #2
 80212f6:	2b00      	cmp	r3, #0
 80212f8:	d1f0      	bne.n	80212dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80212fa:	687b      	ldr	r3, [r7, #4]
 80212fc:	681b      	ldr	r3, [r3, #0]
 80212fe:	f003 0308 	and.w	r3, r3, #8
 8021302:	2b00      	cmp	r3, #0
 8021304:	d036      	beq.n	8021374 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8021306:	687b      	ldr	r3, [r7, #4]
 8021308:	695b      	ldr	r3, [r3, #20]
 802130a:	2b00      	cmp	r3, #0
 802130c:	d016      	beq.n	802133c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802130e:	4b15      	ldr	r3, [pc, #84]	; (8021364 <HAL_RCC_OscConfig+0x248>)
 8021310:	2201      	movs	r2, #1
 8021312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021314:	f7fb fbd4 	bl	801cac0 <HAL_GetTick>
 8021318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802131a:	e008      	b.n	802132e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802131c:	f7fb fbd0 	bl	801cac0 <HAL_GetTick>
 8021320:	4602      	mov	r2, r0
 8021322:	693b      	ldr	r3, [r7, #16]
 8021324:	1ad3      	subs	r3, r2, r3
 8021326:	2b02      	cmp	r3, #2
 8021328:	d901      	bls.n	802132e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 802132a:	2303      	movs	r3, #3
 802132c:	e167      	b.n	80215fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802132e:	4b0b      	ldr	r3, [pc, #44]	; (802135c <HAL_RCC_OscConfig+0x240>)
 8021330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021332:	f003 0302 	and.w	r3, r3, #2
 8021336:	2b00      	cmp	r3, #0
 8021338:	d0f0      	beq.n	802131c <HAL_RCC_OscConfig+0x200>
 802133a:	e01b      	b.n	8021374 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802133c:	4b09      	ldr	r3, [pc, #36]	; (8021364 <HAL_RCC_OscConfig+0x248>)
 802133e:	2200      	movs	r2, #0
 8021340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8021342:	f7fb fbbd 	bl	801cac0 <HAL_GetTick>
 8021346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021348:	e00e      	b.n	8021368 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802134a:	f7fb fbb9 	bl	801cac0 <HAL_GetTick>
 802134e:	4602      	mov	r2, r0
 8021350:	693b      	ldr	r3, [r7, #16]
 8021352:	1ad3      	subs	r3, r2, r3
 8021354:	2b02      	cmp	r3, #2
 8021356:	d907      	bls.n	8021368 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8021358:	2303      	movs	r3, #3
 802135a:	e150      	b.n	80215fe <HAL_RCC_OscConfig+0x4e2>
 802135c:	40023800 	.word	0x40023800
 8021360:	42470000 	.word	0x42470000
 8021364:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021368:	4b88      	ldr	r3, [pc, #544]	; (802158c <HAL_RCC_OscConfig+0x470>)
 802136a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802136c:	f003 0302 	and.w	r3, r3, #2
 8021370:	2b00      	cmp	r3, #0
 8021372:	d1ea      	bne.n	802134a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8021374:	687b      	ldr	r3, [r7, #4]
 8021376:	681b      	ldr	r3, [r3, #0]
 8021378:	f003 0304 	and.w	r3, r3, #4
 802137c:	2b00      	cmp	r3, #0
 802137e:	f000 8097 	beq.w	80214b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8021382:	2300      	movs	r3, #0
 8021384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8021386:	4b81      	ldr	r3, [pc, #516]	; (802158c <HAL_RCC_OscConfig+0x470>)
 8021388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802138e:	2b00      	cmp	r3, #0
 8021390:	d10f      	bne.n	80213b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8021392:	2300      	movs	r3, #0
 8021394:	60bb      	str	r3, [r7, #8]
 8021396:	4b7d      	ldr	r3, [pc, #500]	; (802158c <HAL_RCC_OscConfig+0x470>)
 8021398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802139a:	4a7c      	ldr	r2, [pc, #496]	; (802158c <HAL_RCC_OscConfig+0x470>)
 802139c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80213a0:	6413      	str	r3, [r2, #64]	; 0x40
 80213a2:	4b7a      	ldr	r3, [pc, #488]	; (802158c <HAL_RCC_OscConfig+0x470>)
 80213a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80213a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80213aa:	60bb      	str	r3, [r7, #8]
 80213ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80213ae:	2301      	movs	r3, #1
 80213b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80213b2:	4b77      	ldr	r3, [pc, #476]	; (8021590 <HAL_RCC_OscConfig+0x474>)
 80213b4:	681b      	ldr	r3, [r3, #0]
 80213b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80213ba:	2b00      	cmp	r3, #0
 80213bc:	d118      	bne.n	80213f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80213be:	4b74      	ldr	r3, [pc, #464]	; (8021590 <HAL_RCC_OscConfig+0x474>)
 80213c0:	681b      	ldr	r3, [r3, #0]
 80213c2:	4a73      	ldr	r2, [pc, #460]	; (8021590 <HAL_RCC_OscConfig+0x474>)
 80213c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80213c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80213ca:	f7fb fb79 	bl	801cac0 <HAL_GetTick>
 80213ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80213d0:	e008      	b.n	80213e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80213d2:	f7fb fb75 	bl	801cac0 <HAL_GetTick>
 80213d6:	4602      	mov	r2, r0
 80213d8:	693b      	ldr	r3, [r7, #16]
 80213da:	1ad3      	subs	r3, r2, r3
 80213dc:	2b02      	cmp	r3, #2
 80213de:	d901      	bls.n	80213e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80213e0:	2303      	movs	r3, #3
 80213e2:	e10c      	b.n	80215fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80213e4:	4b6a      	ldr	r3, [pc, #424]	; (8021590 <HAL_RCC_OscConfig+0x474>)
 80213e6:	681b      	ldr	r3, [r3, #0]
 80213e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80213ec:	2b00      	cmp	r3, #0
 80213ee:	d0f0      	beq.n	80213d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80213f0:	687b      	ldr	r3, [r7, #4]
 80213f2:	689b      	ldr	r3, [r3, #8]
 80213f4:	2b01      	cmp	r3, #1
 80213f6:	d106      	bne.n	8021406 <HAL_RCC_OscConfig+0x2ea>
 80213f8:	4b64      	ldr	r3, [pc, #400]	; (802158c <HAL_RCC_OscConfig+0x470>)
 80213fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80213fc:	4a63      	ldr	r2, [pc, #396]	; (802158c <HAL_RCC_OscConfig+0x470>)
 80213fe:	f043 0301 	orr.w	r3, r3, #1
 8021402:	6713      	str	r3, [r2, #112]	; 0x70
 8021404:	e01c      	b.n	8021440 <HAL_RCC_OscConfig+0x324>
 8021406:	687b      	ldr	r3, [r7, #4]
 8021408:	689b      	ldr	r3, [r3, #8]
 802140a:	2b05      	cmp	r3, #5
 802140c:	d10c      	bne.n	8021428 <HAL_RCC_OscConfig+0x30c>
 802140e:	4b5f      	ldr	r3, [pc, #380]	; (802158c <HAL_RCC_OscConfig+0x470>)
 8021410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021412:	4a5e      	ldr	r2, [pc, #376]	; (802158c <HAL_RCC_OscConfig+0x470>)
 8021414:	f043 0304 	orr.w	r3, r3, #4
 8021418:	6713      	str	r3, [r2, #112]	; 0x70
 802141a:	4b5c      	ldr	r3, [pc, #368]	; (802158c <HAL_RCC_OscConfig+0x470>)
 802141c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802141e:	4a5b      	ldr	r2, [pc, #364]	; (802158c <HAL_RCC_OscConfig+0x470>)
 8021420:	f043 0301 	orr.w	r3, r3, #1
 8021424:	6713      	str	r3, [r2, #112]	; 0x70
 8021426:	e00b      	b.n	8021440 <HAL_RCC_OscConfig+0x324>
 8021428:	4b58      	ldr	r3, [pc, #352]	; (802158c <HAL_RCC_OscConfig+0x470>)
 802142a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802142c:	4a57      	ldr	r2, [pc, #348]	; (802158c <HAL_RCC_OscConfig+0x470>)
 802142e:	f023 0301 	bic.w	r3, r3, #1
 8021432:	6713      	str	r3, [r2, #112]	; 0x70
 8021434:	4b55      	ldr	r3, [pc, #340]	; (802158c <HAL_RCC_OscConfig+0x470>)
 8021436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021438:	4a54      	ldr	r2, [pc, #336]	; (802158c <HAL_RCC_OscConfig+0x470>)
 802143a:	f023 0304 	bic.w	r3, r3, #4
 802143e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8021440:	687b      	ldr	r3, [r7, #4]
 8021442:	689b      	ldr	r3, [r3, #8]
 8021444:	2b00      	cmp	r3, #0
 8021446:	d015      	beq.n	8021474 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021448:	f7fb fb3a 	bl	801cac0 <HAL_GetTick>
 802144c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802144e:	e00a      	b.n	8021466 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021450:	f7fb fb36 	bl	801cac0 <HAL_GetTick>
 8021454:	4602      	mov	r2, r0
 8021456:	693b      	ldr	r3, [r7, #16]
 8021458:	1ad3      	subs	r3, r2, r3
 802145a:	f241 3288 	movw	r2, #5000	; 0x1388
 802145e:	4293      	cmp	r3, r2
 8021460:	d901      	bls.n	8021466 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8021462:	2303      	movs	r3, #3
 8021464:	e0cb      	b.n	80215fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8021466:	4b49      	ldr	r3, [pc, #292]	; (802158c <HAL_RCC_OscConfig+0x470>)
 8021468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802146a:	f003 0302 	and.w	r3, r3, #2
 802146e:	2b00      	cmp	r3, #0
 8021470:	d0ee      	beq.n	8021450 <HAL_RCC_OscConfig+0x334>
 8021472:	e014      	b.n	802149e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8021474:	f7fb fb24 	bl	801cac0 <HAL_GetTick>
 8021478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802147a:	e00a      	b.n	8021492 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802147c:	f7fb fb20 	bl	801cac0 <HAL_GetTick>
 8021480:	4602      	mov	r2, r0
 8021482:	693b      	ldr	r3, [r7, #16]
 8021484:	1ad3      	subs	r3, r2, r3
 8021486:	f241 3288 	movw	r2, #5000	; 0x1388
 802148a:	4293      	cmp	r3, r2
 802148c:	d901      	bls.n	8021492 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 802148e:	2303      	movs	r3, #3
 8021490:	e0b5      	b.n	80215fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8021492:	4b3e      	ldr	r3, [pc, #248]	; (802158c <HAL_RCC_OscConfig+0x470>)
 8021494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021496:	f003 0302 	and.w	r3, r3, #2
 802149a:	2b00      	cmp	r3, #0
 802149c:	d1ee      	bne.n	802147c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 802149e:	7dfb      	ldrb	r3, [r7, #23]
 80214a0:	2b01      	cmp	r3, #1
 80214a2:	d105      	bne.n	80214b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80214a4:	4b39      	ldr	r3, [pc, #228]	; (802158c <HAL_RCC_OscConfig+0x470>)
 80214a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80214a8:	4a38      	ldr	r2, [pc, #224]	; (802158c <HAL_RCC_OscConfig+0x470>)
 80214aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80214ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80214b0:	687b      	ldr	r3, [r7, #4]
 80214b2:	699b      	ldr	r3, [r3, #24]
 80214b4:	2b00      	cmp	r3, #0
 80214b6:	f000 80a1 	beq.w	80215fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80214ba:	4b34      	ldr	r3, [pc, #208]	; (802158c <HAL_RCC_OscConfig+0x470>)
 80214bc:	689b      	ldr	r3, [r3, #8]
 80214be:	f003 030c 	and.w	r3, r3, #12
 80214c2:	2b08      	cmp	r3, #8
 80214c4:	d05c      	beq.n	8021580 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80214c6:	687b      	ldr	r3, [r7, #4]
 80214c8:	699b      	ldr	r3, [r3, #24]
 80214ca:	2b02      	cmp	r3, #2
 80214cc:	d141      	bne.n	8021552 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80214ce:	4b31      	ldr	r3, [pc, #196]	; (8021594 <HAL_RCC_OscConfig+0x478>)
 80214d0:	2200      	movs	r2, #0
 80214d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80214d4:	f7fb faf4 	bl	801cac0 <HAL_GetTick>
 80214d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80214da:	e008      	b.n	80214ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80214dc:	f7fb faf0 	bl	801cac0 <HAL_GetTick>
 80214e0:	4602      	mov	r2, r0
 80214e2:	693b      	ldr	r3, [r7, #16]
 80214e4:	1ad3      	subs	r3, r2, r3
 80214e6:	2b02      	cmp	r3, #2
 80214e8:	d901      	bls.n	80214ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80214ea:	2303      	movs	r3, #3
 80214ec:	e087      	b.n	80215fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80214ee:	4b27      	ldr	r3, [pc, #156]	; (802158c <HAL_RCC_OscConfig+0x470>)
 80214f0:	681b      	ldr	r3, [r3, #0]
 80214f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80214f6:	2b00      	cmp	r3, #0
 80214f8:	d1f0      	bne.n	80214dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80214fa:	687b      	ldr	r3, [r7, #4]
 80214fc:	69da      	ldr	r2, [r3, #28]
 80214fe:	687b      	ldr	r3, [r7, #4]
 8021500:	6a1b      	ldr	r3, [r3, #32]
 8021502:	431a      	orrs	r2, r3
 8021504:	687b      	ldr	r3, [r7, #4]
 8021506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021508:	019b      	lsls	r3, r3, #6
 802150a:	431a      	orrs	r2, r3
 802150c:	687b      	ldr	r3, [r7, #4]
 802150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021510:	085b      	lsrs	r3, r3, #1
 8021512:	3b01      	subs	r3, #1
 8021514:	041b      	lsls	r3, r3, #16
 8021516:	431a      	orrs	r2, r3
 8021518:	687b      	ldr	r3, [r7, #4]
 802151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802151c:	061b      	lsls	r3, r3, #24
 802151e:	491b      	ldr	r1, [pc, #108]	; (802158c <HAL_RCC_OscConfig+0x470>)
 8021520:	4313      	orrs	r3, r2
 8021522:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8021524:	4b1b      	ldr	r3, [pc, #108]	; (8021594 <HAL_RCC_OscConfig+0x478>)
 8021526:	2201      	movs	r2, #1
 8021528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802152a:	f7fb fac9 	bl	801cac0 <HAL_GetTick>
 802152e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021530:	e008      	b.n	8021544 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021532:	f7fb fac5 	bl	801cac0 <HAL_GetTick>
 8021536:	4602      	mov	r2, r0
 8021538:	693b      	ldr	r3, [r7, #16]
 802153a:	1ad3      	subs	r3, r2, r3
 802153c:	2b02      	cmp	r3, #2
 802153e:	d901      	bls.n	8021544 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8021540:	2303      	movs	r3, #3
 8021542:	e05c      	b.n	80215fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021544:	4b11      	ldr	r3, [pc, #68]	; (802158c <HAL_RCC_OscConfig+0x470>)
 8021546:	681b      	ldr	r3, [r3, #0]
 8021548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802154c:	2b00      	cmp	r3, #0
 802154e:	d0f0      	beq.n	8021532 <HAL_RCC_OscConfig+0x416>
 8021550:	e054      	b.n	80215fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8021552:	4b10      	ldr	r3, [pc, #64]	; (8021594 <HAL_RCC_OscConfig+0x478>)
 8021554:	2200      	movs	r2, #0
 8021556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021558:	f7fb fab2 	bl	801cac0 <HAL_GetTick>
 802155c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802155e:	e008      	b.n	8021572 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021560:	f7fb faae 	bl	801cac0 <HAL_GetTick>
 8021564:	4602      	mov	r2, r0
 8021566:	693b      	ldr	r3, [r7, #16]
 8021568:	1ad3      	subs	r3, r2, r3
 802156a:	2b02      	cmp	r3, #2
 802156c:	d901      	bls.n	8021572 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 802156e:	2303      	movs	r3, #3
 8021570:	e045      	b.n	80215fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021572:	4b06      	ldr	r3, [pc, #24]	; (802158c <HAL_RCC_OscConfig+0x470>)
 8021574:	681b      	ldr	r3, [r3, #0]
 8021576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802157a:	2b00      	cmp	r3, #0
 802157c:	d1f0      	bne.n	8021560 <HAL_RCC_OscConfig+0x444>
 802157e:	e03d      	b.n	80215fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8021580:	687b      	ldr	r3, [r7, #4]
 8021582:	699b      	ldr	r3, [r3, #24]
 8021584:	2b01      	cmp	r3, #1
 8021586:	d107      	bne.n	8021598 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8021588:	2301      	movs	r3, #1
 802158a:	e038      	b.n	80215fe <HAL_RCC_OscConfig+0x4e2>
 802158c:	40023800 	.word	0x40023800
 8021590:	40007000 	.word	0x40007000
 8021594:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8021598:	4b1b      	ldr	r3, [pc, #108]	; (8021608 <HAL_RCC_OscConfig+0x4ec>)
 802159a:	685b      	ldr	r3, [r3, #4]
 802159c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802159e:	687b      	ldr	r3, [r7, #4]
 80215a0:	699b      	ldr	r3, [r3, #24]
 80215a2:	2b01      	cmp	r3, #1
 80215a4:	d028      	beq.n	80215f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80215a6:	68fb      	ldr	r3, [r7, #12]
 80215a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80215ac:	687b      	ldr	r3, [r7, #4]
 80215ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80215b0:	429a      	cmp	r2, r3
 80215b2:	d121      	bne.n	80215f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80215b4:	68fb      	ldr	r3, [r7, #12]
 80215b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80215ba:	687b      	ldr	r3, [r7, #4]
 80215bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80215be:	429a      	cmp	r2, r3
 80215c0:	d11a      	bne.n	80215f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80215c2:	68fa      	ldr	r2, [r7, #12]
 80215c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80215c8:	4013      	ands	r3, r2
 80215ca:	687a      	ldr	r2, [r7, #4]
 80215cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80215ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80215d0:	4293      	cmp	r3, r2
 80215d2:	d111      	bne.n	80215f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80215d4:	68fb      	ldr	r3, [r7, #12]
 80215d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80215da:	687b      	ldr	r3, [r7, #4]
 80215dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80215de:	085b      	lsrs	r3, r3, #1
 80215e0:	3b01      	subs	r3, #1
 80215e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80215e4:	429a      	cmp	r2, r3
 80215e6:	d107      	bne.n	80215f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80215e8:	68fb      	ldr	r3, [r7, #12]
 80215ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80215ee:	687b      	ldr	r3, [r7, #4]
 80215f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80215f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80215f4:	429a      	cmp	r2, r3
 80215f6:	d001      	beq.n	80215fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80215f8:	2301      	movs	r3, #1
 80215fa:	e000      	b.n	80215fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80215fc:	2300      	movs	r3, #0
}
 80215fe:	4618      	mov	r0, r3
 8021600:	3718      	adds	r7, #24
 8021602:	46bd      	mov	sp, r7
 8021604:	bd80      	pop	{r7, pc}
 8021606:	bf00      	nop
 8021608:	40023800 	.word	0x40023800

0802160c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802160c:	b580      	push	{r7, lr}
 802160e:	b084      	sub	sp, #16
 8021610:	af00      	add	r7, sp, #0
 8021612:	6078      	str	r0, [r7, #4]
 8021614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8021616:	687b      	ldr	r3, [r7, #4]
 8021618:	2b00      	cmp	r3, #0
 802161a:	d101      	bne.n	8021620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 802161c:	2301      	movs	r3, #1
 802161e:	e0cc      	b.n	80217ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8021620:	4b68      	ldr	r3, [pc, #416]	; (80217c4 <HAL_RCC_ClockConfig+0x1b8>)
 8021622:	681b      	ldr	r3, [r3, #0]
 8021624:	f003 0307 	and.w	r3, r3, #7
 8021628:	683a      	ldr	r2, [r7, #0]
 802162a:	429a      	cmp	r2, r3
 802162c:	d90c      	bls.n	8021648 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802162e:	4b65      	ldr	r3, [pc, #404]	; (80217c4 <HAL_RCC_ClockConfig+0x1b8>)
 8021630:	683a      	ldr	r2, [r7, #0]
 8021632:	b2d2      	uxtb	r2, r2
 8021634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8021636:	4b63      	ldr	r3, [pc, #396]	; (80217c4 <HAL_RCC_ClockConfig+0x1b8>)
 8021638:	681b      	ldr	r3, [r3, #0]
 802163a:	f003 0307 	and.w	r3, r3, #7
 802163e:	683a      	ldr	r2, [r7, #0]
 8021640:	429a      	cmp	r2, r3
 8021642:	d001      	beq.n	8021648 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8021644:	2301      	movs	r3, #1
 8021646:	e0b8      	b.n	80217ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8021648:	687b      	ldr	r3, [r7, #4]
 802164a:	681b      	ldr	r3, [r3, #0]
 802164c:	f003 0302 	and.w	r3, r3, #2
 8021650:	2b00      	cmp	r3, #0
 8021652:	d020      	beq.n	8021696 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8021654:	687b      	ldr	r3, [r7, #4]
 8021656:	681b      	ldr	r3, [r3, #0]
 8021658:	f003 0304 	and.w	r3, r3, #4
 802165c:	2b00      	cmp	r3, #0
 802165e:	d005      	beq.n	802166c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8021660:	4b59      	ldr	r3, [pc, #356]	; (80217c8 <HAL_RCC_ClockConfig+0x1bc>)
 8021662:	689b      	ldr	r3, [r3, #8]
 8021664:	4a58      	ldr	r2, [pc, #352]	; (80217c8 <HAL_RCC_ClockConfig+0x1bc>)
 8021666:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 802166a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802166c:	687b      	ldr	r3, [r7, #4]
 802166e:	681b      	ldr	r3, [r3, #0]
 8021670:	f003 0308 	and.w	r3, r3, #8
 8021674:	2b00      	cmp	r3, #0
 8021676:	d005      	beq.n	8021684 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8021678:	4b53      	ldr	r3, [pc, #332]	; (80217c8 <HAL_RCC_ClockConfig+0x1bc>)
 802167a:	689b      	ldr	r3, [r3, #8]
 802167c:	4a52      	ldr	r2, [pc, #328]	; (80217c8 <HAL_RCC_ClockConfig+0x1bc>)
 802167e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8021682:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8021684:	4b50      	ldr	r3, [pc, #320]	; (80217c8 <HAL_RCC_ClockConfig+0x1bc>)
 8021686:	689b      	ldr	r3, [r3, #8]
 8021688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 802168c:	687b      	ldr	r3, [r7, #4]
 802168e:	689b      	ldr	r3, [r3, #8]
 8021690:	494d      	ldr	r1, [pc, #308]	; (80217c8 <HAL_RCC_ClockConfig+0x1bc>)
 8021692:	4313      	orrs	r3, r2
 8021694:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8021696:	687b      	ldr	r3, [r7, #4]
 8021698:	681b      	ldr	r3, [r3, #0]
 802169a:	f003 0301 	and.w	r3, r3, #1
 802169e:	2b00      	cmp	r3, #0
 80216a0:	d044      	beq.n	802172c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80216a2:	687b      	ldr	r3, [r7, #4]
 80216a4:	685b      	ldr	r3, [r3, #4]
 80216a6:	2b01      	cmp	r3, #1
 80216a8:	d107      	bne.n	80216ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80216aa:	4b47      	ldr	r3, [pc, #284]	; (80217c8 <HAL_RCC_ClockConfig+0x1bc>)
 80216ac:	681b      	ldr	r3, [r3, #0]
 80216ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80216b2:	2b00      	cmp	r3, #0
 80216b4:	d119      	bne.n	80216ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80216b6:	2301      	movs	r3, #1
 80216b8:	e07f      	b.n	80217ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80216ba:	687b      	ldr	r3, [r7, #4]
 80216bc:	685b      	ldr	r3, [r3, #4]
 80216be:	2b02      	cmp	r3, #2
 80216c0:	d003      	beq.n	80216ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80216c2:	687b      	ldr	r3, [r7, #4]
 80216c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80216c6:	2b03      	cmp	r3, #3
 80216c8:	d107      	bne.n	80216da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80216ca:	4b3f      	ldr	r3, [pc, #252]	; (80217c8 <HAL_RCC_ClockConfig+0x1bc>)
 80216cc:	681b      	ldr	r3, [r3, #0]
 80216ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80216d2:	2b00      	cmp	r3, #0
 80216d4:	d109      	bne.n	80216ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80216d6:	2301      	movs	r3, #1
 80216d8:	e06f      	b.n	80217ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80216da:	4b3b      	ldr	r3, [pc, #236]	; (80217c8 <HAL_RCC_ClockConfig+0x1bc>)
 80216dc:	681b      	ldr	r3, [r3, #0]
 80216de:	f003 0302 	and.w	r3, r3, #2
 80216e2:	2b00      	cmp	r3, #0
 80216e4:	d101      	bne.n	80216ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80216e6:	2301      	movs	r3, #1
 80216e8:	e067      	b.n	80217ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80216ea:	4b37      	ldr	r3, [pc, #220]	; (80217c8 <HAL_RCC_ClockConfig+0x1bc>)
 80216ec:	689b      	ldr	r3, [r3, #8]
 80216ee:	f023 0203 	bic.w	r2, r3, #3
 80216f2:	687b      	ldr	r3, [r7, #4]
 80216f4:	685b      	ldr	r3, [r3, #4]
 80216f6:	4934      	ldr	r1, [pc, #208]	; (80217c8 <HAL_RCC_ClockConfig+0x1bc>)
 80216f8:	4313      	orrs	r3, r2
 80216fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80216fc:	f7fb f9e0 	bl	801cac0 <HAL_GetTick>
 8021700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8021702:	e00a      	b.n	802171a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8021704:	f7fb f9dc 	bl	801cac0 <HAL_GetTick>
 8021708:	4602      	mov	r2, r0
 802170a:	68fb      	ldr	r3, [r7, #12]
 802170c:	1ad3      	subs	r3, r2, r3
 802170e:	f241 3288 	movw	r2, #5000	; 0x1388
 8021712:	4293      	cmp	r3, r2
 8021714:	d901      	bls.n	802171a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8021716:	2303      	movs	r3, #3
 8021718:	e04f      	b.n	80217ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802171a:	4b2b      	ldr	r3, [pc, #172]	; (80217c8 <HAL_RCC_ClockConfig+0x1bc>)
 802171c:	689b      	ldr	r3, [r3, #8]
 802171e:	f003 020c 	and.w	r2, r3, #12
 8021722:	687b      	ldr	r3, [r7, #4]
 8021724:	685b      	ldr	r3, [r3, #4]
 8021726:	009b      	lsls	r3, r3, #2
 8021728:	429a      	cmp	r2, r3
 802172a:	d1eb      	bne.n	8021704 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 802172c:	4b25      	ldr	r3, [pc, #148]	; (80217c4 <HAL_RCC_ClockConfig+0x1b8>)
 802172e:	681b      	ldr	r3, [r3, #0]
 8021730:	f003 0307 	and.w	r3, r3, #7
 8021734:	683a      	ldr	r2, [r7, #0]
 8021736:	429a      	cmp	r2, r3
 8021738:	d20c      	bcs.n	8021754 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802173a:	4b22      	ldr	r3, [pc, #136]	; (80217c4 <HAL_RCC_ClockConfig+0x1b8>)
 802173c:	683a      	ldr	r2, [r7, #0]
 802173e:	b2d2      	uxtb	r2, r2
 8021740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8021742:	4b20      	ldr	r3, [pc, #128]	; (80217c4 <HAL_RCC_ClockConfig+0x1b8>)
 8021744:	681b      	ldr	r3, [r3, #0]
 8021746:	f003 0307 	and.w	r3, r3, #7
 802174a:	683a      	ldr	r2, [r7, #0]
 802174c:	429a      	cmp	r2, r3
 802174e:	d001      	beq.n	8021754 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8021750:	2301      	movs	r3, #1
 8021752:	e032      	b.n	80217ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8021754:	687b      	ldr	r3, [r7, #4]
 8021756:	681b      	ldr	r3, [r3, #0]
 8021758:	f003 0304 	and.w	r3, r3, #4
 802175c:	2b00      	cmp	r3, #0
 802175e:	d008      	beq.n	8021772 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8021760:	4b19      	ldr	r3, [pc, #100]	; (80217c8 <HAL_RCC_ClockConfig+0x1bc>)
 8021762:	689b      	ldr	r3, [r3, #8]
 8021764:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8021768:	687b      	ldr	r3, [r7, #4]
 802176a:	68db      	ldr	r3, [r3, #12]
 802176c:	4916      	ldr	r1, [pc, #88]	; (80217c8 <HAL_RCC_ClockConfig+0x1bc>)
 802176e:	4313      	orrs	r3, r2
 8021770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8021772:	687b      	ldr	r3, [r7, #4]
 8021774:	681b      	ldr	r3, [r3, #0]
 8021776:	f003 0308 	and.w	r3, r3, #8
 802177a:	2b00      	cmp	r3, #0
 802177c:	d009      	beq.n	8021792 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802177e:	4b12      	ldr	r3, [pc, #72]	; (80217c8 <HAL_RCC_ClockConfig+0x1bc>)
 8021780:	689b      	ldr	r3, [r3, #8]
 8021782:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8021786:	687b      	ldr	r3, [r7, #4]
 8021788:	691b      	ldr	r3, [r3, #16]
 802178a:	00db      	lsls	r3, r3, #3
 802178c:	490e      	ldr	r1, [pc, #56]	; (80217c8 <HAL_RCC_ClockConfig+0x1bc>)
 802178e:	4313      	orrs	r3, r2
 8021790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8021792:	f000 f821 	bl	80217d8 <HAL_RCC_GetSysClockFreq>
 8021796:	4602      	mov	r2, r0
 8021798:	4b0b      	ldr	r3, [pc, #44]	; (80217c8 <HAL_RCC_ClockConfig+0x1bc>)
 802179a:	689b      	ldr	r3, [r3, #8]
 802179c:	091b      	lsrs	r3, r3, #4
 802179e:	f003 030f 	and.w	r3, r3, #15
 80217a2:	490a      	ldr	r1, [pc, #40]	; (80217cc <HAL_RCC_ClockConfig+0x1c0>)
 80217a4:	5ccb      	ldrb	r3, [r1, r3]
 80217a6:	fa22 f303 	lsr.w	r3, r2, r3
 80217aa:	4a09      	ldr	r2, [pc, #36]	; (80217d0 <HAL_RCC_ClockConfig+0x1c4>)
 80217ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80217ae:	4b09      	ldr	r3, [pc, #36]	; (80217d4 <HAL_RCC_ClockConfig+0x1c8>)
 80217b0:	681b      	ldr	r3, [r3, #0]
 80217b2:	4618      	mov	r0, r3
 80217b4:	f7fb f940 	bl	801ca38 <HAL_InitTick>

  return HAL_OK;
 80217b8:	2300      	movs	r3, #0
}
 80217ba:	4618      	mov	r0, r3
 80217bc:	3710      	adds	r7, #16
 80217be:	46bd      	mov	sp, r7
 80217c0:	bd80      	pop	{r7, pc}
 80217c2:	bf00      	nop
 80217c4:	40023c00 	.word	0x40023c00
 80217c8:	40023800 	.word	0x40023800
 80217cc:	08028da0 	.word	0x08028da0
 80217d0:	20000020 	.word	0x20000020
 80217d4:	2000015c 	.word	0x2000015c

080217d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80217d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80217dc:	b094      	sub	sp, #80	; 0x50
 80217de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80217e0:	2300      	movs	r3, #0
 80217e2:	647b      	str	r3, [r7, #68]	; 0x44
 80217e4:	2300      	movs	r3, #0
 80217e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80217e8:	2300      	movs	r3, #0
 80217ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80217ec:	2300      	movs	r3, #0
 80217ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80217f0:	4b79      	ldr	r3, [pc, #484]	; (80219d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80217f2:	689b      	ldr	r3, [r3, #8]
 80217f4:	f003 030c 	and.w	r3, r3, #12
 80217f8:	2b08      	cmp	r3, #8
 80217fa:	d00d      	beq.n	8021818 <HAL_RCC_GetSysClockFreq+0x40>
 80217fc:	2b08      	cmp	r3, #8
 80217fe:	f200 80e1 	bhi.w	80219c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8021802:	2b00      	cmp	r3, #0
 8021804:	d002      	beq.n	802180c <HAL_RCC_GetSysClockFreq+0x34>
 8021806:	2b04      	cmp	r3, #4
 8021808:	d003      	beq.n	8021812 <HAL_RCC_GetSysClockFreq+0x3a>
 802180a:	e0db      	b.n	80219c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 802180c:	4b73      	ldr	r3, [pc, #460]	; (80219dc <HAL_RCC_GetSysClockFreq+0x204>)
 802180e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8021810:	e0db      	b.n	80219ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8021812:	4b73      	ldr	r3, [pc, #460]	; (80219e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8021814:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8021816:	e0d8      	b.n	80219ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8021818:	4b6f      	ldr	r3, [pc, #444]	; (80219d8 <HAL_RCC_GetSysClockFreq+0x200>)
 802181a:	685b      	ldr	r3, [r3, #4]
 802181c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8021820:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8021822:	4b6d      	ldr	r3, [pc, #436]	; (80219d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8021824:	685b      	ldr	r3, [r3, #4]
 8021826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802182a:	2b00      	cmp	r3, #0
 802182c:	d063      	beq.n	80218f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802182e:	4b6a      	ldr	r3, [pc, #424]	; (80219d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8021830:	685b      	ldr	r3, [r3, #4]
 8021832:	099b      	lsrs	r3, r3, #6
 8021834:	2200      	movs	r2, #0
 8021836:	63bb      	str	r3, [r7, #56]	; 0x38
 8021838:	63fa      	str	r2, [r7, #60]	; 0x3c
 802183a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802183c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021840:	633b      	str	r3, [r7, #48]	; 0x30
 8021842:	2300      	movs	r3, #0
 8021844:	637b      	str	r3, [r7, #52]	; 0x34
 8021846:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 802184a:	4622      	mov	r2, r4
 802184c:	462b      	mov	r3, r5
 802184e:	f04f 0000 	mov.w	r0, #0
 8021852:	f04f 0100 	mov.w	r1, #0
 8021856:	0159      	lsls	r1, r3, #5
 8021858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802185c:	0150      	lsls	r0, r2, #5
 802185e:	4602      	mov	r2, r0
 8021860:	460b      	mov	r3, r1
 8021862:	4621      	mov	r1, r4
 8021864:	1a51      	subs	r1, r2, r1
 8021866:	6139      	str	r1, [r7, #16]
 8021868:	4629      	mov	r1, r5
 802186a:	eb63 0301 	sbc.w	r3, r3, r1
 802186e:	617b      	str	r3, [r7, #20]
 8021870:	f04f 0200 	mov.w	r2, #0
 8021874:	f04f 0300 	mov.w	r3, #0
 8021878:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 802187c:	4659      	mov	r1, fp
 802187e:	018b      	lsls	r3, r1, #6
 8021880:	4651      	mov	r1, sl
 8021882:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8021886:	4651      	mov	r1, sl
 8021888:	018a      	lsls	r2, r1, #6
 802188a:	4651      	mov	r1, sl
 802188c:	ebb2 0801 	subs.w	r8, r2, r1
 8021890:	4659      	mov	r1, fp
 8021892:	eb63 0901 	sbc.w	r9, r3, r1
 8021896:	f04f 0200 	mov.w	r2, #0
 802189a:	f04f 0300 	mov.w	r3, #0
 802189e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80218a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80218a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80218aa:	4690      	mov	r8, r2
 80218ac:	4699      	mov	r9, r3
 80218ae:	4623      	mov	r3, r4
 80218b0:	eb18 0303 	adds.w	r3, r8, r3
 80218b4:	60bb      	str	r3, [r7, #8]
 80218b6:	462b      	mov	r3, r5
 80218b8:	eb49 0303 	adc.w	r3, r9, r3
 80218bc:	60fb      	str	r3, [r7, #12]
 80218be:	f04f 0200 	mov.w	r2, #0
 80218c2:	f04f 0300 	mov.w	r3, #0
 80218c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80218ca:	4629      	mov	r1, r5
 80218cc:	024b      	lsls	r3, r1, #9
 80218ce:	4621      	mov	r1, r4
 80218d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80218d4:	4621      	mov	r1, r4
 80218d6:	024a      	lsls	r2, r1, #9
 80218d8:	4610      	mov	r0, r2
 80218da:	4619      	mov	r1, r3
 80218dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80218de:	2200      	movs	r2, #0
 80218e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80218e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80218e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80218e8:	f7df faca 	bl	8000e80 <__aeabi_uldivmod>
 80218ec:	4602      	mov	r2, r0
 80218ee:	460b      	mov	r3, r1
 80218f0:	4613      	mov	r3, r2
 80218f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80218f4:	e058      	b.n	80219a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80218f6:	4b38      	ldr	r3, [pc, #224]	; (80219d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80218f8:	685b      	ldr	r3, [r3, #4]
 80218fa:	099b      	lsrs	r3, r3, #6
 80218fc:	2200      	movs	r2, #0
 80218fe:	4618      	mov	r0, r3
 8021900:	4611      	mov	r1, r2
 8021902:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8021906:	623b      	str	r3, [r7, #32]
 8021908:	2300      	movs	r3, #0
 802190a:	627b      	str	r3, [r7, #36]	; 0x24
 802190c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8021910:	4642      	mov	r2, r8
 8021912:	464b      	mov	r3, r9
 8021914:	f04f 0000 	mov.w	r0, #0
 8021918:	f04f 0100 	mov.w	r1, #0
 802191c:	0159      	lsls	r1, r3, #5
 802191e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8021922:	0150      	lsls	r0, r2, #5
 8021924:	4602      	mov	r2, r0
 8021926:	460b      	mov	r3, r1
 8021928:	4641      	mov	r1, r8
 802192a:	ebb2 0a01 	subs.w	sl, r2, r1
 802192e:	4649      	mov	r1, r9
 8021930:	eb63 0b01 	sbc.w	fp, r3, r1
 8021934:	f04f 0200 	mov.w	r2, #0
 8021938:	f04f 0300 	mov.w	r3, #0
 802193c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8021940:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8021944:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8021948:	ebb2 040a 	subs.w	r4, r2, sl
 802194c:	eb63 050b 	sbc.w	r5, r3, fp
 8021950:	f04f 0200 	mov.w	r2, #0
 8021954:	f04f 0300 	mov.w	r3, #0
 8021958:	00eb      	lsls	r3, r5, #3
 802195a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802195e:	00e2      	lsls	r2, r4, #3
 8021960:	4614      	mov	r4, r2
 8021962:	461d      	mov	r5, r3
 8021964:	4643      	mov	r3, r8
 8021966:	18e3      	adds	r3, r4, r3
 8021968:	603b      	str	r3, [r7, #0]
 802196a:	464b      	mov	r3, r9
 802196c:	eb45 0303 	adc.w	r3, r5, r3
 8021970:	607b      	str	r3, [r7, #4]
 8021972:	f04f 0200 	mov.w	r2, #0
 8021976:	f04f 0300 	mov.w	r3, #0
 802197a:	e9d7 4500 	ldrd	r4, r5, [r7]
 802197e:	4629      	mov	r1, r5
 8021980:	028b      	lsls	r3, r1, #10
 8021982:	4621      	mov	r1, r4
 8021984:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8021988:	4621      	mov	r1, r4
 802198a:	028a      	lsls	r2, r1, #10
 802198c:	4610      	mov	r0, r2
 802198e:	4619      	mov	r1, r3
 8021990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021992:	2200      	movs	r2, #0
 8021994:	61bb      	str	r3, [r7, #24]
 8021996:	61fa      	str	r2, [r7, #28]
 8021998:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802199c:	f7df fa70 	bl	8000e80 <__aeabi_uldivmod>
 80219a0:	4602      	mov	r2, r0
 80219a2:	460b      	mov	r3, r1
 80219a4:	4613      	mov	r3, r2
 80219a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80219a8:	4b0b      	ldr	r3, [pc, #44]	; (80219d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80219aa:	685b      	ldr	r3, [r3, #4]
 80219ac:	0c1b      	lsrs	r3, r3, #16
 80219ae:	f003 0303 	and.w	r3, r3, #3
 80219b2:	3301      	adds	r3, #1
 80219b4:	005b      	lsls	r3, r3, #1
 80219b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80219b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80219ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80219bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80219c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80219c2:	e002      	b.n	80219ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80219c4:	4b05      	ldr	r3, [pc, #20]	; (80219dc <HAL_RCC_GetSysClockFreq+0x204>)
 80219c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80219c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80219ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80219cc:	4618      	mov	r0, r3
 80219ce:	3750      	adds	r7, #80	; 0x50
 80219d0:	46bd      	mov	sp, r7
 80219d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80219d6:	bf00      	nop
 80219d8:	40023800 	.word	0x40023800
 80219dc:	00f42400 	.word	0x00f42400
 80219e0:	007a1200 	.word	0x007a1200

080219e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80219e4:	b480      	push	{r7}
 80219e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80219e8:	4b03      	ldr	r3, [pc, #12]	; (80219f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80219ea:	681b      	ldr	r3, [r3, #0]
}
 80219ec:	4618      	mov	r0, r3
 80219ee:	46bd      	mov	sp, r7
 80219f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219f4:	4770      	bx	lr
 80219f6:	bf00      	nop
 80219f8:	20000020 	.word	0x20000020

080219fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80219fc:	b580      	push	{r7, lr}
 80219fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8021a00:	f7ff fff0 	bl	80219e4 <HAL_RCC_GetHCLKFreq>
 8021a04:	4602      	mov	r2, r0
 8021a06:	4b05      	ldr	r3, [pc, #20]	; (8021a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8021a08:	689b      	ldr	r3, [r3, #8]
 8021a0a:	0a9b      	lsrs	r3, r3, #10
 8021a0c:	f003 0307 	and.w	r3, r3, #7
 8021a10:	4903      	ldr	r1, [pc, #12]	; (8021a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8021a12:	5ccb      	ldrb	r3, [r1, r3]
 8021a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8021a18:	4618      	mov	r0, r3
 8021a1a:	bd80      	pop	{r7, pc}
 8021a1c:	40023800 	.word	0x40023800
 8021a20:	08028db0 	.word	0x08028db0

08021a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8021a24:	b580      	push	{r7, lr}
 8021a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8021a28:	f7ff ffdc 	bl	80219e4 <HAL_RCC_GetHCLKFreq>
 8021a2c:	4602      	mov	r2, r0
 8021a2e:	4b05      	ldr	r3, [pc, #20]	; (8021a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8021a30:	689b      	ldr	r3, [r3, #8]
 8021a32:	0b5b      	lsrs	r3, r3, #13
 8021a34:	f003 0307 	and.w	r3, r3, #7
 8021a38:	4903      	ldr	r1, [pc, #12]	; (8021a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8021a3a:	5ccb      	ldrb	r3, [r1, r3]
 8021a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8021a40:	4618      	mov	r0, r3
 8021a42:	bd80      	pop	{r7, pc}
 8021a44:	40023800 	.word	0x40023800
 8021a48:	08028db0 	.word	0x08028db0

08021a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8021a4c:	b580      	push	{r7, lr}
 8021a4e:	b082      	sub	sp, #8
 8021a50:	af00      	add	r7, sp, #0
 8021a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8021a54:	687b      	ldr	r3, [r7, #4]
 8021a56:	2b00      	cmp	r3, #0
 8021a58:	d101      	bne.n	8021a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8021a5a:	2301      	movs	r3, #1
 8021a5c:	e041      	b.n	8021ae2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8021a5e:	687b      	ldr	r3, [r7, #4]
 8021a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8021a64:	b2db      	uxtb	r3, r3
 8021a66:	2b00      	cmp	r3, #0
 8021a68:	d106      	bne.n	8021a78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8021a6a:	687b      	ldr	r3, [r7, #4]
 8021a6c:	2200      	movs	r2, #0
 8021a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8021a72:	6878      	ldr	r0, [r7, #4]
 8021a74:	f7e1 ff1c 	bl	80038b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8021a78:	687b      	ldr	r3, [r7, #4]
 8021a7a:	2202      	movs	r2, #2
 8021a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8021a80:	687b      	ldr	r3, [r7, #4]
 8021a82:	681a      	ldr	r2, [r3, #0]
 8021a84:	687b      	ldr	r3, [r7, #4]
 8021a86:	3304      	adds	r3, #4
 8021a88:	4619      	mov	r1, r3
 8021a8a:	4610      	mov	r0, r2
 8021a8c:	f000 fd14 	bl	80224b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8021a90:	687b      	ldr	r3, [r7, #4]
 8021a92:	2201      	movs	r2, #1
 8021a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8021a98:	687b      	ldr	r3, [r7, #4]
 8021a9a:	2201      	movs	r2, #1
 8021a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8021aa0:	687b      	ldr	r3, [r7, #4]
 8021aa2:	2201      	movs	r2, #1
 8021aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8021aa8:	687b      	ldr	r3, [r7, #4]
 8021aaa:	2201      	movs	r2, #1
 8021aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8021ab0:	687b      	ldr	r3, [r7, #4]
 8021ab2:	2201      	movs	r2, #1
 8021ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8021ab8:	687b      	ldr	r3, [r7, #4]
 8021aba:	2201      	movs	r2, #1
 8021abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8021ac0:	687b      	ldr	r3, [r7, #4]
 8021ac2:	2201      	movs	r2, #1
 8021ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8021ac8:	687b      	ldr	r3, [r7, #4]
 8021aca:	2201      	movs	r2, #1
 8021acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8021ad0:	687b      	ldr	r3, [r7, #4]
 8021ad2:	2201      	movs	r2, #1
 8021ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8021ad8:	687b      	ldr	r3, [r7, #4]
 8021ada:	2201      	movs	r2, #1
 8021adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8021ae0:	2300      	movs	r3, #0
}
 8021ae2:	4618      	mov	r0, r3
 8021ae4:	3708      	adds	r7, #8
 8021ae6:	46bd      	mov	sp, r7
 8021ae8:	bd80      	pop	{r7, pc}

08021aea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8021aea:	b580      	push	{r7, lr}
 8021aec:	b082      	sub	sp, #8
 8021aee:	af00      	add	r7, sp, #0
 8021af0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8021af2:	687b      	ldr	r3, [r7, #4]
 8021af4:	2b00      	cmp	r3, #0
 8021af6:	d101      	bne.n	8021afc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8021af8:	2301      	movs	r3, #1
 8021afa:	e041      	b.n	8021b80 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8021afc:	687b      	ldr	r3, [r7, #4]
 8021afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8021b02:	b2db      	uxtb	r3, r3
 8021b04:	2b00      	cmp	r3, #0
 8021b06:	d106      	bne.n	8021b16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8021b08:	687b      	ldr	r3, [r7, #4]
 8021b0a:	2200      	movs	r2, #0
 8021b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8021b10:	6878      	ldr	r0, [r7, #4]
 8021b12:	f000 f839 	bl	8021b88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8021b16:	687b      	ldr	r3, [r7, #4]
 8021b18:	2202      	movs	r2, #2
 8021b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8021b1e:	687b      	ldr	r3, [r7, #4]
 8021b20:	681a      	ldr	r2, [r3, #0]
 8021b22:	687b      	ldr	r3, [r7, #4]
 8021b24:	3304      	adds	r3, #4
 8021b26:	4619      	mov	r1, r3
 8021b28:	4610      	mov	r0, r2
 8021b2a:	f000 fcc5 	bl	80224b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8021b2e:	687b      	ldr	r3, [r7, #4]
 8021b30:	2201      	movs	r2, #1
 8021b32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8021b36:	687b      	ldr	r3, [r7, #4]
 8021b38:	2201      	movs	r2, #1
 8021b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8021b3e:	687b      	ldr	r3, [r7, #4]
 8021b40:	2201      	movs	r2, #1
 8021b42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8021b46:	687b      	ldr	r3, [r7, #4]
 8021b48:	2201      	movs	r2, #1
 8021b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8021b4e:	687b      	ldr	r3, [r7, #4]
 8021b50:	2201      	movs	r2, #1
 8021b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8021b56:	687b      	ldr	r3, [r7, #4]
 8021b58:	2201      	movs	r2, #1
 8021b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8021b5e:	687b      	ldr	r3, [r7, #4]
 8021b60:	2201      	movs	r2, #1
 8021b62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8021b66:	687b      	ldr	r3, [r7, #4]
 8021b68:	2201      	movs	r2, #1
 8021b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8021b6e:	687b      	ldr	r3, [r7, #4]
 8021b70:	2201      	movs	r2, #1
 8021b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8021b76:	687b      	ldr	r3, [r7, #4]
 8021b78:	2201      	movs	r2, #1
 8021b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8021b7e:	2300      	movs	r3, #0
}
 8021b80:	4618      	mov	r0, r3
 8021b82:	3708      	adds	r7, #8
 8021b84:	46bd      	mov	sp, r7
 8021b86:	bd80      	pop	{r7, pc}

08021b88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8021b88:	b480      	push	{r7}
 8021b8a:	b083      	sub	sp, #12
 8021b8c:	af00      	add	r7, sp, #0
 8021b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8021b90:	bf00      	nop
 8021b92:	370c      	adds	r7, #12
 8021b94:	46bd      	mov	sp, r7
 8021b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b9a:	4770      	bx	lr

08021b9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8021b9c:	b580      	push	{r7, lr}
 8021b9e:	b084      	sub	sp, #16
 8021ba0:	af00      	add	r7, sp, #0
 8021ba2:	6078      	str	r0, [r7, #4]
 8021ba4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8021ba6:	683b      	ldr	r3, [r7, #0]
 8021ba8:	2b00      	cmp	r3, #0
 8021baa:	d109      	bne.n	8021bc0 <HAL_TIM_PWM_Start+0x24>
 8021bac:	687b      	ldr	r3, [r7, #4]
 8021bae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8021bb2:	b2db      	uxtb	r3, r3
 8021bb4:	2b01      	cmp	r3, #1
 8021bb6:	bf14      	ite	ne
 8021bb8:	2301      	movne	r3, #1
 8021bba:	2300      	moveq	r3, #0
 8021bbc:	b2db      	uxtb	r3, r3
 8021bbe:	e022      	b.n	8021c06 <HAL_TIM_PWM_Start+0x6a>
 8021bc0:	683b      	ldr	r3, [r7, #0]
 8021bc2:	2b04      	cmp	r3, #4
 8021bc4:	d109      	bne.n	8021bda <HAL_TIM_PWM_Start+0x3e>
 8021bc6:	687b      	ldr	r3, [r7, #4]
 8021bc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8021bcc:	b2db      	uxtb	r3, r3
 8021bce:	2b01      	cmp	r3, #1
 8021bd0:	bf14      	ite	ne
 8021bd2:	2301      	movne	r3, #1
 8021bd4:	2300      	moveq	r3, #0
 8021bd6:	b2db      	uxtb	r3, r3
 8021bd8:	e015      	b.n	8021c06 <HAL_TIM_PWM_Start+0x6a>
 8021bda:	683b      	ldr	r3, [r7, #0]
 8021bdc:	2b08      	cmp	r3, #8
 8021bde:	d109      	bne.n	8021bf4 <HAL_TIM_PWM_Start+0x58>
 8021be0:	687b      	ldr	r3, [r7, #4]
 8021be2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8021be6:	b2db      	uxtb	r3, r3
 8021be8:	2b01      	cmp	r3, #1
 8021bea:	bf14      	ite	ne
 8021bec:	2301      	movne	r3, #1
 8021bee:	2300      	moveq	r3, #0
 8021bf0:	b2db      	uxtb	r3, r3
 8021bf2:	e008      	b.n	8021c06 <HAL_TIM_PWM_Start+0x6a>
 8021bf4:	687b      	ldr	r3, [r7, #4]
 8021bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8021bfa:	b2db      	uxtb	r3, r3
 8021bfc:	2b01      	cmp	r3, #1
 8021bfe:	bf14      	ite	ne
 8021c00:	2301      	movne	r3, #1
 8021c02:	2300      	moveq	r3, #0
 8021c04:	b2db      	uxtb	r3, r3
 8021c06:	2b00      	cmp	r3, #0
 8021c08:	d001      	beq.n	8021c0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8021c0a:	2301      	movs	r3, #1
 8021c0c:	e068      	b.n	8021ce0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8021c0e:	683b      	ldr	r3, [r7, #0]
 8021c10:	2b00      	cmp	r3, #0
 8021c12:	d104      	bne.n	8021c1e <HAL_TIM_PWM_Start+0x82>
 8021c14:	687b      	ldr	r3, [r7, #4]
 8021c16:	2202      	movs	r2, #2
 8021c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8021c1c:	e013      	b.n	8021c46 <HAL_TIM_PWM_Start+0xaa>
 8021c1e:	683b      	ldr	r3, [r7, #0]
 8021c20:	2b04      	cmp	r3, #4
 8021c22:	d104      	bne.n	8021c2e <HAL_TIM_PWM_Start+0x92>
 8021c24:	687b      	ldr	r3, [r7, #4]
 8021c26:	2202      	movs	r2, #2
 8021c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8021c2c:	e00b      	b.n	8021c46 <HAL_TIM_PWM_Start+0xaa>
 8021c2e:	683b      	ldr	r3, [r7, #0]
 8021c30:	2b08      	cmp	r3, #8
 8021c32:	d104      	bne.n	8021c3e <HAL_TIM_PWM_Start+0xa2>
 8021c34:	687b      	ldr	r3, [r7, #4]
 8021c36:	2202      	movs	r2, #2
 8021c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8021c3c:	e003      	b.n	8021c46 <HAL_TIM_PWM_Start+0xaa>
 8021c3e:	687b      	ldr	r3, [r7, #4]
 8021c40:	2202      	movs	r2, #2
 8021c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8021c46:	687b      	ldr	r3, [r7, #4]
 8021c48:	681b      	ldr	r3, [r3, #0]
 8021c4a:	2201      	movs	r2, #1
 8021c4c:	6839      	ldr	r1, [r7, #0]
 8021c4e:	4618      	mov	r0, r3
 8021c50:	f000 fed8 	bl	8022a04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8021c54:	687b      	ldr	r3, [r7, #4]
 8021c56:	681b      	ldr	r3, [r3, #0]
 8021c58:	4a23      	ldr	r2, [pc, #140]	; (8021ce8 <HAL_TIM_PWM_Start+0x14c>)
 8021c5a:	4293      	cmp	r3, r2
 8021c5c:	d107      	bne.n	8021c6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8021c5e:	687b      	ldr	r3, [r7, #4]
 8021c60:	681b      	ldr	r3, [r3, #0]
 8021c62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8021c64:	687b      	ldr	r3, [r7, #4]
 8021c66:	681b      	ldr	r3, [r3, #0]
 8021c68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8021c6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8021c6e:	687b      	ldr	r3, [r7, #4]
 8021c70:	681b      	ldr	r3, [r3, #0]
 8021c72:	4a1d      	ldr	r2, [pc, #116]	; (8021ce8 <HAL_TIM_PWM_Start+0x14c>)
 8021c74:	4293      	cmp	r3, r2
 8021c76:	d018      	beq.n	8021caa <HAL_TIM_PWM_Start+0x10e>
 8021c78:	687b      	ldr	r3, [r7, #4]
 8021c7a:	681b      	ldr	r3, [r3, #0]
 8021c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021c80:	d013      	beq.n	8021caa <HAL_TIM_PWM_Start+0x10e>
 8021c82:	687b      	ldr	r3, [r7, #4]
 8021c84:	681b      	ldr	r3, [r3, #0]
 8021c86:	4a19      	ldr	r2, [pc, #100]	; (8021cec <HAL_TIM_PWM_Start+0x150>)
 8021c88:	4293      	cmp	r3, r2
 8021c8a:	d00e      	beq.n	8021caa <HAL_TIM_PWM_Start+0x10e>
 8021c8c:	687b      	ldr	r3, [r7, #4]
 8021c8e:	681b      	ldr	r3, [r3, #0]
 8021c90:	4a17      	ldr	r2, [pc, #92]	; (8021cf0 <HAL_TIM_PWM_Start+0x154>)
 8021c92:	4293      	cmp	r3, r2
 8021c94:	d009      	beq.n	8021caa <HAL_TIM_PWM_Start+0x10e>
 8021c96:	687b      	ldr	r3, [r7, #4]
 8021c98:	681b      	ldr	r3, [r3, #0]
 8021c9a:	4a16      	ldr	r2, [pc, #88]	; (8021cf4 <HAL_TIM_PWM_Start+0x158>)
 8021c9c:	4293      	cmp	r3, r2
 8021c9e:	d004      	beq.n	8021caa <HAL_TIM_PWM_Start+0x10e>
 8021ca0:	687b      	ldr	r3, [r7, #4]
 8021ca2:	681b      	ldr	r3, [r3, #0]
 8021ca4:	4a14      	ldr	r2, [pc, #80]	; (8021cf8 <HAL_TIM_PWM_Start+0x15c>)
 8021ca6:	4293      	cmp	r3, r2
 8021ca8:	d111      	bne.n	8021cce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8021caa:	687b      	ldr	r3, [r7, #4]
 8021cac:	681b      	ldr	r3, [r3, #0]
 8021cae:	689b      	ldr	r3, [r3, #8]
 8021cb0:	f003 0307 	and.w	r3, r3, #7
 8021cb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8021cb6:	68fb      	ldr	r3, [r7, #12]
 8021cb8:	2b06      	cmp	r3, #6
 8021cba:	d010      	beq.n	8021cde <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8021cbc:	687b      	ldr	r3, [r7, #4]
 8021cbe:	681b      	ldr	r3, [r3, #0]
 8021cc0:	681a      	ldr	r2, [r3, #0]
 8021cc2:	687b      	ldr	r3, [r7, #4]
 8021cc4:	681b      	ldr	r3, [r3, #0]
 8021cc6:	f042 0201 	orr.w	r2, r2, #1
 8021cca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8021ccc:	e007      	b.n	8021cde <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8021cce:	687b      	ldr	r3, [r7, #4]
 8021cd0:	681b      	ldr	r3, [r3, #0]
 8021cd2:	681a      	ldr	r2, [r3, #0]
 8021cd4:	687b      	ldr	r3, [r7, #4]
 8021cd6:	681b      	ldr	r3, [r3, #0]
 8021cd8:	f042 0201 	orr.w	r2, r2, #1
 8021cdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8021cde:	2300      	movs	r3, #0
}
 8021ce0:	4618      	mov	r0, r3
 8021ce2:	3710      	adds	r7, #16
 8021ce4:	46bd      	mov	sp, r7
 8021ce6:	bd80      	pop	{r7, pc}
 8021ce8:	40010000 	.word	0x40010000
 8021cec:	40000400 	.word	0x40000400
 8021cf0:	40000800 	.word	0x40000800
 8021cf4:	40000c00 	.word	0x40000c00
 8021cf8:	40014000 	.word	0x40014000

08021cfc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8021cfc:	b580      	push	{r7, lr}
 8021cfe:	b084      	sub	sp, #16
 8021d00:	af00      	add	r7, sp, #0
 8021d02:	6078      	str	r0, [r7, #4]
 8021d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8021d06:	2300      	movs	r3, #0
 8021d08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8021d0a:	683b      	ldr	r3, [r7, #0]
 8021d0c:	2b00      	cmp	r3, #0
 8021d0e:	d104      	bne.n	8021d1a <HAL_TIM_IC_Start_IT+0x1e>
 8021d10:	687b      	ldr	r3, [r7, #4]
 8021d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8021d16:	b2db      	uxtb	r3, r3
 8021d18:	e013      	b.n	8021d42 <HAL_TIM_IC_Start_IT+0x46>
 8021d1a:	683b      	ldr	r3, [r7, #0]
 8021d1c:	2b04      	cmp	r3, #4
 8021d1e:	d104      	bne.n	8021d2a <HAL_TIM_IC_Start_IT+0x2e>
 8021d20:	687b      	ldr	r3, [r7, #4]
 8021d22:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8021d26:	b2db      	uxtb	r3, r3
 8021d28:	e00b      	b.n	8021d42 <HAL_TIM_IC_Start_IT+0x46>
 8021d2a:	683b      	ldr	r3, [r7, #0]
 8021d2c:	2b08      	cmp	r3, #8
 8021d2e:	d104      	bne.n	8021d3a <HAL_TIM_IC_Start_IT+0x3e>
 8021d30:	687b      	ldr	r3, [r7, #4]
 8021d32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8021d36:	b2db      	uxtb	r3, r3
 8021d38:	e003      	b.n	8021d42 <HAL_TIM_IC_Start_IT+0x46>
 8021d3a:	687b      	ldr	r3, [r7, #4]
 8021d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8021d40:	b2db      	uxtb	r3, r3
 8021d42:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8021d44:	683b      	ldr	r3, [r7, #0]
 8021d46:	2b00      	cmp	r3, #0
 8021d48:	d104      	bne.n	8021d54 <HAL_TIM_IC_Start_IT+0x58>
 8021d4a:	687b      	ldr	r3, [r7, #4]
 8021d4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8021d50:	b2db      	uxtb	r3, r3
 8021d52:	e013      	b.n	8021d7c <HAL_TIM_IC_Start_IT+0x80>
 8021d54:	683b      	ldr	r3, [r7, #0]
 8021d56:	2b04      	cmp	r3, #4
 8021d58:	d104      	bne.n	8021d64 <HAL_TIM_IC_Start_IT+0x68>
 8021d5a:	687b      	ldr	r3, [r7, #4]
 8021d5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8021d60:	b2db      	uxtb	r3, r3
 8021d62:	e00b      	b.n	8021d7c <HAL_TIM_IC_Start_IT+0x80>
 8021d64:	683b      	ldr	r3, [r7, #0]
 8021d66:	2b08      	cmp	r3, #8
 8021d68:	d104      	bne.n	8021d74 <HAL_TIM_IC_Start_IT+0x78>
 8021d6a:	687b      	ldr	r3, [r7, #4]
 8021d6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8021d70:	b2db      	uxtb	r3, r3
 8021d72:	e003      	b.n	8021d7c <HAL_TIM_IC_Start_IT+0x80>
 8021d74:	687b      	ldr	r3, [r7, #4]
 8021d76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8021d7a:	b2db      	uxtb	r3, r3
 8021d7c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8021d7e:	7bbb      	ldrb	r3, [r7, #14]
 8021d80:	2b01      	cmp	r3, #1
 8021d82:	d102      	bne.n	8021d8a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8021d84:	7b7b      	ldrb	r3, [r7, #13]
 8021d86:	2b01      	cmp	r3, #1
 8021d88:	d001      	beq.n	8021d8e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8021d8a:	2301      	movs	r3, #1
 8021d8c:	e0c2      	b.n	8021f14 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8021d8e:	683b      	ldr	r3, [r7, #0]
 8021d90:	2b00      	cmp	r3, #0
 8021d92:	d104      	bne.n	8021d9e <HAL_TIM_IC_Start_IT+0xa2>
 8021d94:	687b      	ldr	r3, [r7, #4]
 8021d96:	2202      	movs	r2, #2
 8021d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8021d9c:	e013      	b.n	8021dc6 <HAL_TIM_IC_Start_IT+0xca>
 8021d9e:	683b      	ldr	r3, [r7, #0]
 8021da0:	2b04      	cmp	r3, #4
 8021da2:	d104      	bne.n	8021dae <HAL_TIM_IC_Start_IT+0xb2>
 8021da4:	687b      	ldr	r3, [r7, #4]
 8021da6:	2202      	movs	r2, #2
 8021da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8021dac:	e00b      	b.n	8021dc6 <HAL_TIM_IC_Start_IT+0xca>
 8021dae:	683b      	ldr	r3, [r7, #0]
 8021db0:	2b08      	cmp	r3, #8
 8021db2:	d104      	bne.n	8021dbe <HAL_TIM_IC_Start_IT+0xc2>
 8021db4:	687b      	ldr	r3, [r7, #4]
 8021db6:	2202      	movs	r2, #2
 8021db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8021dbc:	e003      	b.n	8021dc6 <HAL_TIM_IC_Start_IT+0xca>
 8021dbe:	687b      	ldr	r3, [r7, #4]
 8021dc0:	2202      	movs	r2, #2
 8021dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8021dc6:	683b      	ldr	r3, [r7, #0]
 8021dc8:	2b00      	cmp	r3, #0
 8021dca:	d104      	bne.n	8021dd6 <HAL_TIM_IC_Start_IT+0xda>
 8021dcc:	687b      	ldr	r3, [r7, #4]
 8021dce:	2202      	movs	r2, #2
 8021dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8021dd4:	e013      	b.n	8021dfe <HAL_TIM_IC_Start_IT+0x102>
 8021dd6:	683b      	ldr	r3, [r7, #0]
 8021dd8:	2b04      	cmp	r3, #4
 8021dda:	d104      	bne.n	8021de6 <HAL_TIM_IC_Start_IT+0xea>
 8021ddc:	687b      	ldr	r3, [r7, #4]
 8021dde:	2202      	movs	r2, #2
 8021de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8021de4:	e00b      	b.n	8021dfe <HAL_TIM_IC_Start_IT+0x102>
 8021de6:	683b      	ldr	r3, [r7, #0]
 8021de8:	2b08      	cmp	r3, #8
 8021dea:	d104      	bne.n	8021df6 <HAL_TIM_IC_Start_IT+0xfa>
 8021dec:	687b      	ldr	r3, [r7, #4]
 8021dee:	2202      	movs	r2, #2
 8021df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8021df4:	e003      	b.n	8021dfe <HAL_TIM_IC_Start_IT+0x102>
 8021df6:	687b      	ldr	r3, [r7, #4]
 8021df8:	2202      	movs	r2, #2
 8021dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8021dfe:	683b      	ldr	r3, [r7, #0]
 8021e00:	2b0c      	cmp	r3, #12
 8021e02:	d841      	bhi.n	8021e88 <HAL_TIM_IC_Start_IT+0x18c>
 8021e04:	a201      	add	r2, pc, #4	; (adr r2, 8021e0c <HAL_TIM_IC_Start_IT+0x110>)
 8021e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021e0a:	bf00      	nop
 8021e0c:	08021e41 	.word	0x08021e41
 8021e10:	08021e89 	.word	0x08021e89
 8021e14:	08021e89 	.word	0x08021e89
 8021e18:	08021e89 	.word	0x08021e89
 8021e1c:	08021e53 	.word	0x08021e53
 8021e20:	08021e89 	.word	0x08021e89
 8021e24:	08021e89 	.word	0x08021e89
 8021e28:	08021e89 	.word	0x08021e89
 8021e2c:	08021e65 	.word	0x08021e65
 8021e30:	08021e89 	.word	0x08021e89
 8021e34:	08021e89 	.word	0x08021e89
 8021e38:	08021e89 	.word	0x08021e89
 8021e3c:	08021e77 	.word	0x08021e77
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8021e40:	687b      	ldr	r3, [r7, #4]
 8021e42:	681b      	ldr	r3, [r3, #0]
 8021e44:	68da      	ldr	r2, [r3, #12]
 8021e46:	687b      	ldr	r3, [r7, #4]
 8021e48:	681b      	ldr	r3, [r3, #0]
 8021e4a:	f042 0202 	orr.w	r2, r2, #2
 8021e4e:	60da      	str	r2, [r3, #12]
      break;
 8021e50:	e01d      	b.n	8021e8e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8021e52:	687b      	ldr	r3, [r7, #4]
 8021e54:	681b      	ldr	r3, [r3, #0]
 8021e56:	68da      	ldr	r2, [r3, #12]
 8021e58:	687b      	ldr	r3, [r7, #4]
 8021e5a:	681b      	ldr	r3, [r3, #0]
 8021e5c:	f042 0204 	orr.w	r2, r2, #4
 8021e60:	60da      	str	r2, [r3, #12]
      break;
 8021e62:	e014      	b.n	8021e8e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8021e64:	687b      	ldr	r3, [r7, #4]
 8021e66:	681b      	ldr	r3, [r3, #0]
 8021e68:	68da      	ldr	r2, [r3, #12]
 8021e6a:	687b      	ldr	r3, [r7, #4]
 8021e6c:	681b      	ldr	r3, [r3, #0]
 8021e6e:	f042 0208 	orr.w	r2, r2, #8
 8021e72:	60da      	str	r2, [r3, #12]
      break;
 8021e74:	e00b      	b.n	8021e8e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8021e76:	687b      	ldr	r3, [r7, #4]
 8021e78:	681b      	ldr	r3, [r3, #0]
 8021e7a:	68da      	ldr	r2, [r3, #12]
 8021e7c:	687b      	ldr	r3, [r7, #4]
 8021e7e:	681b      	ldr	r3, [r3, #0]
 8021e80:	f042 0210 	orr.w	r2, r2, #16
 8021e84:	60da      	str	r2, [r3, #12]
      break;
 8021e86:	e002      	b.n	8021e8e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8021e88:	2301      	movs	r3, #1
 8021e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8021e8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8021e8e:	7bfb      	ldrb	r3, [r7, #15]
 8021e90:	2b00      	cmp	r3, #0
 8021e92:	d13e      	bne.n	8021f12 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8021e94:	687b      	ldr	r3, [r7, #4]
 8021e96:	681b      	ldr	r3, [r3, #0]
 8021e98:	2201      	movs	r2, #1
 8021e9a:	6839      	ldr	r1, [r7, #0]
 8021e9c:	4618      	mov	r0, r3
 8021e9e:	f000 fdb1 	bl	8022a04 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8021ea2:	687b      	ldr	r3, [r7, #4]
 8021ea4:	681b      	ldr	r3, [r3, #0]
 8021ea6:	4a1d      	ldr	r2, [pc, #116]	; (8021f1c <HAL_TIM_IC_Start_IT+0x220>)
 8021ea8:	4293      	cmp	r3, r2
 8021eaa:	d018      	beq.n	8021ede <HAL_TIM_IC_Start_IT+0x1e2>
 8021eac:	687b      	ldr	r3, [r7, #4]
 8021eae:	681b      	ldr	r3, [r3, #0]
 8021eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021eb4:	d013      	beq.n	8021ede <HAL_TIM_IC_Start_IT+0x1e2>
 8021eb6:	687b      	ldr	r3, [r7, #4]
 8021eb8:	681b      	ldr	r3, [r3, #0]
 8021eba:	4a19      	ldr	r2, [pc, #100]	; (8021f20 <HAL_TIM_IC_Start_IT+0x224>)
 8021ebc:	4293      	cmp	r3, r2
 8021ebe:	d00e      	beq.n	8021ede <HAL_TIM_IC_Start_IT+0x1e2>
 8021ec0:	687b      	ldr	r3, [r7, #4]
 8021ec2:	681b      	ldr	r3, [r3, #0]
 8021ec4:	4a17      	ldr	r2, [pc, #92]	; (8021f24 <HAL_TIM_IC_Start_IT+0x228>)
 8021ec6:	4293      	cmp	r3, r2
 8021ec8:	d009      	beq.n	8021ede <HAL_TIM_IC_Start_IT+0x1e2>
 8021eca:	687b      	ldr	r3, [r7, #4]
 8021ecc:	681b      	ldr	r3, [r3, #0]
 8021ece:	4a16      	ldr	r2, [pc, #88]	; (8021f28 <HAL_TIM_IC_Start_IT+0x22c>)
 8021ed0:	4293      	cmp	r3, r2
 8021ed2:	d004      	beq.n	8021ede <HAL_TIM_IC_Start_IT+0x1e2>
 8021ed4:	687b      	ldr	r3, [r7, #4]
 8021ed6:	681b      	ldr	r3, [r3, #0]
 8021ed8:	4a14      	ldr	r2, [pc, #80]	; (8021f2c <HAL_TIM_IC_Start_IT+0x230>)
 8021eda:	4293      	cmp	r3, r2
 8021edc:	d111      	bne.n	8021f02 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8021ede:	687b      	ldr	r3, [r7, #4]
 8021ee0:	681b      	ldr	r3, [r3, #0]
 8021ee2:	689b      	ldr	r3, [r3, #8]
 8021ee4:	f003 0307 	and.w	r3, r3, #7
 8021ee8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8021eea:	68bb      	ldr	r3, [r7, #8]
 8021eec:	2b06      	cmp	r3, #6
 8021eee:	d010      	beq.n	8021f12 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8021ef0:	687b      	ldr	r3, [r7, #4]
 8021ef2:	681b      	ldr	r3, [r3, #0]
 8021ef4:	681a      	ldr	r2, [r3, #0]
 8021ef6:	687b      	ldr	r3, [r7, #4]
 8021ef8:	681b      	ldr	r3, [r3, #0]
 8021efa:	f042 0201 	orr.w	r2, r2, #1
 8021efe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8021f00:	e007      	b.n	8021f12 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8021f02:	687b      	ldr	r3, [r7, #4]
 8021f04:	681b      	ldr	r3, [r3, #0]
 8021f06:	681a      	ldr	r2, [r3, #0]
 8021f08:	687b      	ldr	r3, [r7, #4]
 8021f0a:	681b      	ldr	r3, [r3, #0]
 8021f0c:	f042 0201 	orr.w	r2, r2, #1
 8021f10:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8021f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8021f14:	4618      	mov	r0, r3
 8021f16:	3710      	adds	r7, #16
 8021f18:	46bd      	mov	sp, r7
 8021f1a:	bd80      	pop	{r7, pc}
 8021f1c:	40010000 	.word	0x40010000
 8021f20:	40000400 	.word	0x40000400
 8021f24:	40000800 	.word	0x40000800
 8021f28:	40000c00 	.word	0x40000c00
 8021f2c:	40014000 	.word	0x40014000

08021f30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8021f30:	b580      	push	{r7, lr}
 8021f32:	b082      	sub	sp, #8
 8021f34:	af00      	add	r7, sp, #0
 8021f36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8021f38:	687b      	ldr	r3, [r7, #4]
 8021f3a:	681b      	ldr	r3, [r3, #0]
 8021f3c:	691b      	ldr	r3, [r3, #16]
 8021f3e:	f003 0302 	and.w	r3, r3, #2
 8021f42:	2b02      	cmp	r3, #2
 8021f44:	d122      	bne.n	8021f8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8021f46:	687b      	ldr	r3, [r7, #4]
 8021f48:	681b      	ldr	r3, [r3, #0]
 8021f4a:	68db      	ldr	r3, [r3, #12]
 8021f4c:	f003 0302 	and.w	r3, r3, #2
 8021f50:	2b02      	cmp	r3, #2
 8021f52:	d11b      	bne.n	8021f8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8021f54:	687b      	ldr	r3, [r7, #4]
 8021f56:	681b      	ldr	r3, [r3, #0]
 8021f58:	f06f 0202 	mvn.w	r2, #2
 8021f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8021f5e:	687b      	ldr	r3, [r7, #4]
 8021f60:	2201      	movs	r2, #1
 8021f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8021f64:	687b      	ldr	r3, [r7, #4]
 8021f66:	681b      	ldr	r3, [r3, #0]
 8021f68:	699b      	ldr	r3, [r3, #24]
 8021f6a:	f003 0303 	and.w	r3, r3, #3
 8021f6e:	2b00      	cmp	r3, #0
 8021f70:	d003      	beq.n	8021f7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8021f72:	6878      	ldr	r0, [r7, #4]
 8021f74:	f000 fa81 	bl	802247a <HAL_TIM_IC_CaptureCallback>
 8021f78:	e005      	b.n	8021f86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8021f7a:	6878      	ldr	r0, [r7, #4]
 8021f7c:	f000 fa73 	bl	8022466 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8021f80:	6878      	ldr	r0, [r7, #4]
 8021f82:	f000 fa84 	bl	802248e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8021f86:	687b      	ldr	r3, [r7, #4]
 8021f88:	2200      	movs	r2, #0
 8021f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8021f8c:	687b      	ldr	r3, [r7, #4]
 8021f8e:	681b      	ldr	r3, [r3, #0]
 8021f90:	691b      	ldr	r3, [r3, #16]
 8021f92:	f003 0304 	and.w	r3, r3, #4
 8021f96:	2b04      	cmp	r3, #4
 8021f98:	d122      	bne.n	8021fe0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8021f9a:	687b      	ldr	r3, [r7, #4]
 8021f9c:	681b      	ldr	r3, [r3, #0]
 8021f9e:	68db      	ldr	r3, [r3, #12]
 8021fa0:	f003 0304 	and.w	r3, r3, #4
 8021fa4:	2b04      	cmp	r3, #4
 8021fa6:	d11b      	bne.n	8021fe0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8021fa8:	687b      	ldr	r3, [r7, #4]
 8021faa:	681b      	ldr	r3, [r3, #0]
 8021fac:	f06f 0204 	mvn.w	r2, #4
 8021fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8021fb2:	687b      	ldr	r3, [r7, #4]
 8021fb4:	2202      	movs	r2, #2
 8021fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8021fb8:	687b      	ldr	r3, [r7, #4]
 8021fba:	681b      	ldr	r3, [r3, #0]
 8021fbc:	699b      	ldr	r3, [r3, #24]
 8021fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8021fc2:	2b00      	cmp	r3, #0
 8021fc4:	d003      	beq.n	8021fce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8021fc6:	6878      	ldr	r0, [r7, #4]
 8021fc8:	f000 fa57 	bl	802247a <HAL_TIM_IC_CaptureCallback>
 8021fcc:	e005      	b.n	8021fda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8021fce:	6878      	ldr	r0, [r7, #4]
 8021fd0:	f000 fa49 	bl	8022466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8021fd4:	6878      	ldr	r0, [r7, #4]
 8021fd6:	f000 fa5a 	bl	802248e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8021fda:	687b      	ldr	r3, [r7, #4]
 8021fdc:	2200      	movs	r2, #0
 8021fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8021fe0:	687b      	ldr	r3, [r7, #4]
 8021fe2:	681b      	ldr	r3, [r3, #0]
 8021fe4:	691b      	ldr	r3, [r3, #16]
 8021fe6:	f003 0308 	and.w	r3, r3, #8
 8021fea:	2b08      	cmp	r3, #8
 8021fec:	d122      	bne.n	8022034 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8021fee:	687b      	ldr	r3, [r7, #4]
 8021ff0:	681b      	ldr	r3, [r3, #0]
 8021ff2:	68db      	ldr	r3, [r3, #12]
 8021ff4:	f003 0308 	and.w	r3, r3, #8
 8021ff8:	2b08      	cmp	r3, #8
 8021ffa:	d11b      	bne.n	8022034 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8021ffc:	687b      	ldr	r3, [r7, #4]
 8021ffe:	681b      	ldr	r3, [r3, #0]
 8022000:	f06f 0208 	mvn.w	r2, #8
 8022004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8022006:	687b      	ldr	r3, [r7, #4]
 8022008:	2204      	movs	r2, #4
 802200a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 802200c:	687b      	ldr	r3, [r7, #4]
 802200e:	681b      	ldr	r3, [r3, #0]
 8022010:	69db      	ldr	r3, [r3, #28]
 8022012:	f003 0303 	and.w	r3, r3, #3
 8022016:	2b00      	cmp	r3, #0
 8022018:	d003      	beq.n	8022022 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802201a:	6878      	ldr	r0, [r7, #4]
 802201c:	f000 fa2d 	bl	802247a <HAL_TIM_IC_CaptureCallback>
 8022020:	e005      	b.n	802202e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8022022:	6878      	ldr	r0, [r7, #4]
 8022024:	f000 fa1f 	bl	8022466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8022028:	6878      	ldr	r0, [r7, #4]
 802202a:	f000 fa30 	bl	802248e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802202e:	687b      	ldr	r3, [r7, #4]
 8022030:	2200      	movs	r2, #0
 8022032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8022034:	687b      	ldr	r3, [r7, #4]
 8022036:	681b      	ldr	r3, [r3, #0]
 8022038:	691b      	ldr	r3, [r3, #16]
 802203a:	f003 0310 	and.w	r3, r3, #16
 802203e:	2b10      	cmp	r3, #16
 8022040:	d122      	bne.n	8022088 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8022042:	687b      	ldr	r3, [r7, #4]
 8022044:	681b      	ldr	r3, [r3, #0]
 8022046:	68db      	ldr	r3, [r3, #12]
 8022048:	f003 0310 	and.w	r3, r3, #16
 802204c:	2b10      	cmp	r3, #16
 802204e:	d11b      	bne.n	8022088 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8022050:	687b      	ldr	r3, [r7, #4]
 8022052:	681b      	ldr	r3, [r3, #0]
 8022054:	f06f 0210 	mvn.w	r2, #16
 8022058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802205a:	687b      	ldr	r3, [r7, #4]
 802205c:	2208      	movs	r2, #8
 802205e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8022060:	687b      	ldr	r3, [r7, #4]
 8022062:	681b      	ldr	r3, [r3, #0]
 8022064:	69db      	ldr	r3, [r3, #28]
 8022066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802206a:	2b00      	cmp	r3, #0
 802206c:	d003      	beq.n	8022076 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802206e:	6878      	ldr	r0, [r7, #4]
 8022070:	f000 fa03 	bl	802247a <HAL_TIM_IC_CaptureCallback>
 8022074:	e005      	b.n	8022082 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8022076:	6878      	ldr	r0, [r7, #4]
 8022078:	f000 f9f5 	bl	8022466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802207c:	6878      	ldr	r0, [r7, #4]
 802207e:	f000 fa06 	bl	802248e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8022082:	687b      	ldr	r3, [r7, #4]
 8022084:	2200      	movs	r2, #0
 8022086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8022088:	687b      	ldr	r3, [r7, #4]
 802208a:	681b      	ldr	r3, [r3, #0]
 802208c:	691b      	ldr	r3, [r3, #16]
 802208e:	f003 0301 	and.w	r3, r3, #1
 8022092:	2b01      	cmp	r3, #1
 8022094:	d10e      	bne.n	80220b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8022096:	687b      	ldr	r3, [r7, #4]
 8022098:	681b      	ldr	r3, [r3, #0]
 802209a:	68db      	ldr	r3, [r3, #12]
 802209c:	f003 0301 	and.w	r3, r3, #1
 80220a0:	2b01      	cmp	r3, #1
 80220a2:	d107      	bne.n	80220b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80220a4:	687b      	ldr	r3, [r7, #4]
 80220a6:	681b      	ldr	r3, [r3, #0]
 80220a8:	f06f 0201 	mvn.w	r2, #1
 80220ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80220ae:	6878      	ldr	r0, [r7, #4]
 80220b0:	f000 f9cf 	bl	8022452 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80220b4:	687b      	ldr	r3, [r7, #4]
 80220b6:	681b      	ldr	r3, [r3, #0]
 80220b8:	691b      	ldr	r3, [r3, #16]
 80220ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80220be:	2b80      	cmp	r3, #128	; 0x80
 80220c0:	d10e      	bne.n	80220e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80220c2:	687b      	ldr	r3, [r7, #4]
 80220c4:	681b      	ldr	r3, [r3, #0]
 80220c6:	68db      	ldr	r3, [r3, #12]
 80220c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80220cc:	2b80      	cmp	r3, #128	; 0x80
 80220ce:	d107      	bne.n	80220e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80220d0:	687b      	ldr	r3, [r7, #4]
 80220d2:	681b      	ldr	r3, [r3, #0]
 80220d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80220d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80220da:	6878      	ldr	r0, [r7, #4]
 80220dc:	f000 fd30 	bl	8022b40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80220e0:	687b      	ldr	r3, [r7, #4]
 80220e2:	681b      	ldr	r3, [r3, #0]
 80220e4:	691b      	ldr	r3, [r3, #16]
 80220e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80220ea:	2b40      	cmp	r3, #64	; 0x40
 80220ec:	d10e      	bne.n	802210c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80220ee:	687b      	ldr	r3, [r7, #4]
 80220f0:	681b      	ldr	r3, [r3, #0]
 80220f2:	68db      	ldr	r3, [r3, #12]
 80220f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80220f8:	2b40      	cmp	r3, #64	; 0x40
 80220fa:	d107      	bne.n	802210c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80220fc:	687b      	ldr	r3, [r7, #4]
 80220fe:	681b      	ldr	r3, [r3, #0]
 8022100:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8022104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8022106:	6878      	ldr	r0, [r7, #4]
 8022108:	f000 f9cb 	bl	80224a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 802210c:	687b      	ldr	r3, [r7, #4]
 802210e:	681b      	ldr	r3, [r3, #0]
 8022110:	691b      	ldr	r3, [r3, #16]
 8022112:	f003 0320 	and.w	r3, r3, #32
 8022116:	2b20      	cmp	r3, #32
 8022118:	d10e      	bne.n	8022138 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 802211a:	687b      	ldr	r3, [r7, #4]
 802211c:	681b      	ldr	r3, [r3, #0]
 802211e:	68db      	ldr	r3, [r3, #12]
 8022120:	f003 0320 	and.w	r3, r3, #32
 8022124:	2b20      	cmp	r3, #32
 8022126:	d107      	bne.n	8022138 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8022128:	687b      	ldr	r3, [r7, #4]
 802212a:	681b      	ldr	r3, [r3, #0]
 802212c:	f06f 0220 	mvn.w	r2, #32
 8022130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8022132:	6878      	ldr	r0, [r7, #4]
 8022134:	f000 fcfa 	bl	8022b2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8022138:	bf00      	nop
 802213a:	3708      	adds	r7, #8
 802213c:	46bd      	mov	sp, r7
 802213e:	bd80      	pop	{r7, pc}

08022140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8022140:	b580      	push	{r7, lr}
 8022142:	b086      	sub	sp, #24
 8022144:	af00      	add	r7, sp, #0
 8022146:	60f8      	str	r0, [r7, #12]
 8022148:	60b9      	str	r1, [r7, #8]
 802214a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802214c:	2300      	movs	r3, #0
 802214e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8022150:	68fb      	ldr	r3, [r7, #12]
 8022152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8022156:	2b01      	cmp	r3, #1
 8022158:	d101      	bne.n	802215e <HAL_TIM_PWM_ConfigChannel+0x1e>
 802215a:	2302      	movs	r3, #2
 802215c:	e0ae      	b.n	80222bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 802215e:	68fb      	ldr	r3, [r7, #12]
 8022160:	2201      	movs	r2, #1
 8022162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8022166:	687b      	ldr	r3, [r7, #4]
 8022168:	2b0c      	cmp	r3, #12
 802216a:	f200 809f 	bhi.w	80222ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 802216e:	a201      	add	r2, pc, #4	; (adr r2, 8022174 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8022170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022174:	080221a9 	.word	0x080221a9
 8022178:	080222ad 	.word	0x080222ad
 802217c:	080222ad 	.word	0x080222ad
 8022180:	080222ad 	.word	0x080222ad
 8022184:	080221e9 	.word	0x080221e9
 8022188:	080222ad 	.word	0x080222ad
 802218c:	080222ad 	.word	0x080222ad
 8022190:	080222ad 	.word	0x080222ad
 8022194:	0802222b 	.word	0x0802222b
 8022198:	080222ad 	.word	0x080222ad
 802219c:	080222ad 	.word	0x080222ad
 80221a0:	080222ad 	.word	0x080222ad
 80221a4:	0802226b 	.word	0x0802226b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80221a8:	68fb      	ldr	r3, [r7, #12]
 80221aa:	681b      	ldr	r3, [r3, #0]
 80221ac:	68b9      	ldr	r1, [r7, #8]
 80221ae:	4618      	mov	r0, r3
 80221b0:	f000 fa02 	bl	80225b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80221b4:	68fb      	ldr	r3, [r7, #12]
 80221b6:	681b      	ldr	r3, [r3, #0]
 80221b8:	699a      	ldr	r2, [r3, #24]
 80221ba:	68fb      	ldr	r3, [r7, #12]
 80221bc:	681b      	ldr	r3, [r3, #0]
 80221be:	f042 0208 	orr.w	r2, r2, #8
 80221c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80221c4:	68fb      	ldr	r3, [r7, #12]
 80221c6:	681b      	ldr	r3, [r3, #0]
 80221c8:	699a      	ldr	r2, [r3, #24]
 80221ca:	68fb      	ldr	r3, [r7, #12]
 80221cc:	681b      	ldr	r3, [r3, #0]
 80221ce:	f022 0204 	bic.w	r2, r2, #4
 80221d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80221d4:	68fb      	ldr	r3, [r7, #12]
 80221d6:	681b      	ldr	r3, [r3, #0]
 80221d8:	6999      	ldr	r1, [r3, #24]
 80221da:	68bb      	ldr	r3, [r7, #8]
 80221dc:	691a      	ldr	r2, [r3, #16]
 80221de:	68fb      	ldr	r3, [r7, #12]
 80221e0:	681b      	ldr	r3, [r3, #0]
 80221e2:	430a      	orrs	r2, r1
 80221e4:	619a      	str	r2, [r3, #24]
      break;
 80221e6:	e064      	b.n	80222b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80221e8:	68fb      	ldr	r3, [r7, #12]
 80221ea:	681b      	ldr	r3, [r3, #0]
 80221ec:	68b9      	ldr	r1, [r7, #8]
 80221ee:	4618      	mov	r0, r3
 80221f0:	f000 fa48 	bl	8022684 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80221f4:	68fb      	ldr	r3, [r7, #12]
 80221f6:	681b      	ldr	r3, [r3, #0]
 80221f8:	699a      	ldr	r2, [r3, #24]
 80221fa:	68fb      	ldr	r3, [r7, #12]
 80221fc:	681b      	ldr	r3, [r3, #0]
 80221fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8022202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8022204:	68fb      	ldr	r3, [r7, #12]
 8022206:	681b      	ldr	r3, [r3, #0]
 8022208:	699a      	ldr	r2, [r3, #24]
 802220a:	68fb      	ldr	r3, [r7, #12]
 802220c:	681b      	ldr	r3, [r3, #0]
 802220e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8022212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8022214:	68fb      	ldr	r3, [r7, #12]
 8022216:	681b      	ldr	r3, [r3, #0]
 8022218:	6999      	ldr	r1, [r3, #24]
 802221a:	68bb      	ldr	r3, [r7, #8]
 802221c:	691b      	ldr	r3, [r3, #16]
 802221e:	021a      	lsls	r2, r3, #8
 8022220:	68fb      	ldr	r3, [r7, #12]
 8022222:	681b      	ldr	r3, [r3, #0]
 8022224:	430a      	orrs	r2, r1
 8022226:	619a      	str	r2, [r3, #24]
      break;
 8022228:	e043      	b.n	80222b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 802222a:	68fb      	ldr	r3, [r7, #12]
 802222c:	681b      	ldr	r3, [r3, #0]
 802222e:	68b9      	ldr	r1, [r7, #8]
 8022230:	4618      	mov	r0, r3
 8022232:	f000 fa93 	bl	802275c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8022236:	68fb      	ldr	r3, [r7, #12]
 8022238:	681b      	ldr	r3, [r3, #0]
 802223a:	69da      	ldr	r2, [r3, #28]
 802223c:	68fb      	ldr	r3, [r7, #12]
 802223e:	681b      	ldr	r3, [r3, #0]
 8022240:	f042 0208 	orr.w	r2, r2, #8
 8022244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8022246:	68fb      	ldr	r3, [r7, #12]
 8022248:	681b      	ldr	r3, [r3, #0]
 802224a:	69da      	ldr	r2, [r3, #28]
 802224c:	68fb      	ldr	r3, [r7, #12]
 802224e:	681b      	ldr	r3, [r3, #0]
 8022250:	f022 0204 	bic.w	r2, r2, #4
 8022254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8022256:	68fb      	ldr	r3, [r7, #12]
 8022258:	681b      	ldr	r3, [r3, #0]
 802225a:	69d9      	ldr	r1, [r3, #28]
 802225c:	68bb      	ldr	r3, [r7, #8]
 802225e:	691a      	ldr	r2, [r3, #16]
 8022260:	68fb      	ldr	r3, [r7, #12]
 8022262:	681b      	ldr	r3, [r3, #0]
 8022264:	430a      	orrs	r2, r1
 8022266:	61da      	str	r2, [r3, #28]
      break;
 8022268:	e023      	b.n	80222b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 802226a:	68fb      	ldr	r3, [r7, #12]
 802226c:	681b      	ldr	r3, [r3, #0]
 802226e:	68b9      	ldr	r1, [r7, #8]
 8022270:	4618      	mov	r0, r3
 8022272:	f000 fadd 	bl	8022830 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8022276:	68fb      	ldr	r3, [r7, #12]
 8022278:	681b      	ldr	r3, [r3, #0]
 802227a:	69da      	ldr	r2, [r3, #28]
 802227c:	68fb      	ldr	r3, [r7, #12]
 802227e:	681b      	ldr	r3, [r3, #0]
 8022280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8022284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8022286:	68fb      	ldr	r3, [r7, #12]
 8022288:	681b      	ldr	r3, [r3, #0]
 802228a:	69da      	ldr	r2, [r3, #28]
 802228c:	68fb      	ldr	r3, [r7, #12]
 802228e:	681b      	ldr	r3, [r3, #0]
 8022290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8022294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8022296:	68fb      	ldr	r3, [r7, #12]
 8022298:	681b      	ldr	r3, [r3, #0]
 802229a:	69d9      	ldr	r1, [r3, #28]
 802229c:	68bb      	ldr	r3, [r7, #8]
 802229e:	691b      	ldr	r3, [r3, #16]
 80222a0:	021a      	lsls	r2, r3, #8
 80222a2:	68fb      	ldr	r3, [r7, #12]
 80222a4:	681b      	ldr	r3, [r3, #0]
 80222a6:	430a      	orrs	r2, r1
 80222a8:	61da      	str	r2, [r3, #28]
      break;
 80222aa:	e002      	b.n	80222b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80222ac:	2301      	movs	r3, #1
 80222ae:	75fb      	strb	r3, [r7, #23]
      break;
 80222b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80222b2:	68fb      	ldr	r3, [r7, #12]
 80222b4:	2200      	movs	r2, #0
 80222b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80222ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80222bc:	4618      	mov	r0, r3
 80222be:	3718      	adds	r7, #24
 80222c0:	46bd      	mov	sp, r7
 80222c2:	bd80      	pop	{r7, pc}

080222c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80222c4:	b580      	push	{r7, lr}
 80222c6:	b084      	sub	sp, #16
 80222c8:	af00      	add	r7, sp, #0
 80222ca:	6078      	str	r0, [r7, #4]
 80222cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80222ce:	2300      	movs	r3, #0
 80222d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80222d2:	687b      	ldr	r3, [r7, #4]
 80222d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80222d8:	2b01      	cmp	r3, #1
 80222da:	d101      	bne.n	80222e0 <HAL_TIM_ConfigClockSource+0x1c>
 80222dc:	2302      	movs	r3, #2
 80222de:	e0b4      	b.n	802244a <HAL_TIM_ConfigClockSource+0x186>
 80222e0:	687b      	ldr	r3, [r7, #4]
 80222e2:	2201      	movs	r2, #1
 80222e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80222e8:	687b      	ldr	r3, [r7, #4]
 80222ea:	2202      	movs	r2, #2
 80222ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80222f0:	687b      	ldr	r3, [r7, #4]
 80222f2:	681b      	ldr	r3, [r3, #0]
 80222f4:	689b      	ldr	r3, [r3, #8]
 80222f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80222f8:	68bb      	ldr	r3, [r7, #8]
 80222fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80222fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8022300:	68bb      	ldr	r3, [r7, #8]
 8022302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8022306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8022308:	687b      	ldr	r3, [r7, #4]
 802230a:	681b      	ldr	r3, [r3, #0]
 802230c:	68ba      	ldr	r2, [r7, #8]
 802230e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8022310:	683b      	ldr	r3, [r7, #0]
 8022312:	681b      	ldr	r3, [r3, #0]
 8022314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8022318:	d03e      	beq.n	8022398 <HAL_TIM_ConfigClockSource+0xd4>
 802231a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802231e:	f200 8087 	bhi.w	8022430 <HAL_TIM_ConfigClockSource+0x16c>
 8022322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022326:	f000 8086 	beq.w	8022436 <HAL_TIM_ConfigClockSource+0x172>
 802232a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802232e:	d87f      	bhi.n	8022430 <HAL_TIM_ConfigClockSource+0x16c>
 8022330:	2b70      	cmp	r3, #112	; 0x70
 8022332:	d01a      	beq.n	802236a <HAL_TIM_ConfigClockSource+0xa6>
 8022334:	2b70      	cmp	r3, #112	; 0x70
 8022336:	d87b      	bhi.n	8022430 <HAL_TIM_ConfigClockSource+0x16c>
 8022338:	2b60      	cmp	r3, #96	; 0x60
 802233a:	d050      	beq.n	80223de <HAL_TIM_ConfigClockSource+0x11a>
 802233c:	2b60      	cmp	r3, #96	; 0x60
 802233e:	d877      	bhi.n	8022430 <HAL_TIM_ConfigClockSource+0x16c>
 8022340:	2b50      	cmp	r3, #80	; 0x50
 8022342:	d03c      	beq.n	80223be <HAL_TIM_ConfigClockSource+0xfa>
 8022344:	2b50      	cmp	r3, #80	; 0x50
 8022346:	d873      	bhi.n	8022430 <HAL_TIM_ConfigClockSource+0x16c>
 8022348:	2b40      	cmp	r3, #64	; 0x40
 802234a:	d058      	beq.n	80223fe <HAL_TIM_ConfigClockSource+0x13a>
 802234c:	2b40      	cmp	r3, #64	; 0x40
 802234e:	d86f      	bhi.n	8022430 <HAL_TIM_ConfigClockSource+0x16c>
 8022350:	2b30      	cmp	r3, #48	; 0x30
 8022352:	d064      	beq.n	802241e <HAL_TIM_ConfigClockSource+0x15a>
 8022354:	2b30      	cmp	r3, #48	; 0x30
 8022356:	d86b      	bhi.n	8022430 <HAL_TIM_ConfigClockSource+0x16c>
 8022358:	2b20      	cmp	r3, #32
 802235a:	d060      	beq.n	802241e <HAL_TIM_ConfigClockSource+0x15a>
 802235c:	2b20      	cmp	r3, #32
 802235e:	d867      	bhi.n	8022430 <HAL_TIM_ConfigClockSource+0x16c>
 8022360:	2b00      	cmp	r3, #0
 8022362:	d05c      	beq.n	802241e <HAL_TIM_ConfigClockSource+0x15a>
 8022364:	2b10      	cmp	r3, #16
 8022366:	d05a      	beq.n	802241e <HAL_TIM_ConfigClockSource+0x15a>
 8022368:	e062      	b.n	8022430 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 802236a:	687b      	ldr	r3, [r7, #4]
 802236c:	6818      	ldr	r0, [r3, #0]
 802236e:	683b      	ldr	r3, [r7, #0]
 8022370:	6899      	ldr	r1, [r3, #8]
 8022372:	683b      	ldr	r3, [r7, #0]
 8022374:	685a      	ldr	r2, [r3, #4]
 8022376:	683b      	ldr	r3, [r7, #0]
 8022378:	68db      	ldr	r3, [r3, #12]
 802237a:	f000 fb23 	bl	80229c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 802237e:	687b      	ldr	r3, [r7, #4]
 8022380:	681b      	ldr	r3, [r3, #0]
 8022382:	689b      	ldr	r3, [r3, #8]
 8022384:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8022386:	68bb      	ldr	r3, [r7, #8]
 8022388:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 802238c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 802238e:	687b      	ldr	r3, [r7, #4]
 8022390:	681b      	ldr	r3, [r3, #0]
 8022392:	68ba      	ldr	r2, [r7, #8]
 8022394:	609a      	str	r2, [r3, #8]
      break;
 8022396:	e04f      	b.n	8022438 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8022398:	687b      	ldr	r3, [r7, #4]
 802239a:	6818      	ldr	r0, [r3, #0]
 802239c:	683b      	ldr	r3, [r7, #0]
 802239e:	6899      	ldr	r1, [r3, #8]
 80223a0:	683b      	ldr	r3, [r7, #0]
 80223a2:	685a      	ldr	r2, [r3, #4]
 80223a4:	683b      	ldr	r3, [r7, #0]
 80223a6:	68db      	ldr	r3, [r3, #12]
 80223a8:	f000 fb0c 	bl	80229c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80223ac:	687b      	ldr	r3, [r7, #4]
 80223ae:	681b      	ldr	r3, [r3, #0]
 80223b0:	689a      	ldr	r2, [r3, #8]
 80223b2:	687b      	ldr	r3, [r7, #4]
 80223b4:	681b      	ldr	r3, [r3, #0]
 80223b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80223ba:	609a      	str	r2, [r3, #8]
      break;
 80223bc:	e03c      	b.n	8022438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80223be:	687b      	ldr	r3, [r7, #4]
 80223c0:	6818      	ldr	r0, [r3, #0]
 80223c2:	683b      	ldr	r3, [r7, #0]
 80223c4:	6859      	ldr	r1, [r3, #4]
 80223c6:	683b      	ldr	r3, [r7, #0]
 80223c8:	68db      	ldr	r3, [r3, #12]
 80223ca:	461a      	mov	r2, r3
 80223cc:	f000 fa80 	bl	80228d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80223d0:	687b      	ldr	r3, [r7, #4]
 80223d2:	681b      	ldr	r3, [r3, #0]
 80223d4:	2150      	movs	r1, #80	; 0x50
 80223d6:	4618      	mov	r0, r3
 80223d8:	f000 fad9 	bl	802298e <TIM_ITRx_SetConfig>
      break;
 80223dc:	e02c      	b.n	8022438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80223de:	687b      	ldr	r3, [r7, #4]
 80223e0:	6818      	ldr	r0, [r3, #0]
 80223e2:	683b      	ldr	r3, [r7, #0]
 80223e4:	6859      	ldr	r1, [r3, #4]
 80223e6:	683b      	ldr	r3, [r7, #0]
 80223e8:	68db      	ldr	r3, [r3, #12]
 80223ea:	461a      	mov	r2, r3
 80223ec:	f000 fa9f 	bl	802292e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80223f0:	687b      	ldr	r3, [r7, #4]
 80223f2:	681b      	ldr	r3, [r3, #0]
 80223f4:	2160      	movs	r1, #96	; 0x60
 80223f6:	4618      	mov	r0, r3
 80223f8:	f000 fac9 	bl	802298e <TIM_ITRx_SetConfig>
      break;
 80223fc:	e01c      	b.n	8022438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80223fe:	687b      	ldr	r3, [r7, #4]
 8022400:	6818      	ldr	r0, [r3, #0]
 8022402:	683b      	ldr	r3, [r7, #0]
 8022404:	6859      	ldr	r1, [r3, #4]
 8022406:	683b      	ldr	r3, [r7, #0]
 8022408:	68db      	ldr	r3, [r3, #12]
 802240a:	461a      	mov	r2, r3
 802240c:	f000 fa60 	bl	80228d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8022410:	687b      	ldr	r3, [r7, #4]
 8022412:	681b      	ldr	r3, [r3, #0]
 8022414:	2140      	movs	r1, #64	; 0x40
 8022416:	4618      	mov	r0, r3
 8022418:	f000 fab9 	bl	802298e <TIM_ITRx_SetConfig>
      break;
 802241c:	e00c      	b.n	8022438 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 802241e:	687b      	ldr	r3, [r7, #4]
 8022420:	681a      	ldr	r2, [r3, #0]
 8022422:	683b      	ldr	r3, [r7, #0]
 8022424:	681b      	ldr	r3, [r3, #0]
 8022426:	4619      	mov	r1, r3
 8022428:	4610      	mov	r0, r2
 802242a:	f000 fab0 	bl	802298e <TIM_ITRx_SetConfig>
      break;
 802242e:	e003      	b.n	8022438 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8022430:	2301      	movs	r3, #1
 8022432:	73fb      	strb	r3, [r7, #15]
      break;
 8022434:	e000      	b.n	8022438 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8022436:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8022438:	687b      	ldr	r3, [r7, #4]
 802243a:	2201      	movs	r2, #1
 802243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8022440:	687b      	ldr	r3, [r7, #4]
 8022442:	2200      	movs	r2, #0
 8022444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8022448:	7bfb      	ldrb	r3, [r7, #15]
}
 802244a:	4618      	mov	r0, r3
 802244c:	3710      	adds	r7, #16
 802244e:	46bd      	mov	sp, r7
 8022450:	bd80      	pop	{r7, pc}

08022452 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8022452:	b480      	push	{r7}
 8022454:	b083      	sub	sp, #12
 8022456:	af00      	add	r7, sp, #0
 8022458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 802245a:	bf00      	nop
 802245c:	370c      	adds	r7, #12
 802245e:	46bd      	mov	sp, r7
 8022460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022464:	4770      	bx	lr

08022466 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8022466:	b480      	push	{r7}
 8022468:	b083      	sub	sp, #12
 802246a:	af00      	add	r7, sp, #0
 802246c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802246e:	bf00      	nop
 8022470:	370c      	adds	r7, #12
 8022472:	46bd      	mov	sp, r7
 8022474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022478:	4770      	bx	lr

0802247a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 802247a:	b480      	push	{r7}
 802247c:	b083      	sub	sp, #12
 802247e:	af00      	add	r7, sp, #0
 8022480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8022482:	bf00      	nop
 8022484:	370c      	adds	r7, #12
 8022486:	46bd      	mov	sp, r7
 8022488:	f85d 7b04 	ldr.w	r7, [sp], #4
 802248c:	4770      	bx	lr

0802248e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 802248e:	b480      	push	{r7}
 8022490:	b083      	sub	sp, #12
 8022492:	af00      	add	r7, sp, #0
 8022494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8022496:	bf00      	nop
 8022498:	370c      	adds	r7, #12
 802249a:	46bd      	mov	sp, r7
 802249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224a0:	4770      	bx	lr

080224a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80224a2:	b480      	push	{r7}
 80224a4:	b083      	sub	sp, #12
 80224a6:	af00      	add	r7, sp, #0
 80224a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80224aa:	bf00      	nop
 80224ac:	370c      	adds	r7, #12
 80224ae:	46bd      	mov	sp, r7
 80224b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224b4:	4770      	bx	lr
	...

080224b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80224b8:	b480      	push	{r7}
 80224ba:	b085      	sub	sp, #20
 80224bc:	af00      	add	r7, sp, #0
 80224be:	6078      	str	r0, [r7, #4]
 80224c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80224c2:	687b      	ldr	r3, [r7, #4]
 80224c4:	681b      	ldr	r3, [r3, #0]
 80224c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80224c8:	687b      	ldr	r3, [r7, #4]
 80224ca:	4a34      	ldr	r2, [pc, #208]	; (802259c <TIM_Base_SetConfig+0xe4>)
 80224cc:	4293      	cmp	r3, r2
 80224ce:	d00f      	beq.n	80224f0 <TIM_Base_SetConfig+0x38>
 80224d0:	687b      	ldr	r3, [r7, #4]
 80224d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80224d6:	d00b      	beq.n	80224f0 <TIM_Base_SetConfig+0x38>
 80224d8:	687b      	ldr	r3, [r7, #4]
 80224da:	4a31      	ldr	r2, [pc, #196]	; (80225a0 <TIM_Base_SetConfig+0xe8>)
 80224dc:	4293      	cmp	r3, r2
 80224de:	d007      	beq.n	80224f0 <TIM_Base_SetConfig+0x38>
 80224e0:	687b      	ldr	r3, [r7, #4]
 80224e2:	4a30      	ldr	r2, [pc, #192]	; (80225a4 <TIM_Base_SetConfig+0xec>)
 80224e4:	4293      	cmp	r3, r2
 80224e6:	d003      	beq.n	80224f0 <TIM_Base_SetConfig+0x38>
 80224e8:	687b      	ldr	r3, [r7, #4]
 80224ea:	4a2f      	ldr	r2, [pc, #188]	; (80225a8 <TIM_Base_SetConfig+0xf0>)
 80224ec:	4293      	cmp	r3, r2
 80224ee:	d108      	bne.n	8022502 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80224f0:	68fb      	ldr	r3, [r7, #12]
 80224f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80224f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80224f8:	683b      	ldr	r3, [r7, #0]
 80224fa:	685b      	ldr	r3, [r3, #4]
 80224fc:	68fa      	ldr	r2, [r7, #12]
 80224fe:	4313      	orrs	r3, r2
 8022500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8022502:	687b      	ldr	r3, [r7, #4]
 8022504:	4a25      	ldr	r2, [pc, #148]	; (802259c <TIM_Base_SetConfig+0xe4>)
 8022506:	4293      	cmp	r3, r2
 8022508:	d01b      	beq.n	8022542 <TIM_Base_SetConfig+0x8a>
 802250a:	687b      	ldr	r3, [r7, #4]
 802250c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8022510:	d017      	beq.n	8022542 <TIM_Base_SetConfig+0x8a>
 8022512:	687b      	ldr	r3, [r7, #4]
 8022514:	4a22      	ldr	r2, [pc, #136]	; (80225a0 <TIM_Base_SetConfig+0xe8>)
 8022516:	4293      	cmp	r3, r2
 8022518:	d013      	beq.n	8022542 <TIM_Base_SetConfig+0x8a>
 802251a:	687b      	ldr	r3, [r7, #4]
 802251c:	4a21      	ldr	r2, [pc, #132]	; (80225a4 <TIM_Base_SetConfig+0xec>)
 802251e:	4293      	cmp	r3, r2
 8022520:	d00f      	beq.n	8022542 <TIM_Base_SetConfig+0x8a>
 8022522:	687b      	ldr	r3, [r7, #4]
 8022524:	4a20      	ldr	r2, [pc, #128]	; (80225a8 <TIM_Base_SetConfig+0xf0>)
 8022526:	4293      	cmp	r3, r2
 8022528:	d00b      	beq.n	8022542 <TIM_Base_SetConfig+0x8a>
 802252a:	687b      	ldr	r3, [r7, #4]
 802252c:	4a1f      	ldr	r2, [pc, #124]	; (80225ac <TIM_Base_SetConfig+0xf4>)
 802252e:	4293      	cmp	r3, r2
 8022530:	d007      	beq.n	8022542 <TIM_Base_SetConfig+0x8a>
 8022532:	687b      	ldr	r3, [r7, #4]
 8022534:	4a1e      	ldr	r2, [pc, #120]	; (80225b0 <TIM_Base_SetConfig+0xf8>)
 8022536:	4293      	cmp	r3, r2
 8022538:	d003      	beq.n	8022542 <TIM_Base_SetConfig+0x8a>
 802253a:	687b      	ldr	r3, [r7, #4]
 802253c:	4a1d      	ldr	r2, [pc, #116]	; (80225b4 <TIM_Base_SetConfig+0xfc>)
 802253e:	4293      	cmp	r3, r2
 8022540:	d108      	bne.n	8022554 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8022542:	68fb      	ldr	r3, [r7, #12]
 8022544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8022548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802254a:	683b      	ldr	r3, [r7, #0]
 802254c:	68db      	ldr	r3, [r3, #12]
 802254e:	68fa      	ldr	r2, [r7, #12]
 8022550:	4313      	orrs	r3, r2
 8022552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8022554:	68fb      	ldr	r3, [r7, #12]
 8022556:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802255a:	683b      	ldr	r3, [r7, #0]
 802255c:	695b      	ldr	r3, [r3, #20]
 802255e:	4313      	orrs	r3, r2
 8022560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8022562:	687b      	ldr	r3, [r7, #4]
 8022564:	68fa      	ldr	r2, [r7, #12]
 8022566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8022568:	683b      	ldr	r3, [r7, #0]
 802256a:	689a      	ldr	r2, [r3, #8]
 802256c:	687b      	ldr	r3, [r7, #4]
 802256e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8022570:	683b      	ldr	r3, [r7, #0]
 8022572:	681a      	ldr	r2, [r3, #0]
 8022574:	687b      	ldr	r3, [r7, #4]
 8022576:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8022578:	687b      	ldr	r3, [r7, #4]
 802257a:	4a08      	ldr	r2, [pc, #32]	; (802259c <TIM_Base_SetConfig+0xe4>)
 802257c:	4293      	cmp	r3, r2
 802257e:	d103      	bne.n	8022588 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8022580:	683b      	ldr	r3, [r7, #0]
 8022582:	691a      	ldr	r2, [r3, #16]
 8022584:	687b      	ldr	r3, [r7, #4]
 8022586:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8022588:	687b      	ldr	r3, [r7, #4]
 802258a:	2201      	movs	r2, #1
 802258c:	615a      	str	r2, [r3, #20]
}
 802258e:	bf00      	nop
 8022590:	3714      	adds	r7, #20
 8022592:	46bd      	mov	sp, r7
 8022594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022598:	4770      	bx	lr
 802259a:	bf00      	nop
 802259c:	40010000 	.word	0x40010000
 80225a0:	40000400 	.word	0x40000400
 80225a4:	40000800 	.word	0x40000800
 80225a8:	40000c00 	.word	0x40000c00
 80225ac:	40014000 	.word	0x40014000
 80225b0:	40014400 	.word	0x40014400
 80225b4:	40014800 	.word	0x40014800

080225b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80225b8:	b480      	push	{r7}
 80225ba:	b087      	sub	sp, #28
 80225bc:	af00      	add	r7, sp, #0
 80225be:	6078      	str	r0, [r7, #4]
 80225c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80225c2:	687b      	ldr	r3, [r7, #4]
 80225c4:	6a1b      	ldr	r3, [r3, #32]
 80225c6:	f023 0201 	bic.w	r2, r3, #1
 80225ca:	687b      	ldr	r3, [r7, #4]
 80225cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80225ce:	687b      	ldr	r3, [r7, #4]
 80225d0:	6a1b      	ldr	r3, [r3, #32]
 80225d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80225d4:	687b      	ldr	r3, [r7, #4]
 80225d6:	685b      	ldr	r3, [r3, #4]
 80225d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80225da:	687b      	ldr	r3, [r7, #4]
 80225dc:	699b      	ldr	r3, [r3, #24]
 80225de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80225e0:	68fb      	ldr	r3, [r7, #12]
 80225e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80225e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80225e8:	68fb      	ldr	r3, [r7, #12]
 80225ea:	f023 0303 	bic.w	r3, r3, #3
 80225ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80225f0:	683b      	ldr	r3, [r7, #0]
 80225f2:	681b      	ldr	r3, [r3, #0]
 80225f4:	68fa      	ldr	r2, [r7, #12]
 80225f6:	4313      	orrs	r3, r2
 80225f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80225fa:	697b      	ldr	r3, [r7, #20]
 80225fc:	f023 0302 	bic.w	r3, r3, #2
 8022600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8022602:	683b      	ldr	r3, [r7, #0]
 8022604:	689b      	ldr	r3, [r3, #8]
 8022606:	697a      	ldr	r2, [r7, #20]
 8022608:	4313      	orrs	r3, r2
 802260a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 802260c:	687b      	ldr	r3, [r7, #4]
 802260e:	4a1c      	ldr	r2, [pc, #112]	; (8022680 <TIM_OC1_SetConfig+0xc8>)
 8022610:	4293      	cmp	r3, r2
 8022612:	d10c      	bne.n	802262e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8022614:	697b      	ldr	r3, [r7, #20]
 8022616:	f023 0308 	bic.w	r3, r3, #8
 802261a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 802261c:	683b      	ldr	r3, [r7, #0]
 802261e:	68db      	ldr	r3, [r3, #12]
 8022620:	697a      	ldr	r2, [r7, #20]
 8022622:	4313      	orrs	r3, r2
 8022624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8022626:	697b      	ldr	r3, [r7, #20]
 8022628:	f023 0304 	bic.w	r3, r3, #4
 802262c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802262e:	687b      	ldr	r3, [r7, #4]
 8022630:	4a13      	ldr	r2, [pc, #76]	; (8022680 <TIM_OC1_SetConfig+0xc8>)
 8022632:	4293      	cmp	r3, r2
 8022634:	d111      	bne.n	802265a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8022636:	693b      	ldr	r3, [r7, #16]
 8022638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802263c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 802263e:	693b      	ldr	r3, [r7, #16]
 8022640:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8022644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8022646:	683b      	ldr	r3, [r7, #0]
 8022648:	695b      	ldr	r3, [r3, #20]
 802264a:	693a      	ldr	r2, [r7, #16]
 802264c:	4313      	orrs	r3, r2
 802264e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8022650:	683b      	ldr	r3, [r7, #0]
 8022652:	699b      	ldr	r3, [r3, #24]
 8022654:	693a      	ldr	r2, [r7, #16]
 8022656:	4313      	orrs	r3, r2
 8022658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802265a:	687b      	ldr	r3, [r7, #4]
 802265c:	693a      	ldr	r2, [r7, #16]
 802265e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8022660:	687b      	ldr	r3, [r7, #4]
 8022662:	68fa      	ldr	r2, [r7, #12]
 8022664:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8022666:	683b      	ldr	r3, [r7, #0]
 8022668:	685a      	ldr	r2, [r3, #4]
 802266a:	687b      	ldr	r3, [r7, #4]
 802266c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802266e:	687b      	ldr	r3, [r7, #4]
 8022670:	697a      	ldr	r2, [r7, #20]
 8022672:	621a      	str	r2, [r3, #32]
}
 8022674:	bf00      	nop
 8022676:	371c      	adds	r7, #28
 8022678:	46bd      	mov	sp, r7
 802267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802267e:	4770      	bx	lr
 8022680:	40010000 	.word	0x40010000

08022684 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8022684:	b480      	push	{r7}
 8022686:	b087      	sub	sp, #28
 8022688:	af00      	add	r7, sp, #0
 802268a:	6078      	str	r0, [r7, #4]
 802268c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802268e:	687b      	ldr	r3, [r7, #4]
 8022690:	6a1b      	ldr	r3, [r3, #32]
 8022692:	f023 0210 	bic.w	r2, r3, #16
 8022696:	687b      	ldr	r3, [r7, #4]
 8022698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802269a:	687b      	ldr	r3, [r7, #4]
 802269c:	6a1b      	ldr	r3, [r3, #32]
 802269e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80226a0:	687b      	ldr	r3, [r7, #4]
 80226a2:	685b      	ldr	r3, [r3, #4]
 80226a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80226a6:	687b      	ldr	r3, [r7, #4]
 80226a8:	699b      	ldr	r3, [r3, #24]
 80226aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80226ac:	68fb      	ldr	r3, [r7, #12]
 80226ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80226b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80226b4:	68fb      	ldr	r3, [r7, #12]
 80226b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80226ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80226bc:	683b      	ldr	r3, [r7, #0]
 80226be:	681b      	ldr	r3, [r3, #0]
 80226c0:	021b      	lsls	r3, r3, #8
 80226c2:	68fa      	ldr	r2, [r7, #12]
 80226c4:	4313      	orrs	r3, r2
 80226c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80226c8:	697b      	ldr	r3, [r7, #20]
 80226ca:	f023 0320 	bic.w	r3, r3, #32
 80226ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80226d0:	683b      	ldr	r3, [r7, #0]
 80226d2:	689b      	ldr	r3, [r3, #8]
 80226d4:	011b      	lsls	r3, r3, #4
 80226d6:	697a      	ldr	r2, [r7, #20]
 80226d8:	4313      	orrs	r3, r2
 80226da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80226dc:	687b      	ldr	r3, [r7, #4]
 80226de:	4a1e      	ldr	r2, [pc, #120]	; (8022758 <TIM_OC2_SetConfig+0xd4>)
 80226e0:	4293      	cmp	r3, r2
 80226e2:	d10d      	bne.n	8022700 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80226e4:	697b      	ldr	r3, [r7, #20]
 80226e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80226ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80226ec:	683b      	ldr	r3, [r7, #0]
 80226ee:	68db      	ldr	r3, [r3, #12]
 80226f0:	011b      	lsls	r3, r3, #4
 80226f2:	697a      	ldr	r2, [r7, #20]
 80226f4:	4313      	orrs	r3, r2
 80226f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80226f8:	697b      	ldr	r3, [r7, #20]
 80226fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80226fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8022700:	687b      	ldr	r3, [r7, #4]
 8022702:	4a15      	ldr	r2, [pc, #84]	; (8022758 <TIM_OC2_SetConfig+0xd4>)
 8022704:	4293      	cmp	r3, r2
 8022706:	d113      	bne.n	8022730 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8022708:	693b      	ldr	r3, [r7, #16]
 802270a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802270e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8022710:	693b      	ldr	r3, [r7, #16]
 8022712:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8022716:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8022718:	683b      	ldr	r3, [r7, #0]
 802271a:	695b      	ldr	r3, [r3, #20]
 802271c:	009b      	lsls	r3, r3, #2
 802271e:	693a      	ldr	r2, [r7, #16]
 8022720:	4313      	orrs	r3, r2
 8022722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8022724:	683b      	ldr	r3, [r7, #0]
 8022726:	699b      	ldr	r3, [r3, #24]
 8022728:	009b      	lsls	r3, r3, #2
 802272a:	693a      	ldr	r2, [r7, #16]
 802272c:	4313      	orrs	r3, r2
 802272e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8022730:	687b      	ldr	r3, [r7, #4]
 8022732:	693a      	ldr	r2, [r7, #16]
 8022734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8022736:	687b      	ldr	r3, [r7, #4]
 8022738:	68fa      	ldr	r2, [r7, #12]
 802273a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 802273c:	683b      	ldr	r3, [r7, #0]
 802273e:	685a      	ldr	r2, [r3, #4]
 8022740:	687b      	ldr	r3, [r7, #4]
 8022742:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8022744:	687b      	ldr	r3, [r7, #4]
 8022746:	697a      	ldr	r2, [r7, #20]
 8022748:	621a      	str	r2, [r3, #32]
}
 802274a:	bf00      	nop
 802274c:	371c      	adds	r7, #28
 802274e:	46bd      	mov	sp, r7
 8022750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022754:	4770      	bx	lr
 8022756:	bf00      	nop
 8022758:	40010000 	.word	0x40010000

0802275c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802275c:	b480      	push	{r7}
 802275e:	b087      	sub	sp, #28
 8022760:	af00      	add	r7, sp, #0
 8022762:	6078      	str	r0, [r7, #4]
 8022764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8022766:	687b      	ldr	r3, [r7, #4]
 8022768:	6a1b      	ldr	r3, [r3, #32]
 802276a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 802276e:	687b      	ldr	r3, [r7, #4]
 8022770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8022772:	687b      	ldr	r3, [r7, #4]
 8022774:	6a1b      	ldr	r3, [r3, #32]
 8022776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8022778:	687b      	ldr	r3, [r7, #4]
 802277a:	685b      	ldr	r3, [r3, #4]
 802277c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802277e:	687b      	ldr	r3, [r7, #4]
 8022780:	69db      	ldr	r3, [r3, #28]
 8022782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8022784:	68fb      	ldr	r3, [r7, #12]
 8022786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802278a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 802278c:	68fb      	ldr	r3, [r7, #12]
 802278e:	f023 0303 	bic.w	r3, r3, #3
 8022792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8022794:	683b      	ldr	r3, [r7, #0]
 8022796:	681b      	ldr	r3, [r3, #0]
 8022798:	68fa      	ldr	r2, [r7, #12]
 802279a:	4313      	orrs	r3, r2
 802279c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 802279e:	697b      	ldr	r3, [r7, #20]
 80227a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80227a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80227a6:	683b      	ldr	r3, [r7, #0]
 80227a8:	689b      	ldr	r3, [r3, #8]
 80227aa:	021b      	lsls	r3, r3, #8
 80227ac:	697a      	ldr	r2, [r7, #20]
 80227ae:	4313      	orrs	r3, r2
 80227b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80227b2:	687b      	ldr	r3, [r7, #4]
 80227b4:	4a1d      	ldr	r2, [pc, #116]	; (802282c <TIM_OC3_SetConfig+0xd0>)
 80227b6:	4293      	cmp	r3, r2
 80227b8:	d10d      	bne.n	80227d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80227ba:	697b      	ldr	r3, [r7, #20]
 80227bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80227c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80227c2:	683b      	ldr	r3, [r7, #0]
 80227c4:	68db      	ldr	r3, [r3, #12]
 80227c6:	021b      	lsls	r3, r3, #8
 80227c8:	697a      	ldr	r2, [r7, #20]
 80227ca:	4313      	orrs	r3, r2
 80227cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80227ce:	697b      	ldr	r3, [r7, #20]
 80227d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80227d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80227d6:	687b      	ldr	r3, [r7, #4]
 80227d8:	4a14      	ldr	r2, [pc, #80]	; (802282c <TIM_OC3_SetConfig+0xd0>)
 80227da:	4293      	cmp	r3, r2
 80227dc:	d113      	bne.n	8022806 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80227de:	693b      	ldr	r3, [r7, #16]
 80227e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80227e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80227e6:	693b      	ldr	r3, [r7, #16]
 80227e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80227ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80227ee:	683b      	ldr	r3, [r7, #0]
 80227f0:	695b      	ldr	r3, [r3, #20]
 80227f2:	011b      	lsls	r3, r3, #4
 80227f4:	693a      	ldr	r2, [r7, #16]
 80227f6:	4313      	orrs	r3, r2
 80227f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80227fa:	683b      	ldr	r3, [r7, #0]
 80227fc:	699b      	ldr	r3, [r3, #24]
 80227fe:	011b      	lsls	r3, r3, #4
 8022800:	693a      	ldr	r2, [r7, #16]
 8022802:	4313      	orrs	r3, r2
 8022804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8022806:	687b      	ldr	r3, [r7, #4]
 8022808:	693a      	ldr	r2, [r7, #16]
 802280a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802280c:	687b      	ldr	r3, [r7, #4]
 802280e:	68fa      	ldr	r2, [r7, #12]
 8022810:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8022812:	683b      	ldr	r3, [r7, #0]
 8022814:	685a      	ldr	r2, [r3, #4]
 8022816:	687b      	ldr	r3, [r7, #4]
 8022818:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802281a:	687b      	ldr	r3, [r7, #4]
 802281c:	697a      	ldr	r2, [r7, #20]
 802281e:	621a      	str	r2, [r3, #32]
}
 8022820:	bf00      	nop
 8022822:	371c      	adds	r7, #28
 8022824:	46bd      	mov	sp, r7
 8022826:	f85d 7b04 	ldr.w	r7, [sp], #4
 802282a:	4770      	bx	lr
 802282c:	40010000 	.word	0x40010000

08022830 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8022830:	b480      	push	{r7}
 8022832:	b087      	sub	sp, #28
 8022834:	af00      	add	r7, sp, #0
 8022836:	6078      	str	r0, [r7, #4]
 8022838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802283a:	687b      	ldr	r3, [r7, #4]
 802283c:	6a1b      	ldr	r3, [r3, #32]
 802283e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8022842:	687b      	ldr	r3, [r7, #4]
 8022844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8022846:	687b      	ldr	r3, [r7, #4]
 8022848:	6a1b      	ldr	r3, [r3, #32]
 802284a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802284c:	687b      	ldr	r3, [r7, #4]
 802284e:	685b      	ldr	r3, [r3, #4]
 8022850:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8022852:	687b      	ldr	r3, [r7, #4]
 8022854:	69db      	ldr	r3, [r3, #28]
 8022856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8022858:	68fb      	ldr	r3, [r7, #12]
 802285a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802285e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8022860:	68fb      	ldr	r3, [r7, #12]
 8022862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8022866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8022868:	683b      	ldr	r3, [r7, #0]
 802286a:	681b      	ldr	r3, [r3, #0]
 802286c:	021b      	lsls	r3, r3, #8
 802286e:	68fa      	ldr	r2, [r7, #12]
 8022870:	4313      	orrs	r3, r2
 8022872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8022874:	693b      	ldr	r3, [r7, #16]
 8022876:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802287a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 802287c:	683b      	ldr	r3, [r7, #0]
 802287e:	689b      	ldr	r3, [r3, #8]
 8022880:	031b      	lsls	r3, r3, #12
 8022882:	693a      	ldr	r2, [r7, #16]
 8022884:	4313      	orrs	r3, r2
 8022886:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8022888:	687b      	ldr	r3, [r7, #4]
 802288a:	4a10      	ldr	r2, [pc, #64]	; (80228cc <TIM_OC4_SetConfig+0x9c>)
 802288c:	4293      	cmp	r3, r2
 802288e:	d109      	bne.n	80228a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8022890:	697b      	ldr	r3, [r7, #20]
 8022892:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8022896:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8022898:	683b      	ldr	r3, [r7, #0]
 802289a:	695b      	ldr	r3, [r3, #20]
 802289c:	019b      	lsls	r3, r3, #6
 802289e:	697a      	ldr	r2, [r7, #20]
 80228a0:	4313      	orrs	r3, r2
 80228a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80228a4:	687b      	ldr	r3, [r7, #4]
 80228a6:	697a      	ldr	r2, [r7, #20]
 80228a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80228aa:	687b      	ldr	r3, [r7, #4]
 80228ac:	68fa      	ldr	r2, [r7, #12]
 80228ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80228b0:	683b      	ldr	r3, [r7, #0]
 80228b2:	685a      	ldr	r2, [r3, #4]
 80228b4:	687b      	ldr	r3, [r7, #4]
 80228b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80228b8:	687b      	ldr	r3, [r7, #4]
 80228ba:	693a      	ldr	r2, [r7, #16]
 80228bc:	621a      	str	r2, [r3, #32]
}
 80228be:	bf00      	nop
 80228c0:	371c      	adds	r7, #28
 80228c2:	46bd      	mov	sp, r7
 80228c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228c8:	4770      	bx	lr
 80228ca:	bf00      	nop
 80228cc:	40010000 	.word	0x40010000

080228d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80228d0:	b480      	push	{r7}
 80228d2:	b087      	sub	sp, #28
 80228d4:	af00      	add	r7, sp, #0
 80228d6:	60f8      	str	r0, [r7, #12]
 80228d8:	60b9      	str	r1, [r7, #8]
 80228da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80228dc:	68fb      	ldr	r3, [r7, #12]
 80228de:	6a1b      	ldr	r3, [r3, #32]
 80228e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80228e2:	68fb      	ldr	r3, [r7, #12]
 80228e4:	6a1b      	ldr	r3, [r3, #32]
 80228e6:	f023 0201 	bic.w	r2, r3, #1
 80228ea:	68fb      	ldr	r3, [r7, #12]
 80228ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80228ee:	68fb      	ldr	r3, [r7, #12]
 80228f0:	699b      	ldr	r3, [r3, #24]
 80228f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80228f4:	693b      	ldr	r3, [r7, #16]
 80228f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80228fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80228fc:	687b      	ldr	r3, [r7, #4]
 80228fe:	011b      	lsls	r3, r3, #4
 8022900:	693a      	ldr	r2, [r7, #16]
 8022902:	4313      	orrs	r3, r2
 8022904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8022906:	697b      	ldr	r3, [r7, #20]
 8022908:	f023 030a 	bic.w	r3, r3, #10
 802290c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802290e:	697a      	ldr	r2, [r7, #20]
 8022910:	68bb      	ldr	r3, [r7, #8]
 8022912:	4313      	orrs	r3, r2
 8022914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8022916:	68fb      	ldr	r3, [r7, #12]
 8022918:	693a      	ldr	r2, [r7, #16]
 802291a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802291c:	68fb      	ldr	r3, [r7, #12]
 802291e:	697a      	ldr	r2, [r7, #20]
 8022920:	621a      	str	r2, [r3, #32]
}
 8022922:	bf00      	nop
 8022924:	371c      	adds	r7, #28
 8022926:	46bd      	mov	sp, r7
 8022928:	f85d 7b04 	ldr.w	r7, [sp], #4
 802292c:	4770      	bx	lr

0802292e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802292e:	b480      	push	{r7}
 8022930:	b087      	sub	sp, #28
 8022932:	af00      	add	r7, sp, #0
 8022934:	60f8      	str	r0, [r7, #12]
 8022936:	60b9      	str	r1, [r7, #8]
 8022938:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802293a:	68fb      	ldr	r3, [r7, #12]
 802293c:	6a1b      	ldr	r3, [r3, #32]
 802293e:	f023 0210 	bic.w	r2, r3, #16
 8022942:	68fb      	ldr	r3, [r7, #12]
 8022944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8022946:	68fb      	ldr	r3, [r7, #12]
 8022948:	699b      	ldr	r3, [r3, #24]
 802294a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802294c:	68fb      	ldr	r3, [r7, #12]
 802294e:	6a1b      	ldr	r3, [r3, #32]
 8022950:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8022952:	697b      	ldr	r3, [r7, #20]
 8022954:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8022958:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802295a:	687b      	ldr	r3, [r7, #4]
 802295c:	031b      	lsls	r3, r3, #12
 802295e:	697a      	ldr	r2, [r7, #20]
 8022960:	4313      	orrs	r3, r2
 8022962:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8022964:	693b      	ldr	r3, [r7, #16]
 8022966:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802296a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 802296c:	68bb      	ldr	r3, [r7, #8]
 802296e:	011b      	lsls	r3, r3, #4
 8022970:	693a      	ldr	r2, [r7, #16]
 8022972:	4313      	orrs	r3, r2
 8022974:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8022976:	68fb      	ldr	r3, [r7, #12]
 8022978:	697a      	ldr	r2, [r7, #20]
 802297a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802297c:	68fb      	ldr	r3, [r7, #12]
 802297e:	693a      	ldr	r2, [r7, #16]
 8022980:	621a      	str	r2, [r3, #32]
}
 8022982:	bf00      	nop
 8022984:	371c      	adds	r7, #28
 8022986:	46bd      	mov	sp, r7
 8022988:	f85d 7b04 	ldr.w	r7, [sp], #4
 802298c:	4770      	bx	lr

0802298e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 802298e:	b480      	push	{r7}
 8022990:	b085      	sub	sp, #20
 8022992:	af00      	add	r7, sp, #0
 8022994:	6078      	str	r0, [r7, #4]
 8022996:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8022998:	687b      	ldr	r3, [r7, #4]
 802299a:	689b      	ldr	r3, [r3, #8]
 802299c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 802299e:	68fb      	ldr	r3, [r7, #12]
 80229a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80229a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80229a6:	683a      	ldr	r2, [r7, #0]
 80229a8:	68fb      	ldr	r3, [r7, #12]
 80229aa:	4313      	orrs	r3, r2
 80229ac:	f043 0307 	orr.w	r3, r3, #7
 80229b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80229b2:	687b      	ldr	r3, [r7, #4]
 80229b4:	68fa      	ldr	r2, [r7, #12]
 80229b6:	609a      	str	r2, [r3, #8]
}
 80229b8:	bf00      	nop
 80229ba:	3714      	adds	r7, #20
 80229bc:	46bd      	mov	sp, r7
 80229be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229c2:	4770      	bx	lr

080229c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80229c4:	b480      	push	{r7}
 80229c6:	b087      	sub	sp, #28
 80229c8:	af00      	add	r7, sp, #0
 80229ca:	60f8      	str	r0, [r7, #12]
 80229cc:	60b9      	str	r1, [r7, #8]
 80229ce:	607a      	str	r2, [r7, #4]
 80229d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80229d2:	68fb      	ldr	r3, [r7, #12]
 80229d4:	689b      	ldr	r3, [r3, #8]
 80229d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80229d8:	697b      	ldr	r3, [r7, #20]
 80229da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80229de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80229e0:	683b      	ldr	r3, [r7, #0]
 80229e2:	021a      	lsls	r2, r3, #8
 80229e4:	687b      	ldr	r3, [r7, #4]
 80229e6:	431a      	orrs	r2, r3
 80229e8:	68bb      	ldr	r3, [r7, #8]
 80229ea:	4313      	orrs	r3, r2
 80229ec:	697a      	ldr	r2, [r7, #20]
 80229ee:	4313      	orrs	r3, r2
 80229f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80229f2:	68fb      	ldr	r3, [r7, #12]
 80229f4:	697a      	ldr	r2, [r7, #20]
 80229f6:	609a      	str	r2, [r3, #8]
}
 80229f8:	bf00      	nop
 80229fa:	371c      	adds	r7, #28
 80229fc:	46bd      	mov	sp, r7
 80229fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a02:	4770      	bx	lr

08022a04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8022a04:	b480      	push	{r7}
 8022a06:	b087      	sub	sp, #28
 8022a08:	af00      	add	r7, sp, #0
 8022a0a:	60f8      	str	r0, [r7, #12]
 8022a0c:	60b9      	str	r1, [r7, #8]
 8022a0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8022a10:	68bb      	ldr	r3, [r7, #8]
 8022a12:	f003 031f 	and.w	r3, r3, #31
 8022a16:	2201      	movs	r2, #1
 8022a18:	fa02 f303 	lsl.w	r3, r2, r3
 8022a1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8022a1e:	68fb      	ldr	r3, [r7, #12]
 8022a20:	6a1a      	ldr	r2, [r3, #32]
 8022a22:	697b      	ldr	r3, [r7, #20]
 8022a24:	43db      	mvns	r3, r3
 8022a26:	401a      	ands	r2, r3
 8022a28:	68fb      	ldr	r3, [r7, #12]
 8022a2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8022a2c:	68fb      	ldr	r3, [r7, #12]
 8022a2e:	6a1a      	ldr	r2, [r3, #32]
 8022a30:	68bb      	ldr	r3, [r7, #8]
 8022a32:	f003 031f 	and.w	r3, r3, #31
 8022a36:	6879      	ldr	r1, [r7, #4]
 8022a38:	fa01 f303 	lsl.w	r3, r1, r3
 8022a3c:	431a      	orrs	r2, r3
 8022a3e:	68fb      	ldr	r3, [r7, #12]
 8022a40:	621a      	str	r2, [r3, #32]
}
 8022a42:	bf00      	nop
 8022a44:	371c      	adds	r7, #28
 8022a46:	46bd      	mov	sp, r7
 8022a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a4c:	4770      	bx	lr
	...

08022a50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8022a50:	b480      	push	{r7}
 8022a52:	b085      	sub	sp, #20
 8022a54:	af00      	add	r7, sp, #0
 8022a56:	6078      	str	r0, [r7, #4]
 8022a58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8022a5a:	687b      	ldr	r3, [r7, #4]
 8022a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8022a60:	2b01      	cmp	r3, #1
 8022a62:	d101      	bne.n	8022a68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8022a64:	2302      	movs	r3, #2
 8022a66:	e050      	b.n	8022b0a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8022a68:	687b      	ldr	r3, [r7, #4]
 8022a6a:	2201      	movs	r2, #1
 8022a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8022a70:	687b      	ldr	r3, [r7, #4]
 8022a72:	2202      	movs	r2, #2
 8022a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8022a78:	687b      	ldr	r3, [r7, #4]
 8022a7a:	681b      	ldr	r3, [r3, #0]
 8022a7c:	685b      	ldr	r3, [r3, #4]
 8022a7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8022a80:	687b      	ldr	r3, [r7, #4]
 8022a82:	681b      	ldr	r3, [r3, #0]
 8022a84:	689b      	ldr	r3, [r3, #8]
 8022a86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8022a88:	68fb      	ldr	r3, [r7, #12]
 8022a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8022a8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8022a90:	683b      	ldr	r3, [r7, #0]
 8022a92:	681b      	ldr	r3, [r3, #0]
 8022a94:	68fa      	ldr	r2, [r7, #12]
 8022a96:	4313      	orrs	r3, r2
 8022a98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8022a9a:	687b      	ldr	r3, [r7, #4]
 8022a9c:	681b      	ldr	r3, [r3, #0]
 8022a9e:	68fa      	ldr	r2, [r7, #12]
 8022aa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8022aa2:	687b      	ldr	r3, [r7, #4]
 8022aa4:	681b      	ldr	r3, [r3, #0]
 8022aa6:	4a1c      	ldr	r2, [pc, #112]	; (8022b18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8022aa8:	4293      	cmp	r3, r2
 8022aaa:	d018      	beq.n	8022ade <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8022aac:	687b      	ldr	r3, [r7, #4]
 8022aae:	681b      	ldr	r3, [r3, #0]
 8022ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8022ab4:	d013      	beq.n	8022ade <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8022ab6:	687b      	ldr	r3, [r7, #4]
 8022ab8:	681b      	ldr	r3, [r3, #0]
 8022aba:	4a18      	ldr	r2, [pc, #96]	; (8022b1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8022abc:	4293      	cmp	r3, r2
 8022abe:	d00e      	beq.n	8022ade <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8022ac0:	687b      	ldr	r3, [r7, #4]
 8022ac2:	681b      	ldr	r3, [r3, #0]
 8022ac4:	4a16      	ldr	r2, [pc, #88]	; (8022b20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8022ac6:	4293      	cmp	r3, r2
 8022ac8:	d009      	beq.n	8022ade <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8022aca:	687b      	ldr	r3, [r7, #4]
 8022acc:	681b      	ldr	r3, [r3, #0]
 8022ace:	4a15      	ldr	r2, [pc, #84]	; (8022b24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8022ad0:	4293      	cmp	r3, r2
 8022ad2:	d004      	beq.n	8022ade <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8022ad4:	687b      	ldr	r3, [r7, #4]
 8022ad6:	681b      	ldr	r3, [r3, #0]
 8022ad8:	4a13      	ldr	r2, [pc, #76]	; (8022b28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8022ada:	4293      	cmp	r3, r2
 8022adc:	d10c      	bne.n	8022af8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8022ade:	68bb      	ldr	r3, [r7, #8]
 8022ae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8022ae4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8022ae6:	683b      	ldr	r3, [r7, #0]
 8022ae8:	685b      	ldr	r3, [r3, #4]
 8022aea:	68ba      	ldr	r2, [r7, #8]
 8022aec:	4313      	orrs	r3, r2
 8022aee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8022af0:	687b      	ldr	r3, [r7, #4]
 8022af2:	681b      	ldr	r3, [r3, #0]
 8022af4:	68ba      	ldr	r2, [r7, #8]
 8022af6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8022af8:	687b      	ldr	r3, [r7, #4]
 8022afa:	2201      	movs	r2, #1
 8022afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8022b00:	687b      	ldr	r3, [r7, #4]
 8022b02:	2200      	movs	r2, #0
 8022b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8022b08:	2300      	movs	r3, #0
}
 8022b0a:	4618      	mov	r0, r3
 8022b0c:	3714      	adds	r7, #20
 8022b0e:	46bd      	mov	sp, r7
 8022b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b14:	4770      	bx	lr
 8022b16:	bf00      	nop
 8022b18:	40010000 	.word	0x40010000
 8022b1c:	40000400 	.word	0x40000400
 8022b20:	40000800 	.word	0x40000800
 8022b24:	40000c00 	.word	0x40000c00
 8022b28:	40014000 	.word	0x40014000

08022b2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8022b2c:	b480      	push	{r7}
 8022b2e:	b083      	sub	sp, #12
 8022b30:	af00      	add	r7, sp, #0
 8022b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8022b34:	bf00      	nop
 8022b36:	370c      	adds	r7, #12
 8022b38:	46bd      	mov	sp, r7
 8022b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b3e:	4770      	bx	lr

08022b40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8022b40:	b480      	push	{r7}
 8022b42:	b083      	sub	sp, #12
 8022b44:	af00      	add	r7, sp, #0
 8022b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8022b48:	bf00      	nop
 8022b4a:	370c      	adds	r7, #12
 8022b4c:	46bd      	mov	sp, r7
 8022b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b52:	4770      	bx	lr

08022b54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8022b54:	b580      	push	{r7, lr}
 8022b56:	b082      	sub	sp, #8
 8022b58:	af00      	add	r7, sp, #0
 8022b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8022b5c:	687b      	ldr	r3, [r7, #4]
 8022b5e:	2b00      	cmp	r3, #0
 8022b60:	d101      	bne.n	8022b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8022b62:	2301      	movs	r3, #1
 8022b64:	e03f      	b.n	8022be6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8022b66:	687b      	ldr	r3, [r7, #4]
 8022b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8022b6c:	b2db      	uxtb	r3, r3
 8022b6e:	2b00      	cmp	r3, #0
 8022b70:	d106      	bne.n	8022b80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8022b72:	687b      	ldr	r3, [r7, #4]
 8022b74:	2200      	movs	r2, #0
 8022b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8022b7a:	6878      	ldr	r0, [r7, #4]
 8022b7c:	f7e0 ff2e 	bl	80039dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8022b80:	687b      	ldr	r3, [r7, #4]
 8022b82:	2224      	movs	r2, #36	; 0x24
 8022b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8022b88:	687b      	ldr	r3, [r7, #4]
 8022b8a:	681b      	ldr	r3, [r3, #0]
 8022b8c:	68da      	ldr	r2, [r3, #12]
 8022b8e:	687b      	ldr	r3, [r7, #4]
 8022b90:	681b      	ldr	r3, [r3, #0]
 8022b92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8022b96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8022b98:	6878      	ldr	r0, [r7, #4]
 8022b9a:	f000 fec7 	bl	802392c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8022b9e:	687b      	ldr	r3, [r7, #4]
 8022ba0:	681b      	ldr	r3, [r3, #0]
 8022ba2:	691a      	ldr	r2, [r3, #16]
 8022ba4:	687b      	ldr	r3, [r7, #4]
 8022ba6:	681b      	ldr	r3, [r3, #0]
 8022ba8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8022bac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8022bae:	687b      	ldr	r3, [r7, #4]
 8022bb0:	681b      	ldr	r3, [r3, #0]
 8022bb2:	695a      	ldr	r2, [r3, #20]
 8022bb4:	687b      	ldr	r3, [r7, #4]
 8022bb6:	681b      	ldr	r3, [r3, #0]
 8022bb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8022bbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8022bbe:	687b      	ldr	r3, [r7, #4]
 8022bc0:	681b      	ldr	r3, [r3, #0]
 8022bc2:	68da      	ldr	r2, [r3, #12]
 8022bc4:	687b      	ldr	r3, [r7, #4]
 8022bc6:	681b      	ldr	r3, [r3, #0]
 8022bc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8022bcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022bce:	687b      	ldr	r3, [r7, #4]
 8022bd0:	2200      	movs	r2, #0
 8022bd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8022bd4:	687b      	ldr	r3, [r7, #4]
 8022bd6:	2220      	movs	r2, #32
 8022bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8022bdc:	687b      	ldr	r3, [r7, #4]
 8022bde:	2220      	movs	r2, #32
 8022be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8022be4:	2300      	movs	r3, #0
}
 8022be6:	4618      	mov	r0, r3
 8022be8:	3708      	adds	r7, #8
 8022bea:	46bd      	mov	sp, r7
 8022bec:	bd80      	pop	{r7, pc}

08022bee <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8022bee:	b580      	push	{r7, lr}
 8022bf0:	b082      	sub	sp, #8
 8022bf2:	af00      	add	r7, sp, #0
 8022bf4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8022bf6:	687b      	ldr	r3, [r7, #4]
 8022bf8:	2b00      	cmp	r3, #0
 8022bfa:	d101      	bne.n	8022c00 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8022bfc:	2301      	movs	r3, #1
 8022bfe:	e021      	b.n	8022c44 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8022c00:	687b      	ldr	r3, [r7, #4]
 8022c02:	2224      	movs	r2, #36	; 0x24
 8022c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8022c08:	687b      	ldr	r3, [r7, #4]
 8022c0a:	681b      	ldr	r3, [r3, #0]
 8022c0c:	68da      	ldr	r2, [r3, #12]
 8022c0e:	687b      	ldr	r3, [r7, #4]
 8022c10:	681b      	ldr	r3, [r3, #0]
 8022c12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8022c16:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8022c18:	6878      	ldr	r0, [r7, #4]
 8022c1a:	f7e0 ffa9 	bl	8003b70 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022c1e:	687b      	ldr	r3, [r7, #4]
 8022c20:	2200      	movs	r2, #0
 8022c22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8022c24:	687b      	ldr	r3, [r7, #4]
 8022c26:	2200      	movs	r2, #0
 8022c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8022c2c:	687b      	ldr	r3, [r7, #4]
 8022c2e:	2200      	movs	r2, #0
 8022c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022c34:	687b      	ldr	r3, [r7, #4]
 8022c36:	2200      	movs	r2, #0
 8022c38:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8022c3a:	687b      	ldr	r3, [r7, #4]
 8022c3c:	2200      	movs	r2, #0
 8022c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8022c42:	2300      	movs	r3, #0
}
 8022c44:	4618      	mov	r0, r3
 8022c46:	3708      	adds	r7, #8
 8022c48:	46bd      	mov	sp, r7
 8022c4a:	bd80      	pop	{r7, pc}

08022c4c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8022c4c:	b480      	push	{r7}
 8022c4e:	b085      	sub	sp, #20
 8022c50:	af00      	add	r7, sp, #0
 8022c52:	60f8      	str	r0, [r7, #12]
 8022c54:	60b9      	str	r1, [r7, #8]
 8022c56:	4613      	mov	r3, r2
 8022c58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8022c5a:	68fb      	ldr	r3, [r7, #12]
 8022c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8022c60:	b2db      	uxtb	r3, r3
 8022c62:	2b20      	cmp	r3, #32
 8022c64:	d130      	bne.n	8022cc8 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8022c66:	68bb      	ldr	r3, [r7, #8]
 8022c68:	2b00      	cmp	r3, #0
 8022c6a:	d002      	beq.n	8022c72 <HAL_UART_Transmit_IT+0x26>
 8022c6c:	88fb      	ldrh	r3, [r7, #6]
 8022c6e:	2b00      	cmp	r3, #0
 8022c70:	d101      	bne.n	8022c76 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8022c72:	2301      	movs	r3, #1
 8022c74:	e029      	b.n	8022cca <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8022c76:	68fb      	ldr	r3, [r7, #12]
 8022c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8022c7c:	2b01      	cmp	r3, #1
 8022c7e:	d101      	bne.n	8022c84 <HAL_UART_Transmit_IT+0x38>
 8022c80:	2302      	movs	r3, #2
 8022c82:	e022      	b.n	8022cca <HAL_UART_Transmit_IT+0x7e>
 8022c84:	68fb      	ldr	r3, [r7, #12]
 8022c86:	2201      	movs	r2, #1
 8022c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8022c8c:	68fb      	ldr	r3, [r7, #12]
 8022c8e:	68ba      	ldr	r2, [r7, #8]
 8022c90:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8022c92:	68fb      	ldr	r3, [r7, #12]
 8022c94:	88fa      	ldrh	r2, [r7, #6]
 8022c96:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8022c98:	68fb      	ldr	r3, [r7, #12]
 8022c9a:	88fa      	ldrh	r2, [r7, #6]
 8022c9c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022c9e:	68fb      	ldr	r3, [r7, #12]
 8022ca0:	2200      	movs	r2, #0
 8022ca2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8022ca4:	68fb      	ldr	r3, [r7, #12]
 8022ca6:	2221      	movs	r2, #33	; 0x21
 8022ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8022cac:	68fb      	ldr	r3, [r7, #12]
 8022cae:	2200      	movs	r2, #0
 8022cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8022cb4:	68fb      	ldr	r3, [r7, #12]
 8022cb6:	681b      	ldr	r3, [r3, #0]
 8022cb8:	68da      	ldr	r2, [r3, #12]
 8022cba:	68fb      	ldr	r3, [r7, #12]
 8022cbc:	681b      	ldr	r3, [r3, #0]
 8022cbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8022cc2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8022cc4:	2300      	movs	r3, #0
 8022cc6:	e000      	b.n	8022cca <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8022cc8:	2302      	movs	r3, #2
  }
}
 8022cca:	4618      	mov	r0, r3
 8022ccc:	3714      	adds	r7, #20
 8022cce:	46bd      	mov	sp, r7
 8022cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022cd4:	4770      	bx	lr

08022cd6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8022cd6:	b580      	push	{r7, lr}
 8022cd8:	b084      	sub	sp, #16
 8022cda:	af00      	add	r7, sp, #0
 8022cdc:	60f8      	str	r0, [r7, #12]
 8022cde:	60b9      	str	r1, [r7, #8]
 8022ce0:	4613      	mov	r3, r2
 8022ce2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8022ce4:	68fb      	ldr	r3, [r7, #12]
 8022ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8022cea:	b2db      	uxtb	r3, r3
 8022cec:	2b20      	cmp	r3, #32
 8022cee:	d11d      	bne.n	8022d2c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8022cf0:	68bb      	ldr	r3, [r7, #8]
 8022cf2:	2b00      	cmp	r3, #0
 8022cf4:	d002      	beq.n	8022cfc <HAL_UART_Receive_IT+0x26>
 8022cf6:	88fb      	ldrh	r3, [r7, #6]
 8022cf8:	2b00      	cmp	r3, #0
 8022cfa:	d101      	bne.n	8022d00 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8022cfc:	2301      	movs	r3, #1
 8022cfe:	e016      	b.n	8022d2e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8022d00:	68fb      	ldr	r3, [r7, #12]
 8022d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8022d06:	2b01      	cmp	r3, #1
 8022d08:	d101      	bne.n	8022d0e <HAL_UART_Receive_IT+0x38>
 8022d0a:	2302      	movs	r3, #2
 8022d0c:	e00f      	b.n	8022d2e <HAL_UART_Receive_IT+0x58>
 8022d0e:	68fb      	ldr	r3, [r7, #12]
 8022d10:	2201      	movs	r2, #1
 8022d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022d16:	68fb      	ldr	r3, [r7, #12]
 8022d18:	2200      	movs	r2, #0
 8022d1a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8022d1c:	88fb      	ldrh	r3, [r7, #6]
 8022d1e:	461a      	mov	r2, r3
 8022d20:	68b9      	ldr	r1, [r7, #8]
 8022d22:	68f8      	ldr	r0, [r7, #12]
 8022d24:	f000 fbca 	bl	80234bc <UART_Start_Receive_IT>
 8022d28:	4603      	mov	r3, r0
 8022d2a:	e000      	b.n	8022d2e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8022d2c:	2302      	movs	r3, #2
  }
}
 8022d2e:	4618      	mov	r0, r3
 8022d30:	3710      	adds	r7, #16
 8022d32:	46bd      	mov	sp, r7
 8022d34:	bd80      	pop	{r7, pc}
	...

08022d38 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8022d38:	b580      	push	{r7, lr}
 8022d3a:	b0a2      	sub	sp, #136	; 0x88
 8022d3c:	af00      	add	r7, sp, #0
 8022d3e:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8022d40:	2301      	movs	r3, #1
 8022d42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8022d46:	687b      	ldr	r3, [r7, #4]
 8022d48:	681b      	ldr	r3, [r3, #0]
 8022d4a:	330c      	adds	r3, #12
 8022d4c:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022d50:	e853 3f00 	ldrex	r3, [r3]
 8022d54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8022d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8022d58:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8022d5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8022d60:	687b      	ldr	r3, [r7, #4]
 8022d62:	681b      	ldr	r3, [r3, #0]
 8022d64:	330c      	adds	r3, #12
 8022d66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8022d6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8022d6c:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022d6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8022d70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8022d72:	e841 2300 	strex	r3, r2, [r1]
 8022d76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8022d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022d7a:	2b00      	cmp	r3, #0
 8022d7c:	d1e3      	bne.n	8022d46 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8022d7e:	687b      	ldr	r3, [r7, #4]
 8022d80:	681b      	ldr	r3, [r3, #0]
 8022d82:	3314      	adds	r3, #20
 8022d84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022d88:	e853 3f00 	ldrex	r3, [r3]
 8022d8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8022d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8022d90:	f023 0301 	bic.w	r3, r3, #1
 8022d94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8022d96:	687b      	ldr	r3, [r7, #4]
 8022d98:	681b      	ldr	r3, [r3, #0]
 8022d9a:	3314      	adds	r3, #20
 8022d9c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8022d9e:	65ba      	str	r2, [r7, #88]	; 0x58
 8022da0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022da2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8022da4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8022da6:	e841 2300 	strex	r3, r2, [r1]
 8022daa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8022dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8022dae:	2b00      	cmp	r3, #0
 8022db0:	d1e5      	bne.n	8022d7e <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022db2:	687b      	ldr	r3, [r7, #4]
 8022db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022db6:	2b01      	cmp	r3, #1
 8022db8:	d119      	bne.n	8022dee <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8022dba:	687b      	ldr	r3, [r7, #4]
 8022dbc:	681b      	ldr	r3, [r3, #0]
 8022dbe:	330c      	adds	r3, #12
 8022dc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022dc4:	e853 3f00 	ldrex	r3, [r3]
 8022dc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8022dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022dcc:	f023 0310 	bic.w	r3, r3, #16
 8022dd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8022dd2:	687b      	ldr	r3, [r7, #4]
 8022dd4:	681b      	ldr	r3, [r3, #0]
 8022dd6:	330c      	adds	r3, #12
 8022dd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8022dda:	647a      	str	r2, [r7, #68]	; 0x44
 8022ddc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022dde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8022de0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8022de2:	e841 2300 	strex	r3, r2, [r1]
 8022de6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8022de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022dea:	2b00      	cmp	r3, #0
 8022dec:	d1e5      	bne.n	8022dba <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8022dee:	687b      	ldr	r3, [r7, #4]
 8022df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022df2:	2b00      	cmp	r3, #0
 8022df4:	d00f      	beq.n	8022e16 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8022df6:	687b      	ldr	r3, [r7, #4]
 8022df8:	681b      	ldr	r3, [r3, #0]
 8022dfa:	695b      	ldr	r3, [r3, #20]
 8022dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022e00:	2b80      	cmp	r3, #128	; 0x80
 8022e02:	d104      	bne.n	8022e0e <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8022e04:	687b      	ldr	r3, [r7, #4]
 8022e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022e08:	4a53      	ldr	r2, [pc, #332]	; (8022f58 <HAL_UART_Abort_IT+0x220>)
 8022e0a:	651a      	str	r2, [r3, #80]	; 0x50
 8022e0c:	e003      	b.n	8022e16 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8022e0e:	687b      	ldr	r3, [r7, #4]
 8022e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022e12:	2200      	movs	r2, #0
 8022e14:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8022e16:	687b      	ldr	r3, [r7, #4]
 8022e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022e1a:	2b00      	cmp	r3, #0
 8022e1c:	d00f      	beq.n	8022e3e <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022e1e:	687b      	ldr	r3, [r7, #4]
 8022e20:	681b      	ldr	r3, [r3, #0]
 8022e22:	695b      	ldr	r3, [r3, #20]
 8022e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022e28:	2b40      	cmp	r3, #64	; 0x40
 8022e2a:	d104      	bne.n	8022e36 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8022e2c:	687b      	ldr	r3, [r7, #4]
 8022e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022e30:	4a4a      	ldr	r2, [pc, #296]	; (8022f5c <HAL_UART_Abort_IT+0x224>)
 8022e32:	651a      	str	r2, [r3, #80]	; 0x50
 8022e34:	e003      	b.n	8022e3e <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8022e36:	687b      	ldr	r3, [r7, #4]
 8022e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022e3a:	2200      	movs	r2, #0
 8022e3c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8022e3e:	687b      	ldr	r3, [r7, #4]
 8022e40:	681b      	ldr	r3, [r3, #0]
 8022e42:	695b      	ldr	r3, [r3, #20]
 8022e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022e48:	2b80      	cmp	r3, #128	; 0x80
 8022e4a:	d12d      	bne.n	8022ea8 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8022e4c:	687b      	ldr	r3, [r7, #4]
 8022e4e:	681b      	ldr	r3, [r3, #0]
 8022e50:	3314      	adds	r3, #20
 8022e52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022e56:	e853 3f00 	ldrex	r3, [r3]
 8022e5a:	623b      	str	r3, [r7, #32]
   return(result);
 8022e5c:	6a3b      	ldr	r3, [r7, #32]
 8022e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8022e62:	677b      	str	r3, [r7, #116]	; 0x74
 8022e64:	687b      	ldr	r3, [r7, #4]
 8022e66:	681b      	ldr	r3, [r3, #0]
 8022e68:	3314      	adds	r3, #20
 8022e6a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8022e6c:	633a      	str	r2, [r7, #48]	; 0x30
 8022e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022e70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8022e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022e74:	e841 2300 	strex	r3, r2, [r1]
 8022e78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8022e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e7c:	2b00      	cmp	r3, #0
 8022e7e:	d1e5      	bne.n	8022e4c <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8022e80:	687b      	ldr	r3, [r7, #4]
 8022e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022e84:	2b00      	cmp	r3, #0
 8022e86:	d00f      	beq.n	8022ea8 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8022e88:	687b      	ldr	r3, [r7, #4]
 8022e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022e8c:	4618      	mov	r0, r3
 8022e8e:	f7fa fcdf 	bl	801d850 <HAL_DMA_Abort_IT>
 8022e92:	4603      	mov	r3, r0
 8022e94:	2b00      	cmp	r3, #0
 8022e96:	d004      	beq.n	8022ea2 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8022e98:	687b      	ldr	r3, [r7, #4]
 8022e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022e9c:	2200      	movs	r2, #0
 8022e9e:	651a      	str	r2, [r3, #80]	; 0x50
 8022ea0:	e002      	b.n	8022ea8 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8022ea2:	2300      	movs	r3, #0
 8022ea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022ea8:	687b      	ldr	r3, [r7, #4]
 8022eaa:	681b      	ldr	r3, [r3, #0]
 8022eac:	695b      	ldr	r3, [r3, #20]
 8022eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022eb2:	2b40      	cmp	r3, #64	; 0x40
 8022eb4:	d130      	bne.n	8022f18 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8022eb6:	687b      	ldr	r3, [r7, #4]
 8022eb8:	681b      	ldr	r3, [r3, #0]
 8022eba:	3314      	adds	r3, #20
 8022ebc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022ebe:	693b      	ldr	r3, [r7, #16]
 8022ec0:	e853 3f00 	ldrex	r3, [r3]
 8022ec4:	60fb      	str	r3, [r7, #12]
   return(result);
 8022ec6:	68fb      	ldr	r3, [r7, #12]
 8022ec8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8022ecc:	673b      	str	r3, [r7, #112]	; 0x70
 8022ece:	687b      	ldr	r3, [r7, #4]
 8022ed0:	681b      	ldr	r3, [r3, #0]
 8022ed2:	3314      	adds	r3, #20
 8022ed4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8022ed6:	61fa      	str	r2, [r7, #28]
 8022ed8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022eda:	69b9      	ldr	r1, [r7, #24]
 8022edc:	69fa      	ldr	r2, [r7, #28]
 8022ede:	e841 2300 	strex	r3, r2, [r1]
 8022ee2:	617b      	str	r3, [r7, #20]
   return(result);
 8022ee4:	697b      	ldr	r3, [r7, #20]
 8022ee6:	2b00      	cmp	r3, #0
 8022ee8:	d1e5      	bne.n	8022eb6 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8022eea:	687b      	ldr	r3, [r7, #4]
 8022eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022eee:	2b00      	cmp	r3, #0
 8022ef0:	d012      	beq.n	8022f18 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8022ef2:	687b      	ldr	r3, [r7, #4]
 8022ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022ef6:	4618      	mov	r0, r3
 8022ef8:	f7fa fcaa 	bl	801d850 <HAL_DMA_Abort_IT>
 8022efc:	4603      	mov	r3, r0
 8022efe:	2b00      	cmp	r3, #0
 8022f00:	d007      	beq.n	8022f12 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8022f02:	687b      	ldr	r3, [r7, #4]
 8022f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022f06:	2200      	movs	r2, #0
 8022f08:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8022f0a:	2301      	movs	r3, #1
 8022f0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8022f10:	e002      	b.n	8022f18 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8022f12:	2300      	movs	r3, #0
 8022f14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8022f18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8022f1c:	2b01      	cmp	r3, #1
 8022f1e:	d116      	bne.n	8022f4e <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8022f20:	687b      	ldr	r3, [r7, #4]
 8022f22:	2200      	movs	r2, #0
 8022f24:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8022f26:	687b      	ldr	r3, [r7, #4]
 8022f28:	2200      	movs	r2, #0
 8022f2a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022f2c:	687b      	ldr	r3, [r7, #4]
 8022f2e:	2200      	movs	r2, #0
 8022f30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8022f32:	687b      	ldr	r3, [r7, #4]
 8022f34:	2220      	movs	r2, #32
 8022f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8022f3a:	687b      	ldr	r3, [r7, #4]
 8022f3c:	2220      	movs	r2, #32
 8022f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022f42:	687b      	ldr	r3, [r7, #4]
 8022f44:	2200      	movs	r2, #0
 8022f46:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8022f48:	6878      	ldr	r0, [r7, #4]
 8022f4a:	f000 faa1 	bl	8023490 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8022f4e:	2300      	movs	r3, #0
}
 8022f50:	4618      	mov	r0, r3
 8022f52:	3788      	adds	r7, #136	; 0x88
 8022f54:	46bd      	mov	sp, r7
 8022f56:	bd80      	pop	{r7, pc}
 8022f58:	08023627 	.word	0x08023627
 8022f5c:	08023687 	.word	0x08023687

08022f60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8022f60:	b580      	push	{r7, lr}
 8022f62:	b0ba      	sub	sp, #232	; 0xe8
 8022f64:	af00      	add	r7, sp, #0
 8022f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8022f68:	687b      	ldr	r3, [r7, #4]
 8022f6a:	681b      	ldr	r3, [r3, #0]
 8022f6c:	681b      	ldr	r3, [r3, #0]
 8022f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8022f72:	687b      	ldr	r3, [r7, #4]
 8022f74:	681b      	ldr	r3, [r3, #0]
 8022f76:	68db      	ldr	r3, [r3, #12]
 8022f78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8022f7c:	687b      	ldr	r3, [r7, #4]
 8022f7e:	681b      	ldr	r3, [r3, #0]
 8022f80:	695b      	ldr	r3, [r3, #20]
 8022f82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8022f86:	2300      	movs	r3, #0
 8022f88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8022f8c:	2300      	movs	r3, #0
 8022f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8022f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8022f96:	f003 030f 	and.w	r3, r3, #15
 8022f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8022f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8022fa2:	2b00      	cmp	r3, #0
 8022fa4:	d10f      	bne.n	8022fc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8022fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8022faa:	f003 0320 	and.w	r3, r3, #32
 8022fae:	2b00      	cmp	r3, #0
 8022fb0:	d009      	beq.n	8022fc6 <HAL_UART_IRQHandler+0x66>
 8022fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022fb6:	f003 0320 	and.w	r3, r3, #32
 8022fba:	2b00      	cmp	r3, #0
 8022fbc:	d003      	beq.n	8022fc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8022fbe:	6878      	ldr	r0, [r7, #4]
 8022fc0:	f000 fbf9 	bl	80237b6 <UART_Receive_IT>
      return;
 8022fc4:	e256      	b.n	8023474 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8022fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8022fca:	2b00      	cmp	r3, #0
 8022fcc:	f000 80de 	beq.w	802318c <HAL_UART_IRQHandler+0x22c>
 8022fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8022fd4:	f003 0301 	and.w	r3, r3, #1
 8022fd8:	2b00      	cmp	r3, #0
 8022fda:	d106      	bne.n	8022fea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8022fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022fe0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8022fe4:	2b00      	cmp	r3, #0
 8022fe6:	f000 80d1 	beq.w	802318c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8022fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8022fee:	f003 0301 	and.w	r3, r3, #1
 8022ff2:	2b00      	cmp	r3, #0
 8022ff4:	d00b      	beq.n	802300e <HAL_UART_IRQHandler+0xae>
 8022ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022ffe:	2b00      	cmp	r3, #0
 8023000:	d005      	beq.n	802300e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8023002:	687b      	ldr	r3, [r7, #4]
 8023004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023006:	f043 0201 	orr.w	r2, r3, #1
 802300a:	687b      	ldr	r3, [r7, #4]
 802300c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802300e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8023012:	f003 0304 	and.w	r3, r3, #4
 8023016:	2b00      	cmp	r3, #0
 8023018:	d00b      	beq.n	8023032 <HAL_UART_IRQHandler+0xd2>
 802301a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802301e:	f003 0301 	and.w	r3, r3, #1
 8023022:	2b00      	cmp	r3, #0
 8023024:	d005      	beq.n	8023032 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8023026:	687b      	ldr	r3, [r7, #4]
 8023028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802302a:	f043 0202 	orr.w	r2, r3, #2
 802302e:	687b      	ldr	r3, [r7, #4]
 8023030:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8023032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8023036:	f003 0302 	and.w	r3, r3, #2
 802303a:	2b00      	cmp	r3, #0
 802303c:	d00b      	beq.n	8023056 <HAL_UART_IRQHandler+0xf6>
 802303e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8023042:	f003 0301 	and.w	r3, r3, #1
 8023046:	2b00      	cmp	r3, #0
 8023048:	d005      	beq.n	8023056 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 802304a:	687b      	ldr	r3, [r7, #4]
 802304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802304e:	f043 0204 	orr.w	r2, r3, #4
 8023052:	687b      	ldr	r3, [r7, #4]
 8023054:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8023056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802305a:	f003 0308 	and.w	r3, r3, #8
 802305e:	2b00      	cmp	r3, #0
 8023060:	d011      	beq.n	8023086 <HAL_UART_IRQHandler+0x126>
 8023062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8023066:	f003 0320 	and.w	r3, r3, #32
 802306a:	2b00      	cmp	r3, #0
 802306c:	d105      	bne.n	802307a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 802306e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8023072:	f003 0301 	and.w	r3, r3, #1
 8023076:	2b00      	cmp	r3, #0
 8023078:	d005      	beq.n	8023086 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 802307a:	687b      	ldr	r3, [r7, #4]
 802307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802307e:	f043 0208 	orr.w	r2, r3, #8
 8023082:	687b      	ldr	r3, [r7, #4]
 8023084:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8023086:	687b      	ldr	r3, [r7, #4]
 8023088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802308a:	2b00      	cmp	r3, #0
 802308c:	f000 81ed 	beq.w	802346a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8023090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8023094:	f003 0320 	and.w	r3, r3, #32
 8023098:	2b00      	cmp	r3, #0
 802309a:	d008      	beq.n	80230ae <HAL_UART_IRQHandler+0x14e>
 802309c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80230a0:	f003 0320 	and.w	r3, r3, #32
 80230a4:	2b00      	cmp	r3, #0
 80230a6:	d002      	beq.n	80230ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80230a8:	6878      	ldr	r0, [r7, #4]
 80230aa:	f000 fb84 	bl	80237b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80230ae:	687b      	ldr	r3, [r7, #4]
 80230b0:	681b      	ldr	r3, [r3, #0]
 80230b2:	695b      	ldr	r3, [r3, #20]
 80230b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80230b8:	2b40      	cmp	r3, #64	; 0x40
 80230ba:	bf0c      	ite	eq
 80230bc:	2301      	moveq	r3, #1
 80230be:	2300      	movne	r3, #0
 80230c0:	b2db      	uxtb	r3, r3
 80230c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80230c6:	687b      	ldr	r3, [r7, #4]
 80230c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80230ca:	f003 0308 	and.w	r3, r3, #8
 80230ce:	2b00      	cmp	r3, #0
 80230d0:	d103      	bne.n	80230da <HAL_UART_IRQHandler+0x17a>
 80230d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80230d6:	2b00      	cmp	r3, #0
 80230d8:	d04f      	beq.n	802317a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80230da:	6878      	ldr	r0, [r7, #4]
 80230dc:	f000 fa2c 	bl	8023538 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80230e0:	687b      	ldr	r3, [r7, #4]
 80230e2:	681b      	ldr	r3, [r3, #0]
 80230e4:	695b      	ldr	r3, [r3, #20]
 80230e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80230ea:	2b40      	cmp	r3, #64	; 0x40
 80230ec:	d141      	bne.n	8023172 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80230ee:	687b      	ldr	r3, [r7, #4]
 80230f0:	681b      	ldr	r3, [r3, #0]
 80230f2:	3314      	adds	r3, #20
 80230f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80230f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80230fc:	e853 3f00 	ldrex	r3, [r3]
 8023100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8023104:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8023108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802310c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8023110:	687b      	ldr	r3, [r7, #4]
 8023112:	681b      	ldr	r3, [r3, #0]
 8023114:	3314      	adds	r3, #20
 8023116:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 802311a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 802311e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023122:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8023126:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 802312a:	e841 2300 	strex	r3, r2, [r1]
 802312e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8023132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8023136:	2b00      	cmp	r3, #0
 8023138:	d1d9      	bne.n	80230ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 802313a:	687b      	ldr	r3, [r7, #4]
 802313c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802313e:	2b00      	cmp	r3, #0
 8023140:	d013      	beq.n	802316a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8023142:	687b      	ldr	r3, [r7, #4]
 8023144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023146:	4a7d      	ldr	r2, [pc, #500]	; (802333c <HAL_UART_IRQHandler+0x3dc>)
 8023148:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 802314a:	687b      	ldr	r3, [r7, #4]
 802314c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802314e:	4618      	mov	r0, r3
 8023150:	f7fa fb7e 	bl	801d850 <HAL_DMA_Abort_IT>
 8023154:	4603      	mov	r3, r0
 8023156:	2b00      	cmp	r3, #0
 8023158:	d016      	beq.n	8023188 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 802315a:	687b      	ldr	r3, [r7, #4]
 802315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802315e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023160:	687a      	ldr	r2, [r7, #4]
 8023162:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8023164:	4610      	mov	r0, r2
 8023166:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8023168:	e00e      	b.n	8023188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 802316a:	6878      	ldr	r0, [r7, #4]
 802316c:	f000 f986 	bl	802347c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8023170:	e00a      	b.n	8023188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8023172:	6878      	ldr	r0, [r7, #4]
 8023174:	f000 f982 	bl	802347c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8023178:	e006      	b.n	8023188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 802317a:	6878      	ldr	r0, [r7, #4]
 802317c:	f000 f97e 	bl	802347c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023180:	687b      	ldr	r3, [r7, #4]
 8023182:	2200      	movs	r2, #0
 8023184:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8023186:	e170      	b.n	802346a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8023188:	bf00      	nop
    return;
 802318a:	e16e      	b.n	802346a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802318c:	687b      	ldr	r3, [r7, #4]
 802318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023190:	2b01      	cmp	r3, #1
 8023192:	f040 814a 	bne.w	802342a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8023196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802319a:	f003 0310 	and.w	r3, r3, #16
 802319e:	2b00      	cmp	r3, #0
 80231a0:	f000 8143 	beq.w	802342a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80231a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80231a8:	f003 0310 	and.w	r3, r3, #16
 80231ac:	2b00      	cmp	r3, #0
 80231ae:	f000 813c 	beq.w	802342a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80231b2:	2300      	movs	r3, #0
 80231b4:	60bb      	str	r3, [r7, #8]
 80231b6:	687b      	ldr	r3, [r7, #4]
 80231b8:	681b      	ldr	r3, [r3, #0]
 80231ba:	681b      	ldr	r3, [r3, #0]
 80231bc:	60bb      	str	r3, [r7, #8]
 80231be:	687b      	ldr	r3, [r7, #4]
 80231c0:	681b      	ldr	r3, [r3, #0]
 80231c2:	685b      	ldr	r3, [r3, #4]
 80231c4:	60bb      	str	r3, [r7, #8]
 80231c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80231c8:	687b      	ldr	r3, [r7, #4]
 80231ca:	681b      	ldr	r3, [r3, #0]
 80231cc:	695b      	ldr	r3, [r3, #20]
 80231ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80231d2:	2b40      	cmp	r3, #64	; 0x40
 80231d4:	f040 80b4 	bne.w	8023340 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80231d8:	687b      	ldr	r3, [r7, #4]
 80231da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80231dc:	681b      	ldr	r3, [r3, #0]
 80231de:	685b      	ldr	r3, [r3, #4]
 80231e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80231e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80231e8:	2b00      	cmp	r3, #0
 80231ea:	f000 8140 	beq.w	802346e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80231ee:	687b      	ldr	r3, [r7, #4]
 80231f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80231f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80231f6:	429a      	cmp	r2, r3
 80231f8:	f080 8139 	bcs.w	802346e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80231fc:	687b      	ldr	r3, [r7, #4]
 80231fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8023202:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8023204:	687b      	ldr	r3, [r7, #4]
 8023206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023208:	69db      	ldr	r3, [r3, #28]
 802320a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802320e:	f000 8088 	beq.w	8023322 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8023212:	687b      	ldr	r3, [r7, #4]
 8023214:	681b      	ldr	r3, [r3, #0]
 8023216:	330c      	adds	r3, #12
 8023218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802321c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8023220:	e853 3f00 	ldrex	r3, [r3]
 8023224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8023228:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802322c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8023230:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8023234:	687b      	ldr	r3, [r7, #4]
 8023236:	681b      	ldr	r3, [r3, #0]
 8023238:	330c      	adds	r3, #12
 802323a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 802323e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8023242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023246:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 802324a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 802324e:	e841 2300 	strex	r3, r2, [r1]
 8023252:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8023256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802325a:	2b00      	cmp	r3, #0
 802325c:	d1d9      	bne.n	8023212 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802325e:	687b      	ldr	r3, [r7, #4]
 8023260:	681b      	ldr	r3, [r3, #0]
 8023262:	3314      	adds	r3, #20
 8023264:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023268:	e853 3f00 	ldrex	r3, [r3]
 802326c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 802326e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8023270:	f023 0301 	bic.w	r3, r3, #1
 8023274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8023278:	687b      	ldr	r3, [r7, #4]
 802327a:	681b      	ldr	r3, [r3, #0]
 802327c:	3314      	adds	r3, #20
 802327e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8023282:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8023286:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023288:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 802328a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802328e:	e841 2300 	strex	r3, r2, [r1]
 8023292:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8023294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8023296:	2b00      	cmp	r3, #0
 8023298:	d1e1      	bne.n	802325e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802329a:	687b      	ldr	r3, [r7, #4]
 802329c:	681b      	ldr	r3, [r3, #0]
 802329e:	3314      	adds	r3, #20
 80232a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80232a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80232a4:	e853 3f00 	ldrex	r3, [r3]
 80232a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80232aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80232ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80232b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80232b4:	687b      	ldr	r3, [r7, #4]
 80232b6:	681b      	ldr	r3, [r3, #0]
 80232b8:	3314      	adds	r3, #20
 80232ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80232be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80232c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80232c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80232c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80232c6:	e841 2300 	strex	r3, r2, [r1]
 80232ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80232cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80232ce:	2b00      	cmp	r3, #0
 80232d0:	d1e3      	bne.n	802329a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80232d2:	687b      	ldr	r3, [r7, #4]
 80232d4:	2220      	movs	r2, #32
 80232d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80232da:	687b      	ldr	r3, [r7, #4]
 80232dc:	2200      	movs	r2, #0
 80232de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80232e0:	687b      	ldr	r3, [r7, #4]
 80232e2:	681b      	ldr	r3, [r3, #0]
 80232e4:	330c      	adds	r3, #12
 80232e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80232e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80232ea:	e853 3f00 	ldrex	r3, [r3]
 80232ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80232f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80232f2:	f023 0310 	bic.w	r3, r3, #16
 80232f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80232fa:	687b      	ldr	r3, [r7, #4]
 80232fc:	681b      	ldr	r3, [r3, #0]
 80232fe:	330c      	adds	r3, #12
 8023300:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8023304:	65ba      	str	r2, [r7, #88]	; 0x58
 8023306:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023308:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802330a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802330c:	e841 2300 	strex	r3, r2, [r1]
 8023310:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8023312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023314:	2b00      	cmp	r3, #0
 8023316:	d1e3      	bne.n	80232e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8023318:	687b      	ldr	r3, [r7, #4]
 802331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802331c:	4618      	mov	r0, r3
 802331e:	f7fa fa27 	bl	801d770 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8023322:	687b      	ldr	r3, [r7, #4]
 8023324:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8023326:	687b      	ldr	r3, [r7, #4]
 8023328:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802332a:	b29b      	uxth	r3, r3
 802332c:	1ad3      	subs	r3, r2, r3
 802332e:	b29b      	uxth	r3, r3
 8023330:	4619      	mov	r1, r3
 8023332:	6878      	ldr	r0, [r7, #4]
 8023334:	f000 f8b6 	bl	80234a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8023338:	e099      	b.n	802346e <HAL_UART_IRQHandler+0x50e>
 802333a:	bf00      	nop
 802333c:	080235ff 	.word	0x080235ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8023340:	687b      	ldr	r3, [r7, #4]
 8023342:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8023344:	687b      	ldr	r3, [r7, #4]
 8023346:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8023348:	b29b      	uxth	r3, r3
 802334a:	1ad3      	subs	r3, r2, r3
 802334c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8023350:	687b      	ldr	r3, [r7, #4]
 8023352:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8023354:	b29b      	uxth	r3, r3
 8023356:	2b00      	cmp	r3, #0
 8023358:	f000 808b 	beq.w	8023472 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 802335c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8023360:	2b00      	cmp	r3, #0
 8023362:	f000 8086 	beq.w	8023472 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8023366:	687b      	ldr	r3, [r7, #4]
 8023368:	681b      	ldr	r3, [r3, #0]
 802336a:	330c      	adds	r3, #12
 802336c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802336e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023370:	e853 3f00 	ldrex	r3, [r3]
 8023374:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8023376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023378:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802337c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8023380:	687b      	ldr	r3, [r7, #4]
 8023382:	681b      	ldr	r3, [r3, #0]
 8023384:	330c      	adds	r3, #12
 8023386:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 802338a:	647a      	str	r2, [r7, #68]	; 0x44
 802338c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802338e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8023390:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8023392:	e841 2300 	strex	r3, r2, [r1]
 8023396:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8023398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802339a:	2b00      	cmp	r3, #0
 802339c:	d1e3      	bne.n	8023366 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802339e:	687b      	ldr	r3, [r7, #4]
 80233a0:	681b      	ldr	r3, [r3, #0]
 80233a2:	3314      	adds	r3, #20
 80233a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80233a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80233a8:	e853 3f00 	ldrex	r3, [r3]
 80233ac:	623b      	str	r3, [r7, #32]
   return(result);
 80233ae:	6a3b      	ldr	r3, [r7, #32]
 80233b0:	f023 0301 	bic.w	r3, r3, #1
 80233b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80233b8:	687b      	ldr	r3, [r7, #4]
 80233ba:	681b      	ldr	r3, [r3, #0]
 80233bc:	3314      	adds	r3, #20
 80233be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80233c2:	633a      	str	r2, [r7, #48]	; 0x30
 80233c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80233c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80233c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80233ca:	e841 2300 	strex	r3, r2, [r1]
 80233ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80233d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80233d2:	2b00      	cmp	r3, #0
 80233d4:	d1e3      	bne.n	802339e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80233d6:	687b      	ldr	r3, [r7, #4]
 80233d8:	2220      	movs	r2, #32
 80233da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80233de:	687b      	ldr	r3, [r7, #4]
 80233e0:	2200      	movs	r2, #0
 80233e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80233e4:	687b      	ldr	r3, [r7, #4]
 80233e6:	681b      	ldr	r3, [r3, #0]
 80233e8:	330c      	adds	r3, #12
 80233ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80233ec:	693b      	ldr	r3, [r7, #16]
 80233ee:	e853 3f00 	ldrex	r3, [r3]
 80233f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80233f4:	68fb      	ldr	r3, [r7, #12]
 80233f6:	f023 0310 	bic.w	r3, r3, #16
 80233fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80233fe:	687b      	ldr	r3, [r7, #4]
 8023400:	681b      	ldr	r3, [r3, #0]
 8023402:	330c      	adds	r3, #12
 8023404:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8023408:	61fa      	str	r2, [r7, #28]
 802340a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802340c:	69b9      	ldr	r1, [r7, #24]
 802340e:	69fa      	ldr	r2, [r7, #28]
 8023410:	e841 2300 	strex	r3, r2, [r1]
 8023414:	617b      	str	r3, [r7, #20]
   return(result);
 8023416:	697b      	ldr	r3, [r7, #20]
 8023418:	2b00      	cmp	r3, #0
 802341a:	d1e3      	bne.n	80233e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 802341c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8023420:	4619      	mov	r1, r3
 8023422:	6878      	ldr	r0, [r7, #4]
 8023424:	f000 f83e 	bl	80234a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8023428:	e023      	b.n	8023472 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 802342a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802342e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023432:	2b00      	cmp	r3, #0
 8023434:	d009      	beq.n	802344a <HAL_UART_IRQHandler+0x4ea>
 8023436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802343a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802343e:	2b00      	cmp	r3, #0
 8023440:	d003      	beq.n	802344a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8023442:	6878      	ldr	r0, [r7, #4]
 8023444:	f000 f94f 	bl	80236e6 <UART_Transmit_IT>
    return;
 8023448:	e014      	b.n	8023474 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 802344a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802344e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023452:	2b00      	cmp	r3, #0
 8023454:	d00e      	beq.n	8023474 <HAL_UART_IRQHandler+0x514>
 8023456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802345e:	2b00      	cmp	r3, #0
 8023460:	d008      	beq.n	8023474 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8023462:	6878      	ldr	r0, [r7, #4]
 8023464:	f000 f98f 	bl	8023786 <UART_EndTransmit_IT>
    return;
 8023468:	e004      	b.n	8023474 <HAL_UART_IRQHandler+0x514>
    return;
 802346a:	bf00      	nop
 802346c:	e002      	b.n	8023474 <HAL_UART_IRQHandler+0x514>
      return;
 802346e:	bf00      	nop
 8023470:	e000      	b.n	8023474 <HAL_UART_IRQHandler+0x514>
      return;
 8023472:	bf00      	nop
  }
}
 8023474:	37e8      	adds	r7, #232	; 0xe8
 8023476:	46bd      	mov	sp, r7
 8023478:	bd80      	pop	{r7, pc}
 802347a:	bf00      	nop

0802347c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 802347c:	b480      	push	{r7}
 802347e:	b083      	sub	sp, #12
 8023480:	af00      	add	r7, sp, #0
 8023482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8023484:	bf00      	nop
 8023486:	370c      	adds	r7, #12
 8023488:	46bd      	mov	sp, r7
 802348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802348e:	4770      	bx	lr

08023490 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8023490:	b480      	push	{r7}
 8023492:	b083      	sub	sp, #12
 8023494:	af00      	add	r7, sp, #0
 8023496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8023498:	bf00      	nop
 802349a:	370c      	adds	r7, #12
 802349c:	46bd      	mov	sp, r7
 802349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234a2:	4770      	bx	lr

080234a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80234a4:	b480      	push	{r7}
 80234a6:	b083      	sub	sp, #12
 80234a8:	af00      	add	r7, sp, #0
 80234aa:	6078      	str	r0, [r7, #4]
 80234ac:	460b      	mov	r3, r1
 80234ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80234b0:	bf00      	nop
 80234b2:	370c      	adds	r7, #12
 80234b4:	46bd      	mov	sp, r7
 80234b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234ba:	4770      	bx	lr

080234bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80234bc:	b480      	push	{r7}
 80234be:	b085      	sub	sp, #20
 80234c0:	af00      	add	r7, sp, #0
 80234c2:	60f8      	str	r0, [r7, #12]
 80234c4:	60b9      	str	r1, [r7, #8]
 80234c6:	4613      	mov	r3, r2
 80234c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80234ca:	68fb      	ldr	r3, [r7, #12]
 80234cc:	68ba      	ldr	r2, [r7, #8]
 80234ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80234d0:	68fb      	ldr	r3, [r7, #12]
 80234d2:	88fa      	ldrh	r2, [r7, #6]
 80234d4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80234d6:	68fb      	ldr	r3, [r7, #12]
 80234d8:	88fa      	ldrh	r2, [r7, #6]
 80234da:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80234dc:	68fb      	ldr	r3, [r7, #12]
 80234de:	2200      	movs	r2, #0
 80234e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80234e2:	68fb      	ldr	r3, [r7, #12]
 80234e4:	2222      	movs	r2, #34	; 0x22
 80234e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80234ea:	68fb      	ldr	r3, [r7, #12]
 80234ec:	2200      	movs	r2, #0
 80234ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80234f2:	68fb      	ldr	r3, [r7, #12]
 80234f4:	691b      	ldr	r3, [r3, #16]
 80234f6:	2b00      	cmp	r3, #0
 80234f8:	d007      	beq.n	802350a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80234fa:	68fb      	ldr	r3, [r7, #12]
 80234fc:	681b      	ldr	r3, [r3, #0]
 80234fe:	68da      	ldr	r2, [r3, #12]
 8023500:	68fb      	ldr	r3, [r7, #12]
 8023502:	681b      	ldr	r3, [r3, #0]
 8023504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8023508:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 802350a:	68fb      	ldr	r3, [r7, #12]
 802350c:	681b      	ldr	r3, [r3, #0]
 802350e:	695a      	ldr	r2, [r3, #20]
 8023510:	68fb      	ldr	r3, [r7, #12]
 8023512:	681b      	ldr	r3, [r3, #0]
 8023514:	f042 0201 	orr.w	r2, r2, #1
 8023518:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 802351a:	68fb      	ldr	r3, [r7, #12]
 802351c:	681b      	ldr	r3, [r3, #0]
 802351e:	68da      	ldr	r2, [r3, #12]
 8023520:	68fb      	ldr	r3, [r7, #12]
 8023522:	681b      	ldr	r3, [r3, #0]
 8023524:	f042 0220 	orr.w	r2, r2, #32
 8023528:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 802352a:	2300      	movs	r3, #0
}
 802352c:	4618      	mov	r0, r3
 802352e:	3714      	adds	r7, #20
 8023530:	46bd      	mov	sp, r7
 8023532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023536:	4770      	bx	lr

08023538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8023538:	b480      	push	{r7}
 802353a:	b095      	sub	sp, #84	; 0x54
 802353c:	af00      	add	r7, sp, #0
 802353e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8023540:	687b      	ldr	r3, [r7, #4]
 8023542:	681b      	ldr	r3, [r3, #0]
 8023544:	330c      	adds	r3, #12
 8023546:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802354a:	e853 3f00 	ldrex	r3, [r3]
 802354e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8023550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023552:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8023556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8023558:	687b      	ldr	r3, [r7, #4]
 802355a:	681b      	ldr	r3, [r3, #0]
 802355c:	330c      	adds	r3, #12
 802355e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8023560:	643a      	str	r2, [r7, #64]	; 0x40
 8023562:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023564:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8023566:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8023568:	e841 2300 	strex	r3, r2, [r1]
 802356c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023570:	2b00      	cmp	r3, #0
 8023572:	d1e5      	bne.n	8023540 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8023574:	687b      	ldr	r3, [r7, #4]
 8023576:	681b      	ldr	r3, [r3, #0]
 8023578:	3314      	adds	r3, #20
 802357a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802357c:	6a3b      	ldr	r3, [r7, #32]
 802357e:	e853 3f00 	ldrex	r3, [r3]
 8023582:	61fb      	str	r3, [r7, #28]
   return(result);
 8023584:	69fb      	ldr	r3, [r7, #28]
 8023586:	f023 0301 	bic.w	r3, r3, #1
 802358a:	64bb      	str	r3, [r7, #72]	; 0x48
 802358c:	687b      	ldr	r3, [r7, #4]
 802358e:	681b      	ldr	r3, [r3, #0]
 8023590:	3314      	adds	r3, #20
 8023592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8023594:	62fa      	str	r2, [r7, #44]	; 0x2c
 8023596:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802359a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802359c:	e841 2300 	strex	r3, r2, [r1]
 80235a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80235a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80235a4:	2b00      	cmp	r3, #0
 80235a6:	d1e5      	bne.n	8023574 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80235a8:	687b      	ldr	r3, [r7, #4]
 80235aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80235ac:	2b01      	cmp	r3, #1
 80235ae:	d119      	bne.n	80235e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80235b0:	687b      	ldr	r3, [r7, #4]
 80235b2:	681b      	ldr	r3, [r3, #0]
 80235b4:	330c      	adds	r3, #12
 80235b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80235b8:	68fb      	ldr	r3, [r7, #12]
 80235ba:	e853 3f00 	ldrex	r3, [r3]
 80235be:	60bb      	str	r3, [r7, #8]
   return(result);
 80235c0:	68bb      	ldr	r3, [r7, #8]
 80235c2:	f023 0310 	bic.w	r3, r3, #16
 80235c6:	647b      	str	r3, [r7, #68]	; 0x44
 80235c8:	687b      	ldr	r3, [r7, #4]
 80235ca:	681b      	ldr	r3, [r3, #0]
 80235cc:	330c      	adds	r3, #12
 80235ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80235d0:	61ba      	str	r2, [r7, #24]
 80235d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80235d4:	6979      	ldr	r1, [r7, #20]
 80235d6:	69ba      	ldr	r2, [r7, #24]
 80235d8:	e841 2300 	strex	r3, r2, [r1]
 80235dc:	613b      	str	r3, [r7, #16]
   return(result);
 80235de:	693b      	ldr	r3, [r7, #16]
 80235e0:	2b00      	cmp	r3, #0
 80235e2:	d1e5      	bne.n	80235b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80235e4:	687b      	ldr	r3, [r7, #4]
 80235e6:	2220      	movs	r2, #32
 80235e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80235ec:	687b      	ldr	r3, [r7, #4]
 80235ee:	2200      	movs	r2, #0
 80235f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80235f2:	bf00      	nop
 80235f4:	3754      	adds	r7, #84	; 0x54
 80235f6:	46bd      	mov	sp, r7
 80235f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235fc:	4770      	bx	lr

080235fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80235fe:	b580      	push	{r7, lr}
 8023600:	b084      	sub	sp, #16
 8023602:	af00      	add	r7, sp, #0
 8023604:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8023606:	687b      	ldr	r3, [r7, #4]
 8023608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802360a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 802360c:	68fb      	ldr	r3, [r7, #12]
 802360e:	2200      	movs	r2, #0
 8023610:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8023612:	68fb      	ldr	r3, [r7, #12]
 8023614:	2200      	movs	r2, #0
 8023616:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8023618:	68f8      	ldr	r0, [r7, #12]
 802361a:	f7ff ff2f 	bl	802347c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802361e:	bf00      	nop
 8023620:	3710      	adds	r7, #16
 8023622:	46bd      	mov	sp, r7
 8023624:	bd80      	pop	{r7, pc}

08023626 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8023626:	b580      	push	{r7, lr}
 8023628:	b084      	sub	sp, #16
 802362a:	af00      	add	r7, sp, #0
 802362c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802362e:	687b      	ldr	r3, [r7, #4]
 8023630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023632:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8023634:	68fb      	ldr	r3, [r7, #12]
 8023636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023638:	2200      	movs	r2, #0
 802363a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 802363c:	68fb      	ldr	r3, [r7, #12]
 802363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023640:	2b00      	cmp	r3, #0
 8023642:	d004      	beq.n	802364e <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8023644:	68fb      	ldr	r3, [r7, #12]
 8023646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802364a:	2b00      	cmp	r3, #0
 802364c:	d117      	bne.n	802367e <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 802364e:	68fb      	ldr	r3, [r7, #12]
 8023650:	2200      	movs	r2, #0
 8023652:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8023654:	68fb      	ldr	r3, [r7, #12]
 8023656:	2200      	movs	r2, #0
 8023658:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802365a:	68fb      	ldr	r3, [r7, #12]
 802365c:	2200      	movs	r2, #0
 802365e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8023660:	68fb      	ldr	r3, [r7, #12]
 8023662:	2220      	movs	r2, #32
 8023664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8023668:	68fb      	ldr	r3, [r7, #12]
 802366a:	2220      	movs	r2, #32
 802366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8023670:	68fb      	ldr	r3, [r7, #12]
 8023672:	2200      	movs	r2, #0
 8023674:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8023676:	68f8      	ldr	r0, [r7, #12]
 8023678:	f7ff ff0a 	bl	8023490 <HAL_UART_AbortCpltCallback>
 802367c:	e000      	b.n	8023680 <UART_DMATxAbortCallback+0x5a>
      return;
 802367e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8023680:	3710      	adds	r7, #16
 8023682:	46bd      	mov	sp, r7
 8023684:	bd80      	pop	{r7, pc}

08023686 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8023686:	b580      	push	{r7, lr}
 8023688:	b084      	sub	sp, #16
 802368a:	af00      	add	r7, sp, #0
 802368c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802368e:	687b      	ldr	r3, [r7, #4]
 8023690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023692:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8023694:	68fb      	ldr	r3, [r7, #12]
 8023696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023698:	2200      	movs	r2, #0
 802369a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 802369c:	68fb      	ldr	r3, [r7, #12]
 802369e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80236a0:	2b00      	cmp	r3, #0
 80236a2:	d004      	beq.n	80236ae <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80236a4:	68fb      	ldr	r3, [r7, #12]
 80236a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80236a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80236aa:	2b00      	cmp	r3, #0
 80236ac:	d117      	bne.n	80236de <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80236ae:	68fb      	ldr	r3, [r7, #12]
 80236b0:	2200      	movs	r2, #0
 80236b2:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80236b4:	68fb      	ldr	r3, [r7, #12]
 80236b6:	2200      	movs	r2, #0
 80236b8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80236ba:	68fb      	ldr	r3, [r7, #12]
 80236bc:	2200      	movs	r2, #0
 80236be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80236c0:	68fb      	ldr	r3, [r7, #12]
 80236c2:	2220      	movs	r2, #32
 80236c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80236c8:	68fb      	ldr	r3, [r7, #12]
 80236ca:	2220      	movs	r2, #32
 80236cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80236d0:	68fb      	ldr	r3, [r7, #12]
 80236d2:	2200      	movs	r2, #0
 80236d4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80236d6:	68f8      	ldr	r0, [r7, #12]
 80236d8:	f7ff feda 	bl	8023490 <HAL_UART_AbortCpltCallback>
 80236dc:	e000      	b.n	80236e0 <UART_DMARxAbortCallback+0x5a>
      return;
 80236de:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80236e0:	3710      	adds	r7, #16
 80236e2:	46bd      	mov	sp, r7
 80236e4:	bd80      	pop	{r7, pc}

080236e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80236e6:	b480      	push	{r7}
 80236e8:	b085      	sub	sp, #20
 80236ea:	af00      	add	r7, sp, #0
 80236ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80236ee:	687b      	ldr	r3, [r7, #4]
 80236f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80236f4:	b2db      	uxtb	r3, r3
 80236f6:	2b21      	cmp	r3, #33	; 0x21
 80236f8:	d13e      	bne.n	8023778 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80236fa:	687b      	ldr	r3, [r7, #4]
 80236fc:	689b      	ldr	r3, [r3, #8]
 80236fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023702:	d114      	bne.n	802372e <UART_Transmit_IT+0x48>
 8023704:	687b      	ldr	r3, [r7, #4]
 8023706:	691b      	ldr	r3, [r3, #16]
 8023708:	2b00      	cmp	r3, #0
 802370a:	d110      	bne.n	802372e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 802370c:	687b      	ldr	r3, [r7, #4]
 802370e:	6a1b      	ldr	r3, [r3, #32]
 8023710:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8023712:	68fb      	ldr	r3, [r7, #12]
 8023714:	881b      	ldrh	r3, [r3, #0]
 8023716:	461a      	mov	r2, r3
 8023718:	687b      	ldr	r3, [r7, #4]
 802371a:	681b      	ldr	r3, [r3, #0]
 802371c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8023720:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8023722:	687b      	ldr	r3, [r7, #4]
 8023724:	6a1b      	ldr	r3, [r3, #32]
 8023726:	1c9a      	adds	r2, r3, #2
 8023728:	687b      	ldr	r3, [r7, #4]
 802372a:	621a      	str	r2, [r3, #32]
 802372c:	e008      	b.n	8023740 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 802372e:	687b      	ldr	r3, [r7, #4]
 8023730:	6a1b      	ldr	r3, [r3, #32]
 8023732:	1c59      	adds	r1, r3, #1
 8023734:	687a      	ldr	r2, [r7, #4]
 8023736:	6211      	str	r1, [r2, #32]
 8023738:	781a      	ldrb	r2, [r3, #0]
 802373a:	687b      	ldr	r3, [r7, #4]
 802373c:	681b      	ldr	r3, [r3, #0]
 802373e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8023740:	687b      	ldr	r3, [r7, #4]
 8023742:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8023744:	b29b      	uxth	r3, r3
 8023746:	3b01      	subs	r3, #1
 8023748:	b29b      	uxth	r3, r3
 802374a:	687a      	ldr	r2, [r7, #4]
 802374c:	4619      	mov	r1, r3
 802374e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8023750:	2b00      	cmp	r3, #0
 8023752:	d10f      	bne.n	8023774 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8023754:	687b      	ldr	r3, [r7, #4]
 8023756:	681b      	ldr	r3, [r3, #0]
 8023758:	68da      	ldr	r2, [r3, #12]
 802375a:	687b      	ldr	r3, [r7, #4]
 802375c:	681b      	ldr	r3, [r3, #0]
 802375e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8023762:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8023764:	687b      	ldr	r3, [r7, #4]
 8023766:	681b      	ldr	r3, [r3, #0]
 8023768:	68da      	ldr	r2, [r3, #12]
 802376a:	687b      	ldr	r3, [r7, #4]
 802376c:	681b      	ldr	r3, [r3, #0]
 802376e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8023772:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8023774:	2300      	movs	r3, #0
 8023776:	e000      	b.n	802377a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8023778:	2302      	movs	r3, #2
  }
}
 802377a:	4618      	mov	r0, r3
 802377c:	3714      	adds	r7, #20
 802377e:	46bd      	mov	sp, r7
 8023780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023784:	4770      	bx	lr

08023786 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8023786:	b580      	push	{r7, lr}
 8023788:	b082      	sub	sp, #8
 802378a:	af00      	add	r7, sp, #0
 802378c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802378e:	687b      	ldr	r3, [r7, #4]
 8023790:	681b      	ldr	r3, [r3, #0]
 8023792:	68da      	ldr	r2, [r3, #12]
 8023794:	687b      	ldr	r3, [r7, #4]
 8023796:	681b      	ldr	r3, [r3, #0]
 8023798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802379c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802379e:	687b      	ldr	r3, [r7, #4]
 80237a0:	2220      	movs	r2, #32
 80237a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80237a6:	6878      	ldr	r0, [r7, #4]
 80237a8:	f7de feba 	bl	8002520 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80237ac:	2300      	movs	r3, #0
}
 80237ae:	4618      	mov	r0, r3
 80237b0:	3708      	adds	r7, #8
 80237b2:	46bd      	mov	sp, r7
 80237b4:	bd80      	pop	{r7, pc}

080237b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80237b6:	b580      	push	{r7, lr}
 80237b8:	b08c      	sub	sp, #48	; 0x30
 80237ba:	af00      	add	r7, sp, #0
 80237bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80237be:	687b      	ldr	r3, [r7, #4]
 80237c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80237c4:	b2db      	uxtb	r3, r3
 80237c6:	2b22      	cmp	r3, #34	; 0x22
 80237c8:	f040 80ab 	bne.w	8023922 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80237cc:	687b      	ldr	r3, [r7, #4]
 80237ce:	689b      	ldr	r3, [r3, #8]
 80237d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80237d4:	d117      	bne.n	8023806 <UART_Receive_IT+0x50>
 80237d6:	687b      	ldr	r3, [r7, #4]
 80237d8:	691b      	ldr	r3, [r3, #16]
 80237da:	2b00      	cmp	r3, #0
 80237dc:	d113      	bne.n	8023806 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80237de:	2300      	movs	r3, #0
 80237e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80237e2:	687b      	ldr	r3, [r7, #4]
 80237e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80237e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80237e8:	687b      	ldr	r3, [r7, #4]
 80237ea:	681b      	ldr	r3, [r3, #0]
 80237ec:	685b      	ldr	r3, [r3, #4]
 80237ee:	b29b      	uxth	r3, r3
 80237f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80237f4:	b29a      	uxth	r2, r3
 80237f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80237f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80237fa:	687b      	ldr	r3, [r7, #4]
 80237fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80237fe:	1c9a      	adds	r2, r3, #2
 8023800:	687b      	ldr	r3, [r7, #4]
 8023802:	629a      	str	r2, [r3, #40]	; 0x28
 8023804:	e026      	b.n	8023854 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8023806:	687b      	ldr	r3, [r7, #4]
 8023808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802380a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 802380c:	2300      	movs	r3, #0
 802380e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8023810:	687b      	ldr	r3, [r7, #4]
 8023812:	689b      	ldr	r3, [r3, #8]
 8023814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023818:	d007      	beq.n	802382a <UART_Receive_IT+0x74>
 802381a:	687b      	ldr	r3, [r7, #4]
 802381c:	689b      	ldr	r3, [r3, #8]
 802381e:	2b00      	cmp	r3, #0
 8023820:	d10a      	bne.n	8023838 <UART_Receive_IT+0x82>
 8023822:	687b      	ldr	r3, [r7, #4]
 8023824:	691b      	ldr	r3, [r3, #16]
 8023826:	2b00      	cmp	r3, #0
 8023828:	d106      	bne.n	8023838 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 802382a:	687b      	ldr	r3, [r7, #4]
 802382c:	681b      	ldr	r3, [r3, #0]
 802382e:	685b      	ldr	r3, [r3, #4]
 8023830:	b2da      	uxtb	r2, r3
 8023832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023834:	701a      	strb	r2, [r3, #0]
 8023836:	e008      	b.n	802384a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8023838:	687b      	ldr	r3, [r7, #4]
 802383a:	681b      	ldr	r3, [r3, #0]
 802383c:	685b      	ldr	r3, [r3, #4]
 802383e:	b2db      	uxtb	r3, r3
 8023840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8023844:	b2da      	uxtb	r2, r3
 8023846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023848:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 802384a:	687b      	ldr	r3, [r7, #4]
 802384c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802384e:	1c5a      	adds	r2, r3, #1
 8023850:	687b      	ldr	r3, [r7, #4]
 8023852:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8023854:	687b      	ldr	r3, [r7, #4]
 8023856:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8023858:	b29b      	uxth	r3, r3
 802385a:	3b01      	subs	r3, #1
 802385c:	b29b      	uxth	r3, r3
 802385e:	687a      	ldr	r2, [r7, #4]
 8023860:	4619      	mov	r1, r3
 8023862:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8023864:	2b00      	cmp	r3, #0
 8023866:	d15a      	bne.n	802391e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8023868:	687b      	ldr	r3, [r7, #4]
 802386a:	681b      	ldr	r3, [r3, #0]
 802386c:	68da      	ldr	r2, [r3, #12]
 802386e:	687b      	ldr	r3, [r7, #4]
 8023870:	681b      	ldr	r3, [r3, #0]
 8023872:	f022 0220 	bic.w	r2, r2, #32
 8023876:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8023878:	687b      	ldr	r3, [r7, #4]
 802387a:	681b      	ldr	r3, [r3, #0]
 802387c:	68da      	ldr	r2, [r3, #12]
 802387e:	687b      	ldr	r3, [r7, #4]
 8023880:	681b      	ldr	r3, [r3, #0]
 8023882:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8023886:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8023888:	687b      	ldr	r3, [r7, #4]
 802388a:	681b      	ldr	r3, [r3, #0]
 802388c:	695a      	ldr	r2, [r3, #20]
 802388e:	687b      	ldr	r3, [r7, #4]
 8023890:	681b      	ldr	r3, [r3, #0]
 8023892:	f022 0201 	bic.w	r2, r2, #1
 8023896:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8023898:	687b      	ldr	r3, [r7, #4]
 802389a:	2220      	movs	r2, #32
 802389c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80238a0:	687b      	ldr	r3, [r7, #4]
 80238a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80238a4:	2b01      	cmp	r3, #1
 80238a6:	d135      	bne.n	8023914 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80238a8:	687b      	ldr	r3, [r7, #4]
 80238aa:	2200      	movs	r2, #0
 80238ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80238ae:	687b      	ldr	r3, [r7, #4]
 80238b0:	681b      	ldr	r3, [r3, #0]
 80238b2:	330c      	adds	r3, #12
 80238b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80238b6:	697b      	ldr	r3, [r7, #20]
 80238b8:	e853 3f00 	ldrex	r3, [r3]
 80238bc:	613b      	str	r3, [r7, #16]
   return(result);
 80238be:	693b      	ldr	r3, [r7, #16]
 80238c0:	f023 0310 	bic.w	r3, r3, #16
 80238c4:	627b      	str	r3, [r7, #36]	; 0x24
 80238c6:	687b      	ldr	r3, [r7, #4]
 80238c8:	681b      	ldr	r3, [r3, #0]
 80238ca:	330c      	adds	r3, #12
 80238cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80238ce:	623a      	str	r2, [r7, #32]
 80238d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80238d2:	69f9      	ldr	r1, [r7, #28]
 80238d4:	6a3a      	ldr	r2, [r7, #32]
 80238d6:	e841 2300 	strex	r3, r2, [r1]
 80238da:	61bb      	str	r3, [r7, #24]
   return(result);
 80238dc:	69bb      	ldr	r3, [r7, #24]
 80238de:	2b00      	cmp	r3, #0
 80238e0:	d1e5      	bne.n	80238ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80238e2:	687b      	ldr	r3, [r7, #4]
 80238e4:	681b      	ldr	r3, [r3, #0]
 80238e6:	681b      	ldr	r3, [r3, #0]
 80238e8:	f003 0310 	and.w	r3, r3, #16
 80238ec:	2b10      	cmp	r3, #16
 80238ee:	d10a      	bne.n	8023906 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80238f0:	2300      	movs	r3, #0
 80238f2:	60fb      	str	r3, [r7, #12]
 80238f4:	687b      	ldr	r3, [r7, #4]
 80238f6:	681b      	ldr	r3, [r3, #0]
 80238f8:	681b      	ldr	r3, [r3, #0]
 80238fa:	60fb      	str	r3, [r7, #12]
 80238fc:	687b      	ldr	r3, [r7, #4]
 80238fe:	681b      	ldr	r3, [r3, #0]
 8023900:	685b      	ldr	r3, [r3, #4]
 8023902:	60fb      	str	r3, [r7, #12]
 8023904:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8023906:	687b      	ldr	r3, [r7, #4]
 8023908:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802390a:	4619      	mov	r1, r3
 802390c:	6878      	ldr	r0, [r7, #4]
 802390e:	f7ff fdc9 	bl	80234a4 <HAL_UARTEx_RxEventCallback>
 8023912:	e002      	b.n	802391a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8023914:	6878      	ldr	r0, [r7, #4]
 8023916:	f7de fe8b 	bl	8002630 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 802391a:	2300      	movs	r3, #0
 802391c:	e002      	b.n	8023924 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 802391e:	2300      	movs	r3, #0
 8023920:	e000      	b.n	8023924 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8023922:	2302      	movs	r3, #2
  }
}
 8023924:	4618      	mov	r0, r3
 8023926:	3730      	adds	r7, #48	; 0x30
 8023928:	46bd      	mov	sp, r7
 802392a:	bd80      	pop	{r7, pc}

0802392c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 802392c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8023930:	b0c0      	sub	sp, #256	; 0x100
 8023932:	af00      	add	r7, sp, #0
 8023934:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8023938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802393c:	681b      	ldr	r3, [r3, #0]
 802393e:	691b      	ldr	r3, [r3, #16]
 8023940:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8023944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8023948:	68d9      	ldr	r1, [r3, #12]
 802394a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802394e:	681a      	ldr	r2, [r3, #0]
 8023950:	ea40 0301 	orr.w	r3, r0, r1
 8023954:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8023956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802395a:	689a      	ldr	r2, [r3, #8]
 802395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8023960:	691b      	ldr	r3, [r3, #16]
 8023962:	431a      	orrs	r2, r3
 8023964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8023968:	695b      	ldr	r3, [r3, #20]
 802396a:	431a      	orrs	r2, r3
 802396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8023970:	69db      	ldr	r3, [r3, #28]
 8023972:	4313      	orrs	r3, r2
 8023974:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8023978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802397c:	681b      	ldr	r3, [r3, #0]
 802397e:	68db      	ldr	r3, [r3, #12]
 8023980:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8023984:	f021 010c 	bic.w	r1, r1, #12
 8023988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802398c:	681a      	ldr	r2, [r3, #0]
 802398e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8023992:	430b      	orrs	r3, r1
 8023994:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8023996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802399a:	681b      	ldr	r3, [r3, #0]
 802399c:	695b      	ldr	r3, [r3, #20]
 802399e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80239a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80239a6:	6999      	ldr	r1, [r3, #24]
 80239a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80239ac:	681a      	ldr	r2, [r3, #0]
 80239ae:	ea40 0301 	orr.w	r3, r0, r1
 80239b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80239b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80239b8:	681a      	ldr	r2, [r3, #0]
 80239ba:	4b8f      	ldr	r3, [pc, #572]	; (8023bf8 <UART_SetConfig+0x2cc>)
 80239bc:	429a      	cmp	r2, r3
 80239be:	d005      	beq.n	80239cc <UART_SetConfig+0xa0>
 80239c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80239c4:	681a      	ldr	r2, [r3, #0]
 80239c6:	4b8d      	ldr	r3, [pc, #564]	; (8023bfc <UART_SetConfig+0x2d0>)
 80239c8:	429a      	cmp	r2, r3
 80239ca:	d104      	bne.n	80239d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80239cc:	f7fe f82a 	bl	8021a24 <HAL_RCC_GetPCLK2Freq>
 80239d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80239d4:	e003      	b.n	80239de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80239d6:	f7fe f811 	bl	80219fc <HAL_RCC_GetPCLK1Freq>
 80239da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80239de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80239e2:	69db      	ldr	r3, [r3, #28]
 80239e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80239e8:	f040 810c 	bne.w	8023c04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80239ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80239f0:	2200      	movs	r2, #0
 80239f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80239f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80239fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80239fe:	4622      	mov	r2, r4
 8023a00:	462b      	mov	r3, r5
 8023a02:	1891      	adds	r1, r2, r2
 8023a04:	65b9      	str	r1, [r7, #88]	; 0x58
 8023a06:	415b      	adcs	r3, r3
 8023a08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8023a0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8023a0e:	4621      	mov	r1, r4
 8023a10:	eb12 0801 	adds.w	r8, r2, r1
 8023a14:	4629      	mov	r1, r5
 8023a16:	eb43 0901 	adc.w	r9, r3, r1
 8023a1a:	f04f 0200 	mov.w	r2, #0
 8023a1e:	f04f 0300 	mov.w	r3, #0
 8023a22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8023a26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8023a2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8023a2e:	4690      	mov	r8, r2
 8023a30:	4699      	mov	r9, r3
 8023a32:	4623      	mov	r3, r4
 8023a34:	eb18 0303 	adds.w	r3, r8, r3
 8023a38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8023a3c:	462b      	mov	r3, r5
 8023a3e:	eb49 0303 	adc.w	r3, r9, r3
 8023a42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8023a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8023a4a:	685b      	ldr	r3, [r3, #4]
 8023a4c:	2200      	movs	r2, #0
 8023a4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8023a52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8023a56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8023a5a:	460b      	mov	r3, r1
 8023a5c:	18db      	adds	r3, r3, r3
 8023a5e:	653b      	str	r3, [r7, #80]	; 0x50
 8023a60:	4613      	mov	r3, r2
 8023a62:	eb42 0303 	adc.w	r3, r2, r3
 8023a66:	657b      	str	r3, [r7, #84]	; 0x54
 8023a68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8023a6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8023a70:	f7dd fa06 	bl	8000e80 <__aeabi_uldivmod>
 8023a74:	4602      	mov	r2, r0
 8023a76:	460b      	mov	r3, r1
 8023a78:	4b61      	ldr	r3, [pc, #388]	; (8023c00 <UART_SetConfig+0x2d4>)
 8023a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8023a7e:	095b      	lsrs	r3, r3, #5
 8023a80:	011c      	lsls	r4, r3, #4
 8023a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8023a86:	2200      	movs	r2, #0
 8023a88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8023a8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8023a90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8023a94:	4642      	mov	r2, r8
 8023a96:	464b      	mov	r3, r9
 8023a98:	1891      	adds	r1, r2, r2
 8023a9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8023a9c:	415b      	adcs	r3, r3
 8023a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8023aa0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8023aa4:	4641      	mov	r1, r8
 8023aa6:	eb12 0a01 	adds.w	sl, r2, r1
 8023aaa:	4649      	mov	r1, r9
 8023aac:	eb43 0b01 	adc.w	fp, r3, r1
 8023ab0:	f04f 0200 	mov.w	r2, #0
 8023ab4:	f04f 0300 	mov.w	r3, #0
 8023ab8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8023abc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8023ac0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8023ac4:	4692      	mov	sl, r2
 8023ac6:	469b      	mov	fp, r3
 8023ac8:	4643      	mov	r3, r8
 8023aca:	eb1a 0303 	adds.w	r3, sl, r3
 8023ace:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8023ad2:	464b      	mov	r3, r9
 8023ad4:	eb4b 0303 	adc.w	r3, fp, r3
 8023ad8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8023adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8023ae0:	685b      	ldr	r3, [r3, #4]
 8023ae2:	2200      	movs	r2, #0
 8023ae4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8023ae8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8023aec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8023af0:	460b      	mov	r3, r1
 8023af2:	18db      	adds	r3, r3, r3
 8023af4:	643b      	str	r3, [r7, #64]	; 0x40
 8023af6:	4613      	mov	r3, r2
 8023af8:	eb42 0303 	adc.w	r3, r2, r3
 8023afc:	647b      	str	r3, [r7, #68]	; 0x44
 8023afe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8023b02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8023b06:	f7dd f9bb 	bl	8000e80 <__aeabi_uldivmod>
 8023b0a:	4602      	mov	r2, r0
 8023b0c:	460b      	mov	r3, r1
 8023b0e:	4611      	mov	r1, r2
 8023b10:	4b3b      	ldr	r3, [pc, #236]	; (8023c00 <UART_SetConfig+0x2d4>)
 8023b12:	fba3 2301 	umull	r2, r3, r3, r1
 8023b16:	095b      	lsrs	r3, r3, #5
 8023b18:	2264      	movs	r2, #100	; 0x64
 8023b1a:	fb02 f303 	mul.w	r3, r2, r3
 8023b1e:	1acb      	subs	r3, r1, r3
 8023b20:	00db      	lsls	r3, r3, #3
 8023b22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8023b26:	4b36      	ldr	r3, [pc, #216]	; (8023c00 <UART_SetConfig+0x2d4>)
 8023b28:	fba3 2302 	umull	r2, r3, r3, r2
 8023b2c:	095b      	lsrs	r3, r3, #5
 8023b2e:	005b      	lsls	r3, r3, #1
 8023b30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8023b34:	441c      	add	r4, r3
 8023b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8023b3a:	2200      	movs	r2, #0
 8023b3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8023b40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8023b44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8023b48:	4642      	mov	r2, r8
 8023b4a:	464b      	mov	r3, r9
 8023b4c:	1891      	adds	r1, r2, r2
 8023b4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8023b50:	415b      	adcs	r3, r3
 8023b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023b54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8023b58:	4641      	mov	r1, r8
 8023b5a:	1851      	adds	r1, r2, r1
 8023b5c:	6339      	str	r1, [r7, #48]	; 0x30
 8023b5e:	4649      	mov	r1, r9
 8023b60:	414b      	adcs	r3, r1
 8023b62:	637b      	str	r3, [r7, #52]	; 0x34
 8023b64:	f04f 0200 	mov.w	r2, #0
 8023b68:	f04f 0300 	mov.w	r3, #0
 8023b6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8023b70:	4659      	mov	r1, fp
 8023b72:	00cb      	lsls	r3, r1, #3
 8023b74:	4651      	mov	r1, sl
 8023b76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8023b7a:	4651      	mov	r1, sl
 8023b7c:	00ca      	lsls	r2, r1, #3
 8023b7e:	4610      	mov	r0, r2
 8023b80:	4619      	mov	r1, r3
 8023b82:	4603      	mov	r3, r0
 8023b84:	4642      	mov	r2, r8
 8023b86:	189b      	adds	r3, r3, r2
 8023b88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8023b8c:	464b      	mov	r3, r9
 8023b8e:	460a      	mov	r2, r1
 8023b90:	eb42 0303 	adc.w	r3, r2, r3
 8023b94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8023b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8023b9c:	685b      	ldr	r3, [r3, #4]
 8023b9e:	2200      	movs	r2, #0
 8023ba0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8023ba4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8023ba8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8023bac:	460b      	mov	r3, r1
 8023bae:	18db      	adds	r3, r3, r3
 8023bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8023bb2:	4613      	mov	r3, r2
 8023bb4:	eb42 0303 	adc.w	r3, r2, r3
 8023bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8023bba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8023bbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8023bc2:	f7dd f95d 	bl	8000e80 <__aeabi_uldivmod>
 8023bc6:	4602      	mov	r2, r0
 8023bc8:	460b      	mov	r3, r1
 8023bca:	4b0d      	ldr	r3, [pc, #52]	; (8023c00 <UART_SetConfig+0x2d4>)
 8023bcc:	fba3 1302 	umull	r1, r3, r3, r2
 8023bd0:	095b      	lsrs	r3, r3, #5
 8023bd2:	2164      	movs	r1, #100	; 0x64
 8023bd4:	fb01 f303 	mul.w	r3, r1, r3
 8023bd8:	1ad3      	subs	r3, r2, r3
 8023bda:	00db      	lsls	r3, r3, #3
 8023bdc:	3332      	adds	r3, #50	; 0x32
 8023bde:	4a08      	ldr	r2, [pc, #32]	; (8023c00 <UART_SetConfig+0x2d4>)
 8023be0:	fba2 2303 	umull	r2, r3, r2, r3
 8023be4:	095b      	lsrs	r3, r3, #5
 8023be6:	f003 0207 	and.w	r2, r3, #7
 8023bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8023bee:	681b      	ldr	r3, [r3, #0]
 8023bf0:	4422      	add	r2, r4
 8023bf2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8023bf4:	e105      	b.n	8023e02 <UART_SetConfig+0x4d6>
 8023bf6:	bf00      	nop
 8023bf8:	40011000 	.word	0x40011000
 8023bfc:	40011400 	.word	0x40011400
 8023c00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8023c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8023c08:	2200      	movs	r2, #0
 8023c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8023c0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8023c12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8023c16:	4642      	mov	r2, r8
 8023c18:	464b      	mov	r3, r9
 8023c1a:	1891      	adds	r1, r2, r2
 8023c1c:	6239      	str	r1, [r7, #32]
 8023c1e:	415b      	adcs	r3, r3
 8023c20:	627b      	str	r3, [r7, #36]	; 0x24
 8023c22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8023c26:	4641      	mov	r1, r8
 8023c28:	1854      	adds	r4, r2, r1
 8023c2a:	4649      	mov	r1, r9
 8023c2c:	eb43 0501 	adc.w	r5, r3, r1
 8023c30:	f04f 0200 	mov.w	r2, #0
 8023c34:	f04f 0300 	mov.w	r3, #0
 8023c38:	00eb      	lsls	r3, r5, #3
 8023c3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8023c3e:	00e2      	lsls	r2, r4, #3
 8023c40:	4614      	mov	r4, r2
 8023c42:	461d      	mov	r5, r3
 8023c44:	4643      	mov	r3, r8
 8023c46:	18e3      	adds	r3, r4, r3
 8023c48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8023c4c:	464b      	mov	r3, r9
 8023c4e:	eb45 0303 	adc.w	r3, r5, r3
 8023c52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8023c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8023c5a:	685b      	ldr	r3, [r3, #4]
 8023c5c:	2200      	movs	r2, #0
 8023c5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8023c62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8023c66:	f04f 0200 	mov.w	r2, #0
 8023c6a:	f04f 0300 	mov.w	r3, #0
 8023c6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8023c72:	4629      	mov	r1, r5
 8023c74:	008b      	lsls	r3, r1, #2
 8023c76:	4621      	mov	r1, r4
 8023c78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8023c7c:	4621      	mov	r1, r4
 8023c7e:	008a      	lsls	r2, r1, #2
 8023c80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8023c84:	f7dd f8fc 	bl	8000e80 <__aeabi_uldivmod>
 8023c88:	4602      	mov	r2, r0
 8023c8a:	460b      	mov	r3, r1
 8023c8c:	4b60      	ldr	r3, [pc, #384]	; (8023e10 <UART_SetConfig+0x4e4>)
 8023c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8023c92:	095b      	lsrs	r3, r3, #5
 8023c94:	011c      	lsls	r4, r3, #4
 8023c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8023c9a:	2200      	movs	r2, #0
 8023c9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8023ca0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8023ca4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8023ca8:	4642      	mov	r2, r8
 8023caa:	464b      	mov	r3, r9
 8023cac:	1891      	adds	r1, r2, r2
 8023cae:	61b9      	str	r1, [r7, #24]
 8023cb0:	415b      	adcs	r3, r3
 8023cb2:	61fb      	str	r3, [r7, #28]
 8023cb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8023cb8:	4641      	mov	r1, r8
 8023cba:	1851      	adds	r1, r2, r1
 8023cbc:	6139      	str	r1, [r7, #16]
 8023cbe:	4649      	mov	r1, r9
 8023cc0:	414b      	adcs	r3, r1
 8023cc2:	617b      	str	r3, [r7, #20]
 8023cc4:	f04f 0200 	mov.w	r2, #0
 8023cc8:	f04f 0300 	mov.w	r3, #0
 8023ccc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8023cd0:	4659      	mov	r1, fp
 8023cd2:	00cb      	lsls	r3, r1, #3
 8023cd4:	4651      	mov	r1, sl
 8023cd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8023cda:	4651      	mov	r1, sl
 8023cdc:	00ca      	lsls	r2, r1, #3
 8023cde:	4610      	mov	r0, r2
 8023ce0:	4619      	mov	r1, r3
 8023ce2:	4603      	mov	r3, r0
 8023ce4:	4642      	mov	r2, r8
 8023ce6:	189b      	adds	r3, r3, r2
 8023ce8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8023cec:	464b      	mov	r3, r9
 8023cee:	460a      	mov	r2, r1
 8023cf0:	eb42 0303 	adc.w	r3, r2, r3
 8023cf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8023cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8023cfc:	685b      	ldr	r3, [r3, #4]
 8023cfe:	2200      	movs	r2, #0
 8023d00:	67bb      	str	r3, [r7, #120]	; 0x78
 8023d02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8023d04:	f04f 0200 	mov.w	r2, #0
 8023d08:	f04f 0300 	mov.w	r3, #0
 8023d0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8023d10:	4649      	mov	r1, r9
 8023d12:	008b      	lsls	r3, r1, #2
 8023d14:	4641      	mov	r1, r8
 8023d16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8023d1a:	4641      	mov	r1, r8
 8023d1c:	008a      	lsls	r2, r1, #2
 8023d1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8023d22:	f7dd f8ad 	bl	8000e80 <__aeabi_uldivmod>
 8023d26:	4602      	mov	r2, r0
 8023d28:	460b      	mov	r3, r1
 8023d2a:	4b39      	ldr	r3, [pc, #228]	; (8023e10 <UART_SetConfig+0x4e4>)
 8023d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8023d30:	095b      	lsrs	r3, r3, #5
 8023d32:	2164      	movs	r1, #100	; 0x64
 8023d34:	fb01 f303 	mul.w	r3, r1, r3
 8023d38:	1ad3      	subs	r3, r2, r3
 8023d3a:	011b      	lsls	r3, r3, #4
 8023d3c:	3332      	adds	r3, #50	; 0x32
 8023d3e:	4a34      	ldr	r2, [pc, #208]	; (8023e10 <UART_SetConfig+0x4e4>)
 8023d40:	fba2 2303 	umull	r2, r3, r2, r3
 8023d44:	095b      	lsrs	r3, r3, #5
 8023d46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023d4a:	441c      	add	r4, r3
 8023d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8023d50:	2200      	movs	r2, #0
 8023d52:	673b      	str	r3, [r7, #112]	; 0x70
 8023d54:	677a      	str	r2, [r7, #116]	; 0x74
 8023d56:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8023d5a:	4642      	mov	r2, r8
 8023d5c:	464b      	mov	r3, r9
 8023d5e:	1891      	adds	r1, r2, r2
 8023d60:	60b9      	str	r1, [r7, #8]
 8023d62:	415b      	adcs	r3, r3
 8023d64:	60fb      	str	r3, [r7, #12]
 8023d66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8023d6a:	4641      	mov	r1, r8
 8023d6c:	1851      	adds	r1, r2, r1
 8023d6e:	6039      	str	r1, [r7, #0]
 8023d70:	4649      	mov	r1, r9
 8023d72:	414b      	adcs	r3, r1
 8023d74:	607b      	str	r3, [r7, #4]
 8023d76:	f04f 0200 	mov.w	r2, #0
 8023d7a:	f04f 0300 	mov.w	r3, #0
 8023d7e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8023d82:	4659      	mov	r1, fp
 8023d84:	00cb      	lsls	r3, r1, #3
 8023d86:	4651      	mov	r1, sl
 8023d88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8023d8c:	4651      	mov	r1, sl
 8023d8e:	00ca      	lsls	r2, r1, #3
 8023d90:	4610      	mov	r0, r2
 8023d92:	4619      	mov	r1, r3
 8023d94:	4603      	mov	r3, r0
 8023d96:	4642      	mov	r2, r8
 8023d98:	189b      	adds	r3, r3, r2
 8023d9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8023d9c:	464b      	mov	r3, r9
 8023d9e:	460a      	mov	r2, r1
 8023da0:	eb42 0303 	adc.w	r3, r2, r3
 8023da4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8023da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8023daa:	685b      	ldr	r3, [r3, #4]
 8023dac:	2200      	movs	r2, #0
 8023dae:	663b      	str	r3, [r7, #96]	; 0x60
 8023db0:	667a      	str	r2, [r7, #100]	; 0x64
 8023db2:	f04f 0200 	mov.w	r2, #0
 8023db6:	f04f 0300 	mov.w	r3, #0
 8023dba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8023dbe:	4649      	mov	r1, r9
 8023dc0:	008b      	lsls	r3, r1, #2
 8023dc2:	4641      	mov	r1, r8
 8023dc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8023dc8:	4641      	mov	r1, r8
 8023dca:	008a      	lsls	r2, r1, #2
 8023dcc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8023dd0:	f7dd f856 	bl	8000e80 <__aeabi_uldivmod>
 8023dd4:	4602      	mov	r2, r0
 8023dd6:	460b      	mov	r3, r1
 8023dd8:	4b0d      	ldr	r3, [pc, #52]	; (8023e10 <UART_SetConfig+0x4e4>)
 8023dda:	fba3 1302 	umull	r1, r3, r3, r2
 8023dde:	095b      	lsrs	r3, r3, #5
 8023de0:	2164      	movs	r1, #100	; 0x64
 8023de2:	fb01 f303 	mul.w	r3, r1, r3
 8023de6:	1ad3      	subs	r3, r2, r3
 8023de8:	011b      	lsls	r3, r3, #4
 8023dea:	3332      	adds	r3, #50	; 0x32
 8023dec:	4a08      	ldr	r2, [pc, #32]	; (8023e10 <UART_SetConfig+0x4e4>)
 8023dee:	fba2 2303 	umull	r2, r3, r2, r3
 8023df2:	095b      	lsrs	r3, r3, #5
 8023df4:	f003 020f 	and.w	r2, r3, #15
 8023df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8023dfc:	681b      	ldr	r3, [r3, #0]
 8023dfe:	4422      	add	r2, r4
 8023e00:	609a      	str	r2, [r3, #8]
}
 8023e02:	bf00      	nop
 8023e04:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8023e08:	46bd      	mov	sp, r7
 8023e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8023e0e:	bf00      	nop
 8023e10:	51eb851f 	.word	0x51eb851f

08023e14 <atoi>:
 8023e14:	220a      	movs	r2, #10
 8023e16:	2100      	movs	r1, #0
 8023e18:	f000 ba6a 	b.w	80242f0 <strtol>

08023e1c <calloc>:
 8023e1c:	4b02      	ldr	r3, [pc, #8]	; (8023e28 <calloc+0xc>)
 8023e1e:	460a      	mov	r2, r1
 8023e20:	4601      	mov	r1, r0
 8023e22:	6818      	ldr	r0, [r3, #0]
 8023e24:	f000 b852 	b.w	8023ecc <_calloc_r>
 8023e28:	20000164 	.word	0x20000164

08023e2c <__errno>:
 8023e2c:	4b01      	ldr	r3, [pc, #4]	; (8023e34 <__errno+0x8>)
 8023e2e:	6818      	ldr	r0, [r3, #0]
 8023e30:	4770      	bx	lr
 8023e32:	bf00      	nop
 8023e34:	20000164 	.word	0x20000164

08023e38 <__libc_init_array>:
 8023e38:	b570      	push	{r4, r5, r6, lr}
 8023e3a:	4d0d      	ldr	r5, [pc, #52]	; (8023e70 <__libc_init_array+0x38>)
 8023e3c:	4c0d      	ldr	r4, [pc, #52]	; (8023e74 <__libc_init_array+0x3c>)
 8023e3e:	1b64      	subs	r4, r4, r5
 8023e40:	10a4      	asrs	r4, r4, #2
 8023e42:	2600      	movs	r6, #0
 8023e44:	42a6      	cmp	r6, r4
 8023e46:	d109      	bne.n	8023e5c <__libc_init_array+0x24>
 8023e48:	4d0b      	ldr	r5, [pc, #44]	; (8023e78 <__libc_init_array+0x40>)
 8023e4a:	4c0c      	ldr	r4, [pc, #48]	; (8023e7c <__libc_init_array+0x44>)
 8023e4c:	f002 ff00 	bl	8026c50 <_init>
 8023e50:	1b64      	subs	r4, r4, r5
 8023e52:	10a4      	asrs	r4, r4, #2
 8023e54:	2600      	movs	r6, #0
 8023e56:	42a6      	cmp	r6, r4
 8023e58:	d105      	bne.n	8023e66 <__libc_init_array+0x2e>
 8023e5a:	bd70      	pop	{r4, r5, r6, pc}
 8023e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8023e60:	4798      	blx	r3
 8023e62:	3601      	adds	r6, #1
 8023e64:	e7ee      	b.n	8023e44 <__libc_init_array+0xc>
 8023e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8023e6a:	4798      	blx	r3
 8023e6c:	3601      	adds	r6, #1
 8023e6e:	e7f2      	b.n	8023e56 <__libc_init_array+0x1e>
 8023e70:	0802abe8 	.word	0x0802abe8
 8023e74:	0802abe8 	.word	0x0802abe8
 8023e78:	0802abe8 	.word	0x0802abe8
 8023e7c:	0802abec 	.word	0x0802abec

08023e80 <malloc>:
 8023e80:	4b02      	ldr	r3, [pc, #8]	; (8023e8c <malloc+0xc>)
 8023e82:	4601      	mov	r1, r0
 8023e84:	6818      	ldr	r0, [r3, #0]
 8023e86:	f000 b8a3 	b.w	8023fd0 <_malloc_r>
 8023e8a:	bf00      	nop
 8023e8c:	20000164 	.word	0x20000164

08023e90 <free>:
 8023e90:	4b02      	ldr	r3, [pc, #8]	; (8023e9c <free+0xc>)
 8023e92:	4601      	mov	r1, r0
 8023e94:	6818      	ldr	r0, [r3, #0]
 8023e96:	f000 b82f 	b.w	8023ef8 <_free_r>
 8023e9a:	bf00      	nop
 8023e9c:	20000164 	.word	0x20000164

08023ea0 <memcpy>:
 8023ea0:	440a      	add	r2, r1
 8023ea2:	4291      	cmp	r1, r2
 8023ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8023ea8:	d100      	bne.n	8023eac <memcpy+0xc>
 8023eaa:	4770      	bx	lr
 8023eac:	b510      	push	{r4, lr}
 8023eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023eb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023eb6:	4291      	cmp	r1, r2
 8023eb8:	d1f9      	bne.n	8023eae <memcpy+0xe>
 8023eba:	bd10      	pop	{r4, pc}

08023ebc <memset>:
 8023ebc:	4402      	add	r2, r0
 8023ebe:	4603      	mov	r3, r0
 8023ec0:	4293      	cmp	r3, r2
 8023ec2:	d100      	bne.n	8023ec6 <memset+0xa>
 8023ec4:	4770      	bx	lr
 8023ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8023eca:	e7f9      	b.n	8023ec0 <memset+0x4>

08023ecc <_calloc_r>:
 8023ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023ece:	fba1 2402 	umull	r2, r4, r1, r2
 8023ed2:	b94c      	cbnz	r4, 8023ee8 <_calloc_r+0x1c>
 8023ed4:	4611      	mov	r1, r2
 8023ed6:	9201      	str	r2, [sp, #4]
 8023ed8:	f000 f87a 	bl	8023fd0 <_malloc_r>
 8023edc:	9a01      	ldr	r2, [sp, #4]
 8023ede:	4605      	mov	r5, r0
 8023ee0:	b930      	cbnz	r0, 8023ef0 <_calloc_r+0x24>
 8023ee2:	4628      	mov	r0, r5
 8023ee4:	b003      	add	sp, #12
 8023ee6:	bd30      	pop	{r4, r5, pc}
 8023ee8:	220c      	movs	r2, #12
 8023eea:	6002      	str	r2, [r0, #0]
 8023eec:	2500      	movs	r5, #0
 8023eee:	e7f8      	b.n	8023ee2 <_calloc_r+0x16>
 8023ef0:	4621      	mov	r1, r4
 8023ef2:	f7ff ffe3 	bl	8023ebc <memset>
 8023ef6:	e7f4      	b.n	8023ee2 <_calloc_r+0x16>

08023ef8 <_free_r>:
 8023ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023efa:	2900      	cmp	r1, #0
 8023efc:	d044      	beq.n	8023f88 <_free_r+0x90>
 8023efe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023f02:	9001      	str	r0, [sp, #4]
 8023f04:	2b00      	cmp	r3, #0
 8023f06:	f1a1 0404 	sub.w	r4, r1, #4
 8023f0a:	bfb8      	it	lt
 8023f0c:	18e4      	addlt	r4, r4, r3
 8023f0e:	f000 f9f9 	bl	8024304 <__malloc_lock>
 8023f12:	4a1e      	ldr	r2, [pc, #120]	; (8023f8c <_free_r+0x94>)
 8023f14:	9801      	ldr	r0, [sp, #4]
 8023f16:	6813      	ldr	r3, [r2, #0]
 8023f18:	b933      	cbnz	r3, 8023f28 <_free_r+0x30>
 8023f1a:	6063      	str	r3, [r4, #4]
 8023f1c:	6014      	str	r4, [r2, #0]
 8023f1e:	b003      	add	sp, #12
 8023f20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023f24:	f000 b9f4 	b.w	8024310 <__malloc_unlock>
 8023f28:	42a3      	cmp	r3, r4
 8023f2a:	d908      	bls.n	8023f3e <_free_r+0x46>
 8023f2c:	6825      	ldr	r5, [r4, #0]
 8023f2e:	1961      	adds	r1, r4, r5
 8023f30:	428b      	cmp	r3, r1
 8023f32:	bf01      	itttt	eq
 8023f34:	6819      	ldreq	r1, [r3, #0]
 8023f36:	685b      	ldreq	r3, [r3, #4]
 8023f38:	1949      	addeq	r1, r1, r5
 8023f3a:	6021      	streq	r1, [r4, #0]
 8023f3c:	e7ed      	b.n	8023f1a <_free_r+0x22>
 8023f3e:	461a      	mov	r2, r3
 8023f40:	685b      	ldr	r3, [r3, #4]
 8023f42:	b10b      	cbz	r3, 8023f48 <_free_r+0x50>
 8023f44:	42a3      	cmp	r3, r4
 8023f46:	d9fa      	bls.n	8023f3e <_free_r+0x46>
 8023f48:	6811      	ldr	r1, [r2, #0]
 8023f4a:	1855      	adds	r5, r2, r1
 8023f4c:	42a5      	cmp	r5, r4
 8023f4e:	d10b      	bne.n	8023f68 <_free_r+0x70>
 8023f50:	6824      	ldr	r4, [r4, #0]
 8023f52:	4421      	add	r1, r4
 8023f54:	1854      	adds	r4, r2, r1
 8023f56:	42a3      	cmp	r3, r4
 8023f58:	6011      	str	r1, [r2, #0]
 8023f5a:	d1e0      	bne.n	8023f1e <_free_r+0x26>
 8023f5c:	681c      	ldr	r4, [r3, #0]
 8023f5e:	685b      	ldr	r3, [r3, #4]
 8023f60:	6053      	str	r3, [r2, #4]
 8023f62:	4421      	add	r1, r4
 8023f64:	6011      	str	r1, [r2, #0]
 8023f66:	e7da      	b.n	8023f1e <_free_r+0x26>
 8023f68:	d902      	bls.n	8023f70 <_free_r+0x78>
 8023f6a:	230c      	movs	r3, #12
 8023f6c:	6003      	str	r3, [r0, #0]
 8023f6e:	e7d6      	b.n	8023f1e <_free_r+0x26>
 8023f70:	6825      	ldr	r5, [r4, #0]
 8023f72:	1961      	adds	r1, r4, r5
 8023f74:	428b      	cmp	r3, r1
 8023f76:	bf04      	itt	eq
 8023f78:	6819      	ldreq	r1, [r3, #0]
 8023f7a:	685b      	ldreq	r3, [r3, #4]
 8023f7c:	6063      	str	r3, [r4, #4]
 8023f7e:	bf04      	itt	eq
 8023f80:	1949      	addeq	r1, r1, r5
 8023f82:	6021      	streq	r1, [r4, #0]
 8023f84:	6054      	str	r4, [r2, #4]
 8023f86:	e7ca      	b.n	8023f1e <_free_r+0x26>
 8023f88:	b003      	add	sp, #12
 8023f8a:	bd30      	pop	{r4, r5, pc}
 8023f8c:	20001f9c 	.word	0x20001f9c

08023f90 <sbrk_aligned>:
 8023f90:	b570      	push	{r4, r5, r6, lr}
 8023f92:	4e0e      	ldr	r6, [pc, #56]	; (8023fcc <sbrk_aligned+0x3c>)
 8023f94:	460c      	mov	r4, r1
 8023f96:	6831      	ldr	r1, [r6, #0]
 8023f98:	4605      	mov	r5, r0
 8023f9a:	b911      	cbnz	r1, 8023fa2 <sbrk_aligned+0x12>
 8023f9c:	f000 f88c 	bl	80240b8 <_sbrk_r>
 8023fa0:	6030      	str	r0, [r6, #0]
 8023fa2:	4621      	mov	r1, r4
 8023fa4:	4628      	mov	r0, r5
 8023fa6:	f000 f887 	bl	80240b8 <_sbrk_r>
 8023faa:	1c43      	adds	r3, r0, #1
 8023fac:	d00a      	beq.n	8023fc4 <sbrk_aligned+0x34>
 8023fae:	1cc4      	adds	r4, r0, #3
 8023fb0:	f024 0403 	bic.w	r4, r4, #3
 8023fb4:	42a0      	cmp	r0, r4
 8023fb6:	d007      	beq.n	8023fc8 <sbrk_aligned+0x38>
 8023fb8:	1a21      	subs	r1, r4, r0
 8023fba:	4628      	mov	r0, r5
 8023fbc:	f000 f87c 	bl	80240b8 <_sbrk_r>
 8023fc0:	3001      	adds	r0, #1
 8023fc2:	d101      	bne.n	8023fc8 <sbrk_aligned+0x38>
 8023fc4:	f04f 34ff 	mov.w	r4, #4294967295
 8023fc8:	4620      	mov	r0, r4
 8023fca:	bd70      	pop	{r4, r5, r6, pc}
 8023fcc:	20001fa0 	.word	0x20001fa0

08023fd0 <_malloc_r>:
 8023fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023fd4:	1ccd      	adds	r5, r1, #3
 8023fd6:	f025 0503 	bic.w	r5, r5, #3
 8023fda:	3508      	adds	r5, #8
 8023fdc:	2d0c      	cmp	r5, #12
 8023fde:	bf38      	it	cc
 8023fe0:	250c      	movcc	r5, #12
 8023fe2:	2d00      	cmp	r5, #0
 8023fe4:	4607      	mov	r7, r0
 8023fe6:	db01      	blt.n	8023fec <_malloc_r+0x1c>
 8023fe8:	42a9      	cmp	r1, r5
 8023fea:	d905      	bls.n	8023ff8 <_malloc_r+0x28>
 8023fec:	230c      	movs	r3, #12
 8023fee:	603b      	str	r3, [r7, #0]
 8023ff0:	2600      	movs	r6, #0
 8023ff2:	4630      	mov	r0, r6
 8023ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023ff8:	4e2e      	ldr	r6, [pc, #184]	; (80240b4 <_malloc_r+0xe4>)
 8023ffa:	f000 f983 	bl	8024304 <__malloc_lock>
 8023ffe:	6833      	ldr	r3, [r6, #0]
 8024000:	461c      	mov	r4, r3
 8024002:	bb34      	cbnz	r4, 8024052 <_malloc_r+0x82>
 8024004:	4629      	mov	r1, r5
 8024006:	4638      	mov	r0, r7
 8024008:	f7ff ffc2 	bl	8023f90 <sbrk_aligned>
 802400c:	1c43      	adds	r3, r0, #1
 802400e:	4604      	mov	r4, r0
 8024010:	d14d      	bne.n	80240ae <_malloc_r+0xde>
 8024012:	6834      	ldr	r4, [r6, #0]
 8024014:	4626      	mov	r6, r4
 8024016:	2e00      	cmp	r6, #0
 8024018:	d140      	bne.n	802409c <_malloc_r+0xcc>
 802401a:	6823      	ldr	r3, [r4, #0]
 802401c:	4631      	mov	r1, r6
 802401e:	4638      	mov	r0, r7
 8024020:	eb04 0803 	add.w	r8, r4, r3
 8024024:	f000 f848 	bl	80240b8 <_sbrk_r>
 8024028:	4580      	cmp	r8, r0
 802402a:	d13a      	bne.n	80240a2 <_malloc_r+0xd2>
 802402c:	6821      	ldr	r1, [r4, #0]
 802402e:	3503      	adds	r5, #3
 8024030:	1a6d      	subs	r5, r5, r1
 8024032:	f025 0503 	bic.w	r5, r5, #3
 8024036:	3508      	adds	r5, #8
 8024038:	2d0c      	cmp	r5, #12
 802403a:	bf38      	it	cc
 802403c:	250c      	movcc	r5, #12
 802403e:	4629      	mov	r1, r5
 8024040:	4638      	mov	r0, r7
 8024042:	f7ff ffa5 	bl	8023f90 <sbrk_aligned>
 8024046:	3001      	adds	r0, #1
 8024048:	d02b      	beq.n	80240a2 <_malloc_r+0xd2>
 802404a:	6823      	ldr	r3, [r4, #0]
 802404c:	442b      	add	r3, r5
 802404e:	6023      	str	r3, [r4, #0]
 8024050:	e00e      	b.n	8024070 <_malloc_r+0xa0>
 8024052:	6822      	ldr	r2, [r4, #0]
 8024054:	1b52      	subs	r2, r2, r5
 8024056:	d41e      	bmi.n	8024096 <_malloc_r+0xc6>
 8024058:	2a0b      	cmp	r2, #11
 802405a:	d916      	bls.n	802408a <_malloc_r+0xba>
 802405c:	1961      	adds	r1, r4, r5
 802405e:	42a3      	cmp	r3, r4
 8024060:	6025      	str	r5, [r4, #0]
 8024062:	bf18      	it	ne
 8024064:	6059      	strne	r1, [r3, #4]
 8024066:	6863      	ldr	r3, [r4, #4]
 8024068:	bf08      	it	eq
 802406a:	6031      	streq	r1, [r6, #0]
 802406c:	5162      	str	r2, [r4, r5]
 802406e:	604b      	str	r3, [r1, #4]
 8024070:	4638      	mov	r0, r7
 8024072:	f104 060b 	add.w	r6, r4, #11
 8024076:	f000 f94b 	bl	8024310 <__malloc_unlock>
 802407a:	f026 0607 	bic.w	r6, r6, #7
 802407e:	1d23      	adds	r3, r4, #4
 8024080:	1af2      	subs	r2, r6, r3
 8024082:	d0b6      	beq.n	8023ff2 <_malloc_r+0x22>
 8024084:	1b9b      	subs	r3, r3, r6
 8024086:	50a3      	str	r3, [r4, r2]
 8024088:	e7b3      	b.n	8023ff2 <_malloc_r+0x22>
 802408a:	6862      	ldr	r2, [r4, #4]
 802408c:	42a3      	cmp	r3, r4
 802408e:	bf0c      	ite	eq
 8024090:	6032      	streq	r2, [r6, #0]
 8024092:	605a      	strne	r2, [r3, #4]
 8024094:	e7ec      	b.n	8024070 <_malloc_r+0xa0>
 8024096:	4623      	mov	r3, r4
 8024098:	6864      	ldr	r4, [r4, #4]
 802409a:	e7b2      	b.n	8024002 <_malloc_r+0x32>
 802409c:	4634      	mov	r4, r6
 802409e:	6876      	ldr	r6, [r6, #4]
 80240a0:	e7b9      	b.n	8024016 <_malloc_r+0x46>
 80240a2:	230c      	movs	r3, #12
 80240a4:	603b      	str	r3, [r7, #0]
 80240a6:	4638      	mov	r0, r7
 80240a8:	f000 f932 	bl	8024310 <__malloc_unlock>
 80240ac:	e7a1      	b.n	8023ff2 <_malloc_r+0x22>
 80240ae:	6025      	str	r5, [r4, #0]
 80240b0:	e7de      	b.n	8024070 <_malloc_r+0xa0>
 80240b2:	bf00      	nop
 80240b4:	20001f9c 	.word	0x20001f9c

080240b8 <_sbrk_r>:
 80240b8:	b538      	push	{r3, r4, r5, lr}
 80240ba:	4d06      	ldr	r5, [pc, #24]	; (80240d4 <_sbrk_r+0x1c>)
 80240bc:	2300      	movs	r3, #0
 80240be:	4604      	mov	r4, r0
 80240c0:	4608      	mov	r0, r1
 80240c2:	602b      	str	r3, [r5, #0]
 80240c4:	f7df fe40 	bl	8003d48 <_sbrk>
 80240c8:	1c43      	adds	r3, r0, #1
 80240ca:	d102      	bne.n	80240d2 <_sbrk_r+0x1a>
 80240cc:	682b      	ldr	r3, [r5, #0]
 80240ce:	b103      	cbz	r3, 80240d2 <_sbrk_r+0x1a>
 80240d0:	6023      	str	r3, [r4, #0]
 80240d2:	bd38      	pop	{r3, r4, r5, pc}
 80240d4:	20001fa4 	.word	0x20001fa4

080240d8 <strcasecmp>:
 80240d8:	b530      	push	{r4, r5, lr}
 80240da:	4d0b      	ldr	r5, [pc, #44]	; (8024108 <strcasecmp+0x30>)
 80240dc:	4604      	mov	r4, r0
 80240de:	f814 3b01 	ldrb.w	r3, [r4], #1
 80240e2:	5d5a      	ldrb	r2, [r3, r5]
 80240e4:	f002 0203 	and.w	r2, r2, #3
 80240e8:	2a01      	cmp	r2, #1
 80240ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80240ee:	5ca8      	ldrb	r0, [r5, r2]
 80240f0:	f000 0003 	and.w	r0, r0, #3
 80240f4:	bf08      	it	eq
 80240f6:	3320      	addeq	r3, #32
 80240f8:	2801      	cmp	r0, #1
 80240fa:	bf08      	it	eq
 80240fc:	3220      	addeq	r2, #32
 80240fe:	1a98      	subs	r0, r3, r2
 8024100:	d101      	bne.n	8024106 <strcasecmp+0x2e>
 8024102:	2a00      	cmp	r2, #0
 8024104:	d1eb      	bne.n	80240de <strcasecmp+0x6>
 8024106:	bd30      	pop	{r4, r5, pc}
 8024108:	0802a4d9 	.word	0x0802a4d9

0802410c <strcat>:
 802410c:	b510      	push	{r4, lr}
 802410e:	4602      	mov	r2, r0
 8024110:	7814      	ldrb	r4, [r2, #0]
 8024112:	4613      	mov	r3, r2
 8024114:	3201      	adds	r2, #1
 8024116:	2c00      	cmp	r4, #0
 8024118:	d1fa      	bne.n	8024110 <strcat+0x4>
 802411a:	3b01      	subs	r3, #1
 802411c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024120:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024124:	2a00      	cmp	r2, #0
 8024126:	d1f9      	bne.n	802411c <strcat+0x10>
 8024128:	bd10      	pop	{r4, pc}

0802412a <strchr>:
 802412a:	b2c9      	uxtb	r1, r1
 802412c:	4603      	mov	r3, r0
 802412e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024132:	b11a      	cbz	r2, 802413c <strchr+0x12>
 8024134:	428a      	cmp	r2, r1
 8024136:	d1f9      	bne.n	802412c <strchr+0x2>
 8024138:	4618      	mov	r0, r3
 802413a:	4770      	bx	lr
 802413c:	2900      	cmp	r1, #0
 802413e:	bf18      	it	ne
 8024140:	2300      	movne	r3, #0
 8024142:	e7f9      	b.n	8024138 <strchr+0xe>

08024144 <strcpy>:
 8024144:	4603      	mov	r3, r0
 8024146:	f811 2b01 	ldrb.w	r2, [r1], #1
 802414a:	f803 2b01 	strb.w	r2, [r3], #1
 802414e:	2a00      	cmp	r2, #0
 8024150:	d1f9      	bne.n	8024146 <strcpy+0x2>
 8024152:	4770      	bx	lr

08024154 <strncasecmp>:
 8024154:	b570      	push	{r4, r5, r6, lr}
 8024156:	4e0f      	ldr	r6, [pc, #60]	; (8024194 <strncasecmp+0x40>)
 8024158:	4604      	mov	r4, r0
 802415a:	440a      	add	r2, r1
 802415c:	428a      	cmp	r2, r1
 802415e:	d101      	bne.n	8024164 <strncasecmp+0x10>
 8024160:	2000      	movs	r0, #0
 8024162:	e013      	b.n	802418c <strncasecmp+0x38>
 8024164:	f814 3b01 	ldrb.w	r3, [r4], #1
 8024168:	5d98      	ldrb	r0, [r3, r6]
 802416a:	f000 0003 	and.w	r0, r0, #3
 802416e:	2801      	cmp	r0, #1
 8024170:	f811 0b01 	ldrb.w	r0, [r1], #1
 8024174:	5c35      	ldrb	r5, [r6, r0]
 8024176:	f005 0503 	and.w	r5, r5, #3
 802417a:	bf08      	it	eq
 802417c:	3320      	addeq	r3, #32
 802417e:	2d01      	cmp	r5, #1
 8024180:	bf08      	it	eq
 8024182:	3020      	addeq	r0, #32
 8024184:	1a1b      	subs	r3, r3, r0
 8024186:	d102      	bne.n	802418e <strncasecmp+0x3a>
 8024188:	2800      	cmp	r0, #0
 802418a:	d1e7      	bne.n	802415c <strncasecmp+0x8>
 802418c:	bd70      	pop	{r4, r5, r6, pc}
 802418e:	4618      	mov	r0, r3
 8024190:	e7fc      	b.n	802418c <strncasecmp+0x38>
 8024192:	bf00      	nop
 8024194:	0802a4d9 	.word	0x0802a4d9

08024198 <strncpy>:
 8024198:	b510      	push	{r4, lr}
 802419a:	3901      	subs	r1, #1
 802419c:	4603      	mov	r3, r0
 802419e:	b132      	cbz	r2, 80241ae <strncpy+0x16>
 80241a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80241a4:	f803 4b01 	strb.w	r4, [r3], #1
 80241a8:	3a01      	subs	r2, #1
 80241aa:	2c00      	cmp	r4, #0
 80241ac:	d1f7      	bne.n	802419e <strncpy+0x6>
 80241ae:	441a      	add	r2, r3
 80241b0:	2100      	movs	r1, #0
 80241b2:	4293      	cmp	r3, r2
 80241b4:	d100      	bne.n	80241b8 <strncpy+0x20>
 80241b6:	bd10      	pop	{r4, pc}
 80241b8:	f803 1b01 	strb.w	r1, [r3], #1
 80241bc:	e7f9      	b.n	80241b2 <strncpy+0x1a>

080241be <strstr>:
 80241be:	780a      	ldrb	r2, [r1, #0]
 80241c0:	b570      	push	{r4, r5, r6, lr}
 80241c2:	b96a      	cbnz	r2, 80241e0 <strstr+0x22>
 80241c4:	bd70      	pop	{r4, r5, r6, pc}
 80241c6:	429a      	cmp	r2, r3
 80241c8:	d109      	bne.n	80241de <strstr+0x20>
 80241ca:	460c      	mov	r4, r1
 80241cc:	4605      	mov	r5, r0
 80241ce:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80241d2:	2b00      	cmp	r3, #0
 80241d4:	d0f6      	beq.n	80241c4 <strstr+0x6>
 80241d6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80241da:	429e      	cmp	r6, r3
 80241dc:	d0f7      	beq.n	80241ce <strstr+0x10>
 80241de:	3001      	adds	r0, #1
 80241e0:	7803      	ldrb	r3, [r0, #0]
 80241e2:	2b00      	cmp	r3, #0
 80241e4:	d1ef      	bne.n	80241c6 <strstr+0x8>
 80241e6:	4618      	mov	r0, r3
 80241e8:	e7ec      	b.n	80241c4 <strstr+0x6>
	...

080241ec <_strtol_l.constprop.0>:
 80241ec:	2b01      	cmp	r3, #1
 80241ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80241f2:	d001      	beq.n	80241f8 <_strtol_l.constprop.0+0xc>
 80241f4:	2b24      	cmp	r3, #36	; 0x24
 80241f6:	d906      	bls.n	8024206 <_strtol_l.constprop.0+0x1a>
 80241f8:	f7ff fe18 	bl	8023e2c <__errno>
 80241fc:	2316      	movs	r3, #22
 80241fe:	6003      	str	r3, [r0, #0]
 8024200:	2000      	movs	r0, #0
 8024202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024206:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80242ec <_strtol_l.constprop.0+0x100>
 802420a:	460d      	mov	r5, r1
 802420c:	462e      	mov	r6, r5
 802420e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8024212:	f814 700c 	ldrb.w	r7, [r4, ip]
 8024216:	f017 0708 	ands.w	r7, r7, #8
 802421a:	d1f7      	bne.n	802420c <_strtol_l.constprop.0+0x20>
 802421c:	2c2d      	cmp	r4, #45	; 0x2d
 802421e:	d132      	bne.n	8024286 <_strtol_l.constprop.0+0x9a>
 8024220:	782c      	ldrb	r4, [r5, #0]
 8024222:	2701      	movs	r7, #1
 8024224:	1cb5      	adds	r5, r6, #2
 8024226:	2b00      	cmp	r3, #0
 8024228:	d05b      	beq.n	80242e2 <_strtol_l.constprop.0+0xf6>
 802422a:	2b10      	cmp	r3, #16
 802422c:	d109      	bne.n	8024242 <_strtol_l.constprop.0+0x56>
 802422e:	2c30      	cmp	r4, #48	; 0x30
 8024230:	d107      	bne.n	8024242 <_strtol_l.constprop.0+0x56>
 8024232:	782c      	ldrb	r4, [r5, #0]
 8024234:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8024238:	2c58      	cmp	r4, #88	; 0x58
 802423a:	d14d      	bne.n	80242d8 <_strtol_l.constprop.0+0xec>
 802423c:	786c      	ldrb	r4, [r5, #1]
 802423e:	2310      	movs	r3, #16
 8024240:	3502      	adds	r5, #2
 8024242:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8024246:	f108 38ff 	add.w	r8, r8, #4294967295
 802424a:	f04f 0c00 	mov.w	ip, #0
 802424e:	fbb8 f9f3 	udiv	r9, r8, r3
 8024252:	4666      	mov	r6, ip
 8024254:	fb03 8a19 	mls	sl, r3, r9, r8
 8024258:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 802425c:	f1be 0f09 	cmp.w	lr, #9
 8024260:	d816      	bhi.n	8024290 <_strtol_l.constprop.0+0xa4>
 8024262:	4674      	mov	r4, lr
 8024264:	42a3      	cmp	r3, r4
 8024266:	dd24      	ble.n	80242b2 <_strtol_l.constprop.0+0xc6>
 8024268:	f1bc 0f00 	cmp.w	ip, #0
 802426c:	db1e      	blt.n	80242ac <_strtol_l.constprop.0+0xc0>
 802426e:	45b1      	cmp	r9, r6
 8024270:	d31c      	bcc.n	80242ac <_strtol_l.constprop.0+0xc0>
 8024272:	d101      	bne.n	8024278 <_strtol_l.constprop.0+0x8c>
 8024274:	45a2      	cmp	sl, r4
 8024276:	db19      	blt.n	80242ac <_strtol_l.constprop.0+0xc0>
 8024278:	fb06 4603 	mla	r6, r6, r3, r4
 802427c:	f04f 0c01 	mov.w	ip, #1
 8024280:	f815 4b01 	ldrb.w	r4, [r5], #1
 8024284:	e7e8      	b.n	8024258 <_strtol_l.constprop.0+0x6c>
 8024286:	2c2b      	cmp	r4, #43	; 0x2b
 8024288:	bf04      	itt	eq
 802428a:	782c      	ldrbeq	r4, [r5, #0]
 802428c:	1cb5      	addeq	r5, r6, #2
 802428e:	e7ca      	b.n	8024226 <_strtol_l.constprop.0+0x3a>
 8024290:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8024294:	f1be 0f19 	cmp.w	lr, #25
 8024298:	d801      	bhi.n	802429e <_strtol_l.constprop.0+0xb2>
 802429a:	3c37      	subs	r4, #55	; 0x37
 802429c:	e7e2      	b.n	8024264 <_strtol_l.constprop.0+0x78>
 802429e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80242a2:	f1be 0f19 	cmp.w	lr, #25
 80242a6:	d804      	bhi.n	80242b2 <_strtol_l.constprop.0+0xc6>
 80242a8:	3c57      	subs	r4, #87	; 0x57
 80242aa:	e7db      	b.n	8024264 <_strtol_l.constprop.0+0x78>
 80242ac:	f04f 3cff 	mov.w	ip, #4294967295
 80242b0:	e7e6      	b.n	8024280 <_strtol_l.constprop.0+0x94>
 80242b2:	f1bc 0f00 	cmp.w	ip, #0
 80242b6:	da05      	bge.n	80242c4 <_strtol_l.constprop.0+0xd8>
 80242b8:	2322      	movs	r3, #34	; 0x22
 80242ba:	6003      	str	r3, [r0, #0]
 80242bc:	4646      	mov	r6, r8
 80242be:	b942      	cbnz	r2, 80242d2 <_strtol_l.constprop.0+0xe6>
 80242c0:	4630      	mov	r0, r6
 80242c2:	e79e      	b.n	8024202 <_strtol_l.constprop.0+0x16>
 80242c4:	b107      	cbz	r7, 80242c8 <_strtol_l.constprop.0+0xdc>
 80242c6:	4276      	negs	r6, r6
 80242c8:	2a00      	cmp	r2, #0
 80242ca:	d0f9      	beq.n	80242c0 <_strtol_l.constprop.0+0xd4>
 80242cc:	f1bc 0f00 	cmp.w	ip, #0
 80242d0:	d000      	beq.n	80242d4 <_strtol_l.constprop.0+0xe8>
 80242d2:	1e69      	subs	r1, r5, #1
 80242d4:	6011      	str	r1, [r2, #0]
 80242d6:	e7f3      	b.n	80242c0 <_strtol_l.constprop.0+0xd4>
 80242d8:	2430      	movs	r4, #48	; 0x30
 80242da:	2b00      	cmp	r3, #0
 80242dc:	d1b1      	bne.n	8024242 <_strtol_l.constprop.0+0x56>
 80242de:	2308      	movs	r3, #8
 80242e0:	e7af      	b.n	8024242 <_strtol_l.constprop.0+0x56>
 80242e2:	2c30      	cmp	r4, #48	; 0x30
 80242e4:	d0a5      	beq.n	8024232 <_strtol_l.constprop.0+0x46>
 80242e6:	230a      	movs	r3, #10
 80242e8:	e7ab      	b.n	8024242 <_strtol_l.constprop.0+0x56>
 80242ea:	bf00      	nop
 80242ec:	0802a4d9 	.word	0x0802a4d9

080242f0 <strtol>:
 80242f0:	4613      	mov	r3, r2
 80242f2:	460a      	mov	r2, r1
 80242f4:	4601      	mov	r1, r0
 80242f6:	4802      	ldr	r0, [pc, #8]	; (8024300 <strtol+0x10>)
 80242f8:	6800      	ldr	r0, [r0, #0]
 80242fa:	f7ff bf77 	b.w	80241ec <_strtol_l.constprop.0>
 80242fe:	bf00      	nop
 8024300:	20000164 	.word	0x20000164

08024304 <__malloc_lock>:
 8024304:	4801      	ldr	r0, [pc, #4]	; (802430c <__malloc_lock+0x8>)
 8024306:	f000 b809 	b.w	802431c <__retarget_lock_acquire_recursive>
 802430a:	bf00      	nop
 802430c:	20001fa8 	.word	0x20001fa8

08024310 <__malloc_unlock>:
 8024310:	4801      	ldr	r0, [pc, #4]	; (8024318 <__malloc_unlock+0x8>)
 8024312:	f000 b804 	b.w	802431e <__retarget_lock_release_recursive>
 8024316:	bf00      	nop
 8024318:	20001fa8 	.word	0x20001fa8

0802431c <__retarget_lock_acquire_recursive>:
 802431c:	4770      	bx	lr

0802431e <__retarget_lock_release_recursive>:
 802431e:	4770      	bx	lr

08024320 <cos>:
 8024320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024322:	ec53 2b10 	vmov	r2, r3, d0
 8024326:	4826      	ldr	r0, [pc, #152]	; (80243c0 <cos+0xa0>)
 8024328:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802432c:	4281      	cmp	r1, r0
 802432e:	dc06      	bgt.n	802433e <cos+0x1e>
 8024330:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80243b8 <cos+0x98>
 8024334:	b005      	add	sp, #20
 8024336:	f85d eb04 	ldr.w	lr, [sp], #4
 802433a:	f001 b9c1 	b.w	80256c0 <__kernel_cos>
 802433e:	4821      	ldr	r0, [pc, #132]	; (80243c4 <cos+0xa4>)
 8024340:	4281      	cmp	r1, r0
 8024342:	dd09      	ble.n	8024358 <cos+0x38>
 8024344:	ee10 0a10 	vmov	r0, s0
 8024348:	4619      	mov	r1, r3
 802434a:	f7db ff51 	bl	80001f0 <__aeabi_dsub>
 802434e:	ec41 0b10 	vmov	d0, r0, r1
 8024352:	b005      	add	sp, #20
 8024354:	f85d fb04 	ldr.w	pc, [sp], #4
 8024358:	4668      	mov	r0, sp
 802435a:	f000 f9fd 	bl	8024758 <__ieee754_rem_pio2>
 802435e:	f000 0003 	and.w	r0, r0, #3
 8024362:	2801      	cmp	r0, #1
 8024364:	d00b      	beq.n	802437e <cos+0x5e>
 8024366:	2802      	cmp	r0, #2
 8024368:	d016      	beq.n	8024398 <cos+0x78>
 802436a:	b9e0      	cbnz	r0, 80243a6 <cos+0x86>
 802436c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024370:	ed9d 0b00 	vldr	d0, [sp]
 8024374:	f001 f9a4 	bl	80256c0 <__kernel_cos>
 8024378:	ec51 0b10 	vmov	r0, r1, d0
 802437c:	e7e7      	b.n	802434e <cos+0x2e>
 802437e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024382:	ed9d 0b00 	vldr	d0, [sp]
 8024386:	f001 fdb3 	bl	8025ef0 <__kernel_sin>
 802438a:	ec53 2b10 	vmov	r2, r3, d0
 802438e:	ee10 0a10 	vmov	r0, s0
 8024392:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8024396:	e7da      	b.n	802434e <cos+0x2e>
 8024398:	ed9d 1b02 	vldr	d1, [sp, #8]
 802439c:	ed9d 0b00 	vldr	d0, [sp]
 80243a0:	f001 f98e 	bl	80256c0 <__kernel_cos>
 80243a4:	e7f1      	b.n	802438a <cos+0x6a>
 80243a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80243aa:	ed9d 0b00 	vldr	d0, [sp]
 80243ae:	2001      	movs	r0, #1
 80243b0:	f001 fd9e 	bl	8025ef0 <__kernel_sin>
 80243b4:	e7e0      	b.n	8024378 <cos+0x58>
 80243b6:	bf00      	nop
	...
 80243c0:	3fe921fb 	.word	0x3fe921fb
 80243c4:	7fefffff 	.word	0x7fefffff

080243c8 <sin>:
 80243c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80243ca:	ec53 2b10 	vmov	r2, r3, d0
 80243ce:	4828      	ldr	r0, [pc, #160]	; (8024470 <sin+0xa8>)
 80243d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80243d4:	4281      	cmp	r1, r0
 80243d6:	dc07      	bgt.n	80243e8 <sin+0x20>
 80243d8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8024468 <sin+0xa0>
 80243dc:	2000      	movs	r0, #0
 80243de:	b005      	add	sp, #20
 80243e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80243e4:	f001 bd84 	b.w	8025ef0 <__kernel_sin>
 80243e8:	4822      	ldr	r0, [pc, #136]	; (8024474 <sin+0xac>)
 80243ea:	4281      	cmp	r1, r0
 80243ec:	dd09      	ble.n	8024402 <sin+0x3a>
 80243ee:	ee10 0a10 	vmov	r0, s0
 80243f2:	4619      	mov	r1, r3
 80243f4:	f7db fefc 	bl	80001f0 <__aeabi_dsub>
 80243f8:	ec41 0b10 	vmov	d0, r0, r1
 80243fc:	b005      	add	sp, #20
 80243fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8024402:	4668      	mov	r0, sp
 8024404:	f000 f9a8 	bl	8024758 <__ieee754_rem_pio2>
 8024408:	f000 0003 	and.w	r0, r0, #3
 802440c:	2801      	cmp	r0, #1
 802440e:	d00c      	beq.n	802442a <sin+0x62>
 8024410:	2802      	cmp	r0, #2
 8024412:	d011      	beq.n	8024438 <sin+0x70>
 8024414:	b9f0      	cbnz	r0, 8024454 <sin+0x8c>
 8024416:	ed9d 1b02 	vldr	d1, [sp, #8]
 802441a:	ed9d 0b00 	vldr	d0, [sp]
 802441e:	2001      	movs	r0, #1
 8024420:	f001 fd66 	bl	8025ef0 <__kernel_sin>
 8024424:	ec51 0b10 	vmov	r0, r1, d0
 8024428:	e7e6      	b.n	80243f8 <sin+0x30>
 802442a:	ed9d 1b02 	vldr	d1, [sp, #8]
 802442e:	ed9d 0b00 	vldr	d0, [sp]
 8024432:	f001 f945 	bl	80256c0 <__kernel_cos>
 8024436:	e7f5      	b.n	8024424 <sin+0x5c>
 8024438:	ed9d 1b02 	vldr	d1, [sp, #8]
 802443c:	ed9d 0b00 	vldr	d0, [sp]
 8024440:	2001      	movs	r0, #1
 8024442:	f001 fd55 	bl	8025ef0 <__kernel_sin>
 8024446:	ec53 2b10 	vmov	r2, r3, d0
 802444a:	ee10 0a10 	vmov	r0, s0
 802444e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8024452:	e7d1      	b.n	80243f8 <sin+0x30>
 8024454:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024458:	ed9d 0b00 	vldr	d0, [sp]
 802445c:	f001 f930 	bl	80256c0 <__kernel_cos>
 8024460:	e7f1      	b.n	8024446 <sin+0x7e>
 8024462:	bf00      	nop
 8024464:	f3af 8000 	nop.w
	...
 8024470:	3fe921fb 	.word	0x3fe921fb
 8024474:	7fefffff 	.word	0x7fefffff

08024478 <cosf>:
 8024478:	ee10 3a10 	vmov	r3, s0
 802447c:	b507      	push	{r0, r1, r2, lr}
 802447e:	4a1e      	ldr	r2, [pc, #120]	; (80244f8 <cosf+0x80>)
 8024480:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024484:	4293      	cmp	r3, r2
 8024486:	dc06      	bgt.n	8024496 <cosf+0x1e>
 8024488:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80244fc <cosf+0x84>
 802448c:	b003      	add	sp, #12
 802448e:	f85d eb04 	ldr.w	lr, [sp], #4
 8024492:	f001 bdeb 	b.w	802606c <__kernel_cosf>
 8024496:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802449a:	db04      	blt.n	80244a6 <cosf+0x2e>
 802449c:	ee30 0a40 	vsub.f32	s0, s0, s0
 80244a0:	b003      	add	sp, #12
 80244a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80244a6:	4668      	mov	r0, sp
 80244a8:	f000 ffc8 	bl	802543c <__ieee754_rem_pio2f>
 80244ac:	f000 0003 	and.w	r0, r0, #3
 80244b0:	2801      	cmp	r0, #1
 80244b2:	d009      	beq.n	80244c8 <cosf+0x50>
 80244b4:	2802      	cmp	r0, #2
 80244b6:	d010      	beq.n	80244da <cosf+0x62>
 80244b8:	b9b0      	cbnz	r0, 80244e8 <cosf+0x70>
 80244ba:	eddd 0a01 	vldr	s1, [sp, #4]
 80244be:	ed9d 0a00 	vldr	s0, [sp]
 80244c2:	f001 fdd3 	bl	802606c <__kernel_cosf>
 80244c6:	e7eb      	b.n	80244a0 <cosf+0x28>
 80244c8:	eddd 0a01 	vldr	s1, [sp, #4]
 80244cc:	ed9d 0a00 	vldr	s0, [sp]
 80244d0:	f002 f8a2 	bl	8026618 <__kernel_sinf>
 80244d4:	eeb1 0a40 	vneg.f32	s0, s0
 80244d8:	e7e2      	b.n	80244a0 <cosf+0x28>
 80244da:	eddd 0a01 	vldr	s1, [sp, #4]
 80244de:	ed9d 0a00 	vldr	s0, [sp]
 80244e2:	f001 fdc3 	bl	802606c <__kernel_cosf>
 80244e6:	e7f5      	b.n	80244d4 <cosf+0x5c>
 80244e8:	eddd 0a01 	vldr	s1, [sp, #4]
 80244ec:	ed9d 0a00 	vldr	s0, [sp]
 80244f0:	2001      	movs	r0, #1
 80244f2:	f002 f891 	bl	8026618 <__kernel_sinf>
 80244f6:	e7d3      	b.n	80244a0 <cosf+0x28>
 80244f8:	3f490fd8 	.word	0x3f490fd8
 80244fc:	00000000 	.word	0x00000000

08024500 <lrintf>:
 8024500:	ee10 3a10 	vmov	r3, s0
 8024504:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8024508:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 802450c:	281e      	cmp	r0, #30
 802450e:	b082      	sub	sp, #8
 8024510:	dc2e      	bgt.n	8024570 <lrintf+0x70>
 8024512:	1c41      	adds	r1, r0, #1
 8024514:	da02      	bge.n	802451c <lrintf+0x1c>
 8024516:	2000      	movs	r0, #0
 8024518:	b002      	add	sp, #8
 802451a:	4770      	bx	lr
 802451c:	2816      	cmp	r0, #22
 802451e:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8024522:	dd09      	ble.n	8024538 <lrintf+0x38>
 8024524:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8024528:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 802452c:	3a96      	subs	r2, #150	; 0x96
 802452e:	4090      	lsls	r0, r2
 8024530:	2900      	cmp	r1, #0
 8024532:	d0f1      	beq.n	8024518 <lrintf+0x18>
 8024534:	4240      	negs	r0, r0
 8024536:	e7ef      	b.n	8024518 <lrintf+0x18>
 8024538:	4b10      	ldr	r3, [pc, #64]	; (802457c <lrintf+0x7c>)
 802453a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 802453e:	ed93 7a00 	vldr	s14, [r3]
 8024542:	ee37 0a00 	vadd.f32	s0, s14, s0
 8024546:	ed8d 0a01 	vstr	s0, [sp, #4]
 802454a:	eddd 7a01 	vldr	s15, [sp, #4]
 802454e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024552:	ee17 3a90 	vmov	r3, s15
 8024556:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802455a:	d0dc      	beq.n	8024516 <lrintf+0x16>
 802455c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8024560:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8024564:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8024568:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 802456c:	40d8      	lsrs	r0, r3
 802456e:	e7df      	b.n	8024530 <lrintf+0x30>
 8024570:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8024574:	ee17 0a90 	vmov	r0, s15
 8024578:	e7ce      	b.n	8024518 <lrintf+0x18>
 802457a:	bf00      	nop
 802457c:	0802a5dc 	.word	0x0802a5dc

08024580 <sinf>:
 8024580:	ee10 3a10 	vmov	r3, s0
 8024584:	b507      	push	{r0, r1, r2, lr}
 8024586:	4a1f      	ldr	r2, [pc, #124]	; (8024604 <sinf+0x84>)
 8024588:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802458c:	4293      	cmp	r3, r2
 802458e:	dc07      	bgt.n	80245a0 <sinf+0x20>
 8024590:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8024608 <sinf+0x88>
 8024594:	2000      	movs	r0, #0
 8024596:	b003      	add	sp, #12
 8024598:	f85d eb04 	ldr.w	lr, [sp], #4
 802459c:	f002 b83c 	b.w	8026618 <__kernel_sinf>
 80245a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80245a4:	db04      	blt.n	80245b0 <sinf+0x30>
 80245a6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80245aa:	b003      	add	sp, #12
 80245ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80245b0:	4668      	mov	r0, sp
 80245b2:	f000 ff43 	bl	802543c <__ieee754_rem_pio2f>
 80245b6:	f000 0003 	and.w	r0, r0, #3
 80245ba:	2801      	cmp	r0, #1
 80245bc:	d00a      	beq.n	80245d4 <sinf+0x54>
 80245be:	2802      	cmp	r0, #2
 80245c0:	d00f      	beq.n	80245e2 <sinf+0x62>
 80245c2:	b9c0      	cbnz	r0, 80245f6 <sinf+0x76>
 80245c4:	eddd 0a01 	vldr	s1, [sp, #4]
 80245c8:	ed9d 0a00 	vldr	s0, [sp]
 80245cc:	2001      	movs	r0, #1
 80245ce:	f002 f823 	bl	8026618 <__kernel_sinf>
 80245d2:	e7ea      	b.n	80245aa <sinf+0x2a>
 80245d4:	eddd 0a01 	vldr	s1, [sp, #4]
 80245d8:	ed9d 0a00 	vldr	s0, [sp]
 80245dc:	f001 fd46 	bl	802606c <__kernel_cosf>
 80245e0:	e7e3      	b.n	80245aa <sinf+0x2a>
 80245e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80245e6:	ed9d 0a00 	vldr	s0, [sp]
 80245ea:	2001      	movs	r0, #1
 80245ec:	f002 f814 	bl	8026618 <__kernel_sinf>
 80245f0:	eeb1 0a40 	vneg.f32	s0, s0
 80245f4:	e7d9      	b.n	80245aa <sinf+0x2a>
 80245f6:	eddd 0a01 	vldr	s1, [sp, #4]
 80245fa:	ed9d 0a00 	vldr	s0, [sp]
 80245fe:	f001 fd35 	bl	802606c <__kernel_cosf>
 8024602:	e7f5      	b.n	80245f0 <sinf+0x70>
 8024604:	3f490fd8 	.word	0x3f490fd8
 8024608:	00000000 	.word	0x00000000

0802460c <acosf>:
 802460c:	b508      	push	{r3, lr}
 802460e:	ed2d 8b02 	vpush	{d8}
 8024612:	eeb0 8a40 	vmov.f32	s16, s0
 8024616:	f000 faab 	bl	8024b70 <__ieee754_acosf>
 802461a:	eeb4 8a48 	vcmp.f32	s16, s16
 802461e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024622:	eef0 8a40 	vmov.f32	s17, s0
 8024626:	d615      	bvs.n	8024654 <acosf+0x48>
 8024628:	eeb0 0a48 	vmov.f32	s0, s16
 802462c:	f002 fa42 	bl	8026ab4 <fabsf>
 8024630:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8024634:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8024638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802463c:	dd0a      	ble.n	8024654 <acosf+0x48>
 802463e:	f7ff fbf5 	bl	8023e2c <__errno>
 8024642:	ecbd 8b02 	vpop	{d8}
 8024646:	2321      	movs	r3, #33	; 0x21
 8024648:	6003      	str	r3, [r0, #0]
 802464a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802464e:	4804      	ldr	r0, [pc, #16]	; (8024660 <acosf+0x54>)
 8024650:	f002 ba86 	b.w	8026b60 <nanf>
 8024654:	eeb0 0a68 	vmov.f32	s0, s17
 8024658:	ecbd 8b02 	vpop	{d8}
 802465c:	bd08      	pop	{r3, pc}
 802465e:	bf00      	nop
 8024660:	0802a5e4 	.word	0x0802a5e4

08024664 <atan2f>:
 8024664:	f000 bb7c 	b.w	8024d60 <__ieee754_atan2f>

08024668 <powf>:
 8024668:	b508      	push	{r3, lr}
 802466a:	ed2d 8b04 	vpush	{d8-d9}
 802466e:	eeb0 8a60 	vmov.f32	s16, s1
 8024672:	eeb0 9a40 	vmov.f32	s18, s0
 8024676:	f000 fc13 	bl	8024ea0 <__ieee754_powf>
 802467a:	eeb4 8a48 	vcmp.f32	s16, s16
 802467e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024682:	eef0 8a40 	vmov.f32	s17, s0
 8024686:	d63e      	bvs.n	8024706 <powf+0x9e>
 8024688:	eeb5 9a40 	vcmp.f32	s18, #0.0
 802468c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024690:	d112      	bne.n	80246b8 <powf+0x50>
 8024692:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8024696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802469a:	d039      	beq.n	8024710 <powf+0xa8>
 802469c:	eeb0 0a48 	vmov.f32	s0, s16
 80246a0:	f002 fa0f 	bl	8026ac2 <finitef>
 80246a4:	b378      	cbz	r0, 8024706 <powf+0x9e>
 80246a6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80246aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80246ae:	d52a      	bpl.n	8024706 <powf+0x9e>
 80246b0:	f7ff fbbc 	bl	8023e2c <__errno>
 80246b4:	2322      	movs	r3, #34	; 0x22
 80246b6:	e014      	b.n	80246e2 <powf+0x7a>
 80246b8:	f002 fa03 	bl	8026ac2 <finitef>
 80246bc:	b998      	cbnz	r0, 80246e6 <powf+0x7e>
 80246be:	eeb0 0a49 	vmov.f32	s0, s18
 80246c2:	f002 f9fe 	bl	8026ac2 <finitef>
 80246c6:	b170      	cbz	r0, 80246e6 <powf+0x7e>
 80246c8:	eeb0 0a48 	vmov.f32	s0, s16
 80246cc:	f002 f9f9 	bl	8026ac2 <finitef>
 80246d0:	b148      	cbz	r0, 80246e6 <powf+0x7e>
 80246d2:	eef4 8a68 	vcmp.f32	s17, s17
 80246d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80246da:	d7e9      	bvc.n	80246b0 <powf+0x48>
 80246dc:	f7ff fba6 	bl	8023e2c <__errno>
 80246e0:	2321      	movs	r3, #33	; 0x21
 80246e2:	6003      	str	r3, [r0, #0]
 80246e4:	e00f      	b.n	8024706 <powf+0x9e>
 80246e6:	eef5 8a40 	vcmp.f32	s17, #0.0
 80246ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80246ee:	d10a      	bne.n	8024706 <powf+0x9e>
 80246f0:	eeb0 0a49 	vmov.f32	s0, s18
 80246f4:	f002 f9e5 	bl	8026ac2 <finitef>
 80246f8:	b128      	cbz	r0, 8024706 <powf+0x9e>
 80246fa:	eeb0 0a48 	vmov.f32	s0, s16
 80246fe:	f002 f9e0 	bl	8026ac2 <finitef>
 8024702:	2800      	cmp	r0, #0
 8024704:	d1d4      	bne.n	80246b0 <powf+0x48>
 8024706:	eeb0 0a68 	vmov.f32	s0, s17
 802470a:	ecbd 8b04 	vpop	{d8-d9}
 802470e:	bd08      	pop	{r3, pc}
 8024710:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8024714:	e7f7      	b.n	8024706 <powf+0x9e>
	...

08024718 <sqrtf>:
 8024718:	b508      	push	{r3, lr}
 802471a:	ed2d 8b02 	vpush	{d8}
 802471e:	eeb0 8a40 	vmov.f32	s16, s0
 8024722:	f000 ffc7 	bl	80256b4 <__ieee754_sqrtf>
 8024726:	eeb4 8a48 	vcmp.f32	s16, s16
 802472a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802472e:	d60c      	bvs.n	802474a <sqrtf+0x32>
 8024730:	eddf 8a07 	vldr	s17, [pc, #28]	; 8024750 <sqrtf+0x38>
 8024734:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8024738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802473c:	d505      	bpl.n	802474a <sqrtf+0x32>
 802473e:	f7ff fb75 	bl	8023e2c <__errno>
 8024742:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8024746:	2321      	movs	r3, #33	; 0x21
 8024748:	6003      	str	r3, [r0, #0]
 802474a:	ecbd 8b02 	vpop	{d8}
 802474e:	bd08      	pop	{r3, pc}
	...

08024758 <__ieee754_rem_pio2>:
 8024758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802475c:	ed2d 8b02 	vpush	{d8}
 8024760:	ec55 4b10 	vmov	r4, r5, d0
 8024764:	4bca      	ldr	r3, [pc, #808]	; (8024a90 <__ieee754_rem_pio2+0x338>)
 8024766:	b08b      	sub	sp, #44	; 0x2c
 8024768:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 802476c:	4598      	cmp	r8, r3
 802476e:	4682      	mov	sl, r0
 8024770:	9502      	str	r5, [sp, #8]
 8024772:	dc08      	bgt.n	8024786 <__ieee754_rem_pio2+0x2e>
 8024774:	2200      	movs	r2, #0
 8024776:	2300      	movs	r3, #0
 8024778:	ed80 0b00 	vstr	d0, [r0]
 802477c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8024780:	f04f 0b00 	mov.w	fp, #0
 8024784:	e028      	b.n	80247d8 <__ieee754_rem_pio2+0x80>
 8024786:	4bc3      	ldr	r3, [pc, #780]	; (8024a94 <__ieee754_rem_pio2+0x33c>)
 8024788:	4598      	cmp	r8, r3
 802478a:	dc78      	bgt.n	802487e <__ieee754_rem_pio2+0x126>
 802478c:	9b02      	ldr	r3, [sp, #8]
 802478e:	4ec2      	ldr	r6, [pc, #776]	; (8024a98 <__ieee754_rem_pio2+0x340>)
 8024790:	2b00      	cmp	r3, #0
 8024792:	ee10 0a10 	vmov	r0, s0
 8024796:	a3b0      	add	r3, pc, #704	; (adr r3, 8024a58 <__ieee754_rem_pio2+0x300>)
 8024798:	e9d3 2300 	ldrd	r2, r3, [r3]
 802479c:	4629      	mov	r1, r5
 802479e:	dd39      	ble.n	8024814 <__ieee754_rem_pio2+0xbc>
 80247a0:	f7db fd26 	bl	80001f0 <__aeabi_dsub>
 80247a4:	45b0      	cmp	r8, r6
 80247a6:	4604      	mov	r4, r0
 80247a8:	460d      	mov	r5, r1
 80247aa:	d01b      	beq.n	80247e4 <__ieee754_rem_pio2+0x8c>
 80247ac:	a3ac      	add	r3, pc, #688	; (adr r3, 8024a60 <__ieee754_rem_pio2+0x308>)
 80247ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247b2:	f7db fd1d 	bl	80001f0 <__aeabi_dsub>
 80247b6:	4602      	mov	r2, r0
 80247b8:	460b      	mov	r3, r1
 80247ba:	e9ca 2300 	strd	r2, r3, [sl]
 80247be:	4620      	mov	r0, r4
 80247c0:	4629      	mov	r1, r5
 80247c2:	f7db fd15 	bl	80001f0 <__aeabi_dsub>
 80247c6:	a3a6      	add	r3, pc, #664	; (adr r3, 8024a60 <__ieee754_rem_pio2+0x308>)
 80247c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247cc:	f7db fd10 	bl	80001f0 <__aeabi_dsub>
 80247d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80247d4:	f04f 0b01 	mov.w	fp, #1
 80247d8:	4658      	mov	r0, fp
 80247da:	b00b      	add	sp, #44	; 0x2c
 80247dc:	ecbd 8b02 	vpop	{d8}
 80247e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247e4:	a3a0      	add	r3, pc, #640	; (adr r3, 8024a68 <__ieee754_rem_pio2+0x310>)
 80247e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247ea:	f7db fd01 	bl	80001f0 <__aeabi_dsub>
 80247ee:	a3a0      	add	r3, pc, #640	; (adr r3, 8024a70 <__ieee754_rem_pio2+0x318>)
 80247f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247f4:	4604      	mov	r4, r0
 80247f6:	460d      	mov	r5, r1
 80247f8:	f7db fcfa 	bl	80001f0 <__aeabi_dsub>
 80247fc:	4602      	mov	r2, r0
 80247fe:	460b      	mov	r3, r1
 8024800:	e9ca 2300 	strd	r2, r3, [sl]
 8024804:	4620      	mov	r0, r4
 8024806:	4629      	mov	r1, r5
 8024808:	f7db fcf2 	bl	80001f0 <__aeabi_dsub>
 802480c:	a398      	add	r3, pc, #608	; (adr r3, 8024a70 <__ieee754_rem_pio2+0x318>)
 802480e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024812:	e7db      	b.n	80247cc <__ieee754_rem_pio2+0x74>
 8024814:	f7db fcee 	bl	80001f4 <__adddf3>
 8024818:	45b0      	cmp	r8, r6
 802481a:	4604      	mov	r4, r0
 802481c:	460d      	mov	r5, r1
 802481e:	d016      	beq.n	802484e <__ieee754_rem_pio2+0xf6>
 8024820:	a38f      	add	r3, pc, #572	; (adr r3, 8024a60 <__ieee754_rem_pio2+0x308>)
 8024822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024826:	f7db fce5 	bl	80001f4 <__adddf3>
 802482a:	4602      	mov	r2, r0
 802482c:	460b      	mov	r3, r1
 802482e:	e9ca 2300 	strd	r2, r3, [sl]
 8024832:	4620      	mov	r0, r4
 8024834:	4629      	mov	r1, r5
 8024836:	f7db fcdb 	bl	80001f0 <__aeabi_dsub>
 802483a:	a389      	add	r3, pc, #548	; (adr r3, 8024a60 <__ieee754_rem_pio2+0x308>)
 802483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024840:	f7db fcd8 	bl	80001f4 <__adddf3>
 8024844:	f04f 3bff 	mov.w	fp, #4294967295
 8024848:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802484c:	e7c4      	b.n	80247d8 <__ieee754_rem_pio2+0x80>
 802484e:	a386      	add	r3, pc, #536	; (adr r3, 8024a68 <__ieee754_rem_pio2+0x310>)
 8024850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024854:	f7db fcce 	bl	80001f4 <__adddf3>
 8024858:	a385      	add	r3, pc, #532	; (adr r3, 8024a70 <__ieee754_rem_pio2+0x318>)
 802485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802485e:	4604      	mov	r4, r0
 8024860:	460d      	mov	r5, r1
 8024862:	f7db fcc7 	bl	80001f4 <__adddf3>
 8024866:	4602      	mov	r2, r0
 8024868:	460b      	mov	r3, r1
 802486a:	e9ca 2300 	strd	r2, r3, [sl]
 802486e:	4620      	mov	r0, r4
 8024870:	4629      	mov	r1, r5
 8024872:	f7db fcbd 	bl	80001f0 <__aeabi_dsub>
 8024876:	a37e      	add	r3, pc, #504	; (adr r3, 8024a70 <__ieee754_rem_pio2+0x318>)
 8024878:	e9d3 2300 	ldrd	r2, r3, [r3]
 802487c:	e7e0      	b.n	8024840 <__ieee754_rem_pio2+0xe8>
 802487e:	4b87      	ldr	r3, [pc, #540]	; (8024a9c <__ieee754_rem_pio2+0x344>)
 8024880:	4598      	cmp	r8, r3
 8024882:	f300 80d9 	bgt.w	8024a38 <__ieee754_rem_pio2+0x2e0>
 8024886:	f001 ff31 	bl	80266ec <fabs>
 802488a:	ec55 4b10 	vmov	r4, r5, d0
 802488e:	ee10 0a10 	vmov	r0, s0
 8024892:	a379      	add	r3, pc, #484	; (adr r3, 8024a78 <__ieee754_rem_pio2+0x320>)
 8024894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024898:	4629      	mov	r1, r5
 802489a:	f7db fe61 	bl	8000560 <__aeabi_dmul>
 802489e:	4b80      	ldr	r3, [pc, #512]	; (8024aa0 <__ieee754_rem_pio2+0x348>)
 80248a0:	2200      	movs	r2, #0
 80248a2:	f7db fca7 	bl	80001f4 <__adddf3>
 80248a6:	f7dc f8f5 	bl	8000a94 <__aeabi_d2iz>
 80248aa:	4683      	mov	fp, r0
 80248ac:	f7db fdee 	bl	800048c <__aeabi_i2d>
 80248b0:	4602      	mov	r2, r0
 80248b2:	460b      	mov	r3, r1
 80248b4:	ec43 2b18 	vmov	d8, r2, r3
 80248b8:	a367      	add	r3, pc, #412	; (adr r3, 8024a58 <__ieee754_rem_pio2+0x300>)
 80248ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80248be:	f7db fe4f 	bl	8000560 <__aeabi_dmul>
 80248c2:	4602      	mov	r2, r0
 80248c4:	460b      	mov	r3, r1
 80248c6:	4620      	mov	r0, r4
 80248c8:	4629      	mov	r1, r5
 80248ca:	f7db fc91 	bl	80001f0 <__aeabi_dsub>
 80248ce:	a364      	add	r3, pc, #400	; (adr r3, 8024a60 <__ieee754_rem_pio2+0x308>)
 80248d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80248d4:	4606      	mov	r6, r0
 80248d6:	460f      	mov	r7, r1
 80248d8:	ec51 0b18 	vmov	r0, r1, d8
 80248dc:	f7db fe40 	bl	8000560 <__aeabi_dmul>
 80248e0:	f1bb 0f1f 	cmp.w	fp, #31
 80248e4:	4604      	mov	r4, r0
 80248e6:	460d      	mov	r5, r1
 80248e8:	dc0d      	bgt.n	8024906 <__ieee754_rem_pio2+0x1ae>
 80248ea:	4b6e      	ldr	r3, [pc, #440]	; (8024aa4 <__ieee754_rem_pio2+0x34c>)
 80248ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 80248f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80248f4:	4543      	cmp	r3, r8
 80248f6:	d006      	beq.n	8024906 <__ieee754_rem_pio2+0x1ae>
 80248f8:	4622      	mov	r2, r4
 80248fa:	462b      	mov	r3, r5
 80248fc:	4630      	mov	r0, r6
 80248fe:	4639      	mov	r1, r7
 8024900:	f7db fc76 	bl	80001f0 <__aeabi_dsub>
 8024904:	e00f      	b.n	8024926 <__ieee754_rem_pio2+0x1ce>
 8024906:	462b      	mov	r3, r5
 8024908:	4622      	mov	r2, r4
 802490a:	4630      	mov	r0, r6
 802490c:	4639      	mov	r1, r7
 802490e:	f7db fc6f 	bl	80001f0 <__aeabi_dsub>
 8024912:	ea4f 5328 	mov.w	r3, r8, asr #20
 8024916:	9303      	str	r3, [sp, #12]
 8024918:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802491c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8024920:	f1b8 0f10 	cmp.w	r8, #16
 8024924:	dc02      	bgt.n	802492c <__ieee754_rem_pio2+0x1d4>
 8024926:	e9ca 0100 	strd	r0, r1, [sl]
 802492a:	e039      	b.n	80249a0 <__ieee754_rem_pio2+0x248>
 802492c:	a34e      	add	r3, pc, #312	; (adr r3, 8024a68 <__ieee754_rem_pio2+0x310>)
 802492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024932:	ec51 0b18 	vmov	r0, r1, d8
 8024936:	f7db fe13 	bl	8000560 <__aeabi_dmul>
 802493a:	4604      	mov	r4, r0
 802493c:	460d      	mov	r5, r1
 802493e:	4602      	mov	r2, r0
 8024940:	460b      	mov	r3, r1
 8024942:	4630      	mov	r0, r6
 8024944:	4639      	mov	r1, r7
 8024946:	f7db fc53 	bl	80001f0 <__aeabi_dsub>
 802494a:	4602      	mov	r2, r0
 802494c:	460b      	mov	r3, r1
 802494e:	4680      	mov	r8, r0
 8024950:	4689      	mov	r9, r1
 8024952:	4630      	mov	r0, r6
 8024954:	4639      	mov	r1, r7
 8024956:	f7db fc4b 	bl	80001f0 <__aeabi_dsub>
 802495a:	4622      	mov	r2, r4
 802495c:	462b      	mov	r3, r5
 802495e:	f7db fc47 	bl	80001f0 <__aeabi_dsub>
 8024962:	a343      	add	r3, pc, #268	; (adr r3, 8024a70 <__ieee754_rem_pio2+0x318>)
 8024964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024968:	4604      	mov	r4, r0
 802496a:	460d      	mov	r5, r1
 802496c:	ec51 0b18 	vmov	r0, r1, d8
 8024970:	f7db fdf6 	bl	8000560 <__aeabi_dmul>
 8024974:	4622      	mov	r2, r4
 8024976:	462b      	mov	r3, r5
 8024978:	f7db fc3a 	bl	80001f0 <__aeabi_dsub>
 802497c:	4602      	mov	r2, r0
 802497e:	460b      	mov	r3, r1
 8024980:	4604      	mov	r4, r0
 8024982:	460d      	mov	r5, r1
 8024984:	4640      	mov	r0, r8
 8024986:	4649      	mov	r1, r9
 8024988:	f7db fc32 	bl	80001f0 <__aeabi_dsub>
 802498c:	9a03      	ldr	r2, [sp, #12]
 802498e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8024992:	1ad3      	subs	r3, r2, r3
 8024994:	2b31      	cmp	r3, #49	; 0x31
 8024996:	dc24      	bgt.n	80249e2 <__ieee754_rem_pio2+0x28a>
 8024998:	e9ca 0100 	strd	r0, r1, [sl]
 802499c:	4646      	mov	r6, r8
 802499e:	464f      	mov	r7, r9
 80249a0:	e9da 8900 	ldrd	r8, r9, [sl]
 80249a4:	4630      	mov	r0, r6
 80249a6:	4642      	mov	r2, r8
 80249a8:	464b      	mov	r3, r9
 80249aa:	4639      	mov	r1, r7
 80249ac:	f7db fc20 	bl	80001f0 <__aeabi_dsub>
 80249b0:	462b      	mov	r3, r5
 80249b2:	4622      	mov	r2, r4
 80249b4:	f7db fc1c 	bl	80001f0 <__aeabi_dsub>
 80249b8:	9b02      	ldr	r3, [sp, #8]
 80249ba:	2b00      	cmp	r3, #0
 80249bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80249c0:	f6bf af0a 	bge.w	80247d8 <__ieee754_rem_pio2+0x80>
 80249c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80249c8:	f8ca 3004 	str.w	r3, [sl, #4]
 80249cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80249d0:	f8ca 8000 	str.w	r8, [sl]
 80249d4:	f8ca 0008 	str.w	r0, [sl, #8]
 80249d8:	f8ca 300c 	str.w	r3, [sl, #12]
 80249dc:	f1cb 0b00 	rsb	fp, fp, #0
 80249e0:	e6fa      	b.n	80247d8 <__ieee754_rem_pio2+0x80>
 80249e2:	a327      	add	r3, pc, #156	; (adr r3, 8024a80 <__ieee754_rem_pio2+0x328>)
 80249e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249e8:	ec51 0b18 	vmov	r0, r1, d8
 80249ec:	f7db fdb8 	bl	8000560 <__aeabi_dmul>
 80249f0:	4604      	mov	r4, r0
 80249f2:	460d      	mov	r5, r1
 80249f4:	4602      	mov	r2, r0
 80249f6:	460b      	mov	r3, r1
 80249f8:	4640      	mov	r0, r8
 80249fa:	4649      	mov	r1, r9
 80249fc:	f7db fbf8 	bl	80001f0 <__aeabi_dsub>
 8024a00:	4602      	mov	r2, r0
 8024a02:	460b      	mov	r3, r1
 8024a04:	4606      	mov	r6, r0
 8024a06:	460f      	mov	r7, r1
 8024a08:	4640      	mov	r0, r8
 8024a0a:	4649      	mov	r1, r9
 8024a0c:	f7db fbf0 	bl	80001f0 <__aeabi_dsub>
 8024a10:	4622      	mov	r2, r4
 8024a12:	462b      	mov	r3, r5
 8024a14:	f7db fbec 	bl	80001f0 <__aeabi_dsub>
 8024a18:	a31b      	add	r3, pc, #108	; (adr r3, 8024a88 <__ieee754_rem_pio2+0x330>)
 8024a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a1e:	4604      	mov	r4, r0
 8024a20:	460d      	mov	r5, r1
 8024a22:	ec51 0b18 	vmov	r0, r1, d8
 8024a26:	f7db fd9b 	bl	8000560 <__aeabi_dmul>
 8024a2a:	4622      	mov	r2, r4
 8024a2c:	462b      	mov	r3, r5
 8024a2e:	f7db fbdf 	bl	80001f0 <__aeabi_dsub>
 8024a32:	4604      	mov	r4, r0
 8024a34:	460d      	mov	r5, r1
 8024a36:	e75f      	b.n	80248f8 <__ieee754_rem_pio2+0x1a0>
 8024a38:	4b1b      	ldr	r3, [pc, #108]	; (8024aa8 <__ieee754_rem_pio2+0x350>)
 8024a3a:	4598      	cmp	r8, r3
 8024a3c:	dd36      	ble.n	8024aac <__ieee754_rem_pio2+0x354>
 8024a3e:	ee10 2a10 	vmov	r2, s0
 8024a42:	462b      	mov	r3, r5
 8024a44:	4620      	mov	r0, r4
 8024a46:	4629      	mov	r1, r5
 8024a48:	f7db fbd2 	bl	80001f0 <__aeabi_dsub>
 8024a4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8024a50:	e9ca 0100 	strd	r0, r1, [sl]
 8024a54:	e694      	b.n	8024780 <__ieee754_rem_pio2+0x28>
 8024a56:	bf00      	nop
 8024a58:	54400000 	.word	0x54400000
 8024a5c:	3ff921fb 	.word	0x3ff921fb
 8024a60:	1a626331 	.word	0x1a626331
 8024a64:	3dd0b461 	.word	0x3dd0b461
 8024a68:	1a600000 	.word	0x1a600000
 8024a6c:	3dd0b461 	.word	0x3dd0b461
 8024a70:	2e037073 	.word	0x2e037073
 8024a74:	3ba3198a 	.word	0x3ba3198a
 8024a78:	6dc9c883 	.word	0x6dc9c883
 8024a7c:	3fe45f30 	.word	0x3fe45f30
 8024a80:	2e000000 	.word	0x2e000000
 8024a84:	3ba3198a 	.word	0x3ba3198a
 8024a88:	252049c1 	.word	0x252049c1
 8024a8c:	397b839a 	.word	0x397b839a
 8024a90:	3fe921fb 	.word	0x3fe921fb
 8024a94:	4002d97b 	.word	0x4002d97b
 8024a98:	3ff921fb 	.word	0x3ff921fb
 8024a9c:	413921fb 	.word	0x413921fb
 8024aa0:	3fe00000 	.word	0x3fe00000
 8024aa4:	0802a5e8 	.word	0x0802a5e8
 8024aa8:	7fefffff 	.word	0x7fefffff
 8024aac:	ea4f 5428 	mov.w	r4, r8, asr #20
 8024ab0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8024ab4:	ee10 0a10 	vmov	r0, s0
 8024ab8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8024abc:	ee10 6a10 	vmov	r6, s0
 8024ac0:	460f      	mov	r7, r1
 8024ac2:	f7db ffe7 	bl	8000a94 <__aeabi_d2iz>
 8024ac6:	f7db fce1 	bl	800048c <__aeabi_i2d>
 8024aca:	4602      	mov	r2, r0
 8024acc:	460b      	mov	r3, r1
 8024ace:	4630      	mov	r0, r6
 8024ad0:	4639      	mov	r1, r7
 8024ad2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8024ad6:	f7db fb8b 	bl	80001f0 <__aeabi_dsub>
 8024ada:	4b23      	ldr	r3, [pc, #140]	; (8024b68 <__ieee754_rem_pio2+0x410>)
 8024adc:	2200      	movs	r2, #0
 8024ade:	f7db fd3f 	bl	8000560 <__aeabi_dmul>
 8024ae2:	460f      	mov	r7, r1
 8024ae4:	4606      	mov	r6, r0
 8024ae6:	f7db ffd5 	bl	8000a94 <__aeabi_d2iz>
 8024aea:	f7db fccf 	bl	800048c <__aeabi_i2d>
 8024aee:	4602      	mov	r2, r0
 8024af0:	460b      	mov	r3, r1
 8024af2:	4630      	mov	r0, r6
 8024af4:	4639      	mov	r1, r7
 8024af6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8024afa:	f7db fb79 	bl	80001f0 <__aeabi_dsub>
 8024afe:	4b1a      	ldr	r3, [pc, #104]	; (8024b68 <__ieee754_rem_pio2+0x410>)
 8024b00:	2200      	movs	r2, #0
 8024b02:	f7db fd2d 	bl	8000560 <__aeabi_dmul>
 8024b06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8024b0a:	ad04      	add	r5, sp, #16
 8024b0c:	f04f 0803 	mov.w	r8, #3
 8024b10:	46a9      	mov	r9, r5
 8024b12:	2600      	movs	r6, #0
 8024b14:	2700      	movs	r7, #0
 8024b16:	4632      	mov	r2, r6
 8024b18:	463b      	mov	r3, r7
 8024b1a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8024b1e:	46c3      	mov	fp, r8
 8024b20:	3d08      	subs	r5, #8
 8024b22:	f108 38ff 	add.w	r8, r8, #4294967295
 8024b26:	f7db ff83 	bl	8000a30 <__aeabi_dcmpeq>
 8024b2a:	2800      	cmp	r0, #0
 8024b2c:	d1f3      	bne.n	8024b16 <__ieee754_rem_pio2+0x3be>
 8024b2e:	4b0f      	ldr	r3, [pc, #60]	; (8024b6c <__ieee754_rem_pio2+0x414>)
 8024b30:	9301      	str	r3, [sp, #4]
 8024b32:	2302      	movs	r3, #2
 8024b34:	9300      	str	r3, [sp, #0]
 8024b36:	4622      	mov	r2, r4
 8024b38:	465b      	mov	r3, fp
 8024b3a:	4651      	mov	r1, sl
 8024b3c:	4648      	mov	r0, r9
 8024b3e:	f000 fe87 	bl	8025850 <__kernel_rem_pio2>
 8024b42:	9b02      	ldr	r3, [sp, #8]
 8024b44:	2b00      	cmp	r3, #0
 8024b46:	4683      	mov	fp, r0
 8024b48:	f6bf ae46 	bge.w	80247d8 <__ieee754_rem_pio2+0x80>
 8024b4c:	e9da 2100 	ldrd	r2, r1, [sl]
 8024b50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024b54:	e9ca 2300 	strd	r2, r3, [sl]
 8024b58:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8024b5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024b60:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8024b64:	e73a      	b.n	80249dc <__ieee754_rem_pio2+0x284>
 8024b66:	bf00      	nop
 8024b68:	41700000 	.word	0x41700000
 8024b6c:	0802a668 	.word	0x0802a668

08024b70 <__ieee754_acosf>:
 8024b70:	b508      	push	{r3, lr}
 8024b72:	ee10 3a10 	vmov	r3, s0
 8024b76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8024b7a:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8024b7e:	ed2d 8b0c 	vpush	{d8-d13}
 8024b82:	d10a      	bne.n	8024b9a <__ieee754_acosf+0x2a>
 8024b84:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8024d1c <__ieee754_acosf+0x1ac>
 8024b88:	ed9f 8a65 	vldr	s16, [pc, #404]	; 8024d20 <__ieee754_acosf+0x1b0>
 8024b8c:	2b00      	cmp	r3, #0
 8024b8e:	bfd8      	it	le
 8024b90:	eeb0 0a48 	vmovle.f32	s0, s16
 8024b94:	ecbd 8b0c 	vpop	{d8-d13}
 8024b98:	bd08      	pop	{r3, pc}
 8024b9a:	dd04      	ble.n	8024ba6 <__ieee754_acosf+0x36>
 8024b9c:	ee30 8a40 	vsub.f32	s16, s0, s0
 8024ba0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8024ba4:	e7f6      	b.n	8024b94 <__ieee754_acosf+0x24>
 8024ba6:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8024baa:	da3c      	bge.n	8024c26 <__ieee754_acosf+0xb6>
 8024bac:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8024bb0:	f340 80b1 	ble.w	8024d16 <__ieee754_acosf+0x1a6>
 8024bb4:	ee60 7a00 	vmul.f32	s15, s0, s0
 8024bb8:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8024d24 <__ieee754_acosf+0x1b4>
 8024bbc:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8024d28 <__ieee754_acosf+0x1b8>
 8024bc0:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8024d2c <__ieee754_acosf+0x1bc>
 8024bc4:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 8024d30 <__ieee754_acosf+0x1c0>
 8024bc8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8024bcc:	eddf 6a59 	vldr	s13, [pc, #356]	; 8024d34 <__ieee754_acosf+0x1c4>
 8024bd0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8024bd4:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8024d38 <__ieee754_acosf+0x1c8>
 8024bd8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8024bdc:	eddf 6a57 	vldr	s13, [pc, #348]	; 8024d3c <__ieee754_acosf+0x1cc>
 8024be0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8024be4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8024d40 <__ieee754_acosf+0x1d0>
 8024be8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8024bec:	eddf 6a55 	vldr	s13, [pc, #340]	; 8024d44 <__ieee754_acosf+0x1d4>
 8024bf0:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8024bf4:	eddf 6a54 	vldr	s13, [pc, #336]	; 8024d48 <__ieee754_acosf+0x1d8>
 8024bf8:	eee6 6a27 	vfma.f32	s13, s12, s15
 8024bfc:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8024d4c <__ieee754_acosf+0x1dc>
 8024c00:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8024c04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8024c08:	eee6 6a27 	vfma.f32	s13, s12, s15
 8024c0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8024c10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8024c14:	eea0 8a67 	vfms.f32	s16, s0, s15
 8024c18:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8024d50 <__ieee754_acosf+0x1e0>
 8024c1c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8024c20:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8024c24:	e7b6      	b.n	8024b94 <__ieee754_acosf+0x24>
 8024c26:	2b00      	cmp	r3, #0
 8024c28:	eddf da3e 	vldr	s27, [pc, #248]	; 8024d24 <__ieee754_acosf+0x1b4>
 8024c2c:	eddf ca3e 	vldr	s25, [pc, #248]	; 8024d28 <__ieee754_acosf+0x1b8>
 8024c30:	ed9f ca40 	vldr	s24, [pc, #256]	; 8024d34 <__ieee754_acosf+0x1c4>
 8024c34:	eddf ba40 	vldr	s23, [pc, #256]	; 8024d38 <__ieee754_acosf+0x1c8>
 8024c38:	ed9f ba40 	vldr	s22, [pc, #256]	; 8024d3c <__ieee754_acosf+0x1cc>
 8024c3c:	eddf 8a40 	vldr	s17, [pc, #256]	; 8024d40 <__ieee754_acosf+0x1d0>
 8024c40:	ed9f da40 	vldr	s26, [pc, #256]	; 8024d44 <__ieee754_acosf+0x1d4>
 8024c44:	eddf aa39 	vldr	s21, [pc, #228]	; 8024d2c <__ieee754_acosf+0x1bc>
 8024c48:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8024d48 <__ieee754_acosf+0x1d8>
 8024c4c:	eddf 9a3f 	vldr	s19, [pc, #252]	; 8024d4c <__ieee754_acosf+0x1dc>
 8024c50:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8024c54:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8024c58:	da28      	bge.n	8024cac <__ieee754_acosf+0x13c>
 8024c5a:	ee30 0a09 	vadd.f32	s0, s0, s18
 8024c5e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8024c62:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8024c66:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8024c6a:	eeac ca80 	vfma.f32	s24, s25, s0
 8024c6e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8024c72:	eeec ba00 	vfma.f32	s23, s24, s0
 8024c76:	eeea 9a00 	vfma.f32	s19, s20, s0
 8024c7a:	eeab ba80 	vfma.f32	s22, s23, s0
 8024c7e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8024c82:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8024c86:	ee68 8a80 	vmul.f32	s17, s17, s0
 8024c8a:	f000 fd13 	bl	80256b4 <__ieee754_sqrtf>
 8024c8e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8024c92:	eddf 7a30 	vldr	s15, [pc, #192]	; 8024d54 <__ieee754_acosf+0x1e4>
 8024c96:	eee0 7a07 	vfma.f32	s15, s0, s14
 8024c9a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8024c9e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8024ca2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8024d58 <__ieee754_acosf+0x1e8>
 8024ca6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8024caa:	e773      	b.n	8024b94 <__ieee754_acosf+0x24>
 8024cac:	ee39 8a40 	vsub.f32	s16, s18, s0
 8024cb0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8024cb4:	eeb0 0a48 	vmov.f32	s0, s16
 8024cb8:	f000 fcfc 	bl	80256b4 <__ieee754_sqrtf>
 8024cbc:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8024cc0:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8024cc4:	eeac ca88 	vfma.f32	s24, s25, s16
 8024cc8:	eeaa aa88 	vfma.f32	s20, s21, s16
 8024ccc:	eeec ba08 	vfma.f32	s23, s24, s16
 8024cd0:	ee10 3a10 	vmov	r3, s0
 8024cd4:	eeab ba88 	vfma.f32	s22, s23, s16
 8024cd8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8024cdc:	f023 030f 	bic.w	r3, r3, #15
 8024ce0:	eeea 9a08 	vfma.f32	s19, s20, s16
 8024ce4:	ee07 3a90 	vmov	s15, r3
 8024ce8:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8024cec:	eeb0 6a48 	vmov.f32	s12, s16
 8024cf0:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8024cf4:	eea9 9a88 	vfma.f32	s18, s19, s16
 8024cf8:	ee70 6a27 	vadd.f32	s13, s0, s15
 8024cfc:	ee68 8a88 	vmul.f32	s17, s17, s16
 8024d00:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8024d04:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8024d08:	eea0 7a26 	vfma.f32	s14, s0, s13
 8024d0c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8024d10:	ee30 0a00 	vadd.f32	s0, s0, s0
 8024d14:	e73e      	b.n	8024b94 <__ieee754_acosf+0x24>
 8024d16:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8024d5c <__ieee754_acosf+0x1ec>
 8024d1a:	e73b      	b.n	8024b94 <__ieee754_acosf+0x24>
 8024d1c:	00000000 	.word	0x00000000
 8024d20:	40490fdb 	.word	0x40490fdb
 8024d24:	3811ef08 	.word	0x3811ef08
 8024d28:	3a4f7f04 	.word	0x3a4f7f04
 8024d2c:	bf303361 	.word	0xbf303361
 8024d30:	33a22168 	.word	0x33a22168
 8024d34:	bd241146 	.word	0xbd241146
 8024d38:	3e4e0aa8 	.word	0x3e4e0aa8
 8024d3c:	bea6b090 	.word	0xbea6b090
 8024d40:	3e2aaaab 	.word	0x3e2aaaab
 8024d44:	3d9dc62e 	.word	0x3d9dc62e
 8024d48:	4001572d 	.word	0x4001572d
 8024d4c:	c019d139 	.word	0xc019d139
 8024d50:	3fc90fda 	.word	0x3fc90fda
 8024d54:	b3a22168 	.word	0xb3a22168
 8024d58:	40490fda 	.word	0x40490fda
 8024d5c:	3fc90fdb 	.word	0x3fc90fdb

08024d60 <__ieee754_atan2f>:
 8024d60:	ee10 2a90 	vmov	r2, s1
 8024d64:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8024d68:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8024d6c:	b510      	push	{r4, lr}
 8024d6e:	eef0 7a40 	vmov.f32	s15, s0
 8024d72:	dc06      	bgt.n	8024d82 <__ieee754_atan2f+0x22>
 8024d74:	ee10 0a10 	vmov	r0, s0
 8024d78:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8024d7c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8024d80:	dd04      	ble.n	8024d8c <__ieee754_atan2f+0x2c>
 8024d82:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8024d86:	eeb0 0a67 	vmov.f32	s0, s15
 8024d8a:	bd10      	pop	{r4, pc}
 8024d8c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8024d90:	d103      	bne.n	8024d9a <__ieee754_atan2f+0x3a>
 8024d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024d96:	f001 bdb9 	b.w	802690c <atanf>
 8024d9a:	1794      	asrs	r4, r2, #30
 8024d9c:	f004 0402 	and.w	r4, r4, #2
 8024da0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8024da4:	b943      	cbnz	r3, 8024db8 <__ieee754_atan2f+0x58>
 8024da6:	2c02      	cmp	r4, #2
 8024da8:	d05e      	beq.n	8024e68 <__ieee754_atan2f+0x108>
 8024daa:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8024e7c <__ieee754_atan2f+0x11c>
 8024dae:	2c03      	cmp	r4, #3
 8024db0:	bf08      	it	eq
 8024db2:	eef0 7a47 	vmoveq.f32	s15, s14
 8024db6:	e7e6      	b.n	8024d86 <__ieee754_atan2f+0x26>
 8024db8:	b941      	cbnz	r1, 8024dcc <__ieee754_atan2f+0x6c>
 8024dba:	eddf 7a31 	vldr	s15, [pc, #196]	; 8024e80 <__ieee754_atan2f+0x120>
 8024dbe:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8024e84 <__ieee754_atan2f+0x124>
 8024dc2:	2800      	cmp	r0, #0
 8024dc4:	bfb8      	it	lt
 8024dc6:	eef0 7a40 	vmovlt.f32	s15, s0
 8024dca:	e7dc      	b.n	8024d86 <__ieee754_atan2f+0x26>
 8024dcc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8024dd0:	d110      	bne.n	8024df4 <__ieee754_atan2f+0x94>
 8024dd2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8024dd6:	f104 34ff 	add.w	r4, r4, #4294967295
 8024dda:	d107      	bne.n	8024dec <__ieee754_atan2f+0x8c>
 8024ddc:	2c02      	cmp	r4, #2
 8024dde:	d846      	bhi.n	8024e6e <__ieee754_atan2f+0x10e>
 8024de0:	4b29      	ldr	r3, [pc, #164]	; (8024e88 <__ieee754_atan2f+0x128>)
 8024de2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8024de6:	edd4 7a00 	vldr	s15, [r4]
 8024dea:	e7cc      	b.n	8024d86 <__ieee754_atan2f+0x26>
 8024dec:	2c02      	cmp	r4, #2
 8024dee:	d841      	bhi.n	8024e74 <__ieee754_atan2f+0x114>
 8024df0:	4b26      	ldr	r3, [pc, #152]	; (8024e8c <__ieee754_atan2f+0x12c>)
 8024df2:	e7f6      	b.n	8024de2 <__ieee754_atan2f+0x82>
 8024df4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8024df8:	d0df      	beq.n	8024dba <__ieee754_atan2f+0x5a>
 8024dfa:	1a5b      	subs	r3, r3, r1
 8024dfc:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8024e00:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8024e04:	da1a      	bge.n	8024e3c <__ieee754_atan2f+0xdc>
 8024e06:	2a00      	cmp	r2, #0
 8024e08:	da01      	bge.n	8024e0e <__ieee754_atan2f+0xae>
 8024e0a:	313c      	adds	r1, #60	; 0x3c
 8024e0c:	db19      	blt.n	8024e42 <__ieee754_atan2f+0xe2>
 8024e0e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8024e12:	f001 fe4f 	bl	8026ab4 <fabsf>
 8024e16:	f001 fd79 	bl	802690c <atanf>
 8024e1a:	eef0 7a40 	vmov.f32	s15, s0
 8024e1e:	2c01      	cmp	r4, #1
 8024e20:	d012      	beq.n	8024e48 <__ieee754_atan2f+0xe8>
 8024e22:	2c02      	cmp	r4, #2
 8024e24:	d017      	beq.n	8024e56 <__ieee754_atan2f+0xf6>
 8024e26:	2c00      	cmp	r4, #0
 8024e28:	d0ad      	beq.n	8024d86 <__ieee754_atan2f+0x26>
 8024e2a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8024e90 <__ieee754_atan2f+0x130>
 8024e2e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8024e32:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8024e94 <__ieee754_atan2f+0x134>
 8024e36:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8024e3a:	e7a4      	b.n	8024d86 <__ieee754_atan2f+0x26>
 8024e3c:	eddf 7a10 	vldr	s15, [pc, #64]	; 8024e80 <__ieee754_atan2f+0x120>
 8024e40:	e7ed      	b.n	8024e1e <__ieee754_atan2f+0xbe>
 8024e42:	eddf 7a15 	vldr	s15, [pc, #84]	; 8024e98 <__ieee754_atan2f+0x138>
 8024e46:	e7ea      	b.n	8024e1e <__ieee754_atan2f+0xbe>
 8024e48:	ee17 3a90 	vmov	r3, s15
 8024e4c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8024e50:	ee07 3a90 	vmov	s15, r3
 8024e54:	e797      	b.n	8024d86 <__ieee754_atan2f+0x26>
 8024e56:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8024e90 <__ieee754_atan2f+0x130>
 8024e5a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8024e5e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8024e94 <__ieee754_atan2f+0x134>
 8024e62:	ee70 7a67 	vsub.f32	s15, s0, s15
 8024e66:	e78e      	b.n	8024d86 <__ieee754_atan2f+0x26>
 8024e68:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8024e94 <__ieee754_atan2f+0x134>
 8024e6c:	e78b      	b.n	8024d86 <__ieee754_atan2f+0x26>
 8024e6e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8024e9c <__ieee754_atan2f+0x13c>
 8024e72:	e788      	b.n	8024d86 <__ieee754_atan2f+0x26>
 8024e74:	eddf 7a08 	vldr	s15, [pc, #32]	; 8024e98 <__ieee754_atan2f+0x138>
 8024e78:	e785      	b.n	8024d86 <__ieee754_atan2f+0x26>
 8024e7a:	bf00      	nop
 8024e7c:	c0490fdb 	.word	0xc0490fdb
 8024e80:	3fc90fdb 	.word	0x3fc90fdb
 8024e84:	bfc90fdb 	.word	0xbfc90fdb
 8024e88:	0802a770 	.word	0x0802a770
 8024e8c:	0802a77c 	.word	0x0802a77c
 8024e90:	33bbbd2e 	.word	0x33bbbd2e
 8024e94:	40490fdb 	.word	0x40490fdb
 8024e98:	00000000 	.word	0x00000000
 8024e9c:	3f490fdb 	.word	0x3f490fdb

08024ea0 <__ieee754_powf>:
 8024ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024ea4:	ee10 4a90 	vmov	r4, s1
 8024ea8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8024eac:	ed2d 8b02 	vpush	{d8}
 8024eb0:	ee10 6a10 	vmov	r6, s0
 8024eb4:	eeb0 8a40 	vmov.f32	s16, s0
 8024eb8:	eef0 8a60 	vmov.f32	s17, s1
 8024ebc:	d10c      	bne.n	8024ed8 <__ieee754_powf+0x38>
 8024ebe:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8024ec2:	0076      	lsls	r6, r6, #1
 8024ec4:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8024ec8:	f240 8296 	bls.w	80253f8 <__ieee754_powf+0x558>
 8024ecc:	ee38 0a28 	vadd.f32	s0, s16, s17
 8024ed0:	ecbd 8b02 	vpop	{d8}
 8024ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024ed8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8024edc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8024ee0:	dcf4      	bgt.n	8024ecc <__ieee754_powf+0x2c>
 8024ee2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8024ee6:	dd08      	ble.n	8024efa <__ieee754_powf+0x5a>
 8024ee8:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8024eec:	d1ee      	bne.n	8024ecc <__ieee754_powf+0x2c>
 8024eee:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8024ef2:	0064      	lsls	r4, r4, #1
 8024ef4:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8024ef8:	e7e6      	b.n	8024ec8 <__ieee754_powf+0x28>
 8024efa:	2e00      	cmp	r6, #0
 8024efc:	da20      	bge.n	8024f40 <__ieee754_powf+0xa0>
 8024efe:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8024f02:	da2d      	bge.n	8024f60 <__ieee754_powf+0xc0>
 8024f04:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8024f08:	f2c0 827f 	blt.w	802540a <__ieee754_powf+0x56a>
 8024f0c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8024f10:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8024f14:	fa48 f703 	asr.w	r7, r8, r3
 8024f18:	fa07 f303 	lsl.w	r3, r7, r3
 8024f1c:	4543      	cmp	r3, r8
 8024f1e:	f040 8274 	bne.w	802540a <__ieee754_powf+0x56a>
 8024f22:	f007 0701 	and.w	r7, r7, #1
 8024f26:	f1c7 0702 	rsb	r7, r7, #2
 8024f2a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8024f2e:	d11f      	bne.n	8024f70 <__ieee754_powf+0xd0>
 8024f30:	2c00      	cmp	r4, #0
 8024f32:	f280 8267 	bge.w	8025404 <__ieee754_powf+0x564>
 8024f36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8024f3a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8024f3e:	e7c7      	b.n	8024ed0 <__ieee754_powf+0x30>
 8024f40:	2700      	movs	r7, #0
 8024f42:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8024f46:	d1f0      	bne.n	8024f2a <__ieee754_powf+0x8a>
 8024f48:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8024f4c:	f000 8254 	beq.w	80253f8 <__ieee754_powf+0x558>
 8024f50:	dd08      	ble.n	8024f64 <__ieee754_powf+0xc4>
 8024f52:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 802525c <__ieee754_powf+0x3bc>
 8024f56:	2c00      	cmp	r4, #0
 8024f58:	bfa8      	it	ge
 8024f5a:	eeb0 0a68 	vmovge.f32	s0, s17
 8024f5e:	e7b7      	b.n	8024ed0 <__ieee754_powf+0x30>
 8024f60:	2702      	movs	r7, #2
 8024f62:	e7ee      	b.n	8024f42 <__ieee754_powf+0xa2>
 8024f64:	2c00      	cmp	r4, #0
 8024f66:	f280 824a 	bge.w	80253fe <__ieee754_powf+0x55e>
 8024f6a:	eeb1 0a68 	vneg.f32	s0, s17
 8024f6e:	e7af      	b.n	8024ed0 <__ieee754_powf+0x30>
 8024f70:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8024f74:	d102      	bne.n	8024f7c <__ieee754_powf+0xdc>
 8024f76:	ee28 0a08 	vmul.f32	s0, s16, s16
 8024f7a:	e7a9      	b.n	8024ed0 <__ieee754_powf+0x30>
 8024f7c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8024f80:	eeb0 0a48 	vmov.f32	s0, s16
 8024f84:	d107      	bne.n	8024f96 <__ieee754_powf+0xf6>
 8024f86:	2e00      	cmp	r6, #0
 8024f88:	db05      	blt.n	8024f96 <__ieee754_powf+0xf6>
 8024f8a:	ecbd 8b02 	vpop	{d8}
 8024f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024f92:	f000 bb8f 	b.w	80256b4 <__ieee754_sqrtf>
 8024f96:	f001 fd8d 	bl	8026ab4 <fabsf>
 8024f9a:	b125      	cbz	r5, 8024fa6 <__ieee754_powf+0x106>
 8024f9c:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8024fa0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8024fa4:	d116      	bne.n	8024fd4 <__ieee754_powf+0x134>
 8024fa6:	2c00      	cmp	r4, #0
 8024fa8:	bfbc      	itt	lt
 8024faa:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8024fae:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8024fb2:	2e00      	cmp	r6, #0
 8024fb4:	da8c      	bge.n	8024ed0 <__ieee754_powf+0x30>
 8024fb6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8024fba:	ea55 0307 	orrs.w	r3, r5, r7
 8024fbe:	d104      	bne.n	8024fca <__ieee754_powf+0x12a>
 8024fc0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8024fc4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8024fc8:	e782      	b.n	8024ed0 <__ieee754_powf+0x30>
 8024fca:	2f01      	cmp	r7, #1
 8024fcc:	d180      	bne.n	8024ed0 <__ieee754_powf+0x30>
 8024fce:	eeb1 0a40 	vneg.f32	s0, s0
 8024fd2:	e77d      	b.n	8024ed0 <__ieee754_powf+0x30>
 8024fd4:	0ff0      	lsrs	r0, r6, #31
 8024fd6:	3801      	subs	r0, #1
 8024fd8:	ea57 0300 	orrs.w	r3, r7, r0
 8024fdc:	d104      	bne.n	8024fe8 <__ieee754_powf+0x148>
 8024fde:	ee38 8a48 	vsub.f32	s16, s16, s16
 8024fe2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8024fe6:	e773      	b.n	8024ed0 <__ieee754_powf+0x30>
 8024fe8:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8024fec:	dd74      	ble.n	80250d8 <__ieee754_powf+0x238>
 8024fee:	4b9c      	ldr	r3, [pc, #624]	; (8025260 <__ieee754_powf+0x3c0>)
 8024ff0:	429d      	cmp	r5, r3
 8024ff2:	dc08      	bgt.n	8025006 <__ieee754_powf+0x166>
 8024ff4:	2c00      	cmp	r4, #0
 8024ff6:	da0b      	bge.n	8025010 <__ieee754_powf+0x170>
 8024ff8:	2000      	movs	r0, #0
 8024ffa:	ecbd 8b02 	vpop	{d8}
 8024ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025002:	f001 bb6d 	b.w	80266e0 <__math_oflowf>
 8025006:	4b97      	ldr	r3, [pc, #604]	; (8025264 <__ieee754_powf+0x3c4>)
 8025008:	429d      	cmp	r5, r3
 802500a:	dd08      	ble.n	802501e <__ieee754_powf+0x17e>
 802500c:	2c00      	cmp	r4, #0
 802500e:	dcf3      	bgt.n	8024ff8 <__ieee754_powf+0x158>
 8025010:	2000      	movs	r0, #0
 8025012:	ecbd 8b02 	vpop	{d8}
 8025016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802501a:	f001 bb5b 	b.w	80266d4 <__math_uflowf>
 802501e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8025022:	ee30 0a67 	vsub.f32	s0, s0, s15
 8025026:	eddf 6a90 	vldr	s13, [pc, #576]	; 8025268 <__ieee754_powf+0x3c8>
 802502a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 802502e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8025032:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8025036:	eee6 7ac0 	vfms.f32	s15, s13, s0
 802503a:	ee20 7a00 	vmul.f32	s14, s0, s0
 802503e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8025042:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 802526c <__ieee754_powf+0x3cc>
 8025046:	ee67 7a67 	vnmul.f32	s15, s14, s15
 802504a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8025270 <__ieee754_powf+0x3d0>
 802504e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8025052:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8025274 <__ieee754_powf+0x3d4>
 8025056:	eef0 6a67 	vmov.f32	s13, s15
 802505a:	eee0 6a07 	vfma.f32	s13, s0, s14
 802505e:	ee16 3a90 	vmov	r3, s13
 8025062:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8025066:	f023 030f 	bic.w	r3, r3, #15
 802506a:	ee00 3a90 	vmov	s1, r3
 802506e:	eee0 0a47 	vfms.f32	s1, s0, s14
 8025072:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8025076:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 802507a:	f024 040f 	bic.w	r4, r4, #15
 802507e:	ee07 4a10 	vmov	s14, r4
 8025082:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8025086:	ee38 7ac7 	vsub.f32	s14, s17, s14
 802508a:	ee07 3a90 	vmov	s15, r3
 802508e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8025092:	3f01      	subs	r7, #1
 8025094:	ea57 0200 	orrs.w	r2, r7, r0
 8025098:	ee07 4a10 	vmov	s14, r4
 802509c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80250a0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80250a4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80250a8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80250ac:	ee17 4a10 	vmov	r4, s14
 80250b0:	bf08      	it	eq
 80250b2:	eeb0 8a40 	vmoveq.f32	s16, s0
 80250b6:	2c00      	cmp	r4, #0
 80250b8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80250bc:	f340 817e 	ble.w	80253bc <__ieee754_powf+0x51c>
 80250c0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80250c4:	f340 80f8 	ble.w	80252b8 <__ieee754_powf+0x418>
 80250c8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80250cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80250d0:	bf4c      	ite	mi
 80250d2:	2001      	movmi	r0, #1
 80250d4:	2000      	movpl	r0, #0
 80250d6:	e790      	b.n	8024ffa <__ieee754_powf+0x15a>
 80250d8:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 80250dc:	bf01      	itttt	eq
 80250de:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8025278 <__ieee754_powf+0x3d8>
 80250e2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80250e6:	f06f 0217 	mvneq.w	r2, #23
 80250ea:	ee17 5a90 	vmoveq	r5, s15
 80250ee:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80250f2:	bf18      	it	ne
 80250f4:	2200      	movne	r2, #0
 80250f6:	3b7f      	subs	r3, #127	; 0x7f
 80250f8:	4413      	add	r3, r2
 80250fa:	4a60      	ldr	r2, [pc, #384]	; (802527c <__ieee754_powf+0x3dc>)
 80250fc:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8025100:	4295      	cmp	r5, r2
 8025102:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8025106:	dd06      	ble.n	8025116 <__ieee754_powf+0x276>
 8025108:	4a5d      	ldr	r2, [pc, #372]	; (8025280 <__ieee754_powf+0x3e0>)
 802510a:	4295      	cmp	r5, r2
 802510c:	f340 80a4 	ble.w	8025258 <__ieee754_powf+0x3b8>
 8025110:	3301      	adds	r3, #1
 8025112:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8025116:	2500      	movs	r5, #0
 8025118:	4a5a      	ldr	r2, [pc, #360]	; (8025284 <__ieee754_powf+0x3e4>)
 802511a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 802511e:	ee07 1a90 	vmov	s15, r1
 8025122:	ed92 7a00 	vldr	s14, [r2]
 8025126:	4a58      	ldr	r2, [pc, #352]	; (8025288 <__ieee754_powf+0x3e8>)
 8025128:	ee37 6a27 	vadd.f32	s12, s14, s15
 802512c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8025130:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8025134:	1049      	asrs	r1, r1, #1
 8025136:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 802513a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 802513e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8025142:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8025146:	ee06 1a10 	vmov	s12, r1
 802514a:	ee65 4a26 	vmul.f32	s9, s10, s13
 802514e:	ee36 7a47 	vsub.f32	s14, s12, s14
 8025152:	ee14 6a90 	vmov	r6, s9
 8025156:	4016      	ands	r6, r2
 8025158:	ee05 6a90 	vmov	s11, r6
 802515c:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8025160:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025164:	ed9f 7a49 	vldr	s14, [pc, #292]	; 802528c <__ieee754_powf+0x3ec>
 8025168:	eea5 5ae7 	vfms.f32	s10, s11, s15
 802516c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8025170:	ee25 6a26 	vmul.f32	s12, s10, s13
 8025174:	eddf 6a46 	vldr	s13, [pc, #280]	; 8025290 <__ieee754_powf+0x3f0>
 8025178:	eea7 7aa6 	vfma.f32	s14, s15, s13
 802517c:	eddf 6a45 	vldr	s13, [pc, #276]	; 8025294 <__ieee754_powf+0x3f4>
 8025180:	eee7 6a27 	vfma.f32	s13, s14, s15
 8025184:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8025268 <__ieee754_powf+0x3c8>
 8025188:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802518c:	eddf 6a42 	vldr	s13, [pc, #264]	; 8025298 <__ieee754_powf+0x3f8>
 8025190:	eee7 6a27 	vfma.f32	s13, s14, s15
 8025194:	ed9f 7a41 	vldr	s14, [pc, #260]	; 802529c <__ieee754_powf+0x3fc>
 8025198:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802519c:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80251a0:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80251a4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80251a8:	eee5 6a07 	vfma.f32	s13, s10, s14
 80251ac:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80251b0:	eef0 7a45 	vmov.f32	s15, s10
 80251b4:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80251b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80251bc:	ee17 1a90 	vmov	r1, s15
 80251c0:	4011      	ands	r1, r2
 80251c2:	ee07 1a90 	vmov	s15, r1
 80251c6:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80251ca:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80251ce:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80251d2:	ee27 7a24 	vmul.f32	s14, s14, s9
 80251d6:	eea6 7a27 	vfma.f32	s14, s12, s15
 80251da:	eeb0 6a47 	vmov.f32	s12, s14
 80251de:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80251e2:	ee16 1a10 	vmov	r1, s12
 80251e6:	4011      	ands	r1, r2
 80251e8:	ee06 1a90 	vmov	s13, r1
 80251ec:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80251f0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80252a0 <__ieee754_powf+0x400>
 80251f4:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80252a4 <__ieee754_powf+0x404>
 80251f8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80251fc:	ee06 1a10 	vmov	s12, r1
 8025200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025204:	eddf 7a28 	vldr	s15, [pc, #160]	; 80252a8 <__ieee754_powf+0x408>
 8025208:	4928      	ldr	r1, [pc, #160]	; (80252ac <__ieee754_powf+0x40c>)
 802520a:	eea6 7a27 	vfma.f32	s14, s12, s15
 802520e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8025212:	edd1 7a00 	vldr	s15, [r1]
 8025216:	ee37 7a27 	vadd.f32	s14, s14, s15
 802521a:	ee07 3a90 	vmov	s15, r3
 802521e:	4b24      	ldr	r3, [pc, #144]	; (80252b0 <__ieee754_powf+0x410>)
 8025220:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8025224:	eef0 7a47 	vmov.f32	s15, s14
 8025228:	eee6 7a25 	vfma.f32	s15, s12, s11
 802522c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8025230:	edd5 0a00 	vldr	s1, [r5]
 8025234:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8025238:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802523c:	ee17 3a90 	vmov	r3, s15
 8025240:	4013      	ands	r3, r2
 8025242:	ee07 3a90 	vmov	s15, r3
 8025246:	ee77 6ae6 	vsub.f32	s13, s15, s13
 802524a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 802524e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8025252:	ee77 7a66 	vsub.f32	s15, s14, s13
 8025256:	e70e      	b.n	8025076 <__ieee754_powf+0x1d6>
 8025258:	2501      	movs	r5, #1
 802525a:	e75d      	b.n	8025118 <__ieee754_powf+0x278>
 802525c:	00000000 	.word	0x00000000
 8025260:	3f7ffff3 	.word	0x3f7ffff3
 8025264:	3f800007 	.word	0x3f800007
 8025268:	3eaaaaab 	.word	0x3eaaaaab
 802526c:	3fb8aa3b 	.word	0x3fb8aa3b
 8025270:	36eca570 	.word	0x36eca570
 8025274:	3fb8aa00 	.word	0x3fb8aa00
 8025278:	4b800000 	.word	0x4b800000
 802527c:	001cc471 	.word	0x001cc471
 8025280:	005db3d6 	.word	0x005db3d6
 8025284:	0802a788 	.word	0x0802a788
 8025288:	fffff000 	.word	0xfffff000
 802528c:	3e6c3255 	.word	0x3e6c3255
 8025290:	3e53f142 	.word	0x3e53f142
 8025294:	3e8ba305 	.word	0x3e8ba305
 8025298:	3edb6db7 	.word	0x3edb6db7
 802529c:	3f19999a 	.word	0x3f19999a
 80252a0:	3f76384f 	.word	0x3f76384f
 80252a4:	3f763800 	.word	0x3f763800
 80252a8:	369dc3a0 	.word	0x369dc3a0
 80252ac:	0802a798 	.word	0x0802a798
 80252b0:	0802a790 	.word	0x0802a790
 80252b4:	3338aa3c 	.word	0x3338aa3c
 80252b8:	f040 8095 	bne.w	80253e6 <__ieee754_powf+0x546>
 80252bc:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80252b4 <__ieee754_powf+0x414>
 80252c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80252c4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80252c8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80252cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80252d0:	f73f aefa 	bgt.w	80250c8 <__ieee754_powf+0x228>
 80252d4:	15db      	asrs	r3, r3, #23
 80252d6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80252da:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80252de:	4103      	asrs	r3, r0
 80252e0:	4423      	add	r3, r4
 80252e2:	494b      	ldr	r1, [pc, #300]	; (8025410 <__ieee754_powf+0x570>)
 80252e4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80252e8:	3a7f      	subs	r2, #127	; 0x7f
 80252ea:	4111      	asrs	r1, r2
 80252ec:	ea23 0101 	bic.w	r1, r3, r1
 80252f0:	ee07 1a10 	vmov	s14, r1
 80252f4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80252f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80252fc:	f1c2 0217 	rsb	r2, r2, #23
 8025300:	4110      	asrs	r0, r2
 8025302:	2c00      	cmp	r4, #0
 8025304:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025308:	bfb8      	it	lt
 802530a:	4240      	neglt	r0, r0
 802530c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8025310:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8025414 <__ieee754_powf+0x574>
 8025314:	eddf 6a40 	vldr	s13, [pc, #256]	; 8025418 <__ieee754_powf+0x578>
 8025318:	ee17 3a10 	vmov	r3, s14
 802531c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8025320:	f023 030f 	bic.w	r3, r3, #15
 8025324:	ee07 3a10 	vmov	s14, r3
 8025328:	ee77 7a67 	vsub.f32	s15, s14, s15
 802532c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8025330:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8025334:	eddf 7a39 	vldr	s15, [pc, #228]	; 802541c <__ieee754_powf+0x57c>
 8025338:	eea0 0aa7 	vfma.f32	s0, s1, s15
 802533c:	eef0 7a40 	vmov.f32	s15, s0
 8025340:	eee7 7a26 	vfma.f32	s15, s14, s13
 8025344:	eeb0 6a67 	vmov.f32	s12, s15
 8025348:	eea7 6a66 	vfms.f32	s12, s14, s13
 802534c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8025350:	ee30 0a46 	vsub.f32	s0, s0, s12
 8025354:	eddf 6a32 	vldr	s13, [pc, #200]	; 8025420 <__ieee754_powf+0x580>
 8025358:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8025424 <__ieee754_powf+0x584>
 802535c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8025360:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8025428 <__ieee754_powf+0x588>
 8025364:	eea6 6a87 	vfma.f32	s12, s13, s14
 8025368:	eddf 6a30 	vldr	s13, [pc, #192]	; 802542c <__ieee754_powf+0x58c>
 802536c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8025370:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8025430 <__ieee754_powf+0x590>
 8025374:	eea6 6a87 	vfma.f32	s12, s13, s14
 8025378:	eef0 6a67 	vmov.f32	s13, s15
 802537c:	eee6 6a47 	vfms.f32	s13, s12, s14
 8025380:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8025384:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8025388:	ee76 6ac7 	vsub.f32	s13, s13, s14
 802538c:	eea7 0a80 	vfma.f32	s0, s15, s0
 8025390:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8025394:	ee37 0a40 	vsub.f32	s0, s14, s0
 8025398:	ee70 7a67 	vsub.f32	s15, s0, s15
 802539c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80253a0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80253a4:	ee10 3a10 	vmov	r3, s0
 80253a8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80253ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80253b0:	da1f      	bge.n	80253f2 <__ieee754_powf+0x552>
 80253b2:	f001 fbdb 	bl	8026b6c <scalbnf>
 80253b6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80253ba:	e589      	b.n	8024ed0 <__ieee754_powf+0x30>
 80253bc:	4a1d      	ldr	r2, [pc, #116]	; (8025434 <__ieee754_powf+0x594>)
 80253be:	4293      	cmp	r3, r2
 80253c0:	dd07      	ble.n	80253d2 <__ieee754_powf+0x532>
 80253c2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80253c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80253ca:	bf4c      	ite	mi
 80253cc:	2001      	movmi	r0, #1
 80253ce:	2000      	movpl	r0, #0
 80253d0:	e61f      	b.n	8025012 <__ieee754_powf+0x172>
 80253d2:	d108      	bne.n	80253e6 <__ieee754_powf+0x546>
 80253d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80253d8:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80253dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80253e0:	f6ff af78 	blt.w	80252d4 <__ieee754_powf+0x434>
 80253e4:	e7ed      	b.n	80253c2 <__ieee754_powf+0x522>
 80253e6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80253ea:	f73f af73 	bgt.w	80252d4 <__ieee754_powf+0x434>
 80253ee:	2000      	movs	r0, #0
 80253f0:	e78c      	b.n	802530c <__ieee754_powf+0x46c>
 80253f2:	ee00 3a10 	vmov	s0, r3
 80253f6:	e7de      	b.n	80253b6 <__ieee754_powf+0x516>
 80253f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80253fc:	e568      	b.n	8024ed0 <__ieee754_powf+0x30>
 80253fe:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8025438 <__ieee754_powf+0x598>
 8025402:	e565      	b.n	8024ed0 <__ieee754_powf+0x30>
 8025404:	eeb0 0a48 	vmov.f32	s0, s16
 8025408:	e562      	b.n	8024ed0 <__ieee754_powf+0x30>
 802540a:	2700      	movs	r7, #0
 802540c:	e58d      	b.n	8024f2a <__ieee754_powf+0x8a>
 802540e:	bf00      	nop
 8025410:	007fffff 	.word	0x007fffff
 8025414:	35bfbe8c 	.word	0x35bfbe8c
 8025418:	3f317200 	.word	0x3f317200
 802541c:	3f317218 	.word	0x3f317218
 8025420:	b5ddea0e 	.word	0xb5ddea0e
 8025424:	3331bb4c 	.word	0x3331bb4c
 8025428:	388ab355 	.word	0x388ab355
 802542c:	bb360b61 	.word	0xbb360b61
 8025430:	3e2aaaab 	.word	0x3e2aaaab
 8025434:	43160000 	.word	0x43160000
 8025438:	00000000 	.word	0x00000000

0802543c <__ieee754_rem_pio2f>:
 802543c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802543e:	ee10 6a10 	vmov	r6, s0
 8025442:	4b8e      	ldr	r3, [pc, #568]	; (802567c <__ieee754_rem_pio2f+0x240>)
 8025444:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8025448:	429d      	cmp	r5, r3
 802544a:	b087      	sub	sp, #28
 802544c:	eef0 7a40 	vmov.f32	s15, s0
 8025450:	4604      	mov	r4, r0
 8025452:	dc05      	bgt.n	8025460 <__ieee754_rem_pio2f+0x24>
 8025454:	2300      	movs	r3, #0
 8025456:	ed80 0a00 	vstr	s0, [r0]
 802545a:	6043      	str	r3, [r0, #4]
 802545c:	2000      	movs	r0, #0
 802545e:	e01a      	b.n	8025496 <__ieee754_rem_pio2f+0x5a>
 8025460:	4b87      	ldr	r3, [pc, #540]	; (8025680 <__ieee754_rem_pio2f+0x244>)
 8025462:	429d      	cmp	r5, r3
 8025464:	dc46      	bgt.n	80254f4 <__ieee754_rem_pio2f+0xb8>
 8025466:	2e00      	cmp	r6, #0
 8025468:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8025684 <__ieee754_rem_pio2f+0x248>
 802546c:	4b86      	ldr	r3, [pc, #536]	; (8025688 <__ieee754_rem_pio2f+0x24c>)
 802546e:	f025 050f 	bic.w	r5, r5, #15
 8025472:	dd1f      	ble.n	80254b4 <__ieee754_rem_pio2f+0x78>
 8025474:	429d      	cmp	r5, r3
 8025476:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802547a:	d00e      	beq.n	802549a <__ieee754_rem_pio2f+0x5e>
 802547c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 802568c <__ieee754_rem_pio2f+0x250>
 8025480:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8025484:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8025488:	ed80 0a00 	vstr	s0, [r0]
 802548c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025490:	2001      	movs	r0, #1
 8025492:	edc4 7a01 	vstr	s15, [r4, #4]
 8025496:	b007      	add	sp, #28
 8025498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802549a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8025690 <__ieee754_rem_pio2f+0x254>
 802549e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8025694 <__ieee754_rem_pio2f+0x258>
 80254a2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80254a6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80254aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80254ae:	edc0 6a00 	vstr	s13, [r0]
 80254b2:	e7eb      	b.n	802548c <__ieee754_rem_pio2f+0x50>
 80254b4:	429d      	cmp	r5, r3
 80254b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80254ba:	d00e      	beq.n	80254da <__ieee754_rem_pio2f+0x9e>
 80254bc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 802568c <__ieee754_rem_pio2f+0x250>
 80254c0:	ee37 0a87 	vadd.f32	s0, s15, s14
 80254c4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80254c8:	ed80 0a00 	vstr	s0, [r0]
 80254cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80254d0:	f04f 30ff 	mov.w	r0, #4294967295
 80254d4:	edc4 7a01 	vstr	s15, [r4, #4]
 80254d8:	e7dd      	b.n	8025496 <__ieee754_rem_pio2f+0x5a>
 80254da:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8025690 <__ieee754_rem_pio2f+0x254>
 80254de:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8025694 <__ieee754_rem_pio2f+0x258>
 80254e2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80254e6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80254ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80254ee:	edc0 6a00 	vstr	s13, [r0]
 80254f2:	e7eb      	b.n	80254cc <__ieee754_rem_pio2f+0x90>
 80254f4:	4b68      	ldr	r3, [pc, #416]	; (8025698 <__ieee754_rem_pio2f+0x25c>)
 80254f6:	429d      	cmp	r5, r3
 80254f8:	dc72      	bgt.n	80255e0 <__ieee754_rem_pio2f+0x1a4>
 80254fa:	f001 fadb 	bl	8026ab4 <fabsf>
 80254fe:	ed9f 7a67 	vldr	s14, [pc, #412]	; 802569c <__ieee754_rem_pio2f+0x260>
 8025502:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8025506:	eee0 7a07 	vfma.f32	s15, s0, s14
 802550a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802550e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8025512:	ee17 0a90 	vmov	r0, s15
 8025516:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8025684 <__ieee754_rem_pio2f+0x248>
 802551a:	eea7 0a67 	vfms.f32	s0, s14, s15
 802551e:	281f      	cmp	r0, #31
 8025520:	eddf 7a5a 	vldr	s15, [pc, #360]	; 802568c <__ieee754_rem_pio2f+0x250>
 8025524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8025528:	eeb1 6a47 	vneg.f32	s12, s14
 802552c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8025530:	ee16 2a90 	vmov	r2, s13
 8025534:	dc1c      	bgt.n	8025570 <__ieee754_rem_pio2f+0x134>
 8025536:	495a      	ldr	r1, [pc, #360]	; (80256a0 <__ieee754_rem_pio2f+0x264>)
 8025538:	1e47      	subs	r7, r0, #1
 802553a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 802553e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8025542:	428b      	cmp	r3, r1
 8025544:	d014      	beq.n	8025570 <__ieee754_rem_pio2f+0x134>
 8025546:	6022      	str	r2, [r4, #0]
 8025548:	ed94 7a00 	vldr	s14, [r4]
 802554c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8025550:	2e00      	cmp	r6, #0
 8025552:	ee30 0a67 	vsub.f32	s0, s0, s15
 8025556:	ed84 0a01 	vstr	s0, [r4, #4]
 802555a:	da9c      	bge.n	8025496 <__ieee754_rem_pio2f+0x5a>
 802555c:	eeb1 7a47 	vneg.f32	s14, s14
 8025560:	eeb1 0a40 	vneg.f32	s0, s0
 8025564:	ed84 7a00 	vstr	s14, [r4]
 8025568:	ed84 0a01 	vstr	s0, [r4, #4]
 802556c:	4240      	negs	r0, r0
 802556e:	e792      	b.n	8025496 <__ieee754_rem_pio2f+0x5a>
 8025570:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8025574:	15eb      	asrs	r3, r5, #23
 8025576:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 802557a:	2d08      	cmp	r5, #8
 802557c:	dde3      	ble.n	8025546 <__ieee754_rem_pio2f+0x10a>
 802557e:	eddf 7a44 	vldr	s15, [pc, #272]	; 8025690 <__ieee754_rem_pio2f+0x254>
 8025582:	eddf 5a44 	vldr	s11, [pc, #272]	; 8025694 <__ieee754_rem_pio2f+0x258>
 8025586:	eef0 6a40 	vmov.f32	s13, s0
 802558a:	eee6 6a27 	vfma.f32	s13, s12, s15
 802558e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8025592:	eea6 0a27 	vfma.f32	s0, s12, s15
 8025596:	eef0 7a40 	vmov.f32	s15, s0
 802559a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 802559e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80255a2:	ee15 2a90 	vmov	r2, s11
 80255a6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80255aa:	1a5b      	subs	r3, r3, r1
 80255ac:	2b19      	cmp	r3, #25
 80255ae:	dc04      	bgt.n	80255ba <__ieee754_rem_pio2f+0x17e>
 80255b0:	edc4 5a00 	vstr	s11, [r4]
 80255b4:	eeb0 0a66 	vmov.f32	s0, s13
 80255b8:	e7c6      	b.n	8025548 <__ieee754_rem_pio2f+0x10c>
 80255ba:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80256a4 <__ieee754_rem_pio2f+0x268>
 80255be:	eeb0 0a66 	vmov.f32	s0, s13
 80255c2:	eea6 0a25 	vfma.f32	s0, s12, s11
 80255c6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80255ca:	eddf 6a37 	vldr	s13, [pc, #220]	; 80256a8 <__ieee754_rem_pio2f+0x26c>
 80255ce:	eee6 7a25 	vfma.f32	s15, s12, s11
 80255d2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80255d6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80255da:	ed84 7a00 	vstr	s14, [r4]
 80255de:	e7b3      	b.n	8025548 <__ieee754_rem_pio2f+0x10c>
 80255e0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80255e4:	db06      	blt.n	80255f4 <__ieee754_rem_pio2f+0x1b8>
 80255e6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80255ea:	edc0 7a01 	vstr	s15, [r0, #4]
 80255ee:	edc0 7a00 	vstr	s15, [r0]
 80255f2:	e733      	b.n	802545c <__ieee754_rem_pio2f+0x20>
 80255f4:	15ea      	asrs	r2, r5, #23
 80255f6:	3a86      	subs	r2, #134	; 0x86
 80255f8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80255fc:	ee07 3a90 	vmov	s15, r3
 8025600:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8025604:	eddf 6a29 	vldr	s13, [pc, #164]	; 80256ac <__ieee754_rem_pio2f+0x270>
 8025608:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802560c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025610:	ed8d 7a03 	vstr	s14, [sp, #12]
 8025614:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8025618:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802561c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8025620:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025624:	ed8d 7a04 	vstr	s14, [sp, #16]
 8025628:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802562c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8025630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025634:	edcd 7a05 	vstr	s15, [sp, #20]
 8025638:	d11e      	bne.n	8025678 <__ieee754_rem_pio2f+0x23c>
 802563a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802563e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025642:	bf14      	ite	ne
 8025644:	2302      	movne	r3, #2
 8025646:	2301      	moveq	r3, #1
 8025648:	4919      	ldr	r1, [pc, #100]	; (80256b0 <__ieee754_rem_pio2f+0x274>)
 802564a:	9101      	str	r1, [sp, #4]
 802564c:	2102      	movs	r1, #2
 802564e:	9100      	str	r1, [sp, #0]
 8025650:	a803      	add	r0, sp, #12
 8025652:	4621      	mov	r1, r4
 8025654:	f000 fd6a 	bl	802612c <__kernel_rem_pio2f>
 8025658:	2e00      	cmp	r6, #0
 802565a:	f6bf af1c 	bge.w	8025496 <__ieee754_rem_pio2f+0x5a>
 802565e:	edd4 7a00 	vldr	s15, [r4]
 8025662:	eef1 7a67 	vneg.f32	s15, s15
 8025666:	edc4 7a00 	vstr	s15, [r4]
 802566a:	edd4 7a01 	vldr	s15, [r4, #4]
 802566e:	eef1 7a67 	vneg.f32	s15, s15
 8025672:	edc4 7a01 	vstr	s15, [r4, #4]
 8025676:	e779      	b.n	802556c <__ieee754_rem_pio2f+0x130>
 8025678:	2303      	movs	r3, #3
 802567a:	e7e5      	b.n	8025648 <__ieee754_rem_pio2f+0x20c>
 802567c:	3f490fd8 	.word	0x3f490fd8
 8025680:	4016cbe3 	.word	0x4016cbe3
 8025684:	3fc90f80 	.word	0x3fc90f80
 8025688:	3fc90fd0 	.word	0x3fc90fd0
 802568c:	37354443 	.word	0x37354443
 8025690:	37354400 	.word	0x37354400
 8025694:	2e85a308 	.word	0x2e85a308
 8025698:	43490f80 	.word	0x43490f80
 802569c:	3f22f984 	.word	0x3f22f984
 80256a0:	0802a7a0 	.word	0x0802a7a0
 80256a4:	2e85a300 	.word	0x2e85a300
 80256a8:	248d3132 	.word	0x248d3132
 80256ac:	43800000 	.word	0x43800000
 80256b0:	0802a820 	.word	0x0802a820

080256b4 <__ieee754_sqrtf>:
 80256b4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80256b8:	4770      	bx	lr
 80256ba:	0000      	movs	r0, r0
 80256bc:	0000      	movs	r0, r0
	...

080256c0 <__kernel_cos>:
 80256c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80256c4:	ec57 6b10 	vmov	r6, r7, d0
 80256c8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80256cc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80256d0:	ed8d 1b00 	vstr	d1, [sp]
 80256d4:	da07      	bge.n	80256e6 <__kernel_cos+0x26>
 80256d6:	ee10 0a10 	vmov	r0, s0
 80256da:	4639      	mov	r1, r7
 80256dc:	f7db f9da 	bl	8000a94 <__aeabi_d2iz>
 80256e0:	2800      	cmp	r0, #0
 80256e2:	f000 8088 	beq.w	80257f6 <__kernel_cos+0x136>
 80256e6:	4632      	mov	r2, r6
 80256e8:	463b      	mov	r3, r7
 80256ea:	4630      	mov	r0, r6
 80256ec:	4639      	mov	r1, r7
 80256ee:	f7da ff37 	bl	8000560 <__aeabi_dmul>
 80256f2:	4b51      	ldr	r3, [pc, #324]	; (8025838 <__kernel_cos+0x178>)
 80256f4:	2200      	movs	r2, #0
 80256f6:	4604      	mov	r4, r0
 80256f8:	460d      	mov	r5, r1
 80256fa:	f7da ff31 	bl	8000560 <__aeabi_dmul>
 80256fe:	a340      	add	r3, pc, #256	; (adr r3, 8025800 <__kernel_cos+0x140>)
 8025700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025704:	4682      	mov	sl, r0
 8025706:	468b      	mov	fp, r1
 8025708:	4620      	mov	r0, r4
 802570a:	4629      	mov	r1, r5
 802570c:	f7da ff28 	bl	8000560 <__aeabi_dmul>
 8025710:	a33d      	add	r3, pc, #244	; (adr r3, 8025808 <__kernel_cos+0x148>)
 8025712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025716:	f7da fd6d 	bl	80001f4 <__adddf3>
 802571a:	4622      	mov	r2, r4
 802571c:	462b      	mov	r3, r5
 802571e:	f7da ff1f 	bl	8000560 <__aeabi_dmul>
 8025722:	a33b      	add	r3, pc, #236	; (adr r3, 8025810 <__kernel_cos+0x150>)
 8025724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025728:	f7da fd62 	bl	80001f0 <__aeabi_dsub>
 802572c:	4622      	mov	r2, r4
 802572e:	462b      	mov	r3, r5
 8025730:	f7da ff16 	bl	8000560 <__aeabi_dmul>
 8025734:	a338      	add	r3, pc, #224	; (adr r3, 8025818 <__kernel_cos+0x158>)
 8025736:	e9d3 2300 	ldrd	r2, r3, [r3]
 802573a:	f7da fd5b 	bl	80001f4 <__adddf3>
 802573e:	4622      	mov	r2, r4
 8025740:	462b      	mov	r3, r5
 8025742:	f7da ff0d 	bl	8000560 <__aeabi_dmul>
 8025746:	a336      	add	r3, pc, #216	; (adr r3, 8025820 <__kernel_cos+0x160>)
 8025748:	e9d3 2300 	ldrd	r2, r3, [r3]
 802574c:	f7da fd50 	bl	80001f0 <__aeabi_dsub>
 8025750:	4622      	mov	r2, r4
 8025752:	462b      	mov	r3, r5
 8025754:	f7da ff04 	bl	8000560 <__aeabi_dmul>
 8025758:	a333      	add	r3, pc, #204	; (adr r3, 8025828 <__kernel_cos+0x168>)
 802575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802575e:	f7da fd49 	bl	80001f4 <__adddf3>
 8025762:	4622      	mov	r2, r4
 8025764:	462b      	mov	r3, r5
 8025766:	f7da fefb 	bl	8000560 <__aeabi_dmul>
 802576a:	4622      	mov	r2, r4
 802576c:	462b      	mov	r3, r5
 802576e:	f7da fef7 	bl	8000560 <__aeabi_dmul>
 8025772:	e9dd 2300 	ldrd	r2, r3, [sp]
 8025776:	4604      	mov	r4, r0
 8025778:	460d      	mov	r5, r1
 802577a:	4630      	mov	r0, r6
 802577c:	4639      	mov	r1, r7
 802577e:	f7da feef 	bl	8000560 <__aeabi_dmul>
 8025782:	460b      	mov	r3, r1
 8025784:	4602      	mov	r2, r0
 8025786:	4629      	mov	r1, r5
 8025788:	4620      	mov	r0, r4
 802578a:	f7da fd31 	bl	80001f0 <__aeabi_dsub>
 802578e:	4b2b      	ldr	r3, [pc, #172]	; (802583c <__kernel_cos+0x17c>)
 8025790:	4598      	cmp	r8, r3
 8025792:	4606      	mov	r6, r0
 8025794:	460f      	mov	r7, r1
 8025796:	dc10      	bgt.n	80257ba <__kernel_cos+0xfa>
 8025798:	4602      	mov	r2, r0
 802579a:	460b      	mov	r3, r1
 802579c:	4650      	mov	r0, sl
 802579e:	4659      	mov	r1, fp
 80257a0:	f7da fd26 	bl	80001f0 <__aeabi_dsub>
 80257a4:	460b      	mov	r3, r1
 80257a6:	4926      	ldr	r1, [pc, #152]	; (8025840 <__kernel_cos+0x180>)
 80257a8:	4602      	mov	r2, r0
 80257aa:	2000      	movs	r0, #0
 80257ac:	f7da fd20 	bl	80001f0 <__aeabi_dsub>
 80257b0:	ec41 0b10 	vmov	d0, r0, r1
 80257b4:	b003      	add	sp, #12
 80257b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80257ba:	4b22      	ldr	r3, [pc, #136]	; (8025844 <__kernel_cos+0x184>)
 80257bc:	4920      	ldr	r1, [pc, #128]	; (8025840 <__kernel_cos+0x180>)
 80257be:	4598      	cmp	r8, r3
 80257c0:	bfcc      	ite	gt
 80257c2:	4d21      	ldrgt	r5, [pc, #132]	; (8025848 <__kernel_cos+0x188>)
 80257c4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80257c8:	2400      	movs	r4, #0
 80257ca:	4622      	mov	r2, r4
 80257cc:	462b      	mov	r3, r5
 80257ce:	2000      	movs	r0, #0
 80257d0:	f7da fd0e 	bl	80001f0 <__aeabi_dsub>
 80257d4:	4622      	mov	r2, r4
 80257d6:	4680      	mov	r8, r0
 80257d8:	4689      	mov	r9, r1
 80257da:	462b      	mov	r3, r5
 80257dc:	4650      	mov	r0, sl
 80257de:	4659      	mov	r1, fp
 80257e0:	f7da fd06 	bl	80001f0 <__aeabi_dsub>
 80257e4:	4632      	mov	r2, r6
 80257e6:	463b      	mov	r3, r7
 80257e8:	f7da fd02 	bl	80001f0 <__aeabi_dsub>
 80257ec:	4602      	mov	r2, r0
 80257ee:	460b      	mov	r3, r1
 80257f0:	4640      	mov	r0, r8
 80257f2:	4649      	mov	r1, r9
 80257f4:	e7da      	b.n	80257ac <__kernel_cos+0xec>
 80257f6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8025830 <__kernel_cos+0x170>
 80257fa:	e7db      	b.n	80257b4 <__kernel_cos+0xf4>
 80257fc:	f3af 8000 	nop.w
 8025800:	be8838d4 	.word	0xbe8838d4
 8025804:	bda8fae9 	.word	0xbda8fae9
 8025808:	bdb4b1c4 	.word	0xbdb4b1c4
 802580c:	3e21ee9e 	.word	0x3e21ee9e
 8025810:	809c52ad 	.word	0x809c52ad
 8025814:	3e927e4f 	.word	0x3e927e4f
 8025818:	19cb1590 	.word	0x19cb1590
 802581c:	3efa01a0 	.word	0x3efa01a0
 8025820:	16c15177 	.word	0x16c15177
 8025824:	3f56c16c 	.word	0x3f56c16c
 8025828:	5555554c 	.word	0x5555554c
 802582c:	3fa55555 	.word	0x3fa55555
 8025830:	00000000 	.word	0x00000000
 8025834:	3ff00000 	.word	0x3ff00000
 8025838:	3fe00000 	.word	0x3fe00000
 802583c:	3fd33332 	.word	0x3fd33332
 8025840:	3ff00000 	.word	0x3ff00000
 8025844:	3fe90000 	.word	0x3fe90000
 8025848:	3fd20000 	.word	0x3fd20000
 802584c:	00000000 	.word	0x00000000

08025850 <__kernel_rem_pio2>:
 8025850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025854:	ed2d 8b02 	vpush	{d8}
 8025858:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 802585c:	f112 0f14 	cmn.w	r2, #20
 8025860:	9308      	str	r3, [sp, #32]
 8025862:	9101      	str	r1, [sp, #4]
 8025864:	4bc4      	ldr	r3, [pc, #784]	; (8025b78 <__kernel_rem_pio2+0x328>)
 8025866:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8025868:	900b      	str	r0, [sp, #44]	; 0x2c
 802586a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802586e:	9302      	str	r3, [sp, #8]
 8025870:	9b08      	ldr	r3, [sp, #32]
 8025872:	f103 33ff 	add.w	r3, r3, #4294967295
 8025876:	bfa8      	it	ge
 8025878:	1ed4      	subge	r4, r2, #3
 802587a:	9306      	str	r3, [sp, #24]
 802587c:	bfb2      	itee	lt
 802587e:	2400      	movlt	r4, #0
 8025880:	2318      	movge	r3, #24
 8025882:	fb94 f4f3 	sdivge	r4, r4, r3
 8025886:	f06f 0317 	mvn.w	r3, #23
 802588a:	fb04 3303 	mla	r3, r4, r3, r3
 802588e:	eb03 0a02 	add.w	sl, r3, r2
 8025892:	9b02      	ldr	r3, [sp, #8]
 8025894:	9a06      	ldr	r2, [sp, #24]
 8025896:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8025b68 <__kernel_rem_pio2+0x318>
 802589a:	eb03 0802 	add.w	r8, r3, r2
 802589e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80258a0:	1aa7      	subs	r7, r4, r2
 80258a2:	ae22      	add	r6, sp, #136	; 0x88
 80258a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80258a8:	2500      	movs	r5, #0
 80258aa:	4545      	cmp	r5, r8
 80258ac:	dd13      	ble.n	80258d6 <__kernel_rem_pio2+0x86>
 80258ae:	9b08      	ldr	r3, [sp, #32]
 80258b0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8025b68 <__kernel_rem_pio2+0x318>
 80258b4:	aa22      	add	r2, sp, #136	; 0x88
 80258b6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80258ba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80258be:	f04f 0800 	mov.w	r8, #0
 80258c2:	9b02      	ldr	r3, [sp, #8]
 80258c4:	4598      	cmp	r8, r3
 80258c6:	dc2f      	bgt.n	8025928 <__kernel_rem_pio2+0xd8>
 80258c8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80258cc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80258d0:	462f      	mov	r7, r5
 80258d2:	2600      	movs	r6, #0
 80258d4:	e01b      	b.n	802590e <__kernel_rem_pio2+0xbe>
 80258d6:	42ef      	cmn	r7, r5
 80258d8:	d407      	bmi.n	80258ea <__kernel_rem_pio2+0x9a>
 80258da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80258de:	f7da fdd5 	bl	800048c <__aeabi_i2d>
 80258e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80258e6:	3501      	adds	r5, #1
 80258e8:	e7df      	b.n	80258aa <__kernel_rem_pio2+0x5a>
 80258ea:	ec51 0b18 	vmov	r0, r1, d8
 80258ee:	e7f8      	b.n	80258e2 <__kernel_rem_pio2+0x92>
 80258f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80258f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80258f8:	f7da fe32 	bl	8000560 <__aeabi_dmul>
 80258fc:	4602      	mov	r2, r0
 80258fe:	460b      	mov	r3, r1
 8025900:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8025904:	f7da fc76 	bl	80001f4 <__adddf3>
 8025908:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802590c:	3601      	adds	r6, #1
 802590e:	9b06      	ldr	r3, [sp, #24]
 8025910:	429e      	cmp	r6, r3
 8025912:	f1a7 0708 	sub.w	r7, r7, #8
 8025916:	ddeb      	ble.n	80258f0 <__kernel_rem_pio2+0xa0>
 8025918:	ed9d 7b04 	vldr	d7, [sp, #16]
 802591c:	f108 0801 	add.w	r8, r8, #1
 8025920:	ecab 7b02 	vstmia	fp!, {d7}
 8025924:	3508      	adds	r5, #8
 8025926:	e7cc      	b.n	80258c2 <__kernel_rem_pio2+0x72>
 8025928:	9b02      	ldr	r3, [sp, #8]
 802592a:	aa0e      	add	r2, sp, #56	; 0x38
 802592c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8025930:	930d      	str	r3, [sp, #52]	; 0x34
 8025932:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8025934:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8025938:	9c02      	ldr	r4, [sp, #8]
 802593a:	930c      	str	r3, [sp, #48]	; 0x30
 802593c:	00e3      	lsls	r3, r4, #3
 802593e:	930a      	str	r3, [sp, #40]	; 0x28
 8025940:	ab9a      	add	r3, sp, #616	; 0x268
 8025942:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8025946:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 802594a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 802594e:	ab72      	add	r3, sp, #456	; 0x1c8
 8025950:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8025954:	46c3      	mov	fp, r8
 8025956:	46a1      	mov	r9, r4
 8025958:	f1b9 0f00 	cmp.w	r9, #0
 802595c:	f1a5 0508 	sub.w	r5, r5, #8
 8025960:	dc77      	bgt.n	8025a52 <__kernel_rem_pio2+0x202>
 8025962:	ec47 6b10 	vmov	d0, r6, r7
 8025966:	4650      	mov	r0, sl
 8025968:	f000 ff4a 	bl	8026800 <scalbn>
 802596c:	ec57 6b10 	vmov	r6, r7, d0
 8025970:	2200      	movs	r2, #0
 8025972:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8025976:	ee10 0a10 	vmov	r0, s0
 802597a:	4639      	mov	r1, r7
 802597c:	f7da fdf0 	bl	8000560 <__aeabi_dmul>
 8025980:	ec41 0b10 	vmov	d0, r0, r1
 8025984:	f000 febc 	bl	8026700 <floor>
 8025988:	4b7c      	ldr	r3, [pc, #496]	; (8025b7c <__kernel_rem_pio2+0x32c>)
 802598a:	ec51 0b10 	vmov	r0, r1, d0
 802598e:	2200      	movs	r2, #0
 8025990:	f7da fde6 	bl	8000560 <__aeabi_dmul>
 8025994:	4602      	mov	r2, r0
 8025996:	460b      	mov	r3, r1
 8025998:	4630      	mov	r0, r6
 802599a:	4639      	mov	r1, r7
 802599c:	f7da fc28 	bl	80001f0 <__aeabi_dsub>
 80259a0:	460f      	mov	r7, r1
 80259a2:	4606      	mov	r6, r0
 80259a4:	f7db f876 	bl	8000a94 <__aeabi_d2iz>
 80259a8:	9004      	str	r0, [sp, #16]
 80259aa:	f7da fd6f 	bl	800048c <__aeabi_i2d>
 80259ae:	4602      	mov	r2, r0
 80259b0:	460b      	mov	r3, r1
 80259b2:	4630      	mov	r0, r6
 80259b4:	4639      	mov	r1, r7
 80259b6:	f7da fc1b 	bl	80001f0 <__aeabi_dsub>
 80259ba:	f1ba 0f00 	cmp.w	sl, #0
 80259be:	4606      	mov	r6, r0
 80259c0:	460f      	mov	r7, r1
 80259c2:	dd6d      	ble.n	8025aa0 <__kernel_rem_pio2+0x250>
 80259c4:	1e62      	subs	r2, r4, #1
 80259c6:	ab0e      	add	r3, sp, #56	; 0x38
 80259c8:	9d04      	ldr	r5, [sp, #16]
 80259ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80259ce:	f1ca 0118 	rsb	r1, sl, #24
 80259d2:	fa40 f301 	asr.w	r3, r0, r1
 80259d6:	441d      	add	r5, r3
 80259d8:	408b      	lsls	r3, r1
 80259da:	1ac0      	subs	r0, r0, r3
 80259dc:	ab0e      	add	r3, sp, #56	; 0x38
 80259de:	9504      	str	r5, [sp, #16]
 80259e0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80259e4:	f1ca 0317 	rsb	r3, sl, #23
 80259e8:	fa40 fb03 	asr.w	fp, r0, r3
 80259ec:	f1bb 0f00 	cmp.w	fp, #0
 80259f0:	dd65      	ble.n	8025abe <__kernel_rem_pio2+0x26e>
 80259f2:	9b04      	ldr	r3, [sp, #16]
 80259f4:	2200      	movs	r2, #0
 80259f6:	3301      	adds	r3, #1
 80259f8:	9304      	str	r3, [sp, #16]
 80259fa:	4615      	mov	r5, r2
 80259fc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8025a00:	4294      	cmp	r4, r2
 8025a02:	f300 809c 	bgt.w	8025b3e <__kernel_rem_pio2+0x2ee>
 8025a06:	f1ba 0f00 	cmp.w	sl, #0
 8025a0a:	dd07      	ble.n	8025a1c <__kernel_rem_pio2+0x1cc>
 8025a0c:	f1ba 0f01 	cmp.w	sl, #1
 8025a10:	f000 80c0 	beq.w	8025b94 <__kernel_rem_pio2+0x344>
 8025a14:	f1ba 0f02 	cmp.w	sl, #2
 8025a18:	f000 80c6 	beq.w	8025ba8 <__kernel_rem_pio2+0x358>
 8025a1c:	f1bb 0f02 	cmp.w	fp, #2
 8025a20:	d14d      	bne.n	8025abe <__kernel_rem_pio2+0x26e>
 8025a22:	4632      	mov	r2, r6
 8025a24:	463b      	mov	r3, r7
 8025a26:	4956      	ldr	r1, [pc, #344]	; (8025b80 <__kernel_rem_pio2+0x330>)
 8025a28:	2000      	movs	r0, #0
 8025a2a:	f7da fbe1 	bl	80001f0 <__aeabi_dsub>
 8025a2e:	4606      	mov	r6, r0
 8025a30:	460f      	mov	r7, r1
 8025a32:	2d00      	cmp	r5, #0
 8025a34:	d043      	beq.n	8025abe <__kernel_rem_pio2+0x26e>
 8025a36:	4650      	mov	r0, sl
 8025a38:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8025b70 <__kernel_rem_pio2+0x320>
 8025a3c:	f000 fee0 	bl	8026800 <scalbn>
 8025a40:	4630      	mov	r0, r6
 8025a42:	4639      	mov	r1, r7
 8025a44:	ec53 2b10 	vmov	r2, r3, d0
 8025a48:	f7da fbd2 	bl	80001f0 <__aeabi_dsub>
 8025a4c:	4606      	mov	r6, r0
 8025a4e:	460f      	mov	r7, r1
 8025a50:	e035      	b.n	8025abe <__kernel_rem_pio2+0x26e>
 8025a52:	4b4c      	ldr	r3, [pc, #304]	; (8025b84 <__kernel_rem_pio2+0x334>)
 8025a54:	2200      	movs	r2, #0
 8025a56:	4630      	mov	r0, r6
 8025a58:	4639      	mov	r1, r7
 8025a5a:	f7da fd81 	bl	8000560 <__aeabi_dmul>
 8025a5e:	f7db f819 	bl	8000a94 <__aeabi_d2iz>
 8025a62:	f7da fd13 	bl	800048c <__aeabi_i2d>
 8025a66:	4602      	mov	r2, r0
 8025a68:	460b      	mov	r3, r1
 8025a6a:	ec43 2b18 	vmov	d8, r2, r3
 8025a6e:	4b46      	ldr	r3, [pc, #280]	; (8025b88 <__kernel_rem_pio2+0x338>)
 8025a70:	2200      	movs	r2, #0
 8025a72:	f7da fd75 	bl	8000560 <__aeabi_dmul>
 8025a76:	4602      	mov	r2, r0
 8025a78:	460b      	mov	r3, r1
 8025a7a:	4630      	mov	r0, r6
 8025a7c:	4639      	mov	r1, r7
 8025a7e:	f7da fbb7 	bl	80001f0 <__aeabi_dsub>
 8025a82:	f7db f807 	bl	8000a94 <__aeabi_d2iz>
 8025a86:	e9d5 2300 	ldrd	r2, r3, [r5]
 8025a8a:	f84b 0b04 	str.w	r0, [fp], #4
 8025a8e:	ec51 0b18 	vmov	r0, r1, d8
 8025a92:	f7da fbaf 	bl	80001f4 <__adddf3>
 8025a96:	f109 39ff 	add.w	r9, r9, #4294967295
 8025a9a:	4606      	mov	r6, r0
 8025a9c:	460f      	mov	r7, r1
 8025a9e:	e75b      	b.n	8025958 <__kernel_rem_pio2+0x108>
 8025aa0:	d106      	bne.n	8025ab0 <__kernel_rem_pio2+0x260>
 8025aa2:	1e63      	subs	r3, r4, #1
 8025aa4:	aa0e      	add	r2, sp, #56	; 0x38
 8025aa6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8025aaa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8025aae:	e79d      	b.n	80259ec <__kernel_rem_pio2+0x19c>
 8025ab0:	4b36      	ldr	r3, [pc, #216]	; (8025b8c <__kernel_rem_pio2+0x33c>)
 8025ab2:	2200      	movs	r2, #0
 8025ab4:	f7da ffda 	bl	8000a6c <__aeabi_dcmpge>
 8025ab8:	2800      	cmp	r0, #0
 8025aba:	d13d      	bne.n	8025b38 <__kernel_rem_pio2+0x2e8>
 8025abc:	4683      	mov	fp, r0
 8025abe:	2200      	movs	r2, #0
 8025ac0:	2300      	movs	r3, #0
 8025ac2:	4630      	mov	r0, r6
 8025ac4:	4639      	mov	r1, r7
 8025ac6:	f7da ffb3 	bl	8000a30 <__aeabi_dcmpeq>
 8025aca:	2800      	cmp	r0, #0
 8025acc:	f000 80c0 	beq.w	8025c50 <__kernel_rem_pio2+0x400>
 8025ad0:	1e65      	subs	r5, r4, #1
 8025ad2:	462b      	mov	r3, r5
 8025ad4:	2200      	movs	r2, #0
 8025ad6:	9902      	ldr	r1, [sp, #8]
 8025ad8:	428b      	cmp	r3, r1
 8025ada:	da6c      	bge.n	8025bb6 <__kernel_rem_pio2+0x366>
 8025adc:	2a00      	cmp	r2, #0
 8025ade:	f000 8089 	beq.w	8025bf4 <__kernel_rem_pio2+0x3a4>
 8025ae2:	ab0e      	add	r3, sp, #56	; 0x38
 8025ae4:	f1aa 0a18 	sub.w	sl, sl, #24
 8025ae8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8025aec:	2b00      	cmp	r3, #0
 8025aee:	f000 80ad 	beq.w	8025c4c <__kernel_rem_pio2+0x3fc>
 8025af2:	4650      	mov	r0, sl
 8025af4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8025b70 <__kernel_rem_pio2+0x320>
 8025af8:	f000 fe82 	bl	8026800 <scalbn>
 8025afc:	ab9a      	add	r3, sp, #616	; 0x268
 8025afe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8025b02:	ec57 6b10 	vmov	r6, r7, d0
 8025b06:	00ec      	lsls	r4, r5, #3
 8025b08:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8025b0c:	46aa      	mov	sl, r5
 8025b0e:	f1ba 0f00 	cmp.w	sl, #0
 8025b12:	f280 80d6 	bge.w	8025cc2 <__kernel_rem_pio2+0x472>
 8025b16:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8025b68 <__kernel_rem_pio2+0x318>
 8025b1a:	462e      	mov	r6, r5
 8025b1c:	2e00      	cmp	r6, #0
 8025b1e:	f2c0 8104 	blt.w	8025d2a <__kernel_rem_pio2+0x4da>
 8025b22:	ab72      	add	r3, sp, #456	; 0x1c8
 8025b24:	ed8d 8b06 	vstr	d8, [sp, #24]
 8025b28:	f8df a064 	ldr.w	sl, [pc, #100]	; 8025b90 <__kernel_rem_pio2+0x340>
 8025b2c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8025b30:	f04f 0800 	mov.w	r8, #0
 8025b34:	1baf      	subs	r7, r5, r6
 8025b36:	e0ea      	b.n	8025d0e <__kernel_rem_pio2+0x4be>
 8025b38:	f04f 0b02 	mov.w	fp, #2
 8025b3c:	e759      	b.n	80259f2 <__kernel_rem_pio2+0x1a2>
 8025b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8025b42:	b955      	cbnz	r5, 8025b5a <__kernel_rem_pio2+0x30a>
 8025b44:	b123      	cbz	r3, 8025b50 <__kernel_rem_pio2+0x300>
 8025b46:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8025b4a:	f8c8 3000 	str.w	r3, [r8]
 8025b4e:	2301      	movs	r3, #1
 8025b50:	3201      	adds	r2, #1
 8025b52:	f108 0804 	add.w	r8, r8, #4
 8025b56:	461d      	mov	r5, r3
 8025b58:	e752      	b.n	8025a00 <__kernel_rem_pio2+0x1b0>
 8025b5a:	1acb      	subs	r3, r1, r3
 8025b5c:	f8c8 3000 	str.w	r3, [r8]
 8025b60:	462b      	mov	r3, r5
 8025b62:	e7f5      	b.n	8025b50 <__kernel_rem_pio2+0x300>
 8025b64:	f3af 8000 	nop.w
	...
 8025b74:	3ff00000 	.word	0x3ff00000
 8025b78:	0802ab78 	.word	0x0802ab78
 8025b7c:	40200000 	.word	0x40200000
 8025b80:	3ff00000 	.word	0x3ff00000
 8025b84:	3e700000 	.word	0x3e700000
 8025b88:	41700000 	.word	0x41700000
 8025b8c:	3fe00000 	.word	0x3fe00000
 8025b90:	0802ab38 	.word	0x0802ab38
 8025b94:	1e62      	subs	r2, r4, #1
 8025b96:	ab0e      	add	r3, sp, #56	; 0x38
 8025b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025b9c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8025ba0:	a90e      	add	r1, sp, #56	; 0x38
 8025ba2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8025ba6:	e739      	b.n	8025a1c <__kernel_rem_pio2+0x1cc>
 8025ba8:	1e62      	subs	r2, r4, #1
 8025baa:	ab0e      	add	r3, sp, #56	; 0x38
 8025bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025bb0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8025bb4:	e7f4      	b.n	8025ba0 <__kernel_rem_pio2+0x350>
 8025bb6:	a90e      	add	r1, sp, #56	; 0x38
 8025bb8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8025bbc:	3b01      	subs	r3, #1
 8025bbe:	430a      	orrs	r2, r1
 8025bc0:	e789      	b.n	8025ad6 <__kernel_rem_pio2+0x286>
 8025bc2:	3301      	adds	r3, #1
 8025bc4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8025bc8:	2900      	cmp	r1, #0
 8025bca:	d0fa      	beq.n	8025bc2 <__kernel_rem_pio2+0x372>
 8025bcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025bce:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8025bd2:	446a      	add	r2, sp
 8025bd4:	3a98      	subs	r2, #152	; 0x98
 8025bd6:	920a      	str	r2, [sp, #40]	; 0x28
 8025bd8:	9a08      	ldr	r2, [sp, #32]
 8025bda:	18e3      	adds	r3, r4, r3
 8025bdc:	18a5      	adds	r5, r4, r2
 8025bde:	aa22      	add	r2, sp, #136	; 0x88
 8025be0:	f104 0801 	add.w	r8, r4, #1
 8025be4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8025be8:	9304      	str	r3, [sp, #16]
 8025bea:	9b04      	ldr	r3, [sp, #16]
 8025bec:	4543      	cmp	r3, r8
 8025bee:	da04      	bge.n	8025bfa <__kernel_rem_pio2+0x3aa>
 8025bf0:	461c      	mov	r4, r3
 8025bf2:	e6a3      	b.n	802593c <__kernel_rem_pio2+0xec>
 8025bf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025bf6:	2301      	movs	r3, #1
 8025bf8:	e7e4      	b.n	8025bc4 <__kernel_rem_pio2+0x374>
 8025bfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025bfc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8025c00:	f7da fc44 	bl	800048c <__aeabi_i2d>
 8025c04:	e8e5 0102 	strd	r0, r1, [r5], #8
 8025c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025c0a:	46ab      	mov	fp, r5
 8025c0c:	461c      	mov	r4, r3
 8025c0e:	f04f 0900 	mov.w	r9, #0
 8025c12:	2600      	movs	r6, #0
 8025c14:	2700      	movs	r7, #0
 8025c16:	9b06      	ldr	r3, [sp, #24]
 8025c18:	4599      	cmp	r9, r3
 8025c1a:	dd06      	ble.n	8025c2a <__kernel_rem_pio2+0x3da>
 8025c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025c1e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8025c22:	f108 0801 	add.w	r8, r8, #1
 8025c26:	930a      	str	r3, [sp, #40]	; 0x28
 8025c28:	e7df      	b.n	8025bea <__kernel_rem_pio2+0x39a>
 8025c2a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8025c2e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8025c32:	f7da fc95 	bl	8000560 <__aeabi_dmul>
 8025c36:	4602      	mov	r2, r0
 8025c38:	460b      	mov	r3, r1
 8025c3a:	4630      	mov	r0, r6
 8025c3c:	4639      	mov	r1, r7
 8025c3e:	f7da fad9 	bl	80001f4 <__adddf3>
 8025c42:	f109 0901 	add.w	r9, r9, #1
 8025c46:	4606      	mov	r6, r0
 8025c48:	460f      	mov	r7, r1
 8025c4a:	e7e4      	b.n	8025c16 <__kernel_rem_pio2+0x3c6>
 8025c4c:	3d01      	subs	r5, #1
 8025c4e:	e748      	b.n	8025ae2 <__kernel_rem_pio2+0x292>
 8025c50:	ec47 6b10 	vmov	d0, r6, r7
 8025c54:	f1ca 0000 	rsb	r0, sl, #0
 8025c58:	f000 fdd2 	bl	8026800 <scalbn>
 8025c5c:	ec57 6b10 	vmov	r6, r7, d0
 8025c60:	4ba0      	ldr	r3, [pc, #640]	; (8025ee4 <__kernel_rem_pio2+0x694>)
 8025c62:	ee10 0a10 	vmov	r0, s0
 8025c66:	2200      	movs	r2, #0
 8025c68:	4639      	mov	r1, r7
 8025c6a:	f7da feff 	bl	8000a6c <__aeabi_dcmpge>
 8025c6e:	b1f8      	cbz	r0, 8025cb0 <__kernel_rem_pio2+0x460>
 8025c70:	4b9d      	ldr	r3, [pc, #628]	; (8025ee8 <__kernel_rem_pio2+0x698>)
 8025c72:	2200      	movs	r2, #0
 8025c74:	4630      	mov	r0, r6
 8025c76:	4639      	mov	r1, r7
 8025c78:	f7da fc72 	bl	8000560 <__aeabi_dmul>
 8025c7c:	f7da ff0a 	bl	8000a94 <__aeabi_d2iz>
 8025c80:	4680      	mov	r8, r0
 8025c82:	f7da fc03 	bl	800048c <__aeabi_i2d>
 8025c86:	4b97      	ldr	r3, [pc, #604]	; (8025ee4 <__kernel_rem_pio2+0x694>)
 8025c88:	2200      	movs	r2, #0
 8025c8a:	f7da fc69 	bl	8000560 <__aeabi_dmul>
 8025c8e:	460b      	mov	r3, r1
 8025c90:	4602      	mov	r2, r0
 8025c92:	4639      	mov	r1, r7
 8025c94:	4630      	mov	r0, r6
 8025c96:	f7da faab 	bl	80001f0 <__aeabi_dsub>
 8025c9a:	f7da fefb 	bl	8000a94 <__aeabi_d2iz>
 8025c9e:	1c65      	adds	r5, r4, #1
 8025ca0:	ab0e      	add	r3, sp, #56	; 0x38
 8025ca2:	f10a 0a18 	add.w	sl, sl, #24
 8025ca6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8025caa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8025cae:	e720      	b.n	8025af2 <__kernel_rem_pio2+0x2a2>
 8025cb0:	4630      	mov	r0, r6
 8025cb2:	4639      	mov	r1, r7
 8025cb4:	f7da feee 	bl	8000a94 <__aeabi_d2iz>
 8025cb8:	ab0e      	add	r3, sp, #56	; 0x38
 8025cba:	4625      	mov	r5, r4
 8025cbc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8025cc0:	e717      	b.n	8025af2 <__kernel_rem_pio2+0x2a2>
 8025cc2:	ab0e      	add	r3, sp, #56	; 0x38
 8025cc4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8025cc8:	f7da fbe0 	bl	800048c <__aeabi_i2d>
 8025ccc:	4632      	mov	r2, r6
 8025cce:	463b      	mov	r3, r7
 8025cd0:	f7da fc46 	bl	8000560 <__aeabi_dmul>
 8025cd4:	4b84      	ldr	r3, [pc, #528]	; (8025ee8 <__kernel_rem_pio2+0x698>)
 8025cd6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8025cda:	2200      	movs	r2, #0
 8025cdc:	4630      	mov	r0, r6
 8025cde:	4639      	mov	r1, r7
 8025ce0:	f7da fc3e 	bl	8000560 <__aeabi_dmul>
 8025ce4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025ce8:	4606      	mov	r6, r0
 8025cea:	460f      	mov	r7, r1
 8025cec:	e70f      	b.n	8025b0e <__kernel_rem_pio2+0x2be>
 8025cee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8025cf2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8025cf6:	f7da fc33 	bl	8000560 <__aeabi_dmul>
 8025cfa:	4602      	mov	r2, r0
 8025cfc:	460b      	mov	r3, r1
 8025cfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8025d02:	f7da fa77 	bl	80001f4 <__adddf3>
 8025d06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025d0a:	f108 0801 	add.w	r8, r8, #1
 8025d0e:	9b02      	ldr	r3, [sp, #8]
 8025d10:	4598      	cmp	r8, r3
 8025d12:	dc01      	bgt.n	8025d18 <__kernel_rem_pio2+0x4c8>
 8025d14:	45b8      	cmp	r8, r7
 8025d16:	ddea      	ble.n	8025cee <__kernel_rem_pio2+0x49e>
 8025d18:	ed9d 7b06 	vldr	d7, [sp, #24]
 8025d1c:	ab4a      	add	r3, sp, #296	; 0x128
 8025d1e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8025d22:	ed87 7b00 	vstr	d7, [r7]
 8025d26:	3e01      	subs	r6, #1
 8025d28:	e6f8      	b.n	8025b1c <__kernel_rem_pio2+0x2cc>
 8025d2a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8025d2c:	2b02      	cmp	r3, #2
 8025d2e:	dc0b      	bgt.n	8025d48 <__kernel_rem_pio2+0x4f8>
 8025d30:	2b00      	cmp	r3, #0
 8025d32:	dc35      	bgt.n	8025da0 <__kernel_rem_pio2+0x550>
 8025d34:	d059      	beq.n	8025dea <__kernel_rem_pio2+0x59a>
 8025d36:	9b04      	ldr	r3, [sp, #16]
 8025d38:	f003 0007 	and.w	r0, r3, #7
 8025d3c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8025d40:	ecbd 8b02 	vpop	{d8}
 8025d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025d48:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8025d4a:	2b03      	cmp	r3, #3
 8025d4c:	d1f3      	bne.n	8025d36 <__kernel_rem_pio2+0x4e6>
 8025d4e:	ab4a      	add	r3, sp, #296	; 0x128
 8025d50:	4423      	add	r3, r4
 8025d52:	9306      	str	r3, [sp, #24]
 8025d54:	461c      	mov	r4, r3
 8025d56:	469a      	mov	sl, r3
 8025d58:	9502      	str	r5, [sp, #8]
 8025d5a:	9b02      	ldr	r3, [sp, #8]
 8025d5c:	2b00      	cmp	r3, #0
 8025d5e:	f1aa 0a08 	sub.w	sl, sl, #8
 8025d62:	dc6b      	bgt.n	8025e3c <__kernel_rem_pio2+0x5ec>
 8025d64:	46aa      	mov	sl, r5
 8025d66:	f1ba 0f01 	cmp.w	sl, #1
 8025d6a:	f1a4 0408 	sub.w	r4, r4, #8
 8025d6e:	f300 8085 	bgt.w	8025e7c <__kernel_rem_pio2+0x62c>
 8025d72:	9c06      	ldr	r4, [sp, #24]
 8025d74:	2000      	movs	r0, #0
 8025d76:	3408      	adds	r4, #8
 8025d78:	2100      	movs	r1, #0
 8025d7a:	2d01      	cmp	r5, #1
 8025d7c:	f300 809d 	bgt.w	8025eba <__kernel_rem_pio2+0x66a>
 8025d80:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8025d84:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8025d88:	f1bb 0f00 	cmp.w	fp, #0
 8025d8c:	f040 809b 	bne.w	8025ec6 <__kernel_rem_pio2+0x676>
 8025d90:	9b01      	ldr	r3, [sp, #4]
 8025d92:	e9c3 5600 	strd	r5, r6, [r3]
 8025d96:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8025d9a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8025d9e:	e7ca      	b.n	8025d36 <__kernel_rem_pio2+0x4e6>
 8025da0:	3408      	adds	r4, #8
 8025da2:	ab4a      	add	r3, sp, #296	; 0x128
 8025da4:	441c      	add	r4, r3
 8025da6:	462e      	mov	r6, r5
 8025da8:	2000      	movs	r0, #0
 8025daa:	2100      	movs	r1, #0
 8025dac:	2e00      	cmp	r6, #0
 8025dae:	da36      	bge.n	8025e1e <__kernel_rem_pio2+0x5ce>
 8025db0:	f1bb 0f00 	cmp.w	fp, #0
 8025db4:	d039      	beq.n	8025e2a <__kernel_rem_pio2+0x5da>
 8025db6:	4602      	mov	r2, r0
 8025db8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025dbc:	9c01      	ldr	r4, [sp, #4]
 8025dbe:	e9c4 2300 	strd	r2, r3, [r4]
 8025dc2:	4602      	mov	r2, r0
 8025dc4:	460b      	mov	r3, r1
 8025dc6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8025dca:	f7da fa11 	bl	80001f0 <__aeabi_dsub>
 8025dce:	ae4c      	add	r6, sp, #304	; 0x130
 8025dd0:	2401      	movs	r4, #1
 8025dd2:	42a5      	cmp	r5, r4
 8025dd4:	da2c      	bge.n	8025e30 <__kernel_rem_pio2+0x5e0>
 8025dd6:	f1bb 0f00 	cmp.w	fp, #0
 8025dda:	d002      	beq.n	8025de2 <__kernel_rem_pio2+0x592>
 8025ddc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025de0:	4619      	mov	r1, r3
 8025de2:	9b01      	ldr	r3, [sp, #4]
 8025de4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8025de8:	e7a5      	b.n	8025d36 <__kernel_rem_pio2+0x4e6>
 8025dea:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8025dee:	eb0d 0403 	add.w	r4, sp, r3
 8025df2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8025df6:	2000      	movs	r0, #0
 8025df8:	2100      	movs	r1, #0
 8025dfa:	2d00      	cmp	r5, #0
 8025dfc:	da09      	bge.n	8025e12 <__kernel_rem_pio2+0x5c2>
 8025dfe:	f1bb 0f00 	cmp.w	fp, #0
 8025e02:	d002      	beq.n	8025e0a <__kernel_rem_pio2+0x5ba>
 8025e04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025e08:	4619      	mov	r1, r3
 8025e0a:	9b01      	ldr	r3, [sp, #4]
 8025e0c:	e9c3 0100 	strd	r0, r1, [r3]
 8025e10:	e791      	b.n	8025d36 <__kernel_rem_pio2+0x4e6>
 8025e12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8025e16:	f7da f9ed 	bl	80001f4 <__adddf3>
 8025e1a:	3d01      	subs	r5, #1
 8025e1c:	e7ed      	b.n	8025dfa <__kernel_rem_pio2+0x5aa>
 8025e1e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8025e22:	f7da f9e7 	bl	80001f4 <__adddf3>
 8025e26:	3e01      	subs	r6, #1
 8025e28:	e7c0      	b.n	8025dac <__kernel_rem_pio2+0x55c>
 8025e2a:	4602      	mov	r2, r0
 8025e2c:	460b      	mov	r3, r1
 8025e2e:	e7c5      	b.n	8025dbc <__kernel_rem_pio2+0x56c>
 8025e30:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8025e34:	f7da f9de 	bl	80001f4 <__adddf3>
 8025e38:	3401      	adds	r4, #1
 8025e3a:	e7ca      	b.n	8025dd2 <__kernel_rem_pio2+0x582>
 8025e3c:	e9da 8900 	ldrd	r8, r9, [sl]
 8025e40:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8025e44:	9b02      	ldr	r3, [sp, #8]
 8025e46:	3b01      	subs	r3, #1
 8025e48:	9302      	str	r3, [sp, #8]
 8025e4a:	4632      	mov	r2, r6
 8025e4c:	463b      	mov	r3, r7
 8025e4e:	4640      	mov	r0, r8
 8025e50:	4649      	mov	r1, r9
 8025e52:	f7da f9cf 	bl	80001f4 <__adddf3>
 8025e56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8025e5a:	4602      	mov	r2, r0
 8025e5c:	460b      	mov	r3, r1
 8025e5e:	4640      	mov	r0, r8
 8025e60:	4649      	mov	r1, r9
 8025e62:	f7da f9c5 	bl	80001f0 <__aeabi_dsub>
 8025e66:	4632      	mov	r2, r6
 8025e68:	463b      	mov	r3, r7
 8025e6a:	f7da f9c3 	bl	80001f4 <__adddf3>
 8025e6e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8025e72:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8025e76:	ed8a 7b00 	vstr	d7, [sl]
 8025e7a:	e76e      	b.n	8025d5a <__kernel_rem_pio2+0x50a>
 8025e7c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8025e80:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8025e84:	4640      	mov	r0, r8
 8025e86:	4632      	mov	r2, r6
 8025e88:	463b      	mov	r3, r7
 8025e8a:	4649      	mov	r1, r9
 8025e8c:	f7da f9b2 	bl	80001f4 <__adddf3>
 8025e90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025e94:	4602      	mov	r2, r0
 8025e96:	460b      	mov	r3, r1
 8025e98:	4640      	mov	r0, r8
 8025e9a:	4649      	mov	r1, r9
 8025e9c:	f7da f9a8 	bl	80001f0 <__aeabi_dsub>
 8025ea0:	4632      	mov	r2, r6
 8025ea2:	463b      	mov	r3, r7
 8025ea4:	f7da f9a6 	bl	80001f4 <__adddf3>
 8025ea8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025eac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8025eb0:	ed84 7b00 	vstr	d7, [r4]
 8025eb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025eb8:	e755      	b.n	8025d66 <__kernel_rem_pio2+0x516>
 8025eba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8025ebe:	f7da f999 	bl	80001f4 <__adddf3>
 8025ec2:	3d01      	subs	r5, #1
 8025ec4:	e759      	b.n	8025d7a <__kernel_rem_pio2+0x52a>
 8025ec6:	9b01      	ldr	r3, [sp, #4]
 8025ec8:	9a01      	ldr	r2, [sp, #4]
 8025eca:	601d      	str	r5, [r3, #0]
 8025ecc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8025ed0:	605c      	str	r4, [r3, #4]
 8025ed2:	609f      	str	r7, [r3, #8]
 8025ed4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8025ed8:	60d3      	str	r3, [r2, #12]
 8025eda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025ede:	6110      	str	r0, [r2, #16]
 8025ee0:	6153      	str	r3, [r2, #20]
 8025ee2:	e728      	b.n	8025d36 <__kernel_rem_pio2+0x4e6>
 8025ee4:	41700000 	.word	0x41700000
 8025ee8:	3e700000 	.word	0x3e700000
 8025eec:	00000000 	.word	0x00000000

08025ef0 <__kernel_sin>:
 8025ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ef4:	ed2d 8b04 	vpush	{d8-d9}
 8025ef8:	eeb0 8a41 	vmov.f32	s16, s2
 8025efc:	eef0 8a61 	vmov.f32	s17, s3
 8025f00:	ec55 4b10 	vmov	r4, r5, d0
 8025f04:	b083      	sub	sp, #12
 8025f06:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8025f0a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8025f0e:	9001      	str	r0, [sp, #4]
 8025f10:	da06      	bge.n	8025f20 <__kernel_sin+0x30>
 8025f12:	ee10 0a10 	vmov	r0, s0
 8025f16:	4629      	mov	r1, r5
 8025f18:	f7da fdbc 	bl	8000a94 <__aeabi_d2iz>
 8025f1c:	2800      	cmp	r0, #0
 8025f1e:	d051      	beq.n	8025fc4 <__kernel_sin+0xd4>
 8025f20:	4622      	mov	r2, r4
 8025f22:	462b      	mov	r3, r5
 8025f24:	4620      	mov	r0, r4
 8025f26:	4629      	mov	r1, r5
 8025f28:	f7da fb1a 	bl	8000560 <__aeabi_dmul>
 8025f2c:	4682      	mov	sl, r0
 8025f2e:	468b      	mov	fp, r1
 8025f30:	4602      	mov	r2, r0
 8025f32:	460b      	mov	r3, r1
 8025f34:	4620      	mov	r0, r4
 8025f36:	4629      	mov	r1, r5
 8025f38:	f7da fb12 	bl	8000560 <__aeabi_dmul>
 8025f3c:	a341      	add	r3, pc, #260	; (adr r3, 8026044 <__kernel_sin+0x154>)
 8025f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f42:	4680      	mov	r8, r0
 8025f44:	4689      	mov	r9, r1
 8025f46:	4650      	mov	r0, sl
 8025f48:	4659      	mov	r1, fp
 8025f4a:	f7da fb09 	bl	8000560 <__aeabi_dmul>
 8025f4e:	a33f      	add	r3, pc, #252	; (adr r3, 802604c <__kernel_sin+0x15c>)
 8025f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f54:	f7da f94c 	bl	80001f0 <__aeabi_dsub>
 8025f58:	4652      	mov	r2, sl
 8025f5a:	465b      	mov	r3, fp
 8025f5c:	f7da fb00 	bl	8000560 <__aeabi_dmul>
 8025f60:	a33c      	add	r3, pc, #240	; (adr r3, 8026054 <__kernel_sin+0x164>)
 8025f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f66:	f7da f945 	bl	80001f4 <__adddf3>
 8025f6a:	4652      	mov	r2, sl
 8025f6c:	465b      	mov	r3, fp
 8025f6e:	f7da faf7 	bl	8000560 <__aeabi_dmul>
 8025f72:	a33a      	add	r3, pc, #232	; (adr r3, 802605c <__kernel_sin+0x16c>)
 8025f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f78:	f7da f93a 	bl	80001f0 <__aeabi_dsub>
 8025f7c:	4652      	mov	r2, sl
 8025f7e:	465b      	mov	r3, fp
 8025f80:	f7da faee 	bl	8000560 <__aeabi_dmul>
 8025f84:	a337      	add	r3, pc, #220	; (adr r3, 8026064 <__kernel_sin+0x174>)
 8025f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f8a:	f7da f933 	bl	80001f4 <__adddf3>
 8025f8e:	9b01      	ldr	r3, [sp, #4]
 8025f90:	4606      	mov	r6, r0
 8025f92:	460f      	mov	r7, r1
 8025f94:	b9eb      	cbnz	r3, 8025fd2 <__kernel_sin+0xe2>
 8025f96:	4602      	mov	r2, r0
 8025f98:	460b      	mov	r3, r1
 8025f9a:	4650      	mov	r0, sl
 8025f9c:	4659      	mov	r1, fp
 8025f9e:	f7da fadf 	bl	8000560 <__aeabi_dmul>
 8025fa2:	a325      	add	r3, pc, #148	; (adr r3, 8026038 <__kernel_sin+0x148>)
 8025fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025fa8:	f7da f922 	bl	80001f0 <__aeabi_dsub>
 8025fac:	4642      	mov	r2, r8
 8025fae:	464b      	mov	r3, r9
 8025fb0:	f7da fad6 	bl	8000560 <__aeabi_dmul>
 8025fb4:	4602      	mov	r2, r0
 8025fb6:	460b      	mov	r3, r1
 8025fb8:	4620      	mov	r0, r4
 8025fba:	4629      	mov	r1, r5
 8025fbc:	f7da f91a 	bl	80001f4 <__adddf3>
 8025fc0:	4604      	mov	r4, r0
 8025fc2:	460d      	mov	r5, r1
 8025fc4:	ec45 4b10 	vmov	d0, r4, r5
 8025fc8:	b003      	add	sp, #12
 8025fca:	ecbd 8b04 	vpop	{d8-d9}
 8025fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025fd2:	4b1b      	ldr	r3, [pc, #108]	; (8026040 <__kernel_sin+0x150>)
 8025fd4:	ec51 0b18 	vmov	r0, r1, d8
 8025fd8:	2200      	movs	r2, #0
 8025fda:	f7da fac1 	bl	8000560 <__aeabi_dmul>
 8025fde:	4632      	mov	r2, r6
 8025fe0:	ec41 0b19 	vmov	d9, r0, r1
 8025fe4:	463b      	mov	r3, r7
 8025fe6:	4640      	mov	r0, r8
 8025fe8:	4649      	mov	r1, r9
 8025fea:	f7da fab9 	bl	8000560 <__aeabi_dmul>
 8025fee:	4602      	mov	r2, r0
 8025ff0:	460b      	mov	r3, r1
 8025ff2:	ec51 0b19 	vmov	r0, r1, d9
 8025ff6:	f7da f8fb 	bl	80001f0 <__aeabi_dsub>
 8025ffa:	4652      	mov	r2, sl
 8025ffc:	465b      	mov	r3, fp
 8025ffe:	f7da faaf 	bl	8000560 <__aeabi_dmul>
 8026002:	ec53 2b18 	vmov	r2, r3, d8
 8026006:	f7da f8f3 	bl	80001f0 <__aeabi_dsub>
 802600a:	a30b      	add	r3, pc, #44	; (adr r3, 8026038 <__kernel_sin+0x148>)
 802600c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026010:	4606      	mov	r6, r0
 8026012:	460f      	mov	r7, r1
 8026014:	4640      	mov	r0, r8
 8026016:	4649      	mov	r1, r9
 8026018:	f7da faa2 	bl	8000560 <__aeabi_dmul>
 802601c:	4602      	mov	r2, r0
 802601e:	460b      	mov	r3, r1
 8026020:	4630      	mov	r0, r6
 8026022:	4639      	mov	r1, r7
 8026024:	f7da f8e6 	bl	80001f4 <__adddf3>
 8026028:	4602      	mov	r2, r0
 802602a:	460b      	mov	r3, r1
 802602c:	4620      	mov	r0, r4
 802602e:	4629      	mov	r1, r5
 8026030:	f7da f8de 	bl	80001f0 <__aeabi_dsub>
 8026034:	e7c4      	b.n	8025fc0 <__kernel_sin+0xd0>
 8026036:	bf00      	nop
 8026038:	55555549 	.word	0x55555549
 802603c:	3fc55555 	.word	0x3fc55555
 8026040:	3fe00000 	.word	0x3fe00000
 8026044:	5acfd57c 	.word	0x5acfd57c
 8026048:	3de5d93a 	.word	0x3de5d93a
 802604c:	8a2b9ceb 	.word	0x8a2b9ceb
 8026050:	3e5ae5e6 	.word	0x3e5ae5e6
 8026054:	57b1fe7d 	.word	0x57b1fe7d
 8026058:	3ec71de3 	.word	0x3ec71de3
 802605c:	19c161d5 	.word	0x19c161d5
 8026060:	3f2a01a0 	.word	0x3f2a01a0
 8026064:	1110f8a6 	.word	0x1110f8a6
 8026068:	3f811111 	.word	0x3f811111

0802606c <__kernel_cosf>:
 802606c:	ee10 3a10 	vmov	r3, s0
 8026070:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8026074:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8026078:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 802607c:	da05      	bge.n	802608a <__kernel_cosf+0x1e>
 802607e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8026082:	ee17 2a90 	vmov	r2, s15
 8026086:	2a00      	cmp	r2, #0
 8026088:	d03d      	beq.n	8026106 <__kernel_cosf+0x9a>
 802608a:	ee60 5a00 	vmul.f32	s11, s0, s0
 802608e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802610c <__kernel_cosf+0xa0>
 8026092:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8026110 <__kernel_cosf+0xa4>
 8026096:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8026114 <__kernel_cosf+0xa8>
 802609a:	4a1f      	ldr	r2, [pc, #124]	; (8026118 <__kernel_cosf+0xac>)
 802609c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80260a0:	4293      	cmp	r3, r2
 80260a2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802611c <__kernel_cosf+0xb0>
 80260a6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80260aa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8026120 <__kernel_cosf+0xb4>
 80260ae:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80260b2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8026124 <__kernel_cosf+0xb8>
 80260b6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80260ba:	eeb0 7a66 	vmov.f32	s14, s13
 80260be:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80260c2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80260c6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80260ca:	ee67 6a25 	vmul.f32	s13, s14, s11
 80260ce:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80260d2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80260d6:	dc04      	bgt.n	80260e2 <__kernel_cosf+0x76>
 80260d8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80260dc:	ee36 0a47 	vsub.f32	s0, s12, s14
 80260e0:	4770      	bx	lr
 80260e2:	4a11      	ldr	r2, [pc, #68]	; (8026128 <__kernel_cosf+0xbc>)
 80260e4:	4293      	cmp	r3, r2
 80260e6:	bfda      	itte	le
 80260e8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80260ec:	ee06 3a90 	vmovle	s13, r3
 80260f0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80260f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80260f8:	ee36 0a66 	vsub.f32	s0, s12, s13
 80260fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026100:	ee30 0a67 	vsub.f32	s0, s0, s15
 8026104:	4770      	bx	lr
 8026106:	eeb0 0a46 	vmov.f32	s0, s12
 802610a:	4770      	bx	lr
 802610c:	ad47d74e 	.word	0xad47d74e
 8026110:	310f74f6 	.word	0x310f74f6
 8026114:	3d2aaaab 	.word	0x3d2aaaab
 8026118:	3e999999 	.word	0x3e999999
 802611c:	b493f27c 	.word	0xb493f27c
 8026120:	37d00d01 	.word	0x37d00d01
 8026124:	bab60b61 	.word	0xbab60b61
 8026128:	3f480000 	.word	0x3f480000

0802612c <__kernel_rem_pio2f>:
 802612c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026130:	ed2d 8b04 	vpush	{d8-d9}
 8026134:	b0d9      	sub	sp, #356	; 0x164
 8026136:	4688      	mov	r8, r1
 8026138:	9002      	str	r0, [sp, #8]
 802613a:	49bb      	ldr	r1, [pc, #748]	; (8026428 <__kernel_rem_pio2f+0x2fc>)
 802613c:	9866      	ldr	r0, [sp, #408]	; 0x198
 802613e:	9301      	str	r3, [sp, #4]
 8026140:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8026144:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8026148:	1e59      	subs	r1, r3, #1
 802614a:	1d13      	adds	r3, r2, #4
 802614c:	db27      	blt.n	802619e <__kernel_rem_pio2f+0x72>
 802614e:	f1b2 0b03 	subs.w	fp, r2, #3
 8026152:	bf48      	it	mi
 8026154:	f102 0b04 	addmi.w	fp, r2, #4
 8026158:	ea4f 00eb 	mov.w	r0, fp, asr #3
 802615c:	1c45      	adds	r5, r0, #1
 802615e:	00ec      	lsls	r4, r5, #3
 8026160:	1a47      	subs	r7, r0, r1
 8026162:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8026438 <__kernel_rem_pio2f+0x30c>
 8026166:	9403      	str	r4, [sp, #12]
 8026168:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 802616c:	eb0a 0c01 	add.w	ip, sl, r1
 8026170:	ae1c      	add	r6, sp, #112	; 0x70
 8026172:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8026176:	2400      	movs	r4, #0
 8026178:	4564      	cmp	r4, ip
 802617a:	dd12      	ble.n	80261a2 <__kernel_rem_pio2f+0x76>
 802617c:	9b01      	ldr	r3, [sp, #4]
 802617e:	ac1c      	add	r4, sp, #112	; 0x70
 8026180:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8026184:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8026188:	f04f 0c00 	mov.w	ip, #0
 802618c:	45d4      	cmp	ip, sl
 802618e:	dc27      	bgt.n	80261e0 <__kernel_rem_pio2f+0xb4>
 8026190:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8026194:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8026438 <__kernel_rem_pio2f+0x30c>
 8026198:	4627      	mov	r7, r4
 802619a:	2600      	movs	r6, #0
 802619c:	e016      	b.n	80261cc <__kernel_rem_pio2f+0xa0>
 802619e:	2000      	movs	r0, #0
 80261a0:	e7dc      	b.n	802615c <__kernel_rem_pio2f+0x30>
 80261a2:	42e7      	cmn	r7, r4
 80261a4:	bf5d      	ittte	pl
 80261a6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80261aa:	ee07 3a90 	vmovpl	s15, r3
 80261ae:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80261b2:	eef0 7a47 	vmovmi.f32	s15, s14
 80261b6:	ece6 7a01 	vstmia	r6!, {s15}
 80261ba:	3401      	adds	r4, #1
 80261bc:	e7dc      	b.n	8026178 <__kernel_rem_pio2f+0x4c>
 80261be:	ecf9 6a01 	vldmia	r9!, {s13}
 80261c2:	ed97 7a00 	vldr	s14, [r7]
 80261c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80261ca:	3601      	adds	r6, #1
 80261cc:	428e      	cmp	r6, r1
 80261ce:	f1a7 0704 	sub.w	r7, r7, #4
 80261d2:	ddf4      	ble.n	80261be <__kernel_rem_pio2f+0x92>
 80261d4:	eceb 7a01 	vstmia	fp!, {s15}
 80261d8:	f10c 0c01 	add.w	ip, ip, #1
 80261dc:	3404      	adds	r4, #4
 80261de:	e7d5      	b.n	802618c <__kernel_rem_pio2f+0x60>
 80261e0:	ab08      	add	r3, sp, #32
 80261e2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80261e6:	eddf 8a93 	vldr	s17, [pc, #588]	; 8026434 <__kernel_rem_pio2f+0x308>
 80261ea:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8026430 <__kernel_rem_pio2f+0x304>
 80261ee:	9304      	str	r3, [sp, #16]
 80261f0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80261f4:	4656      	mov	r6, sl
 80261f6:	00b3      	lsls	r3, r6, #2
 80261f8:	9305      	str	r3, [sp, #20]
 80261fa:	ab58      	add	r3, sp, #352	; 0x160
 80261fc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8026200:	ac08      	add	r4, sp, #32
 8026202:	ab44      	add	r3, sp, #272	; 0x110
 8026204:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8026208:	46a4      	mov	ip, r4
 802620a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 802620e:	4637      	mov	r7, r6
 8026210:	2f00      	cmp	r7, #0
 8026212:	f1a0 0004 	sub.w	r0, r0, #4
 8026216:	dc4f      	bgt.n	80262b8 <__kernel_rem_pio2f+0x18c>
 8026218:	4628      	mov	r0, r5
 802621a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 802621e:	f000 fca5 	bl	8026b6c <scalbnf>
 8026222:	eeb0 8a40 	vmov.f32	s16, s0
 8026226:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 802622a:	ee28 0a00 	vmul.f32	s0, s16, s0
 802622e:	f000 fc55 	bl	8026adc <floorf>
 8026232:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8026236:	eea0 8a67 	vfms.f32	s16, s0, s15
 802623a:	2d00      	cmp	r5, #0
 802623c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8026240:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8026244:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8026248:	ee17 9a90 	vmov	r9, s15
 802624c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8026250:	dd44      	ble.n	80262dc <__kernel_rem_pio2f+0x1b0>
 8026252:	f106 3cff 	add.w	ip, r6, #4294967295
 8026256:	ab08      	add	r3, sp, #32
 8026258:	f1c5 0e08 	rsb	lr, r5, #8
 802625c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8026260:	fa47 f00e 	asr.w	r0, r7, lr
 8026264:	4481      	add	r9, r0
 8026266:	fa00 f00e 	lsl.w	r0, r0, lr
 802626a:	1a3f      	subs	r7, r7, r0
 802626c:	f1c5 0007 	rsb	r0, r5, #7
 8026270:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8026274:	4107      	asrs	r7, r0
 8026276:	2f00      	cmp	r7, #0
 8026278:	dd3f      	ble.n	80262fa <__kernel_rem_pio2f+0x1ce>
 802627a:	f04f 0e00 	mov.w	lr, #0
 802627e:	f109 0901 	add.w	r9, r9, #1
 8026282:	4673      	mov	r3, lr
 8026284:	4576      	cmp	r6, lr
 8026286:	dc6b      	bgt.n	8026360 <__kernel_rem_pio2f+0x234>
 8026288:	2d00      	cmp	r5, #0
 802628a:	dd04      	ble.n	8026296 <__kernel_rem_pio2f+0x16a>
 802628c:	2d01      	cmp	r5, #1
 802628e:	d078      	beq.n	8026382 <__kernel_rem_pio2f+0x256>
 8026290:	2d02      	cmp	r5, #2
 8026292:	f000 8081 	beq.w	8026398 <__kernel_rem_pio2f+0x26c>
 8026296:	2f02      	cmp	r7, #2
 8026298:	d12f      	bne.n	80262fa <__kernel_rem_pio2f+0x1ce>
 802629a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802629e:	ee30 8a48 	vsub.f32	s16, s0, s16
 80262a2:	b353      	cbz	r3, 80262fa <__kernel_rem_pio2f+0x1ce>
 80262a4:	4628      	mov	r0, r5
 80262a6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80262aa:	f000 fc5f 	bl	8026b6c <scalbnf>
 80262ae:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80262b2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80262b6:	e020      	b.n	80262fa <__kernel_rem_pio2f+0x1ce>
 80262b8:	ee60 7a28 	vmul.f32	s15, s0, s17
 80262bc:	3f01      	subs	r7, #1
 80262be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80262c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80262c6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80262ca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80262ce:	ecac 0a01 	vstmia	ip!, {s0}
 80262d2:	ed90 0a00 	vldr	s0, [r0]
 80262d6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80262da:	e799      	b.n	8026210 <__kernel_rem_pio2f+0xe4>
 80262dc:	d105      	bne.n	80262ea <__kernel_rem_pio2f+0x1be>
 80262de:	1e70      	subs	r0, r6, #1
 80262e0:	ab08      	add	r3, sp, #32
 80262e2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80262e6:	11ff      	asrs	r7, r7, #7
 80262e8:	e7c5      	b.n	8026276 <__kernel_rem_pio2f+0x14a>
 80262ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80262ee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80262f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80262f6:	da31      	bge.n	802635c <__kernel_rem_pio2f+0x230>
 80262f8:	2700      	movs	r7, #0
 80262fa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80262fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026302:	f040 809b 	bne.w	802643c <__kernel_rem_pio2f+0x310>
 8026306:	1e74      	subs	r4, r6, #1
 8026308:	46a4      	mov	ip, r4
 802630a:	2000      	movs	r0, #0
 802630c:	45d4      	cmp	ip, sl
 802630e:	da4a      	bge.n	80263a6 <__kernel_rem_pio2f+0x27a>
 8026310:	2800      	cmp	r0, #0
 8026312:	d07a      	beq.n	802640a <__kernel_rem_pio2f+0x2de>
 8026314:	ab08      	add	r3, sp, #32
 8026316:	3d08      	subs	r5, #8
 8026318:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802631c:	2b00      	cmp	r3, #0
 802631e:	f000 8081 	beq.w	8026424 <__kernel_rem_pio2f+0x2f8>
 8026322:	4628      	mov	r0, r5
 8026324:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8026328:	00a5      	lsls	r5, r4, #2
 802632a:	f000 fc1f 	bl	8026b6c <scalbnf>
 802632e:	aa44      	add	r2, sp, #272	; 0x110
 8026330:	1d2b      	adds	r3, r5, #4
 8026332:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8026434 <__kernel_rem_pio2f+0x308>
 8026336:	18d1      	adds	r1, r2, r3
 8026338:	4622      	mov	r2, r4
 802633a:	2a00      	cmp	r2, #0
 802633c:	f280 80ae 	bge.w	802649c <__kernel_rem_pio2f+0x370>
 8026340:	4622      	mov	r2, r4
 8026342:	2a00      	cmp	r2, #0
 8026344:	f2c0 80cc 	blt.w	80264e0 <__kernel_rem_pio2f+0x3b4>
 8026348:	a944      	add	r1, sp, #272	; 0x110
 802634a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 802634e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 802642c <__kernel_rem_pio2f+0x300>
 8026352:	eddf 7a39 	vldr	s15, [pc, #228]	; 8026438 <__kernel_rem_pio2f+0x30c>
 8026356:	2000      	movs	r0, #0
 8026358:	1aa1      	subs	r1, r4, r2
 802635a:	e0b6      	b.n	80264ca <__kernel_rem_pio2f+0x39e>
 802635c:	2702      	movs	r7, #2
 802635e:	e78c      	b.n	802627a <__kernel_rem_pio2f+0x14e>
 8026360:	6820      	ldr	r0, [r4, #0]
 8026362:	b94b      	cbnz	r3, 8026378 <__kernel_rem_pio2f+0x24c>
 8026364:	b118      	cbz	r0, 802636e <__kernel_rem_pio2f+0x242>
 8026366:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 802636a:	6020      	str	r0, [r4, #0]
 802636c:	2001      	movs	r0, #1
 802636e:	f10e 0e01 	add.w	lr, lr, #1
 8026372:	3404      	adds	r4, #4
 8026374:	4603      	mov	r3, r0
 8026376:	e785      	b.n	8026284 <__kernel_rem_pio2f+0x158>
 8026378:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 802637c:	6020      	str	r0, [r4, #0]
 802637e:	4618      	mov	r0, r3
 8026380:	e7f5      	b.n	802636e <__kernel_rem_pio2f+0x242>
 8026382:	1e74      	subs	r4, r6, #1
 8026384:	a808      	add	r0, sp, #32
 8026386:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 802638a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 802638e:	f10d 0c20 	add.w	ip, sp, #32
 8026392:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8026396:	e77e      	b.n	8026296 <__kernel_rem_pio2f+0x16a>
 8026398:	1e74      	subs	r4, r6, #1
 802639a:	a808      	add	r0, sp, #32
 802639c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80263a0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80263a4:	e7f3      	b.n	802638e <__kernel_rem_pio2f+0x262>
 80263a6:	ab08      	add	r3, sp, #32
 80263a8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80263ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 80263b0:	4318      	orrs	r0, r3
 80263b2:	e7ab      	b.n	802630c <__kernel_rem_pio2f+0x1e0>
 80263b4:	f10c 0c01 	add.w	ip, ip, #1
 80263b8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80263bc:	2c00      	cmp	r4, #0
 80263be:	d0f9      	beq.n	80263b4 <__kernel_rem_pio2f+0x288>
 80263c0:	9b05      	ldr	r3, [sp, #20]
 80263c2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80263c6:	eb0d 0003 	add.w	r0, sp, r3
 80263ca:	9b01      	ldr	r3, [sp, #4]
 80263cc:	18f4      	adds	r4, r6, r3
 80263ce:	ab1c      	add	r3, sp, #112	; 0x70
 80263d0:	1c77      	adds	r7, r6, #1
 80263d2:	384c      	subs	r0, #76	; 0x4c
 80263d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80263d8:	4466      	add	r6, ip
 80263da:	42be      	cmp	r6, r7
 80263dc:	f6ff af0b 	blt.w	80261f6 <__kernel_rem_pio2f+0xca>
 80263e0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80263e4:	f8dd e008 	ldr.w	lr, [sp, #8]
 80263e8:	ee07 3a90 	vmov	s15, r3
 80263ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80263f0:	f04f 0c00 	mov.w	ip, #0
 80263f4:	ece4 7a01 	vstmia	r4!, {s15}
 80263f8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8026438 <__kernel_rem_pio2f+0x30c>
 80263fc:	46a1      	mov	r9, r4
 80263fe:	458c      	cmp	ip, r1
 8026400:	dd07      	ble.n	8026412 <__kernel_rem_pio2f+0x2e6>
 8026402:	ece0 7a01 	vstmia	r0!, {s15}
 8026406:	3701      	adds	r7, #1
 8026408:	e7e7      	b.n	80263da <__kernel_rem_pio2f+0x2ae>
 802640a:	9804      	ldr	r0, [sp, #16]
 802640c:	f04f 0c01 	mov.w	ip, #1
 8026410:	e7d2      	b.n	80263b8 <__kernel_rem_pio2f+0x28c>
 8026412:	ecfe 6a01 	vldmia	lr!, {s13}
 8026416:	ed39 7a01 	vldmdb	r9!, {s14}
 802641a:	f10c 0c01 	add.w	ip, ip, #1
 802641e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8026422:	e7ec      	b.n	80263fe <__kernel_rem_pio2f+0x2d2>
 8026424:	3c01      	subs	r4, #1
 8026426:	e775      	b.n	8026314 <__kernel_rem_pio2f+0x1e8>
 8026428:	0802abb4 	.word	0x0802abb4
 802642c:	0802ab88 	.word	0x0802ab88
 8026430:	43800000 	.word	0x43800000
 8026434:	3b800000 	.word	0x3b800000
 8026438:	00000000 	.word	0x00000000
 802643c:	9b03      	ldr	r3, [sp, #12]
 802643e:	eeb0 0a48 	vmov.f32	s0, s16
 8026442:	1a98      	subs	r0, r3, r2
 8026444:	f000 fb92 	bl	8026b6c <scalbnf>
 8026448:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8026430 <__kernel_rem_pio2f+0x304>
 802644c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8026450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026454:	db19      	blt.n	802648a <__kernel_rem_pio2f+0x35e>
 8026456:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8026434 <__kernel_rem_pio2f+0x308>
 802645a:	ee60 7a27 	vmul.f32	s15, s0, s15
 802645e:	aa08      	add	r2, sp, #32
 8026460:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8026464:	1c74      	adds	r4, r6, #1
 8026466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802646a:	3508      	adds	r5, #8
 802646c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8026470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8026474:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8026478:	ee10 3a10 	vmov	r3, s0
 802647c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8026480:	ee17 3a90 	vmov	r3, s15
 8026484:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8026488:	e74b      	b.n	8026322 <__kernel_rem_pio2f+0x1f6>
 802648a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802648e:	aa08      	add	r2, sp, #32
 8026490:	ee10 3a10 	vmov	r3, s0
 8026494:	4634      	mov	r4, r6
 8026496:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 802649a:	e742      	b.n	8026322 <__kernel_rem_pio2f+0x1f6>
 802649c:	a808      	add	r0, sp, #32
 802649e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80264a2:	9001      	str	r0, [sp, #4]
 80264a4:	ee07 0a90 	vmov	s15, r0
 80264a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80264ac:	3a01      	subs	r2, #1
 80264ae:	ee67 7a80 	vmul.f32	s15, s15, s0
 80264b2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80264b6:	ed61 7a01 	vstmdb	r1!, {s15}
 80264ba:	e73e      	b.n	802633a <__kernel_rem_pio2f+0x20e>
 80264bc:	ecfc 6a01 	vldmia	ip!, {s13}
 80264c0:	ecb6 7a01 	vldmia	r6!, {s14}
 80264c4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80264c8:	3001      	adds	r0, #1
 80264ca:	4550      	cmp	r0, sl
 80264cc:	dc01      	bgt.n	80264d2 <__kernel_rem_pio2f+0x3a6>
 80264ce:	4288      	cmp	r0, r1
 80264d0:	ddf4      	ble.n	80264bc <__kernel_rem_pio2f+0x390>
 80264d2:	a858      	add	r0, sp, #352	; 0x160
 80264d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80264d8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80264dc:	3a01      	subs	r2, #1
 80264de:	e730      	b.n	8026342 <__kernel_rem_pio2f+0x216>
 80264e0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80264e2:	2a02      	cmp	r2, #2
 80264e4:	dc09      	bgt.n	80264fa <__kernel_rem_pio2f+0x3ce>
 80264e6:	2a00      	cmp	r2, #0
 80264e8:	dc2a      	bgt.n	8026540 <__kernel_rem_pio2f+0x414>
 80264ea:	d043      	beq.n	8026574 <__kernel_rem_pio2f+0x448>
 80264ec:	f009 0007 	and.w	r0, r9, #7
 80264f0:	b059      	add	sp, #356	; 0x164
 80264f2:	ecbd 8b04 	vpop	{d8-d9}
 80264f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80264fa:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80264fc:	2b03      	cmp	r3, #3
 80264fe:	d1f5      	bne.n	80264ec <__kernel_rem_pio2f+0x3c0>
 8026500:	ab30      	add	r3, sp, #192	; 0xc0
 8026502:	442b      	add	r3, r5
 8026504:	461a      	mov	r2, r3
 8026506:	4619      	mov	r1, r3
 8026508:	4620      	mov	r0, r4
 802650a:	2800      	cmp	r0, #0
 802650c:	f1a1 0104 	sub.w	r1, r1, #4
 8026510:	dc51      	bgt.n	80265b6 <__kernel_rem_pio2f+0x48a>
 8026512:	4621      	mov	r1, r4
 8026514:	2901      	cmp	r1, #1
 8026516:	f1a2 0204 	sub.w	r2, r2, #4
 802651a:	dc5c      	bgt.n	80265d6 <__kernel_rem_pio2f+0x4aa>
 802651c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8026438 <__kernel_rem_pio2f+0x30c>
 8026520:	3304      	adds	r3, #4
 8026522:	2c01      	cmp	r4, #1
 8026524:	dc67      	bgt.n	80265f6 <__kernel_rem_pio2f+0x4ca>
 8026526:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 802652a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 802652e:	2f00      	cmp	r7, #0
 8026530:	d167      	bne.n	8026602 <__kernel_rem_pio2f+0x4d6>
 8026532:	edc8 6a00 	vstr	s13, [r8]
 8026536:	ed88 7a01 	vstr	s14, [r8, #4]
 802653a:	edc8 7a02 	vstr	s15, [r8, #8]
 802653e:	e7d5      	b.n	80264ec <__kernel_rem_pio2f+0x3c0>
 8026540:	aa30      	add	r2, sp, #192	; 0xc0
 8026542:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8026438 <__kernel_rem_pio2f+0x30c>
 8026546:	4413      	add	r3, r2
 8026548:	4622      	mov	r2, r4
 802654a:	2a00      	cmp	r2, #0
 802654c:	da24      	bge.n	8026598 <__kernel_rem_pio2f+0x46c>
 802654e:	b34f      	cbz	r7, 80265a4 <__kernel_rem_pio2f+0x478>
 8026550:	eef1 7a47 	vneg.f32	s15, s14
 8026554:	edc8 7a00 	vstr	s15, [r8]
 8026558:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 802655c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026560:	aa31      	add	r2, sp, #196	; 0xc4
 8026562:	2301      	movs	r3, #1
 8026564:	429c      	cmp	r4, r3
 8026566:	da20      	bge.n	80265aa <__kernel_rem_pio2f+0x47e>
 8026568:	b10f      	cbz	r7, 802656e <__kernel_rem_pio2f+0x442>
 802656a:	eef1 7a67 	vneg.f32	s15, s15
 802656e:	edc8 7a01 	vstr	s15, [r8, #4]
 8026572:	e7bb      	b.n	80264ec <__kernel_rem_pio2f+0x3c0>
 8026574:	aa30      	add	r2, sp, #192	; 0xc0
 8026576:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8026438 <__kernel_rem_pio2f+0x30c>
 802657a:	4413      	add	r3, r2
 802657c:	2c00      	cmp	r4, #0
 802657e:	da05      	bge.n	802658c <__kernel_rem_pio2f+0x460>
 8026580:	b10f      	cbz	r7, 8026586 <__kernel_rem_pio2f+0x45a>
 8026582:	eef1 7a67 	vneg.f32	s15, s15
 8026586:	edc8 7a00 	vstr	s15, [r8]
 802658a:	e7af      	b.n	80264ec <__kernel_rem_pio2f+0x3c0>
 802658c:	ed33 7a01 	vldmdb	r3!, {s14}
 8026590:	3c01      	subs	r4, #1
 8026592:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026596:	e7f1      	b.n	802657c <__kernel_rem_pio2f+0x450>
 8026598:	ed73 7a01 	vldmdb	r3!, {s15}
 802659c:	3a01      	subs	r2, #1
 802659e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80265a2:	e7d2      	b.n	802654a <__kernel_rem_pio2f+0x41e>
 80265a4:	eef0 7a47 	vmov.f32	s15, s14
 80265a8:	e7d4      	b.n	8026554 <__kernel_rem_pio2f+0x428>
 80265aa:	ecb2 7a01 	vldmia	r2!, {s14}
 80265ae:	3301      	adds	r3, #1
 80265b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80265b4:	e7d6      	b.n	8026564 <__kernel_rem_pio2f+0x438>
 80265b6:	edd1 7a00 	vldr	s15, [r1]
 80265ba:	edd1 6a01 	vldr	s13, [r1, #4]
 80265be:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80265c2:	3801      	subs	r0, #1
 80265c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80265c8:	ed81 7a00 	vstr	s14, [r1]
 80265cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80265d0:	edc1 7a01 	vstr	s15, [r1, #4]
 80265d4:	e799      	b.n	802650a <__kernel_rem_pio2f+0x3de>
 80265d6:	edd2 7a00 	vldr	s15, [r2]
 80265da:	edd2 6a01 	vldr	s13, [r2, #4]
 80265de:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80265e2:	3901      	subs	r1, #1
 80265e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80265e8:	ed82 7a00 	vstr	s14, [r2]
 80265ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80265f0:	edc2 7a01 	vstr	s15, [r2, #4]
 80265f4:	e78e      	b.n	8026514 <__kernel_rem_pio2f+0x3e8>
 80265f6:	ed33 7a01 	vldmdb	r3!, {s14}
 80265fa:	3c01      	subs	r4, #1
 80265fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026600:	e78f      	b.n	8026522 <__kernel_rem_pio2f+0x3f6>
 8026602:	eef1 6a66 	vneg.f32	s13, s13
 8026606:	eeb1 7a47 	vneg.f32	s14, s14
 802660a:	edc8 6a00 	vstr	s13, [r8]
 802660e:	ed88 7a01 	vstr	s14, [r8, #4]
 8026612:	eef1 7a67 	vneg.f32	s15, s15
 8026616:	e790      	b.n	802653a <__kernel_rem_pio2f+0x40e>

08026618 <__kernel_sinf>:
 8026618:	ee10 3a10 	vmov	r3, s0
 802661c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8026620:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8026624:	da04      	bge.n	8026630 <__kernel_sinf+0x18>
 8026626:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802662a:	ee17 3a90 	vmov	r3, s15
 802662e:	b35b      	cbz	r3, 8026688 <__kernel_sinf+0x70>
 8026630:	ee20 7a00 	vmul.f32	s14, s0, s0
 8026634:	eddf 7a15 	vldr	s15, [pc, #84]	; 802668c <__kernel_sinf+0x74>
 8026638:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8026690 <__kernel_sinf+0x78>
 802663c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8026640:	eddf 7a14 	vldr	s15, [pc, #80]	; 8026694 <__kernel_sinf+0x7c>
 8026644:	eee6 7a07 	vfma.f32	s15, s12, s14
 8026648:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8026698 <__kernel_sinf+0x80>
 802664c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8026650:	eddf 7a12 	vldr	s15, [pc, #72]	; 802669c <__kernel_sinf+0x84>
 8026654:	ee60 6a07 	vmul.f32	s13, s0, s14
 8026658:	eee6 7a07 	vfma.f32	s15, s12, s14
 802665c:	b930      	cbnz	r0, 802666c <__kernel_sinf+0x54>
 802665e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80266a0 <__kernel_sinf+0x88>
 8026662:	eea7 6a27 	vfma.f32	s12, s14, s15
 8026666:	eea6 0a26 	vfma.f32	s0, s12, s13
 802666a:	4770      	bx	lr
 802666c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8026670:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8026674:	eee0 7a86 	vfma.f32	s15, s1, s12
 8026678:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802667c:	eddf 7a09 	vldr	s15, [pc, #36]	; 80266a4 <__kernel_sinf+0x8c>
 8026680:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8026684:	ee30 0a60 	vsub.f32	s0, s0, s1
 8026688:	4770      	bx	lr
 802668a:	bf00      	nop
 802668c:	2f2ec9d3 	.word	0x2f2ec9d3
 8026690:	b2d72f34 	.word	0xb2d72f34
 8026694:	3638ef1b 	.word	0x3638ef1b
 8026698:	b9500d01 	.word	0xb9500d01
 802669c:	3c088889 	.word	0x3c088889
 80266a0:	be2aaaab 	.word	0xbe2aaaab
 80266a4:	3e2aaaab 	.word	0x3e2aaaab

080266a8 <with_errnof>:
 80266a8:	b513      	push	{r0, r1, r4, lr}
 80266aa:	4604      	mov	r4, r0
 80266ac:	ed8d 0a01 	vstr	s0, [sp, #4]
 80266b0:	f7fd fbbc 	bl	8023e2c <__errno>
 80266b4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80266b8:	6004      	str	r4, [r0, #0]
 80266ba:	b002      	add	sp, #8
 80266bc:	bd10      	pop	{r4, pc}

080266be <xflowf>:
 80266be:	b130      	cbz	r0, 80266ce <xflowf+0x10>
 80266c0:	eef1 7a40 	vneg.f32	s15, s0
 80266c4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80266c8:	2022      	movs	r0, #34	; 0x22
 80266ca:	f7ff bfed 	b.w	80266a8 <with_errnof>
 80266ce:	eef0 7a40 	vmov.f32	s15, s0
 80266d2:	e7f7      	b.n	80266c4 <xflowf+0x6>

080266d4 <__math_uflowf>:
 80266d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80266dc <__math_uflowf+0x8>
 80266d8:	f7ff bff1 	b.w	80266be <xflowf>
 80266dc:	10000000 	.word	0x10000000

080266e0 <__math_oflowf>:
 80266e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80266e8 <__math_oflowf+0x8>
 80266e4:	f7ff bfeb 	b.w	80266be <xflowf>
 80266e8:	70000000 	.word	0x70000000

080266ec <fabs>:
 80266ec:	ec51 0b10 	vmov	r0, r1, d0
 80266f0:	ee10 2a10 	vmov	r2, s0
 80266f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80266f8:	ec43 2b10 	vmov	d0, r2, r3
 80266fc:	4770      	bx	lr
	...

08026700 <floor>:
 8026700:	ec51 0b10 	vmov	r0, r1, d0
 8026704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026708:	f3c1 570a 	ubfx	r7, r1, #20, #11
 802670c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8026710:	2e13      	cmp	r6, #19
 8026712:	ee10 5a10 	vmov	r5, s0
 8026716:	ee10 8a10 	vmov	r8, s0
 802671a:	460c      	mov	r4, r1
 802671c:	dc32      	bgt.n	8026784 <floor+0x84>
 802671e:	2e00      	cmp	r6, #0
 8026720:	da14      	bge.n	802674c <floor+0x4c>
 8026722:	a333      	add	r3, pc, #204	; (adr r3, 80267f0 <floor+0xf0>)
 8026724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026728:	f7d9 fd64 	bl	80001f4 <__adddf3>
 802672c:	2200      	movs	r2, #0
 802672e:	2300      	movs	r3, #0
 8026730:	f7da f9a6 	bl	8000a80 <__aeabi_dcmpgt>
 8026734:	b138      	cbz	r0, 8026746 <floor+0x46>
 8026736:	2c00      	cmp	r4, #0
 8026738:	da57      	bge.n	80267ea <floor+0xea>
 802673a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 802673e:	431d      	orrs	r5, r3
 8026740:	d001      	beq.n	8026746 <floor+0x46>
 8026742:	4c2d      	ldr	r4, [pc, #180]	; (80267f8 <floor+0xf8>)
 8026744:	2500      	movs	r5, #0
 8026746:	4621      	mov	r1, r4
 8026748:	4628      	mov	r0, r5
 802674a:	e025      	b.n	8026798 <floor+0x98>
 802674c:	4f2b      	ldr	r7, [pc, #172]	; (80267fc <floor+0xfc>)
 802674e:	4137      	asrs	r7, r6
 8026750:	ea01 0307 	and.w	r3, r1, r7
 8026754:	4303      	orrs	r3, r0
 8026756:	d01f      	beq.n	8026798 <floor+0x98>
 8026758:	a325      	add	r3, pc, #148	; (adr r3, 80267f0 <floor+0xf0>)
 802675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802675e:	f7d9 fd49 	bl	80001f4 <__adddf3>
 8026762:	2200      	movs	r2, #0
 8026764:	2300      	movs	r3, #0
 8026766:	f7da f98b 	bl	8000a80 <__aeabi_dcmpgt>
 802676a:	2800      	cmp	r0, #0
 802676c:	d0eb      	beq.n	8026746 <floor+0x46>
 802676e:	2c00      	cmp	r4, #0
 8026770:	bfbe      	ittt	lt
 8026772:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8026776:	fa43 f606 	asrlt.w	r6, r3, r6
 802677a:	19a4      	addlt	r4, r4, r6
 802677c:	ea24 0407 	bic.w	r4, r4, r7
 8026780:	2500      	movs	r5, #0
 8026782:	e7e0      	b.n	8026746 <floor+0x46>
 8026784:	2e33      	cmp	r6, #51	; 0x33
 8026786:	dd0b      	ble.n	80267a0 <floor+0xa0>
 8026788:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802678c:	d104      	bne.n	8026798 <floor+0x98>
 802678e:	ee10 2a10 	vmov	r2, s0
 8026792:	460b      	mov	r3, r1
 8026794:	f7d9 fd2e 	bl	80001f4 <__adddf3>
 8026798:	ec41 0b10 	vmov	d0, r0, r1
 802679c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80267a0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80267a4:	f04f 33ff 	mov.w	r3, #4294967295
 80267a8:	fa23 f707 	lsr.w	r7, r3, r7
 80267ac:	4207      	tst	r7, r0
 80267ae:	d0f3      	beq.n	8026798 <floor+0x98>
 80267b0:	a30f      	add	r3, pc, #60	; (adr r3, 80267f0 <floor+0xf0>)
 80267b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80267b6:	f7d9 fd1d 	bl	80001f4 <__adddf3>
 80267ba:	2200      	movs	r2, #0
 80267bc:	2300      	movs	r3, #0
 80267be:	f7da f95f 	bl	8000a80 <__aeabi_dcmpgt>
 80267c2:	2800      	cmp	r0, #0
 80267c4:	d0bf      	beq.n	8026746 <floor+0x46>
 80267c6:	2c00      	cmp	r4, #0
 80267c8:	da02      	bge.n	80267d0 <floor+0xd0>
 80267ca:	2e14      	cmp	r6, #20
 80267cc:	d103      	bne.n	80267d6 <floor+0xd6>
 80267ce:	3401      	adds	r4, #1
 80267d0:	ea25 0507 	bic.w	r5, r5, r7
 80267d4:	e7b7      	b.n	8026746 <floor+0x46>
 80267d6:	2301      	movs	r3, #1
 80267d8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80267dc:	fa03 f606 	lsl.w	r6, r3, r6
 80267e0:	4435      	add	r5, r6
 80267e2:	4545      	cmp	r5, r8
 80267e4:	bf38      	it	cc
 80267e6:	18e4      	addcc	r4, r4, r3
 80267e8:	e7f2      	b.n	80267d0 <floor+0xd0>
 80267ea:	2500      	movs	r5, #0
 80267ec:	462c      	mov	r4, r5
 80267ee:	e7aa      	b.n	8026746 <floor+0x46>
 80267f0:	8800759c 	.word	0x8800759c
 80267f4:	7e37e43c 	.word	0x7e37e43c
 80267f8:	bff00000 	.word	0xbff00000
 80267fc:	000fffff 	.word	0x000fffff

08026800 <scalbn>:
 8026800:	b570      	push	{r4, r5, r6, lr}
 8026802:	ec55 4b10 	vmov	r4, r5, d0
 8026806:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802680a:	4606      	mov	r6, r0
 802680c:	462b      	mov	r3, r5
 802680e:	b99a      	cbnz	r2, 8026838 <scalbn+0x38>
 8026810:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8026814:	4323      	orrs	r3, r4
 8026816:	d036      	beq.n	8026886 <scalbn+0x86>
 8026818:	4b39      	ldr	r3, [pc, #228]	; (8026900 <scalbn+0x100>)
 802681a:	4629      	mov	r1, r5
 802681c:	ee10 0a10 	vmov	r0, s0
 8026820:	2200      	movs	r2, #0
 8026822:	f7d9 fe9d 	bl	8000560 <__aeabi_dmul>
 8026826:	4b37      	ldr	r3, [pc, #220]	; (8026904 <scalbn+0x104>)
 8026828:	429e      	cmp	r6, r3
 802682a:	4604      	mov	r4, r0
 802682c:	460d      	mov	r5, r1
 802682e:	da10      	bge.n	8026852 <scalbn+0x52>
 8026830:	a32b      	add	r3, pc, #172	; (adr r3, 80268e0 <scalbn+0xe0>)
 8026832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026836:	e03a      	b.n	80268ae <scalbn+0xae>
 8026838:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802683c:	428a      	cmp	r2, r1
 802683e:	d10c      	bne.n	802685a <scalbn+0x5a>
 8026840:	ee10 2a10 	vmov	r2, s0
 8026844:	4620      	mov	r0, r4
 8026846:	4629      	mov	r1, r5
 8026848:	f7d9 fcd4 	bl	80001f4 <__adddf3>
 802684c:	4604      	mov	r4, r0
 802684e:	460d      	mov	r5, r1
 8026850:	e019      	b.n	8026886 <scalbn+0x86>
 8026852:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8026856:	460b      	mov	r3, r1
 8026858:	3a36      	subs	r2, #54	; 0x36
 802685a:	4432      	add	r2, r6
 802685c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8026860:	428a      	cmp	r2, r1
 8026862:	dd08      	ble.n	8026876 <scalbn+0x76>
 8026864:	2d00      	cmp	r5, #0
 8026866:	a120      	add	r1, pc, #128	; (adr r1, 80268e8 <scalbn+0xe8>)
 8026868:	e9d1 0100 	ldrd	r0, r1, [r1]
 802686c:	da1c      	bge.n	80268a8 <scalbn+0xa8>
 802686e:	a120      	add	r1, pc, #128	; (adr r1, 80268f0 <scalbn+0xf0>)
 8026870:	e9d1 0100 	ldrd	r0, r1, [r1]
 8026874:	e018      	b.n	80268a8 <scalbn+0xa8>
 8026876:	2a00      	cmp	r2, #0
 8026878:	dd08      	ble.n	802688c <scalbn+0x8c>
 802687a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802687e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8026882:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8026886:	ec45 4b10 	vmov	d0, r4, r5
 802688a:	bd70      	pop	{r4, r5, r6, pc}
 802688c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8026890:	da19      	bge.n	80268c6 <scalbn+0xc6>
 8026892:	f24c 3350 	movw	r3, #50000	; 0xc350
 8026896:	429e      	cmp	r6, r3
 8026898:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 802689c:	dd0a      	ble.n	80268b4 <scalbn+0xb4>
 802689e:	a112      	add	r1, pc, #72	; (adr r1, 80268e8 <scalbn+0xe8>)
 80268a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80268a4:	2b00      	cmp	r3, #0
 80268a6:	d1e2      	bne.n	802686e <scalbn+0x6e>
 80268a8:	a30f      	add	r3, pc, #60	; (adr r3, 80268e8 <scalbn+0xe8>)
 80268aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80268ae:	f7d9 fe57 	bl	8000560 <__aeabi_dmul>
 80268b2:	e7cb      	b.n	802684c <scalbn+0x4c>
 80268b4:	a10a      	add	r1, pc, #40	; (adr r1, 80268e0 <scalbn+0xe0>)
 80268b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80268ba:	2b00      	cmp	r3, #0
 80268bc:	d0b8      	beq.n	8026830 <scalbn+0x30>
 80268be:	a10e      	add	r1, pc, #56	; (adr r1, 80268f8 <scalbn+0xf8>)
 80268c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80268c4:	e7b4      	b.n	8026830 <scalbn+0x30>
 80268c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80268ca:	3236      	adds	r2, #54	; 0x36
 80268cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80268d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80268d4:	4620      	mov	r0, r4
 80268d6:	4b0c      	ldr	r3, [pc, #48]	; (8026908 <scalbn+0x108>)
 80268d8:	2200      	movs	r2, #0
 80268da:	e7e8      	b.n	80268ae <scalbn+0xae>
 80268dc:	f3af 8000 	nop.w
 80268e0:	c2f8f359 	.word	0xc2f8f359
 80268e4:	01a56e1f 	.word	0x01a56e1f
 80268e8:	8800759c 	.word	0x8800759c
 80268ec:	7e37e43c 	.word	0x7e37e43c
 80268f0:	8800759c 	.word	0x8800759c
 80268f4:	fe37e43c 	.word	0xfe37e43c
 80268f8:	c2f8f359 	.word	0xc2f8f359
 80268fc:	81a56e1f 	.word	0x81a56e1f
 8026900:	43500000 	.word	0x43500000
 8026904:	ffff3cb0 	.word	0xffff3cb0
 8026908:	3c900000 	.word	0x3c900000

0802690c <atanf>:
 802690c:	b538      	push	{r3, r4, r5, lr}
 802690e:	ee10 5a10 	vmov	r5, s0
 8026912:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8026916:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 802691a:	eef0 7a40 	vmov.f32	s15, s0
 802691e:	db10      	blt.n	8026942 <atanf+0x36>
 8026920:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8026924:	dd04      	ble.n	8026930 <atanf+0x24>
 8026926:	ee70 7a00 	vadd.f32	s15, s0, s0
 802692a:	eeb0 0a67 	vmov.f32	s0, s15
 802692e:	bd38      	pop	{r3, r4, r5, pc}
 8026930:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8026a68 <atanf+0x15c>
 8026934:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8026a6c <atanf+0x160>
 8026938:	2d00      	cmp	r5, #0
 802693a:	bfd8      	it	le
 802693c:	eef0 7a40 	vmovle.f32	s15, s0
 8026940:	e7f3      	b.n	802692a <atanf+0x1e>
 8026942:	4b4b      	ldr	r3, [pc, #300]	; (8026a70 <atanf+0x164>)
 8026944:	429c      	cmp	r4, r3
 8026946:	dc10      	bgt.n	802696a <atanf+0x5e>
 8026948:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 802694c:	da0a      	bge.n	8026964 <atanf+0x58>
 802694e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8026a74 <atanf+0x168>
 8026952:	ee30 7a07 	vadd.f32	s14, s0, s14
 8026956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802695a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802695e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026962:	dce2      	bgt.n	802692a <atanf+0x1e>
 8026964:	f04f 33ff 	mov.w	r3, #4294967295
 8026968:	e013      	b.n	8026992 <atanf+0x86>
 802696a:	f000 f8a3 	bl	8026ab4 <fabsf>
 802696e:	4b42      	ldr	r3, [pc, #264]	; (8026a78 <atanf+0x16c>)
 8026970:	429c      	cmp	r4, r3
 8026972:	dc4f      	bgt.n	8026a14 <atanf+0x108>
 8026974:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8026978:	429c      	cmp	r4, r3
 802697a:	dc41      	bgt.n	8026a00 <atanf+0xf4>
 802697c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8026980:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8026984:	eea0 7a27 	vfma.f32	s14, s0, s15
 8026988:	2300      	movs	r3, #0
 802698a:	ee30 0a27 	vadd.f32	s0, s0, s15
 802698e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026992:	1c5a      	adds	r2, r3, #1
 8026994:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8026998:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8026a7c <atanf+0x170>
 802699c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8026a80 <atanf+0x174>
 80269a0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8026a84 <atanf+0x178>
 80269a4:	ee66 6a06 	vmul.f32	s13, s12, s12
 80269a8:	eee6 5a87 	vfma.f32	s11, s13, s14
 80269ac:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8026a88 <atanf+0x17c>
 80269b0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80269b4:	eddf 5a35 	vldr	s11, [pc, #212]	; 8026a8c <atanf+0x180>
 80269b8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80269bc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8026a90 <atanf+0x184>
 80269c0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80269c4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8026a94 <atanf+0x188>
 80269c8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80269cc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8026a98 <atanf+0x18c>
 80269d0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80269d4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8026a9c <atanf+0x190>
 80269d8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80269dc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8026aa0 <atanf+0x194>
 80269e0:	eea7 5a26 	vfma.f32	s10, s14, s13
 80269e4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8026aa4 <atanf+0x198>
 80269e8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80269ec:	ee27 7a26 	vmul.f32	s14, s14, s13
 80269f0:	eea5 7a86 	vfma.f32	s14, s11, s12
 80269f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80269f8:	d121      	bne.n	8026a3e <atanf+0x132>
 80269fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80269fe:	e794      	b.n	802692a <atanf+0x1e>
 8026a00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8026a04:	ee30 7a67 	vsub.f32	s14, s0, s15
 8026a08:	ee30 0a27 	vadd.f32	s0, s0, s15
 8026a0c:	2301      	movs	r3, #1
 8026a0e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026a12:	e7be      	b.n	8026992 <atanf+0x86>
 8026a14:	4b24      	ldr	r3, [pc, #144]	; (8026aa8 <atanf+0x19c>)
 8026a16:	429c      	cmp	r4, r3
 8026a18:	dc0b      	bgt.n	8026a32 <atanf+0x126>
 8026a1a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8026a1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026a22:	eea0 7a27 	vfma.f32	s14, s0, s15
 8026a26:	2302      	movs	r3, #2
 8026a28:	ee70 6a67 	vsub.f32	s13, s0, s15
 8026a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8026a30:	e7af      	b.n	8026992 <atanf+0x86>
 8026a32:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8026a36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026a3a:	2303      	movs	r3, #3
 8026a3c:	e7a9      	b.n	8026992 <atanf+0x86>
 8026a3e:	4a1b      	ldr	r2, [pc, #108]	; (8026aac <atanf+0x1a0>)
 8026a40:	491b      	ldr	r1, [pc, #108]	; (8026ab0 <atanf+0x1a4>)
 8026a42:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8026a46:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8026a4a:	ed93 0a00 	vldr	s0, [r3]
 8026a4e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8026a52:	ed92 0a00 	vldr	s0, [r2]
 8026a56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026a5a:	2d00      	cmp	r5, #0
 8026a5c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8026a60:	bfb8      	it	lt
 8026a62:	eef1 7a67 	vneglt.f32	s15, s15
 8026a66:	e760      	b.n	802692a <atanf+0x1e>
 8026a68:	3fc90fdb 	.word	0x3fc90fdb
 8026a6c:	bfc90fdb 	.word	0xbfc90fdb
 8026a70:	3edfffff 	.word	0x3edfffff
 8026a74:	7149f2ca 	.word	0x7149f2ca
 8026a78:	3f97ffff 	.word	0x3f97ffff
 8026a7c:	3c8569d7 	.word	0x3c8569d7
 8026a80:	3d4bda59 	.word	0x3d4bda59
 8026a84:	bd6ef16b 	.word	0xbd6ef16b
 8026a88:	3d886b35 	.word	0x3d886b35
 8026a8c:	3dba2e6e 	.word	0x3dba2e6e
 8026a90:	3e124925 	.word	0x3e124925
 8026a94:	3eaaaaab 	.word	0x3eaaaaab
 8026a98:	bd15a221 	.word	0xbd15a221
 8026a9c:	bd9d8795 	.word	0xbd9d8795
 8026aa0:	bde38e38 	.word	0xbde38e38
 8026aa4:	be4ccccd 	.word	0xbe4ccccd
 8026aa8:	401bffff 	.word	0x401bffff
 8026aac:	0802abc0 	.word	0x0802abc0
 8026ab0:	0802abd0 	.word	0x0802abd0

08026ab4 <fabsf>:
 8026ab4:	ee10 3a10 	vmov	r3, s0
 8026ab8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8026abc:	ee00 3a10 	vmov	s0, r3
 8026ac0:	4770      	bx	lr

08026ac2 <finitef>:
 8026ac2:	b082      	sub	sp, #8
 8026ac4:	ed8d 0a01 	vstr	s0, [sp, #4]
 8026ac8:	9801      	ldr	r0, [sp, #4]
 8026aca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8026ace:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8026ad2:	bfac      	ite	ge
 8026ad4:	2000      	movge	r0, #0
 8026ad6:	2001      	movlt	r0, #1
 8026ad8:	b002      	add	sp, #8
 8026ada:	4770      	bx	lr

08026adc <floorf>:
 8026adc:	ee10 3a10 	vmov	r3, s0
 8026ae0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8026ae4:	3a7f      	subs	r2, #127	; 0x7f
 8026ae6:	2a16      	cmp	r2, #22
 8026ae8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8026aec:	dc2a      	bgt.n	8026b44 <floorf+0x68>
 8026aee:	2a00      	cmp	r2, #0
 8026af0:	da11      	bge.n	8026b16 <floorf+0x3a>
 8026af2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8026b54 <floorf+0x78>
 8026af6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8026afa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8026afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b02:	dd05      	ble.n	8026b10 <floorf+0x34>
 8026b04:	2b00      	cmp	r3, #0
 8026b06:	da23      	bge.n	8026b50 <floorf+0x74>
 8026b08:	4a13      	ldr	r2, [pc, #76]	; (8026b58 <floorf+0x7c>)
 8026b0a:	2900      	cmp	r1, #0
 8026b0c:	bf18      	it	ne
 8026b0e:	4613      	movne	r3, r2
 8026b10:	ee00 3a10 	vmov	s0, r3
 8026b14:	4770      	bx	lr
 8026b16:	4911      	ldr	r1, [pc, #68]	; (8026b5c <floorf+0x80>)
 8026b18:	4111      	asrs	r1, r2
 8026b1a:	420b      	tst	r3, r1
 8026b1c:	d0fa      	beq.n	8026b14 <floorf+0x38>
 8026b1e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8026b54 <floorf+0x78>
 8026b22:	ee30 0a27 	vadd.f32	s0, s0, s15
 8026b26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8026b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b2e:	ddef      	ble.n	8026b10 <floorf+0x34>
 8026b30:	2b00      	cmp	r3, #0
 8026b32:	bfbe      	ittt	lt
 8026b34:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8026b38:	fa40 f202 	asrlt.w	r2, r0, r2
 8026b3c:	189b      	addlt	r3, r3, r2
 8026b3e:	ea23 0301 	bic.w	r3, r3, r1
 8026b42:	e7e5      	b.n	8026b10 <floorf+0x34>
 8026b44:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8026b48:	d3e4      	bcc.n	8026b14 <floorf+0x38>
 8026b4a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8026b4e:	4770      	bx	lr
 8026b50:	2300      	movs	r3, #0
 8026b52:	e7dd      	b.n	8026b10 <floorf+0x34>
 8026b54:	7149f2ca 	.word	0x7149f2ca
 8026b58:	bf800000 	.word	0xbf800000
 8026b5c:	007fffff 	.word	0x007fffff

08026b60 <nanf>:
 8026b60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8026b68 <nanf+0x8>
 8026b64:	4770      	bx	lr
 8026b66:	bf00      	nop
 8026b68:	7fc00000 	.word	0x7fc00000

08026b6c <scalbnf>:
 8026b6c:	ee10 3a10 	vmov	r3, s0
 8026b70:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8026b74:	d025      	beq.n	8026bc2 <scalbnf+0x56>
 8026b76:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8026b7a:	d302      	bcc.n	8026b82 <scalbnf+0x16>
 8026b7c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8026b80:	4770      	bx	lr
 8026b82:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8026b86:	d122      	bne.n	8026bce <scalbnf+0x62>
 8026b88:	4b2a      	ldr	r3, [pc, #168]	; (8026c34 <scalbnf+0xc8>)
 8026b8a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8026c38 <scalbnf+0xcc>
 8026b8e:	4298      	cmp	r0, r3
 8026b90:	ee20 0a27 	vmul.f32	s0, s0, s15
 8026b94:	db16      	blt.n	8026bc4 <scalbnf+0x58>
 8026b96:	ee10 3a10 	vmov	r3, s0
 8026b9a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8026b9e:	3a19      	subs	r2, #25
 8026ba0:	4402      	add	r2, r0
 8026ba2:	2afe      	cmp	r2, #254	; 0xfe
 8026ba4:	dd15      	ble.n	8026bd2 <scalbnf+0x66>
 8026ba6:	ee10 3a10 	vmov	r3, s0
 8026baa:	eddf 7a24 	vldr	s15, [pc, #144]	; 8026c3c <scalbnf+0xd0>
 8026bae:	eddf 6a24 	vldr	s13, [pc, #144]	; 8026c40 <scalbnf+0xd4>
 8026bb2:	2b00      	cmp	r3, #0
 8026bb4:	eeb0 7a67 	vmov.f32	s14, s15
 8026bb8:	bfb8      	it	lt
 8026bba:	eef0 7a66 	vmovlt.f32	s15, s13
 8026bbe:	ee27 0a27 	vmul.f32	s0, s14, s15
 8026bc2:	4770      	bx	lr
 8026bc4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8026c44 <scalbnf+0xd8>
 8026bc8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8026bcc:	4770      	bx	lr
 8026bce:	0dd2      	lsrs	r2, r2, #23
 8026bd0:	e7e6      	b.n	8026ba0 <scalbnf+0x34>
 8026bd2:	2a00      	cmp	r2, #0
 8026bd4:	dd06      	ble.n	8026be4 <scalbnf+0x78>
 8026bd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8026bda:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8026bde:	ee00 3a10 	vmov	s0, r3
 8026be2:	4770      	bx	lr
 8026be4:	f112 0f16 	cmn.w	r2, #22
 8026be8:	da1a      	bge.n	8026c20 <scalbnf+0xb4>
 8026bea:	f24c 3350 	movw	r3, #50000	; 0xc350
 8026bee:	4298      	cmp	r0, r3
 8026bf0:	ee10 3a10 	vmov	r3, s0
 8026bf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8026bf8:	dd0a      	ble.n	8026c10 <scalbnf+0xa4>
 8026bfa:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8026c3c <scalbnf+0xd0>
 8026bfe:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8026c40 <scalbnf+0xd4>
 8026c02:	eef0 7a40 	vmov.f32	s15, s0
 8026c06:	2b00      	cmp	r3, #0
 8026c08:	bf18      	it	ne
 8026c0a:	eeb0 0a47 	vmovne.f32	s0, s14
 8026c0e:	e7db      	b.n	8026bc8 <scalbnf+0x5c>
 8026c10:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8026c44 <scalbnf+0xd8>
 8026c14:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8026c48 <scalbnf+0xdc>
 8026c18:	eef0 7a40 	vmov.f32	s15, s0
 8026c1c:	2b00      	cmp	r3, #0
 8026c1e:	e7f3      	b.n	8026c08 <scalbnf+0x9c>
 8026c20:	3219      	adds	r2, #25
 8026c22:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8026c26:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8026c2a:	eddf 7a08 	vldr	s15, [pc, #32]	; 8026c4c <scalbnf+0xe0>
 8026c2e:	ee07 3a10 	vmov	s14, r3
 8026c32:	e7c4      	b.n	8026bbe <scalbnf+0x52>
 8026c34:	ffff3cb0 	.word	0xffff3cb0
 8026c38:	4c000000 	.word	0x4c000000
 8026c3c:	7149f2ca 	.word	0x7149f2ca
 8026c40:	f149f2ca 	.word	0xf149f2ca
 8026c44:	0da24260 	.word	0x0da24260
 8026c48:	8da24260 	.word	0x8da24260
 8026c4c:	33000000 	.word	0x33000000

08026c50 <_init>:
 8026c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026c52:	bf00      	nop
 8026c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026c56:	bc08      	pop	{r3}
 8026c58:	469e      	mov	lr, r3
 8026c5a:	4770      	bx	lr

08026c5c <_fini>:
 8026c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026c5e:	bf00      	nop
 8026c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026c62:	bc08      	pop	{r3}
 8026c64:	469e      	mov	lr, r3
 8026c66:	4770      	bx	lr
